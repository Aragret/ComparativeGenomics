%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:37 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGUAACAUGACUAACACCCUUAAUUCCAUCCACCCUCCUCUCCCUAGGAGGCCUGCCCCCGCUxxxxxxxxxxACUACUCACUCUCACUGCCCAAGAACUAUCAAACUCCUGAGCCAACAACUUAAUAUGACUACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[197.35020447 96.86764526]
[185.57594299 105.98993683]
[170.99172974 99.85710907]
[156.08729553 101.54750824]
[141.18284607 103.23790741]
[126.27839661 104.92829895]
[111.37394714 106.61869812]
[98.08660889 113.57905579]
[88.21089935 124.86933899]
[78.33518982 136.15962219]
[68.45948792 147.44989014]
[74.49739075 161.46797180]
[73.84655762 176.71720886]
[66.63621521 190.16986084]
[54.29798126 199.15487671]
[39.28161621 201.88830566]
[24.56863594 197.82739258]
[13.08031082 187.77845764]
[7.09765720 173.73670959]
[7.80853462 158.49015808]
[15.07179737 145.06600952]
[27.44532013 136.12963867]
[42.47233200 133.45538330]
[57.16920471 137.57418823]
[67.04491425 126.28391266]
[76.92061615 114.99362946]
[86.79632568 103.70334625]
[85.56986237 96.30430603]
[71.49026489 101.47779846]
[57.41066742 106.65128326]
[44.94182205 114.98961639]
[30.26807976 111.87814331]
[22.25628090 99.19701385]
[25.74767876 84.60900116]
[38.63254547 76.92913818]
[53.12528610 80.79833221]
[68.12110901 81.15228271]
[83.11693573 81.50623322]
[81.89047241 74.10719299]
[68.90008545 66.60719299]
[50.52006149 67.06023407]
[42.29563904 51.58756638]
[29.15400696 44.35586548]
[16.01237679 37.12416077]
[2.87074447 29.89245987]
[-10.27088737 22.66075706]
[-23.41251945 15.42905426]
[-38.51935196 20.07223320]
[-52.44541168 12.59959030]
[-56.92861176 -2.55549026]
[-49.30915070 -16.40176582]
[-34.10752106 -20.72448730]
[-20.34257507 -12.95906162]
[-16.18081665 2.28742313]
[-3.03918457 9.51912594]
[10.10244656 16.75082779]
[23.24407768 23.98253059]
[36.38571167 31.21423340]
[49.52733994 38.44593430]
[61.26852417 35.37887573]
[72.29341888 41.34737778]
[76.40008545 53.61680984]
[89.39047241 61.11680984]
[109.68354797 91.71424866]
[124.58799744 90.02385712]
[139.49244690 88.33345795]
[154.39689636 86.64305878]
[169.30134583 84.95265961]
[182.14166260 75.70946503]
[195.65980530 81.96320343]
[195.07423401 66.96772003]
[195.59771729 51.96995163]
[197.22741699 37.05179596]
[199.95440674 22.29473877]
[203.76379395 7.77937603]
[208.63478088 -6.41501188]
[214.54077148 -20.21089935]
[221.44950867 -33.53293991]
[229.32322693 -46.30836868]
[238.11895752 -58.46741104]
[247.78865051 -69.94365692]
[258.27951050 -80.67443085]
[269.53417969 -90.60112000]
[281.49127197 -99.66950989]
[294.08541870 -107.83007050]
[307.24783325 -115.03823090]
[320.90667725 -121.25461578]
[334.98730469 -126.44528961]
[349.41284180 -130.58189392]
[364.10446167 -133.64183044]
[378.98196411 -135.60838318]
[393.96405029 -136.47082520]
[408.96893311 -136.22444153]
[423.91464233 -134.87057495]
[438.71957397 -132.41662598]
[453.30279541 -128.87599182]
[467.58474731 -124.26799774]
[481.48736572 -118.61783600]
[494.93472290 -111.95635223]
[507.85342407 -104.31993103]
[520.17285156 -95.75028229]
[531.82574463 -86.29421234]
[542.74847412 -76.00336456]
[552.88134766 -64.93394470]
[562.16900635 -53.14641190]
[570.56079102 -40.70514679]
[578.01086426 -27.67809486]
[584.47845459 -14.13641357]
[589.92834473 -0.15405883]
[594.33068848 14.19260025]
[597.66143799 28.82520676]
[599.90246582 43.66384125]
[601.04150391 58.62745667]
[601.07232666 73.63433075]
[599.99468994 88.60250092]
[597.81463623 103.45021057]
[594.54394531 118.09636688]
[590.20056152 132.46098328]
[584.80816650 146.46559143]
[578.39617920 160.03370667]
[570.99969482 173.09123230]
[562.65905762 185.56684875]
[553.41979980 197.39241028]
[543.33245850 208.50334167]
[532.45208740 218.83894348]
[520.83813477 228.34277344]
[508.55398560 236.96292114]
[495.66674805 244.65231323]
[482.24685669 251.36895752]
[468.36755371 257.07614136]
[454.10464478 261.74273682]
[439.53604126 265.34320068]
[424.74133301 267.85791016]
[409.80133057 269.27313232]
[394.79757690 269.58111572]
[379.81204224 268.78018188]
[364.92660522 266.87472534]
[350.22253418 263.87512207]
[335.78015137 259.79779053]
[321.67834473 254.66496277]
[307.99411011 248.50469971]
[294.80218506 241.35064697]
[282.17465210 233.24185181]
[270.18045044 224.22264099]
[258.88510132 214.34223938]
[248.35028076 203.65461731]
[238.63356018 192.21817017]
[229.78797913 180.09533691]
[221.86186218 167.35234070]
[214.89849854 154.05877686]
[208.93592834 140.28726196]
[204.00669861 126.11298370]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 70]
[3 68]
[4 67]
[5 66]
[6 65]
[7 64]
[8 27]
[9 26]
[10 25]
[11 24]
[39 63]
[40 62]
[42 59]
[43 58]
[44 57]
[45 56]
[46 55]
[47 54]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
