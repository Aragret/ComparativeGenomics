%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:11 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGAUCACCCUAUUAACCACUCACGGGAGCUCUCCAUGCAUUUGGUAUUUUCGUCUGGGGGGUxxxxxxxxxxUUUCGUCUGGGGGGUAUGCACGCGAUAGCAUUGCGAGACGCUGGAGCCGGAGCACCCUAUCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[79.44656372 410.64526367]
[82.03755951 391.43753052]
[82.34961700 376.44076538]
[82.66167450 361.44403076]
[82.97373199 346.44726562]
[83.28578186 331.45053101]
[83.59783936 316.45376587]
[83.90989685 301.45700073]
[84.22195435 286.46026611]
[84.53401184 271.46350098]
[70.87835693 268.16247559]
[58.21303177 262.06805420]
[47.10258484 253.44900513]
[38.04285431 242.68656921]
[31.43887711 230.25778198]
[27.58676147 216.71424866]
[26.66041565 202.65771484]
[28.70369911 188.71324158]
[33.62835693 175.50152588]
[41.21782303 163.61114502]
[51.13673782 153.57247925]
[62.94578171 145.83392334]
[76.12111664 140.74192810]
[90.07764435 138.52548218]
[91.01327515 123.55468750]
[84.01911163 119.49860382]
[78.66858673 113.43708801]
[64.17299652 117.29425049]
[49.67739487 121.15141296]
[38.44962692 133.10420227]
[22.54832077 129.09414673]
[18.33137894 113.24645996]
[30.13682938 101.86386871]
[45.82023621 106.65581512]
[60.31583405 102.79865265]
[74.81143188 98.94149780]
[78.48087311 86.86563110]
[87.54347992 78.08152008]
[99.72796631 74.79066467]
[104.03554535 60.42248154]
[108.34313202 46.05429840]
[112.65071869 31.68611336]
[116.95830536 17.31793022]
[117.36138153 -14.67245960]
[115.18453979 -29.51366425]
[113.00770569 -44.35486984]
[110.83087158 -59.19607544]
[108.65402985 -74.03728485]
[93.63539886 -73.77451324]
[78.70647430 -75.43450165]
[64.11240387 -78.98997498]
[50.09283447 -84.38256836]
[36.87798309 -91.52371216]
[24.68484306 -100.29615021]
[13.71364117 -110.55583191]
[4.14453459 -122.13427734]
[-3.86534429 -134.84136963]
[-10.18446541 -148.46844482]
[-14.70906353 -162.79171753]
[-17.36484146 -177.57600403]
[-18.10818672 -192.57853699]
[-16.92689323 -207.55294800]
[-13.84036160 -222.25334167]
[-8.89927292 -236.43832397]
[-2.18476462 -249.87498474]
[6.19290447 -262.34265137]
[16.09616470 -273.63662720]
[27.36239815 -283.57144165]
[39.80659866 -291.98394775]
[53.22442627 -298.73599243]
[67.39554596 -303.71673584]
[82.08724976 -306.84436035]
[97.05829620 -308.06753540]
[112.06284332 -307.36611938]
[126.85449982 -304.75170898]
[141.19036865 -300.26718140]
[154.83506775 -293.98617554]
[167.56449890 -286.01187134]
[179.16966248 -276.47518921]
[189.45999146 -265.53271484]
[198.26649475 -253.36415100]
[205.44456482 -240.16932678]
[210.87632751 -226.16488647]
[214.47261047 -211.58081055]
[216.17433167 -196.65658569]
[215.95356750 -181.63728333]
[213.81393433 -166.76953125]
[209.79055786 -152.29745483]
[203.94952393 -138.45872498]
[196.38673401 -125.48056030]
[187.22637939 -113.57609558]
[176.61889648 -102.94080353]
[164.73844910 -93.74932098]
[151.78012085 -86.15259552]
[137.95672607 -80.27535248]
[123.49523926 -76.21411896]
[125.67207336 -61.37291336]
[127.84891510 -46.53170776]
[130.02574158 -31.69050217]
[132.20259094 -16.84929657]
[144.55415344 -8.33820629]
[159.19766235 -11.58903217]
[173.84115601 -14.83985806]
[188.48466492 -18.09068298]
[203.12815857 -21.34150887]
[217.77166748 -24.59233475]
[231.92398071 -33.92765808]
[244.81222534 -22.91269302]
[237.79554749 -7.47887897]
[221.02249146 -9.94883347]
[206.37898254 -6.69800806]
[191.73548889 -3.44718218]
[177.09197998 -0.19635652]
[162.44848633 3.05446935]
[147.80497742 6.30529499]
[162.54170227 9.10334396]
[171.59783936 21.06103325]
[170.29769897 36.00458145]
[159.31253052 46.21860123]
[144.31402588 46.42957306]
[133.04591370 36.52856827]
[131.32649231 21.62551498]
[127.01890564 35.99369812]
[122.71131897 50.36188126]
[118.40373230 64.73006439]
[114.09614563 79.09825134]
[124.66780090 94.79577637]
[121.33836365 113.42605591]
[105.98406219 124.49031067]
[105.04843140 139.46110535]
[120.36328888 144.14031982]
[134.12312317 152.31578064]
[145.54394531 163.51702881]
[153.97610474 177.10134888]
[158.94128418 192.29061890]
[160.15963745 208.21589661]
[157.56553650 223.96713257]
[151.31106567 238.64518738]
[141.75721741 251.41311646]
[129.45292664 261.54391479]
[115.10363007 268.46194458]
[99.53076172 271.77554321]
[99.21870422 286.77230835]
[98.90665436 301.76907349]
[98.59459686 316.76580811]
[98.28253937 331.76257324]
[97.97048187 346.75933838]
[97.65842438 361.75607300]
[97.34636688 376.75283813]
[97.03431702 391.74957275]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 150]
[3 149]
[4 148]
[5 147]
[6 146]
[7 145]
[8 144]
[9 143]
[10 142]
[24 130]
[25 129]
[27 36]
[28 35]
[29 34]
[39 126]
[40 125]
[41 124]
[42 123]
[43 122]
[44 100]
[45 99]
[46 98]
[47 97]
[48 96]
[101 115]
[102 114]
[103 113]
[104 112]
[105 111]
[106 110]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
