%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:44 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGAAAAUAAAAAAUUAUAACAAACCCUGAGAACCAAAAUGAACGAAAAUCUGUUCGCUUCAUUxxxxxxxxxxAAUAGCCAUCGCUGUAGUAUAUCCAAAGACAACCAUCAUUCCCCCUAAAUAAAUUAAAAAACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[92.50000000 92.50000000]
[92.50000000 77.50000000]
[92.50000000 62.50000000]
[92.50000000 47.50000000]
[92.50000000 32.50000000]
[92.50000000 17.50000000]
[92.50000000 2.49999952]
[92.50000000 -12.50000000]
[92.50000000 -27.50000000]
[92.50000000 -42.50000000]
[77.51371765 -43.20315170]
[62.57686615 -44.60796738]
[47.72227859 -46.71136856]
[32.98261261 -49.50872421]
[18.39026070 -52.99389267]
[3.97730780 -57.15920258]
[-10.22456646 -61.99550629]
[-24.18414307 -67.49216461]
[-37.87073517 -73.63710785]
[-51.25425339 -80.41680908]
[-64.30528259 -87.81638336]
[-76.99513245 -95.81954956]
[-89.29591370 -104.40872955]
[-101.18057251 -113.56503296]
[-112.62299347 -123.26833344]
[-123.59802246 -133.49729919]
[-134.08152771 -144.22944641]
[-144.05047607 -155.44119263]
[-153.48295593 -167.10787964]
[-162.35820007 -179.20385742]
[-170.65673828 -191.70256042]
[-178.36032104 -204.57649231]
[-185.45198059 -217.79734802]
[-191.91616821 -231.33609009]
[-197.73866272 -245.16293335]
[-202.90666199 -259.24749756]
[-207.40879822 -273.55880737]
[-211.23518372 -288.06542969]
[-214.37739563 -302.73544312]
[-216.82855225 -317.53662109]
[-218.58323669 -332.43643188]
[-219.63760376 -347.40209961]
[-219.98933411 -362.40075684]
[-219.63766479 -377.39938354]
[-218.58335876 -392.36508179]
[-216.82873535 -407.26486206]
[-214.37765503 -422.06607056]
[-211.23550415 -436.73611450]
[-207.40917969 -451.24273682]
[-202.90710449 -465.55407715]
[-197.73916626 -479.63864136]
[-191.91674805 -493.46551514]
[-185.45260620 -507.00427246]
[-178.36099243 -520.22515869]
[-170.65748596 -533.09912109]
[-162.35899353 -545.59790039]
[-153.48379517 -557.69390869]
[-144.05137634 -569.36059570]
[-134.08247375 -580.57238770]
[-123.59901428 -591.30462646]
[-112.62403107 -601.53363037]
[-101.18164825 -611.23699951]
[-89.29702759 -620.39331055]
[-76.99629211 -628.98254395]
[-64.30647278 -636.98577881]
[-51.25547409 -644.38543701]
[-37.87198257 -651.16516113]
[-24.18541908 -657.31018066]
[-10.22586632 -662.80688477]
[3.97598720 -667.64324951]
[18.38892174 -671.80865479]
[32.98125839 -675.29388428]
[47.72091293 -678.09124756]
[62.57549286 -680.19476318]
[77.51233673 -681.59960938]
[92.49861908 -682.30285645]
[107.50138092 -682.30285645]
[122.48766327 -681.59960938]
[137.42451477 -680.19476318]
[152.27908325 -678.09124756]
[167.01873779 -675.29388428]
[181.61108398 -671.80865479]
[196.02401733 -667.64324951]
[210.22586060 -662.80688477]
[224.18542480 -657.31018066]
[237.87197876 -651.16516113]
[251.25547791 -644.38543701]
[264.30648804 -636.98577881]
[276.99627686 -628.98254395]
[289.29702759 -620.39331055]
[301.18164062 -611.23699951]
[312.62402344 -601.53363037]
[323.59899902 -591.30462646]
[334.08248901 -580.57238770]
[344.05136108 -569.36059570]
[353.48379517 -557.69390869]
[362.35900879 -545.59790039]
[370.65747070 -533.09912109]
[378.36099243 -520.22515869]
[385.45260620 -507.00427246]
[391.91674805 -493.46551514]
[397.73916626 -479.63864136]
[402.90710449 -465.55407715]
[407.40917969 -451.24273682]
[411.23550415 -436.73611450]
[414.37765503 -422.06607056]
[416.82873535 -407.26486206]
[418.58337402 -392.36508179]
[419.63766479 -377.39938354]
[419.98934937 -362.40075684]
[419.63760376 -347.40209961]
[418.58322144 -332.43643188]
[416.82855225 -317.53662109]
[414.37741089 -302.73544312]
[411.23516846 -288.06542969]
[407.40878296 -273.55880737]
[402.90664673 -259.24749756]
[397.73867798 -245.16293335]
[391.91616821 -231.33609009]
[385.45199585 -217.79734802]
[378.36032104 -204.57649231]
[370.65673828 -191.70256042]
[362.35821533 -179.20385742]
[353.48294067 -167.10787964]
[344.05047607 -155.44119263]
[334.08154297 -144.22944641]
[323.59802246 -133.49729919]
[312.62298584 -123.26833344]
[301.18057251 -113.56503296]
[289.29589844 -104.40872955]
[276.99514771 -95.81954956]
[264.30529785 -87.81638336]
[251.25425720 -80.41680908]
[237.87072754 -73.63710785]
[224.18414307 -67.49216461]
[210.22456360 -61.99550629]
[196.02268982 -57.15920258]
[181.60974121 -52.99389267]
[167.01739502 -49.50872421]
[152.27772522 -46.71136856]
[137.42312622 -44.60796738]
[122.48628235 -43.20315170]
[107.50000000 -42.50000000]
[107.50000000 -27.50000000]
[107.50000000 -12.50000000]
[107.50000000 2.49999952]
[107.50000000 17.50000000]
[107.50000000 32.50000000]
[107.50000000 47.50000000]
[107.50000000 62.50000000]
[107.50000000 77.50000000]
[107.50000000 92.50000000]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 152]
[2 151]
[3 150]
[4 149]
[5 148]
[6 147]
[7 146]
[8 145]
[9 144]
[10 143]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
