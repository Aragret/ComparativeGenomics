%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:04 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCCCUAUUAACCACUCACGGGAGCUCUCCAUGCAUUUGGUAUUUUCGUCUGGGGGGUAUGCAxxxxxxxxxxAUAGCUUUUUGAUGACUUCUAGCAAGCCUCGCUAACCUCGCCUUACCCCCCACUAUUAACCCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[92.50000000 319.28762817]
[92.50000000 304.28762817]
[92.50000000 289.28762817]
[92.50000000 274.28762817]
[92.50000000 259.28762817]
[92.50000000 244.28762817]
[92.50000000 229.28762817]
[92.50000000 214.28762817]
[92.50000000 199.28762817]
[92.50000000 184.28762817]
[81.18939209 182.50343323]
[70.22320557 179.20857239]
[59.80224609 174.46337891]
[50.11731339 168.35475159]
[41.34574509 160.99453735]
[33.64814758 152.51748657]
[27.16547012 143.07884216]
[22.01640892 132.85140991]
[18.29524612 122.02245331]
[3.52312946 124.62717438]
[-11.24898720 127.23189545]
[-26.02110291 129.83662415]
[-40.31523132 134.38391113]
[-53.87712860 140.79289246]
[-67.43902588 147.20185852]
[-76.32621002 160.98410034]
[-92.69004822 159.90855408]
[-99.69683075 145.08164978]
[-90.13858032 131.75604248]
[-73.84799957 133.63996887]
[-60.28610611 127.23098755]
[-46.72420883 120.82201385]
[-61.53423309 118.44226074]
[-74.15662384 110.33824158]
[-82.48468781 97.86253357]
[-85.12844086 83.09735107]
[-81.64664459 68.50704193]
[-72.62040710 56.52676392]
[-59.55624008 49.15604401]
[-44.63457489 47.62508011]
[-30.34586906 52.18938446]
[-19.07493973 62.08717346]
[-12.70293331 75.66648102]
[-12.29334831 90.66088104]
[-17.91454697 104.56779480]
[-28.62582588 115.06450653]
[-13.85370922 112.45977783]
[0.91840684 109.85505676]
[15.69052315 107.25033569]
[15.90575886 90.57588959]
[19.38678741 74.26742554]
[25.99842453 58.95828629]
[35.48390961 45.24300003]
[47.47486877 33.65419388]
[61.50563812 24.64192581]
[77.03133392 18.55618095]
[93.44901276 15.63330078]
[110.12110901 15.98679543]
[126.40013885 19.60293770]
[141.65393066 26.34129143]
[155.29010010 35.94017792]
[166.05877686 25.49816895]
[176.82745361 15.05615902]
[187.59613037 4.61414957]
[198.36480713 -5.82785940]
[209.13348389 -16.26986885]
[219.90216064 -26.71187782]
[224.49635315 -44.51424026]
[241.62907410 -48.19040298]
[252.18109131 -58.85131454]
[244.33981323 -70.69165802]
[238.98519897 -83.83930206]
[236.32501221 -97.77876282]
[236.46138000 -111.96395874]
[239.38690186 -125.83956146]
[244.98509216 -138.86279297]
[253.03488159 -150.52462769]
[263.21948242 -160.36965942]
[275.13873291 -168.01394653]
[288.32492065 -173.15995789]
[302.26107788 -175.60812378]
[316.40130615 -175.26460266]
[330.19204712 -172.14489746]
[343.09387207 -166.37310791]
[354.60253906 -158.17709351]
[365.58334351 -168.39579773]
[376.56414795 -178.61450195]
[387.54495239 -188.83320618]
[381.61358643 -202.78292847]
[380.81408691 -217.92018127]
[385.24304199 -232.41709900]
[394.36560059 -244.52307129]
[407.08020020 -252.77626038]
[421.85144043 -256.18005371]
[436.89566040 -254.32344055]
[450.39620972 -247.43058777]
[460.72277832 -236.33386230]
[466.62844849 -222.37322998]
[467.40002441 -207.23452759]
[462.94436646 -192.74580383]
[453.79953003 -180.65666199]
[441.06976318 -172.42691040]
[426.29223633 -169.05033875]
[411.25146484 -170.93469238]
[397.76367188 -177.85240173]
[386.78286743 -167.63369751]
[375.80206299 -157.41499329]
[364.82125854 -147.19628906]
[372.89929199 -133.56413269]
[377.77423096 -118.47977448]
[379.20321655 -102.68505096]
[377.11297607 -86.95739746]
[371.60345459 -72.07162476]
[362.94320679 -58.76171112]
[351.55612183 -47.68463516]
[338.00088501 -39.38793945]
[322.94335938 -34.28266525]
[307.12399292 -32.62299347]
[291.32144165 -34.49358749]
[276.31414795 -39.80527115]
[262.84201050 -48.29929733]
[252.28999329 -37.63838959]
[252.02684021 -25.50607872]
[243.26907349 -16.53540993]
[230.34417725 -15.94319916]
[219.57550049 -5.50118971]
[208.80682373 4.94081926]
[198.03813171 15.38282871]
[187.26945496 25.82483864]
[176.50077820 36.26684570]
[165.73210144 46.70885468]
[174.22198486 59.35824203]
[180.30624390 73.32487488]
[183.78768921 88.15608215]
[184.55348206 103.37116241]
[182.57879639 118.47698212]
[177.92762756 132.98393250]
[170.75074768 146.42184448]
[161.28074646 158.35516357]
[149.82456970 168.39714050]
[136.75350952 176.22227478]
[122.49124146 181.57695007]
[107.50000000 184.28762817]
[107.50000000 199.28762817]
[107.50000000 214.28762817]
[107.50000000 229.28762817]
[107.50000000 244.28762817]
[107.50000000 259.28762817]
[107.50000000 274.28762817]
[107.50000000 289.28762817]
[107.50000000 304.28762817]
[107.50000000 319.28762817]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 152]
[2 151]
[3 150]
[4 149]
[5 148]
[6 147]
[7 146]
[8 145]
[9 144]
[10 143]
[19 49]
[20 48]
[21 47]
[22 46]
[23 32]
[24 31]
[25 30]
[61 131]
[62 130]
[63 129]
[64 128]
[65 127]
[66 126]
[67 125]
[69 122]
[70 121]
[85 108]
[86 107]
[87 106]
[88 105]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
