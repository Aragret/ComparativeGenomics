%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:19 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGUUACCAAAAACAUCACCUCUAGCAUCACCAGUAUUAGAGGCACCGCCUGCCCAGUGACACAUxxxxxxxxxxGCCAAAACCUGCCCCUACUCCUCCUAGACCUAACCUGACUAGAAAAGCUAUUACCUAAAACACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[107.18709564 364.81842041]
[107.18709564 349.81842041]
[107.18709564 334.81842041]
[107.18709564 319.81842041]
[107.18709564 304.81842041]
[107.18709564 289.81842041]
[107.18709564 274.81842041]
[107.18709564 259.81842041]
[107.18709564 244.81840515]
[107.18709564 229.81840515]
[104.61564636 215.04046631]
[99.54888153 200.92210388]
[96.18223572 215.53941345]
[87.84438324 228.00859070]
[75.62211609 236.70434570]
[61.10852814 240.49324036]
[46.19537735 238.88143921]
[32.82650375 232.07899475]
[22.74445152 220.97259521]
[17.26335716 207.00987244]
[17.09764671 192.01078796]
[22.26892090 177.93037415]
[32.10313416 166.60394287]
[45.31846237 159.50779724]
[60.19235992 157.56689453]
[74.78611755 161.03422546]
[87.19751740 169.45782471]
[95.80913544 181.74043274]
[95.20125580 166.75276184]
[94.59336853 151.76507568]
[93.98548126 136.77740479]
[93.37760162 121.78972626]
[82.03043365 120.60611725]
[71.01747131 113.34587097]
[63.52704239 100.34394073]
[48.62014771 98.67527008]
[39.57339478 111.08702850]
[25.52629662 117.29787445]
[10.25745678 115.63712311]
[-2.12588573 106.55151367]
[-8.29267311 92.48501587]
[-6.58407164 77.22145844]
[2.54031467 64.86665344]
[16.62607193 58.74398804]
[31.88420105 60.50042725]
[44.21034241 69.66349030]
[50.28882599 83.76837158]
[65.19571686 85.43704987]
[70.83047485 71.53562927]
[58.96884155 62.35403824]
[47.10720444 53.17244720]
[35.24556732 43.99085617]
[19.21345329 44.58320999]
[8.86415672 32.32467651]
[12.13677025 16.61895943]
[26.52082634 9.51413918]
[40.98210907 16.46042442]
[44.42715836 32.12922287]
[56.28879547 41.31081009]
[68.15042877 50.49240112]
[80.01206207 59.67399216]
[94.73486328 56.80356598]
[102.27870178 43.83859634]
[109.82254028 30.87362289]
[97.80667114 21.86610222]
[86.91778564 11.52450085]
[77.30313873 -0.01131898]
[69.09276581 -12.58535004]
[62.39769745 -26.02754402]
[57.30847549 -40.15610886]
[53.89392853 -54.77997208]
[52.20022964 -69.70136261]
[52.25028992 -84.71849060]
[54.04343033 -99.62825775]
[57.55540466 -114.22902679]
[62.73870850 -128.32334900]
[69.52324677 -141.72061157]
[77.81727600 -154.23962402]
[87.50861359 -165.71107483]
[98.46620178 -175.97985840]
[110.54186249 -184.90705872]
[123.57226562 -192.37197876]
[137.38121033 -198.27365112]
[151.78192139 -202.53227234]
[166.57968140 -205.09022522]
[181.57432556 -205.91293335]
[196.56311035 -204.98927307]
[211.34329224 -202.33172607]
[225.71501160 -197.97624207]
[239.48390198 -191.98171997]
[252.46374512 -184.42922974]
[264.47900391 -175.42089844]
[275.36721802 -165.07856750]
[284.98107910 -153.54211426]
[293.19061279 -140.96752930]
[299.88479614 -127.52488708]
[304.97305298 -113.39598846]
[308.38662720 -98.77189636]
[310.07934570 -83.85038757]
[310.02825928 -68.83326721]
[308.23413086 -53.92362213]
[304.72119141 -39.32308197]
[299.53695679 -25.22910881]
[292.75152588 -11.83230400]
[284.45666504 0.68615574]
[274.76455688 12.15697098]
[263.80627441 22.42501259]
[251.73002625 31.35141754]
[238.69911194 38.81546783]
[224.88978577 44.71621704]
[210.48876953 48.97386551]
[195.69085693 51.53083420]
[180.69615173 52.35254669]
[165.70742798 51.42788315]
[150.92742920 48.76935196]
[136.55599976 44.41290665]
[122.78751373 38.41746140]
[115.24366760 51.38243484]
[107.69982910 64.34740448]
[129.52537537 97.58203888]
[108.36528015 121.18184662]
[108.97315979 136.16952515]
[109.58104706 151.15719604]
[110.18892670 166.14488220]
[110.79681396 181.13255310]
[113.66723633 195.85534668]
[118.73400116 209.97369385]
[121.84510040 195.29988098]
[129.47554016 182.38569641]
[140.82768250 172.58114624]
[154.71478271 166.91119385]
[169.68513489 165.96853638]
[184.17378235 169.85174561]
[196.66610718 178.15484619]
[205.85623169 190.00987244]
[210.78341675 204.17755127]
[210.93258667 219.17680359]
[206.28817749 233.43968201]
[197.33567810 245.47515869]
[185.01095581 254.02508545]
[170.60241699 258.19567871]
[155.61627197 257.55099487]
[141.61915588 252.15837097]
[130.07424927 242.58155823]
[122.18709564 229.81840515]
[122.18709564 244.81840515]
[122.18709564 259.81842041]
[122.18709564 274.81842041]
[122.18709564 289.81842041]
[122.18709564 304.81842041]
[122.18709564 319.81842041]
[122.18709564 334.81842041]
[122.18709564 349.81842041]
[122.18709564 364.81842041]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 154]
[2 153]
[3 152]
[4 151]
[5 150]
[6 149]
[7 148]
[8 147]
[9 146]
[10 145]
[11 127]
[12 126]
[28 125]
[29 124]
[30 123]
[31 122]
[32 121]
[35 48]
[36 47]
[49 61]
[50 60]
[51 59]
[52 58]
[62 119]
[63 118]
[64 117]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
