%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:03 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCCACACUCCACGGAAGCAAUAUGAAAUGAUCUGCUGCAGUGCUCUGAGCCCUAGGAUUCAUxxxxxxxxxxAUAUACCAAUGAUGGCGCGAUGUAACACGAGAAAGCACAUACCAAGGCCACCACACACCACCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[92.36782074 257.07247925]
[92.36782074 242.07249451]
[92.36782074 227.07249451]
[92.36782074 212.07249451]
[92.36782074 197.07249451]
[92.36782074 182.07249451]
[92.36782074 167.07249451]
[92.36782074 152.07249451]
[92.36782074 137.07249451]
[92.36782074 122.07249451]
[81.70691681 111.52047729]
[66.70770264 111.67447662]
[56.69931412 126.73220062]
[39.81939316 132.76033020]
[22.83585167 127.54061127]
[12.43989372 113.32528687]
[-2.54034781 114.09494781]
[-17.52058792 114.86460876]
[-32.45660019 116.24863434]
[-47.32320023 118.24468994]
[-62.18980026 120.24075317]
[-74.83763123 129.74563599]
[-88.48132324 123.77076721]
[-101.12915802 133.27565002]
[-114.77285004 127.30078888]
[-129.63945007 129.29684448]
[-144.50604248 131.29290771]
[-159.37265015 133.28895569]
[-162.81526184 136.16088867]
[-166.61578369 137.60298157]
[-170.26824951 137.68225098]
[-173.34326172 136.62702942]
[-175.53504944 134.78662109]
[-190.51528931 135.55628967]
[-202.28672791 146.45642090]
[-218.12591553 143.90689087]
[-225.88235474 129.86349487]
[-219.60600281 115.09911346]
[-204.11152649 110.93972015]
[-191.28495789 120.57604218]
[-176.30471802 119.80638885]
[-161.36869812 118.42236328]
[-146.50210571 116.42630005]
[-131.63549805 114.43024445]
[-116.76890564 112.43418884]
[-105.18442535 103.07207489]
[-90.47737885 108.90416718]
[-78.89290619 99.54205322]
[-64.18585205 105.37415314]
[-49.31925583 103.37809753]
[-34.45265961 101.38203430]
[-32.63635635 99.17023468]
[-29.80759621 97.56793976]
[-26.20276070 96.97472382]
[-22.20197105 97.69391632]
[-18.29024887 99.88436890]
[-3.31000781 99.11470795]
[11.67023373 98.34504700]
[16.74785995 87.24202728]
[26.13541222 79.32328033]
[38.07531738 76.15225983]
[50.29731750 78.39588928]
[60.45011139 85.68538666]
[66.55371094 96.67526245]
[81.55291748 96.52127075]
[83.18420410 88.69100189]
[88.20231628 81.71878815]
[96.12516785 77.07505035]
[98.57809448 62.27696991]
[101.03102112 47.47888947]
[103.48394775 32.68081284]
[90.04615021 25.73237228]
[79.41467285 14.97008133]
[72.63108063 1.44831860]
[70.35996246 -13.50819206]
[72.82381439 -28.43416214]
[79.78125763 -41.86730194]
[90.55066681 -52.49156189]
[104.07697296 -59.26609421]
[119.03500366 -61.52719116]
[133.95932007 -59.05333710]
[147.38778687 -52.08689499]
[158.00483704 -41.31036758]
[164.77030945 -27.77952576]
[167.02137756 -12.81998539]
[164.53752136 2.10267067]
[157.56208801 15.52647209]
[146.77844238 26.13629341]
[133.24307251 32.89268875]
[118.28202820 35.13373947]
[115.82910156 49.93181992]
[113.37617493 64.72989655]
[110.92324066 79.52797699]
[121.14195251 90.50878143]
[136.07795715 89.12475586]
[151.01397705 87.74073029]
[165.94998169 86.35670471]
[174.94146729 69.53503418]
[192.08853149 61.52664948]
[210.46745300 65.36815643]
[222.77453613 79.35052490]
[237.59701538 77.04965210]
[252.41949463 74.74877930]
[267.24197388 72.44789886]
[271.18804932 57.73911667]
[280.78063965 45.91107559]
[294.35769653 39.01305771]
[309.56701660 38.24018860]
[323.77340698 43.72637177]
[334.51556396 54.52108765]
[339.93234253 68.75409698]
[339.08523560 83.95943451]
[332.12103271 97.50268555]
[320.24630737 107.03740692]
[305.51843262 110.91164398]
[290.48910522 108.45416260]
[277.76223755 100.09073639]
[269.54284668 87.27038574]
[254.72036743 89.57125854]
[239.89788818 91.87213135]
[225.07540894 94.17301178]
[221.90914917 104.97779083]
[214.88464355 113.84277344]
[205.00009155 119.44593048]
[193.68367004 120.93319702]
[182.58724976 118.04843903]
[173.34527588 111.17658234]
[167.33401489 101.29271698]
[152.39799500 102.67674255]
[137.46199036 104.06076813]
[122.52597809 105.44479370]
[136.29710388 111.39089966]
[151.29707336 111.42032623]
[164.35258484 118.80635071]
[172.10400391 131.64830017]
[172.55661011 146.64146423]
[165.59391785 159.92758179]
[153.00769043 168.08766174]
[138.03680420 169.02182007]
[124.53380585 162.48966980]
[115.97350311 150.17214966]
[114.55920410 135.23623657]
[107.36782074 122.07249451]
[107.36782074 137.07249451]
[107.36782074 152.07249451]
[107.36782074 167.07249451]
[107.36782074 182.07249451]
[107.36782074 197.07249451]
[107.36782074 212.07249451]
[107.36782074 227.07249451]
[107.36782074 242.07249451]
[107.36782074 257.07247925]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 152]
[2 151]
[3 150]
[4 149]
[5 148]
[6 147]
[7 146]
[8 145]
[9 144]
[10 143]
[11 65]
[12 64]
[16 58]
[17 57]
[18 56]
[19 51]
[20 50]
[21 49]
[23 47]
[25 45]
[26 44]
[27 43]
[28 42]
[33 41]
[34 40]
[68 93]
[69 92]
[70 91]
[71 90]
[94 131]
[95 130]
[96 129]
[97 128]
[101 121]
[102 120]
[103 119]
[104 118]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
