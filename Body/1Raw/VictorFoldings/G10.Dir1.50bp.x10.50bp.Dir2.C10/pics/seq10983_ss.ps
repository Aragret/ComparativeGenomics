%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:34 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGUCAAAGCCAUACUAUUUAUGUGCUCCGGGUCCAUCAUCCACAACCUUAACAAUGAACAAGAUxxxxxxxxxxCAUCCACAACCUUAACAAUGAACAAGAUAUUCGAAAAAUAGGAGGACUACUCAAAACCAUACCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[92.50000000 283.95571899]
[92.50000000 268.95571899]
[92.50000000 253.95570374]
[92.50000000 238.95570374]
[92.50000000 223.95570374]
[92.50000000 208.95570374]
[92.50000000 193.95570374]
[92.50000000 178.95570374]
[92.50000000 163.95570374]
[92.50000000 148.95570374]
[85.84525299 147.46107483]
[79.45895386 145.06636047]
[73.46221924 141.81695557]
[67.96877289 137.77447510]
[63.08279419 133.01562500]
[50.51655197 141.20643616]
[37.95030975 149.39726257]
[25.46772003 157.71501160]
[13.07006264 166.15882874]
[0.67240453 174.60264587]
[-11.72525311 183.04646301]
[-16.11609077 198.47695923]
[-30.97275543 204.53163147]
[-44.89848709 196.56585693]
[-47.21065521 180.69029236]
[-36.13556290 169.08332825]
[-20.16907310 170.64880371]
[-7.77141428 162.20498657]
[4.62624359 153.76116943]
[17.02390099 145.31735229]
[20.80415726 138.91506958]
[29.75948906 136.83102417]
[42.32572937 128.64019775]
[54.89197159 120.44937897]
[50.72724533 94.98931885]
[59.93191910 70.88883209]
[80.00844574 54.68721390]
[105.50936890 50.78051376]
[109.41611481 36.29820251]
[113.32286835 21.81589317]
[117.22962189 7.33358383]
[121.13637543 -7.14872551]
[119.82121277 -11.42773819]
[119.95920563 -15.48462677]
[121.29402924 -18.88033295]
[123.45075226 -21.30803680]
[125.99077606 -22.62082672]
[131.05754089 -36.73917770]
[136.12429810 -50.85753250]
[122.47121429 -57.09127808]
[109.38763428 -64.44563293]
[96.96534729 -72.86901093]
[85.29147339 -82.30232239]
[74.44791412 -92.67939758]
[64.51072693 -103.92745972]
[55.54961014 -115.96759033]
[47.62741852 -128.71536255]
[40.79972839 -142.08132935]
[35.11442947 -155.97175598]
[30.61139679 -170.28919983]
[27.32222176 -184.93324280]
[25.26997375 -199.80114746]
[24.46904755 -214.78865051]
[24.92506218 -229.79060364]
[26.63481712 -244.70178223]
[29.58632088 -259.41760254]
[33.75887299 -273.83480835]
[39.12319946 -287.85232544]
[45.64167786 -301.37179565]
[53.26858521 -314.29840088]
[61.95041656 -326.54144287]
[71.62628174 -338.01507568]
[82.22830963 -348.63879395]
[93.68212891 -358.33810425]
[105.90740204 -367.04495239]
[118.81838226 -374.69827271]
[132.32449341 -381.24438477]
[146.33099365 -386.63735962]
[160.73966980 -390.83938599]
[175.44941711 -393.82095337]
[190.35705566 -395.56121826]
[205.35804749 -396.04788208]
[220.34715271 -395.27761841]
[235.21923828 -393.25576782]
[249.86996460 -389.99655151]
[264.19659424 -385.52279663]
[278.09860229 -379.86590576]
[291.47851562 -373.06555176]
[304.24246216 -365.16946411]
[316.30087280 -356.23297119]
[327.56924438 -346.31881714]
[337.96847534 -335.49649048]
[347.42562866 -323.84191895]
[355.87438965 -311.43688965]
[363.25546265 -298.36837769]
[369.51712036 -284.72805786]
[374.61541748 -270.61160278]
[378.51458740 -256.11807251]
[381.18725586 -241.34906006]
[382.61474609 -226.40821838]
[382.78695679 -211.40032959]
[381.70275879 -196.43064880]
[379.36972046 -181.60420227]
[375.80419922 -167.02499390]
[371.03121948 -152.79525757]
[365.08425903 -139.01483154]
[358.00503540 -125.78036499]
[349.84320068 -113.18470001]
[340.65597534 -101.31616974]
[330.50787354 -90.25804901]
[319.47000122 -80.08788300]
[307.61984253 -70.87702179]
[295.04046631 -62.69006348]
[281.82015991 -55.58444595]
[268.05163574 -49.61000061]
[253.83145142 -44.80864334]
[239.25936890 -41.21404648]
[224.43760681 -38.85142899]
[209.47013855 -37.73735809]
[194.46192932 -37.87965012]
[179.51826477 -39.27730942]
[164.74395752 -41.92052841]
[150.24266052 -45.79076767]
[145.17588806 -31.67241669]
[140.10913086 -17.55406189]
[135.61868286 -3.24197340]
[131.71192932 11.24033642]
[127.80518341 25.72264481]
[123.89842987 40.20495605]
[119.99167633 54.68726349]
[127.43580627 58.76666641]
[134.07397461 64.05733490]
[139.71119690 70.40385437]
[144.18186951 77.61978912]
[147.35464478 85.49316406]
[149.13633728 93.79268646]
[149.47460938 102.27455902]
[148.35952759 110.68961334]
[145.82382202 118.79064941]
[141.94200134 126.33969116]
[136.82809448 133.11499023]
[130.63233948 138.91749573]
[123.53672028 143.57675171]
[115.74969482 146.95591736]
[107.50000000 148.95570374]
[107.50000000 163.95570374]
[107.50000000 178.95570374]
[107.50000000 193.95570374]
[107.50000000 208.95570374]
[107.50000000 223.95570374]
[107.50000000 238.95570374]
[107.50000000 253.95570374]
[107.50000000 268.95571899]
[107.50000000 283.95571899]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 154]
[2 153]
[3 152]
[4 151]
[5 150]
[6 149]
[7 148]
[8 147]
[9 146]
[10 145]
[15 34]
[16 33]
[17 32]
[18 30]
[19 29]
[20 28]
[21 27]
[38 130]
[39 129]
[40 128]
[41 127]
[42 126]
[47 125]
[48 124]
[49 123]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
