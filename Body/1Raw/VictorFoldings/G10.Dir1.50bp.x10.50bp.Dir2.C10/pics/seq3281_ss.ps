%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:38 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGAACCUCCUACUCCUCAUUGUACCCAUUCUAAUCGCAAUGGCAUUCCUAAUGCUUACCGAAxxxxxxxxxxACCAAAUAAUUCAAGCACUGCUUAUUACAAUUUUACUGGGUCUCUAUUUUACCCUCCUACCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[84.79903412 548.75640869]
[84.79903412 533.75640869]
[84.79903412 518.75640869]
[84.79903412 503.75643921]
[84.79903412 488.75643921]
[84.79903412 473.75643921]
[84.79903412 458.75643921]
[84.79903412 443.75643921]
[84.79903412 428.75643921]
[84.79903412 413.75643921]
[70.85207367 411.06970215]
[57.64196396 405.83984375]
[45.62821198 398.24710083]
[35.22901535 388.55386353]
[26.80672455 377.09570312]
[20.65520859 364.26977539]
[16.98960304 350.52090454]
[15.93878555 336.32632446]
[17.54085159 322.17904663]
[21.74172592 308.57067871]
[28.39699554 295.97448730]
[37.27686691 284.82879639]
[48.07410049 275.52175903]
[60.41464996 268.37789917]
[73.87060547 263.64682007]
[87.97503662 261.49435425]
[88.59901428 246.50732422]
[81.39785004 233.46920776]
[89.70252228 220.00285339]
[80.72968292 204.95332336]
[90.63672638 189.46687317]
[90.94878387 174.47010803]
[91.26084137 159.47335815]
[91.57289886 144.47660828]
[91.88494873 129.47985840]
[82.14439392 125.92402649]
[73.89575958 119.15815735]
[68.19087219 109.79087067]
[65.83838654 98.77211761]
[67.29459381 87.29770660]
[72.59116364 76.67956543]
[81.31023407 68.19589996]
[70.21891785 58.09725189]
[59.12760162 47.99860001]
[46.00407410 52.94015884]
[32.09928513 51.73690033]
[20.13394356 44.68171692]
[12.42446518 33.20689392]
[10.43457031 19.59368324]
[14.49768829 6.51888037]
[3.61886311 -3.80832434]
[-7.25996208 -14.13552952]
[-18.13878632 -24.46273422]
[-29.01761246 -34.78993988]
[-44.66780853 -41.30973053]
[-42.73521805 -58.15317154]
[-26.01503181 -60.95883179]
[-18.69040680 -45.66876602]
[-7.81158209 -35.34156036]
[3.06724286 -25.01435471]
[13.94606781 -14.68715000]
[24.82489395 -4.35994482]
[40.17083740 -9.32518482]
[56.02198410 -5.87218904]
[68.05033875 5.15272713]
[72.92320251 20.82278442]
[69.22624969 36.90728760]
[80.31756592 47.00593567]
[91.40888214 57.10458374]
[86.51689148 42.92472839]
[75.50817871 32.73608780]
[69.46689606 19.00645447]
[69.39223480 4.00663996]
[75.29655457 -9.78245163]
[86.20329285 -20.08016777]
[100.30854034 -25.18331337]
[115.27934265 -24.24784851]
[128.63960266 -17.42849922]
[138.17958069 -5.85315132]
[142.32142639 8.56368351]
[140.38009644 23.43752670]
[132.67665100 36.30831146]
[120.48449707 45.04759979]
[113.86506653 58.50802994]
[126.12744141 49.86891174]
[138.38980103 41.22979736]
[150.65217590 32.59067917]
[162.63900757 23.57315063]
[174.33862305 14.18598843]
[186.03825378 4.79882622]
[188.83045959 -1.30945611]
[193.59349060 -4.55673170]
[198.42544556 -4.72327232]
[210.50543213 -13.61562252]
[222.58541870 -22.50797272]
[234.66540527 -31.40032196]
[243.83676147 -45.65944290]
[260.07751465 -40.79382324]
[259.89794922 -23.84082603]
[243.55775452 -19.32033348]
[231.47776794 -10.42798328]
[219.39778137 -1.53563380]
[207.31779480 7.35671568]
[195.42541504 16.49844933]
[183.72579956 25.88561249]
[172.02616882 35.27277374]
[171.29516602 38.78462601]
[168.78771973 42.10342407]
[164.62007141 44.38005447]
[159.29129028 44.85304642]
[147.02891541 53.49216461]
[134.76655579 62.13127899]
[122.50418854 70.77039337]
[133.16943359 87.88999939]
[132.95930481 107.18215942]
[122.87786865 122.59468842]
[106.88170624 129.79190063]
[106.56964874 144.78866577]
[106.25759125 159.78541565]
[105.94553375 174.78216553]
[105.63348389 189.77891541]
[114.00326538 199.64810181]
[113.39733124 212.17214966]
[104.68953705 220.62681580]
[111.84606934 234.73690796]
[103.58603668 247.13130188]
[102.96205902 262.11831665]
[118.33446503 265.96289062]
[132.58103943 272.88775635]
[145.09228516 282.59423828]
[155.33343506 294.66458130]
[162.86737061 308.58007812]
[167.37321472 323.74343872]
[168.66003418 339.50418091]
[166.67492676 355.18679810]
[161.50517273 370.11953735]
[153.37443542 383.66323853]
[142.63304138 395.23870850]
[129.74291992 404.35144043]
[115.25771332 410.61276245]
[99.79903412 413.75643921]
[99.79903412 428.75643921]
[99.79903412 443.75643921]
[99.79903412 458.75643921]
[99.79903412 473.75643921]
[99.79903412 488.75643921]
[99.79903412 503.75643921]
[99.79903412 518.75640869]
[99.79903412 533.75640869]
[99.79903412 548.75640869]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[26 127]
[27 126]
[29 124]
[31 121]
[32 120]
[33 119]
[34 118]
[35 117]
[42 69]
[43 68]
[44 67]
[50 62]
[51 61]
[52 60]
[53 59]
[54 58]
[84 113]
[85 112]
[86 111]
[87 110]
[88 106]
[89 105]
[90 104]
[93 103]
[94 102]
[95 101]
[96 100]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
