%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:49 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGAUGAAACAUCCUAUCAUCUGUAGGCUCAUUCAUUUCUCUAACAGCAGUAAUAUUAAUAAUxxxxxxxxxxAUUAACCACUCAUUCAUCGACCUCCCCACCCCAUCCAACAUCUCCGCAUGAUGAAACUUCCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[77.88074493 284.22485352]
[77.88074493 269.22485352]
[77.88074493 254.22483826]
[77.88074493 239.22483826]
[77.88074493 224.22483826]
[77.88074493 209.22483826]
[77.88074493 194.22483826]
[77.88074493 179.22483826]
[77.88074493 164.22483826]
[77.88074493 149.22483826]
[65.18581390 141.23492432]
[51.66162491 147.72309875]
[38.13743591 154.21125793]
[24.61324692 160.69941711]
[11.08905602 167.18759155]
[9.82101536 182.43026733]
[1.15091097 194.90930176]
[-12.51055717 201.33039856]
[-27.45182228 200.05975342]
[-39.66867828 191.53836060]
[-53.19286728 198.02653503]
[-66.71705627 204.51469421]
[-80.24124908 211.00286865]
[-93.76543427 217.49102783]
[-100.42167664 232.08807373]
[-116.01858521 235.84519958]
[-128.59155273 225.88026428]
[-128.49566650 209.83749390]
[-115.80448914 200.02354431]
[-100.25360107 203.96684265]
[-86.72941589 197.47866821]
[-73.20522308 190.99050903]
[-59.68103409 184.50233459]
[-46.15684128 178.01417542]
[-45.15787125 163.15255737]
[-36.79854202 150.70356750]
[-23.24074364 144.06636047]
[-8.08157063 145.11340332]
[4.60089111 153.66339111]
[18.12508202 147.17523193]
[31.64927101 140.68707275]
[45.17346191 134.19889832]
[58.69765091 127.71073914]
[52.90306854 114.44022369]
[51.21550751 100.19850922]
[53.69962692 86.21521759]
[60.06336594 73.67431641]
[69.68969727 63.61391830]
[81.69564819 56.84040833]
[95.01290131 53.86411285]
[108.48270416 54.86155319]
[120.95667267 59.66698837]
[129.97419739 47.68015671]
[138.86654663 35.60017014]
[147.63275146 23.42833328]
[136.26368713 13.62865257]
[125.79199982 2.87537527]
[116.29737091 -8.74965763]
[107.85207367 -21.15797234]
[100.52037048 -34.25513077]
[94.35807800 -47.94145584]
[89.41208649 -62.11278534]
[85.72003937 -76.66126251]
[83.31003571 -91.47615814]
[82.20041656 -106.44473267]
[82.39962769 -121.45304871]
[83.90615845 -136.38690186]
[86.70853424 -151.13261414]
[90.78543854 -165.57795715]
[96.10582733 -179.61302185]
[102.62921906 -193.13096619]
[110.30596161 -206.02890015]
[119.07763672 -218.20869446]
[128.87747192 -229.57762146]
[139.63090515 -240.04916382]
[151.25605774 -249.54362488]
[163.66448975 -257.98873901]
[176.76176453 -265.32025146]
[190.44816589 -271.48236084]
[204.61956787 -276.42816162]
[219.16809082 -280.11999512]
[233.98303223 -282.52978516]
[248.95161438 -283.63922119]
[263.95993042 -283.43978882]
[278.89376831 -281.93304443]
[293.63943481 -279.13046265]
[308.08471680 -275.05337524]
[322.11972046 -269.73275757]
[335.63754272 -263.20919800]
[348.53540039 -255.53227234]
[360.71505737 -246.76042175]
[372.08383179 -236.96041870]
[382.55523682 -226.20684814]
[392.04953003 -214.58155823]
[400.49450684 -202.17300415]
[407.82583618 -189.07563782]
[413.98773193 -175.38914490]
[418.93331909 -161.21766663]
[422.62496948 -146.66909790]
[425.03454590 -131.85412598]
[426.14376831 -116.88552856]
[425.94412231 -101.87721252]
[424.43716431 -86.94340515]
[421.63436890 -72.19777679]
[417.55706787 -57.75253296]
[412.23629761 -43.71762848]
[405.71252441 -30.19986916]
[398.03540039 -17.30214119]
[389.26339722 -5.12260246]
[379.46325684 6.24604988]
[368.70953369 16.71729279]
[357.08410645 26.21143150]
[344.67541504 34.65621185]
[331.57794189 41.98735809]
[317.89135742 48.14907455]
[303.71984863 53.09447098]
[289.17120361 56.78590775]
[274.35620117 59.19528580]
[259.38757324 60.30427551]
[244.37927246 60.10443115]
[229.44549561 58.59727478]
[214.69990540 55.79427338]
[200.25471497 51.71677017]
[186.21987915 46.39578629]
[172.70220947 39.87182617]
[159.80459595 32.19453812]
[151.03839111 44.36637497]
[149.67262268 51.67940140]
[141.96102905 56.69768906]
[132.94351196 68.68451691]
[139.43380737 76.62335205]
[144.02558899 85.88963318]
[146.45190430 96.03242493]
[146.55223083 106.54828644]
[144.28251648 116.90623474]
[139.71937561 126.57459259]
[133.05810547 135.04824829]
[124.60457611 141.87500000]
[114.76137543 146.67962646]
[104.00865936 149.18441772]
[92.88074493 149.22483826]
[92.88074493 164.22483826]
[92.88074493 179.22483826]
[92.88074493 194.22483826]
[92.88074493 209.22483826]
[92.88074493 224.22483826]
[92.88074493 239.22483826]
[92.88074493 254.22483826]
[92.88074493 269.22485352]
[92.88074493 284.22485352]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[11 43]
[12 42]
[13 41]
[14 40]
[15 39]
[20 34]
[21 33]
[22 32]
[23 31]
[24 30]
[52 130]
[53 129]
[54 127]
[55 126]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
