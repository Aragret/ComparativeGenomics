%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:26 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGAAAAGAACCAUUUGGAUACAUAGGUAUGGUCUGAGCUAUGAUAUCAAUUGGCUUCCUAGGxxxxxxxxxxUAGAGCCCACUGUAAAGCUAACUUAGCAUUAACCUUUUAAGUUAAAGAUUAAGAGAACCACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[141.09304810 343.09252930]
[141.09304810 328.09252930]
[141.09304810 313.09252930]
[141.09304810 298.09252930]
[141.09304810 283.09252930]
[141.09304810 268.09252930]
[141.09304810 253.09254456]
[141.09304810 238.09254456]
[141.09304810 223.09254456]
[141.09304810 208.09254456]
[137.69006348 193.48365784]
[131.06156921 180.02767944]
[124.43306732 166.57171631]
[117.80457306 153.11575317]
[111.17607117 139.65979004]
[97.19149017 141.10858154]
[83.53388977 137.77128601]
[71.79335785 130.03645325]
[63.33680725 118.80461884]
[59.14878082 105.38343811]
[44.16906738 104.60359192]
[29.18935394 103.82374573]
[23.04014206 106.52462006]
[17.32397652 105.77846527]
[13.60664558 102.68703461]
[-1.32766175 101.28472900]
[-16.26196861 99.88242340]
[-31.19627762 98.48011780]
[-46.14436340 97.23324585]
[-61.10461426 96.14193726]
[-76.06486511 95.05062866]
[-91.02510834 93.95931244]
[-105.98535919 92.86800385]
[-120.31188202 99.58078003]
[-132.44250488 90.93802643]
[-142.34909058 102.88118744]
[-157.39199829 106.68784332]
[-171.78691101 100.89424133]
[-179.99871826 87.72814941]
[-178.86978149 72.25219727]
[-168.83422852 60.41720200]
[-153.75091553 56.77396011]
[-139.41967773 62.72337723]
[-131.35119629 75.97777557]
[-118.09472656 69.18694305]
[-104.89405060 77.90775299]
[-89.93379974 78.99906921]
[-74.97354889 80.09037781]
[-60.01330185 81.18168640]
[-45.05305481 82.27299500]
[-38.10821915 79.60561371]
[-29.79397392 83.54581451]
[-14.85966587 84.94812012]
[0.07464183 86.35041809]
[15.00894928 87.75272369]
[29.96919823 88.84403229]
[44.94891357 89.62387848]
[59.92862701 90.40372467]
[70.41300964 71.32224274]
[89.15805817 60.24757004]
[87.91118622 45.29948425]
[86.66430664 30.35139465]
[85.41743469 15.40330887]
[70.61743164 12.38061905]
[57.26917267 5.30950880]
[46.45473480 -5.23679924]
[39.05079651 -18.40336418]
[35.65756607 -33.12282944]
[36.55011749 -48.20195389]
[41.65608978 -62.41834259]
[50.56156921 -74.61953735]
[62.54462814 -83.81643677]
[76.63385010 -89.26349640]
[91.68708801 -90.51914215]
[106.48404694 -87.48158264]
[119.82519531 -80.39707184]
[130.62904358 -69.83990479]
[138.01974487 -56.66590500]
[141.39817810 -41.94303894]
[140.49049377 -26.86481857]
[135.37023926 -12.65356636]
[126.45249939 -0.46132547]
[114.46021271 8.72353268]
[100.36552429 14.15643406]
[101.61239624 29.10452080]
[102.85926819 44.05260849]
[104.10614777 59.00069427]
[109.65246582 59.94212341]
[115.01885986 61.63025665]
[120.10529327 64.03362274]
[124.81695557 67.10741425]
[129.06600952 70.79434967]
[132.77326965 75.02568817]
[146.15956116 68.25757599]
[159.54583740 61.48945999]
[168.37023926 48.35780334]
[183.21943665 49.52007294]
[196.60571289 42.75195694]
[209.99200439 35.98384476]
[223.37829590 29.21572876]
[234.78527832 16.67312241]
[249.99548340 24.16218185]
[247.00970459 40.85114288]
[230.14640808 42.60201263]
[216.76011658 49.37012863]
[203.37384033 56.13824463]
[189.98754883 62.90635681]
[182.12062073 75.55391693]
[166.31394958 74.87574005]
[152.92767334 81.64385986]
[139.54138184 88.41197205]
[140.90827942 104.93109131]
[135.65513611 120.65222931]
[124.63204193 133.03129578]
[131.26054382 146.48725891]
[137.88903809 159.94322205]
[144.51753235 173.39918518]
[151.14602661 186.85514832]
[152.44778442 171.91174316]
[157.50357056 157.78945923]
[165.98156738 145.41514587]
[177.32534790 135.60093689]
[190.79042053 128.99096680]
[205.49305725 126.01902771]
[220.46832275 126.88019562]
[234.73336792 131.51792908]
[247.35195923 139.62786865]
[257.49594116 150.67773438]
[264.49954224 163.94233704]
[267.90313721 178.55108643]
[267.48330688 193.54521179]
[263.26763916 207.94062805]
[255.53277588 220.79255676]
[244.78640747 231.25752258]
[231.73379517 238.64868164]
[217.23159790 242.48097229]
[202.23161316 242.50285339]
[187.71830750 238.71289062]
[174.64418030 231.35984802]
[163.86732483 220.92628479]
[156.09304810 208.09254456]
[156.09304810 223.09254456]
[156.09304810 238.09254456]
[156.09304810 253.09254456]
[156.09304810 268.09252930]
[156.09304810 283.09252930]
[156.09304810 298.09252930]
[156.09304810 313.09252930]
[156.09304810 328.09252930]
[156.09304810 343.09252930]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[11 118]
[12 117]
[13 116]
[14 115]
[15 114]
[20 58]
[21 57]
[22 56]
[25 55]
[26 54]
[27 53]
[28 52]
[29 50]
[30 49]
[31 48]
[32 47]
[33 46]
[35 44]
[60 87]
[61 86]
[62 85]
[63 84]
[93 111]
[94 110]
[95 109]
[97 107]
[98 106]
[99 105]
[100 104]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
