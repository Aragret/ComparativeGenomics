%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:52 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGAACCCAUCCCUGAGAAUCCAAAAUUCUCCGUGCCACCUAUCACACCCCAUCCUAAAGUAAxxxxxxxxxxUGCACGACAACACAUAAUGACCCACCAAUCACAUGCCUAUCAUAUAGUAAAACCCAGCCCCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[60.93421936 381.09463501]
[60.93421936 366.09463501]
[60.93421936 351.09463501]
[60.93421936 336.09463501]
[60.93421936 321.09463501]
[60.93421936 306.09463501]
[60.93421936 291.09463501]
[60.93421936 276.09463501]
[60.93421936 261.09463501]
[60.93421936 246.09465027]
[46.46936417 242.25831604]
[33.48050308 234.80268860]
[22.85603333 224.23078918]
[15.32442570 211.25900269]
[11.40427876 196.76855469]
[11.36861229 181.74565125]
[15.22586346 167.21432495]
[22.71890259 154.16668701]
[33.34216309 143.49511719]
[46.37575150 135.93132019]
[60.93421936 131.99607849]
[48.76238251 123.22987366]
[34.53560638 127.98368835]
[20.30882454 132.73750305]
[6.08204603 137.49131775]
[-8.14473248 142.24513245]
[-22.37151146 146.99894714]
[-30.79340363 160.65367126]
[-46.73673630 162.43962097]
[-57.97115326 150.98678589]
[-55.87856674 135.08079529]
[-42.06423569 126.92335510]
[-27.12532616 132.77217102]
[-12.89854813 128.01835632]
[1.32823145 123.26453400]
[15.55501080 118.51071930]
[29.78178978 113.75690460]
[44.00856781 109.00308990]
[49.20398331 94.93157196]
[41.47990036 82.07317352]
[33.75581360 69.21476746]
[26.03172874 56.35636520]
[18.30764389 43.49796295]
[4.37089682 49.12944412]
[-10.27525139 52.51128006]
[-25.27012634 53.56019592]
[-40.24446487 52.25035858]
[-54.82950974 48.61402512]
[-68.66609192 42.74074554]
[-81.41347504 34.77514648]
[-92.75774384 24.91339684]
[-102.41953278 13.39834785]
[-110.16090393 0.51356745]
[-115.79123688 -13.42364502]
[-119.17186737 -28.07007217]
[-120.21954346 -43.06503296]
[-118.90847015 -58.03926468]
[-115.27093506 -72.62400818]
[-109.39650726 -86.46010590]
[-101.42986298 -99.20683289]
[-91.56717682 -110.55028534]
[-80.05133057 -120.21112061]
[-67.16590881 -127.95143890]
[-53.22823334 -133.58061218]
[-38.58152771 -136.96003723]
[-23.58647919 -138.00648499]
[-8.61235809 -136.69416809]
[5.97208786 -133.05543518]
[19.80770302 -127.17986298]
[32.55377197 -119.21216583]
[43.89640808 -109.34854126]
[53.55629349 -97.83190155]
[61.29554749 -84.94583893]
[66.92357635 -71.00769806]
[70.30178833 -56.36071396]
[71.34699249 -41.36558151]
[70.03344727 -26.39156723]
[66.39350128 -11.80742168]
[60.51679611 2.02770782]
[52.54804611 14.77311802]
[42.68348694 26.11494255]
[31.16604614 35.77388000]
[38.89013290 48.63228226]
[46.61421585 61.49068451]
[54.33830261 74.34908295]
[62.06238556 87.20748901]
[68.73863983 76.76029968]
[78.07342529 69.12326050]
[89.00732422 64.89378357]
[100.37786102 64.29808044]
[111.04232025 67.18739319]
[119.99250031 73.07276154]
[126.44991302 81.19304657]
[140.35246277 75.56108856]
[154.25502014 69.92913055]
[160.01982117 58.34375000]
[171.76637268 53.95770264]
[182.97140503 58.62189102]
[196.98811340 53.28037643]
[211.00482178 47.93886566]
[214.92716980 32.92570877]
[226.94624329 23.11135674]
[242.44047546 22.26962852]
[255.45201111 30.72418594]
[260.97766113 45.22407913]
[256.89266968 60.19380188]
[244.76783752 69.87718964]
[229.26539612 70.55078888]
[216.34634399 61.95557785]
[202.32962036 67.29708862]
[188.31291199 72.63860321]
[178.02629089 86.82257843]
[159.88697815 83.83168793]
[145.98442078 89.46364594]
[132.08186340 95.09559631]
[132.45281982 99.66239166]
[132.17695618 104.23591614]
[146.19366455 109.57743073]
[160.21038818 114.91893768]
[174.22709656 120.26045227]
[191.18104553 120.25079346]
[195.88363647 136.53950500]
[181.53330994 145.56747437]
[168.88557434 134.27716064]
[154.86886597 128.93565369]
[140.85215759 123.59413910]
[126.83544159 118.25263214]
[114.71140289 131.73805237]
[96.05330658 137.30088806]
[75.93421936 131.99607849]
[90.49269104 135.93132019]
[103.52627563 143.49511719]
[114.14953613 154.16668701]
[121.64257812 167.21432495]
[125.49983215 181.74565125]
[125.46416473 196.76855469]
[121.54401398 211.25900269]
[114.01240540 224.23078918]
[103.38793945 234.80268860]
[90.39907837 242.25831604]
[75.93421936 246.09465027]
[75.93421936 261.09463501]
[75.93421936 276.09463501]
[75.93421936 291.09463501]
[75.93421936 306.09463501]
[75.93421936 321.09463501]
[75.93421936 336.09463501]
[75.93421936 351.09463501]
[75.93421936 366.09463501]
[75.93421936 381.09463501]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[21 130]
[22 38]
[23 37]
[24 36]
[25 35]
[26 34]
[27 33]
[39 86]
[40 85]
[41 84]
[42 83]
[43 82]
[93 115]
[94 114]
[95 113]
[98 111]
[99 110]
[100 109]
[117 127]
[118 126]
[119 125]
[120 124]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
