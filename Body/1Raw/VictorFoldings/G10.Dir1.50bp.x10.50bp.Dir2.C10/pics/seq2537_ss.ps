%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:15 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGUCCUCCGCAUAAGCCUGCGUCAGAUUAAAACACUGAACUGACAAUUAACAGCCCAAUAUCxxxxxxxxxxGCCUGGCAGCCGGAAGCCUAUUCGCAGGAUUUCUCAUUACUAACAACAUUUCCCCCGCAUCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[150.46838379 495.07241821]
[150.46838379 480.07241821]
[150.46838379 465.07241821]
[150.46838379 450.07241821]
[150.46838379 435.07241821]
[150.46838379 420.07241821]
[150.46838379 405.07241821]
[150.46838379 390.07241821]
[150.46838379 375.07241821]
[150.46838379 360.07241821]
[134.37028503 355.24649048]
[120.51042938 345.71014404]
[110.22824860 332.37170410]
[104.52146149 316.50759888]
[103.94928741 299.64013672]
[108.57768250 283.39154053]
[117.97192383 269.32772827]
[131.23741150 258.80767822]
[147.10488892 252.85189819]
[146.16925049 237.88110352]
[142.76628113 223.27221680]
[136.99000549 209.42900085]
[124.94831848 200.66275024]
[126.77468872 184.94731140]
[120.99842072 171.10409546]
[115.22214508 157.26087952]
[109.44587708 143.41766357]
[103.66960144 129.57444763]
[97.89332581 115.73122406]
[85.45388794 107.34908295]
[70.45469666 107.19304657]
[55.45551300 107.03701019]
[40.45632172 106.88097382]
[32.06721497 119.82803345]
[18.00074005 126.16347504]
[2.74545646 123.86567688]
[-8.83072853 113.66786194]
[-13.03389645 98.82411194]
[-8.52283287 84.07101440]
[3.26300001 74.11622620]
[18.56278419 72.13629913]
[32.49441528 78.76300049]
[40.61235809 91.88178253]
[55.61154938 92.03781891]
[70.61073303 92.19385529]
[85.60992432 92.34989166]
[90.80556488 78.27774811]
[96.00075531 64.20685577]
[84.49895477 54.57833099]
[72.99714661 44.94980240]
[57.97864151 48.85160828]
[43.54732895 43.14925385]
[35.25234604 30.03541374]
[36.28327942 14.55262280]
[46.24371719 2.65433264]
[61.30366898 -1.08432162]
[75.67227173 4.77424860]
[83.82450867 17.97730446]
[82.62567902 33.44799805]
[94.12747955 43.07652664]
[105.62928009 52.70505142]
[112.85662842 50.70118332]
[116.61286163 36.17910767]
[127.31131744 46.69344330]
[134.53866577 44.68957138]
[139.44021606 30.51301384]
[144.34176636 16.33645439]
[149.24331665 2.15989709]
[137.49682617 11.48835278]
[123.29895020 16.32779694]
[108.30044556 16.11555099]
[94.24519348 10.87629318]
[82.76737976 1.21918738]
[75.20151520 -11.73294353]
[72.42727661 -26.47416496]
[74.76722717 -41.29052734]
[81.94930267 -54.45934677]
[93.13845062 -64.44949341]
[107.03371429 -70.09942627]
[122.01950073 -70.75222015]
[136.35342407 -66.33198547]
[148.36891174 -57.35266113]
[156.66889954 -44.85825729]
[160.28837585 -30.30149460]
[158.80574036 -15.37208366]
[168.07069397 -27.16872406]
[177.33563232 -38.96536255]
[172.96711731 -53.85480881]
[178.21638489 -68.45702362]
[191.06501770 -77.15715790]
[206.57243347 -76.60983276]
[218.77572632 -67.02550507]
[222.98248291 -52.08954620]
[217.57510376 -37.54513550]
[204.63284302 -28.98489571]
[189.13227844 -29.70041466]
[179.86732483 -17.90377426]
[170.60237122 -6.10713434]
[163.41987610 7.06144810]
[158.51832581 21.23800659]
[153.61677551 35.41456604]
[148.71520996 49.59112167]
[111.73654938 109.95495605]
[117.51281738 123.79817200]
[123.28909302 137.64138794]
[129.06536865 151.48460388]
[134.84162903 165.32781982]
[140.61790466 179.17103577]
[153.07275391 188.92744446]
[150.83322144 203.65272522]
[156.60949707 217.49594116]
[159.16865540 202.71586609]
[166.54501343 189.65487671]
[177.88090515 179.83155823]
[191.85833740 174.38807678]
[206.85215759 173.95733643]
[221.11903381 178.58940125]
[233.00018311 187.74572754]
[241.11419678 200.36169434]
[244.51765442 214.97047424]
[242.81484985 229.87351990]
[236.20375061 243.33804321]
[225.45303345 253.79855347]
[211.81268311 260.03878784]
[196.86865234 261.33325195]
[182.35844421 257.53140259]
[169.96917725 249.07527161]
[161.14004517 236.94548035]
[162.07568359 251.91625977]
[175.10951233 254.56358337]
[187.10850525 260.27627563]
[197.36422729 268.71145630]
[205.27255249 279.36569214]
[210.36918640 291.60498047]
[212.35699463 304.70254517]
[211.12326050 317.88201904]
[206.74607849 330.36334229]
[199.48944092 341.40902710]
[189.78735352 350.36773682]
[178.21780396 356.71264648]
[165.46838379 360.07241821]
[165.46838379 375.07241821]
[165.46838379 390.07241821]
[165.46838379 405.07241821]
[165.46838379 420.07241821]
[165.46838379 435.07241821]
[165.46838379 450.07241821]
[165.46838379 465.07241821]
[165.46838379 480.07241821]
[165.46838379 495.07241821]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[19 129]
[20 128]
[21 111]
[22 110]
[24 108]
[25 107]
[26 106]
[27 105]
[28 104]
[29 103]
[30 46]
[31 45]
[32 44]
[33 43]
[48 61]
[49 60]
[50 59]
[65 102]
[66 101]
[67 100]
[68 99]
[85 98]
[86 97]
[87 96]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
