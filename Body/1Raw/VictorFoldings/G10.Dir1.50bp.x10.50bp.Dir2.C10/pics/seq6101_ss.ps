%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:45 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGAACCCACAAACACUUAGUUAACAGCUAAGCACCCUAAUCAACUGGCUUCAAUCUACUUCUxxxxxxxxxxCAUUUUACCUCACCCCCACUGAUGUUCGCCGACCGUUGACUAUUCUCUACAAACCACAAACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[105.03413391 306.61819458]
[104.72207642 291.62142944]
[104.41001892 276.62469482]
[104.09796143 261.62792969]
[103.78591156 246.63117981]
[103.47385406 231.63442993]
[103.16179657 216.63766479]
[102.84973907 201.64091492]
[102.53768158 186.64416504]
[99.89881897 171.87811279]
[94.99726868 157.70155334]
[90.09571838 143.52499390]
[87.60063171 158.31602478]
[90.42388916 173.04792786]
[84.99510193 187.03108215]
[72.97081757 195.99861145]
[58.02015305 197.21415710]
[44.70517731 190.30682373]
[37.08884430 177.38429260]
[37.49522400 162.38980103]
[45.80030441 149.89878845]
[59.46847153 143.72297668]
[70.12298584 133.16448975]
[55.71076965 137.32238770]
[41.29855347 141.48027039]
[26.88633537 145.63815308]
[12.47411919 149.79605103]
[-1.93809652 153.95393372]
[-10.92071342 167.24649048]
[-26.92453957 168.36769104]
[-37.67280960 156.45742798]
[-34.92037201 140.65225220]
[-20.77865982 133.07653809]
[-6.09598398 139.54171753]
[8.31623173 135.38383484]
[22.72844887 131.22593689]
[37.14066315 127.06805420]
[51.55287933 122.91016388]
[65.96509552 118.75228119]
[63.17044449 109.88179779]
[62.60257339 100.77371216]
[64.21154785 91.96822357]
[67.82072449 83.96784973]
[73.14183044 77.20869446]
[79.79625702 72.03681946]
[87.34110260 68.69081116]
[95.29814148 67.29152679]
[103.18392944 67.83931732]
[108.08548737 53.66276169]
[112.98703766 39.48620224]
[117.88858795 25.30964470]
[122.79013824 11.13308620]
[127.24695587 -3.18951106]
[131.25469971 -17.64419937]
[135.26243591 -32.09888840]
[139.27017212 -46.55357742]
[125.37403107 -52.24862289]
[112.24900818 -59.54726791]
[100.07937622 -68.34706116]
[89.03595734 -78.52445221]
[79.27380371 -89.93658447]
[70.92994690 -102.42323303]
[64.12152863 -115.80911255]
[58.94412231 -129.90631104]
[55.47041702 -144.51690674]
[53.74917221 -159.43580627]
[53.80455780 -174.45358276]
[55.63579178 -189.35937500]
[59.21717072 -203.94396973]
[64.49841309 -218.00257874]
[71.40538025 -231.33787537]
[79.84111023 -243.76264954]
[89.68717194 -255.10246277]
[100.80535126 -265.19812012]
[113.03956604 -273.90792847]
[126.21805573 -281.10955811]
[140.15583801 -286.70196533]
[154.65721130 -290.60659790]
[169.51863098 -292.76864624]
[184.53146362 -293.15780640]
[199.48493958 -291.76855469]
[214.16912842 -288.62045288]
[228.37791443 -283.75762939]
[241.91180420 -277.24841309]
[254.58081055 -269.18411255]
[266.20709229 -259.67800903]
[276.62741089 -248.86352539]
[285.69549561 -236.89247131]
[293.28405762 -223.93290710]
[299.28652954 -210.16677856]
[303.61868286 -195.78730774]
[306.21969604 -180.99639893]
[307.05303955 -166.00167847]
[306.10699463 -151.01362610]
[303.39489746 -136.24269104]
[298.95477295 -121.89619446]
[292.84896851 -108.17556763]
[285.16320801 -95.27341461]
[276.00540161 -83.37086487]
[265.50408936 -72.63501740]
[253.80667114 -63.21656799]
[241.07739258 -55.24775696]
[227.49496460 -48.84044266]
[213.25003052 -44.08457565]
[198.54257202 -41.04692459]
[183.57908630 -39.77013016]
[168.56961060 -40.27211380]
[153.72486877 -42.54583740]
[149.71711731 -28.09114838]
[145.70938110 -13.63645935]
[141.70164490 0.81822914]
[143.16084290 4.09515333]
[143.06570435 8.25359440]
[141.01434326 12.53661442]
[136.96669006 16.03463745]
[132.06513977 30.21119499]
[127.16358948 44.38775253]
[122.26203918 58.56431198]
[117.36048889 72.74086761]
[131.43420410 87.16607666]
[134.66372681 108.06005096]
[124.71919250 127.83106232]
[104.27227783 138.62344360]
[109.17382812 152.80000305]
[114.07537842 166.97656250]
[117.68984985 152.41854858]
[126.23625946 140.09138489]
[138.60165405 131.60038757]
[153.17573547 128.05126953]
[168.06059265 129.90625000]
[181.31785583 136.92373657]
[191.22108459 148.18988037]
[196.48062134 162.23754883]
[196.41156006 177.23739624]
[191.02288818 191.23605347]
[181.01634216 202.41052246]
[167.69503784 209.30564880]
[152.79371643 211.02348328]
[138.25294495 207.34031677]
[125.96626282 198.73580933]
[117.53443909 186.33210754]
[117.84649658 201.32885742]
[118.15854645 216.32562256]
[118.47060394 231.32237244]
[118.78266144 246.31912231]
[119.09471893 261.31588745]
[119.40677643 276.31262207]
[119.71883392 291.30938721]
[120.03088379 306.30615234]
[122.62188721 325.51385498]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 149]
[2 148]
[3 147]
[4 146]
[5 145]
[6 144]
[7 143]
[8 142]
[9 141]
[10 125]
[11 124]
[12 123]
[23 39]
[24 38]
[25 37]
[26 36]
[27 35]
[28 34]
[48 119]
[49 118]
[50 117]
[51 116]
[52 115]
[53 111]
[54 110]
[55 109]
[56 108]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
