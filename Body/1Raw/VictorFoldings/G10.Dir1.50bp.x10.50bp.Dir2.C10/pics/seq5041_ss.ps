%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:33:59 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCACCCCUCUGACAUCCGGCCUGCUUCUUCUCACAUGACAAAAACUAGCCCCCAUCUCAAUxxxxxxxxxxGCAGAAAAUAGCCCACUAAUCCAAACUCUAACACUAUGCUUAGGCGCUAUCACCACUCUGCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[95.42895508 240.83726501]
[95.11689758 225.84051514]
[94.80484009 210.84375000]
[94.49278259 195.84700012]
[94.18072510 180.85025024]
[93.86867523 165.85350037]
[93.55661774 150.85673523]
[93.24456024 135.85998535]
[92.93250275 120.86323547]
[79.34155273 114.51610565]
[67.64192963 123.90326691]
[55.94230652 133.29043579]
[54.07667542 148.75514221]
[42.07786942 158.10838318]
[27.34613228 156.23449707]
[15.64650917 165.62165833]
[18.06003571 180.78973389]
[12.55119228 195.12667847]
[0.60182875 204.77593994]
[-14.57373524 207.14190674]
[-28.89335060 201.58815002]
[-38.50511169 189.60861206]
[-40.82350159 174.42570496]
[-35.22488785 160.12356567]
[-23.21526718 150.54940796]
[-8.02516937 148.27861023]
[6.25934744 153.92202759]
[17.95897102 144.53486633]
[19.32229805 129.74713135]
[31.05365753 120.06055450]
[46.55514526 121.59080505]
[58.25476837 112.20364380]
[69.95439148 102.81648254]
[71.82200623 87.93320465]
[62.80447388 75.94636536]
[53.78694534 63.95953751]
[44.76941299 51.97270203]
[31.66847610 59.32449722]
[17.70450974 64.86444855]
[3.12671757 68.49369049]
[-11.80474186 70.14746094]
[-26.82340050 69.79624176]
[-41.66123199 67.44629669]
[-56.05343628 63.13957214]
[-69.74316406 56.95291901]
[-82.48612213 48.99674988]
[-94.05487823 39.41305161]
[-104.24298096 28.37285423]
[-112.86861420 16.07318497]
[-119.77784729 2.73354506]
[-124.84736633 -11.40800381]
[-127.98670959 -26.09908867]
[-129.13984680 -41.07752991]
[-128.28619385 -56.07602310]
[-125.44099426 -70.82689667]
[-120.65501404 -85.06690216]
[-114.01367950 -98.54192352]
[-105.63550568 -111.01146698]
[-95.67000580 -122.25301361]
[-84.29502869 -132.06593323]
[-71.71357727 -140.27510071]
[-58.15017700 -146.73402405]
[-43.84688950 -151.32743835]
[-29.05897141 -153.97335815]
[-14.05032921 -154.62455750]
[0.91119117 -153.26943970]
[15.55858231 -149.93217468]
[29.63044548 -144.67231750]
[42.87564850 -137.58372498]
[55.05781937 -128.79292297]
[65.95954895 -118.45679474]
[75.38629150 -106.75978851]
[83.16980743 -93.91064453]
[89.17118835 -80.13868713]
[93.28334045 -65.68968964]
[95.43286896 -50.82150269]
[95.58142853 -35.79947281]
[93.72634888 -20.89168358]
[89.90074921 -6.36418486]
[84.17289734 7.52376461]
[76.64501190 20.52431870]
[67.45143890 32.40546417]
[56.75624847 42.95517349]
[65.77378082 54.94200516]
[74.79130554 66.92884064]
[83.80883789 78.91567230]
[104.65594482 75.77973938]
[119.55293274 88.38311005]
[134.31898499 85.74424744]
[149.08503723 83.10538483]
[163.85110474 80.46651459]
[178.61715698 77.82765198]
[185.01873779 65.93322754]
[196.93753052 60.00278854]
[209.90068054 62.01059341]
[219.18666077 70.99765015]
[234.00442505 68.66654968]
[248.82217407 66.33544922]
[263.63995361 64.00434113]
[271.88275146 54.02886963]
[284.31805420 52.42206573]
[294.17279053 59.50667191]
[309.03582764 57.48433685]
[313.25723267 42.85218811]
[323.07003784 31.20622635]
[336.77416992 24.56418991]
[351.99530029 24.07685089]
[366.09625244 29.82863998]
[376.63394165 40.82302856]
[381.78271484 55.15517044]
[380.65042114 70.34193420]
[373.43331909 83.75212860]
[361.38177490 93.06234741]
[346.58380127 96.65953827]
[331.60324097 93.92047882]
[319.03555298 85.31970978]
[311.05816650 72.34738159]
[296.19512939 74.36972046]
[282.95886230 85.85018921]
[265.97103882 78.82209778]
[251.15328979 81.15320587]
[236.33552551 83.48430634]
[221.51777649 85.81541443]
[212.24050903 99.80792236]
[195.38769531 102.85202789]
[181.25601196 92.59371185]
[166.48995972 95.23257446]
[151.72390747 97.87143707]
[136.95785522 100.51029968]
[122.19179535 103.14916229]
[136.41535950 107.91256714]
[151.40222168 108.54026031]
[163.81823730 116.95706940]
[169.95075989 130.64619446]
[167.96603394 145.51431274]
[158.45753479 157.11553955]
[144.26850891 161.98088074]
[129.64175415 158.65547180]
[118.95098877 148.13371277]
[115.39293671 133.56245422]
[107.92926025 120.55117798]
[108.24131012 135.54792786]
[108.55336761 150.54467773]
[108.86542511 165.54144287]
[109.17748260 180.53819275]
[109.48954010 195.53494263]
[109.80159760 210.53169250]
[110.11364746 225.52845764]
[110.42570496 240.52520752]
[113.01670837 259.73294067]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 149]
[2 148]
[3 147]
[4 146]
[5 145]
[6 144]
[7 143]
[8 142]
[9 141]
[10 33]
[11 32]
[12 31]
[15 28]
[16 27]
[34 86]
[35 85]
[36 84]
[37 83]
[88 130]
[89 129]
[90 128]
[91 127]
[92 126]
[96 123]
[97 122]
[98 121]
[99 120]
[102 118]
[103 117]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
