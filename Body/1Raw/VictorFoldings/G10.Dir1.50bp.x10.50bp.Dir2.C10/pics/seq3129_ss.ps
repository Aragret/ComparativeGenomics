%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:37 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCUCAACUUAGUAUUAUACCCACACCCACCCAAGAACAGGGUUUGUUAAGAUGGCAGAGCCxxxxxxxxxxUCGCUCUUCUACUAUGAACCCCCCUCCCCAUACCCAACCCCCUGGUCAACCUCAACCUAGCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[319.03814697 302.61889648]
[307.73913574 292.75317383]
[296.44012451 282.88745117]
[285.14111328 273.02172852]
[273.74011230 263.27407837]
[262.23828125 253.64553833]
[250.73649597 244.01701355]
[239.23469543 234.38848877]
[227.73287964 224.75996399]
[216.23107910 215.13143921]
[201.50538635 212.89463806]
[195.89018250 198.10342407]
[184.38838196 188.47489929]
[172.88658142 178.84637451]
[169.29956055 178.81919861]
[165.55299377 177.01226807]
[162.50230408 173.37281799]
[160.99212646 168.24066162]
[150.11331177 157.91345215]
[139.23448181 147.58625793]
[128.35565186 137.25904846]
[117.47682953 126.93184662]
[106.48644257 131.44343567]
[94.60785675 131.64945984]
[83.46762085 127.52170563]
[74.59117889 119.62538147]
[69.19397736 109.04174042]
[68.01507568 97.22000122]
[53.78829575 92.46618652]
[39.25335693 88.76002502]
[24.48730278 86.12116241]
[9.54118252 91.31000519]
[-1.62641180 81.45433807]
[-16.39246750 78.81547546]
[-31.15852356 76.17661285]
[-45.92457962 73.53775024]
[-55.26019669 85.66642761]
[-69.16780090 92.05682373]
[-84.45152283 91.24047089]
[-97.59927368 83.40496826]
[-105.58980560 70.35085297]
[-106.58694458 55.07785797]
[-100.36155701 41.09561539]
[-88.34419250 31.61713600]
[-73.29634857 28.82050896]
[-58.67592239 33.34837723]
[-47.84256744 44.16026688]
[-43.28571320 58.77169037]
[-28.51965904 61.41055679]
[-13.75360298 64.04942322]
[1.01245248 66.68828583]
[14.90240479 61.31069183]
[27.12616730 71.35510254]
[41.89222336 73.99397278]
[33.64482498 61.46478653]
[35.20652771 46.54630661]
[45.86986542 35.99674606]
[60.80424118 34.59515762]
[73.24423218 42.97647858]
[77.55441284 57.34388733]
[71.78221130 71.18880463]
[58.54211044 78.23941040]
[72.76889038 82.99322510]
[81.50911713 73.75402832]
[93.15105438 68.63352203]
[93.46311188 53.63676834]
[93.77516937 38.64001465]
[94.08722687 23.64326096]
[94.39928436 8.64650726]
[80.60093689 2.20247269]
[70.62145233 -9.30099392]
[66.18982697 -23.87084579]
[68.07387543 -38.98277283]
[75.94717407 -52.01853561]
[88.44561768 -60.71961212]
[103.40378571 -63.57849121]
[118.23007202 -60.09984970]
[130.35574341 -50.88638687]
[137.67996216 -37.53438950]
[138.93374634 -22.35717392]
[133.89987183 -7.98428059]
[123.45050049 3.09409714]
[109.39603424 8.95856380]
[109.08397675 23.95531845]
[108.77192688 38.95207214]
[108.45986938 53.94882584]
[108.14781189 68.94557953]
[124.52247620 79.27774048]
[131.97845459 97.14647675]
[127.80403900 116.05301666]
[138.68286133 126.38022614]
[149.56169128 136.70742798]
[160.44050598 147.03463745]
[171.31933594 157.36183167]
[182.51510620 167.34455872]
[194.01690674 176.97309875]
[205.51870728 186.60162354]
[221.06709290 189.52711487]
[225.85960388 203.62962341]
[237.36140442 213.25816345]
[248.86322021 222.88668823]
[260.36502075 232.51521301]
[271.86682129 242.14373779]
[283.36862183 251.77226257]
[292.01760864 254.91020203]
[295.00683594 261.72271729]
[306.30584717 271.58843994]
[317.60485840 281.45416260]
[328.90386963 291.31988525]
[347.77648926 278.80249023]
[369.61010742 272.84915161]
[392.19299316 274.05264282]
[413.24087524 282.28131104]
[430.62774658 296.69345093]
[442.60079956 315.82321167]
[447.95700073 337.72988892]
[446.16406250 360.19470215]
[460.28884888 365.24343872]
[474.41366577 370.29220581]
[490.44113159 366.82052612]
[501.25952148 379.14505005]
[495.73983765 394.58737183]
[479.56024170 397.26174927]
[469.36489868 384.41699219]
[455.24011230 379.36825562]
[441.11529541 374.31948853]
[436.71365356 382.16574097]
[431.35183716 389.39233398]
[425.11590576 395.88241577]
[418.10614014 401.53091431]
[410.43527222 406.24633789]
[402.22683716 409.95220947]
[393.61300659 412.58831787]
[384.73260498 414.11163330]
[375.72882080 414.49713135]
[366.74685669 413.73809814]
[357.93170166 411.84625244]
[349.42556763 408.85168457]
[341.36593628 404.80218506]
[333.88296509 399.76269531]
[327.09768677 393.81408691]
[321.11987305 387.05191040]
[316.04632568 379.58499146]
[311.95928955 371.53347778]
[308.92510986 363.02703857]
[306.99322510 354.20269775]
[306.19531250 345.20275879]
[306.54464722 336.17233276]
[308.03616333 327.25711060]
[310.64620972 318.60101318]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 109]
[2 108]
[3 107]
[4 106]
[5 104]
[6 103]
[7 102]
[8 101]
[9 100]
[10 99]
[12 97]
[13 96]
[14 95]
[18 94]
[19 93]
[20 92]
[21 91]
[22 90]
[28 63]
[29 62]
[30 54]
[31 53]
[33 51]
[34 50]
[35 49]
[36 48]
[65 87]
[66 86]
[67 85]
[68 84]
[69 83]
[117 126]
[118 125]
[119 124]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
