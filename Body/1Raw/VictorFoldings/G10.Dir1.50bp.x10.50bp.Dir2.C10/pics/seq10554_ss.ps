%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:54 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGAAAGCUCACAAGAACUGCUAACUCAUGCCCCCAUGUCUAACAACAUGGCUUUCUCAACUUxxxxxxxxxxAACAACAUUUCCCCCGCAUCCCCCUUCCAAACAACAAUCCCCCUCUACCUAAAACUCACACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[439.84100342 263.22814941]
[427.57861328 254.58903503]
[415.31625366 245.94992065]
[403.05389404 237.31080627]
[390.79150391 228.67169189]
[378.18038940 220.55014038]
[365.24234009 212.96023560]
[352.30429077 205.37033081]
[339.36621094 197.78042603]
[326.42816162 190.19052124]
[313.49011230 182.60060120]
[300.55206299 175.01069641]
[287.61401367 167.42079163]
[271.82077026 182.75587463]
[251.95552063 192.27902222]
[230.07655334 194.99183655]
[208.45460510 190.60215759]
[189.33708191 179.55552673]
[174.71449280 162.98995972]
[166.11317444 142.61872864]
[164.43603516 120.55316925]
[149.72807312 117.60768890]
[135.02011108 114.66220093]
[120.31214905 111.71672058]
[111.63181305 125.56058502]
[93.70996857 132.10600281]
[72.84541321 125.64461517]
[58.20190811 128.89544678]
[52.14234543 143.18045044]
[38.82622528 151.14666748]
[23.37387085 149.73091125]
[11.72702503 139.47760010]
[8.36413765 124.32930756]
[14.57830811 110.11087799]
[27.98006248 102.28958893]
[43.41614914 103.87287903]
[54.95108414 114.25193787]
[69.59458160 111.00111389]
[70.60575104 103.56958771]
[72.62808228 88.70654297]
[73.63925171 81.27501678]
[60.39666748 74.22988892]
[47.15408325 67.18475342]
[33.91149521 60.13961411]
[20.66891098 53.09448242]
[7.42632484 46.04934692]
[-7.61333656 50.90569687]
[-21.64367867 43.63073730]
[-26.34074974 28.54057312]
[-18.91786003 14.58792973]
[-3.77887845 10.05066299]
[10.09450531 17.62065506]
[14.47145939 32.80675888]
[27.71404457 39.85189438]
[40.95663071 46.89702988]
[54.19921494 53.94216537]
[67.44180298 60.98730087]
[80.68438721 68.03243256]
[103.87154388 67.51351929]
[119.76500702 80.05039215]
[123.25762939 97.00875854]
[137.96559143 99.95423889]
[152.67355347 102.89972687]
[167.38151550 105.84520721]
[170.80572510 97.18903351]
[175.36775208 89.07736206]
[180.98329163 81.65887451]
[187.54867554 75.06942749]
[194.94290161 69.42962646]
[203.02976990 64.84253693]
[211.66044617 61.39186859]
[220.67617798 59.14041519]
[229.91123962 58.12892151]
[239.19595337 58.37533569]
[248.35978699 59.87451553]
[257.23452759 62.59829712]
[265.65740967 66.49606323]
[273.47393799 71.49564362]
[280.54095459 77.50470734]
[286.72900391 84.41239166]
[291.92492676 92.09141541]
[296.03384399 100.40039062]
[298.98080444 109.18643951]
[300.71231079 118.28798676]
[301.19714355 127.53775787]
[300.42706299 136.76582336]
[298.41677856 145.80276489]
[295.20391846 154.48272705]
[308.14196777 162.07264709]
[321.08001709 169.66255188]
[334.01806641 177.25245667]
[346.95611572 184.84236145]
[359.89419556 192.43228149]
[372.83224487 200.02218628]
[385.77029419 207.61209106]
[390.25823975 207.47116089]
[394.14520264 208.68051147]
[397.07272339 210.87402344]
[398.84289551 213.60540771]
[399.43063354 216.40931702]
[411.69299316 225.04843140]
[423.95538330 233.68756104]
[436.21774292 242.32667542]
[448.48010254 250.96578979]
[458.62957764 239.89253235]
[470.11175537 230.20812988]
[482.73809814 222.07157898]
[496.30130005 215.61651611]
[510.57861328 210.94891357]
[525.33563232 208.14543152]
[540.32995605 207.25209045]
[555.31542969 208.28358459]
[570.04595947 211.22296143]
[584.27966309 216.02195740]
[597.78277588 222.60177612]
[610.33361816 230.85433960]
[621.72601318 240.64418030]
[631.77301025 251.81050110]
[640.30950928 264.16995239]
[647.19543457 277.51959229]
[652.31762695 291.64019775]
[655.59197998 306.29989624]
[656.96478271 321.25796509]
[656.41351318 336.26876831]
[653.94714355 351.08581543]
[649.60614014 365.46582031]
[643.46191406 379.17263794]
[635.61529541 391.98120117]
[626.19512939 403.68115234]
[615.35614014 414.08035278]
[603.27624512 423.00811768]
[590.15386963 430.31777954]
[576.20440674 435.88931274]
[561.65704346 439.63122559]
[546.75061035 441.48211670]
[531.72979736 441.41156006]
[516.84143066 439.42068481]
[502.32983398 435.54223633]
[488.43338013 429.83987427]
[475.38024902 422.40725708]
[463.38476562 413.36639404]
[452.64392090 402.86578369]
[443.33410645 391.07785034]
[435.60818481 378.19613647]
[429.59301758 364.43222046]
[425.38735962 350.01205444]
[423.06030273 335.17248535]
[422.65005493 320.15713501]
[424.16336060 305.21264648]
[427.57531738 290.58435059]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 104]
[2 103]
[3 102]
[4 101]
[5 100]
[6 95]
[7 94]
[8 93]
[9 92]
[10 91]
[11 90]
[12 89]
[13 88]
[21 64]
[22 63]
[23 62]
[24 61]
[27 38]
[28 37]
[41 58]
[42 57]
[43 56]
[44 55]
[45 54]
[46 53]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
