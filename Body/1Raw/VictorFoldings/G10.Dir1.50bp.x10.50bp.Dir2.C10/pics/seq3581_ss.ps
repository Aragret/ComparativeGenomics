%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:27 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGAACCCCCCUCCCCAUACCCAACCCCCUGGUCAACCUCAACCUAGGCCUCCUAUUUAUUCUAGCCACCxxxxxxxxxxUACCAUAAAUACUUGACCACCUGUAGUACAUAAAAACCCAAUCCACAUCAAAACCCCCUCCCCAUGCCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[140.47689819 473.42520142]
[133.85858154 486.88619995]
[127.24026489 500.34716797]
[120.62194824 513.80816650]
[114.00363159 527.26910400]
[107.38531494 540.73010254]
[100.76699829 554.19104004]
[94.14868164 567.65203857]
[87.53036499 581.11303711]
[80.91204834 594.57397461]
[79.34946442 611.45581055]
[62.69485855 614.62762451]
[55.03653336 599.50195312]
[67.45107269 587.95568848]
[74.06938934 574.49468994]
[80.68769836 561.03375244]
[87.30601501 547.57275391]
[93.92433167 534.11175537]
[100.54264832 520.65081787]
[107.16096497 507.18981934]
[113.77928162 493.72885132]
[120.39759827 480.26788330]
[127.01591492 466.80688477]
[107.16441345 453.72482300]
[89.56691742 437.73590088]
[74.64505005 419.22232056]
[62.75647736 398.62686157]
[54.18631363 376.44219971]
[49.14027786 353.19912720]
[47.73975372 329.45385742]
[50.01889801 305.77471924]
[55.92377090 282.72857666]
[65.31363678 260.86724854]
[77.96430969 240.71421814]
[93.57350922 222.75222778]
[111.76808167 207.41163635]
[132.11291504 195.06008911]
[126.01186371 181.35690308]
[119.91081238 167.65373230]
[113.80976105 153.95054626]
[107.70871735 140.24736023]
[101.60766602 126.54418182]
[95.50661469 112.84100342]
[84.35944366 102.80403900]
[70.09359741 98.16878510]
[55.82774734 93.53353119]
[41.86157990 100.93093872]
[26.78001213 96.20633698]
[19.53067398 82.16273499]
[24.41446877 67.13196564]
[38.53392792 60.03150940]
[53.51222229 65.07394409]
[60.46300125 79.26768494]
[74.72885132 83.90293884]
[88.99469757 88.53819275]
[94.80075836 83.79060364]
[82.18206024 75.68083191]
[85.99569702 61.17372131]
[100.97126770 60.31795120]
[106.41288757 74.29541016]
[112.21894836 69.54782104]
[110.50907898 54.64559555]
[108.79920197 39.74337006]
[107.08933258 24.84114265]
[105.37946320 9.93891621]
[103.66959381 -4.96330976]
[101.95971680 -19.86553574]
[87.00560760 -21.77288246]
[72.94274902 -27.20421219]
[60.58872986 -35.84375763]
[50.66180801 -47.18922806]
[43.73911667 -60.58100891]
[40.22313309 -75.24051666]
[40.31827164 -90.31547546]
[44.01900101 -104.92944336]
[51.11016464 -118.23278809]
[61.17949677 -129.45205688]
[73.64157104 -137.93498230]
[87.77186584 -143.18838501]
[102.74885559 -144.90684509]
[117.70181274 -142.99043274]
[131.76138306 -137.55056763]
[144.11015320 -128.90353394]
[154.03019714 -117.55205536]
[160.94476318 -104.15608215]
[164.45185852 -89.49443817]
[164.34757996 -74.41954041]
[160.63800049 -59.80781937]
[153.53877258 -46.50878143]
[143.46263123 -35.29561615]
[130.99542236 -26.82024193]
[116.86194611 -21.57540703]
[118.57181549 -6.67318106]
[120.28168488 8.22904491]
[121.99156189 23.13127136]
[123.70143127 38.03349686]
[125.41130066 52.93572235]
[127.12117004 67.83795166]
[126.55186462 96.81916046]
[109.20980072 106.73995209]
[115.31084442 120.44313049]
[121.41189575 134.14631653]
[127.51294708 147.84950256]
[133.61399841 161.55267334]
[139.71504211 175.25585938]
[145.81610107 188.95904541]
[155.29919434 185.63500977]
[164.97886658 182.93719482]
[174.81382751 180.87712097]
[184.76210022 179.46354675]
[194.78123474 178.70245361]
[204.82849121 178.59707642]
[214.86097717 179.14784241]
[224.83592224 180.35235596]
[234.71075439 182.20549011]
[244.44334412 184.69927979]
[253.99217224 187.82307434]
[263.31652832 191.56352234]
[272.37661743 195.90461731]
[281.13378906 200.82785034]
[289.55068970 206.31217957]
[297.59146118 212.33416748]
[305.22177124 218.86811829]
[312.40911865 225.88612366]
[319.12283325 233.35824585]
[325.33428955 241.25254822]
[331.01699829 249.53536987]
[336.14675903 258.17132568]
[340.70169067 267.12359619]
[344.66238403 276.35394287]
[348.01196289 285.82296753]
[350.73617554 295.49029541]
[352.82339478 305.31463623]
[354.26480103 315.25408936]
[355.05419922 325.26623535]
[355.18826294 335.30834961]
[354.66647339 345.33761597]
[353.49108887 355.31121826]
[351.66711426 365.18661499]
[349.20236206 374.92166138]
[346.10739136 384.47485352]
[342.39544678 393.80545044]
[338.08233643 402.87359619]
[333.18652344 411.64065552]
[327.72894287 420.06924438]
[321.73284912 428.12338257]
[315.22387695 435.76873779]
[308.22979736 442.97271729]
[300.78048706 449.70458984]
[292.90774536 455.93563843]
[284.64514160 461.63934326]
[276.02801514 466.79135132]
[267.09307861 471.36972046]
[257.87850952 475.35491943]
[248.42361450 478.73001099]
[238.76873779 481.48056030]
[228.95507812 483.59490967]
[219.02452087 485.06405640]
[209.01943970 485.88174438]
[198.98251343 486.04449463]
[188.95657349 485.55166626]
[178.98439026 484.40536499]
[169.10852051 482.61053467]
[159.37107849 480.17483521]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 23]
[2 22]
[3 21]
[4 20]
[5 19]
[6 18]
[7 17]
[8 16]
[9 15]
[10 14]
[37 106]
[38 105]
[39 104]
[40 103]
[41 102]
[42 101]
[43 100]
[44 55]
[45 54]
[46 53]
[61 98]
[62 97]
[63 96]
[64 95]
[65 94]
[66 93]
[67 92]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
