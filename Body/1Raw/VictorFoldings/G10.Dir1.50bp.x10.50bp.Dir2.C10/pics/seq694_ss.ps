%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:05 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCCCAUCCUACCCAGCACACACACACCGCUGCUAACCCCAUACCCCGAACCAACCAAACCCxxxxxxxxxxUAGGAGGCGUCCUUGCCCUAUUACUAUCCAUCCUCAUCCUAGCAAUAAUCCCCAUCCUCCCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[204.66665649 62.29714966]
[190.88427734 68.21710968]
[177.10189819 74.13707733]
[163.31951904 80.05703735]
[149.72856140 86.40416718]
[136.34228516 93.17228699]
[122.95599365 99.94039917]
[109.56970978 106.70851135]
[98.58404541 116.92198944]
[90.85996246 129.78039551]
[93.33217621 145.63182068]
[82.37475586 157.34994507]
[66.39328003 155.94561768]
[57.64738083 142.49612427]
[62.84616089 127.31877136]
[78.00155640 122.05631256]
[85.72564697 109.19790649]
[81.15477753 103.25171661]
[69.26225281 112.39326477]
[60.12088776 100.50060272]
[72.01303864 91.35933685]
[67.44217682 85.41314697]
[53.02996063 89.57103729]
[38.61774445 93.72891998]
[24.20552635 97.88681030]
[21.19053841 112.89242554]
[11.53844070 124.77079010]
[-2.53278565 130.79234314]
[-17.78967667 129.57339478]
[-30.72630882 121.39402008]
[-38.36994171 108.13379669]
[-38.96412277 92.83982086]
[-32.37231064 79.02655029]
[-20.10926056 69.86815643]
[-4.99292803 67.46917725]
[9.50306225 72.38088226]
[20.04763985 83.47459412]
[34.45985413 79.31670380]
[48.87207031 75.15882111]
[63.28428650 71.00093079]
[76.70817566 68.87184143]
[88.44184875 71.26907349]
[97.18057251 77.11335754]
[102.07413483 84.99199677]
[102.80159760 93.32222748]
[116.18788147 86.55411530]
[129.57417297 79.78599548]
[142.96044922 73.01788330]
[145.88082886 68.53558350]
[149.84815979 65.92549896]
[153.95581055 65.27058411]
[157.39955139 66.27465820]
[171.18193054 60.35469437]
[184.96430969 54.43473053]
[198.74670410 48.51476669]
[193.76188660 32.72740173]
[190.44917297 16.50728035]
[188.84443665 0.03097267]
[188.96502686 -16.52217293]
[190.80949402 -32.97198868]
[194.35760498 -49.13944626]
[199.57060242 -64.84860992]
[206.39161682 -79.92853546]
[214.74627686 -94.21514893]
[224.54353333 -107.55303192]
[235.67660522 -119.79708099]
[248.02424622 -130.81413269]
[261.45193481 -140.48439026]
[275.81347656 -148.70271301]
[290.95245361 -155.37976074]
[306.70404053 -160.44299316]
[322.89675903 -163.83744812]
[339.35433960 -165.52632141]
[355.89761353 -165.49134827]
[372.34652710 -163.73307800]
[388.52206421 -160.27078247]
[404.24819946 -155.14227295]
[419.35382080 -148.40351868]
[433.67453003 -140.12799072]
[447.05459595 -130.40589905]
[459.34841919 -119.34316254]
[470.42230225 -107.06029510]
[482.50228882 -115.95264435]
[494.58227539 -124.84500122]
[506.66226196 -133.73735046]
[517.43304443 -144.17715454]
[526.69799805 -155.97380066]
[535.96295166 -167.77044678]
[545.22790527 -179.56707764]
[547.01464844 -195.86860657]
[562.13244629 -202.22344971]
[575.02941895 -192.09429932]
[572.43829346 -175.90115356]
[557.02453613 -170.30212402]
[547.75964355 -158.50549316]
[538.49468994 -146.70884705]
[529.22973633 -134.91221619]
[543.55157471 -139.37144470]
[558.46173096 -137.73240662]
[571.47290039 -130.26852417]
[580.41448975 -118.22493744]
[583.79486084 -103.61080170]
[581.05010986 -88.86406708]
[572.63806152 -76.44482422]
[559.96209717 -68.42488098]
[545.13677979 -66.14215088]
[530.63537598 -69.97743988]
[518.87701416 -79.29092407]
[511.82327271 -92.52892303]
[510.65084839 -107.48303986]
[515.55462646 -121.65735626]
[503.47463989 -112.76500702]
[491.39465332 -103.87265778]
[479.31463623 -94.98030853]
[486.39050293 -83.29467773]
[492.43414307 -71.04284668]
[497.40057373 -58.31578827]
[501.25289917 -45.20799255]
[503.96243286 -31.81679535]
[505.50897217 -18.24163628]
[505.88095093 -4.58333158]
[505.07556152 9.05668354]
[503.09869385 22.57710075]
[499.96499634 35.87749481]
[495.69763184 48.85906982]
[490.32824707 61.42538834]
[483.89666748 73.48310089]
[476.45059204 84.94261169]
[468.04525757 95.71878052]
[458.74301147 105.73153687]
[448.61294556 114.90645599]
[437.73022461 123.17536163]
[426.17559814 130.47677612]
[414.03491211 136.75640869]
[401.39822388 141.96755981]
[388.35943604 146.07148743]
[375.01531982 149.03761292]
[361.46496582 150.84385681]
[347.80899048 151.47673035]
[334.14886475 150.93145752]
[320.58599854 149.21203613]
[307.22116089 146.33116150]
[294.15359497 142.31016541]
[281.48040771 137.17883301]
[269.29571533 130.97520447]
[257.69006348 123.74531555]
[246.74967957 115.54278564]
[236.55586243 106.42848969]
[227.18434143 96.47006226]
[218.70480347 85.74141693]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 55]
[2 54]
[3 53]
[4 52]
[5 48]
[6 47]
[7 46]
[8 45]
[9 17]
[10 16]
[22 40]
[23 39]
[24 38]
[25 37]
[82 114]
[83 113]
[84 112]
[85 111]
[86 97]
[87 96]
[88 95]
[89 94]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
