%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:51 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGAGUAGGAAUAGACGUAGACACACGAGCAUAUUUCACCUCCGCUACCAUAAUCAUCGCUAUxxxxxxxxxxAAAACCAUACCUCUCACUUCAACCUCCCUCACCAUUGGCAGCCUAGCAUUAGCAGGAAUACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[124.29667664 278.32827759]
[124.29667664 263.32827759]
[124.29667664 248.32826233]
[124.29667664 233.32826233]
[124.29667664 218.32826233]
[124.29667664 203.32826233]
[124.29667664 188.32826233]
[124.29667664 173.32826233]
[124.29667664 158.32826233]
[124.29667664 143.32826233]
[121.81156158 128.53555298]
[116.91001129 114.35900116]
[100.12506104 119.97796631]
[86.59761047 111.67243195]
[72.18539429 115.83032227]
[57.77317429 119.98821259]
[43.49771500 124.59377289]
[29.37291145 129.64253235]
[15.24810791 134.69128418]
[1.12330496 139.74003601]
[-12.94821453 144.93545532]
[-24.19654083 159.47695923]
[-41.38808823 156.09307861]
[-55.29064560 161.72503662]
[-69.19319916 167.35697937]
[-75.12339783 182.00650024]
[-89.70783997 188.09497070]
[-104.29383850 182.01022339]
[-110.22778320 167.36222839]
[-103.98915863 152.84136963]
[-89.27923584 147.06263733]
[-74.82515717 153.45443726]
[-60.92259979 147.82247925]
[-47.02004623 142.19052124]
[-41.98957062 131.14508057]
[-30.40020180 126.35911560]
[-18.28972626 130.91874695]
[-13.12594891 125.56327820]
[-3.92545152 125.61524200]
[10.19935131 120.56648254]
[24.32415390 115.51772308]
[38.44895935 110.46897125]
[40.28740311 107.38877869]
[43.74168015 105.07152557]
[48.42448044 104.28173065]
[53.61528778 105.57599640]
[68.02750397 101.41810608]
[82.43972015 97.26021576]
[88.92154694 84.26575470]
[103.89323425 79.65560150]
[118.56623077 87.85815430]
[125.19473267 74.40219116]
[131.82322693 60.94622803]
[130.98066711 45.14747238]
[143.54570007 37.14940262]
[150.17419434 23.69343567]
[156.80270386 10.23747063]
[144.10116577 2.23192763]
[132.30603027 -7.05745125]
[121.54653931 -17.52888680]
[111.94056702 -29.06764793]
[103.59336090 -41.54730988]
[96.59638977 -54.83113861]
[91.02630615 -68.77359009]
[86.94414520 -83.22189331]
[84.39463043 -98.01776123]
[83.40569305 -112.99907684]
[83.98817444 -128.00169373]
[86.13568878 -142.86122131]
[89.82470703 -157.41488647]
[95.01480865 -171.50318909]
[101.64912415 -184.97180176]
[109.65497589 -197.67314148]
[118.94464111 -209.46804810]
[129.41633606 -220.22729492]
[140.95533752 -229.83299255]
[153.43519592 -238.17988586]
[166.71919250 -245.17652893]
[180.66178894 -250.74627686]
[195.11019897 -254.82809448]
[209.90612793 -257.37725830]
[224.88745117 -258.36581421]
[239.89006042 -257.78298950]
[254.74954224 -255.63510132]
[269.30310059 -251.94572449]
[283.39129639 -246.75529480]
[296.85974121 -240.12063599]
[309.56088257 -232.11447144]
[321.35556030 -222.82452393]
[332.11456299 -212.35256958]
[341.71997070 -200.81333923]
[350.06655884 -188.33326721]
[357.06289673 -175.04910278]
[362.63229370 -161.10638428]
[366.71374512 -146.65788269]
[369.26254272 -131.86189270]
[370.25076294 -116.88052368]
[369.66754150 -101.87793732]
[367.51931763 -87.01850891]
[363.82958984 -72.46503448]
[358.63882446 -58.37697220]
[352.00384521 -44.90867996]
[343.99737549 -32.20772934]
[334.70712280 -20.41327477]
[324.23489380 -9.65454197]
[312.69543457 -0.04941016]
[300.21517944 8.29688168]
[286.93084717 15.29288578]
[272.98797607 20.86195183]
[258.53936768 24.94306183]
[243.74333191 27.49149895]
[228.76194763 28.47934341]
[213.75936890 27.89577103]
[198.89997864 25.74717522]
[184.34660339 22.05709839]
[170.25866699 16.86596870]
[163.63017273 30.32193565]
[157.00166321 43.77790070]
[158.31834412 58.61419296]
[145.27919006 67.57472229]
[138.65069580 81.03069305]
[132.02220154 94.48665619]
[131.08656311 109.45745087]
[135.98811340 123.63400269]
[139.46421814 109.04233551]
[147.64088440 96.46688080]
[159.56744385 87.36978149]
[173.85719299 82.80873871]
[188.84867859 83.31407928]
[202.79884338 88.82702637]
[214.08573914 98.70661163]
[221.39701843 111.80413055]
[223.88262939 126.59675598]
[221.25355530 141.36456299]
[213.81547546 154.39050293]
[202.43322754 164.16006470]
[188.43019104 169.53733826]
[173.43450928 169.89714050]
[159.18971252 165.19760132]
[147.35202026 155.98516846]
[139.29667664 143.32826233]
[139.29667664 158.32826233]
[139.29667664 173.32826233]
[139.29667664 188.32826233]
[139.29667664 203.32826233]
[139.29667664 218.32826233]
[139.29667664 233.32826233]
[139.29667664 248.32826233]
[139.29667664 263.32827759]
[139.29667664 278.32827759]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[11 124]
[12 123]
[14 48]
[15 47]
[16 46]
[17 42]
[18 41]
[19 40]
[20 39]
[21 37]
[23 34]
[24 33]
[25 32]
[51 122]
[52 121]
[53 120]
[55 118]
[56 117]
[57 116]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
