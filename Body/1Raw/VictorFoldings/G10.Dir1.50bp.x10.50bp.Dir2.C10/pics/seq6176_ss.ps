%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:33:58 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGUCAAUAUGAAAAUCACCUCGGAGCUGGUAAAAAGAGGCCUAACCCCUGUCUUUAGAUUUACxxxxxxxxxxAGCAGGUGUCUCCUCUAUCUUAGGGGCCAUCAAUUUCAUCACAACAAUUAUCAAUAUAAAACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[165.88143921 423.31359863]
[165.57347107 408.31677246]
[165.26548767 393.31991577]
[164.95750427 378.32308960]
[164.64953613 363.32626343]
[164.34155273 348.32940674]
[164.03358459 333.33258057]
[163.72560120 318.33572388]
[163.41761780 303.33889771]
[160.66137695 288.59429932]
[155.53108215 274.49890137]
[140.83911133 272.04699707]
[129.27011108 262.50686646]
[123.99478912 248.36341858]
[126.52372742 233.38005066]
[136.27650452 221.59741211]
[131.14619446 207.50201416]
[126.01589966 193.40663147]
[120.88559723 179.31123352]
[115.75529480 165.21585083]
[110.62499237 151.12046814]
[94.42293549 151.91424561]
[78.75918579 147.69717407]
[65.14563751 138.87628174]
[54.89628983 126.30299377]
[49.00043106 111.19089508]
[34.03915024 112.26795959]
[19.07786942 113.34503174]
[4.11658907 114.42210388]
[-0.64390844 128.85838318]
[-10.57034492 140.37072754]
[-24.14901161 147.20361328]
[-39.30926132 148.31504822]
[-53.73926163 143.53556824]
[-65.23854828 133.59399414]
[-72.05355835 120.00635529]
[-73.14505768 104.84465790]
[-68.34659576 90.42095184]
[-58.38990784 78.93475342]
[-44.79331207 72.13762665]
[-29.63018990 71.06607056]
[-15.21281147 75.88350677]
[-3.73972106 85.85529327]
[3.03951907 99.46082306]
[18.00079918 98.38375092]
[32.96208191 97.30667877]
[47.92336273 96.22961426]
[50.46990967 83.47843170]
[56.08829880 71.75190735]
[64.43007660 61.77732849]
[74.97789001 54.17330170]
[87.07756805 49.41143417]
[99.97869110 47.78705597]
[102.12726593 32.94173050]
[104.27584839 18.09640884]
[106.42443085 3.25108647]
[108.57300568 -11.59423637]
[110.72158813 -26.43955994]
[97.16977692 -20.00928116]
[83.60189056 -26.40556335]
[79.93881989 -40.95141983]
[88.85901642 -53.01086044]
[103.83999634 -53.76597214]
[113.92742920 -42.66520691]
[117.58613586 -57.21216202]
[121.24483490 -71.75911713]
[124.90354156 -86.30606842]
[113.81359863 -76.20591736]
[99.73879242 -71.01940155]
[84.74677277 -71.50846100]
[71.03990173 -77.60122681]
[60.63179016 -88.40267181]
[55.05141068 -102.32600403]
[55.11854553 -117.32585907]
[60.82333374 -131.19868469]
[71.32772064 -141.90652466]
[85.08856964 -147.87635803]
[100.08437347 -148.23120117]
[114.11219025 -142.91889954]
[125.11128235 -132.71987915]
[131.46583557 -119.13240814]
[132.24246216 -104.15321350]
[139.87542725 -117.06591034]
[141.56636047 -126.10674286]
[147.80000305 -130.16308594]
[155.69648743 -142.91633606]
[163.59297180 -155.66958618]
[161.33436584 -171.55285645]
[172.44854736 -183.12242126]
[188.40966797 -181.50308228]
[196.97372437 -167.93707275]
[191.57110596 -152.83106995]
[176.34623718 -147.77311707]
[168.44975281 -135.01985168]
[160.55326843 -122.26659393]
[152.78813171 -109.43294525]
[145.15516663 -96.52024841]
[139.45050049 -82.64736176]
[135.79179382 -68.10041046]
[132.13308716 -53.55345535]
[128.47438049 -39.00650406]
[125.56690979 -24.29097939]
[123.41832733 -9.44565773]
[121.26975250 5.39966536]
[119.12117004 20.24498749]
[116.97259521 35.09030914]
[114.82401276 49.93563461]
[128.74214172 56.41007614]
[140.17599487 66.65212250]
[148.13732910 79.77651978]
[151.93801880 94.64889526]
[151.24954224 109.98377991]
[146.13143921 124.45574188]
[137.02604675 136.81391907]
[124.72038269 145.99015808]
[129.85067749 160.08555603]
[134.98098755 174.18093872]
[140.11128235 188.27632141]
[145.24159241 202.37171936]
[150.37188721 216.46710205]
[165.41668701 219.22416687]
[176.98509216 229.07652283]
[182.03520203 243.30195618]
[179.30509949 258.04653931]
[169.62646484 269.36862183]
[174.75677490 283.46398926]
[177.95492554 268.80889893]
[185.89222717 256.08102417]
[197.64537048 246.76095581]
[211.84713745 241.93290710]
[226.84542847 242.15849304]
[240.89556885 247.41148376]
[252.36308289 257.08081055]
[259.91403198 270.04165649]
[262.66998291 284.78628540]
[260.31033325 299.59954834]
[253.10963440 312.75817871]
[241.90548706 322.73150635]
[228.00125122 328.35931396]
[213.01438904 328.98693848]
[198.68829346 324.54141235]
[186.68948364 315.53982544]
[178.41445923 303.03091431]
[178.72244263 318.02777100]
[179.03041077 333.02459717]
[179.33839417 348.02142334]
[179.64637756 363.01828003]
[179.95434570 378.01510620]
[180.26232910 393.01196289]
[180.57029724 408.00878906]
[180.87828064 423.00561523]
[183.46405029 442.21405029]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 151]
[2 150]
[3 149]
[4 148]
[5 147]
[6 146]
[7 145]
[8 144]
[9 143]
[10 126]
[11 125]
[16 120]
[17 119]
[18 118]
[19 117]
[20 116]
[21 115]
[26 47]
[27 46]
[28 45]
[29 44]
[53 107]
[54 106]
[55 105]
[56 104]
[57 103]
[58 102]
[64 101]
[65 100]
[66 99]
[67 98]
[82 97]
[83 96]
[85 95]
[86 94]
[87 93]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
