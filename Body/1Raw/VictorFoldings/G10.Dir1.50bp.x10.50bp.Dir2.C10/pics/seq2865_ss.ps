%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:48 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCCUAAACUACCAAACCUGCAUUAAAAAUUUCGGUUGGGGCGACCUCGGAGCAGAACCCAAxxxxxxxxxxGAAGCAGCGGUGGGCCUAGCCCUACUAGUCUCAAUCUCCAACACAUAUGGCCUAGACUACCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[95.09897614 414.21109009]
[95.09897614 399.21109009]
[95.09897614 384.21109009]
[95.09897614 369.21109009]
[95.09897614 354.21109009]
[95.09897614 339.21109009]
[95.09897614 324.21109009]
[95.09897614 309.21109009]
[95.09897614 294.21109009]
[95.09897614 279.21109009]
[80.12290192 274.96359253]
[66.93093109 266.67221069]
[56.58992386 254.99784851]
[49.93887329 240.87542725]
[47.52085114 225.43894958]
[49.53865433 209.93045044]
[55.83783722 195.60011292]
[65.91849518 183.60542297]
[78.97492218 174.91770935]
[93.96002197 170.24351501]
[93.64796448 155.24676514]
[93.33590698 140.25000000]
[74.83853149 132.11500549]
[62.51380157 116.10149384]
[59.38525391 96.13793945]
[66.22038269 77.12182617]
[55.55875778 66.57054138]
[44.89713287 56.01924896]
[34.23550797 45.46795654]
[22.06286812 53.60330963]
[8.53618336 59.19259644]
[-5.81885862 62.02070999]
[-20.44479561 61.97981644]
[-34.77403641 59.07345963]
[-48.25088120 53.41633606]
[-60.35308075 45.22979355]
[-70.61207581 34.83314514]
[-78.63111877 22.63123512]
[-84.10065460 9.09866524]
[-86.81022644 -5.23866606]
[-86.65660095 -19.82399750]
[-83.64768982 -34.09132767]
[-77.90218353 -47.48737335]
[-69.64484406 -59.49303818]
[-80.08465576 -70.26384735]
[-90.52446747 -81.03466034]
[-100.96427917 -91.80546570]
[-111.40409088 -102.57627106]
[-122.28291321 -112.90348053]
[-133.58192444 -122.76920319]
[-148.37178040 -118.38015747]
[-163.18029785 -122.70580292]
[-173.28215027 -134.36582947]
[-175.45384216 -149.63957214]
[-169.00242615 -163.65324402]
[-155.98651123 -171.93510437]
[-140.55941772 -171.84246826]
[-127.64389801 -163.40489197]
[-121.36122894 -149.31477356]
[-123.71619415 -134.06820679]
[-112.41719055 -124.20248413]
[-109.55387115 -124.29596710]
[-106.48078918 -123.22352600]
[-103.65598297 -120.89923096]
[-101.55992889 -117.40958405]
[-100.63328552 -113.01608276]
[-90.19346619 -102.24527740]
[-79.75365448 -91.47447205]
[-69.31384277 -80.70365906]
[-58.87403107 -69.93285370]
[-45.88206100 -78.18238068]
[-31.45892525 -83.56685638]
[-16.22817421 -85.85101318]
[-0.84879529 -84.93365479]
[14.01330471 -80.85216522]
[27.71413612 -73.78099060]
[39.65952301 -64.02414703]
[49.33088684 -52.00221252]
[56.30773163 -38.23414230]
[60.28595734 -23.31489563]
[61.09109497 -7.88971949]
[58.68595505 7.37376022]
[53.17235565 21.81443214]
[44.78679657 34.80633163]
[55.44842529 45.35762024]
[66.11004639 55.90891266]
[76.77167511 66.46020508]
[93.48828125 59.72506332]
[111.47558594 60.84921265]
[127.22353363 69.61328888]
[139.11592102 60.47155380]
[150.91255188 51.20660400]
[162.61218262 41.81944275]
[174.31179810 32.43228149]
[186.01142883 23.04511833]
[194.58168030 8.41682625]
[211.01078796 12.60264397]
[211.53657532 29.54843712]
[195.39859009 34.74474335]
[183.69895935 44.13190460]
[171.99934387 53.51906586]
[160.29971313 62.90622711]
[157.02969360 69.58848572]
[148.25764465 72.36393738]
[136.36526489 81.50566864]
[138.31034851 85.97179413]
[139.70924377 90.63791656]
[140.54203796 95.43750763]
[155.50228882 96.52881622]
[163.52801514 83.49630737]
[176.69685364 75.69630432]
[191.98272705 74.92119598]
[205.87303162 81.34909821]
[215.17588806 93.50292206]
[217.75357056 108.58981323]
[213.01373291 123.14290619]
[202.04556274 133.81800842]
[187.36947632 138.16206360]
[172.35791016 135.17684937]
[160.46041870 125.54832458]
[154.41098022 111.48906708]
[139.45072937 110.39775085]
[136.87248230 117.46120453]
[133.04171753 123.93151855]
[128.08859253 129.58892822]
[122.18132782 134.24122620]
[115.52059937 137.73040771]
[108.33266449 139.93794250]
[108.64472198 154.93470764]
[108.95677185 169.93145752]
[122.99426270 173.51063538]
[135.61038208 180.60591125]
[145.94284058 190.72509766]
[153.28730774 203.16957092]
[157.14543152 217.08251953]
[157.25866699 231.50787354]
[153.62554932 245.45613098]
[146.50140381 257.97210693]
[136.38038635 268.20040894]
[123.96122742 275.44387817]
[110.09897614 279.21109009]
[110.09897614 294.21109009]
[110.09897614 309.21109009]
[110.09897614 324.21109009]
[110.09897614 339.21109009]
[110.09897614 354.21109009]
[110.09897614 369.21109009]
[110.09897614 384.21109009]
[110.09897614 399.21109009]
[110.09897614 414.21109009]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[20 130]
[21 129]
[22 128]
[26 87]
[27 86]
[28 85]
[29 84]
[44 70]
[45 69]
[46 68]
[47 67]
[48 66]
[49 61]
[50 60]
[90 105]
[91 104]
[92 102]
[93 101]
[94 100]
[95 99]
[108 122]
[109 121]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
