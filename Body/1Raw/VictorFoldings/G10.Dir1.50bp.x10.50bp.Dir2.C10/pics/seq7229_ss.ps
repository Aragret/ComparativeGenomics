%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:24 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGACAUGAAACAUCCUAUCAUCUGUAGGCUCAUUCAUUUCUCUAACAGCAGUAAUAUUAAUAAUxxxxxxxxxxUCCUACACAUCGGGCGAGGCCUAUAUUACGGAUCAUUUCUCUACUCAGAAACCUGAAACAUCCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[72.60169220 265.19729614]
[72.60169220 250.19728088]
[72.60169220 235.19728088]
[72.60169220 220.19728088]
[72.60169220 205.19728088]
[72.60169220 190.19728088]
[72.60169220 175.19728088]
[72.60169220 160.19728088]
[72.60169220 145.19728088]
[72.60169220 130.19728088]
[70.38732147 116.94846344]
[73.11373901 105.61001587]
[79.31137848 97.74811554]
[87.08876038 94.19473267]
[94.44332886 94.96008301]
[88.80857849 81.05866241]
[83.17382050 67.15724182]
[77.53906250 53.25581741]
[62.76380920 42.31177902]
[65.79281616 25.05162048]
[59.87747574 11.26725388]
[53.96213913 -2.51711321]
[48.04679871 -16.30148125]
[47.52664948 -1.31050158]
[37.08832169 9.46174431]
[22.12114525 10.45352364]
[10.35270786 1.15277779]
[7.85907936 -13.63849735]
[15.92772579 -26.28353310]
[30.39482880 -30.25346565]
[15.61688423 -32.82491684]
[0.83893949 -35.39636230]
[-13.93900490 -37.96781158]
[-20.79065132 -24.49389839]
[-31.31060028 -13.63930988]
[-44.56342316 -6.36922884]
[-59.37068939 -3.33010602]
[-74.41574860 -4.79217815]
[-88.36080170 -10.62543869]
[-99.96585846 -20.31119919]
[-108.19902039 -32.98820496]
[-112.32818604 -47.52922821]
[-111.98619843 -62.64129257]
[-107.20346832 -76.98064423]
[-98.40527344 -89.27222443]
[-86.37393188 -98.42309570]
[-72.17928314 -103.61955261]
[-57.08348465 -104.39953613]
[-42.42885590 -100.69368744]
[-29.51847649 -92.83153534]
[-19.50032616 -81.51216888]
[-13.26521206 -67.74210358]
[-11.36755657 -52.74575806]
[3.41038823 -50.17430878]
[18.18833351 -47.60285950]
[32.96627808 -45.03141022]
[38.50411224 -45.62376022]
[43.27525711 -44.36567688]
[46.75934219 -41.68801117]
[51.24978638 -56.00010300]
[55.74023438 -70.31218719]
[60.23068237 -84.62428284]
[64.72113037 -98.93637085]
[69.21157837 -113.24845886]
[73.70201874 -127.56054688]
[62.41973495 -117.67571259]
[49.35720062 -110.30209351]
[35.06452560 -105.75022888]
[20.14362717 -104.21180725]
[5.22286892 -105.75160980]
[-9.06938362 -110.30479431]
[-22.13123512 -117.67961884]
[-33.41260910 -127.56549835]
[-42.43840790 -139.54611206]
[-48.82852936 -153.11689758]
[-52.31385803 -167.70635986]
[-52.74761581 -182.70008850]
[-50.11154175 -197.46664429]
[-44.51663971 -211.38415527]
[-36.19853973 -223.86651611]
[-25.50753975 -234.38803101]
[-12.89387417 -242.50563049]
[1.11125314 -247.87745667]
[15.91804028 -250.27725220]
[30.90292168 -249.60398865]
[45.43483734 -245.88600159]
[58.90179825 -239.27986145]
[70.73666382 -230.06379700]
[80.44103241 -218.62591553]
[87.60621643 -205.44789124]
[91.93046570 -191.08471680]
[93.23167419 -176.14126587]
[91.45504761 -161.24684143]
[86.67710876 -147.03248596]
[98.15691376 -156.68724060]
[109.63671875 -166.34197998]
[121.11651611 -175.99673462]
[129.34680176 -190.81896973]
[145.86814880 -187.01353455]
[146.78500366 -170.08439636]
[130.77127075 -164.51693726]
[119.29146576 -154.86218262]
[107.81166077 -145.20744324]
[96.33185577 -135.55268860]
[88.01411438 -123.07009888]
[83.52366638 -108.75801086]
[79.03321838 -94.44592285]
[74.54277039 -80.13383484]
[70.05232239 -65.82174683]
[65.56187439 -51.50965500]
[61.07143021 -37.19756699]
[61.83116913 -22.21681786]
[67.74650574 -8.43245125]
[73.66184235 5.35191631]
[79.57717896 19.13628387]
[90.72030640 23.93721962]
[95.74420166 35.42135620]
[91.44048309 47.62106323]
[97.07524109 61.52248383]
[102.70999908 75.42390442]
[108.34474945 89.32532501]
[118.78890228 100.09193420]
[132.51261902 106.14665222]
[146.23632812 112.20137787]
[162.47250366 109.89515686]
[172.37348938 122.96812439]
[165.75399780 137.97193909]
[149.42359924 139.47195435]
[140.18161011 125.92509460]
[126.45789337 119.87036896]
[112.73417664 113.81564331]
[106.45105743 117.91105652]
[115.59195709 129.80407715]
[124.73285675 141.69709778]
[133.87376404 153.59011841]
[147.20460510 160.46678162]
[151.05291748 174.96472168]
[142.88731384 187.54736328]
[128.07904053 189.93797302]
[116.36882019 180.56402588]
[115.45896149 165.59309387]
[108.26757812 152.42935181]
[101.07619476 139.26560974]
[93.88481140 126.10187531]
[87.60169220 130.19728088]
[87.60169220 145.19728088]
[87.60169220 160.19728088]
[87.60169220 175.19728088]
[87.60169220 190.19728088]
[87.60169220 205.19728088]
[87.60169220 220.19728088]
[87.60169220 235.19728088]
[87.60169220 250.19728088]
[87.60169220 265.19729614]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 154]
[2 153]
[3 152]
[4 151]
[5 150]
[6 149]
[7 148]
[8 147]
[9 146]
[10 145]
[15 121]
[16 120]
[17 119]
[18 118]
[20 115]
[21 114]
[22 113]
[23 112]
[30 56]
[31 55]
[32 54]
[33 53]
[59 111]
[60 110]
[61 109]
[62 108]
[63 107]
[64 106]
[65 105]
[94 104]
[95 103]
[96 102]
[97 101]
[122 131]
[123 130]
[124 129]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
