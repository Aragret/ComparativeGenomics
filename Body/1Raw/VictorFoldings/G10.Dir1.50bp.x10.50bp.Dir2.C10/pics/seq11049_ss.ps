%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:02 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGGAAUACCUUUCCUCACAGGUUUCUACUCCAAAGACCACAUCAUCGAAACCGCAAACAUAUxxxxxxxxxxGGCCUGUCCUUGUAGUAUAAACUAAUACACCAGUCUUGUAAACCGGAGAUGAAAACCUUUCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[65.08084106 688.82940674]
[65.08084106 673.82940674]
[65.08084106 658.82940674]
[65.08084106 643.82940674]
[65.08084106 628.82940674]
[65.08084106 613.82940674]
[65.08084106 598.82940674]
[65.08084106 583.82940674]
[65.08084106 568.82940674]
[65.08084106 553.82940674]
[50.04036331 550.23236084]
[36.28304291 543.15002441]
[24.60382462 532.98687744]
[15.67869949 520.32568359]
[10.02555466 505.89392090]
[7.97413969 490.52203369]
[9.64682388 475.09558105]
[14.95131207 460.50427246]
[23.58572388 447.59066772]
[35.05577087 437.10147095]
[48.70306015 429.64443970]
[63.74286270 425.65304565]
[63.43080521 410.65631104]
[63.11875153 395.65954590]
[59.81379700 388.99450684]
[62.95946884 380.34829712]
[59.79388809 373.61593628]
[63.11875153 365.03704834]
[63.43080521 350.04031372]
[63.74286270 335.04354858]
[64.05491638 320.04681396]
[64.36697388 305.05004883]
[61.72019958 301.00405884]
[61.63159180 295.24008179]
[65.01691437 289.43945312]
[65.95254517 274.46865845]
[64.13338470 272.25552368]
[63.11075211 269.16549683]
[63.23193741 265.50939941]
[64.72118378 261.72082520]
[67.63970947 258.30853271]
[69.81654358 243.46734619]
[71.99338531 228.62612915]
[74.17021942 213.78492737]
[76.34706116 198.94372559]
[63.48628616 191.35888672]
[54.48485947 179.39561462]
[50.73933792 164.85821533]
[52.85063553 149.95419312]
[60.52785873 136.95904541]
[72.62792969 127.86886597]
[87.32569122 124.09375763]
[89.50253296 109.25255585]
[85.04571533 94.92995453]
[74.83223724 83.94429016]
[59.00643158 79.64591217]
[55.07820511 63.72419739]
[67.08857727 52.55804062]
[82.68230438 57.63422775]
[85.81790161 73.73081207]
[96.03137970 84.71647644]
[110.15618134 79.66772461]
[111.09181213 64.69692993]
[112.02743530 49.72613907]
[112.65141296 34.73912048]
[112.96347046 19.74236870]
[113.27552795 4.74561501]
[99.05210876 -0.44793540]
[87.28726196 -9.98036098]
[79.25715637 -22.81765556]
[75.83283234 -37.56732559]
[77.38574219 -52.62943649]
[83.74743652 -66.37016296]
[94.22784424 -77.29901886]
[107.69012451 -84.23051453]
[122.67399597 -86.41278076]
[137.55412292 -83.60909271]
[150.71641541 -76.12358856]
[160.73312378 -64.76822662]
[166.51771545 -50.77475357]
[167.44271851 -35.66108322]
[163.40780640 -21.06662750]
[154.85063171 -8.57448483]
[142.69943237 0.46028927]
[128.27227783 5.05767107]
[127.96022797 20.05442429]
[127.64817047 35.05117798]
[130.29493713 39.09717560]
[130.38356018 44.86115646]
[126.99822998 50.66176605]
[126.06259918 65.63256073]
[125.12697601 80.60334778]
[138.22012329 87.92245483]
[150.48249817 79.28334045]
[162.74485779 70.64422607]
[175.00723267 62.00510788]
[181.40003967 46.90331650]
[197.70599365 45.15755463]
[207.15093994 58.56371307]
[200.01872253 73.33068848]
[183.64634705 74.26747894]
[171.38397217 82.90659332]
[159.12161255 91.54570770]
[146.85923767 100.18482208]
[104.34373474 111.42938995]
[102.16690063 126.27059937]
[115.16146851 134.10748291]
[124.14142609 146.28958130]
[127.76342773 160.94204712]
[125.50577545 175.82460022]
[117.74327850 188.67405701]
[105.68548584 197.54846191]
[91.18826294 201.12055969]
[89.01142883 215.96176147]
[86.83458710 230.80297852]
[84.65775299 245.64418030]
[82.48091888 260.48538208]
[80.92333221 275.40429688]
[79.98770905 290.37509155]
[79.36373138 305.36209106]
[79.05167389 320.35885620]
[78.73961639 335.35562134]
[78.42755890 350.35235596]
[78.11550140 365.34912109]
[77.95946503 380.34829712]
[78.11550140 395.34750366]
[78.42755890 410.34423828]
[78.73961639 425.34100342]
[92.99414062 428.38088989]
[106.20209503 434.52603149]
[117.69691467 443.46264648]
[126.89932251 454.73605347]
[133.34652710 467.77404785]
[136.71546936 481.91571045]
[136.83906555 496.44506836]
[133.71441650 510.62728882]
[127.50284576 523.74584961]
[118.52152252 535.13867188]
[107.22732544 544.23175049]
[94.19355011 550.56781006]
[80.08084106 553.82940674]
[80.08084106 568.82940674]
[80.08084106 583.82940674]
[80.08084106 598.82940674]
[80.08084106 613.82940674]
[80.08084106 628.82940674]
[80.08084106 643.82940674]
[80.08084106 658.82940674]
[80.08084106 673.82940674]
[80.08084106 688.82940674]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[22 128]
[23 127]
[24 126]
[26 125]
[28 124]
[29 123]
[30 122]
[31 121]
[32 120]
[35 119]
[36 118]
[41 117]
[42 116]
[43 115]
[44 114]
[45 113]
[52 106]
[53 105]
[54 61]
[55 60]
[62 92]
[63 91]
[64 90]
[65 87]
[66 86]
[67 85]
[93 104]
[94 103]
[95 102]
[96 101]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
