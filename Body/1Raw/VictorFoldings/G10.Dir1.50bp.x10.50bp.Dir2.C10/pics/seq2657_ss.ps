%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:20 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGACCCAACACAGGCAUGCUCAUAAGGAAAGGUUAAAAAAAGUAAAAGGAACUCGGCAAAUCxxxxxxxxxxGCCAUGUGAUUUCACUUCCACUCCAUAACGCUCCUCAUACUAGGCCUACUAACCAACACACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[118.91345978 619.57244873]
[118.91345978 604.57244873]
[118.91345978 589.57244873]
[118.91345978 574.57244873]
[118.91345978 559.57244873]
[118.91345978 544.57244873]
[118.91345978 529.57244873]
[118.91345978 514.57244873]
[118.91345978 499.57247925]
[118.91345978 484.57247925]
[102.40014648 480.15615845]
[87.75048828 471.32315063]
[76.11946106 458.76153564]
[68.42636108 443.45361328]
[65.28215790 426.59918213]
[66.94097900 409.52145386]
[73.27958679 393.56323242]
[83.80649567 379.98126221]
[97.70007324 369.84732056]
[113.87268066 363.96356201]
[112.62580872 349.01547241]
[111.37892914 334.06738281]
[110.13205719 319.11929321]
[108.10971832 304.25625610]
[105.31739807 289.51843262]
[102.52507019 274.78063965]
[92.87295532 286.26263428]
[77.94670868 287.74826050]
[66.22075653 278.39401245]
[64.35256958 263.51080322]
[73.40280914 251.54862976]
[88.23316956 249.29908752]
[100.42447662 258.04064941]
[99.48884583 243.06987000]
[98.55321503 228.09907532]
[97.61759186 213.12828064]
[86.83164215 206.01068115]
[82.06216431 193.79077148]
[85.26859283 180.86997986]
[95.49296570 172.04275513]
[94.86898804 157.05574036]
[94.24501038 142.06872559]
[93.62104034 127.08171082]
[82.70316315 121.79288483]
[75.07372284 112.36085510]
[72.18318176 100.57881927]
[74.58110046 88.68673706]
[81.81158447 78.94550323]
[92.50000000 73.20708466]
[92.50000000 58.20708466]
[92.50000000 43.20708466]
[81.60544586 32.07395935]
[81.81912994 16.86182785]
[92.50000000 6.54414654]
[92.50000000 -8.45585346]
[92.50000000 -23.45585442]
[92.34396362 -38.45504379]
[92.03190613 -53.45179749]
[91.71984863 -68.44854736]
[83.69712830 -82.08477020]
[91.16798401 -94.97025299]
[90.85592651 -109.96700287]
[89.92029572 -124.93779755]
[88.36271667 -139.85670471]
[86.80513763 -154.77561951]
[72.15180206 -158.73089600]
[59.91909409 -167.71562195]
[51.76139450 -180.51470947]
[48.78195953 -195.39715576]
[51.38373947 -210.35025024]
[59.21485519 -223.35171509]
[71.21621704 -232.64320374]
[85.76474762 -236.96810913]
[100.89286041 -235.74153137]
[114.55461884 -229.12936401]
[124.90237427 -218.02583313]
[130.53668213 -203.93260193]
[130.69554138 -188.75567627]
[125.35746765 -174.54759216]
[115.24440002 -163.22990417]
[101.72404480 -156.33320618]
[103.28162384 -141.41429138]
[104.83921051 -126.49537659]
[106.99989319 -124.61421204]
[108.52032471 -121.73632050]
[109.00653839 -118.11064911]
[108.16554260 -114.12771606]
[105.85267639 -110.27906036]
[106.16473389 -95.28231049]
[114.16513824 -82.71875763]
[106.71660614 -68.76060486]
[107.02866364 -53.76385117]
[107.34071350 -38.76709747]
[110.64566803 -32.10204315]
[107.50000000 -23.45585442]
[107.50000000 -8.45585346]
[107.50000000 6.54414654]
[118.18087006 16.86182785]
[118.39455414 32.07395935]
[107.50000000 43.20708466]
[107.50000000 58.20708466]
[107.50000000 73.20708466]
[121.99122620 82.95605469]
[127.81681824 99.42118073]
[122.68119049 116.11439514]
[108.60805511 126.45773315]
[109.23203278 141.44474792]
[109.85601044 156.43176270]
[110.47998810 171.41877747]
[123.55713654 182.99139404]
[124.23775482 200.10340881]
[112.58837891 212.19265747]
[113.52400970 227.16345215]
[114.45964050 242.13423157]
[115.39526367 257.10504150]
[117.26287842 271.98831177]
[120.05520630 286.72610474]
[122.84752655 301.46392822]
[133.58612061 290.99096680]
[148.49462891 292.64520264]
[156.67613220 305.21752930]
[152.15061951 319.51855469]
[138.22587585 325.09542847]
[125.08014679 317.87240601]
[126.32701874 332.82049561]
[127.57389069 347.76858521]
[128.82077026 362.71667480]
[141.71783447 364.64089966]
[153.91111755 369.24295044]
[164.85165405 376.31250000]
[174.04750061 385.52813721]
[181.08595276 396.47210693]
[185.65199280 408.64913940]
[187.54240417 421.50891113]
[186.67481995 434.47091675]
[183.09133911 446.95065308]
[176.95642090 458.38598633]
[168.54939270 468.26248169]
[158.25173950 476.13653564]
[146.52975464 481.65530396]
[133.91346741 484.57247925]
[133.91346741 499.57247925]
[133.91346741 514.57244873]
[133.91346741 529.57244873]
[133.91346741 544.57244873]
[133.91346741 559.57244873]
[133.91346741 574.57244873]
[133.91346741 589.57244873]
[133.91346741 604.57244873]
[133.91346741 619.57244873]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[20 127]
[21 126]
[22 125]
[23 124]
[24 118]
[25 117]
[26 116]
[33 115]
[34 114]
[35 113]
[36 112]
[40 109]
[41 108]
[42 107]
[43 106]
[49 102]
[50 101]
[51 100]
[54 97]
[55 96]
[56 95]
[57 93]
[58 92]
[59 91]
[61 89]
[62 88]
[63 83]
[64 82]
[65 81]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
