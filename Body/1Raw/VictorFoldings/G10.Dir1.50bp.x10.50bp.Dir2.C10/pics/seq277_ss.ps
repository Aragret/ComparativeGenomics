%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:23 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCCACCAAACCCCCCCUCCCCCGCUUCUGGCCACAGCACUUAAACACAUCUCUGCCAAACCCCxxxxxxxxxxGCCCAUCCUACCCAGCACACACACACCGCUGCUAACCCCAUACCCCGAACCAACCAAACCCCCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[-13.15927982 261.70715332]
[-22.22019196 273.66122437]
[-31.28110504 285.61529541]
[-40.34201813 297.56936646]
[-49.40293121 309.52343750]
[-58.34223557 321.56872559]
[-67.15901184 333.70397949]
[-75.97579193 345.83923340]
[-84.79257202 357.97448730]
[-93.60935211 370.10974121]
[-87.28910828 384.10797119]
[-88.83069611 399.38928223]
[-97.81943512 411.84313965]
[-111.83739471 418.11947632]
[-127.11382294 416.52999878]
[-139.53942871 407.50225830]
[-145.77178955 393.46469116]
[-144.13442993 378.19332886]
[-135.06779480 365.79608154]
[-121.01076508 359.60775757]
[-105.74460602 361.29296875]
[-96.92782593 349.15771484]
[-88.11104584 337.02246094]
[-79.29426575 324.88720703]
[-70.47748566 312.75195312]
[-69.08201599 305.44903564]
[-61.35700226 300.46252441]
[-52.29608917 288.50845337]
[-43.23517609 276.55438232]
[-34.17426682 264.60031128]
[-25.11335373 252.64624023]
[-50.85707474 227.26495361]
[-71.53940582 197.61381531]
[-86.46643829 164.68763733]
[-95.13735962 129.59114075]
[-97.26124573 93.50183868]
[-112.22351837 92.43864441]
[-127.18579102 91.37545013]
[-141.68865967 99.03044128]
[-155.42353821 90.07025146]
[-154.26116943 73.71234894]
[-139.39729309 66.78434753]
[-126.12259674 76.41316986]
[-111.16031647 77.47637177]
[-96.19804382 78.53956604]
[-94.88148499 68.76812744]
[-93.07858276 59.07463455]
[-90.79382324 49.48327255]
[-88.03292847 40.01797867]
[-84.80277252 30.70237923]
[-81.11141968 21.55971909]
[-76.96808624 12.61281490]
[-72.38311005 3.88399339]
[-67.36793518 -4.60495996]
[-61.93507767 -12.83286095]
[-56.09809494 -20.77917671]
[-49.87154770 -28.42407417]
[-43.27098465 -35.74847794]
[-36.31287384 -42.73410416]
[-29.01457977 -49.36352539]
[-21.39431572 -55.62019348]
[-13.47109985 -61.48849487]
[-5.26470518 -66.95378113]
[3.20438886 -72.00242615]
[11.91504574 -76.62181091]
[20.84552765 -80.80042267]
[29.97354889 -84.52783203]
[39.27632904 -87.79473114]
[48.73064804 -90.59296417]
[58.31291962 -92.91555786]
[67.99922180 -94.75670624]
[77.76538849 -96.11181641]
[87.58704376 -96.97751617]
[97.43967438 -97.35163879]
[107.29869080 -97.23324585]
[117.13949585 -96.62263489]
[126.93753052 -95.52133942]
[136.66833496 -93.93209076]
[146.30763245 -91.85887146]
[155.83137512 -89.30684662]
[165.21577454 -86.28238678]
[174.43742371 -82.79303741]
[183.47329712 -78.84751129]
[192.30085754 -74.45565033]
[200.89807129 -69.62842560]
[209.24349976 -64.37786865]
[217.31628418 -58.71708679]
[225.09629822 -52.66021347]
[232.56411743 -46.22236252]
[239.70111084 -39.41959381]
[246.48947144 -32.26889420]
[252.91224670 -24.78810120]
[258.95339966 -16.99588585]
[264.59790039 -8.91169643]
[269.83160400 -0.55570620]
[283.01989746 -7.70195246]
[296.20819092 -14.84819889]
[309.39648438 -21.99444580]
[309.12988281 -37.29763031]
[316.01593018 -50.96661377]
[328.47225952 -59.86035538]
[343.63647461 -61.93514633]
[358.02398682 -56.71421051]
[368.32864380 -45.39728546]
[372.18249512 -30.58490944]
[368.69995117 -15.68086529]
[358.68130493 -4.10998964]
[344.42874146 1.46881306]
[329.21740723 -0.22642413]
[316.54275513 -8.80614853]
[303.35443115 -1.65990222]
[290.16613770 5.48634386]
[276.97784424 12.63259029]
[282.00488281 23.65573311]
[286.34609985 34.96654510]
[289.98519897 46.52240372]
[292.90838623 58.27976990]
[295.10470581 70.19433594]
[296.56585693 82.22121429]
[297.28634644 94.31507874]
[297.26345825 106.43036652]
[296.49728394 118.52143097]
[294.99069214 130.54269409]
[292.74935913 142.44888306]
[289.78173828 154.19511414]
[286.09902954 165.73713684]
[281.71508789 177.03146362]
[276.64645386 188.03553772]
[270.91220093 198.70788574]
[264.53393555 209.00830078]
[257.53570557 218.89796448]
[249.94387817 228.33961487]
[241.78704834 237.29768372]
[233.09597778 245.73841858]
[223.90338135 253.62998962]
[214.24392700 260.94268799]
[204.15397644 267.64895630]
[193.67158508 273.72351074]
[182.83624268 279.14346313]
[171.68876648 283.88839722]
[160.27116394 287.94046021]
[148.62644958 291.28433228]
[136.79852295 293.90744019]
[124.83192444 295.79989624]
[112.77176666 296.95458984]
[100.66348267 297.36712646]
[88.55269623 297.03598022]
[76.48504639 295.96243286]
[64.50600433 294.15045166]
[52.66070175 291.60693359]
[40.99377441 288.34143066]
[29.54918480 284.36624146]
[18.37005615 279.69635010]
[7.49851227 274.34936523]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 31]
[2 30]
[3 29]
[4 28]
[5 27]
[6 25]
[7 24]
[8 23]
[9 22]
[10 21]
[36 45]
[37 44]
[38 43]
[95 113]
[96 112]
[97 111]
[98 110]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
