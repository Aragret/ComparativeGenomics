%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:41 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGAACAACUUAAUAUGACUAGCUUACACAAUAGCUUUUAUAGUAAAGAUACCUCUUUACGGAxxxxxxxxxxCCCUCUACAUAUUUACCACAACACAAUGGGGCUCACUCACCCACCACAUUAACAACAUAACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[230.42465210 443.43930054]
[230.42465210 428.43930054]
[230.42465210 413.43930054]
[230.42465210 398.43930054]
[230.42465210 383.43930054]
[230.42465210 368.43930054]
[230.42465210 353.43930054]
[230.42465210 338.43930054]
[230.42465210 323.43930054]
[230.42465210 308.43930054]
[212.38471985 304.53628540]
[195.76112366 296.49395752]
[181.48927307 284.75994873]
[170.37338257 269.98965454]
[163.04124451 253.00984192]
[159.90864563 234.77215576]
[161.15591431 216.29998779]
[166.71745300 198.63085938]
[176.28524780 182.75831604]
[165.40641785 172.43112183]
[154.52758789 162.10391235]
[143.64877319 151.77670288]
[132.76994324 141.44950867]
[121.89111328 131.12229919]
[103.55893707 141.87980652]
[80.25866699 141.56101990]
[58.71540833 128.19158936]
[46.16325378 103.82388306]
[31.22894478 105.22618866]
[16.29463768 106.62849426]
[1.36033034 108.03079224]
[-6.43067122 121.45018005]
[-20.63502693 127.69644928]
[-35.79087067 124.36779022]
[-46.07047272 112.74413300]
[-47.52111816 97.29501343]
[-39.58499908 83.96093750]
[-25.31372070 77.86912537]
[-10.19487667 81.36199951]
[-0.04197323 93.09648895]
[14.89233398 91.69418335]
[29.82664299 90.29187775]
[44.76094818 88.88957214]
[47.57692719 81.93830109]
[33.67437363 76.30634308]
[19.77190971 70.67415619]
[25.40432739 56.77178574]
[39.30632782 62.40378571]
[53.20888519 68.03574371]
[56.02486420 61.08446503]
[46.27721024 49.68344116]
[36.52956009 38.28242111]
[26.78190613 26.88140106]
[17.03425407 15.48038006]
[7.28660250 4.07935905]
[-2.46104932 -7.32166195]
[-18.09434509 -12.27464962]
[-21.35685349 -28.34599304]
[-8.89238548 -39.00287247]
[6.47668266 -33.28240204]
[8.93997192 -17.06931496]
[18.68762398 -5.66829300]
[28.43527603 5.73272800]
[38.18292618 17.13374901]
[47.93058014 28.53476906]
[57.67823029 39.93579102]
[67.42588043 51.33681107]
[81.49740601 46.14139557]
[81.49740601 31.14139557]
[67.72353363 24.56543350]
[58.17360687 12.65906239]
[54.74376678 -2.21369672]
[58.11501312 -17.09984589]
[67.61798096 -29.04373169]
[81.36584473 -35.67388535]
[96.62895966 -35.67388535]
[110.37683105 -29.04373169]
[119.87979126 -17.09984589]
[123.25103760 -2.21369672]
[119.82119751 12.65906239]
[110.27127075 24.56543350]
[96.49740601 31.14139557]
[96.49740601 46.14139557]
[118.57399750 52.73033142]
[134.60136414 67.30688477]
[142.19612122 86.12406921]
[140.92996216 105.00341797]
[132.21832275 120.24346924]
[143.09715271 130.57067871]
[153.97596741 140.89788818]
[164.85479736 151.22508240]
[175.73362732 161.55229187]
[186.61244202 171.87950134]
[199.19236755 162.99621582]
[213.26362610 156.75242615]
[228.27973938 153.38804626]
[243.65809631 153.03126526]
[258.80245972 155.69358826]
[273.12606812 161.26951599]
[286.07455444 169.54072571]
[297.14709473 180.18463135]
[305.91610718 192.78688049]
[312.04351807 206.85763550]
[315.29388428 221.85044861]
[315.54348755 237.18360901]
[330.30953979 239.82247925]
[345.07559204 242.46134949]
[359.84164429 245.10020447]
[374.78778076 239.91136169]
[385.95538330 249.76702881]
[400.72143555 252.40589905]
[409.61798096 240.00372314]
[423.01873779 232.69735718]
[438.26290894 231.93748474]
[452.32382202 237.87498474]
[462.40960693 249.33096313]
[466.51779175 264.03082275]
[463.83264160 279.05587769]
[454.88729858 291.42294312]
[441.45788574 298.67645264]
[426.21081543 299.37628174]
[412.17343140 293.38348389]
[402.13281250 281.88787842]
[398.08255005 267.17193604]
[383.31649780 264.53308105]
[369.42654419 269.91067505]
[357.20278931 259.86627197]
[342.43673706 257.22738647]
[327.67068481 254.58853149]
[312.90463257 251.94967651]
[310.16781616 259.99487305]
[306.57061768 267.69393921]
[302.15591431 274.95520020]
[296.97622681 281.69213867]
[291.09332275 287.82458496]
[284.57717896 293.27944946]
[277.50543213 297.99176025]
[269.96234131 301.90545654]
[262.03768921 304.97387695]
[253.82585144 307.16052246]
[245.42465210 308.43930054]
[245.42465210 323.43930054]
[245.42465210 338.43930054]
[245.42465210 353.43930054]
[245.42465210 368.43930054]
[245.42465210 383.43930054]
[245.42465210 398.43930054]
[245.42465210 413.43930054]
[245.42465210 428.43930054]
[245.42465210 443.43930054]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[19 93]
[20 92]
[21 91]
[22 90]
[23 89]
[24 88]
[28 43]
[29 42]
[30 41]
[31 40]
[50 67]
[51 66]
[52 65]
[53 64]
[54 63]
[55 62]
[56 61]
[68 83]
[69 82]
[105 130]
[106 129]
[107 128]
[108 127]
[110 125]
[111 124]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
