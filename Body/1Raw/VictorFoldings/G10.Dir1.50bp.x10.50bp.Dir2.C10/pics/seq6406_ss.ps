%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:37 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGAACUGACUAGUUCCCCUAAUAAUCGGUGCCCCCGAUAUGGCGUUUCCCCGCAUAAACAACxxxxxxxxxxAUCUAGGCCUUCUUACGAGCCAAAACCUGCCCCUACUCCUCCUAGACCUAACCUGACUAGCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[179.71469116 85.62648773]
[169.63085938 96.58850098]
[154.22673035 92.97969055]
[139.81451416 97.13758087]
[125.40230560 101.29547119]
[110.99008942 105.45335388]
[98.46412659 113.70564270]
[88.95576477 125.30698395]
[79.44741058 136.90832520]
[69.93904877 148.50967407]
[60.43069458 160.11100769]
[50.92233276 171.71235657]
[41.41397476 183.31369019]
[31.90561676 194.91503906]
[29.78015518 211.17585754]
[14.53341961 217.21482849]
[1.84994566 206.81956482]
[4.77740383 190.68382263]
[20.30427551 185.40667725]
[29.81263542 173.80532837]
[39.32099152 162.20399475]
[48.82935333 150.60264587]
[58.33771133 139.00131226]
[67.84606934 127.39997101]
[77.35442352 115.79862976]
[86.86278534 104.19728851]
[83.83127594 97.33725739]
[72.65618134 107.34311676]
[59.68684387 99.80678558]
[62.84675598 85.14340210]
[77.76826477 83.61720276]
[74.73676300 76.75717926]
[59.75704575 75.97733307]
[44.77733231 75.19748688]
[29.79761696 74.41764069]
[14.81790161 73.63780212]
[1.98478556 83.26539612]
[-13.50686550 79.09547424]
[-19.77318192 64.32682800]
[-12.00718307 50.28870773]
[3.83372235 47.74995422]
[15.59774685 58.65808487]
[30.57746124 59.43793106]
[45.55717468 60.21777344]
[60.53689194 60.99761963]
[75.51660156 61.77746582]
[62.74454498 53.91143036]
[68.15408325 39.92082977]
[79.33818817 29.92503738]
[93.84609222 26.11442947]
[108.49868011 29.32402039]
[120.08515167 38.85049438]
[126.06655884 52.60632324]
[125.13220215 67.57719421]
[117.48671722 80.48266602]
[106.83219910 91.04113770]
[121.24441528 86.88325500]
[135.65663147 82.72536469]
[150.06884766 78.56747437]
[161.18353271 67.30806732]
[175.55679321 71.21427155]
[172.14379883 53.34029007]
[170.54510498 35.21436691]
[170.77677917 17.02017975]
[172.83634949 -1.05791271]
[176.70283508 -18.83674240]
[182.33692932 -36.13618469]
[189.68142700 -52.78098297]
[198.66177368 -68.60253143]
[209.18687439 -83.44057465]
[221.14997864 -97.14482880]
[234.42976379 -109.57652283]
[248.89158630 -120.60976410]
[264.38882446 -130.13285828]
[280.76440430 -138.04943848]
[297.85229492 -144.27937317]
[315.47933960 -148.75965881]
[333.46688843 -151.44502258]
[351.63265991 -152.30838013]
[369.79254150 -151.34111023]
[387.76257324 -148.55313110]
[405.36065674 -143.97283936]
[422.40850830 -137.64674377]
[438.73342896 -129.63906860]
[454.17007446 -120.03108215]
[468.56207275 -108.92023468]
[478.77554321 -119.90589905]
[488.98904419 -130.89155579]
[484.39984131 -145.54879761]
[487.76974487 -160.53343201]
[498.19229126 -171.81466675]
[512.86383057 -176.35791016]
[527.83782959 -172.94104004]
[539.08636475 -162.48320007]
[543.58355713 -147.79747009]
[540.11981201 -132.83425903]
[529.62670898 -121.61858368]
[514.92700195 -117.16741180]
[499.97470093 -120.67807770]
[489.76123047 -109.69241333]
[479.54772949 -98.70674896]
[488.19076538 -89.33977509]
[496.15182495 -79.38644409]
[503.39129639 -68.89630127]
[509.87310791 -57.92156601]
[515.56494141 -46.51686478]
[520.43841553 -34.73897552]
[524.46923828 -22.64652634]
[527.63732910 -10.29972172]
[529.92687988 2.23996997]
[531.32647705 14.91011524]
[531.82904053 27.64762878]
[531.43218994 40.38909149]
[530.13769531 53.07106018]
[527.95214844 65.63037872]
[524.88623047 78.00451660]
[520.95532227 90.13184357]
[516.17883301 101.95196533]
[510.58065796 113.40602875]
[504.18853760 124.43697357]
[497.03433228 134.98986816]
[489.15359497 145.01213074]
[480.58557129 154.45387268]
[471.37292480 163.26803589]
[461.56143188 171.41072083]
[451.19998169 178.84135437]
[440.34014893 185.52290344]
[429.03598022 191.42210388]
[417.34375000 196.50952148]
[405.32165527 200.75982666]
[393.02957153 204.15179443]
[380.52865601 206.66853333]
[367.88116455 208.29748535]
[355.15008545 209.03048706]
[342.39880371 208.86386108]
[329.69079590 207.79843140]
[317.08932495 205.83944702]
[304.65719604 202.99662781]
[292.45626831 199.28413391]
[280.54733276 194.72038269]
[268.98968506 189.32809448]
[257.84088135 183.13409424]
[247.15643311 176.16917419]
[236.98960876 168.46800232]
[227.39099121 160.06889343]
[218.40844727 151.01365662]
[210.08668518 141.34735107]
[202.46717834 131.11810303]
[195.58789062 120.37680054]
[189.48309326 109.17693329]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 61]
[3 59]
[4 58]
[5 57]
[6 56]
[7 26]
[8 25]
[9 24]
[10 23]
[11 22]
[12 21]
[13 20]
[14 19]
[32 46]
[33 45]
[34 44]
[35 43]
[36 42]
[86 101]
[87 100]
[88 99]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
