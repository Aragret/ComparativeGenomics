%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:56 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGACCGCUAACAUUACUGCAGGCCACCUACUCAUGCACCUAAUUGGAAGCGCCACCCUAGCAAUxxxxxxxxxxAAACCCAUAUAACCUCCCCCAAAAUUCAGAAUAAUAACACACCCGACCACACCGCUAACAAUCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[326.66491699 140.70994568]
[313.62414551 133.29788208]
[300.58340454 125.88581085]
[287.54263306 118.47374725]
[274.50189209 111.06167603]
[261.38668823 103.78215027]
[248.19837952 96.63590240]
[233.50543213 93.61642456]
[218.56777954 94.98264313]
[203.63012695 96.34886169]
[193.46284485 109.71199799]
[176.44496155 111.65352631]
[163.01034546 100.49346924]
[148.10345459 102.16214752]
[133.19656372 103.83082581]
[118.28966522 105.49949646]
[109.16561890 116.75552368]
[94.76603699 118.36741638]
[83.37901306 109.40739441]
[68.47212219 111.07607269]
[53.58290100 112.89572906]
[38.71288681 114.86618042]
[23.84287262 116.83663177]
[9.54474449 128.39706421]
[-6.40519238 121.13845825]
[-21.23221779 123.40987396]
[-36.05924225 125.68128967]
[-50.88626862 127.95270538]
[-63.35565948 137.69050598]
[-77.10780334 131.96969604]
[-83.29294586 146.10290527]
[-96.14984131 154.62954712]
[-111.57592010 154.82879639]
[-124.64876556 146.63708496]
[-131.19688416 132.66835022]
[-129.13079834 117.37995911]
[-119.10977936 105.65039062]
[-104.33150482 101.22250366]
[-89.51166534 105.50922394]
[-79.37921906 117.14266968]
[-67.97035980 107.56733704]
[-53.15768433 113.12567902]
[-38.33065796 110.85426331]
[-23.50363350 108.58284760]
[-8.67660904 106.31143188]
[-1.23587883 96.72739410]
[11.14090443 94.74240112]
[21.87241936 101.96662140]
[36.74243546 99.99617004]
[51.61244965 98.02571869]
[57.86697006 94.00569153]
[66.80344391 96.16917419]
[81.71033478 94.50050354]
[90.83438110 83.24447632]
[105.23396301 81.63258362]
[116.62098694 90.59260559]
[131.52787781 88.92392731]
[146.43476868 87.25524902]
[161.34167480 85.58657074]
[168.50411987 74.13832855]
[180.78067017 68.99810791]
[193.58256531 71.84339142]
[202.26391602 81.41120911]
[217.20156860 80.04499054]
[232.13922119 78.67877197]
[218.69604492 72.02436066]
[206.83312988 62.84442902]
[197.01841736 51.50109482]
[189.63905334 38.44180679]
[184.98612976 24.18171120]
[183.24319458 9.28331566]
[184.47900391 -5.66569042]
[188.64479065 -20.07562256]
[195.57624817 -33.37806320]
[204.99995422 -45.04827499]
[216.54417419 -54.62590790]
[229.75350952 -61.73316574]
[244.10693359 -66.08969116]
[259.03823853 -67.52362823]
[273.95843506 -65.97842407]
[288.27899170 -61.51502228]
[301.43499756 -54.30949020]
[312.90747070 -44.64606094]
[322.24392700 -32.90592194]
[329.07601929 -19.55218315]
[333.13427734 -5.11159563]
[334.25860596 9.84620762]
[332.40466309 24.73119545]
[327.64556885 38.95621109]
[320.16906738 51.96012497]
[310.27005005 63.22998047]
[298.33901978 72.32122040]
[284.84661865 78.87523651]
[270.32507324 82.63348389]
[255.34463501 83.44760895]
[268.53292847 90.59385681]
[277.62762451 91.94580841]
[281.91394043 98.02092743]
[294.95471191 105.43299103]
[307.99545288 112.84505463]
[321.03622437 120.25711823]
[334.07696533 127.66918182]
[342.93630981 115.54441833]
[353.12002563 104.50859070]
[364.49539185 94.70558167]
[376.91409302 86.26319885]
[390.21420288 79.29149628]
[404.22235107 73.88137054]
[418.75592041 70.10334778]
[433.62539673 68.00669098]
[448.63696289 67.61872864]
[463.59490967 68.94451904]
[478.30422974 71.96677399]
[492.57312012 76.64610291]
[506.21560669 82.92149353]
[519.05377197 90.71112823]
[530.92034912 99.91346741]
[541.66052246 110.40853119]
[551.13433838 122.05948639]
[559.21820068 134.71446228]
[565.80682373 148.20845032]
[570.81433105 162.36553955]
[574.17529297 177.00115967]
[575.84600830 191.92451477]
[575.80462646 206.94104004]
[574.05175781 221.85496521]
[570.61022949 236.47186279]
[565.52490234 250.60116577]
[558.86206055 264.05865479]
[550.70861816 276.66891479]
[541.17077637 288.26754761]
[530.37298584 298.70327759]
[518.45593262 307.84014893]
[505.57504272 315.55895996]
[491.89819336 321.75912476]
[477.60372925 326.35980225]
[462.87802124 329.30099487]
[447.91299438 330.54440308]
[432.90377808 330.07376099]
[418.04608154 327.89526367]
[403.53353882 324.03726196]
[389.55538940 318.55007935]
[376.29385376 311.50524902]
[363.92184448 302.99459839]
[352.60064697 293.12908936]
[342.47784424 282.03735352]
[333.68542480 269.86398315]
[326.33801270 256.76766968]
[320.53137207 242.91917419]
[316.34121704 228.49903870]
[313.82220459 213.69523621]
[313.00714111 198.70079041]
[313.90664673 183.71118164]
[316.50903320 168.92181396]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 102]
[2 101]
[3 100]
[4 99]
[5 98]
[6 96]
[7 95]
[8 65]
[9 64]
[10 63]
[13 59]
[14 58]
[15 57]
[16 56]
[19 53]
[20 52]
[21 50]
[22 49]
[23 48]
[25 45]
[26 44]
[27 43]
[28 42]
[30 40]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
