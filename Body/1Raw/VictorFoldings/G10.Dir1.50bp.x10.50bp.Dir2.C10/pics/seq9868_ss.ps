%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:40 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCCCUAACAACCCCCCUCCUAAUACUAACUACCUGACUCCUACCCCUCACAAUCAUGGCAAxxxxxxxxxxCCUCACACGAUUCUUUACCUUUCACUUCAUCUUGCCCUUCAUUAUUGCAGCCCUAGCAACCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[-93.65025330 373.51187134]
[-107.42316437 365.71978760]
[-116.18937683 377.89163208]
[-124.95558167 390.06347656]
[-133.72178650 402.23529053]
[-142.48799133 414.40713501]
[-151.25419617 426.57897949]
[-160.02041626 438.75082397]
[-168.78662109 450.92263794]
[-177.55282593 463.09448242]
[-171.80033875 477.40924072]
[-174.72264099 492.55731201]
[-185.38722229 503.70498657]
[-200.39103699 507.29507446]
[-214.94645691 502.18200684]
[-224.40887451 489.99731445]
[-225.75888062 474.62915039]
[-218.56567383 460.98138428]
[-205.12460327 453.40896606]
[-189.72465515 454.32827759]
[-180.95845032 442.15643311]
[-172.19224548 429.98461914]
[-163.42604065 417.81277466]
[-154.65983582 405.64093018]
[-145.89363098 393.46908569]
[-137.12741089 381.29727173]
[-128.36120605 369.12542725]
[-119.59500122 356.95358276]
[-130.20933533 347.49746704]
[-139.81393433 337.01638794]
[-148.31028748 325.61764526]
[-155.61128235 313.41790771]
[-161.64199829 300.54205322]
[-166.34056091 287.12197876]
[-169.65869141 273.29504395]
[-171.56230164 259.20288086]
[-172.03173828 244.98985291]
[-171.06207275 230.80149841]
[-168.66308594 216.78317261]
[-164.85925293 203.07852173]
[-159.68939209 189.82794189]
[-153.20632935 177.16722107]
[-145.47637939 165.22608948]
[-136.57859802 154.12696838]
[-126.60402679 143.98361206]
[-115.65474701 134.90002441]
[-103.84283447 126.96934509]
[-91.28920746 120.27293396]
[-78.12239838 114.87949371]
[-64.47722626 110.84439850]
[-50.49343109 108.20910645]
[-36.31422806 107.00074005]
[-22.08485603 107.23181152]
[-7.95106840 108.90007782]
[5.94233751 111.98859406]
[19.45301819 116.46584320]
[32.44253540 122.28609467]
[44.77777863 129.38984680]
[56.33232498 137.70443726]
[66.31504822 126.50866699]
[76.29777527 115.31290436]
[86.28050232 104.11714172]
[89.30883026 90.46720123]
[102.52372742 85.90013885]
[112.50645447 74.70436859]
[122.01481628 63.10302734]
[131.03234863 51.11619568]
[140.04988098 39.12936401]
[149.06739807 27.14253044]
[158.08493042 15.15569782]
[147.51829529 4.47093534]
[138.62007141 -7.63853216]
[131.57987976 -20.91459084]
[126.54782867 -35.07426071]
[123.63114929 -49.81572723]
[122.89202118 -64.82477570]
[124.34619904 -79.78148651]
[127.96268463 -94.36705780]
[133.66439819 -108.27059937]
[141.32978821 -121.19574738]
[150.79548645 -132.86701965]
[161.85972595 -143.03561401]
[174.28666687 -151.48481750]
[187.81143188 -158.03451538]
[202.14575195 -162.54508972]
[216.98406982 -164.92042542]
[232.01011658 -165.10987854]
[246.90359497 -163.10942078]
[261.34707642 -158.96166992]
[275.03268433 -152.75505066]
[287.66870117 -144.62185669]
[298.98580933 -134.73544312]
[308.74276733 -123.30654907]
[316.73159790 -110.57877350]
[322.78204346 -96.82341003]
[326.76510620 -82.33365631]
[328.59591675 -67.41836548]
[328.23544312 -52.39545059]
[325.69137573 -37.58513260]
[321.01791382 -23.30309296]
[314.31469727 -9.85375214]
[305.72460938 2.47621465]
[295.43072510 13.42399406]
[283.65246582 22.75623322]
[270.64089966 30.27401352]
[256.67337036 35.81709671]
[242.04757690 39.26732635]
[227.07528687 40.55116653]
[212.07562256 39.64124680]
[197.36830139 36.55696487]
[183.26683044 31.36406326]
[170.07176208 24.17322731]
[161.05422974 36.16006088]
[152.03671265 48.14689255]
[143.01918030 60.13372421]
[134.00164795 72.12055969]
[134.30319214 74.96949005]
[133.45718384 78.11244965]
[131.34455872 81.09887695]
[128.01666260 83.44326019]
[123.70222473 84.68709564]
[113.71949768 95.88285828]
[110.69116974 109.53279877]
[97.47627258 114.09986115]
[87.49354553 125.29563141]
[77.51081848 136.49139404]
[67.52809143 147.68716431]
[78.12384033 159.46961975]
[87.32649231 172.36843872]
[95.01940918 186.21978760]
[101.10510254 200.84777832]
[105.50652313 216.06663513]
[108.16797638 231.68313599]
[109.05587769 247.49903870]
[108.15915680 263.31356812]
[105.48937988 278.92602539]
[101.08063507 294.13824463]
[94.98906708 308.75720215]
[87.29217529 322.59741211]
[78.08782959 335.48330688]
[67.49301147 347.25143433]
[55.64236069 357.75256348]
[42.68641663 366.85351562]
[28.78974533 374.43896484]
[14.12882519 380.41278076]
[-1.11017382 384.69934082]
[-16.73377228 387.24438477]
[-32.54362869 388.01583862]
[-48.33905792 387.00408936]
[-63.91958237 384.22216797]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 28]
[3 27]
[4 26]
[5 25]
[6 24]
[7 23]
[8 22]
[9 21]
[10 20]
[59 127]
[60 126]
[61 125]
[62 124]
[64 122]
[65 121]
[66 116]
[67 115]
[68 114]
[69 113]
[70 112]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
