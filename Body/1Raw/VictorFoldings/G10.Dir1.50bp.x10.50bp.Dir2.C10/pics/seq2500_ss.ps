%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:04 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGAACUAAUGUUAGUAUAAGUAACAUGAAAACAUUCUCCUCCGCAUAAGCCUGCGUCAGAUUxxxxxxxxxxACUUCACGUCAUUAUUGGCUCAACUUUCCUCACUAUCUGCUUCAUCCGCCAACUAAUAUUCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[120.88033295 294.46405029]
[120.56827545 279.46731567]
[120.25621796 264.47055054]
[119.94416809 249.47380066]
[119.63211060 234.47705078]
[119.32005310 219.48028564]
[119.00799561 204.48353577]
[118.69593811 189.48678589]
[118.38388062 174.49003601]
[115.43840027 159.78207397]
[109.95137024 145.82168579]
[104.46434021 131.86128235]
[96.19013977 136.91654968]
[85.78237915 139.57638550]
[73.97477722 139.12814331]
[61.71264267 135.08709717]
[48.77458572 142.67701721]
[35.83652878 150.26692200]
[22.89847374 157.85682678]
[9.96041775 165.44673157]
[-2.97763777 173.03665161]
[-10.96577168 186.69316101]
[-25.85854149 186.45936584]
[-36.46096802 199.68907166]
[-52.10868835 193.16333008]
[-50.16970062 176.32061768]
[-33.44844818 173.52131653]
[-26.38573265 160.40768433]
[-10.56754589 160.09858704]
[2.37050986 152.50868225]
[15.30856609 144.91877747]
[28.24662209 137.32885742]
[41.18467712 129.73895264]
[54.12273407 122.14904785]
[50.71975708 107.54015350]
[35.75950623 106.44884491]
[20.79925919 105.35753632]
[6.28203535 112.98526001]
[-7.43598700 103.99928284]
[-6.24288273 87.64359283]
[8.63398457 80.74353027]
[21.89056969 90.39728546]
[36.85081863 91.48859406]
[51.81106567 92.57990265]
[54.91376877 85.75178528]
[40.00833893 84.07007599]
[37.00172806 69.37448883]
[50.04898071 61.97386932]
[61.11917877 72.09554291]
[64.22187805 65.26742554]
[53.56025314 54.71613312]
[42.89862823 44.16484451]
[32.23700333 33.61355209]
[16.43621826 33.94637299]
[5.08601475 22.94871902]
[4.92026711 7.14529848]
[16.03730965 -4.08799601]
[31.84159851 -4.08665133]
[42.95672989 7.14853525]
[42.78829193 22.95192719]
[53.44991684 33.50321579]
[64.11154175 44.05450821]
[74.77317047 54.60579681]
[98.82394409 57.96372986]
[114.03131104 71.04841614]
[123.53967285 59.44707489]
[133.04803467 47.84573364]
[142.55639648 36.24439240]
[152.06474304 24.64304924]
[141.81767273 13.65756893]
[133.12629700 1.40426719]
[126.14572144 -11.89818192]
[121.00054932 -26.01238060]
[117.78257751 -40.68644333]
[116.54924774 -55.65849304]
[117.32257080 -70.66133881]
[120.08873749 -85.42723846]
[124.79838562 -99.69267273]
[131.36746216 -113.20306396]
[139.67874146 -125.71730042]
[149.58390808 -137.01203918]
[160.90617371 -146.88574219]
[173.44348145 -155.16217041]
[186.97209167 -161.69363403]
[201.25057983 -166.36357117]
[216.02410889 -169.08863831]
[231.02905273 -169.82022095]
[245.99761963 -168.54524231]
[260.66265869 -165.28645325]
[274.76248169 -160.10202026]
[288.04547119 -153.08447266]
[300.27453613 -144.35903931]
[311.23147583 -134.08143616]
[320.72070312 -122.43506622]
[328.57293701 -109.62779999]
[334.64797974 -95.88817596]
[338.83743286 -81.46140289]
[341.06655884 -66.60494232]
[341.29556274 -51.58391953]
[339.52035522 -36.66641235]
[335.77258301 -22.11863518]
[330.11920166 -8.20021152]
[322.66104126 4.84046841]
[313.53121948 16.77067757]
[302.89266968 27.37750816]
[290.93527222 36.47166824]
[277.87237549 43.89086533]
[263.93713379 49.50268936]
[249.37823486 53.20699310]
[234.45550537 54.93767166]
[219.43522644 54.66383362]
[204.58549500 52.39036942]
[190.17129517 48.15785217]
[176.44985962 42.04181671]
[163.66609192 34.15140915]
[154.15773010 45.75275040]
[144.64936829 57.35409164]
[135.14100647 68.95542908]
[125.63265228 80.55677032]
[131.78166199 104.99983215]
[118.42472839 126.37425995]
[123.91175842 140.33464050]
[129.39878845 154.29504395]
[132.15594482 139.55061340]
[139.47148132 126.45545959]
[150.58135986 116.37723541]
[164.32527161 110.36849213]
[179.26780701 109.05678558]
[193.84837341 112.57910919]
[206.54420471 120.56759644]
[216.02934265 132.18792725]
[221.31317139 146.22650146]
[221.84384155 161.21710205]
[217.56593323 175.59414673]
[208.92622375 187.85610962]
[196.82705688 196.72233582]
[182.53204346 201.26686096]
[167.53416443 201.01506042]
[153.39976501 195.99320984]
[141.60505676 186.72579956]
[133.38063049 174.17797852]
[133.69268799 189.17472839]
[134.00474548 204.17147827]
[134.31680298 219.16822815]
[134.62886047 234.16499329]
[134.94091797 249.16174316]
[135.25297546 264.15850830]
[135.56503296 279.15524292]
[135.87709045 294.15200806]
[138.46807861 313.35974121]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 149]
[2 148]
[3 147]
[4 146]
[5 145]
[6 144]
[7 143]
[8 142]
[9 141]
[10 123]
[11 122]
[12 121]
[16 34]
[17 33]
[18 32]
[19 31]
[20 30]
[21 29]
[23 27]
[35 44]
[36 43]
[37 42]
[50 63]
[51 62]
[52 61]
[53 60]
[65 119]
[66 118]
[67 117]
[68 116]
[69 115]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
