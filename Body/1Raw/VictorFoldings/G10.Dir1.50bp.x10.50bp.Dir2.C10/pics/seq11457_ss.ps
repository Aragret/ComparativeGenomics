%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:49 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGACCAUCGUUGUAUUUCAACUACAAGAACACCAAUGACCCCAAUACGCAAAACUAACCCCCxxxxxxxxxxACCUCCUCAUUCUAACCUGAAUCGGAGGACAACCAGUAAGCUACCCUUUUACCAUCAUUGCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[168.07806396 101.14058685]
[153.14375305 102.54289246]
[138.20945740 103.94519806]
[123.27514648 105.34749603]
[108.34083557 106.74980164]
[93.80590057 110.45596313]
[80.02352142 116.37592316]
[66.24113464 122.29589081]
[52.45875549 128.21585083]
[65.01008606 136.42950439]
[66.62615967 151.34219360]
[56.12576294 162.05395508]
[41.18383408 160.73533630]
[32.72171021 148.35017395]
[36.92408752 133.95147705]
[22.60149002 138.40829468]
[8.27889347 142.86511230]
[-6.04370403 147.32192993]
[-20.36630058 151.77874756]
[-34.68889999 156.23556519]
[-39.75606918 170.78306580]
[-52.27136993 179.45605469]
[-67.31589508 179.10073853]
[-79.12503052 170.06291199]
[-93.44763184 174.51972961]
[-107.77022552 178.97654724]
[-112.62137604 193.71582031]
[-125.22921753 202.76136780]
[-140.74577332 202.63499451]
[-153.20462036 193.38529968]
[-157.81507874 178.56898499]
[-152.80432129 163.88320923]
[-140.09909058 154.97496033]
[-124.58481598 155.26965332]
[-112.22704315 164.65394592]
[-97.90444183 160.19714355]
[-83.58184814 155.74032593]
[-78.98587036 141.59765625]
[-66.79924011 132.76872253]
[-51.57255936 132.80912781]
[-39.14571381 141.91296387]
[-24.82311630 137.45614624]
[-10.50051975 132.99932861]
[3.82207775 128.54251099]
[18.14467430 124.08570099]
[32.46727371 119.62888336]
[46.53879166 114.43347168]
[60.32117462 108.51350403]
[74.10355377 102.59354401]
[87.88593292 96.67358398]
[73.10353851 94.12783813]
[60.18726349 86.50093079]
[50.81912613 74.78606415]
[46.21910095 60.50881958]
[46.98622131 45.52844620]
[53.02059174 31.79577065]
[63.53638077 21.09913063]
[77.16417694 14.83149815]
[92.12929535 13.80907631]
[106.48289490 18.16501045]
[118.35577393 27.33204842]
[126.20179749 40.11640930]
[128.99920654 54.85325241]
[126.38371277 69.62346649]
[118.69591522 82.50359344]
[106.93852997 91.81549072]
[121.87284088 90.41319275]
[136.80714417 89.01088715]
[151.74145508 87.60858154]
[166.67576599 86.20627594]
[168.25726318 63.28190994]
[174.26472473 41.10626221]
[184.46736145 20.52530479]
[198.47445679 2.32386827]
[215.75018311 -12.80428600]
[235.63420105 -24.28291130]
[257.36685181 -31.67522049]
[280.11816406 -34.70050812]
[303.01965332 -33.24481583]
[325.19726562 -27.36521149]
[345.80502319 -17.28756332]
[364.05706787 -3.39786029]
[374.93588257 -13.72506523]
[385.81469727 -24.05227089]
[396.69354248 -34.37947464]
[407.57235718 -44.70668030]
[408.69964600 -57.59788132]
[418.02764893 -65.97686005]
[430.16226196 -65.73475647]
[441.25357056 -75.83340454]
[452.34490967 -85.93205261]
[463.43621826 -96.03070831]
[463.92532349 -111.82742310]
[475.49819946 -122.59051514]
[491.28884888 -121.93442535]
[501.92898560 -110.24839783]
[501.10598755 -94.46555328]
[489.30813599 -83.94956970]
[473.53485107 -84.93939209]
[462.44354248 -74.84074402]
[451.35223389 -64.74208832]
[440.26092529 -54.64344025]
[435.87576294 -37.67964554]
[417.89956665 -33.82785416]
[407.02072144 -23.50065041]
[396.14190674 -13.17344475]
[385.26309204 -2.84624004]
[374.38424683 7.48096466]
[380.35671997 15.26923275]
[385.65798950 23.52954674]
[390.25094604 32.20421219]
[394.10342407 41.23263168]
[397.18844604 50.55173111]
[399.48437500 60.09639740]
[400.97506714 69.79993439]
[401.65005493 79.59453583]
[401.50451660 89.41174316]
[400.53939819 99.18292999]
[398.76138306 108.83980560]
[396.18283081 118.31484985]
[392.82165527 127.54182434]
[388.70132446 136.45620728]
[383.85052490 144.99565125]
[378.30313110 153.10044861]
[372.09783936 160.71388245]
[365.27798462 167.78271484]
[357.89111328 174.25747681]
[349.98889160 180.09284973]
[341.62643433 185.24800110]
[332.86221313 189.68681335]
[323.75741577 193.37820435]
[314.37567139 196.29629517]
[304.78250122 198.42063904]
[295.04495239 199.73628235]
[285.23110962 200.23397827]
[275.40951538 199.91015625]
[265.64883423 198.76702881]
[256.01733398 196.81248474]
[246.58230591 194.06010437]
[237.40972900 190.52908325]
[228.56375122 186.24400330]
[220.10624695 181.23477173]
[212.09632874 175.53631592]
[204.59007263 169.18841553]
[197.63995361 162.23536682]
[191.29463196 154.72572327]
[185.59849548 146.71192932]
[180.59144592 138.24995422]
[176.30851746 129.39889526]
[172.77972412 120.22058868]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 70]
[2 69]
[3 68]
[4 67]
[5 66]
[6 50]
[7 49]
[8 48]
[9 47]
[15 46]
[16 45]
[17 44]
[18 43]
[19 42]
[20 41]
[24 37]
[25 36]
[26 35]
[82 108]
[83 107]
[84 106]
[85 105]
[86 104]
[89 102]
[90 101]
[91 100]
[92 99]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
