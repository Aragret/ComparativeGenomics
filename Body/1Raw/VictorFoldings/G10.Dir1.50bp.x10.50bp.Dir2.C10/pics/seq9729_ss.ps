%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:44 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCCUACUCCAAUGCUAAAACUAAUCGUCCCAACAAUUAUAUUACUACCACUGACAUGACUUUxxxxxxxxxxCUCCACCCCUGACUCCCCUCAGCCAUAGAAGGCCCCACCCCAGUCUCAGCCCUACUCCACUCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[180.54080200 258.61648560]
[191.23548889 248.03640747]
[182.82208252 235.61808777]
[174.40866089 223.19976807]
[165.99525452 210.78146362]
[152.45098877 204.58451843]
[151.11618042 188.81971741]
[142.70275879 176.40139771]
[134.28935242 163.98309326]
[125.87594604 151.56477356]
[117.46253204 139.14645386]
[109.04912567 126.72814178]
[100.63571167 114.30982971]
[88.14138031 108.03421783]
[86.94597626 94.10357666]
[78.53256226 81.68526459]
[73.72122192 79.36013794]
[70.63040924 75.76118469]
[69.45722961 71.77454376]
[70.01118469 68.23330688]
[62.37821198 55.32061005]
[54.74524307 42.40791321]
[46.98010635 29.57425880]
[39.08362579 16.82100105]
[25.73633194 23.68320847]
[11.88602543 29.46327019]
[-2.37972665 34.12464142]
[-16.97073174 37.63785553]
[-31.79473877 39.98069763]
[-46.75802231 41.13835526]
[-61.76598358 41.10351181]
[-76.72373199 39.87638092]
[-91.53669739 37.46472931]
[-106.11123657 33.88380051]
[-120.35518646 29.15623283]
[-134.17851257 23.31192017]
[-147.49378967 16.38780785]
[-160.21685791 8.42767811]
[-172.26725769 -0.51814616]
[-183.56881714 -10.39310360]
[-194.05007935 -21.13476181]
[-203.64479065 -32.67520523]
[-212.29225159 -44.94147491]
[-219.93782043 -57.85601425]
[-226.53315735 -71.33717346]
[-232.03654480 -85.29972076]
[-236.41320801 -99.65538025]
[-239.63546753 -114.31338501]
[-241.68295288 -129.18106079]
[-242.54272461 -144.16441345]
[-242.20933533 -159.16871643]
[-240.68489075 -174.09909058]
[-237.97904968 -188.86116028]
[-234.10890198 -203.36157227]
[-229.09890747 -217.50866699]
[-222.98077393 -231.21298218]
[-215.79315186 -244.38789368]
[-207.58149719 -256.95010376]
[-198.39772034 -268.82015991]
[-188.29989624 -279.92303467]
[-177.35185242 -290.18853760]
[-165.62283325 -299.55175781]
[-153.18696594 -307.95352173]
[-140.12289429 -315.34066772]
[-126.51319885 -321.66650391]
[-112.44393158 -326.89105225]
[-98.00405121 -330.98129272]
[-83.28484344 -333.91131592]
[-68.37937927 -335.66262817]
[-53.38188553 -336.22415161]
[-38.38718796 -335.59234619]
[-23.49009132 -333.77120972]
[-8.78477859 -330.77224731]
[5.63577795 -326.61441040]
[19.68040466 -321.32397461]
[33.26030731 -314.93441772]
[46.28962326 -307.48614502]
[58.68598175 -299.02621460]
[70.37100220 -289.60812378]
[81.27082062 -279.29144287]
[91.31650543 -268.14135742]
[100.44454956 -256.22839355]
[108.59725189 -243.62783813]
[115.72305298 -230.41940308]
[121.77690887 -216.68655396]
[126.72055054 -202.51614380]
[130.52270508 -187.99775696]
[133.15934753 -173.22317505]
[134.61381531 -158.28582764]
[134.87689209 -143.28012085]
[133.94691467 -128.30096436]
[131.82978821 -113.44304657]
[128.53887939 -98.80030060]
[124.09499359 -84.46530914]
[118.52622986 -70.52870178]
[111.86779785 -57.07859421]
[104.16179657 -44.20002365]
[95.45693970 -31.97441292]
[85.80827332 -20.47905350]
[75.27678680 -9.78662872]
[63.92907715 0.03526149]
[51.83687973 8.92451954]
[59.73336411 21.67777634]
[65.96700287 25.73411751]
[67.65794373 34.77494431]
[75.29090881 47.68764114]
[82.92388153 60.60033798]
[90.95087433 73.27185822]
[99.36428833 85.69017029]
[111.85861969 91.96578217]
[113.05402374 105.89642334]
[121.46743774 118.31473541]
[129.88084412 130.73304749]
[138.29425049 143.15136719]
[146.70767212 155.56967163]
[155.12107849 167.98799133]
[163.53448486 180.40631104]
[177.68054199 187.49148560]
[178.41357422 202.36804199]
[186.82698059 214.78636169]
[195.24038696 227.20468140]
[203.65380859 239.62298584]
[217.44522095 233.61372375]
[232.10607910 230.24118042]
[247.13700867 229.62022400]
[262.02609253 231.77200317]
[276.26617432 236.62322998]
[289.37228394 244.00866699]
[300.89801025 253.67678833]
[310.45077515 265.29827881]
[317.70526123 278.47732544]
[322.41433716 292.76504517]
[324.41763306 307.67483521]
[323.64691162 322.69882202]
[320.12844849 337.32534790]
[313.98202515 351.05621338]
[305.41705322 363.42373657]
[294.72521973 374.00671387]
[282.27066040 382.44464111]
[268.47763062 388.45019531]
[253.81587219 391.81878662]
[238.78477478 392.43569946]
[223.89627075 390.27990723]
[209.65748596 385.42483521]
[196.55337524 378.03585815]
[185.03027344 368.36465454]
[175.48062134 356.74057007]
[168.22970581 343.55957031]
[163.52447510 329.27056885]
[161.52519226 314.36026001]
[162.29995728 299.33645630]
[165.82237244 284.71090698]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 122]
[3 121]
[4 120]
[5 119]
[7 117]
[8 116]
[9 115]
[10 114]
[11 113]
[12 112]
[13 111]
[15 109]
[16 108]
[20 107]
[21 106]
[22 105]
[23 103]
[24 102]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
