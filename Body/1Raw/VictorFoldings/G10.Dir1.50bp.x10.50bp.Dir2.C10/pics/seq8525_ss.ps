%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:13 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCACAGUGAUUAUAGGCUUUCGCUCUAAGAUUAAAAAUGCCCUAGCCCACUUCUUACCACAAxxxxxxxxxxGCCUUCAUAGGCUAUGUCCUCCCGUGAGGCCAAAUAUCAUUCUGAGGGGCCACAGUAAUUACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[66.90843201 234.62959290]
[69.49420929 215.42117310]
[69.80218506 200.42433167]
[70.11016083 185.42749023]
[70.41813660 170.43064880]
[70.72612000 155.43382263]
[71.03409576 140.43698120]
[58.79114151 131.77037048]
[44.74916458 137.04512024]
[30.70718765 142.31985474]
[16.66521072 147.59458923]
[2.62323499 152.86933899]
[3.84278941 168.52044678]
[0.61892080 183.86959839]
[-6.78068972 197.68194580]
[-17.75275993 208.84863281]
[-31.40758133 216.47579956]
[-46.64116287 219.95610046]
[-62.22449493 219.01712036]
[-76.90268707 213.74261475]
[-89.49603271 204.56518555]
[-98.99481964 192.23071289]
[-112.92553711 197.79264832]
[-126.85624695 203.35458374]
[-140.72912598 209.05924988]
[-154.54270935 214.90603638]
[-163.98823547 228.31178284]
[-180.29411316 226.56532288]
[-186.68627930 211.46325684]
[-176.58900452 198.54130554]
[-160.38949585 201.09245300]
[-146.57591248 195.24566650]
[-141.61138916 189.70800781]
[-132.41818237 189.42385864]
[-118.48747253 183.86192322]
[-104.55675507 178.29998779]
[-106.19815063 164.03050232]
[-104.07675934 149.81216431]
[-98.33181763 136.62100220]
[-89.35153198 125.36418152]
[-77.74684906 116.81767273]
[-64.30989075 111.57266998]
[-49.95986938 109.99475861]
[-35.68024063 112.19843292]
[-22.45127296 118.03879547]
[-11.18277359 127.12109375]
[-2.65150666 138.82736206]
[11.39046955 133.55262756]
[25.43244553 128.27787781]
[39.47442245 123.00313568]
[53.51639938 117.72839355]
[88.79959869 50.58626556]
[86.95627594 35.69995880]
[85.11295319 20.81365204]
[83.26963043 5.92734432]
[81.42630005 -8.95896339]
[66.40695953 -9.72740650]
[51.74927902 -13.09244061]
[37.89868546 -18.95180702]
[25.27608490 -27.12744713]
[14.26506329 -37.37091064]
[5.20023441 -49.37091064]
[-1.64293242 -62.76277924]
[-6.05648136 -77.13955688]
[-7.90628910 -92.06434631]
[-7.13614273 -107.08360291]
[-3.76944590 -121.74089813]
[2.09149170 -135.59083557]
[10.26856232 -148.21250916]
[20.51327324 -159.22236633]
[32.51430130 -168.28582764]
[45.90694809 -175.12747192]
[60.28422546 -179.53939819]
[75.20922089 -181.38751221]
[90.22839355 -180.61566162]
[104.88530731 -177.24729919]
[118.73457336 -171.38479614]
[131.35531616 -163.20629883]
[142.36401367 -152.96032715]
[151.42611694 -140.95828247]
[158.26625061 -127.56485748]
[162.67654419 -113.18708038]
[164.52296448 -98.26187134]
[163.74940491 -83.24279022]
[160.37939453 -68.58625031]
[154.51530457 -54.73765564]
[146.33537292 -42.11783600]
[136.08816528 -31.11030006]
[124.08508301 -22.04955482]
[110.69088745 -15.21094513]
[96.31260681 -10.80228710]
[98.15593719 4.08402014]
[99.99925995 18.97032738]
[101.84258270 33.85663605]
[103.68590546 48.74294281]
[116.75260162 56.10918427]
[130.44322205 49.98000717]
[139.87721252 37.27919769]
[154.65504456 39.14058685]
[168.34567261 33.01141357]
[182.03630066 26.88224030]
[195.72692871 20.75306511]
[204.89520264 7.15620422]
[221.23352051 8.56750679]
[227.93440247 23.53514671]
[218.10455322 36.66169739]
[201.85609436 34.44369125]
[188.16546631 40.57286453]
[174.47485352 46.70203781]
[160.78422546 52.83121109]
[152.32948303 65.09362030]
[136.57240295 63.67063522]
[122.88177490 69.79980469]
[123.34348297 77.28558350]
[138.31504822 76.36241913]
[139.23796082 91.33399963]
[124.26689911 92.25713348]
[124.72860718 99.74290466]
[139.06866455 104.14321136]
[153.40872192 108.54351044]
[170.32472229 107.40964508]
[176.09707642 123.35066986]
[162.37698364 133.31036377]
[149.00842285 122.88356781]
[134.66836548 118.48326874]
[120.32830048 114.08296967]
[111.91489410 126.50128174]
[121.31874847 138.18748474]
[130.72261047 149.87370300]
[140.12646484 161.55990601]
[154.98004150 158.04794312]
[169.88459778 161.33689880]
[181.88079834 170.77372742]
[188.58680725 184.48474121]
[188.67114258 199.74763489]
[182.11705017 213.53192139]
[170.22584534 223.10073853]
[155.35855103 226.55416870]
[140.46707153 223.20655823]
[128.50811768 213.72256470]
[121.85615540 199.98522949]
[121.83193207 184.72213745]
[128.44026184 170.96376038]
[119.03639984 159.27755737]
[109.63254547 147.59135437]
[100.22868347 135.90513611]
[86.03092957 140.74494934]
[85.72295380 155.74179077]
[85.41497803 170.73863220]
[85.10700226 185.73547363]
[84.79901886 200.73231506]
[84.49104309 215.72914124]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 152]
[3 151]
[4 150]
[5 149]
[6 148]
[7 147]
[8 51]
[9 50]
[10 49]
[11 48]
[12 47]
[22 36]
[23 35]
[24 34]
[25 32]
[26 31]
[52 95]
[53 94]
[54 93]
[55 92]
[56 91]
[96 113]
[97 112]
[99 110]
[100 109]
[101 108]
[102 107]
[118 126]
[119 125]
[120 124]
[127 146]
[128 145]
[129 144]
[130 143]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
