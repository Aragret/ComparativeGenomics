%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:17 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCCACCCUAACCCUGACUUCCCUAAUUCCCCCCAUCCUUACCACCCUCGUUAACCCUAACAxxxxxxxxxxGGAUCAAACAACCCCCUAGGAAUCACCUCCCAUUCCGAUAAAAUCACCUUCCACCCUUACCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[-46.19641876 226.91600037]
[-57.89604568 236.30316162]
[-69.59566498 245.69032288]
[-81.29528809 255.07748413]
[-92.99491882 264.46466064]
[-104.69454193 273.85180664]
[-114.20289612 285.45315552]
[-121.10989380 298.76831055]
[-128.01689148 312.08346558]
[-126.73777008 328.43264771]
[-140.40834045 337.49066162]
[-154.96548462 329.93942261]
[-155.43406677 313.54696655]
[-141.33204651 305.17645264]
[-134.42504883 291.86129761]
[-127.51805115 278.54614258]
[-140.34185791 286.32754517]
[-154.81774902 290.25799561]
[-169.81602478 290.03076172]
[-184.16621399 285.66360474]
[-196.74839783 277.49728394]
[-206.58067322 266.16915894]
[-212.89569092 252.56326294]
[-215.20065308 237.74140930]
[-213.31565857 222.86032104]
[-207.38783264 209.08132935]
[-197.87976074 197.47975159]
[-185.53347778 188.96098328]
[-171.31250000 184.18983459]
[-156.32664490 183.53866577]
[-141.74540710 187.05827332]
[-128.70674133 194.47401428]
[-118.22817993 205.20712280]
[-111.12747955 218.41999817]
[-107.95878601 233.08149719]
[-108.96939850 248.04740906]
[-114.08170319 262.15219116]
[-102.38208008 252.76502991]
[-90.68245697 243.37786865]
[-78.98282623 233.99070740]
[-67.28320312 224.60354614]
[-55.58358383 215.21638489]
[-66.74163818 198.37831116]
[-76.08452606 180.46926880]
[-83.51054382 161.68424988]
[-88.93883514 142.22772217]
[-92.31032562 122.31150055]
[-93.58830261 102.15238953]
[-92.75885773 81.96984863]
[-89.83102417 61.98358536]
[-84.83666229 42.41117477]
[-77.83015442 23.46568108]
[-68.88776398 5.35334969]
[-58.10684204 -11.72864914]
[-45.60475540 -27.59435844]
[-31.51759911 -42.07106018]
[-15.99872684 -55.00116348]
[0.78291905 -66.24390411]
[-6.39959002 -79.41248322]
[-13.58209896 -92.58106995]
[-20.76460838 -105.74964905]
[-35.03770828 -113.82495880]
[-34.91024780 -130.22361755]
[-20.51334763 -138.07608032]
[-6.65730238 -129.30441284]
[-7.59602499 -112.93215942]
[-0.41351619 -99.76358032]
[6.76899290 -86.59499359]
[13.95150185 -73.42641449]
[24.22863960 -78.15657806]
[34.76452637 -82.27835083]
[45.52318954 -85.77767181]
[56.46788406 -88.64257050]
[67.56123352 -90.86328125]
[78.76536560 -92.43221283]
[90.04200745 -93.34400177]
[101.35265350 -93.59554291]
[112.65867615 -93.18598175]
[123.92147827 -92.11670685]
[135.10258484 -90.39136505]
[146.16381836 -88.01586914]
[157.06741333 -84.99830627]
[167.77613831 -81.34899902]
[178.25340271 -77.08040619]
[188.46343994 -72.20709991]
[198.37138367 -66.74571991]
[207.94340515 -60.71492767]
[217.14680481 -54.13530350]
[225.95014954 -47.02932739]
[234.32341003 -39.42126083]
[242.23796082 -31.33708382]
[249.66677856 -22.80440331]
[256.58450317 -13.85235882]
[262.96749878 -4.51152086]
[268.79397583 5.18621397]
[274.04406738 15.20772743]
[278.69979858 25.51879883]
[282.74526978 36.08421326]
[286.16671753 46.86789703]
[300.73941040 43.31313705]
[315.31210327 39.75837326]
[329.88482666 36.20361328]
[344.45751953 32.64884949]
[350.21859741 18.24087715]
[363.36608887 9.99935818]
[378.84457397 11.09332848]
[390.70220947 21.10213280]
[394.37948608 36.17718124]
[388.46246338 50.52180862]
[375.22631836 58.62021637]
[359.76065063 57.35839844]
[348.01229858 47.22155380]
[333.43957520 50.77631378]
[318.86688232 54.33107758]
[304.29418945 57.88583755]
[289.72146606 61.44060135]
[292.02795410 75.37631226]
[293.31222534 89.44310760]
[293.56741333 103.56609344]
[292.79220581 117.67010498]
[290.99069214 131.68003845]
[288.17245483 145.52134705]
[284.35250854 159.12031555]
[279.55123901 172.40457153]
[273.79412842 185.30340576]
[267.11184692 197.74812317]
[259.53997803 209.67250061]
[251.11883545 221.01306152]
[241.89323425 231.70942688]
[231.91229248 241.70466614]
[221.22912598 250.94555664]
[209.90063477 259.38293457]
[197.98709106 266.97183228]
[185.55194092 273.67190552]
[172.66136169 279.44744873]
[159.38398743 284.26776123]
[145.79049683 288.10714722]
[131.95324707 290.94515991]
[117.94589233 292.76672363]
[103.84300995 293.56213379]
[89.71966553 293.32711792]
[75.65105438 292.06298828]
[61.71205521 289.77642822]
[47.97687531 286.47964478]
[34.51863480 282.19015503]
[21.40896988 276.93081665]
[8.71767235 270.72961426]
[-3.48769975 263.61956787]
[-15.14217281 255.63850403]
[-26.18370628 246.82893372]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 42]
[2 41]
[3 40]
[4 39]
[5 38]
[6 37]
[7 16]
[8 15]
[9 14]
[58 69]
[59 68]
[60 67]
[61 66]
[99 116]
[100 115]
[101 114]
[102 113]
[103 112]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
