%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:25 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGGCUUACACAAUAGCUUUUAUAGUAAAGAUACCUCUUUACGGACUCCACUUAUGACUCCCUAxxxxxxxxxxACCCCUUAAACACCCCUCCCCACAUCAAGCCCGAAUGAUAUUUCCUAUUCGCCUACACAAUCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[133.20396423 315.68887329]
[132.58813477 300.70153809]
[131.97232056 285.71417236]
[131.35649109 270.72680664]
[130.74066162 255.73947144]
[130.12484741 240.75210571]
[129.50901794 225.76475525]
[128.89318848 210.77740479]
[148.29910278 177.96015930]
[139.38294983 165.89772034]
[130.46679688 153.83529663]
[121.55064392 141.77285767]
[112.63449097 129.71043396]
[103.71833801 117.64800262]
[108.30123138 131.93075562]
[100.84730530 144.94763184]
[86.20948029 148.22392273]
[73.91777802 139.62660217]
[71.97476959 124.75297546]
[81.64505768 113.28678894]
[68.81140137 121.05192566]
[55.97774887 128.81706238]
[50.76374817 143.98919678]
[35.60307693 149.23645020]
[22.12570953 140.53356934]
[20.67032242 124.55667114]
[32.35337067 113.56185913]
[48.21261215 115.98340607]
[61.04626846 108.21826935]
[73.87992096 100.45314026]
[70.52050781 85.83348083]
[67.16140747 71.21511841]
[52.22539139 69.83110046]
[37.28937912 68.44707489]
[22.35336494 67.06304932]
[7.41735315 65.67902374]
[-7.51865959 64.29499817]
[-22.45467186 62.91096878]
[-37.11846542 70.25299072]
[-50.65790939 61.00012589]
[-49.14478683 44.67093277]
[-34.13566589 38.06348419]
[-21.07064629 47.97495651]
[-6.13463402 49.35898209]
[8.80137825 50.74300766]
[23.73739052 52.12703323]
[38.67340469 53.51105881]
[53.60941696 54.89508438]
[68.54542542 56.27910995]
[84.84088898 73.09345245]
[96.90314484 92.72579193]
[98.44043732 77.80477142]
[83.77552795 74.57395935]
[69.57450104 69.69248962]
[56.02250671 63.22402191]
[43.29621124 55.25287628]
[31.56153297 45.88296890]
[20.97146034 35.23646545]
[11.66405201 23.45215607]
[3.76065087 10.68367767]
[-2.63570523 -2.90250635]
[-7.44162750 -17.12927246]
[-10.59446049 -31.81114578]
[-12.05310059 -46.75671768]
[-11.79853153 -61.77114487]
[-9.83407307 -76.65867615]
[-6.18533373 -91.22522736]
[-0.89988428 -105.28089905]
[5.95336914 -118.64243317]
[14.28508091 -131.13565063]
[23.98662949 -142.59765625]
[34.93153381 -152.87904358]
[46.97710800 -161.84574890]
[59.96631241 -169.38088989]
[73.72980499 -175.38623047]
[88.08815002 -179.78347778]
[102.85415649 -182.51528931]
[117.83531952 -183.54606628]
[132.83633423 -182.86236572]
[147.66162109 -180.47309875]
[162.11790466 -176.40942383]
[176.01672363 -170.72430420]
[189.17687988 -163.49188232]
[201.42680359 -154.80641174]
[212.60678101 -144.78114319]
[222.57106018 -133.54678345]
[231.18974304 -121.24980164]
[238.35046387 -108.05049133]
[243.95988464 -94.12094116]
[247.94483948 -79.64275360]
[250.25340271 -64.80468750]
[250.85548401 -49.80017853]
[249.74320984 -34.82484436]
[246.93109131 -20.07392120]
[242.45579529 -5.73971510]
[236.37565613 7.99089813]
[228.76995850 20.93891144]
[219.73783875 32.93552017]
[209.39706421 43.82432556]
[197.88243103 53.46336746]
[185.34407043 61.72698212]
[171.94544983 68.50743103]
[157.86123657 73.71633148]
[143.27503967 77.28575897]
[128.37704468 79.16918945]
[113.36145782 79.34206390]
[111.82416534 94.26308441]
[115.78076935 108.73184967]
[124.69692230 120.79428101]
[133.61306763 132.85670471]
[142.52922058 144.91914368]
[151.44537354 156.98156738]
[160.36152649 169.04400635]
[172.51486206 177.83584595]
[186.76155090 182.52964783]
[201.00823975 187.22344971]
[215.25492859 191.91725159]
[226.65731812 181.62739563]
[241.68035889 178.43301392]
[256.28289795 183.19337463]
[266.53698730 194.62796021]
[269.68426514 209.66091919]
[264.87814331 224.24848938]
[253.41146851 234.46665955]
[238.36871338 237.56680298]
[223.79629517 232.71499634]
[213.61410522 221.21635437]
[210.56114197 206.16394043]
[196.31443787 201.47013855]
[182.06774902 196.77633667]
[167.82106018 192.08253479]
[161.83593750 196.60229492]
[172.08825684 207.55172729]
[182.34057617 218.50114441]
[196.19799805 224.24324036]
[201.16021729 238.39868164]
[193.92109680 251.53622437]
[179.30378723 254.90283203]
[167.04724121 246.25546265]
[165.31718445 231.35661316]
[157.59143066 218.49922180]
[149.86567688 205.64181519]
[143.88053894 210.16157532]
[144.49636841 225.14892578]
[145.11219788 240.13629150]
[145.72801208 255.12364197]
[146.34384155 270.11099243]
[146.95967102 285.09835815]
[147.57550049 300.08569336]
[148.19131470 315.07305908]
[154.88284302 330.65060425]
[141.76646423 341.39291382]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 113]
[10 112]
[11 111]
[12 110]
[13 109]
[14 108]
[20 30]
[21 29]
[22 28]
[32 49]
[33 48]
[34 47]
[35 46]
[36 45]
[37 44]
[38 43]
[51 107]
[52 106]
[114 131]
[115 130]
[116 129]
[117 128]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
