%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:41 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGUCCCUCUAGAGGAGCCUGUUCUGUAAUCGAUAAACCCCGAUCAACCUCACCACCUCUUGCxxxxxxxxxxCUCAUGCACCUAAUUGGAAGCGCCACCCUAGCAAUAUCAACCAUUAACCUUCCCUCUACACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[92.50000000 256.69329834]
[92.50000000 241.69329834]
[92.50000000 226.69329834]
[92.50000000 211.69329834]
[92.50000000 196.69329834]
[92.50000000 181.69329834]
[92.50000000 166.69329834]
[92.50000000 151.69329834]
[92.50000000 136.69329834]
[92.50000000 121.69329834]
[90.26780701 136.52627563]
[79.42298889 146.88919067]
[64.50392151 148.44531250]
[51.75400162 140.54344177]
[46.50885773 126.49038696]
[50.96349716 112.16711426]
[63.25372696 103.56768799]
[78.23746490 104.29128265]
[63.52949905 101.34580231]
[48.82154083 98.40032196]
[34.11357880 95.45483398]
[19.40561676 92.50935364]
[12.35709858 105.85845184]
[1.84324980 116.66961670]
[-11.27773571 124.07263947]
[-25.93829918 127.47501373]
[-40.94837952 126.60932922]
[-55.09201813 121.55426788]
[-67.22585297 112.72756195]
[-76.37155914 100.85145569]
[-81.79470825 86.89363098]
[-83.06377411 71.98837280]
[-97.77173615 69.04289246]
[-104.24781036 70.82278442]
[-109.79518127 69.25498199]
[-113.02452087 65.65680695]
[-127.59722137 62.10204315]
[-142.16992188 58.54728317]
[-156.74263000 54.99251938]
[-168.49098206 65.12937164]
[-183.95668030 66.39118195]
[-197.19281006 58.29277802]
[-203.10984802 43.94814682]
[-199.43254089 28.87310028]
[-187.57490540 18.86429596]
[-172.09645081 17.77032661]
[-158.94892883 26.01184464]
[-153.18786621 40.41981888]
[-138.61515808 43.97457886]
[-124.04245758 47.52934265]
[-109.46975708 51.08410263]
[-94.82625580 54.33493042]
[-80.11829376 57.28041077]
[-73.20730591 44.01332474]
[-62.82743454 33.22029114]
[-49.81372833 25.78192902]
[-35.21660995 22.30848122]
[-20.21708679 23.08976173]
[-6.03120184 28.07098770]
[6.18855429 36.85653687]
[15.44687080 48.74134064]
[20.98668861 62.76748657]
[22.35109901 77.80139160]
[37.05905914 80.74687195]
[51.76702118 83.69235992]
[66.47498322 86.63784027]
[81.18294525 89.58332062]
[93.26293182 80.69097137]
[94.82051086 65.77206421]
[96.37809753 50.85314941]
[82.85773468 43.95645523]
[72.74467468 32.63875580]
[67.40660095 18.43067741]
[67.56546021 3.25374794]
[73.19976807 -10.83947945]
[83.54752350 -21.94301033]
[97.20927429 -28.55518532]
[112.33739471 -29.78175926]
[126.88591766 -25.45685196]
[138.88728333 -16.16536713]
[146.71839905 -3.16390443]
[149.32017517 11.78919506]
[146.34074402 26.67164803]
[138.18304443 39.47072601]
[125.95034027 48.45545578]
[111.29700470 52.41072845]
[109.73942566 67.32964325]
[108.18184662 82.24855042]
[112.11194611 83.83379364]
[115.72356415 86.30113220]
[118.81705475 89.58332062]
[133.52502441 86.63784027]
[148.23297119 83.69235992]
[162.94093323 80.74687195]
[176.90133667 75.25984192]
[189.67868042 67.40242004]
[202.45603943 59.54499054]
[207.56056213 44.33567047]
[222.68302917 38.97929382]
[236.22276306 47.58481216]
[237.79325867 63.55081177]
[226.18975830 74.62953949]
[210.31347656 72.32234955]
[197.53611755 80.17977905]
[184.75875854 88.03720093]
[199.75827026 88.15745544]
[213.93617249 93.05513763]
[225.81170654 102.21873474]
[234.14462280 114.69120789]
[238.06462097 129.16993713]
[237.16230774 144.14277649]
[231.53192139 158.04595947]
[221.76148987 169.42745972]
[208.87142944 177.09860229]
[194.20797729 180.25820923]
[179.30256653 178.57629395]
[165.71191406 172.22851562]
[154.85542297 161.87782288]
[147.86694336 148.60525513]
[145.47633362 133.79698181]
[147.93327332 118.99957275]
[154.98117065 105.75845337]
[165.88642883 95.45483398]
[151.17846680 98.40032196]
[136.47050476 101.34580231]
[121.76253510 104.29128265]
[136.08212280 108.75775146]
[150.40171814 113.22422028]
[165.38145447 114.00376129]
[178.59469604 121.10377502]
[187.51220703 133.16519165]
[190.42703247 147.87925720]
[186.78121948 162.42945862]
[177.27262878 174.03060913]
[163.72138977 180.46206665]
[148.72142029 180.49273682]
[135.14398193 174.11676025]
[125.58802032 162.55459595]
[121.88276672 148.02076721]
[114.69138336 134.85704041]
[107.50000000 121.69329834]
[107.50000000 136.69329834]
[107.50000000 151.69329834]
[107.50000000 166.69329834]
[107.50000000 181.69329834]
[107.50000000 196.69329834]
[107.50000000 211.69329834]
[107.50000000 226.69329834]
[107.50000000 241.69329834]
[107.50000000 256.69329834]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[18 67]
[19 66]
[20 65]
[21 64]
[22 63]
[32 53]
[33 52]
[36 51]
[37 50]
[38 49]
[39 48]
[68 88]
[69 87]
[70 86]
[91 126]
[92 125]
[93 124]
[94 123]
[95 105]
[96 104]
[97 103]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
