%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:53 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGUUUUACCUCACCCCCACUGAUGUUCGCCGACCGUUGACUAUUCUCUACAAACCACAAAGAxxxxxxxxxxCACCACACACCACCUGUCCAAAAAGGCCUUCGAUACGGGAUAAUCCUAUUUAUUACCUCACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[-10.65424442 298.77264404]
[-18.37832832 311.63104248]
[-26.10241318 324.48944092]
[-33.82649994 337.34783936]
[-41.55058289 350.20626831]
[-42.02420807 366.02035522]
[-55.21059799 372.94628906]
[-62.93468475 385.80468750]
[-70.65876770 398.66308594]
[-78.38285065 411.52148438]
[-86.10694122 424.37991333]
[-89.08003998 441.07113647]
[-105.94200134 442.83480835]
[-112.30461121 427.12005615]
[-98.96533966 416.65582275]
[-91.24125671 403.79742432]
[-83.51717377 390.93902588]
[-75.79308319 378.08059692]
[-68.06900024 365.22219849]
[-68.14785767 350.32781982]
[-54.40898514 342.48217773]
[-46.68490219 329.62377930]
[-38.96081543 316.76535034]
[-31.23673058 303.90695190]
[-23.51264572 291.04855347]
[-42.25155640 277.53710938]
[-59.52354050 262.19485474]
[-75.15048981 245.17999268]
[-88.97125244 226.66802979]
[-100.84331512 206.84985352]
[-110.64424133 185.92980957]
[-118.27296448 164.12364197]
[-123.65081024 141.65621948]
[-126.72233582 118.75922394]
[-127.45585632 95.66878510]
[-142.43557739 94.88893890]
[-155.26869202 104.51654053]
[-170.76034546 100.34661102]
[-177.02665710 85.57797241]
[-169.26065063 71.53984833]
[-153.41975403 69.00109863]
[-141.65573120 79.90922546]
[-126.67601013 80.68907166]
[-125.45717621 69.60285950]
[-123.69647980 58.58970261]
[-121.39813232 47.67607498]
[-118.56767273 36.88820267]
[-115.21189880 26.25201607]
[-111.33887482 15.79307938]
[-106.95791626 5.53652763]
[-102.07954407 -4.49298716]
[-96.71548462 -14.27135944]
[-90.87863922 -23.77508736]
[-84.58302307 -32.98133087]
[-77.84377289 -41.86796188]
[-70.67708588 -50.41362381]
[-63.10019302 -58.59777451]
[-55.13129425 -66.40074158]
[-46.78955078 -73.80377960]
[-38.09500504 -80.78909302]
[-29.06855774 -87.33988953]
[-19.73190308 -93.44042206]
[-10.10747910 -99.07604218]
[-0.21841942 -104.23318481]
[9.91150856 -108.89947510]
[20.25795937 -113.06368256]
[30.79606438 -116.71580505]
[41.50049591 -119.84706879]
[52.34552765 -122.44994354]
[63.30509567 -124.51817322]
[74.35285950 -126.04679108]
[85.46225739 -127.03211212]
[96.60659790 -127.47177887]
[107.75910187 -127.36473083]
[118.89295197 -126.71123505]
[129.98138428 -125.51284027]
[140.99777222 -123.77244568]
[151.91561890 -121.49423218]
[162.70869446 -118.68367004]
[173.35104370 -115.34751129]
[183.81710815 -111.49377441]
[194.08172607 -107.13173676]
[204.12020874 -102.27186584]
[213.90846252 -96.92584229]
[223.42292786 -91.10652924]
[232.64077759 -84.82789612]
[241.53981018 -78.10504913]
[250.09867859 -70.95413208]
[258.29678345 -63.39233780]
[266.11444092 -55.43784332]
[273.53283691 -47.10976028]
[280.53414917 -38.42810822]
[287.10159302 -29.41375732]
[299.71270752 -37.53529739]
[312.32385254 -45.65684128]
[313.06057739 -61.15641785]
[322.79324341 -73.24172211]
[337.77947998 -77.26570129]
[352.25674438 -71.68106079]
[360.65826416 -58.63520813]
[359.75344849 -43.14453506]
[349.89022827 -31.16552544]
[334.86123657 -27.30434990]
[320.44540405 -33.04571152]
[307.83425903 -24.92416954]
[295.22314453 -16.80262756]
[303.17352295 -2.34961033]
[310.05575562 12.64150429]
[315.83361816 28.09190178]
[320.47674561 43.92035294]
[323.96075439 60.04363632]
[326.26727295 76.37699127]
[327.38421631 92.83454132]
[327.30569458 109.32976532]
[326.03213501 125.77593231]
[323.57022095 142.08659363]
[319.93289185 158.17597961]
[315.13928223 173.95951843]
[329.15600586 179.30102539]
[343.17272949 184.64253235]
[360.12667847 184.63287354]
[364.82925415 200.92158508]
[350.47894287 209.94956970]
[337.83120728 198.65925598]
[323.81448364 193.31773376]
[309.79779053 187.97622681]
[303.67269897 201.35263062]
[296.69583130 214.30517578]
[288.89636230 226.77967834]
[280.30691528 238.72398376]
[270.96337891 250.08811951]
[260.90487671 260.82458496]
[250.17346191 270.88842773]
[238.81398010 280.23764038]
[226.87397766 288.83303833]
[214.40336609 296.63873291]
[201.45429993 303.62207031]
[188.08094788 309.75384521]
[174.33923340 315.00839233]
[160.28662109 319.36373901]
[145.98188782 322.80169678]
[131.48484802 325.30786133]
[116.85614014 326.87176514]
[102.15692902 327.48687744]
[87.44870758 327.15060425]
[72.79296875 325.86434937]
[58.25101471 323.63351440]
[43.88366318 320.46740723]
[29.75099373 316.37930298]
[15.91211414 311.38626099]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 25]
[2 24]
[3 23]
[4 22]
[5 21]
[7 19]
[8 18]
[9 17]
[10 16]
[11 15]
[35 43]
[36 42]
[93 106]
[94 105]
[95 104]
[118 126]
[119 125]
[120 124]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
