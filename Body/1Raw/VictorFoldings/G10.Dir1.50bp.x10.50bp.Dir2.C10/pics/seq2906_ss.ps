%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:25 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGAGCAGAACCCAACCUCCGAGCAGUACAUGCUAAGACUUCACCAGUCAAAGCGAACUACUAxxxxxxxxxxAUUUUCAUGAUUUGAGAAGCCUUCGCUUCGAAGCGAAAAGUCCUAAUAGUAGAAGAACCCCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[90.12612915 408.21902466]
[90.12612915 393.21902466]
[90.12612915 378.21902466]
[90.12612915 363.21902466]
[90.12612915 348.21902466]
[90.12612915 333.21902466]
[90.12612915 318.21902466]
[90.12612915 303.21902466]
[90.12612915 288.21902466]
[90.12612915 273.21902466]
[76.12610626 269.72235107]
[63.36761856 262.96057129]
[52.59997177 253.32560730]
[44.45678329 241.37834167]
[39.41870880 227.81587219]
[37.78505707 213.43087769]
[39.65602493 199.06524658]
[44.92655945 185.56088257]
[53.29224014 173.71029663]
[64.26687622 164.21009827]
[77.21073914 157.62011719]
[91.36785889 154.33030701]
[91.67991638 139.33355713]
[84.89492798 137.25840759]
[78.58040619 134.02284241]
[72.93299866 129.72760010]
[68.12861633 124.50647736]
[64.31688690 118.52208710]
[61.61652374 111.96082306]
[46.71461868 113.67350769]
[31.81271744 115.38619995]
[16.91081429 117.09889221]
[5.85009480 128.71955872]
[-10.11832047 127.17383575]
[-18.74482918 113.64745331]
[-13.41191101 98.51670837]
[1.78947437 93.38860321]
[15.19812584 102.19699097]
[30.10002708 100.48429871]
[45.00193024 98.77160645]
[59.90383148 97.05892181]
[67.13677216 76.84053802]
[83.74463654 63.22887421]
[104.98968506 60.10694885]
[109.59524536 45.83148575]
[114.20081329 31.55602646]
[118.80637360 17.28056526]
[123.41194153 3.00510478]
[118.37925720 0.53477496]
[113.80696106 -3.26552320]
[110.04273987 -8.29995728]
[107.41135406 -14.38325119]
[106.19202423 -21.24683571]
[106.59762573 -28.55060196]
[108.75695801 -35.89973831]
[108.44490051 -50.89649200]
[108.13284302 -65.89324188]
[107.82079315 -80.88999939]
[107.50873566 -95.88674927]
[99.48601532 -109.52297211]
[106.95686340 -122.40845490]
[106.64480591 -137.40521240]
[91.91057587 -140.56733704]
[78.30300140 -147.04272461]
[66.55592346 -156.48216248]
[57.30285645 -168.37658691]
[51.04279709 -182.08456421]
[48.11334610 -196.86682129]
[48.67248535 -211.92616272]
[52.69005966 -226.45048523]
[59.94940948 -239.65649414]
[70.05904388 -250.83200073]
[82.47376251 -259.37432861]
[96.52405548 -264.82281494]
[111.45220947 -266.88360596]
[126.45317078 -265.44558716]
[140.71795654 -260.58630371]
[153.47727966 -252.56779480]
[164.04304504 -241.82249451]
[171.84545898 -228.92990112]
[176.46374512 -214.58528137]
[177.64884949 -199.56222534]
[175.33685303 -184.67089844]
[169.65243530 -170.71438599]
[160.90217590 -158.44534302]
[149.55792236 -148.52542114]
[136.23150635 -141.48957825]
[121.64156342 -137.71726990]
[121.95361328 -122.72051239]
[129.95401001 -110.15695953]
[122.50548553 -96.19880676]
[122.81754303 -81.20205688]
[123.12960052 -66.20529938]
[123.44165802 -51.20854568]
[123.75371552 -36.21179199]
[129.50460815 -31.39752960]
[132.09236145 -46.17263031]
[146.18188477 -51.31901550]
[157.68348694 -41.69023895]
[155.09541321 -26.91519547]
[141.00642395 -21.76900482]
[146.75732422 -16.95474052]
[161.57507324 -19.28584480]
[176.39283752 -21.61694908]
[191.21058655 -23.94805336]
[206.02835083 -26.27915573]
[220.84611511 -28.61026001]
[233.25434875 -39.33255768]
[248.65328979 -33.69301605]
[251.20182800 -17.49310875]
[238.27824402 -7.39791441]
[223.17721558 -13.79250240]
[208.35945129 -11.46139812]
[193.54170227 -9.13029480]
[178.72393799 -6.79919052]
[163.90617371 -4.46808672]
[149.08842468 -2.13698292]
[137.68740845 7.61066914]
[133.08183289 21.88612938]
[128.47627258 36.16159058]
[123.87070465 50.43704987]
[119.26514435 64.71250916]
[130.29183960 73.56598663]
[137.57089233 85.68981934]
[140.20173645 99.58408356]
[137.85890198 113.52980804]
[130.83224487 125.80164337]
[119.99108887 134.88136292]
[106.67666626 139.64561462]
[106.36460876 154.64236450]
[121.38258362 158.94635010]
[134.77287292 166.97236633]
[145.63237000 178.17242432]
[153.23040771 191.78466797]
[157.05784607 206.88525391]
[156.86126709 222.45098877]
[152.65971375 237.42869568]
[144.74299622 250.80647278]
[133.65174866 261.68203735]
[120.14043427 269.32357788]
[105.12612915 273.21902466]
[105.12612915 288.21902466]
[105.12612915 303.21902466]
[105.12612915 318.21902466]
[105.12612915 333.21902466]
[105.12612915 348.21902466]
[105.12612915 363.21902466]
[105.12612915 378.21902466]
[105.12612915 393.21902466]
[105.12612915 408.21902466]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[22 130]
[23 129]
[29 41]
[30 40]
[31 39]
[32 38]
[44 122]
[45 121]
[46 120]
[47 119]
[48 118]
[55 95]
[56 94]
[57 93]
[58 92]
[59 91]
[61 89]
[62 88]
[102 117]
[103 116]
[104 115]
[105 114]
[106 113]
[107 112]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
