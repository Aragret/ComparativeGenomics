%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:11 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGGCCCCUAAAACCCGCCACAUCUACCAUCACCCUCUACAUCACCGCCCCGACCUUAGCUCUxxxxxxxxxxAACAUGGCUUUCUCAACUUUUAAAGGAUAACAGCUAUCCAUUGGUCUUAGGCCCCAAAAACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[105.92747498 442.79818726]
[108.51847076 423.59045410]
[108.83052826 408.59371948]
[109.14258575 393.59695435]
[109.45464325 378.60021973]
[109.76669312 363.60345459]
[110.07875061 348.60668945]
[110.39080811 333.60995483]
[110.70286560 318.61318970]
[111.01492310 303.61642456]
[111.32698059 288.61968994]
[93.04546356 277.32684326]
[85.06729126 257.23669434]
[90.68695068 236.23100281]
[107.83168030 222.64913940]
[105.96407318 207.76585388]
[104.09645844 192.88258362]
[102.22884369 177.99929810]
[92.96710968 166.33441162]
[98.92597961 151.67826843]
[97.05836487 136.79499817]
[95.19075012 121.91171265]
[71.80256653 100.04936981]
[92.60317993 66.85363007]
[81.72435760 56.52642822]
[70.84552765 46.19922256]
[59.96670532 35.87201691]
[48.53117371 45.60139084]
[36.12623978 54.06010056]
[22.89246750 61.15230560]
[8.97980213 66.79763794]
[-5.45411587 70.93214417]
[-20.24573708 73.50897217]
[-35.22746277 74.49891663]
[-50.22953796 73.89076996]
[-65.08197784 71.69141388]
[-79.61649323 67.92578125]
[-93.66839600 62.63653564]
[-107.07846069 55.88360214]
[-119.69475555 47.74349976]
[-131.37431335 38.30846405]
[-141.98481750 27.68540001]
[-151.40602112 15.99467468]
[-159.53117371 3.36875272]
[-166.26821899 -10.04930401]
[-171.54083252 -24.10745811]
[-175.28926086 -38.64641953]
[-177.47102356 -53.50145340]
[-178.06140137 -68.50423431]
[-177.05372620 -83.48477936]
[-174.45938110 -98.27333832]
[-170.30780029 -112.70235443]
[-164.64599609 -126.60832214]
[-157.53811646 -139.83369446]
[-149.06472778 -152.22860718]
[-139.32182312 -163.65260315]
[-128.41979980 -173.97625732]
[-116.48218536 -183.08261108]
[-103.64424133 -190.86843872]
[-90.05142975 -197.24555969]
[-75.85777283 -202.14169312]
[-61.22408676 -205.50137329]
[-46.31619263 -207.28652954]
[-31.30300522 -207.47692871]
[-16.35463333 -206.07041931]
[-1.64045322 -203.08294678]
[12.67281055 -198.54833984]
[26.42297745 -192.51800537]
[39.45424652 -185.06025696]
[51.61896896 -176.25959778]
[62.77930450 -166.21572876]
[72.80879974 -155.04249573]
[81.59380341 -142.86647034]
[89.03479004 -129.82560730]
[95.04743958 -116.06769562]
[99.56362915 -101.74861145]
[102.53217316 -87.03060150]
[103.91945648 -72.08043671]
[103.70973969 -57.06750488]
[101.90541077 -42.16191864]
[98.52691650 -27.53256989]
[93.61252594 -13.34521961]
[87.21793365 0.23937789]
[79.41559601 13.06729889]
[70.29390717 24.99319267]
[81.17273712 35.32039642]
[92.05155945 45.64760208]
[102.93038177 55.97480774]
[117.92308044 56.44284821]
[129.42488098 46.81432343]
[140.92668152 37.18579865]
[138.19813538 22.07121658]
[143.40751648 7.62276220]
[155.15354919 -2.27300429]
[170.27661133 -4.95417166]
[184.70866394 0.30048114]
[194.56756592 12.07747841]
[197.20132446 27.20886803]
[191.90145874 41.62438202]
[180.09361267 51.44631577]
[164.95404053 54.03262329]
[150.55522156 48.68759918]
[139.05340576 58.31612778]
[127.55160522 67.94465637]
[133.03863525 81.90504456]
[148.01835632 81.12519836]
[162.99806213 80.34535217]
[177.97778320 79.56550598]
[192.95748901 78.78565979]
[204.72152710 67.87753296]
[220.56242371 70.41628265]
[228.32843018 84.45440674]
[222.06210327 99.22304535]
[206.57046509 103.39297485]
[193.73733521 93.76537323]
[178.75762939 94.54521942]
[163.77790833 95.32506561]
[148.79820251 96.10491180]
[133.81848145 96.88475800]
[130.41368103 106.39906311]
[124.65572357 113.68184662]
[117.53098297 118.26288605]
[110.07402802 120.04410553]
[111.94164276 134.92738342]
[113.80925751 149.81066895]
[123.20457458 162.54010010]
[117.11212158 176.13168335]
[118.97973633 191.01496887]
[120.84735107 205.89825439]
[122.71496582 220.78152466]
[131.48281860 222.82905579]
[139.41694641 227.04484558]
[145.99269104 233.13905334]
[150.77809143 240.69793701]
[153.46220398 249.21205139]
[153.87533569 258.11050415]
[151.99974060 266.79925537]
[147.97009277 274.70083618]
[142.06394958 281.29254150]
[134.68257141 286.14126587]
[126.32373047 288.93173218]
[126.01167297 303.92849731]
[125.69961548 318.92526245]
[125.38756561 333.92199707]
[125.07550812 348.91876221]
[124.76345062 363.91549683]
[124.45139313 378.91226196]
[124.13933563 393.90902710]
[123.82727814 408.90576172]
[123.51522827 423.90252686]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 150]
[3 149]
[4 148]
[5 147]
[6 146]
[7 145]
[8 144]
[9 143]
[10 142]
[11 141]
[15 130]
[16 129]
[17 128]
[18 127]
[20 125]
[21 124]
[22 123]
[24 88]
[25 87]
[26 86]
[27 85]
[89 104]
[90 103]
[91 102]
[105 119]
[106 118]
[107 117]
[108 116]
[109 115]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
