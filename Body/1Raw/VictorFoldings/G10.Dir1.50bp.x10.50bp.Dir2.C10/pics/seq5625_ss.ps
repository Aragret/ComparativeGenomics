%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:32 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCCAUCACCCUCCUUAACCUCUACUUCUACCUACGCCUAAUCUACUCCACCUCAAUCACACxxxxxxxxxxUAACAUCUCAGACGCUCAGGAAAUAGAAACCGUCUGAACUAUCCUGCCCGCCAUCAUCCUCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[85.86859131 257.81750488]
[85.86859131 242.81748962]
[85.86859131 227.81748962]
[85.86859131 212.81748962]
[85.86859131 197.81748962]
[85.86859131 182.81748962]
[85.86859131 167.81748962]
[85.86859131 152.81748962]
[85.86859131 137.81748962]
[85.86859131 122.81749725]
[83.62903595 114.97733307]
[84.32936859 107.87463379]
[87.34537506 102.43812561]
[91.79293823 99.30084991]
[79.71294403 90.40850067]
[69.86027527 101.73005676]
[59.11757278 112.21085358]
[47.55632401 121.78114319]
[35.25347519 130.37722778]
[22.29089737 137.94190979]
[8.75485516 144.42483521]
[-5.26456928 149.78286743]
[-19.67407608 153.98034668]
[-34.37777328 156.98934937]
[-49.27780914 158.78984070]
[-64.27502441 159.36984253]
[-79.26960754 158.72549438]
[-94.16178131 156.86108398]
[-108.85243225 153.78901672]
[-123.24378967 149.52973938]
[-137.24009705 144.11160278]
[-150.74819946 137.57064819]
[-163.67819214 129.95040894]
[-175.94404602 121.30162048]
[-187.46412659 111.68180847]
[-198.16175842 101.15501404]
[-207.96574402 89.79128265]
[-216.81086731 77.66623688]
[-224.63824463 64.86057281]
[-231.39579773 51.45951462]
[-237.03852844 37.55224228]
[-241.52891541 23.23130417]
[-244.83705139 8.59200764]
[-246.94094849 -6.26822281]
[-247.82658386 -21.25049400]
[-247.48806763 -36.25510025]
[-245.92764282 -51.18218613]
[-243.15571594 -65.93241119]
[-239.19071960 -80.40762329]
[-234.05905151 -94.51147461]
[-227.79486084 -108.15012360]
[-220.43981934 -121.23278809]
[-212.04287720 -133.67240906]
[-202.65992737 -145.38621521]
[-192.35342407 -156.29623413]
[-181.19192505 -166.32987976]
[-169.24972534 -175.42034912]
[-156.60630798 -183.50717163]
[-143.34580994 -190.53651428]
[-129.55645752 -196.46162415]
[-115.33003998 -201.24302673]
[-100.76123047 -204.84893799]
[-85.94698334 -207.25535583]
[-70.98588562 -208.44624329]
[-55.97749329 -208.41371155]
[-41.02169800 -207.15794373]
[-26.21802330 -204.68730164]
[-11.66498947 -201.01824951]
[2.54055548 -196.17517090]
[16.30407333 -190.19033813]
[29.53397179 -183.10354614]
[42.14220047 -174.96195984]
[54.04486084 -165.81977844]
[65.16273499 -155.73782349]
[75.42183685 -144.78321838]
[84.75389099 -133.02882385]
[93.09680176 -120.55290222]
[100.39503479 -107.43846130]
[106.60002899 -93.77278137]
[111.67048645 -79.64680481]
[115.57266235 -65.15453339]
[118.28059387 -50.39242554]
[119.77626038 -35.45871353]
[120.04969788 -20.45277977]
[119.09909821 -5.47448969]
[116.93078613 9.37647724]
[113.55918121 24.00128746]
[109.00673676 38.30261612]
[103.30373383 52.18528748]
[96.48813629 65.55691528]
[88.60529327 78.32851410]
[100.68528748 87.22086334]
[115.09750366 91.37874603]
[130.05775452 90.28743744]
[140.36874390 78.61177826]
[155.55610657 77.71814728]
[166.62353516 87.62006378]
[181.58377075 86.52874756]
[196.54402161 85.43743896]
[211.50427246 84.34613037]
[226.46452332 83.25482178]
[232.22961426 79.80934143]
[237.99420166 79.83798218]
[242.06750488 82.44252777]
[257.06021118 81.97448730]
[272.05288696 81.50643921]
[278.19589233 67.53409576]
[289.79846191 57.61730194]
[304.55697632 53.72506332]
[319.54104614 56.63017654]
[331.77563477 65.75582886]
[338.83154297 79.29012299]
[339.30780029 94.54580688]
[333.10983276 108.49385834]
[321.46829224 118.36488342]
[306.69458008 122.19897461]
[291.72204590 119.23487854]
[279.52349854 110.06111145]
[272.52093506 96.49913788]
[257.52825928 96.96717834]
[242.53555298 97.43522644]
[227.55583191 98.21506500]
[212.59558105 99.30638123]
[197.63533020 100.39768982]
[182.67509460 101.48899841]
[167.71484375 102.58030701]
[158.20158386 113.98352814]
[143.04530334 115.30339050]
[131.14906311 105.24768829]
[116.18881226 106.33899689]
[129.84086609 112.55360413]
[144.78570557 113.83885956]
[156.77862549 122.84829712]
[162.17500305 136.84397888]
[159.33489990 151.57264709]
[149.12142944 162.55831909]
[134.63841248 166.46246338]
[120.28721619 162.09861755]
[110.42911530 150.79295349]
[108.05997467 135.98123169]
[100.86859131 122.81749725]
[100.86859131 137.81748962]
[100.86859131 152.81748962]
[100.86859131 167.81748962]
[100.86859131 182.81748962]
[100.86859131 197.81748962]
[100.86859131 212.81748962]
[100.86859131 227.81748962]
[100.86859131 242.81748962]
[100.86859131 257.81750488]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[14 92]
[15 91]
[93 130]
[94 129]
[97 126]
[98 125]
[99 124]
[100 123]
[101 122]
[104 121]
[105 120]
[106 119]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
