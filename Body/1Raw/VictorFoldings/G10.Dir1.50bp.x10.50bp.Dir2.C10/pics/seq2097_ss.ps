%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:37 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGACCCCUAUACCUUCUGCAUAAUGAAUUAACUAGAAAUAACUUUGCAAGGAGAGCCAAAGCxxxxxxxxxxCCAAUGAUAUGAAAAACCAUCGUUGUAUUUCAACUACAAGAACACCAAUGACCCCAAUACCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[81.01043701 641.82019043]
[81.01043701 626.82019043]
[81.01043701 611.82019043]
[81.01043701 596.82019043]
[81.01043701 581.82019043]
[81.01043701 566.82019043]
[81.01043701 551.82019043]
[81.01043701 536.82019043]
[81.01043701 521.82019043]
[81.01043701 506.82022095]
[66.72542572 503.94650269]
[53.27636337 498.32623291]
[41.18592072 490.17565918]
[30.92440224 479.80953979]
[22.89141655 467.62872314]
[17.40033531 454.10488892]
[14.66606808 439.76211548]
[14.79664135 425.15661621]
[17.78894043 410.85525513]
[23.52875519 397.41342163]
[31.79513359 385.35354614]
[42.26888275 375.14471436]
[54.54491043 367.18450928]
[68.14787292 361.78350830]
[82.55058289 359.15313721]
[82.86264038 344.15637207]
[68.88179016 341.31790161]
[55.61246490 336.06924438]
[43.46677017 328.57205200]
[32.82215500 319.05780029]
[24.00968742 307.82077026]
[17.30373573 295.20870972]
[12.91345119 281.61233521]
[10.97622776 267.45303345]
[11.55341148 253.16987610]
[14.62835598 239.20603943]
[20.10689926 225.99496460]
[27.82024765 213.94699097]
[37.53017426 203.43653870]
[48.93638229 194.79054260]
[61.68577957 188.27819824]
[75.38343048 184.10267639]
[89.60475922 182.39471436]
[90.54039001 167.42391968]
[91.47601318 152.45312500]
[92.41164398 137.48234558]
[93.34727478 122.51154327]
[94.28289795 107.54075623]
[77.65940857 108.47361755]
[62.41732025 92.49752045]
[53.15237045 80.70087433]
[43.88742065 68.90423584]
[34.62247086 57.10759735]
[25.35752296 45.31095886]
[10.16516304 47.56657028]
[-4.11370897 41.90888214]
[-13.63814735 29.85979080]
[-15.84612751 14.66043568]
[-10.14371300 0.39936820]
[1.93517542 -9.08725548]
[17.14137650 -11.24758244]
[31.38450050 -5.50049400]
[40.83321381 6.60807085]
[42.94586563 21.82096863]
[37.15416336 36.04600906]
[46.41911316 47.84264755]
[55.68405914 59.63928604]
[64.94901276 71.43592834]
[74.21395874 83.23256683]
[81.70746613 83.54455566]
[79.23232269 68.75017548]
[76.75717163 53.95579910]
[69.59091949 40.77836227]
[72.65023804 26.09365463]
[84.48249817 16.87424278]
[99.46953583 17.49766350]
[110.49523926 27.66790962]
[112.32440186 42.55596542]
[104.08721161 55.09367371]
[100.39084625 69.63110352]
[96.69448090 84.16853333]
[104.18798828 84.48052216]
[114.40147400 73.49485779]
[124.61495209 62.50919342]
[134.82843018 51.52352905]
[145.04191589 40.53786469]
[155.25538635 29.55219841]
[165.46887207 18.56653404]
[160.87966919 3.90929127]
[164.24957275 -11.07534313]
[174.67211914 -22.35657692]
[189.34367371 -26.89981651]
[204.31767273 -23.48295212]
[215.56617737 -13.02510262]
[220.06341553 1.66062200]
[216.59962463 16.62383652]
[206.10656738 27.83950996]
[191.40681458 32.29068375]
[176.45452881 28.78001404]
[166.24105835 39.76567841]
[156.02757263 50.75134277]
[145.81410217 61.73700714]
[135.60061646 72.72267151]
[125.38713837 83.70833588]
[115.17365265 94.69400024]
[109.25369263 108.47638702]
[108.31806183 123.44717407]
[107.38243866 138.41796875]
[106.44680786 153.38876343]
[105.51117706 168.35954285]
[104.57555389 183.33033752]
[119.84984589 187.28556824]
[134.06883240 194.11396790]
[146.69798279 203.55693054]
[157.26293945 215.25758362]
[165.36726379 228.77433777]
[170.70736694 243.59744263]
[173.08383179 259.16833496]
[172.40893555 274.90057373]
[168.70980835 290.20199585]
[162.12738037 304.49703979]
[152.91101074 317.24829102]
[141.40904236 327.97671509]
[128.05566406 336.27975464]
[113.35443115 341.84631348]
[97.85939789 344.46844482]
[97.54734039 359.46517944]
[112.61082458 362.95782471]
[126.62040710 369.48962402]
[138.97062683 378.77566528]
[149.12821960 390.41213989]
[156.65524292 403.89376831]
[161.22790527 418.63577271]
[162.65046692 433.99932861]
[160.86366272 449.31909180]
[155.94718933 463.93218994]
[148.11605835 477.20675659]
[137.71130371 488.56933594]
[125.18505859 497.52960205]
[111.08094025 503.70156860]
[96.01043701 506.82022095]
[96.01043701 521.82019043]
[96.01043701 536.82019043]
[96.01043701 551.82019043]
[96.01043701 566.82019043]
[96.01043701 581.82019043]
[96.01043701 596.82019043]
[96.01043701 611.82019043]
[96.01043701 626.82019043]
[96.01043701 641.82019043]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[25 127]
[26 126]
[43 111]
[44 110]
[45 109]
[46 108]
[47 107]
[48 106]
[50 69]
[51 68]
[52 67]
[53 66]
[54 65]
[82 105]
[83 104]
[84 103]
[85 102]
[86 101]
[87 100]
[88 99]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
