%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:57 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCUAGACCAAACCUACGCCAAAAUCCAUUUCACUAUCAUAUUCAUCGGCGUAAAUCUAACUUUxxxxxxxxxxCAUGAGCUGUCCCCACAUUAGGCUUAAAAACAGAUGCAAUUCCCGGACGUCUAAACCAAACCCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[89.95942688 454.04110718]
[89.95942688 439.04110718]
[89.95942688 424.04110718]
[89.95942688 409.04110718]
[89.95942688 394.04110718]
[89.95942688 379.04110718]
[89.95942688 364.04110718]
[89.95942688 349.04110718]
[89.95942688 334.04110718]
[89.95942688 319.04110718]
[75.75582123 315.98635864]
[62.49772644 310.03039551]
[50.77078629 301.43350220]
[41.09359360 290.57275391]
[33.89475250 277.92529297]
[29.49389648 264.04757690]
[28.08749771 249.55078125]
[29.74009705 235.07385254]
[34.38134766 221.25544739]
[41.80900955 208.70567322]
[51.69774628 197.97918701]
[63.61339188 189.55070496]
[77.03199768 183.79394531]
[91.36289215 180.96507263]
[91.66690063 165.96813965]
[91.97090149 150.97122192]
[92.12290955 135.97200012]
[92.12290955 120.97200012]
[80.54586029 111.43408203]
[65.82306671 114.30450439]
[51.10026932 117.17493439]
[40.98017120 129.62335205]
[24.93982697 129.32852173]
[15.28401661 116.51662445]
[19.41985321 101.01583099]
[34.17467499 94.71704102]
[48.22984695 102.45214081]
[62.95264053 99.58171082]
[77.67543030 96.71128845]
[62.68274307 97.17951202]
[49.62071228 89.80500031]
[42.27650070 76.72591400]
[42.77946854 61.73434830]
[50.98378372 49.17691422]
[64.51071930 42.69446945]
[79.43830872 44.16651535]
[91.43850708 53.16625214]
[97.03201294 67.08432770]
[94.59809113 81.88315582]
[99.37767792 67.66500854]
[104.15726471 53.44686890]
[108.79251862 39.18102264]
[113.28296661 24.86893272]
[117.77341461 10.55684376]
[122.26386261 -3.75524497]
[125.58049774 -18.38397980]
[127.70154572 -33.23326111]
[129.82258606 -48.08254623]
[124.11441040 -62.83813095]
[133.57363892 -74.34344482]
[135.69468689 -89.19272614]
[137.81573486 -104.04200745]
[128.31327820 -92.43582153]
[116.57522583 -83.09676361]
[103.13043976 -76.44562531]
[88.58470154 -72.78208160]
[73.59339905 -72.27120972]
[58.83200455 -74.93601227]
[44.96561813 -80.65644073]
[32.61901474 -89.17473602]
[22.34849358 -100.10709381]
[14.61681938 -112.96093750]
[9.77235603 -127.15710449]
[8.03338051 -142.05595398]
[9.47824478 -156.98620605]
[14.04184914 -171.27513123]
[21.51857185 -184.27893066]
[31.57153130 -195.41168213]
[43.74777222 -204.17176819]
[57.49867249 -210.16448975]
[72.20465088 -213.11984253]
[87.20310974 -212.90466309]
[101.81825256 -209.52864075]
[115.39157867 -203.14389038]
[127.31150055 -194.03810120]
[137.04093933 -182.62153625]
[144.14154053 -169.40861511]
[148.29335022 -154.99464417]
[149.30929565 -140.02908325]
[147.14268494 -125.18259430]
[156.68060303 -136.75964355]
[166.21850586 -148.33670044]
[168.38543701 -164.59205627]
[183.64752197 -170.59211731]
[196.30444336 -160.16453552]
[193.33584595 -144.03631592]
[177.79556274 -138.79878235]
[168.25764465 -127.22173309]
[158.71974182 -115.64467621]
[152.66500854 -101.92096710]
[150.54396057 -87.07168579]
[148.42292786 -72.22240448]
[154.28280640 -58.52893448]
[144.67187500 -45.96150208]
[142.55082703 -31.11221886]
[140.42977905 -16.26293755]
[152.11410522 -25.66913223]
[167.08720398 -26.56716919]
[179.81202698 -18.62495804]
[185.58297729 -4.77951574]
[182.26593018 9.84912968]
[171.08755493 19.85132408]
[156.18159485 21.52826881]
[143.06024170 14.25983238]
[136.57594299 0.73520184]
[132.08551025 15.04729080]
[127.59505463 29.35937881]
[123.10460663 43.67146683]
[124.10886383 51.03836060]
[118.37540436 58.22645569]
[113.59581757 72.44459534]
[108.81623077 86.66274261]
[114.76354980 91.13638306]
[118.36946106 98.25566864]
[118.48177338 106.77454376]
[114.61213684 114.96604919]
[107.12290955 120.97200012]
[107.12290955 135.97200012]
[110.26710510 144.61231995]
[106.96781921 151.27523804]
[106.66381836 166.27215576]
[106.35980988 181.26907349]
[121.41854095 184.98591614]
[135.27311707 191.94401550]
[147.23612976 201.79467773]
[156.71475220 214.04577637]
[163.24017334 228.08633423]
[166.49076843 243.21697998]
[166.30793762 258.68484497]
[162.70384216 273.72088623]
[155.86067200 287.57833862]
[146.12141418 299.56958008]
[133.97267151 309.10037231]
[120.02034760 315.69931030]
[104.95942688 319.04110718]
[104.95942688 334.04110718]
[104.95942688 349.04110718]
[104.95942688 364.04110718]
[104.95942688 379.04110718]
[104.95942688 394.04110718]
[104.95942688 409.04110718]
[104.95942688 424.04110718]
[104.95942688 439.04110718]
[104.95942688 454.04110718]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 154]
[2 153]
[3 152]
[4 151]
[5 150]
[6 149]
[7 148]
[8 147]
[9 146]
[10 145]
[24 132]
[25 131]
[26 130]
[27 128]
[28 127]
[29 39]
[30 38]
[31 37]
[49 122]
[50 121]
[51 120]
[52 118]
[53 117]
[54 116]
[55 115]
[56 106]
[57 105]
[58 104]
[60 102]
[61 101]
[62 100]
[90 99]
[91 98]
[92 97]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
