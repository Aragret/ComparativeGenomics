%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:53 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGAUCAUAACAAAAAAUUUCCACCAAACCCCCCCUCCCCCGCUUCUGGCCACAGCACUUAAAxxxxxxxxxxUGACAAAACACAUAGCCUACCCCUUCCUUGUACUAUCCCUAUGAGGCAUAAUUAUAACAACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[-1.37703490 171.14636230]
[-14.15439224 179.00378418]
[-26.93174934 186.86122131]
[-39.70910645 194.71864319]
[-52.48646545 202.57606506]
[-65.18139648 210.56597900]
[-77.79251862 218.68753052]
[-90.40364838 226.80906677]
[-103.01477814 234.93060303]
[-115.62590790 243.05215454]
[-110.37853241 257.16876221]
[-108.28894043 272.08346558]
[-109.45486450 287.09860229]
[-113.82178497 301.51193237]
[-121.18544006 314.64932251]
[-131.20141602 325.89627075]
[-143.40126038 334.72677612]
[-157.21435547 340.72781372]
[-171.99464417 343.61871338]
[-187.05082703 343.26422119]
[-201.67868042 339.68093872]
[-215.19406128 333.03649902]
[-226.96479797 323.64163208]
[-236.44038391 311.93576050]
[-243.17761230 298.46636963]
[-246.86135864 283.86349487]
[-247.31935120 268.81011963]
[-244.53016663 254.01031494]
[-238.62425232 240.15628052]
[-229.87783813 227.89601135]
[-218.69999695 217.80293274]
[-205.61357117 210.34912109]
[-191.23059082 205.88320923]
[-176.22381592 204.61407471]
[-161.29512024 206.60105896]
[-147.14276123 211.75125122]
[-134.42864990 219.82376099]
[-123.74745178 230.44102478]
[-111.13632202 222.31948853]
[-98.52519226 214.19793701]
[-85.91406250 206.07640076]
[-73.30293274 197.95484924]
[-69.35671234 191.64826965]
[-60.34389114 189.79870605]
[-47.56653214 181.94128418]
[-34.78917694 174.08386230]
[-22.01181793 166.22644043]
[-9.23446083 158.36900330]
[-20.29091072 129.48228455]
[-23.84491348 98.75677490]
[-19.67481041 68.10881042]
[-8.04068661 39.44986725]
[10.33184814 14.56738949]
[0.11836850 3.58172464]
[-10.09511089 -7.40394020]
[-25.92091179 -11.70231915]
[-29.84914017 -27.62403488]
[-17.83877182 -38.79019165]
[-2.24504328 -33.71400452]
[0.89055336 -17.61742020]
[11.10403347 -6.63175535]
[21.31751251 4.35390949]
[27.57438087 -0.46709952]
[34.12583542 -4.87946701]
[40.94522476 -8.86524582]
[48.00481415 -12.40822506]
[55.27589035 -15.49399376]
[62.72888184 -18.10999870]
[70.33346558 -20.24560356]
[78.05871582 -21.89211845]
[85.87321472 -23.04284668]
[93.74517059 -23.69310951]
[101.64256287 -23.84026146]
[109.53327942 -23.48370361]
[117.38521576 -22.62488556]
[125.16644287 -21.26730156]
[132.84530640 -19.41647339]
[140.39057922 -17.07992744]
[147.77156067 -14.26717091]
[154.95823669 -10.98964119]
[161.92137146 -7.26067019]
[168.63265991 -3.09542608]
[175.06477356 1.48915005]
[181.19157410 6.47441053]
[186.98814392 11.84007835]
[192.43089294 17.56432915]
[197.49768066 23.62388039]
[202.16790771 29.99408531]
[206.42257690 36.64903259]
[210.24436951 43.56165695]
[213.61776733 50.70383453]
[216.52902222 58.04652405]
[218.96632385 65.55985260]
[220.91972351 73.21326447]
[222.38130188 80.97563171]
[237.31559753 79.57333374]
[252.24990845 78.17102814]
[267.18423462 76.76872253]
[269.26599121 61.84347916]
[274.73422241 47.80085373]
[283.29400635 35.39815521]
[294.48370361 25.30423927]
[307.69989014 18.06346130]
[322.22985840 14.06630421]
[337.28997803 13.52833271]
[352.06808472 16.47855759]
[365.76724243 22.75787735]
[377.64865112 32.02765656]
[387.07156372 43.78798676]
[393.52783203 57.40464783]
[396.66925049 72.14331055]
[396.32641602 87.20913696]
[392.51782227 101.78964996]
[385.44885254 115.09854126]
[375.50076294 126.41806793]
[363.20996094 135.13778687]
[349.23937988 140.78747559]
[334.34234619 143.06242371]
[319.32226562 141.83995056]
[304.98919678 137.18600464]
[292.11602783 129.35154724]
[281.39706421 118.75907898]
[273.41030884 105.97985840]
[268.58651733 91.70303345]
[253.65222168 93.10533142]
[238.71791077 94.50763702]
[223.78359985 95.90994263]
[223.55235291 108.59796143]
[222.02397156 121.19571686]
[219.21450806 133.57093811]
[215.15347290 145.59371948]
[209.88346863 157.13783264]
[203.45985413 168.08206177]
[195.95004272 178.31153870]
[187.43289185 187.71885681]
[177.99781799 196.20523071]
[167.74388123 203.68159485]
[156.77873230 210.06945801]
[145.21746826 215.30172729]
[133.18150330 219.32350159]
[120.79716492 222.09252930]
[108.19448853 223.57977295]
[95.50578308 223.76959229]
[82.86425781 222.66000366]
[70.40263367 220.26264954]
[58.25174713 216.60270691]
[46.53915405 211.71859741]
[35.38782501 205.66160583]
[24.91483498 198.49531555]
[15.23013592 190.29495239]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 48]
[2 47]
[3 46]
[4 45]
[5 44]
[6 42]
[7 41]
[8 40]
[9 39]
[10 38]
[53 62]
[54 61]
[55 60]
[95 127]
[96 126]
[97 125]
[98 124]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
