%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:00 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCCCCGUUCCAGUGAGUUCACCCUCUAAAUCACCACGAUCAAAAGGAACAAGCAUCAAGCAxxxxxxxxxxUAGAAAUAAACAUGCUAGCUUUUAUUCCAGUUCUAACCAAAAAAAUAAACCCUCGUUCCACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[105.45573425 279.03198242]
[105.45573425 264.03198242]
[105.45573425 249.03198242]
[105.45573425 234.03198242]
[105.45573425 219.03198242]
[105.45573425 204.03198242]
[105.45573425 189.03198242]
[105.45573425 174.03198242]
[105.45573425 159.03198242]
[105.45573425 144.03198242]
[93.06773376 142.12088013]
[82.18167877 136.93275452]
[73.60263824 129.14874268]
[67.87802887 119.62779999]
[65.26539612 109.31844330]
[50.28568268 110.09828949]
[35.30596924 110.87813568]
[20.32625389 111.65798187]
[5.34653854 112.43782043]
[4.98439646 133.35321045]
[-17.78342628 151.06309509]
[-32.27902222 154.92025757]
[-46.77462006 158.77740479]
[-61.27021790 162.63456726]
[-72.61672974 173.66032410]
[-86.90562439 169.45594788]
[-101.40122223 173.31311035]
[-106.86130524 187.83781433]
[-119.83451843 196.35105896]
[-135.33238220 195.57934570]
[-147.39567566 185.81938171]
[-151.38580322 170.82409668]
[-145.76847839 156.35948181]
[-132.70367432 147.98745728]
[-117.21508026 148.92726135]
[-105.25838470 158.81750488]
[-90.76278687 154.96034241]
[-80.45309448 144.21047974]
[-65.12737274 148.13897705]
[-50.63177872 144.28181458]
[-36.13618469 140.42465210]
[-21.64058685 136.56748962]
[-20.62941933 129.13597107]
[-35.38995743 131.80552673]
[-42.49008942 118.59235382]
[-32.11765671 107.75664520]
[-18.60708427 114.27292633]
[-17.59591675 106.84140015]
[-33.98949432 107.26880646]
[-42.32453918 93.14581299]
[-34.02666855 79.00093842]
[-17.63202477 79.38522339]
[-10.00600910 93.90334320]
[4.56669378 97.45810699]
[19.54640770 96.67826080]
[34.52612305 95.89842224]
[49.50583649 95.11857605]
[64.48554993 94.33872986]
[75.24028778 73.91777039]
[96.19277191 64.23925018]
[97.75035095 49.32033920]
[99.30792999 34.40142822]
[100.86550903 19.48251534]
[102.42309570 4.56360340]
[88.12861633 -0.17790996]
[75.18785095 -7.88184881]
[64.20606232 -18.18788528]
[55.69688797 -30.61398888]
[50.05831909 -44.57896805]
[47.55408096 -59.42965317]
[48.30130005 -74.47145081]
[52.26502991 -89.00083160]
[59.25987625 -102.33823395]
[68.95867920 -113.85983276]
[80.90781403 -123.02674866]
[94.54838562 -129.41021729]
[109.24240875 -132.71170044]
[124.30261993 -132.77674866]
[139.02461243 -129.60234070]
[152.71983337 -123.33694458]
[164.74771118 -114.27359772]
[174.54568481 -102.83621979]
[181.65548706 -89.55974579]
[185.74459839 -75.06514740]
[186.62173462 -60.03036880]
[184.24588013 -45.15860367]
[178.72816467 -31.14543343]
[170.32666016 -18.64628410]
[159.43431091 -8.24575901]
[146.56059265 -0.43031216]
[132.30760193 4.43451452]
[117.34200287 6.12118435]
[115.78442383 21.04009628]
[114.22684479 35.95900726]
[112.66926575 50.87792206]
[111.11167908 65.79683685]
[121.40031433 69.03069305]
[130.68742371 75.40830231]
[138.00437927 84.59910583]
[142.49722290 95.97370148]
[143.51837158 108.64477539]
[158.47862244 109.73609161]
[173.43887329 110.82740021]
[188.39912415 111.91870880]
[203.35935974 113.01001740]
[218.31961060 114.10133362]
[224.24560547 100.16715240]
[234.37680054 88.91381073]
[247.61421204 81.56196594]
[262.52197266 78.90911102]
[277.48297119 81.24299622]
[290.87435913 88.31045532]
[301.24356079 99.34487915]
[307.46578979 113.14932251]
[308.86608887 128.22637939]
[305.29260254 142.94062805]
[297.13290405 155.69593811]
[285.27215576 165.10874939]
[270.99685669 170.15800476]
[255.85552979 170.29600525]
[241.49058533 165.50778198]
[229.46022034 156.31271362]
[221.06941223 143.70823669]
[217.22830200 129.06158447]
[202.26805115 127.97026825]
[187.30780029 126.87895966]
[172.34756470 125.78765106]
[157.38731384 124.69633484]
[142.42706299 123.60502625]
[136.93423462 128.71176147]
[149.53988647 136.84181213]
[164.48568726 138.11576843]
[175.51873779 148.27803040]
[178.01440430 163.06896973]
[170.92657471 176.28875732]
[157.22622681 182.39614868]
[142.65602112 178.83116150]
[133.32324219 167.08810425]
[133.13995361 152.08898926]
[125.94856262 138.92524719]
[120.45573425 144.03198242]
[120.45573425 159.03198242]
[120.45573425 174.03198242]
[120.45573425 189.03198242]
[120.45573425 204.03198242]
[120.45573425 219.03198242]
[120.45573425 234.03198242]
[120.45573425 249.03198242]
[120.45573425 264.03198242]
[120.45573425 279.03198242]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[15 58]
[16 57]
[17 56]
[18 55]
[19 54]
[21 42]
[22 41]
[23 40]
[24 39]
[26 37]
[27 36]
[48 53]
[60 96]
[61 95]
[62 94]
[63 93]
[64 92]
[101 129]
[102 128]
[103 127]
[104 126]
[105 125]
[106 124]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
