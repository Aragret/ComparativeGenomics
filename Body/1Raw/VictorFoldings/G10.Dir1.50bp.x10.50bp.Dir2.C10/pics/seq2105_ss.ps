%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:57 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCUUCUGCAUAAUGAAUUAACUAGAAAUAACUUUGCAAGGAGAGCCAAAGCUAAGACCCCCGAxxxxxxxxxxUGAGCCACAACCCAAACAACCCAGCUCUCCCUAAGCUUCAAACUAGACUACUUCUCCAUAAUCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[135.40103149 296.00497437]
[135.09703064 281.00805664]
[134.79302979 266.01113892]
[134.48901367 251.01420593]
[134.18501282 236.01728821]
[133.88101196 221.02037048]
[133.57701111 206.02345276]
[133.27301025 191.02653503]
[132.96899414 176.02961731]
[128.76953125 161.62945557]
[120.96448517 148.82003784]
[113.15943909 136.01062012]
[105.35438538 123.20120239]
[91.95700836 122.41150665]
[81.11472321 114.50212860]
[66.94574738 119.42555237]
[52.77677536 124.34898376]
[38.60779953 129.27241516]
[40.01267624 144.28207397]
[37.78398895 159.19168091]
[32.05130768 173.13441467]
[23.14792824 185.29965210]
[11.59147930 194.98014832]
[-1.94616354 201.61306763]
[-16.67793846 204.81278992]
[-31.74736023 204.39329529]
[-46.27830887 200.37895203]
[-59.42597961 193.00317383]
[-70.42597961 182.69476318]
[-78.63878632 170.05303955]
[-83.58692169 155.81297302]
[-84.98269653 140.80245972]
[-82.74497223 125.89421082]
[-77.00383759 111.95495605]
[-68.09308624 99.79510498]
[-56.53076553 90.12162018]
[-42.98910522 83.49691010]
[-28.25539398 80.30611420]
[-13.18622971 80.73475647]
[1.34228516 84.75789642]
[14.48548126 92.14165497]
[25.47923088 102.45673370]
[33.68437195 115.10343933]
[47.85334778 110.18000793]
[62.02232361 105.25658417]
[76.19129944 100.33315277]
[81.31948090 85.23505402]
[94.82478333 76.75817108]
[96.34230804 61.83513641]
[97.85983276 46.91209412]
[99.37735748 31.98905563]
[100.89488220 17.06601524]
[102.41240692 2.14297533]
[103.92993164 -12.78006458]
[89.27346039 -16.05483437]
[75.10718536 -21.04012489]
[61.62999344 -27.66595078]
[49.03107071 -35.83929443]
[37.48729324 -45.44541550]
[27.16071510 -56.34945679]
[18.19630623 -68.39834595]
[10.71991253 -81.42293549]
[4.83649111 -95.24037933]
[0.62863600 -109.65670013]
[-1.84458089 -124.46951294]
[-2.54843974 -139.47088623]
[-1.47305942 -154.45019531]
[1.36646342 -169.19717407]
[5.93026638 -183.50480652]
[12.15428066 -197.17221069]
[19.95113182 -210.00752258]
[29.21136093 -221.83058167]
[39.80497360 -232.47537231]
[51.58324814 -241.79249573]
[64.38083649 -249.65112305]
[78.01808929 -255.94093323]
[92.30354309 -260.57366943]
[107.03666687 -263.48422241]
[122.01062775 -264.63180542]
[137.01521301 -264.00024414]
[151.83978271 -261.59848022]
[166.27621460 -257.46014404]
[180.12185669 -251.64340210]
[193.18232727 -244.22987366]
[205.27429199 -235.32365417]
[216.22798157 -225.04975891]
[225.88963318 -213.55241394]
[234.12361145 -200.99304199]
[240.81431580 -187.54794312]
[245.86784363 -173.40585327]
[249.21321106 -158.76533508]
[250.80349731 -143.83190918]
[250.61634827 -128.81520081]
[248.65440369 -113.92604828]
[244.94519043 -99.37344360]
[239.54080200 -85.36170197]
[232.51710510 -72.08752441]
[223.97268677 -59.73724747]
[214.02751160 -48.48426056]
[202.82118225 -38.48653412]
[190.51101685 -29.88442230]
[177.26983643 -22.79868507]
[163.28353882 -17.32879448]
[148.74845886 -13.55154037]
[133.86863708 -11.51994896]
[118.85297394 -11.26253986]
[117.33544922 3.66050029]
[115.81792450 18.58353996]
[114.30039978 33.50658035]
[112.78287506 48.42961884]
[111.26535034 63.35266113]
[109.74782562 78.27569580]
[120.52455139 87.92903900]
[123.72357178 102.03899384]
[118.16380310 115.39615631]
[125.96885681 128.20556641]
[133.77391052 141.01498413]
[141.57894897 153.82440186]
[141.49395752 138.82464600]
[144.68836975 124.16873932]
[151.00782776 110.56489563]
[160.14694214 98.67050934]
[171.66409302 89.06034851]
[185.00274658 82.19881439]
[199.51829529 78.41747284]
[214.50933838 77.89905548]
[229.25143433 80.66861725]
[243.03221130 86.59231567]
[255.18572998 95.38390350]
[265.12469482 106.61853790]
[272.36883545 119.75332642]
[276.56805420 134.15354919]
[277.51943970 149.12335205]
[275.17706299 163.93933105]
[269.65405273 177.88552856]
[261.21734619 190.28802490]
[250.27461243 200.54748535]
[237.35464478 208.16815186]
[223.08178711 212.78175354]
[208.14573669 214.16534424]
[193.26824951 212.25207520]
[179.16827393 207.13439941]
[166.52716064 199.05961609]
[155.95576477 188.41792297]
[147.96591187 175.72561646]
[148.26992798 190.72253418]
[148.57392883 205.71945190]
[148.87792969 220.71636963]
[149.18193054 235.71328735]
[149.48594666 250.71020508]
[149.78994751 265.70712280]
[150.09394836 280.70404053]
[150.39794922 295.70095825]
[152.97863770 314.91006470]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 153]
[2 152]
[3 151]
[4 150]
[5 149]
[6 148]
[7 147]
[8 146]
[9 145]
[10 118]
[11 117]
[12 116]
[13 115]
[15 46]
[16 45]
[17 44]
[18 43]
[48 112]
[49 111]
[50 110]
[51 109]
[52 108]
[53 107]
[54 106]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
