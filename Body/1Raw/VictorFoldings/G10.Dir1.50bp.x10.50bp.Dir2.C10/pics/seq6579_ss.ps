%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:30 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGUACACCUAGCAGGUGUCUCCUCUAUCUUAGGGGCCAUCAAUUUCAUCACAACAAUUAUCAxxxxxxxxxxCCUCCUCGGACUCCUGCCUCACUCAUUUACACCAACCACCCAACUAUCUAUAAACCUAGCCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[122.33267975 262.40277100]
[122.33267975 247.40275574]
[122.33267975 232.40275574]
[122.33267975 217.40275574]
[122.33267975 202.40275574]
[122.33267975 187.40275574]
[122.33267975 172.40275574]
[122.33267975 157.40275574]
[122.33267975 142.40275574]
[122.33267975 127.40275574]
[115.41107178 124.51461792]
[94.64624023 115.85021210]
[83.98461914 126.40150452]
[73.32299042 136.95278931]
[62.66136551 147.50408936]
[51.99974060 158.05537415]
[41.33811188 168.60665894]
[34.33316422 184.04580688]
[17.55822945 181.58859253]
[15.27564907 164.78900146]
[30.78682137 157.94503784]
[41.44844818 147.39375305]
[52.11007309 136.84245300]
[62.77170181 126.29116821]
[73.43332672 115.73987579]
[84.09495544 105.18858337]
[80.99224854 98.36046600]
[69.92195129 108.48214722]
[56.87475967 101.08142090]
[59.88148880 86.38586426]
[74.78684235 84.70422363]
[71.68414307 77.87610626]
[56.72389221 78.96741486]
[41.76364136 80.05872345]
[26.40637970 87.24140167]
[15.25309181 74.47267151]
[24.43527794 60.22052002]
[40.67233276 65.09847260]
[55.63257980 64.00716400]
[70.59282684 62.91585541]
[81.99385071 53.16820145]
[85.39682770 38.55931091]
[88.79980469 23.95041847]
[74.50877380 19.36574745]
[60.63898849 13.63147259]
[47.28275681 6.78575468]
[34.52896118 -1.12584984]
[22.46247673 -10.05068874]
[11.16360664 -19.92936897]
[0.70754206 -30.69614792]
[-8.83613110 -42.27937317]
[-17.40390205 -54.60195923]
[-24.93874931 -67.58190155]
[-31.39053345 -81.13281250]
[-36.71631622 -95.16452026]
[-40.88065338 -109.58364105]
[-43.85583115 -124.29421997]
[-45.62205505 -139.19836426]
[-46.16756821 -154.19686890]
[-45.48873520 -169.18992615]
[-43.59008408 -184.07777405]
[-40.48424149 -198.76132202]
[-36.19187546 -213.14285278]
[-30.74155998 -227.12666321]
[-24.16956139 -240.61967468]
[-16.51961708 -253.53211975]
[-7.84263420 -265.77804565]
[1.80363953 -277.27597046]
[12.35501003 -287.94937134]
[23.74125862 -297.72720337]
[35.88660812 -306.54443359]
[48.71023941 -314.34231567]
[62.12680054 -321.06903076]
[76.04701996 -326.67977905]
[90.37824249 -331.13720703]
[105.02510834 -334.41168213]
[119.89013672 -336.48138428]
[134.87440491 -337.33258057]
[149.87818909 -336.95953369]
[164.80165100 -335.36480713]
[179.54547119 -332.55895996]
[194.01152039 -328.56069946]
[208.10353088 -323.39660645]
[221.72773743 -317.10107422]
[234.79345703 -309.71594238]
[247.21374512 -301.29043579]
[258.90594482 -291.88058472]
[269.79223633 -281.54901123]
[279.80017090 -270.36447144]
[288.86315918 -258.40139771]
[296.92086792 -245.73941040]
[303.91970825 -232.46276855]
[309.81307983 -218.65983582]
[314.56176758 -204.42247009]
[318.13415527 -189.84539795]
[320.50650024 -175.02566528]
[321.66299438 -160.06185913]
[321.59594727 -145.05358887]
[320.30578613 -130.10070801]
[317.80111694 -115.30275726]
[314.09860229 -100.75820160]
[309.22286987 -86.56383514]
[303.20639038 -72.81410980]
[296.08920288 -59.60054779]
[287.91864014 -47.01107407]
[278.74911499 -35.12947083]
[268.64163208 -24.03480911]
[257.66345215 -13.80092621]
[245.88761902 -4.49592590]
[233.39254761 3.81826735]
[220.26135254 11.08632278]
[206.58143616 17.25987244]
[192.44383240 22.29783249]
[177.94264221 26.16667366]
[163.17433167 28.84065056]
[148.23722839 30.30196762]
[133.23069763 30.54089928]
[118.25463867 29.55585670]
[103.40869904 27.35339546]
[100.00572205 41.96228790]
[96.60274506 56.57118225]
[101.29075623 42.32258224]
[109.26056671 29.61502075]
[120.04655457 19.19089317]
[133.01858521 11.65920067]
[147.41880798 7.45995951]
[162.40592957 6.83849764]
[177.10437012 9.83112335]
[190.65542603 16.26299858]
[202.26739502 25.75836372]
[211.26191711 37.76247787]
[217.11347961 51.57403564]
[219.48023987 66.38613892]
[218.22392273 81.33343506]
[213.41793823 95.54267883]
[205.34303284 108.18372345]
[194.47099304 118.51805878]
[181.43695068 125.94193268]
[167.00241089 130.02163696]
[152.01065063 130.51881409]
[137.33267212 127.40275574]
[137.33267212 142.40275574]
[137.33267212 157.40275574]
[137.33267212 172.40275574]
[137.33267212 187.40275574]
[137.33267212 202.40275574]
[137.33267212 217.40275574]
[137.33267212 232.40275574]
[137.33267212 247.40275574]
[137.33267212 262.40277100]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[12 26]
[13 25]
[14 24]
[15 23]
[16 22]
[17 21]
[32 40]
[33 39]
[34 38]
[41 121]
[42 120]
[43 119]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
