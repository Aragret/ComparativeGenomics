%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:26 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGACAGUACAUAGUACAUAAAGCCAUUUACCGUACAUAGCACAUUACAGUCAAAUCCCUUCUCGUCCCxxxxxxxxxxUACCAACAAACCUACCCACCCUUAACAGUACAUAGUACAUAAAGCCAUUUACCGUACAUAGCACAUCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[104.07595825 265.79495239]
[104.07595825 250.79495239]
[104.07595825 235.79495239]
[104.07595825 220.79495239]
[104.07595825 205.79495239]
[104.07595825 190.79495239]
[104.07595825 175.79495239]
[104.07595825 160.79495239]
[104.07595825 145.79495239]
[104.07595825 130.79495239]
[100.35681152 116.26333618]
[89.36891174 112.31273651]
[83.85843658 102.01828003]
[86.66452789 90.68395233]
[79.71337891 77.39179230]
[72.76222992 64.09963226]
[65.81108093 50.80747223]
[58.73216629 37.58291245]
[51.52613831 24.42718697]
[44.62530899 18.36789322]
[44.31078720 10.94774818]
[37.35963821 -2.34441233]
[30.40848923 -15.63657284]
[23.45734024 -28.92873383]
[9.71184921 -22.90858650]
[-4.41622782 -17.85110664]
[-18.85956383 -13.78039360]
[-33.54933167 -10.71584702]
[-48.41551971 -8.67206955]
[-63.38729477 -7.65880299]
[-78.39329529 -7.68087482]
[-93.36202240 -8.73818016]
[-108.22213745 -10.82567978]
[-122.90282440 -13.93342686]
[-137.33412170 -18.04660988]
[-151.44726562 -23.14562988]
[-165.17498779 -29.20618439]
[-178.45187378 -36.19939423]
[-191.21464539 -44.09193420]
[-203.40249634 -52.84618759]
[-214.95733643 -62.42044067]
[-225.82411194 -72.76906586]
[-235.95101929 -83.84275055]
[-245.28979492 -95.58871460]
[-253.79595947 -107.95098877]
[-261.42898560 -120.87065887]
[-268.15243530 -134.28616333]
[-273.93432617 -148.13354492]
[-278.74710083 -162.34684753]
[-282.56781006 -176.85832214]
[-285.37823486 -191.59881592]
[-287.16500854 -206.49809265]
[-287.91958618 -221.48512268]
[-287.63842773 -236.48851013]
[-286.32278442 -251.43675232]
[-283.97900391 -266.25860596]
[-280.61822510 -280.88342285]
[-276.25646973 -295.24154663]
[-270.91448975 -309.26455688]
[-264.61779785 -322.88555908]
[-257.39636230 -336.03970337]
[-249.28462219 -348.66430664]
[-240.32121277 -360.69918823]
[-230.54887390 -372.08697510]
[-220.01414490 -382.77340698]
[-208.76724243 -392.70761108]
[-196.86177063 -401.84216309]
[-184.35446167 -410.13360596]
[-171.30491638 -417.54238892]
[-157.77531433 -424.03320312]
[-143.83013916 -429.57510376]
[-129.53585815 -434.14172363]
[-114.96057129 -437.71127319]
[-100.17374420 -440.26675415]
[-85.24584961 -441.79598999]
[-70.24801636 -442.29168701]
[-55.25172424 -441.75146484]
[-40.32843018 -440.17791748]
[-25.54925919 -437.57852173]
[-10.98463821 -433.96572876]
[3.29602599 -429.35665894]
[17.22467804 -423.77337646]
[30.73494148 -417.24240112]
[43.76243210 -409.79492188]
[56.24506760 -401.46636963]
[68.12336731 -392.29650879]
[79.34071350 -382.32894897]
[89.84365845 -371.61126709]
[99.58215332 -360.19451904]
[108.50978088 -348.13308716]
[116.58400726 -335.48446655]
[123.76634216 -322.30892944]
[130.02256775 -308.66928101]
[135.32286072 -294.63049316]
[139.64196777 -280.25946045]
[142.95930481 -265.62472534]
[145.25907898 -250.79597473]
[146.53030396 -235.84388733]
[146.76693726 -220.83973694]
[145.96784973 -205.85501099]
[144.13685608 -190.96112061]
[141.28265381 -176.22903442]
[137.41888428 -161.72895813]
[132.56393433 -147.53001404]
[126.74093628 -133.69985962]
[119.97766113 -120.30438232]
[112.30632782 -107.40743256]
[103.76348877 -95.07047272]
[94.38986206 -83.35228729]
[84.23011780 -72.30872345]
[73.33267212 -61.99241257]
[61.74945068 -52.45251465]
[49.53565979 -43.73448944]
[36.74950027 -35.87988281]
[43.70064926 -22.58772087]
[50.65179825 -9.29556084]
[57.60294724 3.99659991]
[64.68186188 17.22115707]
[71.88789368 30.37688446]
[77.88805389 34.75358963]
[79.10324097 43.85632324]
[86.05438995 57.14848328]
[93.00553894 70.44064331]
[99.95668793 83.73280334]
[114.34181213 92.32302856]
[113.51253510 109.05731201]
[113.88738251 94.06199646]
[117.53240967 79.51160431]
[124.27116394 66.11051941]
[133.77743530 54.50746918]
[145.59103394 45.26414871]
[159.14006042 38.82802200]
[173.76863098 35.51065445]
[188.76858521 35.47263336]
[203.41378784 38.71580887]
[216.99526978 45.08317566]
[228.85556030 54.26649475]
[238.42053223 65.82120514]
[245.22712708 79.18796539]
[248.94586182 93.71968842]
[249.39671326 108.71291351]
[246.55786133 123.44182587]
[240.56671143 137.19340515]
[231.71330261 149.30197144]
[220.42622375 159.18133545]
[207.25186157 166.35325623]
[192.82800293 170.47053528]
[177.85285950 171.33387756]
[163.05139160 168.90147400]
[149.14012146 163.29107666]
[136.79248047 154.77429199]
[126.60620117 143.76341248]
[119.07595825 130.79495239]
[119.07595825 145.79495239]
[119.07595825 160.79495239]
[119.07595825 175.79495239]
[119.07595825 190.79495239]
[119.07595825 205.79495239]
[119.07595825 220.79495239]
[119.07595825 235.79495239]
[119.07595825 250.79495239]
[119.07595825 265.79495239]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 162]
[2 161]
[3 160]
[4 159]
[5 158]
[6 157]
[7 156]
[8 155]
[9 154]
[10 153]
[11 126]
[14 124]
[15 123]
[16 122]
[17 121]
[18 119]
[19 118]
[21 117]
[22 116]
[23 115]
[24 114]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
