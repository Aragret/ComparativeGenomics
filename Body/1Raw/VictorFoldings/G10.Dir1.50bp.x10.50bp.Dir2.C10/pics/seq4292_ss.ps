%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:29 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGAUACCCCCGAUUCCGCUACGACCAACUCAUACACCUCCUAUGAAAAAACUUCCUACCACUxxxxxxxxxxAUCGGCUGAGAGGGCGUAGGAAUUAUAUCCUUCUUGCUCAUCAGUUGAUGAUACGCCCGACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[92.50000000 246.47631836]
[92.50000000 231.47631836]
[92.50000000 216.47631836]
[92.50000000 201.47631836]
[92.50000000 186.47631836]
[92.50000000 171.47631836]
[92.50000000 156.47631836]
[92.50000000 141.47631836]
[92.50000000 126.47631836]
[92.50000000 111.47631836]
[87.30458069 97.40480042]
[77.55693054 86.00378418]
[67.80928040 74.60276031]
[65.14011383 89.36336517]
[52.92613602 98.07077026]
[38.10188675 95.78129578]
[29.08389282 83.79481506]
[30.99215508 68.91669464]
[42.74325180 59.59404373]
[57.66680908 61.12056351]
[49.41452026 48.59460068]
[41.16223145 36.06864166]
[32.90994263 23.54267883]
[24.65765190 11.01671600]
[18.83715630 7.66569757]
[16.04938316 2.61994457]
[16.33529663 -2.20641732]
[8.61121082 -15.06481934]
[0.88712621 -27.92322159]
[-6.83695889 -40.78162384]
[-20.57582664 -48.62726593]
[-20.49697495 -63.52165985]
[-28.22105980 -76.38006592]
[-40.56157303 -80.27436829]
[-46.71982956 -91.19658661]
[-43.85364532 -102.99032593]
[-51.30855560 -116.00663757]
[-58.76346588 -129.02294922]
[-66.21837616 -142.03926086]
[-80.09998322 -136.30085754]
[-94.60145569 -132.38476562]
[-109.48464966 -130.35527039]
[-124.50518036 -130.24572754]
[-139.41639709 -132.05792236]
[-153.97343445 -135.76208496]
[-167.93727112 -141.29740906]
[-181.07858276 -148.57298279]
[-193.18159485 -157.46936035]
[-204.04757690 -167.84042358]
[-213.49806213 -179.51588440]
[-221.37789917 -192.30401611]
[-227.55767822 -205.99484253]
[-231.93592834 -220.36354065]
[-234.44075012 -235.17414856]
[-235.03102112 -250.18347168]
[-233.69703674 -265.14505005]
[-230.46070862 -279.81320190]
[-225.37516785 -293.94705200]
[-218.52394104 -307.31451416]
[-210.01951599 -319.69607544]
[-200.00157166 -330.88842773]
[-188.63456726 -340.70779419]
[-176.10520935 -348.99291992]
[-162.61920166 -355.60772705]
[-148.39801025 -360.44366455]
[-133.67515564 -363.42123413]
[-118.69241333 -364.49163818]
[-103.69580078 -363.63720703]
[-88.93158722 -360.87203979]
[-74.64220428 -356.24148560]
[-61.06229782 -349.82165527]
[-48.41486740 -341.71789551]
[-36.90759277 -332.06329346]
[-26.72943115 -321.01644897]
[-18.04752159 -308.75866699]
[-11.00442600 -295.49130249]
[-5.71579885 -281.43218994]
[-2.26848459 -266.81219482]
[-0.71909136 -251.87138367]
[-1.09306133 -236.85510254]
[-3.38425374 -222.00994873]
[-7.55504513 -207.57966614]
[-13.53694725 -193.80123901]
[-21.23173141 -180.90090942]
[-30.51304245 -169.09049988]
[-41.22847366 -158.56398010]
[-53.20206833 -149.49417114]
[-45.74715805 -136.47785950]
[-38.29224777 -123.46154785]
[-30.83733749 -110.44523621]
[-15.22707367 -102.48787689]
[-15.36265659 -84.10414886]
[-7.63857174 -71.24574280]
[5.54781818 -64.31982422]
[6.02144384 -48.50571060]
[13.74552822 -35.64730835]
[21.46961403 -22.78890419]
[29.19369888 -9.93050194]
[37.18361282 2.76442719]
[45.43590546 15.29038906]
[53.68819427 27.81635094]
[61.94048309 40.34231186]
[70.19277191 52.86827469]
[79.21030426 64.85511017]
[88.95795441 76.25612640]
[98.70560455 87.65715027]
[133.64816284 77.75164032]
[148.35612488 80.69712830]
[163.06408691 83.64260864]
[170.67887878 70.55468750]
[182.13235474 60.65031815]
[196.18212891 55.00384140]
[211.30418396 54.22775650]
[225.85818481 58.40623474]
[238.26542664 67.08603668]
[247.18006897 79.32563782]
[251.63513184 93.79737854]
[251.14732361 108.93147278]
[245.76959229 123.08628845]
[236.08526611 134.72640991]
[223.14482117 142.58921814]
[208.35195923 145.82179260]
[193.31126404 144.07351685]
[179.65426636 137.53399658]
[168.86236572 126.91262054]
[162.10620117 113.36150360]
[160.11860657 98.35057068]
[145.41064453 95.40509033]
[130.70268250 92.45960236]
[124.90200806 97.21378326]
[136.39732361 106.85005951]
[147.89263916 116.48633575]
[161.35064697 123.11066437]
[165.98876953 137.37557983]
[159.00003052 150.64801025]
[144.61396790 154.89553833]
[131.53700256 147.54756165]
[127.68343353 133.04962158]
[120.49205017 119.88587952]
[113.30066681 106.72214508]
[107.50000000 111.47631836]
[107.50000000 126.47631836]
[107.50000000 141.47631836]
[107.50000000 156.47631836]
[107.50000000 171.47631836]
[107.50000000 186.47631836]
[107.50000000 201.47631836]
[107.50000000 216.47631836]
[107.50000000 231.47631836]
[107.50000000 246.47631836]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[11 106]
[12 105]
[13 104]
[20 103]
[21 102]
[22 101]
[23 100]
[24 99]
[27 98]
[28 97]
[29 96]
[30 95]
[32 93]
[33 92]
[36 90]
[37 89]
[38 88]
[39 87]
[107 129]
[108 128]
[109 127]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
