%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:10 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCUAACAAACCCACAGGUCCUAAACUACCAAACCUGCAUUAAAAAUUUCGGUUGGGGCGACxxxxxxxxxxUCCUACUUCUCCUAUCUCUCCCAGUCCUAGCUGCUGGCAUCACUAUACUACUAACAGACCCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[158.22871399 314.78778076]
[157.91667175 299.79104614]
[157.60461426 284.79428101]
[157.29255676 269.79754639]
[156.98049927 254.80078125]
[156.66844177 239.80403137]
[156.35638428 224.80726624]
[156.04432678 209.81051636]
[155.73226929 194.81376648]
[150.97845459 180.58699036]
[142.21224976 168.41514587]
[133.44604492 156.24331665]
[124.67983246 144.07147217]
[115.66230774 132.08464050]
[106.39735413 120.28800201]
[90.00871277 118.78039551]
[79.60033417 106.03182983]
[64.64009094 104.94051361]
[49.67984009 103.84920502]
[34.71959305 102.75789642]
[20.86088943 117.25464630]
[1.08675194 117.86783600]
[-13.24424171 104.62638855]
[-28.06200027 106.95748901]
[-42.87975693 109.28859711]
[-57.69751740 111.61969757]
[-72.51527405 113.95080566]
[-76.43134308 128.66760254]
[-85.99976349 140.51518250]
[-99.56275177 147.44088745]
[-114.77043152 148.24478149]
[-128.98799133 142.78758240]
[-139.75215149 132.01480103]
[-145.19793701 117.79286957]
[-144.38185120 102.58583832]
[-137.44529724 89.02840424]
[-125.59004211 79.46948242]
[-110.87010193 75.56521606]
[-95.83580017 77.99203491]
[-83.09190369 86.32948303]
[-74.84637451 99.13304138]
[-60.02862167 96.80194092]
[-45.21086121 94.47083282]
[-30.39310455 92.13973236]
[-15.57534599 89.80863190]
[-15.33298302 88.39314270]
[-15.01157284 86.99349213]
[-27.78893089 79.13606262]
[-40.56628799 71.27863312]
[-57.22568130 68.13206482]
[-58.81386185 51.25267029]
[-43.03376770 45.05387497]
[-32.70886230 58.50127792]
[-19.93150520 66.35870361]
[-7.15414715 74.21613312]
[4.56889868 68.09006500]
[17.92444992 68.60788727]
[29.37266922 75.77001190]
[35.81090164 87.79764557]
[50.77115250 88.88895416]
[65.73139954 89.98027039]
[80.69165039 91.07157898]
[88.11259460 82.35860443]
[98.97439575 78.75200653]
[103.57995605 64.47654724]
[108.18552399 50.20108414]
[105.05912781 34.69185257]
[116.33044434 24.95498466]
[120.93601227 10.67952442]
[107.92917633 3.08766818]
[96.85876465 -7.12311220]
[88.24255371 -19.47524071]
[82.48355865 -33.39098740]
[79.85111237 -48.21948242]
[80.46836090 -63.26717758]
[84.30641937 -77.83026123]
[91.18578339 -91.22758484]
[100.78469086 -102.83254242]
[112.65418243 -112.10234833]
[126.23910522 -118.60343170]
[140.90405273 -122.03172302]
[155.96313477 -122.22687531]
[170.71202087 -119.17977142]
[184.46084595 -113.03292084]
[196.56657410 -104.07382202]
[206.46299744 -92.72151184]
[213.68722534 -79.50695801]
[217.90139771 -65.04822540]
[218.90838623 -50.02158356]
[216.66110229 -35.12984848]
[211.26464844 -21.06953621]
[202.97143555 -8.49827099]
[192.16935730 1.99596477]
[179.36363220 9.92233658]
[165.15319824 14.91011333]
[150.20272827 16.72600746]
[135.21147156 15.28508854]
[130.60591125 29.56054878]
[134.06172180 44.04870224]
[122.46098328 54.80664825]
[117.85542297 69.08210754]
[113.24985504 83.35756683]
[120.94095612 96.25760651]
[118.19399261 111.02304840]
[127.45894623 122.81969452]
[133.53785706 125.67528534]
[136.73539734 130.47184753]
[136.85166931 135.30526733]
[145.61787415 147.47709656]
[154.38407898 159.64894104]
[163.15029907 171.82077026]
[162.18875122 156.85162354]
[164.20314026 141.98750305]
[169.11407471 127.81419373]
[176.72802734 114.89026642]
[186.74490356 103.72505188]
[198.76997375 94.75856018]
[212.32929993 88.34417725]
[226.88854980 84.73467255]
[241.87391663 84.07230377]
[256.69485474 86.38317871]
[270.76724243 91.57621765]
[283.53649902 99.44676971]
[294.49942017 109.68466187]
[303.22393799 121.88641357]
[309.36624146 135.57116699]
[312.68423462 150.19958496]
[313.04714966 165.19520569]
[310.44073486 179.96701050]
[304.96765137 193.93287659]
[296.84362793 206.54240417]
[286.38882446 217.29866028]
[274.01522827 225.77772522]
[260.21054077 231.64546204]
[245.51875305 234.67062378]
[230.51889038 234.73396301]
[215.80207825 231.83302307]
[201.94831848 226.08209229]
[189.50357056 217.70783997]
[178.95828247 207.04026794]
[170.72901917 194.50170898]
[171.04107666 209.49845886]
[171.35313416 224.49520874]
[171.66519165 239.49197388]
[171.97724915 254.48872375]
[172.28930664 269.48547363]
[172.60136414 284.48223877]
[172.91342163 299.47897339]
[173.22547913 314.47573853]
[175.81646729 333.68347168]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 149]
[2 148]
[3 147]
[4 146]
[5 145]
[6 144]
[7 143]
[8 142]
[9 141]
[10 111]
[11 110]
[12 109]
[13 108]
[14 105]
[15 104]
[17 62]
[18 61]
[19 60]
[20 59]
[23 45]
[24 44]
[25 43]
[26 42]
[27 41]
[47 55]
[48 54]
[49 53]
[64 102]
[65 101]
[66 100]
[68 98]
[69 97]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
