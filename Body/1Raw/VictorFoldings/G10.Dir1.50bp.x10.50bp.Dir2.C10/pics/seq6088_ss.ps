%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:54 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGACCAAUGGGACUUAAACCCACAAACACUUAGUUAACAGCUAAGCACCCUAAUCAACUGGCxxxxxxxxxxCAACCAGUAACUACUACUAAUCAACGCCCAUAAUCAUACAAAGCCCCCGCACCAAUAGGACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[92.50000000 306.90093994]
[92.50000000 291.90093994]
[92.50000000 276.90093994]
[92.50000000 261.90093994]
[92.50000000 246.90093994]
[92.50000000 231.90093994]
[92.50000000 216.90093994]
[92.50000000 201.90093994]
[92.50000000 186.90093994]
[92.50000000 171.90093994]
[83.60399628 170.40715027]
[74.96327972 167.81709290]
[66.71238708 164.17109680]
[58.97980118 159.52595520]
[51.88591003 153.95396423]
[45.54116821 147.54188538]
[33.27880096 156.18099976]
[21.01643372 164.82012939]
[8.75406551 173.45924377]
[7.61655664 189.05538940]
[-3.31686163 200.23548889]
[-18.88376236 201.72061157]
[-31.73393250 192.80953979]
[-35.79991531 177.70980835]
[-29.16187477 163.55105591]
[-14.95409298 157.01860046]
[0.11494941 161.19686890]
[12.37731743 152.55775452]
[24.63968658 143.91864014]
[36.90205383 135.27952576]
[29.15985489 114.41073608]
[28.13362122 92.17574310]
[33.92064285 70.68253326]
[45.97228622 51.96874619]
[63.14599609 37.80853653]
[83.81363678 29.54436111]
[106.01581573 27.95969582]
[108.80813599 13.22188950]
[111.60046387 -1.51591623]
[110.04288483 -16.43482780]
[104.26660919 -30.27804565]
[98.49034119 -44.12126541]
[92.71406555 -57.96448135]
[90.47321320 -43.13280487]
[84.38377380 -29.42446136]
[74.88076019 -17.81873894]
[62.64305496 -9.14472961]
[48.54487991 -4.02208233]
[33.59338760 -2.81674886]
[18.85667419 -5.61483574]
[5.38749981 -12.21645355]
[-5.85192680 -22.14999771]
[-14.05868626 -34.70583725]
[-18.64650536 -48.98701096]
[-19.28764153 -63.97330093]
[-15.93629169 -78.59412384]
[-8.83187008 -91.80500031]
[1.51809859 -102.66217041]
[14.37423611 -110.39002228]
[28.81812859 -114.43650055]
[43.81793594 -114.51252747]
[58.30210495 -110.61267090]
[71.23591614 -103.01554108]
[81.69541168 -92.26383972]
[88.93140411 -79.13078308]
[89.55538177 -94.11780548]
[90.17935944 -109.10482025]
[90.80333710 -124.09183502]
[91.42731476 -139.07885742]
[77.62293243 -145.44340515]
[67.30862427 -156.60958862]
[62.05725479 -170.87463379]
[62.66961288 -186.06321716]
[69.05231476 -199.85922241]
[80.23205566 -210.15882874]
[94.50399780 -215.39143372]
[109.69177246 -214.75909424]
[123.47936249 -208.35824585]
[133.76425171 -197.16496277]
[138.97807312 -182.88615417]
[138.32575989 -167.69921875]
[131.90678406 -153.92007446]
[120.69998932 -143.64990234]
[106.41432953 -138.45487976]
[105.79035187 -123.46785736]
[105.16637421 -108.48084259]
[104.54239655 -93.49382782]
[103.91841888 -78.50681305]
[106.55728149 -63.74075317]
[112.33355713 -49.89753723]
[118.10982513 -36.05431747]
[123.88610077 -22.21110153]
[126.28890991 -37.01739883]
[131.66213989 -51.02198792]
[139.77970886 -63.63566971]
[150.30012512 -74.32776642]
[162.78074646 -82.64845276]
[176.69653320 -88.24765778]
[191.46199036 -90.88981628]
[206.45594788 -90.46377563]
[221.04756165 -86.98744965]
[234.62294006 -80.60709381]
[246.61096191 -71.59114838]
[256.50726318 -60.31891632]
[263.89550781 -47.26464462]
[268.46484375 -32.97754669]
[270.02301025 -18.05869675]
[268.50451660 -3.13575816]
[263.97317505 11.16344166]
[256.61968994 24.23731232]
[246.75340271 35.53581619]
[234.78939819 44.58361053]
[221.23101807 51.00004196]
[206.64869690 54.51515579]
[191.65594482 54.98106766]
[176.88349915 52.37818146]
[162.95288086 46.81599808]
[150.45016479 38.52853012]
[139.90136719 27.86444473]
[131.75027466 15.27239323]
[126.33827209 1.27640831]
[123.54594421 16.01421356]
[120.75362396 30.75201988]
[131.03755188 34.71090698]
[140.60029602 40.18685913]
[149.21963501 47.05263519]
[156.69529724 55.14870834]
[162.85359192 64.28694916]
[167.55140686 74.25502777]
[170.67958069 84.82131958]
[172.16543579 95.74030304]
[171.97444153 106.75826263]
[170.11105347 117.61919403]
[166.61854553 128.07072449]
[161.57807922 137.86999512]
[155.10676575 146.78930664]
[147.35499573 154.62141418]
[138.50288391 161.18434143]
[128.75610352 166.32557678]
[118.34114075 169.92565918]
[107.50000000 171.90093994]
[107.50000000 186.90093994]
[107.50000000 201.90093994]
[107.50000000 216.90093994]
[107.50000000 231.90093994]
[107.50000000 246.90093994]
[107.50000000 261.90093994]
[107.50000000 276.90093994]
[107.50000000 291.90093994]
[107.50000000 306.90093994]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[16 30]
[17 29]
[18 28]
[19 27]
[37 123]
[38 122]
[39 121]
[40 92]
[41 91]
[42 90]
[43 89]
[65 88]
[66 87]
[67 86]
[68 85]
[69 84]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
