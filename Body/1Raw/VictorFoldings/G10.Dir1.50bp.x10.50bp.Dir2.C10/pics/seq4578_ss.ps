%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:08 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCACCUAUCACACCCCAUCCUAAAGUAAGGUCAGCUAAAUAAGCUAUCGGGCCCAUACCCCGAxxxxxxxxxxACAUCAAAACCCCCUCCCCAUGCUUACAAGCAAGUACAGCAAUCAACCCUCAACUAUCACACCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[235.62704468 137.46870422]
[222.43875122 130.32246399]
[209.25045776 123.17621613]
[196.06216431 116.02996826]
[182.87385559 108.88372803]
[169.68556213 101.73748016]
[156.49726868 94.59123230]
[143.30897522 87.44498444]
[130.12068176 80.29873657]
[116.93238068 73.15249634]
[121.08975220 114.90292358]
[87.67466736 115.63223267]
[74.63391113 123.04430389]
[61.59315872 130.45635986]
[48.55240250 137.86842346]
[52.20626831 152.51602173]
[51.77161789 167.60620117]
[47.28069687 182.01919556]
[39.06676865 194.68544006]
[27.73935890 204.66503906]
[14.13903713 211.21743774]
[-0.72496390 213.85638428]
[-15.74963570 212.38606262]
[-29.82004738 206.91558838]
[-41.89208221 197.85090637]
[-51.06991196 185.86465454]
[-56.67248535 171.84632874]
[-58.28404999 156.83615112]
[-55.78501892 141.94798279]
[-49.36083984 128.28663635]
[-39.48822403 116.86585999]
[-26.89978790 108.53316498]
[-12.52967644 103.90688324]
[2.55575180 103.33031464]
[17.23705864 106.84625244]
[30.42479324 114.19378662]
[41.14033890 124.82767487]
[54.18109512 117.41561127]
[67.22184753 110.00354767]
[80.26260376 102.59148407]
[74.32812500 97.20178986]
[70.15828705 89.18490601]
[56.20047760 83.69131470]
[42.24266434 78.19773102]
[28.28485489 72.70413971]
[13.05969524 77.76121521]
[-0.30768806 68.89033508]
[-1.56298184 52.89646530]
[10.25676727 42.04874420]
[26.08445930 44.66860962]
[33.77844620 58.74632645]
[47.73625565 64.23991394]
[61.69406509 69.73350525]
[75.65187836 75.22709656]
[85.30704498 63.74678040]
[94.96137238 52.26749039]
[87.15631866 39.45807266]
[79.35127258 26.64865494]
[71.54621887 13.83923721]
[63.74116898 1.02981949]
[48.25509262 -1.14170539]
[37.82636642 -12.79398632]
[37.37911224 -28.42517281]
[47.12450790 -40.65469360]
[62.46108246 -43.70814896]
[76.14736938 -36.14378357]
[81.72112274 -21.53326607]
[76.55058289 -6.77523088]
[84.35563660 6.03418732]
[92.16069031 18.84360504]
[99.96573639 31.65302277]
[107.77079010 44.46244049]
[101.31990814 30.92042542]
[99.04256439 16.09431076]
[101.13173676 1.24051201]
[107.41039276 -12.38220882]
[117.34644318 -23.61941338]
[130.09788513 -31.51882362]
[144.58412170 -35.41101456]
[159.57751465 -34.96615219]
[173.80749512 -30.22193146]
[186.06816101 -21.58039474]
[195.32049561 -9.77385712]
[200.78042603 4.19715500]
[201.98526001 19.14868927]
[198.83288574 33.81370163]
[191.59046936 46.94942856]
[180.87173462 57.44269943]
[167.58503723 64.40428162]
[152.85632324 67.24422455]
[137.93377686 65.72186279]
[124.07862854 59.96419525]
[137.26692200 67.11044312]
[150.45521545 74.25669098]
[163.64350891 81.40293884]
[176.83181763 88.54917908]
[190.02011108 95.69542694]
[203.20840454 102.84167480]
[216.39669800 109.98792267]
[229.58499146 117.13417053]
[242.77330017 124.28041077]
[249.94548035 123.71212006]
[255.78327942 126.68031311]
[270.65328979 124.70986176]
[285.52331543 122.73941040]
[300.39334106 120.76895905]
[315.24261475 118.64791107]
[330.06964111 116.37649536]
[344.89666748 114.10507965]
[354.04766846 101.21963501]
[369.64352417 98.66139221]
[382.43148804 107.94812012]
[384.82470703 123.57015228]
[375.40328979 136.25923157]
[359.75683594 138.48713684]
[347.16809082 128.93209839]
[332.34106445 131.20352173]
[317.51403809 133.47492981]
[311.34225464 137.62089539]
[302.36376953 135.63896179]
[287.49377441 137.60942078]
[272.62374878 139.57987976]
[257.75372314 141.55032349]
[271.50881958 147.53343201]
[283.95288086 155.90869141]
[294.67440796 166.39913940]
[303.31875610 178.65780640]
[309.60009766 192.27929688]
[313.31063843 206.81311035]
[314.32772827 221.77859497]
[312.61767578 236.68080139]
[308.23706055 251.02688599]
[301.33074951 264.34240723]
[292.12716675 276.18698120]
[280.93069458 286.16888428]
[268.11157227 293.95800781]
[254.09381104 299.29675293]
[239.34097290 302.00854492]
[224.34097290 302.00369263]
[209.58988953 299.28237915]
[195.57556152 293.93460083]
[182.76148987 286.13720703]
[171.57145691 276.14804077]
[162.37551880 264.29754639]
[155.47781372 250.97755432]
[151.10646057 236.62864685]
[149.40605164 221.72534180]
[150.43278503 206.76051331]
[154.15272522 192.22911072]
[160.44285583 178.61167908]
[169.09512329 166.35858154]
[179.82339478 155.87507629]
[192.27287292 147.50784302]
[206.03182983 141.53361511]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 101]
[2 100]
[3 99]
[4 98]
[5 97]
[6 96]
[7 95]
[8 94]
[9 93]
[10 92]
[12 40]
[13 39]
[14 38]
[15 37]
[42 54]
[43 53]
[44 52]
[45 51]
[56 72]
[57 71]
[58 70]
[59 69]
[60 68]
[103 123]
[104 122]
[105 121]
[106 120]
[107 118]
[108 117]
[109 116]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
