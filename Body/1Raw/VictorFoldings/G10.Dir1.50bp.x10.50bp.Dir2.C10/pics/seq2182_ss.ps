%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:47 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGGCUAAAAGAGCACACCCGUCUAUGUAGCAAAAUAGUGGGAAGAUUUAUAGGUAGAGGCGAxxxxxxxxxxAUACCCAUUACAAUCUCCAGCAUUCCCCCUCAAACCUAAGAAAUAUGUCUGAUAAAAGAGCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[105.56903076 321.42410278]
[105.56903076 306.42410278]
[105.56903076 291.42410278]
[105.56903076 276.42410278]
[105.56903076 261.42410278]
[105.56903076 246.42410278]
[105.56903076 231.42410278]
[105.56903076 216.42410278]
[105.56903076 201.42410278]
[105.56903076 186.42410278]
[91.39247131 181.52255249]
[82.12751770 193.31918335]
[72.86257172 205.11582947]
[73.34193420 221.15171814]
[61.01077271 231.41438293]
[45.32850647 228.03117371]
[38.32522583 213.59739685]
[45.37324905 199.18542480]
[61.06593323 195.85087585]
[70.33087921 184.05424500]
[79.59583282 172.25759888]
[84.34964752 158.03082275]
[84.03759003 143.03407288]
[83.72553253 128.03730774]
[72.84671021 117.71010590]
[57.85401154 118.17815399]
[42.86131668 118.64619446]
[33.44063187 127.51775360]
[20.90201569 127.56375885]
[12.00605774 119.30729675]
[-2.99313092 119.46333313]
[-17.99231911 119.61936951]
[-32.99150848 119.77540588]
[-41.87103271 132.50071716]
[-56.54544830 137.54463196]
[-71.37214661 132.96766663]
[-80.64995575 120.52974701]
[-80.81137085 105.01351166]
[-71.79432678 92.38526917]
[-57.06605530 87.50083923]
[-42.28988266 92.23838043]
[-33.14754486 104.77621460]
[-18.14835548 104.62017822]
[-3.14916754 104.46414185]
[11.85002136 104.30810547]
[26.41269684 94.56498718]
[42.39327240 103.65349579]
[57.38597107 103.18545532]
[72.37866211 102.71741486]
[75.63570404 90.74494934]
[83.44699860 82.11286163]
[93.61072540 78.23925781]
[103.66449738 79.33483124]
[111.38858032 66.47642517]
[119.11266327 53.61802292]
[126.83674622 40.75962067]
[126.70116425 22.37589264]
[142.31143188 14.41853237]
[149.76634216 1.40222251]
[157.22125244 -11.61408710]
[164.67616272 -24.63039589]
[172.13107300 -37.64670563]
[171.61306763 -56.02363586]
[187.05441284 -64.30402374]
[194.23692322 -77.47261047]
[201.41943359 -90.64118958]
[208.60192871 -103.80977631]
[196.62693787 -112.89037323]
[186.13917542 -123.65439606]
[177.37290955 -135.86137390]
[170.52401733 -149.23860168]
[165.74548340 -163.48722839]
[163.14407349 -178.28892517]
[162.77789307 -193.31303406]
[164.65513611 -208.22389221]
[168.73385620 -222.68838501]
[174.92292786 -236.38337708]
[183.08410645 -249.00292969]
[193.03504944 -260.26510620]
[204.55345154 -269.91830444]
[217.38197327 -277.74685669]
[231.23405457 -283.57589722]
[245.80021667 -287.27517700]
[260.75503540 -288.76205444]
[275.76443481 -288.00332642]
[290.49310303 -285.01596069]
[304.61196899 -279.86666870]
[317.80560303 -272.67047119]
[329.77929688 -263.58816528]
[340.26556396 -252.82264709]
[349.03005981 -240.61441040]
[355.87707520 -227.23620605]
[360.65356445 -212.98690796]
[363.25286865 -198.18482971]
[363.61691284 -183.16069031]
[361.73754883 -168.25009155]
[357.65676880 -153.78617859]
[351.46572876 -140.09205627]
[343.30276489 -127.47367859]
[333.35021973 -116.21292877]
[321.83044434 -106.56137848]
[309.00079346 -98.73464203]
[295.14788818 -92.90758514]
[280.58120728 -89.21038055]
[265.62615967 -87.72561646]
[250.61688232 -88.48647308]
[235.88865662 -91.47595215]
[221.77052307 -96.62726593]
[214.58801270 -83.45867920]
[207.40550232 -70.29010010]
[200.22299194 -57.12151718]
[203.33390808 -45.38995743]
[197.40420532 -34.34198761]
[185.14738464 -30.19179535]
[177.69247437 -17.17548561]
[170.23756409 -4.15917683]
[162.78265381 8.85713291]
[155.32774353 21.87344170]
[158.19392395 33.66718292]
[152.03565979 44.58940125]
[139.69514465 48.48370743]
[131.97106934 61.34210968]
[124.24697876 74.20050812]
[116.52289581 87.05891418]
[121.65954590 111.17209625]
[98.72229004 127.72525787]
[99.03433990 142.72201538]
[99.34639740 157.71876526]
[100.35507965 142.75271606]
[107.19601440 129.40350342]
[118.75552368 119.84432220]
[133.15174866 115.63139343]
[148.04103088 117.45056152]
[160.99943542 125.00567627]
[169.91737366 137.06678772]
[173.34304810 151.67036438]
[170.71875000 166.43902588]
[162.47171021 178.96844482]
[149.94453430 187.21888733]
[135.17658997 189.84719849]
[120.56903076 186.42410278]
[120.56903076 201.42410278]
[120.56903076 216.42410278]
[120.56903076 231.42410278]
[120.56903076 246.42410278]
[120.56903076 261.42410278]
[120.56903076 276.42410278]
[120.56903076 291.42410278]
[120.56903076 306.42410278]
[120.56903076 321.42410278]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[11 21]
[12 20]
[13 19]
[22 128]
[23 127]
[24 126]
[25 49]
[26 48]
[27 47]
[30 45]
[31 44]
[32 43]
[33 42]
[53 124]
[54 123]
[55 122]
[56 121]
[58 118]
[59 117]
[60 116]
[61 115]
[62 114]
[64 111]
[65 110]
[66 109]
[67 108]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
