%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:08 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCAUAAUCAUUUUCCUUAUCUGCUUCCUAGUCCUGUAUGCCCUUUUCCUAACACUCACAACAAxxxxxxxxxxAUAACCAUACACAACACUAAAGGACGAACCUGAUCUCUUAUACUAGUAUCCUUAAUCAUUUUCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[76.57807922 265.07229614]
[76.57807922 250.07229614]
[76.57807922 235.07229614]
[76.57807922 220.07229614]
[76.57807922 205.07229614]
[76.57807922 190.07229614]
[76.57807922 175.07229614]
[76.57807922 160.07229614]
[76.57807922 145.07229614]
[76.57807922 130.07229614]
[73.28211212 117.72700500]
[74.88065338 106.74997711]
[80.07981110 98.78797913]
[87.10922241 94.79058075]
[94.03311920 94.89885712]
[87.02088928 81.63881683]
[80.00865936 68.37878418]
[72.99642944 55.11874008]
[57.18979263 45.72564316]
[58.45707703 28.24760056]
[51.17754745 15.13240147]
[43.63370895 2.16742992]
[35.82865906 -10.64198780]
[28.02360725 -23.45140648]
[20.21855736 -36.26082230]
[12.41350746 -49.07024384]
[10.58191681 -34.18248749]
[1.65922785 -22.12488937]
[-12.04285049 -16.02136230]
[-26.97435379 -17.45321655]
[-39.26679611 -26.04948616]
[-45.73542404 -39.58303070]
[-44.70433426 -54.54755020]
[-36.44066238 -67.06600952]
[-23.08537674 -73.89508820]
[-8.09859562 -73.26550293]
[4.63547373 -65.34185028]
[-0.43128976 -79.46020508]
[-5.49805355 -93.57855988]
[-10.56481743 -107.69690704]
[-27.96729469 -115.06765747]
[-34.40385437 -132.49848938]
[-26.25154877 -148.84150696]
[-31.88630486 -162.74293518]
[-37.52106094 -176.64434814]
[-43.15581512 -190.54577637]
[-48.79057312 -204.44720459]
[-54.42532730 -218.34861755]
[-69.05265045 -214.89292908]
[-84.03606415 -213.71067810]
[-99.02434540 -214.82962036]
[-113.66613007 -218.22351074]
[-127.61820984 -223.81277466]
[-140.55351257 -231.46641541]
[-152.16883850 -241.00502014]
[-162.19187927 -252.20497131]
[-170.38771057 -264.80374146]
[-176.56419373 -278.50598145]
[-180.57653809 -292.99050903]
[-182.33068848 -307.91778564]
[-181.78555298 -322.93786621]
[-178.95387268 -337.69869995]
[-173.90203857 -351.85424805]
[-166.74848938 -365.07269287]
[-157.66090393 -377.04415894]
[-146.85229492 -387.48803711]
[-134.57604980 -396.15948486]
[-121.11993408 -402.85525513]
[-106.79937744 -407.41839600]
[-91.95008087 -409.74191284]
[-76.92012787 -409.77136230]
[-62.06183624 -407.50601196]
[-47.72351456 -402.99902344]
[-34.24127197 -396.35601807]
[-21.93115234 -387.73272705]
[-11.08171844 -377.33126831]
[-1.94729912 -365.39547729]
[5.25798178 -352.20516968]
[10.36522198 -338.06951904]
[13.25470161 -323.31988525]
[13.85868549 -308.30206299]
[12.16301632 -293.36804199]
[8.20744324 -278.86788940]
[2.08469009 -265.14157104]
[-6.06171703 -252.51078796]
[-16.04081345 -241.27165222]
[-27.61867714 -231.68762207]
[-40.52390671 -223.98336792]
[-34.88914871 -210.08195496]
[-29.25439453 -196.18052673]
[-23.61963844 -182.27911377]
[-17.98488235 -168.37768555]
[-12.35012627 -154.47627258]
[-1.06349289 -152.39164734]
[7.89068365 -145.02069092]
[12.19356251 -134.12127686]
[10.65805149 -122.38301849]
[3.55353642 -112.76367188]
[8.62030029 -98.64531708]
[13.68706417 -84.52696991]
[18.75382805 -70.40861511]
[25.22292519 -56.87529373]
[33.02797699 -44.06587601]
[40.83302689 -31.25645638]
[48.63807678 -18.44703865]
[56.44312668 -5.63762045]
[60.84542465 -3.65182209]
[64.01889038 1.15179527]
[64.29274750 7.85287189]
[71.57227325 20.96807098]
[83.14393616 24.61704445]
[89.30388641 35.53400040]
[86.25646973 48.10651398]
[93.26869965 61.36655045]
[100.28092957 74.62659454]
[107.29315948 87.88662720]
[119.06114197 97.18795776]
[133.58229065 100.94773865]
[145.47235107 90.97747803]
[160.95428467 89.93374634]
[174.07498169 98.21789551]
[179.78926086 112.64449310]
[175.89985657 127.66621399]
[163.90234375 137.50691223]
[148.41000366 138.38262939]
[135.37994385 129.95663452]
[129.82250977 115.46890259]
[115.30135345 111.70911407]
[109.37053680 116.29990387]
[120.31150818 126.56124115]
[131.25248718 136.82258606]
[142.19346619 147.08392334]
[153.13442993 157.34526062]
[166.31030273 164.51440430]
[172.30265808 178.26545715]
[168.58341980 192.79705811]
[156.72167969 201.97851562]
[141.72174072 201.93629456]
[129.91186523 192.68821716]
[126.27442932 178.13644409]
[119.08304596 164.97271729]
[111.89166260 151.80897522]
[104.70027924 138.64523315]
[97.50889587 125.48149872]
[91.57807922 130.07229614]
[91.57807922 145.07229614]
[91.57807922 160.07229614]
[91.57807922 175.07229614]
[91.57807922 190.07229614]
[91.57807922 205.07229614]
[91.57807922 220.07229614]
[91.57807922 235.07229614]
[91.57807922 250.07229614]
[91.57807922 265.07229614]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 154]
[2 153]
[3 152]
[4 151]
[5 150]
[6 149]
[7 148]
[8 147]
[9 146]
[10 145]
[15 116]
[16 115]
[17 114]
[18 113]
[20 110]
[21 109]
[22 106]
[23 105]
[24 104]
[25 103]
[26 102]
[37 101]
[38 100]
[39 99]
[40 98]
[43 93]
[44 92]
[45 91]
[46 90]
[47 89]
[48 88]
[117 128]
[118 127]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
