%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:07 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCUAUCACCCUAUAGAAGAACUAAUGUUAGUAUAAGUAACAUGAAAACAUUCUCCUCCGCAUAAxxxxxxxxxxUGACGCCAUAAAACUCUUCACCAAAGAGCCCCUAAAACCCGCCACAUCUACCAUCACCCUCUACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[218.99243164 121.34738922]
[207.75848389 131.12734985]
[192.84776306 125.83761597]
[178.06422424 128.37663269]
[163.28067017 130.91563416]
[148.49711609 133.45465088]
[133.71356201 135.99365234]
[121.33610535 144.46705627]
[113.62053680 157.33058167]
[105.90497589 170.19409180]
[109.98297119 185.46319580]
[101.99745178 199.10163879]
[86.68608856 203.01797485]
[73.13283539 194.88870239]
[69.37860870 179.53678894]
[77.65071106 166.07025146]
[93.04145813 162.47853088]
[100.75702667 149.61502075]
[108.47258759 136.75149536]
[103.30358124 131.31721497]
[92.96556854 120.44866180]
[87.79656219 115.01438904]
[74.56332397 122.07706451]
[61.33008575 129.13973999]
[55.30652237 144.00904846]
[39.88525009 148.43215942]
[26.89615631 139.01606750]
[26.30335808 122.98397064]
[38.56159973 112.63433075]
[54.26741028 115.90650177]
[67.50064850 108.84382629]
[80.73388672 101.78115082]
[77.89958191 87.05136108]
[62.99033356 85.40385437]
[48.08108139 83.75634766]
[33.17183304 82.10884094]
[18.26258278 80.46133423]
[3.35333419 78.81382751]
[-11.21316338 84.98859406]
[-23.01361847 75.90021515]
[-39.42101669 80.17030334]
[-48.06624603 65.58618927]
[-36.44532394 53.24153519]
[-21.36611176 60.99096680]
[-7.86602354 54.69836044]
[5.00084066 63.90457535]
[19.91008949 65.55208588]
[34.81933975 67.19959259]
[49.72858810 68.84709167]
[64.63784027 70.49459839]
[79.54708862 72.14210510]
[85.39116669 58.32737732]
[73.82582092 48.77527237]
[62.26047134 39.22316742]
[46.00778961 37.03630447]
[40.02645111 21.76687241]
[50.46954346 9.12274933]
[66.59410858 12.11112690]
[71.81257629 27.65781784]
[83.37792206 37.20992661]
[94.94327545 46.76203156]
[139.24349976 76.79338837]
[131.17454529 121.21010590]
[145.95809937 118.67109680]
[160.74165344 116.13208771]
[175.52520752 113.59307098]
[190.30876160 111.05406189]
[202.60012817 101.09249115]
[216.45341492 106.56383514]
[215.06457520 89.33470917]
[215.32762146 72.05223846]
[217.24006653 54.87442017]
[220.78430176 37.95830917]
[225.92784119 21.45854950]
[232.62355042 5.52596855]
[240.81011963 -9.69380093]
[250.41259766 -24.06165123]
[261.34313965 -37.44627380]
[273.50167847 -49.72535706]
[286.77700806 -60.78670120]
[301.04769897 -70.52925110]
[316.18316650 -78.86401367]
[332.04504395 -85.71486664]
[348.48818970 -91.01927948]
[365.36227417 -94.72884369]
[382.51303101 -96.80973816]
[399.78356934 -97.24303436]
[417.01599121 -96.02487946]
[434.05279541 -93.16651917]
[450.73818970 -88.69417572]
[466.91964722 -82.64883423]
[482.44924927 -75.08587646]
[497.18508911 -66.07453918]
[510.99246216 -55.69729233]
[523.74517822 -44.04910278]
[535.32672119 -31.23654556]
[545.63128662 -17.37683296]
[558.41699219 -25.22070885]
[571.20263672 -33.06458282]
[583.98834229 -40.90845871]
[596.77404785 -48.75233459]
[601.89465332 -63.95623398]
[617.02276611 -69.29657745]
[630.55340576 -60.67671204]
[632.10699463 -44.70905685]
[620.49169922 -33.64263535]
[604.61791992 -35.96665573]
[591.83221436 -28.12277985]
[579.04650879 -20.27890396]
[566.26086426 -12.43502808]
[553.47515869 -4.59115267]
[559.48706055 7.17372131]
[564.62292480 19.34680939]
[568.85528564 31.86298943]
[572.16149902 44.65530396]
[574.52374268 57.65531158]
[575.92944336 70.79346466]
[576.37097168 83.99945831]
[575.84594727 97.20264435]
[574.35711670 110.33236694]
[571.91253662 123.31837463]
[568.52508545 136.09117126]
[564.21295166 148.58239746]
[558.99920654 160.72523499]
[552.91162109 172.45465088]
[545.98272705 183.70790100]
[538.24969482 194.42475891]
[529.75378418 204.54783630]
[520.54040527 214.02294922]
[510.65893555 222.79939270]
[500.16210938 230.83016968]
[489.10610962 238.07226562]
[477.55010986 244.48693848]
[465.55587769 250.03979492]
[453.18759155 254.70111084]
[440.51144409 258.44592285]
[427.59521484 261.25411987]
[414.50802612 263.11068726]
[401.31988525 264.00561523]
[388.10137939 263.93411255]
[374.92321777 262.89651489]
[361.85589600 260.89834595]
[348.96939087 257.95025635]
[336.33264160 254.06796265]
[324.01324463 249.27223206]
[312.07717896 243.58868408]
[300.58828735 237.04771423]
[289.60806274 229.68426514]
[279.19531250 221.53771973]
[269.40573120 212.65164185]
[260.29174805 203.07353210]
[251.90216064 192.85464478]
[244.28186035 182.04962158]
[237.47166443 170.71626282]
[231.50805664 158.91517639]
[226.42295837 146.70950317]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 69]
[3 67]
[4 66]
[5 65]
[6 64]
[7 63]
[8 19]
[9 18]
[10 17]
[22 32]
[23 31]
[24 30]
[33 51]
[34 50]
[35 49]
[36 48]
[37 47]
[38 46]
[40 44]
[52 61]
[53 60]
[54 59]
[97 111]
[98 110]
[99 109]
[100 108]
[101 107]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
