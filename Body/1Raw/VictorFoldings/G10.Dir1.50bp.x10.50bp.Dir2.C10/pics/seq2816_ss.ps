%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:44 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGGAGAAGACCCUAUGGAGCUUUAAUUUAUUAAUGCAAACAGUACCUAACAAACCCACAGGUxxxxxxxxxxACUACUAACAGACCGCAACCUCAACACCACCUUCUUCGACCCCGCCGGAGGAGGAGACCCCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[190.49433899 453.71093750]
[193.08534241 434.50320435]
[193.39739990 419.50643921]
[193.70944214 404.50970459]
[194.02149963 389.51293945]
[194.33355713 374.51617432]
[194.64561462 359.51943970]
[194.95767212 344.52267456]
[195.26972961 329.52593994]
[195.58178711 314.52917480]
[195.89384460 299.53240967]
[192.33908081 284.95971680]
[185.15657043 271.79113770]
[177.97406006 258.62255859]
[170.79154968 245.45396423]
[163.60903931 232.28538513]
[148.92271423 235.09123230]
[134.06808472 233.21775818]
[120.50147247 226.83596802]
[109.55686188 216.55946350]
[102.31472015 203.38548279]
[99.49530029 188.59811401]
[101.38709259 173.64320374]
[107.81730652 159.98689270]
[118.16759491 148.97193909]
[110.98508453 135.80335999]
[103.80257416 122.63478088]
[90.47091675 123.34211731]
[77.78820038 116.16715240]
[70.35108948 102.23243713]
[55.41678619 103.63474274]
[40.48247910 105.03704071]
[25.54817009 106.43934631]
[12.49528885 116.36679840]
[-2.52190566 109.77772522]
[-4.05501127 93.45040131]
[9.47309971 84.18097687]
[24.14586639 91.50504303]
[39.08017349 90.10273743]
[54.01448059 88.70043182]
[68.94879150 87.29812622]
[77.58790588 75.03575897]
[73.88174438 60.50082397]
[70.17558289 45.96588898]
[55.26907730 42.87437439]
[43.23210907 33.65491867]
[36.41957474 20.17865944]
[36.13489151 5.14270401]
[42.38097763 -8.46963692]
[53.87027359 -17.98076630]
[50.16411209 -32.51570129]
[43.95870590 -46.17194366]
[35.44761658 -58.52351379]
[26.93652725 -70.87509155]
[18.42543602 -83.22666168]
[3.23782015 -81.33063507]
[-11.08719254 -86.72068787]
[-21.25781822 -98.15821075]
[-24.93692017 -113.01495361]
[-21.27907181 -127.87693787]
[-11.12481499 -139.32899475]
[3.19247270 -144.73953247]
[18.38278580 -142.86523438]
[30.95549965 -134.13681030]
[38.02149963 -120.55997467]
[37.95706558 -105.25460815]
[30.77700806 -91.73774719]
[39.28809738 -79.38617706]
[47.79919052 -67.03460693]
[56.31027985 -54.68303299]
[55.65055084 -69.66851807]
[59.80450439 -84.08187103]
[68.33830261 -96.41776276]
[80.36067963 -105.38784790]
[94.61602783 -110.05529022]
[109.61552429 -109.93263245]
[123.79264069 -105.03267670]
[135.66671753 -95.86717987]
[143.99761963 -83.39337158]
[147.91529846 -68.91401672]
[147.01058960 -53.94132233]
[141.37797546 -40.03903580]
[131.60571289 -28.65909958]
[118.71442413 -20.99002647]
[104.05046082 -17.83277321]
[89.14532471 -19.51707840]
[75.55569458 -25.86703682]
[64.69905090 -36.22186279]
[68.40521240 -21.68692589]
[83.04597473 -18.83852005]
[95.04750061 -9.87900829]
[101.99730682 3.45745468]
[102.46942902 18.55040932]
[96.31670380 32.40793228]
[84.71051788 42.25972748]
[88.41667938 56.79466248]
[92.12284088 71.32959747]
[115.30837250 77.18784332]
[125.02917480 96.96714020]
[116.97115326 115.45227051]
[124.15366364 128.62084961]
[131.33618164 141.78944397]
[146.20091248 139.05140686]
[161.16389465 141.03927612]
[174.76141357 147.54589844]
[185.66722107 157.92271423]
[192.82199097 171.14436340]
[195.53607178 185.91001892]
[193.55606079 200.77136230]
[187.08831787 214.27464294]
[176.77763367 225.10287476]
[183.96014404 238.27145386]
[191.14263916 251.44004822]
[198.32514954 264.60861206]
[205.50765991 277.77722168]
[206.23139954 262.79467773]
[210.32757568 248.36480713]
[217.58357239 235.23657227]
[227.62277222 224.09141541]
[239.92408752 215.50784302]
[253.84899902 209.93138123]
[268.67471313 207.65147400]
[283.63171387 208.78646851]
[297.94363403 213.27746582]
[310.86758423 220.89132690]
[321.73278809 231.23287964]
[329.97525024 243.76531982]
[335.16711426 257.83813477]
[337.03890991 272.72088623]
[335.49349976 287.64108276]
[330.61108398 301.82424927]
[322.64511108 314.53417969]
[312.00900269 325.11123657]
[299.25491333 333.00631714]
[285.04476929 337.80969238]
[270.11621094 339.27197266]
[255.24412537 337.31732178]
[241.20042419 332.04718018]
[228.71406555 323.73507690]
[218.43318176 312.81246948]
[210.89059448 299.84448242]
[210.57853699 314.84121704]
[210.26647949 329.83798218]
[209.95442200 344.83474731]
[209.64236450 359.83148193]
[209.33032227 374.82824707]
[209.01826477 389.82501221]
[208.70620728 404.82174683]
[208.39414978 419.81851196]
[208.08209229 434.81524658]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 150]
[3 149]
[4 148]
[5 147]
[6 146]
[7 145]
[8 144]
[9 143]
[10 142]
[11 141]
[12 115]
[13 114]
[14 113]
[15 112]
[16 111]
[25 102]
[26 101]
[27 100]
[30 41]
[31 40]
[32 39]
[33 38]
[42 97]
[43 96]
[44 95]
[50 89]
[51 88]
[52 70]
[53 69]
[54 68]
[55 67]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
