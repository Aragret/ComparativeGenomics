%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:21 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCUAGGAUUCAUCUUUCUUUUCACCGUAGGUGGCCUGACUGGCAUUGUAUUAGCAAACUCAUxxxxxxxxxxUUACACAAAAUGACAUCAAAAAAAUCGUAGCCUUCUCCACUUCAAGUCAACUAGGACUCAUCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[219.67630005 395.49487305]
[219.06048584 380.50753784]
[218.44465637 365.52017212]
[217.82882690 350.53283691]
[217.21301270 335.54547119]
[216.59718323 320.55810547]
[215.98135376 305.57077026]
[215.36552429 290.58340454]
[210.38020325 276.43609619]
[201.46405029 264.37365723]
[192.54791260 252.31123352]
[183.63175964 240.24880981]
[174.71560669 228.18637085]
[160.92834473 222.55070496]
[158.94741821 206.85400391]
[150.03126526 194.79158020]
[141.11512756 182.72914124]
[132.19897461 170.66671753]
[130.46009827 185.56558228]
[120.41306305 196.70367432]
[105.77164459 199.96386719]
[91.94792938 194.14108276]
[84.05172729 181.38764954]
[85.00180054 166.41777039]
[94.44696808 154.76492310]
[108.89590454 150.73649597]
[123.00682068 155.82087708]
[116.18324280 142.46278381]
[109.35967255 129.10467529]
[102.53609467 115.74658203]
[89.39446259 108.51487732]
[74.45845032 109.89890289]
[59.52243805 111.28292847]
[44.58642578 112.66695404]
[29.37274551 120.14894867]
[17.97158051 107.60105133]
[26.87294769 93.17184448]
[43.20240021 97.73094177]
[58.13841248 96.34691620]
[73.07442474 94.96289062]
[88.01043701 93.57886505]
[92.53019714 87.59373474]
[86.68338013 73.78016663]
[101.56971741 75.62348175]
[106.08947754 69.63835144]
[103.33323669 54.89375305]
[100.57698822 40.14915466]
[95.89743042 32.23097992]
[97.91878510 25.07372475]
[95.46585846 10.27564621]
[85.57598877 -2.07348752]
[91.12786102 -15.89470196]
[88.67493439 -30.69278145]
[86.22200775 -45.49085999]
[83.16361237 -60.17575836]
[79.50490570 -74.72270966]
[75.84619904 -89.26966858]
[72.18749237 -103.81661987]
[57.11244583 -103.73674774]
[42.45650482 -107.26757812]
[29.07174110 -114.20383453]
[17.73633385 -124.14224243]
[9.10930538 -136.50500488]
[3.69222093 -150.57334900]
[1.80002236 -165.52938843]
[3.54271984 -180.50358582]
[8.81899452 -194.62535095]
[17.32209206 -207.07366943]
[28.55765343 -217.12483215]
[41.87245560 -224.19444275]
[56.49239731 -227.87150574]
[71.56748962 -227.94223022]
[86.22129059 -224.40252686]
[99.60184479 -217.45816040]
[110.93122101 -207.51287842]
[119.55075836 -195.14488220]
[124.95931244 -181.07325745]
[126.84243774 -166.11607361]
[125.09066772 -151.14294434]
[119.80583191 -137.02436829]
[111.29518890 -124.58120728]
[100.05353546 -114.53686523]
[86.73445129 -107.47532654]
[90.39315796 -92.92837524]
[94.05185699 -78.38141632]
[97.71056366 -63.83446503]
[100.11296082 -62.27898407]
[102.02383423 -59.64881516]
[103.01950836 -56.13379288]
[102.75576019 -52.07744217]
[101.02008820 -47.94378662]
[103.47301483 -33.14570999]
[105.92594147 -18.34762955]
[115.64035797 -7.05695438]
[110.26393890 7.82271814]
[112.71686554 22.62079620]
[115.32158661 37.39291382]
[118.07782745 52.13750839]
[120.83407593 66.88210297]
[115.89419556 108.92300415]
[122.71776581 122.28110504]
[129.54135132 135.63920593]
[136.36491394 148.99729919]
[144.26139832 161.75056458]
[153.17755127 173.81298828]
[162.09370422 185.87542725]
[171.00985718 197.93785095]
[185.43486023 204.43629456]
[186.77803040 219.27021790]
[195.69418335 231.33265686]
[204.61033630 243.39508057]
[213.52648926 255.45751953]
[222.44264221 267.51995850]
[221.22660828 252.56932068]
[222.98860168 237.67317200]
[227.65916443 223.41883850]
[235.05409241 210.36836243]
[244.88185120 199.03631592]
[256.75494385 189.86952209]
[270.20516968 183.22941589]
[284.70223999 179.37780762]
[299.67453003 178.46656799]
[314.53170776 180.53161621]
[328.68795776 185.49154663]
[341.58508301 193.15078735]
[352.71459961 203.20733643]
[361.63763428 215.26466370]
[368.00241089 228.84736633]
[371.55792236 243.41987610]
[372.16400146 258.40762329]
[369.79672241 273.21966553]
[364.54946899 287.27194214]
[356.62911987 300.01037598]
[346.34796143 310.93273926]
[334.11138916 319.60833740]
[320.40185547 325.69509888]
[305.75991821 328.95303345]
[290.76293945 329.25369263]
[276.00219727 326.58523560]
[262.05972290 321.05282593]
[249.48526001 312.87463379]
[238.77459717 302.37313843]
[230.35287476 289.96759033]
[230.96870422 304.95495605]
[231.58453369 319.94229126]
[232.20036316 334.92965698]
[232.81617737 349.91699219]
[233.43200684 364.90435791]
[234.04783630 379.89169312]
[234.66366577 394.87905884]
[241.35517883 410.45660400]
[228.23880005 421.19891357]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 113]
[10 112]
[11 111]
[12 110]
[13 109]
[15 107]
[16 106]
[17 105]
[18 104]
[27 103]
[28 102]
[29 101]
[30 100]
[31 41]
[32 40]
[33 39]
[34 38]
[45 99]
[46 98]
[47 97]
[49 96]
[50 95]
[52 93]
[53 92]
[54 91]
[55 86]
[56 85]
[57 84]
[58 83]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
