%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:56 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCCUCCUCCUAGCAGCAGCAGGCAAAUCAGCCCAAUUAGGUCUCCACCCCUGACUCCCCUCAGCxxxxxxxxxxCGAUCCGUCCCUAACAAACUAGGAGGCGUCCUUGCCCUAUUACUAUCCAUCCUCAUCCUAGCACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[247.93577576 394.63977051]
[247.03585815 379.66680908]
[246.13594055 364.69381714]
[245.23602295 349.72082520]
[244.33610535 334.74786377]
[243.43618774 319.77487183]
[242.53628540 304.80191040]
[237.81547546 290.56411743]
[229.59141541 278.01962280]
[221.36737061 265.47509766]
[213.14332581 252.93057251]
[204.30227661 240.81298828]
[190.28140259 235.78659058]
[187.61489868 220.19171143]
[178.17897034 208.53138733]
[168.74305725 196.87104797]
[159.30714417 185.21070862]
[149.87121582 173.55036926]
[140.43530273 161.89002991]
[130.99938965 150.22969055]
[121.56346893 138.56936646]
[113.65820312 142.02418518]
[105.23231506 143.87712097]
[96.60697174 144.05752563]
[88.11096954 142.55854797]
[80.06816101 139.43730164]
[72.78511810 134.81275940]
[66.53945923 128.86123657]
[61.56925583 121.80955505]
[58.06397247 113.92653656]
[43.23257828 116.16923523]
[28.40118217 118.41193390]
[19.22524452 131.27963257]
[3.62445712 133.80766296]
[-9.14551067 124.49620056]
[-11.50846291 108.86956024]
[-2.06250215 96.19874573]
[13.58825111 94.00114441]
[26.15848160 103.58054352]
[40.98987961 101.33783722]
[55.82127380 99.09513855]
[57.66194916 87.34819031]
[62.56816483 76.51731873]
[70.18467712 67.38673401]
[79.96000671 60.61754990]
[75.52502441 46.28817749]
[71.09004211 31.95880508]
[66.65505981 17.62943268]
[62.22007370 3.30005932]
[47.38865662 5.70322990]
[32.36712265 6.01880169]
[17.44786453 4.24063206]
[2.92129230 0.40333304]
[-10.92982864 -5.41840076]
[-23.83588219 -13.11124706]
[-35.54565048 -22.52546310]
[-45.83119965 -33.47779846]
[-54.49231339 -45.75506210]
[-61.36040497 -59.11827469]
[-66.30178833 -73.30731964]
[-69.22026825 -88.04598999]
[-70.05904388 -103.04741669]
[-68.80178833 -118.01956940]
[-65.47296143 -132.67102051]
[-60.13738251 -146.71658325]
[-52.89889145 -159.88284302]
[-43.89839554 -171.91351318]
[-33.31108856 -182.57443237]
[-21.34305763 -191.65806580]
[-8.22726440 -198.98759460]
[5.78098869 -204.42036438]
[20.40902710 -207.85061646]
[35.37211227 -209.21157837]
[50.37898254 -208.47676086]
[65.13752747 -205.66046143]
[79.36046600 -200.81750488]
[92.77093506 -194.04216003]
[105.10791779 -185.46630859]
[116.13124847 -175.25689697]
[125.62636566 -163.61262512]
[133.40844727 -150.76019287]
[139.32600403 -136.94973755]
[143.26385498 -122.45009613]
[145.14535522 -107.54351807]
[144.93385315 -92.52015686]
[142.63349915 -77.67243958]
[138.28906250 -63.28940201]
[131.98509216 -49.65099335]
[123.84430695 -37.02270126]
[114.02517700 -25.65033340]
[102.71881866 -15.75525856]
[90.14533234 -7.53008747]
[76.54944611 -1.13492417]
[80.98442841 13.19444847]
[85.41941071 27.52382088]
[89.85439301 41.85319519]
[94.28938293 56.18256760]
[115.33698273 58.55900955]
[132.86056519 70.45745087]
[142.83369446 89.14395905]
[142.96481323 110.32489014]
[133.22380066 129.13343811]
[142.65972900 140.79377747]
[152.09564209 152.45411682]
[161.53155518 164.11445618]
[170.96746826 175.77479553]
[180.40339661 187.43511963]
[189.83930969 199.09545898]
[199.27522278 210.75579834]
[213.97102356 216.61621094]
[215.96261597 231.37705994]
[220.41665649 217.05360413]
[234.31640625 211.41473389]
[247.49073792 218.58668518]
[250.29934692 233.32139587]
[240.68702698 244.83674622]
[225.68783569 244.70651245]
[233.91189575 257.25103760]
[242.13594055 269.79556274]
[250.35998535 282.34008789]
[249.71917725 267.35379028]
[252.36898804 252.58967590]
[258.18130493 238.76155090]
[266.87512207 226.53791809]
[278.03018188 216.50971985]
[291.10714722 209.16174316]
[305.47387695 204.84925842]
[320.43576050 203.78071594]
[335.26950073 206.00781250]
[349.25799561 211.42283630]
[361.72491455 219.76403809]
[372.06759644 230.62814331]
[379.78604126 243.48994446]
[384.50704956 257.72763062]
[386.00244141 272.65292358]
[384.19989014 287.54421997]
[379.18655396 301.68164062]
[371.20480347 314.38168335]
[360.64050293 325.03042603]
[348.00436401 333.11300659]
[333.90728760 338.23870850]
[319.03082275 340.15972900]
[304.09411621 338.78317261]
[289.81930542 334.17562866]
[276.89645386 326.55981445]
[265.95037842 316.30395508]
[257.50924683 303.90197754]
[258.40917969 318.87496948]
[259.30908203 333.84793091]
[260.20901489 348.82092285]
[261.10891724 363.79391479]
[262.00885010 378.76687622]
[262.90875244 393.73986816]
[272.39221191 407.11880493]
[265.30245972 421.90621948]
[248.93286133 422.89007568]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 153]
[2 152]
[3 151]
[4 150]
[5 149]
[6 148]
[7 147]
[8 120]
[9 119]
[10 118]
[11 117]
[12 111]
[14 109]
[15 108]
[16 107]
[17 106]
[18 105]
[19 104]
[20 103]
[21 102]
[30 41]
[31 40]
[32 39]
[45 97]
[46 96]
[47 95]
[48 94]
[49 93]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
