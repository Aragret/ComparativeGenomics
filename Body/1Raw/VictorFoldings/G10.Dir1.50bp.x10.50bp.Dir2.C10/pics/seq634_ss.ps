%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:56 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCUACUAAUCUCAUCAAUACAACCCCCGCCCAUCCUACCCAGCACACACACACCGCUGCUAAxxxxxxxxxxCCAGUGAACCACUAUCACGAAAAAAACUCUACCUCUCUAUACUAAUCUCCCUACAAAUCUCCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[-23.05374527 219.94157410]
[-34.24204254 229.93267822]
[-45.43033981 239.92376709]
[-50.57009125 254.88684082]
[-65.21679688 257.59298706]
[-76.40509796 267.58407593]
[-87.59339142 277.57516479]
[-98.78169250 287.56628418]
[-109.96998596 297.55737305]
[-103.16568756 311.02450562]
[-100.07975006 325.79406738]
[-100.92256165 340.85897827]
[-105.63667297 355.19213867]
[-113.90066528 367.81628418]
[-125.15108490 377.87066650]
[-138.62084961 384.66976929]
[-153.39158630 387.75000000]
[-168.45619202 386.90136719]
[-182.78752136 382.18173218]
[-195.40847778 373.91287231]
[-205.45851135 362.65856934]
[-212.25241089 349.18615723]
[-215.32693481 334.41424561]
[-214.47248840 319.34997559]
[-209.74731445 305.02044678]
[-201.47357178 292.40270996]
[-190.21539307 282.35702515]
[-176.74038696 275.56832886]
[-161.96726990 272.49948120]
[-146.90333557 273.35977173]
[-132.57563782 278.09048462]
[-119.96108246 286.36907959]
[-108.77278900 276.37799072]
[-97.58448792 266.38687134]
[-86.39619446 256.39578247]
[-75.20789337 246.40469360]
[-70.86840820 232.15625000]
[-55.42143631 228.73547363]
[-44.23313904 218.74436951]
[-33.04484177 208.75328064]
[-48.79310226 185.95823669]
[-60.67330170 160.92861938]
[-68.37660217 134.31507874]
[-71.70275879 106.80947113]
[-70.56528473 79.12684631]
[-64.99376678 51.98684692]
[-55.13303375 26.09500885]
[-41.23942947 2.12441969]
[-23.67413521 -19.30177689]
[-34.00503922 -30.17708969]
[-44.33594131 -41.05240250]
[-54.66684341 -51.92771912]
[-69.37384033 -47.68946838]
[-84.36351776 -50.78273010]
[-96.19134521 -60.49668884]
[-102.13938904 -74.59915161]
[-100.84082031 -89.84947205]
[-92.59404755 -102.74324036]
[-79.29411316 -110.31756592]
[-63.99724960 -110.83191681]
[-50.21856308 -104.16810608]
[-41.12429428 -91.85742188]
[-38.80423737 -76.72878265]
[-43.79153061 -62.25862122]
[-33.46062851 -51.38330460]
[-23.12972450 -40.50799179]
[-12.79882145 -29.63267899]
[-3.08224201 -37.48547745]
[7.17920351 -44.61156845]
[17.93127632 -50.97327423]
[29.11714172 -56.53697968]
[40.67767715 -61.27326965]
[52.55177307 -65.15711212]
[64.67666626 -68.16797638]
[76.98827362 -70.28994751]
[89.42151642 -71.51181030]
[101.91066742 -71.82711029]
[114.38972473 -71.23416901]
[126.79271698 -69.73613739]
[139.05409241 -67.34091949]
[151.10903931 -64.06118011]
[162.89384460 -59.91426086]
[174.34619141 -54.92207336]
[185.40557861 -49.11101151]
[196.01351929 -42.51178360]
[204.92967224 -54.57421494]
[213.84582520 -66.63665009]
[222.76197815 -78.69908142]
[218.92799377 -93.85937500]
[225.78233337 -107.91468811]
[240.08859253 -114.22854614]
[255.09181213 -109.81971741]
[263.70791626 -96.76993561]
[261.86862183 -81.24089050]
[250.44242859 -70.56494141]
[234.82441711 -69.78292847]
[225.90826416 -57.72049713]
[216.99211121 -45.65806580]
[208.07595825 -33.59563446]
[215.79919434 -26.95964622]
[223.11581421 -19.87785721]
[230.00013733 -12.37513065]
[236.42797852 -4.47781229]
[242.37675476 3.78636718]
[247.82560730 12.38838863]
[252.75538635 21.29804802]
[257.14877319 30.48406029]
[260.99035645 39.91416931]
[264.26666260 49.55526352]
[266.96612549 59.37348557]
[269.07934570 69.33436584]
[270.59884644 79.40292358]
[271.51931763 89.54380035]
[271.83749390 99.72139740]
[271.55230713 109.89997864]
[270.66473389 120.04378510]
[269.17788696 130.11721802]
[267.09698486 140.08489990]
[264.42935181 149.91181946]
[261.18435669 159.56349182]
[257.37338257 169.00601196]
[253.00978088 178.20620728]
[248.10891724 187.13180542]
[242.68798828 195.75144958]
[236.76603699 204.03488159]
[230.36384583 211.95300293]
[223.50389099 219.47801208]
[216.21026611 226.58349609]
[208.50859070 233.24447632]
[200.42588806 239.43760681]
[191.99055481 245.14111328]
[183.23222351 250.33497620]
[174.18161011 255.00094604]
[164.87052917 259.12265015]
[155.33166504 262.68563843]
[145.59851074 265.67733765]
[135.70524597 268.08731079]
[125.68659210 269.90704346]
[115.57775116 271.13018799]
[105.41421509 271.75241089]
[95.23165894 271.77154541]
[85.06584930 271.18756104]
[74.95248413 270.00244141]
[64.92706299 268.22036743]
[55.02480316 265.84762573]
[45.28046417 262.89254761]
[35.72826767 259.36544800]
[26.40175056 255.27879333]
[17.33366776 250.64688110]
[8.55585766 245.48599243]
[0.09914169 239.81425476]
[-8.00678444 233.65156555]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 40]
[2 39]
[3 38]
[5 36]
[6 35]
[7 34]
[8 33]
[9 32]
[49 67]
[50 66]
[51 65]
[52 64]
[85 99]
[86 98]
[87 97]
[88 96]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
