%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:21 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGAACGAAAAAUUCUAGGCUAUAUACAACUACGCAAAGGCCCCAACGUUGUAGGCCCCUACGxxxxxxxxxxAUGGCCCACCAUAAUUACCCCCAUACUCCUUACACUAUUCCUCAUCACCCAACUAAAAAUCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[247.03439331 430.92669678]
[247.03439331 415.92669678]
[247.03439331 400.92669678]
[247.03439331 385.92669678]
[247.03439331 370.92669678]
[247.03439331 355.92669678]
[247.03439331 340.92669678]
[247.03439331 325.92669678]
[247.03439331 310.92669678]
[247.03439331 295.92669678]
[242.57757568 281.60412598]
[234.06648254 269.25253296]
[220.47377014 263.16259766]
[219.01464844 247.40882874]
[210.50355530 235.05725098]
[194.28587341 228.42503357]
[192.89283752 210.09365845]
[183.26431274 198.59185791]
[172.82449341 187.82104492]
[162.38468933 177.05024719]
[151.94487000 166.27943420]
[139.12149048 167.87875366]
[127.55532837 161.69020081]
[121.59594727 149.78584290]
[123.63085175 136.43231201]
[113.41737366 125.44664764]
[102.73010254 129.69754028]
[90.81931305 129.48185730]
[79.53935242 124.51779175]
[70.76627350 115.28636932]
[66.08786011 103.00035858]
[66.52318573 89.44926453]
[52.39838409 84.40050507]
[38.27358246 79.35174561]
[24.14877701 74.30299377]
[10.02397537 69.25423431]
[-4.10082817 64.20548248]
[-13.53436184 76.04976654]
[-26.30393600 84.18713379]
[-41.02440262 87.73489380]
[-56.09899139 86.30821991]
[-69.89253235 80.06185913]
[-80.90879822 69.67337036]
[-87.95282745 56.26962662]
[-90.26054382 41.30456161]
[-87.58161163 26.40147400]
[-80.20662689 13.17693710]
[-68.93557739 3.06545210]
[-54.99105835 -2.83616376]
[-39.88566589 -3.88774705]
[-25.25791931 0.02477012]
[-12.69452953 8.47698689]
[-3.55827904 20.55207062]
[1.15980089 34.94020462]
[0.94792831 50.08067703]
[15.07273102 55.12943268]
[29.19753456 60.17818832]
[43.32233810 65.22694397]
[57.44713974 70.27570343]
[71.57194519 75.32445526]
[83.46432495 66.18272400]
[82.21744537 51.23463821]
[80.97057343 36.28654861]
[79.72370148 21.33846283]
[64.99318695 17.89357376]
[52.04922104 10.06357670]
[42.15991211 -1.38442528]
[36.29411316 -15.32887268]
[35.02650070 -30.40363121]
[38.48126221 -45.13182831]
[46.31993103 -58.07054901]
[57.77455521 -67.95218658]
[71.72293091 -73.80863953]
[86.79853058 -75.06614685]
[101.52441406 -71.60152435]
[114.45787811 -63.75418472]
[124.33184052 -52.29293823]
[130.17893982 -38.34064484]
[131.42634583 -23.26420021]
[127.95185852 -8.54064465]
[120.09585571 4.38755798]
[108.62799835 14.25383472]
[94.67178345 20.09158897]
[95.91866302 35.03967667]
[97.16553497 49.98776245]
[98.41240692 64.93585205]
[120.72924805 74.33714294]
[130.45043945 94.87794495]
[124.40303802 115.23316193]
[134.61651611 126.21882629]
[152.07643127 126.51670074]
[163.71388245 139.08068848]
[162.71568298 155.83961487]
[173.15548706 166.61042786]
[183.59530640 177.38124084]
[194.03511047 188.15203857]
[194.66494751 173.16526794]
[204.65077209 161.97227478]
[219.46890259 159.64356995]
[232.40658569 167.23410034]
[237.60293579 181.30526733]
[232.70394897 195.48271179]
[219.92889404 203.34390259]
[205.06466675 201.32745361]
[217.68618774 204.18247986]
[224.73103333 214.55499268]
[222.85513306 226.54617310]
[231.36622620 238.89773560]
[245.56771851 245.87113953]
[246.41806030 260.74145508]
[254.92913818 273.09301758]
[254.27922058 258.10711670]
[256.60241699 243.28810120]
[261.80715942 229.22003174]
[269.68829346 216.45729065]
[279.93530273 205.50288391]
[292.14428711 196.78851318]
[305.83413696 190.65759277]
[320.46533203 187.35176086]
[335.46121216 187.00128174]
[350.23086548 189.61999512]
[364.19219971 195.10466003]
[376.79495239 203.23916626]
[387.54251099 213.70291138]
[396.01132202 226.08352661]
[401.86758423 239.89309692]
[404.88052368 254.58738708]
[404.93139648 269.58728027]
[402.01821899 284.30169678]
[396.25579834 298.15066528]
[387.87121582 310.58847046]
[377.19488525 321.12487793]
[364.64758301 329.34469604]
[350.72381592 334.92398071]
[335.97225952 337.64282227]
[320.97433472 337.39410400]
[306.32107544 334.18762207]
[292.58993530 328.14974976]
[280.32208252 319.51840210]
[270.00100708 308.63375854]
[262.03439331 295.92669678]
[262.03439331 310.92669678]
[262.03439331 325.92669678]
[262.03439331 340.92669678]
[262.03439331 355.92669678]
[262.03439331 370.92669678]
[262.03439331 385.92669678]
[262.03439331 400.92669678]
[262.03439331 415.92669678]
[262.03439331 430.92669678]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[11 111]
[12 110]
[14 108]
[15 107]
[17 104]
[18 96]
[19 95]
[20 94]
[21 93]
[25 90]
[26 89]
[32 60]
[33 59]
[34 58]
[35 57]
[36 56]
[37 55]
[61 86]
[62 85]
[63 84]
[64 83]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
