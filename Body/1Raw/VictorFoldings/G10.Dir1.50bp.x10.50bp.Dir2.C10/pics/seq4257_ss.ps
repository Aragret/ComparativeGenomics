%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:52 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGUCUAACCUCCCUGUUCUUAUGAAUUCGAACAGCAUACCCCCGAUUCCGCUACGACCAACUCAxxxxxxxxxxCGGUGCCCCCGAUAUGGCGUUUCCCCGCAUAAACAACAUAAGCUUCUGACUCUUACCUCCCUCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[-8.45095158 170.26782227]
[-21.49170685 177.67988586]
[-34.53246307 185.09194946]
[-47.57321548 192.50402832]
[-60.61397171 199.91609192]
[-71.27418518 210.46881104]
[-78.81802368 223.43377686]
[-86.36186218 236.39874268]
[-93.90570068 249.36372375]
[-101.44953918 262.32870483]
[-108.99337769 275.29367065]
[-111.73319244 292.02478027]
[-128.56889343 294.02365112]
[-135.15025330 278.39923096]
[-121.95835114 267.74981689]
[-114.41451263 254.78485107]
[-106.87067413 241.81988525]
[-99.32682800 228.85490417]
[-91.78298950 215.88993835]
[-84.23915100 202.92497253]
[-93.54047394 191.15698242]
[-107.89733887 195.50216675]
[-122.25419617 199.84733582]
[-136.61105347 204.19252014]
[-150.96791077 208.53770447]
[-165.32478333 212.88287354]
[-168.74371338 227.85639954]
[-179.20312500 239.10346985]
[-193.88946533 243.59866333]
[-208.85220337 240.13281250]
[-220.06642151 229.63819885]
[-224.51556396 214.93783569]
[-221.00282288 199.98603821]
[-210.47311401 188.80476379]
[-195.75888062 184.40171814]
[-180.81816101 187.96131897]
[-169.66995239 198.52601624]
[-155.31309509 194.18083191]
[-140.95623779 189.83566284]
[-126.59937286 185.49047852]
[-112.24251556 181.14530945]
[-97.88565826 176.80012512]
[-89.95190430 175.18641663]
[-82.50323486 175.81254578]
[-76.11546326 178.31491089]
[-71.20999146 182.19526672]
[-68.02603912 186.87533569]
[-54.98528290 179.46327209]
[-41.94452667 172.05119324]
[-28.90377235 164.63912964]
[-15.86301613 157.22706604]
[-19.82097626 148.39535522]
[-23.10686684 139.29219055]
[-25.70225716 129.96862793]
[-27.59259224 120.47698212]
[-28.76726532 110.87048340]
[-29.21969223 101.20301056]
[-28.94733238 91.52878571]
[-27.95171547 81.90207672]
[-26.23842430 72.37688446]
[-23.81706810 63.00662231]
[-20.70122910 53.84385681]
[-16.90838432 44.93997955]
[-12.45980740 36.34492874]
[-7.38044882 28.10691643]
[-1.69880009 20.27214813]
[4.55327177 12.88456917]
[11.34069824 5.98561573]
[18.62541008 -0.38601667]
[26.36654854 -6.19458961]
[34.52069092 -11.40752316]
[43.04210281 -15.99557877]
[51.88299179 -19.93302155]
[60.99376297 -23.19776535]
[70.32331848 -25.77150154]
[79.81932831 -27.63979340]
[89.42852783 -28.79215813]
[99.09703064 -29.22213745]
[108.77059174 -28.92731667]
[118.39495850 -27.90934944]
[127.91615295 -26.17394638]
[137.28076172 -23.73084068]
[146.43626404 -20.59373474]
[152.62976074 -34.25538635]
[158.82325745 -47.91703415]
[154.54380798 -63.37879181]
[164.08035278 -76.27971649]
[180.11726379 -76.72332001]
[190.35240173 -64.36931610]
[186.93424988 -48.69462967]
[172.48489380 -41.72354507]
[166.29141235 -28.06189537]
[160.09791565 -14.40024471]
[196.32466125 13.85629940]
[220.37576294 53.00157547]
[234.64161682 48.36632156]
[248.90745544 43.73106766]
[263.17330933 39.09581375]
[270.39492798 25.29415131]
[284.92855835 20.79656601]
[298.04183960 27.76634026]
[312.30767822 23.13108635]
[326.57351685 18.49583054]
[340.83938599 13.86057568]
[345.50616455 -0.93809766]
[358.00012207 -10.14032269]
[373.51702881 -10.20765591]
[386.09036255 -1.11420667]
[390.88540649 13.64340878]
[386.05838013 28.39058685]
[373.46533203 37.45673370]
[357.94857788 37.35573578]
[345.47463989 28.12642288]
[331.20877075 32.76167679]
[316.94293213 37.39693451]
[302.67709351 42.03218842]
[296.16494751 55.37863922]
[281.76339722 60.28266907]
[267.80856323 53.36166000]
[253.54270935 57.99691391]
[239.27687073 62.63216782]
[225.01101685 67.26742554]
[227.29484558 77.74698639]
[228.70178223 88.37984467]
[229.22210693 99.09275055]
[228.85224915 109.81191254]
[227.59475708 120.46347046]
[225.45829773 130.97407532]
[222.45756531 141.27128601]
[218.61326599 151.28421021]
[213.95185852 160.94383240]
[208.50546265 170.18362427]
[202.31158447 178.93994141]
[195.41291809 187.15246582]
[187.85696411 194.76460266]
[179.69578552 201.72393799]
[170.98559570 207.98251343]
[161.78639221 213.49720764]
[152.16157532 218.23005676]
[142.17741394 222.14843750]
[131.90270996 225.22537231]
[121.40822601 227.43965149]
[110.76627350 228.77601624]
[100.05014801 229.22528076]
[89.33367920 228.78433228]
[78.69068909 227.45622253]
[68.19449615 225.25009155]
[57.91740417 222.18113708]
[47.93020630 218.27050781]
[38.30171204 213.54513550]
[29.09823990 208.03756714]
[20.38319588 201.78576660]
[12.21661663 194.83276367]
[4.65475845 187.22648621]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 51]
[2 50]
[3 49]
[4 48]
[5 47]
[6 20]
[7 19]
[8 18]
[9 17]
[10 16]
[11 15]
[21 42]
[22 41]
[23 40]
[24 39]
[25 38]
[26 37]
[83 93]
[84 92]
[85 91]
[95 122]
[96 121]
[97 120]
[98 119]
[101 116]
[102 115]
[103 114]
[104 113]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
