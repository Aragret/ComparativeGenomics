%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:51 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGGAAAGUUUAACUAAGCUAUACUAACCCCAGGGUUGGUCAAUUUCGUGCCAGCCACCGCGGxxxxxxxxxxACAAGUCAUUAUUACCCUCACUGUCAACCCAACACAGGCAUGCUCAUAAGGAAAGGUUAACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[99.49700928 656.64361572]
[102.08801270 637.43591309]
[102.40006256 622.43914795]
[102.71212006 607.44238281]
[103.02417755 592.44561768]
[103.33623505 577.44891357]
[103.64829254 562.45214844]
[103.96035004 547.45538330]
[104.27239990 532.45861816]
[104.58445740 517.46185303]
[104.89651489 502.46511841]
[88.72907257 498.70538330]
[73.76619720 491.50524902]
[60.73039246 481.20935059]
[50.25179291 468.31185913]
[42.83767319 453.43283081]
[38.84790421 437.28833008]
[38.47748184 420.65597534]
[41.74700165 404.33755493]
[48.50152206 389.12030029]
[58.41792679 375.73886108]
[71.02036285 364.83999634]
[85.70307922 356.95117188]
[101.75955200 352.45510864]
[100.82392120 337.48431396]
[99.88829041 322.51351929]
[86.00550079 320.35903931]
[72.87741089 315.33853149]
[61.08895874 307.67285156]
[51.16595459 297.70074463]
[43.55168915 285.86392212]
[38.58710098 272.68750000]
[36.49551010 258.75659180]
[37.37259293 244.69055176]
[41.18198013 231.11518860]
[47.75679398 218.63508606]
[56.80691528 207.80665588]
[67.93182373 199.11325073]
[80.63829041 192.94367981]
[94.36227417 189.57476807]
[94.05021667 174.57801819]
[93.73815918 159.58125305]
[93.42610168 144.58450317]
[93.11404419 129.58775330]
[92.80198669 114.59099579]
[84.87733459 106.00113678]
[84.75576782 94.31477356]
[92.50000000 85.56190491]
[92.50000000 70.56190491]
[79.99952698 78.85275269]
[65.65956116 74.45214081]
[59.96145630 60.57656097]
[67.07007599 47.36794281]
[81.78958130 44.48071671]
[93.36093140 54.02461243]
[94.91851044 39.10570145]
[96.47609711 24.18678665]
[93.68376923 9.44898129]
[86.77677155 -3.86617422]
[80.00315094 -10.09272385]
[79.86784363 -17.53095818]
[73.23934937 -30.98692513]
[59.31452179 -39.64898300]
[60.12403107 -56.02813721]
[74.83512115 -63.27492142]
[88.31428528 -53.93445969]
[86.69531250 -37.61542130]
[93.32381439 -24.15945816]
[100.09192657 -10.77317238]
[106.99892426 2.54198289]
[108.16265106 -12.41280746]
[112.35314178 -26.81557655]
[119.39411163 -40.06037521]
[128.98933411 -51.58998108]
[140.73512268 -60.91931915]
[154.13729858 -67.65589905]
[168.63203430 -71.51628876]
[183.60951233 -72.33809662]
[198.43959045 -70.08672333]
[212.49835205 -64.85691071]
[225.19433594 -56.86866760]
[235.99340820 -46.45808029]
[244.44120789 -34.06313324]
[250.18232727 -20.20530510]
[252.97525024 -5.46761227]
[252.70246887 9.52990723]
[249.37544250 24.15628624]
[243.13417053 37.79616928]
[234.24121094 49.87570572]
[223.07070923 59.88669586]
[210.09262085 67.40795898]
[195.85296631 72.12306213]
[180.95082092 73.83363342]
[166.01313782 72.46771240]
[151.66838074 68.08276367]
[138.52003479 60.86326599]
[127.12129211 51.11295319]
[117.95169830 39.24204254]
[111.39500427 25.74436760]
[109.83742523 40.66328049]
[108.27984619 55.58219147]
[107.50000000 70.56190491]
[107.50000000 85.56190491]
[116.26898193 99.83075714]
[107.79874420 114.27893829]
[108.11080170 129.27569580]
[108.42285919 144.27244568]
[108.73490906 159.26919556]
[109.04696655 174.26596069]
[109.35902405 189.26271057]
[125.00983429 192.65269470]
[139.40164185 199.65606689]
[151.71403503 209.86920166]
[161.24620056 222.70556641]
[167.45681763 237.42953491]
[169.99473572 253.19842529]
[168.71891785 269.11077881]
[163.70622253 284.25793457]
[155.24676514 297.77584839]
[143.82719421 308.89437866]
[130.10261536 316.98123169]
[114.85908508 321.57788086]
[115.79471588 336.54867554]
[116.73033905 351.51947021]
[130.12419128 353.23123169]
[142.99949646 357.28671265]
[154.94967651 363.55639648]
[165.59759521 371.84088135]
[174.60749817 381.87722778]
[181.69560242 393.34719849]
[186.63899231 405.88751221]
[189.28271484 419.10125732]
[189.54450989 432.57043457]
[187.41749573 445.86926270]
[182.97026062 458.57754517]
[176.34469604 470.29403687]
[167.75143433 480.64898682]
[157.46318054 489.31597900]
[145.80604553 496.02209473]
[133.14923096 500.55648804]
[119.89327240 502.77716064]
[119.58121490 517.77392578]
[119.26915741 532.77069092]
[118.95709991 547.76745605]
[118.64504242 562.76416016]
[118.33298492 577.76092529]
[118.02093506 592.75769043]
[117.70887756 607.75445557]
[117.39682007 622.75122070]
[117.08476257 637.74792480]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 150]
[3 149]
[4 148]
[5 147]
[6 146]
[7 145]
[8 144]
[9 143]
[10 142]
[11 141]
[24 124]
[25 123]
[26 122]
[40 110]
[41 109]
[42 108]
[43 107]
[44 106]
[45 105]
[48 103]
[49 102]
[55 101]
[56 100]
[57 99]
[58 70]
[59 69]
[61 68]
[62 67]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
