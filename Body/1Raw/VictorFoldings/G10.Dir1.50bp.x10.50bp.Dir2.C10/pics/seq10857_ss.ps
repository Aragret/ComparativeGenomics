%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:36 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCCUCCUAGCAGCAGCAGGCAAAUCAGCCCAAUUAGGUCUCCACCCCUGACUCCCCUCAGCCxxxxxxxxxxCACUCAAGCACUAUAGUUGUAGCAGGAAUCUUCUUACUCAUCCGCUUCCACCCCCUAGCAGCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[274.01632690 34.59968185]
[260.20272827 40.44646835]
[246.38914490 46.29325867]
[232.57556152 52.14004517]
[223.87083435 64.22628021]
[208.14630127 62.48006821]
[194.33271790 68.32685852]
[180.51913452 74.17364502]
[166.70555115 80.02043152]
[152.89196777 85.86721802]
[139.07838440 91.71401215]
[125.26480103 97.56079865]
[111.45121765 103.40758514]
[112.63822937 147.18600464]
[101.24715424 156.94528198]
[89.85608673 166.70455933]
[85.33852386 174.71626282]
[78.12947845 176.54434204]
[66.54042816 186.06768799]
[61.28334808 201.60136414]
[45.15140533 204.54966736]
[34.73976517 191.87962341]
[40.75902557 176.62510681]
[57.01709366 174.47863770]
[68.60614014 164.95529175]
[80.09680939 155.31347656]
[91.48788452 145.55421448]
[102.87895966 135.79493713]
[100.09798431 128.82957458]
[94.53604889 114.89885712]
[91.75508118 107.93350220]
[76.77484131 108.70316315]
[61.79459763 109.47282410]
[52.51586533 122.06008148]
[37.30493546 125.68796539]
[23.34393692 118.64349365]
[17.22483253 104.25285339]
[21.83687401 89.31085968]
[35.00239944 80.87267303]
[50.50504303 82.92253876]
[61.02494049 94.49258423]
[76.00518036 93.72292328]
[90.98542023 92.95326233]
[105.60443115 89.59400177]
[119.41801453 83.74721527]
[133.23159790 77.90042877]
[147.04518127 72.05364227]
[160.85876465 66.20684814]
[174.67234802 60.36006165]
[188.48593140 54.51327515]
[202.29951477 48.66648483]
[211.99227905 36.16205215]
[226.72877502 38.32646179]
[240.54235840 32.47967529]
[254.35594177 26.63288689]
[268.16952515 20.78609848]
[264.02468872 8.27962780]
[260.82766724 -4.50175285]
[258.59634399 -17.48632240]
[257.34323120 -30.60122490]
[257.07531738 -43.77287292]
[257.79403687 -56.92736435]
[259.49536133 -69.99089813]
[262.16967773 -82.89018250]
[265.80194092 -95.55284882]
[270.37173462 -107.90787506]
[275.85339355 -119.88595581]
[282.21612549 -131.41989136]
[289.42419434 -142.44499207]
[297.43713379 -152.89941406]
[306.20996094 -162.72454834]
[315.69338989 -171.86528015]
[325.83422852 -180.27035522]
[336.57553101 -187.89263916]
[347.85702515 -194.68940735]
[359.61535645 -200.62257385]
[371.78460693 -205.65884399]
[384.29641724 -209.77003479]
[397.08059692 -212.93310547]
[410.06542969 -215.13034058]
[423.17803955 -216.34945679]
[436.34487915 -216.58364868]
[449.49200439 -215.83164978]
[462.54574585 -214.09771729]
[475.43280029 -211.39160156]
[488.08090210 -207.72854614]
[500.41909790 -203.12911987]
[512.37817383 -197.61918640]
[523.89105225 -191.22967529]
[534.89312744 -183.99649048]
[545.32275391 -175.96022034]
[555.12133789 -167.16600037]
[564.23406982 -157.66320801]
[572.60974121 -147.50517273]
[580.20141602 -136.74891663]
[586.96655273 -125.45480347]
[592.86724854 -113.68623352]
[597.87036133 -101.50923920]
[601.94787598 -88.99217224]
[605.07696533 -76.20526123]
[607.24017334 -63.22025681]
[608.42529297 -50.11002350]
[623.42449951 -50.26401901]
[638.42370605 -50.41801453]
[647.03417969 -53.65150833]
[653.73175049 -50.41801453]
[668.73095703 -50.26401901]
[683.73016357 -50.11002350]
[690.02838135 -63.97550964]
[701.42608643 -74.07566833]
[715.94842529 -78.66059113]
[731.07934570 -76.93590546]
[744.19738770 -69.20042419]
[753.02966309 -56.79436493]
[756.04602051 -41.86716080]
[752.72381592 -27.00503159]
[743.63867188 -14.78293419]
[730.36456299 -7.31842089]
[715.20141602 -5.90476322]
[700.77630615 -10.78688622]
[689.58837891 -21.11893272]
[683.57617188 -35.11081314]
[668.57696533 -35.26480865]
[653.57775879 -35.41880798]
[638.57775879 -35.41880798]
[623.57849121 -35.26480865]
[608.57928467 -35.11081314]
[607.16790771 -17.82166862]
[604.05883789 -0.75531298]
[599.28222656 15.92196083]
[592.88458252 32.04763794]
[584.92810059 47.46457291]
[575.49017334 62.02250671]
[564.66265869 75.57954407]
[552.55096436 88.00352478]
[539.27301025 99.17333984]
[524.95806885 108.98006439]
[509.74554443 117.32806396]
[493.78363037 124.13591003]
[477.22775269 129.33715820]
[460.23919678 132.88104248]
[442.98342896 134.73289490]
[425.62857056 134.87458801]
[408.34371948 133.30461121]
[391.29724121 130.03814697]
[374.65530396 125.10690308]
[358.58001709 118.55881500]
[343.22805786 110.45758057]
[328.74905396 100.88201904]
[315.28414917 89.92532349]
[302.96456909 77.69415283]
[291.91046143 64.30758667]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 56]
[2 55]
[3 54]
[4 53]
[6 51]
[7 50]
[8 49]
[9 48]
[10 47]
[11 46]
[12 45]
[13 44]
[14 28]
[15 27]
[16 26]
[18 25]
[19 24]
[31 43]
[32 42]
[33 41]
[102 127]
[103 126]
[104 125]
[106 124]
[107 123]
[108 122]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
