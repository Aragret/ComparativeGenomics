%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:59 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGAGCUUUAAUUUAUUAAUGCAAACAGUACCUAACAAACCCACAGGUCCUAAACUACCAAACxxxxxxxxxxCUAAGCUCGCACUGAUUUUUUACCUGAGUAGGCCUAGAAAUAAACAUGCUAGCUUUUAUUCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[95.25456238 232.45631409]
[94.94250488 217.45956421]
[94.63044739 202.46281433]
[94.31838989 187.46606445]
[94.00633240 172.46929932]
[93.69428253 157.47254944]
[93.38222504 142.47579956]
[93.07016754 127.47904205]
[92.75811005 112.48229218]
[84.76819611 99.78736115]
[71.38191223 93.01924133]
[57.99562454 86.25112915]
[44.60934067 79.48301697]
[31.22305489 72.71489716]
[17.83677101 65.94678497]
[9.87423897 78.67130280]
[0.78758353 90.61901855]
[-9.34789848 101.69093323]
[-20.44821930 111.79529572]
[-32.42139816 120.84837341]
[-45.16821671 128.77514648]
[-58.58304977 135.50994873]
[-72.55474091 140.99694824]
[-86.96749878 145.19068909]
[-101.70191193 148.05642700]
[-116.63587189 149.57040405]
[-131.64562988 149.72007751]
[-146.60681152 148.50419617]
[-161.39543152 145.93284607]
[-175.88896179 142.02734375]
[-189.96728516 136.82003784]
[-203.51374817 130.35409546]
[-216.41609192 122.68306732]
[-228.56742859 113.87054443]
[-239.86701965 103.98954773]
[-250.22128296 93.12194061]
[-259.54437256 81.35779572]
[-267.75906372 68.79459381]
[-274.79727173 55.53643036]
[-280.60067749 41.69317245]
[-285.12118530 27.37953758]
[-288.32135010 12.71412849]
[-290.17465210 -2.18152714]
[-290.66571045 -17.18399620]
[-289.79046631 -32.16896439]
[-287.55621338 -47.01225281]
[-283.98138428 -61.59086990]
[-279.09567261 -75.78400421]
[-272.93954468 -89.47404480]
[-265.56402588 -102.54755402]
[-257.03018188 -114.89620209]
[-247.40878296 -126.41764832]
[-236.77952576 -137.01643372]
[-225.23049927 -146.60472107]
[-212.85740662 -155.10305786]
[-199.76277161 -162.44104004]
[-186.05511475 -168.55784607]
[-171.84800720 -173.40278625]
[-157.25918579 -176.93571472]
[-142.40954590 -179.12736511]
[-127.42213440 -179.95957947]
[-112.42113495 -179.42544556]
[-97.53086090 -177.52938843]
[-82.87470245 -174.28713989]
[-68.57409668 -169.72555542]
[-54.74756241 -163.88243103]
[-41.50965881 -156.80618286]
[-28.97008896 -148.55546570]
[-17.23275948 -139.19863892]
[-6.39493084 -128.81321716]
[3.45358872 -117.48529816]
[12.23118973 -105.30872345]
[19.86513710 -92.38439941]
[26.29217148 -78.81942749]
[31.45903587 -64.72621155]
[35.32291412 -50.22153473]
[37.85179138 -35.42558670]
[39.02470779 -20.46097946]
[38.83194733 -5.45171261]
[37.27510452 9.47783852]
[34.36708450 24.20396042]
[30.13197899 38.60462570]
[24.60488510 52.56050110]
[37.99116898 59.32861710]
[51.37745667 66.09673309]
[64.76374054 72.86484528]
[78.15002441 79.63295746]
[91.53630829 86.40107727]
[119.37854004 80.00216675]
[134.14459229 77.36330414]
[148.91064453 74.72443390]
[156.86859131 70.10675049]
[164.01112366 72.18761444]
[178.82887268 69.85651398]
[193.56668091 67.06418610]
[208.21018982 63.81336212]
[222.85368347 60.56253433]
[237.49719238 57.31171036]
[242.28303528 41.51695633]
[254.29942322 30.34098816]
[270.21636963 26.75209236]
[285.68740845 31.63366699]
[296.53619385 43.56911469]
[311.10891724 40.01435471]
[325.68161011 36.45959091]
[337.15560913 24.74296761]
[352.97006226 29.08295631]
[356.85638428 45.01494980]
[344.81671143 56.14947891]
[329.23638916 51.03229523]
[314.66366577 54.58705521]
[300.09097290 58.14181900]
[297.11865234 71.50687408]
[288.62622070 82.33082581]
[276.23339844 88.45658875]
[262.34402466 88.63204956]
[249.68008423 82.76557922]
[240.74801636 71.95520782]
[226.10450745 75.20603943]
[211.46101379 78.45686340]
[196.81750488 81.70768738]
[194.60986328 84.53501129]
[190.89395142 86.40415192]
[186.14924622 86.60475159]
[181.15997314 84.67427063]
[166.34222412 87.00537109]
[151.54951477 89.49049377]
[136.78346252 92.12935638]
[122.01740265 94.76821899]
[136.24096680 99.53162384]
[151.23036194 98.96766663]
[164.58757019 105.79299164]
[172.91299438 118.27046967]
[174.08770752 133.22439575]
[167.81271362 146.84881592]
[155.68510437 155.67610168]
[140.79150391 157.45959473]
[126.92255402 151.74539185]
[117.60808563 139.98780823]
[115.21854401 125.18151093]
[107.75486755 112.17023468]
[108.06691742 127.16698456]
[108.37897491 142.16374207]
[108.69103241 157.16049194]
[109.00308990 172.15724182]
[109.31514740 187.15400696]
[109.62720490 202.15075684]
[109.93925476 217.14750671]
[110.25131226 232.14425659]
[112.84231567 251.35198975]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 149]
[2 148]
[3 147]
[4 146]
[5 145]
[6 144]
[7 143]
[8 142]
[9 141]
[10 88]
[11 87]
[12 86]
[13 85]
[14 84]
[15 83]
[89 129]
[90 128]
[91 127]
[93 126]
[94 125]
[95 121]
[96 120]
[97 119]
[98 118]
[103 112]
[104 111]
[105 110]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
