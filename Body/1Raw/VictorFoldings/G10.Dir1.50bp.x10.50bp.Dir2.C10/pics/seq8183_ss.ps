%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:29 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGAUGAACGAAAAUCUGUUCGCUUCAUUCAUUGCCCCCACAAUCCUAGGCCUACCCGCCGCAGUxxxxxxxxxxUAAUUCUUCUCACCCUAACAGGUCAACCUCGCUUCCCCACCCUUACUAACAUUAACGAAAAUCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[-40.37372589 208.76919556]
[-46.60261536 200.21572876]
[-54.22129822 214.08174133]
[-69.11497498 214.24780273]
[-81.84464264 222.18225098]
[-94.57430267 230.11671448]
[-107.30397034 238.05117798]
[-120.03363037 245.98564148]
[-127.65231323 259.85165405]
[-142.54598999 260.01770020]
[-155.27566528 267.95214844]
[-168.00532532 275.88662720]
[-180.73498535 283.82107544]
[-193.46464539 291.75555420]
[-206.19432068 299.69000244]
[-218.50576782 308.25903320]
[-230.36740112 317.44061279]
[-242.22903442 326.62219238]
[-254.09066772 335.80380249]
[-255.83848572 351.51113892]
[-268.23315430 361.31661987]
[-283.92114258 359.40283203]
[-293.59506226 346.90518188]
[-291.51550293 331.23831177]
[-278.91629028 321.69708252]
[-263.27227783 323.94216919]
[-251.41062927 314.76055908]
[-239.54899597 305.57897949]
[-227.68736267 296.39739990]
[-241.90599060 291.61923218]
[-247.23020935 277.59594727]
[-239.76545715 264.58529663]
[-224.97206116 262.10427856]
[-213.67109680 271.96777344]
[-214.12876892 286.96032715]
[-201.39910889 279.02587891]
[-188.66944885 271.09143066]
[-175.93978882 263.15695190]
[-163.21011353 255.22250366]
[-150.48045349 247.28804016]
[-143.77227783 233.98954773]
[-127.96809387 233.25596619]
[-115.23842621 225.32151794]
[-102.50876617 217.38705444]
[-89.77909851 209.45259094]
[-77.04943848 201.51812744]
[-70.34126282 188.21965027]
[-54.53707504 187.48606873]
[-67.37244415 159.34631348]
[-75.13076782 129.40634155]
[-77.57670593 98.57437134]
[-74.63606262 67.78564453]
[-66.39804077 37.97410202]
[-53.11252594 10.04404259]
[-35.18252182 -15.15730762]
[-13.15191555 -36.86549377]
[-22.21282768 -48.81956863]
[-31.27374077 -60.77364349]
[-46.96256638 -62.68054581]
[-56.64194870 -75.17395020]
[-54.56927872 -90.84173584]
[-41.97423553 -100.38848877]
[-26.32923698 -98.15028381]
[-16.91618156 -85.45501709]
[-19.31966782 -69.83455658]
[-10.25875473 -57.88048172]
[-1.19784236 -45.92640686]
[6.35802889 -50.88638306]
[14.15647888 -55.45549011]
[22.17730713 -59.62189102]
[30.39973259 -63.37479019]
[38.80245972 -66.70446777]
[47.36371613 -69.60230255]
[56.06132889 -72.06078339]
[64.87276459 -74.07353973]
[73.77519226 -75.63536072]
[82.74555969 -76.74219513]
[91.76062012 -77.39118195]
[100.79702759 -77.58064270]
[109.83137512 -77.31008148]
[118.84024811 -76.58019257]
[127.80031586 -75.39287567]
[136.68836975 -73.75121307]
[145.48138428 -71.65943909]
[154.15657043 -69.12298584]
[162.69148254 -66.14842224]
[171.06398010 -62.74345398]
[179.25238037 -58.91689682]
[187.23548889 -54.67866516]
[194.99261475 -50.03974152]
[202.50364685 -45.01213837]
[209.74916077 -39.60888672]
[216.71037292 -33.84397507]
[223.36923218 -27.73234367]
[229.70851135 -21.28982162]
[235.71179199 -14.53309917]
[247.57342529 -23.71468925]
[259.43505859 -32.89627838]
[268.25924683 -47.37280655]
[284.61282349 -42.90095901]
[284.84286499 -25.94857216]
[268.61663818 -21.03464317]
[256.75500488 -11.85305309]
[244.89337158 -2.67146349]
[250.75106812 6.14034891]
[256.07354736 15.28539181]
[260.84191895 24.73119736]
[265.03927612 34.44422913]
[268.65066528 44.39000320]
[271.66329956 54.53321075]
[274.06649780 64.83783722]
[275.85168457 75.26730347]
[277.01254272 85.78457642]
[277.54495239 96.35231781]
[277.44705200 106.93301392]
[276.71914673 117.48908997]
[275.36380005 127.98307800]
[273.38589478 138.37771606]
[270.79241943 148.63609314]
[267.59255981 158.72181702]
[263.79769897 168.59904480]
[259.42132568 178.23272705]
[254.47894287 187.58866882]
[248.98812866 196.63363647]
[242.96833801 205.33552551]
[236.44097900 213.66343689]
[229.42921448 221.58781433]
[221.95793152 229.08052063]
[214.05366516 236.11495972]
[205.74447632 242.66613770]
[197.05986023 248.71080017]
[188.03065491 254.22750854]
[178.68890381 259.19665527]
[169.06779480 263.60061646]
[159.20146179 267.42373657]
[149.12495422 270.65243530]
[138.87403870 273.27529907]
[128.48510742 275.28295898]
[117.99504089 276.66833496]
[107.44109344 277.42645264]
[96.86072540 277.55468750]
[86.29150391 277.05252075]
[75.77095032 275.92178345]
[65.33641815 274.16647339]
[55.02494812 271.79278564]
[44.87315369 268.80920410]
[34.91707993 265.22631836]
[25.19206810 261.05679321]
[15.73264885 256.31549072]
[6.57240248 251.01921082]
[-2.25614691 245.18678284]
[-10.72165585 238.83888245]
[-18.79406929 231.99806213]
[-26.44472885 224.68861389]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 48]
[4 46]
[5 45]
[6 44]
[7 43]
[8 42]
[10 40]
[11 39]
[12 38]
[13 37]
[14 36]
[15 35]
[16 29]
[17 28]
[18 27]
[19 26]
[56 67]
[57 66]
[58 65]
[96 104]
[97 103]
[98 102]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
