%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:22 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGGAAAUUGACCUGCCCGUGAAGAGGCGGGCAUAACACAGCAAGACGAGAAGACCCUAUGGAGxxxxxxxxxxUCUCCAUAAAAUUCUUCUUAGUAGCUAUUACCUUCUUAUUAUUUGAUCUAGAAAUUGCCCUCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[101.56394196 348.30120850]
[104.14971161 329.09277344]
[104.45769501 314.09594727]
[104.76567078 299.09912109]
[105.07364655 284.10226440]
[105.38162231 269.10543823]
[105.68960571 254.10859680]
[105.99758148 239.11175537]
[106.30555725 224.11492920]
[106.61353302 209.11808777]
[106.92151642 194.12124634]
[104.62063599 179.29876709]
[99.78082275 165.10101318]
[94.94100189 150.90325928]
[90.10118866 136.70550537]
[76.67373657 130.01942444]
[62.42704773 134.71322632]
[57.60190582 149.34280396]
[45.23220444 158.22219849]
[30.18385315 158.11651611]
[18.22641182 149.27583313]
[3.97972012 153.96963501]
[-10.26697254 158.66343689]
[-24.51366425 163.35723877]
[-38.76035690 168.05104065]
[-53.00704956 172.74484253]
[-67.25373840 177.43864441]
[-74.14617157 191.66081238]
[-89.10363770 196.76470947]
[-103.25213623 189.72229004]
[-108.19760895 174.71170044]
[-101.00600433 160.63845825]
[-85.94396973 155.85195923]
[-71.94754028 163.19195557]
[-57.70084763 158.49815369]
[-43.45415878 153.80435181]
[-29.20746422 149.11054993]
[-14.96077251 144.41674805]
[-0.71408057 139.72294617]
[13.53261185 135.02914429]
[17.89334488 120.81218719]
[29.93183517 111.78230286]
[45.15708923 111.57011414]
[57.73324585 120.46653748]
[71.97994232 115.77273560]
[69.08475494 102.83815002]
[71.67531586 90.31060028]
[78.92247009 80.33442688]
[89.23455811 74.45812225]
[100.59240723 73.39780426]
[105.13969421 59.10367203]
[109.68698120 44.80954361]
[114.23427582 30.51541328]
[111.04463196 15.01906490]
[122.27613831 5.23629665]
[103.50061798 -33.81887817]
[104.11643982 -48.80623245]
[104.73226929 -63.79358673]
[105.34809113 -78.78093719]
[105.96392059 -93.76829529]
[106.57974243 -108.75564575]
[93.18952942 -119.04167175]
[88.59223938 -135.11628723]
[94.40255737 -150.61636353]
[108.15534973 -159.52763367]
[108.46332550 -174.52447510]
[108.77130127 -189.52130127]
[109.07928467 -204.51814270]
[109.38726044 -219.51498413]
[109.69523621 -234.51182556]
[110.00321198 -249.50866699]
[96.56907654 -256.84231567]
[88.09151459 -269.58554077]
[86.51860809 -284.80999756]
[92.21179962 -299.01727295]
[103.86283875 -308.94259644]
[118.79439545 -312.30520630]
[133.57531738 -308.33239746]
[144.80903625 -297.93710327]
[149.91415405 -283.50811768]
[147.71752930 -268.36105347]
[138.72395325 -255.97662354]
[125.00005341 -249.20068359]
[124.69207764 -234.20384216]
[124.38410187 -219.20700073]
[124.07611847 -204.21017456]
[123.76814270 -189.21333313]
[123.46016693 -174.21649170]
[123.15219116 -159.21965027]
[134.51763916 -152.15010071]
[140.94349670 -140.28521729]
[140.64947510 -126.68672180]
[133.60536194 -114.92459106]
[121.56709290 -108.13981628]
[120.95127106 -93.15246582]
[120.33544159 -78.16511536]
[119.71961975 -63.17776108]
[119.10379028 -48.19040680]
[118.48796844 -33.20305252]
[124.47309875 -28.68329430]
[136.44335938 -19.64377403]
[142.42848206 -15.12401390]
[156.67517090 -19.81781387]
[170.92187500 -24.51161575]
[179.40124512 -38.13071060]
[195.35197449 -39.84944153]
[206.53800964 -28.34935188]
[204.37838745 -12.45231915]
[190.52978516 -4.35319090]
[175.61567688 -10.26492310]
[161.36897278 -5.57112265]
[147.12228394 -0.87732208]
[136.57026672 9.78358650]
[140.08515930 24.25752258]
[128.52841187 35.06270218]
[123.98111725 49.35683441]
[119.43382263 63.65096283]
[114.88653564 77.94509125]
[126.06382751 89.78201294]
[128.60908508 106.69311523]
[120.69048309 122.77217102]
[104.29894257 131.86569214]
[109.13875580 146.06344604]
[113.97857666 160.26119995]
[118.81838989 174.45895386]
[122.20671844 159.84664917]
[130.07936096 147.07865906]
[141.61369324 137.48913574]
[155.60449219 132.08009338]
[170.58981323 131.41671753]
[185.00382996 135.56835938]
[197.34039307 144.10118103]
[206.31045532 156.12358093]
[210.97668457 170.37933350]
[210.85153198 185.37879944]
[205.94807434 199.55470276]
[196.77865601 211.42575073]
[184.30142212 219.75152588]
[169.82012939 223.66206360]
[154.84796143 222.74874878]
[140.94938660 217.10699463]
[129.57666016 207.32633972]
[121.91835022 194.42922974]
[121.61037445 209.42605591]
[121.30239868 224.42289734]
[120.99441528 239.41973877]
[120.68643951 254.41658020]
[120.37846375 269.41342163]
[120.07048798 284.41024780]
[119.76250458 299.40710449]
[119.45452881 314.40393066]
[119.14655304 329.40075684]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 152]
[3 151]
[4 150]
[5 149]
[6 148]
[7 147]
[8 146]
[9 145]
[10 144]
[11 143]
[12 125]
[13 124]
[14 123]
[15 122]
[16 45]
[17 44]
[21 40]
[22 39]
[23 38]
[24 37]
[25 36]
[26 35]
[27 34]
[50 118]
[51 117]
[52 116]
[53 115]
[55 113]
[56 99]
[57 98]
[58 97]
[59 96]
[60 95]
[61 94]
[65 89]
[66 88]
[67 87]
[68 86]
[69 85]
[70 84]
[71 83]
[102 112]
[103 111]
[104 110]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
