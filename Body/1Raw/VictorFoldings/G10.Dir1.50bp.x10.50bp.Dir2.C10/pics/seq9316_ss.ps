%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:46 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGUCAACACCCUCCUAGCCUUACUACUAAUAAUUAUUACAUUUUGACUACCACAACUCAACGxxxxxxxxxxAGUACUCUUAAAACUAGGCGGCUAUGGUAUAAUACGCCUCACACUCAUUCUCAACCCCCUCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[-28.36968040 308.48199463]
[-36.62197113 321.00796509]
[-37.25123978 339.38140869]
[-53.17900467 346.68252563]
[-61.16892242 359.37744141]
[-69.15883636 372.07238770]
[-77.14875031 384.76730347]
[-85.13867188 397.46224976]
[-93.12858582 410.15716553]
[-101.11849976 422.85211182]
[-109.10842133 435.54702759]
[-109.19274902 451.94595337]
[-123.56894684 459.83627319]
[-137.44801331 451.10107422]
[-136.55235291 434.72640991]
[-121.80334473 427.55712891]
[-113.81343079 414.86218262]
[-105.82351685 402.16726685]
[-97.83360291 389.47232056]
[-89.84368134 376.77740479]
[-81.85376740 364.08245850]
[-73.86385345 351.38754272]
[-65.87393188 338.69259644]
[-68.24703217 326.78985596]
[-61.63975906 316.13327026]
[-49.14793015 312.75567627]
[-40.89564133 300.22970581]
[-51.78520584 292.10614014]
[-62.20740128 283.39105225]
[-72.13013458 274.11126709]
[-81.52285004 264.29537964]
[-90.35663605 253.97360229]
[-98.60428619 243.17770386]
[-106.24040222 231.94094849]
[-113.24147034 220.29792786]
[-119.58594513 208.28450012]
[-125.25427246 195.93763733]
[-130.22901917 183.29536438]
[-134.49484253 170.39662170]
[-138.03863525 157.28112793]
[-140.84947205 143.98924255]
[-142.91868591 130.56190491]
[-144.23992920 117.04046631]
[-144.80911255 103.46656036]
[-144.62449646 89.88198090]
[-143.68664551 76.32855225]
[-141.99844360 62.84801483]
[-139.56509399 49.48187256]
[-136.39408875 36.27128220]
[-132.49519348 23.25692558]
[-127.88041687 10.47886848]
[-122.56395721 -2.02353835]
[-116.56219482 -14.21179962]
[-109.89360046 -26.04838562]
[-102.57871246 -37.49685287]
[-94.64005280 -48.52194214]
[-86.10207367 -59.08971405]
[-76.99105072 -69.16762543]
[-67.33505249 -78.72463989]
[-57.16380310 -87.73133850]
[-46.50862503 -96.15998840]
[-35.40232468 -103.98462677]
[-23.87909889 -111.18116760]
[-11.97443104 -117.72745514]
[0.27502161 -123.60332489]
[12.83154202 -128.79067993]
[25.65646744 -133.27355957]
[38.71030807 -137.03816223]
[51.95286560 -140.07289124]
[65.34336853 -142.36839294]
[78.84059143 -143.91760254]
[92.40295410 -144.71575928]
[105.98872375 -144.76040649]
[119.55604553 -144.05139160]
[133.06315613 -142.59089661]
[146.46844482 -140.38345337]
[159.73066711 -137.43580627]
[172.80895996 -133.75708008]
[185.66307068 -129.35858154]
[198.25340271 -124.25384521]
[210.54121399 -118.45859528]
[222.48863220 -111.99068451]
[234.05891418 -104.87002563]
[245.21638489 -97.11853790]
[255.92672729 -88.76009369]
[266.15695190 -79.82043457]
[275.87554932 -70.32707214]
[285.05258179 -60.30925369]
[293.65982056 -49.79782104]
[301.67077637 -38.82513428]
[309.06072998 -27.42498779]
[315.80697632 -15.63247967]
[321.88870239 -3.48392177]
[327.28720093 8.98327827]
[331.98587036 21.73073196]
[335.97018433 34.71918869]
[350.54290771 31.16442680]
[365.11560059 27.60966492]
[379.68829346 24.05490303]
[394.26101685 20.50014114]
[396.54968262 5.47248697]
[404.41928101 -7.53282642]
[416.66967773 -16.53258514]
[431.43286133 -20.15438843]
[446.45748901 -17.84593964]
[459.45242310 -9.95925999]
[468.43606567 2.30298829]
[472.03845215 17.07090187]
[469.71023560 32.09248352]
[461.80645752 45.07704544]
[449.53240967 54.04454422]
[434.75976562 57.62749481]
[419.74127197 55.27952576]
[406.76712036 47.35868454]
[397.81576538 35.07284164]
[383.24307251 38.62760544]
[368.67034912 42.18236542]
[354.09765625 45.73712921]
[339.52496338 49.29188919]
[342.50683594 66.32585907]
[344.27890015 83.52782440]
[344.83230591 100.81195831]
[344.16427612 118.09204865]
[342.27816772 135.28187561]
[339.18334961 152.29570007]
[334.89532471 169.04861450]
[329.43542480 185.45706177]
[322.83090210 201.43917847]
[315.11471558 216.91523743]
[306.32537842 231.80802917]
[296.50671387 246.04324341]
[285.70770264 259.54989624]
[273.98223877 272.26055908]
[261.38879395 284.11184692]
[247.99023438 295.04464722]
[233.85336304 305.00439453]
[219.04872131 313.94140625]
[203.65016174 321.81109619]
[187.73451233 328.57421875]
[171.38116455 334.19702148]
[154.67172241 338.65145874]
[137.68952942 341.91531372]
[120.51930237 343.97229004]
[103.24671173 344.81213379]
[85.95792389 344.43063354]
[68.73918915 342.82974243]
[51.67641068 340.01739502]
[34.85470963 336.00765991]
[18.35800743 330.82049561]
[2.26860142 324.48184204]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 27]
[2 26]
[4 23]
[5 22]
[6 21]
[7 20]
[8 19]
[9 18]
[10 17]
[11 16]
[96 119]
[97 118]
[98 117]
[99 116]
[100 115]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
