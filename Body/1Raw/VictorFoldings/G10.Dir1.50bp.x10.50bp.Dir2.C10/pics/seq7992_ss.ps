%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:14 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGUAAAUACUACCGUAUGGCCCACCAUAAUUACCCCCAUACUCCUUACACUAUUCCUCAUCACCCxxxxxxxxxxACUAUUUCUGUAUGUCUCCAUCUAUUGAUGAGGGUCUUACUCUUUUAGUAUAAAUAGUACCGUCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[89.84025574 268.62402344]
[89.84025574 253.62403870]
[89.84025574 238.62403870]
[89.84025574 223.62403870]
[89.84025574 208.62403870]
[89.84025574 193.62403870]
[89.84025574 178.62403870]
[89.84025574 163.62403870]
[89.84025574 148.62403870]
[89.84025574 133.62403870]
[79.25700378 124.70936584]
[73.75660706 113.24905396]
[73.51741791 101.66004944]
[60.57735443 109.24652863]
[47.63728714 116.83300781]
[62.06469727 120.93786621]
[70.61716461 133.26081848]
[69.41558075 148.21261597]
[59.00495529 159.01164246]
[44.10717392 160.75982666]
[31.47935677 152.66424561]
[26.84904289 138.39680481]
[32.31714630 124.42780304]
[18.44463730 130.13337708]
[4.57212973 135.83894348]
[-9.30037785 141.54450989]
[-23.17288589 147.25009155]
[-32.75466537 160.55879211]
[-49.04188538 158.64608765]
[-55.27965164 143.47959900]
[-45.05108643 130.66131592]
[-28.87845612 133.37757874]
[-15.00594807 127.67200470]
[-1.13344097 121.96643829]
[12.73906612 116.26086426]
[26.61157417 110.55529785]
[40.05080795 103.89293671]
[52.99087524 96.30645752]
[65.93093872 88.71997833]
[73.51741791 75.77991486]
[73.81755066 60.78291702]
[74.11768341 45.78591919]
[74.41781616 30.78892326]
[55.16508102 12.36772060]
[66.89316559 -18.25609398]
[62.45818329 -32.58546829]
[58.02320099 -46.91484070]
[53.58821869 -61.24421310]
[49.15323257 -75.57358551]
[34.32181931 -73.17041779]
[19.30028152 -72.85484314]
[4.38102484 -74.63301086]
[-10.14554691 -78.47031403]
[-23.99666786 -84.29204559]
[-36.90272141 -91.98489380]
[-48.61249161 -101.39910889]
[-58.89803696 -112.35144043]
[-67.55915070 -124.62870789]
[-74.42724609 -137.99191284]
[-79.36862183 -152.18095398]
[-82.28710938 -166.91963196]
[-83.12588501 -181.92105103]
[-81.86862183 -196.89321899]
[-78.53980255 -211.54466248]
[-73.20422363 -225.59022522]
[-65.96572876 -238.75648499]
[-56.96523285 -250.78715515]
[-46.37792587 -261.44805908]
[-34.40989685 -270.53170776]
[-21.29410362 -277.86123657]
[-7.28585052 -283.29400635]
[7.34218836 -286.72427368]
[22.30527306 -288.08523560]
[37.31214523 -287.35040283]
[52.07068634 -284.53408813]
[66.29362488 -279.69116211]
[79.70410156 -272.91580200]
[92.04107666 -264.33996582]
[103.06440735 -254.13053894]
[112.55953217 -242.48628235]
[120.34160614 -229.63383484]
[126.25917053 -215.82337952]
[130.19702148 -201.32374573]
[132.07850647 -186.41716003]
[131.86701965 -171.39379883]
[129.56666565 -156.54608154]
[125.22222137 -142.16304016]
[118.91825104 -128.52464294]
[110.77746582 -115.89634705]
[100.95833588 -104.52397919]
[89.65197754 -94.62890625]
[77.07849121 -86.40373230]
[63.48260880 -80.00856781]
[67.91758728 -65.67919922]
[72.35257721 -51.34982300]
[76.78755951 -37.02045059]
[81.22254181 -22.69107819]
[88.03910065 -19.56306076]
[94.29534912 -33.19608688]
[107.92827606 -26.93962860]
[101.67222595 -13.30702496]
[108.48878479 -10.17900658]
[122.24435425 -16.16100693]
[135.99992371 -22.14300728]
[149.75549316 -28.12500954]
[159.06906128 -41.62276459]
[175.39129639 -40.03633118]
[181.93127441 -24.99769020]
[171.96122742 -11.97730923]
[155.73748779 -14.36944008]
[141.98191833 -8.38743973]
[128.22634888 -2.40543890]
[114.47078705 3.57656169]
[106.12030792 24.03623772]
[89.41481781 31.08905602]
[89.11468506 46.08605194]
[88.81455231 61.08304977]
[88.51441956 76.08004761]
[107.29446411 71.52116394]
[126.22624969 81.21148682]
[135.02201843 102.69333649]
[149.00592041 108.12019348]
[162.98980713 113.54705048]
[176.97369385 118.97390747]
[192.17453003 113.84415436]
[205.58413696 122.65109253]
[206.91581726 138.63877869]
[195.14801025 149.54283142]
[179.30798340 146.99859619]
[171.54684448 132.95779419]
[157.56295776 127.53093719]
[143.57905579 122.10408783]
[129.59516907 116.67723083]
[123.40644073 120.91393280]
[133.07669067 132.38067627]
[142.74693298 143.84742737]
[152.41717529 155.31417847]
[165.59605408 162.47778320]
[169.38763428 176.99067688]
[161.39677429 189.68499756]
[146.67131042 192.54173279]
[134.51338196 183.75624084]
[132.60313416 168.87855530]
[125.41175079 155.71481323]
[118.22036743 142.55107117]
[111.02898407 129.38732910]
[104.84025574 133.62403870]
[104.84025574 148.62403870]
[104.84025574 163.62403870]
[104.84025574 178.62403870]
[104.84025574 193.62403870]
[104.84025574 208.62403870]
[104.84025574 223.62403870]
[104.84025574 238.62403870]
[104.84025574 253.62403870]
[104.84025574 268.62402344]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 156]
[2 155]
[3 154]
[4 153]
[5 152]
[6 151]
[7 150]
[8 149]
[9 148]
[10 147]
[13 39]
[14 38]
[15 37]
[23 36]
[24 35]
[25 34]
[26 33]
[27 32]
[40 118]
[41 117]
[42 116]
[43 115]
[45 97]
[46 96]
[47 95]
[48 94]
[49 93]
[102 113]
[103 112]
[104 111]
[105 110]
[121 133]
[122 132]
[123 131]
[124 130]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
