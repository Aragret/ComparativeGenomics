%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:59 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCUCCUCACACCCAAUUGGACCAAUCUAUCACCCUAUAGAAGAACUAAUGUUAGUAUAAGUAxxxxxxxxxxUUAGCAGGGAACUACUCCCACCCUGGAGCCUCCGUAGACCUAACCAUCUUCUCCUUACACCCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[92.50000000 464.37585449]
[92.50000000 449.37585449]
[92.50000000 434.37585449]
[92.50000000 419.37585449]
[92.50000000 404.37585449]
[92.50000000 389.37585449]
[92.50000000 374.37585449]
[92.50000000 359.37585449]
[92.50000000 344.37585449]
[92.50000000 329.37585449]
[77.77018738 326.64218140]
[63.78981781 321.24691772]
[51.03553772 313.37243652]
[39.94248962 303.28564453]
[30.88946152 291.32901001]
[24.18593407 277.90884399]
[20.06152153 263.48156738]
[18.65810013 248.53807068]
[20.02492142 233.58717346]
[24.11689758 219.13821411]
[30.79607773 205.68365479]
[39.83630371 193.68235779]
[50.93086243 183.54396057]
[63.70289993 175.61480713]
[77.71820831 170.16619873]
[92.50000000 167.38505554]
[92.50000000 152.38505554]
[92.50000000 137.38505554]
[84.56549072 136.65145874]
[76.64806366 134.19465637]
[69.12777710 129.99829102]
[62.39040375 124.13059998]
[56.80856323 116.74559021]
[52.72268295 108.08016205]
[37.85608292 106.08410645]
[22.98948479 104.08805084]
[8.12288570 102.09198761]
[-6.74371290 100.09593201]
[-19.15310669 109.88278961]
[-34.83819962 107.94542694]
[-44.49330902 95.43325806]
[-42.39022446 79.76952362]
[-29.77667046 70.24723816]
[-14.13604736 72.51581573]
[-4.74765635 85.22933197]
[10.11894226 87.22539520]
[24.98554039 89.22145081]
[39.85213852 91.21750641]
[54.71873856 93.21356201]
[58.19891739 86.56989288]
[50.17165756 73.89854431]
[65.15927124 73.28254700]
[68.63945007 66.63887787]
[58.53401566 55.55374527]
[48.42858124 44.46861267]
[38.32314682 33.38348007]
[22.54018784 28.93036270]
[18.76803017 12.97095013]
[30.88714600 1.92291558]
[46.43042755 7.15153074]
[49.40827942 23.27804375]
[59.51371384 34.36317825]
[69.61914825 45.44831085]
[79.72458649 56.53344727]
[91.54430389 55.28791046]
[102.69481659 57.03804779]
[112.46655273 61.37379074]
[120.31043243 67.72960663]
[130.64134216 56.85429001]
[122.21437073 45.27550507]
[115.95073700 32.40126038]
[112.04355621 18.63134956]
[110.61277008 4.39314222]
[111.70150757 -9.87169743]
[115.27474213 -23.72089577]
[121.22044373 -36.72528839]
[129.35308838 -48.48211670]
[139.41943359 -58.62750626]
[151.10643005 -66.84772491]
[164.05090332 -72.88888550]
[177.85092163 -76.56478882]
[192.07820129 -77.76264954]
[206.29141235 -76.44657898]
[220.04992676 -72.65865326]
[232.92739868 -66.51753998]
[244.52503967 -58.21482468]
[255.29371643 -68.65683746]
[266.06240845 -79.09884644]
[276.83108521 -89.54085541]
[287.59976196 -99.98286438]
[283.21075439 -114.64557648]
[286.14996338 -129.66621399]
[295.74197388 -141.59315491]
[309.78262329 -147.68565369]
[325.04547119 -146.54373169]
[338.02322388 -138.42976379]
[345.73370361 -125.20829010]
[346.40505981 -109.91751099]
[339.88305664 -96.07113647]
[327.66641235 -86.85095978]
[312.56237793 -84.37570953]
[298.04177856 -89.21417999]
[287.27310181 -78.77217102]
[276.50442505 -68.33016205]
[265.73571777 -57.88815308]
[254.96705627 -47.44614410]
[263.60107422 -34.31190109]
[269.53747559 -19.75322342]
[272.55105591 -4.31770706]
[272.52664185 11.41370296]
[269.46343994 26.84858894]
[263.47509766 41.40536499]
[254.78550720 54.53519058]
[243.72047424 65.74266052]
[230.69544983 74.60451508]
[216.19996643 80.78559113]
[200.77920532 84.05152893]
[185.01351929 84.27764893]
[169.49662781 81.45370483]
[154.81312561 75.68433380]
[141.51664734 67.18519592]
[131.18574524 78.06050873]
[138.08438110 101.86322021]
[128.89523315 124.87886810]
[107.50000000 137.38505554]
[107.50000000 152.38505554]
[107.50000000 167.38505554]
[122.28179169 170.16619873]
[136.29710388 175.61480713]
[149.06913757 183.54396057]
[160.16369629 193.68235779]
[169.20391846 205.68365479]
[175.88310242 219.13821411]
[179.97508240 233.58717346]
[181.34190369 248.53807068]
[179.93847656 263.48156738]
[175.81407166 277.90884399]
[169.11053467 291.32901001]
[160.05751038 303.28564453]
[148.96446228 313.37243652]
[136.21018982 321.24691772]
[122.22981262 326.64218140]
[107.50000000 329.37585449]
[107.50000000 344.37585449]
[107.50000000 359.37585449]
[107.50000000 374.37585449]
[107.50000000 389.37585449]
[107.50000000 404.37585449]
[107.50000000 419.37585449]
[107.50000000 434.37585449]
[107.50000000 449.37585449]
[107.50000000 464.37585449]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 152]
[2 151]
[3 150]
[4 149]
[5 148]
[6 147]
[7 146]
[8 145]
[9 144]
[10 143]
[26 127]
[27 126]
[28 125]
[34 49]
[35 48]
[36 47]
[37 46]
[38 45]
[53 64]
[54 63]
[55 62]
[56 61]
[68 122]
[69 121]
[86 106]
[87 105]
[88 104]
[89 103]
[90 102]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
