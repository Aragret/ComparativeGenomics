%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:27 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGACCCCCGCCCAUCCUACCCAGCACACACACACCGCUGCUAACCCCAUACCCCGAACCAACxxxxxxxxxxACACGAUUAACCCAAGUCAAUAGAAGCCGGCGUAAAGAGUGUUUUAGAUCACCCCCUCCCCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[81.66649628 502.16278076]
[81.66649628 487.16278076]
[81.66649628 472.16278076]
[81.66649628 457.16278076]
[81.66649628 442.16278076]
[81.66649628 427.16278076]
[81.66649628 412.16278076]
[81.66649628 397.16278076]
[81.66649628 382.16278076]
[81.66649628 367.16278076]
[67.01212311 364.07327271]
[53.31505585 358.00192261]
[41.17499924 349.21185303]
[31.12402725 338.08532715]
[23.60327911 325.10708618]
[18.94359398 310.84313965]
[17.35096359 295.91625977]
[18.89742088 280.97866821]
[23.51778793 266.68350220]
[31.01242065 253.65638733]
[41.05582809 242.46797180]
[53.21082306 233.60890198]
[66.94752502 227.46841431]
[81.66649628 224.31710815]
[81.66649628 209.31710815]
[81.66649628 194.31710815]
[70.04566193 203.80162048]
[55.10376358 202.48266602]
[45.32412338 191.10908508]
[46.25917053 176.13824463]
[57.37803268 166.06993103]
[72.36792755 166.62046814]
[82.71884918 177.47869873]
[76.62639618 163.88711548]
[86.02171326 151.15766907]
[87.88932800 136.27439880]
[89.75694275 121.39111328]
[91.62454987 106.50783539]
[92.71586609 91.54758453]
[93.02792358 76.55083466]
[85.57939148 62.59268188]
[93.57978821 50.02912903]
[93.89184570 35.03237534]
[94.20390320 20.03562164]
[94.35993958 5.03643274]
[94.35993958 -9.96356773]
[86.62264252 -23.76374054]
[94.35993958 -36.49101257]
[94.35993958 -51.49101257]
[94.35993958 -66.49101257]
[79.45074463 -68.30022430]
[64.86833954 -71.89340210]
[50.82538605 -77.21812439]
[37.52666092 -84.19676208]
[25.16610909 -92.72753143]
[13.92397690 -102.68604279]
[3.96421051 -113.92705536]
[-4.56794786 -126.28665161]
[-11.54807472 -139.58459473]
[-16.87437820 -153.62695312]
[-20.46918488 -168.20895386]
[-22.28007317 -183.11793518]
[-22.28063583 -198.13650513]
[-20.47086143 -213.04563904]
[-16.87714577 -227.62789917]
[-11.55189133 -241.67066956]
[-4.57275963 -254.96913147]
[3.95847464 -267.32934570]
[13.91740036 -278.57110596]
[25.15878677 -288.53045654]
[37.51870346 -297.06216431]
[50.81690216 -304.04177856]
[64.85945892 -309.36755371]
[79.44159698 -312.96182251]
[94.35065460 -314.77215576]
[109.36922455 -314.77215576]
[124.27828217 -312.96182251]
[138.86041260 -309.36755371]
[152.90296936 -304.04177856]
[166.20117188 -297.06216431]
[178.56109619 -288.53045654]
[189.80247498 -278.57110596]
[199.76139832 -267.32934570]
[208.29263306 -254.96913147]
[215.27177429 -241.67066956]
[220.59703064 -227.62789917]
[224.19073486 -213.04563904]
[226.00051880 -198.13650513]
[225.99995422 -183.11793518]
[224.18907166 -168.20895386]
[220.59425354 -153.62695312]
[215.26795959 -139.58459473]
[208.28782654 -126.28665161]
[199.75566101 -113.92705536]
[189.79589844 -102.68604279]
[178.55377197 -92.72753143]
[166.19322205 -84.19676208]
[152.89450073 -77.21812439]
[138.85153198 -71.89340210]
[124.26913452 -68.30022430]
[109.35993958 -66.49101257]
[109.35993958 -51.49101257]
[109.35993958 -36.49101257]
[117.09723663 -23.76374054]
[109.35993958 -9.96356773]
[109.35993958 5.03643274]
[112.52552032 11.76879883]
[109.20065308 20.34767723]
[108.88860321 35.34442902]
[108.57654572 50.34118271]
[116.04739380 63.22666550]
[108.02467346 76.86288452]
[107.71261597 91.85964203]
[120.38286591 83.83065033]
[134.62818909 88.52863312]
[140.03639221 102.51975250]
[132.65452576 115.57762146]
[117.87812805 118.15800476]
[106.50783539 108.37545013]
[104.64022064 123.25872803]
[102.77260590 138.14201355]
[100.90499115 153.02528381]
[106.86386108 167.68142700]
[97.60212708 179.34631348]
[96.66649628 194.31710815]
[96.66649628 209.31710815]
[96.66649628 224.31710815]
[111.38546753 227.46841431]
[125.12217712 233.60890198]
[137.27716064 242.46797180]
[147.32057190 253.65638733]
[154.81521606 266.68350220]
[159.43557739 280.97866821]
[160.98204041 295.91625977]
[159.38940430 310.84313965]
[154.72972107 325.10708618]
[147.20896912 338.08532715]
[137.15798950 349.21185303]
[125.01793671 358.00192261]
[111.32087708 364.07327271]
[96.66649628 367.16278076]
[96.66649628 382.16278076]
[96.66649628 397.16278076]
[96.66649628 412.16278076]
[96.66649628 427.16278076]
[96.66649628 442.16278076]
[96.66649628 457.16278076]
[96.66649628 472.16278076]
[96.66649628 487.16278076]
[96.66649628 502.16278076]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[24 127]
[25 126]
[26 125]
[33 124]
[35 122]
[36 121]
[37 120]
[38 119]
[39 113]
[40 112]
[42 110]
[43 109]
[44 108]
[45 106]
[46 105]
[48 103]
[49 102]
[50 101]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
