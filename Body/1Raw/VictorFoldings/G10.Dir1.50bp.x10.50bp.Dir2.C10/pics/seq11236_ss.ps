%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:47 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGAUCACACACCGCACAAUCCCCUAUCUAGGCCUUCUUACGAGCCAAAACCUGCCCCUACUCxxxxxxxxxxAAAACCCCCUCCCCAUGCUUACAAGCAAGUACAGCAAUCAACCCUCAACUAUCACACAUCCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[88.40840912 103.30001068]
[74.62602997 97.38005066]
[60.84364700 91.46008301]
[47.06126785 85.54012299]
[33.27888489 79.62015533]
[19.49650383 73.70019531]
[5.71412277 67.78023529]
[-8.06825829 61.86026764]
[-21.85063934 55.94030762]
[-35.63302231 50.02034378]
[-42.67465591 63.27458572]
[-50.78677368 75.90206146]
[-59.91395950 87.81650543]
[-69.99386597 98.93653107]
[-80.95763397 109.18618011]
[-92.73037720 118.49542999]
[-105.23165894 126.80069733]
[-118.37609100 134.04524231]
[-132.07388306 140.17956543]
[-146.23146057 145.16177368]
[-160.75212097 148.95783997]
[-175.53666687 151.54182434]
[-190.48408508 152.89607239]
[-205.49229431 153.01135254]
[-220.45875549 151.88684082]
[-235.28123474 149.53024292]
[-249.85848999 145.95767212]
[-264.09091187 141.19349670]
[-277.88131714 135.27027893]
[-291.13546753 128.22848511]
[-303.76284790 120.11622620]
[-315.67718506 110.98889160]
[-326.79708862 100.90885925]
[-337.04663086 89.94496155]
[-346.35574341 78.17211151]
[-354.66085815 65.67073059]
[-361.90524292 52.52621078]
[-368.03939819 38.82834244]
[-373.02145386 24.67070389]
[-376.81732178 10.15000343]
[-379.40112305 -4.63456535]
[-380.75521851 -19.58200645]
[-380.87030029 -34.59021378]
[-379.74560547 -49.55666351]
[-377.38885498 -64.37911987]
[-373.81610107 -78.95632935]
[-369.05175781 -93.18870544]
[-363.12838745 -106.97903442]
[-356.08642578 -120.23310852]
[-347.97399902 -132.86038208]
[-338.84652710 -144.77461243]
[-328.76635742 -155.89440918]
[-317.80233765 -166.14378357]
[-306.02938843 -175.45275879]
[-293.52789307 -183.75772095]
[-280.38330078 -191.00195312]
[-266.68536377 -197.13595581]
[-252.52766418 -202.11782837]
[-238.00691223 -205.91354370]
[-223.22232056 -208.49717712]
[-208.27485657 -209.85107422]
[-193.26664734 -209.96598816]
[-178.30021667 -208.84112549]
[-163.47778320 -206.48417664]
[-148.90061951 -202.91125488]
[-134.66830444 -198.14674377]
[-120.87804413 -192.22320557]
[-107.62405396 -185.18109131]
[-94.99687195 -177.06852722]
[-83.08274841 -167.94090271]
[-71.96308136 -157.86061096]
[-61.71382523 -146.89646912]
[-52.40499496 -135.12339783]
[-44.10017776 -122.62181854]
[-36.85610962 -109.47711945]
[-30.72226906 -95.77911377]
[-25.74056053 -81.62135315]
[-21.94501495 -67.10056305]
[-19.36156082 -52.31592941]
[-18.00784302 -37.36845779]
[-17.89311218 -22.36024666]
[-19.01815224 -7.39382315]
[-21.37527466 7.42857552]
[-24.94837952 22.00569725]
[-29.71305847 36.23796082]
[-15.93067646 42.15792465]
[-2.14829540 48.07788849]
[11.63408566 53.99785233]
[25.41646767 59.91781235]
[39.19884872 65.83777618]
[52.98123169 71.75774384]
[66.76361084 77.67770386]
[80.54598999 83.59766388]
[94.32837677 89.51763153]
[100.48303223 88.17042542]
[106.42116547 90.14717865]
[120.74376678 85.69036865]
[135.06636047 81.23355103]
[149.38896179 76.77673340]
[163.66441345 72.17117310]
[177.89120483 67.41735840]
[192.11798096 62.66353989]
[198.95039368 48.41244888]
[213.88621521 43.24553680]
[228.06427002 50.22824478]
[233.07298279 65.21785736]
[225.94076538 79.32129669]
[210.89903259 84.17124939]
[196.87179565 76.89031982]
[182.64501953 81.64413452]
[168.41822815 86.39794922]
[163.03614807 91.53397369]
[153.84577942 91.09933472]
[139.52317810 95.55614471]
[125.20057678 100.01296234]
[110.87798309 104.46977997]
[125.36754608 108.34953308]
[139.00724792 114.59123230]
[151.41508484 123.02006531]
[162.24362183 133.39999390]
[171.18957520 145.44033813]
[178.00244141 158.80390930]
[182.49142456 173.11645508]
[184.53079224 187.97717285]
[184.06346130 202.96989441]
[181.10250854 217.67474365]
[175.73085022 231.67993164]
[168.09890747 244.59324646]
[158.42044067 256.05303955]
[146.96646118 265.73840332]
[134.05773926 273.37811279]
[120.05578613 278.75820923]
[105.35271454 281.72799683]
[90.36028290 282.20434570]
[75.49833679 280.17391968]
[61.18309402 275.69354248]
[47.81542969 268.88873291]
[35.76971054 259.95001221]
[25.38326836 249.12773132]
[16.94696999 236.72496033]
[10.69707108 223.08901978]
[6.80859661 208.60179138]
[5.39044237 193.66897583]
[6.48232269 178.70877075]
[10.05366039 164.14012146]
[16.00444031 150.37101746]
[24.16801643 137.78706360]
[34.31576920 126.74065399]
[46.16351318 117.54114532]
[59.37946320 110.44616699]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 94]
[2 93]
[3 92]
[4 91]
[5 90]
[6 89]
[7 88]
[8 87]
[9 86]
[10 85]
[96 116]
[97 115]
[98 114]
[99 113]
[100 111]
[101 110]
[102 109]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
