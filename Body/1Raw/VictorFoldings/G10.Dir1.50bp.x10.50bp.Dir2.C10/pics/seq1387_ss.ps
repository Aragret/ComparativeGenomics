%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:19 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCUUAGCCCUAAACCUCAACAGUUAAAUCAACAAAACUGCUCGCCAGAACACUACGAGCCAxxxxxxxxxxUUAGGUCUCCACCCCUGACUCCCCUCAGCCAUAGAAGGCCCCACCCCAGUCUCAGCCCUACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[198.59530640 316.65533447]
[191.68830872 303.34017944]
[184.78131104 290.02502441]
[177.87431335 276.70986938]
[165.14559937 268.97491455]
[165.65930176 253.16204834]
[158.75230408 239.84689331]
[151.84530640 226.53173828]
[144.93830872 213.21658325]
[132.20960999 205.48164368]
[132.72331238 189.66877747]
[125.81631470 176.35362244]
[118.90930939 163.03846741]
[116.21025085 162.07806396]
[113.74245453 159.95581055]
[111.96365356 156.75929260]
[111.28939819 152.74476624]
[112.03411865 148.31678772]
[106.25785065 134.47357178]
[100.48157501 120.63035583]
[76.91692352 108.25473785]
[82.51231384 77.63118744]
[70.81269073 68.24402618]
[59.11306763 58.85686493]
[47.41344452 49.46970367]
[28.55069542 60.76826859]
[6.25867367 62.45814133]
[-14.77353859 53.85369492]
[-29.97406578 36.46960831]
[-35.88117981 13.76471519]
[-50.87387848 13.29667377]
[-65.86657715 12.82863140]
[-80.85926819 12.36058903]
[-88.88169861 25.45777321]
[-102.38556671 32.77494431]
[-117.73841095 32.34382629]
[-130.81037903 24.28038406]
[-138.08518982 10.75364304]
[-137.60595703 -4.59777021]
[-129.50157166 -17.64440346]
[-115.95209503 -24.87677765]
[-100.60226440 -24.34942055]
[-87.58109283 -16.20418739]
[-80.39122772 -2.63210678]
[-65.39852905 -2.16406465]
[-50.40583420 -1.69602263]
[-35.41313934 -1.22798049]
[-29.06600952 -14.81893158]
[-39.04873657 -26.01469803]
[-49.03146362 -37.21046448]
[-59.01419067 -48.40622711]
[-68.99691772 -59.60199356]
[-81.84666443 -61.13098145]
[-89.93050385 -70.71589661]
[-89.30988312 -82.83703613]
[-99.05753326 -94.23806000]
[-114.69083405 -99.19104767]
[-117.95333862 -115.26239014]
[-105.48887634 -125.91926575]
[-90.11980438 -120.19879913]
[-87.65651703 -103.98571014]
[-77.90886688 -92.58469391]
[-61.09016037 -87.67234802]
[-57.80115128 -69.58472443]
[-47.81842422 -58.38895416]
[-37.83569717 -47.19318771]
[-27.85297012 -35.99742508]
[-17.87024498 -24.80165863]
[-9.91178322 -30.08880424]
[-1.15671837 -33.78902817]
[8.08405495 -35.79095459]
[17.48606110 -36.04314804]
[26.72263336 -34.55529022]
[35.47626495 -31.39720535]
[43.44953156 -26.69579315]
[50.37516785 -20.63004494]
[56.02504349 -13.42427731]
[60.21765137 -5.33986616]
[62.82389069 3.33420920]
[63.77099228 12.29168701]
[63.04442596 21.21983528]
[60.68778229 29.81036377]
[56.80060577 37.77008057]
[68.50022888 47.15724182]
[80.19985199 56.54440308]
[91.89947510 65.93156433]
[81.98336792 54.67675400]
[80.10456085 39.79488373]
[86.91231537 26.42871666]
[100.05406952 19.19723129]
[114.98838806 20.59943199]
[126.55438232 30.15075684]
[130.75515747 44.55052948]
[126.13906097 58.82258224]
[114.30094147 68.03501892]
[127.54352570 60.98988342]
[140.78610229 53.94475174]
[154.02870178 46.89961624]
[158.40565491 31.71350861]
[172.27903748 24.14351845]
[187.41801453 28.68078423]
[194.84091187 42.63342667]
[190.14382935 57.72359085]
[176.11349487 64.99855042]
[161.07383728 60.14220047]
[147.83123779 67.18733215]
[134.58865356 74.23246765]
[121.34606934 81.27760315]
[124.94735718 91.19976044]
[124.49329376 101.02348328]
[120.58882141 109.25989532]
[114.32479095 114.85408783]
[120.10106659 128.69731140]
[125.87734222 142.54052734]
[132.22447205 156.13146973]
[139.13146973 169.44662476]
[146.03846741 182.76177979]
[159.26121521 191.44911194]
[158.25346375 206.30958557]
[165.16046143 219.62474060]
[172.06745911 232.93989563]
[178.97445679 246.25505066]
[192.19720459 254.94238281]
[191.18946838 269.80285645]
[198.09646606 283.11801147]
[205.00346375 296.43316650]
[211.91046143 309.74832153]
[226.56283569 306.20269775]
[241.63795471 306.26733398]
[256.25936890 309.93850708]
[269.57702637 317.00274658]
[280.81665039 327.04934692]
[289.32476807 339.49426270]
[294.60675049 353.61389160]
[296.35546875 368.58737183]
[294.46932983 383.54418945]
[289.05792236 397.61471558]
[280.43588257 409.98095703]
[269.10449219 419.92395020]
[255.72251892 426.86560059]
[241.06799316 430.40234375]
[225.99291992 430.32855225]
[211.37373352 426.64852905]
[198.06036377 419.57620239]
[186.82682800 409.52279663]
[178.32626343 397.07272339]
[173.05284119 382.94989014]
[171.31318665 367.97534180]
[173.20841980 353.01971436]
[178.62834167 338.95245361]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 127]
[2 126]
[3 125]
[4 124]
[6 122]
[7 121]
[8 120]
[9 119]
[11 117]
[12 116]
[13 115]
[18 114]
[19 113]
[20 112]
[22 86]
[23 85]
[24 84]
[25 83]
[30 47]
[31 46]
[32 45]
[33 44]
[48 68]
[49 67]
[50 66]
[51 65]
[52 64]
[55 62]
[56 61]
[95 108]
[96 107]
[97 106]
[98 105]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
