%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:05 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGUACCCCCGAUUCCGCUACGACCAACUCAUACACCUCCUAUGAAAAAACUUCCUACCACUCAxxxxxxxxxxAUUCCUAGAACCAGGCGACCUGCGACUCCUUGACGUUGACAAUCGAGUAGUACUCCCGAUUCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[154.93194580 556.77722168]
[154.93194580 541.77722168]
[154.93194580 526.77722168]
[154.93194580 511.77725220]
[154.93194580 496.77725220]
[154.93194580 481.77725220]
[154.93194580 466.77725220]
[154.93194580 451.77725220]
[154.93194580 436.77725220]
[154.93194580 421.77725220]
[153.08862305 406.89093018]
[149.42991638 392.34396362]
[145.77120972 377.79702759]
[136.50218201 373.32012939]
[131.14392090 364.27407837]
[131.69422913 353.55395508]
[138.21264648 344.74975586]
[135.15425110 330.06484985]
[132.09585571 315.37997437]
[129.03746033 300.69506836]
[125.97905731 286.01016235]
[114.29069519 280.50250244]
[107.82902527 269.08868408]
[109.15994263 255.84443665]
[118.01913452 245.65010071]
[108.07494354 234.56126404]
[113.14472961 219.57434082]
[110.38848877 204.82974243]
[107.63224030 190.08514404]
[97.80827332 182.96110535]
[95.41997528 170.65390015]
[102.29209137 159.69134521]
[99.83916473 144.89326477]
[97.38623810 130.09518433]
[72.28816986 122.00040436]
[59.85134125 94.25435638]
[45.26758957 90.74519348]
[30.68384171 87.23602295]
[16.10009193 83.72686005]
[1.51634264 80.21768951]
[-10.95042038 89.65770721]
[-26.56576729 88.82406616]
[-37.95660782 78.11039734]
[-39.74453735 62.57535934]
[-31.08535004 49.55412674]
[-16.06764793 45.19492722]
[-1.78233123 51.55604172]
[5.02550983 65.63394165]
[19.60925865 69.14311218]
[34.19300842 72.65227509]
[48.77675629 76.16144562]
[63.36050797 79.67060852]
[69.10584259 74.84970093]
[55.01049042 69.71929932]
[52.40597916 54.94714355]
[63.89685822 45.30558014]
[77.99209595 50.43629074]
[80.59650421 65.20788574]
[86.34184265 60.38698196]
[85.41842651 45.41543198]
[84.49501038 30.44388199]
[69.61441803 28.12398338]
[55.58059311 22.65901375]
[43.04993439 14.30457783]
[32.60851669 3.45142865]
[24.74470329 -9.39281273]
[19.82630348 -23.62739754]
[18.08335876 -38.58654785]
[19.59738731 -53.57059860]
[24.29757690 -67.87872314]
[31.96409225 -80.84169006]
[42.23835373 -91.85321045]
[54.63982010 -100.39825439]
[68.58844757 -106.07714844]
[83.43183136 -108.62429047]
[98.47573090 -107.92053986]
[113.01650238 -103.99880219]
[126.37405396 -97.04252625]
[137.92362976 -87.37705231]
[147.12503052 -75.45446014]
[153.54789734 -61.83238602]
[156.89181519 -47.14796066]
[157.00039673 -32.08800507]
[153.86853027 -17.35689735]
[147.64273071 -3.64363909]
[138.61418152 8.41037750]
[127.20515442 18.24136162]
[113.94928741 25.38950348]
[99.46656036 29.52046776]
[100.38997650 44.49201965]
[101.31339264 59.46356964]
[110.01713562 64.26965332]
[116.55688477 70.69564056]
[120.70663452 78.00483704]
[133.37815857 69.97783661]
[140.89559937 56.05668640]
[155.78767395 55.78212357]
[168.45919800 47.75512314]
[173.36058044 32.47913361]
[188.41032410 26.92171097]
[202.06353760 35.34603500]
[203.84664917 51.28968811]
[192.39181519 62.52206421]
[176.48619080 60.42663956]
[163.81468201 68.45363617]
[157.20356750 81.80064392]
[141.40515137 82.64935303]
[128.73362732 90.67635345]
[129.74163818 105.29026031]
[123.75604248 118.66018677]
[112.18431854 127.64225769]
[114.63724518 142.44033813]
[117.09017181 157.23841858]
[129.10948181 171.15126038]
[122.37683868 187.32890320]
[125.13307953 202.07348633]
[127.88932800 216.81808472]
[138.03065491 228.96156311]
[132.76373291 242.89385986]
[147.35920715 252.48339844]
[150.47274780 269.32495117]
[140.66395569 282.95178223]
[143.72235107 297.63668823]
[146.78074646 312.32156372]
[149.83914185 327.00646973]
[152.89753723 341.69137573]
[167.00524902 356.03363037]
[160.31816101 374.13830566]
[163.97686768 388.68527222]
[167.63557434 403.23223877]
[173.10342407 389.26431274]
[184.00898743 378.96533203]
[198.26663208 374.30493164]
[213.14968872 376.17431641]
[225.81187439 384.21600342]
[233.83164978 396.89212036]
[235.67526245 411.77838135]
[230.99015808 426.02792358]
[220.67233276 436.91564941]
[206.69497681 442.35931396]
[191.73117065 441.31787109]
[178.64263916 433.99050903]
[169.93194580 421.77725220]
[169.93194580 436.77725220]
[169.93194580 451.77725220]
[169.93194580 466.77725220]
[169.93194580 481.77725220]
[169.93194580 496.77725220]
[169.93194580 511.77725220]
[169.93194580 526.77722168]
[169.93194580 541.77722168]
[169.93194580 556.77722168]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 152]
[2 151]
[3 150]
[4 149]
[5 148]
[6 147]
[7 146]
[8 145]
[9 144]
[10 143]
[11 130]
[12 129]
[13 128]
[17 126]
[18 125]
[19 124]
[20 123]
[21 122]
[25 119]
[27 117]
[28 116]
[29 115]
[32 113]
[33 112]
[34 111]
[36 52]
[37 51]
[38 50]
[39 49]
[40 48]
[59 91]
[60 90]
[61 89]
[94 108]
[95 107]
[97 105]
[98 104]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
