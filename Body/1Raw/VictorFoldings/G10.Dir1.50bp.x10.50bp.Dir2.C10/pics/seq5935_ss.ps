%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:42 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGUAUACUAAUAAUCUUAUAGAAAUUUAGGUUAAAUACAGACCAAGAGCCUUCAAAGCCCUCxxxxxxxxxxUAUCUCCCUAAUUGAAAACAAAAUACUCAAAUGGGCCUGUCCUUGUAGUAUAAACUAAUACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[105.66088104 255.04852295]
[105.66088104 240.04852295]
[105.66088104 225.04852295]
[105.66088104 210.04852295]
[105.66088104 195.04852295]
[105.66088104 180.04852295]
[105.66088104 165.04852295]
[105.66088104 150.04852295]
[105.66088104 135.04852295]
[105.66088104 120.04853058]
[92.80248260 112.32444000]
[79.55989838 119.36957550]
[74.84804535 134.21667480]
[61.31782150 141.17279053]
[47.19242096 136.58926392]
[33.94983673 143.63439941]
[20.70725060 150.67953491]
[7.46466541 157.72467041]
[5.19415903 172.96118164]
[-5.48786020 183.81234741]
[-20.33555603 186.26385498]
[-33.62071228 179.58233643]
[-46.86329651 186.62747192]
[-60.10588074 193.67260742]
[-71.24946594 206.44981384]
[-86.61218262 199.27879333]
[-83.97424316 182.53132629]
[-67.15101624 180.43002319]
[-53.90843201 173.38488770]
[-40.66584396 166.33975220]
[-38.78292847 151.58872986]
[-28.45286560 140.64552307]
[-13.48482037 137.85070801]
[0.41953039 144.48208618]
[13.66211605 137.43695068]
[26.90470123 130.39181519]
[40.14728546 123.34667969]
[44.23959351 109.07122803]
[57.56909943 101.73781586]
[72.51476288 106.12699127]
[85.75734711 99.08185577]
[95.97082520 88.09619141]
[94.47179413 72.34616089]
[106.69324493 63.83232880]
[112.75625610 50.11227417]
[118.81926727 36.39221954]
[124.88228607 22.67216682]
[130.65855408 8.82894993]
[136.14558411 -5.13144016]
[141.63261414 -19.09182930]
[141.01979065 -25.78002357]
[143.53904724 -30.96506119]
[147.64923096 -33.51102829]
[153.71223450 -47.23108292]
[154.32978821 -56.41098022]
[160.04675293 -61.17144012]
[166.39387512 -74.76239014]
[172.74101257 -88.35334015]
[154.82681274 -126.21572876]
[156.07368469 -141.16381836]
[157.32055664 -156.11190796]
[158.56744385 -171.05999756]
[159.81431580 -186.00807190]
[145.39657593 -190.34655762]
[132.19609070 -197.58818054]
[120.78996277 -207.41639709]
[111.67679596 -219.40155029]
[105.25498199 -233.01969910]
[101.80525970 -247.67552185]
[101.47843933 -262.72833252]
[104.28879547 -277.52008057]
[110.11347961 -291.40411377]
[118.69786072 -303.77349854]
[129.66665649 -314.08752441]
[142.54039001 -321.89529419]
[156.75624084 -326.85543823]
[171.69276428 -328.75119019]
[186.69700623 -327.49963379]
[201.11303711 -323.15548706]
[214.31066895 -315.90866089]
[225.71293640 -306.07595825]
[234.82138062 -294.08721924]
[241.23783875 -280.46655273]
[244.68179321 -265.80938721]
[245.00270081 -250.75643921]
[242.18652344 -235.96580505]
[236.35636902 -222.08406067]
[227.76712036 -209.71803284]
[216.79426575 -199.40832520]
[203.91748047 -191.60563660]
[189.69967651 -186.65106201]
[174.76240540 -184.76119995]
[173.51551819 -169.81311035]
[172.26864624 -154.86503601]
[171.02177429 -139.91694641]
[169.77490234 -124.96885681]
[175.62471008 -120.27527618]
[187.32434082 -110.88811493]
[193.17414856 -106.19453430]
[207.49674988 -110.65135193]
[210.19891357 -125.71643829]
[219.60180664 -137.79302979]
[233.54470825 -144.10601807]
[248.82365417 -143.20472717]
[261.92764282 -135.29624939]
[269.84548950 -122.19792175]
[270.75772095 -106.91961670]
[264.45471191 -92.97219849]
[252.38484192 -83.56066895]
[237.32168579 -80.84773254]
[222.72665405 -85.45680237]
[211.95356750 -96.32875061]
[197.63096619 -91.87193298]
[186.33195496 -82.00621033]
[179.98483276 -68.41526031]
[173.63769531 -54.82431030]
[167.43229675 -41.16807175]
[161.36927795 -27.44801712]
[155.59300232 -13.60479832]
[150.10597229 0.35559127]
[144.61894226 14.31598091]
[145.70051575 19.02827644]
[143.78721619 24.46616364]
[138.60234070 28.73517990]
[132.53932190 42.45523453]
[126.47631073 56.17528915]
[120.41329956 69.89533997]
[122.34600067 84.66402435]
[109.69087982 94.15920258]
[121.58941650 85.02548981]
[133.66526794 76.12751007]
[148.43988037 73.53697968]
[162.82258606 77.79580688]
[173.80471802 88.01309204]
[179.08892822 102.05150604]
[177.56983948 116.97438812]
[169.56521606 129.66004944]
[156.74952698 137.45480347]
[141.80366516 138.72808838]
[127.85226440 133.21226501]
[120.66088104 120.04853058]
[120.66088104 135.04852295]
[120.66088104 150.04852295]
[120.66088104 165.04852295]
[120.66088104 180.04852295]
[120.66088104 195.04852295]
[120.66088104 210.04852295]
[120.66088104 225.04852295]
[120.66088104 240.04852295]
[120.66088104 255.04852295]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[11 41]
[12 40]
[15 37]
[16 36]
[17 35]
[18 34]
[22 30]
[23 29]
[24 28]
[42 129]
[44 127]
[45 126]
[46 125]
[47 124]
[48 121]
[49 120]
[50 119]
[53 118]
[54 117]
[56 116]
[57 115]
[58 114]
[59 96]
[60 95]
[61 94]
[62 93]
[63 92]
[99 113]
[100 112]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
