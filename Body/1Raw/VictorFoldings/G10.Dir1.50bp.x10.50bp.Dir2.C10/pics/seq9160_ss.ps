%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:21 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCACCAUUUCCGACGGCAUCUACGGCUCAACAUUUUUUGUAGCCACAGGCUUCCACGGACUxxxxxxxxxxAUUAAACGCCUGGCAGCCGGAAGCCUAUUCGCAGGAUUUCUCAUUACUAACAACAUUUCCCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[112.00258636 282.34701538]
[112.00258636 267.34701538]
[112.00258636 252.34701538]
[112.00258636 237.34701538]
[112.00258636 222.34701538]
[112.00258636 207.34701538]
[112.00258636 192.34701538]
[112.00258636 177.34701538]
[112.00258636 162.34701538]
[112.00258636 147.34701538]
[108.82196808 143.51934814]
[107.39855194 138.25314331]
[108.35528564 132.39495850]
[101.44828796 119.07981110]
[83.82954407 113.38321686]
[77.94452667 94.04228973]
[91.48866272 76.81107330]
[82.22371674 65.01442719]
[72.95877075 53.21779251]
[63.69381714 41.42115021]
[54.42886734 29.62451172]
[39.82006454 23.55051231]
[38.04384232 8.76219749]
[23.43503761 2.68819928]
[21.65881157 -12.10011673]
[12.39386272 -23.89675713]
[13.47936249 -8.93608570]
[4.25250435 2.89037228]
[-10.52286243 5.47658968]
[-23.21818542 -2.51270270]
[-27.27883911 -16.95261574]
[-20.60830116 -30.38779068]
[-6.64853144 -35.88162994]
[-21.29203224 -39.13245773]
[-35.93553543 -42.38328171]
[-50.57903671 -45.63410950]
[-57.09073257 -43.98932648]
[-62.60428619 -45.67219543]
[-65.75807190 -49.33677673]
[-80.25366974 -53.19393539]
[-94.74926758 -57.05109406]
[-109.29426575 -50.28185654]
[-123.59051514 -57.56173325]
[-126.67116547 -73.30622864]
[-116.17300415 -85.43751526]
[-100.14931488 -84.64949799]
[-90.89210510 -71.54669189]
[-76.39650726 -67.68952942]
[-61.90091324 -63.83237076]
[-47.32820892 -60.27761078]
[-32.68470764 -57.02678299]
[-18.04120636 -53.77595901]
[-3.39770579 -50.52513123]
[0.33916816 -48.40493011]
[3.75538445 -45.87522125]
[2.50850987 -60.82330704]
[1.26163530 -75.77139282]
[0.01476075 -90.71948242]
[-1.23211384 -105.66757202]
[-16.16938591 -107.55743408]
[-30.38718796 -112.51200867]
[-43.26398087 -120.31468964]
[-54.23684311 -130.62438965]
[-62.82608795 -142.99041748]
[-68.65623474 -156.87217712]
[-71.47241211 -171.66281128]
[-71.15150452 -186.71574402]
[-67.70755005 -201.37290955]
[-61.29109573 -214.99359131]
[-52.18264389 -226.98233032]
[-40.78038025 -236.81503296]
[-27.58275604 -244.06185913]
[-13.16672039 -248.40599060]
[1.83752179 -249.65756226]
[16.77404976 -247.76181030]
[30.98990059 -242.80165100]
[43.86362076 -234.99389648]
[54.83242798 -224.67987061]
[63.41680908 -212.31047058]
[69.24149323 -198.42643738]
[72.05184937 -183.63468933]
[71.72502136 -168.58189392]
[68.27529907 -153.92607117]
[61.85348892 -140.30792236]
[52.74032211 -128.32276917]
[41.33419037 -118.49454498]
[28.13371658 -111.25291443]
[13.71597290 -106.91444397]
[14.96284771 -91.96635437]
[16.20972252 -77.01827240]
[17.45659637 -62.07018280]
[18.70347214 -47.12209702]
[24.19050217 -33.16170502]
[33.45545197 -21.36506653]
[47.40156555 -16.13484192]
[49.84048080 -0.50275218]
[63.78659058 4.72747135]
[66.22550964 20.35956192]
[75.49045563 32.15620041]
[84.75540924 43.95284271]
[94.02035522 55.74948120]
[103.28530884 67.54611969]
[117.46186066 72.44766998]
[132.03456116 68.89291382]
[140.02795410 55.25908279]
[155.34158325 51.35159683]
[168.89013672 59.48868942]
[172.63549805 74.84276581]
[164.35562134 88.30453491]
[148.96279907 91.88735962]
[135.58932495 83.46561432]
[121.01662445 87.02037811]
[121.86730194 101.49217987]
[114.76344299 112.17281342]
[121.67044830 125.48796844]
[122.37171936 110.50436401]
[126.44801331 96.06886292]
[133.68753052 82.93153381]
[143.71409607 71.77500916]
[156.00671387 63.17898560]
[169.92665100 57.59012985]
[184.75061035 55.29883957]
[199.70834351 56.42416763]
[214.02261353 60.90764999]
[226.94964600 68.51631165]
[237.81774902 78.85481262]
[246.06217957 91.38594055]
[251.25457764 105.45857239]
[253.12513733 120.34148407]
[251.57664490 135.26133728]
[246.68957520 149.44290161]
[238.71786499 162.14927673]
[228.07572937 172.72021484]
[215.31614685 180.60646057]
[201.10209656 185.39823914]
[186.17218018 186.84655762]
[171.30216980 184.87614441]
[157.26469421 179.58941650]
[144.78918457 171.26104736]
[134.52386475 160.32380676]
[127.00258636 147.34701538]
[127.00258636 162.34701538]
[127.00258636 177.34701538]
[127.00258636 192.34701538]
[127.00258636 207.34701538]
[127.00258636 222.34701538]
[127.00258636 237.34701538]
[127.00258636 252.34701538]
[127.00258636 267.34701538]
[127.00258636 282.34701538]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[13 115]
[14 114]
[17 102]
[18 101]
[19 100]
[20 99]
[21 98]
[23 96]
[25 94]
[26 93]
[33 53]
[34 52]
[35 51]
[36 50]
[39 49]
[40 48]
[41 47]
[55 92]
[56 91]
[57 90]
[58 89]
[59 88]
[103 112]
[104 111]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
