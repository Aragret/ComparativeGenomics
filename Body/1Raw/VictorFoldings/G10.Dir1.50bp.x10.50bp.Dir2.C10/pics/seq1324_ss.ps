%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:38 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGGAACACACAAUAGCUAAGACCCAAACUGGGAUUAGAUACCCCACUAUGCUUAGCCCUAAAxxxxxxxxxxGCUUCAACAUCGAAUACGCCGCAGGCCCCUUCGCCCUAUUCUUCAUAGCCGAAUACACAACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[63.05078888 574.91699219]
[65.64179230 555.70922852]
[65.95384216 540.71252441]
[66.26589966 525.71575928]
[66.57795715 510.71899414]
[66.89001465 495.72222900]
[67.20207214 480.72549438]
[67.51412964 465.72872925]
[67.82617950 450.73196411]
[68.13823700 435.73522949]
[68.45029449 420.73846436]
[53.98491669 416.88604736]
[40.85405350 409.67907715]
[29.82307053 399.53268433]
[21.53612518 387.03344727]
[16.47854424 372.90557861]
[14.94840240 357.96881104]
[17.03896713 343.09097290]
[22.63301468 329.13748169]
[31.40940094 316.92105103]
[42.86149597 307.15432739]
[56.32642365 300.40835571]
[71.02342987 297.07916260]
[71.33548737 282.08239746]
[71.64754486 267.08566284]
[71.49150848 252.08647156]
[70.86753082 237.09944153]
[70.24355316 222.11242676]
[69.61957550 207.12541199]
[58.21855164 197.37776184]
[43.31665039 199.09045410]
[28.41474724 200.80314636]
[13.51284504 202.51583862]
[-1.53233504 210.33113098]
[-13.20712948 198.03741455]
[-4.62575865 183.41563416]
[11.80015564 187.61393738]
[26.70205688 185.90124512]
[41.60396194 184.18855286]
[56.50586319 182.47586060]
[60.34022141 170.03962708]
[69.09814453 161.79380798]
[79.83631134 159.20396423]
[82.93463135 144.52743530]
[86.03295135 129.85090637]
[78.97313690 126.02569580]
[72.95102692 120.53368378]
[68.35897827 113.65436554]
[65.51452637 105.75915527]
[64.63896942 97.29149628]
[65.84123230 88.74198151]
[69.10816956 80.61991119]
[74.30198669 73.42298889]
[81.16525269 67.60690308]
[89.33321381 63.55664062]
[98.35306549 61.56137466]
[96.79547882 46.64246368]
[95.23789978 31.72355080]
[91.21142578 23.45074272]
[93.80641937 16.47853661]
[92.55954742 1.53045034]
[91.00196838 -13.38846207]
[89.13435364 -28.27174187]
[87.26673889 -43.15502167]
[72.48237610 -46.50141907]
[59.73583221 -54.70516586]
[50.56631851 -66.77561951]
[46.08109665 -81.25521088]
[46.82177734 -96.39546204]
[52.69892120 -110.36811066]
[63.00283813 -121.48589325]
[76.48927307 -128.40629578]
[91.52967834 -130.29362488]
[106.30785370 -126.91998291]
[119.03925323 -118.69275665]
[128.18650818 -106.60543060]
[132.64503479 -92.11759949]
[131.87646484 -76.97873688]
[125.97357178 -63.01694107]
[115.64918518 -51.91816330]
[102.15002441 -45.02263641]
[104.01763153 -30.13935471]
[105.88524628 -15.25607491]
[109.09117126 -11.63701630]
[110.01531982 -5.94691563]
[107.50763702 0.28357577]
[108.75450897 15.23166275]
[110.15681458 30.16596985]
[111.71439362 45.08488083]
[113.27197266 60.00379562]
[126.44055939 67.18630219]
[139.82684326 60.41819000]
[153.21313477 53.65007401]
[166.59941101 46.88195801]
[169.18640137 31.69598961]
[180.09185791 21.06939697]
[194.98733521 18.92730141]
[208.13061523 25.88375282]
[221.51690674 19.11563873]
[234.90318298 12.34752369]
[246.31018066 -0.19508214]
[261.52038574 7.29397726]
[258.53460693 23.98293877]
[241.67129517 25.73380852]
[228.28501892 32.50192261]
[214.89872742 39.27003860]
[212.70935059 53.97869492]
[202.15385437 64.70462799]
[187.13090515 67.18745422]
[173.36752319 60.26824570]
[159.98124695 67.03636169]
[146.59495544 73.80447388]
[133.20867920 80.57258606]
[136.14607239 105.96456909]
[122.79682922 126.28797150]
[100.70948029 132.94923401]
[97.61115265 147.62576294]
[94.51283264 162.30227661]
[106.15910339 185.89436340]
[84.60659027 206.50143433]
[85.23056793 221.48844910]
[85.85454559 236.47546387]
[86.47852325 251.46249390]
[89.35113525 255.97554016]
[90.08613586 260.66726685]
[88.98307037 264.67785645]
[86.64429474 267.39770508]
[86.33223724 282.39447021]
[86.02017975 297.39120483]
[100.56597900 301.32891846]
[113.73862457 308.62915039]
[124.77452850 318.86380005]
[133.03514099 331.43475342]
[138.04389954 345.60888672]
[139.51374817 360.56079102]
[137.36358643 375.42098999]
[131.72268677 389.32623291]
[122.92296600 401.46990967]
[111.47946167 411.14865112]
[98.06016541 417.80316162]
[83.44705200 421.05053711]
[83.13499451 436.04727173]
[82.82293701 451.04403687]
[82.51087952 466.04077148]
[82.19882202 481.03753662]
[81.88676453 496.03430176]
[81.57471466 511.03103638]
[81.26265717 526.02777100]
[80.95059967 541.02453613]
[80.63854218 556.02130127]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 150]
[3 149]
[4 148]
[5 147]
[6 146]
[7 145]
[8 144]
[9 143]
[10 142]
[11 141]
[23 129]
[24 128]
[25 127]
[26 123]
[27 122]
[28 121]
[29 120]
[30 40]
[31 39]
[32 38]
[33 37]
[43 118]
[44 117]
[45 116]
[56 90]
[57 89]
[58 88]
[60 87]
[61 86]
[62 83]
[63 82]
[64 81]
[91 113]
[92 112]
[93 111]
[94 110]
[98 106]
[99 105]
[100 104]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
