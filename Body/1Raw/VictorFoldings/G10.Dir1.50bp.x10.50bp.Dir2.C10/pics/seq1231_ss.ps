%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:11 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCCCCUCCCCAAUAAAGCUAAAACUCACCUGAGUUGUAAAAAACUCCAGUUGACACAAAAUxxxxxxxxxxCGCAAAACUAACCCCCUAAUAAAAUUAAUUAACCACUCAUUCAUCGACCUCCCCACCCCACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[263.94171143 431.62771606]
[257.87872314 445.34777832]
[251.81570435 459.06784058]
[245.75268555 472.78790283]
[239.68966675 486.50793457]
[233.62666321 500.22799683]
[227.56364441 513.94805908]
[221.50062561 527.66809082]
[220.62884521 544.59960938]
[204.11769104 548.44903564]
[195.84797668 533.64874268]
[207.78057861 521.60510254]
[213.84359741 507.88504028]
[219.90660095 494.16497803]
[225.96961975 480.44494629]
[232.03262329 466.72488403]
[238.09564209 453.00482178]
[244.15866089 439.28475952]
[250.22166443 425.56472778]
[229.41343689 414.24154663]
[209.85423279 400.87469482]
[191.74407959 385.60067749]
[175.26817322 368.57550049]
[160.59507751 349.97308350]
[147.87487793 329.98345947]
[137.23774719 308.81088257]
[128.79257202 286.67169189]
[122.62580109 263.79211426]
[118.80065155 240.40600586]
[117.35637665 216.75238037]
[118.30790710 193.07299805]
[121.64566803 169.60992432]
[127.33571625 146.60299683]
[135.32003784 124.28744507]
[121.66380310 118.08203888]
[108.00756073 111.87663269]
[94.07427216 113.04074860]
[85.78703308 101.77960968]
[72.13079071 95.57420349]
[58.47455215 89.36879730]
[44.75449753 83.30577850]
[30.97211647 77.38581848]
[17.18973541 71.46585846]
[3.40735435 65.54589081]
[-11.17657280 71.63560486]
[-25.76308823 65.55209351]
[-31.69827271 50.90460205]
[-25.46088600 36.38321686]
[-10.75145817 30.60322762]
[3.70316696 36.99379730]
[9.32731724 51.76351166]
[23.10969925 57.68347549]
[36.89207840 63.60343552]
[50.67446136 69.52339935]
[58.10967255 69.27181244]
[64.67996216 75.71255493]
[78.33619690 81.91796112]
[91.99243927 88.12336731]
[105.92572784 86.95925140]
[114.21296692 98.22039032]
[127.86920929 104.42579651]
[141.52545166 110.63120270]
[147.15037537 99.94136047]
[153.31845093 89.55550385]
[160.01327515 79.50121307]
[167.21705627 69.80518341]
[174.91069031 60.49313736]
[183.07371521 51.58980942]
[191.68447876 43.11882782]
[200.72009277 35.10268021]
[210.15658569 27.56264305]
[219.96887207 20.51873207]
[230.13092041 13.98964214]
[240.61572266 7.99270344]
[251.39544678 2.54383159]
[262.44146729 -2.34251285]
[273.72448730 -6.65336227]
[285.21447754 -10.37727833]
[296.88098145 -13.50437927]
[308.69302368 -16.02637100]
[320.61920166 -17.93656349]
[332.62789917 -19.22989082]
[344.68716431 -19.90292931]
[356.76504517 -19.95389557]
[368.82946777 -19.38266373]
[380.84835815 -18.19075584]
[392.78982544 -16.38134575]
[404.62219238 -13.95924091]
[416.31399536 -10.93088341]
[427.83422852 -7.30431795]
[439.15231323 -3.08918071]
[450.23818970 1.70333040]
[461.06240845 7.06048393]
[471.59625244 12.96805096]
[481.81173706 19.41033936]
[491.68179321 26.37023735]
[501.18017578 33.82926178]
[510.28167725 41.76760483]
[518.96215820 50.16418076]
[527.19854736 58.99669266]
[534.96893311 68.24168396]
[542.25280762 77.87460327]
[549.03082275 87.86987305]
[555.28485107 98.20095062]
[560.99847412 108.84040070]
[566.15637207 119.75997925]
[570.74499512 130.93067932]
[574.75207520 142.32284546]
[578.16699219 153.90621948]
[580.98065186 165.65005493]
[583.18566895 177.52317810]
[584.77618408 189.49403381]
[585.74798584 201.53086853]
[586.09844971 213.60171509]
[585.82666016 225.67451477]
[584.93334961 237.71722412]
[583.42095947 249.69786072]
[581.29339600 261.58462524]
[578.55645752 273.34594727]
[575.21728516 284.95059204]
[571.28485107 296.36779785]
[566.76953125 307.56719971]
[561.68334961 318.51910400]
[556.03985596 329.19439697]
[549.85394287 339.56478882]
[543.14215088 349.60269165]
[535.92224121 359.28149414]
[528.21337891 368.57550049]
[520.03607178 377.46002197]
[511.41204834 385.91149902]
[502.36416626 393.90750122]
[492.91650391 401.42675781]
[483.09408569 408.44934082]
[472.92303467 414.95663452]
[462.43035889 420.93133545]
[451.64392090 426.35757446]
[440.59234619 431.22097778]
[429.30499268 435.50863647]
[417.81185913 439.20916748]
[406.14340210 442.31277466]
[394.33065796 444.81115723]
[382.40493774 446.69778442]
[370.39797974 447.96755981]
[358.34158325 448.61718750]
[346.26782227 448.64492798]
[334.20874023 448.05068970]
[322.19631958 446.83612061]
[310.26248169 445.00436401]
[298.43890381 442.56036377]
[286.75698853 439.51058960]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 19]
[2 18]
[3 17]
[4 16]
[5 15]
[6 14]
[7 13]
[8 12]
[34 62]
[35 61]
[36 60]
[38 58]
[39 57]
[40 56]
[41 54]
[42 53]
[43 52]
[44 51]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
