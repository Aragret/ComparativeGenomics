%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:31 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGAAAGCUAAAACUCACCUGAGUUGUAAAAAACUCCAGUUGACACAAAAUAGACUACGAAAGUxxxxxxxxxxUAUACCUUCUGCAUAAUGAAUUAACUAGAAAUAACUUUGCAAGGAGAGCCAAAGCUAAGACCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[89.43481445 483.34024048]
[89.43481445 468.34024048]
[89.43481445 453.34024048]
[89.43481445 438.34024048]
[89.43481445 423.34024048]
[89.43481445 408.34024048]
[89.43481445 393.34024048]
[89.43481445 378.34024048]
[89.43481445 363.34024048]
[89.43481445 348.34024048]
[73.44680786 344.34890747]
[59.00266647 336.39569092]
[47.06604004 325.00524902]
[38.43480682 310.93157959]
[33.68777466 295.10845947]
[33.14585114 278.58718872]
[36.85035324 262.46694946]
[44.55992126 247.82148743]
[55.76622772 235.62779236]
[69.72748566 226.70077515]
[85.51757050 221.63887024]
[84.59415436 206.66732788]
[83.67074585 191.69577026]
[75.16461182 179.46894836]
[82.03768921 165.21864319]
[81.11427307 150.24708557]
[80.19086456 135.27554321]
[68.70019531 125.63372803]
[53.79574585 127.32412720]
[38.89130020 129.01452637]
[23.98685265 130.70492554]
[9.08240509 132.39530945]
[-0.56503910 144.91339111]
[-16.24894333 146.86036682]
[-28.66432762 137.08111572]
[-30.44536400 121.37749481]
[-20.53539276 109.06620026]
[-4.81382799 107.45129395]
[7.39200735 117.49086761]
[22.29645538 115.80046844]
[37.20090103 114.11007690]
[52.10535049 112.41967773]
[67.00979614 110.72927856]
[67.96437836 98.80401611]
[72.77432251 88.83840942]
[60.80406189 79.79889679]
[48.83380127 70.75937653]
[35.52719116 78.16572571]
[20.35798836 79.51300812]
[5.95434904 74.56779480]
[-5.18820810 64.18688965]
[-11.13916779 50.16882706]
[-10.86749077 34.94233322]
[-4.42024708 21.14549065]
[7.08554029 11.16867924]
[21.65642357 6.74044609]
[36.76791000 8.62800789]
[49.80184174 16.50433350]
[58.50001144 29.00480270]
[61.35541153 43.96363449]
[57.87332153 58.78911591]
[69.84358215 67.82863617]
[81.81383514 76.86815643]
[88.68434143 72.83799744]
[96.38403320 70.79822540]
[104.34870911 70.89832306]
[111.99471283 73.13095093]
[121.39856720 61.44474411]
[130.80242920 49.75853729]
[140.20628357 38.07232666]
[149.61013794 26.38611794]
[134.97708130 29.68361473]
[120.61592102 25.35265160]
[110.24571991 14.51480198]
[106.55200195 -0.02330159]
[110.49131775 -14.49678802]
[121.04351044 -25.15752029]
[135.47593689 -29.24473190]
[150.05107117 -25.69997597]
[160.99447632 -15.44122314]
[165.47216797 -1.12513864]
[162.32502747 13.54001808]
[173.91407776 4.01668072]
[185.50312805 -5.50665665]
[187.37438965 -10.51201153]
[190.67282104 -13.92171001]
[194.53419495 -15.45771885]
[198.11143494 -15.23287678]
[210.26477051 -24.02471924]
[222.41810608 -32.81656265]
[234.57144165 -41.60840607]
[246.72477722 -50.40024567]
[249.35952759 -65.75263214]
[261.80996704 -74.49568176]
[276.42990112 -71.88923645]
[288.58322144 -80.68107605]
[300.73657227 -89.47291565]
[306.93994141 -104.65350342]
[323.22277832 -106.60311127]
[332.83471680 -93.31616211]
[325.88778687 -78.46112061]
[309.52841187 -77.31958771]
[297.37506104 -68.52774048]
[285.22174072 -59.73590088]
[283.12243652 -45.03459167]
[270.92245483 -35.94528198]
[255.51661682 -38.24691391]
[243.36328125 -29.45507050]
[231.20994568 -20.66322899]
[219.05661011 -11.87138653]
[206.90327454 -3.07954359]
[195.02645874 6.08239174]
[183.43740845 15.60572910]
[171.84835815 25.12906647]
[161.29634094 35.78997421]
[151.89248657 47.47618484]
[142.48863220 59.16239166]
[133.08477783 70.84860229]
[123.68091583 82.53481293]
[130.70458984 98.49656677]
[127.53558350 116.41655731]
[114.41564941 130.10061646]
[95.16241455 134.35212708]
[96.08582306 149.32366943]
[97.00923920 164.29522705]
[105.58141327 177.59291077]
[98.64229584 190.77235413]
[99.56570435 205.74391174]
[100.48912048 220.71545410]
[113.91326904 222.93167114]
[126.56417847 227.92100525]
[137.87617493 235.45739746]
[147.34411621 245.20092773]
[154.54588318 256.71319580]
[159.16125488 269.47708130]
[160.98611450 282.91983032]
[159.94151306 296.43893433]
[156.07698059 309.42907715]
[149.56834412 321.30911255]
[140.70957947 331.54827881]
[129.89961243 339.68975830]
[117.62434387 345.37106323]
[104.43481445 348.34024048]
[104.43481445 363.34024048]
[104.43481445 378.34024048]
[104.43481445 393.34024048]
[104.43481445 408.34024048]
[104.43481445 423.34024048]
[104.43481445 438.34024048]
[104.43481445 453.34024048]
[104.43481445 468.34024048]
[104.43481445 483.34024048]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 152]
[2 151]
[3 150]
[4 149]
[5 148]
[6 147]
[7 146]
[8 145]
[9 144]
[10 143]
[21 129]
[22 128]
[23 127]
[25 125]
[26 124]
[27 123]
[28 43]
[29 42]
[30 41]
[31 40]
[32 39]
[45 63]
[46 62]
[47 61]
[67 119]
[68 118]
[69 117]
[70 116]
[71 115]
[82 114]
[83 113]
[84 112]
[88 111]
[89 110]
[90 109]
[91 108]
[92 107]
[95 104]
[96 103]
[97 102]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
