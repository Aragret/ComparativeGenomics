%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:43 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGUUAACACCCAUAGUAGGCCUAAAAGCAGCCACCAAUUAAGAAAGCGUUCAAGCUCAACACxxxxxxxxxxACACCCAUAGUAGGCCUAAAAGCAGCCACCAAUUAAGAAAGCGUUCAAGCUCAACACCCACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[93.97097015 385.86810303]
[93.65891266 370.87133789]
[93.34685516 355.87460327]
[93.03479767 340.87783813]
[92.72274017 325.88107300]
[92.41069031 310.88433838]
[92.09863281 295.88757324]
[91.78657532 280.89080811]
[91.47451782 265.89407349]
[76.34239960 263.08963013]
[62.11293030 257.21240234]
[49.40299225 248.51466370]
[38.76410675 237.37101746]
[30.65851402 224.26223755]
[25.43908882 209.75459290]
[23.33397293 194.47529602]
[24.43660355 179.08547974]
[28.70157814 164.25152588]
[35.94651031 150.61624146]
[45.85982895 138.77096558]
[58.01417923 129.22999573]
[71.88484955 122.40817261]
[86.87241364 118.60291290]
[85.37069702 93.79049683]
[76.85960388 81.43891907]
[68.34851837 69.08734894]
[59.83742523 56.73577881]
[51.32633591 44.38420486]
[42.81524658 32.03263092]
[34.30415344 19.68106079]
[25.79306602 7.32948732]
[12.62034893 14.53251362]
[-1.22318077 20.34291077]
[-15.59077549 24.69908333]
[-30.33013153 27.55485535]
[-45.28499985 28.87995529]
[-60.29685593 28.66033173]
[-75.20656586 26.89831734]
[-89.85607147 23.61258888]
[-104.09008026 18.83797646]
[-117.75771332 12.62509441]
[-130.71408081 5.03980207]
[-142.82182312 -3.83749199]
[-153.95262146 -13.91268349]
[-163.98846436 -25.07896996]
[-172.82296753 -37.21797943]
[-180.36247253 -50.20103836]
[-186.52708435 -63.89051437]
[-191.25141907 -78.14128876]
[-194.48541260 -92.80229950]
[-196.19479370 -107.71813202]
[-196.36143494 -122.73067474]
[-194.98355103 -137.68077087]
[-192.07577515 -152.40995789]
[-187.66891479 -166.76208496]
[-181.80969238 -180.58502197]
[-174.56021118 -193.73222351]
[-165.99732971 -206.06434631]
[-156.21180725 -217.45063782]
[-145.30740356 -227.77041626]
[-133.39967346 -236.91427612]
[-120.61486816 -244.78527832]
[-107.08850861 -251.30000305]
[-92.96398163 -256.38937378]
[-78.39101410 -259.99948120]
[-63.52409744 -262.09201050]
[-48.52081299 -262.64477539]
[-33.54021454 -261.65194702]
[-18.74110413 -259.12405396]
[-4.28035641 -255.08784485]
[9.68873310 -249.58616638]
[23.01808548 -242.67730713]
[35.56640244 -234.43449402]
[47.20066452 -224.94514465]
[57.79753876 -214.30981445]
[67.24469757 -202.64125061]
[75.44199371 -190.06315613]
[82.30253601 -176.70887756]
[87.75358582 -162.71994019]
[91.73737335 -148.24467468]
[94.21165466 -133.43650818]
[95.15021515 -118.45240784]
[94.54309845 -103.45122528]
[92.39673615 -88.59197998]
[88.73388672 -74.03218842]
[83.59337616 -59.92618561]
[77.02970123 -46.42351532]
[69.11243439 -33.66730118]
[59.92550659 -21.79277611]
[49.56630325 -10.92581081]
[38.14463806 -1.18160260]
[46.65572739 11.16996956]
[55.16681671 23.52154160]
[63.67790985 35.87311554]
[72.18899536 48.22468567]
[80.70008850 60.57625961]
[89.21118164 72.92783356]
[97.72226715 85.27940369]
[111.17823792 91.90790558]
[126.15795135 91.12805939]
[139.53720093 82.68375397]
[152.64952087 89.74890900]
[167.62922668 88.96906281]
[171.77420044 74.40547943]
[180.42543030 61.97829056]
[192.64448547 53.03549957]
[207.10592651 48.54715729]
[222.24110413 49.00012207]
[236.40826416 54.34526062]
[248.07064819 64.00277710]
[255.96321106 76.92508698]
[259.22982788 91.71047974]
[257.51617432 106.75514984]
[251.00810242 120.42716217]
[240.41159058 131.24346924]
[226.87605286 138.03082275]
[211.86973572 140.05294800]
[197.02040100 137.09053040]
[183.93878174 129.46488953]
[174.04391479 118.00321960]
[168.40907288 103.94877625]
[153.42936707 104.72862244]
[141.12156677 113.11714172]
[126.93779755 106.10777283]
[111.95807648 106.88761902]
[101.85942841 117.97893524]
[116.31375122 120.30912018]
[130.02612305 125.42594910]
[142.46510315 133.12902832]
[153.14897156 143.11776733]
[161.66444397 155.00306702]
[167.68266296 168.32258606]
[170.97183228 182.55860901]
[171.40621948 197.15820312]
[168.97093201 211.55477905]
[163.76239014 225.18992615]
[155.98454285 237.53520203]
[145.94090271 248.11257935]
[134.02264404 256.51287842]
[120.69340515 262.41174316]
[106.47127533 265.58200073]
[106.78332520 280.57876587]
[107.09538269 295.57553101]
[107.40744019 310.57226562]
[107.71949768 325.56903076]
[108.03155518 340.56576538]
[108.34361267 355.56253052]
[108.65566254 370.55929565]
[108.96772003 385.55603027]
[111.55872345 404.76376343]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 149]
[2 148]
[3 147]
[4 146]
[5 145]
[6 144]
[7 143]
[8 142]
[9 141]
[23 126]
[24 98]
[25 97]
[26 96]
[27 95]
[28 94]
[29 93]
[30 92]
[31 91]
[99 125]
[100 124]
[102 122]
[103 121]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
