%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:36 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCUGACAAUUAACAGCCCAAUAUCUACAAUCAACCAACAAGUCAUUAUUACCCUCACUGUCxxxxxxxxxxUCUCUCCUUAAUGACAUUAACACUAUUCUCACCAGACCUCCUAGGCGACCCAGACAAUUACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[92.50000000 308.57287598]
[92.50000000 293.57287598]
[92.50000000 278.57287598]
[92.50000000 263.57287598]
[92.50000000 248.57289124]
[92.50000000 233.57289124]
[92.50000000 218.57289124]
[92.50000000 203.57289124]
[92.50000000 188.57289124]
[92.50000000 173.57289124]
[77.44038391 170.42927551]
[63.35700226 164.23791504]
[50.85931396 155.26673889]
[40.48812866 143.90394592]
[32.69225693 130.64126587]
[27.80905342 116.05261230]
[26.04983139 100.76930237]
[27.49072266 85.45270538]
[32.06937027 70.76562500]
[39.58764267 57.34362411]
[49.72019196 45.76753616]
[62.02854538 36.53829575]
[75.98007202 30.05529213]
[90.97103119 26.59906769]
[90.65897369 11.60231304]
[90.34691620 -3.39444041]
[75.35548401 -4.03422403]
[60.43480301 -5.62353897]
[45.64496994 -8.15598488]
[31.04552841 -11.62136459]
[16.69526863 -16.00572395]
[2.65197730 -21.29141045]
[-11.02780151 -27.45713615]
[-24.28898048 -34.47807693]
[-37.07816696 -42.32596207]
[-49.34385681 -50.96918869]
[-61.03665924 -60.37295532]
[-72.10949707 -70.49939728]
[-82.51778412 -81.30773163]
[-92.21960449 -92.75444794]
[-101.17588806 -104.79344177]
[-109.35058594 -117.37624359]
[-116.71076965 -130.45217896]
[-123.22679901 -143.96861267]
[-128.87245178 -157.87110901]
[-133.62496948 -172.10366821]
[-137.46524048 -186.60900879]
[-140.37779236 -201.32870483]
[-142.35089111 -216.20350647]
[-143.37660217 -231.17349243]
[-143.45077515 -246.17839050]
[-142.57315063 -261.15777588]
[-140.74722290 -276.05136108]
[-137.98036194 -290.79913330]
[-134.28369141 -305.34173584]
[-129.67213440 -319.62060547]
[-124.16422272 -333.57824707]
[-117.78215790 -347.15841675]
[-110.55162811 -360.30651855]
[-102.50174713 -372.96951294]
[-93.66493988 -385.09649658]
[-84.07677460 -396.63858032]
[-73.77587128 -407.54928589]
[-62.80369949 -417.78472900]
[-51.20444489 -427.30364990]
[-39.02481842 -436.06771851]
[-26.31385612 -444.04168701]
[-13.12274551 -451.19342041]
[0.49539867 -457.49411011]
[14.48574066 -462.91836548]
[28.79194641 -467.44442749]
[43.35640717 -471.05398560]
[58.12047958 -473.73254395]
[73.02471161 -475.46929932]
[88.00909424 -476.25729370]
[103.01328278 -476.09332275]
[117.97686005 -474.97805786]
[132.83956909 -472.91595459]
[147.54158020 -469.91537476]
[162.02368164 -465.98837280]
[176.22755432 -461.15078735]
[190.09600830 -455.42202759]
[203.57321167 -448.82522583]
[216.60487366 -441.38693237]
[229.13853455 -433.13708496]
[241.12371826 -424.10891724]
[252.51216125 -414.33877563]
[263.25802612 -403.86599731]
[273.31802368 -392.73275757]
[282.65164185 -380.98388672]
[291.22131348 -368.66668701]
[298.99252319 -355.83078003]
[305.93399048 -342.52783203]
[312.01773071 -328.81140137]
[317.21929932 -314.73672485]
[321.51770020 -300.36047363]
[324.89566040 -285.74057007]
[327.33956909 -270.93585205]
[328.83953857 -256.00592041]
[329.38961792 -241.01092529]
[328.98751831 -226.01123047]
[327.63488770 -211.06723022]
[325.33718872 -196.23912048]
[322.10363770 -181.58659363]
[317.94729614 -167.16864014]
[312.88485718 -153.04333496]
[306.93670654 -139.26754761]
[300.12686157 -125.89675140]
[292.48266602 -112.98478699]
[284.03491211 -100.58364868]
[274.81765747 -88.74326324]
[264.86801147 -77.51130676]
[254.22599792 -66.93302155]
[242.93449402 -57.05099106]
[231.03897095 -47.90501022]
[218.58731079 -39.53190994]
[205.62966919 -31.96540070]
[192.21821594 -25.23595238]
[178.40695190 -19.37066269]
[164.25151062 -14.39314842]
[149.80885315 -10.32345295]
[135.13716125 -7.17796469]
[120.29551697 -4.96934795]
[105.34367371 -3.70649672]
[105.65573120 11.29025745]
[105.96778870 26.28701019]
[120.30007935 28.88652802]
[133.84484863 34.24481201]
[146.07666016 42.15399170]
[156.52096558 52.30724335]
[164.77261353 64.31067657]
[170.51147461 77.69864655]
[173.51493835 91.95176697]
[173.66645813 106.51710510]
[170.96017456 120.82962799]
[165.50106812 134.33407593]
[157.50093079 146.50659180]
[147.27009583 156.87492371]
[135.20549011 165.03686523]
[121.77511597 170.67576599]
[107.50000000 173.57289124]
[107.50000000 188.57289124]
[107.50000000 203.57289124]
[107.50000000 218.57289124]
[107.50000000 233.57289124]
[107.50000000 248.57289124]
[107.50000000 263.57287598]
[107.50000000 278.57287598]
[107.50000000 293.57287598]
[107.50000000 308.57287598]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[24 126]
[25 125]
[26 124]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
