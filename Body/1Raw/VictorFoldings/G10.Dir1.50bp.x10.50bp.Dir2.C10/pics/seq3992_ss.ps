%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:11 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCACACUAGCAGAGACCAACCGAACCCCCUUCGACCUUGCCGAAGGGGAGUCCGAACUAGUxxxxxxxxxxGGGUUUAUCGUGUGAGCACACCAUAUAUUUACAGUAGGAAUAGACGUAGACACACGAGCACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[92.50000000 254.11889648]
[92.50000000 239.11889648]
[92.50000000 224.11889648]
[92.50000000 209.11889648]
[92.50000000 194.11889648]
[92.50000000 179.11889648]
[92.50000000 164.11889648]
[92.50000000 149.11889648]
[92.50000000 134.11889648]
[92.50000000 119.11890411]
[85.59300232 105.80374908]
[73.33063507 97.16462708]
[61.06826401 88.52551270]
[48.80589676 79.88639832]
[36.54352951 71.24728394]
[38.71456909 86.08933258]
[30.98693275 98.94560242]
[16.86131096 103.99206543]
[2.73675036 98.94263458]
[-4.98818493 86.08473969]
[-2.81402373 71.24314880]
[8.27431774 61.14123154]
[23.25409889 60.35538101]
[12.37527370 50.02817535]
[-3.19976664 50.26456833]
[-14.08532715 39.63634109]
[-14.21470737 24.78646278]
[-25.09353256 14.45925808]
[-35.97235870 4.13205290]
[-46.85118103 -6.19515181]
[-59.62854004 -14.05257797]
[-73.75334167 -19.10133362]
[-87.90381622 -12.58966827]
[-102.15645599 -17.91103935]
[-108.27713013 -31.44148445]
[-122.40193176 -36.49024200]
[-136.52673340 -41.53899765]
[-150.65153503 -46.58775330]
[-164.77633667 -51.63650894]
[-178.90113831 -56.68526459]
[-193.02593994 -61.73402023]
[-207.15075684 -66.78277588]
[-220.55560303 -58.73021698]
[-235.99223328 -61.22911453]
[-246.17193604 -73.09957886]
[-246.28814697 -88.73672485]
[-236.28602600 -100.75718689]
[-220.88824463 -103.48526001]
[-207.36517334 -95.63282776]
[-202.10198975 -80.90758514]
[-187.97718811 -75.85882568]
[-173.85238647 -70.81006622]
[-159.72758484 -65.76131439]
[-145.60278320 -60.71255493]
[-131.47798157 -55.66379929]
[-117.35317993 -50.61504364]
[-103.22837067 -45.56628799]
[-89.91768646 -52.15120316]
[-75.52120209 -47.23226166]
[-68.70458984 -33.22613525]
[-54.57978439 -28.17738152]
[-64.01906586 -39.83499146]
[-69.86531067 -53.64880753]
[-71.66225433 -68.54078674]
[-69.26967621 -83.34873962]
[-62.87429047 -96.91705322]
[-52.97519684 -108.18682861]
[-40.34493256 -116.27857971]
[-25.96916962 -120.56080627]
[-10.96980953 -120.69933319]
[3.48258734 -116.68333435]
[16.26014328 -108.82623291]
[26.36568642 -97.74119568]
[33.01057053 -84.29331207]
[35.67622757 -69.53207397]
[34.15462112 -54.60944748]
[28.56450462 -40.69001770]
[19.34213066 -28.86006165]
[7.20722437 -20.04280281]
[-6.89319706 -14.92634773]
[-21.85872459 -13.90998840]
[-36.52397919 -17.07397652]
[-25.64515305 -6.74677229]
[-14.76632786 3.58043265]
[-3.88750219 13.90763760]
[10.94901848 13.26480198]
[22.12880898 23.58308411]
[22.70247841 39.14934921]
[33.58130264 49.47655487]
[45.18264389 58.98491287]
[57.44501495 67.62403107]
[69.70738220 76.26314545]
[81.96974945 84.90225983]
[94.23211670 93.54138184]
[94.61138916 88.37390137]
[97.64765930 83.19470215]
[103.27935791 79.13201141]
[111.01412964 77.24656677]
[119.97193146 78.37866974]
[128.97929382 83.01713562]
[143.97846985 83.17317200]
[153.76005554 74.70117950]
[166.28971863 75.17679596]
[174.83453369 83.79617310]
[188.86940002 76.49324036]
[201.34906006 84.62390137]
[216.34175110 85.09194183]
[231.33444214 85.55998230]
[246.32714844 86.02803040]
[254.98377991 73.25829315]
[269.17901611 67.21685791]
[284.38320923 69.83152771]
[295.74472046 80.26796722]
[299.63818359 95.19594574]
[294.82116699 109.85200500]
[282.83078003 119.55944061]
[267.49313354 121.22065735]
[253.70236206 114.30555725]
[245.85910034 101.02072144]
[230.86640930 100.55268097]
[215.87370300 100.08464050]
[200.88101196 99.61660004]
[187.91851807 106.95300293]
[174.36648560 98.78886414]
[159.41111755 107.91777039]
[143.82243347 98.17235565]
[128.82325745 98.01631927]
[123.49243927 103.29196930]
[136.58065796 110.61989594]
[149.66886902 117.94782257]
[164.32264709 121.15203094]
[174.46282959 132.20538330]
[176.39472961 147.08045959]
[169.41442871 160.35733032]
[156.06529236 167.19842529]
[141.21122742 165.11108398]
[130.26452637 154.85586548]
[127.21357727 140.17073059]
[120.02219391 127.00699615]
[112.83081055 113.84325409]
[107.50000000 119.11890411]
[107.50000000 134.11889648]
[107.50000000 149.11889648]
[107.50000000 164.11889648]
[107.50000000 179.11889648]
[107.50000000 194.11889648]
[107.50000000 209.11889648]
[107.50000000 224.11889648]
[107.50000000 239.11889648]
[107.50000000 254.11889648]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[11 94]
[12 93]
[13 92]
[14 91]
[15 90]
[23 89]
[24 88]
[27 85]
[28 84]
[29 83]
[30 82]
[31 61]
[32 60]
[35 57]
[36 56]
[37 55]
[38 54]
[39 53]
[40 52]
[41 51]
[42 50]
[100 127]
[101 126]
[104 124]
[106 122]
[107 121]
[108 120]
[109 119]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
