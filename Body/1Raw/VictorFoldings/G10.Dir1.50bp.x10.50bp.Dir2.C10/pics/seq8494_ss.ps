%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:22 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCCAACUAUCUAUAAACCUAGCCAUGGCCAUCCCCUUAUGAGCGGGCACAGUGAUUAUAGGxxxxxxxxxxUUGGACAAGUAGCAUCCGUACUAUACUUCACAACAAUCCUAAUCCUAAUACCAACUAUCUCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[84.00194550 261.81176758]
[83.37796783 246.82475281]
[82.75399017 231.83773804]
[82.13001251 216.85072327]
[81.50603485 201.86369324]
[80.88205719 186.87667847]
[80.25807953 171.88966370]
[79.63410187 156.90264893]
[66.24781799 150.13453674]
[53.80838013 158.51667786]
[41.36893845 166.89881897]
[28.92949867 175.28096008]
[16.49005890 183.66311646]
[21.07314110 198.05657959]
[21.41408730 213.15824890]
[17.48525810 227.74389648]
[9.60514736 240.63111877]
[-1.58744073 250.77520752]
[-15.18517303 257.35385132]
[-30.08574104 259.83370972]
[-45.08122635 258.01376343]
[-58.95600510 252.04158020]
[-70.58531952 242.40126038]
[-79.02642822 229.87431335]
[-83.59504700 215.47624207]
[-83.92082214 200.37423706]
[-79.97734070 185.79254150]
[-72.08428955 172.91325378]
[-60.88151550 162.78039551]
[-47.27717972 156.21543884]
[-32.37413025 153.75054932]
[-17.38048172 155.58554077]
[-3.51170683 161.57167053]
[8.10791492 171.22366333]
[20.54735565 162.84152222]
[32.98679733 154.45938110]
[45.42623520 146.07723999]
[57.86567688 137.69509888]
[47.76668930 122.12251282]
[43.23020172 104.06071472]
[44.78259659 85.44029999]
[31.12635422 79.23489380]
[17.47011185 73.02948761]
[3.75005889 66.96647644]
[-10.03232288 61.04651260]
[-26.24512100 63.51171494]
[-36.27372360 50.53638840]
[-29.80156898 35.46843338]
[-13.48665047 33.80847549]
[-4.11235952 47.26412964]
[9.67002201 53.18409348]
[17.10523224 52.93250275]
[23.67551994 59.37324524]
[37.33176041 65.57865143]
[50.98800278 71.78405762]
[60.12973785 59.89168167]
[50.62137604 48.29034042]
[35.90472412 39.87271118]
[39.91941452 23.40096092]
[56.85881805 22.69891930]
[62.22271729 38.78198242]
[71.73107910 50.38332367]
[85.33329010 45.73306656]
[99.44405365 44.67951584]
[113.14300537 47.17797852]
[125.56489563 52.95569229]
[135.95420837 61.53653717]
[147.65383911 52.14937592]
[159.35345459 42.76221466]
[171.05308533 33.37505341]
[165.01162720 19.55709267]
[162.75463867 4.65771532]
[164.43003845 -10.30654049]
[169.91764832 -24.31628036]
[178.83781433 -36.41869736]
[190.57762146 -45.79237366]
[204.33306885 -51.80303574]
[219.16410828 -54.04645538]
[234.05883789 -52.37564468]
[248.00259399 -46.91046906]
[260.04708862 -38.02906036]
[271.74673462 -47.41622162]
[283.44635010 -56.80338287]
[283.37088013 -70.31085968]
[290.99478149 -81.22434998]
[303.33657837 -85.66888428]
[315.79211426 -82.22554016]
[327.68447876 -91.36727142]
[339.57687378 -100.50900269]
[351.46923828 -109.65074158]
[363.36163330 -118.79247284]
[360.18075562 -133.72045898]
[363.80023193 -148.54820251]
[373.50143433 -160.33166504]
[387.35812378 -166.73120117]
[402.61911011 -166.47619629]
[416.25430298 -159.61727905]
[425.55639648 -147.51629639]
[428.67846680 -132.57589722]
[425.00061035 -117.76251984]
[415.25311279 -106.01736450]
[401.37127686 -99.67243958]
[386.11141968 -99.98753357]
[372.50335693 -106.90009308]
[360.61099243 -97.75836182]
[348.71859741 -88.61662292]
[336.82623291 -79.47489166]
[324.93383789 -70.33316040]
[323.48937988 -53.60678864]
[310.15182495 -42.86465073]
[292.83352661 -45.10375977]
[281.13388062 -35.71659851]
[269.43426514 -26.32943726]
[275.49429321 -12.64639568]
[277.80764771 2.15040016]
[276.21075439 17.05323029]
[270.80642700 31.04557991]
[261.95751953 43.17147446]
[250.26235962 52.60078812]
[236.51438904 58.68608475]
[221.64831543 61.00706100]
[206.67662048 59.39956284]
[192.62048340 53.96720123]
[180.44024658 45.07467651]
[168.74063110 54.46183777]
[157.04100037 63.84899902]
[145.34136963 73.23616028]
[149.22825623 80.55743408]
[151.93463135 88.43827057]
[153.38081360 96.68858337]
[153.51773071 105.10708618]
[152.32836914 113.48622131]
[149.82859802 121.61728668]
[146.06710815 129.29559326]
[141.12451172 136.32566833]
[135.11161804 142.52616882]
[128.16706848 147.73461914]
[120.45406342 151.81156921]
[112.15657806 154.64439392]
[103.47496033 156.15028381]
[94.62112427 156.27867126]
[95.24510193 171.26568604]
[95.86907196 186.25270081]
[96.49304962 201.23971558]
[97.11702728 216.22674561]
[97.74100494 231.21376038]
[98.36498260 246.20077515]
[98.98896027 261.18777466]
[105.68894958 276.76168823]
[92.57842255 287.51113892]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 148]
[2 147]
[3 146]
[4 145]
[5 144]
[6 143]
[7 142]
[8 141]
[9 38]
[10 37]
[11 36]
[12 35]
[13 34]
[41 55]
[42 54]
[43 53]
[44 51]
[45 50]
[56 62]
[57 61]
[67 127]
[68 126]
[69 125]
[70 124]
[81 113]
[82 112]
[83 111]
[87 108]
[88 107]
[89 106]
[90 105]
[91 104]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
