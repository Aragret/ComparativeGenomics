%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:08 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCGCGUACACACCGCCCGUCACCCUCCUCAAGUAUACUUCAAAGGACAUUUAACUAAAACCxxxxxxxxxxAACCCCUUAAACACCCCUCCCCACAUCAAGCCCGAAUGAUAUUUCCUAUUCGCCUACACACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[96.54754639 115.57929230]
[86.79989624 126.98030853]
[77.05223846 138.38133240]
[73.96516418 153.89843750]
[59.81355667 158.54399109]
[50.06590271 169.94502258]
[46.97882462 185.46212769]
[32.82721710 190.10768127]
[23.07956505 201.50869751]
[13.33191204 212.90972900]
[3.58425999 224.31074524]
[-6.16339207 235.71176147]
[-9.39113998 244.32765198]
[-16.23436928 247.24584961]
[-26.21709633 258.44161987]
[-29.01714516 274.59994507]
[-44.50189590 279.99945068]
[-56.74196243 269.08557129]
[-53.14581680 253.08557129]
[-37.41286087 248.45887756]
[-27.43013573 237.26312256]
[-17.56441307 225.96411133]
[-7.81676102 214.56309509]
[1.93089116 203.16206360]
[11.67854309 191.76104736]
[21.42619514 180.36003113]
[23.81605530 165.65840149]
[38.66488266 160.19737244]
[48.41253281 148.79634094]
[50.80239487 134.09471130]
[65.65122223 128.63368225]
[75.39887238 117.23265839]
[85.14652252 105.83164215]
[80.83894348 91.46345520]
[66.42672729 87.30556488]
[52.01450729 83.14768219]
[37.60229111 78.98979187]
[28.14762497 90.89263916]
[14.85520363 98.26691437]
[-0.24797277 99.98810577]
[-14.85878086 95.79373932]
[-26.74917793 86.32341766]
[-34.10596466 73.02130890]
[-35.80728531 57.91588211]
[-31.59370041 43.31060410]
[-22.10774994 31.43267632]
[-8.79597473 24.09339333]
[6.31167793 22.41194534]
[20.91139984 26.64473915]
[32.77684021 36.14630508]
[40.09860611 49.46772385]
[41.76017761 64.57757568]
[56.17239380 68.73546600]
[70.58460999 72.89334869]
[84.99682617 77.05123901]
[74.34231567 66.49276733]
[63.68780136 55.93429184]
[51.67804718 46.94731140]
[40.85131836 36.56550217]
[31.36858177 24.94321060]
[23.37081718 12.25322437]
[16.97692490 -1.31579018]
[12.28197002 -15.56210136]
[9.35574818 -30.27390671]
[8.24176693 -45.23248672]
[8.95658684 -60.21544266]
[11.48958015 -75.00003052]
[15.80308914 -89.36643219]
[21.83298492 -103.10107422]
[29.48961830 -115.99975586]
[38.65915680 -127.87071228]
[49.20528030 -138.53744507]
[60.97119141 -147.84138489]
[73.78196716 -155.64421082]
[87.44715118 -161.82989502]
[101.76358032 -166.30650330]
[116.51840210 -169.00746155]
[131.49226379 -169.89260864]
[146.46253967 -168.94880676]
[161.20666504 -166.19007874]
[175.50544739 -161.65742493]
[189.14630127 -155.41825867]
[201.92640686 -147.56530762]
[213.65579224 -138.21534729]
[224.16004944 -127.50738525]
[233.28302002 -115.60060883]
[240.88906860 -102.67202759]
[246.86511230 -88.91387177]
[251.12231445 -74.53068542]
[253.59736633 -59.73628998]
[254.25349426 -44.75064468]
[253.08091736 -29.79654694]
[250.09709167 -15.09631538]
[245.34637451 -0.86850476]
[238.89938354 12.67535973]
[230.85195923 25.33391953]
[221.32377625 36.91897583]
[210.45646667 47.25829697]
[198.41159058 56.19816208]
[185.36824036 63.60565948]
[171.52032471 69.37066650]
[157.07373047 73.40747070]
[142.23165894 75.65709686]
[129.29872131 83.25572205]
[116.36579132 90.85434723]
[131.35848999 90.38630676]
[146.35118103 89.91826630]
[161.34387207 89.45021820]
[169.95674133 76.54293060]
[184.52305603 71.19482422]
[199.44175720 75.46234894]
[208.97631836 87.70456696]
[209.46049500 103.21408844]
[200.70811462 116.02718353]
[186.08464050 121.21696472]
[171.21310425 116.78784180]
[161.81192017 104.44291687]
[146.81922913 104.91095734]
[131.82652283 105.37899780]
[116.83383179 105.84704590]
[130.21554565 112.62417603]
[143.59727478 119.40131378]
[158.58116150 120.09629059]
[173.14231873 123.69808197]
[186.72232056 130.06857300]
[198.80044556 138.96347046]
[208.91348267 150.04167175]
[216.67362976 162.87834167]
[221.78330994 176.98121643]
[224.04655457 191.80949402]
[223.37660217 206.79452515]
[219.79911804 221.36166382]
[213.45130920 234.95228577]
[204.57658386 247.04524231]
[193.51528931 257.17675781]
[180.69158936 264.95831299]
[166.59725952 270.09152222]
[151.77278137 272.37954712]
[136.78665161 271.73458862]
[122.21356201 268.18142700]
[108.61235046 261.85632324]
[96.50460815 253.00178528]
[86.35463715 241.95741272]
[78.55167389 229.14672852]
[73.39494324 215.06098938]
[71.08219910 200.24035645]
[71.70212555 185.25317383]
[75.23095703 170.67416382]
[81.53336334 157.06242371]
[90.37068939 144.93650818]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 33]
[2 32]
[3 31]
[5 29]
[6 28]
[8 26]
[9 25]
[10 24]
[11 23]
[12 22]
[14 21]
[15 20]
[34 55]
[35 54]
[36 53]
[37 52]
[105 120]
[106 119]
[107 118]
[108 117]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
