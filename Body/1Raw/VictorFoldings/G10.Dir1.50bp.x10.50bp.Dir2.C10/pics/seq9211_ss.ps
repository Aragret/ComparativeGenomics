%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:15 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGUUUCACUUUACAUCCAAACAUCACUUUGGCUUCGAAGCCGCCGCCUGAUACUGGCAUUUUxxxxxxxxxxUCUGAGGAGGCUACUCAGUAGACAGUCCCACCCUCACACGAUUCUUUACCUUUCACUUCACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[79.03700256 518.44262695]
[81.62800598 499.23492432]
[81.94005585 484.23815918]
[82.25211334 469.24139404]
[82.56417084 454.24465942]
[82.87622833 439.24789429]
[83.18828583 424.25115967]
[83.50034332 409.25439453]
[83.81239319 394.25762939]
[84.12445068 379.26089478]
[69.83196259 376.25091553]
[56.33741379 370.65151978]
[44.10567474 362.65393066]
[33.55840683 352.53204346]
[25.05954170 340.63299561]
[18.90272522 327.36526489]
[15.30115986 313.18469238]
[14.38023949 298.57876587]
[16.17317009 284.04992676]
[20.61978149 270.09820557]
[27.56854439 257.20407104]
[36.78173065 245.81187439]
[47.94355011 236.31451416]
[60.67097092 229.03990173]
[74.52687073 224.23965454]
[89.03504181 222.08036804]
[89.65901947 207.09333801]
[90.28299713 192.10632324]
[81.31015778 177.05680847]
[91.21720886 161.57034302]
[91.52925873 146.57359314]
[91.84131622 131.57684326]
[82.08981323 129.37345886]
[72.99512482 124.09624481]
[65.53688049 115.96577454]
[60.61325836 105.51552582]
[58.94157791 93.56031036]
[60.97119141 81.13346863]
[46.39848709 77.57871246]
[31.82578659 74.02394867]
[17.25308228 70.46918488]
[1.67276013 75.58637238]
[-10.36693668 64.45183563]
[-6.48059845 48.51984406]
[9.33384228 44.17985916]
[20.80784416 55.89648056]
[35.38054657 59.45124435]
[49.95325089 63.00600433]
[64.52595520 66.56076813]
[72.11585999 53.62271118]
[61.90238190 42.63704681]
[51.68890381 31.65138245]
[36.73661804 35.16205215]
[22.03686905 30.71087837]
[11.54381371 19.49520493]
[8.08002949 4.53199053]
[12.57725811 -10.15373421]
[23.82576752 -20.61158371]
[38.79976654 -24.02844810]
[53.47132111 -19.48520851]
[63.89385986 -8.20397472]
[67.26377106 6.78065968]
[62.67456818 21.43790245]
[72.88804626 32.42356873]
[83.10152435 43.40923309]
[79.40516663 28.87180138]
[75.70880127 14.33437061]
[66.14608002 2.77779603]
[61.36984634 -11.44147301]
[62.01694107 -26.42750931]
[68.00108337 -40.18214798]
[78.52436829 -50.87141037]
[92.18368530 -57.07004929]
[107.15776062 -57.95156097]
[121.45002747 -53.39841461]
[133.15481567 -44.01770401]
[140.71148682 -31.06020355]
[143.11245728 -16.25360489]
[140.03758240 -1.57214642]
[131.89688110 11.02661610]
[119.77371216 19.86380959]
[112.60007477 33.03723145]
[105.42644501 46.21065140]
[118.03757477 38.08911133]
[130.64869690 29.96756744]
[143.25982666 21.84602547]
[155.87095642 13.72448349]
[163.87309265 -2.82681942]
[181.39286804 -3.06691051]
[193.83230591 -11.44905376]
[205.72468567 -20.59078789]
[217.02369690 -30.45651054]
[228.32269287 -40.32223511]
[239.62170410 -50.18795776]
[247.57603455 -65.16009521]
[264.16503906 -61.66132736]
[265.39529419 -44.75207901]
[249.48742676 -38.88895416]
[238.18841553 -29.02322960]
[226.88941956 -19.15750694]
[215.59040833 -9.29178333]
[230.37799072 -6.77630520]
[239.21197510 5.34643126]
[237.07682800 20.19369316]
[225.18481445 29.33588791]
[210.28764343 27.58249855]
[200.84326172 15.92901802]
[202.21444702 0.99038666]
[189.77500916 9.37252998]
[187.13450623 21.21883965]
[176.78363037 28.29543877]
[163.99250793 26.33561134]
[151.38137817 34.45715332]
[138.77024841 42.57869720]
[126.15911865 50.70023727]
[113.54798889 58.82178116]
[133.56706238 77.04455566]
[137.92778015 102.02381134]
[126.85034180 122.91271210]
[106.83807373 131.88890076]
[106.52601624 146.88565063]
[106.21395874 161.88240051]
[114.58374023 171.75157166]
[113.97781372 184.27563477]
[105.27001190 192.73030090]
[104.64603424 207.71731567]
[104.02205658 222.70433044]
[119.01953888 226.30770874]
[133.02803040 232.75190735]
[145.51533508 241.79016113]
[156.00744629 253.07714844]
[164.10647583 266.18222046]
[169.50585938 280.60583496]
[172.00184631 295.79864502]
[171.50125122 311.18237305]
[168.02493286 326.17175293]
[161.70689392 340.19692993]
[152.78913879 352.72509766]
[141.61241150 363.28063965]
[128.60316467 371.46328735]
[114.25727844 376.96322632]
[99.12120819 379.57293701]
[98.80915070 394.56970215]
[98.49709320 409.56643677]
[98.18503571 424.56320190]
[97.87297821 439.55996704]
[97.56092834 454.55670166]
[97.24887085 469.55346680]
[96.93681335 484.55020142]
[96.62475586 499.54696655]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 150]
[3 149]
[4 148]
[5 147]
[6 146]
[7 145]
[8 144]
[9 143]
[10 142]
[26 127]
[27 126]
[28 125]
[30 122]
[31 121]
[32 120]
[38 49]
[39 48]
[40 47]
[41 46]
[50 65]
[51 64]
[52 63]
[83 116]
[84 115]
[85 114]
[86 113]
[87 112]
[89 109]
[90 108]
[91 101]
[92 100]
[93 99]
[94 98]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
