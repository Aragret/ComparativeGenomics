%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:32 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCAGCACACACACACCGCUGCUAACCCCAUACCCCGAACCAACCAAACCCCAAAGACACCCxxxxxxxxxxUCCCCACUAUGCACAUUUUAUUUCUCCAACAUACUCGGAUUCUACCCUAGCAUCACACACCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[148.89381409 73.32109070]
[136.81382751 82.21343994]
[124.73384094 91.10578918]
[112.65385437 99.99813843]
[100.85721588 109.26308441]
[89.35541534 118.89160919]
[77.85360718 128.52014160]
[66.35180664 138.14866638]
[55.05279922 148.01438904]
[43.96148682 158.11303711]
[32.87017059 168.21168518]
[21.77885437 178.31033325]
[10.68753910 188.40898132]
[-0.40377629 198.50762939]
[3.52256489 213.30096436]
[0.11306083 228.22187805]
[-9.84880924 239.84167480]
[-24.07388115 245.49020386]
[-39.29333878 243.86949158]
[-52.00985718 235.35192871]
[-59.30127716 221.89482117]
[-59.49208832 206.59049988]
[-52.53843307 192.95579529]
[-40.03821945 184.12385559]
[-24.86390114 182.12419128]
[-10.50242615 187.41632080]
[0.58888954 177.31767273]
[11.68020535 167.21902466]
[22.77152061 157.12037659]
[33.86283493 147.02172852]
[44.95415115 136.92306519]
[46.06628036 132.21789551]
[50.18562698 128.18524170]
[56.72327805 126.64685822]
[68.22508240 117.01833344]
[79.72688293 107.38980865]
[91.22869110 97.76128387]
[92.11042786 93.93257904]
[94.70610046 90.52550507]
[98.78150177 88.30981445]
[103.76150513 87.91815186]
[115.84149170 79.02579498]
[127.92148590 70.13344574]
[140.00146484 61.24110031]
[131.81745911 48.66542053]
[124.37155151 35.63913345]
[117.68848419 22.20550919]
[111.79045105 8.40916920]
[106.69705963 -5.70405340]
[102.42521667 -20.08727455]
[98.98912048 -34.69271851]
[96.40017700 -49.47186279]
[94.66699219 -64.37561035]
[93.79532623 -79.35446167]
[93.78807068 -94.35865021]
[94.64524841 -109.33833313]
[96.36401367 -124.24375153]
[98.93865967 -139.02539062]
[102.36063385 -153.63415527]
[106.61856079 -168.02149963]
[111.69830322 -182.13964844]
[117.58298492 -195.94168091]
[124.25305939 -209.38175964]
[131.68635559 -222.41525269]
[139.85820007 -234.99884033]
[148.74143982 -247.09072876]
[158.30656433 -258.65075684]
[168.52180481 -269.64050293]
[179.35321045 -280.02346802]
[190.76481628 -289.76519775]
[202.71871948 -298.83328247]
[215.17518616 -307.19760132]
[228.09284973 -314.83041382]
[241.42880249 -321.70632935]
[255.13873291 -327.80249023]
[269.17712402 -333.09866333]
[283.49731445 -337.57730103]
[298.05172729 -341.22344971]
[312.79205322 -344.02502441]
[327.66928101 -345.97274780]
[342.63400269 -347.06011963]
[357.63653564 -347.28353882]
[372.62701416 -346.64224243]
[387.55566406 -345.13839722]
[402.37286377 -342.77697754]
[417.02938843 -339.56579590]
[431.47659302 -335.51559448]
[445.66644287 -330.63977051]
[459.55181885 -324.95452881]
[473.08660889 -318.47879028]
[486.22583008 -311.23400879]
[498.92584229 -303.24429321]
[511.14443970 -294.53619385]
[522.84106445 -285.13861084]
[533.97686768 -275.08273315]
[544.51477051 -264.40203857]
[554.41992188 -253.13195801]
[563.65924072 -241.30995178]
[572.20214844 -228.97528076]
[580.02026367 -216.16891479]
[587.08758545 -202.93339539]
[593.38067627 -189.31271362]
[598.87854004 -175.35208130]
[603.56298828 -161.09791565]
[607.41845703 -146.59751892]
[610.43206787 -131.89909363]
[612.59393311 -117.05146790]
[613.89678955 -102.10395050]
[614.33630371 -87.10620117]
[613.91107178 -72.10803986]
[612.62243652 -57.15928650]
[610.47467041 -42.30960464]
[607.47503662 -27.60832405]
[603.63336182 -13.10427856]
[598.96246338 1.15435028]
[593.47784424 15.12019634]
[587.19775391 28.74686623]
[580.14306641 41.98909378]
[572.33715820 54.80288696]
[563.80596924 67.14568329]
[554.57781982 78.97647858]
[544.68347168 90.25597382]
[534.15570068 100.94669342]
[523.02947998 111.01313019]
[511.34179688 120.42184448]
[499.13146973 129.14157104]
[486.43905640 137.14337158]
[473.30673218 144.40061951]
[459.77813721 150.88925171]
[445.89816284 156.58769226]
[431.71295166 161.47700500]
[417.26959229 165.54095459]
[402.61611938 168.76605225]
[387.80117798 171.14157104]
[372.87399292 172.65962219]
[357.88412476 173.31517029]
[342.88137817 173.10601807]
[327.91561890 172.03288269]
[313.03652954 170.09931946]
[298.29357910 167.31175232]
[283.73568726 163.67944336]
[269.41125488 159.21444702]
[255.36782837 153.93162537]
[241.65209961 147.84849548]
[228.30961609 140.98527527]
[215.38468933 133.36476135]
[202.92027283 125.01228333]
[190.95776367 115.95556641]
[179.53689575 106.22471619]
[168.69561768 95.85204315]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 44]
[2 43]
[3 42]
[4 41]
[5 37]
[6 36]
[7 35]
[8 34]
[9 31]
[10 30]
[11 29]
[12 28]
[13 27]
[14 26]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
