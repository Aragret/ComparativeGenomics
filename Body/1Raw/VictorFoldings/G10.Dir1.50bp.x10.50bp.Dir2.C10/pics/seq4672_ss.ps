%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:42 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGUACCAUCUUUGCAGGCACACUCAUCACAGCGCUAAGCUCGCACUGAUUUUUUACCUGAGUAxxxxxxxxxxGACCUCCUCAUUCUAACCUGAAUCGGAGGACAACCAGUAAGCUACCCUUUUACCAUCAUUGCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[146.59826660 367.28042603]
[146.59826660 352.28042603]
[146.59826660 337.28042603]
[146.59826660 322.28042603]
[146.59826660 307.28042603]
[146.59826660 292.28042603]
[146.59826660 277.28042603]
[146.59826660 262.28042603]
[146.59826660 247.28041077]
[146.59826660 232.28041077]
[143.23899841 217.66140747]
[136.69113159 204.16603088]
[130.14326477 190.67063904]
[117.93924713 190.32243347]
[106.98768616 184.76399231]
[99.41347504 175.00448608]
[96.71568298 162.87464905]
[99.47119904 150.68354797]
[107.21274567 140.77900696]
[101.22444916 127.02617645]
[95.23615265 113.27334595]
[83.84507751 103.51406860]
[69.33645630 99.70621490]
[54.82782745 95.89835358]
[40.31920242 92.09049225]
[32.02024460 103.70447540]
[20.27429771 111.76280212]
[6.50961304 115.31044006]
[-7.60855341 113.93933868]
[-20.37939644 107.83522797]
[-30.27145958 97.75279999]
[-36.10627747 84.92240906]
[-37.19874573 70.90000153]
[-51.62612915 66.79505920]
[-66.05351257 62.69011307]
[-80.48089600 58.58516693]
[-94.17046356 66.01710510]
[-108.74340057 61.64858246]
[-115.74425507 48.55187607]
[-130.17164612 44.44693375]
[-144.59902954 40.34198761]
[-157.44284058 49.26221848]
[-173.01078796 47.78819656]
[-183.95217896 36.61590576]
[-185.10081482 21.02056503]
[-175.91433716 8.36581516]
[-160.73033142 4.62684202]
[-146.71821594 11.56907463]
[-140.49407959 25.91460419]
[-126.06669617 30.01954842]
[-111.63931274 34.12449265]
[-98.79254150 26.67492294]
[-84.10264587 30.63239861]
[-76.37595367 44.15778351]
[-61.94857025 48.26272583]
[-47.52118683 52.36767197]
[-33.09379959 56.47261810]
[-23.46934128 43.91881561]
[-9.73723412 35.98941040]
[6.02289820 33.91926575]
[21.41123581 38.05331039]
[34.07318497 47.78949356]
[42.05965424 61.66625214]
[44.12705994 77.58187103]
[58.63568497 81.38972473]
[73.14431000 85.19758606]
[87.65293884 89.00544739]
[76.74600220 78.70793152]
[63.03531647 72.62376404]
[52.29850769 62.14899063]
[45.87750626 48.59278488]
[44.57484055 33.64945602]
[48.55331802 19.18668556]
[57.31569672 7.01209211]
[69.76681519 -1.35269499]
[84.35047913 -4.86220932]
[99.24396515 -3.07781720]
[112.58582306 3.77746081]
[122.70853424 14.84682369]
[128.34690857 28.74677658]
[128.79624939 43.74004364]
[124.00040436 57.95270538]
[114.55722809 69.60972595]
[109.52856445 83.74169159]
[120.71685791 73.75059509]
[131.90515137 63.75950241]
[143.09344482 53.76840210]
[154.28175354 43.77730560]
[155.80049133 30.92829704]
[165.37686157 22.83727264]
[177.49674988 23.44595909]
[188.88781738 13.68668461]
[200.27890015 3.92740989]
[211.66996765 -5.83186436]
[212.63565063 -21.60662270]
[224.52812195 -32.01549911]
[240.29179382 -30.88309097]
[250.57434082 -18.88123512]
[249.27534485 -3.13042212]
[237.16543579 7.02467155]
[221.42924500 5.55920935]
[210.03816223 15.31848335]
[198.64709473 25.07775879]
[187.25602722 34.83703232]
[182.35913086 51.66157150]
[164.27284241 54.96560287]
[153.08454895 64.95670319]
[141.89625549 74.94779968]
[130.70796204 84.93889618]
[119.51966095 94.92999268]
[115.50865173 103.36195374]
[108.98898315 107.28504944]
[114.97727966 121.03787994]
[120.96557617 134.79071045]
[138.73344421 138.13819885]
[150.86433411 151.33334351]
[152.67741394 169.00814819]
[143.63864136 184.12277222]
[150.18652344 197.61814880]
[156.73439026 211.11354065]
[158.07073975 196.17318726]
[163.16015625 182.06298828]
[171.66845703 169.70948792]
[183.03692627 159.92388916]
[196.51905823 153.34877014]
[211.22953796 150.41587830]
[226.20239258 151.31781006]
[240.45443726 155.99534607]
[253.04978943 164.14131165]
[263.16140747 175.22082520]
[270.12524414 188.50633240]
[273.48410034 203.12542725]
[273.01733398 218.11816406]
[268.75564575 232.50003052]
[260.97885132 245.32662964]
[250.19766235 255.75570679]
[237.11997986 263.10244751]
[222.60458374 266.88436890]
[207.60461426 266.85317993]
[193.10505676 263.01092529]
[180.05802917 255.60990906]
[169.32028198 245.13610840]
[161.59826660 232.28041077]
[161.59826660 247.28041077]
[161.59826660 262.28042603]
[161.59826660 277.28042603]
[161.59826660 292.28042603]
[161.59826660 307.28042603]
[161.59826660 322.28042603]
[161.59826660 337.28042603]
[161.59826660 352.28042603]
[161.59826660 367.28042603]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 152]
[2 151]
[3 150]
[4 149]
[5 148]
[6 147]
[7 146]
[8 145]
[9 144]
[10 143]
[11 120]
[12 119]
[13 118]
[19 114]
[20 113]
[21 112]
[22 67]
[23 66]
[24 65]
[25 64]
[33 57]
[34 56]
[35 55]
[36 54]
[39 51]
[40 50]
[41 49]
[84 110]
[85 109]
[86 108]
[87 107]
[88 106]
[91 104]
[92 103]
[93 102]
[94 101]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
