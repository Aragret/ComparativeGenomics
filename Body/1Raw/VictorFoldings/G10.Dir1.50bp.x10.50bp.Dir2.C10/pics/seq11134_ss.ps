%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:41 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGAAACCCCAUUAAACGCCUGGCAGCCGGAAGCCUAUUCGCAGGAUUUCUCAUUACUAACAACxxxxxxxxxxAUCAAUACUAAACCCCCAUAAAUAGGAGAAGGCUUAGAAGAAAACCCCACAAACCCCAUUACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[80.58622742 427.44299316]
[80.58622742 412.44299316]
[80.58622742 397.44299316]
[80.58622742 382.44299316]
[80.58622742 367.44299316]
[80.58622742 352.44299316]
[80.58622742 337.44299316]
[80.58622742 322.44299316]
[80.58622742 307.44299316]
[80.58622742 292.44299316]
[67.66503143 290.09078979]
[55.32260895 285.59146118]
[43.91311264 279.07287598]
[33.76412582 270.72085571]
[25.16727638 260.77389526]
[18.36983109 249.51637268]
[13.56760502 237.27033997]
[10.89930725 224.38638306]
[10.44254303 211.23355103]
[12.21154881 198.18878174]
[16.15675926 185.62612915]
[22.16619301 173.90602112]
[30.06862831 163.36488342]
[39.63848114 154.30554199]
[50.60224915 146.98847961]
[62.64632416 141.62440491]
[75.42597198 138.36808777]
[88.57517242 137.31396484]
[90.11246490 122.39295197]
[91.64975739 107.47193909]
[78.37336731 114.45316315]
[64.55432129 108.61930084]
[60.29715729 94.23609924]
[68.71472931 81.82061005]
[83.65208435 80.45108795]
[94.18675232 91.12834930]
[97.24514771 76.44345856]
[98.93553925 61.53900909]
[99.24352264 46.54217148]
[99.55149841 31.54533195]
[99.85947418 16.54849434]
[100.16744995 1.55165601]
[100.47543335 -13.44518185]
[91.51684570 -1.41423249]
[78.28091431 5.64339209]
[63.29890823 6.37797117]
[49.43603897 0.64902103]
[39.34347916 -10.44783688]
[34.95136261 -24.79040527]
[37.09964371 -39.63577271]
[45.37748718 -52.14486313]
[58.20180893 -59.92539978]
[73.12004852 -61.48941803]
[87.27919769 -56.53779984]
[97.97142029 -46.01751709]
[103.15207672 -31.93913651]
[107.10868835 -46.40790558]
[111.06529999 -60.87667084]
[115.02191162 -75.34544373]
[101.15808105 -81.12665558]
[88.14738464 -88.63333130]
[76.20346832 -97.74218750]
[65.52246857 -108.30364990]
[56.27976990 -120.14429474]
[48.62714767 -133.06968689]
[42.69026947 -146.86756897]
[38.56661987 -161.31138611]
[36.32391357 -176.16395569]
[35.99897766 -191.18136597]
[37.59714890 -206.11703491]
[41.09218597 -220.72570801]
[46.42668915 -234.76747131]
[53.51307297 -248.01177979]
[62.23496246 -260.24111938]
[72.44914246 -271.25469971]
[83.98787689 -280.87164307]
[96.66170502 -288.93408203]
[110.26249695 -295.30953979]
[124.56692505 -299.89340210]
[139.34008789 -302.61035156]
[154.33941650 -303.41580200]
[169.31858826 -302.29650879]
[184.03163147 -299.27084351]
[198.23695374 -294.38851929]
[211.70129395 -287.72970581]
[224.20353699 -279.40371704]
[235.53840637 -269.54727173]
[245.51976013 -258.32226562]
[253.98370361 -245.91299438]
[260.79125977 -232.52323914]
[265.83059692 -218.37286377]
[269.01901245 -203.69422913]
[270.30413818 -188.72836304]
[269.66488647 -173.72105408]
[267.11169434 -158.91870117]
[262.68655396 -144.56437683]
[256.46209717 -130.89381409]
[248.54055786 -118.13146973]
[239.05198669 -106.48692322]
[228.15220642 -96.15139771]
[216.02020264 -87.29459381]
[202.85519409 -80.06196594]
[188.87336731 -74.57227325]
[174.30430603 -70.91565704]
[159.38725281 -69.15216827]
[144.36717224 -69.31076050]
[129.49067688 -71.38883209]
[125.53406525 -56.92006302]
[121.57746124 -42.45129395]
[117.62084961 -27.98252678]
[115.47226715 -13.13720417]
[115.16429138 1.85963356]
[114.85631561 16.85647202]
[114.54833221 31.85330963]
[114.24035645 46.85014725]
[113.93238068 61.84698486]
[123.91342163 50.64971924]
[138.32379150 46.48546219]
[152.73905945 50.63277817]
[162.73326111 61.81830978]
[165.23783875 76.60773468]
[159.48382568 90.46022034]
[147.23788452 99.12260437]
[132.25991821 99.93525696]
[119.14863586 92.64866638]
[111.93003845 79.50185394]
[108.87164307 94.18675232]
[106.57077026 109.00923157]
[105.03347778 123.93024445]
[103.49618530 138.85125732]
[119.70545197 144.04591370]
[134.39462280 152.63348389]
[146.86396790 164.20182800]
[156.52015686 178.19689941]
[162.90454102 193.94927979]
[165.71482849 210.70616150]
[164.81953430 227.66737366]
[160.26399231 244.02357483]
[152.26818848 258.99484253]
[141.21604919 271.86788940]
[127.63706207 282.03005981]
[112.18087006 288.99847412]
[95.58622742 292.44299316]
[95.58622742 307.44299316]
[95.58622742 322.44299316]
[95.58622742 337.44299316]
[95.58622742 352.44299316]
[95.58622742 367.44299316]
[95.58622742 382.44299316]
[95.58622742 397.44299316]
[95.58622742 412.44299316]
[95.58622742 427.44299316]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 152]
[2 151]
[3 150]
[4 149]
[5 148]
[6 147]
[7 146]
[8 145]
[9 144]
[10 143]
[28 130]
[29 129]
[30 128]
[36 127]
[37 126]
[38 116]
[39 115]
[40 114]
[41 113]
[42 112]
[43 111]
[56 110]
[57 109]
[58 108]
[59 107]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
