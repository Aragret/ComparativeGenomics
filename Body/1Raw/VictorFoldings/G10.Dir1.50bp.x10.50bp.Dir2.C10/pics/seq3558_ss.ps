%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:23 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCUUCUACUAUGAACCCCCCUCCCCAUACCCAACCCCCUGGUCAACCUCAACCUAGGCCUCxxxxxxxxxxACAUAAUUUGAAUCAACACAACCACCCACAGCCUAAUUAUUAGCAUCAUCCCUCUACUAUCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[-22.96846199 249.18029785]
[-32.95118713 260.37606812]
[-42.93391418 271.57183838]
[-52.91664124 282.76760864]
[-62.78236389 294.06658936]
[-72.53001404 305.46762085]
[-82.27767181 316.86865234]
[-92.02532196 328.26965332]
[-101.77297211 339.67068481]
[-111.52062225 351.07171631]
[-114.74837494 359.68759155]
[-121.59160614 362.60577393]
[-131.57432556 373.80154419]
[-141.55705261 384.99731445]
[-140.40321350 400.75942993]
[-150.79589844 412.66604614]
[-166.56932068 413.65319824]
[-178.36540222 403.13519287]
[-179.18571472 387.35220337]
[-168.54359436 375.66799927]
[-152.75282288 375.01458740]
[-142.77009583 363.81881714]
[-132.78736877 352.62304688]
[-122.92164612 341.32406616]
[-113.17399597 329.92303467]
[-103.42633820 318.52200317]
[-93.67868805 307.12100220]
[-83.93103790 295.71997070]
[-74.18338776 284.31893921]
[-72.21445465 277.14477539]
[-64.11240387 272.78488159]
[-54.12968063 261.58911133]
[-44.14695358 250.39334106]
[-34.16422653 239.19757080]
[-50.71832275 221.07844543]
[-64.84349060 201.00805664]
[-76.31208038 179.30986023]
[-84.93928528 156.33351135]
[-90.58605957 132.44932556]
[-93.16139984 108.04218292]
[-92.62380981 83.50543976]
[-88.98195648 59.23451996]
[-82.29451752 35.62056351]
[-72.66928101 13.04412651]
[-60.26134872 -8.13095474]
[-45.27069855 -27.56342888]
[-56.14952087 -37.89063263]
[-67.02835083 -48.21783829]
[-78.01401520 -58.43132019]
[-89.10532379 -68.52996826]
[-100.19664001 -78.62861633]
[-115.36445618 -75.35493469]
[-129.54606628 -81.65267944]
[-137.28836060 -95.10022736]
[-135.61425781 -110.52672577]
[-125.16748810 -122.00038147]
[-109.96504974 -125.10932922]
[-95.85259247 -118.65811920]
[-88.25663757 -105.12736511]
[-90.09799194 -89.71993256]
[-79.00667572 -79.62128448]
[-67.91535950 -69.52263641]
[-60.80610275 -67.33081055]
[-56.70114136 -59.09666443]
[-45.82231522 -48.76945877]
[-34.94349289 -38.44225311]
[-27.38521767 -45.42699432]
[-19.46596527 -51.99962616]
[-11.20817852 -58.14153290]
[-2.63525534 -63.83530807]
[6.22850990 -69.06481171]
[15.35799980 -73.81523132]
[24.72734451 -78.07310486]
[34.30998993 -81.82636261]
[44.07878876 -85.06436920]
[54.00605011 -87.77795410]
[64.06364441 -89.95942688]
[74.22307587 -91.60259247]
[84.45555878 -92.70281219]
[94.73208618 -93.25695801]
[105.02353668 -93.26346588]
[115.30075836 -92.72231293]
[125.53461456 -91.63504028]
[135.69612122 -90.00471497]
[145.75646973 -87.83596802]
[155.68714905 -85.13493347]
[165.46003723 -81.90928650]
[175.04742432 -78.16814423]
[184.42213440 -73.92212677]
[193.55763245 -69.18325806]
[202.42800903 -63.96496201]
[211.00811768 -58.28203201]
[219.27366638 -52.15057373]
[227.20121765 -45.58795547]
[234.76832581 -38.61278152]
[241.95352173 -31.24481392]
[248.73646545 -23.50493050]
[255.09793091 -15.41506672]
[261.01986694 -6.99814606]
[266.48553467 1.72198057]
[271.47943115 10.72060204]
[275.98736572 19.97221756]
[279.99664307 29.45061302]
[283.49581909 39.12892532]
[286.47503662 48.97973251]
[288.92581177 58.97512054]
[290.84121704 69.08676147]
[292.21585083 79.28599548]
[293.04577637 89.54393768]
[293.32867432 99.83150482]
[293.06372070 110.11954498]
[292.25167847 120.37891388]
[290.89483643 130.58053589]
[305.60278320 133.52601624]
[320.31076050 136.47149658]
[335.01870728 139.41699219]
[351.73675537 136.59861755]
[359.07299805 151.88311768]
[346.41668701 163.16383362]
[332.07324219 154.12493896]
[317.36526489 151.17945862]
[302.65731812 148.23397827]
[287.94934082 145.28849792]
[284.33407593 158.28340149]
[279.82150269 170.99459839]
[274.43359375 183.36019897]
[268.19659424 195.32002258]
[261.14086914 206.81585693]
[253.30072021 217.79173279]
[244.71435547 228.19422913]
[235.42353821 237.97270203]
[225.47352600 247.07955933]
[214.91273499 255.47047424]
[203.79257202 263.10458374]
[192.16717529 269.94473267]
[180.09312439 275.95764160]
[167.62921143 281.11404419]
[154.83609009 285.38879395]
[141.77603149 288.76113892]
[128.51261902 291.21463013]
[115.11041260 292.73733521]
[101.63465881 293.32183838]
[88.15094757 292.96530151]
[74.72490692 291.66943359]
[61.42190933 289.44058228]
[48.30669403 286.28958130]
[35.44311142 282.23175049]
[22.89377785 277.28686523]
[10.71977901 271.47900391]
[-1.01962495 264.83639526]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 34]
[2 33]
[3 32]
[4 31]
[5 29]
[6 28]
[7 27]
[8 26]
[9 25]
[10 24]
[12 23]
[13 22]
[14 21]
[46 66]
[47 65]
[48 64]
[49 62]
[50 61]
[51 60]
[113 123]
[114 122]
[115 121]
[116 120]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
