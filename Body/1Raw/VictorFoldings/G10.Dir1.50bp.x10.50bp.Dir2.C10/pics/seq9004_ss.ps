%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:52 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGUCUUCGCAGGAUUUUUCUGAGCCUUUUACCACUCCAGCCUAGCCCCUACCCCCCAAUUAGGAGGGCAxxxxxxxxxxAAAUAACCCCACCCUACUAAACCCCAUUAAACGCCUGGCAGCCGGAAGCCUAUUCGCAGGAUUUCUCCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[139.93826294 157.05296326]
[127.39723206 148.82359314]
[114.85620117 140.59422302]
[102.31517792 132.36485291]
[87.51118469 129.94783020]
[73.00398254 133.76110840]
[58.49678040 137.57438660]
[43.98957825 141.38766479]
[29.48237419 145.20094299]
[14.97517204 149.01420593]
[0.46796930 152.82748413]
[-3.65999579 167.55525208]
[-14.53375340 178.16931152]
[-29.16307449 181.89077759]
[-43.59437180 177.81726074]
[-53.97911835 167.13911438]
[-68.48632050 170.95239258]
[-82.95656586 174.90359497]
[-97.38853455 178.99238586]
[-111.82051086 183.08116150]
[-99.45462799 191.57145691]
[-96.54112244 206.28578186]
[-104.73857117 218.84770203]
[-119.38040161 222.10606384]
[-132.13142395 214.20596313]
[-135.73283386 199.64472961]
[-128.13414001 186.71139526]
[-142.93812561 189.12840271]
[-157.74211121 191.54541016]
[-172.52243042 194.10324097]
[-187.27770996 196.80166626]
[-192.36341858 211.29412842]
[-204.02444458 221.28993225]
[-219.12403870 224.10025024]
[-233.60047913 218.96914673]
[-243.55967712 207.27684021]
[-246.32266235 192.16851807]
[-241.14620972 177.70823669]
[-229.42274475 167.78573608]
[-214.30583191 165.07011414]
[-199.86184692 170.29188538]
[-189.97613525 182.04638672]
[-175.22085571 179.34796143]
[-169.17941284 175.03173828]
[-160.15913391 176.74142456]
[-145.35514832 174.32441711]
[-130.55114746 171.90740967]
[-115.90929413 168.64920044]
[-101.47731781 164.56040955]
[-87.04534912 160.47163391]
[-81.44154358 155.60067749]
[-72.29959869 156.44519043]
[-57.79239273 152.63191223]
[-54.00070953 138.22744751]
[-43.43779755 127.58409882]
[-28.86940575 123.63082886]
[-14.18184376 127.52599335]
[-3.34530568 138.32028198]
[11.16189671 134.50700378]
[25.66909981 130.69374084]
[40.17630386 126.88046265]
[54.68350601 123.06718445]
[69.19071198 119.25390625]
[83.69791412 115.44063568]
[79.12567902 101.44681549]
[84.21327972 88.73291779]
[95.37490082 82.74337006]
[97.93273163 67.96306610]
[100.49056244 53.18275833]
[103.04839325 38.40245056]
[97.77765656 23.48501587]
[107.57191467 12.26353168]
[110.12974548 -2.51677561]
[112.68758392 -17.29708290]
[115.24541473 -32.07738876]
[101.48738098 -38.25535965]
[89.69849396 -47.66136551]
[80.61980438 -59.70413589]
[74.82202148 -73.62665558]
[72.66959381 -88.55374146]
[74.29782104 -103.54705811]
[79.60434723 -117.66413116]
[88.25560760 -130.01753235]
[99.70777893 -139.83071899]
[113.24095917 -146.48683167]
[128.00445557 -149.56745911]
[143.07019043 -148.87893677]
[157.49116516 -144.46456909]
[170.36082458 -136.60185242]
[180.87019348 -125.78500366]
[188.35864258 -112.69401550]
[192.35542297 -98.15178680]
[192.60931396 -83.07244873]
[189.10435486 -68.40390778]
[182.06086731 -55.06824112]
[171.92160034 -43.90373993]
[159.32392883 -35.61220932]
[145.05975342 -30.71486473]
[130.02572632 -29.51955795]
[127.46788788 -14.73925018]
[124.91005707 0.04105733]
[122.35221863 14.82136440]
[127.80591583 28.68161201]
[117.82870483 40.96028519]
[115.27087402 55.74059296]
[112.71303558 70.52089691]
[110.15520477 85.30120850]
[120.12597656 101.16591644]
[110.54454803 119.82382202]
[123.08557892 128.05319214]
[135.62660217 136.28256226]
[148.16763306 144.51193237]
[162.49346924 129.84019470]
[179.68597412 118.67425537]
[198.90507507 111.55680847]
[219.21228027 108.83278656]
[239.61656189 110.63265228]
[259.12268066 116.86615753]
[276.77975464 127.22685242]
[291.72763062 141.20718384]
[303.23867798 158.12329102]
[310.75341797 177.14852905]
[313.90747070 197.35383606]
[312.54937744 217.75309753]
[327.05657959 221.56637573]
[341.56378174 225.37963867]
[353.49047852 215.45326233]
[368.97616577 214.46659851]
[382.06625366 222.79904175]
[387.72732544 237.24659729]
[383.78259277 252.25387573]
[371.74890137 262.05029297]
[356.25341797 262.86892700]
[343.25451660 254.39495850]
[337.75048828 239.88684082]
[323.24328613 236.07357788]
[308.73608398 232.26029968]
[304.68994141 241.98918152]
[299.56365967 251.19616699]
[293.42343140 259.76177979]
[286.34863281 267.57489014]
[278.43072510 274.53405762]
[269.77218628 280.54882812]
[260.48507690 285.54104614]
[250.68960571 289.44577026]
[240.51264954 292.21218872]
[230.08604431 293.80410767]
[219.54489136 294.20068359]
[209.02577209 293.39648438]
[198.66505432 291.40164185]
[188.59707642 288.24179077]
[178.95240784 283.95761108]
[169.85614014 278.60437012]
[161.42633057 272.25122070]
[153.77238464 264.98028564]
[146.99369812 256.88562012]
[141.17831421 248.07191467]
[136.40184021 238.65330505]
[132.72644043 228.75172424]
[130.19998169 218.49539185]
[128.85548401 208.01719666]
[128.71063232 197.45289612]
[129.76757812 186.93940735]
[132.01289368 176.61300659]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 112]
[2 111]
[3 110]
[4 109]
[5 64]
[6 63]
[7 62]
[8 61]
[9 60]
[10 59]
[11 58]
[16 53]
[17 52]
[18 50]
[19 49]
[20 48]
[27 47]
[28 46]
[29 45]
[30 43]
[31 42]
[67 107]
[68 106]
[69 105]
[70 104]
[72 102]
[73 101]
[74 100]
[75 99]
[124 137]
[125 136]
[126 135]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
