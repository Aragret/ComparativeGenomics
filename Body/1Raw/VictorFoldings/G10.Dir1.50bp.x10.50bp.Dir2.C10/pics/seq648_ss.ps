%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:39 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCUAAUCUCAUCAAUACAACCCCCGCCCAUCCUACCCAGCACACACACACCGCUGCUAACCxxxxxxxxxxAUCCUCCCUACUAUGCCUAGAAGGAAUAAUACUAUCGCUGUUCAUUAUAGCUACUCUCAUCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[-17.17736244 226.51657104]
[-27.83898926 237.06785583]
[-38.50061417 247.61915588]
[-42.86686707 262.82592773]
[-57.35566330 266.27905273]
[-68.01728821 276.83035278]
[-78.67891693 287.38165283]
[-89.34053802 297.93292236]
[-100.00216675 308.48422241]
[-92.99456024 321.87768555]
[-90.24770355 336.74194336]
[-92.00585938 351.75527954]
[-98.11267853 365.58273315]
[-108.02516174 376.99475098]
[-120.86189270 384.97659302]
[-135.48143005 388.81851196]
[-150.58383179 388.17892456]
[-164.82618713 383.11465454]
[-176.94207764 374.07601929]
[-185.85415649 361.86676025]
[-190.77000427 347.57250977]
[-191.25247192 332.46426392]
[-187.25866699 317.88549805]
[-179.14372253 305.13247681]
[-167.62921143 295.33926392]
[-153.73899841 289.37658691]
[-138.70817566 287.77471924]
[-123.87329865 290.67605591]
[-110.55345917 297.82260132]
[-99.89183044 287.27130127]
[-89.23020172 276.72003174]
[-78.56858063 266.16873169]
[-67.90695190 255.61744690]
[-64.30329132 241.16534424]
[-49.05190659 236.95751953]
[-38.39027786 226.40623474]
[-27.72865295 215.85493469]
[-44.25093079 194.49150085]
[-57.23505783 170.81040955]
[-66.36255646 145.39248657]
[-71.40954590 118.86118317]
[-72.25224304 91.86725616]
[-68.86997223 65.07280731]
[-61.34569931 39.13505173]
[-49.86397171 14.69017410]
[-34.70641327 -7.66224194]
[-46.00542068 -17.52796555]
[-57.30442429 -27.39368820]
[-68.60343170 -37.25941086]
[-82.85169983 -31.66965675]
[-98.06433105 -33.35320282]
[-110.74558258 -41.92318344]
[-117.98138428 -55.41027832]
[-118.10900116 -70.71525574]
[-111.09912109 -84.32113647]
[-98.56254578 -93.10140228]
[-83.38010406 -95.03839874]
[-69.04059601 -89.68701935]
[-58.83914948 -78.27698517]
[-55.11997223 -63.43022156]
[-58.73770523 -48.55841446]
[-47.43870163 -38.69269180]
[-36.13969803 -28.82696915]
[-24.84069252 -18.96124649]
[-16.27974319 -27.34205055]
[-7.15756273 -35.10822678]
[2.48182201 -42.22229767]
[12.59188557 -48.64991760]
[23.12383080 -54.36006927]
[34.02682495 -59.32519150]
[45.24824142 -63.52131653]
[56.73392487 -66.92819977]
[68.42842865 -69.52938843]
[80.27532196 -71.31232452]
[92.21741486 -72.26841736]
[104.19707489 -72.39304352]
[116.15647125 -71.68560028]
[128.03788757 -70.14950562]
[139.78398132 -67.79216766]
[151.33805847 -64.62496948]
[162.64433289 -60.66320038]
[173.64826965 -55.92597580]
[184.29672241 -50.43616486]
[194.53831482 -44.22026062]
[204.32360840 -37.30826569]
[213.60539246 -29.73354530]
[222.33883667 -21.53265572]
[233.43014526 -31.63130379]
[244.52146912 -41.72995377]
[249.51651001 -56.74195099]
[264.13641357 -59.58937836]
[275.22772217 -69.68802643]
[286.31903076 -79.78667450]
[290.78182983 -95.56690979]
[306.74353027 -99.32929993]
[317.78414917 -87.20342255]
[312.54602051 -71.66334534]
[296.41769409 -68.69536591]
[285.32638550 -58.59671402]
[274.23507690 -48.49806213]
[270.03332520 -34.20838928]
[254.62011719 -30.63863945]
[243.52879333 -20.53998947]
[232.43748474 -10.44133949]
[239.10453796 -1.91616583]
[245.22367859 7.01043606]
[250.77081299 16.30330658]
[255.72410583 25.92584038]
[260.06402588 35.84013748]
[263.77346802 46.00714874]
[266.83786011 56.38682938]
[269.24508667 66.93829346]
[270.98571777 77.61997986]
[272.05282593 88.38981628]
[272.44229126 99.20538330]
[272.15252686 110.02407837]
[271.18469238 120.80329132]
[269.54260254 131.50056458]
[267.23269653 142.07376099]
[264.26409912 152.48124695]
[260.64849854 162.68200684]
[256.40014648 172.63587952]
[251.53575134 182.30366516]
[246.07449341 191.64726257]
[240.03787231 200.62986755]
[233.44967651 209.21612549]
[226.33583069 217.37220764]
[218.72439575 225.06596375]
[210.64530945 232.26712036]
[202.13041687 238.94731140]
[193.21325684 245.08020020]
[183.92895508 250.64164734]
[174.31405640 255.60975647]
[164.40646362 259.96493530]
[154.24517822 263.69006348]
[143.87023926 266.77044678]
[133.32249451 269.19393921]
[122.64350128 270.95101929]
[111.87532043 272.03472900]
[101.06037140 272.44085693]
[90.24124146 272.16778564]
[79.46054840 271.21655273]
[68.76075745 269.59094238]
[58.18400574 267.29733276]
[47.77196503 264.34478760]
[37.56563950 260.74490356]
[27.60523033 256.51190186]
[17.92997169 251.66241455]
[8.57796955 246.21556091]
[-0.41393885 240.19277954]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 37]
[2 36]
[3 35]
[5 33]
[6 32]
[7 31]
[8 30]
[9 29]
[46 64]
[47 63]
[48 62]
[49 61]
[87 104]
[88 103]
[89 102]
[91 100]
[92 99]
[93 98]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
