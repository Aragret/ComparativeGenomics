%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:03 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGAAAAAUUCUAGGCUAUAUACAACUACGCAAAGGCCCCAACGUUGUAGGCCCCUACGGGCUxxxxxxxxxxCACAAUCAUGGCAAGCCAACGCCACUUAUCCAGUGAACCACUAUCACGAAAAAAACUCUACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[126.53900146 482.73324585]
[126.53900146 467.73324585]
[126.53900146 452.73324585]
[126.53900146 437.73324585]
[126.53900146 422.73324585]
[126.53900146 407.73324585]
[126.53900146 392.73324585]
[126.53900146 377.73324585]
[126.53900146 362.73324585]
[126.53900146 347.73324585]
[109.06786346 340.44384766]
[96.44203949 326.27334595]
[91.18168640 307.98712158]
[94.36408997 289.17816162]
[105.40332031 273.56106567]
[122.15760803 264.23855591]
[120.60002899 249.31965637]
[119.04244995 234.40074158]
[100.30559540 223.28129578]
[95.51951599 203.73548889]
[105.26744843 188.05905151]
[99.49117279 174.21583557]
[95.43485260 171.58491516]
[93.02400208 166.34858704]
[93.77584076 159.67459106]
[88.58042908 145.60307312]
[83.38500977 131.53153992]
[71.88320923 121.90302277]
[57.11715317 119.26416016]
[42.35109711 116.62528992]
[27.58504105 113.98642731]
[12.81898594 111.34756470]
[-1.94706941 108.70870209]
[-9.28793907 121.95220184]
[-20.53288841 132.09271240]
[-34.46215057 138.03024292]
[-49.56478500 139.12075806]
[-64.20256805 135.24595642]
[-76.78769684 126.82615662]
[-85.95504761 114.77466583]
[-90.71019745 100.39873505]
[-90.53734589 85.25776672]
[-85.45525360 70.99414062]
[-76.01518250 59.15506744]
[-63.24111557 51.02475739]
[-48.51869202 47.48512650]
[-33.44488907 48.92012787]
[-19.65480423 55.17410660]
[-8.64427757 65.56867218]
[-1.60765123 78.97630310]
[0.69179493 93.94264221]
[15.45785046 96.58150482]
[30.22390556 99.22037506]
[44.98995972 101.85923767]
[59.75601578 104.49810028]
[74.52207184 107.13696289]
[70.93063354 90.98786926]
[77.92681885 73.60269165]
[70.74430847 60.43411255]
[63.56179810 47.26552963]
[56.37929153 34.09694672]
[42.10618973 26.02163887]
[42.23365021 9.62298679]
[56.63055038 1.77051878]
[70.48659515 10.54218102]
[69.54787445 26.91443825]
[76.73038483 40.08302307]
[83.91288757 53.25160217]
[91.09539795 66.42018890]
[98.46430206 67.81634521]
[98.47441101 52.81635284]
[98.48451996 37.81635666]
[98.49463654 22.81635857]
[98.50474548 7.81636238]
[91.60448456 -5.50228548]
[91.88778687 -20.49961090]
[99.28614044 -33.54814911]
[112.01006317 -41.49180603]
[126.98198700 -42.40921402]
[140.58058167 -36.07847977]
[149.51670837 -24.03083801]
[151.62895203 -9.18030262]
[146.40641785 4.88117361]
[135.11259460 14.75233269]
[129.63496399 28.71641731]
[124.15734863 42.68050385]
[118.67973328 56.64458847]
[113.20211029 70.60867310]
[120.57101440 72.00483704]
[132.07281494 62.37630844]
[143.57461548 52.74778366]
[155.07641602 43.11925507]
[153.87759399 27.64856148]
[162.02983093 14.44550610]
[176.39843750 8.58693504]
[191.45837402 12.32558918]
[201.41882324 24.22387886]
[202.44975281 39.70666885]
[194.15476990 52.82051086]
[179.72344971 58.52286530]
[164.70495605 54.62105942]
[153.20314026 64.24958801]
[141.70133972 73.87811279]
[130.19953918 83.50663757]
[130.97703552 107.00642395]
[117.05618286 123.58867645]
[97.45652771 126.33612823]
[102.65194702 140.40765381]
[107.84735870 154.47917175]
[113.33439636 168.43955994]
[119.11066437 182.28277588]
[139.55287170 187.24288940]
[149.62104797 208.80241394]
[164.03326416 212.96029663]
[178.44548035 217.11819458]
[192.85769653 221.27607727]
[205.73417664 212.40306091]
[221.29661560 213.93423462]
[232.19691467 225.14662170]
[233.28826904 240.74607849]
[224.05540466 253.36700439]
[208.85777283 257.05020142]
[194.87123108 250.05657959]
[188.69981384 235.68829346]
[174.28759766 231.53041077]
[159.87538147 227.37251282]
[145.46316528 223.21463013]
[133.96136475 232.84315491]
[135.51893616 247.76206970]
[137.07652283 262.68096924]
[148.17091370 265.01174927]
[158.26332092 270.14077759]
[166.66271973 277.70782471]
[172.79640198 287.18594360]
[176.24899292 297.91830444]
[176.79055786 309.16369629]
[174.39196777 320.14764404]
[169.22624207 330.11581421]
[161.65618896 338.38580322]
[152.20889282 344.39382935]
[141.53900146 347.73324585]
[141.53900146 362.73324585]
[141.53900146 377.73324585]
[141.53900146 392.73324585]
[141.53900146 407.73324585]
[141.53900146 422.73324585]
[141.53900146 437.73324585]
[141.53900146 452.73324585]
[141.53900146 467.73324585]
[141.53900146 482.73324585]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[16 130]
[17 129]
[18 128]
[21 111]
[22 110]
[25 109]
[26 108]
[27 107]
[28 56]
[29 55]
[30 54]
[31 53]
[32 52]
[33 51]
[58 69]
[59 68]
[60 67]
[61 66]
[89 104]
[90 103]
[91 102]
[92 101]
[113 127]
[114 126]
[115 125]
[116 124]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
