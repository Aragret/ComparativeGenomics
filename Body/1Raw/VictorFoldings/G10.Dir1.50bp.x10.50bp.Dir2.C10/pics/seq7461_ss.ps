%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:46 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGUACUUCCCCUAUCAUAGAAGAGCUUAUCACCUUUCAUGAUCACGCCCUCAUAAUCAUUUUCCxxxxxxxxxxCUGAACCUACGAGUACACCGACUACGGCGGACUAAUCUUCAACUCCUACAUACUUCCCCCAUCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[169.50856018 98.97475433]
[163.15011597 85.86821747]
[149.19230652 91.36180115]
[135.23449707 96.85539246]
[126.22520447 108.71633911]
[110.55015564 106.57078552]
[99.16878510 116.34136963]
[91.62494659 129.30635071]
[84.08110809 142.27131653]
[76.53726196 155.23628235]
[79.23051453 171.05166626]
[68.43773651 182.92160034]
[52.43821716 181.74049377]
[43.50542450 168.41439819]
[48.49183273 153.16595459]
[63.57229233 147.69244385]
[71.11613464 134.72747803]
[78.65997314 121.76250458]
[86.20381165 108.79753113]
[82.04493713 102.55623627]
[69.56831360 83.83235168]
[54.69830322 85.80280304]
[39.82828903 87.77325439]
[24.95827484 89.74370575]
[10.08826065 91.71415710]
[1.93584073 95.96612549]
[-5.10273314 93.57069397]
[-20.00962830 95.23937225]
[-34.91652298 96.90805054]
[-39.48431778 111.43578339]
[-49.57103348 122.84534454]
[-63.42908859 129.15995789]
[-78.65748596 129.28556824]
[-92.61782074 123.20041656]
[-102.89137268 111.95879364]
[-107.69818878 97.50838470]
[-106.20545959 82.35279846]
[-98.67181396 69.11784363]
[-86.40250397 60.09654999]
[-71.52324677 56.85190964]
[-56.61197662 59.94607925]
[-44.25215530 68.84297943]
[-36.58520126 82.00115204]
[-21.67830467 80.33248138]
[-6.77140999 78.66380310]
[8.11780930 76.84414673]
[22.98782349 74.87369537]
[37.85783768 72.90324402]
[52.72785187 70.93279266]
[67.59786224 68.96234131]
[89.09613037 68.96295166]
[102.73753357 79.25553894]
[105.05656433 92.61297607]
[115.06420898 80.35909271]
[129.74090576 82.89758301]
[143.69871521 77.40399170]
[157.65652466 71.91040039]
[153.14389038 57.10619736]
[149.82991028 41.98878479]
[147.73574829 26.65504837]
[146.87478638 11.20325470]
[147.25250244 -4.26758194]
[148.86640930 -19.65832710]
[151.70611572 -34.87036133]
[155.75338745 -49.80621719]
[160.98222351 -64.37020111]
[167.35908508 -78.46900940]
[174.84306335 -92.01231384]
[183.38615417 -104.91335297]
[192.93357849 -117.08949280]
[203.42410278 -128.46273804]
[214.79046631 -138.96023560]
[226.95982361 -148.51477051]
[239.85415649 -157.06513977]
[253.39079285 -164.55661011]
[267.48297119 -170.94122314]
[282.04040527 -176.17810059]
[296.96975708 -180.23373413]
[312.17532349 -183.08219910]
[327.55972290 -184.70527649]
[343.02435303 -185.09260559]
[358.47009277 -184.24179077]
[373.79797363 -182.15830994]
[388.90979004 -178.85556030]
[403.70870972 -174.35476685]
[418.09991455 -168.68479919]
[431.99124146 -161.88206482]
[445.29367065 -153.99018860]
[457.92196655 -145.05976868]
[469.79525757 -135.14808655]
[480.83752441 -124.31870270]
[490.97799683 -112.64103699]
[500.15176392 -100.18994141]
[508.30004883 -87.04524231]
[521.63043213 -93.92273712]
[534.96087646 -100.80023193]
[543.67749023 -114.00370026]
[558.53570557 -112.96305084]
[567.25225830 -126.16651917]
[582.11047363 -125.12586975]
[595.44091797 -132.00335693]
[608.77130127 -138.88084412]
[617.17303467 -152.96429443]
[633.56439209 -152.45939636]
[641.08337402 -137.88557434]
[631.99511719 -124.23509979]
[615.64880371 -125.55043030]
[602.31842041 -118.67293549]
[588.98797607 -111.79544830]
[581.22485352 -99.08390045]
[565.41314697 -99.63262939]
[557.65008545 -86.92108154]
[541.83837891 -87.46981049]
[528.50793457 -80.59231567]
[515.17755127 -73.71482849]
[520.84661865 -60.30733109]
[525.49023438 -46.51080704]
[529.08190918 -32.40356064]
[531.60125732 -18.06567383]
[533.03393555 -3.57853317]
[533.37182617 10.97561741]
[532.61285400 25.51415443]
[530.76141357 39.95453644]
[527.82788086 54.21478653]
[523.82891846 68.21392822]
[518.78717041 81.87248993]
[512.73120117 95.11290741]
[505.69540405 107.85999298]
[497.71969604 120.04137421]
[488.84927368 131.58787537]
[479.13449097 142.43389893]
[468.63046265 152.51786804]
[457.39678955 161.78250122]
[445.49722290 170.17517090]
[432.99932861 177.64819336]
[419.97399902 184.15911865]
[406.49514771 189.67094421]
[392.63934326 194.15232849]
[378.48516846 197.57781982]
[364.11300659 199.92791748]
[349.60443115 201.18925476]
[335.04183960 201.35459900]
[320.50784302 200.42301941]
[306.08499146 198.39971924]
[291.85516357 195.29617310]
[277.89916992 191.12995911]
[264.29620361 185.92468262]
[251.12355042 179.70986938]
[238.45600891 172.52075195]
[226.36547852 164.39811707]
[214.92063904 155.38804626]
[204.18650818 145.54165649]
[194.22401428 134.91482544]
[185.08976746 123.56784821]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 57]
[3 56]
[4 55]
[6 53]
[7 19]
[8 18]
[9 17]
[10 16]
[21 50]
[22 49]
[23 48]
[24 47]
[25 46]
[27 45]
[28 44]
[29 43]
[94 115]
[95 114]
[96 113]
[98 111]
[100 109]
[101 108]
[102 107]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
