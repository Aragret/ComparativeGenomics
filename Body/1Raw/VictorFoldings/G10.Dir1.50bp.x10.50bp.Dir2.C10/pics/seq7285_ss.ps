%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:05 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGAGCCUUCGCUUCGAAGCGAAAAGUCCUAAUAGUAGAAGAACCCUCCAUAAACCUGGAGUGxxxxxxxxxxUCCCCCGCAUCCCCCUUCCAAACAACAAUCCCCCUCUACCUAAAACUCACAGCCCUCGCUCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[284.21899414 179.77095032]
[270.56274414 173.56553650]
[256.90649414 167.36013794]
[243.25025940 161.15472412]
[229.59400940 154.94931030]
[215.69145203 149.31735229]
[201.56665039 144.26860046]
[187.44184875 139.21984863]
[173.31704712 134.17109680]
[159.19224548 129.12232971]
[145.06744385 124.07357788]
[129.73417664 146.81994629]
[103.07608032 159.75424194]
[71.32794189 157.44505310]
[43.15312958 138.34880066]
[31.07313919 147.24114990]
[18.99315071 156.13349915]
[6.91316271 165.02586365]
[-5.16682529 173.91821289]
[-17.24681282 182.81056213]
[-23.32406044 198.04206848]
[-39.59017563 200.12667847]
[-49.31196976 186.91990662]
[-42.48849869 172.00776672]
[-26.13916397 170.73056030]
[-14.05917549 161.83821106]
[-1.97918677 152.94586182]
[10.10080147 144.05351257]
[22.18078995 135.16116333]
[34.26077652 126.26882172]
[32.33219910 119.02101898]
[19.73798180 127.16876221]
[8.09720707 117.70872498]
[13.49706554 103.71438599]
[28.47503853 104.52542114]
[26.54645920 97.27762604]
[11.64455700 95.56493378]
[-3.25734544 93.85224915]
[-18.07930565 100.86947632]
[-31.41164970 91.32062531]
[-29.53920555 75.02872467]
[-14.38818359 68.75348663]
[-1.54465580 78.95034027]
[13.35724640 80.66303253]
[28.25914955 82.37572479]
[32.05410385 75.90669250]
[19.11604691 68.31678772]
[4.46585417 65.09625244]
[3.00179315 50.16787338]
[16.74718094 44.16251373]
[26.70595551 55.37873077]
[39.64401245 62.96863937]
[43.43896484 56.49961090]
[34.67276001 44.32777405]
[25.90655136 32.15593719]
[17.14034462 19.98410034]
[8.37413692 7.81226444]
[-7.26342821 5.52269840]
[-16.63474464 -7.20341539]
[-14.17997742 -22.81589890]
[-1.35549557 -32.05214310]
[14.23016262 -29.43244934]
[23.33030319 -16.51103401]
[20.54597282 -0.95394295]
[29.31218147 11.21789360]
[38.07838821 23.38973045]
[46.84459686 35.56156921]
[55.61080170 47.73340607]
[66.94554901 41.45926285]
[79.02842712 37.54329681]
[91.38502502 36.03847885]
[103.54843140 36.90510559]
[115.07683563 40.01563263]
[125.56954193 45.16272354]
[134.68092346 52.07014465]
[142.13166809 60.40600586]
[147.71710205 69.79769135]
[151.31225586 79.84788513]
[152.87365723 90.15103149]
[152.43772888 100.30947876]
[150.11619568 109.94877625]
[164.24099731 114.99752808]
[178.36579895 120.04628754]
[192.49061584 125.09504700]
[206.61541748 130.14379883]
[220.74021912 135.19255066]
[225.12347412 134.21862793]
[229.16763306 134.68325806]
[232.45230103 136.29347229]
[234.69999695 138.64759827]
[235.79942322 141.29307556]
[249.45565796 147.49848938]
[263.11190796 153.70388794]
[276.76815796 159.90930176]
[290.42437744 166.11470032]
[298.07684326 153.19622803]
[307.08117676 141.18086243]
[317.33187866 130.20948792]
[328.70867920 120.41075897]
[341.07824707 111.89953613]
[354.29556274 104.77561188]
[368.20562744 99.12252045]
[382.64535522 95.00653839]
[397.44546509 92.47592163]
[412.43243408 91.56033325]
[427.43051147 92.27052307]
[442.26391602 94.59815216]
[456.75866699 98.51593781]
[470.74487305 103.97794342]
[484.05850220 110.92012787]
[496.54351807 119.26109314]
[508.05349731 128.90306091]
[518.45355225 139.73297119]
[527.62164307 151.62385559]
[535.45031738 164.43629456]
[541.84783936 178.02006531]
[546.73919678 192.21591187]
[550.06695557 206.85739136]
[551.79223633 221.77285767]
[551.89465332 236.78739929]
[550.37310791 251.72500610]
[547.24542236 266.41055298]
[542.54827881 280.67181396]
[536.33666992 294.34161377]
[528.68353271 307.25970459]
[519.67852783 319.27456665]
[509.42727661 330.24539185]
[498.04992676 340.04351807]
[485.67990112 348.55407715]
[472.46221924 355.67727661]
[458.55184937 361.32962036]
[444.11190796 365.44482422]
[429.31164551 367.97463989]
[414.32464600 368.88943481]
[399.32659912 368.17843628]
[384.49331665 365.85000610]
[369.99877930 361.93142700]
[356.01287842 356.46868896]
[342.69958496 349.52578735]
[330.21502686 341.18414307]
[318.70556641 331.54156494]
[308.30612183 320.71109009]
[299.13867188 308.81970215]
[291.31063843 296.00683594]
[284.91384888 282.42272949]
[280.02328491 268.22662354]
[276.69628906 253.58496094]
[274.97186279 238.66940308]
[274.87020874 223.65484619]
[276.39257812 208.71733093]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 95]
[2 94]
[3 93]
[4 92]
[5 91]
[6 86]
[7 85]
[8 84]
[9 83]
[10 82]
[11 81]
[15 30]
[16 29]
[17 28]
[18 27]
[19 26]
[20 25]
[36 45]
[37 44]
[38 43]
[53 68]
[54 67]
[55 66]
[56 65]
[57 64]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
