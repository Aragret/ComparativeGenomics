%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:17 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCCAUAAAAAUAAAAAAUUAUAACAAACCCUGAGAACCAAAAUGAACGAAAAUCUGUUCGCxxxxxxxxxxCCCUUACGAGUGCGGCUUCGACCCUAUAUCCCCCGCCCGCGUCCCUUUCUCCAUAAAAUUCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[117.24568176 263.94088745]
[117.24568176 248.94088745]
[117.24568176 233.94088745]
[117.24568176 218.94088745]
[117.24568176 203.94088745]
[117.24568176 188.94088745]
[117.24568176 173.94088745]
[117.24568176 158.94088745]
[117.24568176 143.94088745]
[117.24568176 128.94088745]
[110.69910431 125.28132629]
[103.50772095 138.44506836]
[96.31633759 151.60881042]
[88.74373627 164.55699158]
[75.65072632 157.23764038]
[82.71367645 144.00488281]
[90.15981293 130.98355103]
[97.60594940 117.96221924]
[91.05937195 114.30266571]
[78.28201294 122.16009521]
[65.50465393 130.01751709]
[52.72729874 137.87495422]
[45.40496826 152.54858398]
[29.02186394 153.27384949]
[20.43152618 139.30467224]
[28.47095299 125.01132202]
[44.86987305 125.09758759]
[57.64723206 117.24016571]
[70.42459106 109.38273621]
[83.20195007 101.52531433]
[81.04815674 94.34121704]
[76.74057007 79.97303772]
[74.58677673 72.78894043]
[59.59408188 73.25698853]
[47.60567093 83.91801453]
[31.82101059 81.05026245]
[24.34873772 66.85362244]
[30.92094231 52.21853638]
[46.49599075 48.37179565]
[59.12603760 58.26428986]
[74.11873627 57.79624939]
[86.64469910 49.54395676]
[92.99182892 35.95300674]
[99.33895874 22.36205673]
[105.68608856 8.77110577]
[96.69969177 -1.68237531]
[93.22897339 -15.43954849]
[96.35226440 -29.69268799]
[105.76292419 -41.36632538]
[119.76115417 -47.78018188]
[114.85960388 -61.95673752]
[107.95260620 -75.27189636]
[99.18640137 -87.44373322]
[90.42019653 -99.61557007]
[81.65398407 -111.78740692]
[72.88777924 -123.95924377]
[63.99542999 -136.03923035]
[54.97789764 -148.02606201]
[40.62414551 -157.04859924]
[45.32055664 -173.33908081]
[62.27450562 -173.33586121]
[66.96472931 -157.04359436]
[75.98226166 -145.05676270]
[82.55923462 -141.57981873]
[85.05961609 -132.72544861]
[93.82582092 -120.55361176]
[102.59203339 -108.38177490]
[111.35823822 -96.20993805]
[120.12444305 -84.03810120]
[119.58547211 -99.02841187]
[124.72379303 -113.12088013]
[134.78492737 -124.24623871]
[148.29154968 -130.77090454]
[163.26042175 -131.73680115]
[177.49357605 -127.00214386]
[188.90112305 -117.26211548]
[195.80799866 -103.94689941]
[197.20007324 -89.01163483]
[192.87290955 -74.64933777]
[183.46189880 -62.96888733]
[170.34890747 -55.68538284]
[155.45938110 -53.86829376]
[140.97959900 -57.78443909]
[129.03616333 -66.85829163]
[133.93771362 -52.68173218]
[147.59394836 -46.47632217]
[161.49650574 -52.10828018]
[175.39906311 -57.74023819]
[185.28450012 -70.09291840]
[199.98568726 -67.70033264]
[209.87112427 -80.05301666]
[224.57231140 -77.66042328]
[238.47486877 -83.29238129]
[252.37741089 -88.92433929]
[266.27996826 -94.55629730]
[265.43847656 -109.67485046]
[269.55392456 -124.24679565]
[278.17996216 -136.69148254]
[290.38088989 -145.65899658]
[304.83322144 -150.17662048]
[319.96926880 -149.75430298]
[334.14721680 -144.43786621]
[345.82913208 -134.80400085]
[353.74786377 -121.89769745]
[357.04443359 -107.11894989]
[355.36123657 -92.07083893]
[348.88085938 -78.38567352]
[338.30627441 -67.54792786]
[324.78451538 -60.73318100]
[309.78231812 -58.68065643]
[294.92703247 -61.61299896]
[281.83001709 -69.21212769]
[271.91192627 -80.65373993]
[258.00936890 -75.02178192]
[244.10681152 -69.38982391]
[230.20426941 -63.75786972]
[221.31323242 -51.80802536]
[205.61764526 -53.79777527]
[196.72660828 -41.84793091]
[181.03102112 -43.83768082]
[167.12846375 -38.20572662]
[153.22590637 -32.57376862]
[157.61676025 -17.67362022]
[154.90490723 -2.79181385]
[146.02989197 8.95197487]
[133.18307495 15.26341343]
[119.27703857 15.11823559]
[112.92990875 28.70918655]
[106.58277893 42.30013657]
[100.23564911 55.89108658]
[112.56870270 47.35319138]
[127.09175873 43.60071945]
[142.01707458 45.09558868]
[155.50744629 51.65378571]
[165.90226746 62.46802902]
[171.92198181 76.20713806]
[172.82557678 91.17989349]
[168.50186157 105.54322815]
[159.48303223 117.52909088]
[146.87927246 125.66207123]
[132.24568176 128.94088745]
[132.24568176 143.94088745]
[132.24568176 158.94088745]
[132.24568176 173.94088745]
[132.24568176 188.94088745]
[132.24568176 203.94088745]
[132.24568176 218.94088745]
[132.24568176 233.94088745]
[132.24568176 248.94088745]
[132.24568176 263.94088745]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[19 30]
[20 29]
[21 28]
[22 27]
[33 41]
[34 40]
[42 130]
[43 129]
[44 128]
[45 127]
[50 85]
[51 84]
[52 69]
[53 68]
[54 67]
[55 66]
[56 65]
[57 63]
[58 62]
[86 122]
[87 121]
[88 120]
[90 118]
[92 116]
[93 115]
[94 114]
[95 113]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
