%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:43 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGUAAUAAUCUUAUAGAAAUUUAGGUUAAAUACAGACCAAGAGCCUUCAAAGCCCUCAGUAAGxxxxxxxxxxCCCAAACAUUAAUCAGUUCUUCAAAUAUCUACUCAUCUUCCUAAUUACCAUACUAAUCUUACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[208.29876709 511.67489624]
[207.68293762 496.68756104]
[207.06710815 481.70019531]
[206.45127869 466.71282959]
[205.83546448 451.72549438]
[205.21963501 436.73812866]
[204.60380554 421.75079346]
[203.98797607 406.76342773]
[201.53504944 391.96536255]
[197.28221130 377.58087158]
[193.02935791 363.19638062]
[188.77651978 348.81192017]
[184.52366638 334.42742920]
[180.27082825 320.04293823]
[175.43099976 305.84518433]
[170.01237488 291.85812378]
[154.08932495 290.90924072]
[140.11611938 283.09585571]
[130.90364075 269.93179321]
[128.33024597 254.01296997]
[132.95895386 238.50549316]
[143.91523743 226.51593018]
[138.21057129 212.64305115]
[132.50590515 198.77017212]
[126.80124664 184.89729309]
[114.80501556 176.06893921]
[116.71257019 160.36315918]
[111.00790405 146.49028015]
[105.30324554 132.61740112]
[99.59857941 118.74451447]
[84.03310394 116.00907135]
[73.53559113 100.63659668]
[58.54270172 100.17466736]
[43.54981613 99.71274567]
[34.89838791 112.48600769]
[20.70561981 118.53323364]
[5.50037575 115.92476654]
[-5.86540747 105.49296570]
[-9.76494980 90.56657410]
[-4.95392179 75.90855408]
[7.03249598 66.19622803]
[22.36948013 64.52875519]
[36.16305542 71.43823242]
[44.01174164 84.71985626]
[59.00462723 85.18178558]
[73.99751282 85.64370728]
[84.32841492 74.76839447]
[83.09780121 59.81896210]
[81.86719513 44.86952591]
[80.63658142 29.92009354]
[79.40596771 14.97065830]
[78.17535400 0.02122389]
[63.17376709 -0.79498088]
[48.42306137 -3.64636850]
[34.19803238 -8.47981930]
[20.76367950 -15.20528889]
[8.37028027 -23.69748688]
[-2.75128436 -33.79820633]
[-12.39382648 -45.31928253]
[-20.37771225 -58.04607773]
[-26.55420494 -71.74150085]
[-30.80824280 -86.15042114]
[-33.06057358 -101.00440216]
[-33.26923752 -116.02672577]
[-31.43034935 -130.93753052]
[-27.57816505 -145.45904541]
[-21.78444862 -159.32075500]
[-14.15713310 -172.26438904]
[-4.83831215 -184.04884338]
[5.99841166 -194.45457458]
[18.15115547 -203.28771973]
[31.39352226 -210.38374329]
[45.47881699 -215.61042786]
[60.14463425 -218.87042236]
[75.11775970 -220.10298157]
[90.11925507 -219.28515625]
[104.86965942 -216.43217468]
[119.09416199 -211.59718323]
[132.52778625 -204.87025452]
[144.92027283 -196.37672424]
[156.04074097 -186.27479553]
[165.68203735 -174.75267029]
[173.66453552 -162.02500916]
[179.83955383 -148.32891846]
[184.09202576 -133.91954041]
[186.34275818 -119.06531525]
[186.54978943 -104.04296875]
[184.70928955 -89.13236237]
[180.85552979 -74.61125946]
[175.06031799 -60.75019073]
[167.43159485 -47.80737686]
[158.11149597 -36.02393341]
[147.27365112 -25.61937904]
[135.11994934 -16.78754234]
[121.87681580 -9.69295883]
[107.79096222 -4.46779346]
[93.12478638 -1.20938849]
[94.35540009 13.74004555]
[95.58601379 28.68947983]
[96.81662750 43.63891602]
[98.04724121 58.58834839]
[99.27784729 73.53778076]
[120.69592285 90.89446259]
[113.47145844 113.03984833]
[119.17612457 126.91272736]
[124.88078308 140.78561401]
[130.58544922 154.65849304]
[142.98971558 164.47912598]
[140.67413330 179.19262695]
[146.37878418 193.06550598]
[152.08345032 206.93838501]
[157.78811646 220.81127930]
[171.95072937 221.10612488]
[184.88743591 226.77012634]
[194.65023804 236.91423035]
[199.78294373 249.97756958]
[199.53823853 263.96752930]
[193.98638916 276.76376343]
[183.99946594 286.43948364]
[189.41809082 300.42657471]
[193.01571655 303.10177612]
[195.30688477 306.45947266]
[196.23843384 309.99203491]
[195.93186951 313.22857666]
[194.65530396 315.79010010]
[198.90814209 330.17459106]
[203.16099548 344.55905151]
[207.41384888 358.94354248]
[211.66668701 373.32803345]
[215.91954041 387.71249390]
[220.80934143 373.53189087]
[231.28286743 362.79388428]
[245.33715820 357.55203247]
[260.28442383 358.80880737]
[273.26608276 366.32388306]
[281.79949951 378.66003418]
[284.25271606 393.45806885]
[280.15658569 407.88796997]
[270.29446411 419.19009399]
[256.55236816 425.20300293]
[241.55842590 424.77679443]
[228.18009949 417.99295044]
[218.97534180 406.14761353]
[219.59115601 421.13494873]
[220.20698547 436.12231445]
[220.82281494 451.10968018]
[221.43864441 466.09701538]
[222.05445862 481.08438110]
[222.67028809 496.07171631]
[223.28611755 511.05908203]
[229.97763062 526.63659668]
[216.86126709 537.37890625]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 130]
[10 129]
[11 128]
[12 127]
[13 126]
[14 125]
[15 120]
[16 119]
[22 112]
[23 111]
[24 110]
[25 109]
[27 107]
[28 106]
[29 105]
[30 104]
[32 46]
[33 45]
[34 44]
[47 102]
[48 101]
[49 100]
[50 99]
[51 98]
[52 97]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
