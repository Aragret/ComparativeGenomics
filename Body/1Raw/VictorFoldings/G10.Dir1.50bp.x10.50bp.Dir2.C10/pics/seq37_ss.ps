%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:35 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGUAUUAACCACUCACGGGAGCUCUCCAUGCAUUUGGUAUUUUCGUCUGGGGGGUAUGCACGxxxxxxxxxxCAUAAUUACCCCCAUACUCCUUACACUAUUCCUCAUCACCCAACUAAAAAUAUUAAACACCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[92.50000000 251.39205933]
[92.50000000 236.39205933]
[92.50000000 221.39205933]
[92.50000000 206.39205933]
[92.50000000 191.39205933]
[92.50000000 176.39205933]
[92.50000000 161.39205933]
[92.50000000 146.39205933]
[92.50000000 131.39205933]
[92.50000000 116.39205933]
[86.50658417 111.88329315]
[81.63451385 126.07000732]
[66.63659668 125.82031250]
[62.23948288 111.47927094]
[74.51975250 102.86576080]
[68.52633667 98.35700226]
[54.11412048 102.51488495]
[39.70190430 106.67277527]
[25.28968620 110.83065796]
[11.56963253 116.89367676]
[-1.20772445 124.75109863]
[-13.98508167 132.60852051]
[-21.30741501 147.28215027]
[-37.69051743 148.00743103]
[-46.28085709 134.03823853]
[-38.24142838 119.74490356]
[-21.84250832 119.83116913]
[-9.06515026 111.97373962]
[3.71220732 104.11631775]
[-11.26763821 103.33899689]
[-24.68720055 96.63710785]
[-34.30779648 85.12866974]
[-38.52449417 70.73355103]
[-36.63385010 55.85317612]
[-28.95127296 42.96993256]
[-16.75838470 34.23303223]
[-2.08923316 31.09998131]
[12.60903740 34.09344864]
[24.88442612 42.71405411]
[32.68912125 55.52368546]
[34.72112656 70.38541412]
[30.64145660 84.81996918]
[21.13179970 96.41844177]
[35.54401398 92.26055908]
[49.95623016 88.10266876]
[64.36844635 83.94478607]
[86.41081238 77.76821136]
[100.65320587 86.98593903]
[108.37729645 74.12754059]
[116.10137939 61.26913452]
[123.82546234 48.41073227]
[124.29908752 32.59661865]
[137.48547363 25.67069626]
[145.20956421 12.81229496]
[146.96527100 3.78072023]
[153.23046875 -0.23089407]
[161.22038269 -12.92582417]
[169.21029663 -25.62075424]
[177.20021057 -38.31568146]
[181.35809326 -52.72789764]
[181.35809326 -67.72789764]
[181.35809326 -82.72789764]
[181.35809326 -97.72789764]
[181.35809326 -112.72789764]
[166.78097534 -116.62277222]
[153.70912170 -124.15859985]
[143.03376770 -134.82159424]
[135.48280334 -147.88471985]
[131.57104492 -162.45732117]
[131.56521606 -177.54580688]
[135.46571350 -192.12141418]
[143.00659180 -205.19036865]
[153.67370605 -215.86160278]
[166.73974609 -223.40751648]
[181.31385803 -227.31364441]
[196.40234375 -227.31364441]
[210.97645569 -223.40751648]
[224.04249573 -215.86160278]
[234.70959473 -205.19036865]
[242.25047302 -192.12141418]
[246.15097046 -177.54580688]
[246.14515686 -162.45732117]
[242.23339844 -147.88471985]
[234.68243408 -134.82159424]
[224.00708008 -124.15859985]
[210.93521118 -116.62277222]
[196.35809326 -112.72789764]
[196.35809326 -97.72789764]
[196.35809326 -82.72789764]
[196.35809326 -67.72789764]
[196.35809326 -52.72789764]
[204.23423767 -65.49372864]
[214.62629700 -76.31061554]
[227.06649780 -84.69163513]
[240.99482727 -90.25952911]
[255.78433228 -92.76366425]
[270.76925659 -92.09130859]
[285.27505493 -88.27272797]
[298.64877319 -81.47982025]
[310.28842163 -72.01836395]
[319.66998291 -60.31425476]
[326.37118530 -46.89435577]
[330.09039307 -32.36275101]
[330.66018677 -17.37357712]
[328.05490112 -2.60156083]
[322.39178467 11.28834057]
[313.92581177 23.67088127]
[303.03805542 33.98867035]
[290.21862793 41.77725220]
[276.04458618 46.68603134]
[261.15393066 48.49404144]
[246.21701050 47.11989594]
[231.90617371 42.62545013]
[218.86563110 35.21302032]
[207.68237305 25.21627426]
[198.85983276 13.08520794]
[192.79515076 -0.63410389]
[189.76130676 -15.32409382]
[189.89514160 -30.32576752]
[181.90522766 -17.63083649]
[173.91531372 -4.93590736]
[165.92538452 7.75902224]
[158.06796265 20.53637886]
[150.34388733 33.39478302]
[150.42272949 48.28917694]
[136.68386841 56.13481903]
[128.95977783 68.99321747]
[121.23569489 81.85162354]
[113.51161194 94.71002960]
[124.83626556 84.87375641]
[139.36857605 81.15732574]
[154.02502441 84.34931946]
[165.69570923 93.77243042]
[171.90429688 107.42721558]
[171.33343506 122.41635132]
[164.10423279 135.55935669]
[151.75061035 144.06748962]
[136.89384460 146.13545227]
[122.68630981 141.32444763]
[112.14261627 130.65531921]
[107.50000000 116.39205933]
[107.50000000 131.39205933]
[107.50000000 146.39205933]
[107.50000000 161.39205933]
[107.50000000 176.39205933]
[107.50000000 191.39205933]
[107.50000000 206.39205933]
[107.50000000 221.39205933]
[107.50000000 236.39205933]
[107.50000000 251.39205933]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[16 46]
[17 45]
[18 44]
[19 43]
[20 29]
[21 28]
[22 27]
[48 129]
[49 128]
[50 127]
[51 126]
[53 124]
[54 123]
[56 122]
[57 121]
[58 120]
[59 119]
[60 91]
[61 90]
[62 89]
[63 88]
[64 87]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
