%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:09 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGUAAUAGCUAUAGCAAUAAAACUAGGAAUAGCCCCCUUUCACUUCUGAGUCCCAGAGGUUAxxxxxxxxxxUCACAGUCGCAUCAUAAUCCUCUCUCAAGGACUUCAAACUCUACUCCCACUAAUAGCUUUCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[117.81696320 263.01742554]
[117.50490570 248.02066040]
[117.19284821 233.02391052]
[116.88079071 218.02716064]
[116.56873322 203.03041077]
[116.25668335 188.03364563]
[115.94462585 173.03689575]
[115.63256836 158.04014587]
[115.32051086 143.04339600]
[110.71494293 128.76792908]
[102.20385742 116.41635895]
[102.86569977 131.40174866]
[91.03268433 140.62019348]
[76.66448975 136.31263733]
[71.85462952 122.10470581]
[80.65158081 109.95497894]
[66.74902344 115.58693695]
[52.84646988 121.21889496]
[38.94391251 126.85085297]
[25.04135704 132.48280334]
[25.60919762 147.63052368]
[20.95901489 162.05798340]
[11.65233994 174.02299500]
[-1.18700016 182.08073425]
[-16.00859261 185.25819397]
[-31.02265930 183.17166138]
[-44.41617966 176.07310486]
[-54.57181549 164.81971741]
[-60.26322937 150.77038574]
[-60.80315399 135.62164307]
[-56.12639236 121.20278168]
[-46.79768372 109.25493622]
[-33.94351578 101.22087097]
[-19.11609077 98.07073975]
[-4.10589600 100.18493652]
[9.27451801 107.30815887]
[19.40939903 118.58025360]
[33.31195450 112.94829559]
[47.21451187 107.31633759]
[61.11706924 101.68437958]
[75.01962280 96.05242157]
[82.21022034 91.40261841]
[89.52920532 90.36933899]
[95.57689667 92.51495361]
[96.51252747 77.54415894]
[97.44815063 62.57336807]
[86.51403809 72.84201813]
[71.65336609 74.88174438]
[58.35686493 67.93890381]
[51.53731918 54.57874680]
[53.71442032 39.73758316]
[64.08377075 28.89892006]
[78.81410217 26.06743431]
[92.46285248 32.28930283]
[99.98689270 45.26481247]
[103.38986969 30.65592003]
[106.79284668 16.04702759]
[110.19582367 1.43813407]
[108.72779083 -2.80525661]
[108.72762299 -6.87601233]
[109.95225525 -10.32306385]
[112.03434753 -12.82484055]
[114.53699493 -14.21914101]
[119.14256287 -28.49460220]
[123.74812317 -42.77006149]
[128.35368347 -57.04552078]
[132.95925903 -71.32098389]
[119.77063751 -78.56369781]
[108.19122314 -88.17169189]
[98.63959503 -99.79765320]
[91.46103668 -113.02130127]
[86.91506195 -127.36460876]
[85.16599274 -142.30908203]
[86.27705383 -157.31448364]
[90.20809174 -171.83837891]
[96.81699371 -185.35572815]
[105.86486053 -197.37789917]
[117.02460480 -207.47030640]
[129.89282227 -215.26809692]
[144.00433350 -220.48937988]
[158.84899902 -222.94543457]
[173.89021301 -222.54747009]
[188.58424377 -219.30986023]
[202.39990234 -213.34963989]
[214.83775330 -204.88229370]
[225.44819641 -194.21388245]
[233.84767151 -181.73007202]
[239.73251343 -167.88214111]
[242.89002991 -153.17070007]
[243.20603943 -138.12753296]
[240.66914368 -123.29647064]
[235.37104797 -109.21362305]
[227.50326538 -96.38807678]
[217.35021973 -85.28348541]
[205.27891541 -76.30125427]
[191.72575378 -69.76609802]
[177.18066406 -65.91424561]
[162.16943359 -64.88494873]
[147.23471069 -66.71541595]
[142.62915039 -52.43995667]
[138.02359009 -38.16449738]
[133.41801453 -23.88903618]
[128.81245422 -9.61357594]
[124.80471802 4.84111214]
[121.40174103 19.45000458]
[117.99876404 34.05889893]
[114.59577942 48.66778946]
[112.41894531 63.50899506]
[111.48331451 78.47978973]
[110.54769135 93.45057678]
[114.55542755 107.90526581]
[123.06652069 120.25683594]
[122.35919952 105.27352142]
[124.72383881 90.46108246]
[130.06094360 76.44268799]
[138.14598083 63.80812454]
[148.63877869 53.08893967]
[161.09793091 44.73611069]
[174.99922180 39.10105133]
[189.75782776 36.42083740]
[204.75282288 36.80822754]
[219.35336304 40.24692535]
[232.94514465 46.59226227]
[244.95637512 55.57727814]
[254.88169861 66.82395935]
[262.30355835 79.85913849]
[266.90969849 94.13441467]
[268.50634766 109.04919434]
[267.02630615 123.97600555]
[262.53186035 138.28683472]
[255.21209717 151.37962341]
[245.37495422 162.70352173]
[233.43431091 171.78211975]
[219.89253235 178.23348999]
[205.31932068 181.78617859]
[190.32780457 182.29074097]
[175.54870605 179.72593689]
[161.60379028 174.19969177]
[149.07975769 165.94447327]
[138.50349426 155.30761719]
[130.31726074 142.73133850]
[130.62931824 157.72808838]
[130.94137573 172.72483826]
[131.25343323 187.72158813]
[131.56549072 202.71835327]
[131.87754822 217.71510315]
[132.18960571 232.71185303]
[132.50166321 247.70860291]
[132.81372070 262.70535278]
[135.40470886 281.91308594]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 149]
[2 148]
[3 147]
[4 146]
[5 145]
[6 144]
[7 143]
[8 142]
[9 141]
[10 112]
[11 111]
[16 41]
[17 40]
[18 39]
[19 38]
[20 37]
[44 110]
[45 109]
[46 108]
[55 107]
[56 106]
[57 105]
[58 104]
[63 103]
[64 102]
[65 101]
[66 100]
[67 99]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
