%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:06 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCAUGAUUUGAGAAGCCUUCGCUUCGAAGCGAAAAGUCCUAAUAGUAGAAGAACCCUCCAUxxxxxxxxxxAUCGUCCCAACAAUUAUAUUACUACCACUGACAUGACUUUCCAAAAAACACAUAAUUUGACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[122.90357971 432.57394409]
[122.90357971 417.57394409]
[122.90357971 402.57394409]
[122.90357971 387.57394409]
[122.90357971 372.57394409]
[122.90357971 357.57394409]
[122.90357971 342.57394409]
[122.90357971 327.57394409]
[122.90357971 312.57394409]
[122.90357971 297.57394409]
[103.00334930 289.89620972]
[88.21015167 274.47247314]
[81.34275055 254.19107056]
[83.73114014 232.87059021]
[94.95911407 214.54101562]
[112.93632507 202.68191528]
[109.83799744 188.00538635]
[106.73967743 173.32885742]
[103.64135742 158.65234375]
[99.15344238 152.71902466]
[100.63459015 143.63838196]
[97.84226990 128.90057373]
[95.04994202 114.16276550]
[87.53240204 127.14300537]
[72.56652069 126.13184357]
[66.86333466 112.25835419]
[76.79219055 101.01345825]
[61.92914200 103.03578949]
[47.06609344 105.05812073]
[32.20304871 107.08045959]
[17.34000206 109.10279083]
[2.47695446 111.12512970]
[-10.15166092 121.58696747]
[-25.42995262 115.62828827]
[-27.64092255 99.37886810]
[-14.51011658 89.55471802]
[0.45462000 96.26207733]
[15.31766701 94.23974609]
[30.18071365 92.21741486]
[45.04376221 90.19507599]
[59.90680695 88.17274475]
[74.76985168 86.15040588]
[86.43080902 87.32775879]
[95.49091339 92.97071075]
[98.89389038 78.36181641]
[102.29686737 63.75292587]
[105.69984436 49.14403152]
[91.45081329 44.42383194]
[77.69005585 38.42744446]
[64.53159332 31.20455360]
[52.08446884 22.81501579]
[40.45182419 13.32834721]
[29.73005676 2.82316160]
[20.00800896 -8.61349106]
[11.36624241 -20.88684082]
[3.87636805 -33.89518356]
[-2.39955020 -47.53073120]
[-7.40950680 -61.68048477]
[-11.11198711 -76.22720337]
[-13.47630978 -91.05033112]
[-14.48288441 -106.02704620]
[-14.12336826 -121.03324890]
[-12.40074158 -135.94458008]
[-9.32927799 -150.63748169]
[-4.93443060 -164.99020386]
[0.74738389 -178.88380432]
[7.66908312 -192.20315552]
[15.77331066 -204.83790588]
[24.99291039 -216.68333435]
[35.25148392 -227.64129639]
[46.46402740 -237.62098694]
[58.53762054 -246.53970337]
[71.37222290 -254.32354736]
[84.86148071 -260.90802002]
[98.89360809 -266.23855591]
[113.35233307 -270.27096558]
[128.11784363 -272.97186279]
[143.06779480 -274.31887817]
[158.07829285 -274.30078125]
[173.02494812 -272.91781616]
[187.78392029 -270.18136597]
[202.23289490 -266.11413574]
[216.25215149 -260.74984741]
[229.72550964 -254.13291931]
[242.54133606 -246.31819153]
[254.59342957 -237.37043762]
[265.78189087 -227.36378479]
[276.01406860 -216.38116455]
[285.20510864 -204.51356506]
[293.27890015 -191.85934448]
[300.16851807 -178.52336121]
[305.81686401 -164.61611938]
[310.17715454 -150.25285339]
[313.21322632 -135.55261230]
[314.89993286 -120.63716888]
[315.22332764 -105.63014984]
[314.18069458 -90.65589905]
[311.78070068 -75.83850098]
[308.04321289 -61.30074692]
[302.99920654 -47.16309357]
[296.69046021 -33.54269791]
[289.16931152 -20.55242348]
[280.49801636 -8.29991531]
[270.74844360 3.11329746]
[260.00143433 13.59263897]
[248.34597778 23.05127335]
[235.87869263 31.41082001]
[222.70288086 38.60200882]
[208.92771912 44.56525040]
[194.66735840 49.25112915]
[180.03997803 52.62081909]
[165.16676331 54.64639282]
[150.17098999 55.31106567]
[135.17689514 54.60933304]
[120.30873871 52.54700851]
[116.90576172 67.15590668]
[113.50278473 81.76479340]
[110.09980774 96.37368774]
[109.78775024 111.37044525]
[112.58007812 126.10824585]
[115.37239838 140.84605408]
[118.31787872 155.55401611]
[121.41620636 170.23054504]
[124.51452637 184.90705872]
[127.61284637 199.58358765]
[137.02569580 199.98497009]
[146.18617249 202.15777588]
[154.76422119 206.02107239]
[162.45126343 211.43310547]
[168.97131348 218.19641113]
[174.09086609 226.06510925]
[177.62728882 234.75376892]
[179.45530701 243.94781494]
[179.51142883 253.31489563]
[177.79623413 262.51687622]
[174.37409973 271.22207642]
[169.37097168 279.11724854]
[162.96957397 285.91879272]
[155.40284729 291.38290405]
[146.94538879 295.31451416]
[137.90357971 297.57394409]
[137.90357971 312.57394409]
[137.90357971 327.57394409]
[137.90357971 342.57394409]
[137.90357971 357.57394409]
[137.90357971 372.57394409]
[137.90357971 387.57394409]
[137.90357971 402.57394409]
[137.90357971 417.57394409]
[137.90357971 432.57394409]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[16 125]
[17 124]
[18 123]
[19 122]
[21 121]
[22 120]
[23 119]
[27 42]
[28 41]
[29 40]
[30 39]
[31 38]
[32 37]
[44 118]
[45 117]
[46 116]
[47 115]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
