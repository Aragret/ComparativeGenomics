%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:03 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCUCUAGCAUCACCAGUAUUAGAGGCACCGCCUGCCCAGUGACACAUGUUUAACGGCCGCGxxxxxxxxxxGGUUAUACCCUUCCCGUACUAAUUAAUCCCCUGGCCCAACCCGUCAUCUACUCUACCAUCCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[92.50000000 270.71090698]
[92.50000000 255.71089172]
[92.50000000 240.71089172]
[92.50000000 225.71089172]
[92.50000000 210.71089172]
[92.50000000 195.71089172]
[92.50000000 180.71089172]
[92.50000000 165.71089172]
[92.50000000 150.71089172]
[92.50000000 135.71089172]
[82.09905243 135.14312744]
[71.56727600 131.43928528]
[59.67489624 140.58102417]
[47.78251648 149.72274780]
[35.89013672 158.86448669]
[39.49910355 173.65959167]
[36.77195740 188.64233398]
[28.18119621 201.21685791]
[15.21521664 209.20455933]
[0.12045611 211.22151184]
[-14.48782825 206.91825867]
[-26.07866287 197.04039001]
[-32.64386368 183.29928589]
[-33.04597092 168.07566833]
[-27.21532059 154.00714111]
[-16.16210365 143.53115845]
[-1.80135715 138.46273804]
[13.37883091 139.68002319]
[26.74840164 146.97210693]
[38.64078140 137.83036804]
[50.53316116 128.68864441]
[62.42554092 119.54690552]
[57.96872711 105.22430420]
[42.98900986 104.44445801]
[28.00929642 103.66461945]
[13.02958298 102.88477325]
[0.19646633 112.51237488]
[-15.29518509 108.34244537]
[-21.56150246 93.57379913]
[-13.79550266 79.53568268]
[2.04540300 76.99692535]
[13.80942822 87.90505981]
[28.78914261 88.68490601]
[43.76885605 89.46474457]
[58.74856949 90.24459076]
[80.65264893 65.63195038]
[111.23994446 65.28427887]
[118.69485474 52.26796722]
[126.01396179 39.17481232]
[133.19647217 26.00622940]
[140.37898254 12.83764648]
[147.56149292 -0.33093631]
[140.10331726 -15.47781181]
[143.08966064 -31.92662239]
[155.15461731 -43.25810623]
[171.42889404 -45.16951752]
[178.33589172 -58.48467255]
[163.65303040 -55.41648483]
[150.99678040 -63.46753311]
[147.55278015 -78.06681061]
[155.27636719 -90.92551422]
[169.78245544 -94.74305725]
[182.83512878 -87.35202789]
[187.02355957 -72.94716644]
[195.53465271 -85.29873657]
[204.04573059 -97.65031433]
[212.55682373 -110.00188446]
[201.43203735 -120.09755707]
[191.75218201 -131.58598328]
[183.69001770 -144.26213074]
[177.38940430 -157.89979553]
[172.96279907 -172.25556946]
[170.48918152 -187.07328796]
[170.01271057 -202.08850098]
[171.54188538 -217.03323364]
[175.04942322 -231.64077759]
[180.47271729 -245.65046692]
[187.71499634 -258.81225586]
[196.64698792 -270.89129639]
[207.10931396 -281.67196655]
[218.91526794 -290.96191406]
[231.85412598 -298.59533691]
[245.69500732 -304.43603516]
[260.19088745 -308.37973022]
[275.08309937 -310.35604858]
[290.10583496 -310.32974243]
[304.99102783 -308.30126953]
[319.47299194 -304.30682373]
[333.29333496 -298.41769409]
[346.20538330 -290.73901367]
[357.97872925 -281.40777588]
[368.40322876 -270.59051514]
[377.29287720 -258.48028564]
[384.48901367 -245.29318237]
[389.86318970 -231.26458740]
[393.31954956 -216.64485168]
[394.79635620 -201.69483948]
[394.26730347 -186.68139648]
[391.74182129 -171.87243652]
[387.26495361 -157.53224182]
[380.91662598 -143.91674805]
[372.81008911 -131.26890564]
[363.09005737 -119.81445312]
[351.92999268 -109.75780487]
[339.52902222 -101.27843475]
[326.10848999 -94.52767181]
[311.90789795 -89.62597656]
[297.18066406 -86.66083527]
[282.18963623 -85.68516541]
[267.20230103 -86.71637726]
[252.48616028 -89.73606873]
[238.30381775 -94.69034576]
[224.90840149 -101.49079132]
[216.39730835 -89.13922119]
[207.88621521 -76.78765106]
[199.37512207 -64.43607330]
[191.65104675 -51.57767487]
[184.74404907 -38.26251602]
[191.81303406 -26.89478493]
[192.32965088 -13.40980816]
[186.05099487 -1.34211814]
[174.52943420 6.09201717]
[160.73007202 6.85157251]
[153.54756165 20.02015495]
[146.36505127 33.18873596]
[139.18254089 46.35731888]
[138.73793030 53.78348923]
[131.71116638 59.72287750]
[124.25625610 72.73918915]
[128.83349609 77.63601685]
[132.43778992 83.28749084]
[134.94750977 89.50289917]
[136.27799988 96.07250977]
[136.38432312 102.77465820]
[135.26292419 109.38317871]
[132.95162964 115.67507172]
[129.52844238 121.43803406]
[125.10884857 126.47760773]
[119.84199524 130.62373352]
[113.90560913 133.73651123]
[107.50000000 135.71089172]
[107.50000000 150.71089172]
[107.50000000 165.71089172]
[107.50000000 180.71089172]
[107.50000000 195.71089172]
[107.50000000 210.71089172]
[107.50000000 225.71089172]
[107.50000000 240.71089172]
[107.50000000 255.71089172]
[107.50000000 270.71090698]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[12 32]
[13 31]
[14 30]
[15 29]
[33 45]
[34 44]
[35 43]
[36 42]
[47 129]
[48 128]
[49 126]
[50 125]
[51 124]
[52 123]
[56 118]
[57 117]
[64 116]
[65 115]
[66 114]
[67 113]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
