%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:41 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGUAUGAGAAUCGAACCCAUCCCUGAGAAUCCAAAAUUCUCCGUGCCACCUAUCACACCCCAxxxxxxxxxxCCGAAUUGGUAUAUAGUUUAAACAAAACGAAUGAUUUCGACUCAUUAAAUUAUGAUAAUCCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[161.25674438 500.47198486]
[161.25674438 485.47198486]
[161.25674438 470.47198486]
[161.25674438 455.47198486]
[161.25674438 440.47198486]
[161.25674438 425.47198486]
[161.25674438 410.47198486]
[161.25674438 395.47198486]
[161.25674438 380.47198486]
[161.25674438 365.47198486]
[159.38912964 350.58871460]
[155.38139343 336.13403320]
[151.07380676 321.76583862]
[146.76622009 307.39767456]
[142.45863342 293.02947998]
[138.15106201 278.66128540]
[134.38984680 275.62338257]
[132.53576660 270.16503906]
[133.97656250 263.60519409]
[130.27040100 249.07025146]
[126.56423950 234.53530884]
[122.85807800 220.00038147]
[119.15191650 205.46543884]
[106.25292969 198.10664368]
[102.28730011 183.41896057]
[110.09333801 169.93920898]
[106.38717651 155.40426636]
[102.68101501 140.86933899]
[89.78887177 139.66387939]
[77.91730499 134.49412537]
[68.25284576 125.87679291]
[61.76141739 114.67314148]
[59.09182739 102.00295258]
[44.22878265 99.98062134]
[29.36573601 97.95828247]
[14.50268841 95.93595123]
[-0.36035857 93.91361237]
[-15.22340584 91.89128113]
[-28.81240273 100.41880798]
[-43.90381241 94.97557068]
[-48.92079926 79.73715210]
[-40.01475906 66.39316559]
[-24.01764488 65.17996979]
[-13.20107079 77.02823639]
[1.66197586 79.05056763]
[16.52502251 81.07290649]
[31.38806915 83.09523773]
[46.25111771 85.11756897]
[61.11416245 87.13990784]
[62.99781418 69.41535950]
[73.18452454 51.91697311]
[62.97104645 40.93130493]
[52.75756836 29.94564247]
[37.37012100 31.94717026]
[23.76108932 24.49238014]
[17.16342163 10.44779301]
[20.11405754 -4.78616142]
[31.47841835 -15.35171700]
[46.88667297 -17.18620300]
[60.41403198 -9.58421993]
[66.85895538 4.53111267]
[63.74323273 19.73216248]
[73.95671082 30.71782684]
[84.17018890 41.70349121]
[98.34674835 36.80194092]
[99.59362030 21.85385323]
[100.84049988 6.90576696]
[86.74581146 1.47286594]
[74.75351715 -7.71199274]
[65.83578491 -19.90423393]
[60.71553421 -34.11548615]
[59.80783463 -49.19370651]
[63.18627930 -63.91657257]
[70.57698059 -77.09056854]
[81.38082123 -87.64773560]
[94.72196960 -94.73225403]
[109.51892853 -97.76980591]
[124.57216644 -96.51416016]
[138.66139221 -91.06710815]
[150.64445496 -81.87020111]
[159.54992676 -69.66901398]
[164.65589905 -55.45262146]
[165.54844666 -40.37349701]
[162.15522766 -25.65402985]
[154.75128174 -12.48746681]
[143.93684387 -1.94115818]
[130.58859253 5.12995195]
[115.78858185 8.15264130]
[114.54170990 23.10072899]
[113.29483795 38.04881668]
[119.51455688 42.23988724]
[123.64263153 27.81910324]
[138.63325500 27.28905296]
[143.76954651 41.38226318]
[131.95399475 50.62202835]
[138.17372131 54.81310272]
[151.55999756 48.04498672]
[164.94628906 41.27687073]
[178.33256531 34.50875854]
[184.68370056 19.77638817]
[200.19906616 15.69560051]
[212.97662354 25.39682770]
[213.21450806 41.43811798]
[200.73023987 51.51396561]
[185.10069275 47.89504242]
[171.71440125 54.66315842]
[158.32810974 61.43127060]
[144.94183350 68.19938660]
[150.33064270 98.41181183]
[138.85827637 123.96965027]
[117.21595001 137.16317749]
[120.92211151 151.69810486]
[124.62827301 166.23304749]
[137.93579102 174.32919312]
[141.48730469 189.12248230]
[133.68685913 201.75927734]
[137.39302063 216.29421997]
[141.09918213 230.82914734]
[144.80534363 245.36408997]
[148.51150513 259.89901733]
[152.51924133 274.35369873]
[156.82682800 288.72189331]
[161.13441467 303.09008789]
[165.44200134 317.45825195]
[169.74957275 331.82644653]
[174.36259460 336.70779419]
[175.58393860 342.34158325]
[173.92407227 346.88256836]
[179.37786865 332.90914917]
[190.27206421 322.59814453]
[204.52409363 317.92062378]
[219.40957642 319.77069092]
[232.08297729 327.79470825]
[240.12165833 340.45880127]
[241.98893738 355.34213257]
[237.32789612 369.59957886]
[227.02951050 380.50567627]
[213.06242371 385.97564697]
[198.09658813 384.96383667]
[184.99287415 377.66366577]
[176.25674438 365.47198486]
[176.25674438 380.47198486]
[176.25674438 395.47198486]
[176.25674438 410.47198486]
[176.25674438 425.47198486]
[176.25674438 440.47198486]
[176.25674438 455.47198486]
[176.25674438 470.47198486]
[176.25674438 485.47198486]
[176.25674438 500.47198486]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[11 128]
[12 125]
[13 124]
[14 123]
[15 122]
[16 121]
[19 120]
[20 119]
[21 118]
[22 117]
[23 116]
[26 113]
[27 112]
[28 111]
[33 49]
[34 48]
[35 47]
[36 46]
[37 45]
[38 44]
[51 64]
[52 63]
[53 62]
[65 90]
[66 89]
[67 88]
[96 108]
[97 107]
[98 106]
[99 105]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
