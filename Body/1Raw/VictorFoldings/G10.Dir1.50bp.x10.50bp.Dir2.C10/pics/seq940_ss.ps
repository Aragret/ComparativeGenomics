%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:37 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGAGGUUUGGUCCUAGCCUUUCUAUUAGCUCUUAGUAAGAUUACACAUGCAAGCAUCCCCGUxxxxxxxxxxUGAUUAACCUUUAGCAAUAAACGAAAGUUUAACUAAGCUAUACUAACCCCAGGGUUGGUCCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[92.50000000 251.92167664]
[92.50000000 236.92167664]
[92.50000000 221.92167664]
[92.50000000 206.92167664]
[92.50000000 191.92167664]
[92.50000000 176.92167664]
[92.50000000 161.92167664]
[92.50000000 146.92167664]
[92.50000000 131.92167664]
[92.50000000 116.92167664]
[78.37519836 111.87292480]
[68.86683655 123.47426605]
[59.35847855 135.07560730]
[61.16701126 150.77607727]
[51.27861404 163.10470581]
[35.55990219 164.74714661]
[23.33650398 154.72895813]
[21.86034966 138.99375916]
[32.00720978 126.87696075]
[47.75713730 125.56724548]
[57.26549911 113.96590424]
[66.77385712 102.36456299]
[58.39171219 89.92512512]
[44.06911469 94.38194275]
[29.74651718 98.83875275]
[26.44425583 113.83844757]
[16.07272911 125.16659546]
[1.42182291 129.77598572]
[-13.56744099 126.42672729]
[-24.86302567 116.01974487]
[-29.42647552 101.35446167]
[-26.03024483 86.37577057]
[-15.58790588 75.11286163]
[-0.90839130 70.59540558]
[14.05958080 74.03856659]
[25.28970146 84.51615906]
[39.61230087 80.05934143]
[53.93489838 75.60252380]
[79.80833435 76.10608673]
[96.72119141 90.08947754]
[101.32675934 75.81401825]
[105.93232727 61.53855515]
[110.53788757 47.26309586]
[115.14345551 32.98763657]
[119.74901581 18.71217537]
[124.20583344 4.38957739]
[128.51341248 -9.97860622]
[125.06504822 -25.41943932]
[136.13136292 -35.38868713]
[140.43894958 -49.75687027]
[144.74653625 -64.12505341]
[134.17733765 -74.60562134]
[129.62577820 -88.68756104]
[132.03343201 -103.20317078]
[140.78550720 -114.92482758]
[153.86546326 -121.28266907]
[154.17752075 -136.27941895]
[154.48957825 -151.27616882]
[154.48957825 -166.27616882]
[154.17752075 -181.27293396]
[153.86546326 -196.26968384]
[139.09185791 -199.19453430]
[125.29258728 -205.22729492]
[113.11307526 -214.08583069]
[103.12297058 -225.35578918]
[95.78953552 -238.51005554]
[91.45575714 -252.93338013]
[90.32434845 -267.95117188]
[92.44821167 -282.86099243]
[97.72802734 -296.96554565]
[105.91683197 -309.60504150]
[116.63163757 -320.18838501]
[129.37127686 -328.22055054]
[143.53990173 -333.32586670]
[158.47482300 -335.26550293]
[173.47749329 -333.94879150]
[187.84623718 -329.43731689]
[200.90898132 -321.94204712]
[212.05474854 -311.81359863]
[220.76225281 -299.52566528]
[226.62422180 -285.65298462]
[229.36648560 -270.84439087]
[228.86076355 -255.79254150]
[225.13073730 -241.20141602]
[218.35084534 -227.75347900]
[208.83819580 -216.07769775]
[197.03771973 -206.72018433]
[183.50135803 -200.11862183]
[168.86221313 -196.58174133]
[169.17427063 -181.58499146]
[169.48632812 -166.58822632]
[172.29911804 -162.65583801]
[172.62742615 -156.90052795]
[169.48632812 -150.96412659]
[169.17427063 -135.96736145]
[168.86221313 -120.97061157]
[178.42176819 -116.46187592]
[185.88502502 -108.97765350]
[199.90173340 -114.31916809]
[213.91845703 -119.66068268]
[227.93516541 -125.00219727]
[241.95187378 -130.34370422]
[251.87779236 -143.39776611]
[268.10952759 -141.06056213]
[273.94927979 -125.73641968]
[263.38961792 -113.18949890]
[247.29339600 -116.32699585]
[233.27667236 -110.98548126]
[219.25996399 -105.64396667]
[205.24325562 -100.30245209]
[191.22653198 -94.96094513]
[188.48001099 -77.53800201]
[176.51837158 -64.34247589]
[159.11471558 -59.81747055]
[154.80712891 -45.44928741]
[150.49954224 -31.08110237]
[154.25602722 -16.66797829]
[142.88160706 -5.67102194]
[138.57402039 8.69716263]
[139.67291260 16.05502129]
[134.02447510 23.31773949]
[129.41891479 37.59320068]
[124.81334686 51.86865997]
[120.20778656 66.14411926]
[115.60221863 80.41957855]
[110.99665833 94.69504547]
[119.88136292 82.60942841]
[132.61924744 74.68817139]
[147.38800049 72.06448364]
[162.07479858 75.11372375]
[174.57853699 83.39965820]
[183.11039734 95.73688507]
[186.44981384 110.36044312]
[184.11904907 125.17825317]
[176.45152283 138.07046509]
[164.54418945 147.19270325]
[150.10050964 151.23994446]
[135.18681335 149.63314819]
[121.93668365 142.60223389]
[112.24568176 131.15301514]
[107.50000000 116.92167664]
[107.50000000 131.92167664]
[107.50000000 146.92167664]
[107.50000000 161.92167664]
[107.50000000 176.92167664]
[107.50000000 191.92167664]
[107.50000000 206.92167664]
[107.50000000 221.92167664]
[107.50000000 236.92167664]
[107.50000000 251.92167664]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[11 22]
[12 21]
[13 20]
[23 38]
[24 37]
[25 36]
[40 126]
[41 125]
[42 124]
[43 123]
[44 122]
[45 121]
[46 119]
[47 118]
[49 116]
[50 115]
[51 114]
[56 96]
[57 95]
[58 94]
[59 91]
[60 90]
[61 89]
[98 111]
[99 110]
[100 109]
[101 108]
[102 107]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
