%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:31 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGUCAAUAUUACAGGCGAACAUACUUACUAAAGUGUGUUAAUUAAUUAAUGCUUGUAGGACAxxxxxxxxxxGACUCCACUUAUGACUCCCUAAAGCCCAUGUCGAAGCCCCCAUCGCUGGGUCAAUAGUACCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[92.50000000 260.37249756]
[92.50000000 245.37248230]
[92.50000000 230.37248230]
[92.50000000 215.37248230]
[92.50000000 200.37248230]
[92.50000000 185.37248230]
[92.50000000 170.37248230]
[92.50000000 155.37248230]
[92.50000000 140.37248230]
[92.50000000 125.37248993]
[90.57687378 140.24870300]
[79.94998169 150.83497620]
[65.06652069 152.70114136]
[52.15497208 145.06622314]
[46.61860657 131.12533569]
[50.77430725 116.71248627]
[62.88297653 107.85923004]
[77.87852478 108.27095795]
[63.06076431 105.93984985]
[48.24300385 103.60874939]
[33.42524719 101.27764130]
[18.60748863 98.94654083]
[3.78973150 96.61544037]
[-11.02802658 94.28433228]
[-25.84578514 91.95323181]
[-40.82550049 91.17338562]
[-55.80521393 91.95323181]
[-70.78492737 92.73307800]
[-85.76464081 93.51291656]
[-100.74435425 94.29276276]
[-115.72406769 95.07260895]
[-130.70378113 95.85245514]
[-145.68350220 96.63230133]
[-160.66320801 97.41214752]
[-174.11776733 106.78802490]
[-188.84786987 99.57996368]
[-189.70045471 83.20299530]
[-175.79846191 74.50434113]
[-161.44305420 82.43243408]
[-146.46334839 81.65258789]
[-131.48362732 80.87274170]
[-116.50391388 80.09289551]
[-101.52420044 79.31304932]
[-86.54448700 78.53320312]
[-71.56477356 77.75335693]
[-56.58506012 76.97351837]
[-41.60534286 76.19367218]
[-53.80052185 67.45996094]
[-60.12008286 53.85617065]
[-58.92823029 38.90359497]
[-50.53347015 26.47266579]
[-37.10876083 19.78108978]
[-22.12904549 20.56096268]
[-9.47178268 28.61041451]
[-2.41326261 41.84587097]
[-2.78056264 56.84137344]
[-10.47860813 69.71538544]
[-23.51468086 77.13546753]
[-8.69692230 79.46657562]
[6.12083530 81.79767609]
[20.93859291 84.12878418]
[35.75635147 86.45988464]
[50.57410812 88.79099274]
[65.39186859 91.12209320]
[80.20962524 93.45320129]
[91.71142578 83.82466888]
[92.02348328 68.82791901]
[92.33554077 53.83116531]
[78.28868866 48.08221817]
[67.26983643 37.64433670]
[60.76919937 23.92915916]
[59.66592789 8.79154873]
[64.10923004 -5.72125530]
[73.49819183 -17.64651489]
[86.56303406 -25.37143898]
[101.53683472 -27.85129356]
[116.39451599 -24.75069809]
[129.12670898 -16.48898315]
[138.01145935 -4.18347883]
[141.84721375 10.50159740]
[140.11518860 25.58020973]
[133.04965210 39.01309967]
[121.60613251 48.98357773]
[107.33229828 54.14322281]
[107.02024078 69.13997650]
[106.70818329 84.13672638]
[112.45696259 74.55780029]
[119.26900482 65.59568787]
[130.56800842 55.72996521]
[141.86701965 45.86423874]
[138.24928284 30.99243546]
[141.96846008 16.14567566]
[152.16990662 4.73563528]
[166.50941467 -0.61573994]
[181.69186401 1.32125640]
[194.22842407 10.10151672]
[201.23831177 23.70740128]
[201.11068726 39.01237869]
[193.87489319 52.49947357]
[181.19364929 61.06945419]
[165.98101807 62.75300217]
[151.73274231 57.16324615]
[140.43373108 67.02896881]
[129.13473511 76.89469147]
[133.14247131 91.34938049]
[147.90852356 93.98824310]
[162.67457581 96.62710571]
[177.44064331 99.26597595]
[186.50538635 97.69043732]
[192.48506165 102.11639404]
[201.58061218 100.72978210]
[207.46693420 105.27917480]
[222.11042786 108.52999878]
[236.75393677 111.78082275]
[248.28886414 101.40176392]
[263.72494507 99.81847382]
[277.12670898 107.63976288]
[283.34088135 121.85819244]
[279.97799683 137.00648499]
[268.33114624 147.25979614]
[252.87878418 148.67555237]
[239.56266785 140.70933533]
[233.50311279 126.42432404]
[218.85960388 123.17350006]
[204.21611023 119.92267609]
[189.53958130 116.82435608]
[174.80177307 114.03202820]
[160.03572083 111.39316559]
[145.26966858 108.75430298]
[130.50360107 106.11543274]
[124.75270844 110.92969513]
[136.44599915 120.32474518]
[151.12443542 123.41400146]
[159.81105042 135.64276123]
[157.89491272 150.51986694]
[146.39311218 160.14840698]
[131.41093445 159.41743469]
[120.90107727 148.71496582]
[120.44228363 133.72196960]
[113.25090027 120.55822754]
[107.50000000 125.37248993]
[107.50000000 140.37248230]
[107.50000000 155.37248230]
[107.50000000 170.37248230]
[107.50000000 185.37248230]
[107.50000000 200.37248230]
[107.50000000 215.37248230]
[107.50000000 230.37248230]
[107.50000000 245.37248230]
[107.50000000 260.37249756]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[18 65]
[19 64]
[20 63]
[21 62]
[22 61]
[23 60]
[24 59]
[25 58]
[26 47]
[27 46]
[28 45]
[29 44]
[30 43]
[31 42]
[32 41]
[33 40]
[34 39]
[66 86]
[67 85]
[68 84]
[88 104]
[89 103]
[90 102]
[105 130]
[106 129]
[107 128]
[108 127]
[110 126]
[112 125]
[113 124]
[114 123]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
