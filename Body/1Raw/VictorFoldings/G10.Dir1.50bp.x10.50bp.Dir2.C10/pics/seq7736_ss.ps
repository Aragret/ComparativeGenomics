%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:39 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGUGGCCACCAAUGGUACUGAACCUACGAGUACACCGACUACGGCGGACUAAUCUUCAACUCxxxxxxxxxxGAGCCUUUUACCACUCCAGCCUAGCCCCUACCCCCCAAUUAGGAGGGCACUGGCCCCCAACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[197.07449341 452.08740234]
[196.76243591 437.09066772]
[196.45037842 422.09390259]
[196.13832092 407.09713745]
[195.82626343 392.10040283]
[195.51420593 377.10363770]
[195.20214844 362.10687256]
[194.89009094 347.11013794]
[194.57803345 332.11337280]
[192.71041870 317.23010254]
[189.30744934 302.62121582]
[185.90446472 288.01229858]
[175.48153687 277.37222290]
[179.88632202 262.17654419]
[176.48333740 247.56764221]
[166.06040955 236.92755127]
[170.46517944 221.73187256]
[167.06221008 207.12298584]
[163.50744629 192.55027771]
[159.80128479 178.01535034]
[152.48217773 164.92219543]
[142.04235840 154.15138245]
[131.60255432 143.38056946]
[121.16274261 132.60977173]
[110.72293091 121.83895874]
[86.61509705 120.31663513]
[75.70185852 98.76655579]
[61.68514252 93.42504120]
[47.66843033 88.08352661]
[33.65171814 82.74201965]
[24.39884949 91.85298920]
[12.42217350 96.74883270]
[-0.46963698 96.72867584]
[-12.34426785 91.83113861]
[-21.43538857 82.82324219]
[-26.40537834 71.08049774]
[-26.54206657 58.37691498]
[-40.32444763 52.45695114]
[-54.10683060 46.53698730]
[-69.84041595 48.19977951]
[-78.48091888 36.06755447]
[-94.21450806 37.73034668]
[-102.85501099 25.59812164]
[-116.63739014 19.67815781]
[-130.41976929 13.75819492]
[-146.63256836 16.22339821]
[-156.66117859 3.24807167]
[-150.18902588 -11.81988144]
[-133.87409973 -13.47984314]
[-124.49980927 -0.02418613]
[-110.71743011 5.89577675]
[-96.93505096 11.81573963]
[-82.18727112 9.72951031]
[-72.56095886 22.28517342]
[-57.81317902 20.19894409]
[-48.18686676 32.75460434]
[-34.40448380 38.67456818]
[-20.62210464 44.59453201]
[-7.26739883 33.81232071]
[9.79048824 31.22734261]
[25.90479660 37.63419342]
[36.64013290 51.36561584]
[38.99322891 68.72530365]
[53.00994110 74.06681824]
[67.02665710 79.40833282]
[81.04336548 84.74983978]
[86.19533539 79.96621704]
[92.50000000 76.85543060]
[92.50000000 61.85542679]
[92.50000000 46.85542679]
[79.15887451 39.24557495]
[71.42390442 25.97659492]
[71.37576294 10.61777878]
[79.02739716 -2.69943094]
[92.32055664 -10.39277077]
[107.67944336 -10.39277077]
[120.97260284 -2.69943094]
[128.62423706 10.61777878]
[128.57609558 25.97659492]
[120.84112549 39.24557495]
[107.50000000 46.85542679]
[107.50000000 61.85542679]
[107.50000000 76.85543060]
[113.82193756 79.97813416]
[118.98291016 84.78256226]
[122.54941559 90.86518097]
[124.22189331 97.71507263]
[123.85986328 104.75688171]
[121.49373627 111.39914703]
[131.93354797 122.16995239]
[142.37336731 132.94076538]
[152.81317139 143.71156311]
[163.25299072 154.48237610]
[159.94734192 139.85115051]
[160.03918457 124.85143280]
[163.52377319 110.26179504]
[170.22021484 96.83950806]
[179.78092957 85.28128815]
[191.70967102 76.18704987]
[205.38726807 70.02885437]
[220.10377502 67.12634277]
[235.09530640 67.63017273]
[249.58374023 71.51418304]
[262.81701660 78.57678223]
[274.10827637 88.45137787]
[282.87139893 100.62541962]
[288.65158081 114.46701050]
[291.14877319 129.25769043]
[290.23333740 144.22972107]
[285.95281982 158.60600281]
[278.52941895 171.64028931]
[268.34838867 182.65605164]
[255.93823242 191.08148193]
[241.94309998 196.47927856]
[227.08941650 198.56925964]
[212.14816284 197.24291992]
[197.89489746 192.56913757]
[185.06942749 184.79048157]
[174.33621216 174.30918884]
[178.04237366 188.84411621]
[183.22680664 196.44502258]
[181.67109680 203.72000122]
[185.07408142 218.32890320]
[195.74041748 230.01391602]
[191.09222412 244.16467285]
[194.49520874 258.77355957]
[205.16154480 270.45858765]
[200.51336670 284.60934448]
[203.91633606 299.21823120]
[207.31932068 313.82711792]
[213.77139282 300.28567505]
[226.05123901 291.67144775]
[240.98028564 290.21417236]
[254.69418335 296.29110718]
[263.64312744 308.32922363]
[265.51071167 323.21252441]
[259.81353760 337.08847046]
[248.02626038 346.36532593]
[233.20001221 348.64184570]
[219.17251587 343.32870483]
[209.57479858 331.80133057]
[209.88685608 346.79806519]
[210.19889832 361.79483032]
[210.51095581 376.79159546]
[210.82301331 391.78833008]
[211.13507080 406.78509521]
[211.44712830 421.78182983]
[211.75918579 436.77859497]
[212.07124329 451.77536011]
[214.66224670 470.98306274]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 149]
[2 148]
[3 147]
[4 146]
[5 145]
[6 144]
[7 143]
[8 142]
[9 141]
[10 130]
[11 129]
[12 128]
[14 126]
[15 125]
[17 123]
[18 122]
[19 120]
[20 119]
[21 93]
[22 92]
[23 91]
[24 90]
[25 89]
[27 66]
[28 65]
[29 64]
[30 63]
[37 58]
[38 57]
[39 56]
[41 54]
[43 52]
[44 51]
[45 50]
[68 83]
[69 82]
[70 81]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
