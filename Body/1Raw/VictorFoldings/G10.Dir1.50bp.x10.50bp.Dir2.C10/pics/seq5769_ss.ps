%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:50 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGACAGUUUGAACAUACAAAACCCACCCCAUUCCUCCCCACACUCAUCGCCCUUACCACGCUACxxxxxxxxxxCCUCUCUCCUACUCCUGCUCGCAUCUGCUAUAGUGGAGGCCGGAGCAGGAACAGGUUGAACACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[-36.85754013 202.28547668]
[-49.25519562 210.72929382]
[-61.65285492 219.17311096]
[-74.05051422 227.61692810]
[-86.36196136 236.18595886]
[-98.58594513 244.87930298]
[-110.54001617 253.94021606]
[-122.21313477 263.36032104]
[-133.88624573 272.78042603]
[-145.55937195 282.20053101]
[-144.91044617 297.59158325]
[-153.35006714 310.26544189]
[-167.46722412 315.47787476]
[-181.77543640 311.42657471]
[-193.44856262 320.84667969]
[-205.12167358 330.26678467]
[-216.79478455 339.68688965]
[-215.03288269 355.01330566]
[-221.85726929 368.84918213]
[-235.09030151 376.77951050]
[-250.50938416 376.27380371]
[-263.19430542 367.49337769]
[-269.09741211 353.24005127]
[-266.33499146 338.06201172]
[-255.78854370 326.80252075]
[-240.82341003 323.05444336]
[-226.21488953 328.01376343]
[-214.54177856 318.59365845]
[-202.86865234 309.17355347]
[-191.19554138 299.75344849]
[-192.13334656 284.91235352]
[-184.05674744 272.21459961]
[-169.88626099 266.64230347]
[-154.97947693 270.52740479]
[-143.30635071 261.10729980]
[-131.63323975 251.68719482]
[-119.96012115 242.26708984]
[-119.23760223 238.75918579]
[-116.74456787 235.43907166]
[-112.59403992 233.15144348]
[-107.27929688 232.65531921]
[-95.05531311 223.96197510]
[-91.40558624 217.48439026]
[-82.49433136 215.21926880]
[-70.09667206 206.77545166]
[-57.69901657 198.33163452]
[-45.30135727 189.88781738]
[-51.52995300 178.93653870]
[-56.93464279 167.55606079]
[-61.48603821 155.80827332]
[-65.15939331 143.75703430]
[-67.93473816 131.46788025]
[-69.79698181 119.00762939]
[-70.73599243 106.44403076]
[-70.74666595 93.84539032]
[-69.82895660 81.28022003]
[-67.98783875 68.81682587]
[-65.23332977 56.52298355]
[-61.58040619 44.46554184]
[-57.04893112 32.71004868]
[-51.66353989 21.32043076]
[-45.45351791 10.35861397]
[-38.45262909 -0.11580127]
[-30.69893837 -10.04586220]
[-22.23460388 -19.37757492]
[-13.10565090 -28.06020355]
[-3.36171341 -36.04653549]
[6.94422722 -43.29315186]
[17.75613594 -49.76064301]
[29.01522446 -55.41385269]
[40.66027451 -60.22203445]
[52.62796783 -64.15904999]
[64.85324097 -67.20349884]
[77.26960754 -69.33881378]
[89.80957031 -70.55339050]
[102.40493774 -70.84062958]
[114.98722839 -70.19895935]
[127.48803711 -68.63188171]
[139.83938599 -66.14791107]
[151.97410583 -62.76054764]
[163.82623291 -58.48822021]
[175.33132935 -53.35414886]
[186.42683411 -47.38625336]
[197.05239868 -40.61698151]
[207.15026855 -33.08314133]
[216.66554260 -24.82569504]
[225.54647827 -15.88954067]
[233.74478149 -6.32326508]
[241.21588135 3.82111621]
[247.91915894 14.48844624]
[253.81816101 25.62072372]
[258.88082886 37.15742111]
[263.07958984 49.03580475]
[266.39166260 61.19129944]
[268.79904175 73.55780029]
[283.70593262 71.88912964]
[298.61282349 70.22045135]
[313.51971436 68.55177307]
[328.42660522 66.88309479]
[343.33349609 65.21441650]
[358.24041748 63.54574203]
[373.14730835 61.87706375]
[388.01730347 59.90661240]
[402.84432983 57.63519669]
[415.31372070 47.89738846]
[429.06588745 53.61820221]
[443.89291382 51.34678650]
[458.71994019 49.07537079]
[473.54696655 46.80395508]
[488.37396240 44.53253555]
[500.82528687 33.86029053]
[516.20141602 39.56179810]
[518.68469238 55.77183533]
[505.72055054 65.81491089]
[490.64538574 59.35956192]
[475.81835938 61.63097763]
[460.99133301 63.90239716]
[446.16430664 66.17381287]
[431.33728027 68.44522858]
[419.92843628 78.02056885]
[405.11575317 72.46221924]
[390.28872681 74.73363495]
[386.76104736 78.03196716]
[381.10589600 79.11128235]
[374.81597900 76.78395844]
[359.90908813 78.45263672]
[345.00219727 80.12131500]
[330.09530640 81.78999329]
[315.18838501 83.45866394]
[300.28149414 85.12734222]
[285.37460327 86.79602051]
[270.46771240 88.46469879]
[270.72491455 106.73117828]
[269.03036499 124.92070007]
[265.40344238 142.82533264]
[259.88558960 160.24037170]
[252.53991699 176.96675110]
[243.45037842 192.81321716]
[232.72090149 207.59863281]
[220.47413635 221.15397644]
[206.85009766 233.32426453]
[192.00453186 243.97038269]
[176.10716248 252.97059631]
[159.33972168 260.22204590]
[141.89390564 265.64178467]
[123.96915436 269.16790771]
[105.77037811 270.76007080]
[87.50563812 270.40011597]
[69.38373566 268.09207153]
[51.61183929 263.86239624]
[34.39312363 257.75942993]
[17.92443466 249.85295105]
[2.39404559 240.23330688]
[-12.02049923 229.01051331]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 47]
[2 46]
[3 45]
[4 44]
[5 42]
[6 41]
[7 37]
[8 36]
[9 35]
[10 34]
[14 30]
[15 29]
[16 28]
[17 27]
[95 132]
[96 131]
[97 130]
[98 129]
[99 128]
[100 127]
[101 126]
[102 125]
[103 122]
[104 121]
[106 119]
[107 118]
[108 117]
[109 116]
[110 115]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
