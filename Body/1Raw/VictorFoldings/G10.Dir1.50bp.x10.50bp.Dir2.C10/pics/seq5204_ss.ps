%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:17 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCAUAGCAGGCAGUUGAGGUGGAUUAAACCAAACCCAGCUACGCAAAAUCUUAGCAUACUCxxxxxxxxxxGCAGCAGGCAAAUCAGCCCAAUUAGGUCUCCACCCCUGACUCCCCUCAGCCAUAGAAGGCCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[161.21110535 534.46124268]
[160.89906311 519.46447754]
[160.58700562 504.46774292]
[160.27494812 489.47097778]
[159.96289062 474.47421265]
[159.65083313 459.47747803]
[159.33877563 444.48071289]
[159.02671814 429.48397827]
[158.71466064 414.48721313]
[156.84704590 399.60394287]
[153.44407654 384.99502563]
[140.70097351 377.36950684]
[137.04174805 362.60247803]
[145.12652588 349.28805542]
[141.72354126 334.67913818]
[131.59408569 327.99325562]
[128.66732788 315.80093384]
[135.05361938 304.54617310]
[131.95529175 289.86965942]
[127.46737671 283.93634033]
[128.94853210 274.85568237]
[126.15620422 260.11788940]
[123.36387634 245.38008118]
[120.57155609 230.64227295]
[106.29637909 221.80615234]
[102.72790527 205.05651855]
[112.54027557 190.61163330]
[109.44195557 175.93510437]
[106.34363556 161.25857544]
[103.24531555 146.58206177]
[100.14698792 131.90553284]
[97.04866791 117.22900391]
[85.25202942 107.96405792]
[70.25933075 108.43209839]
[58.27092361 119.09313202]
[42.48626328 116.22537994]
[35.01398849 102.02873230]
[41.58619308 87.39364624]
[57.16123962 83.54690552]
[69.79129028 93.43939972]
[84.78398895 92.97135925]
[94.99746704 81.98569489]
[94.37348938 66.99868011]
[93.74951172 52.01166153]
[74.57786560 39.01002121]
[69.79951477 16.57645226]
[81.76877594 -2.72227931]
[75.99250793 -16.56549644]
[70.21623230 -30.40871429]
[54.94137573 -27.72999763]
[39.45957947 -28.50154305]
[24.54012680 -32.68193436]
[10.92366505 -40.06044006]
[-0.71454704 -50.26765060]
[-9.79813194 -62.79396057]
[-15.87813854 -77.01501465]
[-18.65522766 -92.22282410]
[-17.99441147 -107.66103363]
[-13.93161106 -122.56250763]
[-6.67171240 -136.18745422]
[3.42175412 -147.86019897]
[15.84482288 -157.00260925]
[9.78180981 -170.72265625]
[-3.77063441 -179.95646667]
[-2.28047776 -196.28776550]
[12.71933460 -202.91632080]
[25.79828072 -193.02323914]
[23.50186348 -176.78567505]
[29.56487656 -163.06561279]
[43.79401779 -166.01293945]
[58.33099747 -165.92327881]
[72.53457642 -162.79804993]
[85.77768707 -156.77262878]
[97.47512054 -148.11047363]
[107.10938263 -137.19165039]
[114.25360107 -124.49609375]
[118.59043121 -110.58257294]
[119.92614746 -96.06405640]
[118.19929504 -81.58072662]
[113.48353577 -67.77175140]
[105.98447418 -55.24705887]
[96.03070831 -44.56043243]
[84.05944824 -36.18498611]
[89.83572388 -22.34177017]
[95.61199951 -8.49855137]
[104.68810272 -8.44813347]
[113.34129333 -5.70941019]
[123.08894348 -17.11043167]
[132.83659363 -28.51145172]
[131.35508728 -44.24614716]
[141.49781799 -56.36639786]
[157.24729919 -57.68146896]
[169.25964355 -47.41115189]
[170.40812683 -31.64864922]
[160.01138306 -19.74556923]
[144.23760986 -18.76379967]
[134.48995972 -7.36277914]
[124.74230957 4.03824186]
[128.62771606 11.26742649]
[130.44062805 19.30810547]
[130.02983093 27.57579422]
[127.40649414 35.46428299]
[122.74465179 42.39007950]
[116.36986542 47.83556747]
[108.73652649 51.38768387]
[109.36050415 66.37470245]
[109.98448181 81.36171722]
[119.65348053 98.01979065]
[111.72519684 114.13068390]
[114.82351685 128.80720520]
[117.92183685 143.48373413]
[121.02015686 158.16026306]
[124.11848450 172.83679199]
[127.21680450 187.51330566]
[139.30519104 193.54063416]
[145.60462952 205.26858521]
[144.00228882 218.28807068]
[135.30935669 227.84996033]
[138.10168457 242.58775330]
[140.89401245 257.32556152]
[143.68634033 272.06338501]
[146.63182068 286.77133179]
[149.73013306 301.44784546]
[162.34689331 314.81936646]
[156.33244324 331.27618408]
[159.73541260 345.88507080]
[172.87162781 354.25631714]
[176.11462402 369.12026978]
[168.05296326 381.59207153]
[171.45594788 396.20095825]
[177.90800476 382.65951538]
[190.18786621 374.04525757]
[205.11691284 372.58801270]
[218.83081055 378.66494751]
[227.77975464 390.70306396]
[229.64733887 405.58636475]
[223.95014954 419.46231079]
[212.16288757 428.73916626]
[197.33663940 431.01568604]
[183.30914307 425.70254517]
[173.71141052 414.17517090]
[174.02346802 429.17190552]
[174.33552551 444.16867065]
[174.64758301 459.16540527]
[174.95964050 474.16217041]
[175.27169800 489.15893555]
[175.58375549 504.15567017]
[175.89581299 519.15240479]
[176.20787048 534.14916992]
[178.79885864 553.35693359]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 149]
[2 148]
[3 147]
[4 146]
[5 145]
[6 144]
[7 143]
[8 142]
[9 141]
[10 130]
[11 129]
[14 126]
[15 125]
[18 123]
[19 122]
[21 121]
[22 120]
[23 119]
[24 118]
[27 114]
[28 113]
[29 112]
[30 111]
[31 110]
[32 109]
[33 41]
[34 40]
[42 107]
[43 106]
[44 105]
[47 85]
[48 84]
[49 83]
[62 69]
[63 68]
[87 98]
[88 97]
[89 96]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
