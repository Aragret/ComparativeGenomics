%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:57 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGUAUUCUUCAUAGCCGAAUACACAAACAUUAUUAUAAUAAACACCCUCACCACUACAAUCUxxxxxxxxxxCGUAAAUUAUGGCUGAAUCAUCCGCUACCUUCACGCCAAUGGCGCCUCAAUAUUCUUUAUCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[90.54792786 446.84210205]
[90.54792786 431.84210205]
[90.54792786 416.84210205]
[90.54792786 401.84210205]
[90.54792786 386.84210205]
[90.54792786 371.84210205]
[90.54792786 356.84210205]
[90.54792786 341.84210205]
[90.54792786 326.84210205]
[90.54792786 311.84210205]
[73.49623108 308.09521484]
[57.77636337 300.48327637]
[44.25135040 289.42041016]
[33.66462326 275.51034546]
[26.59911919 259.51333618]
[23.44519615 242.30476379]
[24.37906647 224.82713318]
[29.35295868 208.03854370]
[38.09754181 192.86009216]
[50.13650894 180.12533569]
[64.81253052 170.53459167]
[81.32312775 164.61634827]
[79.45552063 149.73306274]
[77.58790588 134.84977722]
[75.72029114 119.96649933]
[69.23212433 106.44231415]
[58.79231262 95.67150116]
[48.35250092 84.90069580]
[36.52214050 94.14594269]
[23.77607727 102.08130646]
[10.25873470 108.61686707]
[-3.87672639 113.67856598]
[-18.47013855 117.20906830]
[-33.35614777 119.16835022]
[-48.36608887 119.53422546]
[-63.32987976 118.30253601]
[-78.07797241 115.48725128]
[-92.44326019 111.12026215]
[-106.26297760 105.25105286]
[-119.38052368 97.94612885]
[-131.64727783 89.28825378]
[-142.92425537 79.37553406]
[-153.08366394 68.32028198]
[-162.01039124 56.24776840]
[-169.60328674 43.29478455]
[-175.77633667 29.60808945]
[-180.45959473 15.34277153]
[-183.59997559 0.66046530]
[-185.16189575 -14.27246761]
[-185.12767029 -29.28682518]
[-183.49769592 -44.21248245]
[-180.29042053 -58.88032150]
[-175.54220581 -73.12414551]
[-169.30683899 -86.78255463]
[-161.65496826 -99.70079803]
[-152.67329407 -111.73249817]
[-142.46360779 -122.74132538]
[-131.14157104 -132.60253906]
[-118.83547211 -141.20440674]
[-105.68476105 -148.44946289]
[-91.83843994 -154.25561523]
[-77.45339203 -158.55708313]
[-62.69261932 -161.30511475]
[-47.72336960 -162.46858215]
[-32.71525574 -162.03428650]
[-17.83833122 -160.00717163]
[-3.26116300 -156.41020203]
[10.85107803 -151.28411865]
[24.33849144 -144.68701172]
[37.04825211 -136.69363403]
[48.83634567 -127.39454651]
[59.56921005 -116.89513397]
[69.12523651 -105.31435394]
[77.39613342 -92.78341675]
[84.28820038 -79.44432068]
[89.72333527 -65.44819641]
[93.63996124 -50.95364380]
[95.99369049 -36.12488556]
[96.75786591 -21.12994957]
[95.92382050 -6.13873625]
[93.50100708 8.67889023]
[89.51686859 23.15503693]
[84.01656342 37.12567520]
[77.06240845 50.43250656]
[68.73320007 62.92475891]
[59.12331009 74.46088409]
[69.56312561 85.23168945]
[80.00293732 96.00250244]
[94.00537109 82.66037750]
[110.59777832 87.61477661]
[124.50033569 81.98281860]
[138.40289307 76.35086823]
[152.30545044 70.71891022]
[166.14866638 64.94263458]
[179.93104553 59.02267456]
[193.71342468 53.10271072]
[207.49580383 47.18274689]
[208.10191345 31.93166924]
[215.27278137 18.45793533]
[227.58460999 9.43676567]
[242.59289551 6.65932035]
[257.31771851 10.67706203]
[268.83547974 20.69226646]
[274.85928345 34.71640778]
[274.19311523 49.96498108]
[266.96923828 63.41036987]
[254.62197876 72.38298798]
[239.60287476 75.10131073]
[224.89398193 71.02561188]
[213.41577148 60.96512985]
[199.63339233 66.88509369]
[185.85101318 72.80505371]
[172.06863403 78.72501373]
[167.13209534 84.29065704]
[157.93740845 84.62146759]
[144.03485107 90.25341797]
[130.13229370 95.88537598]
[116.22973633 101.51733398]
[108.78543854 116.10633850]
[90.60356903 118.09888458]
[92.47118378 132.98216248]
[94.33879852 147.86544800]
[96.20641327 162.74873352]
[108.92608643 163.54100037]
[121.32402039 166.47671509]
[133.04179382 171.46975708]
[143.74085999 178.37455750]
[153.11230469 186.99032593]
[160.88581848 197.06690979]
[166.83744812 208.31202698]
[170.79606628 220.39976501]
[172.64828491 232.98002625]
[172.34170532 245.68865967]
[169.88639832 258.15798950]
[165.35459900 270.02749634]
[158.87854004 280.95419312]
[150.64662170 290.62255859]
[140.89791870 298.75366211]
[129.91529846 305.11312866]
[118.01706696 309.51806641]
[105.54792786 311.84210205]
[105.54792786 326.84210205]
[105.54792786 341.84210205]
[105.54792786 356.84210205]
[105.54792786 371.84210205]
[105.54792786 386.84210205]
[105.54792786 401.84210205]
[105.54792786 416.84210205]
[105.54792786 431.84210205]
[105.54792786 446.84210205]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[22 123]
[23 122]
[24 121]
[25 120]
[26 88]
[27 87]
[28 86]
[90 118]
[91 117]
[92 116]
[93 115]
[94 113]
[95 112]
[96 111]
[97 110]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
