%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:04 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGAUUUAGCAGUAAACUAAGAGUAGAGUGCUUAGUUGAACAGGGCCCUGAAGCGCGUACACAxxxxxxxxxxAUUAUUAGCAUCAUCCCUCUACUAUUUUUUAACCAAAUCAACAACAACCUAUUUAGCUGUCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[232.75695801 538.87097168]
[232.44490051 523.87426758]
[232.13284302 508.87747192]
[231.82078552 493.88073730]
[231.50872803 478.88397217]
[231.19667053 463.88723755]
[230.88461304 448.89047241]
[230.57255554 433.89370728]
[230.26049805 418.89697266]
[226.70573425 404.32424927]
[220.07723999 390.86828613]
[213.44874573 377.41232300]
[206.82023621 363.95635986]
[200.19174194 350.50039673]
[187.98254395 350.22470093]
[176.99566650 344.72894287]
[169.36334229 335.01055908]
[166.59619141 322.89291382]
[169.28456116 310.68334961]
[176.97389221 300.73397827]
[170.91088867 287.01391602]
[164.84786987 273.29385376]
[158.78486633 259.57379150]
[147.58784485 254.89042664]
[142.44258118 243.45603943]
[146.62211609 231.20918274]
[140.84584045 217.36596680]
[128.80415344 208.59973145]
[130.63052368 192.88429260]
[124.85424805 179.04107666]
[119.07797241 165.19786072]
[113.30170441 151.35464478]
[107.52542877 137.51141357]
[101.74916077 123.66820526]
[95.97288513 109.82498169]
[89.34439087 96.36901855]
[81.88948059 83.35270691]
[74.43457031 70.33640289]
[66.97966003 57.32009125]
[59.25557327 44.46168900]
[51.26565552 31.76675797]
[43.27573776 19.07182884]
[35.28582382 6.37689924]
[25.77746391 -5.22444201]
[14.89863968 -15.55164719]
[-0.43698400 -19.44127846]
[-4.34052277 -33.81526947]
[-15.21934795 -44.14247513]
[-23.65577316 -47.81379700]
[-26.21424103 -54.79948807]
[-41.46562576 -59.00731659]
[-45.06928635 -73.45940399]
[-55.73091507 -84.01069641]
[-71.53170013 -83.67787170]
[-82.88190460 -94.67552948]
[-83.04764557 -110.47895050]
[-71.93060303 -121.71224213]
[-56.12631607 -121.71089935]
[-45.01118851 -110.47571564]
[-45.17962265 -94.67231750]
[-34.51799774 -84.12103271]
[-20.02920341 -80.66790009]
[-15.66295147 -65.46111298]
[-4.89214325 -55.02130127]
[5.98668242 -44.69409561]
[20.54417992 -41.54313660]
[25.22584343 -26.43047142]
[36.10466766 -16.10326767]
[33.27729034 -30.83438873]
[37.00508881 -45.36379242]
[46.57545090 -56.91403580]
[60.15890884 -63.27717972]
[75.15885925 -63.23684692]
[88.70790100 -56.80074310]
[98.21600342 -45.19919586]
[101.86560822 -30.64995575]
[98.95905304 -15.93425369]
[90.05194855 -3.86513972]
[76.84697723 3.25025439]
[61.86840820 4.05175114]
[47.98075104 -1.61301696]
[55.97066879 11.08191299]
[63.96058655 23.77684212]
[71.95050049 36.47177124]
[76.38664246 38.39431000]
[79.63170624 43.15885162]
[79.99596405 49.86518097]
[87.45087433 62.88148880]
[94.90578461 75.89779663]
[102.36069489 88.91410828]
[107.73097229 74.90838623]
[121.35237885 68.62688446]
[135.49130249 73.63594055]
[142.12033081 87.09165192]
[137.47578430 101.35447693]
[124.19463348 108.32664490]
[109.81610107 104.04871368]
[115.59237671 117.89192963]
[121.36865234 131.73515320]
[127.14492035 145.57836914]
[132.92118835 159.42158508]
[138.69746399 173.26480103]
[144.47373962 187.10801697]
[156.92858887 196.86442566]
[154.68905640 211.58969116]
[160.46533203 225.43292236]
[175.35072327 236.22203064]
[172.50491333 253.51078796]
[178.56793213 267.23083496]
[184.63093567 280.95089722]
[190.69395447 294.67095947]
[208.47756958 297.91992188]
[220.68109131 311.04458618]
[222.59591675 328.70623779]
[213.64770508 343.87188721]
[220.27621460 357.32785034]
[226.90470886 370.78384399]
[233.53320312 384.23980713]
[240.16169739 397.69577026]
[241.47306824 382.75320435]
[246.69558716 368.69171143]
[255.45617676 356.51583862]
[267.12902832 347.09539795]
[280.88021851 341.10333252]
[295.72741699 338.96774292]
[310.60995483 340.84118652]
[324.46469116 346.58981323]
[336.30181885 355.80294800]
[345.27578735 367.82241821]
[350.74545288 381.78964233]
[352.32012939 396.70675659]
[349.88726807 411.50814819]
[343.62072754 425.13644409]
[333.96810913 436.61804199]
[321.61904907 445.13275146]
[307.45568848 450.07229614]
[292.48980713 451.08380127]
[277.79058838 448.09497070]
[264.40811157 441.31939697]
[253.29832458 431.24102783]
[245.25724792 418.58489990]
[245.56930542 433.58166504]
[245.88136292 448.57839966]
[246.19342041 463.57516479]
[246.50547791 478.57192993]
[246.81753540 493.56866455]
[247.12959290 508.56542969]
[247.44165039 523.56219482]
[247.75370789 538.55895996]
[250.34469604 557.76666260]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 149]
[2 148]
[3 147]
[4 146]
[5 145]
[6 144]
[7 143]
[8 142]
[9 141]
[10 119]
[11 118]
[12 117]
[13 116]
[14 115]
[20 111]
[21 110]
[22 109]
[23 108]
[26 106]
[27 105]
[29 103]
[30 102]
[31 101]
[32 100]
[33 99]
[34 98]
[35 97]
[36 90]
[37 89]
[38 88]
[39 87]
[40 84]
[41 83]
[42 82]
[43 81]
[44 68]
[45 67]
[47 65]
[48 64]
[50 63]
[52 61]
[53 60]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
