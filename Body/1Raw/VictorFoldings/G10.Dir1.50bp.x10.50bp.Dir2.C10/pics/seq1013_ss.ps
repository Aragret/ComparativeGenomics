%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:33 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGUAAAUCACCACGAUCAAAAGGAACAAGCAUCAAGCACGCAGCAAUGCAGCUCAAAACGCUxxxxxxxxxxCCAAACUGGGAUUAGAUACCCCACUAUGCUUAGCCCUAAACCUCAACAGUUAAAUCAACACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[105.87629700 272.98989868]
[105.87629700 257.98989868]
[105.87629700 242.98989868]
[105.87629700 227.98989868]
[105.87629700 212.98989868]
[105.87629700 197.98989868]
[105.87629700 182.98989868]
[105.87629700 167.98989868]
[105.87629700 152.98989868]
[105.87629700 137.98989868]
[102.62546539 123.34639740]
[98.10923004 123.41735077]
[93.66287994 122.62274170]
[89.45075989 120.99192810]
[78.78913879 131.54321289]
[68.12751007 142.09451294]
[66.60655212 158.06530762]
[53.09356689 166.71278381]
[37.95456314 161.40333557]
[32.80289078 146.20991516]
[41.59046936 132.78762817]
[57.57621765 131.43287659]
[68.23784637 120.88159180]
[78.89946747 110.33029938]
[76.72289276 103.18177795]
[76.90119171 95.71135712]
[79.41632843 88.67481232]
[84.01385498 82.78400421]
[90.22865295 78.63488770]
[88.67107391 63.71597290]
[87.11348724 48.79705811]
[73.84423065 40.97191620]
[67.79767609 26.99720383]
[71.10029602 12.31535435]
[82.28106689 2.51084852]
[80.72348022 -12.40806389]
[79.16590118 -27.32697678]
[77.60832214 -42.24588776]
[76.05074310 -57.16479874]
[74.49315643 -72.08370972]
[57.43276978 -80.28657532]
[49.60197830 -99.15840149]
[56.81142044 -119.87489319]
[44.37198257 -128.25703430]
[31.93254089 -136.63917542]
[19.10341072 -134.94587708]
[8.90199089 -142.23628235]
[6.50850630 -154.13496399]
[-5.75386190 -162.77407837]
[-18.01622963 -171.41319275]
[-34.38859940 -172.34997559]
[-41.52082062 -187.11695862]
[-32.07587814 -200.52311707]
[-15.76991844 -198.77735901]
[-9.37711334 -183.67556763]
[2.88525438 -175.03643799]
[15.14762211 -166.39732361]
[32.65860367 -165.79281616]
[40.31468582 -149.07861328]
[52.75412369 -140.69647217]
[65.19356537 -132.31433105]
[58.29554367 -145.63414001]
[51.39752197 -158.95394897]
[44.49950027 -172.27375793]
[37.60147476 -185.59356689]
[26.41349411 -195.58500671]
[18.34700966 -208.23143005]
[14.00405407 -222.58895874]
[13.70876026 -237.58605957]
[17.48316574 -252.10342407]
[25.04557228 -265.05755615]
[35.83156967 -275.48168945]
[49.03615952 -282.59777832]
[63.67383194 -285.87475586]
[78.65212250 -285.06802368]
[92.85314941 -280.23782349]
[105.21702576 -271.74462891]
[114.82099915 -260.22232056]
[120.94828796 -246.53083801]
[123.14158630 -231.69206238]
[121.23720551 -216.81344604]
[115.37726593 -203.00543213]
[105.99945831 -191.29888916]
[101.40351868 -177.02032471]
[96.80757904 -162.74176025]
[92.21163940 -148.46321106]
[87.61569214 -134.18464661]
[98.49452209 -144.51184082]
[109.37334442 -154.83905029]
[120.25217438 -165.16625977]
[117.26500702 -180.30166626]
[122.95610809 -194.64094543]
[135.50946045 -203.60848999]
[150.91934204 -204.34277344]
[164.26850891 -196.60951233]
[171.29728699 -182.87635803]
[169.76283264 -167.52549744]
[160.15476990 -155.45533752]
[145.53900146 -150.51742554]
[130.57937622 -154.28742981]
[119.70055389 -143.96022034]
[108.82172394 -133.63302612]
[97.94290161 -123.30581665]
[108.38686371 -104.47261810]
[104.24121094 -84.84559631]
[89.41207123 -73.64129639]
[90.96965027 -58.72238159]
[92.52723694 -43.80347061]
[94.08481598 -28.88455772]
[95.64239502 -13.96564484]
[97.19997406 0.95326763]
[110.16480255 8.23689747]
[116.42881012 21.91996193]
[113.39919281 36.84225464]
[102.03240204 47.23947906]
[103.58998108 62.15839005]
[105.14756012 77.07730103]
[122.63947296 93.72293091]
[116.21642303 116.99926758]
[117.83835602 102.08721924]
[123.35227966 88.13742828]
[132.36428833 76.14643860]
[144.23057556 66.97086334]
[158.10345459 61.26618958]
[172.99186707 59.43994141]
[187.83221436 61.62258148]
[201.56434631 67.65818787]
[213.20726013 77.11559296]
[221.92922974 89.31916809]
[227.10714722 103.39714050]
[228.37113953 118.34378815]
[225.63088989 133.09136963]
[219.08216858 146.58633423]
[209.19281006 157.86465454]
[196.66926575 166.12060547]
[182.40620422 170.76443481]
[167.42253113 171.46435547]
[152.78868103 168.17041016]
[139.55003357 161.11787415]
[128.65232849 150.81057739]
[120.87629700 137.98989868]
[120.87629700 152.98989868]
[120.87629700 167.98989868]
[120.87629700 182.98989868]
[120.87629700 197.98989868]
[120.87629700 212.98989868]
[120.87629700 227.98989868]
[120.87629700 242.98989868]
[120.87629700 257.98989868]
[120.87629700 272.98989868]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[11 119]
[14 24]
[15 23]
[16 22]
[29 117]
[30 116]
[31 115]
[35 111]
[36 110]
[37 109]
[38 108]
[39 107]
[40 106]
[43 61]
[44 60]
[45 59]
[48 57]
[49 56]
[50 55]
[87 103]
[88 102]
[89 101]
[90 100]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
