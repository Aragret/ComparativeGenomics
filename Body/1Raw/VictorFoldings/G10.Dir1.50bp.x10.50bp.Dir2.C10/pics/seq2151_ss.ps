%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:51 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCCGAAACCAGACGAGCUACCUAAGAACAGCUAAAAGAGCACACCCGUCUAUGUAGCAAAAUxxxxxxxxxxGCAUCAGGAGUAUCAAUCACCUGAGCUCACCAUAGUCUAAUAGAAAACAACCGAAACCAAACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[92.50000000 252.05628967]
[92.50000000 237.05628967]
[92.50000000 222.05628967]
[92.50000000 207.05628967]
[92.50000000 192.05628967]
[92.50000000 177.05628967]
[92.50000000 162.05628967]
[92.50000000 147.05628967]
[92.50000000 132.05628967]
[92.50000000 117.05629730]
[85.30861664 130.22003174]
[80.33114624 144.37011719]
[67.58073425 152.27119446]
[52.69411850 150.43034363]
[42.25241470 139.66136169]
[40.87171173 124.72504425]
[49.16239929 112.22446442]
[63.45803070 107.68586731]
[76.83698273 100.90327454]
[61.84410095 100.44135284]
[46.85121536 99.97942352]
[31.85832977 99.51749420]
[16.86544228 99.05557251]
[1.94442654 100.59286499]
[-12.63932323 104.10202789]
[-27.22307205 107.61119843]
[-41.80681992 111.12036896]
[-46.08441925 125.87155914]
[-57.17562866 136.49609375]
[-72.09697723 140.13600159]
[-86.83468628 135.81219482]
[-97.42440033 124.68773651]
[-101.01752472 109.75505066]
[-96.64753723 95.03096008]
[-85.48994446 84.47617340]
[-70.54607391 80.92987061]
[-55.83575058 85.34598541]
[-45.31599045 96.53661346]
[-30.73223877 93.02745056]
[-16.14849091 89.51828003]
[-1.56474066 86.00911713]
[-15.57843781 80.65969849]
[-26.28332329 70.15229797]
[-31.89272690 56.24062347]
[-31.47042656 41.24657059]
[-25.08690834 27.67267418]
[-13.80759144 17.78444672]
[0.48497954 13.23225784]
[15.40534306 14.77587700]
[28.46325684 22.15766907]
[37.47932816 34.14559937]
[40.94875336 48.73885345]
[38.29248047 63.50178909]
[29.95384407 75.97043610]
[17.32736969 84.06268311]
[32.32025528 84.52461243]
[47.31314087 84.98653412]
[62.30602646 85.44846344]
[77.29891205 85.91039276]
[93.24748993 80.11151886]
[105.39608765 85.69495392]
[115.94810486 75.03404999]
[126.50011444 64.37313843]
[134.78558350 51.86910248]
[140.49024963 37.99622345]
[146.19491577 24.12334251]
[134.07478333 32.96088791]
[119.84386444 37.70231628]
[104.84516907 37.90016556]
[90.49414062 33.53577423]
[78.14510345 25.02100754]
[68.96344757 13.15942097]
[63.81566620 -0.92959470]
[63.18756104 -15.91643810]
[67.13840485 -30.38678169]
[75.29535675 -42.97503662]
[86.88862610 -52.49323654]
[100.82414246 -58.04313278]
[115.78679657 -59.10097504]
[130.36453247 -55.56693268]
[143.18164062 -47.77452087]
[153.02854919 -36.45911407]
[158.97599792 -22.68856812]
[160.46270752 -7.76242733]
[157.34915161 6.90866423]
[167.68005371 -3.96664953]
[178.01095581 -14.84196281]
[188.34185791 -25.71727753]
[198.67276001 -36.59259033]
[193.68547058 -51.06275177]
[196.00552368 -66.19139862]
[205.09979248 -78.50207520]
[218.87847900 -85.16588593]
[234.17533875 -84.65153503]
[247.47528076 -77.07720947]
[255.72204590 -64.18344116]
[257.02062988 -48.93312073]
[251.07258606 -34.83065796]
[239.24475098 -25.11669922]
[224.25508118 -22.02343941]
[209.54808044 -26.26168823]
[199.21717834 -15.38637447]
[188.88627625 -4.51106071]
[178.55537415 6.36425304]
[168.22445679 17.23956680]
[160.06779480 29.82800674]
[154.36312866 43.70088577]
[148.65847778 57.57376862]
[160.74105835 48.68495178]
[174.87959290 43.67475128]
[189.86312866 42.97228241]
[204.40838623 46.63770294]
[217.26962280 54.35708618]
[227.34527588 65.46928406]
[233.77243042 79.02257538]
[236.00061035 93.85616302]
[233.83897400 108.69959259]
[227.47265625 122.28156281]
[217.44691467 133.43882751]
[204.62042236 141.21580505]
[190.09175110 144.94639587]
[175.10520935 144.31112671]
[160.94435120 139.36436462]
[148.82203674 130.52981567]
[139.77647400 118.56411743]
[134.58241272 104.49210358]
[133.68469238 89.51898956]
[137.16102600 74.92515564]
[126.60900879 85.58606720]
[116.05699158 96.24697113]
[128.12188721 87.33415985]
[142.81272888 84.30438995]
[157.41946411 87.71656036]
[169.24763489 96.94123840]
[176.11526489 110.27674103]
[176.75549316 125.26306915]
[171.05021667 139.13569641]
[160.05189514 149.33555603]
[145.78938293 153.98104858]
[130.89367676 152.21525574]
[118.11260223 144.36387634]
[109.80386353 131.87528992]
[107.50000000 117.05629730]
[107.50000000 132.05628967]
[107.50000000 147.05628967]
[107.50000000 162.05628967]
[107.50000000 177.05628967]
[107.50000000 192.05628967]
[107.50000000 207.05628967]
[107.50000000 222.05628967]
[107.50000000 237.05628967]
[107.50000000 252.05628967]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 152]
[2 151]
[3 150]
[4 149]
[5 148]
[6 147]
[7 146]
[8 145]
[9 144]
[10 143]
[19 59]
[20 58]
[21 57]
[22 56]
[23 55]
[24 41]
[25 40]
[26 39]
[27 38]
[61 130]
[62 129]
[63 128]
[64 108]
[65 107]
[66 106]
[85 105]
[86 104]
[87 103]
[88 102]
[89 101]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
