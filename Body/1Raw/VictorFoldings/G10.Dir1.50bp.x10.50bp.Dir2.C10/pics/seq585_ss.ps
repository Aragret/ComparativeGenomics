%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:38 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCCCACUCCCAUACUACUAAUCUCAUCAAUACAACCCCCGCCCAUCCUACCCAGCACACACxxxxxxxxxxAGCAAACUCAUCACUAGACAUCGUACUACACGACACGUACUACGUUGUAGCCCACUUCCACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[-54.69756699 186.61932373]
[-68.08385468 193.38743591]
[-81.47013855 200.15554810]
[-90.29454041 213.28720093]
[-105.14373016 212.12493896]
[-118.53001404 218.89305115]
[-131.91630554 225.66116333]
[-145.30258179 232.42927551]
[-158.68887329 239.19738770]
[-154.33372498 253.59196472]
[-152.54450989 268.52413940]
[-153.37561035 283.54016113]
[-156.80178833 298.18365479]
[-162.71888733 312.00967407]
[-170.94712830 324.59805298]
[-181.23645020 335.56625366]
[-193.27416992 344.58093262]
[-206.69447327 351.36816406]
[-221.08953857 355.72167969]
[-236.02192688 357.50918579]
[-251.03782654 356.67639160]
[-265.68096924 353.24856567]
[-279.50631714 347.32986450]
[-292.09375000 339.10021973]
[-303.06076050 328.80963135]
[-312.07406616 316.77090454]
[-318.85977173 303.34982300]
[-323.21166992 288.95425415]
[-324.99749756 274.02169800]
[-324.16299438 259.00585938]
[-320.73348999 244.36312866]
[-314.81326294 230.53845215]
[-306.58215332 217.95193481]
[-296.29034424 206.98609924]
[-284.25057983 197.97415161]
[-270.82873535 191.18995667]
[-256.43267822 186.83970642]
[-241.49990845 185.05557251]
[-226.48417664 185.89178467]
[-211.84184265 189.32293701]
[-198.01782227 195.24475098]
[-185.43225098 203.47727966]
[-174.46757507 213.77032471]
[-165.45698547 225.81111145]
[-152.07069397 219.04299927]
[-138.68441772 212.27488708]
[-125.29813385 205.50675964]
[-111.91184998 198.73864746]
[-104.04491425 186.09109497]
[-88.23825073 186.76927185]
[-74.85196686 180.00114441]
[-61.46568298 173.23303223]
[-66.12678528 161.93653870]
[-69.99866486 150.34579468]
[-73.06291199 138.51585388]
[-75.30498505 126.50295258]
[-76.71421814 114.36413574]
[-77.28392792 102.15707397]
[-77.01139832 89.93977356]
[-75.89793396 77.77025604]
[-73.94881439 65.70635223]
[-71.17330170 53.80537033]
[-67.58458710 42.12384796]
[-63.19972229 30.71728325]
[-58.03952789 19.63986397]
[-52.12852478 8.94421577]
[-45.49479294 -1.31884706]
[-38.16984940 -11.10056686]
[-30.18849564 -20.35447502]
[-21.58864403 -29.03660393]
[-12.41115379 -37.10571289]
[-2.69962335 -44.52346420]
[7.49980927 -51.25461578]
[18.13868904 -57.26719284]
[29.16647148 -62.53262711]
[40.53076935 -67.02590942]
[52.17759323 -70.72569275]
[64.05160522 -73.61438751]
[76.09640503 -75.67829132]
[88.25476074 -76.90758514]
[100.46891785 -77.29643250]
[112.68084717 -76.84297943]
[124.83253479 -75.54939270]
[136.86624146 -73.42180634]
[148.72480774 -70.47033691]
[160.35189819 -66.70899963]
[171.69227600 -62.15567017]
[182.69204712 -56.83197403]
[193.29898071 -50.76320648]
[203.46266174 -43.97819901]
[213.13482666 -36.50918198]
[222.26950073 -28.39163971]
[230.82330322 -19.66414070]
[238.75559998 -10.36814499]
[246.02870178 -0.54781592]
[252.60804749 9.75019264]
[258.46240234 20.47695732]
[263.56390381 31.58151817]
[267.88839722 43.01111984]
[271.41525269 54.71146011]
[274.12777710 66.62696075]
[276.01306152 78.70100403]
[277.06213379 90.87623596]
[277.27005005 103.09481049]
[276.63577271 115.29868317]
[275.16235352 127.42987823]
[289.87030029 130.37536621]
[304.57827759 133.32084656]
[319.28622437 136.26632690]
[333.99420166 139.21180725]
[338.18969727 137.61209106]
[342.25848389 137.48490906]
[345.74206543 138.60137939]
[348.30758667 140.60438538]
[349.77929688 143.06231689]
[364.19149780 147.22019958]
[378.60372925 151.37809753]
[393.01593018 155.53598022]
[409.91040039 154.11705017]
[415.95074463 169.95848083]
[402.40051270 180.14808655]
[388.85806274 169.94819641]
[374.44583130 165.79031372]
[360.03363037 161.63241577]
[345.62139893 157.47453308]
[331.04870605 153.91976929]
[316.34072876 150.97428894]
[301.63278198 148.02880859]
[286.92480469 145.08332825]
[272.21685791 142.13784790]
[266.62960815 160.57072449]
[259.07580566 178.28874207]
[249.64459229 195.08280945]
[238.44725037 210.75468445]
[225.61595154 225.11944580]
[211.30213928 238.00753784]
[195.67471313 249.26684570]
[178.91813660 258.76452637]
[161.23017883 266.38842773]
[142.81956482 272.04861450]
[123.90359497 275.67828369]
[104.70551300 277.23458862]
[85.45190430 276.69915771]
[66.36997986 274.07833862]
[47.68497086 269.40301514]
[29.61737823 262.72839355]
[12.38044739 254.13323975]
[-3.82239366 243.71900940]
[-18.79991913 231.60859680]
[-32.37536240 217.94493103]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 52]
[2 51]
[3 50]
[5 48]
[6 47]
[7 46]
[8 45]
[9 44]
[106 130]
[107 129]
[108 128]
[109 127]
[110 126]
[115 125]
[116 124]
[117 123]
[118 122]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
