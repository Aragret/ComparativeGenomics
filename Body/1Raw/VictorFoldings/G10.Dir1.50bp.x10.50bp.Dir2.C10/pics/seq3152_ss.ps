%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:48 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGUACCCACACCCACCCAAGAACAGGGUUUGUUAAGAUGGCAGAGCCCGGUAAUCGCAUAAAxxxxxxxxxxAUAGUUACAAUCGGCAUCAACCAACCACACCUAGCAUUCCUGCACAUCUGUACCCACGCCCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[92.50000000 280.91458130]
[92.50000000 265.91458130]
[92.50000000 250.91458130]
[92.50000000 235.91458130]
[92.50000000 220.91458130]
[92.50000000 205.91458130]
[92.50000000 190.91458130]
[92.50000000 175.91458130]
[92.50000000 160.91458130]
[92.50000000 145.91458130]
[85.28385925 144.13427734]
[78.44331360 141.22752380]
[72.15296936 137.26850891]
[66.57336426 132.35829163]
[61.84691620 126.62218475]
[48.32272720 133.11035156]
[39.22703934 146.05558777]
[24.40524673 144.58464050]
[10.88105583 151.07281494]
[-2.64313412 157.56097412]
[-16.16732407 164.04914856]
[-16.65459824 179.34689331]
[-24.20536423 192.66021729]
[-37.08451462 200.92979431]
[-52.33251190 202.25537109]
[-66.44548035 196.33230591]
[-76.18036652 184.52168274]
[-79.30015564 169.53750610]
[-75.08795166 154.82302856]
[-64.51168060 143.75952148]
[-50.00169754 138.88931274]
[-34.89229202 141.33151245]
[-22.65548897 150.52494812]
[-9.13129902 144.03678894]
[4.39289093 137.54862976]
[17.91707993 131.06045532]
[26.04542542 118.57929993]
[41.83456039 119.58615875]
[55.35874939 113.09799957]
[54.89342117 88.60722351]
[66.93254089 67.27474976]
[88.13861847 55.01437759]
[112.63291168 55.22491455]
[118.98004150 41.63396454]
[125.32717133 28.04301262]
[131.67430115 14.45206165]
[138.02142334 0.86111093]
[144.22683716 -12.79512978]
[150.28985596 -26.51518440]
[156.35285950 -40.23523712]
[162.41587830 -53.95529175]
[149.28540039 -61.22830963]
[136.85972595 -69.64906311]
[125.23892975 -79.14975739]
[114.51655579 -89.65389252]
[104.77893829 -101.07689667]
[96.10448456 -113.32679749]
[88.56303406 -126.30496216]
[82.21530151 -139.90690613]
[77.11241150 -154.02308655]
[73.29544067 -168.53987122]
[70.79512787 -183.34036255]
[69.63159180 -198.30540466]
[69.81421661 -213.31449890]
[71.34152222 -228.24679565]
[74.20121002 -242.98207092]
[78.37025452 -257.40170288]
[83.81510162 -271.38955688]
[90.49189758 -284.83300781]
[98.34688568 -297.62384033]
[107.31682587 -309.65905762]
[117.32949829 -320.84173584]
[128.30427551 -331.08187866]
[140.15280151 -340.29702759]
[152.77966309 -348.41296387]
[166.08322144 -355.36434937]
[179.95634460 -361.09521484]
[194.28732300 -365.55941772]
[208.96078491 -368.72100830]
[223.85858154 -370.55456543]
[238.86076355 -371.04528809]
[253.84654236 -370.18923950]
[268.69525146 -367.99328613]
[283.28732300 -364.47515869]
[297.50531006 -359.66314697]
[311.23468018 -353.59600830]
[324.36495972 -346.32260132]
[336.79034424 -337.90145874]
[348.41085815 -328.40042114]
[359.13293457 -317.89593506]
[368.87020874 -306.47265625]
[377.54428101 -294.22247314]
[385.08532715 -281.24407959]
[391.43264771 -267.64196777]
[396.53509521 -253.52561951]
[400.35162354 -239.00871277]
[402.85150146 -224.20814514]
[404.01455688 -209.24307251]
[403.83148193 -194.23397827]
[402.30374146 -179.30172729]
[399.44360352 -164.56652832]
[395.27410889 -150.14704895]
[389.82882690 -136.15936279]
[383.15161133 -122.71611023]
[375.29623413 -109.92551422]
[366.32592773 -97.89057922]
[356.31292725 -86.70818329]
[345.33782959 -76.46837616]
[333.48901367 -67.25360870]
[320.86190796 -59.13805771]
[307.55813599 -52.18708038]
[293.68484497 -46.45663452]
[279.35372925 -41.99286652]
[264.68017578 -38.83171082]
[249.78231812 -36.99862289]
[234.78012085 -36.50835800]
[219.79437256 -37.36486816]
[204.94573975 -39.56125641]
[190.35375977 -43.07983398]
[176.13592529 -47.89227676]
[170.07292175 -34.17222595]
[164.00990295 -20.45217133]
[157.94688416 -6.73211718]
[158.12112427 0.70530796]
[151.61238098 7.20824051]
[145.26524353 20.79919052]
[138.91812134 34.39014053]
[132.57098389 47.98109436]
[126.22386169 61.57204437]
[133.28375244 67.49475861]
[139.03775024 74.69283295]
[143.26008606 82.88382721]
[145.78511047 91.74638367]
[146.51374817 100.93277740]
[145.41740417 110.08256531]
[142.53909302 118.83676910]
[137.99176025 126.85189819]
[131.95381165 133.81349182]
[124.66214752 139.44841003]
[116.40286255 143.53555298]
[107.50000000 145.91458130]
[107.50000000 160.91458130]
[107.50000000 175.91458130]
[107.50000000 190.91458130]
[107.50000000 205.91458130]
[107.50000000 220.91458130]
[107.50000000 235.91458130]
[107.50000000 250.91458130]
[107.50000000 265.91458130]
[107.50000000 280.91458130]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[15 39]
[16 38]
[18 36]
[19 35]
[20 34]
[21 33]
[43 129]
[44 128]
[45 127]
[46 126]
[47 125]
[48 123]
[49 122]
[50 121]
[51 120]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
