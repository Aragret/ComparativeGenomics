%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:29 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCUACAUUUUCUACCCCAGAAAACUACGAUAGCCCUUAUGAAACUUAAGGGUCGAAGGUGGxxxxxxxxxxAUUCUAAUUCUACUGACUAUCCUAGAAAUCGCUGUCGCCUUAAUCCAAGCCUACGUUUUCCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[190.98010254 399.05914307]
[190.35614014 384.07211304]
[189.73216248 369.08511353]
[189.10818481 354.09808350]
[188.48420715 339.11105347]
[187.86022949 324.12405396]
[187.23625183 309.13702393]
[186.61227417 294.15002441]
[182.75511169 279.65441895]
[175.84811401 266.33926392]
[168.94111633 253.02410889]
[156.21240234 245.28916931]
[156.72610474 229.47630310]
[149.81910706 216.16114807]
[142.91210938 202.84599304]
[128.41651917 198.98883057]
[115.80538940 207.11038208]
[103.19425964 215.23191833]
[90.58312988 223.35346985]
[77.97200775 231.47500610]
[65.36087799 239.59654236]
[60.57387161 254.90876770]
[45.56612015 260.57858276]
[31.85028076 252.25660706]
[29.94797325 236.32673645]
[41.31848526 225.00901794]
[57.23933411 226.98541260]
[69.85046387 218.86387634]
[82.46159363 210.74234009]
[95.07271576 202.62078857]
[107.68384552 194.49925232]
[120.29497528 186.37770081]
[117.53623962 175.10629272]
[119.67593384 164.32699585]
[125.81180573 155.96008301]
[134.37792969 151.27749634]
[133.13104248 136.32942200]
[131.88417053 121.38132477]
[130.63729858 106.43324280]
[95.30990601 125.10695648]
[80.48307037 96.80271912]
[67.70571136 88.94528961]
[54.92835236 81.08786774]
[42.15099716 73.23043823]
[29.37364006 65.37301636]
[16.59628296 57.51558685]
[3.81892490 49.65816116]
[-10.96015453 54.76823425]
[-25.54773331 49.13471222]
[-33.05600357 35.41757202]
[-29.93978691 20.09363174]
[-17.67046928 10.39838123]
[-2.04124618 10.90962601]
[9.56824303 21.38596916]
[11.67635059 36.88080597]
[24.45370865 44.73823166]
[37.23106384 52.59565735]
[50.00842285 60.45308304]
[62.78578186 68.31050873]
[75.56314087 76.16793060]
[88.34049225 84.02536011]
[92.12682343 75.70248413]
[100.11846924 68.69477844]
[98.87159729 53.74669266]
[97.62472534 38.79860687]
[82.99236298 34.84009933]
[70.59811401 26.11321640]
[61.93864822 13.67177486]
[58.05963898 -0.98186183]
[59.42948914 -16.07819557]
[65.88278961 -29.79427147]
[76.64026642 -40.47380829]
[90.40290833 -46.82719421]
[105.50880432 -48.08723068]
[120.13385010 -44.10176468]
[132.51199341 -35.35205841]
[141.14851379 -22.89467812]
[145.00051880 -8.23391819]
[143.60284424 6.85986662]
[137.12428284 20.56402588]
[126.34713745 31.22371864]
[112.57280731 37.55173111]
[113.81968689 52.49982071]
[115.06655884 67.44790649]
[121.92658234 70.47941589]
[134.03732300 61.62897873]
[135.64663696 76.54242706]
[142.50666809 79.57393646]
[154.39904785 70.43219757]
[166.29142761 61.29046249]
[178.18380737 52.14873123]
[190.07618713 43.00699615]
[187.97872925 27.79199409]
[193.78465271 13.57274914]
[205.93215942 4.17416573]
[221.15367126 2.12441587]
[235.35464478 7.97487164]
[244.71510315 20.15179062]
[246.71713257 35.37964249]
[240.82218933 49.56221008]
[228.61599731 58.88445663]
[213.38194275 60.83874130]
[199.21792603 54.89937592]
[187.32554626 64.04110718]
[175.43316650 73.18284607]
[163.54078674 82.32457733]
[151.64840698 91.46630859]
[145.58538818 105.18636322]
[146.83226013 120.13445282]
[148.07913208 135.08253479]
[149.32600403 150.03062439]
[168.29811096 168.63752747]
[156.22726440 195.93899536]
[163.13426208 209.25415039]
[170.04125977 222.56930542]
[183.26400757 231.25663757]
[182.25627136 246.11711121]
[189.16326904 259.43228149]
[196.07026672 272.74743652]
[197.07048035 257.78082275]
[201.99932861 243.61372375]
[210.50473022 231.25822449]
[221.97906494 221.59698486]
[235.60263062 215.32014465]
[250.40217590 212.87614441]
[265.32049561 214.43955994]
[279.29180908 219.89871216]
[291.31805420 228.86358643]
[300.54010010 240.69378662]
[306.29916382 254.54417419]
[308.18383789 269.42532349]
[306.05944824 284.27410889]
[300.07775879 298.02981567]
[290.66610718 309.70974731]
[278.49682617 318.47952271]
[264.43930054 323.71264648]
[249.49772644 325.03527832]
[234.73950195 322.35290527]
[221.21894836 315.85720825]
[209.90191650 306.01214600]
[201.59928894 293.52603149]
[202.22326660 308.51306152]
[202.84724426 323.50006104]
[203.47122192 338.48709106]
[204.09519958 353.47409058]
[204.71917725 368.46112061]
[205.34315491 383.44815063]
[205.96713257 398.43515015]
[212.66711426 414.00906372]
[199.55659485 424.75848389]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 148]
[2 147]
[3 146]
[4 145]
[5 144]
[6 143]
[7 142]
[8 141]
[9 119]
[10 118]
[11 117]
[13 115]
[14 114]
[15 113]
[16 32]
[17 31]
[18 30]
[19 29]
[20 28]
[21 27]
[36 111]
[37 110]
[38 109]
[39 108]
[41 61]
[42 60]
[43 59]
[44 58]
[45 57]
[46 56]
[47 55]
[63 84]
[64 83]
[65 82]
[88 107]
[89 106]
[90 105]
[91 104]
[92 103]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
