%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:31 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGGCAACCUCAACACCACCUUCUUCGACCCCGCCGGAGGAGGAGACCCCAUUCUAUACCAACxxxxxxxxxxUCAUUCUCAUAAUCGCCCACGGGCUUACAUCCUCAUUACUAUUCUGCCUAGCAAACUCAACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[101.57814789 359.74203491]
[101.26609039 344.74526978]
[100.95403290 329.74853516]
[100.64197540 314.75177002]
[100.32991791 299.75500488]
[100.01786041 284.75827026]
[99.70581055 269.76150513]
[99.39375305 254.76475525]
[99.08169556 239.76800537]
[96.90485382 224.92678833]
[92.89711761 210.47210693]
[88.88937378 196.01741028]
[84.88163757 181.56272888]
[80.78811646 195.99336243]
[72.86253357 208.72854614]
[61.72340393 218.77444458]
[48.24004745 225.34703064]
[33.46470642 227.93341064]
[18.55046654 226.33172607]
[4.66124392 220.66696167]
[-7.11903238 211.38121033]
[-15.87102032 199.19914246]
[-20.91170692 185.07145691]
[-21.84771347 170.10069275]
[-18.60599136 155.45516968]
[-11.43953037 142.27784729]
[-0.90760440 131.59709167]
[12.16786480 124.24644470]
[26.76645660 120.79954529]
[41.74888229 121.52539825]
[55.94590759 126.36735535]
[68.24957275 134.94754028]
[77.69969940 146.59637451]
[83.55949402 160.40736389]
[85.73632812 145.56614685]
[72.35937500 138.93228149]
[61.68560410 128.49093628]
[54.75887299 115.26325989]
[52.25660324 100.54287720]
[54.42350769 85.76940155]
[61.04766464 72.38764191]
[71.48125458 61.70629501]
[84.70390320 54.76996613]
[99.42247009 52.25701141]
[101.59930420 37.41580582]
[103.77613831 22.57459831]
[105.95298004 7.73339367]
[108.12981415 -7.10781193]
[102.47713470 -21.88474846]
[111.97954559 -33.35442734]
[113.84715271 -48.23770905]
[115.40473938 -63.15662003]
[113.17388153 -72.08271027]
[117.15306091 -78.36855316]
[119.02066803 -93.25183868]
[120.88828278 -108.13511658]
[106.37456512 -112.01657867]
[92.52458954 -117.83824158]
[79.59635925 -125.49165344]
[67.83072662 -134.83422852]
[57.44687271 -145.69190979]
[48.63825226 -157.86244202]
[41.56895828 -171.11909485]
[36.37068939 -185.21490479]
[33.14028549 -199.88726807]
[31.93792343 -214.86285400]
[32.78601074 -229.86267090]
[35.66873932 -244.60728455]
[40.53240967 -258.82202148]
[47.28641510 -272.24203491]
[55.80493164 -284.61737061]
[65.92926788 -295.71743774]
[77.47080994 -305.33547974]
[90.21453857 -313.29229736]
[103.92306519 -319.43966675]
[118.34098816 -323.66305542]
[133.19972229 -325.88381958]
[148.22245789 -326.06057739]
[163.12931824 -324.19000244]
[177.64262390 -320.30694580]
[191.49197388 -314.48379517]
[204.41937256 -306.82897949]
[216.18399048 -297.48513794]
[226.56666565 -286.62634277]
[235.37397766 -274.45483398]
[242.44183350 -261.19741821]
[247.63858032 -247.10105896]
[250.86740112 -232.42834473]
[252.06813049 -217.45262146]
[251.21842957 -202.45289612]
[248.33409119 -187.70860291]
[243.46888733 -173.49440002]
[236.71342468 -160.07510376]
[228.19357300 -147.70069885]
[218.06803894 -136.60173035]
[206.52545166 -126.98493958]
[193.78086853 -119.02949524]
[180.07167053 -112.88360596]
[165.65328979 -108.66176605]
[150.79431152 -106.44261169]
[135.77156067 -106.26750183]
[133.90394592 -91.38422394]
[132.03633118 -76.50094604]
[130.32365417 -61.59904099]
[128.76606750 -46.68012619]
[131.06735229 -42.42811966]
[130.67652893 -36.67672348]
[126.82074738 -31.17759132]
[132.62911987 -17.46219826]
[122.97101593 -4.93097496]
[120.79418182 9.91023064]
[118.61734772 24.75143623]
[116.44050598 39.59263992]
[114.26367188 54.43384552]
[127.64062500 61.06771851]
[138.31439209 71.50905609]
[145.24111938 84.73674011]
[147.74339294 99.45712280]
[145.57649231 114.23059845]
[138.95233154 127.61235809]
[128.51873779 138.29370117]
[115.29609680 145.23004150]
[100.57752991 147.74299622]
[98.40069580 162.58419800]
[99.33632660 177.55499268]
[103.34406281 192.00967407]
[107.35180664 206.46437073]
[111.35954285 220.91905212]
[116.52146912 206.83522034]
[127.19879150 196.29980469]
[141.35043335 191.32678223]
[156.27117920 192.86677551]
[169.10876465 200.62541199]
[177.40916443 213.11953735]
[179.58567810 227.96078491]
[175.22224426 242.31211853]
[165.15296936 253.43011475]
[151.30270386 259.18945312]
[136.31906128 258.48922729]
[123.06630707 251.46322632]
[114.07844543 239.45594788]
[114.39050293 254.45269775]
[114.70256042 269.44946289]
[115.01461792 284.44619751]
[115.32667542 299.44296265]
[115.63873291 314.43969727]
[115.95078278 329.43646240]
[116.26284027 344.43322754]
[116.57489777 359.42996216]
[119.16589355 378.63769531]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 149]
[2 148]
[3 147]
[4 146]
[5 145]
[6 144]
[7 143]
[8 142]
[9 141]
[10 128]
[11 127]
[12 126]
[13 125]
[34 124]
[35 123]
[44 114]
[45 113]
[46 112]
[47 111]
[48 110]
[50 108]
[51 105]
[52 104]
[54 103]
[55 102]
[56 101]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
