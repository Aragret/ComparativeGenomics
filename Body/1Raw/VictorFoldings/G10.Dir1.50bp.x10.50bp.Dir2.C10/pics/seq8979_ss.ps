%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:09 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGGGAUAAUCCUAUUUAUUACCUCAGAAGUUUUUUUCUUCGCAGGAUUUUUCUGAGCCUUUUxxxxxxxxxxACCCCACUAAAACACUCACCAAGACCUCAACCCCUGACCCCCAUGCCUCAGGAUACUCCUCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[152.22189331 264.87951660]
[151.28625488 249.90870667]
[150.35063171 234.93791199]
[149.41500854 219.96713257]
[148.47937012 204.99633789]
[147.54374695 190.02554321]
[146.60812378 175.05474854]
[142.90196228 160.51982117]
[136.55482483 146.92886353]
[130.20770264 133.33792114]
[123.86056519 119.74696350]
[117.51343536 106.15601349]
[107.13473511 115.43766785]
[94.45738983 114.42097473]
[82.95558167 124.04949951]
[71.45378113 133.67802429]
[59.95197678 143.30654907]
[60.11483383 158.94328308]
[50.14860153 170.99353027]
[34.75902557 173.76750183]
[21.21259499 165.95544434]
[15.90552139 151.24595642]
[21.34364128 136.58441162]
[34.95923996 128.89355469]
[50.32345200 131.80474854]
[61.82525253 122.17622375]
[73.32705688 112.54769897]
[84.82885742 102.91916656]
[86.78874969 90.13576508]
[98.28538513 82.55835724]
[112.42743683 86.20957184]
[111.49180603 71.23878479]
[110.55617523 56.26799011]
[109.62055206 41.29719925]
[98.05278015 30.86530495]
[97.31718445 15.66946507]
[107.33368683 4.70565224]
[106.39806366 -10.26513958]
[105.46243286 -25.23593140]
[91.81105804 -32.13427353]
[83.50034332 -44.85546875]
[82.67840576 -59.92831802]
[89.46599579 -73.29935455]
[101.95092010 -81.42291260]
[101.01528931 -96.39370728]
[100.07966614 -111.36450195]
[99.14403534 -126.33528900]
[96.51924896 -129.97836304]
[95.35009003 -133.87760925]
[95.53323364 -137.53114319]
[96.80918121 -140.52546692]
[98.80601501 -142.57972717]
[99.11807251 -157.57647705]
[88.02281189 -147.48216248]
[73.04288483 -146.70646667]
[60.96434021 -155.60076904]
[57.25887680 -170.13587952]
[63.60510635 -183.72724915]
[77.12812805 -190.21784973]
[91.70187378 -186.66738892]
[100.72441864 -174.68385315]
[103.20954132 -189.47656250]
[105.69465637 -204.26927185]
[108.17977905 -219.06198120]
[99.28025818 -231.84619141]
[102.01124573 -246.81269836]
[114.25389099 -255.21824646]
[116.73901367 -270.01095581]
[119.22412872 -284.80364990]
[121.70925140 -299.59637451]
[108.28660583 -306.57403564]
[97.67856598 -317.35943604]
[90.92440796 -330.89590454]
[88.68583679 -345.85733032]
[91.18215942 -360.77789307]
[98.16880798 -374.19586182]
[108.96131134 -384.79669189]
[122.50232697 -391.54177856]
[137.46524048 -393.77032471]
[152.38414001 -391.26400757]
[165.79742432 -384.26834106]
[176.39099121 -373.46875000]
[183.12699890 -359.92321777]
[185.34552002 -344.95883179]
[182.82920837 -330.04159546]
[175.82458496 -316.63299561]
[165.01788330 -306.04669189]
[151.46784973 -299.31973267]
[136.50195312 -297.11126709]
[134.01684570 -282.31854248]
[131.53172302 -267.52584839]
[129.04660034 -252.73312378]
[137.87049866 -240.78848267]
[135.56095886 -225.75117493]
[122.97248840 -216.57685852]
[120.48736572 -201.78414917]
[118.00225067 -186.99143982]
[115.51712799 -172.19873047]
[114.11482239 -157.26441956]
[113.80277252 -142.26766968]
[114.11482239 -127.27091980]
[115.05045319 -112.30012512]
[115.98608398 -97.32933807]
[116.92171478 -82.35854340]
[130.32093811 -75.85266113]
[138.72050476 -63.43077850]
[139.78164673 -48.37287903]
[133.11947632 -34.71592331]
[120.43322754 -26.17156029]
[121.36885071 -11.20076752]
[122.30448151 3.77002382]
[133.60812378 13.40139294]
[134.77024841 28.57057571]
[124.59133911 40.36157227]
[125.52696991 55.33236313]
[126.46260071 70.30315399]
[127.39822388 85.27394867]
[131.10438538 99.80888367]
[137.45152283 113.39983368]
[143.79864502 126.99078369]
[150.14578247 140.58174133]
[156.49290466 154.17268372]
[158.24143982 139.27494812]
[164.42869568 125.61047363]
[174.47105408 114.46815491]
[187.42126465 106.89900208]
[202.05780029 103.61697388]
[217.00007629 104.93163300]
[230.83866882 110.71899414]
[242.26823425 120.43314362]
[250.21070862 133.15782166]
[253.91690063 147.69274902]
[253.03721619 162.66693115]
[247.65464783 176.66792297]
[238.27691650 188.37510681]
[225.78854370 196.68417358]
[211.36750793 200.81138611]
[196.37408447 200.36743164]
[182.22250366 195.39421082]
[170.24763489 186.36080933]
[161.57890320 174.11912537]
[162.51454163 189.08992004]
[163.45016479 204.06069946]
[164.38578796 219.03149414]
[165.32142639 234.00228882]
[166.25704956 248.97308350]
[167.19267273 263.94387817]
[176.70800781 277.30017090]
[169.65356445 292.10446167]
[153.28634644 293.12734985]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 147]
[2 146]
[3 145]
[4 144]
[5 143]
[6 142]
[7 141]
[8 122]
[9 121]
[10 120]
[11 119]
[12 118]
[14 28]
[15 27]
[16 26]
[17 25]
[31 117]
[32 116]
[33 115]
[34 114]
[37 111]
[38 110]
[39 109]
[44 104]
[45 103]
[46 102]
[47 101]
[52 100]
[53 99]
[61 98]
[62 97]
[63 96]
[64 95]
[67 92]
[68 91]
[69 90]
[70 89]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
