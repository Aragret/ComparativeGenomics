%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:34 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGAAGCCCCCAUUCGUAUAAUAAUUACAUCACAAGACGUCUUGCACUCAUGAGCUGUCCCCAxxxxxxxxxxCAAAAUUCAGAAUAAUAACACACCCGACCACACCGCUAACAAUCAAUACUAAACCCCCAUCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[157.68132019 101.43566132]
[142.77941895 103.14835358]
[127.87751007 104.86104584]
[112.97560883 106.57373047]
[100.62403870 115.08482361]
[93.71704102 128.39997864]
[86.81003571 141.71513367]
[79.90303802 155.03028870]
[72.99604034 168.34544373]
[74.27516937 184.69462585]
[60.60460281 193.75265503]
[46.04745483 186.20140076]
[45.57886887 169.80894470]
[59.68088531 161.43844604]
[66.58788300 148.12329102]
[73.49488068 134.80813599]
[80.40187836 121.49298096]
[87.30888367 108.17782593]
[76.21756744 98.07917786]
[63.60643768 106.20072174]
[50.99530792 114.32225800]
[46.20830536 129.63447571]
[31.20055199 135.30430603]
[17.48471260 126.98233032]
[15.58240700 111.05245209]
[26.95291901 99.73472595]
[42.87376785 101.71113586]
[55.48489380 93.58959198]
[68.09602356 85.46804810]
[67.78403473 77.97454071]
[52.79700851 78.59828186]
[52.17349625 63.61125183]
[67.16005707 62.98752213]
[66.84806824 55.49401474]
[53.60548401 48.44887924]
[40.36289597 41.40374756]
[26.97661209 34.63563156]
[13.45242214 28.14746666]
[-0.07176763 21.65930176]
[-13.97432327 16.02734375]
[-28.20110321 11.27352905]
[-42.42788315 6.51971436]
[-56.65465927 1.76589966]
[-72.60643005 5.57025957]
[-83.67890167 -6.52653408]
[-78.48166656 -22.08033752]
[-62.36119461 -25.09073067]
[-51.90084457 -12.46087933]
[-37.67406845 -7.70706463]
[-23.44728851 -2.95324993]
[-9.22050858 1.80056500]
[-14.53323841 -12.22708321]
[-8.54687023 -25.98075104]
[5.33980942 -31.65174103]
[19.24258423 -26.02032280]
[25.26809692 -12.28375816]
[19.99533844 1.75896275]
[6.41639757 8.13511086]
[19.94058800 14.62327576]
[33.46477890 21.11144066]
[38.24327469 20.37557793]
[43.52754974 22.67943001]
[47.40803146 28.16115952]
[60.65061951 35.20629501]
[73.89320374 42.25143051]
[111.26291656 91.67182922]
[126.16481781 89.95914459]
[141.06672668 88.24645233]
[155.96862793 86.53376007]
[155.37380981 71.53848267]
[155.90126038 56.54068375]
[157.54801941 41.62423706]
[160.30490112 26.87256432]
[164.15646362 12.36816406]
[169.08119202 -1.80784941]
[175.05151367 -15.57619667]
[182.03407288 -28.85987854]
[189.98979187 -41.58460617]
[198.87419128 -53.67921829]
[208.63758850 -65.07607269]
[219.22537231 -75.71143341]
[230.57833862 -85.52583313]
[242.63299561 -94.46437073]
[255.32192993 -102.47705841]
[268.57418823 -109.51909637]
[282.31561279 -115.55110168]
[296.46942139 -120.53932953]
[310.95639038 -124.45588684]
[325.69555664 -127.27886963]
[340.60446167 -128.99250793]
[355.59976196 -129.58718872]
[370.59756470 -129.05960083]
[385.51397705 -127.41270447]
[400.26562500 -124.65570068]
[414.76998901 -120.80400085]
[428.94595337 -115.87915802]
[442.71426392 -109.90870667]
[455.99789429 -102.92604065]
[468.72253418 -94.97020721]
[480.81707764 -86.08569336]
[492.21383667 -76.32219696]
[502.84912109 -65.73432159]
[512.66339111 -54.38126373]
[521.60186768 -42.32653046]
[529.61444092 -29.63752747]
[536.65631104 -16.38522339]
[542.68823242 -2.64372945]
[547.67633057 11.51010513]
[551.59277344 25.99712563]
[554.41558838 40.73631668]
[556.12908936 55.64524460]
[556.72363281 70.64053345]
[556.19592285 85.63832092]
[554.54888916 100.55474091]
[551.79180908 115.30636597]
[547.93994141 129.81069946]
[543.01501465 143.98661804]
[537.04443359 157.75486755]
[530.06164551 171.03842163]
[522.10565186 183.76301575]
[513.22106934 195.85746765]
[503.45745850 207.25415039]
[492.86950684 217.88932800]
[481.51635742 227.70352173]
[469.46154785 236.64184570]
[456.77246094 244.65431213]
[443.52011108 251.69612122]
[429.77856445 257.72787476]
[415.62466431 262.71585083]
[401.13763428 266.63217163]
[386.39840698 269.45489502]
[371.48947144 271.16824341]
[356.49417114 271.76266479]
[341.49636841 271.23483276]
[326.57998657 269.58767700]
[311.82836914 266.83038330]
[297.32406616 262.97845459]
[283.14819336 258.05334473]
[269.38000488 252.08265686]
[256.09649658 245.09976196]
[243.37199402 237.14369202]
[231.27761841 228.25897217]
[219.88102722 218.49528503]
[209.24594116 207.90721130]
[199.43183899 196.55398560]
[190.49362183 184.49908447]
[182.48126221 171.80995178]
[175.43957520 158.55751038]
[169.40794373 144.81591797]
[164.42008972 130.66198730]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 69]
[2 68]
[3 67]
[4 66]
[5 18]
[6 17]
[7 16]
[8 15]
[9 14]
[19 29]
[20 28]
[21 27]
[34 65]
[35 64]
[36 63]
[37 60]
[38 59]
[39 58]
[40 51]
[41 50]
[42 49]
[43 48]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
