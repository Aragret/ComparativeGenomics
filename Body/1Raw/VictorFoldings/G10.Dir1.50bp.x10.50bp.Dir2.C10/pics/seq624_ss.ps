%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:43 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGUACUACUAAUCUCAUCAAUACAACCCCCGCCCAUCCUACCCAGCACACACACACCGCUGCUxxxxxxxxxxCAUAAUUAAACUUUACUUCCUCUCUUUCUUCUUCCCACUCAUCCUAACCCUACUCCUAAUCCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[-33.34221649 227.24455261]
[-40.01188660 219.86656189]
[-51.79402161 229.14994812]
[-63.57616043 238.43333435]
[-69.62730408 253.05162048]
[-84.41282654 254.85096741]
[-96.19496155 264.13436890]
[-107.97709656 273.41772461]
[-119.75923920 282.70111084]
[-131.54136658 291.98449707]
[-143.32351685 301.26788330]
[-137.51495361 315.20214844]
[-135.68234253 330.18695068]
[-137.96168518 345.11032104]
[-144.18383789 358.86486816]
[-153.88705444 370.42990112]
[-166.35131836 378.94720459]
[-180.65168762 383.78475952]
[-195.72698975 384.58358765]
[-210.45851135 381.28442383]
[-223.75309753 374.13201904]
[-234.62420654 363.65722656]
[-242.26510620 350.63726807]
[-246.10881042 336.03833008]
[-245.87008667 320.94378662]
[-241.56665039 306.47372437]
[-233.51783752 293.70190430]
[-222.32092285 283.57611084]
[-208.80680847 276.84771729]
[-193.97831726 274.01602173]
[-178.93582153 275.29119873]
[-164.79557800 280.57855225]
[-152.60690308 289.48574829]
[-140.82475281 280.20236206]
[-129.04261780 270.91897583]
[-117.26048279 261.63558960]
[-105.47834778 252.35221863]
[-93.69621277 243.06883240]
[-88.48780060 229.11456299]
[-72.85954285 226.65119934]
[-61.07740784 217.36781311]
[-49.29526901 208.08442688]
[-64.96707916 182.20208740]
[-76.19315338 154.10447693]
[-82.67095947 124.54877472]
[-84.22592163 94.33151245]
[-80.81613159 64.26700592]
[-72.53349304 35.16548157]
[-59.60120773 7.81119585]
[-42.36779404 -17.05867386]
[-21.29767418 -38.77389908]
[-30.70153236 -50.46010971]
[-40.10538864 -62.14631653]
[-49.50924683 -73.83252716]
[-64.51437378 -70.81513977]
[-79.19974518 -75.12773895]
[-90.19076538 -85.77931213]
[-94.96177673 -100.32221985]
[-92.41643524 -115.41459656]
[-83.13964844 -127.58832550]
[-69.26314545 -134.04597473]
[-53.97564697 -133.30363464]
[-40.79011536 -125.53186798]
[-32.73648071 -112.51658630]
[-31.66541481 -97.24860382]
[-37.82303619 -83.23638153]
[-28.41917992 -71.55017853]
[-19.01532364 -59.86396790]
[-9.61146641 -48.17775726]
[-1.45890129 -53.87466431]
[6.98909569 -59.12351608]
[15.70792580 -63.90902328]
[24.67220116 -68.21725464]
[33.85581589 -72.03565979]
[43.23203659 -75.35312653]
[52.77355576 -78.15999603]
[62.45258713 -80.44808960]
[72.24095154 -82.21074677]
[82.11015320 -83.44284058]
[92.03144073 -84.14076996]
[101.97592926 -84.30251312]
[111.91466522 -83.92759705]
[121.81871033 -83.01712036]
[131.65922546 -81.57371521]
[141.40754700 -79.60160065]
[151.03530884 -77.10652161]
[160.51445007 -74.09572601]
[169.81738281 -70.57800293]
[178.91702271 -66.56357574]
[187.78688049 -62.06414413]
[196.40109253 -57.09280396]
[204.73461914 -51.66403961]
[212.76316833 -45.79365158]
[220.46337891 -39.49873734]
[227.81280518 -32.79762268]
[234.79006958 -25.70982361]
[241.37483215 -18.25597763]
[247.54795837 -10.45778942]
[253.29142761 -2.33796501]
[258.58853149 6.07985067]
[263.42388916 14.77114677]
[267.78335571 23.71061707]
[271.65426636 32.87222672]
[275.02532959 42.22930527]
[277.88677979 51.75460052]
[280.23022461 61.42037964]
[282.04888916 71.19849396]
[283.33743286 81.06047821]
[284.09213257 90.97760773]
[284.31079102 100.92101288]
[283.99279785 110.86173248]
[283.13900757 120.77082825]
[281.75195312 130.61944580]
[279.83566284 140.37889099]
[277.39572144 150.02076721]
[274.43923950 159.51699829]
[270.97482300 168.83990479]
[267.01254272 177.96238708]
[262.56396484 186.85783386]
[257.64199829 195.50038147]
[252.26101685 203.86483765]
[246.43667603 211.92684937]
[240.18594360 219.66294861]
[233.52700806 227.05062866]
[226.47926331 234.06834412]
[219.06321716 240.69566345]
[211.30049133 246.91331482]
[203.21366882 252.70317078]
[194.82632446 258.04837036]
[186.16284180 262.93338013]
[177.24847412 267.34393311]
[168.10916138 271.26724243]
[158.77153015 274.69180298]
[149.26277161 277.60772705]
[139.61056519 280.00646973]
[129.84301758 281.88104248]
[119.98857117 283.22604370]
[110.07592010 284.03747559]
[100.13393402 284.31304932]
[90.19155884 284.05194092]
[80.27774048 283.25488281]
[70.42134857 281.92422485]
[60.65108490 280.06384277]
[50.99540329 277.67913818]
[41.48241425 274.77703857]
[32.13981628 271.36602783]
[22.99481773 267.45602417]
[14.07404709 263.05844116]
[5.40347862 258.18603516]
[-2.99163985 252.85301208]
[-11.08686352 247.07492065]
[-18.85861969 240.86856079]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 42]
[3 41]
[4 40]
[6 38]
[7 37]
[8 36]
[9 35]
[10 34]
[11 33]
[51 69]
[52 68]
[53 67]
[54 66]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
