%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:52 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCCAGAACACUACGAGCCACAGCUUAAAACUCAAAGGACCUGGCGGUGCUUCAUAUCCCUCxxxxxxxxxxCCAAAAUCCAUUUCACUAUCAUAUUCAUCGGCGUAAAUCUAACUUUCUUCCCACAACACUCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[129.31727600 279.70706177]
[129.00521851 264.71029663]
[128.69317627 249.71354675]
[128.38111877 234.71679688]
[128.06906128 219.72004700]
[127.75700378 204.72329712]
[127.44494629 189.72653198]
[127.13288879 174.72978210]
[126.82083130 159.73303223]
[122.21526337 145.45756531]
[113.70417786 133.10600281]
[105.19308472 120.75442505]
[82.58783722 116.71269226]
[74.21727753 92.41349030]
[59.21809006 92.56952667]
[44.21890259 92.72556305]
[29.22214699 93.03762054]
[14.22945213 93.50566864]
[-0.76324433 93.97370911]
[-15.75594044 94.44174957]
[-19.47914314 96.95157623]
[-23.41296959 97.99850464]
[-27.05901337 97.70144653]
[-30.01206017 96.33268738]
[-32.00301743 94.27272797]
[-46.98273087 93.49288940]
[-61.96244431 92.71304321]
[-76.94216156 91.93319702]
[-87.37278748 105.20927429]
[-103.49496460 109.63159180]
[-118.93020630 103.65503693]
[-127.69290161 89.80871582]
[-142.68559265 89.34067535]
[-157.67829895 88.87263489]
[-167.07948303 101.21755981]
[-181.95101929 105.64667511]
[-196.57449341 100.45690155]
[-205.32687378 87.64380646]
[-204.84269714 72.13428497]
[-195.30813599 59.89207077]
[-180.38941956 55.62453842]
[-165.82312012 60.97264862]
[-157.21025085 73.87993622]
[-142.21755981 74.34797668]
[-127.22486115 74.81602478]
[-120.03321838 63.52548218]
[-108.09844971 57.22684860]
[-94.50227356 57.66794205]
[-82.81597137 64.84034729]
[-76.16231537 76.95348358]
[-61.18259811 77.73332977]
[-46.20288467 78.51316833]
[-31.22317123 79.29301453]
[-16.22398186 79.44905090]
[-1.23128653 78.98101044]
[13.76140976 78.51296997]
[28.75410652 78.04492950]
[35.38441849 74.67082214]
[44.06286621 77.72637939]
[59.06205368 77.57034302]
[74.06124115 77.41430664]
[86.14122772 68.52195740]
[90.74679565 54.24649429]
[95.35235596 39.97103500]
[99.95792389 25.69557381]
[86.63208008 18.72922707]
[74.67534637 9.61087227]
[64.43172455 -1.39713740]
[56.19595718 -13.97807980]
[50.20499420 -27.76997757]
[46.63121796 -42.37600708]
[45.57744598 -57.37592697]
[47.07399750 -72.33815765]
[51.07781601 -86.83220673]
[57.47370148 -100.44104767]
[66.07763672 -112.77313232]
[76.64206696 -123.47364044]
[88.86302185 -132.23469543]
[102.38890076 -138.80422974]
[116.83052063 -142.99322510]
[131.77236938 -144.68113708]
[146.78454590 -143.81942749]
[161.43511963 -140.43287659]
[175.30255127 -134.61891174]
[187.98786926 -126.54483795]
[199.12608337 -116.44293976]
[208.39671326 -104.60387421]
[215.53303528 -91.36828613]
[220.32972717 -77.11697388]
[222.64875793 -62.25999069]
[222.42343140 -47.22478867]
[219.66021729 -32.44396973]
[214.43861389 -18.34280205]
[206.90887451 -5.32700825]
[197.28761292 6.22892380]
[185.85168457 15.99250603]
[172.93011475 23.68282127]
[158.89468384 29.07860184]
[144.14920044 32.02460480]
[129.11795044 32.43606186]
[114.23338318 30.30113792]
[109.62782288 44.57659912]
[105.02225494 58.85205841]
[100.41668701 73.12751770]
[109.53978729 75.85408783]
[116.83486938 81.45228577]
[121.48500061 89.00490570]
[123.07527161 97.39891052]
[121.62252045 105.48690033]
[117.54466248 112.24333191]
[126.05574799 124.59490967]
[134.56683350 136.94648743]
[133.85952759 121.96316528]
[136.22415161 107.15071869]
[141.56126404 93.13233185]
[149.64630127 80.49776459]
[160.13909912 69.77857971]
[172.59825134 61.42575073]
[186.49954224 55.79069138]
[201.25814819 53.11047745]
[216.25314331 53.49786758]
[230.85366821 56.93656921]
[244.44546509 63.28190613]
[256.45669556 72.26692200]
[266.38201904 83.51360321]
[273.80389404 96.54878235]
[278.41003418 110.82405853]
[280.00665283 125.73883820]
[278.52664185 140.66564941]
[274.03216553 154.97647095]
[266.71240234 168.06925964]
[256.87527466 179.39315796]
[244.93463135 188.47177124]
[231.39285278 194.92312622]
[216.81964111 198.47581482]
[201.82812500 198.98037720]
[187.04902649 196.41558838]
[173.10411072 190.88932800]
[160.58007812 182.63412476]
[150.00381470 171.99725342]
[141.81758118 159.42097473]
[142.12963867 174.41772461]
[142.44169617 189.41448975]
[142.75375366 204.41123962]
[143.06581116 219.40798950]
[143.37786865 234.40473938]
[143.68992615 249.40150452]
[144.00198364 264.39825439]
[144.31404114 279.39498901]
[146.90502930 298.60272217]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 149]
[2 148]
[3 147]
[4 146]
[5 145]
[6 144]
[7 143]
[8 142]
[9 141]
[10 112]
[11 111]
[12 110]
[14 61]
[15 60]
[16 59]
[17 57]
[18 56]
[19 55]
[20 54]
[25 53]
[26 52]
[27 51]
[28 50]
[32 45]
[33 44]
[34 43]
[62 104]
[63 103]
[64 102]
[65 101]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
