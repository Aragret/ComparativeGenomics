%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:12 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCCUACGCAUCCUUUACAUAACAGACGAGGUCAACGAUCCCUCCCUUACCAUCAAAUCAAUxxxxxxxxxxAUCCGCUACCUUCACGCCAAUGGCGCCUCAAUAUUCUUUAUCUGCCUCUUCCUACACAUCCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[212.98672485 75.43693542]
[206.34301758 62.48495102]
[192.56063843 68.40491486]
[178.77824402 74.32487488]
[164.99586487 80.24484253]
[151.21348572 86.16480255]
[137.43110657 92.08476257]
[123.64872742 98.00473022]
[109.86634827 103.92469025]
[96.48005676 110.69281006]
[83.54200745 118.28271484]
[70.60395050 125.87262726]
[57.66589355 133.46252441]
[51.79992294 140.55070496]
[44.37878036 141.07254028]
[31.28562546 148.39164734]
[34.24326324 163.22766113]
[32.46954727 178.25128174]
[26.13824844 191.99064636]
[15.86964417 203.09968567]
[2.66974473 210.49008179]
[-12.16825581 213.43777466]
[-27.19068336 211.65399170]
[-40.92579269 205.31349182]
[-52.02795410 195.03744507]
[-59.40949631 181.83259583]
[-62.34725189 166.99261475]
[-60.55340195 151.97138977]
[-54.20369720 138.24053955]
[-43.92021561 127.14525604]
[-30.71042252 119.77256775]
[-15.86848450 116.84475708]
[-0.84846181 118.64867401]
[12.87813663 125.00757599]
[23.96652031 135.29849243]
[37.05967331 127.97938538]
[50.07598495 120.52447510]
[63.01403809 112.93457031]
[75.95209503 105.34465790]
[88.89015198 97.75475311]
[74.82932281 92.53046417]
[68.40646362 78.97513580]
[73.26817322 64.78486633]
[86.65419769 58.01623154]
[100.96456146 62.51215363]
[108.07450867 75.72005463]
[103.94638062 90.14231110]
[117.72875977 84.22235107]
[131.51113892 78.30238342]
[145.29353333 72.38242340]
[159.07591248 66.46245575]
[172.85829163 60.54249573]
[186.64067078 54.62253189]
[200.42304993 48.70256805]
[195.32365417 34.06655121]
[191.28121948 19.10430908]
[188.31632996 3.89206553]
[186.44403076 -11.49268341]
[185.67385864 -26.97156525]
[186.00968933 -42.46573257]
[187.44976807 -57.89625931]
[189.98674011 -73.18454742]
[193.60766602 -88.25272369]
[198.29403687 -103.02404785]
[204.02197266 -117.42327118]
[210.76225281 -131.37707520]
[218.48052979 -144.81439209]
[227.13745117 -157.66676331]
[236.68888855 -169.86877441]
[247.08616638 -181.35827637]
[258.27630615 -192.07676697]
[270.20227051 -201.96966553]
[282.80331421 -210.98660278]
[296.01519775 -219.08168030]
[309.77059937 -226.21368408]
[323.99948120 -232.34631348]
[338.62933350 -237.44834900]
[353.58560181 -241.49386597]
[368.79211426 -244.46224976]
[384.17138672 -246.33843994]
[399.64508057 -247.11289978]
[415.13439941 -246.78170776]
[430.56039429 -245.34658813]
[445.84454346 -242.81489563]
[460.90893555 -239.19953918]
[475.67691040 -234.51898193]
[490.07318115 -228.79708862]
[504.02450562 -222.06304932]
[517.45977783 -214.35116577]
[530.31054688 -205.70077515]
[542.51147461 -196.15596008]
[554.00030518 -185.76536560]
[564.71862793 -174.58195496]
[574.61187744 -162.66268921]
[583.62957764 -150.06832886]
[596.40692139 -157.92576599]
[609.18432617 -165.78318787]
[621.96166992 -173.64060974]
[632.28656006 -187.08801270]
[648.06665039 -180.88922119]
[646.47845459 -164.00982666]
[629.81909180 -160.86325073]
[617.04174805 -153.00582886]
[604.26434326 -145.14840698]
[591.48699951 -137.29096985]
[598.24932861 -124.41011810]
[604.13354492 -111.10500336]
[609.11328125 -97.43539429]
[613.16607666 -83.46271515]
[616.27374268 -69.24974060]
[618.42224121 -54.86031723]
[619.60198975 -40.35910416]
[619.80755615 -25.81125832]
[619.03802490 -11.28214264]
[617.29681396 3.16295624]
[614.59173584 17.45913124]
[610.93499756 31.54214096]
[606.34289551 45.34870148]
[600.83612061 58.81677246]
[594.43933105 71.88581848]
[587.18127441 84.49712372]
[579.09454346 96.59399414]
[570.21545410 108.12207031]
[560.58386230 119.02953339]
[550.24310303 129.26736450]
[539.23950195 138.78955078]
[527.62255859 147.55326843]
[515.44445801 155.51913452]
[502.75991821 162.65133667]
[489.62588501 168.91780090]
[476.10137939 174.29035950]
[462.24713135 178.74482727]
[448.12542725 182.26118469]
[433.79968262 184.82360840]
[419.33428955 186.42056274]
[404.79421997 187.04484558]
[390.24484253 186.69360352]
[375.75146484 185.36843872]
[361.37927246 183.07522583]
[347.19281006 179.82429504]
[333.25582886 175.63020325]
[319.63098145 170.51177979]
[306.37948608 164.49198914]
[293.56088257 157.59786987]
[281.23278809 149.86036682]
[269.45062256 141.31423950]
[258.26733398 131.99786377]
[247.73315430 121.95307922]
[237.89547729 111.22499847]
[228.79849243 99.86181641]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 54]
[3 53]
[4 52]
[5 51]
[6 50]
[7 49]
[8 48]
[9 47]
[10 40]
[11 39]
[12 38]
[13 37]
[15 36]
[16 35]
[95 105]
[96 104]
[97 103]
[98 102]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
