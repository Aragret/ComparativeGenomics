%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:03 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGUUCUAUUAGCUCUUAGUAAGAUUACACAUGCAAGCAUCCCCGUUCCAGUGAGUUCACCCUxxxxxxxxxxCUGAGCCCUAGGAUUCAUCUUUCUUUUCACCGUAGGUGGCCUGACUGGCAUUGUAUUAGCCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[72.95114136 292.77563477]
[72.95114136 277.77563477]
[72.95114136 262.77563477]
[72.95114136 247.77565002]
[72.95114136 232.77565002]
[72.95114136 217.77565002]
[72.95114136 202.77565002]
[72.95114136 187.77565002]
[72.95114136 172.77565002]
[72.95114136 157.77565002]
[57.98197174 156.81436157]
[44.83972549 149.58378601]
[36.01509476 137.45423889]
[33.18051529 122.72450256]
[36.87319183 108.18613434]
[46.39329529 96.59442139]
[59.93658447 90.14622498]
[74.93635559 90.06358337]
[88.55001068 96.36227417]
[76.28764343 87.72315216]
[64.02527618 79.08403778]
[51.76290512 70.44492340]
[41.91949081 81.78062439]
[30.97974968 92.06231689]
[19.05594444 101.18447876]
[6.27043056 109.05351257]
[-7.24559069 115.58866119]
[-21.35342216 120.72286987]
[-35.90829849 124.40344238]
[-50.76085663 126.59262848]
[-65.75868988 127.26794434]
[-80.74788666 126.42247772]
[-95.57464600 124.06488800]
[-110.08681488 120.21937561]
[-124.13547516 114.92539978]
[-137.57646179 108.23729706]
[-150.27186584 100.22367859]
[-162.09138489 90.96678925]
[-172.91374207 80.56162262]
[-182.62788391 69.11494446]
[-191.13412476 56.74421692]
[-198.34518433 43.57638931]
[-204.18705750 29.74658394]
[-208.59979248 15.39671516]
[-211.53811646 0.67403769]
[-212.97187805 -14.27037048]
[-212.88636780 -29.28315544]
[-211.28245544 -44.21025848]
[-208.17658997 -58.89850998]
[-203.60066223 -73.19717407]
[-197.60162354 -86.95953369]
[-190.24102783 -100.04435730]
[-181.59440613 -112.31737518]
[-171.75048828 -123.65264893]
[-160.81030273 -133.93385315]
[-148.88609314 -143.05549622]
[-136.10023499 -150.92396545]
[-122.58392334 -157.45851135]
[-108.47586823 -162.59210205]
[-93.92082977 -166.27203369]
[-79.06817627 -168.46057129]
[-64.07031250 -169.13522339]
[-49.08114624 -168.28909302]
[-34.25449371 -165.93086243]
[-19.74249268 -162.08470154]
[-5.69406414 -156.79011536]
[7.74663115 -150.10140991]
[20.44167137 -142.08723450]
[32.26078415 -132.82983398]
[43.08268356 -122.42418671]
[52.79632187 -110.97708130]
[61.30202103 -98.60597992]
[68.51249695 -85.43783569]
[74.35375977 -71.60777283]
[78.76586914 -57.25770950]
[81.70355225 -42.53490448]
[83.13665771 -27.59043121]
[83.05047607 -12.57765102]
[81.44590759 2.34938312]
[78.33940125 17.03749466]
[73.76284027 31.33596039]
[67.76319122 45.09805679]
[60.40201950 58.18255615]
[72.66439056 66.82167053]
[84.92675781 75.46078491]
[97.18912506 84.09990692]
[112.15991974 85.03553009]
[125.40250397 77.99039459]
[138.64508057 70.94525909]
[151.88768005 63.90012741]
[165.05625916 56.71761703]
[178.14941406 49.39851379]
[175.43206787 34.50238037]
[177.70120239 19.53141403]
[184.71066284 6.10955811]
[195.70011902 -4.30728722]
[209.47750854 -10.58918095]
[224.54837036 -12.05470943]
[239.27793884 -8.54490376]
[252.06843567 -0.44048065]
[261.53247070 11.37945175]
[266.64343262 25.63275719]
[266.84695435 40.77334213]
[262.12094116 55.15886688]
[252.97801208 67.22890472]
[240.40995789 75.67417908]
[225.78004456 79.57862091]
[210.67523193 78.51869202]
[196.73397827 72.60937500]
[185.46852112 62.49166870]
[172.37536621 69.81077576]
[168.04344177 75.85892487]
[158.93281555 77.14271545]
[145.69021606 84.18785095]
[132.44763184 91.23297882]
[119.20504761 98.27811432]
[119.36107635 105.77649689]
[119.67313385 120.77324677]
[119.82916260 128.27162170]
[133.35334778 134.75979614]
[146.87754822 141.24795532]
[162.42842102 137.30465698]
[175.11959839 147.11860657]
[175.21548462 163.16137695]
[162.64253235 173.12632751]
[147.04562378 169.36920166]
[140.38937378 154.77214050]
[126.86518860 148.28398132]
[113.34099579 141.79582214]
[106.99353027 145.79077148]
[115.75153351 157.96852112]
[124.50953674 170.14625549]
[133.26753235 182.32400513]
[143.11723328 193.63697815]
[136.81080627 207.24685669]
[121.81214905 207.04582214]
[115.87275696 193.27191162]
[108.68137360 180.10816956]
[101.48999023 166.94442749]
[94.29860687 153.78068542]
[87.95114136 157.77565002]
[87.95114136 172.77565002]
[87.95114136 187.77565002]
[87.95114136 202.77565002]
[87.95114136 217.77565002]
[87.95114136 232.77565002]
[87.95114136 247.77565002]
[87.95114136 262.77563477]
[87.95114136 277.77563477]
[87.95114136 292.77563477]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[19 86]
[20 85]
[21 84]
[22 83]
[87 116]
[88 115]
[89 114]
[90 113]
[91 111]
[92 110]
[119 129]
[120 128]
[121 127]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
