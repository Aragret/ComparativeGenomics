%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:13 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCAAAGAACCCUAACACCAGCCUAACCAGAUUUCAAAUUUUAUCUUUUGGCGGUAUGCACUxxxxxxxxxxUGUGCCUAGACCAAGAAGUUAUUAUCUCGAACUGACACUGAGCCACAACCCAAACAACCCCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[220.17549133 395.10992432]
[220.17549133 380.10992432]
[220.17549133 365.10992432]
[220.17549133 350.10992432]
[220.17549133 335.10992432]
[220.17549133 320.10992432]
[220.17549133 305.10992432]
[220.17549133 290.10992432]
[220.17549133 275.10992432]
[220.17549133 260.10992432]
[216.16773987 245.65522766]
[208.44366455 232.79682922]
[199.55131531 220.71684265]
[189.56858826 209.52107239]
[175.32339478 205.17092896]
[171.91416931 189.72140503]
[161.93144226 178.52563477]
[151.94871521 167.32987976]
[135.03144836 162.76849365]
[131.36686707 144.75320435]
[121.15338898 133.76753235]
[100.37253571 139.84436035]
[79.48168945 134.15715027]
[64.64887238 118.38504028]
[60.25347137 97.18475342]
[45.75787354 93.32759094]
[31.26227760 89.47043610]
[22.09794235 90.28701019]
[16.50686264 85.37931061]
[2.09464574 81.22142792]
[-12.31757069 77.06353760]
[-27.72169685 80.67234039]
[-37.80551910 69.71032715]
[-52.21773529 65.55244446]
[-58.81934738 66.78784943]
[-64.21719360 64.76435089]
[-67.13626099 60.91019058]
[-81.36304474 56.15637589]
[-95.58982086 51.40256119]
[-109.81659698 46.64874268]
[-121.26226044 56.89044189]
[-136.29862976 60.02146912]
[-150.88098145 55.19960022]
[-161.08674622 43.72188950]
[-164.17063904 28.67578506]
[-159.30308533 14.10861301]
[-147.79344177 3.93887091]
[-132.73773193 0.90216684]
[-118.18589783 5.81535912]
[-108.05228424 17.35682487]
[-105.06278229 32.42196655]
[-90.83600616 37.17578125]
[-76.60922241 41.92959595]
[-62.38244629 46.68341064]
[-48.05984879 51.14022446]
[-33.64763260 55.29811478]
[-19.27436638 51.39190674]
[-8.15968323 62.65132141]
[6.25253296 66.80921173]
[20.66474915 70.96709442]
[35.11943817 74.97483826]
[49.61503601 78.83199310]
[64.11063385 82.68915558]
[71.12068176 72.54645538]
[80.89577484 65.03228760]
[92.50000000 60.86610031]
[92.50000000 45.86610031]
[92.50000000 30.86610031]
[92.50000000 15.86609936]
[78.72612762 9.29013634]
[69.17620850 -2.61623454]
[65.74636841 -17.48899269]
[69.11760712 -32.37514496]
[78.62057495 -44.31903076]
[92.36843872 -50.94918442]
[107.63156128 -50.94918442]
[121.37942505 -44.31903076]
[130.88238525 -32.37514496]
[134.25363159 -17.48899269]
[130.82379150 -2.61623454]
[121.27387238 9.29013634]
[107.50000000 15.86609936]
[107.50000000 30.86610031]
[107.50000000 45.86610031]
[107.50000000 60.86610031]
[115.99696350 63.50603867]
[123.69628143 67.96566772]
[130.21403503 74.02261353]
[135.22521973 81.37487030]
[138.47999573 89.65582275]
[139.81604004 98.45256042]
[139.16676331 107.32646179]
[136.56451416 115.83505249]
[132.13905334 123.55405426]
[142.35253906 134.53971863]
[155.23130798 135.80105591]
[163.51280212 145.21571350]
[163.14448547 157.34715271]
[173.12721252 168.54290771]
[183.10993958 179.73867798]
[198.06915283 184.88961792]
[200.76434326 199.53834534]
[210.74707031 210.73411560]
[210.46365356 195.73680115]
[218.20678711 182.88984680]
[231.60020447 176.13586426]
[246.53363037 177.54751587]
[258.42419434 186.69161987]
[263.62283325 200.76194763]
[260.53414917 215.44050598]
[250.10600281 226.22262573]
[235.53869629 229.79940796]
[221.30206299 225.07273865]
[229.02615356 237.93115234]
[229.16098022 222.93174744]
[232.56829834 208.32386780]
[239.08360291 194.81272888]
[248.39233398 183.05061340]
[260.04513550 173.60537720]
[273.47937012 166.93298340]
[288.04653931 163.35557556]
[303.04333496 163.04586792]
[317.74578857 166.01879883]
[331.44406128 172.13084412]
[343.47686768 181.08692932]
[353.26327515 192.45469666]
[360.33084106 205.68531799]
[364.33837891 220.14007568]
[365.09234619 235.12110901]
[362.55642700 249.90519714]
[356.85299683 263.77859497]
[348.25741577 276.07150269]
[337.18466187 286.19049072]
[324.16928101 293.64703369]
[309.83963013 298.08114624]
[294.88754272 299.27874756]
[280.03479004 297.18206787]
[265.99847412 291.89224243]
[253.45623779 283.66473389]
[243.01354980 272.89669800]
[235.17549133 260.10992432]
[235.17549133 275.10992432]
[235.17549133 290.10992432]
[235.17549133 305.10992432]
[235.17549133 320.10992432]
[235.17549133 335.10992432]
[235.17549133 350.10992432]
[235.17549133 365.10992432]
[235.17549133 380.10992432]
[235.17549133 395.10992432]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[11 114]
[12 113]
[13 103]
[14 102]
[16 100]
[17 99]
[18 98]
[20 95]
[21 94]
[25 63]
[26 62]
[27 61]
[29 60]
[30 59]
[31 58]
[33 56]
[34 55]
[37 54]
[38 53]
[39 52]
[40 51]
[66 85]
[67 84]
[68 83]
[69 82]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
