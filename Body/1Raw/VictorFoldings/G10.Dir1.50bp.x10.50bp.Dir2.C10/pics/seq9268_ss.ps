%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:26 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGUACCGUUAACUUCCAAUUAACUAGUUUUGACAACAUUCAAAAAAGAGUAAUAAACUUCGCxxxxxxxxxxCAGUUCUUCAAAUAUCUACUCAUCUUCCUAAUUACCAUACUAAUCUUAGUUACCGCUAACCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[92.50000000 304.65097046]
[92.50000000 289.65097046]
[92.50000000 274.65097046]
[92.50000000 259.65097046]
[92.50000000 244.65095520]
[92.50000000 229.65095520]
[92.50000000 214.65095520]
[92.50000000 199.65095520]
[92.50000000 184.65095520]
[92.50000000 169.65095520]
[82.27723694 167.77470398]
[72.44458771 164.40657043]
[63.21849442 159.62069702]
[54.80204773 153.52244568]
[47.38050842 146.24603271]
[35.11814117 154.88514709]
[22.85577202 163.52426147]
[10.59340382 172.16337585]
[-1.66896403 180.80250549]
[-2.80647302 196.39865112]
[-13.73989105 207.57875061]
[-29.30679321 209.06387329]
[-42.15696335 200.15280151]
[-46.22294235 185.05307007]
[-39.58490372 170.89431763]
[-25.37712288 164.36186218]
[-10.30807972 168.54013062]
[1.95428801 159.90101624]
[14.21665573 151.26190186]
[26.47902489 142.62278748]
[38.74139404 133.98367310]
[34.11864471 123.81498718]
[31.17091179 113.04082489]
[29.97313499 101.93510437]
[30.55576706 90.78018188]
[15.98306465 87.22541809]
[1.41036165 83.67065430]
[-13.16234112 80.11589050]
[-27.73504448 76.56113434]
[-42.30774689 73.00637054]
[-55.68122101 81.42811584]
[-71.07404327 77.84529114]
[-79.35391998 64.38352203]
[-75.60855865 49.02944183]
[-62.06000137 40.89235306]
[-46.74637985 44.79983902]
[-38.75298309 58.43366623]
[-24.18028259 61.98843002]
[-9.60757923 65.54319000]
[4.96512365 69.09795380]
[19.53782654 72.65271759]
[34.11053085 76.20747375]
[48.91175842 52.06777573]
[72.05992126 35.75936890]
[99.77301025 29.94676971]
[101.33058929 15.02785778]
[102.88817596 0.10894553]
[104.44575500 -14.80996704]
[106.00333405 -29.72887802]
[107.40563965 -44.66318512]
[108.65251160 -59.61127472]
[109.89939117 -74.55935669]
[110.05542755 -89.55854797]
[109.11979675 -104.52934265]
[108.18416595 -119.50012970]
[107.24853516 -134.47091675]
[92.77242279 -139.03233337]
[80.92405701 -148.51814270]
[73.30583954 -161.64549255]
[70.94807434 -176.63900757]
[74.16962433 -191.47093201]
[82.53480530 -204.13537598]
[94.91229248 -212.91957092]
[109.62813568 -216.63554382]
[124.69213104 -214.78073120]
[138.06701660 -207.60597229]
[147.94392395 -196.08158875]
[152.98709106 -181.76618958]
[152.51446533 -166.59579468]
[146.58998108 -152.62207031]
[136.01487732 -141.73484802]
[122.21932983 -135.40655518]
[123.15496063 -120.43576050]
[124.09058380 -105.46496582]
[125.02621460 -90.49417877]
[135.24398804 -101.47585297]
[150.10758972 -103.49407959]
[162.88366699 -95.63458252]
[167.78454590 -81.45778656]
[162.59005737 -67.38592529]
[149.65336609 -59.79368591]
[134.83493042 -62.12042618]
[124.84747314 -73.31248474]
[123.60060120 -58.36439896]
[122.35372925 -43.41631317]
[124.94872284 -36.44410706]
[120.92224884 -28.17129707]
[119.36466980 -13.25238609]
[117.80708313 1.66652644]
[116.24950409 16.58543777]
[114.69192505 31.50435066]
[128.65406799 36.07464981]
[141.35603333 43.45634460]
[152.23918152 53.32479858]
[160.82487488 65.24600220]
[166.73553467 78.69566345]
[169.71119690 93.08227539]
[169.62101746 107.77312469]
[184.26451111 111.02394867]
[198.90802002 114.27478027]
[213.55151367 117.52560425]
[222.24533081 105.05619812]
[235.05189514 96.86716461]
[250.01829529 94.20726013]
[264.86227417 97.48210907]
[277.32025146 106.19231415]
[285.49243164 119.00964355]
[288.13262939 133.97953796]
[284.83825684 148.81919861]
[276.11166382 161.26568604]
[263.28359985 169.42100525]
[248.31025696 172.04151917]
[233.47494507 168.72763062]
[221.03994751 159.98468018]
[212.90150452 147.14588928]
[210.30068970 132.16909790]
[195.65718079 128.91827393]
[181.01368713 125.66744995]
[166.37017822 122.41662598]
[163.94976807 128.59956360]
[160.95483398 134.52555847]
[157.41232300 140.14140320]
[153.35403442 145.39662170]
[148.81643677 150.24401855]
[143.84030151 154.64004517]
[138.47030640 158.54521179]
[132.75471497 161.92442322]
[126.74487305 164.74734497]
[120.49476624 166.98858643]
[114.06053925 168.62803650]
[107.50000000 169.65095520]
[107.50000000 184.65095520]
[107.50000000 199.65095520]
[107.50000000 214.65095520]
[107.50000000 229.65095520]
[107.50000000 244.65095520]
[107.50000000 259.65097046]
[107.50000000 274.65097046]
[107.50000000 289.65097046]
[107.50000000 304.65097046]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[15 31]
[16 30]
[17 29]
[18 28]
[19 27]
[35 52]
[36 51]
[37 50]
[38 49]
[39 48]
[40 47]
[55 101]
[56 100]
[57 99]
[58 98]
[59 97]
[60 95]
[61 94]
[62 93]
[63 85]
[64 84]
[65 83]
[66 82]
[108 129]
[109 128]
[110 127]
[111 126]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
