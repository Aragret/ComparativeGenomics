%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:36 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGAGCAUCAAACUCAAACUACGCCCUGAUCGGCGCACUGCGAGCAGUAGCCCAAACAAUCUCAxxxxxxxxxxUUAUCUCGAACUGACACUGAGCCACAACCCAAACAACCCAGCUCUCCCUAAGCUUCAAACUCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[106.65454865 299.76425171]
[106.65454865 284.76425171]
[106.65454865 269.76425171]
[106.65454865 254.76423645]
[106.65454865 239.76423645]
[106.65454865 224.76423645]
[106.65454865 209.76423645]
[106.65454865 194.76423645]
[106.65454865 179.76423645]
[106.65454865 164.76423645]
[104.81122589 149.87792969]
[101.15251923 135.33097839]
[93.20755768 135.25662231]
[85.35771942 133.39082336]
[78.00775146 129.77377319]
[71.54880524 124.53723907]
[66.33769226 117.90034485]
[62.67741013 110.16072083]
[60.79989243 101.68132782]
[60.85203552 92.87343597]
[45.94758987 94.56383514]
[31.04314232 96.25423431]
[26.78946686 110.82070160]
[17.30850410 122.61707306]
[4.06927586 129.86528015]
[-10.89581680 131.48811340]
[-25.30296898 127.26925659]
[-36.96551132 117.88146973]
[-44.12577438 104.77956390]
[-59.03022385 106.46996307]
[-73.93466949 108.16036224]
[-88.83911896 109.85075378]
[-98.48656464 122.36883545]
[-114.17046356 124.31580353]
[-126.58585358 114.53654480]
[-128.36688232 98.83293915]
[-118.45691681 86.52163696]
[-102.73535156 84.90673065]
[-90.52951813 94.94631195]
[-75.62506866 93.25591278]
[-60.72061920 91.56551361]
[-45.81617355 89.87511444]
[-41.77195358 75.50244904]
[-32.50803757 63.74127197]
[-19.41163445 56.40307999]
[-4.46321154 54.63325882]
[10.06298733 58.73242950]
[21.94494247 68.10591125]
[29.35274506 81.34978485]
[44.25719070 79.65938568]
[59.16164017 77.96898651]
[68.32357788 66.09216309]
[66.17499542 51.24684525]
[64.02641296 36.40151978]
[61.87783813 21.55619812]
[46.84598541 21.16700745]
[32.09616089 18.24285316]
[18.05274391 12.86786842]
[5.11979294 5.19670391]
[-6.33058691 -4.54992676]
[-15.96894455 -16.09159279]
[-23.51796532 -29.09622002]
[-28.76044846 -43.18963623]
[-31.54555893 -57.96634674]
[-31.79316139 -73.00119781]
[-29.49613190 -87.86160278]
[-24.72056198 -102.12000275]
[-17.60385323 -115.36614990]
[-8.35076904 -127.21893311]
[2.77246284 -137.33731079]
[15.44580364 -145.43017578]
[29.30461693 -151.26467896]
[43.95015717 -154.67292786]
[58.96104050 -155.55688477]
[73.90537262 -153.89109802]
[88.35318756 -149.72351074]
[101.88877869 -143.17401123]
[114.12270355 -134.43107605]
[124.70296478 -123.74622345]
[133.32516479 -111.42689514]
[139.74119568 -97.82754517]
[143.76647949 -83.33943939]
[145.28520203 -68.37944794]
[144.25364685 -53.37797928]
[140.70150757 -38.76667404]
[134.73098755 -24.96591568]
[126.51386261 -12.37278748]
[116.28656769 -1.34961498]
[104.34334564 7.78644228]
[91.02783966 14.77252102]
[76.72315979 19.40761948]
[78.87174225 34.25294113]
[81.02031708 49.09826279]
[83.16889954 63.94358826]
[94.04156494 61.40616608]
[104.98075104 62.01433182]
[115.11145020 65.60246277]
[123.65600586 71.77122498]
[129.99375916 79.92849731]
[133.70561218 89.34458160]
[148.64163208 87.96055603]
[163.57763672 86.57653046]
[178.51365662 85.19250488]
[181.82319641 70.43099976]
[189.53404236 57.41570663]
[200.89079285 47.42173767]
[214.78082275 41.42819595]
[229.84330750 40.02227020]
[244.60260010 43.34169769]
[257.61273193 51.06127548]
[267.59906006 62.42472076]
[273.58331299 76.31875610]
[274.97912598 91.38217926]
[271.64981079 106.13924408]
[263.92153931 119.14418793]
[252.55139160 129.12292480]
[238.65335083 135.09785461]
[223.58898926 136.48358154]
[208.83416748 133.14437866]
[195.83441162 125.40737915]
[185.86328125 114.03056335]
[179.89767456 100.12851715]
[164.96166992 101.51254272]
[150.02565002 102.89656830]
[135.08964539 104.28059387]
[132.97421265 112.73999023]
[128.85237122 120.42417145]
[122.97491455 126.86558533]
[115.69947052 131.67227173]
[119.35817719 146.21922302]
[124.82604218 132.25131226]
[135.73159790 121.95234680]
[149.98924255 117.29191589]
[164.87229919 119.16130829]
[177.53448486 127.20301056]
[185.55426025 139.87910461]
[187.39787292 154.76538086]
[182.71276855 169.01493835]
[172.39492798 179.90264893]
[158.41757202 185.34631348]
[143.45378113 184.30487061]
[130.36524963 176.97750854]
[121.65454865 164.76423645]
[121.65454865 179.76423645]
[121.65454865 194.76423645]
[121.65454865 209.76423645]
[121.65454865 224.76423645]
[121.65454865 239.76423645]
[121.65454865 254.76423645]
[121.65454865 269.76425171]
[121.65454865 284.76425171]
[121.65454865 299.76425171]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 152]
[2 151]
[3 150]
[4 149]
[5 148]
[6 147]
[7 146]
[8 145]
[9 144]
[10 143]
[11 130]
[12 129]
[20 51]
[21 50]
[22 49]
[29 42]
[30 41]
[31 40]
[32 39]
[52 94]
[53 93]
[54 92]
[55 91]
[100 125]
[101 124]
[102 123]
[103 122]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
