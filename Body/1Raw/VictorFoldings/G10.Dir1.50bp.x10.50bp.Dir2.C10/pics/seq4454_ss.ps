%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:46 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCCAGCAUUCCCCCUCAAACCUAAGAAAUAUGUCUGAUAAAAGAGUUACUUUGAUAGAGUAAAUAAUAxxxxxxxxxxUGCCUCAGGAUACUCCUCAAUAGCCAUCGCUGUAGUAUAUCCAAAGACAACCAUCAUUCCCCCUAAACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[92.50000000 289.07910156]
[92.50000000 274.07910156]
[92.50000000 259.07910156]
[92.50000000 244.07908630]
[92.50000000 229.07908630]
[92.50000000 214.07908630]
[92.50000000 199.07908630]
[92.50000000 184.07908630]
[92.50000000 169.07908630]
[92.50000000 154.07908630]
[86.88475800 152.99800110]
[81.41338348 151.33552551]
[76.14591217 149.10987854]
[71.14012146 146.34550476]
[66.45092773 143.07270813]
[62.12977219 139.32739258]
[58.22406006 135.15065002]
[45.52862549 143.13977051]
[32.83319092 151.12889099]
[35.42412186 166.10739136]
[32.08092880 180.93612671]
[23.31342125 193.35383606]
[10.45858479 201.46688843]
[-4.52331209 204.03810120]
[-19.34764099 200.67541504]
[-31.75379562 191.89157104]
[-39.84993362 179.02607727]
[-42.40144348 164.04081726]
[-39.01924896 149.22091675]
[-30.21910286 136.82632446]
[-17.34296608 128.74711609]
[-2.35435653 126.21532440]
[12.46107292 129.61701965]
[24.84407616 138.43345642]
[37.53950882 130.44433594]
[50.23494339 122.45522308]
[45.63774872 94.94595337]
[55.22738266 68.75563049]
[76.50125885 50.71909714]
[103.90756989 45.54333115]
[107.02624512 30.87111664]
[110.14492035 16.19890213]
[113.26359558 1.52668846]
[116.38227081 -13.14552593]
[119.08069611 -27.90081406]
[121.35665894 -42.72713852]
[123.63262939 -57.55346680]
[125.90859985 -72.37979126]
[113.66818237 -63.70960236]
[98.70613861 -64.77599335]
[87.81909943 -75.09453583]
[85.95260620 -89.97795868]
[93.95451355 -102.66532898]
[108.18990326 -107.39330292]
[122.19221497 -102.01416016]
[129.60073853 -88.97167206]
[133.82673645 -103.36406708]
[138.05271912 -117.75646210]
[142.27871704 -132.14884949]
[144.69572449 -146.95285034]
[145.26678467 -161.94197083]
[145.83784485 -176.93109131]
[146.40890503 -191.92022705]
[138.21681213 -201.92111206]
[139.02763367 -214.42120361]
[147.85905457 -222.72908020]
[148.71537781 -237.70460510]
[149.57171631 -252.68014526]
[150.42803955 -267.65567017]
[151.28437805 -282.63122559]
[136.78329468 -286.69726562]
[123.49552917 -293.78594971]
[112.04257965 -303.56573486]
[102.96011353 -315.57916260]
[96.67294312 -329.26440430]
[93.47512054 -343.98132324]
[93.51622009 -359.04162598]
[96.79431915 -373.74087524]
[103.15609741 -387.39157104]
[112.30399323 -399.35528564]
[123.81015778 -409.07238770]
[137.13641357 -416.08843994]
[151.65946960 -420.07528687]
[166.70005798 -420.84643555]
[181.55470276 -418.36581421]
[195.52864075 -412.74945068]
[207.96826172 -404.26007080]
[218.29174805 -393.29467773]
[226.01626587 -380.36618042]
[230.78050232 -366.07925415]
[232.36164856 -351.10214233]
[230.68572998 -336.13534546]
[225.83116150 -321.87887573]
[218.02496338 -308.99951172]
[207.63227844 -298.09970093]
[195.13916016 -289.68920898]
[181.12997437 -284.16143799]
[166.25991821 -281.77490234]
[165.40357971 -266.79934692]
[164.54725647 -251.82382202]
[163.69091797 -236.84828186]
[162.83457947 -221.87274170]
[171.56918335 -206.67419434]
[161.39802551 -191.34916687]
[160.82696533 -176.36003113]
[160.25590515 -161.37091064]
[159.68484497 -146.38177490]
[171.10501099 -150.76766968]
[181.52647400 -146.53024292]
[195.39830017 -152.23750305]
[209.27011108 -157.94476318]
[218.85028076 -171.25462341]
[235.13772583 -169.34388733]
[241.37733459 -154.17816162]
[231.15031433 -141.35862732]
[214.97735596 -144.07293701]
[201.10554504 -138.36569214]
[187.23373413 -132.65843201]
[181.00183105 -121.57396698]
[167.77241516 -119.01560974]
[156.67111206 -127.92286682]
[152.44511414 -113.53047180]
[148.21913147 -99.13807678]
[143.99313354 -84.74568176]
[140.73492432 -70.10382080]
[138.45895386 -55.27749634]
[136.18298340 -40.45116806]
[133.90701294 -25.62484360]
[135.72566223 -22.55418968]
[136.12091064 -18.43859482]
[134.61296082 -13.96910763]
[131.05448914 -10.02684975]
[127.93580627 4.64536381]
[124.81713104 19.31757736]
[121.69845581 33.98979187]
[118.57978058 48.66200638]
[125.55307770 51.75232315]
[132.02764893 55.78430176]
[137.87712097 60.67924500]
[142.98733521 66.34162140]
[147.25857544 72.66091156]
[150.60743713 79.51379395]
[152.96859741 86.76650238]
[154.29595947 94.27749634]
[154.56361389 101.90016937]
[153.76632690 109.48576355]
[151.91967773 116.88622284]
[149.05970764 123.95710754]
[145.24223328 130.56040955]
[140.54174805 136.56727600]
[135.04998779 141.86042786]
[128.87417603 146.33659363]
[122.13480377 149.90840149]
[114.96342468 152.50613403]
[107.50000000 154.07908630]
[107.50000000 169.07908630]
[107.50000000 184.07908630]
[107.50000000 199.07908630]
[107.50000000 214.07908630]
[107.50000000 229.07908630]
[107.50000000 244.07908630]
[107.50000000 259.07910156]
[107.50000000 274.07910156]
[107.50000000 289.07910156]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 164]
[2 163]
[3 162]
[4 161]
[5 160]
[6 159]
[7 158]
[8 157]
[9 156]
[10 155]
[17 36]
[18 35]
[19 34]
[40 136]
[41 135]
[42 134]
[43 133]
[44 132]
[45 128]
[46 127]
[47 126]
[48 125]
[56 124]
[57 123]
[58 122]
[59 121]
[60 107]
[61 106]
[62 105]
[63 104]
[66 102]
[67 101]
[68 100]
[69 99]
[70 98]
[109 118]
[110 117]
[111 116]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
