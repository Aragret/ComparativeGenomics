%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:34 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGGCUUCACUCAGCCAUUUUACCUCACCCCCACUGAUGUUCGCCGACCGUUGACUAUUCUCUxxxxxxxxxxAUAAAAAAUUAUAACAAACCCUGAGAACCAAAAUGAACGAAAAUCUGUUCGCUUCAUUCACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[95.30337524 234.80210876]
[94.99131775 219.80535889]
[94.67926025 204.80860901]
[94.36720276 189.81184387]
[94.05514526 174.81509399]
[93.74309540 159.81834412]
[93.43103790 144.82159424]
[93.11898041 129.82482910]
[92.80692291 114.82807922]
[78.63036346 109.92652893]
[69.12200928 121.52787018]
[59.61364746 133.12921143]
[50.10528946 144.73056030]
[51.91381836 160.43103027]
[42.02542496 172.75965881]
[26.30670929 174.40208435]
[14.08331299 164.38389587]
[12.60715771 148.64869690]
[22.75402069 136.53190613]
[38.50394821 135.22219849]
[48.01230621 123.62085724]
[57.52066422 112.01951599]
[67.02902222 100.41817474]
[70.12734222 85.74164581]
[66.11960602 71.28695679]
[62.11186600 56.83226776]
[58.10412598 42.37757874]
[54.09638596 27.92289162]
[42.20400620 18.78115845]
[27.20481682 18.62512207]
[13.32490349 26.21844673]
[0.67880714 18.34917068]
[-14.32038116 18.19313431]
[-29.31957054 18.03709793]
[-39.35721588 30.02791405]
[-54.76300049 32.71041870]
[-68.26277924 24.81802177]
[-73.48237610 10.07726669]
[-67.95724487 -4.55171108]
[-54.29619598 -12.16155529]
[-38.94955444 -9.15913105]
[-29.16353226 3.03790975]
[-14.16434479 3.19394636]
[0.83484370 3.34998298]
[13.64191341 -4.25450420]
[27.36085320 3.62593293]
[42.36004257 3.78196955]
[47.11405945 -10.44544411]
[51.86767197 -24.67158890]
[39.78768158 -33.56393814]
[23.77455711 -32.58444595]
[13.13213253 -44.58937836]
[16.02436256 -60.36957169]
[30.23258018 -67.81981659]
[44.85745239 -61.22492218]
[48.68003082 -45.64392853]
[60.76002121 -36.75157547]
[68.02748871 -38.60465622]
[56.06740570 -47.65763474]
[55.68814468 -62.65283966]
[67.17528534 -72.29885101]
[81.87899017 -69.33219910]
[88.72734070 -55.98678207]
[82.56242371 -42.31081772]
[89.82989502 -44.16389847]
[96.17702484 -57.75485229]
[102.52415466 -71.34580231]
[108.87128448 -84.93675232]
[115.21841431 -98.52770233]
[103.97232819 -107.73489380]
[95.27296448 -119.36643219]
[89.62614441 -132.73840332]
[87.35836029 -147.06594849]
[88.59793091 -161.50927734]
[93.26772308 -175.22294617]
[101.08994293 -187.40530396]
[111.60267639 -197.34539795]
[124.18713379 -204.46438599]
[138.10409546 -208.34933472]
[152.53732300 -208.77713013]
[166.64141846 -205.72724915]
[173.26991272 -219.18321228]
[179.89840698 -232.63919067]
[186.52691650 -246.09515381]
[184.90794373 -262.41418457]
[198.38710022 -271.75463867]
[213.09819031 -264.50787354]
[213.90769958 -248.12870789]
[199.98287964 -239.46664429]
[193.35437012 -226.01068115]
[186.72587585 -212.55471802]
[180.09738159 -199.09875488]
[191.84477234 -188.96946716]
[200.58848572 -176.14385986]
[205.73216248 -161.48655701]
[206.92231750 -145.98744202]
[204.07273865 -130.69479370]
[197.37057495 -116.64447021]
[187.26417542 -104.78961945]
[174.43299866 -95.93612671]
[159.74203491 -90.68777466]
[144.18338013 -89.40509033]
[128.80935669 -92.18057251]
[122.46223450 -78.58962250]
[116.11510468 -64.99867249]
[109.76797485 -51.40772247]
[103.42084503 -37.81676865]
[105.18809509 -3.52998137]
[89.29691315 19.03598022]
[68.55107117 23.91515160]
[72.55881500 38.36983871]
[76.56655121 52.82452774]
[80.57429504 67.27922058]
[84.58203125 81.73390198]
[138.13877869 83.59128571]
[152.04133606 89.22324371]
[165.94389343 94.85520172]
[179.84645081 100.48715973]
[193.80683899 105.97418976]
[207.82354736 111.31570435]
[224.77749634 111.30604553]
[229.48008728 127.59474945]
[215.12977600 136.62272644]
[202.48204041 125.33241272]
[188.46531677 119.99090576]
[181.04701233 120.55156708]
[174.21449280 114.38971710]
[160.31193542 108.75775909]
[146.40937805 103.12580109]
[132.50682068 97.49384308]
[126.33103180 101.74938965]
[135.83157349 113.35713959]
[145.33210754 124.96488190]
[157.97045898 133.04399109]
[158.22973633 148.04174805]
[145.87818909 156.55288696]
[131.95587158 150.96997070]
[128.90682983 136.28305054]
[121.44314575 123.27175903]
[113.97946167 110.26048279]
[107.80367279 114.51602173]
[108.11573029 129.51277161]
[108.42778778 144.50953674]
[108.73984528 159.50628662]
[109.05190277 174.50303650]
[109.36396027 189.49978638]
[109.67601776 204.49655151]
[109.98806763 219.49330139]
[110.30012512 234.49005127]
[112.89112854 253.69778442]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 149]
[2 148]
[3 147]
[4 146]
[5 145]
[6 144]
[7 143]
[8 142]
[9 141]
[10 23]
[11 22]
[12 21]
[13 20]
[24 114]
[25 113]
[26 112]
[27 111]
[28 110]
[29 47]
[30 46]
[32 44]
[33 43]
[34 42]
[49 57]
[50 56]
[65 107]
[66 106]
[67 105]
[68 104]
[69 103]
[81 92]
[82 91]
[83 90]
[84 89]
[115 130]
[116 129]
[117 128]
[118 127]
[119 125]
[120 124]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
