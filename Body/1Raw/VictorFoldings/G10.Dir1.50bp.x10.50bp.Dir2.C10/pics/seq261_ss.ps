%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:31 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGAACAAAAAAUUUCCACCAAACCCCCCCUCCCCCGCUUCUGGCCACAGCACUUAAACACAUxxxxxxxxxxUAAUCACAUAACCUAUUCCCCCGAGCAAUCUCAAUUACAAUAUAUACACCAACAAACAAUCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[-22.59027290 203.69561768]
[-34.48265076 212.83735657]
[-46.37503052 221.97909546]
[-58.26741028 231.12081909]
[-70.15979004 240.26255798]
[-81.95642853 249.52751160]
[-93.65605164 258.91467285]
[-105.35568237 268.30181885]
[-117.05530548 277.68899536]
[-128.75492859 287.07614136]
[-122.67031097 300.88339233]
[-120.36755371 315.79513550]
[-122.00366974 330.79464722]
[-127.46710205 344.85925293]
[-136.38534546 357.02999878]
[-148.15034485 366.47708130]
[-161.95993042 372.55636597]
[-176.87254333 374.85336304]
[-191.87142944 373.21145630]
[-205.93392944 367.74261475]
[-218.10124207 358.81967163]
[-227.54379272 347.05102539]
[-233.61773682 333.23907471]
[-235.90898132 318.32559204]
[-234.26127625 303.32733154]
[-228.78698730 289.26693726]
[-219.85934448 277.10308838]
[-208.08706665 267.66506958]
[-194.27278137 261.59646606]
[-179.35839844 259.31097412]
[-164.36077881 260.96447754]
[-150.30250549 266.44418335]
[-138.14208984 275.37652588]
[-126.44246674 265.98937988]
[-114.74284363 256.60220337]
[-103.04322052 247.21504211]
[-91.34358978 237.82788086]
[-88.07357025 231.14562988]
[-79.30152893 228.37017822]
[-67.40914917 219.22843933]
[-55.51676559 210.08671570]
[-43.62438583 200.94497681]
[-31.73200607 191.80323792]
[-49.49481201 158.58717346]
[-59.03041458 122.14686584]
[-59.81403732 84.48773193]
[-51.80255127 47.68229294]
[-35.43685532 13.75607681]
[-47.69922638 5.11696100]
[-59.96159363 -3.52215528]
[-76.33396149 -4.45894480]
[-83.46618652 -19.22591591]
[-74.02124023 -32.63207626]
[-57.71528244 -30.88631439]
[-51.32247543 -15.78452301]
[-39.06010818 -7.14540720]
[-26.79774094 1.49370885]
[-21.95445251 -4.44265413]
[-16.83350182 -10.14122486]
[-11.44654655 -15.58902931]
[-5.80585384 -20.77366257]
[0.07573514 -25.68332291]
[6.18482876 -30.30683136]
[12.50751877 -34.63365936]
[19.02940941 -38.65395737]
[25.73565102 -42.35857010]
[32.61097717 -45.73906708]
[39.63973236 -48.78775024]
[46.80591202 -51.49767303]
[54.09320450 -53.86267471]
[61.48501587 -55.87736511]
[68.96451569 -57.53715515]
[76.51467896 -58.83827209]
[84.11830902 -59.77774811]
[91.75810242 -60.35344696]
[99.41665649 -60.56405640]
[107.07654572 -60.40909958]
[114.72032166 -59.88892746]
[122.33057404 -59.00472260]
[129.88999939 -57.75850296]
[137.38136292 -56.15309906]
[144.78761292 -54.19217300]
[152.09190369 -51.88018417]
[159.27757263 -49.22240067]
[166.32829285 -46.22487259]
[173.22801208 -42.89442062]
[179.96098328 -39.23863220]
[186.51191711 -35.26582718]
[192.86587524 -30.98505592]
[199.00840759 -26.40605927]
[204.92552185 -21.53926468]
[210.60372925 -16.39575195]
[216.03012085 -10.98723412]
[221.19235229 -5.32602262]
[226.07864380 0.57499236]
[230.67788696 6.70237541]
[234.97959900 13.04217625]
[238.97399902 19.57995987]
[242.65199280 26.30084229]
[246.00518799 33.18952179]
[249.02597046 40.23031235]
[251.70745850 47.40718460]
[254.04353333 54.70379639]
[268.61624146 51.14903641]
[283.18893433 47.59427261]
[294.66293335 35.87765121]
[310.47738647 40.21763611]
[314.36370850 56.14963150]
[302.32403564 67.28416443]
[286.74371338 62.16697693]
[272.17098999 65.72174072]
[257.59829712 69.27650452]
[259.27740479 79.70560455]
[260.26715088 90.22254944]
[260.56320190 100.78181458]
[260.16433716 111.33769989]
[259.07223511 121.84450531]
[257.29162598 132.25675964]
[254.83024597 142.52941895]
[251.69873047 152.61798096]
[247.91062927 162.47882080]
[243.48234558 172.06922913]
[238.43304443 181.34771729]
[232.78457642 190.27410889]
[226.56138611 198.80978394]
[219.79042053 206.91778564]
[212.50097656 214.56301880]
[204.72460938 221.71241760]
[196.49497986 228.33502197]
[187.84768677 234.40216064]
[178.82019043 239.88757324]
[169.45153809 244.76754761]
[159.78227234 249.02091980]
[149.85427856 252.62931824]
[139.71049500 255.57710266]
[129.39483643 257.85150146]
[118.95195770 259.44271851]
[108.42704773 260.34381104]
[97.86566925 260.55093384]
[87.31352234 260.06314087]
[76.81628418 258.88256836]
[66.41939545 257.01434326]
[56.16784286 254.46649170]
[46.10601044 251.25010681]
[36.27743530 247.37907410]
[26.72466850 242.87016296]
[17.48904991 237.74287415]
[8.61055279 232.01940918]
[0.12760718 225.72454834]
[-7.92307186 218.88551331]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 43]
[2 42]
[3 41]
[4 40]
[5 39]
[6 37]
[7 36]
[8 35]
[9 34]
[10 33]
[48 57]
[49 56]
[50 55]
[103 112]
[104 111]
[105 110]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
