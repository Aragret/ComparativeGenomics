%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:42 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCAAUCCCCCUCUACCUAAAACUCACAGCCCUCGCUGUCACUUUCCUAGGACUUCUAACAGxxxxxxxxxxUCAGGAUACUCCUCAAUAGCCAUCGCUGUAGUAUAUCCAAAGACAACCAUCAUUCCCCCUCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[74.39656067 226.09056091]
[66.21474457 224.14878845]
[58.17724609 221.67671204]
[50.31839752 218.68489075]
[42.67176056 215.18611145]
[35.21685028 228.20240784]
[27.76194191 241.21871948]
[20.30703163 254.23503113]
[12.85212040 267.25134277]
[5.39721012 280.26763916]
[5.99512577 296.65588379]
[-8.04040432 305.13739014]
[-22.27083015 296.98712158]
[-22.05710793 280.58935547]
[-7.61909914 272.81274414]
[-0.16418882 259.79644775]
[7.29072142 246.78012085]
[14.74563217 233.76380920]
[22.20054245 220.74749756]
[29.65545273 207.73120117]
[3.25514007 184.82215881]
[-16.00488472 155.65278625]
[-26.70312881 122.37594604]
[-28.05000687 87.44763947]
[-42.86776352 85.11653137]
[-57.68552399 82.78543091]
[-72.50328064 80.45432281]
[-87.36632538 78.43199158]
[-102.26822662 76.71929932]
[-117.17013550 75.00661469]
[-127.68503571 86.26463318]
[-142.63803101 89.13885498]
[-156.25520325 82.73284912]
[-163.40356445 69.69296265]
[-178.30546570 67.98027039]
[-193.20738220 66.26757812]
[-208.10928345 64.55489349]
[-223.01118469 62.84220123]
[-237.83314514 69.85943604]
[-251.16548157 60.31057739]
[-249.29304504 44.01868057]
[-234.14201355 37.74344635]
[-221.29849243 47.94029999]
[-206.39659119 49.65298843]
[-191.49468994 51.36567688]
[-176.59278870 53.07836914]
[-161.69088745 54.79105759]
[-151.77059937 43.71288300]
[-137.05519104 40.56316757]
[-123.14412689 46.75476456]
[-115.45744324 60.10470963]
[-100.55554199 61.81739807]
[-85.65364075 63.53009033]
[-81.37792206 61.27315521]
[-75.63089752 61.72378922]
[-70.17218018 65.63656616]
[-55.35441971 67.96767426]
[-40.53665924 70.29877472]
[-25.71890259 72.62988281]
[-22.58053970 60.90553665]
[-18.35139275 49.52907944]
[-13.06909084 38.60173798]
[-6.78064060 28.22075081]
[0.45799997 18.47849274]
[8.58241844 9.46165657]
[17.52031708 1.25047886]
[27.19216537 -6.08197355]
[37.51189804 -12.47045326]
[48.38768005 -17.85811043]
[59.72273636 -22.19700432]
[71.41619873 -25.44852448]
[83.36402130 -27.58373642]
[95.45986938 -28.58364296]
[107.59613037 -28.43934250]
[119.66478729 -27.15212059]
[131.55845642 -24.73343277]
[143.17131042 -21.20480156]
[154.39999390 -16.59762573]
[165.14460754 -10.95290089]
[175.30952454 -4.32085991]
[184.80429077 3.23948359]
[193.54443359 11.66085339]
[201.45216370 20.86831093]
[208.45712280 30.77992630]
[221.55027771 23.46081924]
[234.64343262 16.14171410]
[247.73658752 8.82260895]
[260.67465210 1.23270035]
[273.45199585 -6.62472534]
[286.22937012 -14.48215103]
[272.61892700 -20.78737450]
[268.85577393 -35.30766678]
[277.69049072 -47.42986298]
[292.66561890 -48.29362488]
[302.83551025 -37.26760864]
[300.76721191 -22.41149330]
[314.29138184 -28.89965820]
[327.81558228 -35.38782120]
[341.33978271 -41.87598801]
[354.86395264 -48.36415482]
[363.67041016 -62.19812012]
[380.04025269 -61.21826935]
[387.13360596 -46.43259048]
[377.65344238 -33.05132294]
[361.35211182 -34.83996201]
[347.82794189 -28.35179710]
[334.30374146 -21.86363220]
[320.77954102 -15.37546730]
[307.25537109 -8.88730240]
[294.08679199 -1.70479369]
[281.30941772 6.15263224]
[268.53207397 14.01005745]
[266.56347656 18.42596245]
[261.76544189 21.62128448]
[255.05569458 21.91576385]
[241.96253967 29.23486900]
[228.86938477 36.55397415]
[215.77622986 43.87308121]
[219.19528198 51.55569458]
[222.10519409 59.44524384]
[224.49353027 67.50802612]
[226.35008240 75.70959473]
[227.66691589 84.01491547]
[228.43843079 92.38852692]
[228.66131592 100.79464722]
[228.33462524 109.19737244]
[227.45973206 117.56080627]
[226.04040527 125.84923553]
[224.08268738 134.02725220]
[221.59494019 142.05990601]
[218.58779907 149.91291809]
[215.07411194 157.55270386]
[211.06887817 164.94667053]
[206.58921814 172.06320190]
[201.65425110 178.87191772]
[196.28506470 185.34373474]
[190.50459290 191.45100403]
[184.33752441 197.16763306]
[177.81021118 202.46920776]
[170.95051575 207.33308411]
[163.78776550 211.73847961]
[156.35253906 215.66658020]
[148.67660522 219.10060120]
[140.79275513 222.02589417]
[132.73464966 224.42993164]
[124.53671265 226.30247498]
[116.23397064 227.63551331]
[107.86187744 228.42335510]
[99.45620728 228.66262817]
[91.05286407 228.35231018]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 20]
[6 19]
[7 18]
[8 17]
[9 16]
[10 15]
[24 59]
[25 58]
[26 57]
[27 56]
[28 53]
[29 52]
[30 51]
[34 47]
[35 46]
[36 45]
[37 44]
[38 43]
[84 118]
[85 117]
[86 116]
[87 115]
[88 112]
[89 111]
[90 110]
[96 109]
[97 108]
[98 107]
[99 106]
[100 105]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
