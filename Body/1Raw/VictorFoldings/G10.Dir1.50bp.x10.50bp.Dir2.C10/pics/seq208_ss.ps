%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:30 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGUAAUAACAAUUGAAUGUCUGCACAGCCACUUUCCACACAGACAUCAUAACAAAAAAUUUCxxxxxxxxxxUAUCCAUUGGUCUUAGGCCCCAAAAAUUUUGGUGCAACUCCAAAUAAAAGUAAUAACCAUCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[86.60543823 257.59686279]
[86.60543823 242.59684753]
[86.60543823 227.59684753]
[86.60543823 212.59684753]
[86.60543823 197.59684753]
[86.60543823 182.59684753]
[86.60543823 167.59684753]
[86.60543823 152.59684753]
[86.60543823 137.59684753]
[86.60543823 122.59684753]
[84.33695221 116.32540894]
[84.08771515 110.34552002]
[85.57798767 105.21340179]
[88.38925934 101.36773682]
[92.00406647 99.09781647]
[76.30348969 97.14785004]
[70.64065552 83.37172699]
[58.56066513 74.47937775]
[46.48067856 65.58702850]
[34.40068817 56.69467926]
[20.22413063 51.79312897]
[5.23143530 51.32508850]
[-9.76126099 50.85704422]
[-18.50139618 53.73139954]
[-25.06007957 50.22008514]
[-40.03979492 49.44024277]
[-55.01950836 48.66039658]
[-69.99922180 47.88055038]
[-84.97893524 47.10070801]
[-99.95864868 46.32086182]
[-105.59348297 60.37530518]
[-115.48836517 71.83698273]
[-128.56996155 79.46261597]
[-143.41931152 82.42504120]
[-158.42562866 80.40290833]
[-171.96116638 73.61556244]
[-182.55767822 62.79924774]
[-189.06573486 49.12723923]
[-190.77940369 34.08256912]
[-187.51278687 19.29717445]
[-179.62020874 6.37486124]
[-167.95783997 -3.28265238]
[-153.79067993 -8.62779236]
[-138.65550232 -9.08075809]
[-124.19405365 -4.59241486]
[-111.97500610 4.35037518]
[-103.32378387 16.77756500]
[-99.17881012 31.34114647]
[-84.19908905 32.12099075]
[-69.21937561 32.90083694]
[-54.23966217 33.68068314]
[-39.25994873 34.46052551]
[-24.28023529 35.24037170]
[-9.29321861 35.86434937]
[5.69947720 36.33239365]
[20.69217300 36.80043411]
[8.23824310 28.43983459]
[-2.31874275 17.78384781]
[-10.56273651 5.25242472]
[-16.16884422 -8.66057491]
[-18.91613197 -23.40684319]
[-18.69632721 -38.40523148]
[-15.51809311 -53.06465912]
[-9.50668430 -66.80740356]
[-0.89900875 -79.09185791]
[9.96570778 -89.43390656]
[22.65929031 -97.42596436]
[36.68148422 -102.75306702]
[51.47968292 -105.20527649]
[66.47068787 -104.68595123]
[81.06371307 -101.21556091]
[94.68364716 -94.93086243]
[106.79373169 -86.07954407]
[116.91671753 -75.01043701]
[124.65364838 -62.15975952]
[129.69961548 -48.03396225]
[131.85577393 -33.18973541]
[131.03713989 -18.21209145]
[127.27597046 -3.69129300]
[120.72049713 9.80039883]
[111.62906647 21.73128128]
[100.35997009 31.63115692]
[87.35733032 39.10987854]
[73.13356781 43.87271118]
[58.24924088 45.73194885]
[43.29303741 44.61469269]
[55.37302780 53.50704193]
[67.45301819 62.39939117]
[79.53300476 71.29174042]
[94.36954498 72.60566711]
[100.89641571 87.01782990]
[115.35110474 91.02556610]
[130.28541565 89.62326813]
[145.21972656 88.22096252]
[159.98577881 85.58209991]
[174.48136902 81.72493744]
[188.89358521 77.56704712]
[203.21618652 73.11023712]
[214.09422302 61.62203217]
[228.54565430 65.22837067]
[242.86824036 60.77155685]
[257.19085693 56.31474304]
[271.51342773 51.85792542]
[285.83602905 47.40111160]
[299.16339111 36.92168427]
[312.92263794 46.82719421]
[307.21319580 62.79085541]
[290.29284668 61.72370911]
[275.97024536 66.18052673]
[261.64764404 70.63733673]
[247.32505798 75.09415436]
[233.00245667 79.55097198]
[223.14886475 90.72039032]
[207.67300415 87.43283081]
[193.35040283 91.88964844]
[190.35179138 95.68225098]
[184.91300964 97.59301758]
[178.33853149 96.22053528]
[163.84294128 100.07769775]
[177.04750061 107.19382477]
[183.69174194 120.64202881]
[181.32073975 135.45344543]
[170.81053162 146.15557861]
[156.04443359 148.79417419]
[142.47821045 142.39434814]
[135.12434387 129.32069397]
[136.69990540 114.40367126]
[146.62202454 103.15526581]
[131.68771362 104.55757141]
[116.75341034 105.95987701]
[130.53179932 111.88912964]
[145.48377991 113.08840179]
[157.53872681 122.01467133]
[163.04803467 135.96627808]
[160.34423828 150.72058105]
[150.24568176 161.81199646]
[135.80883789 165.88352966]
[121.40320587 161.70288086]
[111.38885498 150.53538513]
[108.79682159 135.76058960]
[101.60543823 122.59684753]
[101.60543823 137.59684753]
[101.60543823 152.59684753]
[101.60543823 167.59684753]
[101.60543823 182.59684753]
[101.60543823 197.59684753]
[101.60543823 212.59684753]
[101.60543823 227.59684753]
[101.60543823 242.59684753]
[101.60543823 257.59686279]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[15 91]
[17 89]
[18 88]
[19 87]
[20 86]
[21 56]
[22 55]
[23 54]
[25 53]
[26 52]
[27 51]
[28 50]
[29 49]
[30 48]
[92 130]
[93 129]
[94 128]
[95 119]
[96 118]
[97 115]
[98 114]
[100 112]
[101 111]
[102 110]
[103 109]
[104 108]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
