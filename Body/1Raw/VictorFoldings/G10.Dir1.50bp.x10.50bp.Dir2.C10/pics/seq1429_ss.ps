%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:06 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCCUCAACAGUUAAAUCAACAAAACUGCUCGCCAGAACACUACGAGCCACAGCUUAAAACUxxxxxxxxxxCAACUCCAAAGCCACCCCUCACCCACUAGGAUACCAACAAACCUACCCACCCUUAACAGUCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[150.88009644 326.36080933]
[150.88009644 311.36080933]
[150.88009644 296.36080933]
[150.88009644 281.36080933]
[150.88009644 266.36080933]
[150.88009644 251.36079407]
[150.88009644 236.36079407]
[150.88009644 221.36079407]
[150.88009644 206.36079407]
[150.88009644 191.36079407]
[146.27453613 177.08534241]
[137.50833130 164.91349792]
[128.74211121 152.74166870]
[110.02201843 159.96496582]
[89.72605896 160.66465759]
[70.08913422 154.60479736]
[53.32556534 142.30247498]
[41.37955093 124.98750305]
[27.99326515 131.75561523]
[14.60698128 138.52372742]
[1.22069621 145.29183960]
[0.44913742 160.63134766]
[-7.90227461 173.52124023]
[-21.58705139 180.49421692]
[-36.92405701 179.67459106]
[-49.78771591 171.28280640]
[-56.71776581 157.57624817]
[-55.85005951 142.24188232]
[-47.41800308 129.40458679]
[-33.68978119 122.51753998]
[-18.35821533 123.43331146]
[-5.54741859 131.90556335]
[7.83886623 125.13744354]
[21.22515106 118.36933136]
[34.61143494 111.60121918]
[33.67580795 96.63042450]
[19.55100441 91.58167267]
[5.42620182 86.53291321]
[-8.69860172 81.48415375]
[-22.82340431 76.43540192]
[-34.83640289 81.24598694]
[-46.52282715 76.70215607]
[-51.78199768 65.76376343]
[-65.79871368 60.42225266]
[-81.89492798 63.55974960]
[-92.45460510 51.01282883]
[-86.61485291 35.68868637]
[-70.38311005 33.35148621]
[-60.45719910 46.40554047]
[-46.44048691 51.74705124]
[-29.32305717 48.00625610]
[-17.77464867 62.31059647]
[-3.64984512 67.35935211]
[10.47495842 72.40811157]
[24.59976006 77.45686340]
[38.72456360 82.50562286]
[45.33198547 68.70446777]
[54.94659805 57.02868271]
[66.94111633 48.10717010]
[80.56385040 42.39379883]
[94.98554993 40.14477539]
[95.60952759 25.15776062]
[96.23349762 10.17074394]
[96.85747528 -4.81627226]
[82.38066864 -9.02167988]
[69.33130646 -16.57002068]
[58.46805191 -27.02244568]
[50.42248917 -39.77126312]
[45.66237640 -54.07527542]
[44.46445465 -69.10286713]
[46.89837646 -83.98034668]
[52.82263565 -97.84276581]
[61.89279938 -109.88417053]
[73.58154297 -119.40450287]
[87.20929718 -125.85025787]
[101.98376465 -128.84667969]
[117.04597473 -128.21957397]
[131.52023315 -124.00539398]
[144.56501770 -116.44914246]
[155.42193604 -105.99013519]
[163.45976257 -93.23643494]
[168.21121216 -78.92954254]
[169.40000916 -63.90122986]
[166.95707703 -49.02522659]
[161.02441406 -35.16640472]
[151.94694519 -23.13049507]
[140.25244141 -13.61725235]
[126.62077332 -7.17976332]
[111.84449768 -4.19229460]
[111.22052002 10.79472160]
[110.59654236 25.78173828]
[109.97256470 40.76875305]
[118.08819580 42.72339249]
[125.85445404 45.78432083]
[133.12133789 49.89242172]
[139.74848938 54.96834183]
[145.60789490 60.91404343]
[150.58639526 67.61468506]
[154.58782959 74.94084930]
[157.53491211 82.75102234]
[159.37069702 90.89436340]
[160.05975342 99.21356964]
[159.58876038 107.54797363]
[157.96682739 115.73658752]
[155.22525024 123.62125397]
[151.41702271 131.04966736]
[146.61567688 137.87837219]
[140.91395569 143.97546387]
[149.68016052 156.14729309]
[158.44636536 168.31913757]
[157.54821777 153.34603882]
[159.53315735 138.47795105]
[164.32775879 124.26487732]
[171.75466919 111.23256683]
[181.53913879 99.86312866]
[193.31922913 90.57714081]
[206.65916443 83.71810913]
[221.06546021 79.53977203]
[236.00520325 78.19669342]
[250.92575073 79.73854828]
[265.27514648 84.10830688]
[278.52258301 91.14432526]
[290.17800903 100.58631134]
[299.81024170 112.08500671]
[307.06298828 125.21503448]
[311.66796875 139.49069214]
[313.45477295 154.38388062]
[312.35739136 169.34368896]
[308.41632080 183.81669617]
[301.77743530 197.26753235]
[292.68627930 209.19862366]
[281.47915649 219.16859436]
[268.57064819 226.80865479]
[254.43826294 231.83616638]
[239.60479736 234.06515503]
[224.61897278 233.41316223]
[210.03515625 229.90431213]
[196.39280701 223.66841125]
[184.19660950 214.93612671]
[173.89772034 204.03048706]
[165.88009644 191.36079407]
[165.88009644 206.36079407]
[165.88009644 221.36079407]
[165.88009644 236.36079407]
[165.88009644 251.36079407]
[165.88009644 266.36080933]
[165.88009644 281.36080933]
[165.88009644 296.36080933]
[165.88009644 311.36080933]
[165.88009644 326.36080933]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[11 110]
[12 109]
[13 108]
[18 35]
[19 34]
[20 33]
[21 32]
[36 56]
[37 55]
[38 54]
[39 53]
[40 52]
[43 50]
[44 49]
[61 92]
[62 91]
[63 90]
[64 89]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
