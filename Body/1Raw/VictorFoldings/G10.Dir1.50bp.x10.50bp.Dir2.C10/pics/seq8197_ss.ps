%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:01 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCCCCCACAAUCCUAGGCCUACCCGCCGCAGUACUGAUCAUUCUAUUUCCCCCUCUAUUGAxxxxxxxxxxCCAUCAUUCCCCCUAAAUAAAUUAAAAAAACUAUUAAACCCAUAUAACCUCCCCCAAAAUCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[124.31870270 85.68632507]
[113.87889099 96.45713806]
[110.28536224 109.96928406]
[96.89192200 113.98267365]
[86.45211029 124.75348663]
[76.01229858 135.52429199]
[71.96334839 150.81861877]
[57.54952621 154.57243347]
[47.10971451 165.34323120]
[36.66990280 176.11404419]
[26.23008919 186.88485718]
[15.79027748 197.65565491]
[21.10386848 211.96400452]
[19.67454529 227.16004944]
[11.78610134 240.22660828]
[-0.99520838 248.56932068]
[-16.13164520 250.53173828]
[-30.61785698 245.72419739]
[-41.57759857 235.10125732]
[-46.83480453 220.77210999]
[-45.34564972 205.58181763]
[-37.40581131 192.54640198]
[-24.59174728 184.25408936]
[-9.44770050 182.35130310]
[5.01946831 187.21585083]
[15.45928097 176.44503784]
[25.89909363 165.67424011]
[36.33890533 154.90342712]
[46.77871704 144.13261414]
[50.08094025 129.60868835]
[65.24148560 125.08448029]
[75.68129730 114.31367493]
[86.12110901 103.54286194]
[89.71463776 90.03071594]
[103.10807800 86.01732635]
[113.54788971 75.24651337]
[103.35044098 64.24101257]
[93.75843811 52.70400620]
[84.79953003 40.66876984]
[76.49954224 28.16999626]
[68.88242340 15.24372482]
[61.97011948 1.92722631]
[55.78256607 -11.74110413]
[50.33760834 -25.72185707]
[45.65093994 -39.97472382]
[41.73607635 -54.45860672]
[38.60430145 -69.13174438]
[36.26465225 -83.95183563]
[34.72386551 -98.87614441]
[33.98639297 -113.86164856]
[34.05435181 -128.86512756]
[34.92755508 -143.84332275]
[36.60347748 -158.75306702]
[39.07728958 -173.55136108]
[42.34186172 -188.19552612]
[46.38777542 -202.64334106]
[51.20336914 -216.85316467]
[56.77476120 -230.78402710]
[63.08588028 -244.39573669]
[70.11853790 -257.64907837]
[77.85244751 -270.50579834]
[86.26531982 -282.92886353]
[95.33288574 -294.88247681]
[105.02901459 -306.33209229]
[115.32574463 -317.24478149]
[126.19338989 -327.58901978]
[137.60061646 -337.33499146]
[149.51451111 -346.45465088]
[161.90075684 -354.92163086]
[174.72363281 -362.71157837]
[187.94615173 -369.80197144]
[201.53021240 -376.17242432]
[215.43661499 -381.80456543]
[229.62528992 -386.68209839]
[244.05532837 -390.79101562]
[258.68511963 -394.11944580]
[273.47247314 -396.65780640]
[288.37475586 -398.39877319]
[303.34899902 -399.33731079]
[318.35205078 -399.47073364]
[333.34060669 -398.79864502]
[348.27151489 -397.32299805]
[363.10165405 -395.04803467]
[377.78833008 -391.98028564]
[392.28915405 -388.12866211]
[406.56234741 -383.50424194]
[420.56671143 -378.12033081]
[434.26190186 -371.99246216]
[447.60842896 -365.13833618]
[460.56781006 -357.57766724]
[473.10269165 -349.33230591]
[485.17691040 -340.42599487]
[496.75564575 -330.88442993]
[507.80554199 -320.73507690]
[518.29473877 -310.00726318]
[528.19293213 -298.73187256]
[537.47167969 -286.94143677]
[546.10412598 -274.66995239]
[554.06549072 -261.95278931]
[561.33270264 -248.82664490]
[567.88494873 -235.32931519]
[573.70318604 -221.49975586]
[578.77075195 -207.37782288]
[583.07293701 -193.00422668]
[586.59747314 -178.42044067]
[589.33404541 -163.66848755]
[591.27490234 -148.79090881]
[592.41430664 -133.83061218]
[592.74908447 -118.83071136]
[592.27825928 -103.83446503]
[591.00311279 -88.88511658]
[588.92742920 -74.02575684]
[586.05712891 -59.29924393]
[582.40045166 -44.74802399]
[577.96801758 -30.41406441]
[572.77252197 -16.33868599]
[566.82904053 -2.56247377]
[560.15466309 10.87485027]
[552.76867676 23.93454361]
[544.69226074 36.57895279]
[535.94879150 48.77161789]
[526.56347656 60.47738647]
[516.56341553 71.66250610]
[505.97732544 82.29473114]
[494.83581543 92.34339905]
[483.17098999 101.77954102]
[471.01647949 110.57595062]
[458.40731812 118.70726013]
[445.37988281 126.15003204]
[431.97171021 132.88279724]
[418.22146606 138.88615417]
[404.16882324 144.14279175]
[389.85427856 148.63755798]
[375.31912231 152.35746765]
[360.60522461 155.29182434]
[345.75503540 157.43215942]
[330.81137085 158.77230835]
[315.81732178 159.30838013]
[300.81610107 159.03884888]
[285.85098267 157.96449280]
[270.96511841 156.08840942]
[256.20138550 153.41601562]
[241.60241699 149.95498657]
[227.21025085 145.71533203]
[213.06640625 140.70925903]
[199.21165466 134.95121765]
[185.68595886 128.45779419]
[172.52830505 121.24771881]
[159.77664185 113.34177399]
[147.46771240 104.76275635]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 36]
[2 35]
[4 33]
[5 32]
[6 31]
[8 29]
[9 28]
[10 27]
[11 26]
[12 25]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
