%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:42 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGACCCACCAAUCACAUGCCUAUCAUAUAGUAAAACCCAGCCCAUGACCCCUAACAGGGGCCxxxxxxxxxxUUUUCUUCGCAGGAUUUUUCUGAGCCUUUUACCACUCCAGCCUAGCCCCUACCCCCCAAUCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[75.31635284 446.82858276]
[77.90734863 427.62084961]
[78.21940613 412.62411499]
[78.53146362 397.62734985]
[78.84352112 382.63058472]
[79.15557098 367.63385010]
[79.46762848 352.63708496]
[79.77968597 337.64031982]
[80.09174347 322.64358521]
[80.40380096 307.64682007]
[65.73404694 304.60733032]
[51.86894226 298.92239380]
[39.28124237 290.78424072]
[28.40043831 280.46887207]
[19.59811211 268.32650757]
[13.17522430 254.76977539]
[9.35184765 240.25979614]
[8.25960922 225.29034424]
[9.93716908 210.37112427]
[14.32885265 196.01042175]
[21.28649330 182.69772339]
[30.57443428 170.88710022]
[41.87751007 160.98170471]
[54.81173706 153.31997681]
[68.93736267 148.16410828]
[83.77381897 145.69108582]
[84.08586884 130.69433594]
[72.58406830 121.06580353]
[57.87610626 124.01128387]
[43.16814423 126.95677185]
[28.46018410 129.90225220]
[14.11671925 138.94113159]
[1.46041524 127.66043091]
[8.79665184 112.37593079]
[25.51470184 115.19429016]
[40.22266388 112.24880981]
[54.93062592 109.30332947]
[69.63858795 106.35784149]
[76.04233551 81.11849213]
[99.11656952 70.02539062]
[95.41040802 55.49045181]
[91.70424652 40.95551682]
[87.99808502 26.42057991]
[74.83601379 13.58547783]
[80.16068268 -3.10727048]
[76.15294647 -17.56195831]
[65.00975800 -28.79316521]
[69.06526947 -43.12502289]
[65.05752563 -57.57971191]
[54.20613480 -64.62961578]
[51.18998337 -76.80014038]
[57.10305023 -87.39933777]
[46.19593048 -98.85993195]
[50.54872131 -113.10431671]
[46.84255981 -127.63925934]
[40.92259598 -141.42163086]
[32.93267822 -154.11656189]
[24.94276237 -166.81149292]
[16.95284653 -179.50642395]
[8.96292973 -192.20135498]
[-4.59114981 -202.38581848]
[1.44315648 -218.22953796]
[18.33816147 -216.81703186]
[21.65785980 -200.19126892]
[29.64777565 -187.49633789]
[37.63769150 -174.80140686]
[45.62760925 -162.10647583]
[53.61752319 -149.41156006]
[53.83505249 -164.40997314]
[59.36202240 -178.35459900]
[69.47868347 -189.42948914]
[82.86759186 -196.19241333]
[97.78517151 -197.76266479]
[112.28878784 -193.93576050]
[124.48970032 -185.21006775]
[132.79904175 -172.72187805]
[136.13471985 -158.09747314]
[134.06234741 -143.24131775]
[126.85182190 -130.08805847]
[115.44210815 -120.35057831]
[101.31904602 -115.29695129]
[86.32181549 -115.58527374]
[72.40343475 -121.17800903]
[61.37749481 -131.34541321]
[65.08365631 -116.81047821]
[75.72568512 -106.38951874]
[71.63798523 -91.10549927]
[84.55468750 -79.26663208]
[79.51221466 -61.58745193]
[83.51995850 -47.13276291]
[94.37648010 -36.93545151]
[90.60762787 -21.56969833]
[94.61537170 -7.11501074]
[105.01419830 -0.85627550]
[108.44560242 11.20375919]
[102.53302002 22.71441841]
[106.23918152 37.24935532]
[109.94534302 51.78429031]
[113.65150452 66.31922913]
[126.09094238 74.70137024]
[140.95399475 72.67903900]
[155.81703186 70.65670013]
[170.65824890 68.47986603]
[185.47599792 66.14875793]
[190.92008972 51.78709412]
[202.82579041 42.08401108]
[217.99052429 39.64958572]
[232.33505249 45.13867188]
[242.00077820 57.07472610]
[244.38764954 72.24701691]
[238.85363770 86.57427216]
[226.88734436 96.20252991]
[211.70764160 98.54183960]
[197.39781189 92.96293640]
[187.80709839 80.96651459]
[172.98934937 83.29762268]
[166.83073425 87.47100067]
[157.83937073 85.51974487]
[142.97631836 87.54208374]
[128.11328125 89.56441498]
[130.17481995 101.07855988]
[127.67234802 112.58710480]
[120.92432404 122.33747101]
[110.90045166 128.82102966]
[99.08262634 131.00639343]
[98.77056885 146.00314331]
[113.49130249 149.09120178]
[127.39022827 154.83020020]
[139.99453735 163.02334595]
[150.87577820 173.39036560]
[159.66438293 185.57711792]
[166.06221008 199.16772461]
[169.85270691 213.69869995]
[170.90820312 228.67477417]
[169.19419861 243.58583069]
[164.77053833 257.92422485]
[157.78927612 271.20202637]
[148.48945618 282.96771240]
[137.18898010 292.82153320]
[124.27363586 300.42898560]
[110.18404388 305.53225708]
[95.40055084 307.95889282]
[95.08849335 322.95562744]
[94.77644348 337.95239258]
[94.46438599 352.94915771]
[94.15232849 367.94589233]
[93.84027100 382.94265747]
[93.52821350 397.93939209]
[93.21615601 412.93615723]
[92.90410614 427.93292236]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 150]
[3 149]
[4 148]
[5 147]
[6 146]
[7 145]
[8 144]
[9 143]
[10 142]
[26 126]
[27 125]
[28 38]
[29 37]
[30 36]
[31 35]
[40 99]
[41 98]
[42 97]
[43 96]
[45 93]
[46 92]
[48 90]
[49 89]
[52 87]
[54 85]
[55 84]
[56 68]
[57 67]
[58 66]
[59 65]
[60 64]
[100 120]
[101 119]
[102 118]
[103 116]
[104 115]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
