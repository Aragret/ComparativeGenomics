%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:56 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCAAGCCAACCCCAUGGCCUCCAUGACUUUUUCAAAAAGGUAUUAGAAAAACCAUUUCAUAACUUxxxxxxxxxxCAUUAACACUAUUCUCACCAGACCUCCUAGGCGACCCAGACAAUUAUACCCUAGCCAACCCCUUCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[125.73300171 291.57299805]
[125.73300171 276.57299805]
[125.73300171 261.57299805]
[125.73300171 246.57298279]
[125.73300171 231.57298279]
[125.73300171 216.57298279]
[125.73300171 201.57298279]
[125.73300171 186.57298279]
[125.73300171 171.57298279]
[125.73300171 156.57298279]
[118.83987427 153.61750793]
[106.82791138 162.60153198]
[105.05362701 147.70657349]
[98.16049957 144.75109863]
[87.29519653 155.09252930]
[76.42989349 165.43395996]
[65.56459045 175.77539062]
[65.42490387 191.57905579]
[54.09284592 202.59541321]
[38.29153824 202.28865051]
[27.39560509 190.84075928]
[27.86941719 175.04356384]
[39.43186951 164.26928711]
[55.22315979 164.91007996]
[66.08846283 154.56864929]
[76.95376587 144.22721863]
[87.81906891 133.88578796]
[85.34696960 126.80492401]
[71.18515015 131.74888611]
[66.24142456 117.58697510]
[80.40277863 112.64318085]
[77.93067932 105.56230927]
[62.98993301 104.23036957]
[48.04918671 102.89842987]
[33.61648560 109.37976837]
[21.62652969 100.54290009]
[6.68578148 99.21096039]
[-8.25496578 97.87902832]
[-23.19571304 96.54708862]
[-38.13646317 95.21514893]
[-54.44991684 99.83115387]
[-63.40154266 85.43307495]
[-52.04419708 72.84549713]
[-36.80452347 80.27439880]
[-21.86377525 81.60633850]
[-6.92302752 82.93827820]
[8.01772022 84.27021790]
[22.95846748 85.60215759]
[36.32250595 79.02555084]
[49.38112259 87.95767975]
[64.32186890 89.28961945]
[79.26261902 90.62155914]
[82.62125397 83.91562653]
[89.33852386 70.50375366]
[92.69715881 63.79781723]
[82.68224335 52.63083649]
[72.66732788 41.46385193]
[62.65241623 30.29687119]
[46.77559662 27.99334717]
[38.80224228 14.07195473]
[44.84882355 -0.78800499]
[60.27692413 -5.18724251]
[73.25142670 4.24896049]
[73.81939697 20.28195572]
[83.83431244 31.44893837]
[93.84922791 42.61592102]
[103.86414337 53.78290176]
[118.85755157 54.22740173]
[129.51641846 43.67332077]
[140.17527771 33.11924362]
[150.83415222 22.56516266]
[141.48446655 10.81651020]
[133.45988464 -1.87416410]
[126.85446167 -15.35806751]
[121.74565887 -29.47710991]
[118.19335938 -44.06575012]
[116.23922729 -58.95294571]
[115.90616608 -73.96414948]
[117.19808197 -88.92337036]
[120.09983063 -103.65521240]
[124.57737732 -117.98694611]
[130.57824707 -131.75054932]
[138.03205872 -144.78465271]
[146.85144043 -156.93643188]
[156.93298340 -168.06341553]
[168.15849304 -178.03515625]
[180.39633179 -186.73471069]
[193.50303650 -194.06010437]
[207.32495117 -199.92544556]
[221.69998169 -204.26197815]
[236.45962524 -207.01884460]
[251.43081665 -208.16371155]
[266.43801880 -207.68318176]
[281.30529785 -205.58287048]
[295.85833740 -201.88740540]
[309.92651367 -196.64012146]
[323.34484863 -189.90254211]
[335.95608521 -181.75364685]
[347.61230469 -172.28898621]
[358.17684937 -161.61953735]
[367.52590942 -149.87037659]
[375.54980469 -137.17927551]
[382.15451050 -123.69502258]
[387.26254272 -109.57570648]
[390.81405640 -94.98686981]
[392.76739502 -80.09957123]
[393.09963989 -65.08834839]
[391.80691528 -50.12919617]
[388.90438843 -35.39751434]
[384.42605591 -21.06601524]
[378.42446899 -7.30273247]
[370.96994019 5.73096848]
[362.14990234 17.88227272]
[352.06774902 29.00871468]
[340.84173584 38.97983932]
[328.60339355 47.67874146]
[315.49630737 55.00343323]
[301.67410278 60.86803436]
[287.29882812 65.20378876]
[272.53903198 67.95985413]
[257.56777954 69.10391998]
[242.56059265 68.62258148]
[227.69342041 66.52146912]
[213.14059448 62.82522583]
[199.07270813 57.57718658]
[185.65472412 50.83887863]
[173.04394531 42.68931198]
[161.38822937 33.22402573]
[150.72937012 43.77810669]
[140.07049561 54.33218765]
[129.41163635 64.88626862]
[141.00904846 55.37311935]
[154.60693359 49.04085922]
[169.35194397 46.28686142]
[184.31877136 47.28395844]
[198.56816101 51.96957397]
[211.20588684 60.04966354]
[221.43887329 71.01715851]
[228.62495422 84.18379974]
[232.31314087 98.72329712]
[232.27201843 113.72324371]
[228.50413513 128.24230957]
[221.24597168 141.36933899]
[210.95298767 152.28054810]
[198.27114868 160.29121399]
[183.99627686 164.89862061]
[169.02421570 165.81361389]
[154.29452515 162.97880554]
[140.73300171 156.57298279]
[140.73300171 171.57298279]
[140.73300171 186.57298279]
[140.73300171 201.57298279]
[140.73300171 216.57298279]
[140.73300171 231.57298279]
[140.73300171 246.57298279]
[140.73300171 261.57299805]
[140.73300171 276.57299805]
[140.73300171 291.57299805]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 158]
[2 157]
[3 156]
[4 155]
[5 154]
[6 153]
[7 152]
[8 151]
[9 150]
[10 149]
[14 27]
[15 26]
[16 25]
[17 24]
[32 52]
[33 51]
[34 50]
[36 48]
[37 47]
[38 46]
[39 45]
[40 44]
[55 67]
[56 66]
[57 65]
[58 64]
[68 131]
[69 130]
[70 129]
[71 128]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
