%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:05 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGAUACUCCUCAAUUACCCACAUAGGAUGAAUAAUAGCAGUUCUACCGUACAACCCUAACAUxxxxxxxxxxGGUCAAUAGUACUUGCCGCAGUACUCUUAAAACUAGGCGGCUAUGGUAUAAUACGCCUCACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[88.99946594 477.01718140]
[88.99946594 462.01718140]
[88.99946594 447.01718140]
[88.99946594 432.01718140]
[88.99946594 417.01718140]
[88.99946594 402.01718140]
[88.99946594 387.01718140]
[88.99946594 372.01718140]
[88.99946594 357.01718140]
[88.99946594 342.01718140]
[74.39521790 338.71298218]
[60.88598633 332.23846436]
[49.15069199 322.91549683]
[39.77988434 311.20913696]
[33.24604416 297.70440674]
[29.87975693 283.07727051]
[29.85298157 268.06057739]
[33.17028046 253.40742493]
[39.66841507 239.85343933]
[49.02438736 228.07977295]
[60.77149200 218.67890930]
[74.32259369 212.12481689]
[88.99946594 208.74911499]
[88.99946594 193.74911499]
[88.99946594 178.74911499]
[88.99946594 163.74911499]
[86.71778107 160.98118591]
[85.69838715 156.94851685]
[86.53083038 152.27310181]
[89.49671173 147.82078552]
[90.43234253 132.84999084]
[91.36797333 117.87920380]
[82.60176849 105.70736694]
[68.10617065 101.85021210]
[54.54594803 109.51559448]
[39.90029907 105.39739227]
[32.67609024 92.42255402]
[18.18049240 88.56539917]
[3.68489623 84.70823669]
[-7.64304018 95.18112946]
[-22.83873940 97.84463501]
[-37.05331039 91.84883881]
[-45.75093460 79.10697937]
[-46.15623093 63.68494415]
[-38.13986969 50.50383759]
[-24.25984764 43.76971054]
[-8.94522476 45.63139343]
[2.91715741 55.49483109]
[7.54205561 70.21263885]
[22.03765297 74.06980133]
[36.53324890 77.92695618]
[49.25049973 70.25837708]
[64.00604248 73.96359253]
[71.96332550 87.35461426]
[86.45892334 91.21176910]
[98.06026459 81.70341492]
[97.12463379 66.73262024]
[96.18901062 51.76182938]
[95.25337982 36.79103851]
[80.34777832 34.69151306]
[66.17005157 29.63416100]
[53.30075073 21.82608223]
[42.26688004 11.58701229]
[33.52026367 -0.66376740]
[27.41907310 -14.42459393]
[24.21314430 -29.13196945]
[24.03376007 -44.18363953]
[26.88826752 -58.96324158]
[32.65977478 -72.86556244]
[41.11194229 -85.32131958]
[51.89865494 -95.82044220]
[64.57821655 -103.93300629]
[78.63139343 -109.32681274]
[93.48271942 -111.78097534]
[108.52404785 -111.19500732]
[123.13944244 -107.59290314]
[136.73040771 -101.12216949]
[148.74040222 -92.04776764]
[158.67764282 -80.74129486]
[166.13517761 -67.66574860]
[170.80764771 -53.35655594]
[172.50370789 -38.39967346]
[171.15390015 -23.40757942]
[166.81350708 -8.99418545]
[159.66027832 4.25028563]
[149.98710632 15.78348351]
[138.19010925 25.13312912]
[124.75238037 31.91636086]
[110.22417450 35.85541153]
[111.15979767 50.82620239]
[112.09542847 65.79699707]
[113.03105927 80.76778412]
[113.89834595 85.06970978]
[113.79956818 89.13288879]
[112.83558655 92.77030945]
[127.47908783 89.51948547]
[142.12258911 86.26866150]
[156.76609802 83.01783752]
[171.40959167 79.76700592]
[185.98229980 76.21224976]
[200.47789001 72.35508728]
[214.97349548 68.49792480]
[219.59838867 53.78012085]
[231.46076965 43.91667938]
[246.77539062 42.05499649]
[260.65542603 48.78912735]
[268.67178345 61.97023010]
[268.26647949 77.39227295]
[259.56884766 90.13412476]
[245.35429382 96.12992096]
[230.15858459 93.46641541]
[218.83065796 82.99352264]
[204.33505249 86.85068512]
[189.83946228 90.70783997]
[186.68566895 94.37242126]
[181.17211914 96.05529022]
[174.66041565 94.41050720]
[160.01692200 97.66133881]
[145.37341309 100.91216278]
[130.72991943 104.16298676]
[116.08641815 107.41381073]
[106.33876038 118.81483459]
[105.40313721 133.78562927]
[104.46750641 148.75642395]
[103.99946594 163.74911499]
[103.99946594 178.74911499]
[103.99946594 193.74911499]
[103.99946594 208.74911499]
[118.67633820 212.12481689]
[132.22743225 218.67890930]
[143.97454834 228.07977295]
[153.33052063 239.85343933]
[159.82864380 253.40742493]
[163.14595032 268.06057739]
[163.11917114 283.07727051]
[159.75288391 297.70440674]
[153.21903992 311.20913696]
[143.84823608 322.91549683]
[132.11294556 332.23846436]
[118.60371399 338.71298218]
[103.99946594 342.01718140]
[103.99946594 357.01718140]
[103.99946594 372.01718140]
[103.99946594 387.01718140]
[103.99946594 402.01718140]
[103.99946594 417.01718140]
[103.99946594 432.01718140]
[103.99946594 447.01718140]
[103.99946594 462.01718140]
[103.99946594 477.01718140]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[23 128]
[24 127]
[25 126]
[26 125]
[30 124]
[31 123]
[32 122]
[33 55]
[34 54]
[37 51]
[38 50]
[39 49]
[56 92]
[57 91]
[58 90]
[59 89]
[95 121]
[96 120]
[97 119]
[98 118]
[99 117]
[100 114]
[101 113]
[102 112]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
