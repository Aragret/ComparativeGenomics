%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:41 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGAUCCAAACAUCACUUUGGCUUCGAAGCCGCCGCCUGAUACUGGCAUUUUGUAGAUGUGGUxxxxxxxxxxGUUCGUUACAUGGUCCAUCAUAGAAUUCUCACUGUGAUAUAUAAACUCAGACCCAAACAUCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[108.07595825 279.49560547]
[108.07595825 264.49560547]
[108.07595825 249.49560547]
[108.07595825 234.49560547]
[108.07595825 219.49560547]
[108.07595825 204.49560547]
[108.07595825 189.49560547]
[108.07595825 174.49560547]
[108.07595825 159.49560547]
[108.07595825 144.49560547]
[104.97763824 129.81907654]
[98.91462708 116.09902191]
[89.52746582 104.39939880]
[77.44747162 95.50704956]
[65.36748505 86.61470032]
[45.22614288 87.95625305]
[33.26897812 72.47583771]
[18.50292015 69.83696747]
[3.73686552 67.19810486]
[-11.02919006 64.55924225]
[-25.79524612 61.92037582]
[-40.58795166 59.43525696]
[-55.40571213 57.10415649]
[-65.98042297 72.93999481]
[-84.11238861 80.99530792]
[-104.53350830 77.99952698]
[-120.80314636 64.03821564]
[-135.44665527 67.28903961]
[-150.09014893 70.53986359]
[-164.73365784 73.79069519]
[-176.44891357 85.26608276]
[-192.16964722 80.59803009]
[-195.72370911 64.58863068]
[-183.45497131 53.70698547]
[-167.98448181 59.14719009]
[-153.34097290 55.89636612]
[-138.69747925 52.64553833]
[-124.05397034 49.39471436]
[-122.96266174 34.43446350]
[-136.97937012 29.09295273]
[-150.99609375 23.75144005]
[-162.85787964 33.50814819]
[-178.01147461 36.01097870]
[-192.38063049 30.58667755]
[-202.10011292 18.69435692]
[-204.55543518 3.53299141]
[-199.08612061 -10.81908798]
[-187.16339111 -20.50124359]
[-171.99440002 -22.90902519]
[-157.65953064 -17.39475060]
[-148.01480103 -5.44173241]
[-145.65457153 9.73472691]
[-131.63786316 15.07623959]
[-117.62114716 20.41775131]
[-105.22101593 11.04511452]
[-90.51008606 7.38357782]
[-75.92172241 9.72931004]
[-63.75033951 17.40922356]
[-55.79063034 28.93586731]
[-53.07460785 42.28639603]
[-38.25684738 44.61750031]
[-31.11432457 42.53664017]
[-23.15638161 47.15432358]
[-8.39032555 49.79318619]
[6.37573004 52.43204880]
[21.14178467 55.07091522]
[35.90784073 57.70977783]
[41.37255859 51.83619308]
[48.67525864 48.51463318]
[50.85209274 33.67342758]
[37.38598633 26.74936676]
[26.89954376 15.82630444]
[20.53026390 2.08909273]
[18.96903419 -12.97215843]
[22.38520813 -27.72371674]
[30.40822220 -40.56544495]
[42.16780090 -50.10436630]
[56.38835144 -55.30577087]
[71.52733612 -55.60544968]
[85.94259644 -50.97089767]
[98.07046509 -41.90483093]
[106.59540558 -29.39067268]
[110.59268951 -14.78586578]
[109.62873077 0.32537186]
[103.80809021 14.30388546]
[93.76213837 25.63339043]
[80.58059692 33.08494568]
[65.69329834 35.85026550]
[63.51646423 50.69147110]
[72.92948914 60.53961182]
[74.25983429 74.53471375]
[86.33982086 83.42706299]
[98.41981506 92.31941223]
[100.32294464 88.15207672]
[104.03836823 84.65944672]
[109.31052399 82.44173431]
[115.70841217 82.00733948]
[130.28111267 78.45258331]
[144.85382080 74.89781952]
[159.42652893 71.34305573]
[173.99922180 67.78829193]
[188.57192993 64.23353577]
[203.14463806 60.67877197]
[208.90570068 46.27079773]
[222.05320740 38.02928162]
[237.53167725 39.12324905]
[249.38931274 49.13205338]
[253.06660461 64.20709991]
[247.14958191 78.55173492]
[233.91343689 86.65013885]
[218.44775391 85.38832092]
[206.69940186 75.25147247]
[192.12669373 78.80623627]
[177.55398560 82.36100006]
[162.98129272 85.91576385]
[148.40858459 89.47052002]
[133.83587646 93.02528381]
[119.26317596 96.58004761]
[112.63468170 110.03601074]
[118.69769287 123.75606537]
[120.65367126 108.88414001]
[126.64718628 95.13358307]
[136.21051025 83.57750702]
[148.59729004 75.11775208]
[162.84088135 70.41452026]
[177.82968140 69.83486938]
[192.39395142 73.42401886]
[205.39707947 80.90188599]
[215.82431030 91.68487549]
[222.86187744 104.93148041]
[225.96057129 119.60793304]
[224.87855530 134.56884766]
[219.70028687 148.64669800]
[210.82987976 160.74279785]
[198.95957947 169.91317749]
[185.01574707 175.44216919]
[170.08659363 176.89828491]
[155.33718872 174.16789246]
[141.91859436 167.46408081]
[130.87800598 157.30999756]
[123.07595825 144.49560547]
[123.07595825 159.49560547]
[123.07595825 174.49560547]
[123.07595825 189.49560547]
[123.07595825 204.49560547]
[123.07595825 219.49560547]
[123.07595825 234.49560547]
[123.07595825 249.49560547]
[123.07595825 264.49560547]
[123.07595825 279.49560547]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[11 120]
[12 119]
[13 93]
[14 92]
[15 91]
[17 67]
[18 66]
[19 65]
[20 64]
[21 63]
[22 61]
[23 60]
[27 38]
[28 37]
[29 36]
[30 35]
[39 54]
[40 53]
[41 52]
[69 89]
[70 88]
[97 118]
[98 117]
[99 116]
[100 115]
[101 114]
[102 113]
[103 112]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
