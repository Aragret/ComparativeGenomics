%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:09 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCAGCCCUCGCUGUCACUUUCCUAGGACUUCUAACAGCCCUAGACCUCAACUACCUAACCAxxxxxxxxxxCACCCUCACACGAUUCUUUACCUUUCACUUCAUCUUGCCCUUCAUUAUUGCAGCCCUAGCCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[71.95243073 295.83676147]
[71.95243073 280.83676147]
[71.95243073 265.83676147]
[71.95243073 250.83674622]
[71.95243073 235.83674622]
[71.95243073 220.83674622]
[71.95243073 205.83674622]
[71.95243073 190.83674622]
[71.95243073 175.83674622]
[71.95243073 160.83674622]
[57.82762527 155.78799438]
[48.31926727 167.38932800]
[38.81090927 178.99067688]
[29.30255127 190.59201050]
[27.17708778 206.85284424]
[11.93035221 212.89179993]
[-0.75312108 202.49653625]
[2.17433715 186.36080933]
[17.70121002 181.08366394]
[27.20956802 169.48231506]
[36.71792603 157.88098145]
[46.22628403 146.27963257]
[43.55552673 139.27127075]
[29.64917946 144.89385986]
[20.00220871 156.38020325]
[5.21154833 153.88293457]
[-0.12943254 139.86601257]
[9.24900532 128.15939331]
[24.09261894 130.31283569]
[38.21401596 125.25456238]
[35.54325867 118.24620819]
[20.72550201 115.91510010]
[5.90774345 113.58399963]
[-8.91001415 111.25289154]
[-23.72777176 108.92179108]
[-32.36439514 121.50636292]
[-45.61023712 129.08993530]
[-60.83531952 130.16677856]
[-75.01669312 124.52307129]
[-85.33864594 113.27940369]
[-89.75173187 98.66819763]
[-87.37973785 83.59051514]
[-78.69361877 71.04004669]
[-65.41802216 63.50870132]
[-50.18881607 62.49182892]
[-36.02977371 68.19132996]
[-25.75218391 79.47555542]
[-21.39666939 94.10403442]
[-6.57891035 96.43513489]
[8.23884773 98.76624298]
[23.05660629 101.09734344]
[37.87436295 103.42845154]
[44.80077744 77.34868622]
[61.62261963 57.70405197]
[84.27722931 47.75685120]
[107.88443756 48.59750366]
[127.78776550 59.09649658]
[138.00125122 48.11083221]
[148.21472168 37.12516785]
[138.18167114 25.96076393]
[129.18977356 13.94194031]
[121.31144714 1.16546738]
[114.61013031 -12.26578426]
[109.13976288 -26.24367332]
[104.94440460 -40.65565491]
[102.05782318 -55.38568878]
[100.50327301 -70.31517792]
[100.29325867 -85.32391357]
[101.42947388 -100.29105377]
[103.90277100 -115.09608459]
[107.69323730 -129.61981201]
[112.77035522 -143.74528503]
[119.09324646 -157.35877991]
[126.61100006 -170.35069275]
[135.26307678 -182.61640930]
[144.97982788 -194.05715942]
[155.68301392 -204.58085632]
[167.28646851 -214.10273743]
[179.69673157 -222.54615784]
[192.81391907 -229.84313965]
[206.53239441 -235.93490601]
[220.74171448 -240.77241516]
[235.32745361 -244.31672668]
[250.17219543 -246.53930664]
[265.15640259 -247.42225647]
[280.15945435 -246.95846558]
[295.06051636 -245.15165710]
[309.73962402 -242.01638794]
[324.07861328 -237.57791138]
[337.96197510 -231.87194824]
[351.27798462 -224.94445801]
[363.91940308 -216.85119629]
[375.78445435 -207.65733337]
[386.77758789 -197.43690491]
[396.81030273 -186.27220154]
[405.80181885 -174.25309753]
[413.67977905 -161.47637939]
[420.38067627 -148.04493713]
[425.85061646 -134.06687927]
[430.04553223 -119.65476227]
[432.93167114 -104.92464447]
[434.48574829 -89.99510956]
[434.69531250 -74.98636627]
[433.55865479 -60.01926041]
[431.08489990 -45.21430206]
[427.29397583 -30.69069481]
[422.21643066 -16.56537056]
[415.89312744 -2.95206690]
[408.37496948 10.03961182]
[399.72253418 22.30505943]
[390.00543213 33.74552155]
[379.30191040 44.26888657]
[367.69818115 53.79042053]
[355.28765869 62.23346329]
[342.17025757 69.53002930]
[328.45156860 75.62137604]
[314.24212646 80.45846558]
[299.65625000 84.00233459]
[284.81146240 86.22445679]
[269.82720947 87.10694885]
[254.82418823 86.64269257]
[239.92317200 84.83543396]
[225.24415588 81.69972229]
[210.90531921 77.26080322]
[197.02212524 71.55441284]
[183.70632935 64.62651062]
[171.06515503 56.53286743]
[159.20039368 47.33864594]
[148.98690796 58.32431030]
[138.77343750 69.30997467]
[145.64500427 78.13777924]
[150.48033142 88.50992584]
[152.93241882 99.95088959]
[152.76654053 111.90750122]
[149.87745667 123.77571106]
[144.30021667 134.93107605]
[136.21377563 144.76150513]
[125.93694305 152.70048523]
[113.91658783 158.25914001]
[100.70863342 161.05508423]
[86.95243073 160.83674622]
[86.95243073 175.83674622]
[86.95243073 190.83674622]
[86.95243073 205.83674622]
[86.95243073 220.83674622]
[86.95243073 235.83674622]
[86.95243073 250.83674622]
[86.95243073 265.83676147]
[86.95243073 280.83676147]
[86.95243073 295.83676147]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[11 22]
[12 21]
[13 20]
[14 19]
[31 52]
[32 51]
[33 50]
[34 49]
[35 48]
[57 130]
[58 129]
[59 128]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
