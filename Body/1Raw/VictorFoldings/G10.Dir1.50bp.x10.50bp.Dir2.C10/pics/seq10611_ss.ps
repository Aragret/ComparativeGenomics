%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:30 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGACCCUAACCCUGACUUCCCUAAUUCCCCCCAUCCUUACCACCCUCGUUAACCCUAACAAAxxxxxxxxxxACGCCCAUAAUCAUACAAAGCCCCCGCACCAAUAGGAUCCUCCCGAAUCAACCCUGACCCCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[-46.80719757 238.14129639]
[-58.10620117 248.00701904]
[-69.40520477 257.87274170]
[-80.70420837 267.73846436]
[-92.00321198 277.60418701]
[-103.30222321 287.46990967]
[-114.18104553 297.79711914]
[-124.62085724 308.56793213]
[-135.06066895 319.33874512]
[-145.50048828 330.10952759]
[-155.94029236 340.88034058]
[-149.87261963 354.81777954]
[-149.60545349 370.01635742]
[-155.17951965 384.15844727]
[-165.74481201 395.08743286]
[-179.69020081 401.13677979]
[-194.88912964 401.38394165]
[-209.02384949 395.79129028]
[-219.93894958 385.21163940]
[-225.96992493 371.25827026]
[-226.19711304 356.05905151]
[-220.58586121 341.93167114]
[-209.99185181 331.03051758]
[-196.03059387 325.01791382]
[-180.83106995 324.81069946]
[-166.71110535 330.44052124]
[-156.27128601 319.66973877]
[-145.83148193 308.89892578]
[-135.39166260 298.12811279]
[-124.95185089 287.35729980]
[-124.89634705 284.49298096]
[-123.66558838 281.47982788]
[-121.19757080 278.77966309]
[-117.60367584 276.86788940]
[-113.16794586 276.17089844]
[-101.86894226 266.30517578]
[-90.56993103 256.43945312]
[-79.27092743 246.57373047]
[-67.97192383 236.70800781]
[-56.67292023 226.84228516]
[-68.77136230 210.23428345]
[-79.11627960 192.48095703]
[-87.60020447 173.76675415]
[-94.13497162 154.28613281]
[-98.65269470 134.24147034]
[-101.10643005 113.84104919]
[-101.47068787 93.29681396]
[-99.74168396 72.82222748]
[-95.93737793 52.63001633]
[-90.09729767 32.92997742]
[-82.28211975 13.92678928]
[-72.57305145 -4.18210602]
[-61.07096481 -21.20855713]
[-47.89536285 -36.97566223]
[-33.18313599 -51.31960297]
[-17.08715248 -64.09134674]
[-25.33944130 -76.61730194]
[-33.59173203 -89.14326477]
[-41.84402084 -101.66922760]
[-56.73898315 -108.53013611]
[-57.97510147 -124.88262939]
[-44.28076172 -133.90466309]
[-29.74352646 -126.31514740]
[-29.31805801 -109.92151642]
[-21.06576920 -97.39555359]
[-12.81347942 -84.86959076]
[-4.56119013 -72.34363556]
[4.30785131 -77.42148590]
[13.42284870 -82.04331207]
[22.76037407 -86.19723511]
[32.29642868 -89.87258148]
[42.00650024 -93.05989838]
[51.86563110 -95.75099945]
[61.84848022 -97.93895721]
[71.92938995 -99.61816406]
[82.08245087 -100.78429413]
[92.28156281 -101.43434906]
[102.50051117 -101.56665802]
[112.71303558 -101.18088531]
[122.89288330 -100.27802277]
[133.01388550 -98.86038208]
[143.05004883 -96.93162537]
[152.97554016 -94.49668884]
[162.76487732 -91.56184387]
[172.39289856 -88.13462830]
[181.83483887 -84.22385406]
[191.06645203 -79.83956909]
[200.06399536 -74.99304962]
[208.80433655 -69.69674683]
[217.26502991 -63.96427917]
[225.42430115 -57.81037140]
[233.26121521 -51.25084686]
[240.75559998 -44.30256653]
[247.88821411 -36.98338699]
[254.64070129 -29.31211853]
[260.99572754 -21.30848312]
[266.93695068 -12.99305058]
[272.44906616 -4.38719368]
[277.51797485 4.48696852]
[282.13058472 13.60662651]
[295.91299438 7.68666315]
[305.28726196 -5.76899385]
[321.60220337 -4.10903263]
[328.07434082 10.95892143]
[318.04574585 23.93424797]
[301.83294678 21.46904564]
[288.05056763 27.38900757]
[292.74655151 40.97337723]
[296.46261597 54.85783386]
[299.17987061 68.97178650]
[300.88452148 83.24349213]
[301.56787109 97.60037994]
[301.22650146 111.96946716]
[299.86209106 126.27770233]
[297.48159790 140.45234680]
[312.05429077 144.00711060]
[326.62698364 147.56187439]
[343.44781494 145.44139099]
[350.14187622 161.01783752]
[337.02728271 171.76229858]
[323.07223511 162.13456726]
[308.49954224 158.57981873]
[293.92681885 155.02505493]
[289.41345215 168.97767639]
[283.89764404 182.56526184]
[277.40866089 195.71589661]
[269.98083496 208.36000061]
[261.65341187 220.43064880]
[252.47053528 231.86398315]
[242.48074341 242.59945679]
[231.73695374 252.58029175]
[220.29597473 261.75366211]
[208.21839905 270.07101440]
[195.56811523 277.48831177]
[182.41207886 283.96636963]
[168.81990051 289.47082520]
[154.86352539 293.97259521]
[140.61680603 297.44781494]
[126.15513611 299.87817383]
[111.55505371 301.25070190]
[96.89382172 301.55822754]
[82.24902344 300.79907227]
[67.69817352 298.97729492]
[53.31826019 296.10247803]
[39.18539429 292.18988037]
[25.37436485 287.26019287]
[11.95826244 281.33950806]
[-0.99191552 274.45916748]
[-13.40763474 266.65557861]
[-25.22318840 257.97000122]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 40]
[2 39]
[3 38]
[4 37]
[5 36]
[6 35]
[7 30]
[8 29]
[9 28]
[10 27]
[11 26]
[56 67]
[57 66]
[58 65]
[59 64]
[100 107]
[101 106]
[115 123]
[116 122]
[117 121]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
