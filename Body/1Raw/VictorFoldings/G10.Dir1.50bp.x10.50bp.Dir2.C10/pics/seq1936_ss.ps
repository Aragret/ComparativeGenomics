%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:01 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGUACUACCAGACAACCUUAGCCAAACCAUUUACCCAAAUAAAGUAUAGGCGAUAGAAAUUGAxxxxxxxxxxAGUCCUACUUCUCCUAUCUCUCCCAGUCCUAGCUGCUGGCAUCACUAUACUACUAACAGACCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[93.75107574 508.86059570]
[93.75107574 493.86059570]
[93.75107574 478.86059570]
[93.75107574 463.86059570]
[93.75107574 448.86059570]
[93.75107574 433.86059570]
[93.75107574 418.86059570]
[93.75107574 403.86059570]
[93.75107574 388.86059570]
[93.75107574 373.86059570]
[79.71694946 371.31433105]
[66.34371948 366.34445190]
[54.04655075 359.10397339]
[43.20742798 349.81628418]
[34.16329956 338.76849365]
[27.19561577 326.30236816]
[22.52154541 312.80392456]
[20.28722763 298.69131470]
[20.56319809 284.40200806]
[23.34215546 270.37918091]
[28.53915787 257.05789185]
[35.99421310 244.85171509]
[45.47720337 234.13986206]
[56.69499969 225.25534058]
[69.30050659 218.47465515]
[82.90340424 214.00918579]
[97.08225250 211.99861145]
[97.69807434 197.01126099]
[97.54407501 182.01205444]
[96.62066650 167.04051208]
[95.69725037 152.06895447]
[94.77383423 137.09741211]
[84.69917297 134.19671631]
[75.82274628 128.61801147]
[68.83967590 120.79818726]
[64.29682922 111.34962463]
[62.54995728 101.01224518]
[47.77784348 98.40752411]
[33.00572586 95.80280304]
[18.23361015 93.19808197]
[3.01690483 99.31231689]
[-9.71778584 88.97985840]
[-6.87010384 72.82984924]
[8.63049984 67.47603607]
[20.83833313 78.42596436]
[35.61045074 81.03068542]
[50.38256454 83.63540649]
[65.15467834 86.24012756]
[71.51920319 75.66126251]
[80.97666168 67.72550964]
[92.50000000 63.29468536]
[92.50000000 48.29468536]
[82.91764069 32.60363388]
[92.20515442 17.74474335]
[91.89717102 2.74790549]
[91.58919525 -12.24893284]
[91.28121948 -27.24577141]
[90.97324371 -42.24260712]
[88.50756073 -45.98694992]
[87.50295258 -49.92576981]
[87.83579254 -53.56389618]
[89.23083496 -56.50040436]
[91.30650330 -58.47083664]
[92.22991943 -73.44239044]
[93.15333557 -88.41394043]
[94.07674408 -103.38549042]
[79.72476959 -108.01923370]
[66.97649384 -116.07728577]
[56.63328552 -127.05311584]
[49.34532166 -140.25677490]
[45.57073975 -154.85824585]
[45.54680634 -169.93971252]
[49.27502823 -184.55310059]
[56.52104568 -197.77981567]
[66.82936859 -208.78842163]
[79.55200195 -216.88688660]
[93.88919830 -221.56616211]
[108.93971252 -222.53208923]
[123.75743866 -219.72395325]
[137.41094971 -213.31826782]
[149.04194641 -203.71771240]
[157.91929626 -191.52578735]
[163.48498535 -177.50886536]
[165.38914490 -162.54808044]
[163.51205444 -147.58387756]
[157.97172546 -133.55691528]
[149.11643982 -121.34895325]
[137.50282288 -111.72737122]
[123.86092377 -105.29700470]
[109.04829407 -102.46207428]
[108.12488556 -87.49052429]
[107.20146942 -72.51897430]
[106.27805328 -57.54742432]
[105.97007751 -42.55058670]
[106.27805328 -27.55374718]
[106.58603668 -12.55691051]
[106.89401245 2.43992782]
[107.20198822 17.43676567]
[115.72872925 26.07139778]
[116.07230377 38.60348892]
[107.50000000 48.29468536]
[107.50000000 63.29468536]
[119.02333832 67.72550964]
[128.48080444 75.66126251]
[134.84532166 86.24012756]
[149.61743164 83.63540649]
[164.38955688 81.03068542]
[179.16166687 78.42596436]
[191.36950684 67.47603607]
[206.87010193 72.82984924]
[209.71778870 88.97985840]
[196.98309326 99.31231689]
[181.76638794 93.19808197]
[166.99427795 95.80280304]
[152.22215271 98.40752411]
[137.45004272 101.01224518]
[129.42684937 123.18601227]
[109.74538422 136.17399597]
[110.66880035 151.14553833]
[111.59221649 166.11709595]
[112.51562500 181.08863831]
[124.47166443 172.03031921]
[139.05870056 175.52584839]
[145.61061096 189.01925659]
[139.33663940 202.64413452]
[124.82431793 206.43789673]
[112.68542480 197.62709045]
[112.06960297 212.61444092]
[127.42737579 216.24360657]
[141.79095459 222.76879883]
[154.62013245 231.94273376]
[165.43281555 243.41850281]
[173.82307434 256.76278687]
[179.47640991 271.47213745]
[182.18154907 286.99197388]
[181.83831787 302.73760986]
[178.46138000 318.11608887]
[172.17958069 332.54864502]
[163.23109436 345.49252319]
[151.95431519 356.46121216]
[138.77511597 365.04290771]
[124.19075012 370.91589355]
[108.75107574 373.86059570]
[108.75107574 388.86059570]
[108.75107574 403.86059570]
[108.75107574 418.86059570]
[108.75107574 433.86059570]
[108.75107574 448.86059570]
[108.75107574 463.86059570]
[108.75107574 478.86059570]
[108.75107574 493.86059570]
[108.75107574 508.86059570]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 152]
[2 151]
[3 150]
[4 149]
[5 148]
[6 147]
[7 146]
[8 145]
[9 144]
[10 143]
[27 128]
[28 127]
[29 121]
[30 120]
[31 119]
[32 118]
[37 48]
[38 47]
[39 46]
[40 45]
[51 102]
[52 101]
[54 98]
[55 97]
[56 96]
[57 95]
[58 94]
[63 93]
[64 92]
[65 91]
[66 90]
[105 116]
[106 115]
[107 114]
[108 113]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
