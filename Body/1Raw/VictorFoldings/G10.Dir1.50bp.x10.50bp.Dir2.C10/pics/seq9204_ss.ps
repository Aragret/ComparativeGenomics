%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:14 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGGCCAACUAAUAUUUCACUUUACAUCCAAACAUCACUUUGGCUUCGAAGCCGCCGCCUGAUxxxxxxxxxxUGUAGCAGGAAUCUUCUUACUCAUCCGCUUCCACCCCCUAGCAGAAAAUAGCCCACUAAUCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[113.09342957 494.86965942]
[115.68443298 475.66192627]
[115.99649048 460.66519165]
[116.30854797 445.66842651]
[116.62059784 430.67166138]
[116.93265533 415.67492676]
[117.24471283 400.67816162]
[117.55677032 385.68142700]
[117.86882782 370.68466187]
[118.18088531 355.68789673]
[118.49293518 340.69116211]
[103.05863190 335.61532593]
[89.91784668 326.02859497]
[80.35058594 312.85070801]
[75.29310608 297.35183716]
[75.24629974 281.03018188]
[80.22610474 265.46719360]
[89.76087952 252.17436218]
[102.93600464 242.44631958]
[118.48166656 237.23486328]
[118.16960907 222.23811340]
[117.85755157 207.24136353]
[117.54549408 192.24461365]
[117.23343658 177.24784851]
[108.70341492 168.61384583]
[108.35816193 156.07991028]
[116.93144989 146.38699341]
[116.93144989 131.38699341]
[79.04611969 121.20734406]
[78.77419281 88.87728119]
[68.33438110 78.10647583]
[57.89456940 67.33566284]
[47.45475769 56.56485748]
[35.18904114 64.60859680]
[21.65257645 70.24707794]
[7.31166697 73.28771973]
[-7.33997774 73.62739563]
[-21.79823685 71.25595093]
[-35.56592178 66.25647736]
[-48.16988754 58.80241776]
[-59.17726517 49.15153885]
[-68.21036530 37.63702011]
[-74.95960236 24.65596390]
[-79.19412994 10.65567970]
[-80.76970673 -3.88171482]
[-79.63366699 -18.45590019]
[-75.82659149 -32.56557465]
[-69.48095703 -45.72569656]
[-60.81644058 -57.48416138]
[-71.02992249 -68.46982574]
[-81.24340057 -79.45549011]
[-96.80285645 -80.19105530]
[-107.00428009 -91.47757721]
[-106.20714569 -106.30661011]
[-116.42062378 -117.29227448]
[-132.24642944 -121.59065247]
[-136.17465210 -137.51237488]
[-124.16428375 -148.67852783]
[-108.57055664 -143.60234070]
[-105.43495941 -127.50575256]
[-95.22148132 -116.52008820]
[-80.37375641 -116.23623657]
[-69.85933685 -105.24070740]
[-70.25773621 -89.66896820]
[-60.04425812 -78.68330383]
[-49.83077621 -67.69763947]
[-36.79664612 -75.82308197]
[-22.42880058 -81.26539612]
[-7.27322960 -83.81585693]
[8.09377575 -83.37564850]
[23.08753014 -79.95972443]
[37.13719559 -73.69629669]
[49.70752716 -64.82199860]
[60.31924438 -53.67298889]
[68.56732941 -40.67218781]
[74.13645935 -26.31324768]
[76.81308746 -11.14179897]
[76.49359894 4.26527452]
[73.18836212 19.32177734]
[67.02136230 33.45449829]
[58.22556686 46.12504578]
[68.66537476 56.89585114]
[79.10518646 67.66666412]
[89.54500580 78.43746948]
[97.48005676 73.23007965]
[107.77249908 71.21797943]
[119.05825043 73.38147736]
[129.59739685 80.10498810]
[141.29701233 70.71782684]
[152.99664307 61.33066559]
[149.08065796 46.61383820]
[151.49551392 31.57760239]
[159.82283020 18.82707977]
[172.61982727 10.57137108]
[187.66935730 8.24083042]
[202.36399841 12.23923779]
[214.15782166 21.87384415]
[221.00747681 35.47539520]
[221.72619629 50.68734360]
[216.18948364 64.87412262]
[205.35659790 75.57778931]
[191.10441589 80.94387054]
[175.90217590 80.04265594]
[162.38380432 73.03028870]
[150.68417358 82.41744995]
[138.98455811 91.80461121]
[143.59011841 106.08007050]
[158.56983948 106.85991669]
[173.54954529 107.63976288]
[181.84271240 94.71231079]
[195.49588013 87.67765045]
[210.83644104 88.42807007]
[223.73782349 96.76171875]
[230.72966003 110.43687439]
[229.93115234 125.77499390]
[221.55711365 138.65020752]
[207.86010742 145.59913635]
[192.52456665 144.75254822]
[179.67565918 136.33819580]
[172.76969910 122.61947632]
[157.78999329 121.83963013]
[142.81027222 121.05978394]
[131.93144226 131.38699341]
[131.93144226 146.38699341]
[141.51417542 162.07620239]
[132.23019409 176.93579102]
[132.54225159 191.93255615]
[132.85430908 206.92930603]
[133.16636658 221.92605591]
[133.47842407 236.92280579]
[146.85328674 240.43968201]
[158.84085083 247.30989075]
[168.61822510 257.05416870]
[175.51623535 268.99618530]
[179.06524658 282.30957031]
[179.02708435 296.07504272]
[175.41104126 309.34384155]
[168.47276306 321.20324707]
[158.69621277 330.83923340]
[146.75987244 337.59243774]
[133.48968506 341.00320435]
[133.17764282 355.99996948]
[132.86558533 370.99670410]
[132.55352783 385.99346924]
[132.24147034 400.99023438]
[131.92941284 415.98696899]
[131.61735535 430.98373413]
[131.30529785 445.98049927]
[130.99324036 460.97723389]
[130.68118286 475.97399902]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 150]
[3 149]
[4 148]
[5 147]
[6 146]
[7 145]
[8 144]
[9 143]
[10 142]
[11 141]
[20 130]
[21 129]
[22 128]
[23 127]
[24 126]
[27 124]
[28 123]
[30 84]
[31 83]
[32 82]
[33 81]
[49 66]
[50 65]
[51 64]
[54 61]
[55 60]
[88 106]
[89 105]
[90 104]
[107 122]
[108 121]
[109 120]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
