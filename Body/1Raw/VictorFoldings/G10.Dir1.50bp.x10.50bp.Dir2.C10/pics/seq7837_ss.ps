%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:01 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCUAAACCAAACCACUUUCACCGCUACACGACCGGGGGUAUACUACGGUCAAUGCUCUGAAxxxxxxxxxxCAUCAGGAGUAUCAAUCACCUGAGCUCACCAUAGUCUAAUAGAAAACAACCGAAACCAAACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[97.39140320 548.44622803]
[97.39140320 533.44622803]
[97.39140320 518.44622803]
[97.39140320 503.44622803]
[97.39140320 488.44622803]
[97.39140320 473.44622803]
[97.39140320 458.44622803]
[97.39140320 443.44622803]
[97.39140320 428.44622803]
[97.39140320 413.44622803]
[82.31289673 410.52218628]
[68.08454132 404.72497559]
[55.24833679 396.27346802]
[44.29362106 385.48770142]
[35.63842773 372.77673340]
[29.61353111 358.62313843]
[26.44979858 343.56466675]
[26.26935959 328.17388916]
[29.08087349 313.03628540]
[34.77914810 298.72808838]
[43.14906693 285.79437256]
[53.87370682 274.72808838]
[66.54634094 265.95159912]
[80.68586731 259.80020142]
[95.75506592 256.50961304]
[95.44300842 241.51286316]
[95.13095856 226.51611328]
[94.81890106 211.51936340]
[80.87924194 206.17004395]
[70.02020264 195.86340332]
[63.91796112 182.14744568]
[63.53086472 167.09959412]
[68.94902802 153.01211548]
[79.37586975 142.04289246]
[93.24507904 135.88490295]
[92.93302155 120.88815308]
[84.46913147 115.65404510]
[79.16832733 107.23175812]
[78.11019897 97.33662415]
[64.72391510 90.56851196]
[51.33762741 83.80039215]
[37.95134354 77.03227997]
[24.56505775 70.26416779]
[8.75839233 70.94233704]
[0.89146215 58.29478073]
[-12.49482250 51.52666473]
[-28.12437630 55.14558792]
[-40.60864258 45.06974030]
[-40.37075424 29.02845001]
[-27.59320641 19.32722282]
[-12.07783604 23.40801048]
[-5.72670794 38.14038086]
[7.65957689 44.90849304]
[22.50876427 43.74622345]
[31.33317184 56.87788010]
[44.71945572 63.64599609]
[58.10574341 70.41410828]
[71.49202728 77.18222809]
[84.87831116 83.95034027]
[93.01149750 79.08546448]
[102.43552399 78.08367920]
[109.06402588 64.62770844]
[115.69252014 51.17174530]
[105.83677673 35.94335556]
[108.56764984 16.43173790]
[124.56000519 2.41487694]
[124.87206268 -12.58187675]
[125.18412018 -27.57863045]
[125.49617767 -42.57538223]
[111.69783020 -49.01942062]
[101.71834564 -60.52288437]
[97.28672028 -75.09273529]
[99.17076874 -90.20466614]
[107.04405975 -103.24042511]
[119.54251099 -111.94150543]
[134.50067139 -114.80038452]
[149.32696533 -111.32173920]
[161.45263672 -102.10827637]
[168.77685547 -88.75627899]
[170.03063965 -73.57906342]
[164.99676514 -59.20617294]
[154.54739380 -48.12779617]
[140.49293518 -42.26332855]
[140.18087769 -27.26657486]
[139.86882019 -12.26982021]
[139.55676270 2.72693324]
[153.01272583 9.35543156]
[164.71234131 -0.03172995]
[176.41197205 -9.41889191]
[178.60694885 -22.17177200]
[188.59916687 -29.74636078]
[200.67166138 -28.49640846]
[212.56404114 -37.63814163]
[224.45642090 -46.77987671]
[226.25692749 -62.48126602]
[238.68443298 -72.24510956]
[254.36592102 -70.27869415]
[263.99783325 -57.74865341]
[261.86572266 -42.08884048]
[249.23454285 -32.58994675]
[233.59814453 -34.88749695]
[221.70576477 -25.74576187]
[209.81338501 -16.60402870]
[204.03329468 -0.06345902]
[185.79913330 2.28073192]
[174.09950256 11.66789341]
[162.39988708 21.05505562]
[161.03349304 42.27676010]
[147.22851562 56.33320236]
[129.14848328 57.80024338]
[122.51998901 71.25621033]
[115.89148712 84.71217346]
[121.52715302 104.77898407]
[107.92977905 120.57609558]
[108.24182892 135.57284546]
[122.35520172 141.14855957]
[133.22932434 151.67456055]
[139.22880554 165.52445984]
[139.46801758 180.57537842]
[133.94161987 194.53330994]
[123.52072144 205.28274536]
[109.81565094 211.20730591]
[110.12770844 226.20405579]
[110.43976593 241.20080566]
[110.75182343 256.19757080]
[125.21192932 258.65820312]
[138.96496582 263.74566650]
[151.53829956 271.28347778]
[162.50012207 281.01098633]
[171.47431946 292.59240723]
[178.15332031 305.62829590]
[182.30873108 319.66952515]
[183.79901123 334.23251343]
[182.57443237 348.81610107]
[178.67863464 362.91870117]
[172.24713135 376.05548096]
[163.50256348 387.77514648]
[152.74700928 397.67541504]
[140.35153198 405.41680908]
[126.74342346 410.73425293]
[112.39140320 413.44622803]
[112.39140320 428.44622803]
[112.39140320 443.44622803]
[112.39140320 458.44622803]
[112.39140320 473.44622803]
[112.39140320 488.44622803]
[112.39140320 503.44622803]
[112.39140320 518.44622803]
[112.39140320 533.44622803]
[112.39140320 548.44622803]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[25 125]
[26 124]
[27 123]
[28 122]
[35 115]
[36 114]
[39 59]
[40 58]
[41 57]
[42 56]
[43 55]
[45 53]
[46 52]
[61 112]
[62 111]
[63 110]
[66 86]
[67 85]
[68 84]
[69 83]
[87 107]
[88 106]
[89 105]
[92 103]
[93 102]
[94 101]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
