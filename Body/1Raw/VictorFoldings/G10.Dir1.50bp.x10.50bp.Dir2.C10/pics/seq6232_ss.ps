%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:43 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCACUCAGCCAUUUUACCUCACCCCCACUGAUGUUCGCCGACCGUUGACUAUUCUCUACAAAxxxxxxxxxxUCCUAGCAGCAGCAGGCAAAUCAGCCCAAUUAGGUCUCCACCCCUGACUCCCCUCAGCCAUCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[179.46717834 633.23498535]
[179.46717834 618.23498535]
[179.46717834 603.23498535]
[179.46717834 588.23498535]
[179.46717834 573.23498535]
[179.46717834 558.23498535]
[179.46717834 543.23498535]
[179.46717834 528.23498535]
[179.46717834 513.23498535]
[179.46717834 498.23498535]
[159.02763367 486.86209106]
[149.15852356 465.52932739]
[153.76831055 442.36407471]
[171.22077942 426.27954102]
[167.86151123 411.66052246]
[164.50225830 397.04153442]
[161.14300537 382.42251587]
[145.52215576 380.69400024]
[131.40864563 373.71902466]
[120.51028442 362.32119751]
[114.15276337 347.86047363]
[113.11846924 332.07101440]
[117.55023193 316.85311890]
[126.93191528 304.04455566]
[140.14845276 295.19869995]
[136.48974609 280.65176392]
[132.83103943 266.10479736]
[129.17233276 251.55784607]
[115.02210999 250.52819824]
[101.86510468 245.16232300]
[90.99784851 235.97467041]
[83.49566650 223.85693359]
[80.10628510 209.99159241]
[81.17533112 195.73654175]
[86.61112976 182.49205017]
[95.89240265 171.56327820]
[108.11821747 164.03160095]
[104.75895691 149.41259766]
[101.39970398 134.79357910]
[98.04044342 120.17457581]
[94.68118286 105.55557251]
[90.14929962 108.00864410]
[84.98571014 109.37293243]
[79.39631653 109.53733826]
[73.60382843 108.42569733]
[60.04193115 102.01672363]
[44.51436996 106.05087280]
[31.76602554 96.31130219]
[31.57633591 80.26937103]
[44.09081650 70.23107910]
[59.70942688 73.89694214]
[66.45090485 88.45482635]
[80.01280212 94.86380005]
[92.76605988 86.96731567]
[93.07403564 71.97048187]
[93.38201904 56.97364044]
[85.92968750 43.01751709]
[93.92667389 30.45178986]
[94.23464966 15.45495129]
[86.15310669 28.09174919]
[75.58691406 38.73860550]
[63.01194000 46.91601562]
[48.99452591 52.25569153]
[34.16597748 54.51714706]
[19.19413376 53.59853745]
[4.75327921 49.54123306]
[-8.50620842 42.52795792]
[-19.98715973 32.87458038]
[-29.17250443 21.01585007]
[-35.64856339 7.48585892]
[-39.12366867 -7.10604429]
[-39.44131470 -22.10268021]
[-36.58719635 -36.82864380]
[-30.68985176 -50.62071991]
[-22.01488113 -62.85774994]
[-10.95298386 -72.98861694]
[1.99764633 -80.55704498]
[16.25374985 -85.22219086]
[31.17326927 -86.77393341]
[46.08427429 -85.14239502]
[60.31521606 -80.40104675]
[73.22517395 -72.76344299]
[84.23271179 -62.57354355]
[92.84208679 -50.29027557]
[98.66556549 -36.46685028]
[101.44086456 -21.72582817]
[101.04335022 -6.73379803]
[109.20001221 -19.32223701]
[109.50063324 -35.71862793]
[123.97965240 -43.41862869]
[137.74229431 -34.50114059]
[136.63073730 -18.13970757]
[121.78845215 -11.16557217]
[113.63179016 1.42286742]
[109.23149109 15.76292896]
[108.92350769 30.75976753]
[116.39786530 43.64321518]
[108.37885284 57.28162003]
[108.07087708 72.27845764]
[107.76290131 87.27529144]
[109.30019379 102.19631195]
[112.65944672 116.81531525]
[116.01870728 131.43432617]
[119.37796783 146.05332947]
[122.73722839 160.67234802]
[138.53109741 162.53765869]
[152.71252441 169.67640686]
[163.58189392 181.21252441]
[169.84352112 195.74417114]
[170.76014709 211.51408386]
[166.23963928 226.62203979]
[156.84396362 239.25382996]
[143.71928406 247.89913940]
[147.37799072 262.44610596]
[151.03669739 276.99304199]
[154.69540405 291.54000854]
[169.00917053 292.68566895]
[182.24607849 298.19610596]
[193.11184692 307.51806641]
[200.54856873 319.72644043]
[203.83761597 333.61593628]
[202.66903687 347.82003784]
[197.17082214 360.94558716]
[187.89494324 371.70928955]
[175.76200867 379.06326294]
[179.12126160 393.68225098]
[182.48052979 408.30126953]
[185.83978271 422.92028809]
[193.40765381 423.49749756]
[200.70465088 425.54980469]
[207.44653320 428.99322510]
[213.37152100 433.68978882]
[218.25033569 439.45285034]
[221.89517212 446.05465698]
[224.16693115 453.23522949]
[224.98042297 460.71276855]
[224.30769348 468.19445801]
[222.17881775 475.38821411]
[218.68074036 482.01391602]
[213.95356750 487.81427002]
[208.18508911 492.56497192]
[201.60325623 496.08325195]
[194.46717834 498.23498535]
[194.46717834 513.23498535]
[194.46717834 528.23498535]
[194.46717834 543.23498535]
[194.46717834 558.23498535]
[194.46717834 573.23498535]
[194.46717834 588.23498535]
[194.46717834 603.23498535]
[194.46717834 618.23498535]
[194.46717834 633.23498535]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 152]
[2 151]
[3 150]
[4 149]
[5 148]
[6 147]
[7 146]
[8 145]
[9 144]
[10 143]
[14 128]
[15 127]
[16 126]
[17 125]
[25 116]
[26 115]
[27 114]
[28 113]
[37 105]
[38 104]
[39 103]
[40 102]
[41 101]
[45 53]
[46 52]
[54 100]
[55 99]
[56 98]
[58 96]
[59 95]
[87 94]
[88 93]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
