%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:27 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGAUCAAACUCAAACUACGCCCUGAUCGGCGCACUGCGAGCAGUAGCCCAAACAAUCUCAUAxxxxxxxxxxCCUCCAAAUAUCUCAUCAACAACCGACUAAUCACCACCCAACAAUGACUAAUCAAACUAACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[65.78749084 272.31649780]
[65.47543335 257.31976318]
[65.16337585 242.32299805]
[64.85131836 227.32624817]
[64.53926086 212.32948303]
[64.22720337 197.33273315]
[63.91514969 182.33598328]
[63.60309601 167.33923340]
[63.29103851 152.34246826]
[49.83507156 145.71397400]
[37.75508499 154.60632324]
[25.67509651 163.49867249]
[13.59510803 172.39102173]
[1.51511943 181.28337097]
[5.80801439 195.82115173]
[4.86670637 210.95025635]
[-1.19513643 224.84376526]
[-11.64551735 235.82398987]
[-25.22250175 242.56501770]
[-40.28660202 244.25280762]
[-55.01875687 240.68357849]
[-67.63998413 232.28831482]
[-76.62621307 220.08079529]
[-80.89231110 205.53514099]
[-79.92312622 190.40779114]
[-73.83568573 176.52546692]
[-63.36508942 165.56451416]
[-49.77570343 158.84854126]
[-34.70851898 157.18850708]
[-19.98296547 160.78488159]
[-7.37723017 169.20338440]
[4.70275831 160.31103516]
[16.78274727 151.41868591]
[28.86273384 142.52633667]
[40.94272232 133.63398743]
[38.76588440 118.79278564]
[24.64108276 113.74402618]
[10.51628017 108.69526672]
[-1.49671662 113.50585938]
[-13.18314362 108.96202850]
[-18.44231415 98.02363586]
[-32.45902634 92.68212128]
[-46.47574234 87.34060669]
[-60.49245453 81.99909973]
[-76.58866882 85.13659668]
[-87.14834595 72.58967590]
[-81.30859375 57.26552963]
[-65.07685089 54.92832947]
[-55.15093994 67.98238373]
[-41.13422775 73.32389832]
[-27.11751556 78.66541290]
[-13.10080242 84.00691986]
[4.01662779 80.26612854]
[15.56503677 94.57046509]
[29.68984032 99.61922455]
[43.81464386 104.66797638]
[45.10105515 91.46531677]
[49.40052032 79.12120056]
[56.38460159 68.30185699]
[65.58286285 59.56825256]
[76.41364288 53.34717560]
[88.22033691 49.91082764]
[100.31098938 49.36583328]
[111.99874878 51.65207291]
[122.64088440 56.55111694]
[131.67411804 63.70351028]
[143.17591858 54.07498550]
[154.67771912 44.44646072]
[166.17953491 34.81793213]
[157.88978577 22.29754066]
[151.05403137 8.92770386]
[145.75825500 -5.12343931]
[142.06901550 -19.67918015]
[140.03274536 -34.55646515]
[139.67503357 -49.56819534]
[141.00038147 -64.52558136]
[143.99211121 -79.24052429]
[148.61262512 -93.52796173]
[154.80380249 -107.20821381]
[162.48777771 -120.10924530]
[171.56791687 -132.06880188]
[181.93003845 -142.93649292]
[193.44381714 -152.57562256]
[205.96446228 -160.86499023]
[219.33450317 -167.70033264]
[233.38580322 -172.99571228]
[247.94165039 -176.68450928]
[262.81900024 -178.72033691]
[277.83074951 -179.07760620]
[292.78808594 -177.75180054]
[307.50292969 -174.75962830]
[321.79022217 -170.13868713]
[335.47030640 -163.94709778]
[348.37109375 -156.26274109]
[360.33038330 -147.18223572]
[371.19775391 -136.81979370]
[380.83654785 -125.30573273]
[389.12554932 -112.78484344]
[395.96051025 -99.41459656]
[401.25543213 -85.36313629]
[404.94381714 -70.80717468]
[406.97918701 -55.92976761]
[407.33599854 -40.91801834]
[406.00976562 -25.96070862]
[403.01715088 -11.24594593]
[398.39578247 3.04121590]
[392.20379639 16.72109985]
[384.51904297 29.62166977]
[375.43817139 41.58068466]
[365.07540894 52.44774628]
[353.56106567 62.08619308]
[341.03991699 70.37480927]
[327.66946411 77.20935822]
[313.61785889 82.50389099]
[299.06179810 86.19181824]
[284.18432617 88.22676086]
[269.17254639 88.58312225]
[254.21528625 87.25643158]
[239.50061035 84.26337433]
[225.21359253 79.64157867]
[211.53388977 73.44918060]
[198.63354492 65.76404572]
[186.67480469 56.68282700]
[175.80805969 46.31973648]
[164.30624390 55.94826126]
[152.80444336 65.57678986]
[141.30264282 75.20531464]
[145.60646057 82.75039673]
[148.52583313 91.04230499]
[149.93148804 99.82594299]
[149.74130249 108.82391357]
[147.92414856 117.74530029]
[144.50210571 126.29505920]
[139.55088806 134.18376160]
[133.19851685 141.13737488]
[125.62213135 146.90670776]
[117.04325867 151.27627563]
[107.72130585 154.07211304]
[97.94578552 155.16850281]
[88.02732849 154.49307251]
[78.28778839 152.03042603]
[78.59984589 167.02717590]
[78.91190338 182.02392578]
[79.22396088 197.02067566]
[79.53601837 212.01744080]
[79.84807587 227.01419067]
[80.16012573 242.01094055]
[80.47218323 257.00769043]
[80.78424072 272.00445557]
[83.37524414 291.21215820]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 149]
[2 148]
[3 147]
[4 146]
[5 145]
[6 144]
[7 143]
[8 142]
[9 141]
[10 35]
[11 34]
[12 33]
[13 32]
[14 31]
[36 56]
[37 55]
[38 54]
[41 52]
[42 51]
[43 50]
[44 49]
[66 127]
[67 126]
[68 125]
[69 124]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
