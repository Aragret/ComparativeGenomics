%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:50 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCAUCAUAGAAUUCUCACUGUGAUAUAUAAACUCAGACCCAAACAUUAAUCAGUUCUUCAAxxxxxxxxxxCUAGCAUUAGCAGGAAUACCUUUCCUCACAGGUUUCUACUCCAAAGACCACAUCAUCGAACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[148.19792175 266.11703491]
[148.19792175 251.11705017]
[148.19792175 236.11705017]
[148.19792175 221.11705017]
[148.19792175 206.11705017]
[148.19792175 191.11705017]
[148.19792175 176.11705017]
[148.19792175 161.11705017]
[148.19792175 146.11705017]
[148.19792175 131.11705017]
[106.12902069 147.73078918]
[73.72667694 128.65330505]
[61.64669037 137.54565430]
[49.56669998 146.43800354]
[37.48671341 155.33035278]
[25.40672493 164.22270203]
[13.32673645 173.11505127]
[1.24674821 182.00740051]
[1.47825766 197.52275085]
[-7.48164797 210.19160461]
[-22.18770218 215.14251709]
[-36.98512650 210.47177124]
[-46.18401337 197.97537231]
[-46.24719620 182.45841980]
[-37.15038300 169.88751221]
[-22.39148712 165.09642029]
[-7.64560127 169.92741394]
[4.43438673 161.03506470]
[16.51437569 152.14271545]
[28.59436417 143.25036621]
[40.67435074 134.35801697]
[52.75434113 125.46566772]
[64.83432770 116.57331085]
[57.24537659 91.98686218]
[66.85306549 65.11341858]
[92.94569397 47.72753525]
[127.07814789 49.42249298]
[118.06061554 37.43566132]
[107.07495117 27.22217941]
[94.46382141 19.10063744]
[81.85269928 10.97909546]
[69.24156952 2.85755348]
[62.56324768 2.14512634]
[57.97385788 -1.34325385]
[56.28455353 -5.87334967]
[44.02218628 -14.51246548]
[30.71345711 -7.03981686]
[15.47990894 -6.09020329]
[1.34617376 -11.85217285]
[-8.88148499 -23.18168068]
[-13.17235756 -37.82924652]
[-10.67448997 -52.88658142]
[-1.88383341 -65.36404419]
[11.45421982 -72.78422546]
[26.69138908 -73.67384338]
[40.80232620 -67.85626221]
[50.98528671 -56.48656845]
[55.21844482 -41.82221985]
[52.66130066 -26.77483368]
[64.92366791 -18.13571739]
[77.36311340 -9.75357437]
[89.97423553 -1.63203239]
[102.58536530 6.48950958]
[115.19649506 14.61105156]
[108.81696320 1.03528106]
[107.10020447 -13.86615372]
[110.22551727 -28.53695488]
[117.86650085 -41.44491196]
[129.22512817 -51.24192810]
[143.11512756 -56.90480804]
[158.08581543 -57.84212112]
[172.57366943 -53.95597839]
[185.06558228 -45.65224457]
[194.25691223 -33.79815674]
[199.18772888 -19.63175201]
[199.34304810 -4.63255548]
[194.70664978 9.63292217]
[185.76277161 21.67480469]
[173.44548035 30.23544312]
[159.04121399 34.42077255]
[144.05433655 33.79367447]
[130.04745483 28.41813087]
[139.06498718 40.40496445]
[154.02522278 39.31365204]
[161.20773315 26.14506912]
[160.26901245 9.77281189]
[174.12506104 1.00114954]
[188.52195740 8.85361767]
[188.64942932 25.25226974]
[174.37632751 33.32757950]
[167.19381714 46.49616241]
[178.28512573 56.59481049]
[190.72456360 48.21266556]
[203.16400146 39.83052444]
[215.60345459 31.44838142]
[228.04289246 23.06623840]
[232.51029968 7.65774202]
[247.39685059 1.67692828]
[261.28286743 9.71176529]
[263.51614380 25.59861374]
[252.38354492 37.15044403]
[236.42503357 35.50567627]
[223.98559570 43.88782120]
[211.54615784 52.26996613]
[199.10670471 60.65210724]
[186.66726685 69.03424835]
[187.83282471 76.44313049]
[202.65061951 74.11225128]
[204.98126221 88.93008423]
[190.16392517 91.26088715]
[191.32948303 98.66976929]
[205.74169922 102.82765198]
[220.15391541 106.98554230]
[229.92941284 95.30823517]
[243.61221313 88.62237549]
[258.83169556 88.08632660]
[272.95098877 93.79296112]
[283.52383423 104.75357056]
[288.71841431 119.06916046]
[287.63476562 134.25947571]
[280.46060181 147.69268799]
[268.43890381 157.04142761]
[253.65252686 160.68595886]
[238.66326904 157.99485779]
[226.06811523 149.43435669]
[218.04927063 136.48762512]
[215.99601746 121.39775848]
[201.58380127 117.23986816]
[187.17158508 113.08198547]
[181.17817688 117.59075165]
[191.83268738 128.14921570]
[202.48719788 138.70770264]
[216.02162170 145.17448425]
[220.52177429 159.48352051]
[213.12521362 172.53308105]
[198.53672791 176.02253723]
[186.03582764 167.73233032]
[183.57411194 152.93576050]
[176.38272095 139.77201843]
[169.19134521 126.60827637]
[163.19792175 131.11705017]
[163.19792175 146.11705017]
[163.19792175 161.11705017]
[163.19792175 176.11705017]
[163.19792175 191.11705017]
[163.19792175 206.11705017]
[163.19792175 221.11705017]
[163.19792175 236.11705017]
[163.19792175 251.11705017]
[163.19792175 266.11703491]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[12 33]
[13 32]
[14 31]
[15 30]
[16 29]
[17 28]
[18 27]
[37 83]
[38 82]
[39 64]
[40 63]
[41 62]
[42 61]
[45 60]
[46 59]
[84 91]
[85 90]
[92 106]
[93 105]
[94 104]
[95 103]
[96 102]
[111 129]
[112 128]
[113 127]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
