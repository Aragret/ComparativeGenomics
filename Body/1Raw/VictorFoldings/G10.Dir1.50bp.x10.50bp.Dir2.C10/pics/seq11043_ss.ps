%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:08 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCAGCCUAGCAUUAGCAGGAAUACCUUUCCUCACAGGUUUCUACUCCAAAGACCACAUCAUxxxxxxxxxxUCCGUCCCUAACAAACUAGGAGGCGUCCUUGCCCUAUUACUAUCCAUCCUCAUCCUAGCACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[209.12182617 317.53427124]
[208.18620300 302.56347656]
[207.25056458 287.59268188]
[206.31494141 272.62188721]
[205.37931824 257.65109253]
[204.44367981 242.68029785]
[203.50805664 227.70950317]
[198.60650635 213.53294373]
[190.09541321 201.18138123]
[181.58432007 188.82980347]
[173.07322693 176.47822571]
[164.56214905 164.12666321]
[155.42041016 152.23428345]
[145.67276001 140.83326721]
[135.92510986 129.43223572]
[126.17745209 118.03121948]
[108.64161682 132.00955200]
[85.28670502 131.23237610]
[73.58708191 140.61953735]
[68.14870453 156.09068298]
[51.98338699 158.85012817]
[41.72062683 146.05920410]
[47.91786575 130.87611389]
[64.19992065 128.91992188]
[75.89954376 119.53275299]
[69.55241394 105.94180298]
[54.84445572 108.88728333]
[40.13649368 111.83277130]
[25.42853165 114.77825165]
[10.72057056 117.72373199]
[0.66409755 130.22360229]
[-15.37754154 130.01060486]
[-25.09857368 117.24811554]
[-21.04185677 101.72643280]
[-6.31935453 95.35246277]
[7.77508783 103.01576996]
[22.48304939 100.07028961]
[37.19100952 97.12480927]
[51.89897156 94.17932129]
[66.60693359 91.23384094]
[73.51398468 84.80392456]
[81.22200012 81.23501587]
[74.03948975 68.06642914]
[67.13779449 61.98214340]
[66.84777832 54.54833221]
[59.94078064 41.23317719]
[45.42401886 45.21342850]
[30.40276718 46.08794403]
[15.53375626 43.82093048]
[1.46655679 38.51387405]
[-11.18480492 30.40103722]
[-21.86864090 19.83907890]
[-30.11966515 7.29139948]
[-35.57925034 -6.69219637]
[-38.01101685 -21.49959183]
[-37.31107712 -36.48315048]
[-33.51245117 -50.98804855]
[-26.78353310 -64.38087463]
[-17.42062187 -76.07732391]
[-5.83487368 -85.56764221]
[-12.74187183 -98.88279724]
[-27.53951263 -105.08032990]
[-31.78147507 -120.55241394]
[-22.21369171 -133.43019104]
[-6.17574501 -133.83493042]
[4.02942419 -121.45614624]
[0.57328355 -105.78979492]
[7.48028231 -92.47463989]
[21.91124344 -96.48001862]
[36.86547089 -97.39765930]
[51.68944931 -95.18500519]
[65.73486328 -89.93638611]
[78.38690948 -81.87893677]
[89.09127045 -71.36280060]
[97.37834167 -58.84590530]
[102.88385773 -44.87404251]
[105.36490631 -30.05703545]
[104.71063995 -15.04214287]
[100.94722748 -0.48578063]
[94.23682404 12.97517204]
[84.87055969 24.75124359]
[73.25593567 34.32617950]
[80.16293335 47.64133453]
[87.20806885 60.88392258]
[94.39057922 74.05250549]
[111.30867767 73.11484528]
[126.90486908 83.07333374]
[137.11834717 72.08766937]
[147.33183289 61.10200119]
[157.54530334 50.11633682]
[156.71961975 34.33363342]
[167.35775757 22.64579964]
[183.14831543 21.98702049]
[194.72302246 32.74813843]
[195.21481323 48.54477692]
[184.33192444 60.00506210]
[168.53097534 60.32981873]
[158.31748962 71.31548309]
[148.10400391 82.30114746]
[137.89053345 93.28681183]
[137.57847595 108.28356934]
[147.32612610 119.68458557]
[157.07377625 131.08560181]
[166.82142639 142.48663330]
[170.93489075 128.06167603]
[184.69395447 122.08769989]
[198.04185486 128.93121338]
[201.22235107 143.59014893]
[191.91076660 155.35002136]
[176.91371155 155.61557007]
[185.42480469 167.96714783]
[193.93589783 180.31871033]
[202.44699097 192.67028809]
[210.95808411 205.02186584]
[210.15705872 190.04325867]
[212.64657593 175.25129700]
[218.30642700 161.36007690]
[226.86337280 149.04022217]
[237.90431213 138.88652039]
[250.89622498 131.38916016]
[265.21188354 126.91009521]
[280.16015625 125.66555786]
[295.01940918 127.71562958]
[309.07223511 132.96133423]
[321.64025879 141.14944458]
[332.11669922 151.88464355]
[339.99575806 164.64866638]
[344.89709473 178.82530212]
[346.58407593 193.73013306]
[344.97521973 208.64360046]
[340.14825439 222.84573364]
[332.33618164 235.65086365]
[321.91616821 246.44082642]
[309.39123535 254.69468689]
[295.36608887 260.01397705]
[280.51779175 262.14190674]
[265.56317139 260.97570801]
[251.22425842 256.57174683]
[238.19323730 249.14256287]
[227.09922791 239.04687500]
[218.47885132 226.77388000]
[219.41447449 241.74467468]
[220.35009766 256.71545410]
[221.28573608 271.68624878]
[222.22135925 286.65704346]
[223.15698242 301.62783813]
[224.09262085 316.59863281]
[233.60795593 329.95492554]
[226.55351257 344.75921631]
[210.18629456 345.78210449]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 147]
[2 146]
[3 145]
[4 144]
[5 143]
[6 142]
[7 141]
[8 114]
[9 113]
[10 112]
[11 111]
[12 110]
[13 104]
[14 103]
[15 102]
[16 101]
[18 25]
[19 24]
[26 40]
[27 39]
[28 38]
[29 37]
[30 36]
[42 85]
[43 84]
[45 83]
[46 82]
[60 68]
[61 67]
[87 100]
[88 99]
[89 98]
[90 97]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
