%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:35 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCGAAUGAUUUCGACUCAUUAAAUUAUGAUAAUCAUAUUUACCAAAUGCCCCUCAUUUACAxxxxxxxxxxGACAAUUAUACCCUAGCCAACCCCUUAAACACCCCUCCCCACAUCAAGCCCGAAUGAUAUCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[180.10224915 120.27225494]
[174.90658569 106.19467926]
[170.67315674 91.79846954]
[156.02964783 95.04929352]
[141.38615417 98.30011749]
[126.74264526 101.55094910]
[112.09914398 104.80177307]
[99.32178497 112.65919495]
[89.81343079 124.26053619]
[87.04983521 139.83850098]
[72.99793243 144.77746582]
[63.48957443 156.37881470]
[53.98121643 167.98014832]
[44.47285461 179.58149719]
[42.34739304 195.84231567]
[27.10065842 201.88128662]
[14.41718483 191.48602295]
[17.34464264 175.35028076]
[32.87151337 170.07313538]
[42.37987518 158.47178650]
[51.88823318 146.87045288]
[61.39659119 135.26910400]
[63.48008347 120.52094269]
[78.21208954 114.75218201]
[87.72044373 103.15084076]
[82.37893677 89.13412476]
[67.56117249 86.80302429]
[52.74341583 84.47191620]
[37.92565918 82.14081573]
[23.02375603 80.42812347]
[8.06350803 79.33681488]
[-6.89674091 78.24550629]
[-21.85698891 77.15419006]
[-30.70912743 79.66248322]
[-37.11606979 75.88137817]
[-52.05037689 74.47907257]
[-66.98468781 73.07676697]
[-81.91899109 71.67446899]
[-98.25401306 76.21357727]
[-107.13771057 61.77348328]
[-95.72119904 49.23954773]
[-80.51668549 56.74015808]
[-65.58238220 58.14246368]
[-50.64807510 59.54476547]
[-35.71376801 60.94707108]
[-20.76567841 62.19394302]
[-5.80543041 63.28525543]
[9.15481853 64.37656403]
[24.11506653 65.46787262]
[26.34701157 63.67183304]
[29.44749832 62.68140411]
[33.10215759 62.84061432]
[36.87502289 64.36918640]
[40.25676346 67.32305908]
[55.07452011 69.65415955]
[69.89228058 71.98526001]
[84.71003723 74.31636810]
[108.84832001 90.15827179]
[123.49182129 86.90744781]
[138.13531494 83.65661621]
[152.77882385 80.40579224]
[167.42231750 77.15496826]
[165.16644287 62.31974030]
[163.91722107 47.36606598]
[163.68038940 32.36217117]
[164.45700073 17.37651634]
[166.24353027 2.47748113]
[169.03181458 -12.26695538]
[172.80912781 -26.78951836]
[177.55824280 -41.02394104]
[183.25750732 -54.90527725]
[189.88087463 -68.37018585]
[197.39816284 -81.35723114]
[205.77505493 -93.80715942]
[214.97332764 -105.66315460]
[224.95101929 -116.87113190]
[235.66259766 -127.37994385]
[247.05917358 -137.14163208]
[259.08877563 -146.11167908]
[271.69650269 -154.24914551]
[284.82482910 -161.51689148]
[298.41384888 -167.88175964]
[312.40155029 -173.31471252]
[326.72412109 -177.79096985]
[341.31622314 -181.29010010]
[356.11123657 -183.79612732]
[371.04168701 -185.29762268]
[386.03945923 -185.78773499]
[401.03607178 -185.26423645]
[415.96313477 -183.72950745]
[430.75256348 -181.19055176]
[445.33682251 -177.65895081]
[459.64938354 -173.15083313]
[473.62496948 -167.68675232]
[487.19979858 -161.29164124]
[500.31188965 -153.99468994]
[512.90148926 -145.82919312]
[524.91107178 -136.83239746]
[536.28588867 -127.04535675]
[546.97406006 -116.51272583]
[556.92675781 -105.28256989]
[566.09863281 -93.40612793]
[574.44781494 -80.93758392]
[581.93615723 -67.93383789]
[588.52954102 -54.45421600]
[594.19787598 -40.56023026]
[598.91528320 -26.31526947]
[602.66027832 -11.78433609]
[605.41577148 2.96627092]
[607.16912842 17.86924744]
[607.91235352 32.85659027]
[607.64215088 47.85992050]
[606.35961914 62.81077957]
[604.07073975 77.64094543]
[600.78588867 92.28276062]
[596.52001953 106.66940308]
[591.29266357 120.73523712]
[585.12768555 134.41609192]
[578.05310059 147.64952087]
[570.10131836 160.37516785]
[561.30859375 172.53495789]
[551.71496582 184.07339478]
[541.36431885 194.93785095]
[530.30377197 205.07875061]
[518.58386230 214.44981384]
[506.25805664 223.00828552]
[493.38259888 230.71511841]
[480.01620483 237.53514099]
[466.21990967 243.43725586]
[452.05661011 248.39450073]
[437.59097290 252.38427734]
[422.88900757 255.38836670]
[408.01776123 257.39309692]
[393.04510498 258.38928223]
[378.03933716 258.37237549]
[363.06896973 257.34246826]
[348.20227051 255.30427551]
[333.50708008 252.26707458]
[319.05047607 248.24473572]
[304.89837646 243.25561523]
[291.11538696 237.32244873]
[277.76440430 230.47233582]
[264.90631104 222.73652649]
[252.59982300 214.15032959]
[240.90106201 204.75289917]
[229.86340332 194.58711243]
[219.53721619 183.69937134]
[209.96961975 172.13935852]
[201.20426941 159.95980835]
[193.28115845 147.21627808]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 62]
[4 61]
[5 60]
[6 59]
[7 58]
[8 25]
[9 24]
[11 22]
[12 21]
[13 20]
[14 19]
[26 57]
[27 56]
[28 55]
[29 54]
[30 49]
[31 48]
[32 47]
[33 46]
[35 45]
[36 44]
[37 43]
[38 42]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
