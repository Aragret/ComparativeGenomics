%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:05 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCAUUUCACUAUCAUAUUCAUCGGCGUAAAUCUAACUUUCUUCCCACAACACUUUCUCGGCxxxxxxxxxxUACCCCGAUGCAUACACCACAUGAAACAUCCUAUCAUCUGUAGGCUCAUUCAUUUCUCUACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[98.26058197 273.59228516]
[98.26058197 258.59228516]
[98.26058197 243.59228516]
[98.26058197 228.59228516]
[98.26058197 213.59228516]
[98.26058197 198.59228516]
[98.26058197 183.59228516]
[98.26058197 168.59228516]
[98.26058197 153.59228516]
[98.26058197 138.59228516]
[75.63912964 125.34620667]
[68.43474579 102.67940521]
[77.30934143 83.25155640]
[68.04439545 71.45491028]
[58.77944565 59.65827179]
[49.51449585 47.86163330]
[40.24954605 36.06499481]
[24.82635689 40.49912262]
[8.91910362 38.69277573]
[-5.04991484 30.95065117]
[-14.96490097 18.47907257]
[-19.33701515 3.19810033]
[-17.52788925 -12.55403328]
[-9.84264565 -26.37871742]
[-19.35100365 -37.98005676]
[-28.85936165 -49.58139801]
[-43.59136581 -55.35016632]
[-45.67485809 -70.09832764]
[-55.18321609 -81.69966888]
[-64.69157410 -93.30101013]
[-74.19993591 -104.90235138]
[-83.70829010 -116.50369263]
[-93.21665192 -128.10504150]
[-107.94865417 -133.87379456]
[-110.03215027 -148.62196350]
[-119.54050446 -160.22329712]
[-129.04885864 -171.82464600]
[-141.88096619 -164.00907898]
[-155.67594910 -158.05551147]
[-170.16526794 -154.07986450]
[-185.06687927 -152.15950012]
[-200.09074402 -152.33181763]
[-214.94441223 -154.59344482]
[-229.33872986 -158.90036011]
[-242.99353027 -165.16873169]
[-255.64302063 -173.27655029]
[-267.04095459 -183.06599426]
[-276.96548462 -194.34651184]
[-285.22341919 -206.89849854]
[-291.65402222 -220.47766113]
[-296.13211060 -234.81965637]
[-298.57052612 -249.64532471]
[-298.92178345 -264.66607666]
[-297.17907715 -279.58950806]
[-293.37631226 -294.12515259]
[-287.58752441 -307.99008179]
[-279.92535400 -320.91436768]
[-270.53900146 -332.64648438]
[-259.61114502 -342.95803833]
[-247.35450745 -351.64831543]
[-234.00764465 -358.54812622]
[-219.83039856 -363.52322388]
[-205.09869385 -366.47671509]
[-190.09931946 -367.35116577]
[-175.12420654 -366.12948608]
[-160.46488953 -362.83547974]
[-146.40669250 -357.53329468]
[-133.22326660 -350.32614136]
[-121.17122650 -341.35424805]
[-110.48518372 -330.79229736]
[-101.37313080 -318.84591675]
[-94.01244354 -305.74755859]
[-88.54640198 -291.75225830]
[-85.08139038 -277.13241577]
[-83.68487549 -262.17260742]
[-84.38402557 -247.16403198]
[-87.16523743 -232.39883423]
[-91.97438049 -218.16442871]
[-98.71782684 -204.73789978]
[-107.26433563 -192.38056946]
[-117.44752502 -181.33300781]
[-107.93916321 -169.73165894]
[-98.43080902 -158.13032532]
[-84.37890625 -153.19136047]
[-81.61531067 -137.61338806]
[-72.10694885 -126.01205444]
[-62.59859467 -114.41071320]
[-53.09023666 -102.80937195]
[-43.58187485 -91.20803070]
[-34.07351685 -79.60668945]
[-20.02161598 -74.66772461]
[-17.25802040 -59.08975601]
[-7.74966288 -47.48841476]
[1.75869572 -35.88707352]
[15.05877686 -40.46656418]
[29.15295601 -40.22008133]
[42.34065247 -35.15689468]
[53.02365875 -25.86867905]
[59.89981842 -13.46045303]
[62.12173843 0.58086801]
[59.40116119 14.56463718]
[52.04618454 26.80004311]
[61.31113434 38.59668350]
[70.57608795 50.39332581]
[79.84103394 62.18996429]
[89.10597992 73.98660278]
[103.78012085 69.42309570]
[120.02606964 73.24839020]
[133.05863953 85.68671417]
[138.39373779 104.27922821]
[153.21148682 106.61032867]
[168.02925110 108.94143677]
[182.84700012 111.27253723]
[197.66476440 113.60364532]
[211.42822266 105.36066437]
[226.40312195 111.11668396]
[231.10202026 126.45617676]
[221.92028809 139.61199951]
[205.90139771 140.49212646]
[195.33366394 128.42140198]
[180.51589966 126.09029388]
[165.69813538 123.75919342]
[150.88038635 121.42808533]
[136.06262207 119.09698486]
[130.36212158 123.97080994]
[142.24833679 133.12055969]
[154.13455200 142.27030945]
[166.02076721 151.42005920]
[180.64450073 154.75866699]
[191.34083557 165.27476501]
[194.92742920 179.83966064]
[190.33723450 194.12007141]
[178.93589783 203.86735535]
[164.11547852 206.18153381]
[150.28530884 200.37411499]
[141.56004333 188.17288208]
[140.53524780 173.20967102]
[133.34385681 160.04594421]
[126.15248108 146.88220215]
[118.96109772 133.71846008]
[113.26058197 138.59228516]
[113.26058197 153.59228516]
[113.26058197 168.59228516]
[113.26058197 183.59228516]
[113.26058197 198.59228516]
[113.26058197 213.59228516]
[113.26058197 228.59228516]
[113.26058197 243.59228516]
[113.26058197 258.59228516]
[113.26058197 273.59228516]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[13 106]
[14 105]
[15 104]
[16 103]
[17 102]
[24 94]
[25 93]
[26 92]
[28 90]
[29 89]
[30 88]
[31 87]
[32 86]
[33 85]
[35 83]
[36 82]
[37 81]
[110 124]
[111 123]
[112 122]
[113 121]
[114 120]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
