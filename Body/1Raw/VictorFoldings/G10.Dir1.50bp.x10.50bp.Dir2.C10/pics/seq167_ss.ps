%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:36 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGAUUAAUUAAUGCUUGUAGGACAUAAUAAUAACAAUUGAAUGUCUGCACAGCCACUUUCCAxxxxxxxxxxAAUAAGCUAUCGGGCCCAUACCCCGAAAAUGUUGGUUAUACCCUUCCCGUACUAAUUAAUCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[136.33401489 306.16363525]
[136.33401489 291.16363525]
[136.33401489 276.16363525]
[136.33401489 261.16363525]
[136.33401489 246.16363525]
[136.33401489 231.16363525]
[136.33401489 216.16363525]
[136.33401489 201.16363525]
[136.33401489 186.16363525]
[136.33401489 171.16363525]
[131.72845459 156.88816833]
[122.96224213 144.71633911]
[114.19603729 132.54449463]
[103.74388885 135.30799866]
[92.94461823 134.79789734]
[82.79949951 131.06146240]
[74.24913788 124.44514465]
[68.08629608 115.56236267]
[64.88236237 105.23670959]
[64.93438721 94.42552185]
[68.23756409 84.13118744]
[56.53793716 74.74402618]
[44.83831406 65.35686493]
[31.11825943 59.29384995]
[16.30050087 56.96274567]
[1.48274362 54.63164139]
[-15.50507069 61.65972900]
[-28.74133682 50.17926025]
[-43.60438538 48.15692520]
[-58.46743011 46.13459015]
[-73.33047485 44.11225510]
[-88.19352722 42.08992004]
[-103.05657196 40.06758499]
[-113.81685638 47.25577545]
[-126.18981934 45.22381973]
[-133.59495544 35.60762024]
[-148.41270447 33.27651596]
[-163.23046875 30.94541359]
[-178.04823303 28.61430931]
[-193.14926147 35.00889969]
[-206.07284546 24.91370392]
[-203.52430725 8.71379662]
[-188.12536621 3.07425308]
[-175.71711731 13.79655170]
[-160.89936829 16.12765503]
[-146.08160400 18.45875931]
[-131.26385498 20.78986359]
[-115.28823853 13.59405136]
[-101.03424072 25.20454025]
[-86.17118835 27.22687340]
[-71.30814362 29.24920845]
[-56.44509506 31.27154350]
[-41.58205032 33.29387665]
[-26.71900368 35.31621170]
[-16.86427307 28.23160553]
[-4.42895508 29.83840942]
[3.81384754 39.81388474]
[18.63160515 42.14498520]
[33.44936371 44.47608948]
[22.01191330 34.77120972]
[13.06795025 22.72938538]
[7.08172035 8.97565651]
[4.36394215 -5.77607870]
[5.05568409 -20.76012039]
[9.12104034 -35.19871140]
[16.34899521 -48.34240341]
[26.36437798 -59.50896454]
[38.64733124 -68.11878967]
[52.56030273 -73.72497559]
[67.38111877 -76.03652191]
[82.34050751 -74.93346405]
[96.66197968 -70.47304535]
[109.60218048 -62.88678360]
[120.48942566 -52.56845474]
[128.75860596 -40.05364227]
[133.98051453 -25.99193382]
[135.88410950 -11.11321163]
[134.37055969 3.81023216]
[129.51843262 18.00378418]
[121.57959747 30.73071861]
[110.96611023 41.33043289]
[98.22888184 49.25274277]
[84.02904510 54.08643723]
[69.10365295 55.58061218]
[54.22547531 53.65723801]
[65.92510223 63.04439926]
[77.62472534 72.43156433]
[92.48064423 65.29940796]
[108.95633698 65.64223480]
[123.50271606 73.38619995]
[135.58270264 64.49385071]
[147.66268921 55.60150146]
[159.74267578 46.70915222]
[171.82266235 37.81680298]
[172.63546753 22.20035934]
[183.33393860 10.79523373]
[198.86657715 8.98657990]
[211.89933777 17.62838936]
[216.27857971 32.64026260]
[209.93652344 46.93405151]
[195.86772156 53.76066971]
[180.71501160 49.89679337]
[168.63502502 58.78914261]
[156.55503845 67.68148804]
[144.47505188 76.57384491]
[132.39506531 85.46619415]
[135.07456970 105.51786804]
[126.36787415 123.77828979]
[135.13407898 135.95013428]
[143.90028381 148.12196350]
[143.00213623 133.14888000]
[144.98707581 118.28079224]
[149.78167725 104.06771088]
[157.20858765 91.03540039]
[166.99305725 79.66596222]
[178.77314758 70.37997437]
[192.11308289 63.52094650]
[206.51937866 59.34260559]
[221.45912170 57.99952316]
[236.37966919 59.54138184]
[250.72906494 63.91114044]
[263.97650146 70.94715881]
[275.63192749 80.38915253]
[285.26416016 91.88784027]
[292.51690674 105.01786804]
[297.12188721 119.29352570]
[298.90869141 134.18672180]
[297.81130981 149.14651489]
[293.87023926 163.61953735]
[287.23135376 177.07037354]
[278.14019775 189.00146484]
[266.93307495 198.97143555]
[254.02456665 206.61148071]
[239.89218140 211.63899231]
[225.05871582 213.86798096]
[210.07289124 213.21600342]
[195.48907471 209.70715332]
[181.84672546 203.47125244]
[169.65052795 194.73896790]
[159.35163879 183.83332825]
[151.33401489 171.16363525]
[151.33401489 186.16363525]
[151.33401489 201.16363525]
[151.33401489 216.16363525]
[151.33401489 231.16363525]
[151.33401489 246.16363525]
[151.33401489 261.16363525]
[151.33401489 276.16363525]
[151.33401489 291.16363525]
[151.33401489 306.16363525]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[11 110]
[12 109]
[13 108]
[21 87]
[22 86]
[23 85]
[24 59]
[25 58]
[26 57]
[28 54]
[29 53]
[30 52]
[31 51]
[32 50]
[33 49]
[36 47]
[37 46]
[38 45]
[39 44]
[90 106]
[91 105]
[92 104]
[93 103]
[94 102]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
