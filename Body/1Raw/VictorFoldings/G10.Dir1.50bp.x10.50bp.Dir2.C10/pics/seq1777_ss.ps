%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:59 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGAAAGUGCACUUGGACGAACCAGAGUGUAGCUUAACACAAAGCACCCAACUUACACUUAGGxxxxxxxxxxACAAGAGUGCUACUCUCCUCGCUCCGGGCCCAUAACACUUGGGGGUAGCUAAAGUGAACUCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[91.87208557 256.00875854]
[91.87208557 241.00875854]
[91.87208557 226.00875854]
[91.87208557 211.00875854]
[91.87208557 196.00875854]
[91.87208557 181.00875854]
[91.87208557 166.00875854]
[91.87208557 151.00875854]
[91.87208557 136.00875854]
[91.87208557 121.00875854]
[85.22318268 114.07340240]
[82.64428711 105.75907135]
[67.66456604 106.53891754]
[52.68485641 107.31876373]
[37.70513916 108.09860992]
[23.20954514 111.95576477]
[9.82325935 118.72388458]
[-3.56302547 125.49199677]
[-16.94931030 132.26011658]
[-30.33559608 139.02822876]
[-43.65074921 145.93522644]
[-56.89333725 152.98036194]
[-70.13592529 160.02549744]
[-76.17918396 174.88681030]
[-91.60630798 179.28948975]
[-104.58290863 169.85618591]
[-105.15446472 153.82330322]
[-92.88251495 143.48992920]
[-77.18106079 146.78291321]
[-63.93847275 139.73777771]
[-50.69588470 132.69264221]
[-46.23908615 126.73591614]
[-37.10371017 125.64194489]
[-23.71742439 118.87382507]
[-10.33114052 112.10571289]
[3.05514455 105.33760071]
[16.44142914 98.56948090]
[15.35006332 83.60856628]
[14.25880814 68.64898682]
[0.03202923 63.89517212]
[-14.19474983 59.14135742]
[-28.42152977 54.38754272]
[-42.44877625 61.66846848]
[-57.49050140 56.81851578]
[-64.62271881 42.71507645]
[-59.61400604 27.72546768]
[-45.43594742 20.74275970]
[-30.50013161 25.90966988]
[-23.66771507 40.16076279]
[-9.44093513 44.91457748]
[4.78584385 49.66839218]
[19.01262283 54.42220688]
[27.14673042 59.68299484]
[33.26709366 66.15628815]
[37.23875427 73.28157043]
[39.06346130 80.49642181]
[38.87456512 87.26742554]
[36.92529678 93.11889648]
[51.90501022 92.33905029]
[66.88472748 91.55920410]
[81.86444092 90.77935791]
[92.07791901 79.79369354]
[91.76586151 64.79694366]
[83.74314117 51.16072083]
[91.21398926 38.27523804]
[90.90193939 23.27848434]
[90.58988190 8.28172970]
[76.31604004 3.12208724]
[64.87252808 -6.84839153]
[57.80698395 -20.28128052]
[56.07496262 -35.35989380]
[59.91071320 -50.04497147]
[68.79547119 -62.35047531]
[81.52765656 -70.61219025]
[96.38533783 -73.71278381]
[111.35914612 -71.23293304]
[124.42398071 -63.50800705]
[133.81294250 -51.58274460]
[138.25624084 -37.06994247]
[137.15296936 -21.93233299]
[130.65232849 -8.21715450]
[119.63348389 2.22072697]
[105.58663177 7.96967363]
[105.89868927 22.96642685]
[106.21074677 37.96318054]
[114.21114349 50.52673340]
[106.76261902 64.48488617]
[107.07466888 79.48163605]
[118.67601013 88.98999786]
[133.44206238 86.35113525]
[148.20812988 83.71226501]
[162.97418213 81.07340240]
[177.74023438 78.43453979]
[192.50628662 75.79567719]
[190.65518188 66.76067352]
[193.91102600 56.22867584]
[202.87725830 46.87488937]
[216.40144348 40.38672256]
[222.83631897 33.81068802]
[230.27516174 33.90754318]
[243.93139648 27.70213509]
[255.85026550 15.64490032]
[270.73577881 23.76019859]
[267.05834961 40.31051254]
[250.13681030 41.35837555]
[236.48056030 47.56378555]
[222.88961792 53.91091537]
[209.36541748 60.39907837]
[211.85054016 75.19178772]
[226.75244141 76.90447235]
[241.65434265 78.61716461]
[256.55624390 80.32985687]
[267.78475952 69.44615936]
[283.38580322 68.37786865]
[295.99307251 77.62940216]
[299.65377808 92.83246613]
[292.63946533 106.80863953]
[278.26205444 112.95880127]
[263.31015015 108.37902832]
[254.84355164 95.23175812]
[239.94165039 93.51906586]
[225.03974915 91.80638123]
[210.13784790 90.09368896]
[195.14515686 90.56172943]
[180.37910461 93.20059204]
[165.61303711 95.83946228]
[150.84698486 98.47832489]
[136.08093262 101.11718750]
[121.31488037 103.75605011]
[135.53845215 108.51945496]
[150.53448486 108.17452240]
[163.79718018 115.18172455]
[171.96321106 127.76408386]
[172.96174622 142.73081970]
[166.53955078 156.28645325]
[154.32524109 164.99339294]
[139.41629028 166.64361572]
[125.59350586 160.81864929]
[116.36222076 148.99563599]
[114.06346893 134.17250061]
[106.87208557 121.00875854]
[106.87208557 136.00875854]
[106.87208557 151.00875854]
[106.87208557 166.00875854]
[106.87208557 181.00875854]
[106.87208557 196.00875854]
[106.87208557 211.00875854]
[106.87208557 226.00875854]
[106.87208557 241.00875854]
[106.87208557 256.00875854]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[12 61]
[13 60]
[14 59]
[15 58]
[16 37]
[17 36]
[18 35]
[19 34]
[20 33]
[21 31]
[22 30]
[23 29]
[39 52]
[40 51]
[41 50]
[42 49]
[62 88]
[63 87]
[65 85]
[66 84]
[67 83]
[89 129]
[90 128]
[91 127]
[92 126]
[93 125]
[94 124]
[97 108]
[98 107]
[100 106]
[101 105]
[109 123]
[110 122]
[111 121]
[112 120]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
