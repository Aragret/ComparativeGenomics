%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:46 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCCAUCAUAGGAGGCUUCAUUCACUGAUUUCCCCUAUUCUCAGGCUACACCCUAGACCAAACxxxxxxxxxxAGACUACUUCUCCAUAAUAUUCAUCCCUGUAGCAUUGUUCGUUACAUGGUCCAUCAUAGAACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[114.71188354 331.80004883]
[114.71188354 316.80004883]
[114.71188354 301.80004883]
[114.71188354 286.80004883]
[114.71188354 271.80004883]
[114.71188354 256.80004883]
[114.71188354 241.80004883]
[114.71188354 226.80004883]
[114.71188354 211.80004883]
[114.71188354 196.80004883]
[112.86855316 181.91374207]
[109.20984650 167.36679077]
[105.55114746 152.81983948]
[101.89244080 138.27287292]
[81.18189240 133.38073730]
[66.27494049 118.19381714]
[51.93487549 122.59411621]
[37.59481430 126.99441528]
[23.25475311 131.39471436]
[8.91469288 135.79501343]
[1.57431221 141.33709717]
[-5.76514387 140.13517761]
[-20.19252777 144.24012756]
[-28.39446640 159.65815735]
[-44.87688065 164.31236267]
[-59.35062790 155.80273438]
[-73.69068909 160.20303345]
[-88.03075409 164.60333252]
[-96.78796387 178.04545593]
[-112.77061462 179.43634033]
[-123.71817780 167.70899963]
[-121.23262024 151.85964966]
[-107.22064972 144.04656982]
[-92.43105316 150.26327515]
[-78.09098816 145.86297607]
[-63.75093079 141.46267700]
[-59.34521866 129.31597900]
[-48.57628632 121.82874298]
[-35.26574326 121.93196106]
[-24.29747391 129.81274414]
[-9.87008858 125.70780182]
[4.51439238 121.45495605]
[18.85445404 117.05465698]
[33.19451523 112.65435028]
[47.53457642 108.25405121]
[61.87463760 103.85375214]
[63.93698502 87.04416656]
[73.04337311 72.76519012]
[87.41508484 63.80587387]
[104.24496460 61.91621017]
[108.79225159 47.62208176]
[104.41760254 29.76450348]
[117.77257538 18.42037582]
[122.02542114 4.03589439]
[126.27826691 -10.34858704]
[130.53111267 -24.73306847]
[134.78396606 -39.11754990]
[139.03680420 -53.50202942]
[125.25235748 -59.46410751]
[112.28708649 -67.04428101]
[100.33006287 -76.13201904]
[89.55564880 -86.59477997]
[80.12097931 -98.27999878]
[72.16362762 -111.01726532]
[65.79964447 -124.62083435]
[61.12183380 -138.89231873]
[58.19840622 -153.62361145]
[57.07199860 -168.59988403]
[57.75903702 -183.60272217]
[60.24950027 -198.41336060]
[64.50707245 -212.81581116]
[70.46966553 -226.60003662]
[78.05032349 -239.56501770]
[87.13850403 -251.52171326]
[97.60167694 -262.29571533]
[109.28724670 -271.72994995]
[122.02481079 -279.68682861]
[135.62861633 -286.05032349]
[149.90028381 -290.72760010]
[164.63168335 -293.65045166]
[179.60798645 -294.77630615]
[194.61080933 -294.08871460]
[209.42135620 -291.59768677]
[223.82363892 -287.33956909]
[237.60763550 -281.37646484]
[250.57234192 -273.79531860]
[262.52868652 -264.70669556]
[273.30230713 -254.24313354]
[282.73611450 -242.55720520]
[290.69250488 -229.81935120]
[297.05548096 -216.21530151]
[301.73223877 -201.94346619]
[304.65454102 -187.21195984]
[305.77984619 -172.23561096]
[305.09167480 -157.23281860]
[302.60009766 -142.42236328]
[298.34146118 -128.02023315]
[292.37783813 -114.23645782]
[284.79620361 -101.27203369]
[275.70712280 -89.31602478]
[265.24316406 -78.54279327]
[253.55688477 -69.10942841]
[240.81872559 -61.15350723]
[227.21443176 -54.79104996]
[212.94242859 -50.11483765]
[198.21080017 -47.19306564]
[183.23440552 -46.06833649]
[168.23164368 -46.75705719]
[153.42129517 -49.24918365]
[149.16844177 -34.86470032]
[144.91558838 -20.48022079]
[140.66275024 -6.09574032]
[136.40989685 8.28874111]
[132.15705872 22.67322159]
[137.66493225 33.48643112]
[134.19320679 45.53293991]
[123.08638000 52.16937256]
[118.53909302 66.46350098]
[126.08319092 71.92755890]
[132.08599854 79.05046082]
[136.19281006 87.41129303]
[138.16093445 96.51601410]
[137.87406921 105.82659912]
[135.34918213 114.79289246]
[130.73547363 122.88504791]
[124.30555725 129.62489319]
[116.43939209 134.61418152]
[120.09809875 149.16113281]
[123.75680542 163.70808411]
[127.41551208 178.25503540]
[132.88337708 164.28712463]
[143.78892517 153.98815918]
[158.04656982 149.32772827]
[172.92962646 151.19712830]
[185.59181213 159.23883057]
[193.61158752 171.91491699]
[195.45520020 186.80119324]
[190.77009583 201.05073547]
[180.45227051 211.93844604]
[166.47491455 217.38212585]
[151.51110840 216.34068298]
[138.42257690 209.01330566]
[129.71188354 196.80004883]
[129.71188354 211.80004883]
[129.71188354 226.80004883]
[129.71188354 241.80004883]
[129.71188354 256.80004883]
[129.71188354 271.80004883]
[129.71188354 286.80004883]
[129.71188354 301.80004883]
[129.71188354 316.80004883]
[129.71188354 331.80004883]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 152]
[2 151]
[3 150]
[4 149]
[5 148]
[6 147]
[7 146]
[8 145]
[9 144]
[10 143]
[11 130]
[12 129]
[13 128]
[14 127]
[16 46]
[17 45]
[18 44]
[19 43]
[20 42]
[22 41]
[23 40]
[26 36]
[27 35]
[28 34]
[50 118]
[51 117]
[53 114]
[54 113]
[55 112]
[56 111]
[57 110]
[58 109]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
