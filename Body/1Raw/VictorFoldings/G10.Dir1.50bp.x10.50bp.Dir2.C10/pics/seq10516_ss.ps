%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:33 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCUCCUCCUAUCCCUCAACCCCGACAUCAUUACCGGGUUUUCCUCUUGUAAAUAUAGUUUAAxxxxxxxxxxAACAAAUAGCCCUUCUAAACGCUAAUCCAAGCCUCACCCCACUACUAGGCCUCCUCCUAGCCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[92.50000000 321.31716919]
[92.50000000 306.31716919]
[92.50000000 291.31716919]
[92.50000000 276.31716919]
[92.50000000 261.31716919]
[92.50000000 246.31716919]
[92.50000000 231.31716919]
[92.50000000 216.31716919]
[92.50000000 201.31716919]
[92.50000000 186.31716919]
[85.27301025 185.38160706]
[78.15019989 183.84205627]
[71.18195343 181.70938110]
[64.41757202 178.99870300]
[57.90490723 175.72917175]
[51.69002533 171.92391968]
[45.81689453 167.60986328]
[40.32706070 162.81755066]
[35.25936127 157.58084106]
[30.64964294 151.93679810]
[26.53051567 145.92535400]
[22.93112183 139.58903503]
[19.87692070 132.97264099]
[17.38951874 126.12300873]
[15.48651314 119.08857727]
[14.18136501 111.91911316]
[-0.79887635 112.68877411]
[-15.77911758 113.45843506]
[-30.75935936 114.22809601]
[-45.73960114 114.99774933]
[-51.17234802 129.22467041]
[-61.92661285 140.00732422]
[-76.13916016 145.47755432]
[-91.34757233 144.68760681]
[-104.91690826 137.77436829]
[-114.49619293 125.93556213]
[-118.42575836 111.22235870]
[-116.02478027 96.18389893]
[-107.70925140 83.42568970]
[-94.91988373 75.15817261]
[-79.87250519 72.81373596]
[-65.17417145 76.79857635]
[-53.37146378 86.42228699]
[-46.50925827 100.01750946]
[-31.52901840 99.24784851]
[-16.54877663 98.47819519]
[-1.56853640 97.70853424]
[13.41170502 96.93887329]
[15.20918083 82.18370819]
[19.50224876 67.95291901]
[26.16455650 54.66534805]
[35.00001144 42.71208572]
[45.74857330 32.44494247]
[58.09387970 24.16609955]
[71.67258453 18.11922836]
[68.01387787 3.57227445]
[64.35517120 -10.97467995]
[60.69646454 -25.52163315]
[55.13452530 -39.45235062]
[47.76828766 -52.51904297]
[40.40204620 -65.58573914]
[25.39767265 -71.26449585]
[20.61978149 -86.57955933]
[29.73356628 -99.78253174]
[45.74771118 -100.74522400]
[56.37753296 -88.72913361]
[53.46874237 -72.95198059]
[60.83498383 -59.88528442]
[68.20122528 -46.81858826]
[69.51139832 -61.76126099]
[76.68815613 -74.93298340]
[88.53366852 -84.13536072]
[103.07090759 -87.83249664]
[117.87355804 -85.40734100]
[130.47103882 -77.26464081]
[138.76080322 -64.76345062]
[141.35926819 -49.99023056]
[137.83273315 -35.41066742]
[128.76979065 -23.45812607]
[115.68308258 -16.12751007]
[100.75679016 -14.64231491]
[86.48215485 -19.25042152]
[75.24341583 -29.18033981]
[78.90212250 -14.63338566]
[82.56082916 -0.08643144]
[86.21953583 14.46052265]
[124.56511688 16.91294670]
[158.07943726 35.70627594]
[169.06022644 25.48756790]
[180.04103088 15.26886082]
[191.02183533 5.05015326]
[187.50405884 -9.90045738]
[191.94822693 -24.60232353]
[203.15890503 -35.10071564]
[218.12046814 -38.57162094]
[232.80833435 -34.08138275]
[243.27153015 -22.83785248]
[246.69552612 -7.86548233]
[242.15927124 6.80823374]
[230.88299561 17.23614120]
[215.89996338 20.61318398]
[201.24053955 16.03095627]
[190.25975037 26.24966240]
[179.27894592 36.46836853]
[168.29814148 46.68707657]
[174.27423096 55.38786316]
[179.14793396 64.75077820]
[182.84693909 74.63687134]
[185.31632996 84.89939117]
[186.51945496 95.38603973]
[186.43844604 105.94116974]
[185.07453918 116.40811920]
[199.50192261 120.51306915]
[213.92930603 124.61801147]
[228.35668945 128.72296143]
[238.45101929 117.27449036]
[252.51632690 111.34746552]
[267.75994873 112.11867523]
[281.15524292 119.43501282]
[290.04257202 131.84381104]
[292.65734863 146.88128662]
[288.48040771 161.56175232]
[278.34106445 172.97036743]
[264.25250244 178.84196472]
[249.01205444 178.01072693]
[235.64567566 170.64169312]
[226.80728149 158.19799805]
[224.25173950 143.15034485]
[209.82435608 139.04539490]
[195.39697266 134.94044495]
[180.96958923 130.83551025]
[177.74256897 138.24914551]
[173.83850098 145.32968140]
[169.29139709 152.01544189]
[164.14083862 158.24822998]
[158.43170166 163.97373962]
[152.21369934 169.14212036]
[145.54098511 173.70835876]
[138.47166443 177.63269043]
[131.06730652 180.88093567]
[123.39237976 183.42481995]
[115.51374054 185.24217224]
[107.50000000 186.31716919]
[107.50000000 201.31716919]
[107.50000000 216.31716919]
[107.50000000 231.31716919]
[107.50000000 246.31716919]
[107.50000000 261.31716919]
[107.50000000 276.31716919]
[107.50000000 291.31716919]
[107.50000000 306.31716919]
[107.50000000 321.31716919]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 152]
[2 151]
[3 150]
[4 149]
[5 148]
[6 147]
[7 146]
[8 145]
[9 144]
[10 143]
[26 48]
[27 47]
[28 46]
[29 45]
[30 44]
[55 86]
[56 85]
[57 84]
[58 83]
[59 69]
[60 68]
[61 67]
[88 105]
[89 104]
[90 103]
[91 102]
[112 131]
[113 130]
[114 129]
[115 128]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
