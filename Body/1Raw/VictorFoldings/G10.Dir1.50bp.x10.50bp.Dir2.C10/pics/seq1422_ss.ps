%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:17 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGAACCUCAACAGUUAAAUCAACAAAACUGCUCGCCAGAACACUACGAGCCACAGCUUAAAAxxxxxxxxxxUUUAACACCCAUAGUAGGCCUAAAAGCAGCCACCAAUUAAGAAAGCGUUCAAGCUCAACACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[112.05184937 300.92004395]
[111.73979187 285.92330933]
[111.42774200 270.92654419]
[111.11568451 255.92979431]
[110.80362701 240.93304443]
[110.49156952 225.93629456]
[110.17951202 210.93952942]
[109.86745453 195.94277954]
[109.55540466 180.94602966]
[107.68778992 166.06274414]
[104.28481293 151.45385742]
[100.88183594 136.84497070]
[97.47885132 122.23606873]
[90.82127380 118.78256989]
[91.49710846 133.76733398]
[78.85778046 141.84492493]
[65.54277039 134.93763733]
[64.86726379 119.95285034]
[77.50611877 111.87557220]
[70.84854126 108.42207336]
[56.94598770 114.05403137]
[43.04343033 119.68598938]
[29.14087486 125.31794739]
[27.09689140 140.54022217]
[17.70290947 152.69129944]
[3.48586512 158.50259399]
[-11.72992992 156.41090393]
[-23.85150146 146.97888184]
[-29.61820984 132.74369812]
[-27.47883797 117.53453064]
[-18.00886536 105.44258118]
[-3.75566912 99.72052765]
[11.44671345 101.90756226]
[23.50891876 111.41539001]
[37.41147614 105.78343201]
[51.31402969 100.15147400]
[65.21658325 94.51951599]
[65.52864075 79.52276611]
[51.87240219 73.31735992]
[38.21615982 67.11195374]
[24.55991936 60.90654373]
[10.90367794 54.70113754]
[-1.46762311 58.49649811]
[-12.73589897 52.99695587]
[-17.06761551 41.65925217]
[-30.59180450 35.17108917]
[-46.89311981 36.95972824]
[-56.37328720 23.57845879]
[-49.27993011 8.79277992]
[-32.91007996 7.81293154]
[-24.10363960 21.64689827]
[-10.57945061 28.13506317]
[6.78969193 25.83010101]
[17.10908508 41.04489517]
[30.76532745 47.25030136]
[44.42156601 53.45570755]
[58.07780838 59.66111755]
[71.73404694 65.86652374]
[85.35153961 65.86666107]
[96.43824768 70.24249268]
[103.79224396 77.52162933]
[106.84274292 85.95623016]
[105.69434357 93.75925446]
[116.35597229 83.20796204]
[127.01759338 72.65666962]
[137.67922974 62.10538101]
[128.33262634 50.35428238]
[120.31135559 37.66150665]
[113.70946503 24.17587662]
[108.60435486 10.05549812]
[105.05587769 -4.53407192]
[103.10563660 -19.42177963]
[102.77650452 -34.43307114]
[104.07233429 -49.39194870]
[106.97793579 -64.12303162]
[111.45924377 -78.45359802]
[117.46370697 -92.21562958]
[124.92093658 -105.24778748]
[133.74349976 -117.39725494]
[143.82795715 -128.52160645]
[155.05606079 -138.49038696]
[167.29618835 -147.18675232]
[180.40481567 -154.50871277]
[194.22824097 -160.37043762]
[208.60441589 -164.70320129]
[223.36477661 -167.45620728]
[238.33627319 -168.59716797]
[253.34335327 -168.11270142]
[268.21008301 -166.00849915]
[282.76214600 -162.30923462]
[296.82894897 -157.05825806]
[310.24551392 -150.31716919]
[322.85461426 -142.16497803]
[334.50836182 -132.69726562]
[345.07012939 -122.02505493]
[354.41610718 -110.27345276]
[362.43667603 -97.58024597]
[369.03784180 -84.09426117]
[374.14218140 -69.97360992]
[377.68988037 -55.38384628]
[379.63931274 -40.49603271]
[379.96765137 -25.48472404]
[378.67102051 -10.52591419]
[375.76461792 4.20500898]
[371.28256226 18.53533554]
[365.27734375 32.29704666]
[357.81939697 45.32879639]
[348.99618530 57.47779465]
[338.91113281 68.60159302]
[327.68249512 78.56977844]
[315.44189453 87.26548004]
[302.33288574 94.58674622]
[288.50912476 100.44772339]
[274.13272095 104.77971649]
[259.37222290 107.53192139]
[244.40066528 108.67207336]
[229.39361572 108.18679810]
[214.52699280 106.08180237]
[199.97512817 102.38175201]
[185.90861511 97.13002777]
[172.49240112 90.38820648]
[159.88374329 82.23533630]
[148.23051453 72.76700592]
[137.56889343 83.31829834]
[126.90726471 93.86959076]
[116.24563599 104.42087555]
[112.08774567 118.83309174]
[115.49072266 133.44198608]
[118.89369965 148.05087280]
[122.29668427 162.65977478]
[128.74874878 149.11831665]
[141.02861023 140.50408936]
[155.95765686 139.04682922]
[169.67155457 145.12376404]
[178.62049866 157.16188049]
[180.48808289 172.04516602]
[174.79089355 185.92111206]
[163.00361633 195.19798279]
[148.17736816 197.47448730]
[134.14988708 192.16136169]
[124.55215454 180.63397217]
[124.86421204 195.63072205]
[125.17626953 210.62748718]
[125.48832703 225.62423706]
[125.80037689 240.62098694]
[126.11243439 255.61773682]
[126.42449188 270.61450195]
[126.73654938 285.61123657]
[127.04860687 300.60800171]
[129.63960266 319.81573486]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 149]
[2 148]
[3 147]
[4 146]
[5 145]
[6 144]
[7 143]
[8 142]
[9 141]
[10 130]
[11 129]
[12 128]
[13 127]
[20 37]
[21 36]
[22 35]
[23 34]
[38 58]
[39 57]
[40 56]
[41 55]
[42 54]
[45 52]
[46 51]
[63 126]
[64 125]
[65 124]
[66 123]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
