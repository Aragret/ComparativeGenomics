%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:15 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCUUCGACCCCGCCGGAGGAGGAGACCCCAUUCUAUACCAACACCUAUUCUGAUUUUUCGGxxxxxxxxxxCUACUCCACUCAAGCACUAUAGUUGUAGCAGGAAUCUUCUUACUCAUCCGCUUCCACCCCCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[85.25924683 470.24816895]
[85.25924683 455.24816895]
[85.25924683 440.24816895]
[85.25924683 425.24816895]
[85.25924683 410.24816895]
[85.25924683 395.24816895]
[85.25924683 380.24816895]
[85.25924683 365.24816895]
[85.25924683 350.24816895]
[85.25924683 335.24816895]
[71.68156433 332.03616333]
[59.16315842 325.85720825]
[48.34345627 317.02291870]
[39.77600861 305.98077393]
[33.90015030 293.29122925]
[31.01849174 279.59939575]
[31.28131676 265.60217285]
[34.67876816 252.01287842]
[41.04116058 239.52479553]
[50.04744339 228.77584839]
[61.24141693 220.31600952]
[74.05483246 214.57916260]
[87.83622742 211.86083984]
[88.46020508 196.87382507]
[89.08418274 181.88681030]
[89.70816040 166.89979553]
[82.50699615 153.86167908]
[90.81166077 140.39530945]
[91.43563843 125.40829468]
[92.05961609 110.42127991]
[92.05961609 95.42127991]
[91.43563843 80.43426514]
[90.81166077 65.44725037]
[90.18768311 50.46023178]
[78.83943939 39.78993988]
[78.42013550 24.58208656]
[88.66255951 13.82902813]
[88.03858185 -1.15798843]
[77.11582947 -9.10475636]
[72.84645844 -21.71429443]
[76.58365631 -34.28838348]
[86.74061584 -42.27792740]
[86.42856598 -57.27468109]
[86.11650848 -72.27143860]
[83.33840179 -76.84327698]
[82.70116425 -81.54926300]
[83.88742828 -85.53604889]
[86.28227997 -88.20665741]
[86.90625763 -103.19367218]
[87.53023529 -118.18069458]
[88.15421295 -133.16770935]
[73.33318329 -135.59555054]
[58.91287231 -139.79222107]
[45.10357285 -145.69650269]
[32.10666275 -153.22230530]
[20.11167526 -162.25987244]
[9.29353333 -172.67741394]
[-0.19000271 -184.32301331]
[-8.20063496 -197.02684021]
[-14.62154579 -210.60363770]
[-19.35909843 -224.85540771]
[-22.34420395 -239.57431030]
[-23.53333473 -254.54573059]
[-22.90914536 -269.55133057]
[-20.48074150 -284.37225342]
[-16.28353500 -298.79241943]
[-10.37873268 -312.60150146]
[-2.85244584 -325.59811401]
[6.18557072 -337.59277344]
[16.60351562 -348.41052246]
[28.24946785 -357.89361572]
[40.95359039 -365.90377808]
[54.53062057 -372.32418823]
[68.78256989 -377.06121826]
[83.50159454 -380.04577637]
[98.47306061 -381.23434448]
[113.47862244 -380.60958862]
[128.29946899 -378.18063354]
[142.71946716 -373.98287964]
[156.52833557 -368.07757568]
[169.52467346 -360.55078125]
[181.51898193 -351.51232910]
[192.33634949 -341.09396362]
[201.81901550 -329.44766235]
[209.82870483 -316.74325562]
[216.24859619 -303.16598511]
[220.98507690 -288.91384888]
[223.96908569 -274.19470215]
[225.15708923 -259.22320557]
[224.53178406 -244.21766663]
[222.10226440 -229.39689636]
[217.90399170 -214.97706604]
[211.99815369 -201.16842651]
[204.47088623 -188.17236328]
[195.43197632 -176.17839050]
[185.01322937 -165.36141968]
[173.36656189 -155.87918091]
[160.66184998 -147.86997986]
[147.08433533 -141.45059204]
[132.83203125 -136.71463013]
[118.11277771 -133.73118591]
[103.14122772 -132.54373169]
[102.51725006 -117.55671692]
[101.89327240 -102.56969452]
[101.26929474 -87.58267975]
[101.11325836 -72.58349609]
[101.42531586 -57.58673859]
[101.73737335 -42.58998489]
[114.35134888 -31.51092911]
[115.09552002 -14.40156651]
[103.02560425 -1.78196585]
[103.64958191 13.20505047]
[114.75040436 23.06949234]
[115.59670258 38.25957108]
[105.17469788 49.83625412]
[105.79867554 64.82327271]
[106.42265320 79.81028748]
[107.04663086 94.79730225]
[109.17400360 97.07946014]
[110.49414825 100.20545959]
[110.68590546 103.86868286]
[109.54944611 107.64577484]
[107.04663086 111.04525757]
[106.42265320 126.03227234]
[105.79867554 141.01928711]
[112.95521545 155.12937927]
[104.69517517 167.52377319]
[104.07119751 182.51078796]
[103.44721985 197.49780273]
[102.82324219 212.48481750]
[118.24711609 217.16851807]
[131.94131470 225.65130615]
[142.98977661 237.35925293]
[150.65509033 251.50294495]
[154.42768860 267.13064575]
[154.05973816 283.19235229]
[149.58142090 298.61041260]
[141.29853821 312.35165405]
[129.77159119 323.49685669]
[115.77791595 331.30200195]
[100.25924683 335.24816895]
[100.25924683 350.24816895]
[100.25924683 365.24816895]
[100.25924683 380.24816895]
[100.25924683 395.24816895]
[100.25924683 410.24816895]
[100.25924683 425.24816895]
[100.25924683 440.24816895]
[100.25924683 455.24816895]
[100.25924683 470.24816895]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[23 130]
[24 129]
[25 128]
[26 127]
[28 125]
[29 124]
[30 123]
[31 118]
[32 117]
[33 116]
[34 115]
[37 112]
[38 111]
[42 108]
[43 107]
[44 106]
[48 105]
[49 104]
[50 103]
[51 102]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
