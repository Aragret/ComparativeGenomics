%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:42 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGUAAAACUAAUCGUCCCAACAAUUAUAUUACUACCACUGACAUGACUUUCCAAAAAACACAxxxxxxxxxxAACAGCUAUCCAUUGGUCUUAGGCCCCAAAAAUUUUGGUGCAACUCCAAAUAAAAGUAAUCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[88.02082825 257.86468506]
[88.02082825 242.86466980]
[88.02082825 227.86466980]
[88.02082825 212.86466980]
[88.02082825 197.86466980]
[88.02082825 182.86466980]
[88.02082825 167.86466980]
[88.02082825 152.86466980]
[88.02082825 137.86466980]
[88.02082825 122.86467743]
[84.12364960 116.67501831]
[82.55743408 110.25878906]
[83.10980988 104.37377930]
[85.34568787 99.63528442]
[88.67089844 96.45631409]
[92.41039276 95.01206970]
[82.90203857 83.41072845]
[73.39367676 71.80938721]
[63.88531876 60.20804596]
[57.74832153 57.47953415]
[54.45167542 52.75053787]
[54.23487854 47.92057800]
[41.55669785 45.32874680]
[34.29758453 35.10503769]
[35.92362213 23.07743263]
[27.15741539 10.90559578]
[18.39120865 -1.26624131]
[9.62500095 -13.43807793]
[-3.33465099 -5.86231661]
[-16.95574951 0.44723302]
[-31.11493874 5.43342924]
[-45.68398285 9.05111504]
[-60.53094482 11.26752663]
[-75.52136230 12.06259346]
[-90.51947784 11.42911243]
[-105.38946533 9.37282276]
[-119.99665070 5.91234636]
[-134.20874023 1.07902181]
[-147.89704895 -5.08337784]
[-160.93759155 -12.51904392]
[-173.21226501 -21.16063499]
[-184.60990906 -30.92989349]
[-195.02731323 -41.73834229]
[-204.37011719 -53.48809433]
[-212.55371094 -66.07274628]
[-219.50399780 -79.37831879]
[-225.15802002 -93.28431702]
[-229.46458435 -107.66479492]
[-232.38467407 -122.38953400]
[-233.89184570 -137.32516479]
[-233.97245789 -152.33644104]
[-232.62577820 -167.28739929]
[-229.86399841 -182.04264832]
[-225.71212769 -196.46855164]
[-220.20777893 -210.43446350]
[-213.40078735 -223.81391907]
[-205.35281372 -236.48573303]
[-196.13673401 -248.33514404]
[-185.83601379 -259.25485229]
[-174.54394531 -269.14596558]
[-162.36279297 -277.91888428]
[-149.40286255 -285.49417114]
[-135.78152466 -291.80322266]
[-121.62216187 -296.78890991]
[-107.05298615 -300.40606689]
[-92.20594025 -302.62191772]
[-77.21549225 -303.41644287]
[-62.21740341 -302.78240967]
[-47.34749222 -300.72558594]
[-32.74043274 -297.26458740]
[-18.52851295 -292.43072510]
[-4.84043598 -286.26782227]
[8.19983101 -278.83169556]
[20.47418976 -270.18966675]
[31.87148285 -260.41998291]
[42.28848648 -249.61114502]
[51.63086700 -237.86105347]
[59.81401062 -225.27610779]
[66.76380920 -211.97029114]
[72.41732788 -198.06408691]
[76.72335815 -183.68344116]
[79.64291382 -168.95860291]
[81.14954376 -154.02290344]
[81.22960663 -139.01162720]
[79.88237762 -124.06072235]
[77.12006378 -109.30558014]
[72.96766663 -94.87982178]
[67.46280670 -80.91410828]
[60.65533447 -67.53490448]
[52.60689926 -54.86338425]
[43.39038467 -43.01430511]
[33.08927155 -32.09497452]
[21.79683876 -22.20428467]
[30.56304550 -10.03244877]
[39.32925415 2.13938832]
[48.09545898 14.31122494]
[64.44761658 20.60461998]
[66.22171021 38.90304947]
[75.48666382 50.69968796]
[84.99501801 62.30102921]
[94.50337982 73.90237427]
[104.01173401 85.50371552]
[117.73178864 91.56672668]
[132.71150208 90.78688049]
[146.09075928 82.34257507]
[159.20307922 89.40773010]
[174.18278503 88.62788391]
[189.16250610 87.84803772]
[204.14221191 87.06819153]
[219.12193298 86.28834534]
[234.62528992 79.42671204]
[245.51052856 92.42471313]
[236.03382874 106.48274994]
[219.90177917 101.26805878]
[204.92205811 102.04790497]
[189.94235229 102.82775116]
[174.96263123 103.60759735]
[159.98292542 104.38744354]
[147.67512512 112.77596283]
[133.49134827 105.76659393]
[118.51163483 106.54644012]
[132.03144836 113.04371643]
[145.55126953 119.54100037]
[159.07107544 126.03827667]
[174.07096863 126.09580231]
[188.10023499 131.40423584]
[199.38096619 141.29086304]
[206.48355103 154.50271606]
[208.50787354 169.36549377]
[205.19741821 183.99563599]
[196.97167969 196.53904724]
[184.87313843 205.40612793]
[170.43501282 209.47315979]
[155.48706055 208.22470093]
[141.92361450 201.81900024]
[131.46357727 191.06782532]
[125.43254852 177.33369446]
[124.59497833 162.35589600]
[117.40359497 149.19215393]
[110.21221161 136.02841187]
[103.02082825 122.86467743]
[103.02082825 137.86466980]
[103.02082825 152.86466980]
[103.02082825 167.86466980]
[103.02082825 182.86466980]
[103.02082825 197.86466980]
[103.02082825 212.86466980]
[103.02082825 227.86466980]
[103.02082825 242.86466980]
[103.02082825 257.86468506]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[16 102]
[17 101]
[18 100]
[19 99]
[22 98]
[25 96]
[26 95]
[27 94]
[28 93]
[103 121]
[104 120]
[106 118]
[107 117]
[108 116]
[109 115]
[110 114]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
