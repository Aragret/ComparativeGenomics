%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:56 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCAACAUACCCAUGGCCAACCUCCUACUCCUCAUUGUACCCAUUCUAAUCGCAAUGGCAUUxxxxxxxxxxCUAACCAACAAACUUAAAAUAAAAUCCCCACUAUGCACAUUUUAUUUCUCCAACAUACUCCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[17.70018578 222.68388367]
[7.40712881 215.11364746]
[-2.57559752 226.30941772]
[-12.55832386 237.50518799]
[-22.54104996 248.70094299]
[-32.52377701 259.89672852]
[-35.81278610 277.98434448]
[-52.63149261 282.89669800]
[-62.37914276 294.29769897]
[-65.46621704 309.81481934]
[-79.61782837 314.46035767]
[-89.36547852 325.86138916]
[-84.82283020 340.60479736]
[-88.99418640 355.45751953]
[-100.54850769 365.68011475]
[-115.79882812 368.01055908]
[-129.87884521 361.70526123]
[-138.29566956 348.77621460]
[-138.36351013 333.34899902]
[-130.06074524 320.34640503]
[-116.03673553 313.91751099]
[-100.76650238 316.11373901]
[-91.01885223 304.71270752]
[-88.62899017 290.01107788]
[-73.78016663 284.55004883]
[-64.03250885 273.14904785]
[-64.65312958 261.02789307]
[-56.56929016 251.44297791]
[-43.71954346 249.91398621]
[-33.73681641 238.71823120]
[-23.75408936 227.52246094]
[-13.77136326 216.32669067]
[-3.78863692 205.13092041]
[-20.24630737 185.82202148]
[-33.15746307 163.98188782]
[-42.14130783 140.25469971]
[-46.93287277 115.34024811]
[-47.39083862 89.97335815]
[-43.50169373 64.90219116]
[-35.38014984 40.86618423]
[-23.26573372 18.57425880]
[-35.34572220 9.68190861]
[-47.42571259 0.78955853]
[-59.50569916 -8.10279083]
[-71.58568573 -16.99514008]
[-83.66567993 -25.88749123]
[-96.88065338 -18.31884956]
[-112.03222656 -16.78602600]
[-126.49530792 -21.55459023]
[-137.76406860 -31.79836082]
[-143.88613892 -45.74254227]
[-143.80082703 -60.97121811]
[-137.52291870 -74.84593201]
[-126.14008331 -84.96280670]
[-111.62448883 -89.56902313]
[-96.49103546 -87.86653900]
[-83.36168671 -80.15031433]
[-74.51118469 -67.75723267]
[-71.47293091 -52.83446503]
[-74.77332306 -37.96747971]
[-62.69333649 -29.07512856]
[-50.61334991 -20.18277931]
[-38.53336334 -11.29043007]
[-26.45337296 -2.39808011]
[-14.37338543 6.49426937]
[-7.19352722 -1.65697479]
[0.56586474 -9.25861740]
[8.86284065 -16.26956177]
[17.65254211 -22.65190315]
[26.88745117 -28.37113380]
[36.51763916 -33.39633560]
[46.49103546 -37.70034027]
[56.75372696 -41.25987625]
[67.25022888 -44.05570221]
[77.92378998 -46.07270050]
[88.71669769 -47.29996490]
[99.57061768 -47.73086548]
[110.42684937 -47.36306763]
[121.22671509 -46.19856262]
[131.91181946 -44.24364471]
[142.42439270 -41.50888062]
[152.70759583 -38.00906372]
[162.70585632 -33.76310730]
[172.36508179 -28.79397011]
[181.63308716 -23.12851906]
[190.45974731 -16.79738045]
[198.79733276 -9.83478546]
[206.60078430 -2.27837682]
[213.82789612 5.83099318]
[220.43962097 14.44948101]
[226.40019226 23.53049278]
[231.67738342 33.02492905]
[236.24267578 42.88146591]
[240.07138062 53.04680634]
[243.14279175 63.46599579]
[245.44032288 74.08270264]
[246.95153809 84.83953857]
[261.93124390 84.05969238]
[276.91094971 83.27984619]
[291.89068604 82.50000000]
[306.87039185 81.72015381]
[321.85009766 80.94030762]
[336.82983398 80.16046143]
[351.80953979 79.38062286]
[366.78924561 78.60077667]
[372.21231079 64.37017059]
[382.95925903 53.58020401]
[397.16809082 48.10031128]
[412.37701416 48.87990952]
[425.95104980 55.78393555]
[435.53839111 67.61621857]
[439.47796631 82.32675171]
[437.08721924 97.36683655]
[428.78036499 110.13069153]
[415.99661255 118.40690613]
[400.95083618 120.76157379]
[386.24978638 116.78672791]
[374.44055176 107.17104340]
[367.56909180 93.58049011]
[352.58938599 94.36033630]
[337.60964966 95.14017487]
[322.62994385 95.92002106]
[307.65023804 96.69986725]
[292.67053223 97.47971344]
[277.69079590 98.25955963]
[262.71109009 99.03940582]
[247.73138428 99.81925201]
[247.19445801 112.58510590]
[245.55647278 125.25681305]
[242.82966614 137.73959351]
[239.03445435 149.94007874]
[234.19921875 161.76698303]
[228.36013794 173.13186646]
[221.56086731 183.94967651]
[213.85227966 194.13952637]
[205.29203796 203.62518311]
[195.94418335 212.33569336]
[185.87863159 220.20588684]
[175.17066956 227.17689514]
[163.90042114 233.19657898]
[152.15216064 238.21990967]
[140.01379395 242.20932007]
[127.57611084 245.13493347]
[114.93215179 246.97491455]
[102.17649078 247.71545410]
[89.40454102 247.35104370]
[76.71186066 245.88438416]
[64.19337463 243.32647705]
[51.94274139 239.69642639]
[40.05158997 235.02140808]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 33]
[3 32]
[4 31]
[5 30]
[6 29]
[8 26]
[9 25]
[11 23]
[12 22]
[41 65]
[42 64]
[43 63]
[44 62]
[45 61]
[46 60]
[97 127]
[98 126]
[99 125]
[100 124]
[101 123]
[102 122]
[103 121]
[104 120]
[105 119]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
