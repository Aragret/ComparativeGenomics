%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:49 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGACCCCAUACCCCGAACCAACCAAACCCCAAAGACACCCCCCACAGUUUAUGUAGCUUACCxxxxxxxxxxCCAUAUCUAACAACGUAAAAAUAAAAUGACAGUUUGAACAUACAAAACCCACCCCAUUCCCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[90.67594910 113.45577240]
[77.43335724 120.50090790]
[64.19077301 127.54604340]
[50.94818878 134.59117126]
[37.70560455 141.63630676]
[24.46301842 148.68144226]
[13.26725197 158.66416931]
[4.75616169 171.01574707]
[-3.75492859 183.36732483]
[-12.26601887 195.71888733]
[-6.97726727 210.30685425]
[-11.30550861 225.20806885]
[-23.58644676 234.69268799]
[-39.09780884 235.11370850]
[-51.87516022 226.30923462]
[-57.00534821 211.66474915]
[-52.51571274 196.81137085]
[-40.13261032 187.46052551]
[-24.61759186 187.20779419]
[-16.10650063 174.85623169]
[-7.59541082 162.50465393]
[0.91567916 150.15307617]
[-12.76480484 156.30485535]
[-27.53315163 158.93087769]
[-42.49574661 157.87222290]
[-56.74722672 153.19297791]
[-69.42524719 145.17626953]
[-79.76268768 134.30717468]
[-87.13404083 121.24335480]
[-91.09326935 106.77530670]
[-91.40081787 91.77845764]
[-88.03806305 77.16025543]
[-81.20848846 63.80522156]
[-71.32534790 52.52145386]
[-58.98664474 43.99171448]
[-44.93898392 38.73213196]
[-30.03236771 37.06095123]
[-15.16877842 39.07929611]
[-1.24759018 44.66503906]
[10.88884449 53.48019028]
[20.50616837 64.99136353]
[27.02244568 78.50202942]
[30.04339027 93.19467926]
[29.38620758 108.18027496]
[25.09066010 122.55206299]
[17.41788292 135.43885803]
[30.66046906 128.39372253]
[43.90305328 121.34859467]
[57.14564133 114.30345917]
[70.38822174 107.25832367]
[83.63081360 100.21318817]
[85.96191406 85.39543152]
[75.52210236 74.62461853]
[65.08229065 63.85381317]
[49.12818146 62.16679764]
[40.62174225 48.56459427]
[46.08837891 33.48163986]
[61.33456039 28.48829460]
[74.66471863 37.41501999]
[75.85309601 53.41399765]
[86.29290771 64.18480682]
[96.73271942 74.95561981]
[92.73472595 60.49822998]
[88.73673248 46.04084396]
[84.73873138 31.58345795]
[77.54006195 18.42370224]
[72.00080109 4.48395443]
[68.20372009 -10.02749538]
[66.20555878 -24.89381218]
[66.03617096 -39.89285660]
[67.69809723 -54.80050659]
[71.16648865 -69.39400482]
[76.38953400 -83.45529175]
[83.28917694 -96.77426147]
[91.76232910 -109.15189362]
[101.68237305 -120.40322876]
[112.90109253 -130.36015320]
[125.25083923 -138.87390137]
[138.54708862 -145.81723022]
[152.59115601 -151.08641052]
[167.17318726 -154.60269165]
[182.07530212 -156.31353760]
[197.07481384 -156.19338989]
[211.94761658 -154.24404907]
[226.47145081 -150.49461365]
[240.42930603 -145.00114441]
[253.61262512 -137.84571838]
[265.82440186 -129.13523865]
[276.88217163 -118.99987793]
[286.62072754 -107.59107208]
[294.89450073 -95.07929993]
[301.57989502 -81.65151215]
[306.57702637 -67.50836182]
[309.81121826 -52.86117554]
[311.23410034 -37.92881775]
[310.82446289 -22.93441200]
[308.58843994 -8.10201168]
[304.55938721 6.34675121]
[298.79751587 20.19597816]
[291.38897705 33.23872757]
[282.44442749 45.28010941]
[272.09750366 56.14020157]
[260.50286865 65.65672302]
[247.83372498 73.68747711]
[234.27940369 80.11245728]
[220.04243469 84.83567047]
[205.33555603 87.78653717]
[190.37852478 88.92095947]
[175.39480591 88.22199249]
[160.59686279 85.69738770]
[146.02656555 89.26197815]
[131.45626831 92.82656097]
[116.88595581 96.39114380]
[131.38156128 100.24829865]
[145.87715149 104.10546112]
[160.37274170 107.96261597]
[173.91853333 99.82091522]
[189.23348999 103.72319031]
[197.23152161 117.35430145]
[193.16754150 132.62713623]
[179.45263672 140.48060608]
[164.22361755 136.25538635]
[156.51559448 122.45821381]
[142.01998901 118.60105896]
[127.52439880 114.74389648]
[113.02880096 110.88674164]
[123.90065765 121.22127533]
[138.07261658 126.13611603]
[150.71705627 134.20568848]
[161.14356995 144.98937988]
[168.78283691 157.89834595]
[173.21772766 172.22775269]
[174.20608521 187.19515991]
[171.69395447 201.98330688]
[165.81848145 215.78471375]
[156.90051270 227.84579468]
[145.42697144 237.50798035]
[132.02435303 244.24368286]
[117.42446899 247.68513489]
[102.42452240 247.64439392]
[87.84355164 244.12370300]
[74.47771454 237.31530762]
[63.05681610 227.59094238]
[54.20447922 215.48161316]
[48.40406036 201.64848328]
[45.97227859 186.84692383]
[47.04191589 171.88510132]
[51.55456543 157.58000183]
[59.26382828 144.71270752]
[69.74875641 133.98580933]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 51]
[2 50]
[3 49]
[4 48]
[5 47]
[6 46]
[7 22]
[8 21]
[9 20]
[10 19]
[52 62]
[53 61]
[54 60]
[113 126]
[114 125]
[115 124]
[116 123]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
