%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:52 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGGGCCUACUUCACAAAGCGCCUUCCCCCGUAAAUGAUAUCAUCUCAACUUAGUAUUAUACCxxxxxxxxxxAUUCCGAUAAAAUCACCUUCCACCCUUACUACACAAUCAAAGACGCCCUCGGCUUACUUCCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[87.82419586 450.53622437]
[74.71366882 439.78680420]
[81.41365814 424.21289062]
[82.03763580 409.22586060]
[82.66161346 394.23886108]
[83.28559113 379.25183105]
[83.90956879 364.26483154]
[84.53354645 349.27780151]
[85.15752411 334.29080200]
[85.78150177 319.30377197]
[86.40547943 304.31677246]
[87.02945709 289.32974243]
[72.10173035 285.58688354]
[58.26656342 278.83355713]
[46.12389374 269.35995483]
[36.20081329 257.57440186]
[28.92866898 243.98556519]
[24.62432671 229.18060303]
[23.47635651 213.79975891]
[25.53678322 198.50869751]
[30.71872520 183.96965027]
[38.80005264 170.81282043]
[49.43291855 159.60896301]
[62.15872574 150.84468079]
[76.42790222 144.90133667]
[91.62363434 142.03833008]
[91.93569183 127.04158020]
[92.24774170 112.04483032]
[85.67915344 99.70201111]
[92.75550079 87.64311218]
[93.06755829 72.64636230]
[93.37961578 57.64960480]
[83.78179932 69.17705536]
[69.75428772 74.49013519]
[54.92805099 72.21357727]
[43.14081955 62.93666840]
[37.44367599 49.06069565]
[39.31131744 34.17741776]
[48.26030350 22.13932800]
[61.97422028 16.06244659]
[76.90325928 17.51975632]
[89.18309021 26.13403702]
[95.63508606 39.67540359]
[99.03806305 25.06651115]
[102.44104767 10.45761967]
[105.84402466 -4.15127277]
[91.58349609 -8.83475971]
[77.79270935 -14.76027679]
[64.57958984 -21.88144875]
[52.04755020 -30.14253998]
[40.29467773 -39.47889709]
[29.41295052 -49.81745148]
[19.48753738 -61.07728195]
[10.59612083 -73.17027283]
[2.80828714 -86.00176239]
[-3.81501102 -99.47134399]
[-9.22193718 -113.47358704]
[-13.37017345 -127.89890289]
[-16.22725296 -142.63439941]
[-17.77081680 -157.56472778]
[-17.98878288 -172.57307434]
[-16.87944412 -187.54193115]
[-14.45148563 -202.35418701]
[-10.72390842 -216.89387512]
[-5.72588539 -231.04722595]
[0.50346506 -244.70347595]
[7.91538954 -257.75570679]
[16.45187759 -270.10180664]
[26.04612160 -281.64511108]
[36.62302780 -292.29531860]
[48.09981918 -301.96902466]
[60.38666916 -310.59057617]
[73.38742065 -318.09243774]
[87.00032043 -324.41595459]
[101.11882019 -329.51159668]
[115.63243103 -333.33947754]
[130.42755127 -335.86965942]
[145.38841248 -337.08233643]
[160.39788818 -336.96798706]
[175.33853149 -335.52755737]
[190.09339905 -332.77230835]
[204.54701233 -328.72378540]
[218.58625793 -323.41366577]
[232.10125732 -316.88354492]
[244.98622131 -309.18447876]
[257.14031982 -300.37680054]
[268.46841431 -290.52935791]
[278.88186646 -279.71929932]
[288.29916382 -268.03115845]
[296.64657593 -255.55647278]
[303.85882568 -242.39283752]
[309.87942505 -228.64329529]
[314.66128540 -214.41545105]
[318.16693115 -199.82066345]
[320.36898804 -184.97314453]
[321.25015259 -169.98912048]
[320.80361938 -154.98583984]
[319.03277588 -140.08074951]
[315.95156860 -125.39048767]
[311.58407593 -111.03003693]
[305.96447754 -97.11177826]
[299.13677979 -83.74465942]
[291.15438843 -71.03327942]
[282.07977295 -59.07714081]
[271.98400879 -47.96981049]
[260.94604492 -37.79821777]
[249.05232239 -28.64197350]
[236.39590454 -20.57273865]
[223.07583618 -13.65366745]
[209.19638062 -7.93891239]
[194.86616516 -3.47319913]
[180.19735718 -0.29147905]
[165.30473328 1.58134639]
[150.30487061 2.13061929]
[135.31515503 1.35204101]
[120.45291138 -0.74829501]
[117.04993439 13.86059761]
[113.64695740 28.46949005]
[110.24398041 43.07838440]
[108.37636566 57.96166229]
[108.06430817 72.95841980]
[107.75225830 87.95516968]
[114.32084656 100.29798889]
[107.24449921 112.35688782]
[106.93244171 127.35363770]
[106.62038422 142.35038757]
[120.90121460 145.57763672]
[134.26773071 151.53981018]
[146.20199585 160.00378418]
[156.24200439 170.63946533]
[163.99955750 183.03279114]
[169.17524719 196.70175171]
[171.57003784 211.11521912]
[171.09292603 225.71348572]
[167.76438904 239.93011475]
[161.71549988 253.21383667]
[153.18275452 265.04992676]
[142.49890137 274.98022461]
[130.07987976 282.62078857]
[116.40866089 287.67672729]
[102.01647186 289.95370483]
[101.39249420 304.94073486]
[100.76851654 319.92776489]
[100.14453888 334.91476440]
[99.52056122 349.90179443]
[98.89658356 364.88879395]
[98.27260590 379.87582397]
[97.64862823 394.86282349]
[97.02465057 409.84985352]
[96.40067291 424.83685303]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 150]
[4 149]
[5 148]
[6 147]
[7 146]
[8 145]
[9 144]
[10 143]
[11 142]
[12 141]
[26 126]
[27 125]
[28 124]
[30 122]
[31 121]
[32 120]
[43 119]
[44 118]
[45 117]
[46 116]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
