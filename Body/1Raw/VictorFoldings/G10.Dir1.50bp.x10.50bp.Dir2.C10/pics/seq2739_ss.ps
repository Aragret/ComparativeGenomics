%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:47 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCUAGCAUCACCAGUAUUAGAGGCACCGCCUGCCCAGUGACACAUGUUUAACGGCCGCGGUxxxxxxxxxxCGUCCUAAUCACAGCAGUCCUACUUCUCCUAUCUCUCCCAGUCCUAGCUGCUGGCAUCACCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[166.42489624 479.34259033]
[166.11283875 464.34585571]
[165.80078125 449.34909058]
[165.48872375 434.35232544]
[165.17666626 419.35559082]
[164.86460876 404.35882568]
[164.55255127 389.36209106]
[164.24050903 374.36532593]
[163.92845154 359.36856079]
[161.75160217 344.52737427]
[157.74386597 330.07266235]
[153.73612976 315.61798096]
[149.72839355 301.16329956]
[145.72064209 286.70861816]
[130.40905762 287.91958618]
[115.14904785 286.13470459]
[100.52139282 281.42004395]
[87.08315277 273.95330811]
[75.34645844 264.01693726]
[65.75899506 251.98762512]
[58.68692017 238.32189941]
[54.40088654 223.53884888]
[53.06568527 208.20036316]
[54.73390961 192.88986206]
[59.34387207 178.19001770]
[66.72191620 164.66062927]
[76.58891296 152.81727600]
[88.57086945 143.11167908]
[102.21305084 135.91448975]
[97.90547180 121.54631042]
[93.59788513 107.17812347]
[87.82160950 93.33490753]
[80.63910675 80.16632080]
[70.54045105 69.07500458]
[58.10101318 60.69286346]
[45.66157532 52.31072235]
[33.22213364 43.92857742]
[20.78269386 35.54643631]
[7.95356274 37.23973465]
[-2.24785733 29.94933128]
[-4.64134216 18.05065155]
[-16.90370941 9.41153622]
[-29.16607857 0.77241987]
[-41.26311493 9.85630131]
[-55.57580948 14.75547791]
[-70.70195007 14.98997879]
[-85.15963745 10.53682995]
[-97.53244781 1.83230472]
[-106.60822296 -10.27081585]
[-111.49780273 -24.58679008]
[-111.72216797 -39.71308899]
[-107.25933838 -54.16778564]
[-98.54652405 -66.53475952]
[-86.43732452 -75.60242462]
[-72.11807251 -80.48241425]
[-56.99163055 -80.69664001]
[-42.53992844 -76.22412109]
[-30.17879295 -67.50302124]
[-21.11924744 -55.38774872]
[-16.24885368 -41.06523514]
[-16.04475975 -25.93865204]
[-20.52696228 -11.48994827]
[-8.26459408 -2.85083222]
[3.99777389 5.78828382]
[21.50875664 6.39279985]
[29.16483688 23.10699463]
[41.60427475 31.48913765]
[54.04371643 39.87128067]
[66.48315430 48.25342560]
[78.92259979 56.63556671]
[72.62884521 43.01981735]
[69.84934235 28.27958679]
[70.75228119 13.30678844]
[75.28302765 -0.99259484]
[83.16742706 -13.75332642]
[93.92840576 -24.20327187]
[106.91482544 -31.71011925]
[121.34091187 -35.81964111]
[136.33374023 -36.28317261]
[150.98614502 -33.07266617]
[164.41149902 -26.38238716]
[175.79747009 -16.61715508]
[184.45509338 -4.36785030]
[189.86051941 9.62433815]
[191.68667603 24.51276207]
[189.82305908 39.39654160]
[184.38243103 53.37508392]
[175.69400024 65.60256195]
[164.28349304 75.33910370]
[150.84135437 81.99557495]
[136.18092346 85.16919708]
[121.18930054 84.66793823]
[106.77360535 80.52212524]
[93.80768585 72.98381805]
[100.99019623 86.15239716]
[115.48579407 90.00955963]
[128.26315308 82.15213013]
[141.04051208 74.29470825]
[151.36541748 60.84730148]
[167.14550781 67.04609680]
[165.55732727 83.92549133]
[148.89793396 87.07205963]
[136.12057495 94.92948914]
[123.34321594 102.78691101]
[115.55862427 103.68143463]
[107.96607208 102.87053680]
[112.27365112 117.23872375]
[116.58123779 131.60690308]
[131.17311096 130.11460876]
[145.78544617 131.34255981]
[159.91566467 135.24696350]
[173.07800293 141.69203186]
[184.82028198 150.45465088]
[194.73945618 161.23213196]
[202.49536133 173.65263367]
[207.82244873 187.28802490]
[210.53887939 201.66864014]
[210.55267334 216.29942322]
[207.86489868 230.67700195]
[202.56953430 244.30702209]
[194.85015869 256.72106934]
[184.97367859 267.49288940]
[173.28100586 276.25286865]
[160.17533875 282.70086670]
[164.18307495 297.15554810]
[168.19081116 311.61026001]
[172.19856262 326.06494141]
[176.20629883 340.51962280]
[181.36822510 326.43579102]
[192.04554749 315.90039062]
[206.19718933 310.92733765]
[221.11791992 312.46734619]
[233.95550537 320.22598267]
[242.25592041 332.72012329]
[244.43243408 347.56137085]
[240.06900024 361.91268921]
[229.99972534 373.03067017]
[216.14945984 378.79003906]
[201.16581726 378.08978271]
[187.91305542 371.06381226]
[178.92520142 359.05651855]
[179.23725891 374.05325317]
[179.54931641 389.05001831]
[179.86137390 404.04678345]
[180.17343140 419.04351807]
[180.48547363 434.04028320]
[180.79753113 449.03704834]
[181.10958862 464.03378296]
[181.42164612 479.03054810]
[184.01264954 498.23828125]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 149]
[2 148]
[3 147]
[4 146]
[5 145]
[6 144]
[7 143]
[8 142]
[9 141]
[10 128]
[11 127]
[12 126]
[13 125]
[14 124]
[29 108]
[30 107]
[31 106]
[32 95]
[33 94]
[34 70]
[35 69]
[36 68]
[37 67]
[38 66]
[41 64]
[42 63]
[43 62]
[96 104]
[97 103]
[98 102]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
