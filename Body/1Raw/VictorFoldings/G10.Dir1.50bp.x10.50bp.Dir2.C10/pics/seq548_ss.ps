%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:16 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGAACUAACACAUUAUUUUCCCCUCCCACUCCCAUACUACUAAUCUCAUCAAUACAACCCCCxxxxxxxxxxUCUCCCUAAUUGAAAACAAAAUACUCAAAUGGGCCUGUCCUUGUAGUAUAAACUAAUACACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[11.27256203 198.36106873]
[6.90631056 213.56785583]
[-7.58248425 217.02098083]
[-18.24411011 227.57228088]
[-28.90573692 238.12356567]
[-39.56736374 248.67485046]
[-50.22898865 259.22613525]
[-60.89061356 269.77743530]
[-71.55223846 280.32873535]
[-82.21386719 290.88000488]
[-92.87549591 301.43130493]
[-103.53711700 311.98260498]
[-107.94794464 329.82986450]
[-125.04030609 333.68356323]
[-135.48011780 344.45437622]
[-145.91993713 355.22518921]
[-149.38972473 371.25305176]
[-165.08567810 376.00372314]
[-176.86114502 364.59011841]
[-172.60253906 348.75357056]
[-156.69073486 344.78536987]
[-146.25093079 334.01455688]
[-135.81111145 323.24374390]
[-135.67446899 311.10748291]
[-127.00850677 302.04547119]
[-114.08840942 301.32098389]
[-103.42678070 290.76968384]
[-92.76515961 280.21838379]
[-82.10353088 269.66711426]
[-71.44190216 259.11581421]
[-60.78028107 248.56451416]
[-50.11865234 238.01322937]
[-39.45702744 227.46194458]
[-28.79540062 216.91064453]
[-18.13377380 206.35935974]
[-14.53011322 191.90727234]
[0.72127199 187.69944763]
[-4.12492895 181.88685608]
[-8.63128471 175.80700684]
[-12.78308678 169.47973633]
[-16.56678391 162.92568970]
[-19.97002792 156.16627502]
[-22.98171234 149.22354126]
[-25.59200478 142.12014771]
[-27.79238701 134.87927246]
[-29.57567596 127.52457428]
[-30.93605423 120.08003235]
[-31.86907959 112.56995392]
[-32.37170792 105.01884460]
[-32.44229889 97.45136261]
[-32.08061981 89.89219666]
[-31.28785324 82.36601257]
[-30.06658745 74.89739227]
[-28.42080688 67.51070404]
[-26.35588264 60.23004532]
[-23.87855339 53.07919693]
[-20.99690819 46.08148575]
[-17.72035027 39.25975800]
[-14.05957317 32.63627243]
[-10.02652645 26.23265266]
[-5.63437176 20.06979561]
[-0.89744550 14.16781807]
[4.16879272 8.54598045]
[9.54780674 3.22263312]
[15.22204113 -1.78485012]
[21.17297554 -6.46012545]
[27.38118744 -10.78793335]
[33.82641602 -14.75414944]
[40.48762131 -18.34582710]
[47.34306717 -21.55124664]
[54.37037277 -24.35994148]
[61.54660797 -26.76274872]
[68.84835052 -28.75182533]
[76.25176239 -30.32067871]
[83.73268127 -31.46418762]
[91.26670074 -32.17861938]
[98.82922363 -32.46164322]
[106.39556122 -32.31233978]
[113.94103241 -31.73118782]
[121.44100189 -30.72008896]
[128.87098694 -29.28234291]
[136.20674133 -27.42264175]
[143.42433167 -25.14705658]
[150.50018311 -22.46301270]
[157.41120911 -19.37927055]
[164.13487244 -15.90589619]
[170.64920044 -12.05422592]
[176.93293762 -7.83682919]
[182.96557617 -3.26747227]
[188.72743225 1.63893151]
[199.38906860 -8.91235828]
[210.05068970 -19.46364975]
[213.85316467 -35.41586685]
[229.64456177 -39.83898163]
[241.18003845 -28.18287849]
[236.59289551 -12.43835163]
[220.60197449 -8.80202293]
[209.94035339 1.74926758]
[199.27873230 12.30055809]
[224.26728821 54.11865616]
[232.44949341 102.14191437]
[247.40974426 103.23322296]
[262.36999512 104.32453156]
[277.33026123 105.41584015]
[292.29049683 106.50715637]
[307.26129150 107.44277954]
[322.24099731 108.22262573]
[337.22070312 109.00247192]
[343.36993408 106.30159760]
[349.08609009 107.04775238]
[352.80343628 110.13919067]
[367.73773193 111.54149628]
[382.67202759 112.94379425]
[397.34481812 105.61972809]
[410.87292480 114.88915253]
[409.33981323 131.21647644]
[394.32260132 137.80555725]
[381.26974487 127.87810516]
[366.33541870 126.47579956]
[351.40112305 125.07350159]
[336.44085693 123.98218536]
[321.46115112 123.20233917]
[306.48144531 122.42250061]
[299.59359741 125.23377991]
[291.19918823 121.46739960]
[276.23892212 120.37609100]
[261.27868652 119.28478241]
[246.31843567 118.19347382]
[231.35818481 117.10215759]
[229.15606689 129.43074036]
[225.79951477 141.49626160]
[221.31854248 153.19087219]
[215.75320435 164.41004944]
[209.15322876 175.05352783]
[201.57762146 185.02615356]
[193.09408569 194.23878479]
[183.77845764 202.60910034]
[173.71398926 210.06227112]
[162.99066162 216.53169250]
[151.70429993 221.95951843]
[139.95579529 226.29724121]
[127.85016632 229.50608826]
[115.49559784 231.55737305]
[103.00253296 232.43278503]
[90.48262024 232.12448120]
[78.04778290 230.63520813]
[65.80915833 227.97830200]
[53.87614059 224.17749023]
[42.35538483 219.26673889]
[31.34987259 213.28997803]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 37]
[3 35]
[4 34]
[5 33]
[6 32]
[7 31]
[8 30]
[9 29]
[10 28]
[11 27]
[12 26]
[14 23]
[15 22]
[16 21]
[90 99]
[91 98]
[92 97]
[101 129]
[102 128]
[103 127]
[104 126]
[105 125]
[106 123]
[107 122]
[108 121]
[111 120]
[112 119]
[113 118]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
