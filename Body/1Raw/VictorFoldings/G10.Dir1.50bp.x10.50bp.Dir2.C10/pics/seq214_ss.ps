%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:01 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCAGCCACUUUCCACACAGACAUCAUAACAAAAAAUUUCCACCAAACCCCCCCUCCCCCGCxxxxxxxxxxGUAACAGCUAAGGACUGCAAAACCCCACUCUGCAUCAACUGAACGCAAAUCAGCCACUUUCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[-58.54506683 129.14147949]
[-73.40811157 131.16381836]
[-88.27115631 133.18614197]
[-103.13420868 135.20848083]
[-117.99725342 137.23081970]
[-132.83845520 139.40765381]
[-147.65621948 141.73875427]
[-162.47396851 144.06985474]
[-177.29173279 146.40097046]
[-192.10949707 148.73207092]
[-191.69050598 163.74714661]
[-193.19509888 178.69253540]
[-196.59857178 193.32279968]
[-201.84503174 207.39770508]
[-208.84832764 220.68614197]
[-217.49345398 232.96986389]
[-227.63845825 244.04721069]
[-239.11672974 253.73623657]
[-251.73982239 261.87786865]
[-265.30041504 268.33840942]
[-279.57586670 273.01174927]
[-294.33172607 275.82116699]
[-309.32568359 276.72055054]
[-324.31158447 275.69509888]
[-339.04327393 272.76162720]
[-353.27890015 267.96838379]
[-366.78469849 261.39401245]
[-379.33883667 253.14648438]
[-390.73522949 243.36125183]
[-400.78668213 232.19897461]
[-409.32818604 219.84295654]
[-416.21945190 206.49609375]
[-421.34732056 192.37754822]
[-424.62762451 177.71917725]
[-426.00643921 162.76165771]
[-425.46118164 147.75062561]
[-423.00076294 132.93257141]
[-418.66561890 118.55082703]
[-412.52688599 104.84153748]
[-404.68542480 92.02983856]
[-395.26998901 80.32609558]
[-384.43515015 69.92250061]
[-372.35885620 60.98989487]
[-359.23941040 53.67495346]
[-345.29223633 48.09779739]
[-330.74636841 44.35000610]
[-315.84063721 42.49312592]
[-300.81985474 42.55764389]
[-285.93063354 44.54250336]
[-271.41751099 48.41511154]
[-257.51873779 54.11187363]
[-244.46261597 61.53924561]
[-232.46350098 70.57526398]
[-221.71844482 81.07154846]
[-212.40388489 92.85574341]
[-204.67276001 105.73433685]
[-198.65203857 119.49584961]
[-194.44059753 133.91430664]
[-179.62283325 131.58320618]
[-164.80508423 129.25210571]
[-149.98731995 126.92099762]
[-135.16955566 124.58989716]
[-129.01094055 120.41651917]
[-120.01958466 122.36776733]
[-105.15653992 120.34543610]
[-90.29349518 118.32309723]
[-75.43044281 116.30076599]
[-60.56739807 114.27842712]
[-61.18789291 97.94421387]
[-60.15101624 81.63114166]
[-57.46743011 65.50693512]
[-53.16473007 49.73739624]
[-47.28715134 34.48467255]
[-39.89513397 19.90558815]
[-31.06468201 6.15005398]
[-20.88659477 -6.64049292]
[-9.46552181 -18.33453751]
[3.08110023 -28.81184006]
[16.62426376 -37.96466827]
[31.02471733 -45.69891357]
[46.13438797 -51.93505096]
[61.79792023 -56.60895538]
[77.85425568 -59.67256927]
[94.13829803 -61.09439468]
[110.48260498 -60.85980988]
[126.71913910 -58.97122574]
[142.68093872 -55.44806671]
[158.20387268 -50.32655334]
[173.12834167 -43.65934753]
[187.30090332 -35.51500320]
[200.57580566 -25.97726250]
[212.81655884 -15.14419556]
[223.89732361 -3.12718940]
[233.70413208 9.95019436]
[242.13616943 23.95349121]
[249.10673523 38.73871613]
[263.23153687 33.68996048]
[277.35635376 28.64120293]
[291.48114014 23.59244728]
[293.55429077 8.42799187]
[302.44665527 -4.02929640]
[316.11489868 -10.91682529]
[331.41812134 -10.65188980]
[344.83975220 -3.29537153]
[353.29559326 9.46225643]
[354.84259033 24.68938446]
[349.12521362 38.88692856]
[337.45730591 48.79240036]
[322.52005005 52.12958908]
[307.74591064 48.13164139]
[296.52990723 37.71725082]
[282.40509033 42.76600647]
[268.28030396 47.81476212]
[254.15548706 52.86351776]
[257.62435913 66.23130035]
[259.93627930 79.84694672]
[261.07431030 93.61050415]
[261.03009033 107.42096710]
[259.80395508 121.17695618]
[257.40484619 134.77751160]
[253.85044861 148.12280273]
[249.16679382 161.11488342]
[243.38830566 173.65840149]
[236.55735779 185.66127014]
[228.72410583 197.03540039]
[219.94604492 207.69731140]
[210.28759766 217.56874084]
[199.81965637 226.57723999]
[188.61906433 234.65669250]
[176.76803589 241.74777222]
[164.35353088 247.79846191]
[151.46667480 252.76434326]
[138.20207214 256.60894775]
[124.65708160 259.30407715]
[110.93110657 260.82995605]
[97.12489319 261.17535400]
[83.33979034 260.33776855]
[69.67696381 258.32333374]
[56.23670578 255.14682007]
[43.11766434 250.83157349]
[30.41612625 245.40924072]
[18.22532082 238.91963196]
[6.63472700 231.41038513]
[-4.27058268 222.93659973]
[-14.41056538 213.56050110]
[-23.71079636 203.35087585]
[-32.10301208 192.38267517]
[-39.52561569 180.73638916]
[-45.92412949 168.49752808]
[-51.25158310 155.75590515]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 68]
[2 67]
[3 66]
[4 65]
[5 64]
[6 62]
[7 61]
[8 60]
[9 59]
[10 58]
[96 114]
[97 113]
[98 112]
[99 111]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
