%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:13 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGAGCACCCAACUUACACUUAGGAGAUUUCAACUUAACUUGACCGCUCUGAGCUAAACCUAGxxxxxxxxxxCUAAACUACCAAACCUGCAUUAAAAAUUUCGGUUGGGGCGACCUCGGAGCAGAACCCAACCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[84.81210327 280.56671143]
[84.81210327 265.56671143]
[84.81210327 250.56671143]
[84.81210327 235.56671143]
[84.81210327 220.56671143]
[84.81210327 205.56671143]
[84.81210327 190.56671143]
[84.81210327 175.56671143]
[84.81210327 160.56671143]
[84.81210327 145.56671143]
[71.49694824 138.65971375]
[64.67165375 152.93296814]
[49.81099701 153.93795776]
[42.98570633 168.21121216]
[28.12504387 169.21620178]
[15.86267471 177.85531616]
[18.85306358 192.78775024]
[15.50502014 207.64407349]
[6.39861202 219.85035706]
[-6.88841963 227.29176331]
[-22.05401611 228.67906189]
[-36.47064590 223.77185059]
[-47.64054489 213.42036438]
[-53.62845230 199.41804504]
[-53.39693451 184.19088745]
[-46.98609924 170.37709045]
[-35.50666428 160.36996460]
[-20.94751167 155.90332031]
[-5.83110046 157.75102234]
[7.22355890 165.59295654]
[19.48592758 156.95382690]
[25.43413162 143.29849243]
[41.17187881 141.67558289]
[47.12008286 128.02024841]
[62.85783005 126.39734650]
[58.65370178 111.99491882]
[59.52222443 97.84605408]
[44.94952393 94.29129028]
[30.37681961 90.73652649]
[15.80411720 87.18176270]
[2.43064404 95.60350800]
[-12.96217632 92.02068329]
[-21.24205780 78.55892181]
[-17.49669075 63.20484161]
[-3.94813848 55.06774902]
[11.36548519 58.97523880]
[19.35887909 72.60906219]
[33.93158340 76.16382599]
[48.50428391 79.71858978]
[63.07698822 83.27334595]
[76.98738098 66.63071442]
[97.48712158 59.54292297]
[118.70639038 64.03945923]
[127.97134399 52.24281693]
[137.23629761 40.44617844]
[146.50123596 28.64953804]
[155.76618958 16.85289955]
[165.03114319 5.05625868]
[174.29609680 -6.74038124]
[183.56103516 -18.53702164]
[177.67778015 -31.26625061]
[177.86622620 -45.22173691]
[184.03219604 -57.66865921]
[194.91571045 -66.19255066]
[208.34806824 -69.16758728]
[221.68382263 -66.06648254]
[231.19218445 -77.66782379]
[217.04573059 -72.68005371]
[202.08340454 -71.61756897]
[187.37408447 -74.55627441]
[173.96858215 -81.28623199]
[162.82453918 -91.32666779]
[154.73806763 -103.96031952]
[150.28684998 -118.28465271]
[149.78887939 -133.27638245]
[153.27970886 -147.86453247]
[160.50997925 -161.00695801]
[170.96318054 -171.76478577]
[183.89253235 -179.36949158]
[198.37442017 -183.27783203]
[213.37426758 -183.21060181]
[227.82052612 -179.17259216]
[240.68119812 -171.45228577]
[251.03752136 -160.60118103]
[258.14968872 -147.39447021]
[261.50961304 -132.77561951]
[260.87725830 -117.78894806]
[256.29782104 -103.50508881]
[248.10200500 -90.94860077]
[261.62619019 -97.43676758]
[275.15039062 -103.92493439]
[288.67456055 -110.41309357]
[295.10943604 -116.98913574]
[302.54827881 -116.89228058]
[316.20452881 -123.09768677]
[322.77481079 -129.53842163]
[330.21002197 -129.28683472]
[340.84371948 -144.28366089]
[358.16113281 -141.61784363]
[371.81738281 -147.82325745]
[385.47363281 -154.02867126]
[397.39248657 -166.08590698]
[412.27798462 -157.97059631]
[408.60055542 -141.42028809]
[391.67901611 -140.37242126]
[378.02279663 -134.16702271]
[364.36654663 -127.96160889]
[359.79989624 -116.71647644]
[348.41964722 -111.45254517]
[336.12997437 -115.50445557]
[322.40994263 -109.44144440]
[308.75369263 -103.23603821]
[295.16275024 -96.88890839]
[281.63854980 -90.40074158]
[268.11434937 -83.91257477]
[254.59016418 -77.42440796]
[242.79353333 -68.15946198]
[233.28517151 -56.55812073]
[239.35372925 -41.61408615]
[237.06312561 -25.55372620]
[226.94253540 -12.75514317]
[211.66851807 -6.75512838]
[195.35768127 -9.27207184]
[186.09272766 2.52456808]
[176.82777405 14.32120800]
[167.56283569 26.11784744]
[158.29788208 37.91448975]
[149.03292847 49.71112823]
[139.76799011 61.50776672]
[130.50303650 73.30440521]
[135.76799011 79.97412109]
[139.57571411 87.67678070]
[141.72502136 96.09423828]
[142.08409119 104.86950684]
[140.59797668 113.62194061]
[137.29257202 121.96373749]
[132.27522278 129.51708984]
[125.73161316 135.93128967]
[117.91910553 140.89892578]
[109.15670776 144.17051697]
[99.81210327 145.56671143]
[99.81210327 160.56671143]
[99.81210327 175.56671143]
[99.81210327 190.56671143]
[99.81210327 205.56671143]
[99.81210327 220.56671143]
[99.81210327 235.56671143]
[99.81210327 250.56671143]
[99.81210327 265.56671143]
[99.81210327 280.56671143]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[11 35]
[13 33]
[15 31]
[16 30]
[37 50]
[38 49]
[39 48]
[40 47]
[53 130]
[54 129]
[55 128]
[56 127]
[57 126]
[58 125]
[59 124]
[60 123]
[66 118]
[67 117]
[89 116]
[90 115]
[91 114]
[92 113]
[94 112]
[95 111]
[97 110]
[99 107]
[100 106]
[101 105]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
