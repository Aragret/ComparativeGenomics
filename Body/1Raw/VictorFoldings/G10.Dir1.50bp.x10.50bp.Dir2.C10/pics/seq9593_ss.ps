%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:00 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGAUCCUCCCUACUAUGCCUAGAAGGAAUAAUACUAUCGCUGUUCAUUAUAGCUACUCUCAUxxxxxxxxxxGAGGCGUCCUUGCCCUAUUACUAUCCAUCCUCAUCCUAGCAAUAAUCCCCAUCCUCCAUACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[76.88562775 413.14016724]
[76.88562775 398.14016724]
[76.88562775 383.14016724]
[76.88562775 368.14016724]
[76.88562775 353.14016724]
[76.88562775 338.14016724]
[76.88562775 323.14016724]
[76.88562775 308.14016724]
[76.88562775 293.14016724]
[76.88562775 278.14016724]
[61.40552902 274.76779175]
[47.04389572 268.06237793]
[34.50886917 258.35131836]
[24.41923714 246.11024475]
[17.27389908 231.93981934]
[13.42719269 216.53616333]
[13.07132244 200.65673828]
[16.22675896 185.08306885]
[22.74109077 170.58230591]
[32.29637146 157.86936951]
[44.42465210 147.57179260]
[58.53088379 140.19866943]
[73.92212677 136.11552429]
[73.29814911 121.12851715]
[66.80998230 107.60432434]
[55.51097488 97.73860168]
[44.21197128 87.87287903]
[32.91296768 78.00715637]
[20.30183792 69.88561249]
[6.64559746 63.68020630]
[-7.01064396 57.47480011]
[-20.79302597 51.55483627]
[-34.69557953 45.92287827]
[-49.10468292 51.84027100]
[-63.12362289 45.93061829]
[-68.67615509 32.15727234]
[-82.57870483 26.52531624]
[-96.48126221 20.89336014]
[-110.38381958 15.26140308]
[-124.28637695 9.62944603]
[-138.30308533 4.28793383]
[-152.42788696 -0.76082265]
[-165.83274841 7.29174089]
[-181.26937866 4.79284000]
[-191.44908142 -7.07762051]
[-191.56529236 -22.71477127]
[-181.56317139 -34.73522949]
[-166.16539001 -37.46330261]
[-152.64231873 -29.61087418]
[-147.37913513 -14.88562584]
[-133.25433350 -9.83686924]
[-128.57807922 -11.06494617]
[-123.08314514 -9.32226181]
[-118.65441895 -4.27310991]
[-104.75186157 1.35884690]
[-90.84930420 6.99080372]
[-76.94675446 12.62276077]
[-63.04419708 18.25471687]
[-49.47110367 12.22920418]
[-35.29170609 17.74276161]
[-29.06362534 32.02032471]
[-15.16106892 37.65227890]
[-10.43777752 36.61978912]
[-5.02008772 38.58954620]
[-0.80523676 43.81855774]
[12.85100460 50.02396393]
[26.50724602 56.22937012]
[18.58945274 43.48933411]
[16.04438019 28.70682335]
[19.24573326 14.05242729]
[27.72344398 1.67791963]
[40.23268509 -6.59969139]
[54.93666840 -9.56496525]
[69.67633820 -6.78249598]
[82.28739929 1.33915329]
[90.91810608 13.60744190]
[94.30117035 28.22095871]
[91.93984985 43.03393173]
[84.18085480 55.87129974]
[72.16348267 64.84809113]
[57.65230560 68.64620209]
[42.77869034 66.70815277]
[54.07769394 76.57387543]
[65.37670135 86.43959808]
[76.67570496 96.30532074]
[81.38748932 86.86880493]
[89.49844360 80.73470306]
[99.11882019 78.91353607]
[108.18202972 81.45677948]
[114.88769531 87.51261902]
[129.21029663 83.05580139]
[143.53288269 78.59899139]
[157.85548401 74.14217377]
[156.80949402 59.10879135]
[159.25921631 44.23950958]
[165.07255554 30.33621025]
[173.93601990 18.14868164]
[185.37159729 8.33418083]
[198.76257324 1.42199230]
[213.38681030 -2.21511841]
[228.45561218 -2.38100696]
[243.15637207 0.93327338]
[256.69628906 7.54898739]
[268.34515381 17.10935783]
[277.47476196 29.09880638]
[283.59277344 42.87075424]
[286.36926270 57.68250275]
[285.65447998 72.73526764]
[281.48696899 87.21727753]
[274.09149170 100.34753418]
[263.86685181 111.41793823]
[251.36450195 119.83147430]
[237.25862122 125.13441467]
[222.30996704 127.04077911]
[207.32467651 125.44776154]
[193.11088562 120.44126129]
[180.43513489 112.29128265]
[169.98101807 101.43733978]
[162.31230164 88.46476746]
[147.98970032 92.92158508]
[133.66709900 97.37840271]
[119.34450531 101.83522034]
[115.09998322 114.34262085]
[103.23317719 121.98405457]
[88.28516388 120.50453949]
[88.90914154 135.49154663]
[102.92282867 137.81059265]
[116.20058441 142.84202576]
[128.22314453 150.38690186]
[138.52073669 160.14801025]
[146.69149780 171.74160767]
[152.41709900 184.71247864]
[155.47517395 198.55180359]
[155.74795532 212.71717834]
[153.22680664 226.65377808]
[148.01246643 239.81619263]
[140.31105042 251.68968201]
[130.42585754 261.81036377]
[118.74549866 269.78329468]
[105.72856903 275.29794312]
[91.88562775 278.14016724]
[91.88562775 293.14016724]
[91.88562775 308.14016724]
[91.88562775 323.14016724]
[91.88562775 338.14016724]
[91.88562775 353.14016724]
[91.88562775 368.14016724]
[91.88562775 383.14016724]
[91.88562775 398.14016724]
[91.88562775 413.14016724]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[23 126]
[24 125]
[25 85]
[26 84]
[27 83]
[28 82]
[29 67]
[30 66]
[31 65]
[32 62]
[33 61]
[36 58]
[37 57]
[38 56]
[39 55]
[40 54]
[41 51]
[42 50]
[90 122]
[91 121]
[92 120]
[93 119]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
