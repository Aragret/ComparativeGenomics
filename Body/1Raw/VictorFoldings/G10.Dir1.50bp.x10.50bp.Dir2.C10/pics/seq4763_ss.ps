%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:14 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCAGUUCUAACCAAAAAAAUAAACCCUCGUUCCACAGAAGCUGCCAUCAAGUAUUUCCUCAxxxxxxxxxxACGCAAAAUCUUAGCAUACUCCUCAAUUACCCACAUAGGAUGAAUAAUAGCAGUUCUACCCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[97.70356750 225.13812256]
[97.07958984 210.15110779]
[96.45561218 195.16409302]
[95.83163452 180.17706299]
[95.20765686 165.19004822]
[94.58367920 150.20303345]
[93.95970154 135.21601868]
[93.33572388 120.22900391]
[81.25573730 111.33665466]
[66.76013947 115.19381714]
[52.26454544 119.05097198]
[37.76894760 122.90813446]
[23.27335358 126.76529694]
[8.81866455 130.77304077]
[-5.59355164 134.93092346]
[-20.00576782 139.08880615]
[-34.41798401 143.24668884]
[-48.64476395 148.00050354]
[-62.66147614 153.34202576]
[-76.67819214 158.68353271]
[-76.15138245 173.81631470]
[-80.56911469 188.29949951]
[-89.45217896 200.56204224]
[-101.83701324 209.27378845]
[-116.38019562 213.48977661]
[-131.50419617 212.75267029]
[-145.56848145 207.14242554]
[-157.04743958 197.26760864]
[-164.69595337 184.19935608]
[-167.68434143 169.35522461]
[-165.68846130 154.34539795]
[-158.92480469 140.79800415]
[-148.12704468 130.18258667]
[-134.46643066 123.65062714]
[-119.42478180 121.91065216]
[-104.63369751 125.15140533]
[-91.69760132 133.02134705]
[-82.01969910 144.66682434]
[-68.00299072 139.32531738]
[-53.98627472 133.98379517]
[-52.72397232 131.41204834]
[-50.33382797 129.20269775]
[-46.95510483 127.80052185]
[-42.88984680 127.58904266]
[-38.57587051 128.83447266]
[-24.16365433 124.67658997]
[-9.75143909 120.51870728]
[4.66077709 116.36081696]
[10.25185680 111.45312500]
[19.41619301 112.26969910]
[33.91178894 108.41253662]
[48.40738678 104.55538177]
[62.90298462 100.69821930]
[77.39858246 96.84105682]
[81.81166840 89.87863922]
[87.96882629 85.54272461]
[94.63283539 84.07799530]
[100.64792633 85.21818542]
[105.13020325 88.28427124]
[108.86009216 72.90901184]
[123.19270325 68.85616302]
[133.40618896 57.87049866]
[143.61965942 46.88483429]
[153.83314514 35.89916611]
[163.81587219 24.70340157]
[173.56352234 13.30238152]
[183.31117249 1.90136015]
[193.05882263 -9.49966049]
[182.95500183 -20.61343002]
[174.32380676 -32.90593719]
[167.30137634 -46.18331528]
[161.99845886 -60.23615646]
[158.49870300 -74.84283447]
[156.85729980 -89.77297211]
[157.10012817 -104.79109955]
[159.22335815 -119.66036987]
[163.19351196 -134.14625549]
[168.94796753 -148.02032471]
[176.39598083 -161.06372070]
[185.42005920 -173.07077026]
[195.87791443 -183.85208130]
[207.60458374 -193.23760986]
[220.41514587 -201.07936096]
[234.10752869 -207.25364685]
[248.46580505 -211.66307068]
[263.26351929 -214.23811340]
[278.26730347 -214.93815613]
[293.24047852 -213.75216675]
[307.94696045 -210.69882202]
[322.15478516 -205.82630920]
[335.63983154 -199.21145630]
[348.18948364 -190.95858765]
[359.60577393 -181.19789124]
[369.70867920 -170.08326721]
[378.33883667 -157.79002380]
[385.36013794 -144.51205444]
[390.66186523 -130.45877075]
[394.16040039 -115.85180664]
[395.80053711 -100.92153168]
[395.55645752 -85.90341949]
[393.43197632 -71.03433228]
[389.46060181 -56.54877090]
[383.70498657 -42.67519760]
[376.25585938 -29.63241768]
[367.23077393 -17.62613487]
[356.77200317 -6.84570694]
[345.04455566 2.53884578]
[332.23333740 10.37951469]
[318.54043579 16.55264091]
[304.18176270 20.96086311]
[289.38385010 23.53466225]
[274.38000488 24.23344231]
[259.40692139 23.04618263]
[244.70069885 19.99160767]
[230.49330139 15.11789513]
[217.00878906 8.50190830]
[204.45985413 0.24799126]
[194.71218872 11.64901257]
[184.96453857 23.05003357]
[175.21688843 34.45105362]
[174.69924927 39.25808716]
[171.11404419 43.77224731]
[164.81880188 46.11264801]
[154.60533142 57.09831238]
[144.39184570 68.08397675]
[134.17837524 79.06964111]
[131.17901611 93.65912628]
[116.11586761 98.49774933]
[127.84801483 89.15126801]
[142.41870117 85.58824921]
[157.14007568 88.46595764]
[169.29647827 97.25354767]
[176.64543152 110.32997131]
[177.83126831 125.28302765]
[172.63523865 139.35432434]
[162.01585388 149.94812012]
[147.93206787 155.11018372]
[132.98191833 153.88829041]
[119.92325592 146.50781250]
[111.16500854 134.33024597]
[108.32274628 119.60502625]
[108.94672394 134.59204102]
[109.57070160 149.57905579]
[110.19467926 164.56607056]
[110.81865692 179.55308533]
[111.44262695 194.54011536]
[112.06660461 209.52713013]
[112.69058228 224.51414490]
[119.39057159 240.08804321]
[106.28004456 250.83747864]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 148]
[2 147]
[3 146]
[4 145]
[5 144]
[6 143]
[7 142]
[8 141]
[9 54]
[10 53]
[11 52]
[12 51]
[13 50]
[14 48]
[15 47]
[16 46]
[17 45]
[18 40]
[19 39]
[20 38]
[59 128]
[61 126]
[62 125]
[63 124]
[64 123]
[65 120]
[66 119]
[67 118]
[68 117]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
