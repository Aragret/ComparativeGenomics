%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:45 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGACUCCCCUCAGCCAUAGAAGGCCCCACCCCAGUCUCAGCCCUACUCCACUCAAGCACUAUxxxxxxxxxxCACCCCUGACUCCCCUCAGCCAUAGAAGGCCCCACCCCAGUCUCAGCCCUACUCCACUCACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[159.57743835 80.51484680]
[148.67715454 69.03187561]
[137.17535400 78.66040039]
[125.67355347 88.28892517]
[114.17174530 97.91745758]
[109.19456482 110.98341370]
[95.45677948 113.58435059]
[83.95497894 123.21287537]
[72.45317078 132.84140015]
[60.95137024 142.46992493]
[55.33616638 157.26113892]
[40.61047363 159.49794006]
[29.10866928 169.12646484]
[34.01700211 183.48866272]
[33.40175247 198.65394592]
[27.34612846 212.57135010]
[16.66910553 223.35862732]
[2.81466103 229.55693054]
[-12.34350395 230.32795715]
[-26.75537109 225.56744385]
[-38.47185516 215.91920471]
[-45.90840149 202.68809509]
[-48.05926895 187.66351318]
[-44.63357925 172.87739563]
[-36.09462357 160.32946777]
[-23.59722900 151.71670532]
[-8.83156395 148.20393372]
[6.20543718 150.26622009]
[19.48014259 157.62466431]
[30.98194695 147.99613953]
[35.77446365 133.89361572]
[51.32284164 130.96812439]
[62.82464600 121.33959961]
[74.32644653 111.71107483]
[85.82825470 102.08254242]
[90.80543518 89.01658630]
[104.54322052 86.41564941]
[116.04502106 76.78712463]
[127.54682922 67.15859985]
[139.04862976 57.53007126]
[130.51501465 46.01180649]
[122.66186523 34.01940918]
[115.51543427 21.59302139]
[109.09963989 8.77425003]
[103.43594360 -4.39399672]
[98.54329681 -17.86763573]
[94.43805695 -31.60156441]
[91.13395691 -45.54980850]
[88.64204407 -59.66567612]
[86.97064209 -73.90191650]
[86.12533569 -88.21088409]
[86.10894012 -102.54467010]
[86.92150116 -116.85530853]
[88.56028748 -131.09489441]
[91.01979065 -145.21577454]
[94.29177094 -159.17066956]
[98.36527252 -172.91288757]
[103.22663116 -186.39642334]
[108.85958099 -199.57615662]
[115.24523926 -212.40797424]
[122.36223602 -224.84893799]
[130.18672180 -236.85740662]
[138.69252014 -248.39318848]
[147.85112000 -259.41769409]
[157.63186646 -269.89398193]
[168.00202942 -279.78707886]
[178.92686462 -289.06381226]
[190.36981201 -297.69314575]
[202.29255676 -305.64624023]
[214.65518188 -312.89648438]
[227.41630554 -319.41958618]
[240.53320312 -325.19375610]
[253.96197510 -330.19964600]
[267.65765381 -334.42053223]
[281.57440186 -337.84228516]
[295.66564941 -340.45349121]
[309.88418579 -342.24542236]
[324.18246460 -343.21206665]
[338.51257324 -343.35021973]
[352.82659912 -342.65939331]
[367.07659912 -341.14196777]
[381.21490479 -338.80303955]
[395.19415283 -335.65039062]
[408.96759033 -331.69461060]
[422.48913574 -326.94897461]
[435.71347046 -321.42938232]
[448.59637451 -315.15426636]
[461.09472656 -308.14471436]
[473.16671753 -300.42416382]
[484.77191162 -292.01843262]
[495.87149048 -282.95574951]
[506.42831421 -273.26638794]
[516.40704346 -262.98281860]
[525.77429199 -252.13945007]
[534.49871826 -240.77261353]
[542.55114746 -228.92036438]
[549.90460205 -216.62236023]
[556.53448486 -203.91976929]
[562.41864014 -190.85514832]
[576.43536377 -196.19665527]
[590.45208740 -201.53817749]
[596.68572998 -216.06114197]
[611.39367676 -221.84489441]
[625.84997559 -215.45800781]
[631.47790527 -200.68974304]
[624.93853760 -186.30181885]
[610.11157227 -180.83035278]
[595.79357910 -187.52145386]
[581.77685547 -182.17994690]
[567.76013184 -176.83843994]
[572.46740723 -161.72909546]
[576.20013428 -146.34980774]
[578.94299316 -130.76333618]
[580.68481445 -115.03335571]
[581.41851807 -99.22406769]
[581.14099121 -83.40003967]
[579.85339355 -67.62586212]
[577.56091309 -51.96596146]
[574.27301025 -36.48427963]
[570.00292969 -21.24403191]
[564.76818848 -6.30745363]
[558.59014893 8.26445866]
[551.49395752 22.41219902]
[543.50854492 36.07798767]
[534.66662598 49.20602036]
[525.00421143 61.74267197]
[514.56066895 73.63674927]
[503.37872314 84.83966827]
[491.50399780 95.30567169]
[478.98495483 104.99200439]
[465.87268066 113.85910797]
[452.22070312 121.87075043]
[438.08477783 128.99420166]
[423.52261353 135.20036316]
[408.59362793 140.46386719]
[393.35882568 144.76321411]
[377.88037109 148.08081055]
[362.22143555 150.40309143]
[346.44601440 151.72056580]
[330.61846924 152.02781677]
[314.80346680 151.32359314]
[299.06555176 149.61071777]
[283.46899414 146.89617920]
[268.07748413 143.19105530]
[252.95385742 138.51042175]
[238.15989685 132.87339783]
[223.75601196 126.30295563]
[209.80101013 118.82592010]
[196.35189819 110.47280121]
[183.46359253 101.27767944]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 40]
[3 39]
[4 38]
[5 37]
[7 35]
[8 34]
[9 33]
[10 32]
[12 30]
[13 29]
[99 110]
[100 109]
[101 108]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
