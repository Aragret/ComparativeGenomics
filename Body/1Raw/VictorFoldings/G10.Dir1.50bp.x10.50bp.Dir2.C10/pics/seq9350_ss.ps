%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:22 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGAGCCUUACUACUAAUAAUUAUUACAUUUUGACUACCACAACUCAACGGCUACAUAGAAAAxxxxxxxxxxAUAGCACUCGAAUAAUUCUUCUCACCCUAACAGGUCAACCUCGCUUCCCCACCCUUACUACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[229.50375366 522.79980469]
[229.50375366 507.79983521]
[229.50375366 492.79983521]
[229.50375366 477.79983521]
[229.50375366 462.79983521]
[229.50375366 447.79983521]
[229.50375366 432.79983521]
[229.50375366 417.79983521]
[229.50375366 402.79983521]
[229.50375366 387.79983521]
[227.17263794 372.98205566]
[222.56707764 358.70660400]
[217.96151733 344.43115234]
[202.17745972 343.40725708]
[187.95445251 336.39950562]
[177.47431946 324.45001221]
[172.35726929 309.36151123]
[173.41146851 293.42529297]
[180.50556946 279.07339478]
[192.58419800 268.50726318]
[187.68264771 254.33070374]
[182.78109741 240.15414429]
[176.15258789 226.69818115]
[167.90029907 214.17222595]
[154.43722534 207.80082703]
[153.30616760 192.02011108]
[145.05387878 179.49414062]
[136.80158997 166.96818542]
[128.54930115 154.44221497]
[120.29700470 141.91625977]
[112.04471588 129.39028931]
[103.79242706 116.86433411]
[101.24562073 131.64654541]
[88.61416626 139.73643494]
[74.12182617 135.86703491]
[67.20391083 122.55755615]
[72.36435699 108.47317505]
[86.24298859 102.78359222]
[72.22628021 97.44207764]
[58.20956802 92.10056305]
[44.19285202 86.75904846]
[32.33105850 96.51576233]
[17.17746353 99.01858521]
[2.80831075 93.59429169]
[-6.91116953 81.70196533]
[-9.36648655 66.54060364]
[-3.89717197 52.18852234]
[8.02555561 42.50636673]
[23.19454193 40.09858704]
[37.52940750 45.61286163]
[47.17414474 57.56587982]
[49.53436661 72.74234009]
[63.55107880 78.08385468]
[77.56779480 83.42536163]
[91.58450317 88.76687622]
[103.47688293 79.62514496]
[101.91930389 64.70623016]
[99.89697266 49.84318161]
[97.41184998 35.05047607]
[94.92673492 20.25776863]
[92.44161224 5.46506119]
[77.44157410 3.68308282]
[63.55172348 -2.25398159]
[51.89804840 -11.86484051]
[43.42526627 -24.37038422]
[38.82022476 -38.75684738]
[38.45623398 -53.85797882]
[42.36279678 -68.44960022]
[50.22323227 -81.34883118]
[61.40032578 -91.50999451]
[74.98800659 -98.10936737]
[89.88477325 -100.61196899]
[104.88301849 -98.81492615]
[118.76689148 -92.86390686]
[130.41090393 -83.24134827]
[138.87112427 -70.72729492]
[143.46170044 -56.33621597]
[143.81053162 -41.23472595]
[139.88931274 -26.64703751]
[132.01591492 -13.75570583]
[120.82862091 -3.60577631]
[107.23432159 2.97994280]
[109.71943665 17.77264977]
[112.20455933 32.56535721]
[114.68967438 47.35806274]
[117.39840698 49.70971680]
[119.07182312 53.51778030]
[119.02547455 58.26649094]
[116.83821869 63.14864731]
[118.39579773 78.06755829]
[116.31838989 108.61204529]
[124.57067871 121.13800812]
[132.82296753 133.66397095]
[141.07525635 146.18992615]
[149.32754517 158.71589661]
[157.57983398 171.24185181]
[165.83212280 183.76780701]
[179.88546753 191.03514099]
[180.42626953 205.91993713]
[188.67855835 218.44589233]
[189.26687622 203.45742798]
[196.19369507 190.15257263]
[208.13487244 181.07467651]
[222.80772400 177.95906067]
[237.40742493 181.40130615]
[249.14306641 190.74339294]
[255.77127075 204.19950867]
[256.02499390 219.19735718]
[249.85574341 232.86996460]
[238.44281006 242.60368347]
[223.96792603 246.53781128]
[209.19805908 243.92028809]
[196.95765686 235.25259399]
[201.85920715 249.42915344]
[206.76075745 263.60571289]
[221.02981567 264.04678345]
[234.25958252 269.33078003]
[244.86167908 278.80133057]
[251.57078552 291.30065918]
[253.59562683 305.31127930]
[250.71215820 319.14013672]
[243.28828430 331.12313843]
[232.23696899 339.82559204]
[236.84254456 354.10104370]
[241.44810486 368.37649536]
[245.36465454 353.89685059]
[254.16566467 341.75015259]
[266.70501709 333.51821899]
[281.34979248 330.27307129]
[296.19284058 332.43731689]
[309.30123901 339.72906494]
[318.96792603 351.19882202]
[323.93411255 365.35287476]
[323.55300903 380.34802246]
[317.87426758 394.23153687]
[307.63742065 405.19543457]
[294.17553711 411.81192017]
[279.24172974 413.21939087]
[264.78073120 409.23452759]
[252.67570496 400.37625122]
[244.50375366 387.79983521]
[244.50375366 402.79983521]
[244.50375366 417.79983521]
[244.50375366 432.79983521]
[244.50375366 447.79983521]
[244.50375366 462.79983521]
[244.50375366 477.79983521]
[244.50375366 492.79983521]
[244.50375366 507.79983521]
[244.50375366 522.79980469]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[11 125]
[12 124]
[13 123]
[20 115]
[21 114]
[22 113]
[23 100]
[24 99]
[26 97]
[27 96]
[28 95]
[29 94]
[30 93]
[31 92]
[32 91]
[38 55]
[39 54]
[40 53]
[41 52]
[56 90]
[57 89]
[58 85]
[59 84]
[60 83]
[61 82]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
