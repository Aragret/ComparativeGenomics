%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:33 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGUGACUCCUACCCCUCACAAUCAUGGCAAGCCAACGCCACUUAUCCAGUGAACCACUAUCACGxxxxxxxxxxUAUCCAAACAACAAAGCAUAAUAUUUCGCCCACUAAGCCAAUCACUUUAUUGACUCCUAGCCCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[-0.10743405 286.95916748]
[-7.65127325 299.92416382]
[-15.19511318 312.88912964]
[-22.73895264 325.85409546]
[-30.28279114 338.81906128]
[-37.82662964 351.78402710]
[-38.07945633 367.60324097]
[-51.16788101 374.71255493]
[-58.71172333 387.67752075]
[-66.25556183 400.64248657]
[-63.56230927 416.45785522]
[-74.35509491 428.32778931]
[-90.35461426 427.14669800]
[-99.28739929 413.82058716]
[-94.30099487 398.57214355]
[-79.22053528 393.09863281]
[-71.67669678 380.13366699]
[-64.13285065 367.16870117]
[-64.41961670 352.27685547]
[-50.79160309 344.24020386]
[-43.24776459 331.27523804]
[-35.70392227 318.31027222]
[-28.16008377 305.34527588]
[-20.61624527 292.38031006]
[-13.07240582 279.41534424]
[-35.45853043 263.17541504]
[-55.54096985 244.16046143]
[-72.97819519 222.69383240]
[-87.47366333 199.14060974]
[-98.78085327 173.90133667]
[-106.70746613 147.40525818]
[-111.11869812 120.10298157]
[-111.93952942 92.45882416]
[-126.90180206 91.39562225]
[-141.86407471 90.33242798]
[-156.82635498 89.26923370]
[-166.71047974 101.23099518]
[-181.74620056 105.06591034]
[-196.15199280 99.29936981]
[-204.38851929 86.14873505]
[-203.28866577 70.67068481]
[-193.27536011 58.81685257]
[-178.19891357 55.14527512]
[-163.85653687 61.06774902]
[-155.76315308 74.30696106]
[-140.80088806 75.37015533]
[-125.83860779 76.43334961]
[-110.87633514 77.49655151]
[-107.66334534 56.97477341]
[-102.45814514 36.86575699]
[-95.31068420 17.36241531]
[-86.28952026 -1.34814954]
[-75.48120880 -19.08643913]
[-62.98942566 -35.68228149]
[-48.93401718 -50.97646332]
[-33.44982147 -64.82226562]
[-16.68538284 -77.08686066]
[-24.49043274 -89.89627838]
[-32.29548264 -102.70569611]
[-40.10053253 -115.51511383]
[-55.58660889 -117.68663788]
[-66.01533508 -129.33891296]
[-66.46259308 -144.97010803]
[-56.71719360 -157.19963074]
[-41.38062286 -160.25308228]
[-27.69433594 -152.68872070]
[-22.12058258 -138.07820129]
[-27.29111671 -123.32015991]
[-19.48606682 -110.51074219]
[-11.68101597 -97.70132446]
[-3.87596512 -84.89190674]
[5.26030111 -89.73566437]
[14.62182045 -94.12831116]
[24.18633652 -98.05939484]
[33.93110657 -101.51956177]
[43.83296204 -104.50060272]
[53.86836243 -106.99542236]
[64.01344299 -108.99809265]
[74.24408722 -110.50383759]
[84.53596497 -111.50909424]
[94.86461639 -112.01146698]
[105.20547485 -112.00975800]
[115.53395844 -111.50397491]
[125.82550812 -110.49531555]
[136.05564880 -108.98618317]
[146.20007324 -106.98016357]
[156.23464966 -104.48202515]
[166.13551331 -101.49771118]
[175.87913513 -98.03431702]
[185.44235229 -94.10007477]
[194.80242920 -89.70433807]
[203.93708801 -84.85755920]
[212.82463074 -79.57125854]
[221.44392395 -73.85800934]
[229.77445984 -67.73139954]
[237.79646301 -61.20598602]
[245.49082947 -54.29729080]
[252.83926392 -47.02173615]
[259.82434082 -39.39662552]
[266.42938232 -31.44008064]
[272.63873291 -23.17102432]
[278.43762207 -14.60911560]
[283.81225586 -5.77471161]
[288.74984741 3.31118250]
[293.23867798 12.62696457]
[297.26806641 22.15048599]
[300.82839966 31.85910225]
[303.91128540 41.72972870]
[306.50930786 51.73890305]
[308.61636353 61.86281967]
[310.22741699 72.07741547]
[311.33862305 82.35839844]
[311.94732666 92.68132019]
[312.05212402 103.02165222]
[311.65274048 113.35478973]
[310.75012207 123.65618134]
[309.34643555 133.90133667]
[307.44500732 144.06587219]
[305.05035400 154.12564087]
[302.16818237 164.05671692]
[298.80532837 173.83549500]
[294.96978760 183.43873596]
[290.67068481 192.84356689]
[285.91824341 202.02767944]
[280.72375488 210.96919250]
[275.09957886 219.64686584]
[269.05908203 228.04006958]
[262.61663818 236.12884521]
[255.78756714 243.89395142]
[248.58807373 251.31694031]
[241.03530884 258.38015747]
[233.14721680 265.06680298]
[224.94255066 271.36099243]
[216.44081116 277.24777222]
[207.66223145 282.71310425]
[198.62768555 287.74401855]
[189.35862732 292.32855225]
[179.87710571 296.45581055]
[170.20567322 300.11596680]
[160.36732483 303.30032349]
[150.38543701 306.00131226]
[140.28375244 308.21252441]
[130.08630371 309.92868042]
[119.81730652 311.14569092]
[109.50119781 311.86071777]
[99.16249847 312.07199097]
[88.82579041 311.77905273]
[78.51564789 310.98260498]
[68.25659180 309.68450928]
[58.07300186 307.88784790]
[47.98910141 305.59692383]
[38.02886581 302.81719971]
[28.21596718 299.55523682]
[18.57374573 295.81878662]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 25]
[2 24]
[3 23]
[4 22]
[5 21]
[6 20]
[8 18]
[9 17]
[10 16]
[33 48]
[34 47]
[35 46]
[36 45]
[57 71]
[58 70]
[59 69]
[60 68]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
