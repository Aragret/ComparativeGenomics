%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:43 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCCUAGUCCUCAUCGCCCUCCCAUCCCUACGCAUCCUUUACAUAACAGACGAGGUCAACGAxxxxxxxxxxACACACCGCACAAUCCCCUAUCUAGGCCUUCUUACGAGCCAAAACCUGCCCCUACUCCUCCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[-48.80136108 264.29519653]
[-59.24117279 275.06600952]
[-69.68098450 285.83679199]
[-79.89446259 296.82247925]
[-89.87718964 308.01824951]
[-99.85991669 319.21398926]
[-109.84264374 330.40975952]
[-119.82537079 341.60552979]
[-129.80809021 352.80130005]
[-139.79081726 363.99707031]
[-149.77354431 375.19284058]
[-143.86935425 389.26773071]
[-144.66529846 404.51010132]
[-152.00337219 417.89349365]
[-164.42657471 426.76068115]
[-179.46827698 429.35104370]
[-194.14193726 425.15026855]
[-205.53408813 414.99243164]
[-211.38281250 400.89437866]
[-210.52684021 385.65527344]
[-203.13612366 372.30087280]
[-190.67810059 363.48269653]
[-175.62631226 360.95156860]
[-160.96931458 365.21011353]
[-150.98658752 354.01434326]
[-141.00386047 342.81857300]
[-131.02113342 331.62280273]
[-121.03840637 320.42703247]
[-111.05567932 309.23126221]
[-101.07295990 298.03552246]
[-91.09023285 286.83975220]
[-90.47269440 282.04452515]
[-86.79435730 277.60592651]
[-80.45178986 275.39700317]
[-70.01197815 264.62619019]
[-59.57216644 253.85537720]
[-71.49605560 240.44165039]
[-82.29568481 226.10723877]
[-91.90026093 210.94612122]
[-100.24681854 195.05769348]
[-107.28063965 178.54611206]
[-112.95561218 161.51959229]
[-117.23453522 144.08979797]
[-120.08935547 126.37095642]
[-121.50136566 108.47924042]
[-121.46130371 90.53194427]
[-119.96942902 72.64670563]
[-117.03553009 54.94079208]
[-112.67883301 37.53026581]
[-106.92790222 20.52926636]
[-99.82043457 4.04924297]
[-91.40302277 -11.80176640]
[-81.73085785 -26.91984940]
[-70.86734009 -41.20589828]
[-58.88368607 -54.56625748]
[-45.85845184 -66.91334534]
[-31.87703323 -78.16622162]
[-40.38812256 -90.51779175]
[-48.89921570 -102.86936188]
[-62.86521912 -112.48117828]
[-57.49521255 -128.56221008]
[-40.55607224 -127.85372925]
[-36.54764175 -111.38045502]
[-28.03655243 -99.02887726]
[-19.52546120 -86.67730713]
[-9.68389130 -92.62449646]
[0.45284647 -98.05332184]
[10.85747433 -102.94916534]
[21.50199127 -107.29885864]
[32.35775375 -111.09069061]
[43.39554596 -114.31446075]
[54.58566284 -116.96149445]
[65.89799500 -119.02467346]
[77.30210114 -120.49843597]
[88.76728821 -121.37881470]
[100.26270294 -121.66345215]
[111.75740814 -121.35157013]
[123.22047424 -120.44401550]
[134.62104797 -118.94322205]
[145.92846680 -116.85324097]
[157.11227417 -114.17969513]
[168.14239502 -110.92976379]
[178.98913574 -107.11221313]
[189.62332153 -102.73730469]
[200.01631165 -97.81681061]
[210.14015198 -92.36397552]
[219.96760559 -86.39347839]
[229.47219849 -79.92137909]
[238.62838745 -72.96509552]
[247.41151428 -65.54335022]
[255.79794312 -57.67610931]
[263.76510620 -49.38455582]
[271.29156494 -40.69099426]
[278.35705566 -31.61882210]
[284.94256592 -22.19245338]
[291.03039551 -12.43725395]
[296.60415649 -2.37947798]
[301.64883423 7.95380974]
[306.15084839 18.53480148]
[310.09811401 29.33502197]
[313.47998047 40.32540894]
[316.28732300 51.47638321]
[318.51266479 62.75793839]
[320.14993286 74.13971710]
[321.19479370 85.59108734]
[336.18750000 85.12303925]
[351.18017578 84.65499878]
[358.37005615 71.08291626]
[371.39120483 62.93768692]
[386.74105835 62.41033173]
[400.29052734 69.64270782]
[408.39489746 82.68933868]
[408.87414551 98.04074860]
[401.59933472 111.56748962]
[388.52737427 119.63093567]
[373.17453003 120.06205750]
[359.67065430 112.74488068]
[351.64822388 99.64769745]
[336.65551758 100.11573792]
[321.66284180 100.58377838]
[321.04647827 116.52900696]
[319.28460693 132.38856506]
[316.38632202 148.08029175]
[312.36666870 163.52284241]
[307.24645996 178.63619995]
[301.05227661 193.34204102]
[293.81616211 207.56416321]
[285.57562256 221.22886658]
[276.37341309 234.26530457]
[266.25717163 246.60595703]
[255.27932739 258.18685913]
[243.49679565 268.94799805]
[230.97062683 278.83358765]
[217.76571655 287.79241943]
[203.95051575 295.77804565]
[189.59661865 302.74911499]
[174.77841187 308.66946411]
[159.57267761 313.50842285]
[144.05821228 317.24093628]
[128.31544495 319.84765625]
[112.42591858 321.31503296]
[96.47200775 321.63552856]
[80.53637695 320.80743408]
[64.70161438 318.83505249]
[49.04977417 315.72860718]
[33.66197586 311.50418091]
[18.61795998 306.18368530]
[3.99568677 299.79470825]
[-10.12906456 292.37033081]
[-23.68309593 283.94903564]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 36]
[2 35]
[3 34]
[4 31]
[5 30]
[6 29]
[7 28]
[8 27]
[9 26]
[10 25]
[11 24]
[57 65]
[58 64]
[59 63]
[105 120]
[106 119]
[107 118]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
