%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:55 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGUCAUAAUCGGAGGCUUUGGCAACUGACUAGUUCCCCUAAUAAUCGGUGCCCCCGAUAUGGxxxxxxxxxxCAUAGUAAUACCCAUCAUAAUCGGAGGCUUUGGCAACUGACUAGUUCCCCUAAUAAUCGGCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[95.84727478 367.02102661]
[95.84727478 352.02102661]
[95.84727478 337.02102661]
[95.84727478 322.02102661]
[95.84727478 307.02102661]
[95.84727478 292.02102661]
[95.84727478 277.02102661]
[95.84727478 262.02102661]
[95.84727478 247.02102661]
[95.84727478 232.02102661]
[80.31070709 227.26737976]
[66.97332764 217.95611572]
[57.13399124 204.98013306]
[51.75517273 189.58981323]
[51.36882401 173.27264404]
[56.02378464 157.60943604]
[65.27995300 144.12112427]
[78.24984741 134.12110901]
[93.68372345 128.58737183]
[93.05974579 113.60034943]
[89.50498199 99.02764893]
[83.15785217 85.43669891]
[70.30793762 76.20684052]
[71.93298340 61.40114975]
[65.58585358 47.81019974]
[51.33467102 55.93612289]
[36.63872528 51.66722107]
[30.00140190 39.11125565]
[15.50580597 35.25409698]
[1.01020908 31.39693642]
[-13.48538780 27.53977585]
[-28.81110382 31.46826363]
[-39.12079620 20.71840477]
[-48.28513336 21.53497887]
[-53.87621307 16.62728310]
[-68.28842926 12.46939659]
[-77.19804382 24.73294258]
[-89.76645660 33.20706558]
[-104.47597504 36.86847305]
[-119.55034637 35.27503204]
[-133.16928101 28.61916161]
[-143.68820190 17.70458603]
[-149.83692932 3.84929585]
[-150.87294006 -11.27361584]
[-146.67115784 -25.83798409]
[-137.73895264 -38.08509064]
[-125.15495300 -46.53603745]
[-110.43871307 -50.17033005]
[-95.36729431 -48.54911423]
[-81.76065826 -41.86815643]
[-71.26186371 -30.93421364]
[-65.13868713 -17.06761551]
[-64.13053894 -1.94281983]
[-49.71832657 2.21506763]
[-35.26363754 6.22280788]
[-20.97474289 2.01842999]
[-9.62822819 13.04417992]
[4.86736870 16.90133858]
[19.36296463 20.75849915]
[33.85856247 24.61565781]
[47.28254318 16.25311470]
[63.96571350 21.88671494]
[68.57127380 7.61125422]
[73.17684174 -6.66420650]
[77.78240967 -20.93966675]
[82.38796997 -35.21512604]
[86.39571381 -49.66981506]
[89.79869080 -64.27870941]
[93.20166779 -78.88760376]
[96.60464478 -93.49649048]
[83.36524200 -100.75051117]
[72.57469940 -111.30829620]
[65.03376007 -124.38639832]
[61.30200958 -139.01434326]
[61.65636444 -154.10662842]
[66.07053375 -168.54330444]
[74.21694946 -181.25308228]
[85.49109650 -191.29280090]
[99.05636597 -197.91746521]
[113.90611267 -200.63546753]
[128.93840027 -199.24511719]
[143.03771973 -193.84959412]
[155.15780640 -184.84927368]
[164.39929199 -172.91203308]
[170.07637024 -158.92370605]
[171.76777649 -143.92231750]
[169.34800720 -129.02105713]
[162.99659729 -115.32572174]
[153.18489075 -103.85257721]
[140.64097595 -95.45301819]
[126.29568481 -90.75034332]
[111.21353912 -90.09351349]
[107.81056213 -75.48462677]
[104.40757751 -60.87573242]
[101.00460052 -46.26683807]
[102.43196106 -43.78289413]
[102.92852020 -40.56615448]
[102.20328522 -36.98064041]
[100.10695648 -33.49116516]
[96.66342926 -30.60956383]
[92.05786896 -16.33410263]
[87.45230103 -2.05864191]
[82.84674072 12.21681881]
[78.24117279 26.49227905]
[79.17680359 41.46306992]
[85.52393341 55.05401993]
[97.91986084 63.31175995]
[96.74880981 79.08956909]
[103.09593201 92.68051910]
[108.51393890 88.81369019]
[115.81067657 87.47883606]
[124.00128937 89.29920959]
[138.41351318 93.45709229]
[147.59284973 92.83135223]
[153.08061218 97.85430145]
[167.40321350 102.31111145]
[181.72581482 106.76792908]
[196.04841614 111.22474670]
[211.91758728 107.08935547]
[223.23931885 118.95317841]
[218.36677551 134.61174011]
[202.31242371 137.95684814]
[191.59159851 125.54734039]
[177.26899719 121.09053040]
[162.94639587 116.63371277]
[148.62380981 112.17689514]
[134.25561523 107.86930847]
[119.84339905 103.71142578]
[108.04676056 112.97637177]
[108.67073822 127.96338654]
[122.11587524 131.20124817]
[134.24377441 137.82058716]
[144.22175598 147.35934448]
[151.36671448 159.15528870]
[155.19192505 172.39195251]
[155.44013977 186.15522766]
[152.10092163 199.49638367]
[145.41087341 211.49755859]
[135.83689880 221.33485413]
[124.04362488 228.33491516]
[110.84727478 232.02102661]
[110.84727478 247.02102661]
[110.84727478 262.02102661]
[110.84727478 277.02102661]
[110.84727478 292.02102661]
[110.84727478 307.02102661]
[110.84727478 322.02102661]
[110.84727478 337.02102661]
[110.84727478 352.02102661]
[110.84727478 367.02102661]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[19 130]
[20 129]
[21 109]
[22 108]
[24 106]
[25 105]
[28 60]
[29 59]
[30 58]
[31 57]
[33 55]
[35 54]
[36 53]
[62 104]
[63 103]
[64 102]
[65 101]
[66 100]
[67 95]
[68 94]
[69 93]
[70 92]
[112 128]
[113 127]
[115 126]
[116 125]
[117 124]
[118 123]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
