%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:25 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCCAUUCUCAUCCAAACCCCCUGAAGCUUCACCGGCGCAGUCAUUCUCAUAAUCGCCCACGGGxxxxxxxxxxUCUCCGAUCCGUCCCUAACAAACUAGGAGGCGUCCUUGCCCUAUUACUAUCCAUCCUCAUCCCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[92.50000000 283.50567627]
[92.50000000 268.50567627]
[92.50000000 253.50567627]
[92.50000000 238.50567627]
[92.50000000 223.50567627]
[92.50000000 208.50567627]
[92.50000000 193.50567627]
[92.50000000 178.50567627]
[92.50000000 163.50567627]
[92.50000000 148.50567627]
[83.47649384 147.43409729]
[74.60571289 144.66264343]
[66.21116638 140.21409607]
[58.61254883 134.17320251]
[46.21488953 142.61701965]
[33.81723404 151.06083679]
[37.28110886 165.83805847]
[35.16906357 180.86814880]
[27.76672554 194.11842346]
[16.07520485 203.79689026]
[1.67568278 208.59461975]
[-13.48442268 207.86276245]
[-27.35483360 201.70027161]
[-38.05968857 190.94061279]
[-44.15124512 177.03890991]
[-44.80567169 161.87525940]
[-39.93445969 147.50042725]
[-30.19640160 135.85848999]
[-16.90849113 128.52392578]
[-1.86780739 126.48867035]
[12.89152050 130.02796936]
[25.37341309 138.66317749]
[37.77107239 130.21936035]
[50.16872787 121.77554321]
[46.11541367 107.33357239]
[31.13466644 106.57382965]
[16.15391922 105.81409454]
[3.33373690 115.45890808]
[-12.16349792 111.30978394]
[-18.44963264 96.54956055]
[-10.70248318 82.50102997]
[5.13500071 79.94101715]
[16.91365623 90.83334351]
[31.89440346 91.59308624]
[46.87515259 92.35282135]
[60.90809631 65.49429321]
[86.62538147 51.18694687]
[115.10212708 53.29906845]
[121.84417725 39.89963531]
[128.58622742 26.50020409]
[116.60289764 16.65235710]
[107.10383606 4.39949989]
[100.55888367 -9.64730167]
[97.29063416 -24.78837776]
[97.45857239 -40.27030563]
[101.05126190 -55.32339478]
[107.88709259 -69.19996643]
[117.62342834 -81.21147919]
[129.77383423 -90.76268768]
[143.73229980 -97.38115692]
[158.80352783 -100.74062347]
[174.23756409 -100.67706299]
[189.26705933 -97.19672394]
[195.73616028 -110.73004150]
[202.20526123 -124.26336670]
[208.67436218 -137.79669189]
[205.01412964 -156.30256653]
[218.27822876 -168.68920898]
[220.39926147 -183.53848267]
[222.52030945 -198.38777161]
[224.64135742 -213.23704529]
[210.96539307 -219.67594910]
[199.79603577 -229.86108398]
[192.12644958 -242.88679504]
[188.63862610 -257.59481812]
[189.64268494 -272.67736816]
[195.04936218 -286.79330444]
[204.37786865 -298.68743896]
[216.79875183 -307.30212402]
[231.20753479 -311.87139893]
[246.32301331 -311.98895264]
[260.80111694 -307.64431763]
[273.35446167 -299.22381592]
[282.86682129 -287.47622681]
[288.49237061 -273.44607544]
[289.73086548 -258.38098145]
[286.47222900 -243.62046814]
[279.00613403 -230.47706604]
[267.99652100 -220.11946106]
[254.42236328 -213.46864319]
[239.49063110 -211.11601257]
[237.36959839 -196.26672363]
[235.24855042 -181.41744995]
[233.12750244 -166.56816101]
[233.34141541 -166.43083191]
[233.55340576 -166.29055786]
[246.28306580 -174.22502136]
[259.01272583 -182.15946960]
[271.74240112 -190.09393311]
[275.07034302 -205.54386902]
[288.39340210 -214.04510498]
[303.80731201 -210.55401611]
[312.16720581 -197.14178467]
[308.51333618 -181.76567078]
[295.01348877 -173.54804993]
[279.67684937 -177.36427307]
[266.94720459 -169.42980957]
[254.21752930 -161.49534607]
[241.48786926 -153.56089783]
[237.32971191 -138.15116882]
[222.20768738 -131.32759094]
[215.73858643 -117.79426575]
[209.26948547 -104.26094818]
[202.80038452 -90.72762299]
[214.29776001 -81.84593201]
[223.69084167 -70.75447083]
[230.56353760 -57.94066620]
[234.61054993 -43.96833801]
[235.65098572 -29.45287132]
[233.63645935 -15.03413773]
[228.65325928 -1.34826672]
[220.91873169 11.00040436]
[210.77178955 21.46602440]
[198.65800476 29.58535194]
[185.11013794 34.99826050]
[170.72460938 37.46372223]
[156.13531494 36.87051010]
[141.98565674 33.24225235]
[135.24360657 46.64168549]
[128.50155640 60.04111862]
[134.43057251 65.02018738]
[139.50283813 70.86965179]
[143.59216309 77.44396973]
[146.59678650 84.57955170]
[148.44195557 92.09883118]
[149.08174133 99.81472015]
[148.50022888 107.53521729]
[146.71188354 115.06821442]
[143.76121521 122.22627258]
[139.72163391 128.83128357]
[134.69367981 134.71887207]
[128.80242920 139.74256897]
[122.19449615 143.77734375]
[115.03429413 146.72280884]
[107.50000000 148.50567627]
[107.50000000 163.50567627]
[107.50000000 178.50567627]
[107.50000000 193.50567627]
[107.50000000 208.50567627]
[107.50000000 223.50567627]
[107.50000000 238.50567627]
[107.50000000 253.50567627]
[107.50000000 268.50567627]
[107.50000000 283.50567627]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 154]
[2 153]
[3 152]
[4 151]
[5 150]
[6 149]
[7 148]
[8 147]
[9 146]
[10 145]
[14 34]
[15 33]
[16 32]
[35 45]
[36 44]
[37 43]
[48 130]
[49 129]
[50 128]
[63 114]
[64 113]
[65 112]
[66 111]
[68 94]
[69 93]
[70 92]
[71 91]
[96 109]
[97 108]
[98 107]
[99 106]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
