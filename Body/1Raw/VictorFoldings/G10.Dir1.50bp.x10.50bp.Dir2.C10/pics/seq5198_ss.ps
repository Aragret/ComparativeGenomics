%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:30 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGAUCAUAGCAGGCAGUUGAGGUGGAUUAAACCAAACCCAGCUACGCAAAAUCUUAGCAUACxxxxxxxxxxCCCAGCUACGCAAAAUCUUAGCAUACUCCUCAAUUACCCACAUAGGAUGAAUAAUAGCAGCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[164.76339722 531.47949219]
[164.76339722 516.47949219]
[164.76339722 501.47949219]
[164.76339722 486.47949219]
[164.76339722 471.47949219]
[164.76339722 456.47949219]
[164.76339722 441.47949219]
[164.76339722 426.47949219]
[164.76339722 411.47949219]
[164.76339722 396.47949219]
[162.89578247 381.59622192]
[159.18962097 367.06127930]
[155.48345947 352.52636719]
[144.84143066 342.10540771]
[148.92912292 326.82138062]
[145.22296143 312.28643799]
[131.33836365 306.96139526]
[123.15496063 294.33224487]
[123.98694611 279.12826538]
[133.72453308 267.19152832]
[130.01837158 252.65658569]
[117.10166931 240.81771851]
[122.14414215 223.13853455]
[118.13639832 208.68383789]
[114.12866211 194.22915649]
[110.12091827 179.77445984]
[106.11318207 165.31977844]
[102.10543823 150.86509705]
[98.09769440 136.41040039]
[94.08995819 121.95571136]
[76.90545654 96.08892059]
[66.69197845 85.10325623]
[56.47850037 74.11759186]
[43.75896835 82.14564514]
[29.78451538 87.69820404]
[15.03161430 90.58753204]
[0.00298382 90.71666718]
[-14.78953552 88.08267212]
[-28.84241295 82.77669525]
[-41.67756653 74.98081207]
[-52.85863495 64.96178436]
[-62.00580215 53.06192017]
[-68.80870056 39.68738556]
[-73.03696442 25.29433250]
[-74.54798126 10.37336540]
[-73.29175568 -4.56720829]
[-69.31253815 -19.01868248]
[-62.74725723 -32.48927307]
[-53.82081985 -44.52085114]
[-64.03430176 -55.50651550]
[-74.24777985 -66.49217987]
[-84.46125793 -77.47784424]
[-99.41354370 -73.96717834]
[-114.11328888 -78.41835022]
[-124.60634613 -89.63402557]
[-128.07012939 -104.59723663]
[-123.57289886 -119.28296661]
[-112.32439423 -129.74081421]
[-97.35039520 -133.15768433]
[-82.67884064 -128.61444092]
[-72.25630188 -117.33320618]
[-68.88639069 -102.34857178]
[-73.47559357 -87.69132233]
[-63.26211166 -76.70565796]
[-53.04863358 -65.71999359]
[-42.83515167 -54.73433304]
[-30.18602371 -62.76176834]
[-16.27348137 -68.32961273]
[-1.57080102 -71.24688721]
[13.42157459 -71.41278839]
[28.19306755 -68.82021332]
[42.24035263 -63.55600739]
[55.08450699 -55.79808426]
[66.28734589 -45.80939484]
[75.46635437 -33.92903137]
[82.30776215 -20.56071091]
[86.57727814 -6.15904379]
[88.12807465 8.78590775]
[86.90589142 23.76531601]
[82.95088959 38.26890945]
[76.39633942 51.80235672]
[67.46416473 63.90410995]
[77.67764282 74.88977051]
[87.89112091 85.87543488]
[102.89112091 85.87543488]
[113.10460663 74.88977051]
[123.31808472 63.90410995]
[133.53157043 52.91844559]
[128.94235229 38.26119995]
[132.31227112 23.27656746]
[142.73481750 11.99533272]
[157.40637207 7.45209360]
[172.38037109 10.86895847]
[183.62887573 21.32680702]
[188.12609863 36.01253128]
[184.66232300 50.97574615]
[174.16926575 62.19142151]
[159.46951294 66.64259338]
[144.51722717 63.13192368]
[134.30374146 74.11759186]
[124.09027100 85.10325623]
[113.87679291 96.08892059]
[128.34806824 92.14151764]
[141.02291870 100.16323853]
[143.64932251 114.93151855]
[134.51734924 126.83139038]
[119.57240295 128.11538696]
[108.54464722 117.94797516]
[112.55238342 132.40266418]
[116.56012726 146.85734558]
[120.56786346 161.31204224]
[124.57560730 175.76672363]
[128.58334351 190.22142029]
[132.59109497 204.67610168]
[136.59883118 219.13079834]
[147.45022583 226.18069458]
[150.46636963 238.35122681]
[144.55329895 248.95042419]
[148.25946045 263.48535156]
[162.52386475 269.30200195]
[170.53445435 282.25128174]
[169.39746094 297.25698853]
[159.75790405 308.58026123]
[163.46406555 323.11520386]
[174.37118530 334.57580566]
[170.01840210 348.82019043]
[173.72456360 363.35513306]
[177.43072510 377.89007568]
[182.88452148 363.91665649]
[193.77871704 353.60565186]
[208.03074646 348.92813110]
[222.91621399 350.77819824]
[235.58961487 358.80221558]
[243.62829590 371.46630859]
[245.49559021 386.34963989]
[240.83454895 400.60708618]
[230.53614807 411.51318359]
[216.56907654 416.98315430]
[201.60324097 415.97134399]
[188.49951172 408.67117310]
[179.76339722 396.47949219]
[179.76339722 411.47949219]
[179.76339722 426.47949219]
[179.76339722 441.47949219]
[179.76339722 456.47949219]
[179.76339722 471.47949219]
[179.76339722 486.47949219]
[179.76339722 501.47949219]
[179.76339722 516.47949219]
[179.76339722 531.47949219]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[11 128]
[12 127]
[13 126]
[15 124]
[16 123]
[20 119]
[21 118]
[23 115]
[24 114]
[25 113]
[26 112]
[27 111]
[28 110]
[29 109]
[30 108]
[31 84]
[32 83]
[33 82]
[49 66]
[50 65]
[51 64]
[52 63]
[85 102]
[86 101]
[87 100]
[88 99]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
