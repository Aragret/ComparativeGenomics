%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:03 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCCUAGCCAUGGCCAUCCCCUUAUGAGCGGGCACAGUGAUUAUAGGCUUUCGCUCUAAGAUxxxxxxxxxxAGCCCAUGACCCCUAACAGGGGCCCUCUCAGCCCUCCUAAUGACCUCCGGCCUAGCCAUGCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[36.20306015 218.77384949]
[29.35624886 214.83352661]
[22.75196648 210.49896240]
[13.48701763 222.29559326]
[4.22206831 234.09223938]
[-5.04288101 245.88887024]
[-14.30782986 257.68551636]
[-16.74674606 273.31759644]
[-30.69285774 278.54782104]
[-39.95780945 290.34448242]
[-49.22275543 302.14111328]
[-58.48770523 313.93774414]
[-55.09851837 329.20364380]
[-62.36079788 343.05258179]
[-76.84552002 348.94552612]
[-91.71343994 344.10003662]
[-99.94438171 330.80395508]
[-97.65194702 315.33532715]
[-85.91854858 304.99792480]
[-70.28434753 304.67279053]
[-61.01939774 292.87615967]
[-51.75444794 281.07952881]
[-42.48949814 269.28286743]
[-40.71327209 254.49456787]
[-26.10446930 248.42056274]
[-16.83952141 236.62393188]
[-7.57457161 224.82728577]
[1.69037771 213.03065491]
[10.95532703 201.23400879]
[-11.50185490 175.79322815]
[-26.89522743 145.55084229]
[-34.24959564 112.42274475]
[-33.09904861 78.50763702]
[-23.51647568 45.95410919]
[-36.90275955 39.18599319]
[-50.28904724 32.41788101]
[-63.67533112 25.64976501]
[-77.06161499 18.88165092]
[-90.58580780 12.39348507]
[-104.24204254 6.18807840]
[-117.89828491 -0.01732876]
[-129.26493835 10.11771107]
[-143.77316284 14.74711037]
[-158.90931702 13.06879807]
[-172.05097961 5.37355185]
[-180.92126465 -7.00538063]
[-183.98333740 -21.92327309]
[-180.70669556 -36.79551315]
[-171.65902710 -49.04539108]
[-158.40789795 -56.55054855]
[-143.24913025 -58.01066208]
[-128.80909729 -53.17276764]
[-117.58960724 -42.87505341]
[-111.53450775 -28.90166283]
[-111.69287872 -13.67356968]
[-98.03663635 -7.46816301]
[-84.38040161 -1.26275575]
[-79.61824799 -2.09786940]
[-74.28718567 0.09555089]
[-70.29350281 5.49536562]
[-56.90721512 12.26348019]
[-43.52093124 19.03159523]
[-30.13464546 25.79970932]
[-16.74836159 32.56782532]
[-9.87439346 21.86616707]
[-2.02254844 11.85989761]
[6.73729181 2.63807034]
[16.32716560 -5.71724033]
[26.66172409 -13.13167286]
[37.64899063 -19.53923798]
[49.19117737 -24.88291168]
[61.18555832 -29.11513138]
[73.52539062 -32.19823456]
[86.10083771 -34.10477829]
[98.79999542 -34.81779480]
[111.50982666 -34.33094025]
[124.11722565 -32.64854813]
[136.50997925 -29.78559113]
[148.57778931 -25.76754570]
[160.21327209 -20.63017654]
[171.31285095 -14.41920567]
[181.77775574 -7.18990803]
[191.52540588 -18.59092903]
[201.27305603 -29.99195099]
[211.02072144 -41.39297104]
[214.10778809 -56.91007614]
[228.25939941 -61.55563354]
[238.00704956 -72.95665741]
[234.26168823 -88.01493835]
[240.11384583 -102.38615417]
[253.31327820 -110.54427338]
[268.78451538 -109.35233307]
[280.57852173 -99.26866150]
[284.16033936 -84.17063904]
[278.15261841 -69.86375427]
[264.86544800 -61.84930420]
[249.40806580 -63.20900345]
[239.66041565 -51.80798340]
[237.27056885 -37.10635376]
[222.42173767 -31.64531898]
[212.67408752 -20.24429893]
[202.92643738 -8.84327698]
[193.17877197 2.55774403]
[198.72581482 8.18228531]
[203.93389893 14.12205029]
[208.78517151 20.35664368]
[213.26296997 26.86466599]
[217.35192871 33.62376785]
[221.03799438 40.61075211]
[224.30851746 47.80162430]
[227.15228271 55.17170334]
[229.55950928 62.69568253]
[231.52194214 70.34773254]
[233.03283691 78.10158539]
[234.08702087 85.93061066]
[234.68086243 93.80794525]
[234.81233215 101.70653534]
[234.48097229 109.59926605]
[233.68791199 117.45904541]
[232.43589783 125.25888062]
[230.72920227 132.97200012]
[228.57369995 140.57192993]
[225.97679138 148.03256226]
[222.94738770 155.32829285]
[219.49588013 162.43406677]
[215.63412476 169.32551575]
[211.37539673 175.97894287]
[206.73428345 182.37153625]
[201.72676086 188.48132324]
[196.36997986 194.28735352]
[190.68234253 199.76968384]
[184.68339539 204.90948486]
[178.39370728 209.68911743]
[171.83489990 214.09217834]
[165.02946472 218.10354614]
[158.00076294 221.70944214]
[150.77294922 224.89750671]
[143.37081909 227.65676880]
[135.81980896 229.97776794]
[128.14579773 231.85253906]
[120.37517548 233.27464294]
[112.53459930 234.23919678]
[104.65098572 234.74288940]
[96.75141144 234.78399658]
[88.86298370 234.36236572]
[81.01279449 233.47944641]
[73.22779083 232.13829041]
[65.53469849 230.34347534]
[57.95993423 228.10118103]
[50.52949524 225.41908264]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 29]
[4 28]
[5 27]
[6 26]
[7 25]
[9 23]
[10 22]
[11 21]
[12 20]
[34 64]
[35 63]
[36 62]
[37 61]
[38 60]
[39 57]
[40 56]
[41 55]
[82 103]
[83 102]
[84 101]
[85 100]
[87 98]
[88 97]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
