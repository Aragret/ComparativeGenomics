%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:04 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCAUUCUCAACCCCCUGACAAAACACAUAGCCUACCCCUUCCUUGUACUAUCCCUAUGAGGCxxxxxxxxxxUCGCUCAUUGCAUACUCUUCAAUCAGCCACAUAGCCCUCGUAGUAACAGCCAUUCUCAUCCCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[88.23142242 419.68670654]
[88.23142242 404.68670654]
[88.23142242 389.68670654]
[88.23142242 374.68670654]
[88.23142242 359.68670654]
[88.23142242 344.68670654]
[88.23142242 329.68670654]
[88.23142242 314.68670654]
[88.23142242 299.68670654]
[88.23142242 284.68670654]
[74.02648926 281.63153076]
[60.76730728 275.67462158]
[49.03966141 267.07635498]
[39.36226654 256.21392822]
[32.16382217 243.56466675]
[27.76399231 229.68519592]
[26.35924530 215.18682861]
[28.01406097 200.70877075]
[32.65798187 186.88978577]
[40.08860779 174.34016418]
[49.98041916 163.61463928]
[61.89903259 155.18795776]
[75.32028198 149.43382263]
[89.65325928 146.60835266]
[89.96123505 131.61151123]
[90.26921082 116.61467743]
[80.39350891 105.32440186]
[65.48905945 103.63400269]
[50.58460999 101.94360352]
[35.68016434 100.25320435]
[30.00617409 114.24279022]
[20.76733780 126.18207550]
[8.64923382 135.18507385]
[-5.44889212 140.58372498]
[-20.48086548 141.97740173]
[-35.33121490 139.26269531]
[-48.89794540 132.64102173]
[-60.17431641 122.60379791]
[-68.32354736 109.89582062]
[-72.74090576 95.46011353]
[-73.09860229 80.36791229]
[-69.37007904 65.73914337]
[-61.83203888 52.65937424]
[-51.04383850 42.09919739]
[-37.80603790 34.84225464]
[-23.10096931 31.42705917]
[-8.01984787 32.10704041]
[6.31820679 36.83173752]
[18.84921646 45.25054550]
[28.64329720 56.73873901]
[34.97366333 70.44380951]
[37.37055969 85.34876251]
[52.27500916 87.03915405]
[67.17945862 88.72955322]
[82.08390045 90.41995239]
[68.61708069 83.81353760]
[62.01206589 70.34603119]
[65.03294373 55.65336609]
[76.41551971 45.88418961]
[91.39638519 45.12673950]
[103.70628357 53.69799805]
[108.19371796 68.01103210]
[102.97998047 82.07704926]
[112.62178802 70.58638000]
[122.26360321 59.09571075]
[131.90542603 47.60504532]
[141.54724121 36.11437988]
[151.18904114 24.62371254]
[160.83085632 13.13304615]
[170.47267151 1.64237940]
[163.12243652 -8.34872532]
[158.05593872 -19.66226196]
[155.49983215 -31.78452492]
[155.56681824 -44.16580200]
[158.25074768 -56.24531937]
[163.42703247 -67.47662354]
[170.85838318 -77.35230255]
[180.20570374 -85.42692566]
[191.04357910 -91.33712769]
[202.87963867 -94.81793976]
[215.17689514 -95.71469879]
[227.37812805 -93.98989105]
[238.93115234 -89.72472382]
[249.31373596 -83.11531067]
[260.08239746 -93.55731964]
[270.85107422 -103.99932861]
[275.37219238 -119.16079712]
[289.89544678 -122.46598816]
[300.66412354 -132.90798950]
[311.43280029 -143.35000610]
[322.20147705 -153.79200745]
[319.05395508 -168.89488220]
[324.59265137 -183.29371643]
[337.05020142 -192.39390564]
[352.45141602 -193.29159546]
[365.88186646 -185.70036316]
[373.05590820 -172.04252625]
[371.68435669 -156.67623901]
[362.20483398 -144.50486755]
[347.64227295 -139.41220093]
[332.64349365 -143.02333069]
[321.87481689 -132.58132935]
[311.10614014 -122.13931274]
[300.33746338 -111.69730377]
[296.58660889 -97.28272247]
[281.29309082 -93.23065186]
[270.52441406 -82.78864288]
[259.75573730 -72.34663391]
[268.10607910 -56.63312531]
[271.28750610 -39.10856247]
[268.98907471 -21.42977905]
[261.41830444 -5.27130556]
[249.28263855 7.83325195]
[233.72326660 16.63675690]
[216.20787048 20.29722977]
[198.39215088 18.45836639]
[181.96334839 11.28419304]
[172.32153320 22.77486038]
[162.67971802 34.26552582]
[153.03790283 45.75619507]
[143.39608765 57.24686050]
[133.75427246 68.73752594]
[124.11245728 80.22819519]
[114.47064209 91.71885681]
[116.89068604 98.77228546]
[116.00484467 106.29373932]
[111.88777924 112.78862000]
[105.26605225 116.92266083]
[104.95806885 131.91949463]
[104.65009308 146.91633606]
[119.70658875 150.63668823]
[133.55834961 157.59744263]
[145.51823425 167.44981384]
[154.99366760 179.70170593]
[161.51609802 193.74218750]
[164.76409912 208.87203979]
[164.57923889 224.33853149]
[160.97375488 239.37290955]
[154.12989807 253.22854614]
[144.39062500 265.21804810]
[132.24243164 274.74740601]
[118.29108429 281.34536743]
[103.23142242 284.68670654]
[103.23142242 299.68670654]
[103.23142242 314.68670654]
[103.23142242 329.68670654]
[103.23142242 344.68670654]
[103.23142242 359.68670654]
[103.23142242 374.68670654]
[103.23142242 389.68670654]
[103.23142242 404.68670654]
[103.23142242 419.68670654]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 152]
[2 151]
[3 150]
[4 149]
[5 148]
[6 147]
[7 146]
[8 145]
[9 144]
[10 143]
[24 130]
[25 129]
[26 128]
[27 55]
[28 54]
[29 53]
[30 52]
[63 124]
[64 123]
[65 122]
[66 121]
[67 120]
[68 119]
[69 118]
[70 117]
[84 108]
[85 107]
[86 106]
[88 104]
[89 103]
[90 102]
[91 101]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
