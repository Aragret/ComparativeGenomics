%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:22 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCUGCUCGCAUCUGCUAUAGUGGAGGCCGGAGCAGGAACAGGUUGAACAGUCUACCCUCCCUxxxxxxxxxxAUCCGUCCUAAUCACAGCAGUCCUACUUCUCCUAUCUCUCCCAGUCCUAGCUGCUGGCAUCCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[92.50000000 253.82981873]
[92.50000000 238.82981873]
[92.50000000 223.82981873]
[92.50000000 208.82981873]
[92.50000000 193.82981873]
[92.50000000 178.82981873]
[92.50000000 163.82981873]
[92.50000000 148.82981873]
[92.50000000 133.82981873]
[92.50000000 118.82982635]
[79.82848358 110.80282593]
[66.26658630 117.21179962]
[52.70469284 123.62078094]
[39.14279556 130.02975464]
[25.58089828 136.43873596]
[12.01900291 142.84770203]
[-1.40844691 149.53378296]
[-14.69578838 156.49414062]
[-23.33000374 169.75161743]
[-38.19440079 168.80349731]
[-51.48174286 175.76385498]
[-64.76908875 182.72421265]
[-78.05642700 189.68457031]
[-91.34376526 196.64492798]
[-99.65762329 210.78041077]
[-116.05182648 210.37757874]
[-123.66141510 195.85084534]
[-114.65830994 182.14405823]
[-98.30412292 183.35758972]
[-85.01678467 176.39723206]
[-71.72943878 169.43687439]
[-58.44210052 162.47651672]
[-45.15475845 155.51615906]
[-37.47094345 142.75653076]
[-21.65614510 143.20680237]
[-8.36880302 136.24644470]
[-6.10188293 131.97908020]
[-1.09935343 129.12207031]
[5.61002684 129.28581238]
[19.17192268 122.87683105]
[32.73381805 116.46785736]
[46.29571533 110.05888367]
[59.85761261 103.64990234]
[73.41950989 97.24092865]
[78.40895844 90.87856293]
[84.53359985 87.07794189]
[90.77633667 85.87535095]
[96.21695709 86.95240784]
[100.14509583 89.70064545]
[107.51132965 76.63394928]
[114.87757111 63.56725693]
[102.44760895 55.15602493]
[90.74460602 45.75962067]
[79.84643555 35.44056702]
[69.82563782 24.26754570]
[60.74890137 12.31490707]
[52.67662048 -0.33780339]
[45.66252136 -13.60638332]
[39.75328064 -27.40253067]
[34.98822784 -41.63443375]
[31.39906883 -56.20737839]
[29.00969124 -71.02438354]
[27.83599854 -85.98684692]
[27.88579750 -100.99518585]
[29.15876007 -115.94953156]
[31.64641380 -130.75035095]
[35.33220291 -145.29916382]
[40.19160080 -159.49913025]
[46.19226456 -173.25575256]
[53.29426193 -186.47749329]
[61.45032883 -199.07635498]
[70.60619354 -210.96850586]
[80.70091248 -222.07476807]
[91.66732025 -232.32127380]
[103.43242645 -241.63981628]
[115.91793060 -249.96836853]
[129.04075623 -257.25152588]
[142.71356201 -263.44079590]
[156.84536743 -268.49499512]
[171.34210205 -272.38052368]
[186.10731506 -275.07147217]
[201.04273987 -276.54998779]
[216.04898071 -276.80615234]
[231.02616882 -275.83834839]
[245.87463379 -273.65295410]
[260.49554443 -270.26452637]
[274.79165649 -265.69564819]
[288.66775513 -259.97668457]
[302.03152466 -253.14572144]
[314.79406738 -245.24821472]
[326.87039185 -236.33670044]
[338.18014526 -226.47050476]
[348.64810181 -215.71527100]
[358.20455933 -204.14259338]
[366.78591919 -191.82946777]
[374.33511353 -178.85786438]
[380.80184937 -165.31407166]
[386.14312744 -151.28825378]
[390.32336426 -136.87374878]
[393.31478882 -122.16645813]
[395.09747314 -107.26428223]
[395.65954590 -92.26638794]
[394.99725342 -77.27258301]
[393.11505127 -62.38264847]
[390.02542114 -47.69568253]
[385.74893188 -33.30942154]
[380.31405640 -19.31960678]
[373.75695801 -5.81933641]
[366.12127686 7.10154295]
[357.45782471 19.35704422]
[347.82424927 30.86561012]
[337.28466797 41.55065155]
[325.90924072 51.34105682]
[313.77362061 60.17167282]
[300.95861816 67.98373413]
[287.54949951 74.72525024]
[273.63546753 80.35135651]
[259.30917358 84.82461548]
[244.66593933 88.11525726]
[229.80320740 90.20137787]
[214.81988525 91.06909943]
[199.81568909 90.71264648]
[184.89048767 89.13438416]
[170.14358521 86.34482574]
[155.67312622 82.36252594]
[141.57540894 77.21399689]
[127.94426727 70.93349457]
[120.57802582 84.00019073]
[113.21178436 97.06688690]
[123.60671997 86.25275421]
[137.42178345 80.40945435]
[152.42160034 80.48245239]
[166.17912292 86.45993805]
[176.46830750 97.37473297]
[181.62431335 111.46074677]
[180.81283569 126.43877411]
[174.16520691 139.88529968]
[162.75703430 149.62458801]
[148.43423462 154.08074951]
[133.51432800 152.53277588]
[120.41142273 145.23112488]
[111.24566650 133.35725403]
[107.50000000 118.82982635]
[107.50000000 133.82981873]
[107.50000000 148.82981873]
[107.50000000 163.82981873]
[107.50000000 178.82981873]
[107.50000000 193.82981873]
[107.50000000 208.82981873]
[107.50000000 223.82981873]
[107.50000000 238.82981873]
[107.50000000 253.82981873]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 152]
[2 151]
[3 150]
[4 149]
[5 148]
[6 147]
[7 146]
[8 145]
[9 144]
[10 143]
[11 44]
[12 43]
[13 42]
[14 41]
[15 40]
[16 39]
[17 36]
[18 35]
[20 33]
[21 32]
[22 31]
[23 30]
[24 29]
[49 129]
[50 128]
[51 127]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
