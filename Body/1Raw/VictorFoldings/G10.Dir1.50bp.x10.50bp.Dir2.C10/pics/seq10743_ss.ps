%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:54 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGGGUCCAUCAUAGAAUUCUCACUGUGAUAUAUAAACUCAGACCCAAACAUUAAUCAGUUCUxxxxxxxxxxGCACAUCUGUACCCACGCCUUCUUCAAAGCCAUACUAUUUAUGUGCUCCGGGUCCAUCAUCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[95.31839752 235.52412415]
[95.00634003 220.52735901]
[94.69428253 205.53060913]
[94.38222504 190.53385925]
[94.07017517 175.53710938]
[93.75811768 160.54035950]
[93.44606018 145.54359436]
[93.13400269 130.54684448]
[92.82194519 115.55009460]
[85.63943481 102.38150787]
[73.19999695 93.99936676]
[60.76055908 85.61722565]
[48.32111740 77.23507690]
[35.35753632 84.22635651]
[19.32817841 82.08660889]
[6.53058100 69.97933960]
[-6.85570383 76.74745941]
[-20.24198914 83.51557159]
[-33.62827301 90.28368378]
[-47.01455688 97.05180359]
[-60.40084457 103.81991577]
[-73.78712463 110.58802795]
[-76.12931824 125.92732239]
[-87.06430817 136.93666077]
[-102.38737488 139.38273621]
[-116.20648193 132.32498169]
[-123.20790100 118.47725677]
[-120.69944763 103.16427612]
[-109.64567566 92.27420807]
[-94.29697418 89.99449921]
[-80.55524445 97.20174408]
[-67.16896057 90.43363190]
[-53.78267288 83.66551971]
[-40.39638901 76.89739990]
[-27.01010323 70.12928772]
[-13.62381840 63.36117172]
[-0.23753376 56.59305573]
[-15.22991085 56.11491013]
[-30.05450630 58.40212631]
[-43.54559708 51.84540939]
[-50.90674210 38.77584457]
[-49.52087021 23.84000397]
[-39.88069153 12.34796524]
[-25.41353989 8.38544941]
[-11.26286602 13.36123371]
[-2.45890856 25.50835991]
[8.42687511 35.82823181]
[3.82131052 21.55277061]
[-0.78425401 7.27730942]
[-5.38981867 -6.99815130]
[-20.27437782 -4.86322832]
[-35.30563736 -5.27468634]
[-50.05111313 -8.22068691]
[-64.08655548 -13.61646843]
[-77.00812531 -21.30678368]
[-88.44405365 -31.07036591]
[-98.06530762 -42.62629700]
[-105.59505463 -55.64209366]
[-110.81665039 -69.74325562]
[-113.57987213 -84.52407837]
[-113.80519867 -99.55928040]
[-111.48616028 -114.41626740]
[-106.68947601 -128.66757202]
[-99.55314636 -141.90316772]
[-90.28251648 -153.74223328]
[-79.14431000 -163.84413147]
[-66.45899200 -171.91821289]
[-52.59155273 -177.73216248]
[-37.94097900 -181.11871338]
[-22.92880440 -181.98043823]
[-7.98695183 -180.29251099]
[6.45466805 -176.10351562]
[19.98054123 -169.53399658]
[32.20150375 -160.77293396]
[42.76593018 -150.07241821]
[51.36986160 -137.74034119]
[57.76575089 -124.13149261]
[61.76956940 -109.63744354]
[63.26612091 -94.67521667]
[62.21234894 -79.67529297]
[58.63856888 -65.06926727]
[52.64760971 -51.27737045]
[44.41184235 -38.69642639]
[34.16822052 -27.68841743]
[22.21148300 -18.57006264]
[8.88564205 -11.60371590]
[13.49120617 2.67174482]
[18.09677124 16.94720459]
[22.70233536 31.22266579]
[51.91233444 38.86339569]
[56.70325851 64.79563904]
[69.14270020 73.17778015]
[81.58213806 81.55992126]
[94.02158356 89.94207001]
[104.62289429 76.79798126]
[128.54228210 78.69722748]
[143.54147339 78.54119110]
[149.52702332 66.51690674]
[162.90194702 59.53802490]
[179.47868347 61.91847992]
[193.26107788 55.99851608]
[202.63536072 42.54285812]
[218.95028687 44.20281982]
[225.42243958 59.27077484]
[215.39382935 72.24610138]
[199.18103027 69.78089905]
[185.39865112 75.70085907]
[187.11134338 90.60276031]
[201.87739563 93.24163055]
[216.64344788 95.88049316]
[231.43615723 98.36560822]
[246.25392151 100.69671631]
[261.07168579 103.02781677]
[275.88943481 105.35892487]
[289.65289307 97.11594391]
[304.62780762 102.87196350]
[309.32669067 118.21145630]
[300.14495850 131.36727905]
[284.12606812 132.24740601]
[273.55831909 120.17668152]
[258.74057007 117.84557343]
[243.92282104 115.51447296]
[229.10505676 113.18336487]
[221.96253967 115.26422882]
[214.00459290 110.64654541]
[199.23854065 108.00768280]
[184.47247314 105.36882019]
[158.49324036 110.34443665]
[143.69750977 93.54038239]
[128.69831848 93.69641876]
[123.47841644 99.08182526]
[136.71624756 106.13587952]
[151.54489136 108.39673615]
[161.08972168 119.96810150]
[160.48905945 134.95606995]
[150.04885864 145.72650146]
[135.08685303 146.79347229]
[123.22396088 137.61351013]
[120.50228882 122.86391449]
[113.03860474 109.85263062]
[107.81870270 115.23803711]
[108.13076019 130.23478699]
[108.44281006 145.23153687]
[108.75486755 160.22830200]
[109.06692505 175.22505188]
[109.37898254 190.22180176]
[109.69104004 205.21855164]
[110.00309753 220.21531677]
[110.31514740 235.21206665]
[112.90615082 254.41978455]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 149]
[2 148]
[3 147]
[4 146]
[5 145]
[6 144]
[7 143]
[8 142]
[9 141]
[10 94]
[11 93]
[12 92]
[13 91]
[16 37]
[17 36]
[18 35]
[19 34]
[20 33]
[21 32]
[22 31]
[47 89]
[48 88]
[49 87]
[50 86]
[96 130]
[97 129]
[100 107]
[101 106]
[108 127]
[109 126]
[110 125]
[111 123]
[112 122]
[113 121]
[114 120]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
