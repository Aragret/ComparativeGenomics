%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:46 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGGGACUACUCAAAACCAUACCUCUCACUUCAACCUCCCUCACCAUUGGCAGCCUAGCAUUAxxxxxxxxxxCUUGGCGCCUGCCUGAUCCUCCAAAUCACCACAGGACUAUUCCUAGCCAUGCACUACUCACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[30.95207977 361.84014893]
[30.64002419 346.84338379]
[30.32796860 331.84661865]
[30.01591110 316.84988403]
[29.70385551 301.85311890]
[29.39179993 286.85638428]
[29.07974243 271.85961914]
[28.76768684 256.86285400]
[28.45563126 241.86610413]
[15.92966843 233.61381531]
[2.02711248 239.24577332]
[-11.87544346 244.87773132]
[-25.77799988 250.50968933]
[-22.95275688 265.29156494]
[-23.06590843 280.34060669]
[-26.11310577 295.07833862]
[-31.97722054 308.93829346]
[-40.43285370 321.38775635]
[-51.15499115 331.94815063]
[-63.73150635 340.21359253]
[-77.67898560 345.86636353]
[-92.46133423 348.68920898]
[-107.51035309 348.57363892]
[-122.24758911 345.52404785]
[-136.10659790 339.65768433]
[-148.55467224 331.20004272]
[-159.11332703 320.47619629]
[-167.37673950 307.89834595]
[-173.02726746 293.94995117]
[-175.84771729 279.16714478]
[-175.72969055 264.11813354]
[-172.67773438 249.38139343]
[-166.80912781 235.52333069]
[-158.34945679 223.07664490]
[-147.62390137 212.51971436]
[-135.04472351 204.25834656]
[-121.09540558 198.61007690]
[-106.31214905 195.79200745]
[-91.26316833 195.91247559]
[-76.52691650 198.96682739]
[-62.66980743 204.83766174]
[-50.22447968 213.29934692]
[-39.66928864 224.02661133]
[-31.40995598 236.60713196]
[-17.50740051 230.97517395]
[-3.60484433 225.34321594]
[10.29771137 219.71125793]
[4.92114401 205.32783508]
[4.49629116 190.13157654]
[8.96979809 175.76292419]
[17.76484680 163.74096680]
[29.85349464 155.30281067]
[43.87604904 151.27659607]
[58.29370880 152.00099182]
[71.55738068 157.29884338]
[81.06573486 145.69750977]
[90.57409668 134.09616089]
[100.08245850 122.49481964]
[80.78315735 105.44229126]
[90.90442657 85.10762787]
[89.34684753 70.18872070]
[87.78926086 55.26980591]
[78.66079712 42.34766769]
[85.03469086 28.88576698]
[83.47710419 13.96685410]
[68.82376862 10.01158047]
[56.59106827 1.02685010]
[48.43336868 -11.77222729]
[45.45393372 -26.65468025]
[48.05570984 -41.60778046]
[55.88682938 -54.60924149]
[67.88819122 -63.90072632]
[82.43672180 -68.22563171]
[97.56483459 -66.99906158]
[111.22659302 -60.38688660]
[121.57434845 -49.28335571]
[127.20864868 -35.19012833]
[127.36750793 -20.01319695]
[122.02944183 -5.80512047]
[111.91637421 5.51257849]
[98.39601898 12.40927315]
[99.95359802 27.32818604]
[108.97065735 39.18322372]
[102.70817566 53.71222687]
[104.26575470 68.63114166]
[105.82334137 83.55004883]
[117.38574982 90.16935730]
[122.04067230 104.49805450]
[135.28326416 97.45291901]
[148.52584839 90.40779114]
[161.76843262 83.36265564]
[166.54598999 66.56645203]
[181.68000793 58.55110168]
[197.61869812 63.82518768]
[210.71185303 56.50608444]
[223.80500793 49.18697739]
[236.89816284 41.86787033]
[239.64900208 26.47414398]
[251.68424988 16.48980522]
[267.32119751 16.62915611]
[279.17660522 26.82639885]
[281.65264893 42.26670456]
[273.58029175 55.65963745]
[258.77096558 60.68146133]
[244.21726990 54.96102524]
[231.12411499 62.28013229]
[218.03096008 69.59923553]
[204.93780518 76.91834259]
[203.18588257 89.72176361]
[194.23126221 99.30764008]
[181.19479370 102.00550079]
[168.81356812 96.60523987]
[155.57098389 103.65037537]
[142.32839966 110.69551086]
[129.08581543 117.74064636]
[144.06390381 116.93038940]
[157.58511353 123.42477417]
[166.31535339 135.62243652]
[168.10195923 150.51565552]
[162.50436401 164.43208313]
[150.90283203 173.94020081]
[136.15806580 176.69551086]
[121.90581512 172.01861572]
[111.66040039 161.06271362]
[107.94813538 146.52934265]
[111.68379974 132.00317383]
[102.17543793 143.60452271]
[92.66707611 155.20585632]
[83.15872192 166.80720520]
[88.43215179 173.82719421]
[92.21240997 181.82142639]
[94.32205963 190.47381592]
[94.65028381 199.43659973]
[93.15840912 208.34423828]
[89.88247681 216.82835388]
[84.93283844 224.53300476]
[78.49058533 231.12951660]
[70.80098724 236.33056641]
[62.16423035 239.90257263]
[52.92370605 241.67619324]
[43.45238495 241.55404663]
[43.76443863 256.55081177]
[44.07649612 271.54754639]
[44.38855362 286.54431152]
[44.70060730 301.54107666]
[45.01266479 316.53781128]
[45.32472229 331.53457642]
[45.63677597 346.53134155]
[45.94883347 361.52807617]
[48.53983307 380.73580933]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 149]
[2 148]
[3 147]
[4 146]
[5 145]
[6 144]
[7 143]
[8 142]
[9 141]
[10 47]
[11 46]
[12 45]
[13 44]
[55 129]
[56 128]
[57 127]
[58 126]
[60 86]
[61 85]
[62 84]
[64 82]
[65 81]
[88 115]
[89 114]
[90 113]
[91 112]
[94 108]
[95 107]
[96 106]
[97 105]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
