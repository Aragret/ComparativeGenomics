%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:39 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGUAUUAGAAAAACCAUUUCAUAACUUUGUCAAAGUUAAAUUAUAGGCUAAAUCCUAUAUAUxxxxxxxxxxAUCCGUAUUACUCGCAUCAGGAGUAUCAAUCACCUGAGCUCACCAUAGUCUAAUAGAAAACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[113.77912903 320.33685303]
[113.77912903 305.33685303]
[113.77912903 290.33685303]
[113.77912903 275.33685303]
[113.77912903 260.33685303]
[113.77912903 245.33686829]
[113.77912903 230.33686829]
[113.77912903 215.33686829]
[113.77912903 200.33686829]
[113.77912903 185.33686829]
[111.75679016 170.47381592]
[107.74905396 156.01913452]
[103.74131012 141.56443787]
[92.32082367 141.01988220]
[81.47673035 137.39637756]
[72.02299500 130.96591187]
[60.13061523 140.10765076]
[48.23823547 149.24937439]
[36.34585571 158.39111328]
[32.84824753 174.04826355]
[18.36373711 180.94598389]
[4.00360250 173.79292297]
[0.78371000 158.07632446]
[11.17408466 145.85258484]
[27.20412064 146.49873352]
[39.09650040 137.35699463]
[50.98888016 128.21527100]
[62.88125992 119.07353210]
[56.49716949 106.14376068]
[54.72954559 91.10237885]
[39.73035812 90.94634247]
[24.73117065 90.79030609]
[9.73198223 90.63426971]
[-5.26720667 90.47823334]
[-20.26639557 90.32219696]
[-35.26558304 90.16616058]
[-51.16675568 96.04740906]
[-61.22004318 82.39575195]
[-50.88492584 68.95619202]
[-35.10954666 75.16696930]
[-20.11035919 75.32300568]
[-5.11116982 75.47904205]
[9.88801861 75.63507843]
[24.88720703 75.79112244]
[39.88639450 75.94715881]
[54.88558197 76.10319519]
[63.77793503 64.02320099]
[59.17236710 49.74774170]
[54.56680298 35.47228241]
[47.24769974 22.37912750]
[37.50004578 10.97810650]
[27.75239563 -0.42291418]
[18.00474167 -11.82393551]
[8.25709057 -23.22495651]
[-1.49056149 -34.62597656]
[-17.26432610 -35.60774612]
[-27.66106796 -47.51082611]
[-26.51258469 -63.27333069]
[-14.50024891 -73.54364777]
[1.24923182 -72.22857666]
[11.39196968 -60.10832596]
[9.91045952 -44.37363052]
[19.65811157 -32.97260666]
[29.40576363 -21.57158661]
[39.15341568 -10.17056656]
[48.90106583 1.23045468]
[58.64871979 12.63147545]
[56.29260254 -2.18232560]
[58.32498169 -17.04400253]
[64.57187653 -30.68131447]
[74.49851990 -41.92683792]
[87.25513458 -49.81789017]
[101.74968719 -53.67896271]
[116.74137115 -53.17951965]
[130.94682312 -48.36231995]
[143.14994812 -39.63973999]
[152.30613708 -27.75847816]
[157.63154602 -13.73563862]
[158.67028809 1.22835147]
[155.33346558 15.85249424]
[147.90669250 28.88488388]
[137.02577209 39.20987701]
[123.62215424 45.94360352]
[108.84326172 48.50961685]
[93.95425415 46.68825150]
[80.22970581 40.63542557]
[68.84226227 30.86671829]
[73.44783020 45.14217758]
[78.05339050 59.41764069]
[92.13169098 55.43351364]
[106.46643066 56.09875488]
[119.59071350 61.16777420]
[130.21745300 69.95338440]
[137.36538696 81.41430664]
[151.77760315 77.25641632]
[159.21302795 71.83734894]
[166.53302002 73.16529846]
[181.02861023 69.30813599]
[195.52421570 65.45097351]
[210.01980591 61.59381485]
[224.51541138 57.73665619]
[227.84191895 42.79701614]
[237.73904419 31.12201881]
[251.93249512 25.39449883]
[267.16073608 26.93059540]
[279.92440796 35.37732697]
[287.29049683 48.79369354]
[287.56637573 64.09671783]
[280.68862915 77.76986694]
[268.23770142 86.67116547]
[253.07473755 88.75514984]
[238.68406677 83.54293060]
[228.37257385 72.23225403]
[213.87696838 76.08941650]
[199.38137817 79.94657135]
[184.88577271 83.80373383]
[170.39018250 87.66088867]
[155.93548584 91.66863251]
[141.52326965 95.82652283]
[141.51075745 104.29614258]
[139.78846741 112.58881378]
[136.42732239 120.36296844]
[131.56578064 127.29838562]
[125.40407562 133.10942078]
[118.19599915 137.55670166]
[122.20374298 152.01139832]
[126.21147919 166.46607971]
[131.11064148 152.28869629]
[141.26971436 141.25270081]
[154.99394226 135.19914246]
[169.99382019 135.13790894]
[183.76702881 141.07919312]
[194.01588440 152.03186035]
[199.03063965 166.16876221]
[197.97474670 181.13154602]
[191.02432251 194.42410278]
[179.33888245 203.82890320]
[164.86779785 207.77702332]
[150.02517700 205.60984802]
[137.28710938 197.68888855]
[128.77912903 185.33686829]
[128.77912903 200.33686829]
[128.77912903 215.33686829]
[128.77912903 230.33686829]
[128.77912903 245.33686829]
[128.77912903 260.33685303]
[128.77912903 275.33685303]
[128.77912903 290.33685303]
[128.77912903 305.33685303]
[128.77912903 320.33685303]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[11 127]
[12 126]
[13 125]
[16 28]
[17 27]
[18 26]
[19 25]
[30 46]
[31 45]
[32 44]
[33 43]
[34 42]
[35 41]
[36 40]
[47 89]
[48 88]
[49 87]
[50 67]
[51 66]
[52 65]
[53 64]
[54 63]
[55 62]
[94 119]
[95 118]
[97 117]
[98 116]
[99 115]
[100 114]
[101 113]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
