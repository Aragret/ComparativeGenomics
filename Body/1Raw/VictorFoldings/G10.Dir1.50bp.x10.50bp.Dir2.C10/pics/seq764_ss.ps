%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:36 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGAACCAACCAAACCCCAAAGACACCCCCCACAGUUUAUGUAGCUUACCUCCUCAAAGCAAUxxxxxxxxxxUUUAUUGCCACAACUAACCUCCUCGGACUCCUGCCUCACUCAUUUACACCAACCACCCAACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[104.85698700 130.73298645]
[93.97816467 141.06018066]
[83.09933472 151.38739014]
[72.22051239 161.71459961]
[61.34168625 172.04179382]
[50.46286011 182.36900330]
[40.36421204 193.46032715]
[31.09926224 205.25695801]
[21.83431435 217.05360413]
[12.56936455 228.85023499]
[18.89232254 242.78863525]
[18.00195312 258.06820679]
[10.10285664 271.17785645]
[-2.98981333 279.10507202]
[-18.26745605 280.02822876]
[-32.21938324 273.73516846]
[-41.63954163 261.67205811]
[-44.36324692 246.61083984]
[-39.76461411 232.01251221]
[-28.90037727 221.23165894]
[-14.26705360 216.74563599]
[0.77272415 219.58529663]
[10.03767300 207.78865051]
[19.30262184 195.99200439]
[28.56757164 184.19537354]
[13.63271809 185.59184265]
[1.19559443 177.20626831]
[-3.10965991 162.83738708]
[2.66727734 148.99444580]
[15.90939713 141.94842529]
[30.61788940 144.89126587]
[40.12966156 156.48980713]
[40.13565826 171.49017334]
[51.01448059 161.16297913]
[61.89330673 150.83576965]
[72.77213287 140.50856018]
[83.65095520 130.18136597]
[94.52978516 119.85415649]
[90.82362366 105.31922150]
[76.32802582 101.46205902]
[61.83242798 97.60489655]
[47.28742981 104.37413788]
[32.99117661 97.09426117]
[29.91052437 81.34976196]
[40.40869141 69.21848297]
[56.43238068 70.00649261]
[65.68959045 83.10930634]
[80.18518066 86.96646118]
[94.68077850 90.82362366]
[98.74155426 84.51805878]
[110.92386627 65.60136414]
[101.41550446 54.00002289]
[91.90715027 42.39868164]
[82.39878845 30.79734230]
[67.08616638 32.67542648]
[53.19894028 25.95616722]
[45.16847229 12.78365421]
[45.55725098 -2.63880992]
[54.24122238 -15.38997364]
[68.44936371 -21.40098763]
[83.64790344 -18.75375748]
[94.98705292 -8.29300594]
[98.84851837 6.64327860]
[94.00012970 21.28898430]
[103.50849152 32.89032364]
[113.01684570 44.49166489]
[122.52520752 56.09300613]
[129.00138855 42.56307602]
[136.40419006 29.51706314]
[144.69766235 17.01832962]
[153.84152222 5.12757969]
[163.79135132 -6.09743261]
[174.49882507 -16.60219002]
[185.91195679 -26.33567238]
[197.97528076 -35.25060272]
[210.63023376 -43.30368423]
[223.81535339 -50.45580673]
[237.46658325 -56.67222595]
[251.51762390 -61.92275620]
[265.90023804 -66.18189240]
[280.54458618 -69.42895508]
[295.37951660 -71.64816284]
[310.33297729 -72.82874298]
[325.33236694 -72.96496582]
[340.30480957 -72.05616760]
[355.17758179 -70.10675049]
[369.87847900 -67.12619781]
[384.33609009 -63.12897873]
[398.48019409 -58.13451004]
[412.24206543 -52.16704559]
[425.55490112 -45.25557327]
[438.35403442 -37.43365860]
[450.57727051 -28.73929024]
[462.16528320 -19.21469879]
[473.06179810 -8.90614414]
[483.21383667 2.13630891]
[492.57214355 13.85902691]
[501.09124756 26.20507240]
[508.72979736 39.11448669]
[515.45062256 52.52456284]
[521.22113037 66.37017822]
[526.01336670 80.58407593]
[529.80389404 95.09723663]
[532.57440186 109.83915710]
[534.31146240 124.73823547]
[535.00659180 139.72212219]
[534.65637207 154.71803284]
[533.26257324 169.65313721]
[530.83197021 184.45489502]
[527.37634277 199.05142212]
[522.91241455 213.37181091]
[517.46197510 227.34652710]
[511.05145264 240.90768433]
[503.71194458 253.98942566]
[495.47915649 266.52819824]
[486.39303589 278.46313477]
[476.49771118 289.73623657]
[465.84127808 300.29275513]
[454.47546387 310.08142090]
[442.45547485 319.05471802]
[429.83969116 327.16903687]
[416.68939209 334.38497925]
[403.06845093 340.66748047]
[389.04302979 345.98605347]
[374.68121338 350.31484985]
[360.05279541 353.63284302]
[345.22879028 355.92391968]
[330.28121948 357.17694092]
[315.28268433 357.38586426]
[300.30599976 356.54962158]
[285.42395020 354.67233276]
[270.70877075 351.76303101]
[256.23196411 347.83593750]
[242.06384277 342.91006470]
[228.27319336 337.00936890]
[214.92703247 330.16250610]
[202.09014893 322.40270996]
[189.82489014 313.76766968]
[178.19085693 304.29937744]
[167.24452209 294.04373169]
[157.03907776 283.05059814]
[147.62406921 271.37338257]
[139.04522705 259.06878662]
[131.34422302 246.19653320]
[124.55847168 232.81918335]
[118.72090912 219.00169373]
[113.85990143 204.81118774]
[109.99905396 190.31657410]
[107.15711212 175.58825684]
[105.34789276 160.69775391]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 38]
[2 37]
[3 36]
[4 35]
[5 34]
[6 33]
[7 25]
[8 24]
[9 23]
[10 22]
[39 49]
[40 48]
[41 47]
[51 67]
[52 66]
[53 65]
[54 64]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
