%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:21 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCCCCCACAAUCCUAGGCCUACCCGCCGCAGUACUGAUCAUUCUAUUUCCCCCUCUAUUGAUxxxxxxxxxxCUCCGACCCCCUAACAACCCCCCUCCUAAUACUAACUACCUGACUCCUACCCCUCACAAUCCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[124.17343903 85.44234467]
[113.84253693 96.31765747]
[110.38516235 109.86528778]
[97.03277588 114.01324463]
[86.70187378 124.88855743]
[76.37097168 135.76387024]
[72.47612762 151.09817505]
[58.10081100 154.99682617]
[47.76990891 165.87213135]
[37.43900681 176.74745178]
[27.10810280 187.62277222]
[16.77720070 198.49807739]
[22.23450089 212.75222778]
[20.95816040 227.96188354]
[13.20159721 241.10716248]
[0.50488365 249.57806396]
[-14.61104012 251.69268799]
[-29.14489555 247.03115845]
[-40.21097565 236.51904297]
[-45.61209869 222.24351501]
[-44.27587509 207.03900146]
[-36.46760559 193.92436218]
[-23.73763275 185.50352478]
[-8.61349869 183.44845581]
[5.90188694 188.16717529]
[16.23278999 177.29185486]
[26.56369209 166.41654968]
[36.89459610 155.54122925]
[47.22549820 144.66592407]
[50.38140488 130.10949707]
[65.49565887 125.43296814]
[75.82656097 114.55765533]
[86.15746307 103.68234253]
[89.61483765 90.13471222]
[102.96722412 85.98675537]
[113.29812622 75.11144257]
[102.98069763 64.21849823]
[93.25253296 52.79623413]
[84.14074707 40.87647247]
[75.67072296 28.49244881]
[67.86607361 15.67867088]
[60.74855423 2.47085786]
[54.33800507 -11.09417915]
[48.65228653 -24.97863197]
[43.70725250 -39.14380264]
[39.51668549 -53.55020905]
[36.09225845 -68.15769958]
[33.44352341 -82.92555237]
[31.57785988 -97.81261444]
[30.50046730 -112.77739716]
[30.21434784 -127.77818298]
[30.72030258 -142.77316284]
[32.01691818 -157.72053528]
[34.10058212 -172.57865906]
[36.96548462 -187.30610657]
[40.60364151 -201.86183167]
[45.00491714 -216.20527649]
[50.15703583 -230.29644775]
[56.04564667 -244.09606934]
[62.65433121 -257.56570435]
[69.96466827 -270.66775513]
[77.95629120 -283.36578369]
[86.60691833 -295.62432861]
[95.89243317 -307.40924072]
[105.78697205 -318.68771362]
[116.26294708 -329.42825317]
[127.29115295 -339.60095215]
[138.84086609 -349.17749023]
[150.87988281 -358.13110352]
[163.37466431 -366.43688965]
[176.29035950 -374.07168579]
[189.59098816 -381.01419067]
[203.23948669 -387.24508667]
[217.19779968 -392.74700928]
[231.42701721 -397.50457764]
[245.88749695 -401.50457764]
[260.53890991 -404.73583984]
[275.34045410 -407.18939209]
[290.25085449 -408.85833740]
[305.22854614 -409.73806763]
[320.23181152 -409.82611084]
[335.21881104 -409.12222290]
[350.14776611 -407.62835693]
[364.97708130 -405.34872437]
[379.66543579 -402.28961182]
[394.17184448 -398.45959473]
[408.45593262 -393.86935425]
[422.47784424 -388.53161621]
[436.19851685 -382.46133423]
[449.57971191 -375.67538452]
[462.58413696 -368.19271851]
[475.17553711 -360.03414917]
[487.31878662 -351.22241211]
[498.98010254 -341.78210449]
[510.12692261 -331.73953247]
[520.72821045 -321.12268066]
[530.75445557 -309.96112061]
[540.17767334 -298.28598022]
[548.97155762 -286.12979126]
[557.11163330 -273.52645874]
[564.57525635 -260.51107788]
[571.34155273 -247.11994934]
[577.39172363 -233.39038086]
[582.70886230 -219.36064148]
[587.27813721 -205.06985474]
[591.08691406 -190.55781555]
[594.12445068 -175.86500549]
[596.38232422 -161.03236389]
[597.85430908 -146.10122681]
[598.53619385 -131.11322021]
[598.42614746 -116.11011505]
[597.52441406 -101.13372040]
[595.83361816 -86.22578430]
[593.35839844 -71.42786407]
[590.10565186 -56.78118896]
[586.08441162 -42.32659531]
[581.30596924 -28.10436440]
[575.78356934 -14.15414047]
[569.53271484 -0.51480293]
[562.57067871 12.77563286]
[554.91693115 25.68012238]
[546.59283447 38.16270065]
[537.62158203 50.18857574]
[528.02813721 61.72422409]
[517.83923340 72.73750305]
[507.08334351 83.19770813]
[495.79040527 93.07569122]
[483.99185181 102.34391785]
[471.72064209 110.97655487]
[459.01092529 118.94953918]
[445.89813232 126.24065399]
[432.41882324 132.82957458]
[418.61059570 138.69793701]
[404.51187134 143.82937622]
[390.16198730 148.20960999]
[375.60095215 151.82641602]
[360.86932373 154.66972351]
[346.00814819 156.73158264]
[331.05889893 158.00627136]
[316.06317139 158.49023438]
[301.06283569 158.18211365]
[286.09963989 157.08276367]
[271.21533203 155.19526672]
[256.45138550 152.52487183]
[241.84893799 149.07902527]
[227.44868469 144.86734009]
[213.29078674 139.90153503]
[199.41468811 134.19544983]
[185.85906982 127.76501465]
[172.66171265 120.62812805]
[159.85939026 112.80469513]
[147.48780823 104.31652069]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 36]
[2 35]
[4 33]
[5 32]
[6 31]
[8 29]
[9 28]
[10 27]
[11 26]
[12 25]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
