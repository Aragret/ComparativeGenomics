%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:08 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCAUUCUCCUCCGCAUAAGCCUGCGUCAGAUUAAAACACUGAACUGACAAUUAACAGCCCAxxxxxxxxxxAGCAGGCAGUUGAGGUGGAUUAAACCAAACCCAGCUACGCAAAAUCUUAGCAUACUCCUCCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[92.50000000 420.24148560]
[92.50000000 405.24148560]
[92.50000000 390.24148560]
[92.50000000 375.24148560]
[92.50000000 360.24148560]
[92.50000000 345.24148560]
[92.50000000 330.24148560]
[92.50000000 315.24148560]
[92.50000000 300.24148560]
[92.50000000 285.24148560]
[77.77018738 282.50781250]
[63.78981781 277.11254883]
[51.03553772 269.23806763]
[39.94248962 259.15127563]
[30.88946152 247.19465637]
[24.18593407 233.77449036]
[20.06152153 219.34718323]
[18.65810013 204.40370178]
[20.02492142 189.45281982]
[24.11689758 175.00384521]
[30.79607773 161.54928589]
[39.83630371 149.54798889]
[50.93086243 139.40959167]
[63.70289993 131.48043823]
[77.71820831 126.03182983]
[92.50000000 123.25068665]
[77.26280975 108.93669128]
[78.67580414 88.07845306]
[68.46232605 77.09278870]
[58.24884796 66.10712433]
[48.03536606 55.12146378]
[37.82188797 44.13579941]
[27.60840607 33.15013123]
[14.99727917 25.02859116]
[0.77049959 20.27477646]
[-13.45627975 15.52096081]
[-27.68305779 10.76714611]
[-41.90983963 6.01333141]
[-51.85145950 17.51257324]
[-65.43913269 24.32752419]
[-80.60083771 25.41895485]
[-95.02452087 20.62042999]
[-106.51067352 10.66368771]
[-113.30774689 -2.93293953]
[-114.37922668 -18.09606361]
[-109.56173706 -32.51342010]
[-99.58988953 -43.98646927]
[-85.98433685 -50.76564789]
[-70.81981659 -51.81718445]
[-56.40880585 -46.98072815]
[-44.94888687 -36.99380112]
[-38.18761063 -23.37933922]
[-37.15602112 -8.21344757]
[-22.92924309 -3.45963264]
[-8.70246506 1.29418206]
[5.52431440 6.04799700]
[19.75109291 10.80181217]
[10.05994606 -0.64727801]
[3.32934237 -14.05246258]
[-0.06406879 -28.66357994]
[0.06960975 -43.66298294]
[3.72289729 -58.21129990]
[10.69135380 -71.49439240]
[20.58502007 -82.76894379]
[32.85024261 -91.40400696]
[46.80064774 -96.91636658]
[61.65557098 -98.99755096]
[76.58371735 -97.53108978]
[90.74969482 -92.59905243]
[103.36077881 -84.47743988]
[113.71123505 -73.62073517]
[121.22184753 -60.63648605]
[125.47232819 -46.25130463]
[126.22480011 -31.27019119]
[123.43717194 -16.53149605]
[117.26543427 -2.86000633]
[108.05496216 8.97921467]
[96.32117462 18.32363510]
[82.72070312 24.65033913]
[68.01463318 27.60527992]
[53.02593994 27.02309608]
[38.59407043 22.93665314]
[48.80755234 33.92231750]
[59.02103043 44.90798187]
[69.23451233 55.89364624]
[79.44799042 66.87931061]
[89.66146851 77.86497498]
[100.67725372 75.57898712]
[111.54940796 78.47197723]
[119.97227478 85.93043518]
[134.29487610 81.47361755]
[148.61746216 77.01679993]
[162.79402161 72.11524963]
[176.81074524 66.77373505]
[186.95101929 54.62938309]
[201.59924316 57.32729340]
[215.61595154 51.98577881]
[229.63267517 46.64426804]
[240.88099670 32.10277557]
[258.07254028 35.48665237]
[271.97509766 29.85469627]
[279.52886963 15.70125008]
[295.32977295 12.92430115]
[307.25668335 23.65408707]
[306.16030884 39.65963364]
[292.88168335 48.66285706]
[277.60705566 43.75725174]
[263.70449829 49.38920975]
[258.67404175 60.43464661]
[247.08465576 65.22061157]
[234.97418213 60.66098022]
[220.95747375 66.00249481]
[206.94075012 71.34400940]
[197.80305481 83.10630035]
[182.15225220 80.79045105]
[168.13554382 86.13196564]
[166.36157227 89.24974060]
[162.95625305 91.63835144]
[158.29089355 92.52539062]
[153.07427979 91.33940125]
[138.75169373 95.79621124]
[124.42909241 100.25302887]
[122.24198151 110.10636902]
[116.25852203 118.23471069]
[107.50000000 123.25068665]
[122.28179169 126.03182983]
[136.29710388 131.48043823]
[149.06913757 139.40959167]
[160.16369629 149.54798889]
[169.20391846 161.54928589]
[175.88310242 175.00384521]
[179.97508240 189.45281982]
[181.34190369 204.40370178]
[179.93847656 219.34718323]
[175.81407166 233.77449036]
[169.11053467 247.19465637]
[160.05751038 259.15127563]
[148.96446228 269.23806763]
[136.21018982 277.11254883]
[122.22981262 282.50781250]
[107.50000000 285.24148560]
[107.50000000 300.24148560]
[107.50000000 315.24148560]
[107.50000000 330.24148560]
[107.50000000 345.24148560]
[107.50000000 360.24148560]
[107.50000000 375.24148560]
[107.50000000 390.24148560]
[107.50000000 405.24148560]
[107.50000000 420.24148560]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[26 125]
[28 87]
[29 86]
[30 85]
[31 84]
[32 83]
[33 82]
[34 57]
[35 56]
[36 55]
[37 54]
[38 53]
[90 122]
[91 121]
[92 120]
[93 116]
[94 115]
[96 113]
[97 112]
[98 111]
[100 108]
[101 107]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
