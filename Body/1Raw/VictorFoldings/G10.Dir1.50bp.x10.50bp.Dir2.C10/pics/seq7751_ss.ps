%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:04 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGAAUCUUCAACUCCUACAUACUUCCCCCAUUAUUCCUAGAACCAGGCGACCUGCGACUCCUxxxxxxxxxxCUAGUCUUUGCCGCCUGCGAAGCAGCGGUGGGCCUAGCCCUACUAGUCUCAAUCUCCAACCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[36.83635712 249.31597900]
[23.72443199 243.06272888]
[11.22487736 235.66091919]
[-0.56195462 227.16996765]
[-11.54143524 217.65805054]
[-21.62541771 207.20152283]
[-33.32504272 216.58868408]
[-45.02466583 225.97584534]
[-56.72428894 235.36300659]
[-68.42391205 244.75016785]
[-80.12353516 254.13732910]
[-91.82315826 263.52450562]
[-86.44844055 277.66549683]
[-85.70861816 292.77532959]
[-89.67615509 307.37374878]
[-97.96236420 320.03054810]
[-109.75544739 329.50567627]
[-123.90003967 334.87091064]
[-139.01039124 335.60061646]
[-153.60614014 331.62329102]
[-166.25737000 323.32861328]
[-175.72460938 311.52917480]
[-181.08036804 297.38101196]
[-181.79994202 282.27017212]
[-177.81283569 267.67706299]
[-169.50967407 255.03141785]
[-157.70390320 245.57208252]
[-143.55213928 240.22579956]
[-128.44082642 239.51635742]
[-113.85041046 243.51322937]
[-101.21031952 251.82487488]
[-89.51069641 242.43771362]
[-77.81107330 233.05055237]
[-66.11145020 223.66339111]
[-54.41182709 214.27622986]
[-42.71220398 204.88906860]
[-31.01257896 195.50189209]
[-39.25788116 183.01898193]
[-46.31744385 169.82917786]
[-52.13115692 156.04479980]
[-56.64951706 141.78321838]
[-59.83405304 127.16586304]
[-61.65764999 112.31719971]
[-62.10477448 97.36365509]
[-61.17162704 82.43256378]
[-58.86614990 67.65104675]
[-55.20797729 53.14498138]
[-50.22824860 39.03786850]
[-43.96937180 25.44982719]
[-36.48464203 12.49656200]
[-27.83778000 0.28836292]
[-18.10241890 -11.07082081]
[-28.54223061 -21.84162903]
[-38.98204422 -32.61243820]
[-49.42185593 -43.38324738]
[-64.78729248 -50.54841995]
[-62.15571213 -67.29689026]
[-45.33329010 -69.40458679]
[-38.65104675 -53.82305908]
[-28.21123505 -43.05224991]
[-17.77142334 -32.28144073]
[-7.33161068 -21.51063347]
[4.93639278 -31.33095360]
[18.09750366 -39.91743851]
[32.02807617 -47.18942261]
[46.59723282 -53.07858658]
[61.66810226 -57.52959824]
[77.09909058 -60.50064468]
[92.74523163 -61.96381378]
[108.45953369 -61.90535736]
[124.09435272 -60.32582855]
[139.50282288 -57.24005890]
[154.54014587 -52.67704773]
[169.06509399 -46.67965698]
[182.94117737 -39.30423355]
[196.03804016 -30.62006950]
[208.23265076 -20.70875168]
[219.41041565 -9.66339207]
[229.46635437 2.41223669]
[238.30596924 15.40468788]
[245.84622192 29.19189835]
[259.62860107 23.27193451]
[273.41098022 17.35197258]
[287.19335938 11.43200874]
[300.97573853 5.51204538]
[300.98788452 -5.68810701]
[306.19046021 -16.33588219]
[316.03903198 -24.03696632]
[328.89932251 -26.79964066]
[342.30978394 -23.51955605]
[354.92089844 -31.64109802]
[367.53204346 -39.76264191]
[380.14315796 -47.88418198]
[392.75427246 -56.00572586]
[398.32031250 -63.33177948]
[405.71331787 -64.16187286]
[418.49069214 -72.01929474]
[431.26803589 -79.87672424]
[441.59295654 -93.32412720]
[457.37304688 -87.12533569]
[455.78485107 -70.24593353]
[439.12545776 -67.09936523]
[426.34811401 -59.24193954]
[413.57077026 -51.38451385]
[400.87582397 -43.39459610]
[388.26470947 -35.27305603]
[375.65356445 -27.15151215]
[363.04244995 -19.02997017]
[350.43130493 -10.90842819]
[354.13748169 3.62650800]
[369.09771729 4.71781826]
[384.05798340 5.80912924]
[399.01821899 6.90043974]
[415.25527954 2.02248406]
[424.43746948 16.27463341]
[413.28417969 29.04336548]
[397.92691040 21.86068916]
[382.96667480 20.76937866]
[368.00640869 19.67806625]
[353.04617310 18.58675575]
[328.23837280 31.15540886]
[306.89572144 19.29442596]
[293.11334229 25.21438980]
[279.33096313 31.13435364]
[265.54858398 37.05431747]
[251.76618958 42.97427750]
[256.26141357 56.78799057]
[259.50210571 70.94862366]
[261.46228027 85.34249115]
[262.12615967 99.85403442]
[261.48840332 114.36675262]
[259.55416870 128.76412964]
[256.33895874 142.93057251]
[251.86862183 156.75234985]
[246.17901611 170.11849976]
[239.31582642 182.92172241]
[231.33413696 195.05920410]
[222.29806519 206.43350220]
[212.28013611 216.95332336]
[201.36076355 226.53419495]
[189.62763977 235.09921265]
[177.17494202 242.57958984]
[164.10264587 248.91526794]
[150.51571655 254.05541992]
[136.52323914 257.95874023]
[122.23751831 260.59390259]
[107.77327728 261.93975830]
[93.24662781 261.98550415]
[78.77419281 260.73074341]
[64.47217560 258.18560791]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[6 37]
[7 36]
[8 35]
[9 34]
[10 33]
[11 32]
[12 31]
[52 62]
[53 61]
[54 60]
[55 59]
[81 126]
[82 125]
[83 124]
[84 123]
[85 122]
[90 109]
[91 108]
[92 107]
[93 106]
[94 105]
[96 104]
[97 103]
[98 102]
[110 120]
[111 119]
[112 118]
[113 117]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
