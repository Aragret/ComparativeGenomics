%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:16 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCUCACAACAAAACUAACUAAUACUAACAUCUCAGACGCUCAGGAAAUAGAAACCGUCUGAxxxxxxxxxxGAUUGUGAAUCUGACAACAGAGGCUUACGACCCCUUAUUUACCGAGAAAGCUCACAAGAACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[93.57896423 273.88616943]
[93.57896423 258.88616943]
[93.57896423 243.88616943]
[93.57896423 228.88616943]
[93.57896423 213.88616943]
[93.57896423 198.88616943]
[93.57896423 183.88616943]
[93.57896423 168.88616943]
[93.57896423 153.88616943]
[93.57896423 138.88616943]
[71.69376373 118.64456940]
[72.45158386 93.19264221]
[59.35842896 85.87353516]
[46.26527405 78.55442810]
[33.17211914 71.23532867]
[20.07896423 63.91622162]
[6.98580933 56.59711456]
[14.38449001 69.64546967]
[18.06263733 84.18751526]
[17.75749016 99.18441772]
[13.49085140 113.56481171]
[5.56751776 126.30139923]
[-5.44648457 136.48431396]
[-18.76433945 143.38610840]
[-33.43465042 146.51373291]
[-48.40940094 145.64375305]
[-62.61882782 140.83831787]
[-75.04783630 132.44071960]
[-84.80854034 121.05086517]
[-91.20363617 107.48242188]
[-93.77629089 92.70468140]
[-92.34271240 77.77334595]
[-87.00530243 63.75506973]
[-78.14537048 51.65128326]
[-66.39584351 42.32666397]
[-52.59608078 36.44733429]
[-37.73190308 34.43330383]
[-22.86518478 36.42845154]
[-9.06268787 42.28744125]
[-17.82889557 30.11560440]
[-27.81162071 18.91983795]
[-38.90293503 8.82118893]
[-49.99425125 -1.27746105]
[-61.08556747 -11.37611103]
[-72.17687988 -21.47476006]
[-83.26819611 -31.57341003]
[-94.35951233 -41.67205811]
[-107.77127075 -34.60802841]
[-122.79066467 -32.56017303]
[-137.60401917 -35.77579117]
[-150.42256165 -43.86657333]
[-159.69839478 -55.85552216]
[-164.31140137 -70.29491425]
[-163.70454407 -85.44111633]
[-157.95109558 -99.46515656]
[-147.74583435 -110.67356873]
[-134.32109070 -117.71286774]
[-119.29794312 -119.73303986]
[-104.49053955 -116.49013519]
[-91.68692780 -108.37574005]
[-82.43321228 -96.36972046]
[-77.84682465 -81.92185211]
[-78.48159027 -66.77678680]
[-84.26086426 -52.76337433]
[-73.16954803 -42.66472626]
[-62.07823181 -32.56607437]
[-50.98691940 -22.46742630]
[-39.89560318 -12.36877632]
[-28.80428696 -2.27012682]
[-17.71297073 7.82852268]
[-20.08359337 -6.98296452]
[-14.85965824 -21.04392242]
[-3.39336801 -30.71471214]
[11.34726334 -33.49208069]
[25.54666901 -28.65711594]
[35.52937698 -17.46133232]
[38.71138763 -2.80272484]
[34.26905823 11.52437115]
[23.35226059 21.81142998]
[8.78678226 25.39567757]
[-5.65705776 21.34939766]
[3.10914922 33.52123260]
[14.30491543 43.50395966]
[27.39806938 50.82306671]
[40.49122238 58.14216995]
[53.58437729 65.46127319]
[66.67753601 72.78038025]
[79.77069092 80.09948730]
[93.87501526 68.42466736]
[114.34318542 67.03437042]
[125.43450165 56.93572235]
[136.52581787 46.83707047]
[147.61712646 36.73842239]
[152.07991028 20.95819092]
[168.04162598 17.19580078]
[179.08224487 29.32167435]
[173.84411621 44.86175537]
[157.71577454 47.82973862]
[146.62446594 57.92838669]
[135.53315735 68.02703857]
[124.44183350 78.12568665]
[131.62434387 91.29426575]
[146.11993408 87.43711090]
[152.58894348 73.20032501]
[166.71794128 66.49917603]
[181.83566284 70.49774933]
[190.80397034 83.30802917]
[189.38832092 98.88140106]
[178.25712585 109.86459351]
[162.66619873 111.07167816]
[149.97709656 101.93270874]
[135.48150635 105.78986359]
[137.06553650 106.78690338]
[138.62362671 107.84727478]
[152.64033508 113.18878937]
[166.65704346 118.53030396]
[178.08729553 108.35150146]
[192.94140625 104.66177368]
[207.80599976 108.30899048]
[219.26531982 118.45505524]
[224.68609619 132.76847839]
[222.82266235 147.96011353]
[214.10322571 160.53907776]
[200.53144836 167.61477661]
[185.22604370 167.56129456]
[171.70405579 160.39089966]
[163.07275391 147.75131226]
[161.31553650 132.54701233]
[147.29882812 127.20550537]
[133.28210449 121.86399078]
[127.10632324 126.11953735]
[136.84628296 137.52713013]
[146.58625793 148.93470764]
[158.96929932 157.39994812]
[158.99742126 172.39991760]
[146.64619446 180.91151428]
[132.63908386 175.54487610]
[129.13751221 160.95809937]
[121.94613647 147.79435730]
[114.75475311 134.63063049]
[108.57896423 138.88616943]
[108.57896423 153.88616943]
[108.57896423 168.88616943]
[108.57896423 183.88616943]
[108.57896423 198.88616943]
[108.57896423 213.88616943]
[108.57896423 228.88616943]
[108.57896423 243.88616943]
[108.57896423 258.88616943]
[108.57896423 273.88616943]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[12 88]
[13 87]
[14 86]
[15 85]
[16 84]
[17 83]
[39 82]
[40 81]
[41 70]
[42 69]
[43 68]
[44 67]
[45 66]
[46 65]
[47 64]
[90 101]
[91 100]
[92 99]
[93 98]
[102 112]
[103 111]
[114 130]
[115 129]
[116 128]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
