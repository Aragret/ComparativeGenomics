%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:26 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGACUUUUAAAGGAUAACAGCUAUCCAUUGGUCUUAGGCCCCAAAAAUUUUGGUGCAACUCCxxxxxxxxxxUCCCGAAUCAACCCUGACCCCUCUCCUUCAUAAAUUAUUCAGCUUCCUACACUAUUAAAGCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[103.09175873 496.55200195]
[103.09175873 481.55200195]
[103.09175873 466.55200195]
[103.09175873 451.55200195]
[103.09175873 436.55200195]
[103.09175873 421.55200195]
[103.09175873 406.55200195]
[103.09175873 391.55200195]
[103.09175873 376.55200195]
[103.09175873 361.55200195]
[86.47855377 356.66424561]
[72.13529205 346.93008423]
[61.43632126 333.26953125]
[55.41064453 316.97952271]
[54.64298248 299.61059570]
[59.21702576 282.81939697]
[68.70647430 268.21072388]
[82.21473694 257.18405151]
[98.45964050 250.79949951]
[97.21276855 235.85142517]
[95.96589661 220.90333557]
[94.71901703 205.95524597]
[92.59793854 204.02954102]
[91.13770294 201.12063599]
[90.72702026 197.48564148]
[91.65069580 193.52105713]
[94.04312897 189.72135925]
[94.04312897 174.72135925]
[94.04312897 159.72135925]
[94.04312897 144.72135925]
[93.73107147 129.72459412]
[93.10709381 114.73758698]
[85.00545502 106.31444550]
[84.64079285 94.63314056]
[92.20125580 85.72106171]
[91.88919830 70.72430420]
[91.57714081 55.72755432]
[89.24604034 40.90979385]
[84.93845367 26.54161072]
[80.63087463 12.17342663]
[76.32328796 -2.19475794]
[71.71027374 -7.07611370]
[70.48892975 -12.70990562]
[72.14879608 -17.25086975]
[68.44263458 -31.78580666]
[60.58520889 -44.56316376]
[49.28620148 -54.42888641]
[33.80205154 -57.67721176]
[29.30395508 -71.87638092]
[18.00494957 -81.74210358]
[6.70594501 -91.60782623]
[-4.59305954 -101.47354889]
[-15.89206409 -111.33927155]
[-31.79992676 -117.20240021]
[-30.56966972 -134.11164856]
[-13.98066902 -137.61041260]
[-6.02634144 -122.63827515]
[5.27266359 -112.77255249]
[16.57166862 -102.90682983]
[27.87067223 -93.04110718]
[39.16967773 -83.17538452]
[53.84564972 -80.63272095]
[59.15192413 -65.72789001]
[70.45092773 -55.86216736]
[66.11848450 -70.22287750]
[64.70819855 -85.15643311]
[66.27565765 -100.07431030]
[70.75908661 -114.38859558]
[77.98178864 -127.53517914]
[87.65913391 -138.99594116]
[99.40972137 -148.31922913]
[112.77047729 -155.13760376]
[127.21485138 -159.18235779]
[142.17359924 -160.29408264]
[157.05718994 -158.42898560]
[171.27908325 -153.66055298]
[184.27877808 -146.17669678]
[195.54396057 -136.27238464]
[204.63069153 -124.33792877]
[211.18084717 -110.84365082]
[214.93629456 -96.32137299]
[215.74903870 -81.34340668]
[213.58703613 -66.50003052]
[208.53549194 -52.37622452]
[200.79350281 -39.52859879]
[190.66615295 -28.46347427]
[178.55258179 -19.61692810]
[164.93017578 -13.33759975]
[150.33578491 -9.87295532]
[135.34457397 -9.35953617]
[120.54734039 -11.81757641]
[106.52725220 -17.15020370]
[93.83681488 -25.14726067]
[82.97756958 -35.49196625]
[86.68373108 -20.95703125]
[90.69146729 -6.50234222]
[94.99905396 7.86584187]
[99.30664062 22.23402596]
[103.61422729 36.60221100]
[108.21738434 22.32597160]
[118.14466858 11.08101940]
[131.73999023 4.74325991]
[146.73535156 4.36997604]
[160.62916565 10.02343845]
[171.10366821 20.76052475]
[176.41143799 34.79004669]
[175.66705322 49.77156448]
[168.99467468 63.20582581]
[157.50741577 72.85169220]
[143.12159729 77.10002136]
[128.23710632 75.24209595]
[115.33700562 67.58785248]
[106.57389832 55.41549683]
[106.88595581 70.41224670]
[107.19801331 85.40900421]
[116.26194000 99.49233246]
[108.09410858 114.11360931]
[108.71808624 129.10061646]
[111.98200226 134.97041321]
[111.77350616 140.73129272]
[109.04312897 144.72135925]
[109.04312897 159.72135925]
[109.04312897 174.72135925]
[109.04312897 189.72135925]
[109.66710663 204.70837402]
[110.91397858 219.65646362]
[112.16085815 234.60453796]
[113.40773010 249.55262756]
[126.06034088 251.67970276]
[137.89912415 256.60235596]
[148.31546021 264.06329346]
[156.77485657 273.67477417]
[162.84429932 284.93890381]
[166.21444702 297.27331543]
[166.71545410 310.04129028]
[164.32540894 322.58471680]
[159.17135620 334.25787354]
[151.52249146 344.46075439]
[141.77618408 352.66998291]
[130.43722534 358.46545410]
[118.09175873 361.55200195]
[118.09175873 376.55200195]
[118.09175873 391.55200195]
[118.09175873 406.55200195]
[118.09175873 421.55200195]
[118.09175873 436.55200195]
[118.09175873 451.55200195]
[118.09175873 466.55200195]
[118.09175873 481.55200195]
[118.09175873 496.55200195]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[19 128]
[20 127]
[21 126]
[22 125]
[27 124]
[28 123]
[29 122]
[30 121]
[31 118]
[32 117]
[35 115]
[36 114]
[37 113]
[38 99]
[39 98]
[40 97]
[41 96]
[44 95]
[45 94]
[46 64]
[47 63]
[49 61]
[50 60]
[51 59]
[52 58]
[53 57]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
