%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:34 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGUAUACCUUCUGCAUAAUGAAUUAACUAGAAAUAACUUUGCAAGGAGAGCCAAAGCUAAGAxxxxxxxxxxUACAAAUCUCCUUAAUUAUAACAUUCACAGCCACAGAACUAAUCAUAUUUUAUAUCUUCUCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[186.99142456 523.21844482]
[186.99142456 508.21841431]
[186.99142456 493.21841431]
[186.99142456 478.21841431]
[186.99142456 463.21841431]
[186.99142456 448.21841431]
[186.99142456 433.21841431]
[186.99142456 418.21841431]
[186.99142456 403.21841431]
[186.99142456 388.21841431]
[184.96908569 373.35537720]
[180.96134949 358.90069580]
[176.95359802 344.44598389]
[159.14576721 338.99267578]
[148.07310486 323.83279419]
[148.29943848 304.91229248]
[159.91285706 289.78546143]
[155.01130676 275.60891724]
[150.10975647 261.43234253]
[145.20820618 247.25579834]
[140.30665588 233.07923889]
[124.43048859 231.54705811]
[110.75409698 223.22769165]
[102.03025055 209.73651123]
[100.04054260 193.73564148]
[105.23179626 178.40878296]
[116.61693573 166.82765198]
[111.42152405 152.75613403]
[106.22610474 138.68461609]
[101.03069305 124.61309814]
[95.83527374 110.54158020]
[88.21882629 123.46402740]
[73.74497986 127.40200806]
[60.63131332 120.11971283]
[56.32316971 105.75169373]
[63.26651764 92.45545959]
[77.51923370 87.77999115]
[90.99031830 94.38095856]
[77.85411072 86.00971222]
[74.61111450 71.14574432]
[82.67277527 58.67396545]
[79.26979828 44.06507111]
[75.86682129 29.45617867]
[72.46383667 14.84728622]
[67.43866730 7.14017773]
[69.14537811 -0.10087089]
[66.04705811 -14.77739620]
[62.46644211 -18.75216293]
[60.96430206 -23.25726509]
[61.38767242 -27.39519310]
[63.24351501 -30.46493721]
[61.06667709 -45.30614090]
[58.88983917 -60.14734650]
[56.71300507 -74.98855591]
[54.53616714 -89.82975769]
[52.35932922 -104.67096710]
[50.18249130 -119.51216888]
[44.84098053 -133.52888489]
[36.58869171 -146.05484009]
[21.69372749 -152.91575623]
[20.45760918 -169.26824951]
[34.15194702 -178.29028320]
[48.68918228 -170.70075989]
[49.11465454 -154.30712891]
[57.36694336 -141.78117371]
[56.80763245 -156.77073669]
[60.23875427 -171.37304688]
[67.41519928 -184.54493713]
[77.82428741 -195.34544373]
[90.72241974 -203.00299072]
[105.18819427 -206.97055054]
[120.18818665 -206.96469116]
[134.65084839 -202.98580933]
[147.54299927 -195.31817627]
[157.94363403 -184.50953674]
[165.10977173 -171.33204651]
[168.52947998 -156.72705078]
[167.95845032 -141.73793030]
[163.43746948 -127.43545532]
[155.28953552 -114.84136200]
[144.09669495 -104.85535431]
[130.65855408 -98.19081116]
[115.93508911 -95.32382202]
[100.97811890 -96.45920563]
[86.85614014 -101.51585388]
[74.57798767 -110.13253021]
[65.02369690 -121.68900299]
[67.20053864 -106.84780121]
[69.37737274 -92.00659943]
[71.55420685 -77.16539001]
[73.73104858 -62.32418442]
[75.90788269 -47.48297882]
[78.08471680 -32.64177322]
[80.72358704 -17.87571907]
[83.82190704 -3.19919276]
[87.07273102 11.44430828]
[90.47570801 26.05320168]
[93.87868500 40.66209412]
[97.28166962 55.27098465]
[110.02477264 62.89652634]
[113.68398285 77.66354370]
[105.59921265 90.97798157]
[109.90679932 105.34616852]
[115.10221100 119.41768646]
[120.29763031 133.48921204]
[125.49304199 147.56072998]
[130.68846130 161.63224792]
[144.83247375 162.44323730]
[157.55528259 168.57621765]
[166.94203186 179.07136536]
[171.59408569 192.31512451]
[170.83731079 206.28831482]
[164.81954956 218.87387085]
[154.48321533 228.17768860]
[159.38476562 242.35424805]
[164.28631592 256.53079224]
[169.18786621 270.70736694]
[174.08941650 284.88391113]
[185.57792664 286.28274536]
[195.65425110 291.87023926]
[202.86087036 300.79394531]
[206.17205811 311.72204590]
[205.13975525 323.04229736]
[199.95375061 333.09960938]
[191.40829468 340.43826294]
[195.41603088 354.89294434]
[199.42376709 369.34762573]
[204.32293701 355.17025757]
[214.48200989 344.13424683]
[228.20623779 338.08068848]
[243.20611572 338.01943970]
[256.97930908 343.96072388]
[267.22817993 354.91342163]
[272.24291992 369.05032349]
[271.18704224 384.01309204]
[264.23663330 397.30563354]
[252.55117798 406.71044922]
[238.08009338 410.65856934]
[223.23747253 408.49139404]
[210.49938965 400.57043457]
[201.99142456 388.21841431]
[201.99142456 403.21841431]
[201.99142456 418.21841431]
[201.99142456 433.21841431]
[201.99142456 448.21841431]
[201.99142456 463.21841431]
[201.99142456 478.21841431]
[201.99142456 493.21841431]
[201.99142456 508.21841431]
[201.99142456 523.21844482]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[11 127]
[12 126]
[13 125]
[17 118]
[18 117]
[19 116]
[20 115]
[21 114]
[27 107]
[28 106]
[29 105]
[30 104]
[31 103]
[38 102]
[41 99]
[42 98]
[43 97]
[44 96]
[46 95]
[47 94]
[51 93]
[52 92]
[53 91]
[54 90]
[55 89]
[56 88]
[57 87]
[58 65]
[59 64]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
