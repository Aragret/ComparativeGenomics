%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:12 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCUACUUCUCCAUAAUAUUCAUCCCUGUAGCAUUGUUCGUUACAUGGUCCAUCAUAGAAUUxxxxxxxxxxCACACCGCACAAUCCCCUAUCUAGGCCUUCUUACGAGCCAAAACCUGCCCCUACUCCUCCCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[119.41472626 262.48739624]
[119.41472626 247.48738098]
[119.41472626 232.48738098]
[119.41472626 217.48738098]
[119.41472626 202.48738098]
[119.41472626 187.48738098]
[119.41472626 172.48738098]
[119.41472626 157.48738098]
[119.41472626 142.48738098]
[119.41472626 127.48738098]
[112.90657043 123.75992584]
[93.38211060 112.57756042]
[80.44405365 120.16747284]
[67.50599670 127.75737762]
[71.36005402 142.35357666]
[71.13204193 157.44828796]
[66.83886719 171.92141724]
[58.79911804 184.69892883]
[47.60939789 194.83267212]
[34.10005951 201.57064819]
[19.27358055 204.41285706]
[4.23018694 203.14837646]
[-9.91380119 197.87104797]
[-22.10880661 188.97248840]
[-31.44987869 177.11302185]
[-37.24384689 163.17269897]
[-39.06076431 148.18598938]
[-36.76579666 133.26501465]
[-30.52925301 119.51698303]
[-20.81392097 107.96212006]
[-8.34074688 99.45785522]
[5.96468019 94.63526917]
[21.04080009 93.85222626]
[35.76886749 97.16683960]
[49.05596161 104.33312988]
[59.91608810 114.81932068]
[72.85414124 107.22941589]
[85.79219818 99.63950348]
[95.30056000 88.03816223]
[100.20211029 73.86160278]
[105.10366058 59.68504715]
[109.41124725 45.31686401]
[113.11740112 30.78192902]
[116.82356262 16.24699211]
[111.41439819 -1.32345891]
[124.08200836 -13.42848301]
[127.48498535 -28.03737640]
[130.88795471 -42.64626694]
[134.29093933 -57.25516129]
[122.48231506 -66.86337280]
[116.04262543 -80.58989716]
[116.20066071 -95.68940735]
[122.87151337 -109.16756439]
[134.68405151 -118.37481689]
[149.26239014 -121.52719116]
[152.66535950 -136.13607788]
[151.56323242 -145.27047729]
[156.29408264 -151.01196289]
[160.00024414 -165.54690552]
[158.62080383 -169.81991577]
[158.70533752 -173.88978577]
[160.00140381 -177.31062317]
[162.13508606 -179.76853943]
[164.66621399 -181.11047363]
[169.56776428 -195.28703308]
[174.46931458 -209.46359253]
[179.37086487 -223.64015198]
[166.29643250 -231.08151245]
[154.81211853 -240.79878235]
[145.30908203 -252.46098328]
[138.11097717 -265.67089844]
[133.46298218 -279.97860718]
[131.52339172 -294.89682007]
[132.35829163 -309.91738892]
[135.93922424 -324.52874756]
[142.14422607 -338.23321533]
[150.76196289 -350.56402588]
[161.49891663 -361.10122681]
[173.98939514 -369.48590088]
[187.80796814 -375.43246460]
[202.48397827 -378.73840332]
[217.51757812 -379.29107666]
[232.39672852 -377.07168579]
[246.61463928 -372.15585327]
[259.68707275 -364.71096802]
[271.16876221 -354.99060059]
[280.66867065 -343.32583618]
[287.86318970 -330.11398315]
[292.50735474 -315.80502319]
[294.44290161 -300.88629150]
[293.60397339 -285.86593628]
[290.01910400 -271.25555420]
[283.81039429 -257.55276489]
[275.18933105 -245.22425842]
[264.44952393 -234.68995667]
[251.95680237 -226.30865479]
[238.13662720 -220.36581421]
[223.45971680 -217.06384277]
[208.42596436 -216.51521301]
[193.54742432 -218.73860168]
[188.64587402 -204.56204224]
[183.74432373 -190.38548279]
[178.84277344 -176.20892334]
[174.53518677 -161.84074402]
[170.82902527 -147.30580139]
[167.27426147 -132.73310852]
[163.87127686 -118.12420654]
[175.55595398 -108.85415649]
[182.08387756 -95.37471008]
[182.11206055 -80.33608246]
[175.58135986 -66.72101593]
[163.73880005 -57.25313950]
[148.89982605 -53.85218430]
[145.49685669 -39.24328995]
[142.09387207 -24.63439751]
[138.69090271 -10.02550507]
[144.82318115 0.44838268]
[142.06088257 12.67902565]
[131.35850525 19.95315361]
[127.65234375 34.48809052]
[123.94618225 49.02302551]
[125.32155609 51.53612518]
[125.75108337 54.76250076]
[124.95141602 58.33214951]
[122.78294373 61.77725983]
[119.28022003 64.58660126]
[114.37866974 78.76316071]
[109.47711182 92.93971252]
[120.57523346 82.84854126]
[131.32029724 72.38223267]
[145.28646851 66.90993500]
[160.28163147 67.29058075]
[173.95217896 73.46443176]
[184.15237427 84.46243286]
[189.28120422 98.55834961]
[188.53367615 113.53971100]
[182.02709961 127.05505371]
[170.78274536 136.98301697]
[156.56552124 141.76533508]
[141.60610962 140.65112305]
[134.41471863 127.48738098]
[134.41471863 142.48738098]
[134.41471863 157.48738098]
[134.41471863 172.48738098]
[134.41471863 187.48738098]
[134.41471863 202.48738098]
[134.41471863 217.48738098]
[134.41471863 232.48738098]
[134.41471863 247.48738098]
[134.41471863 262.48739624]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[12 38]
[13 37]
[14 36]
[39 128]
[40 127]
[41 126]
[42 121]
[43 120]
[44 119]
[46 116]
[47 115]
[48 114]
[49 113]
[55 107]
[56 106]
[58 105]
[59 104]
[64 103]
[65 102]
[66 101]
[67 100]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
