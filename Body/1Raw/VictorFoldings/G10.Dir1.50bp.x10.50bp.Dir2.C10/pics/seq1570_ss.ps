%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:38 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGUCACCACCUCUUGCUCAGCCUAUAUACCGCCAUCUUCAGCAAACCCUGAUGAAGGCUACAxxxxxxxxxxCCUAGGCCUACCCGCCGCAGUACUGAUCAUUCUAUUUCCCCCUCUAUUGAUCCCCACCUCCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[92.50000000 246.39640808]
[92.50000000 231.39640808]
[92.50000000 216.39640808]
[92.50000000 201.39640808]
[92.50000000 186.39640808]
[92.50000000 171.39640808]
[92.50000000 156.39640808]
[92.50000000 141.39640808]
[92.50000000 126.39640808]
[92.50000000 111.39640808]
[87.30458069 97.32489014]
[77.55693054 85.92387390]
[67.80928040 74.52285004]
[52.29388809 73.14067078]
[42.57079697 61.43955612]
[43.98410797 46.65652084]
[34.23645782 35.25549698]
[29.94883156 33.92217255]
[26.67042160 31.50906563]
[24.62038803 28.47933960]
[23.83993721 25.31945419]
[24.20069122 22.47741318]
[15.43448448 10.30557728]
[6.66827679 -1.86625969]
[-3.71356726 -0.94926089]
[-13.66801453 -5.30730534]
[-20.58200455 -14.25928688]
[-34.48455811 -19.89124298]
[-48.38711548 -25.52320099]
[-62.28967285 -31.15515709]
[-76.19223022 -36.78711319]
[-68.46651459 -23.92968750]
[-67.47263336 -8.96265125]
[-73.43041229 4.80342627]
[-85.02204895 14.32361412]
[-99.68357849 17.49213600]
[-114.17200470 13.60814190]
[-125.28263092 3.53073716]
[-130.55787659 -10.51104927]
[-128.83091736 -25.41130447]
[-120.48372650 -37.87422943]
[-107.36263275 -45.14313889]
[-92.36797333 -45.60980988]
[-104.63034058 -54.24892807]
[-120.36808777 -55.87183762]
[-126.31629181 -69.52716827]
[-138.57865906 -78.16629028]
[-150.84103394 -86.80540466]
[-163.10339355 -95.44451904]
[-178.63067627 -92.49851227]
[-191.64605713 -101.46374512]
[-194.42774963 -117.02130890]
[-185.32540894 -129.94117737]
[-169.73930359 -132.55821228]
[-156.91639709 -123.31978607]
[-154.46427917 -107.70688629]
[-142.20190430 -99.06777191]
[-129.93954468 -90.42865753]
[-117.67717743 -81.78954315]
[-102.81651306 -80.78455353]
[-95.99121857 -66.51129150]
[-83.72885132 -57.87217712]
[-70.56027222 -50.68967056]
[-56.65771484 -45.05771255]
[-42.75515747 -39.42575455]
[-28.85260391 -33.79380035]
[-14.95004749 -28.16184235]
[-24.45058441 -39.76959229]
[-33.95112228 -51.37733841]
[-47.16884613 -58.46900558]
[-56.99186325 -69.80515289]
[-62.13053131 -83.89749908]
[-61.91020966 -98.89588165]
[-56.35981750 -112.83119965]
[-46.20806122 -123.87392426]
[-32.78773499 -130.57427979]
[-17.86075974 -132.05259705]
[-3.38686299 -128.11479187]
[8.73371220 -119.27784729]
[16.90968513 -106.70194244]
[20.06765366 -92.03813171]
[17.79301262 -77.21160126]
[10.38343906 -64.16774750]
[8.52585793 -49.28321075]
[6.66827679 -34.39867401]
[15.43448448 -46.57051086]
[24.20069122 -58.74234772]
[21.41636086 -74.29943848]
[30.51650238 -87.22085571]
[46.10216141 -89.84054565]
[58.92664337 -80.60430145]
[61.38140869 -64.99182129]
[52.01009369 -52.26570511]
[36.37252808 -49.97613907]
[27.60632133 -37.80430222]
[18.84011459 -25.63246727]
[18.84011459 -10.63246727]
[27.60632133 1.53936994]
[36.37252808 13.71120644]
[45.63747787 25.50784683]
[55.38512802 36.90886688]
[70.20819855 37.81011200]
[80.25611115 49.23350906]
[79.21030426 64.77519989]
[88.95795441 76.17621613]
[98.70560455 87.57723999]
[134.15007019 77.97858429]
[148.79357910 81.22940826]
[163.43707275 84.48023987]
[171.10313416 71.43850708]
[182.42546082 61.40554810]
[196.29478455 55.36428452]
[211.35235596 53.90657806]
[226.12297058 57.17523956]
[239.15956116 64.85003662]
[249.18492126 76.17907715]
[255.21688843 90.05245209]
[256.66452026 105.11099243]
[253.38595581 119.87940979]
[245.70242310 132.91085815]
[234.36666870 142.92863464]
[220.48925781 148.95130920]
[205.42974854 150.38882446]
[190.66352844 147.10037231]
[177.63723755 139.40811157]
[167.62705994 128.06564331]
[161.61369324 114.18420410]
[160.18624878 99.12374115]
[145.54275513 95.87290955]
[130.89924622 92.62208557]
[125.04943848 97.31566620]
[136.34178162 107.18900299]
[147.63414001 117.06233978]
[159.72576904 125.93885040]
[160.04768372 140.93539429]
[148.34809875 150.32260132]
[133.77770996 146.75839233]
[127.73257446 133.03030396]
[120.54119110 119.86656952]
[113.34981537 106.70282745]
[107.50000000 111.39640808]
[107.50000000 126.39640808]
[107.50000000 141.39640808]
[107.50000000 156.39640808]
[107.50000000 171.39640808]
[107.50000000 186.39640808]
[107.50000000 201.39640808]
[107.50000000 216.39640808]
[107.50000000 231.39640808]
[107.50000000 246.39640808]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[11 106]
[12 105]
[13 104]
[16 101]
[17 100]
[22 99]
[23 98]
[24 97]
[27 67]
[28 66]
[29 65]
[30 64]
[31 63]
[43 62]
[44 61]
[46 59]
[47 58]
[48 57]
[49 56]
[85 96]
[86 95]
[87 94]
[107 130]
[108 129]
[109 128]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
