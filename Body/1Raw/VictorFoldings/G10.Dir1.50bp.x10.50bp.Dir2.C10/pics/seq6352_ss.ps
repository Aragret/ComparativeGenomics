%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:30 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGAAUAAUCUUCUUCAUAGUAAUACCCAUCAUAAUCGGAGGCUUUGGCAACUGACUAGUUCCxxxxxxxxxxUCAAUUGGCCACCAAUGGUACUGAACCUACGAGUACACCGACUACGGCGGACUAAUCUUCCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[82.65831757 505.99468994]
[82.65831757 490.99468994]
[82.65831757 475.99468994]
[82.65831757 460.99468994]
[82.65831757 445.99468994]
[82.65831757 430.99468994]
[82.65831757 415.99468994]
[82.65831757 400.99468994]
[82.65831757 385.99468994]
[82.65831757 370.99468994]
[67.22119141 368.05075073]
[52.63895035 362.17956543]
[39.46118164 353.60052490]
[28.18490028 342.63513184]
[19.23579788 329.69491577]
[12.95218182 315.26605225]
[9.57217979 299.89096069]
[9.22472000 284.14807129]
[11.92461395 268.63000488]
[17.57193184 253.92120361]
[25.95569801 240.57597351]
[36.76178360 229.09764099]
[49.58465576 219.91944885]
[63.94261932 213.38833618]
[79.29589081 209.75173950]
[78.67191315 194.76472473]
[78.04793549 179.77770996]
[77.42396545 164.79067993]
[69.78107452 177.69752502]
[58.05463028 187.05114746]
[43.77170181 191.63351440]
[28.79229355 190.84785461]
[15.06709385 184.79649353]
[4.38347292 174.26748657]
[-1.86729348 160.63194275]
[-2.87119842 145.66557312]
[1.50249183 131.31736755]
[10.68421268 119.45584106]
[23.47827339 111.62564087]
[38.21856308 108.84646606]
[52.98553085 111.48023224]
[65.85614014 119.18395996]
[75.15431213 130.95443726]
[79.66897583 145.25706482]
[83.67671967 130.80238342]
[87.68446350 116.34768677]
[73.55996704 96.06681824]
[88.67726898 69.00921631]
[85.57894897 54.33268738]
[81.99832916 50.35792160]
[80.49619293 45.85281754]
[80.91956329 41.71489334]
[82.77540588 38.64514542]
[80.59856415 23.80394173]
[78.42173004 8.96273613]
[76.24489594 -5.87846947]
[71.19613647 -20.00327301]
[63.47204971 -32.86167526]
[55.74796677 -45.72007751]
[48.02388000 -58.57847977]
[33.42721558 -66.05306244]
[32.87240601 -82.44281769]
[46.93019485 -90.88738251]
[61.13913345 -82.69969940]
[60.88228226 -66.30256653]
[68.60636902 -53.44416046]
[76.33045197 -40.58575821]
[84.05454254 -27.72735786]
[84.18524933 -42.72678757]
[88.65174866 -57.04636765]
[97.07167053 -69.46026611]
[108.72422791 -78.90579224]
[122.61190033 -84.57434845]
[137.54582214 -85.98068237]
[152.24758911 -83.00440216]
[165.45863342 -75.90029144]
[176.04801941 -65.27650452]
[183.10923767 -52.04248810]
[186.03782654 -37.33115387]
[184.58306885 -22.40186501]
[178.86950684 -8.53264904]
[169.38623047 3.08921313]
[156.94509888 11.46882915]
[142.61109924 15.88885880]
[127.61132050 15.97092342]
[113.22982788 11.70799828]
[100.69773865 3.46501207]
[91.08609772 -8.05530643]
[93.26293182 6.78589916]
[95.43977356 21.62710381]
[97.61660767 36.46831131]
[100.25547028 51.23436737]
[103.35379791 65.91088867]
[109.74247742 69.83960724]
[117.60009766 57.06236649]
[130.37721252 64.92018890]
[122.51982880 77.69702911]
[128.90850830 81.62574005]
[143.40411377 77.76858521]
[157.89970398 73.91142273]
[172.39529419 70.05426788]
[186.89089966 66.19710541]
[191.51579285 51.47929764]
[203.37817383 41.61585617]
[218.69279480 39.75417328]
[232.57283020 46.48830414]
[240.58918762 59.66940689]
[240.18388367 75.09144592]
[231.48626709 87.83330536]
[217.27169800 93.82909393]
[202.07598877 91.16558838]
[190.74806213 80.69270325]
[176.25245667 84.54985809]
[161.75686646 88.40702057]
[147.26126099 92.26418304]
[132.76567078 96.12133789]
[120.88356018 116.68598938]
[102.13914490 120.35543060]
[98.13140869 134.81011963]
[94.12366486 149.26480103]
[92.41098022 164.16670227]
[93.03495789 179.15373230]
[93.65893555 194.14074707]
[94.28291321 209.12776184]
[108.46562958 211.13121033]
[122.07344818 215.59078979]
[134.68460083 222.36695862]
[145.90847778 231.24838257]
[155.39764404 241.95855713]
[162.85868835 254.16439819]
[168.06120300 267.48657227]
[170.84497070 281.51135254]
[171.12489319 295.80343628]
[168.89352417 309.91937256]
[164.22132874 323.42147827]
[157.25445557 335.89126587]
[148.21011353 346.94256592]
[137.36987305 356.23330688]
[125.07083893 363.47619629]
[111.69519806 368.44769287]
[97.65831757 370.99468994]
[97.65831757 385.99468994]
[97.65831757 400.99468994]
[97.65831757 415.99468994]
[97.65831757 430.99468994]
[97.65831757 445.99468994]
[97.65831757 460.99468994]
[97.65831757 475.99468994]
[97.65831757 490.99468994]
[97.65831757 505.99468994]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[25 124]
[26 123]
[27 122]
[28 121]
[44 120]
[45 119]
[46 118]
[48 93]
[49 92]
[53 91]
[54 90]
[55 89]
[56 88]
[57 68]
[58 67]
[59 66]
[60 65]
[98 116]
[99 115]
[100 114]
[101 113]
[102 112]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
