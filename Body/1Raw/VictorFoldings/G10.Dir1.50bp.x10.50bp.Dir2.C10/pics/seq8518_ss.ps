%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:28 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGGCCAUCCCCUUAUGAGCGGGCACAGUGAUUAUAGGCUUUCGCUCUAAGAUUAAAAAUGCCCUxxxxxxxxxxUAACACUAUUCUCACCAGACCUCCUAGGCGACCCAGACAAUUAUACCCUAGCCAACCCCUUACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[74.62765503 514.06561279]
[77.20834351 494.85647583]
[77.51235199 479.85955811]
[77.81635284 464.86264038]
[78.12035370 449.86572266]
[78.42436218 434.86880493]
[78.72836304 419.87188721]
[79.03237152 404.87496948]
[79.33637238 389.87805176]
[79.64038086 374.88113403]
[79.94438171 359.88421631]
[65.96740723 357.05477905]
[52.69997406 351.81652832]
[40.55384445 344.33068848]
[29.90620804 334.82821655]
[21.08798027 323.60281372]
[14.37351608 311.00161743]
[9.97207642 297.41473389]
[8.02130508 283.26293945]
[8.58292294 268.98477173]
[11.64077663 255.02291870]
[17.10130501 241.81045532]
[24.79639053 229.75744629]
[34.48854828 219.23823547]
[45.87824631 210.57975769]
[58.61316681 204.05142212]
[72.29909515 199.85673523]
[86.51213837 198.12695312]
[87.42365265 183.15466309]
[88.33516693 168.18238831]
[74.35708618 164.24443054]
[61.50922012 157.47491455]
[50.35783005 148.17221069]
[41.39440918 136.74630737]
[35.01401901 123.70082092]
[31.49788094 109.61072540]
[31.00096130 95.09703827]
[33.54516602 80.79944611]
[39.01835632 67.34811401]
[47.17930222 55.33591461]
[57.66831589 45.29227829]
[70.02309418 37.65987396]
[83.69909668 32.77510071]
[98.09355927 30.85325813]
[99.30832672 15.90252781]
[97.01526642 11.08230495]
[96.85713196 6.34573221]
[98.43416595 2.50498271]
[101.07845306 0.08935823]
[103.19949341 -14.75992393]
[105.32053375 -29.60920525]
[107.44158173 -44.45848846]
[105.55074310 -53.45659637]
[109.75903320 -59.58602524]
[112.18058777 -74.38927460]
[114.60214996 -89.19252014]
[100.18059540 -93.38489532]
[86.36953735 -99.28507996]
[73.37039185 -106.80702209]
[61.37271881 -115.84102631]
[50.55148315 -126.25534821]
[41.06448746 -137.89813232]
[33.05007935 -150.59956360]
[26.62513542 -164.17445374]
[21.88334846 -178.42481995]
[18.89386749 -193.14283752]
[17.70028877 -208.11390686]
[18.32001877 -223.11967468]
[20.74402046 -237.94134521]
[24.93694115 -252.36274719]
[30.83763885 -266.17358398]
[38.36006546 -279.17242432]
[47.39451599 -291.16976929]
[57.80924606 -301.99063110]
[69.45237732 -311.47717285]
[82.15412140 -319.49111938]
[95.72924805 -325.91555786]
[109.97978210 -330.65679932]
[124.69792175 -333.64572144]
[139.66903687 -334.83874512]
[154.67478943 -334.21847534]
[169.49635315 -331.79391479]
[183.91760254 -327.60043335]
[197.72821045 -321.69921875]
[210.72679138 -314.17633057]
[222.72378540 -305.14141846]
[233.54425049 -294.72628784]
[243.03036499 -283.08279419]
[251.04382324 -270.38076782]
[257.46777344 -256.80538940]
[262.20846558 -242.55467224]
[265.19686890 -227.83642578]
[266.38931274 -212.86526489]
[265.76846313 -197.85954285]
[263.34335327 -183.03807068]
[259.14935303 -168.61697388]
[253.24761963 -154.80657959]
[245.72422791 -141.80828857]
[236.68887329 -129.81163025]
[226.27334595 -118.99155426]
[214.62950134 -109.50586700]
[201.92715454 -101.49288177]
[188.35154724 -95.06946564]
[174.10066223 -90.32927704]
[159.38229370 -87.34144592]
[144.41110229 -86.14954376]
[129.40539551 -86.77095795]
[126.98383331 -71.96771240]
[124.56227875 -57.16447067]
[122.29086304 -42.33744431]
[120.16982269 -27.48816299]
[118.04877472 -12.63888073]
[115.92773438 2.21040130]
[114.25905609 17.11729622]
[113.04428864 32.06802750]
[127.76948547 36.64574051]
[141.11466980 44.37186050]
[152.41665649 54.86243057]
[161.11378479 67.59612274]
[166.77384949 81.94013214]
[169.11558533 97.18163300]
[168.02258301 112.56318665]
[163.54920959 127.32041931]
[155.91772461 140.71995544]
[145.50740051 152.09590149]
[132.83558655 160.88293457]
[118.53199005 166.64436340]
[103.30744171 169.09390259]
[102.39593506 184.06617737]
[101.48442078 199.03846741]
[116.77000427 202.97096252]
[131.00395203 209.78027344]
[143.65081787 219.20829773]
[154.23518372 230.89848328]
[162.35960388 244.40928650]
[167.71951294 259.23080444]
[170.11462402 274.80413818]
[169.45640564 290.54232788]
[165.77140808 305.85256958]
[159.20011902 320.15847778]
[149.99165344 332.92190552]
[138.49435425 343.66299438]
[125.14248657 351.97839355]
[110.43997955 357.55630493]
[94.94129944 360.18823242]
[94.63729858 375.18515015]
[94.33329010 390.18206787]
[94.02928925 405.17898560]
[93.72528839 420.17590332]
[93.42127991 435.17282104]
[93.11727905 450.16973877]
[92.81327057 465.16665649]
[92.50926971 480.16357422]
[92.20526123 495.16049194]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 154]
[3 153]
[4 152]
[5 151]
[6 150]
[7 149]
[8 148]
[9 147]
[10 146]
[11 145]
[28 130]
[29 129]
[30 128]
[44 115]
[45 114]
[49 113]
[50 112]
[51 111]
[52 110]
[54 109]
[55 108]
[56 107]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
