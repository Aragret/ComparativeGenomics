%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:10 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCUCCCUCUCUCCUACUCCUGCUCGCAUCUGCUAUAGUGGAGGCCGGAGCAGGAACAGGUUxxxxxxxxxxAUGGCAAGCCAACGCCACUUAUCCAGUGAACCACUAUCACGAAAAAAACUCUACCUCUCUCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[92.50000000 326.81619263]
[92.50000000 311.81619263]
[92.50000000 296.81619263]
[92.50000000 281.81619263]
[92.50000000 266.81619263]
[92.50000000 251.81617737]
[92.50000000 236.81617737]
[92.50000000 221.81617737]
[92.50000000 206.81617737]
[92.50000000 191.81617737]
[78.54838562 189.58955383]
[65.10132599 185.25575256]
[52.47509766 178.91668701]
[40.96667480 170.72148132]
[30.84674072 160.86285400]
[22.35332489 149.57272339]
[15.68619347 137.11660767]
[11.00216007 123.78749847]
[8.41139507 109.89889526]
[7.97483587 95.77746582]
[9.70274925 81.75535583]
[-4.70946646 77.59746552]
[-19.12168312 73.43957520]
[-32.83843613 80.82120514]
[-47.39524460 76.39920807]
[-54.34796143 63.27688599]
[-68.76017761 59.11899948]
[-83.17239380 54.96111298]
[-97.58460999 50.80322266]
[-111.99682617 46.64533615]
[-126.40904236 42.48744965]
[-140.82125854 38.32956314]
[-155.23347473 34.17167282]
[-169.72906494 30.31451416]
[-184.30177307 26.75975227]
[-199.54244995 31.00622368]
[-210.07354736 20.47316933]
[-224.64625549 16.91840744]
[-239.21894836 13.36364555]
[-253.79165649 9.80888367]
[-268.36434937 6.25412178]
[-283.94467163 11.37130547]
[-295.98437500 0.23677625]
[-292.09805298 -15.69521713]
[-276.28359985 -20.03520584]
[-264.80960083 -8.31858063]
[-250.23689270 -4.76381922]
[-235.66418457 -1.20905721]
[-221.09149170 2.34570479]
[-206.51878357 5.90046644]
[-192.32044983 1.39973617]
[-180.74700928 12.18704987]
[-166.17431641 15.74181175]
[-161.65086365 14.03479671]
[-156.00466919 15.19747353]
[-151.07559204 19.75945854]
[-136.66337585 23.91734505]
[-122.25115967 28.07523346]
[-107.83894348 32.23311996]
[-93.42672729 36.39100647]
[-79.01451111 40.54889679]
[-64.60229492 44.70678329]
[-50.19007492 48.86466980]
[-37.31604004 41.46231842]
[-22.64077377 45.47369766]
[-14.96379566 59.02736282]
[-0.55157924 63.18524933]
[13.86063671 67.34313965]
[18.47964096 57.09438705]
[24.31256485 47.48454666]
[31.27255249 38.65671539]
[39.25596237 30.74234772]
[48.14391327 23.85929680]
[57.80405045 18.11005783]
[68.09252930 13.58024406]
[78.85614777 10.33730888]
[89.93461609 8.42954254]
[101.16297150 7.88535357]
[112.37400818 8.71284485]
[123.40077972 10.89969540]
[134.07908630 14.41334057]
[144.24992371 19.20145798]
[152.50221252 6.67549610]
[160.75450134 -5.85046577]
[169.00679016 -18.37642860]
[163.41571045 -32.85121155]
[167.43301392 -47.83923340]
[179.51397705 -57.57730103]
[195.01321411 -58.32092285]
[207.97097778 -49.78416443]
[213.40470886 -35.24958038]
[209.22505188 -20.30601883]
[197.03915405 -10.69958019]
[181.53276062 -10.12413883]
[173.28047180 2.40182328]
[165.02818298 14.92778492]
[156.77589417 27.45374680]
[179.93922424 54.21592331]
[191.30207825 87.73664856]
[206.28179932 86.95680237]
[219.66105652 78.51250458]
[232.77337646 85.57765198]
[247.75308228 84.79780579]
[253.58859253 81.47300720]
[259.35134888 81.62156677]
[263.36959839 84.31028748]
[278.36877441 84.15425110]
[293.36795044 83.99821472]
[308.36715698 83.84217834]
[318.15316772 71.64514160]
[333.49981689 68.64271545]
[347.16085815 76.25255585]
[352.68600464 90.88153839]
[347.46640015 105.62229156]
[333.96661377 113.51469421]
[318.56085205 110.83218384]
[308.52319336 98.84136963]
[293.52398682 98.99740601]
[278.52481079 99.15344238]
[263.52563477 99.30947876]
[248.53292847 99.77751923]
[233.55320740 100.55736542]
[221.24540710 108.94589233]
[207.06164551 101.93651581]
[192.08192444 102.71636200]
[191.45144653 111.09474945]
[190.06022644 119.38084412]
[187.91983032 127.50571442]
[185.04806519 135.40177917]
[181.46884155 143.00335693]
[177.21191406 150.24720764]
[172.31268311 157.07307434]
[166.81193542 163.42417908]
[160.75540161 169.24768066]
[154.19346619 174.49514771]
[147.18074036 179.12294006]
[139.77552795 183.09252930]
[132.03944397 186.37091064]
[124.03683472 188.93081665]
[115.83427429 190.75096130]
[107.50000000 191.81617737]
[107.50000000 206.81617737]
[107.50000000 221.81617737]
[107.50000000 236.81617737]
[107.50000000 251.81617737]
[107.50000000 266.81619263]
[107.50000000 281.81619263]
[107.50000000 296.81619263]
[107.50000000 311.81619263]
[107.50000000 326.81619263]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[21 68]
[22 67]
[23 66]
[26 63]
[27 62]
[28 61]
[29 60]
[30 59]
[31 58]
[32 57]
[33 56]
[34 53]
[35 52]
[37 50]
[38 49]
[39 48]
[40 47]
[41 46]
[82 97]
[83 96]
[84 95]
[85 94]
[99 125]
[100 124]
[102 122]
[103 121]
[106 120]
[107 119]
[108 118]
[109 117]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
