%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:10 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGGCCCACCAUAAUUACCCCCAUACUCCUUACACUAUUCCUCAUCACCCAACUAAAAAUAUUxxxxxxxxxxCACUCCUAAACACAUCCGUAUUACUCGCAUCAGGAGUAUCAAUCACCUGAGCUCACCAUACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[92.50000000 248.89302063]
[92.50000000 233.89302063]
[92.50000000 218.89302063]
[92.50000000 203.89302063]
[92.50000000 188.89302063]
[92.50000000 173.89302063]
[92.50000000 158.89302063]
[92.50000000 143.89302063]
[92.50000000 128.89302063]
[92.50000000 113.89301300]
[87.59844971 99.71645355]
[78.33349609 87.91981506]
[65.95179749 96.39659119]
[53.04219437 104.04541016]
[39.65997314 110.83351898]
[25.86244011 116.73184967]
[11.70867920 121.71514893]
[-2.74070334 125.76207733]
[-17.42383003 128.85530090]
[-32.27782822 130.98156738]
[-47.23908615 132.13179016]
[-62.24353790 132.30102539]
[-77.22693634 131.48857117]
[-92.12511444 129.69787598]
[-106.87427521 126.93663025]
[-121.41126251 123.21665192]
[-135.67382812 118.55387115]
[-149.60089111 112.96825409]
[-163.13281250 106.48371887]
[-176.21165466 99.12802887]
[-188.78141785 90.93269348]
[-200.78825378 81.93280029]
[-212.18075562 72.16688538]
[-222.91014099 61.67677307]
[-232.93048096 50.50738525]
[-242.19883728 38.70654678]
[-250.67553711 26.32479477]
[-258.32427979 13.41514683]
[-265.11230469 0.03288615]
[-271.01055908 -13.76468182]
[-275.99377441 -27.91847229]
[-280.04061890 -42.36787796]
[-283.13375854 -57.05102539]
[-285.25994873 -71.90503693]
[-286.41006470 -86.86630249]
[-286.57922363 -101.87075043]
[-285.76666260 -116.85414124]
[-283.97589111 -131.75230408]
[-281.21456909 -146.50144958]
[-277.49450684 -161.03842163]
[-272.83163452 -175.30096436]
[-267.24594116 -189.22799683]
[-260.76132202 -202.75987244]
[-253.40554810 -215.83868408]
[-245.21012878 -228.40838623]
[-236.21017456 -240.41516113]
[-226.44418335 -251.80761719]
[-215.95401001 -262.53695679]
[-204.78456116 -272.55722046]
[-192.98367310 -281.82550049]
[-180.60186768 -290.30212402]
[-167.69218445 -297.95077515]
[-154.30987549 -304.73873901]
[-140.51228333 -310.63690186]
[-126.35845184 -315.62005615]
[-111.90902710 -319.66680908]
[-97.22586060 -322.75985718]
[-82.37184143 -324.88595581]
[-67.41056824 -326.03598022]
[-52.40611267 -326.20504761]
[-37.42272568 -325.39242554]
[-22.52457047 -323.60156250]
[-7.77544117 -320.84011841]
[6.76150227 -317.11996460]
[21.02401161 -312.45703125]
[34.95100784 -306.87124634]
[48.48286057 -300.38653564]
[61.56161499 -293.03070068]
[74.13127136 -284.83523560]
[86.13800049 -275.83517456]
[97.53039551 -266.06915283]
[108.25965881 -255.57890320]
[118.27986145 -244.40939331]
[127.54808044 -232.60844421]
[136.02462769 -220.22659302]
[143.67321777 -207.31684875]
[150.46109009 -193.93450928]
[156.35919189 -180.13687134]
[161.34223938 -165.98303223]
[165.38890076 -151.53356934]
[168.48187256 -136.85038757]
[170.60787964 -121.99636078]
[171.75782776 -107.03507996]
[171.92680359 -92.03062439]
[171.11407471 -77.04724121]
[169.32312012 -62.14909744]
[166.56161499 -47.39998245]
[162.84138489 -32.86306000]
[158.17834473 -18.60058022]
[152.59248352 -4.67361450]
[146.10771179 8.85819721]
[138.75178528 21.93691063]
[130.55622864 34.50651932]
[121.55612183 46.51319885]
[111.79000854 57.90552902]
[101.29970551 68.63473511]
[90.13014221 78.65486908]
[99.39508820 90.45150757]
[112.22177124 78.33988953]
[135.63154602 81.44573975]
[150.04376221 85.60362244]
[164.45597839 89.76151276]
[178.86819458 93.91940308]
[193.28041077 98.07728577]
[203.82499695 86.98357391]
[218.32098389 82.07186890]
[233.43731689 84.47084808]
[245.70036316 93.62924194]
[252.29217529 107.44252014]
[251.69799805 122.73648834]
[244.05436707 135.99670410]
[231.11773682 144.17608643]
[215.86083984 145.39503479]
[201.78961182 139.37348938]
[192.13751221 127.49511719]
[189.12252808 112.48950195]
[174.71031189 108.33161926]
[160.29809570 104.17372894]
[145.88587952 100.01583862]
[131.47366333 95.85795593]
[125.48024750 100.36672211]
[136.13476562 110.92519379]
[146.78927612 121.48366547]
[159.00498962 130.18861389]
[159.19905090 145.18736267]
[147.21261597 154.20544434]
[132.85501099 149.86274719]
[127.87618256 135.71173096]
[120.68479919 122.54798889]
[113.49341583 109.38424683]
[107.50000000 113.89301300]
[107.50000000 128.89302063]
[107.50000000 143.89302063]
[107.50000000 158.89302063]
[107.50000000 173.89302063]
[107.50000000 188.89302063]
[107.50000000 203.89302063]
[107.50000000 218.89302063]
[107.50000000 233.89302063]
[107.50000000 248.89302063]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[11 108]
[12 107]
[110 130]
[111 129]
[112 128]
[113 127]
[114 126]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
