%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:41 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCUAGUUAUUAUCGAAACCAUCAGCCUACUCAUUCAACCAAUAGCCCUGGCCGUACGCCUAxxxxxxxxxxAAGGCCACCACACACCACCUGUCCAAAAAGGCCUUCGAUACGGGAUAAUCCUAUUUAUUACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[111.05229187 422.49945068]
[111.05229187 407.49945068]
[111.05229187 392.49945068]
[111.05229187 377.49945068]
[111.05229187 362.49945068]
[111.05229187 347.49945068]
[111.05229187 332.49945068]
[111.05229187 317.49945068]
[111.05229187 302.49945068]
[111.05229187 287.49945068]
[93.68620300 281.20144653]
[79.98392487 268.76400757]
[72.01083374 252.02871704]
[70.98130035 233.48738098]
[77.07377625 215.91110229]
[89.40045929 201.93608093]
[106.13656616 193.66821289]
[104.57898712 178.74929810]
[103.02140045 163.83038330]
[101.46382141 148.91148376]
[99.90624237 133.99256897]
[98.34866333 119.07365417]
[86.36182404 110.05612183]
[71.59577179 112.69499207]
[56.82971573 115.33385468]
[54.25647736 130.27220154]
[46.72651672 143.42800903]
[35.14910889 153.21266174]
[20.92228317 158.44461060]
[5.76399994 158.49206543]
[-8.49530602 153.34930420]
[-20.13375282 143.63734436]
[-27.74594307 130.52893066]
[-30.41266632 115.60698700]
[-27.81190300 100.67340851]
[-20.25770760 87.53149414]
[-8.66228867 77.76818848]
[5.57415390 72.56246948]
[20.73250008 72.54294586]
[34.98230362 77.71198273]
[46.60283279 87.44538116]
[54.19085312 100.56779480]
[68.95690918 97.92893219]
[83.72296143 95.29006958]
[85.42445374 87.98561859]
[88.82743073 73.37673187]
[90.52891541 66.07228088]
[78.44892883 57.17993546]
[66.36894226 48.28758240]
[51.21623611 52.15146255]
[37.14743042 45.32484436]
[30.80538368 31.03105354]
[35.18461609 16.01918030]
[48.21738815 7.37737179]
[63.75002289 9.18602562]
[74.44848633 20.59115028]
[75.26129150 36.20759583]
[87.34127808 45.09994507]
[99.42127228 53.99229431]
[114.28431702 51.96995926]
[123.54926300 40.17332077]
[132.81420898 28.37668037]
[142.07916260 16.58003998]
[151.34411621 4.78340101]
[160.48583984 -7.10897875]
[169.50337219 -19.09581184]
[155.35017395 -14.12724018]
[140.36741638 -14.84634686]
[126.75510406 -21.14754105]
[116.51200104 -32.10558701]
[111.14214325 -46.11146927]
[111.43402100 -61.10862732]
[117.34476471 -74.89496613]
[128.00648499 -85.44616699]
[141.85365295 -91.21294403]
[156.85304260 -91.34854126]
[170.80221558 -85.83304596]
[181.65293884 -75.47631836]
[187.81195068 -61.79909515]
[188.37490845 -46.80966187]
[183.25949097 -32.70956039]
[195.33947754 -41.60190964]
[207.41946411 -50.49425888]
[219.49945068 -59.38660812]
[231.57943726 -68.27896118]
[243.65942383 -77.17131042]
[240.16438293 -93.92698669]
[244.29998779 -110.47940826]
[255.19458008 -123.53763580]
[270.63760376 -130.52700806]
[287.52813721 -130.09669495]
[302.49734497 -122.38050842]
[314.19696045 -131.76766968]
[325.89657593 -141.15483093]
[329.06771851 -156.88136292]
[343.40557861 -164.07891846]
[357.91140747 -157.22616577]
[361.45758057 -141.57994080]
[351.32376099 -129.14268494]
[335.28375244 -129.45521545]
[323.58410645 -120.06804657]
[311.88449097 -110.68088531]
[315.84872437 -98.23840332]
[315.32754517 -85.15800476]
[310.36166382 -73.01104736]
[301.52706909 -63.26422882]
[289.86825562 -57.10247040]
[276.77484131 -55.28491974]
[263.81585693 -58.05146027]
[252.55177307 -65.09132385]
[240.47178650 -56.19897079]
[228.39179993 -47.30662155]
[216.31181335 -38.41427231]
[204.23182678 -29.52192116]
[192.15184021 -20.62957191]
[181.49020386 -10.07828140]
[172.47268677 1.90855098]
[170.95507812 9.19158077]
[163.14074707 14.04835033]
[153.87580872 25.84498978]
[144.61085510 37.64162827]
[135.34590149 49.43827057]
[126.08095551 61.23490906]
[113.26757050 117.51607513]
[114.82514954 132.43498230]
[116.38273621 147.35389709]
[117.94031525 162.27281189]
[119.49789429 177.19172668]
[121.05547333 192.11064148]
[132.63922119 194.19595337]
[143.36360168 199.01669312]
[152.59391785 206.28123474]
[159.78540039 215.55354309]
[164.51541138 226.27926636]
[166.50822449 237.81892395]
[165.65115356 249.48606873]
[162.00082397 260.58804321]
[155.77957153 270.46716309]
[147.36180115 278.53961182]
[137.25157166 284.33001709]
[126.05229187 287.49945068]
[126.05229187 302.49945068]
[126.05229187 317.49945068]
[126.05229187 332.49945068]
[126.05229187 347.49945068]
[126.05229187 362.49945068]
[126.05229187 377.49945068]
[126.05229187 392.49945068]
[126.05229187 407.49945068]
[126.05229187 422.49945068]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[17 129]
[18 128]
[19 127]
[20 126]
[21 125]
[22 124]
[23 44]
[24 43]
[25 42]
[47 59]
[48 58]
[49 57]
[60 123]
[61 122]
[62 121]
[63 120]
[64 119]
[65 117]
[66 116]
[81 115]
[82 114]
[83 113]
[84 112]
[85 111]
[86 110]
[92 102]
[93 101]
[94 100]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
