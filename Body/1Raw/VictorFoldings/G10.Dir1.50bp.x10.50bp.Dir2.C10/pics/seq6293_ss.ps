%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:11 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCGCAUGAGCUGGAGUCCUAGGCACAGCUCUAAGCCUCCUUAUUCGAGCCGAGCUGGGCCAGxxxxxxxxxxCCGAUUGAAGCCCCCAUUCGUAUAAUAAUUACAUCACAAGACGUCUUGCACUCAUGAGCUGCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[73.92228699 265.19564819]
[73.92228699 250.19563293]
[73.92228699 235.19563293]
[73.92228699 220.19563293]
[73.92228699 205.19563293]
[73.92228699 190.19563293]
[73.92228699 175.19563293]
[73.92228699 160.19563293]
[73.92228699 145.19563293]
[73.92228699 130.19563293]
[71.43489838 117.35843658]
[73.77856445 106.24060059]
[79.58156586 98.38874817]
[87.04814911 94.65871429]
[94.25181580 95.12344360]
[87.98241425 81.49645996]
[81.71300507 67.86948395]
[72.55107117 55.99266052]
[60.96202087 46.46932220]
[49.37297440 36.94598770]
[33.85465240 38.29485321]
[22.23737144 28.47174454]
[21.04706764 13.66908264]
[9.45802021 4.14574528]
[-2.13102841 -5.37759209]
[-13.72007656 -14.90092945]
[-26.39159203 -22.92792702]
[-39.95348740 -29.33690262]
[-49.11176682 -30.18644142]
[-53.72597122 -36.01921844]
[-67.15341949 -42.70529556]
[-80.58087158 -49.39136887]
[-96.38308716 -48.61648941]
[-104.32726288 -61.21567154]
[-117.75471497 -67.90174866]
[-131.18215942 -74.58782196]
[-144.60961914 -81.27389526]
[-158.03706360 -87.95996857]
[-171.46450806 -94.64604950]
[-185.39523315 -100.20798492]
[-199.73529053 -104.60828400]
[-214.07534790 -109.00858307]
[-228.41540527 -113.40888214]
[-244.26815796 -109.21094513]
[-255.63658142 -121.03002930]
[-250.82583618 -136.70768738]
[-234.78480530 -140.11607361]
[-224.01510620 -127.74894714]
[-209.67504883 -123.34864807]
[-195.33499146 -118.94834900]
[-180.99493408 -114.54804230]
[-188.45263672 -127.56275177]
[-186.99377441 -142.49163818]
[-177.15760803 -153.81637573]
[-162.57997131 -157.35087585]
[-148.64936829 -151.78863525]
[-140.51513672 -139.18568420]
[-141.18402100 -124.20060730]
[-150.40875244 -112.37249756]
[-164.77844238 -108.07349396]
[-151.35098267 -101.38742065]
[-137.92353821 -94.70134735]
[-124.49608612 -88.01526642]
[-111.06864166 -81.32919312]
[-97.64118958 -74.64311981]
[-82.79939270 -75.89623260]
[-73.89479828 -62.81882095]
[-60.46734619 -56.13274384]
[-47.03989792 -49.44667053]
[-33.54451370 -42.89879990]
[-19.98261642 -36.48982239]
[-27.30278397 -49.58238602]
[-28.33598137 -64.54676056]
[-22.88461685 -78.52111816]
[-11.99122810 -88.83295441]
[2.26090384 -93.51021576]
[17.14615822 -91.65840149]
[29.81783295 -83.63165283]
[37.85256195 -70.96504211]
[39.71376038 -56.08095551]
[35.04548645 -41.82587814]
[24.74051094 -30.92599297]
[10.76959324 -25.46582222]
[-4.19673920 -26.48997879]
[7.39230919 -16.96664047]
[18.98135757 -7.44330311]
[30.57040596 2.08003449]
[45.32305145 0.37854224]
[57.21165848 9.87147045]
[58.89631271 25.35693741]
[70.48535919 34.88027573]
[82.07440948 44.40361404]
[77.04396057 30.27227783]
[75.77001953 15.32647419]
[78.33624268 0.54762006]
[84.57411194 -13.09382439]
[94.07401276 -24.70208931]
[106.21214294 -33.51491165]
[120.19143677 -38.95360184]
[135.09394836 -40.66101837]
[149.94108582 -38.52504349]
[163.75791931 -32.68594360]
[175.63716125 -23.52713776]
[184.79875183 -11.65004730]
[190.64108276 2.16541719]
[192.78053284 17.01205826]
[191.07661438 31.91496468]
[185.64120483 45.89553452]
[176.83122253 58.03572845]
[165.22518921 67.53835297]
[151.58520508 73.77941895]
[136.80696106 76.34909821]
[121.86085510 75.07866669]
[107.72834015 70.05152893]
[95.33998871 61.60007858]
[101.60939026 75.22705841]
[107.87879181 88.85403442]
[118.85959625 99.07274628]
[132.90158081 104.34748840]
[146.94355774 109.62223053]
[160.98553467 114.89697266]
[177.06663513 111.68289948]
[187.68589783 124.17942047]
[181.91914368 139.53118896]
[165.69871521 141.94561768]
[155.71078491 128.93894958]
[141.66880798 123.66420746]
[127.62683105 118.38946533]
[113.58485413 113.11472321]
[107.41921234 117.38494873]
[117.21336365 128.74604797]
[127.00750732 140.10716248]
[136.80165100 151.46826172]
[149.94371033 158.69920349]
[153.72224426 173.21548462]
[145.77354431 185.93626404]
[131.07002258 188.90388489]
[118.80968475 180.26188660]
[116.66207886 165.41662598]
[109.47069550 152.25288391]
[102.27931213 139.08914185]
[95.08792877 125.92540741]
[88.92228699 130.19563293]
[88.92228699 145.19563293]
[88.92228699 160.19563293]
[88.92228699 175.19563293]
[88.92228699 190.19563293]
[88.92228699 205.19563293]
[88.92228699 220.19563293]
[88.92228699 235.19563293]
[88.92228699 250.19563293]
[88.92228699 265.19564819]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 152]
[2 151]
[3 150]
[4 149]
[5 148]
[6 147]
[7 146]
[8 145]
[9 144]
[10 143]
[15 117]
[16 116]
[17 115]
[18 92]
[19 91]
[20 90]
[23 87]
[24 86]
[25 85]
[26 84]
[27 71]
[28 70]
[30 69]
[31 68]
[32 67]
[34 65]
[35 64]
[36 63]
[37 62]
[38 61]
[39 60]
[40 51]
[41 50]
[42 49]
[43 48]
[118 129]
[119 128]
[120 127]
[121 126]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
