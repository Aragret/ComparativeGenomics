%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:58 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCCUACGGGCUACUACAACCCUUCGCUGACGCCAUAAAACUCUUCACCAAAGAGCCCCUAAxxxxxxxxxxUCUCAUCCAAACCCCCUGAAGCUUCACCGGCGCAGUCAUUCUCAUAAUCGCCCACGGGCUCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[93.18618011 280.71118164]
[93.18618011 265.71118164]
[93.18618011 250.71118164]
[93.18618011 235.71118164]
[93.18618011 220.71118164]
[93.18618011 205.71118164]
[93.18618011 190.71118164]
[93.18618011 175.71118164]
[93.18618011 160.71118164]
[93.18618011 145.71118164]
[86.52860260 142.25769043]
[84.07408142 157.05549622]
[69.24200439 159.29370117]
[62.53015137 145.87911987]
[73.21344757 135.35069275]
[66.55587006 131.89718628]
[54.29349899 140.53630066]
[42.03113174 149.17541504]
[42.79018402 164.58409119]
[35.07838058 177.94566345]
[21.35652542 184.99650574]
[6.00321817 183.48670959]
[-6.08235979 173.89805603]
[-11.04374409 159.29023743]
[-7.29777431 144.32456970]
[3.96022344 133.77653503]
[19.13786316 131.01197815]
[33.39201736 136.91305542]
[45.65438461 128.27394104]
[57.91675186 119.63481903]
[58.08801270 89.41468811]
[76.11853027 67.88941956]
[101.63598633 63.22906876]
[105.34214783 48.69413376]
[107.05484009 33.79222870]
[106.74278259 18.79547691]
[106.43072510 3.79872322]
[103.10586548 -4.78015471]
[106.27144623 -11.51252174]
[106.27144623 -26.51252174]
[106.27144623 -41.51251984]
[106.27144623 -56.51251984]
[92.66807556 -61.11558151]
[81.17420959 -69.68962860]
[72.91037750 -81.38219452]
[68.67704010 -95.03763580]
[68.87713623 -109.31131744]
[73.47771454 -122.80204773]
[82.01449585 -134.18959045]
[93.63870239 -142.36389160]
[107.20142365 -146.53329468]
[107.51347351 -161.53004456]
[107.82553101 -176.52680969]
[108.13758850 -191.52355957]
[108.44964600 -206.52030945]
[93.63096619 -209.01524353]
[79.33350372 -213.64128113]
[65.86199188 -220.29983521]
[53.50359726 -228.84898376]
[42.52172470 -239.10649109]
[33.15045929 -250.85371399]
[25.58955002 -263.84027100]
[20.00015831 -277.78933716]
[16.50142097 -292.40359497]
[15.16791534 -307.37155151]
[16.02806282 -322.37414551]
[19.06353188 -337.09161377]
[24.20962143 -351.21023560]
[31.35663986 -364.42907715]
[40.35224915 -376.46640015]
[51.00470734 -387.06558228]
[63.08695984 -396.00076294]
[76.34146881 -403.08142090]
[90.48571014 -408.15667725]
[105.21820831 -411.11834717]
[120.22492981 -411.90328979]
[135.18600464 -410.49475098]
[149.78254700 -406.92282104]
[163.70343018 -401.26358032]
[176.65191650 -393.63766479]
[188.35202026 -384.20764160]
[198.55435181 -373.17449951]
[207.04144287 -360.77340698]
[213.63238525 -347.26867676]
[218.18670654 -332.94821167]
[220.60733032 -318.11721802]
[220.84263611 -303.09182739]
[218.88764954 -288.19229126]
[214.78401184 -273.73620605]
[208.61918640 -260.03173828]
[200.52461243 -247.37094116]
[190.67279053 -236.02371216]
[179.27372742 -226.23191833]
[166.57038879 -218.20426941]
[152.83355713 -212.11187744]
[138.35603333 -208.08457947]
[123.44639587 -206.20825195]
[123.13434601 -191.21150208]
[122.82228851 -176.21475220]
[122.51023102 -161.21798706]
[122.19817352 -146.22123718]
[136.92294312 -140.73153687]
[148.90559387 -130.52301025]
[156.69148254 -116.81090546]
[159.32722473 -101.23722076]
[156.47740173 -85.67406464]
[148.46717834 -71.99862671]
[136.24520874 -61.86677170]
[121.27144623 -56.51251984]
[121.27144623 -41.51251984]
[121.27144623 -26.51252174]
[121.27144623 -11.51252174]
[121.42748260 3.48666692]
[121.73954010 18.48342133]
[122.05158997 33.48017502]
[127.54647064 31.96240425]
[133.32728577 31.45360184]
[139.25302124 31.98941422]
[153.03540039 37.90937805]
[166.81777954 43.82934189]
[182.19116211 39.24256897]
[195.27960205 48.52008820]
[196.04275513 64.54497528]
[183.89520264 75.02431488]
[168.15551758 71.91925049]
[160.89781189 57.61172104]
[147.11543274 51.69175720]
[133.33305359 45.77179718]
[119.87708282 52.40029526]
[116.17092896 66.93523407]
[123.78258514 70.77010345]
[130.46899414 76.36967468]
[135.81915283 83.50676727]
[139.47872925 91.85829926]
[141.17245483 101.01962280]
[140.72274780 110.52402496]
[138.06361389 119.86650085]
[133.24871826 128.53054810]
[126.45289612 136.01664734]
[117.96705627 141.87074280]
[108.18618011 145.71118164]
[108.18618011 160.71118164]
[108.18618011 175.71118164]
[108.18618011 190.71118164]
[108.18618011 205.71118164]
[108.18618011 220.71118164]
[108.18618011 235.71118164]
[108.18618011 250.71118164]
[108.18618011 265.71118164]
[108.18618011 280.71118164]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[16 30]
[17 29]
[18 28]
[33 130]
[34 129]
[35 115]
[36 114]
[37 113]
[39 112]
[40 111]
[41 110]
[42 109]
[51 101]
[52 100]
[53 99]
[54 98]
[55 97]
[118 128]
[119 127]
[120 126]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
