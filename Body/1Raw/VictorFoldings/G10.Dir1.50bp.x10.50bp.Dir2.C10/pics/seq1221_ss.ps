%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:19 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGACCCCCUCCCCAAUAAAGCUAAAACUCACCUGAGUUGUAAAAAACUCCAGUUGACACAAAAUxxxxxxxxxxCCAUAAAUACUUGACCACCUGUAGUACAUAAAAACCCAAUCCACAUCAAAACCCCCUCCCCACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[17.45081902 290.08285522]
[10.98172092 303.61618042]
[4.51262331 317.14950562]
[-1.95647478 330.68280029]
[-8.42557240 344.21612549]
[-14.89467049 357.74945068]
[-21.36376762 371.28277588]
[-27.83286667 384.81610107]
[-34.30196381 398.34942627]
[-35.67781830 415.24743652]
[-52.29634094 418.60321045]
[-60.12141418 403.56311035]
[-47.83528519 391.88031006]
[-41.36618805 378.34698486]
[-34.89709091 364.81369019]
[-28.42799187 351.28036499]
[-21.95889282 337.74703979]
[-15.48979568 324.21371460]
[-9.02069759 310.68038940]
[-2.55159998 297.14706421]
[3.91749787 283.61373901]
[-14.03172874 273.03936768]
[-30.82859993 260.71630859]
[-46.30337524 246.76913452]
[-60.29966736 231.33877563]
[-72.67604065 214.58116150]
[-83.30742645 196.66563416]
[-92.08638763 177.77323914]
[-98.92420197 158.09490967]
[-103.75177765 137.82949829]
[-106.52032471 117.18180084]
[-107.20185852 96.36046600]
[-105.78950500 75.57591248]
[-102.29753113 55.03817749]
[-96.76123047 34.95481110]
[-89.23653412 15.52875900]
[-102.70360565 8.92284679]
[-116.17066956 2.31693411]
[-131.96798706 3.18600225]
[-139.98713684 -9.36559677]
[-153.45419312 -15.97150898]
[-166.92126465 -22.57742119]
[-180.45458984 -29.04652023]
[-194.05278015 -35.37813950]
[-207.65095520 -41.70975876]
[-221.24914551 -48.04137802]
[-236.00955200 -42.39284134]
[-250.40658569 -48.91210938]
[-255.89874268 -63.73141098]
[-249.22763062 -78.05871582]
[-234.35108948 -83.39389801]
[-220.09512329 -76.57167816]
[-214.91752625 -61.63956070]
[-201.31933594 -55.30794144]
[-187.72116089 -48.97632217]
[-174.12297058 -42.64470291]
[-166.68798828 -42.67251205]
[-160.31535339 -36.04449081]
[-146.84828186 -29.43857765]
[-133.38122559 -22.83266449]
[-118.54715729 -24.17423248]
[-109.56475830 -11.15013409]
[-96.09769440 -4.54422140]
[-82.63062286 2.06169057]
[-74.93315887 -11.10466194]
[-66.28822327 -23.66924858]
[-56.74263763 -35.56401443]
[-46.34809875 -46.72454071]
[-35.16090775 -57.09037399]
[-23.24165916 -66.60537720]
[-10.65490627 -75.21800232]
[2.53117728 -82.88161469]
[16.24517250 -89.55470276]
[30.41279984 -95.20112610]
[44.95732880 -99.79029083]
[59.79997635 -103.29735565]
[74.86035919 -105.70332336]
[90.05690002 -106.99514771]
[105.30729675 -107.16584778]
[120.52895355 -106.21450043]
[135.63941956 -104.14624786]
[150.55683899 -100.97229004]
[165.20045471 -96.70983124]
[179.49092102 -91.38195038]
[193.35084534 -85.01750183]
[206.70516968 -77.65096283]
[219.48155212 -69.32222748]
[231.61079407 -60.07641220]
[243.02720642 -49.96358490]
[253.66894531 -39.03852463]
[265.14874268 -48.69327164]
[276.62854004 -58.34801865]
[288.10836792 -68.00276184]
[290.75506592 -74.16509247]
[295.43356323 -77.52029419]
[300.25463867 -77.80470276]
[312.11627197 -86.98628998]
[315.56130981 -102.65509033]
[330.02258301 -109.60137177]
[344.40664673 -102.49655151]
[347.67926025 -86.79083252]
[337.32995605 -74.53230286]
[321.29785156 -75.12465668]
[309.43621826 -65.94306183]
[297.76309204 -56.52296066]
[286.28329468 -46.86821365]
[274.80349731 -37.21346664]
[263.32369995 -27.55872154]
[270.09771729 -18.37494850]
[276.35589600 -8.83221531]
[282.07934570 1.04054070]
[287.25061035 11.21338081]
[291.85409546 21.65545654]
[295.87576294 32.33510590]
[299.30349731 43.21994019]
[302.12683105 54.27695465]
[304.33724976 65.47261810]
[305.92803955 76.77297974]
[306.89437866 88.14378357]
[307.23333740 99.55053711]
[306.94387817 110.95864868]
[306.02685547 122.33353424]
[304.48510742 133.64068604]
[302.32327271 144.84584045]
[299.54791260 155.91499329]
[296.16744995 166.81459045]
[292.19210815 177.51159668]
[287.63400269 187.97354126]
[282.50686646 198.16871643]
[276.82632446 208.06620789]
[270.60958862 217.63598633]
[263.87548828 226.84906006]
[256.64443970 235.67747498]
[248.93838501 244.09446716]
[240.78070068 252.07449341]
[232.19610596 259.59338379]
[223.21063232 266.62832642]
[213.85154724 273.15795898]
[204.14721680 279.16253662]
[194.12707520 284.62380981]
[183.82150269 289.52523804]
[173.26173401 293.85192871]
[162.47982788 297.59082031]
[151.50843811 300.73049927]
[140.38087463 303.26150513]
[129.13084412 305.17614746]
[117.79248047 306.46859741]
[106.40016937 307.13497925]
[94.98844910 307.17321777]
[83.59191895 306.58322144]
[72.24515533 305.36682129]
[60.98254776 303.52761841]
[49.83825684 301.07125854]
[38.84607697 298.00518799]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 21]
[2 20]
[3 19]
[4 18]
[5 17]
[6 16]
[7 15]
[8 14]
[9 13]
[36 64]
[37 63]
[38 62]
[40 60]
[41 59]
[42 58]
[43 56]
[44 55]
[45 54]
[46 53]
[90 108]
[91 107]
[92 106]
[93 105]
[96 104]
[97 103]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
