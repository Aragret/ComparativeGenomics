%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:39 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCAAGACCCUACUUCUAACCUCCCUGUUCUUAUGAAUUCGAACAGCAUACCCCCGAUUCCGxxxxxxxxxxUACACCCUAGUAGGCUCCCUUCCCCUACUCAUCGCACUAAUUUACACUCACAACACCCUACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[165.83482361 94.50543213]
[151.26211548 98.06018829]
[136.68940735 101.61495209]
[122.11670685 105.16971588]
[107.54400635 108.72447968]
[94.45085144 116.04358673]
[83.78922272 126.59487152]
[73.12760162 137.14616394]
[62.46597290 147.69744873]
[51.80434418 158.24874878]
[51.55463791 173.82357788]
[40.59192657 184.37220764]
[25.74524117 184.03816223]
[15.08361530 194.58946228]
[4.42198896 205.14074707]
[5.88408613 220.70982361]
[-3.04598069 233.54679871]
[-18.15170670 237.59043884]
[-32.30063248 230.93147278]
[-38.81206512 216.71403503]
[-34.61150360 201.65119934]
[-21.68233109 192.85514832]
[-6.12930107 194.47912598]
[4.53232527 183.92782593]
[15.19395161 173.37654114]
[15.01436996 158.52719116]
[25.67646790 147.67478943]
[41.25305557 147.58711243]
[51.91468048 137.03582764]
[62.57630920 126.48453522]
[73.23793030 115.93325043]
[83.89955902 105.38195801]
[79.89182281 90.92726898]
[65.31911469 87.37250519]
[50.74641418 83.81774139]
[36.17370987 80.26298523]
[21.60100937 76.70822144]
[7.02830553 73.15345764]
[-3.52640557 84.31113434]
[-18.25046349 88.68122101]
[-33.18317032 85.08819580]
[-44.30770493 74.49856567]
[-48.63161850 59.76087952]
[-44.99180603 44.83950806]
[-34.36735535 33.74822235]
[-19.61618996 29.47052383]
[-4.70630074 33.15708923]
[6.35162783 43.81625366]
[10.58306789 58.58075714]
[25.15577126 62.13551712]
[39.72847366 65.69027710]
[54.30117798 69.24504089]
[68.87387848 72.79980469]
[83.44657898 76.35456848]
[91.16325378 77.14170074]
[97.44760895 80.01229095]
[101.81016541 84.31098938]
[103.99386597 89.28388977]
[103.98924255 94.15177155]
[118.56194305 90.59701538]
[133.13464355 87.04225159]
[147.70735168 83.48748779]
[162.28005981 79.93272400]
[159.83398438 62.82135010]
[159.17343140 45.54932785]
[160.30537415 28.30245590]
[163.21746826 11.26625252]
[167.87828064 -5.37604856]
[174.23751831 -21.44546318]
[182.22665405 -36.76918411]
[191.75962830 -51.18243790]
[202.73377991 -64.53025818]
[215.03094482 -76.66915131]
[228.51873779 -87.46863556]
[243.05200195 -96.81265259]
[258.47430420 -104.60080719]
[274.61972046 -110.74944305]
[291.31448364 -115.19255829]
[308.37899780 -117.88247681]
[325.62966919 -118.79042053]
[342.88092041 -117.90674591]
[359.94720459 -115.24110413]
[376.64492798 -110.82231140]
[392.79455566 -104.69802856]
[408.22238159 -96.93427277]
[422.76251221 -87.61466980]
[436.25863647 -76.83960724]
[448.56561279 -64.72508240]
[459.55123901 -51.40152740]
[471.99066162 -59.78367233]
[484.43011475 -68.16581726]
[496.86953735 -76.54795837]
[509.30899048 -84.93009949]
[521.74841309 -93.31224823]
[521.31011963 -108.73338318]
[529.29821777 -121.93162537]
[543.16375732 -128.69546509]
[558.48236084 -126.86659241]
[570.36584473 -117.02858734]
[575.02221680 -102.32071686]
[570.96575928 -87.43621826]
[559.49072266 -77.12467957]
[544.25885010 -74.67646790]
[530.13055420 -80.87280273]
[517.69110107 -72.49066162]
[505.25167847 -64.10852051]
[492.81225586 -55.72637558]
[480.37280273 -47.34423065]
[467.93338013 -38.96208954]
[474.35208130 -27.44890213]
[479.83999634 -15.46374512]
[484.36273193 -3.08171701]
[487.89184570 9.61958981]
[490.40518188 22.56057739]
[491.88693237 35.66014099]
[492.32775879 48.83618164]
[491.72488403 62.00611496]
[490.08200073 75.08738708]
[487.40936279 87.99800873]
[483.72369385 100.65703583]
[479.04803467 112.98511505]
[473.41162109 124.90495300]
[466.84979248 136.34182739]
[459.40359497 147.22401428]
[451.11965942 157.48329163]
[442.04989624 167.05531311]
[432.25106812 175.88005066]
[421.78463745 183.90214539]
[410.71609497 191.07130432]
[399.11486816 197.34252930]
[387.05358887 202.67646790]
[374.60784912 207.03965759]
[361.85565186 210.40469360]
[348.87692261 212.75044250]
[335.75299072 214.06214905]
[322.56613159 214.33152771]
[309.39895630 213.55686951]
[296.33401489 211.74296570]
[283.45321655 208.90112305]
[270.83731079 205.04913330]
[258.56536865 200.21109009]
[246.71432495 194.41725159]
[235.35850525 187.70390320]
[224.56909180 180.11306763]
[214.41375732 171.69230652]
[204.95617676 162.49435425]
[196.25566101 152.57681274]
[188.36677551 142.00181580]
[181.33901978 130.83563232]
[175.21647644 119.14821625]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 63]
[2 62]
[3 61]
[4 60]
[5 59]
[6 32]
[7 31]
[8 30]
[9 29]
[10 28]
[13 25]
[14 24]
[15 23]
[33 54]
[34 53]
[35 52]
[36 51]
[37 50]
[38 49]
[89 109]
[90 108]
[91 107]
[92 106]
[93 105]
[94 104]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
