%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:12 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGAUUCAAAAAAGAGUAAUAAACUUCGCCUUAAUUUUAAUAAUCAACACCCUCCUAGCCUUAxxxxxxxxxxUAUUUAUGUGCUCCGGGUCCAUCAUCCACAACCUUAACAAUGAACAAGAUAUUCGAAAAACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[92.50000000 250.80368042]
[92.50000000 235.80368042]
[92.50000000 220.80368042]
[92.50000000 205.80368042]
[92.50000000 190.80368042]
[92.50000000 175.80368042]
[92.50000000 160.80368042]
[92.50000000 145.80368042]
[92.50000000 130.80368042]
[92.50000000 115.80368805]
[80.23763275 107.16456604]
[66.11283112 112.21332550]
[51.98802567 117.26208496]
[41.59729385 129.19285583]
[27.00836372 126.19078827]
[12.88356113 131.23954773]
[-1.24124169 136.28829956]
[-12.78965092 150.59263611]
[-29.90707970 146.85185242]
[-43.92379379 152.19335938]
[-57.94050598 157.53486633]
[-71.72288513 163.45483398]
[-85.24707794 169.94299316]
[-98.77127075 176.43116760]
[-105.42751312 191.02821350]
[-121.02442169 194.78533936]
[-133.59738159 184.82040405]
[-133.50149536 168.77763367]
[-120.81031799 158.96368408]
[-105.25942993 162.90698242]
[-91.73524475 156.41880798]
[-78.21105194 149.93064880]
[-77.16689301 147.26286316]
[-74.96867371 144.86248779]
[-71.71820068 143.18429565]
[-67.68459320 142.63563538]
[-63.28202057 143.51815796]
[-49.26530457 138.17665100]
[-35.24859238 132.83512878]
[-29.98942184 121.89674377]
[-18.30299568 117.35291290]
[-6.28999805 122.16349792]
[7.83480501 117.11474609]
[21.95960808 112.06598663]
[31.34003830 100.49633789]
[46.93927002 103.13727570]
[61.06407166 98.08852386]
[75.18887329 93.03976440]
[88.94445038 83.28652954]
[101.83364868 85.80870056]
[110.34474182 73.45713043]
[118.85583496 61.10555649]
[109.65309906 43.44528198]
[110.97093201 23.67877388]
[122.31708527 7.56623411]
[140.29273987 -0.25325042]
[141.22836304 -15.22404194]
[142.16400146 -30.19483376]
[143.09962463 -45.16562653]
[133.59271240 -52.43140411]
[128.85017395 -63.28576660]
[129.95510864 -74.95851135]
[136.51417542 -84.53171539]
[146.78535461 -89.66917419]
[148.34292603 -104.58808136]
[149.90051270 -119.50699615]
[135.75798035 -124.74529266]
[123.36295319 -133.33679199]
[113.49457550 -144.74143982]
[106.77318573 -158.24232483]
[103.62129974 -172.99075317]
[104.23705292 -188.05966187]
[108.58172607 -202.50177002]
[116.38221741 -215.40925598]
[127.14817810 -225.97073364]
[140.20285034 -233.52230835]
[154.72561646 -237.58927917]
[169.80354309 -237.91598511]
[184.48884583 -234.48190308]
[197.85836792 -227.50289917]
[209.07170105 -217.41766357]
[217.42398071 -204.86018372]
[222.39013672 -190.61981201]
[223.65803528 -175.59173584]
[221.14794922 -160.72061157]
[215.01768494 -146.94125366]
[205.65257263 -135.11985779]
[193.64131165 -125.99951172]
[179.73896790 -120.15354156]
[164.81942749 -117.94941711]
[163.26184082 -103.03050232]
[161.70426941 -88.11158752]
[174.06999207 -74.67707825]
[172.73149109 -56.14856339]
[158.07041931 -44.22999573]
[157.13478088 -29.25920486]
[156.19915771 -14.28841305]
[155.26353455 0.68237805]
[164.05680847 4.43749571]
[171.56002808 10.36408043]
[177.24960327 18.04857254]
[180.72851562 26.95474052]
[195.72122192 26.48669815]
[210.71391296 26.01865768]
[225.70660400 25.55061531]
[231.04997253 11.31976986]
[241.43615723 0.22041479]
[255.28134155 -6.05488014]
[270.47424316 -6.54917812]
[284.69802856 -1.18710220]
[295.78372192 9.21366978]
[302.04080200 23.06709671]
[302.51510620 38.26063156]
[297.13433838 52.47736740]
[286.71896362 63.54935837]
[272.85733032 69.78820801]
[257.66317749 70.24253082]
[243.45353699 64.84305573]
[232.39526367 54.41315079]
[226.17465210 40.54331207]
[211.18196106 41.01135254]
[196.18925476 41.47939682]
[181.19656372 41.94743729]
[176.82182312 54.11903000]
[168.41896057 64.02352905]
[157.02716064 70.37657166]
[144.07627869 72.33670807]
[131.20739746 69.61664581]
[122.69631195 81.96821594]
[114.18522644 94.31979370]
[126.24713135 85.40293121]
[141.11111450 83.38744354]
[155.11199951 88.77029419]
[164.79747009 100.22418976]
[167.77928162 114.92482758]
[163.32217407 129.24732971]
[152.52517700 139.66007996]
[138.05062866 143.59547424]
[123.46764374 140.08312988]
[112.37208557 129.98915100]
[107.50000000 115.80368805]
[107.50000000 130.80368042]
[107.50000000 145.80368042]
[107.50000000 160.80368042]
[107.50000000 175.80368042]
[107.50000000 190.80368042]
[107.50000000 205.80368042]
[107.50000000 220.80368042]
[107.50000000 235.80368042]
[107.50000000 250.80368042]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[11 48]
[12 47]
[13 46]
[15 44]
[16 43]
[17 42]
[19 39]
[20 38]
[21 37]
[22 32]
[23 31]
[24 30]
[50 130]
[51 129]
[52 128]
[56 98]
[57 97]
[58 96]
[59 95]
[64 92]
[65 91]
[66 90]
[102 123]
[103 122]
[104 121]
[105 120]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
