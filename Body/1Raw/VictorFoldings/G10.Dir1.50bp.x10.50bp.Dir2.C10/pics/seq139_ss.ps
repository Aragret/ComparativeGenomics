%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:10 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGUCAAUAUUACAGGCGAACAUACUUACUAAAGUGUGUUAAUUAAUUAAUGCUUGUAGGACAxxxxxxxxxxAAACACUGAACUGACAAUUAACAGCCCAAUAUCUACAAUCAACCAACAAGUCAUUAUUACCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[92.50000000 252.53726196]
[92.50000000 237.53726196]
[92.50000000 222.53726196]
[92.50000000 207.53726196]
[92.50000000 192.53726196]
[92.50000000 177.53726196]
[92.50000000 162.53726196]
[92.50000000 147.53726196]
[92.50000000 132.53726196]
[92.50000000 117.53726196]
[87.11459351 112.31735229]
[80.51408386 125.78707123]
[65.66395569 123.67195892]
[63.08662796 108.89504242]
[76.34378815 101.87754059]
[70.95838165 96.65763855]
[55.96568680 97.12567902]
[40.97299194 97.59371948]
[25.98029518 98.06175995]
[20.40801811 113.11121368]
[9.52311611 124.85099792]
[-4.99302769 131.51098633]
[-20.91463089 132.10241699]
[-35.81278610 126.56449890]
[-47.42600250 115.76931763]
[-54.00347519 101.38455200]
[-68.98319244 102.16439056]
[-83.96290588 102.94423676]
[-98.94261932 103.72408295]
[-113.92233276 104.50392914]
[-128.90205383 105.28377533]
[-143.88175964 106.06362152]
[-158.86148071 106.84346771]
[-173.84118652 107.62330627]
[-187.29574585 116.99919128]
[-202.02584839 109.79112244]
[-202.87843323 93.41415405]
[-188.97642517 84.71549988]
[-174.62103271 92.64359283]
[-159.64132690 91.86374664]
[-144.66160583 91.08390808]
[-129.68190002 90.30406189]
[-114.70217896 89.52421570]
[-99.72246552 88.74436951]
[-84.74275208 87.96452332]
[-69.76303864 87.18467712]
[-54.78332138 86.40483093]
[-50.58673477 72.97901917]
[-42.03287888 61.77463531]
[-30.13735390 54.15573120]
[-16.32411766 51.05862808]
[-2.25501966 52.87691879]
[10.37011909 59.41155624]
[20.01888275 69.89243317]
[25.51225281 83.06906891]
[40.50494766 82.60102844]
[55.49764633 82.13298035]
[70.49034119 81.66493988]
[92.52523041 76.13935089]
[106.05274200 85.98486328]
[116.93156433 75.65766144]
[127.81038666 65.33045197]
[138.68920898 55.00325012]
[149.56803894 44.67604446]
[154.24971008 29.56338120]
[168.80720520 26.41242027]
[179.68603516 16.08521652]
[170.60827637 4.12454414]
[162.90142822 -8.76217651]
[156.65901184 -22.41851425]
[151.95683289 -36.67869186]
[148.85195923 -51.36960602]
[147.38208008 -66.31291962]
[147.56503296 -81.32723236]
[149.39860535 -96.23029327]
[152.86053467 -110.84118652]
[157.90881348 -124.98255157]
[164.48213196 -138.48272705]
[172.50071716 -151.17782593]
[181.86721802 -162.91374207]
[192.46794128 -173.54801941]
[204.17419434 -182.95156860]
[216.84388733 -191.01022339]
[230.32322693 -197.62617493]
[244.44856262 -202.71911621]
[259.04843140 -206.22720337]
[273.94564819 -208.10786438]
[288.95928955 -208.33827209]
[303.90719604 -206.91561890]
[318.60784912 -203.85717773]
[332.88281250 -199.20008850]
[346.55880737 -193.00086975]
[359.46981812 -185.33477783]
[371.45910645 -176.29487610]
[382.38116455 -165.99089050]
[392.10336304 -154.54791260]
[400.50772095 -142.10484314]
[407.49221802 -128.81274414]
[412.97204590 -114.83293915]
[416.88067627 -100.33515930]
[419.17071533 -85.49538422]
[419.81430054 -70.49375153]
[418.80364990 -55.51236725]
[416.15103149 -40.73309708]
[411.88864136 -26.33534622]
[406.06820679 -12.49388981]
[398.76043701 0.62325060]
[390.05398560 12.85684395]
[380.05453491 24.05838585]
[368.88351440 34.09189987]
[356.67651367 42.83559036]
[343.58169556 50.18331528]
[329.75802612 56.04587555]
[315.37335205 60.35211563]
[300.60220337 63.04975128]
[285.62399292 64.10604095]
[270.62045288 63.50815964]
[255.77377319 61.26336670]
[241.26414490 57.39891434]
[227.26773071 51.96170807]
[213.95439148 45.01775360]
[201.48577881 36.65134430]
[190.01322937 26.96404076]
[179.13441467 37.29124451]
[175.23086548 51.66523743]
[159.89524841 55.55487061]
[149.01641846 65.88207245]
[138.13758850 76.20928192]
[127.25876617 86.53648376]
[116.37994385 96.86368561]
[129.30256653 89.24752808]
[144.29547119 88.78639221]
[157.66172791 95.59397888]
[166.10548401 107.99168396]
[167.54467773 122.92247772]
[161.62443542 136.70474243]
[149.80456543 145.94004822]
[134.99961853 148.35115051]
[120.86017609 143.34352112]
[110.87274933 132.15194702]
[107.50000000 117.53726196]
[107.50000000 132.53726196]
[107.50000000 147.53726196]
[107.50000000 162.53726196]
[107.50000000 177.53726196]
[107.50000000 192.53726196]
[107.50000000 207.53726196]
[107.50000000 222.53726196]
[107.50000000 237.53726196]
[107.50000000 252.53726196]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[16 58]
[17 57]
[18 56]
[19 55]
[26 47]
[27 46]
[28 45]
[29 44]
[30 43]
[31 42]
[32 41]
[33 40]
[34 39]
[60 130]
[61 129]
[62 128]
[63 127]
[64 126]
[66 124]
[67 123]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
