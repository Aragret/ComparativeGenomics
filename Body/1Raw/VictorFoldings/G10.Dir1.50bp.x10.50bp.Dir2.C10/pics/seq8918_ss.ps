%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:55 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCUAACCAACACACUAACCAUAUACCAAUGAUGGCGCGAUGUAACACGAGAAAGCACAUACCAAGxxxxxxxxxxCCCUCGCUGUCACUUUCCUAGGACUUCUAACAGCCCUAGACCUCAACUACCUAACCAACAAACUCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[92.50000000 261.12823486]
[92.50000000 246.12823486]
[92.50000000 231.12823486]
[92.50000000 216.12823486]
[92.50000000 201.12823486]
[92.50000000 186.12823486]
[92.50000000 171.12823486]
[92.50000000 156.12823486]
[92.50000000 141.12823486]
[92.50000000 126.12823486]
[86.19789124 122.06210327]
[78.06541443 134.66618347]
[65.46147156 126.53350067]
[73.59367371 113.92983246]
[67.29156494 109.86370087]
[53.62479019 116.04586792]
[39.95801544 122.22804260]
[30.57330704 134.96530151]
[15.78836918 133.16117859]
[2.12159181 139.34335327]
[3.56564450 154.41629028]
[0.03485407 169.14083862]
[-8.08778572 181.91976929]
[-19.92119217 191.36695862]
[-34.18176270 196.45761108]
[-49.32262421 196.63955688]
[-63.70140076 191.89303589]
[-75.75839996 182.73292542]
[-84.18576050 170.15284729]
[-88.06934357 155.51739502]
[-86.98789978 140.41410828]
[-81.05872345 126.48128510]
[-70.92497253 115.23024750]
[-57.68587875 107.88143158]
[-42.77752304 105.23197174]
[-27.81704903 107.56926727]
[-14.42725849 114.63978577]
[-4.06057596 125.67657471]
[9.60620117 119.49440002]
[18.01336670 107.19933319]
[33.77584457 108.56126404]
[47.44262314 102.37909698]
[61.10940170 96.19692230]
[61.10940170 81.19692230]
[47.44262314 75.01475525]
[35.01066971 84.03374481]
[19.73313332 85.61248016]
[5.71959019 79.32629395]
[-3.26038623 66.86613464]
[-4.79122686 51.58372116]
[1.53885663 37.58995056]
[14.02710342 28.64907646]
[29.31423759 27.16614532]
[43.28809738 33.54006195]
[52.18978500 46.05627441]
[53.62479019 61.34798050]
[67.29156494 67.53015137]
[79.98435211 74.68634796]
[90.36980438 84.25877380]
[90.66616821 69.26170349]
[90.96252441 54.26462936]
[91.25888062 39.26755524]
[91.55523682 24.27048492]
[82.28590393 8.38795757]
[91.87518311 -6.28232336]
[91.87518311 -21.28232384]
[91.87518311 -36.28232193]
[77.23596954 -39.88187790]
[63.88389587 -46.88085175]
[52.59524155 -56.87233353]
[44.02631378 -69.27543640]
[38.67529297 -83.36904907]
[36.85328674 -98.33380127]
[38.66622162 -113.29965210]
[44.00869370 -127.39650726]
[52.57010269 -139.80479431]
[63.85269928 -149.80313110]
[77.20052338 -156.81019592]
[91.83755493 -160.41862488]
[106.91281128 -160.41862488]
[121.54984283 -156.81019592]
[134.89767456 -149.80313110]
[146.18026733 -139.80479431]
[154.74166870 -127.39650726]
[160.08415222 -113.29965210]
[161.89707947 -98.33380127]
[160.07507324 -83.36904907]
[154.72406006 -69.27543640]
[146.15512085 -56.87233353]
[134.86647034 -46.88085175]
[121.51440430 -39.88187790]
[106.87518311 -36.28232193]
[106.87518311 -21.28232384]
[106.87518311 -6.28232336]
[115.22028351 2.52068710]
[115.31150818 15.05174351]
[106.55230713 24.56684303]
[106.25595093 39.56391525]
[105.95959473 54.56098557]
[105.66323853 69.55805969]
[105.36688232 84.55513000]
[117.19919586 93.77447510]
[131.66873169 89.82067108]
[146.13825989 85.86685944]
[160.60780334 81.91305542]
[175.07733154 77.95924377]
[177.79013062 62.93914032]
[186.75819397 50.58857727]
[200.20092773 43.35976410]
[215.44924927 42.68798828]
[229.47561646 48.70663071]
[239.49505615 60.22068787]
[243.51821899 74.94403076]
[240.74629211 89.95333862]
[231.72966003 102.26849365]
[218.25856018 109.44431305]
[203.00770569 110.05603790]
[189.00515747 103.98220062]
[179.03114319 92.42877960]
[164.56159973 96.38258362]
[150.09207153 100.33639526]
[135.62254333 104.29019928]
[121.15299988 108.24401093]
[135.74676514 111.71128082]
[150.34053040 115.17855072]
[164.93431091 118.64582062]
[179.46247864 114.91323090]
[194.46186829 115.04776001]
[208.92076111 119.04032898]
[221.86386108 126.62162781]
[232.41813660 137.28028870]
[239.87170410 150.29737854]
[243.72178650 164.79484558]
[243.70869446 179.79484558]
[239.83331299 194.28558350]
[232.35704041 207.28964233]
[221.78417969 217.92985535]
[208.82786560 225.48855591]
[194.36203003 229.45588684]
[179.36241150 229.56422424]
[164.84077454 225.80628967]
[151.77662659 218.43553162]
[141.05116272 207.94915771]
[133.38781738 195.05445862]
[129.30351257 180.62121582]
[129.07414246 165.61944580]
[121.88276672 152.45570374]
[114.69138336 139.29197693]
[107.50000000 126.12823486]
[107.50000000 141.12823486]
[107.50000000 156.12823486]
[107.50000000 171.12823486]
[107.50000000 186.12823486]
[107.50000000 201.12823486]
[107.50000000 216.12823486]
[107.50000000 231.12823486]
[107.50000000 246.12823486]
[107.50000000 261.12823486]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 158]
[2 157]
[3 156]
[4 155]
[5 154]
[6 153]
[7 152]
[8 151]
[9 150]
[10 149]
[15 43]
[16 42]
[17 41]
[19 39]
[20 38]
[44 57]
[45 56]
[59 101]
[60 100]
[61 99]
[62 98]
[63 97]
[65 94]
[66 93]
[67 92]
[102 123]
[103 122]
[104 121]
[105 120]
[106 119]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
