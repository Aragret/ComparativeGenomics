%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:13 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGAACUACCAAACCUGCAUUAAAAAUUUCGGUUGGGGCGACCUCGGAGCAGAACCCAACCUCCxxxxxxxxxxCAACACCCUAGGCUCACUAAACAUUCUACUACUCACUCUCACUGCCCAAGAACUAUCAAACCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[92.50000000 292.82330322]
[92.50000000 277.82330322]
[92.50000000 262.82330322]
[92.50000000 247.82330322]
[92.50000000 232.82330322]
[92.50000000 217.82330322]
[92.50000000 202.82330322]
[92.50000000 187.82330322]
[92.50000000 172.82330322]
[92.50000000 157.82330322]
[83.25288391 155.85086060]
[74.44613647 152.40977478]
[66.31135559 147.59054565]
[59.06243896 141.51988220]
[52.89000320 134.35742188]
[47.95635986 126.29151154]
[33.80904388 131.27682495]
[23.36487770 143.16085815]
[8.78956509 140.09335327]
[-5.35775089 145.07867432]
[-19.50506783 150.06399536]
[-33.65238571 155.04931641]
[-40.75904465 160.88807678]
[-48.14165878 159.98851013]
[-60.04618073 173.99967957]
[-77.06510162 169.82824707]
[-91.21241760 174.81356812]
[-105.35973358 179.79888916]
[-118.28894806 190.76573181]
[-132.40637207 181.37771606]
[-127.29333496 165.21315002]
[-110.34505463 165.65156555]
[-96.19773865 160.66624451]
[-82.05042267 155.68092346]
[-76.51761627 144.88044739]
[-64.72240448 140.63259888]
[-52.83545685 145.74182129]
[-38.63770676 140.90200806]
[-24.49038887 135.91668701]
[-10.34307289 130.93136597]
[3.80424356 125.94603729]
[13.23649788 114.41860199]
[28.82372093 117.12951660]
[42.97103500 112.14419556]
[42.44900894 90.63691711]
[49.76178360 70.40429688]
[63.91382980 54.20073700]
[82.97853088 44.23214722]
[104.36047363 41.85560989]
[125.14880371 47.39466095]
[133.30546570 34.80622101]
[134.31632996 19.01733971]
[147.73049927 12.54361248]
[155.88716125 -0.04482684]
[157.94784546 -9.00860882]
[164.34277344 -12.80560684]
[172.75617981 -25.22392082]
[181.16958618 -37.64223480]
[189.58299255 -50.06055069]
[178.02519226 -59.64035416]
[167.44593811 -70.29093933]
[157.94401550 -81.91286469]
[149.60815430 -94.39760590]
[142.51615906 -107.62860107]
[136.73426819 -121.48230743]
[132.31646729 -135.82937622]
[129.30400085 -150.53585815]
[127.72499084 -165.46443176]
[127.59418488 -180.47570801]
[128.91281128 -195.42953491]
[131.66853333 -210.18627930]
[135.83566284 -224.60815430]
[141.37524414 -238.56051636]
[148.23559570 -251.91308594]
[156.35263062 -264.54119873]
[165.65058899 -276.32693481]
[176.04263306 -287.16027832]
[187.43173218 -296.94003296]
[199.71157837 -305.57492065]
[212.76747131 -312.98428345]
[226.47753906 -319.09899902]
[240.71376038 -323.86190796]
[255.34321594 -327.22860718]
[270.22930908 -329.16760254]
[285.23306274 -329.66079712]
[300.21435547 -328.70364380]
[315.03332520 -326.30499268]
[329.55163574 -322.48730469]
[343.63366699 -317.28622437]
[357.14801025 -310.75027466]
[369.96841431 -302.94049072]
[381.97521973 -293.92984009]
[393.05630493 -283.80239868]
[403.10818481 -272.65274048]
[412.03704834 -260.58496094]
[419.75952148 -247.71176147]
[426.20346069 -234.15333557]
[431.30871582 -220.03625488]
[435.02764893 -205.49235535]
[437.32550049 -190.65742493]
[438.18084717 -175.66996765]
[437.58566284 -160.66992188]
[435.54553223 -145.79734802]
[432.07952881 -131.19111633]
[427.21994019 -116.98758698]
[421.01220703 -103.31939697]
[413.51425171 -90.31414795]
[404.79611206 -78.09328461]
[394.93917847 -66.77091217]
[384.03546143 -56.45273209]
[372.18682861 -47.23509979]
[359.50384521 -39.20407104]
[346.10494995 -32.43463516]
[332.11526489 -26.98999786]
[317.66537476 -22.92099380]
[302.89025879 -20.26561737]
[287.92782593 -19.04866028]
[272.91778564 -19.28148460]
[258.00027466 -20.96191978]
[243.31460571 -24.07427025]
[228.99789429 -28.58948135]
[215.18380737 -34.46539307]
[202.00131226 -41.64714050]
[193.58790588 -29.22882462]
[185.17448425 -16.81051064]
[176.76107788 -4.39219666]
[168.47560120 8.11183929]
[160.31893921 20.70027733]
[159.89151001 35.58874893]
[145.89390564 42.96288681]
[137.73724365 55.55132675]
[145.53984070 63.58700180]
[151.66201782 72.96632385]
[155.87785339 83.34319305]
[158.03178406 94.33470154]
[158.04434204 105.53526306]
[155.91503906 116.53157043]
[151.72245789 126.91786194]
[145.62130737 136.31088257]
[137.83673096 144.36401367]
[128.65597534 150.78010559]
[118.41779327 155.32240295]
[107.50000000 157.82330322]
[107.50000000 172.82330322]
[107.50000000 187.82330322]
[107.50000000 202.82330322]
[107.50000000 217.82330322]
[107.50000000 232.82330322]
[107.50000000 247.82330322]
[107.50000000 262.82330322]
[107.50000000 277.82330322]
[107.50000000 292.82330322]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 152]
[2 151]
[3 150]
[4 149]
[5 148]
[6 147]
[7 146]
[8 145]
[9 144]
[10 143]
[16 44]
[17 43]
[19 41]
[20 40]
[21 39]
[22 38]
[24 37]
[26 34]
[27 33]
[28 32]
[50 131]
[51 130]
[53 128]
[54 127]
[56 126]
[57 125]
[58 124]
[59 123]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
