%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:37 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGAACAGCUCUUUGGACACUAGGAAAAAACCUUGUAGAGAGAGUAAAAAAUUUAACACCCAUAxxxxxxxxxxCUGUAAAGCUAACUUAGCAUUAACCUUUUAAGUUAAAGAUUAAGAGAACCAACACCUCUUUCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[122.71222687 293.72604370]
[122.71222687 278.72604370]
[122.71222687 263.72604370]
[122.71222687 248.72602844]
[122.71222687 233.72602844]
[122.71222687 218.72602844]
[122.71222687 203.72602844]
[122.71222687 188.72602844]
[122.71222687 173.72602844]
[122.71222687 158.72602844]
[118.60728455 144.29864502]
[110.71080017 131.54537964]
[102.81431580 118.79212952]
[90.77793121 118.75778961]
[80.07983398 111.09723663]
[75.41374969 97.59954834]
[60.69823074 100.50701904]
[45.98270798 103.41448975]
[31.26718521 106.32196045]
[16.55166245 109.22943878]
[1.83613968 112.13690948]
[-6.97413588 124.98279572]
[-21.93918610 127.72175598]
[-34.13148117 119.24333954]
[-48.84700394 122.15081024]
[-63.56252670 125.05828857]
[-68.86062622 129.17808533]
[-74.58171082 129.85412598]
[-78.94123840 127.76996613]
[-93.76372528 130.07084656]
[-108.58620453 132.37171936]
[-117.71158600 145.27531433]
[-133.30233765 147.86454773]
[-146.10873413 138.60325623]
[-148.53298950 122.98600006]
[-139.13681030 110.27822876]
[-123.49479675 108.01923370]
[-110.88707733 117.54923248]
[-96.06459808 115.24835968]
[-81.24211121 112.94748688]
[-66.47000122 110.34276581]
[-51.75447464 107.43528748]
[-37.03895187 104.52781677]
[-28.98723793 92.04962158]
[-14.10502338 88.89140320]
[-1.07133269 97.42138672]
[13.64418983 94.51391602]
[28.35971260 91.60643768]
[43.07523346 88.69896698]
[57.79075623 85.79149628]
[72.50627899 82.88402557]
[83.16719055 72.33200836]
[86.22558594 57.64710999]
[89.28398132 42.96221161]
[92.34237671 28.27731514]
[95.40077209 13.59241867]
[97.85369873 -1.20566082]
[99.69702148 -16.09196854]
[101.54034424 -30.97827530]
[82.05039978 -55.71128082]
[80.51310730 -70.63230133]
[71.40222168 -83.56684113]
[77.79441071 -97.02005768]
[76.25711823 -111.94107819]
[74.71982574 -126.86209106]
[59.96506119 -130.26437378]
[47.11578369 -138.27529907]
[37.56579208 -150.02587891]
[32.35099792 -164.24153137]
[32.03706360 -179.38023376]
[36.65804291 -193.79985046]
[45.71268463 -205.93624878]
[58.21881104 -214.47296143]
[72.81984711 -218.48399353]
[87.93198395 -217.53427124]
[101.91597748 -211.72679138]
[113.25493622 -201.69151306]
[120.71889496 -188.51699829]
[123.49822998 -173.63230896]
[121.29145813 -158.65202332]
[114.33794403 -145.20109558]
[103.39196014 -134.73858643]
[89.64084625 -128.39938354]
[91.17813873 -113.47837067]
[92.71543121 -98.55735016]
[101.71636200 -86.69006348]
[95.43412781 -72.16959381]
[96.97142029 -57.24857330]
[111.26554871 -52.70128250]
[121.14125824 -63.99156189]
[131.01696777 -75.28184509]
[140.89266968 -86.57212067]
[146.76985168 -102.47480011]
[163.67800903 -101.22959900]
[167.16210938 -84.63751221]
[152.18295288 -76.69641876]
[142.30723572 -65.40613556]
[132.43153381 -54.11585617]
[122.55583191 -42.82557678]
[116.42665863 -29.13495255]
[114.58332825 -14.24864388]
[112.74000549 0.63766360]
[114.41827393 2.95594978]
[115.24997711 6.09879827]
[114.90864563 9.73613739]
[113.19738770 13.42329502]
[110.08567047 16.65081406]
[107.02727509 31.33571053]
[103.96887970 46.02061081]
[100.91048431 60.70550537]
[97.85208893 75.39040375]
[118.92473602 89.07376099]
[115.56757355 110.89564514]
[123.46405792 123.64890289]
[131.36053467 136.40216064]
[131.27119446 121.40242767]
[134.34913635 106.72161102]
[140.45573425 93.02090454]
[149.31594849 80.91733551]
[160.53077698 70.95601654]
[173.59510803 63.58558655]
[187.92056274 59.13798141]
[202.86198425 57.81351089]
[217.74642944 59.67182541]
[231.90354919 64.62923431]
[244.69575500 72.46246338]
[255.54692078 82.81872559]
[263.96832275 95.23161316]
[269.58071899 109.14208221]
[272.13131714 123.92363739]
[271.50524902 138.91056824]
[267.73071289 153.42790222]
[260.97772217 166.82180786]
[251.55038452 178.48908997]
[239.87329102 187.90426636]
[226.47233582 194.64329529]
[211.95108032 198.40269470]
[196.96350098 199.01313782]
[182.18461609 196.44712830]
[168.28001404 190.82023621]
[155.87590027 182.38589478]
[145.53096008 171.52394104]
[137.71223450 158.72602844]
[137.71223450 173.72602844]
[137.71223450 188.72602844]
[137.71223450 203.72602844]
[137.71223450 218.72602844]
[137.71223450 233.72602844]
[137.71223450 248.72602844]
[137.71223450 263.72604370]
[137.71223450 278.72604370]
[137.71223450 293.72604370]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 152]
[2 151]
[3 150]
[4 149]
[5 148]
[6 147]
[7 146]
[8 145]
[9 144]
[10 143]
[11 115]
[12 114]
[13 113]
[16 51]
[17 50]
[18 49]
[19 48]
[20 47]
[21 46]
[24 43]
[25 42]
[26 41]
[29 40]
[30 39]
[31 38]
[52 111]
[53 110]
[54 109]
[55 108]
[56 107]
[57 102]
[58 101]
[59 100]
[60 88]
[61 87]
[63 85]
[64 84]
[65 83]
[89 99]
[90 98]
[91 97]
[92 96]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
