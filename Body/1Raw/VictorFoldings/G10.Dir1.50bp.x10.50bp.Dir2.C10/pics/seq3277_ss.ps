%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:59 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCAACCUCCUACUCCUCAUUGUACCCAUUCUAAUCGCAAUGGCAUUCCUAAUGCUUACCGAxxxxxxxxxxGACAACAUUCAAAAAAGAGUAAUAAACUUCGCCUUAAUUUUAAUAAUCAACACCCUCCUACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[92.50000000 409.91842651]
[92.50000000 394.91842651]
[92.50000000 379.91842651]
[92.50000000 364.91842651]
[92.50000000 349.91842651]
[92.50000000 334.91842651]
[92.50000000 319.91842651]
[92.50000000 304.91842651]
[92.50000000 289.91842651]
[92.50000000 274.91842651]
[77.80443573 272.01763916]
[63.95278549 266.30364990]
[51.47812653 257.99435425]
[40.86095047 247.40750122]
[32.51063156 234.94869995]
[26.74966240 221.09571838]
[23.80118752 206.38027954]
[23.78036499 191.36756897]
[26.68986511 176.63458252]
[32.41970444 162.74792480]
[40.75139618 150.24203491]
[51.36627960 139.59858704]
[63.85771179 131.22798157]
[77.74665070 125.45346832]
[92.50000000 122.49873352]
[81.55732727 114.91009521]
[76.42934418 102.62053680]
[78.73281860 89.50476837]
[68.07118988 78.95347595]
[57.40956116 68.40219116]
[46.74793625 57.85089874]
[33.87760925 65.68928528]
[19.51395798 70.21673584]
[4.49322653 71.17422485]
[-10.31117725 68.51042175]
[-24.03946304 62.38444901]
[-35.89539719 53.15635681]
[-45.19247437 41.36599731]
[-51.39368057 27.70140839]
[-54.14250565 12.95868683]
[-53.28342819 -2.00439548]
[-48.87072372 -16.31830788]
[-41.16504288 -29.15228081]
[-51.82667160 -39.70357132]
[-62.48829651 -50.25485992]
[-75.80602264 -45.86349869]
[-89.64872742 -47.64413834]
[-101.31022644 -55.19095230]
[-108.53569794 -66.97654724]
[-109.95758057 -80.66075134]
[-105.35408783 -93.55521393]
[-115.79389954 -104.32602692]
[-126.23371124 -115.09683228]
[-136.67352295 -125.86763763]
[-147.11332703 -136.63844299]
[-162.47877502 -143.80361938]
[-159.84718323 -160.55209351]
[-143.02476501 -162.65979004]
[-136.34252930 -147.07826233]
[-125.90270996 -136.30744934]
[-115.46289825 -125.53664398]
[-105.02308655 -114.76583862]
[-94.58327484 -103.99502563]
[-79.04406738 -108.31760406]
[-63.35028076 -104.20821381]
[-51.79096222 -92.69247437]
[-47.57416153 -76.83327484]
[-51.93700409 -60.91648865]
[-41.27537918 -50.36519623]
[-30.61375427 -39.81390762]
[-17.86063194 -47.65267563]
[-3.59339762 -52.21404266]
[11.35993862 -53.22872543]
[26.13045692 -50.63340759]
[39.85881424 -44.57468033]
[51.74525070 -35.40075684]
[61.09616852 -23.64145851]
[67.36462402 -9.97764015]
[70.18228149 4.79825211]
[69.38109589 19.82813263]
[65.00330353 34.23810196]
[57.29922867 47.18927002]
[67.96085358 57.74056244]
[78.62248230 68.29185486]
[89.28410339 78.84313965]
[105.38031006 76.90248108]
[118.96205902 85.75628662]
[133.18884277 81.00247192]
[147.41561890 76.24865723]
[158.05230713 64.53663635]
[172.57562256 67.84155273]
[186.80239868 63.08774185]
[201.02919006 58.33392715]
[212.87268066 44.27293396]
[229.90858459 48.36902618]
[244.03338623 43.32026672]
[258.15817261 38.27151108]
[272.06072998 32.63955688]
[285.71697998 26.43414879]
[299.37322998 20.22874069]
[306.33169556 5.77332067]
[322.00338745 2.34148240]
[334.36633301 12.56583881]
[333.93670654 28.60313797]
[321.04412842 38.15093613]
[305.57864380 33.88498306]
[291.92239380 40.09038925]
[278.26614380 46.29579544]
[277.16671753 48.94128036]
[274.91903687 51.29540253]
[271.63433838 52.90560913]
[267.59020996 53.37023926]
[263.20693970 52.39631653]
[249.08213806 57.44507217]
[234.95733643 62.49382782]
[229.47174072 73.32044220]
[217.69331360 77.62017059]
[205.78300476 72.56070709]
[191.55621338 77.31452179]
[177.32943726 82.06833649]
[167.71034241 93.44033051]
[152.16943359 90.47544098]
[137.94265747 95.22925568]
[123.71587372 99.98307037]
[119.24439240 113.85988617]
[107.50000000 122.49873352]
[122.25334930 125.45346832]
[136.14228821 131.22798157]
[148.63372803 139.59858704]
[159.24861145 150.24203491]
[167.58029175 162.74792480]
[173.31013489 176.63458252]
[176.21963501 191.36756897]
[176.19880676 206.38027954]
[173.25033569 221.09571838]
[167.48936462 234.94869995]
[159.13905334 247.40750122]
[148.52186584 257.99435425]
[136.04721069 266.30364990]
[122.19556427 272.01763916]
[107.50000000 274.91842651]
[107.50000000 289.91842651]
[107.50000000 304.91842651]
[107.50000000 319.91842651]
[107.50000000 334.91842651]
[107.50000000 349.91842651]
[107.50000000 364.91842651]
[107.50000000 379.91842651]
[107.50000000 394.91842651]
[107.50000000 409.91842651]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[25 126]
[28 85]
[29 84]
[30 83]
[31 82]
[43 70]
[44 69]
[45 68]
[51 63]
[52 62]
[53 61]
[54 60]
[55 59]
[87 124]
[88 123]
[89 122]
[91 120]
[92 119]
[93 118]
[95 115]
[96 114]
[97 113]
[98 108]
[99 107]
[100 106]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
