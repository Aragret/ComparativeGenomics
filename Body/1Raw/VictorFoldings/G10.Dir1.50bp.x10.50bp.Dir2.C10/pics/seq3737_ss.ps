%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:19 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCCUCUGAUCAGGGUGAGCAUCAAACUCAAACUACGCCCUGAUCGGCGCACUGCGAGCAGUxxxxxxxxxxCUAAUAAGUGGCUCCUUUAACCUCUCCACCCUUAUCACAACACAAGAACACCUCUGAUUACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[92.50000000 282.54492188]
[92.50000000 267.54492188]
[92.50000000 252.54493713]
[92.50000000 237.54493713]
[92.50000000 222.54493713]
[92.50000000 207.54493713]
[92.50000000 192.54493713]
[92.50000000 177.54493713]
[92.50000000 162.54493713]
[92.50000000 147.54493713]
[76.06027985 142.95166016]
[61.93030930 132.74142456]
[52.00185013 117.97191620]
[47.70871735 100.32666779]
[32.84567261 102.34900665]
[17.98262405 104.37133789]
[3.11957788 106.39366913]
[-11.74346924 108.41600800]
[-26.60651588 110.43833923]
[-41.46956253 112.46067810]
[-56.33261108 114.48300934]
[-71.19565582 116.50534821]
[-86.05870056 118.52767944]
[-100.73522949 121.62599945]
[-115.14744568 125.78388977]
[-129.55966187 129.94177246]
[-143.97187805 134.09967041]
[-150.14329529 148.46794128]
[-164.12983704 155.46157837]
[-179.32746887 151.77838135]
[-188.56033325 139.15744019]
[-187.46897888 123.55799103]
[-176.56867981 112.34560394]
[-161.00624084 110.81443024]
[-148.12976074 119.68744659]
[-133.71754456 115.52955627]
[-119.30533600 111.37167358]
[-104.89311981 107.21378326]
[-117.82820892 99.61882782]
[-123.01973724 85.54586792]
[-118.11588287 71.37010956]
[-105.33815002 63.51329422]
[-90.47496796 65.53464508]
[-80.25950623 76.51847076]
[-79.31947327 91.48898315]
[-88.08103943 103.66463470]
[-73.21799469 101.64229584]
[-58.35494614 99.61996460]
[-43.49189758 97.59762573]
[-28.62885094 95.57529449]
[-13.76580334 93.55296326]
[1.09724331 91.53062439]
[15.96028996 89.50829315]
[30.82333755 87.48595428]
[45.68638229 85.46362305]
[51.46265793 71.62040710]
[42.44512558 59.63357162]
[33.42759705 47.64673996]
[19.07384300 38.62420654]
[23.77025604 22.33371735]
[40.72420502 22.33693695]
[45.41442871 38.62920761]
[54.43196106 50.61604309]
[63.44948959 62.60287476]
[77.39055634 53.77244568]
[93.14507294 49.83769608]
[109.07445526 51.03717422]
[123.57467651 57.08403397]
[135.23774719 67.21171570]
[147.67720032 58.82957458]
[142.28819275 45.24952316]
[139.85543823 30.84941292]
[140.48373413 16.26486397]
[144.14282227 2.13909364]
[150.66883850 -10.90544510]
[159.77163696 -22.29449081]
[171.04772949 -31.52725601]
[183.99810791 -38.19844818]
[198.05035400 -42.01605225]
[212.58395386 -42.81413269]
[226.95770264 -40.56001663]
[240.53796387 -35.35564423]
[252.72659302 -27.43295860]
[262.98736572 -17.14355469]
[275.59848022 -25.26509666]
[288.20962524 -33.38663864]
[300.82073975 -41.50818253]
[313.26019287 -49.89032364]
[325.52255249 -58.52944183]
[337.78491211 -67.16855621]
[350.04730225 -75.80767059]
[346.68020630 -90.63100433]
[349.24700928 -105.61366272]
[357.35623169 -118.47090149]
[369.77133179 -127.24208069]
[384.59909058 -130.58966064]
[399.57836914 -128.00317383]
[412.42492676 -119.87702179]
[421.17977905 -107.45039368]
[424.50784302 -92.61824799]
[421.90164185 -77.64239502]
[413.75860596 -64.80654144]
[401.32046509 -56.06805038]
[386.48394775 -52.75948715]
[371.51153564 -55.38538361]
[358.68640137 -63.54530334]
[346.42404175 -54.90618896]
[334.16168213 -46.26707458]
[321.89929199 -37.62795639]
[320.20999146 -33.09786224]
[315.62060547 -29.60947990]
[308.94229126 -28.89705276]
[296.33117676 -20.77551079]
[283.72003174 -12.65396881]
[271.10891724 -4.53242683]
[276.45324707 9.93665600]
[278.46014404 25.23708534]
[277.02682495 40.60884476]
[272.22143555 55.28768921]
[264.27990723 68.54313660]
[253.59423828 79.71481323]
[240.69328308 88.24536896]
[226.21653748 93.70828247]
[210.88235474 95.82916260]
[195.45243835 94.49955750]
[180.69387817 89.78247833]
[167.34112549 81.90941620]
[156.05934143 71.26901245]
[143.61988831 79.65116119]
[146.22819519 86.59383392]
[147.73895264 93.85479736]
[148.11630249 101.26165771]
[147.35130310 108.63856506]
[145.46209717 115.81037903]
[142.49356079 122.60682678]
[138.51614380 128.86654663]
[133.62428284 134.44093323]
[127.93414307 139.19763184]
[121.58078766 143.02371216]
[114.71507263 145.82833862]
[107.50000000 147.54493713]
[107.50000000 162.54493713]
[107.50000000 177.54493713]
[107.50000000 192.54493713]
[107.50000000 207.54493713]
[107.50000000 222.54493713]
[107.50000000 237.54493713]
[107.50000000 252.54493713]
[107.50000000 267.54492188]
[107.50000000 282.54492188]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[14 55]
[15 54]
[16 53]
[17 52]
[18 51]
[19 50]
[20 49]
[21 48]
[22 47]
[23 46]
[24 38]
[25 37]
[26 36]
[27 35]
[56 64]
[57 63]
[58 62]
[69 129]
[70 128]
[84 115]
[85 114]
[86 113]
[87 112]
[88 109]
[89 108]
[90 107]
[91 106]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
