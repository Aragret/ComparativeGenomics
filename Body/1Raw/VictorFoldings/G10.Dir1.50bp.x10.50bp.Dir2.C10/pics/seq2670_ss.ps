%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:57 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGUUAAAAAAAGUAAAAGGAACUCGGCAAAUCUUACCCCGCCUGUUUACCAAAAACAUCACCUCxxxxxxxxxxAGCCAUCGCUGUAGUAUAUCCAAAGACAACCAUCAUUCCCCCUAAAUAAAUUAAAAAAACUACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[66.66633606 163.14096069]
[73.84619141 149.97093201]
[82.15894318 137.48501587]
[91.54180908 125.77817535]
[78.21139526 132.65567017]
[69.49479675 145.85913086]
[54.63659286 144.81848145]
[41.30617142 151.69598389]
[27.97575188 158.57347107]
[14.64533234 165.45095825]
[1.31491160 172.32844543]
[15.08731747 178.27159119]
[20.79722404 192.14230347]
[15.20011806 206.05892944]
[1.47641611 212.11367798]
[-12.57573223 206.86610413]
[-18.97154617 193.29798889]
[-14.07671452 179.11903381]
[-28.14299583 184.32861328]
[-42.20927811 189.53819275]
[-41.35503769 204.62997437]
[-44.98873901 219.30265808]
[-52.78728485 232.25155640]
[-64.05722809 242.32527161]
[-77.79644775 248.62806702]
[-92.78327942 250.59947205]
[-107.68508148 248.06420898]
[-121.17681885 241.24772644]
[-132.05879211 230.75610352]
[-139.36340332 217.52227783]
[-142.44111633 202.72299194]
[-141.01828003 187.67417908]
[-135.22138977 173.71395874]
[-125.56592560 162.08367920]
[-112.91042328 153.81750488]
[-98.38021851 149.65043640]
[-83.26731110 149.95301819]
[-68.91554260 154.69834900]
[-56.60106277 163.46447754]
[-47.41885757 175.47190857]
[-33.35257721 170.26232910]
[-19.28629303 165.05274963]
[-5.56258011 158.99803162]
[7.76783991 152.12054443]
[21.09826088 145.24304199]
[34.42868042 138.36555481]
[47.75910187 131.48806763]
[55.52221298 118.77651978]
[71.33390045 119.32524872]
[84.66432190 112.44775391]
[86.93573761 97.62072754]
[76.27552795 87.06800842]
[65.61531830 76.51528931]
[54.95510864 65.96256256]
[44.29489899 55.40984344]
[28.30932808 54.05295563]
[19.52355385 40.62947845]
[24.67726707 25.43675804]
[39.81698227 20.12934685]
[53.32880402 28.77863693]
[54.84761810 44.74963379]
[65.50782776 55.30235672]
[76.16803741 65.85507965]
[86.82824707 76.40779877]
[97.48845673 86.96051788]
[104.84985352 85.52530670]
[100.55388641 71.15364838]
[96.25791168 56.78198624]
[91.96194458 42.41032410]
[87.66597748 28.03866196]
[83.37000275 13.66700172]
[75.61180878 0.82915336]
[78.96062469 -13.79224968]
[91.53298187 -21.97368050]
[106.25779724 -19.11365318]
[114.85338593 -6.82073498]
[112.48574829 7.99046087]
[113.90312958 22.92334557]
[115.32051086 37.85622787]
[116.73788452 52.78911209]
[118.15526581 67.72200012]
[119.57264709 82.65488434]
[126.93404388 81.21967316]
[132.84938049 67.43530273]
[138.76472473 53.65093613]
[136.29408264 37.43896484]
[149.26603699 27.40600777]
[164.33616638 33.87310791]
[166.00160217 50.18746948]
[152.54908752 59.56627274]
[146.63375854 73.35063934]
[140.71841431 87.13500977]
[154.30937195 80.78790283]
[168.40689087 75.66344452]
[182.90121460 71.80150604]
[197.67951965 69.23216248]
[212.62678528 67.97541046]
[227.62664795 68.04103088]
[242.56233215 69.42851257]
[257.31759644 72.12705994]
[271.77758789 76.11566162]
[285.82971191 81.36327362]
[299.36462402 87.82904053]
[312.27694702 95.46264648]
[324.46618652 104.20465088]
[335.83743286 113.98702240]
[346.30218506 124.73359680]
[355.77899170 136.36073303]
[364.19406128 148.77792358]
[371.48190308 161.88850403]
[377.58578491 175.59042358]
[382.45819092 189.77702332]
[386.06118774 204.33787537]
[388.36676025 219.15962219]
[389.35693359 234.12690735]
[389.02401733 249.12321472]
[387.37057495 264.03179932]
[384.40948486 278.73663330]
[380.16381836 293.12322998]
[374.66662598 307.07962036]
[367.96066284 320.49716187]
[360.09817505 333.27139282]
[351.14031982 345.30288696]
[341.15686035 356.49798584]
[330.22546387 366.76956177]
[318.43130493 376.03762817]
[305.86611938 384.23007202]
[292.62771606 391.28311157]
[278.81921387 397.14184570]
[264.54803467 401.76065063]
[249.92527771 405.10360718]
[235.06478882 407.14465332]
[220.08224487 407.86795044]
[205.09425354 407.26782227]
[190.21749878 405.34893799]
[175.56776428 402.12628174]
[161.25910950 397.62487793]
[147.40290833 391.87982178]
[134.10702515 384.93582153]
[121.47493744 376.84692383]
[109.60499573 367.67605591]
[98.58958435 357.49465942]
[88.51445770 346.38198853]
[79.45803833 334.42449951]
[71.49082947 321.71533203]
[64.67484283 308.35333252]
[59.06312943 294.44259644]
[54.69938278 280.09136963]
[51.61756897 265.41137695]
[49.84167099 250.51687622]
[49.38552094 235.52381897]
[50.25266266 220.54890442]
[52.43635178 205.70869446]
[55.91958618 191.11872864]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 50]
[5 49]
[7 47]
[8 46]
[9 45]
[10 44]
[11 43]
[18 42]
[19 41]
[20 40]
[51 65]
[52 64]
[53 63]
[54 62]
[55 61]
[83 92]
[84 91]
[85 90]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
