%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:06 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGUCAACACCACCUUCUUCGACCCCGCCGGAGGAGGAGACCCCAUUCUAUACCAACACCUAUUxxxxxxxxxxAAUUAUAUUACUACCACUGACAUGACUUUCCAAAAAACACAUAAUUUGAAUCAACACAACCCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[112.94276428 324.76608276]
[112.94276428 309.76608276]
[112.94276428 294.76608276]
[112.94276428 279.76608276]
[112.94276428 264.76608276]
[112.94276428 249.76608276]
[112.94276428 234.76608276]
[112.94276428 219.76608276]
[112.94276428 204.76608276]
[112.94276428 189.76608276]
[111.09944153 174.87977600]
[107.44073486 160.33282471]
[103.78202820 145.78587341]
[100.12332153 131.23890686]
[91.56377411 130.88696289]
[83.21627808 128.17774963]
[75.73220062 123.20497894]
[69.72613525 116.24262238]
[65.72605133 107.73130035]
[64.12830353 98.25108337]
[49.61967468 102.05894470]
[35.11104965 105.86679840]
[20.60242462 109.67465973]
[6.09379864 113.48252106]
[-8.41482639 117.29037476]
[-22.92345238 121.09823608]
[-37.43207932 124.90609741]
[-51.94070435 128.71395874]
[-58.45806503 142.92866516]
[-72.60976410 149.58174133]
[-87.71380615 145.53179932]
[-96.63851929 132.69110107]
[-95.16992950 117.12263489]
[-84.00145721 106.17734528]
[-68.40651703 105.02326965]
[-55.74856186 114.20532990]
[-41.23993683 110.39746857]
[-26.73131180 106.58960724]
[-12.22268581 102.78175354]
[2.28593993 98.97389221]
[16.79456520 95.16603088]
[31.30319023 91.35817719]
[45.81181717 87.55031586]
[60.32044220 83.74245453]
[68.34744263 71.07094574]
[65.59119415 56.32634735]
[50.60633850 57.32155228]
[35.60895538 56.53742981]
[20.80958557 53.98498154]
[6.41598797 49.70004272]
[-7.36977291 43.74276733]
[-20.35416794 36.19678116]
[-32.35491562 27.16802597]
[-43.20354080 16.78324699]
[-52.74774933 5.18822956]
[-60.85355759 -7.45424891]
[-67.40716553 -20.96670723]
[-72.31658173 -35.15945435]
[-75.51287842 -49.83324051]
[-76.95117950 -64.78207397]
[-76.61130524 -79.79609680]
[-74.49801636 -94.66453552]
[-70.64098358 -109.17864990]
[-65.09436035 -123.13470459]
[-57.93600082 -136.33676147]
[-49.26640701 -148.59948730]
[-39.20728302 -159.75073242]
[-27.89984322 -169.63395691]
[-15.50282574 -178.11041260]
[-2.19026613 -185.06111145]
[11.85094833 -190.38845825]
[26.42370224 -194.01766968]
[41.32341385 -195.89781189]
[56.34091568 -196.00248718]
[71.26538849 -194.33021545]
[85.88731384 -190.90446472]
[100.00141907 -185.77334595]
[113.40956879 -179.00889587]
[125.92353821 -170.70605469]
[137.36763000 -160.98141479]
[147.58122253 -149.97145081]
[156.42089844 -137.83076477]
[163.76257324 -124.72975922]
[169.50318909 -110.85237885]
[173.56214905 -96.39343262]
[175.88247681 -81.55590057]
[176.43161011 -66.54807281]
[175.20181274 -51.58064270]
[172.21035767 -36.86372757]
[167.49925232 -22.60393143]
[161.13461304 -9.00143623]
[153.20582581 3.75279784]
[143.82415771 15.47972202]
[133.12133789 26.01470947]
[121.24760437 35.20986176]
[108.36965179 42.93610001]
[94.66826630 49.08495331]
[80.33579254 53.57010269]
[83.09203339 68.31469727]
[98.14141846 65.30422211]
[112.55239868 68.85784149]
[123.69080353 77.88618469]
[129.70866394 90.34185028]
[144.66995239 89.26477814]
[159.63122559 88.18770599]
[169.95333862 76.52186584]
[185.14155579 75.64269257]
[196.19953918 85.55513763]
[211.16081238 84.47807312]
[226.12210083 83.40100098]
[237.66725159 72.26148224]
[253.55543518 74.48526001]
[261.59860229 88.36643982]
[255.62669373 103.25656891]
[240.22088623 107.73322296]
[227.19915771 98.36228180]
[212.23788452 99.43935394]
[197.27659607 100.51641846]
[187.75248718 111.91058350]
[172.59497070 113.21601105]
[160.70829773 103.14898682]
[145.74702454 104.22605896]
[130.78573608 105.30313110]
[128.79229736 112.11977386]
[125.31066132 118.30998230]
[120.52079773 123.55381012]
[114.67028046 127.58020782]
[118.32898712 142.12716675]
[121.98769379 156.67411804]
[125.64639282 171.22106934]
[131.11425781 157.25315857]
[142.01982117 146.95419312]
[156.27746582 142.29376221]
[171.16052246 144.16316223]
[183.82270813 152.20486450]
[191.84246826 164.88095093]
[193.68609619 179.76722717]
[189.00099182 194.01676941]
[178.68315125 204.90447998]
[164.70579529 210.34815979]
[149.74198914 209.30671692]
[136.65345764 201.97933960]
[127.94276428 189.76608276]
[127.94276428 204.76608276]
[127.94276428 219.76608276]
[127.94276428 234.76608276]
[127.94276428 249.76608276]
[127.94276428 264.76608276]
[127.94276428 279.76608276]
[127.94276428 294.76608276]
[127.94276428 309.76608276]
[127.94276428 324.76608276]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 152]
[2 151]
[3 150]
[4 149]
[5 148]
[6 147]
[7 146]
[8 145]
[9 144]
[10 143]
[11 130]
[12 129]
[13 128]
[14 127]
[20 44]
[21 43]
[22 42]
[23 41]
[24 40]
[25 39]
[26 38]
[27 37]
[28 36]
[45 99]
[46 98]
[103 123]
[104 122]
[105 121]
[108 118]
[109 117]
[110 116]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
