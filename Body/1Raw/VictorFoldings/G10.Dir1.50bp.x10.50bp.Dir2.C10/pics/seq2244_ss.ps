%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:49 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCUAAAUCCCCUUGUAAAUUUAACUGUUAGUCCAAAGAGGAACAGCUCUUUGGACACUAGGxxxxxxxxxxUAAAAGUAAUAACCAUGCACACUACUAUAACCACCCUAACCCUGACUUCCCUAAUUCCCCCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[92.50000000 279.97036743]
[92.50000000 264.97036743]
[92.50000000 249.97035217]
[92.50000000 234.97035217]
[92.50000000 219.97035217]
[92.50000000 204.97035217]
[92.50000000 189.97035217]
[92.50000000 174.97035217]
[92.50000000 159.97035217]
[92.50000000 144.97035217]
[80.27966309 141.10585022]
[69.61782837 133.99275208]
[57.91820526 143.37991333]
[46.21858215 152.76707458]
[34.51895905 162.15423584]
[22.81933594 171.54139709]
[25.23286247 186.70947266]
[19.72401810 201.04641724]
[7.77465534 210.69567871]
[-7.40090895 213.06166077]
[-21.72052383 207.50790405]
[-31.33228493 195.52835083]
[-33.65067673 180.34544373]
[-28.05206108 166.04330444]
[-16.04244041 156.46914673]
[-0.85234284 154.19834900]
[13.43217373 159.84176636]
[25.13179779 150.45460510]
[36.83142090 141.06744385]
[48.53104401 131.68028259]
[60.23066711 122.29312134]
[54.41783142 99.07856750]
[61.16408920 76.11788940]
[78.61067200 59.73736572]
[101.95057678 54.45026398]
[105.04890442 39.77373886]
[108.14722443 25.09721375]
[88.36637878 21.46534538]
[82.60812378 4.23995781]
[69.99699402 -3.88158441]
[57.38586426 -12.00312710]
[44.77473450 -20.12466812]
[32.16360855 -28.24621010]
[19.55248070 -36.36775208]
[6.94135189 -44.48929596]
[-5.66977644 -52.61083603]
[-18.28090477 -60.73237991]
[-30.89203262 -68.85391998]
[-46.28332901 -65.26454926]
[-59.66038132 -73.68060303]
[-63.08682632 -89.10898590]
[-54.52981567 -102.39631653]
[-39.06606674 -105.65944672]
[-25.86995125 -96.96243286]
[-22.77049065 -81.46504974]
[-10.15936279 -73.34350586]
[2.45176578 -65.22196198]
[15.06289387 -57.10042191]
[27.67402267 -48.97888184]
[40.28514862 -40.85733795]
[52.89627838 -32.73579788]
[65.50740814 -24.61425400]
[78.11853790 -16.49271202]
[90.72966003 -8.37117004]
[98.77841949 -11.74393654]
[107.92770386 -10.71828365]
[115.81408691 -5.09376335]
[120.18000793 4.08791161]
[131.27133179 -6.01073837]
[142.36264038 -16.10938835]
[134.61483765 -29.00758362]
[129.53399658 -43.16500092]
[127.31362915 -58.03688812]
[128.03721619 -73.05138397]
[131.67507935 -87.63152313]
[138.08558655 -101.21738434]
[147.02067566 -113.28761292]
[158.13540649 -123.37941742]
[171.00134277 -131.10632324]
[185.12306213 -136.17297363]
[199.95716858 -138.38638306]
[214.93324280 -137.66333008]
[229.47579956 -134.03350830]
[243.02638245 -127.63820648]
[255.06497192 -118.72492981]
[266.15628052 -128.82357788]
[277.24758911 -138.92222595]
[288.33892822 -149.02087402]
[283.15240479 -163.30963135]
[283.83377075 -178.49530029]
[290.27908325 -192.26214600]
[301.50552368 -202.51084900]
[315.80108643 -207.67855835]
[330.98583984 -206.97721863]
[344.74420166 -200.51379395]
[354.97811890 -189.27389526]
[360.12701416 -174.97154236]
[359.40570068 -159.78773499]
[352.92419434 -146.03788757]
[341.67083740 -135.81875610]
[327.36172485 -130.68867493]
[312.17886353 -131.42996216]
[298.43756104 -137.92956543]
[287.34625244 -127.83090973]
[276.25494385 -117.73226166]
[265.16360474 -107.63361359]
[272.91241455 -94.81447601]
[278.01290894 -80.72536469]
[280.26730347 -65.90715027]
[279.58709717 -50.92906570]
[275.99658203 -36.36685562]
[269.63195801 -22.78065109]
[260.73608398 -10.69341278]
[249.64938354 -0.57080954]
[236.79670715 7.19672728]
[222.67105103 12.30906010]
[207.81466675 14.56794167]
[192.79827881 13.88470268]
[178.19909668 10.28373241]
[164.57867432 3.90160966]
[152.46128845 -5.01807213]
[141.36997986 5.08057737]
[130.27865601 15.17922688]
[122.82374573 28.19553566]
[119.72542572 42.87206268]
[116.62710571 57.54858780]
[123.70727539 61.05711365]
[130.07530212 65.73545074]
[135.53988647 71.44305420]
[139.93690491 78.00848389]
[143.13424683 85.23451233]
[145.03588867 92.90408325]
[145.58468628 100.78680420]
[144.76417542 108.64589691]
[142.59899902 116.24526978]
[139.15417480 123.35665894]
[134.53320312 129.76643372]
[128.87489319 135.28205872]
[122.34922028 139.73783875]
[115.15218353 142.99993896]
[107.50000000 144.97035217]
[107.50000000 159.97035217]
[107.50000000 174.97035217]
[107.50000000 189.97035217]
[107.50000000 204.97035217]
[107.50000000 219.97035217]
[107.50000000 234.97035217]
[107.50000000 249.97035217]
[107.50000000 264.97036743]
[107.50000000 279.97036743]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[12 31]
[13 30]
[14 29]
[15 28]
[16 27]
[35 126]
[36 125]
[37 124]
[39 64]
[40 63]
[41 62]
[42 61]
[43 60]
[44 59]
[45 58]
[46 57]
[47 56]
[48 55]
[68 123]
[69 122]
[70 121]
[85 106]
[86 105]
[87 104]
[88 103]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
