%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:06 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCCACACCCCCACGGGAAACAGCAGUGAUUAACCUUUAGCAAUAAACGAAAGUUUAACUAAGCUAxxxxxxxxxxCUAACCCCUGUCUUUAGAUUUACAGUCCAAUGCUUCACUCAGCCAUUUUACCUCACCCCCACUGCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[124.60599518 259.99942017]
[124.60599518 244.99943542]
[124.60599518 229.99943542]
[124.60599518 214.99943542]
[124.60599518 199.99943542]
[124.60599518 184.99943542]
[124.60599518 169.99943542]
[124.60599518 154.99943542]
[124.60599518 139.99943542]
[124.60599518 124.99942780]
[117.71286774 122.04395294]
[116.35138702 136.98204041]
[101.72370148 140.30329895]
[94.04481506 127.41784668]
[103.92662048 116.13301086]
[97.03349304 113.17753601]
[86.16819000 123.51896667]
[75.30288696 133.86039734]
[71.19013214 149.73545837]
[55.31551361 153.84986877]
[44.00947189 141.97108459]
[48.90269470 126.31898499]
[64.96145630 122.99510193]
[75.82675934 112.65366364]
[86.69206238 102.31223297]
[92.46652222 88.46826172]
[92.17016602 73.47119141]
[91.87380981 58.47411728]
[80.76142120 47.55841064]
[80.67451477 32.34502792]
[91.14945221 21.81833458]
[90.85309601 6.82126331]
[90.26049042 -8.16702652]
[89.37188721 -23.14068222]
[88.48327637 -38.11433792]
[87.59466553 -53.08799362]
[86.70605469 -68.06165314]
[77.71087646 -56.05803680]
[63.70376587 -50.69140244]
[48.99075317 -53.61154938]
[38.09488678 -63.92077255]
[34.36574936 -78.44982910]
[38.94974518 -92.73223114]
[50.43767166 -102.37731171]
[65.29793549 -104.41999054]
[78.96222687 -98.23232269]
[87.22949219 -85.71777344]
[89.00359344 -100.61248779]
[90.77769470 -115.50720215]
[92.55178833 -130.40191650]
[74.82508850 -146.99189758]
[77.42609406 -173.72116089]
[66.35859680 -183.84591675]
[55.29109955 -193.97065735]
[44.22359848 -204.09539795]
[33.15610123 -214.22015381]
[17.03480339 -217.22610474]
[11.83329391 -232.77848816]
[22.90243912 -244.87832642]
[38.85525131 -241.07833862]
[43.28084564 -225.28764343]
[54.34834671 -215.16290283]
[65.41584778 -205.03816223]
[76.48334503 -194.91340637]
[87.55084229 -184.78866577]
[102.09566498 -188.45582581]
[107.03986359 -202.61756897]
[111.98405457 -216.77931213]
[116.50641632 -231.08134460]
[120.60298157 -245.51110840]
[116.92869568 -260.89974976]
[127.84773254 -271.03009033]
[131.94429016 -285.45986938]
[136.04084778 -299.88964844]
[122.94120026 -307.35037231]
[112.00816345 -317.72979736]
[103.87736511 -330.42440796]
[99.02152252 -344.69622803]
[97.72295380 -359.71545410]
[100.05714417 -374.60888672]
[105.88838959 -388.51068115]
[114.87767792 -400.61260986]
[126.50237274 -410.21102905]
[140.08663940 -416.74795532]
[154.84069824 -419.84329224]
[169.90676880 -419.31710815]
[184.40893555 -415.20001221]
[197.50405884 -407.73132324]
[208.43080139 -397.34527588]
[216.55389404 -384.64572144]
[221.40109253 -370.37097168]
[222.69055176 -355.35098267]
[220.34733582 -340.45892334]
[214.50765991 -326.56066895]
[205.51104736 -314.46423340]
[193.88052368 -304.87283325]
[180.29229736 -298.34417725]
[165.53636169 -295.25775146]
[150.47061157 -295.79309082]
[146.37405396 -281.36331177]
[142.27749634 -266.93353271]
[146.24479675 -252.57701111]
[135.03274536 -241.41455078]
[130.93618774 -226.98478699]
[132.36622620 -223.70689392]
[132.24710083 -219.56391907]
[130.18560791 -215.30679321]
[126.14579773 -211.83511353]
[121.20160675 -197.67337036]
[116.25740814 -183.51162720]
[127.80848694 -172.65341187]
[132.39503479 -158.09991455]
[129.39624023 -143.74479675]
[120.14517212 -133.14231873]
[107.44650269 -128.62782288]
[105.67240906 -113.73310852]
[103.89830780 -98.83838654]
[102.12421417 -83.94367218]
[101.67971039 -68.95025635]
[102.56832123 -53.97660446]
[103.45693207 -39.00294876]
[104.34554291 -24.02929115]
[105.23415375 -9.05563545]
[108.18738556 -5.24082279]
[108.73986053 0.48274317]
[105.85016632 6.52490568]
[106.14652252 21.52197838]
[117.02915955 31.62662125]
[117.54334259 46.83156586]
[106.87088013 58.17776108]
[107.16723633 73.17483521]
[107.46359253 88.17190552]
[114.39349365 74.86865234]
[121.60140228 61.71395874]
[132.47451782 51.38074112]
[145.97895813 44.85155869]
[160.83061218 42.74724960]
[175.61730957 45.26790237]
[188.93301392 52.17383575]
[199.51159668 62.80839157]
[206.34715271 76.16036224]
[208.78971863 90.96015930]
[206.60705566 105.80050659]
[200.00668335 119.27029419]
[189.61622620 130.08871460]
[176.42366028 137.22709656]
[161.68345642 140.00665283]
[146.79737854 138.16316223]
[139.60598755 124.99942780]
[139.60598755 139.99943542]
[139.60598755 154.99943542]
[139.60598755 169.99943542]
[139.60598755 184.99943542]
[139.60598755 199.99943542]
[139.60598755 214.99943542]
[139.60598755 229.99943542]
[139.60598755 244.99943542]
[139.60598755 259.99942017]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 158]
[2 157]
[3 156]
[4 155]
[5 154]
[6 153]
[7 152]
[8 151]
[9 150]
[10 149]
[16 25]
[17 24]
[18 23]
[26 132]
[27 131]
[28 130]
[31 127]
[32 126]
[33 123]
[34 122]
[35 121]
[36 120]
[37 119]
[47 118]
[48 117]
[49 116]
[50 115]
[52 65]
[53 64]
[54 63]
[55 62]
[56 61]
[66 110]
[67 109]
[68 108]
[69 104]
[70 103]
[72 101]
[73 100]
[74 99]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
