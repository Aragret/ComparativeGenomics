%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:31 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCCAACCCCAUGGCCUCCAUGACUUUUUCAAAAAGGUAUUAGAAAAACCAUUUCAUAACUUxxxxxxxxxxGCAAAACUAACCCCCUAAUAAAAUUAAUUAACCACUCAUUCAUCGACCUCCCCACCCCAUCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[170.18263245 158.55099487]
[156.52639771 152.34559631]
[142.87014771 146.14018250]
[129.21391296 139.93476868]
[115.55767059 133.72937012]
[100.94877625 137.13233948]
[91.44041443 148.73368835]
[81.93206024 160.33502197]
[72.42369843 171.93637085]
[62.91534042 183.53770447]
[53.40698242 195.13905334]
[43.89862442 206.74038696]
[34.39026642 218.34173584]
[36.19879532 234.04220581]
[26.31040001 246.37083435]
[10.59168625 248.01327515]
[-1.63171017 237.99508667]
[-3.10786533 222.25988770]
[7.03899765 210.14308167]
[22.78892517 208.83337402]
[32.29728317 197.23204041]
[41.80564117 185.63069153]
[51.31399918 174.02935791]
[60.82235718 162.42800903]
[70.33071899 150.82667542]
[79.83907318 139.22532654]
[89.34743500 127.62398529]
[74.85568237 109.96486664]
[77.93057251 89.39080811]
[67.05175018 79.06360626]
[54.34727097 87.16804504]
[40.08091736 91.99333954]
[25.08335686 93.26310730]
[10.22673893 90.90786743]
[-3.62601900 85.06881714]
[-15.67136478 76.08937073]
[-25.21171379 64.49497986]
[-31.69585419 50.96235657]
[-34.75078583 36.28001022]
[-34.20318604 21.30229378]
[-30.08921814 6.89967966]
[-22.65220070 -6.09182310]
[-33.53102493 -16.41902733]
[-44.40985107 -26.74623299]
[-59.74547195 -30.63586426]
[-63.64901352 -45.00985718]
[-74.52783966 -55.33706284]
[-85.40666199 -65.66426849]
[-91.83562469 -67.60744476]
[-95.69541931 -71.88918304]
[-96.51189423 -76.65457153]
[-106.95170593 -87.42537689]
[-117.39151764 -98.19618988]
[-127.83132935 -108.96699524]
[-143.78543091 -110.65400696]
[-152.29188538 -124.25621796]
[-146.82524109 -139.33917236]
[-131.57905579 -144.33251953]
[-118.24890137 -135.40579224]
[-117.06052399 -119.40680695]
[-106.62071228 -108.63600159]
[-96.18089294 -97.86518860]
[-85.74108124 -87.09438324]
[-75.07946014 -76.54309082]
[-64.20063019 -66.21588898]
[-53.32180786 -55.88868332]
[-38.76430893 -52.73772049]
[-34.08264542 -37.62505722]
[-23.20381927 -27.29785347]
[-12.32499504 -16.97064781]
[0.26229042 -25.07303238]
[14.43154335 -29.93022346]
[29.36053467 -31.25577164]
[44.18184662 -28.96830177]
[58.03327942 -23.19648552]
[70.10799408 -14.27182770]
[79.70153046 -2.70961022]
[86.25288391 10.82084370]
[89.37732697 25.53491974]
[88.88899231 40.57821655]
[84.81192780 55.07614136]
[77.37895203 68.18478394]
[88.25777435 78.51198578]
[96.29166412 75.14815521]
[105.21673584 74.76664734]
[113.93425751 77.56871033]
[121.31793976 83.35425568]
[126.35909271 91.52879333]
[128.30299377 101.16223145]
[126.75814056 111.09406281]
[121.76307678 120.07312775]
[135.41931152 126.27853394]
[149.07556152 132.48394775]
[162.73179626 138.68934631]
[176.38804626 144.89476013]
[184.04049683 131.97627258]
[193.04484558 119.96091461]
[203.29551697 108.98954773]
[214.67233276 99.19081116]
[227.04191589 90.67958832]
[240.25921631 83.55566406]
[254.16926575 77.90257263]
[268.60900879 73.78659058]
[283.40911865 71.25597382]
[298.39608765 70.34038544]
[313.39416504 71.05057526]
[328.22756958 73.37820435]
[342.72232056 77.29598999]
[356.70852661 82.75799561]
[370.02215576 89.70018005]
[382.50717163 98.04114532]
[394.01715088 107.68311310]
[404.41717529 118.51302338]
[413.58529663 130.40390015]
[421.41400146 143.21633911]
[427.81152344 156.80010986]
[432.70285034 170.99597168]
[436.03063965 185.63745117]
[437.75585938 200.55290222]
[437.85830688 215.56745911]
[436.33676147 230.50506592]
[433.20907593 245.19059753]
[428.51190186 259.45187378]
[422.30035400 273.12167358]
[414.64718628 286.03973389]
[405.64221191 298.05462646]
[395.39093018 309.02542114]
[384.01358032 318.82354736]
[371.64355469 327.33410645]
[358.42587280 334.45733643]
[344.51550293 340.10968018]
[330.07556152 344.22488403]
[315.27529907 346.75469971]
[300.28829956 347.66946411]
[285.29025269 346.95849609]
[270.45697021 344.63006592]
[255.96243286 340.71148682]
[241.97651672 335.24871826]
[228.66323853 328.30581665]
[216.17868042 319.96420288]
[204.66921997 310.32159424]
[194.26979065 299.49114990]
[185.10232544 287.59976196]
[177.27429199 274.78689575]
[170.87750244 261.20278931]
[165.98693848 247.00666809]
[162.65994263 232.36500549]
[160.93551636 217.44946289]
[160.83387756 202.43490601]
[162.35621643 187.49737549]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 95]
[2 94]
[3 93]
[4 92]
[5 91]
[6 27]
[7 26]
[8 25]
[9 24]
[10 23]
[11 22]
[12 21]
[13 20]
[29 83]
[30 82]
[42 70]
[43 69]
[44 68]
[46 66]
[47 65]
[48 64]
[51 63]
[52 62]
[53 61]
[54 60]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
