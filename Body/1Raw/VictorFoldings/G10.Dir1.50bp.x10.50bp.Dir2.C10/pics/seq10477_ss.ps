%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:13 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGAUUAACAACAUAAAACCCUCAUUCACACGAGAAAACACCCUCAUGUUCAUACACCUAUCCCxxxxxxxxxxACCCCAUUAAACGCCUGGCAGCCGGAAGCCUAUUCGCAGGAUUUCUCAUUACUAACAACAUCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[72.30683899 374.22622681]
[72.30683899 359.22622681]
[72.30683899 344.22622681]
[72.30683899 329.22622681]
[72.30683899 314.22622681]
[72.30683899 299.22622681]
[72.30683899 284.22622681]
[72.30683899 269.22622681]
[72.30683899 254.22621155]
[72.30683899 239.22621155]
[70.46351624 224.33990479]
[66.80480957 209.79295349]
[62.38211823 224.12612915]
[54.93529892 237.14706421]
[44.82402802 248.22688293]
[32.53667068 256.83041382]
[18.66669464 262.54214478]
[3.88400388 265.08615112]
[-11.09740734 264.33963013]
[-25.55395126 260.33859253]
[-38.78739166 253.27629089]
[-50.15856171 243.49383545]
[-59.11824799 231.46369934]
[-65.23370361 217.76693726]
[-68.20955658 203.06509399]
[-67.90207672 188.06823730]
[-64.32611847 173.50073242]
[-57.65439606 160.06614685]
[-48.20914459 148.41336060]
[-36.44655991 139.10520935]
[-22.93476868 132.59126282]
[-8.32637787 129.18614197]
[6.67304325 129.05430603]
[21.33903503 132.20211792]
[34.96324158 138.47753906]
[46.88762665 147.57748413]
[56.53625488 159.06242371]
[63.44310760 172.37765503]
[67.27526093 186.88456726]
[71.52810669 172.50007629]
[75.78095245 158.11560059]
[80.03379822 143.73112488]
[84.28664398 129.34663391]
[88.53948975 114.96215820]
[81.84748840 128.38665771]
[69.16400146 136.39471436]
[54.16642761 136.66450500]
[41.20311737 129.11781311]
[34.03261566 115.94268799]
[34.73390961 100.95909119]
[43.10367203 88.51131439]
[56.71519852 82.20842743]
[71.62200928 83.87786865]
[83.50060272 93.03364563]
[73.39517212 81.94851685]
[63.28973389 70.86338043]
[47.50677490 66.41026306]
[43.73461914 50.45085144]
[55.85373306 39.40281677]
[71.39701843 44.63143158]
[74.37487030 60.75794601]
[84.48030090 71.84307861]
[94.58573914 82.92821503]
[109.57308960 82.31238556]
[118.73502350 70.43556213]
[127.89695740 58.55873871]
[113.88665009 63.91702271]
[99.06111908 66.19817352]
[84.08806610 65.29943848]
[69.64183807 61.26131439]
[56.37305069 54.26565552]
[44.87929153 44.62752914]
[35.67820740 32.78100586]
[29.18418884 19.25962639]
[25.68970871 4.67235136]
[25.35214996 -10.32384968]
[28.18671227 -25.05359077]
[34.06573868 -38.85348511]
[42.72444916 -51.10202408]
[53.77288818 -61.24756622]
[66.71345520 -68.83319092]
[80.96334839 -73.51725769]
[95.88079834 -75.08881378]
[110.79395294 -73.47707367]
[125.03118134 -68.75463104]
[137.95126343 -61.13417053]
[148.97232056 -50.95889664]
[157.59800720 -38.68707657]
[163.43983459 -24.87139320]
[166.23469543 -10.13406944]
[165.85673523 4.86116743]
[162.32296753 19.43897629]
[155.79255676 32.94281006]
[146.56147766 44.76254654]
[160.60345459 39.48780823]
[167.84190369 20.80720711]
[186.16682434 13.49139977]
[203.73283386 21.79234695]
[217.42346191 15.66317272]
[231.11408997 9.53399944]
[234.17720032 -5.67773962]
[245.61930847 -16.15904427]
[261.04071045 -17.87963676]
[274.51153564 -10.17791843]
[280.85198975 3.98464632]
[277.62402344 19.16226006]
[266.06887817 29.51882362]
[250.62974548 31.07202339]
[237.24325562 23.22462463]
[223.55264282 29.35379791]
[209.86201477 35.48297119]
[208.90379333 45.80942535]
[203.67684937 54.86047363]
[195.07928467 60.94540024]
[184.64576721 62.89503098]
[174.27369690 60.28586578]
[165.87818909 53.52978134]
[151.83621216 58.80452347]
[139.77378845 67.72067261]
[130.61184692 79.59749603]
[121.44991302 91.47431946]
[118.44140625 110.57673645]
[102.92397308 119.21500397]
[98.67112732 133.59948730]
[94.41828156 147.98396301]
[90.16543579 162.36845398]
[85.91258240 176.75292969]
[81.65973663 191.13740540]
[81.35176086 206.13424683]
[85.01046753 220.68119812]
[90.47832489 206.71328735]
[101.38388824 196.41432190]
[115.64153290 191.75389099]
[130.52458191 193.62329102]
[143.18678284 201.66499329]
[151.20654297 214.34107971]
[153.05017090 229.22735596]
[148.36506653 243.47691345]
[138.04722595 254.36462402]
[124.06987000 259.80828857]
[109.10606384 258.76684570]
[96.01753235 251.43948364]
[87.30683899 239.22621155]
[87.30683899 254.22621155]
[87.30683899 269.22622681]
[87.30683899 284.22622681]
[87.30683899 299.22622681]
[87.30683899 314.22622681]
[87.30683899 329.22622681]
[87.30683899 344.22622681]
[87.30683899 359.22622681]
[87.30683899 374.22622681]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 152]
[2 151]
[3 150]
[4 149]
[5 148]
[6 147]
[7 146]
[8 145]
[9 144]
[10 143]
[11 130]
[12 129]
[39 128]
[40 127]
[41 126]
[42 125]
[43 124]
[44 123]
[54 63]
[55 62]
[56 61]
[64 121]
[65 120]
[66 119]
[94 118]
[95 117]
[98 111]
[99 110]
[100 109]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
