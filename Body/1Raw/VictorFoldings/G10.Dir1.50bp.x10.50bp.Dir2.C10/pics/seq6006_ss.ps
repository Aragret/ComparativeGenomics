%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:16 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGUAACAGCUAAGGACUGCAAAACCCCACUCUGCAUCAACUGAACGCAAAUCAGCCACUUUAAUUAxxxxxxxxxxAAGCUAAGCCCUUACUAGACCAAUGGGACUUAAACCCACAAACACUUAGUUAACAGCUAAGCACCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[112.27864075 273.96191406]
[112.27864075 258.96191406]
[112.27864075 243.96191406]
[112.27864075 228.96191406]
[112.27864075 213.96191406]
[112.27864075 198.96191406]
[112.27864075 183.96191406]
[112.27864075 168.96191406]
[112.27864075 153.96191406]
[112.27864075 138.96191406]
[95.11384583 139.36807251]
[79.80802917 132.76760864]
[68.99381256 120.74967957]
[64.33929443 105.79100037]
[66.29848480 90.75299835]
[53.02194595 83.77205658]
[39.74540710 76.79111481]
[26.46886826 69.81018066]
[12.21220589 65.14674377]
[-2.62339687 62.93204498]
[-17.45899963 60.71735001]
[-32.44070435 61.45798874]
[-46.98552704 65.12514496]
[-54.58992386 70.28357697]
[-61.85395432 68.71805573]
[-76.46839142 72.09712982]
[-91.08283234 75.47621155]
[-105.69727325 78.85528564]
[-109.51256561 93.67764282]
[-119.78772736 105.02133942]
[-134.16160583 110.27969360]
[-149.33117676 108.24436951]
[-161.81060791 99.38306427]
[-168.73217773 85.73204041]
[-168.50540161 70.42821503]
[-161.18235779 56.98828506]
[-148.44584656 48.50064850]
[-133.22262573 46.91570663]
[-119.01087189 52.59766388]
[-109.07634735 64.24085236]
[-94.46190643 60.86177063]
[-79.84747314 57.48269272]
[-65.23303223 54.10361481]
[-50.65268707 50.58032227]
[-36.10786057 46.91316223]
[-34.78118515 39.53143311]
[-32.12783051 24.76797485]
[-30.80115318 17.38624573]
[-43.15884781 8.88404751]
[-55.51654434 0.38184845]
[-67.87423706 -8.12035084]
[-82.89587402 -3.77473640]
[-97.17543030 -10.14876747]
[-103.97053528 -24.23282242]
[-100.07274628 -39.37683868]
[-87.32247925 -48.43027878]
[-71.74002838 -47.11838150]
[-60.68293762 -36.06058502]
[-59.37203979 -20.47804451]
[-47.01434326 -11.97584629]
[-34.65665054 -3.47364736]
[-22.29895592 5.02855158]
[-13.87282944 15.75899315]
[-10.19442940 27.21272659]
[-10.93393421 37.72451401]
[-15.24430084 45.88174438]
[-0.40869832 48.09644318]
[14.42690468 50.31114197]
[2.91665864 40.69271088]
[-4.92112207 27.90329361]
[-8.26635647 13.28106976]
[-6.76902819 -1.64400971]
[-0.58580363 -15.31030941]
[9.63635445 -26.28789902]
[22.82788467 -33.42817307]
[37.60853195 -35.98403549]
[52.43177414 -33.68806076]
[65.74662781 -26.78047943]
[76.15993500 -15.98404503]
[82.58213806 -2.42840648]
[84.34126282 12.46808529]
[81.25325775 27.14678383]
[73.64122009 40.07183456]
[62.30160904 49.89086151]
[48.42091370 55.57648468]
[33.44980621 56.53363800]
[46.72634506 63.51457977]
[60.00288391 70.49551392]
[73.27942657 77.47645569]
[80.50284576 70.21007538]
[89.67938995 65.24077606]
[100.08386230 63.08507156]
[110.85757446 64.03205109]
[121.07918549 68.11003113]
[129.84349060 75.07511139]
[136.34136963 84.42334747]
[139.93385315 95.42628479]
[140.21363831 107.18738556]
[155.09010315 105.26622772]
[169.96656799 103.34506989]
[184.84303284 101.42391205]
[188.97563171 85.11420441]
[199.01541138 71.65847778]
[213.41018677 63.09016037]
[229.95233154 60.69068909]
[246.11735535 64.79791260]
[259.44912720 74.75885010]
[267.93316650 89.03332520]
[282.72210693 86.52594757]
[297.51104736 84.01856995]
[312.30001831 81.51119995]
[320.05120850 67.92984772]
[334.73672485 62.55682373]
[349.42251587 67.92910004]
[357.17440796 81.51004791]
[354.33218384 96.88716888]
[342.23785400 106.79985046]
[326.60198975 106.56762695]
[314.80737305 96.30014801]
[300.01843262 98.80752563]
[285.22949219 101.31489563]
[270.44052124 103.82227325]
[268.30319214 116.96366119]
[262.19696045 128.82058716]
[252.70764160 138.22462463]
[240.75526428 144.24412537]
[227.50479126 146.27656555]
[214.25263977 144.10882568]
[202.29977417 137.93939209]
[192.82408142 128.36029053]
[186.76419067 116.30037689]
[171.88772583 118.22153473]
[157.01126099 120.14269257]
[142.13479614 122.06385040]
[156.11117554 127.51003265]
[170.08755493 132.95620728]
[185.05931091 133.87609863]
[198.16882324 141.16587830]
[206.84986877 153.39860535]
[209.40315247 168.17968750]
[205.32885742 182.61576843]
[195.42454529 193.88095093]
[181.62896729 199.77009583]
[166.64260864 199.13040161]
[153.39906311 192.08708191]
[144.49073792 180.01887512]
[141.66140747 165.28938293]
[134.47001648 152.12565613]
[127.27864075 138.96191406]
[127.27864075 153.96191406]
[127.27864075 168.96191406]
[127.27864075 183.96191406]
[127.27864075 198.96191406]
[127.27864075 213.96191406]
[127.27864075 228.96191406]
[127.27864075 243.96191406]
[127.27864075 258.96191406]
[127.27864075 273.96191406]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 158]
[2 157]
[3 156]
[4 155]
[5 154]
[6 153]
[7 152]
[8 151]
[9 150]
[10 149]
[15 89]
[16 88]
[17 87]
[18 86]
[19 68]
[20 67]
[21 66]
[22 45]
[23 44]
[25 43]
[26 42]
[27 41]
[28 40]
[48 62]
[49 61]
[50 60]
[51 59]
[98 134]
[99 133]
[100 132]
[101 131]
[108 122]
[109 121]
[110 120]
[111 119]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
