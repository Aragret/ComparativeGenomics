%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:22 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCUUCUGACUCUUACCUCCCUCUCUCCUACUCCUGCUCGCAUCUGCUAUAGUGGAGGCCGGxxxxxxxxxxCUAGCUUACACAAUAGCUUUUAUAGUAAAGAUACCUCUUUACGGACUCCACUUAUGACUCCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[87.75155640 445.18203735]
[87.75155640 430.18203735]
[87.75155640 415.18203735]
[87.75155640 400.18203735]
[87.75155640 385.18203735]
[87.75155640 370.18203735]
[87.75155640 355.18203735]
[87.75155640 340.18203735]
[87.75155640 325.18203735]
[87.75155640 310.18203735]
[73.02174377 307.44836426]
[59.04137039 302.05310059]
[46.28709030 294.17861938]
[35.19404221 284.09182739]
[26.14101410 272.13519287]
[19.43748665 258.71502686]
[15.31307507 244.28773499]
[13.90965176 229.34423828]
[15.27647400 214.39335632]
[19.36845016 199.94439697]
[26.04763031 186.48982239]
[35.08785629 174.48854065]
[46.18241501 164.35014343]
[58.95445251 156.42098999]
[72.96975708 150.97238159]
[87.75155640 148.19123840]
[87.75155640 133.19123840]
[87.75155640 118.19123077]
[83.35862732 132.53355408]
[75.96845245 145.58673096]
[65.93069458 156.73318481]
[53.72024918 165.44552612]
[39.91483307 171.31158447]
[25.16761971 174.05378723]
[10.17634010 173.54241943]
[-4.34973049 169.80165100]
[-17.72332191 163.00849915]
[-29.31169510 153.48432922]
[-38.56657028 141.67979431]
[-45.05007553 128.15336609]
[-48.45545959 113.54503632]
[-48.62160110 98.54595184]
[-45.54064178 83.86577606]
[-39.35835266 70.19905090]
[-30.36722946 58.19240189]
[-18.99267006 48.41388321]
[-5.77283382 41.32615280]
[8.66681099 37.26454163]
[23.64308548 36.42122650]
[38.44742203 38.83609772]
[52.37938690 44.39490509]
[64.77982330 52.83464432]
[75.06202698 63.75601196]
[82.74227905 76.64831543]
[82.74227905 61.64831543]
[82.74227905 46.64831543]
[82.74227905 31.64831543]
[82.74227905 16.64831543]
[75.00498199 2.84814310]
[82.74227905 -9.87912846]
[82.74227905 -24.87912941]
[82.74227905 -39.87912750]
[75.00498199 -53.67930222]
[82.74227905 -66.40657043]
[82.74227905 -81.40657043]
[82.74227905 -96.40657043]
[82.74227905 -111.40657043]
[68.48960876 -116.56769562]
[56.86368179 -126.29464722]
[49.26837921 -139.41284180]
[46.62087631 -154.33821106]
[49.24086761 -169.26843262]
[56.81198120 -182.40060425]
[68.41996765 -192.14897156]
[82.66310120 -197.33634949]
[97.82145691 -197.33634949]
[112.06459045 -192.14897156]
[123.67257690 -182.40060425]
[131.24369812 -169.26843262]
[133.86367798 -154.33821106]
[131.21618652 -139.41284180]
[123.62088013 -126.29464722]
[111.99494934 -116.56769562]
[97.74227905 -111.40657043]
[97.74227905 -96.40657043]
[97.74227905 -81.40657043]
[97.74227905 -66.40657043]
[105.47958374 -53.67930222]
[97.74227905 -39.87912750]
[97.74227905 -24.87912941]
[97.74227905 -9.87912846]
[105.47958374 2.84814310]
[97.74227905 16.64831543]
[97.74227905 31.64831543]
[97.74227905 46.64831543]
[97.74227905 61.64831543]
[97.74227905 76.64831543]
[98.57801056 61.67161560]
[108.40653992 50.34024048]
[123.11478424 47.39619064]
[136.54759216 54.07149887]
[143.08354187 67.57266235]
[139.98744202 82.24965668]
[128.55497742 91.96040344]
[113.56921387 92.64075470]
[128.56840515 92.79679108]
[143.56759644 92.95282745]
[158.56678772 93.10886383]
[173.56596375 93.26490021]
[188.56515503 93.42093658]
[203.56434631 93.57697296]
[217.57751465 85.05857849]
[231.82933044 93.17140198]
[231.65873718 109.56966400]
[217.24124146 117.38423920]
[203.40830994 108.57616425]
[188.40911865 108.42012787]
[173.40992737 108.26409149]
[158.41075134 108.10805511]
[143.41156006 107.95201874]
[128.41236877 107.79598236]
[113.41317749 107.63994598]
[102.75155640 118.19123077]
[102.75155640 133.19123840]
[102.75155640 148.19123840]
[117.53334808 150.97238159]
[131.54866028 156.42098999]
[144.32069397 164.35014343]
[155.41525269 174.48854065]
[164.45547485 186.48982239]
[171.13465881 199.94439697]
[175.22663879 214.39335632]
[176.59346008 229.34423828]
[175.19003296 244.28773499]
[171.06561279 258.71502686]
[164.36209106 272.13519287]
[155.30906677 284.09182739]
[144.21601868 294.17861938]
[131.46173096 302.05310059]
[117.48136139 307.44836426]
[102.75155640 310.18203735]
[102.75155640 325.18203735]
[102.75155640 340.18203735]
[102.75155640 355.18203735]
[102.75155640 370.18203735]
[102.75155640 385.18203735]
[102.75155640 400.18203735]
[102.75155640 415.18203735]
[102.75155640 430.18203735]
[102.75155640 445.18203735]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[26 125]
[27 124]
[28 123]
[54 97]
[55 96]
[56 95]
[57 94]
[58 93]
[60 91]
[61 90]
[62 89]
[64 87]
[65 86]
[66 85]
[67 84]
[105 122]
[106 121]
[107 120]
[108 119]
[109 118]
[110 117]
[111 116]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
