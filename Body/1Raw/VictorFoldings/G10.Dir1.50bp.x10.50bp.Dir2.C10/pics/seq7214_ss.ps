%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:44 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGUACUCGGACUACCCCGAUGCAUACACCACAUGAAACAUCCUAUCAUCUGUAGGCUCAUUCxxxxxxxxxxCUGAUCUCUUAUACUAGUAUCCUUAAUCAUUUUUAUUGCCACAACUAACCUCCUCGGACUCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[115.94559479 267.29244995]
[115.94559479 252.29243469]
[115.94559479 237.29243469]
[115.94559479 222.29243469]
[115.94559479 207.29243469]
[115.94559479 192.29243469]
[115.94559479 177.29243469]
[115.94559479 162.29243469]
[115.94559479 147.29243469]
[115.94559479 132.29243469]
[109.11747742 129.18972778]
[96.91549683 137.91394043]
[95.46123505 122.98432159]
[88.63311768 119.88162231]
[77.33411407 129.74734497]
[66.03510284 139.61306763]
[54.73609924 149.47879028]
[53.91846848 165.26191711]
[42.12418365 175.78192139]
[26.35058784 174.79745483]
[15.95587158 162.89260864]
[17.10703850 147.13031006]
[29.12112236 136.86203003]
[44.87037659 138.17977905]
[56.16938400 128.31405640]
[67.46838379 118.44834137]
[78.76739502 108.58261871]
[71.72225952 95.34003448]
[57.22666168 99.19718933]
[45.99888992 111.14997864]
[30.09758377 107.13993073]
[25.88064194 91.29223633]
[37.68609238 79.90964508]
[53.36950302 84.70159149]
[67.86509705 80.84443665]
[68.48853302 73.37039185]
[53.54047012 72.12326813]
[54.78783798 57.17522430]
[69.73541260 58.42230606]
[70.35884857 50.94826126]
[56.70260620 44.74285507]
[43.04636383 38.53744507]
[29.39012337 32.33203888]
[16.48364258 40.78344727]
[1.05666518 40.89260483]
[-11.96811581 32.62467575]
[-18.43454170 18.61793137]
[-16.27919769 3.34187126]
[-6.18984699 -8.32897091]
[8.61403561 -12.67047024]
[23.40858459 -8.29727077]
[33.47291183 3.39515567]
[35.59553146 18.67579842]
[49.25177002 24.88120461]
[62.90801239 31.08661270]
[76.56425476 37.29201889]
[127.96630096 63.02954483]
[125.68210602 102.11303711]
[134.44831848 89.94120026]
[143.21452332 77.76936340]
[145.71490479 68.91499329]
[152.29187012 65.43804932]
[161.30940247 53.45122147]
[170.32693481 41.46438599]
[159.43350220 31.12848854]
[149.78930664 19.61818123]
[141.52006531 7.08352661]
[134.73361206 -6.31206131]
[129.51840210 -20.39394188]
[125.94243622 -34.97853088]
[124.05233765 -49.87568665]
[123.87273407 -64.89119720]
[125.40597534 -79.82929993]
[128.63208008 -94.49524689]
[133.50897217 -108.69784546]
[139.97306824 -122.25192261]
[147.94012451 -134.98077393]
[157.30625916 -146.71847534]
[167.94935608 -157.31196594]
[179.73066711 -166.62316895]
[192.49659729 -174.53068542]
[206.08073425 -180.93141174]
[220.30593872 -185.74191284]
[234.98680115 -188.89945984]
[249.93190002 -190.36291504]
[264.94641113 -190.11317444]
[279.83456421 -188.15350342]
[294.40231323 -184.50946045]
[308.45968628 -179.22853088]
[321.82342529 -172.37957764]
[334.31930542 -164.05187988]
[345.78445435 -154.35401917]
[356.06933594 -143.41242981]
[365.03991699 -131.36973572]
[372.57925415 -118.38295746]
[378.58901978 -104.62139893]
[382.99087524 -90.26447296]
[385.72744751 -75.49934387]
[386.76303101 -60.51851654]
[386.08416748 -45.51728439]
[383.69967651 -30.69122887]
[379.64065552 -16.23363304]
[373.95999146 -2.33298373]
[366.73181152 10.82949638]
[358.05029297 23.08220863]
[348.02862549 34.26541138]
[336.79745483 44.23331070]
[324.50323486 52.85595322]
[311.30624390 60.02092361]
[297.37850952 65.63481140]
[282.90161133 69.62443542]
[268.06427002 71.93777466]
[253.05996704 72.54467773]
[238.08427429 71.43722534]
[223.33244324 68.62985229]
[208.99679565 64.15917206]
[195.26422119 58.08345413]
[182.31376648 50.48191833]
[173.29623413 62.46875000]
[164.27870178 74.45558167]
[155.38635254 86.53556824]
[146.62014771 98.70740509]
[137.85394287 110.87924194]
[147.69969177 99.56283569]
[160.62126160 91.94487762]
[175.28976440 88.80880737]
[190.19670105 90.47713470]
[203.80902100 96.77829742]
[214.72683716 107.06427765]
[221.82733154 120.27725983]
[224.38032532 135.05841064]
[222.12322998 149.88761902]
[215.28817749 163.23985291]
[204.57809448 173.74194336]
[191.09440613 180.31387329]
[176.22378540 182.27976990]
[161.49554443 179.43745422]
[148.42433167 172.07922363]
[138.35440063 160.96182251]
[132.32136536 147.22856140]
[130.94560242 132.29243469]
[130.94560242 147.29243469]
[130.94560242 162.29243469]
[130.94560242 177.29243469]
[130.94560242 192.29243469]
[130.94560242 207.29243469]
[130.94560242 222.29243469]
[130.94560242 237.29243469]
[130.94560242 252.29243469]
[130.94560242 267.29244995]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[14 27]
[15 26]
[16 25]
[17 24]
[28 35]
[29 34]
[40 56]
[41 55]
[42 54]
[43 53]
[58 123]
[59 122]
[60 121]
[62 120]
[63 119]
[64 118]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
