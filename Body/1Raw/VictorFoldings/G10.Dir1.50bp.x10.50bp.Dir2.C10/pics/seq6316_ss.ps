%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:44 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCUUCUAGGUAACGACCACAUCUACAACGUUAUCGUCACAGCCCAUGCAUUUGUAAUAAUCxxxxxxxxxxACCAAAUGCCCCUCAUUUACAUAAAUAUUAUACUAGCAUUUACCAUCUCACUUCUAGGAACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[116.20033264 325.08081055]
[116.20033264 310.08081055]
[116.20033264 295.08081055]
[116.20033264 280.08081055]
[116.20033264 265.08081055]
[116.20033264 250.08082581]
[116.20033264 235.08082581]
[116.20033264 220.08082581]
[116.20033264 205.08082581]
[116.20033264 190.08082581]
[113.60305786 187.30342102]
[111.93621063 183.52955627]
[111.56620026 179.09458923]
[112.73313904 174.46270752]
[106.38600922 160.87174988]
[100.03887939 147.28080750]
[93.69174957 133.68984985]
[79.90937042 127.76988983]
[65.68259430 132.52369690]
[51.45581436 137.27751160]
[37.22903442 142.03132629]
[23.00225449 146.78514099]
[8.77547550 151.53895569]
[7.35172606 166.70117188]
[-0.12162083 179.97027588]
[-12.34976196 189.04730225]
[-27.21409798 192.35961914]
[-42.13929367 189.33332825]
[-54.53946686 180.49276733]
[-62.26621628 167.36959839]
[-63.98083115 152.23751831]
[-59.38624573 137.71823120]
[-49.27850342 126.32730103]
[-35.40882492 120.03826141]
[-20.18022156 119.94074249]
[-6.23113871 126.05163574]
[4.02166080 137.31217957]
[18.24843979 132.55836487]
[32.47521973 127.80455017]
[46.70199966 123.05073547]
[60.92877579 118.29692078]
[75.15555573 113.54310608]
[74.30236816 87.12001801]
[95.85468292 71.10222626]
[93.67784882 56.26102066]
[79.30395508 54.45746613]
[65.90258789 48.98820114]
[54.39062119 40.23421860]
[45.55387115 28.80102158]
[39.99349594 15.47671509]
[38.08507156 1.17769539]
[39.95325470 -13.11437702]
[45.46363449 -26.41997147]
[54.23239899 -37.82882309]
[65.65306091 -46.56219864]
[78.93840027 -52.02605820]
[77.07078552 -66.90933990]
[75.20317078 -81.79261780]
[73.33555603 -96.67589569]
[71.46794128 -111.55918121]
[69.60033417 -126.44245911]
[67.73271942 -141.32574463]
[52.81978989 -143.73014832]
[39.18893433 -150.23986816]
[27.94514656 -160.32719421]
[19.99991035 -173.17436218]
[15.99730873 -187.73992920]
[16.26181602 -202.84313965]
[20.77198982 -217.25962830]
[29.16220856 -229.82070923]
[40.75231552 -239.50813293]
[54.60275650 -245.53656006]
[69.59073639 -247.41731262]
[84.50124359 -244.99790955]
[98.12554932 -238.47450256]
[109.35919952 -228.37590027]
[117.29151917 -215.52075195]
[121.27948761 -200.95115662]
[120.99980927 -185.84823608]
[116.47515869 -171.43629456]
[108.07231903 -158.88363647]
[96.47248840 -149.20787048]
[82.61599731 -143.19334412]
[84.48361206 -128.31007385]
[86.35122681 -113.42678833]
[88.21883392 -98.54351044]
[90.08644867 -83.66023254]
[91.95406342 -68.77695465]
[93.82167816 -53.89367294]
[109.21006012 -51.54385757]
[123.33171844 -44.95948792]
[135.04580688 -34.66350937]
[143.40344238 -21.47908783]
[147.72460938 -6.46378279]
[147.65344238 9.17526627]
[143.18750000 24.17839241]
[134.67871094 37.33486557]
[122.80557251 47.58059692]
[108.51905060 54.08418274]
[110.69588470 68.92539215]
[123.39081573 76.91530609]
[137.71340942 72.45848846]
[152.03601074 68.00167084]
[166.35861206 63.54485703]
[179.68594360 53.06543350]
[193.44520569 62.97093964]
[187.73574829 78.93460083]
[170.81542969 77.86745453]
[156.49282837 82.32427216]
[142.17022705 86.78108978]
[127.84763336 91.23789978]
[125.18685913 113.85223389]
[107.28270721 127.34272003]
[113.62982941 140.93367004]
[119.97695923 154.52462769]
[126.32408905 168.11557007]
[127.49889374 153.16165161]
[132.15274048 138.90185547]
[140.02529907 126.13381958]
[150.67623901 115.57173920]
[163.50978088 107.80641174]
[177.80805969 103.27219391]
[192.77130127 102.22271729]
[207.56251526 104.71667480]
[221.35435486 110.61457062]
[233.37536621 119.58650208]
[242.95312500 131.13061523]
[249.55189514 144.60118103]
[252.80258179 159.24470520]
[252.52334595 174.24211121]
[248.72981262 188.75448608]
[241.63417053 201.97007751]
[231.63331604 213.14965820]
[219.28668213 221.66789246]
[205.28485107 227.04830933]
[190.41104126 228.98994446]
[175.49723816 227.38418579]
[161.37765503 222.32086182]
[148.84207153 214.08317566]
[138.59169006 203.13194275]
[131.20033264 190.08082581]
[131.20033264 205.08082581]
[131.20033264 220.08082581]
[131.20033264 235.08082581]
[131.20033264 250.08082581]
[131.20033264 265.08081055]
[131.20033264 280.08081055]
[131.20033264 295.08081055]
[131.20033264 310.08081055]
[131.20033264 325.08081055]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[14 116]
[15 115]
[16 114]
[17 113]
[18 42]
[19 41]
[20 40]
[21 39]
[22 38]
[23 37]
[44 100]
[45 99]
[56 89]
[57 88]
[58 87]
[59 86]
[60 85]
[61 84]
[62 83]
[101 111]
[102 110]
[103 109]
[104 108]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
