%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:39 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCACCCACUACCUAAAAAAUCCCAAACAUAUAACUGAACUCCUCACACCCAAUUGGACCAAxxxxxxxxxxACAGCCCUAUACUCCCUCUACAUAUUUACCACAACACAAUGGGGCUCACUCACCCACCACCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[95.15770721 227.80168152]
[94.84564972 212.80493164]
[94.53359222 197.80818176]
[94.22153473 182.81143188]
[93.90948486 167.81466675]
[93.59742737 152.81791687]
[93.28536987 137.82116699]
[92.97331238 122.82440948]
[92.66125488 107.82765961]
[90.02239227 93.06159973]
[85.12084198 78.88504028]
[79.32254028 71.74140167]
[80.26812744 64.36227417]
[75.66255951 50.08681488]
[71.05699158 35.81135559]
[66.45143127 21.53589439]
[51.92174911 25.28074074]
[37.19411469 28.14994431]
[22.32125092 30.13323593]
[7.35639906 31.22351837]
[-7.64687109 31.41688347]
[-22.63485146 30.71264458]
[-37.55389023 29.11331940]
[-52.35057831 26.62463379]
[-66.97194672 23.25549698]
[-81.36565399 19.01796722]
[-95.48017883 13.92721844]
[-109.26499176 8.00147152]
[-122.67074585 1.26193929]
[-135.64944458 -6.26725197]
[-148.15464783 -14.55914974]
[-160.14157104 -23.58407021]
[-171.56730652 -33.30970764]
[-182.39096069 -43.70124435]
[-192.57377625 -54.72148514]
[-202.07931519 -66.33097839]
[-210.87355042 -78.48815918]
[-218.92497253 -91.14952087]
[-226.20478821 -104.26972198]
[-232.68693542 -117.80181122]
[-238.34819031 -131.69734192]
[-243.16831970 -145.90655518]
[-247.13003540 -160.37861633]
[-250.21916199 -175.06169128]
[-252.42465210 -189.90322876]
[-253.73861694 -204.85009766]
[-254.15634155 -219.84880066]
[-253.67631531 -234.84564209]
[-252.30027771 -249.78692627]
[-250.03315735 -264.61917114]
[-246.88305664 -279.28930664]
[-242.86126709 -293.74478149]
[-237.98216248 -307.93383789]
[-232.26322937 -321.80572510]
[-225.72494507 -335.31079102]
[-218.39068604 -348.40063477]
[-210.28672791 -361.02844238]
[-201.44207764 -373.14898682]
[-191.88839722 -384.71890259]
[-181.65989685 -395.69674683]
[-170.79316711 -406.04321289]
[-159.32713318 -415.72131348]
[-147.30282593 -424.69638062]
[-134.76329041 -432.93624878]
[-121.75342560 -440.41146851]
[-108.31979370 -447.09524536]
[-94.51048279 -452.96368408]
[-80.37493134 -457.99575806]
[-65.96374512 -462.17346191]
[-51.32851028 -465.48184204]
[-36.52161026 -467.90905762]
[-21.59605980 -469.44638062]
[-6.60528278 -470.08834839]
[8.39705467 -469.83267212]
[23.35725021 -468.68023682]
[38.22174835 -466.63519287]
[52.93733597 -463.70483398]
[67.45133209 -459.89965820]
[81.71179199 -455.23330688]
[95.66765594 -449.72247314]
[109.26897430 -443.38687134]
[122.46704102 -436.24920654]
[135.21463013 -428.33499146]
[147.46609497 -419.67260742]
[159.17758179 -410.29302979]
[170.30717468 -400.22982788]
[180.81501770 -389.51904297]
[190.66349792 -378.19903564]
[199.81736755 -366.31027222]
[208.24385071 -353.89538574]
[215.91279602 -340.99874878]
[222.79673767 -327.66659546]
[228.87103271 -313.94659424]
[234.11393738 -299.88787842]
[238.50669861 -285.54077148]
[242.03356934 -270.95663452]
[244.68193054 -256.18771362]
[246.44232178 -241.28681946]
[247.30841064 -226.30731201]
[247.27711487 -211.30282593]
[246.34852600 -196.32707214]
[244.52600098 -181.43365479]
[241.81604004 -166.67588806]
[238.22836304 -152.10661316]
[233.77578735 -137.77795410]
[228.47427368 -123.74124146]
[222.34278870 -110.04669952]
[215.40328979 -96.74336243]
[207.68061829 -83.87884521]
[199.20240784 -71.49920654]
[189.99902344 -59.64875412]
[180.10339355 -48.36991882]
[169.55096436 -37.70307159]
[158.37948608 -27.68639755]
[146.62896729 -18.35575485]
[134.34147644 -9.74454498]
[121.56098175 -1.88359296]
[108.33325195 5.19895983]
[94.70562744 11.47775936]
[80.72689056 16.93033028]
[85.33245850 31.20579147]
[89.93801880 45.48125076]
[94.54358673 59.75671387]
[99.29740143 73.98348999]
[104.19895172 88.16004944]
[107.81342316 73.60204315]
[116.35983276 61.27488327]
[128.72521973 52.78387833]
[143.29930115 49.23476791]
[158.18415833 51.08973694]
[171.44142151 58.10722351]
[181.34465027 69.37336731]
[186.60420227 83.42104340]
[186.53514099 98.42089081]
[181.14646912 112.41954041]
[171.13992310 123.59401703]
[157.81860352 130.48913574]
[142.91729736 132.20697021]
[128.37651062 128.52381897]
[116.08983612 119.91930389]
[107.65801239 107.51560211]
[107.97006989 122.51235199]
[108.28211975 137.50910950]
[108.59417725 152.50585938]
[108.90623474 167.50260925]
[109.21829224 182.49937439]
[109.53034973 197.49612427]
[109.84240723 212.49287415]
[110.15445709 227.48962402]
[112.74546051 246.69735718]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 149]
[2 148]
[3 147]
[4 146]
[5 145]
[6 144]
[7 143]
[8 142]
[9 141]
[10 125]
[11 124]
[13 123]
[14 122]
[15 121]
[16 120]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
