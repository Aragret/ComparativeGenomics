%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:58 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGUUAAACACAAACUACCACCUACCUCCCUCACCAAAGCCCAUAAAAAUAAAAAAUUAUAACxxxxxxxxxxCCUAUGAGUGACUACAAAAAGGAUUAGACUGAACCGAAUUGGUAUAUAGUUUAAACAAAACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[91.69547272 458.09341431]
[91.69547272 443.09341431]
[91.69547272 428.09341431]
[91.69547272 413.09341431]
[91.69547272 398.09341431]
[91.69547272 383.09341431]
[91.69547272 368.09341431]
[91.69547272 353.09341431]
[91.69547272 338.09341431]
[91.69547272 323.09341431]
[77.23062134 319.25708008]
[64.24176025 311.80145264]
[53.61728668 301.22955322]
[46.08567810 288.25778198]
[42.16553116 273.76733398]
[42.12986374 258.74441528]
[45.98711777 244.21310425]
[53.48015594 231.16546631]
[64.10341644 220.49389648]
[77.13700104 212.93009949]
[91.69547272 208.99485779]
[91.69547272 193.99485779]
[91.69547272 178.99485779]
[91.07149506 164.00784302]
[89.82462311 149.05975342]
[88.57775116 134.11166382]
[87.33087158 119.16357422]
[83.89791870 90.37281036]
[77.55079651 76.78186035]
[71.20366669 63.19091034]
[55.37087250 64.67565155]
[40.00978851 60.66716766]
[26.96536064 51.66582489]
[17.79782104 38.77049255]
[13.59608459 23.54445457]
[14.84842777 7.82588816]
[21.38581848 -6.49404573]
[32.40446472 -17.69873810]
[25.77596664 -31.15470314]
[19.14746666 -44.61066818]
[12.51896858 -58.06663513]
[5.75085402 -71.45291901]
[-1.15614438 -84.76807404]
[-14.37888622 -93.45540619]
[-13.37114525 -108.31587982]
[-20.27814484 -121.63103485]
[-34.60330200 -117.05962372]
[-49.49500656 -114.97509766]
[-64.52478027 -115.43743134]
[-79.26020050 -118.43333435]
[-93.27729797 -123.87659454]
[-106.17276764 -131.61061096]
[-117.57557678 -141.41284180]
[-127.15765381 -153.00128174]
[-134.64329529 -166.04249573]
[-139.81713867 -180.16125488]
[-142.53030396 -194.95133972]
[-142.70472717 -209.98721313]
[-140.33541870 -224.83627319]
[-135.49050903 -239.07125854]
[-128.30943298 -252.28262329]
[-118.99877167 -264.09024048]
[-107.82643127 -274.15435791]
[-95.11385345 -282.18545532]
[-81.22681427 -287.95242310]
[-66.56486511 -291.28936768]
[-51.54985428 -292.10028076]
[-36.61380386 -290.36178589]
[-22.18644524 -286.12393188]
[-8.68288803 -279.50863647]
[3.50834537 -270.70626831]
[14.03648949 -259.97006226]
[22.59862709 -247.60891724]
[28.94841194 -233.97850037]
[32.90314484 -219.47099304]
[34.34903717 -204.50376892]
[33.24449539 -189.50750732]
[29.62129402 -174.91366577]
[23.58368111 -161.14212036]
[15.30537224 -148.58912659]
[5.02454901 -137.61585999]
[-6.96298838 -128.53804016]
[-0.05598999 -115.22287750]
[12.67271709 -107.48793793]
[12.15901089 -91.67507172]
[19.06600952 -78.35991669]
[24.97605133 -73.84139252]
[25.97493362 -64.69512939]
[32.60343170 -51.23916626]
[39.23192978 -37.78320312]
[45.86043167 -24.32723618]
[59.91335678 -26.28844833]
[73.90451813 -23.80069733]
[86.45793152 -17.09513474]
[96.33483887 -6.81837845]
[102.55593109 6.02981615]
[104.49845886 20.19381142]
[101.95851135 34.28479767]
[95.17238617 46.91695786]
[84.79461670 56.84378052]
[91.14174652 70.43473053]
[97.48887634 84.02568054]
[110.50518036 91.48059082]
[125.43949127 90.07828522]
[140.37379456 88.67598724]
[146.12945557 74.49391937]
[157.82405090 64.61996460]
[172.77026367 61.32309341]
[187.53355408 65.36089325]
[198.72143555 75.80551147]
[203.76300049 90.25685120]
[201.49974060 105.39409637]
[192.45175171 117.73882294]
[178.69816589 124.45430756]
[163.39947510 123.99736786]
[150.07121277 116.47301483]
[141.77610779 103.61029053]
[126.84179688 105.01259613]
[111.90748596 106.41490173]
[102.27896118 117.91670227]
[103.52583313 132.86479187]
[104.77271271 147.81288147]
[106.01958466 162.76097107]
[108.71958923 166.34864807]
[109.96961975 170.22271729]
[109.86251831 173.87928772]
[108.64913940 176.89949036]
[106.69547272 178.99485779]
[106.69547272 193.99485779]
[106.69547272 208.99485779]
[121.25394440 212.93009949]
[134.28753662 220.49389648]
[144.91079712 231.16546631]
[152.40382385 244.21310425]
[156.26107788 258.74441528]
[156.22541809 273.76733398]
[152.30526733 288.25778198]
[144.77366638 301.22955322]
[134.14918518 311.80145264]
[121.16033173 319.25708008]
[106.69547272 323.09341431]
[106.69547272 338.09341431]
[106.69547272 353.09341431]
[106.69547272 368.09341431]
[106.69547272 383.09341431]
[106.69547272 398.09341431]
[106.69547272 413.09341431]
[106.69547272 428.09341431]
[106.69547272 443.09341431]
[106.69547272 458.09341431]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[21 130]
[22 129]
[23 128]
[24 123]
[25 122]
[26 121]
[27 120]
[28 102]
[29 101]
[30 100]
[38 91]
[39 90]
[40 89]
[41 88]
[42 86]
[43 85]
[45 83]
[46 82]
[103 119]
[104 118]
[105 117]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
