%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:04 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGAGCUUAACACAAAGCACCCAACUUACACUUAGGAGAUUUCAACUUAACUUGACCGCUCUGxxxxxxxxxxUUAACACCCAUAGUAGGCCUAAAAGCAGCCACCAAUUAAGAAAGCGUUCAAGCUCAACACCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[119.53754425 334.94604492]
[119.53754425 319.94604492]
[119.53754425 304.94604492]
[119.53754425 289.94604492]
[119.53754425 274.94604492]
[119.53754425 259.94604492]
[119.53754425 244.94606018]
[119.53754425 229.94606018]
[119.53754425 214.94606018]
[119.53754425 199.94606018]
[117.51520538 185.08300781]
[113.35732269 170.67079163]
[109.04973602 156.30261230]
[104.74214935 141.93443298]
[100.43456268 127.56624603]
[94.96460724 127.10593414]
[89.69425964 125.57104492]
[84.83247375 123.02244568]
[80.57197571 119.56114960]
[77.08167267 115.32438660]
[74.49992371 110.48011780]
[59.59802246 112.19281006]
[44.69612122 113.90550232]
[31.86963844 123.16789246]
[18.34216309 116.93438721]
[5.51568031 126.19677734]
[-8.01179695 119.96327209]
[-22.91369820 121.67595673]
[-27.43857384 136.21711731]
[-37.49155426 147.65641785]
[-51.33089828 154.01191711]
[-66.55886078 154.18249512]
[-80.53710175 148.13859558]
[-90.84380341 136.92736816]
[-95.69327545 122.49121094]
[-94.24530792 107.33129120]
[-86.75077820 94.07414246]
[-74.50815582 85.01665497]
[-59.63854980 81.72809601]
[-44.71820450 84.77822113]
[-32.33216858 93.63857269]
[-24.62638855 106.77405548]
[-9.72448635 105.06137085]
[2.03611159 95.92147827]
[16.62947273 102.03247833]
[28.39006996 92.89259338]
[42.98343277 99.00359344]
[57.88533401 97.29090881]
[72.78723907 95.57821655]
[76.62772369 85.37730408]
[84.12149811 77.46203613]
[94.09721375 73.06964874]
[104.99559021 72.88670349]
[111.62408447 59.43074036]
[118.25258636 45.97477341]
[124.88108063 32.51880646]
[131.50958252 19.06284332]
[132.50846863 9.91658211]
[138.41850281 5.39805794]
[145.32550049 -7.91709805]
[152.23249817 -21.23225403]
[145.45684814 -35.06686783]
[148.09580994 -50.06317902]
[158.93096924 -60.50651932]
[173.66159058 -62.54277802]
[180.56860352 -75.85793304]
[187.47560120 -89.17308807]
[174.55068970 -81.56079865]
[160.37675476 -76.65167236]
[145.51237488 -74.63918304]
[130.54335022 -75.60263062]
[116.05960083 -79.50405884]
[102.63194275 -86.18970490]
[90.78954315 -95.39609528]
[80.99911499 -106.76039886]
[73.64649200 -119.83476257]
[69.02144623 -134.10392761]
[67.30623627 -149.00553894]
[68.56847382 -163.95233154]
[72.75840759 -178.35527039]
[79.71091461 -191.64671326]
[89.15200043 -203.30287170]
[100.70957947 -212.86436462]
[113.92819214 -219.95439148]
[128.28688049 -224.29351807]
[143.21978760 -225.71073914]
[158.13838196 -224.15022278]
[172.45475769 -219.67346191]
[185.60469055 -212.45686340]
[197.06996155 -202.78485107]
[206.39871216 -191.03860474]
[213.22329712 -177.68101501]
[217.27476501 -163.23852539]
[218.39346313 -148.28030396]
[216.53527832 -133.39584351]
[211.77345276 -119.17173767]
[204.29690552 -106.17030334]
[217.53948975 -113.21543884]
[221.91644287 -128.40155029]
[235.78982544 -135.97154236]
[250.92881775 -131.43426514]
[258.35171509 -117.48162842]
[253.65463257 -102.39146423]
[239.62428284 -95.11650085]
[224.58462524 -99.97285461]
[211.34204102 -92.92771912]
[200.79075623 -82.26609039]
[193.88375854 -68.95093536]
[186.97676086 -55.63578033]
[193.79611206 -42.42084885]
[191.49917603 -27.54845428]
[180.75971985 -16.75413513]
[165.54765320 -14.32525539]
[158.64065552 -1.01009941]
[151.73365784 12.30505657]
[144.96554565 25.69134140]
[138.33705139 39.14730835]
[131.70854187 52.60327148]
[125.08004761 66.05923462]
[118.45155334 79.51520538]
[127.47425079 102.29172516]
[114.80274963 123.25865936]
[119.11033630 137.62684631]
[123.41792297 151.99502563]
[127.72550201 166.36320496]
[133.22161865 173.74186707]
[131.96989441 181.07527161]
[136.86904907 166.89788818]
[147.02813721 155.86189270]
[160.75236511 149.80833435]
[175.75224304 149.74710083]
[189.52543640 155.68838501]
[199.77429199 166.64105225]
[204.78906250 180.77795410]
[203.73315430 195.74073792]
[196.78274536 209.03329468]
[185.09729004 218.43809509]
[170.62620544 222.38621521]
[155.78359985 220.21903992]
[143.04551697 212.29808044]
[134.53753662 199.94606018]
[134.53753662 214.94606018]
[134.53753662 229.94606018]
[134.53753662 244.94606018]
[134.53753662 259.94604492]
[134.53753662 274.94604492]
[134.53753662 289.94604492]
[134.53753662 304.94604492]
[134.53753662 319.94604492]
[134.53753662 334.94604492]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[11 127]
[12 125]
[13 124]
[14 123]
[15 122]
[21 49]
[22 48]
[23 47]
[25 45]
[27 43]
[28 42]
[53 120]
[54 119]
[55 118]
[56 117]
[57 116]
[59 115]
[60 114]
[61 113]
[65 109]
[66 108]
[67 107]
[97 106]
[98 105]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
