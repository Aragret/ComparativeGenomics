%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:51 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCCAAGCCUCACCCCACUACUAGGCCUCCUCCUAGCAGCAGCAGGCAAAUCAGCCCAAUUAxxxxxxxxxxUCCAUCGCUAACCCCACUAAAACACUCACCAAGACCUCAACCCCUGACCCCCAUGCCUCACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[12.80502033 278.37258911]
[4.26409578 273.93786621]
[-3.45998907 286.79626465]
[-11.18407440 299.65466309]
[-18.90815926 312.51306152]
[-19.38178444 328.32717896]
[-32.56817627 335.25311279]
[-40.29225922 348.11151123]
[-48.01634598 360.96990967]
[-55.74042892 373.82830811]
[-63.46451569 386.68670654]
[-66.43761444 403.37792969]
[-83.29957581 405.14160156]
[-89.66218567 389.42684937]
[-76.32291412 378.96261597]
[-68.59883118 366.10421753]
[-60.87474823 353.24581909]
[-53.15066147 340.38742065]
[-45.42657852 327.52902222]
[-45.50542831 312.63461304]
[-31.76656151 304.78897095]
[-24.04247665 291.93057251]
[-16.31839180 279.07217407]
[-8.59430695 266.21377563]
[-36.66265869 244.02450562]
[-60.29275131 217.15791321]
[-78.71717834 186.48648071]
[-91.33758545 153.00631714]
[-97.74411011 117.80473328]
[-112.72382355 118.58457184]
[-127.70353699 119.36441803]
[-142.68325806 120.14426422]
[-157.66296387 120.92411041]
[-168.05464172 132.83161926]
[-183.82798767 133.82009888]
[-195.62495422 123.30310059]
[-196.44662476 107.52018738]
[-185.80549622 95.83506775]
[-170.01477051 95.18032074]
[-158.44281006 105.94439697]
[-143.46310425 105.16455078]
[-128.48338318 104.38470459]
[-113.50366974 103.60485840]
[-98.52395630 102.82501984]
[-97.92342377 84.31372070]
[-95.60057068 65.93892670]
[-91.57561493 47.86053085]
[-85.88357544 30.23584747]
[-78.57398987 13.21825027]
[-69.71045685 -3.04417634]
[-59.37011337 -18.40991783]
[-47.64293671 -32.74526215]
[-34.63098145 -45.92546082]
[-44.37863159 -57.32648087]
[-54.12628555 -68.72750092]
[-69.90004730 -69.70927429]
[-80.29679108 -81.61235046]
[-79.14830780 -97.37485504]
[-67.13597107 -107.64517212]
[-51.38648987 -106.33010101]
[-41.24375153 -94.20985413]
[-42.72526169 -78.47515869]
[-32.97761154 -67.07413483]
[-23.22995949 -55.67311478]
[-15.54178715 -61.46156311]
[-7.58215618 -66.87067413]
[0.63023174 -71.88772583]
[9.07608223 -76.50093842]
[17.73555374 -80.69947815]
[26.58829880 -84.47347260]
[35.61352158 -87.81406403]
[44.79001617 -90.71339417]
[54.09622192 -93.16465759]
[63.51027679 -95.16208649]
[73.01006317 -96.70100403]
[82.57325745 -97.77777863]
[92.17739105 -98.38989258]
[101.79991150 -98.53589630]
[111.41819763 -98.21545410]
[121.00965881 -97.42931366]
[130.55175781 -96.17933655]
[140.02207947 -94.46843719]
[149.39837646 -92.30065155]
[158.65861511 -89.68106842]
[167.78103638 -86.61584473]
[176.74420166 -83.11217499]
[185.52706909 -79.17829895]
[194.10899353 -74.82344818]
[202.46981812 -70.05786133]
[210.58990479 -64.89273834]
[218.45014954 -59.34020996]
[226.03211975 -53.41332245]
[233.31797791 -47.12599945]
[240.29060364 -40.49301529]
[246.93363953 -33.52994919]
[253.23146057 -26.25316238]
[259.16928101 -18.67975426]
[264.73312378 -10.82751369]
[269.90994263 -2.71489191]
[274.68759155 5.63905191]
[279.05480957 14.21469116]
[283.00134277 22.99187660]
[286.51791382 31.94998932]
[289.59631348 41.06797791]
[292.22924805 50.32442856]
[294.41052246 59.69758606]
[296.13507080 69.16542816]
[297.39883423 78.70571899]
[298.19879150 88.29603577]
[298.53308105 97.91385651]
[298.40097046 107.53657532]
[297.80270386 117.14158630]
[296.73971558 126.70632172]
[295.21450806 136.20831299]
[293.23062134 145.62524414]
[290.79278564 154.93496704]
[287.90670776 164.11563110]
[284.57913208 173.14566040]
[280.81790161 182.00384521]
[276.63183594 190.66935730]
[272.03082275 199.12184143]
[267.02560425 207.34146118]
[261.62799072 215.30888367]
[255.85061646 223.00538635]
[249.70709229 230.41290283]
[243.21185303 237.51402283]
[236.38012695 244.29206848]
[229.22799683 250.73110962]
[221.77226257 256.81600952]
[214.03041077 262.53247070]
[206.02066040 267.86709595]
[197.76182556 272.80731201]
[189.27330017 277.34152222]
[180.57504272 281.45910645]
[171.68746948 285.15032959]
[162.63148499 288.40658569]
[153.42832947 291.22018433]
[144.09967041 293.58450317]
[134.66738892 295.49401855]
[125.15365601 296.94424438]
[115.58083344 297.93176270]
[105.97140503 298.45422363]
[96.34793854 298.51046753]
[86.73306274 298.10031128]
[77.14935303 297.22473145]
[67.61932373 295.88577271]
[58.16537857 294.08657837]
[48.80971909 291.83142090]
[39.57432556 289.12554932]
[30.48089981 285.97537231]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 24]
[3 23]
[4 22]
[5 21]
[7 19]
[8 18]
[9 17]
[10 16]
[11 15]
[29 44]
[30 43]
[31 42]
[32 41]
[33 40]
[53 64]
[54 63]
[55 62]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
