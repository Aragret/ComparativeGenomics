%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:35 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGACCCUAACACCAGCCUAACCAGAUUUCAAAUUUUAUCUUUUGGCGGUAUGCACUUUUAACxxxxxxxxxxUUUUGGUGCAACUCCAAAUAAAAGUAAUAACCAUGCACACUACUAUAACCACCCUAACCCCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[92.50000000 251.42242432]
[92.50000000 236.42242432]
[92.50000000 221.42242432]
[92.50000000 206.42242432]
[92.50000000 191.42242432]
[92.50000000 176.42242432]
[92.50000000 161.42242432]
[92.50000000 146.42242432]
[92.50000000 131.42242432]
[92.50000000 116.42242432]
[85.30861664 129.58616638]
[80.55490875 143.81297302]
[67.91574097 151.89080811]
[53.00798416 150.22985840]
[42.45667648 139.56825256]
[40.95084381 124.64402771]
[49.15967941 112.08954620]
[63.43523026 107.48404694]
[76.67306519 100.42998505]
[61.67387772 100.27394867]
[46.67468643 100.11791229]
[37.99624252 103.17346954]
[31.36592865 99.79936218]
[16.37323189 99.33132172]
[1.38053632 98.86328125]
[-12.65434170 106.16620636]
[-25.13399124 98.03554535]
[-40.12668610 97.56750488]
[-46.21837997 100.39572144]
[-51.94882965 99.76864624]
[-55.72967148 96.75521088]
[-70.68991852 95.66390228]
[-85.65016937 94.57259369]
[-100.61041260 93.48128510]
[-109.17072296 106.23340607]
[-122.96729279 112.98250580]
[-138.28890991 111.91310883]
[-151.01414490 103.31286621]
[-157.71995544 89.49521637]
[-156.60253906 74.17702484]
[-147.96244812 61.47881317]
[-134.12385559 54.81633759]
[-118.80923462 55.98176956]
[-106.13816833 64.66161346]
[-99.51910400 78.52103424]
[-84.55885315 79.61234283]
[-69.59860992 80.70365143]
[-54.63835907 81.79496765]
[-39.65864563 82.57480621]
[-24.66594887 83.04285431]
[-11.70344830 75.70644379]
[1.84857845 83.87058258]
[16.84127426 84.33862305]
[31.83397102 84.80666351]
[46.83072281 85.11872101]
[61.82991409 85.27475739]
[76.82910156 85.43079376]
[90.47798920 82.32730103]
[100.26943207 87.22412109]
[107.72434235 74.20780945]
[115.17925262 61.19150162]
[122.63416290 48.17518997]
[128.83956909 34.51894760]
[133.74111938 20.34239197]
[138.64266968 6.16583300]
[143.54421997 -8.01072502]
[148.44577026 -22.18728256]
[153.34732056 -36.36384201]
[141.26882935 -27.46945381]
[126.64157104 -24.14631462]
[111.90569305 -26.94879723]
[99.51947784 -35.40938568]
[91.54921722 -48.11666489]
[89.32452393 -62.95077515]
[93.21654510 -77.43704987]
[102.57598877 -89.15885925]
[115.84149933 -96.16073608]
[130.80007935 -97.27462006]
[144.95631409 -92.31468201]
[155.94862366 -82.10835266]
[161.94323730 -68.35827637]
[161.94042969 -53.35966492]
[170.45150757 -65.71123505]
[178.96260071 -78.06281281]
[187.47369385 -90.41438293]
[195.98478699 -102.76595306]
[191.64997864 -117.79071808]
[198.03428650 -132.06568909]
[212.12322998 -138.85064697]
[227.26443481 -134.94197083]
[236.30870056 -122.18518829]
[234.98558044 -106.60367584]
[223.91983032 -95.55455017]
[208.33634949 -94.25486755]
[199.82527161 -81.90328979]
[191.31417847 -69.55171967]
[182.80308533 -57.20014954]
[174.29199219 -44.84857559]
[167.52388000 -31.46228981]
[162.62232971 -17.28573227]
[157.72077942 -3.10917425]
[152.81922913 11.06738377]
[147.91767883 25.24394226]
[143.01612854 39.42050171]
[155.96865845 31.85531425]
[170.96063232 32.34557724]
[183.39123535 40.74082947]
[189.44564819 54.46468353]
[187.26585388 69.30545044]
[177.52081299 80.70870209]
[163.20114136 85.17491913]
[148.70137024 81.33347321]
[138.47129822 70.36326599]
[135.65046692 55.63010025]
[128.19555664 68.64640808]
[120.74064636 81.66271973]
[113.28573608 94.67903137]
[121.36257172 82.03922272]
[132.27803040 71.75074768]
[145.37300110 64.43488312]
[159.85671997 60.53338623]
[174.85461426 60.28185272]
[189.46102905 63.69547653]
[202.79394531 70.56811523]
[214.04827881 80.48477936]
[222.54441833 92.84664154]
[227.76933289 106.90723419]
[229.40751648 121.81750488]
[227.36004639 136.67710876]
[221.75056458 150.58874512]
[212.91778564 162.71237183]
[201.39509583 172.31588745]
[187.87826538 178.81939697]
[173.18353271 181.83016968]
[158.19822693 181.16642761]
[143.82723999 176.86822510]
[130.93833923 169.19512939]
[120.30985260 158.61045837]
[112.58355713 145.75338745]
[108.22600555 131.40026855]
[107.50000000 116.42242432]
[107.50000000 131.42242432]
[107.50000000 146.42242432]
[107.50000000 161.42242432]
[107.50000000 176.42242432]
[107.50000000 191.42242432]
[107.50000000 206.42242432]
[107.50000000 221.42242432]
[107.50000000 236.42242432]
[107.50000000 251.42242432]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[19 57]
[20 56]
[21 55]
[23 54]
[24 53]
[25 52]
[27 50]
[28 49]
[31 48]
[32 47]
[33 46]
[34 45]
[59 117]
[60 116]
[61 115]
[62 114]
[63 104]
[64 103]
[65 102]
[66 101]
[67 100]
[68 99]
[82 98]
[83 97]
[84 96]
[85 95]
[86 94]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
