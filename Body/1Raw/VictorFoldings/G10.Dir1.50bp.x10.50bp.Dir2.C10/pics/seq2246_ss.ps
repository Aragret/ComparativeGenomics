%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:24 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGUAAAUCCCCUUGUAAAUUUAACUGUUAGUCCAAAGAGGAACAGCUCUUUGGACACUAGGAAxxxxxxxxxxGAAAUAUGUCUGAUAAAAGAGUUACUUUGAUAGAGUAAAUAAUAGGAGCUUAAACCCCCUUCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[92.50000000 249.04776001]
[92.50000000 234.04776001]
[92.50000000 219.04776001]
[92.50000000 204.04776001]
[92.50000000 189.04776001]
[92.50000000 174.04776001]
[92.50000000 159.04776001]
[92.50000000 144.04776001]
[92.50000000 129.04776001]
[92.50000000 114.04776001]
[78.80937195 107.91858673]
[67.62107849 117.90968323]
[56.43278122 127.90077972]
[45.24448395 137.89187622]
[34.05618668 147.88298035]
[37.26626968 162.90266418]
[32.52117157 177.51017761]
[21.09730530 187.77618408]
[6.06763124 190.93916321]
[-8.52494335 186.14831543]
[-18.75508881 174.69232178]
[-21.87094688 159.65280151]
[-17.03437042 145.07531738]
[-5.54637003 134.88113403]
[9.50283718 131.81243896]
[24.06509018 136.69468689]
[35.25338745 126.70358276]
[46.44168472 116.71248627]
[57.62998199 106.72138977]
[68.81827545 96.73029327]
[81.69708252 88.60543823]
[93.73347473 90.04010773]
[95.27076721 75.11909485]
[96.80805969 60.19807434]
[98.34535217 45.27705765]
[99.88264465 30.35604286]
[101.41993713 15.43502617]
[94.45957947 2.14768434]
[81.31794739 -5.08401823]
[68.17631531 -12.31572056]
[55.03468704 -19.54742241]
[41.89305496 -26.77912521]
[28.75142288 -34.01082993]
[15.60979080 -41.24253082]
[2.46815920 -48.47423172]
[-10.67347240 -55.70593643]
[-23.81510353 -62.93763733]
[-38.92193604 -58.29446030]
[-52.84799576 -65.76710510]
[-57.33119965 -80.92218018]
[-49.71173859 -94.76846313]
[-34.51010513 -99.09117889]
[-20.74516106 -91.32575226]
[-16.58340073 -76.07926941]
[-3.44176960 -68.84756470]
[9.69986153 -61.61586380]
[22.84149361 -54.38416290]
[35.98312378 -47.15245819]
[49.12475586 -39.92075729]
[62.26638794 -32.68905640]
[75.40802002 -25.45735168]
[88.54965210 -18.22564888]
[101.69128418 -10.99394703]
[116.23823547 -14.65265274]
[124.39490509 -27.24109268]
[132.55157471 -39.82953262]
[119.07065582 -33.25191498]
[104.42169189 -30.02579880]
[89.42481232 -30.33180428]
[74.91963959 -34.15279770]
[61.71826553 -41.27485275]
[50.55978394 -51.29923630]
[42.06891632 -63.66472244]
[36.72103882 -77.67900848]
[34.81555176 -92.55748749]
[36.45914459 -107.46716309]
[41.55979156 -121.57331085]
[49.83193207 -134.08618164]
[60.81243515 -144.30520630]
[73.88655090 -151.65826416]
[88.32229614 -155.73370361]
[103.31147766 -156.30334473]
[118.01490021 -153.33529663]
[131.60937500 -146.99571228]
[143.33380127 -137.63955688]
[152.53176880 -125.79061127]
[158.68832397 -112.11227417]
[161.45877075 -97.37034607]
[160.68801880 -82.39015961]
[156.41920471 -68.01040649]
[148.88911438 -55.03320312]
[162.03073120 -62.26490784]
[168.08692932 -69.18721771]
[175.51727295 -69.50701904]
[188.80461121 -76.46737671]
[197.43882751 -89.72486115]
[212.30322266 -88.77674103]
[225.59056091 -95.73709869]
[238.87789917 -102.69745636]
[252.16525269 -109.65780640]
[258.30337524 -124.48019409]
[273.75830078 -128.78417969]
[286.67434692 -119.26813507]
[287.14343262 -103.23194122]
[274.80569458 -92.97720337]
[259.12561035 -96.37046814]
[245.83825684 -89.41011047]
[232.55091858 -82.44975281]
[219.26358032 -75.48940277]
[211.57975769 -62.72976685]
[195.76496887 -63.18003464]
[182.47763062 -56.21968079]
[169.26243591 -49.12327576]
[156.12080383 -41.89157486]
[145.14001465 -31.67286491]
[136.98333740 -19.08442688]
[128.82667542 -6.49598742]
[129.46571350 0.48149285]
[127.42841339 7.37672234]
[122.87394714 13.17502403]
[116.34095001 16.97231865]
[114.80365753 31.89333534]
[113.26636505 46.81435013]
[111.72907257 61.73536682]
[110.19178009 76.65638733]
[108.65448761 91.57740021]
[115.54427338 78.25332642]
[126.47750092 67.98373413]
[140.20635986 61.94067764]
[155.16397095 60.81385803]
[169.64323425 64.73188019]
[181.99163818 73.24757385]
[190.79983521 85.38905334]
[195.06257629 99.77060699]
[194.29335022 114.75086975]
[188.57994080 128.62014771]
[178.57440186 139.79554749]
[165.41870117 147.00160217]
[150.61427307 149.41590881]
[135.85075378 146.76292419]
[122.81308746 139.34541321]
[112.98928070 128.00994873]
[107.50000000 114.04776001]
[107.50000000 129.04776001]
[107.50000000 144.04776001]
[107.50000000 159.04776001]
[107.50000000 174.04776001]
[107.50000000 189.04776001]
[107.50000000 204.04776001]
[107.50000000 219.04776001]
[107.50000000 234.04776001]
[107.50000000 249.04776001]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 152]
[2 151]
[3 150]
[4 149]
[5 148]
[6 147]
[7 146]
[8 145]
[9 144]
[10 143]
[11 30]
[12 29]
[13 28]
[14 27]
[15 26]
[32 126]
[33 125]
[34 124]
[35 123]
[36 122]
[37 121]
[38 63]
[39 62]
[40 61]
[41 60]
[42 59]
[43 58]
[44 57]
[45 56]
[46 55]
[47 54]
[64 117]
[65 116]
[66 115]
[91 114]
[92 113]
[94 112]
[95 111]
[97 109]
[98 108]
[99 107]
[100 106]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
