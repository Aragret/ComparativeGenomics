%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:00 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGAGCUAAAACUCACCUGAGUUGUAAAAAACUCCAGUUGACACAAAAUAGACUACGAAAGUGxxxxxxxxxxAAAGCACCCAACUUACACUUAGGAGAUUUCAACUUAACUUGACCGCUCUGAGCUAAACCUCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[153.24238586 467.63989258]
[152.93032837 452.64312744]
[152.61827087 437.64639282]
[152.30621338 422.64962769]
[151.99415588 407.65286255]
[151.68209839 392.65612793]
[151.37004089 377.65936279]
[151.05798340 362.66259766]
[150.74592590 347.66586304]
[148.56909180 332.82464600]
[144.56135559 318.36996460]
[140.55361938 303.91528320]
[136.54586792 289.46057129]
[123.03807831 290.12326050]
[109.68694305 287.92639160]
[97.09128571 282.96572876]
[85.81666565 275.46096802]
[76.36993408 265.74615479]
[69.17649078 254.25473022]
[64.56110382 241.50027466]
[62.73324966 228.05343628]
[63.77762985 214.51654053]
[67.65021515 201.49649048]
[74.18012238 189.57762146]
[83.07713318 179.29547119]
[93.94461823 171.11270142]
[106.29718781 165.39828491]
[103.19886780 150.72175598]
[100.10054779 136.04524231]
[97.00222015 121.36871338]
[93.90390015 106.69218445]
[90.93790436 104.11550903]
[89.14913177 100.22371674]
[89.10714722 95.58514404]
[91.10035706 91.00464630]
[88.92352295 76.16343689]
[86.74668121 61.32223129]
[77.08857727 48.79100800]
[82.89695740 35.07561493]
[80.72011566 20.23441124]
[78.54328156 5.39320517]
[76.36644745 -9.44799995]
[72.96347046 -24.05689240]
[68.35790253 -38.33235168]
[63.75233841 -52.60781479]
[59.14677429 -66.88327789]
[54.54121017 -81.15873718]
[39.72075272 -78.67440033]
[24.69650841 -78.37451172]
[9.78871822 -80.26544952]
[-4.68485594 -84.30692291]
[-18.41571045 -90.41278076]
[-31.11116982 -98.45288086]
[-42.50062943 -108.25584412]
[-52.34132385 -119.61271667]
[-60.42349625 -132.28143311]
[-66.57487488 -145.99195862]
[-70.66435242 -160.45204163]
[-72.60474396 -175.35346985]
[-72.35469818 -190.37863159]
[-69.91954803 -205.20724487]
[-65.35119629 -219.52325439]
[-58.74701309 -233.02149963]
[-50.24777603 -245.41427612]
[-40.03464127 -256.43740845]
[-28.32530212 -265.85598755]
[-15.36934566 -273.46917725]
[-1.44292784 -279.11477661]
[13.15710831 -282.67242432]
[28.11956215 -284.06628418]
[43.12550735 -283.26663208]
[57.85509491 -280.29052734]
[71.99436188 -275.20141602]
[85.24192047 -268.10775757]
[97.31540680 -259.16076660]
[107.95747375 -248.55113220]
[116.94128418 -236.50502014]
[124.07534027 -223.27915955]
[129.20759583 -209.15550232]
[132.22863770 -194.43507385]
[133.07408142 -179.43164062]
[131.72590637 -164.46499634]
[128.21284485 -149.85417175]
[122.60978699 -135.91058350]
[115.03615570 -122.93144989]
[105.65338135 -111.19341278]
[94.66146851 -100.94667816]
[82.29469299 -92.40965271]
[68.81667328 -85.76429749]
[73.42223358 -71.48883820]
[78.02780151 -57.21337891]
[82.63336182 -42.93791962]
[87.23892975 -28.66245651]
[93.65893555 -42.21913528]
[106.74351501 -49.55355835]
[121.65818024 -47.95579910]
[132.89225769 -38.01620483]
[136.29496765 -23.40725136]
[130.60910034 -9.52665901]
[117.93544769 -1.50302982]
[102.95668793 -2.30093503]
[91.20764923 -11.62483692]
[93.38448334 3.21636820]
[95.56132507 18.05757332]
[97.73815918 32.89878082]
[107.24056244 44.36846161]
[101.58789062 59.14539719]
[103.76472473 73.98660278]
[105.94156647 88.82780457]
[108.58042908 103.59386444]
[111.67874908 118.27038574]
[114.77706909 132.94691467]
[117.87538910 147.62344360]
[120.97371674 162.29995728]
[137.53785706 162.97167969]
[153.36962891 167.85392761]
[167.41772461 176.61698914]
[178.75071716 188.67366028]
[186.61877441 203.21852112]
[190.50328064 219.28182983]
[190.15103149 235.79411316]
[185.59071350 251.65736389]
[177.13064575 265.81814575]
[165.33796692 277.33740234]
[151.00056458 285.45285034]
[155.00830078 299.90753174]
[159.01603699 314.36221313]
[163.02378845 328.81692505]
[168.18571472 314.73306274]
[178.86303711 304.19766235]
[193.01467896 299.22463989]
[207.93540955 300.76461792]
[220.77299500 308.52325439]
[229.07339478 321.01739502]
[231.24992371 335.85864258]
[226.88648987 350.20996094]
[216.81721497 361.32797241]
[202.96694946 367.08731079]
[187.98330688 366.38708496]
[174.73054504 359.36108398]
[165.74269104 347.35379028]
[166.05474854 362.35055542]
[166.36680603 377.34732056]
[166.67884827 392.34405518]
[166.99090576 407.34082031]
[167.30296326 422.33755493]
[167.61502075 437.33432007]
[167.92707825 452.33108521]
[168.23913574 467.32781982]
[170.83013916 486.53555298]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 149]
[2 148]
[3 147]
[4 146]
[5 145]
[6 144]
[7 143]
[8 142]
[9 141]
[10 128]
[11 127]
[12 126]
[13 125]
[27 114]
[28 113]
[29 112]
[30 111]
[31 110]
[35 109]
[36 108]
[37 107]
[39 105]
[40 104]
[41 103]
[42 102]
[43 93]
[44 92]
[45 91]
[46 90]
[47 89]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
