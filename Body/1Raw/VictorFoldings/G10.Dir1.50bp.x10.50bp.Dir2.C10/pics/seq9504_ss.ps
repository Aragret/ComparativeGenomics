%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:00 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGUCCUAGCCCUAAGUCUGGCCUAUGAGUGACUACAAAAAGGAUUAGACUGAACCGAAUUGGUAxxxxxxxxxxCACAAUCCCCUAUCUAGGCCUUCUUACGAGCCAAAACCUGCCCCUACUCCUCCUAGACCUAACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[283.32177734 533.24456787]
[282.71389771 518.25689697]
[282.10601807 503.26922607]
[281.49813843 488.28155518]
[280.89022827 473.29388428]
[280.28234863 458.30618286]
[279.67446899 443.31851196]
[279.06658936 428.33084106]
[274.86712646 413.93069458]
[267.32330322 400.96569824]
[259.77944946 388.00073242]
[244.88546753 388.18762207]
[231.81071472 380.84548950]
[224.11564636 367.85888672]
[223.95300293 352.66445923]
[231.46661377 339.34182739]
[223.92277527 326.37683105]
[207.51678467 322.80041504]
[198.57331848 308.19247437]
[203.01956177 291.30264282]
[195.21450806 278.49322510]
[187.40946960 265.68380737]
[179.60441589 252.87437439]
[166.74758911 251.60505676]
[156.83343506 243.02055359]
[153.64488220 230.09892273]
[158.56954956 217.52471924]
[151.02571106 204.55973816]
[143.48187256 191.59477234]
[135.93803406 178.62980652]
[128.39419556 165.66482544]
[120.85034943 152.69985962]
[114.73210907 148.47531128]
[113.28806305 139.39479065]
[106.00852966 126.27959442]
[81.38993073 126.92105103]
[61.86021805 105.23157501]
[46.89794540 104.16838074]
[32.39508057 111.82337952]
[18.66019821 102.86318970]
[19.82256508 86.50528717]
[34.68643951 79.57727814]
[47.96113968 89.20610809]
[62.92341232 90.26930237]
[67.51420593 84.33848572]
[55.65272522 75.15670013]
[64.83470917 63.29536438]
[76.69580078 72.47684479]
[81.28659058 66.54602814]
[76.50700378 52.32788849]
[71.72741699 38.10974503]
[66.94783020 23.89160538]
[62.16824722 9.67346382]
[47.27114487 11.76895618]
[32.24266434 11.09119511]
[17.59466362 7.66326618]
[3.82604766 1.60192275]
[-8.59422684 -6.88638830]
[-19.24313164 -17.51255798]
[-27.75796700 -29.91466331]
[-33.84872437 -43.67029190]
[-37.30794907 -58.31093216]
[-38.01782990 -73.33793640]
[-35.95417786 -88.23947906]
[-31.18729019 -102.50802612]
[-23.87951851 -115.65759277]
[-14.27976704 -127.24031067]
[-2.71499634 -136.86167908]
[10.42090034 -144.19400024]
[24.68051910 -148.98753357]
[39.57818222 -151.07901001]
[54.60647964 -150.39718628]
[69.25355530 -146.96531677]
[83.02053833 -140.90025330]
[95.43852234 -132.40859985]
[106.08456421 -121.77956390]
[114.59605408 -109.37516022]
[120.68310547 -95.61788940]
[124.13838959 -80.97631836]
[124.84421539 -65.94912720]
[122.77655029 -51.04814148]
[118.00581360 -36.78087997]
[110.69449615 -23.63328171]
[101.09162140 -12.05315018]
[89.52426147 -2.43489957]
[76.38639069 4.89387655]
[81.16597748 19.11201859]
[85.94556427 33.33015823]
[90.72515106 47.54830170]
[95.50473785 61.76644135]
[113.32107544 66.35184479]
[125.91734314 78.17730713]
[130.90687561 93.54671478]
[128.05892944 108.31685638]
[119.12373352 119.00006104]
[126.40325928 132.11526489]
[133.81532288 145.15602112]
[141.35916138 158.12098694]
[148.90299988 171.08596802]
[156.44683838 184.05093384]
[163.99067688 197.01589966]
[171.53451538 209.98088074]
[188.50267029 214.11825562]
[197.08544922 228.94099426]
[192.41383362 245.06932068]
[200.21888733 257.87875366]
[208.02392578 270.68817139]
[215.82897949 283.49758911]
[229.23066711 285.15826416]
[239.07254028 294.11779785]
[241.89694214 306.92431641]
[236.88774109 318.83300781]
[244.43157959 331.79797363]
[259.72683716 331.84899902]
[272.85626221 339.49850464]
[280.34417725 352.60565186]
[280.26657104 367.60067749]
[272.74441528 380.45690918]
[280.28826904 393.42187500]
[287.83209229 406.38684082]
[287.99865723 391.38775635]
[291.68551636 376.84793091]
[298.68615723 363.58175659]
[308.60842896 352.33236694]
[320.89651489 343.72988892]
[334.86215210 338.25619507]
[349.72302246 336.21789551]
[364.64669800 337.72915649]
[378.79724121 342.70532227]
[391.38198853 350.86764526]
[401.69604492 361.75894165]
[409.16165161 374.76910400]
[413.36062622 389.16940308]
[414.05776978 404.15319824]
[411.21401978 418.88116455]
[404.98867798 432.52832031]
[395.73043823 444.33023071]
[383.95791626 453.62582397]
[370.33056641 459.89437866]
[355.61166382 462.78479004]
[340.62573242 462.13513184]
[326.21221924 457.98181152]
[313.17843628 450.55746460]
[302.25451660 440.27795410]
[294.05426025 427.72296143]
[294.66213989 442.71063232]
[295.27005005 457.69830322]
[295.87792969 472.68600464]
[296.48580933 487.67367554]
[297.09368896 502.66134644]
[297.70156860 517.64904785]
[298.30944824 532.63671875]
[304.99270630 548.21777344]
[291.87066650 558.95312500]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 152]
[2 151]
[3 150]
[4 149]
[5 148]
[6 147]
[7 146]
[8 145]
[9 120]
[10 119]
[11 118]
[16 113]
[17 112]
[20 108]
[21 107]
[22 106]
[23 105]
[27 102]
[28 101]
[29 100]
[30 99]
[31 98]
[32 97]
[34 96]
[35 95]
[37 44]
[38 43]
[49 90]
[50 89]
[51 88]
[52 87]
[53 86]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
