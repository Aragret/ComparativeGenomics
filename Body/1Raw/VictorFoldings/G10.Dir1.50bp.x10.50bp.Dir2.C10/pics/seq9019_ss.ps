%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:54 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCCUUUUACCACUCCAGCCUAGCCCCUACCCCCCAAUUAGGAGGGCACUGGCCCCCAACAGxxxxxxxxxxGUCCUUGUAGUAUAAACUAAUACACCAGUCUUGUAAACCGGAGAUGAAAACCUUUUUCCACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[5.35009670 182.21771240]
[-6.54228306 191.35945129]
[-18.43466187 200.50117493]
[-30.32704163 209.64291382]
[-42.21942139 218.78465271]
[-54.11180115 227.92637634]
[-65.81142426 237.31355286]
[-77.31323242 246.94207764]
[-88.81503296 256.57058716]
[-100.31683350 266.19912720]
[-111.81864166 275.82763672]
[-105.94861603 289.75726318]
[-104.44685364 304.79840088]
[-107.44690704 319.61364746]
[-114.68200684 332.88558960]
[-125.50880432 343.43414307]
[-138.96459961 350.32131958]
[-153.85290527 352.93469238]
[-168.84985352 351.04193115]
[-182.62196350 344.81127930]
[-193.94458008 334.79681396]
[-201.81094360 321.88900757]
[-205.52154541 307.23556519]
[-204.74647522 292.13952637]
[-199.55464172 277.94317627]
[-190.40768433 265.90887451]
[-178.11895752 257.10668945]
[-163.78117371 252.31927490]
[-148.66921997 251.97238159]
[-134.12684631 256.09680176]
[-121.44716644 264.32583618]
[-109.94536591 254.69732666]
[-98.44355774 245.06880188]
[-86.94175720 235.44026184]
[-75.43994904 225.81173706]
[-74.13305664 221.15690613]
[-69.84952545 217.29910278]
[-63.25353622 216.03399658]
[-51.36115646 206.89227295]
[-39.46877670 197.75053406]
[-27.57639694 188.60879517]
[-15.68401718 179.46707153]
[-3.79163742 170.32533264]
[-16.76423264 145.65600586]
[-23.96587181 118.73017120]
[-25.04062080 90.87861633]
[-19.93536186 63.47788239]
[-8.90241909 37.88221359]
[7.51291752 15.35665417]
[-2.92689490 4.58584547]
[-11.20329571 0.56676090]
[-13.46895599 -6.51931190]
[-23.68243599 -17.50497627]
[-33.89591599 -28.49064064]
[-44.10939407 -39.47630692]
[-59.93519592 -43.77468491]
[-63.86342621 -59.69639969]
[-51.85305405 -70.86255646]
[-36.25932693 -65.78636932]
[-33.12372971 -49.68978500]
[-22.91025162 -38.70412064]
[-12.69677162 -27.71845627]
[-2.48329139 -16.73279190]
[7.84391356 -5.85396671]
[18.28372574 4.91684151]
[24.21511650 0.12503958]
[30.42683601 -4.29732180]
[36.89590836 -8.33388329]
[43.59840775 -11.96971416]
[50.50953674 -15.19136524]
[57.60373688 -17.98691940]
[64.85475922 -20.34603500]
[72.23578644 -22.25998878]
[79.71950531 -23.72169685]
[87.27825165 -24.72575378]
[94.88405609 -25.26844597]
[102.50878143 -25.34776688]
[110.12422943 -24.96342087]
[117.70222473 -24.11683083]
[125.21474457 -22.81112862]
[132.63398743 -21.05114365]
[139.93252563 -18.84338570]
[147.08334351 -16.19602203]
[154.05999756 -13.11884594]
[160.83668518 -9.62323952]
[167.38833618 -5.72213221]
[173.69070435 -1.42995501]
[179.72050476 3.23741508]
[189.93397522 -7.74824953]
[200.14746094 -18.73391533]
[210.36094666 -29.71957970]
[213.49653625 -45.81616592]
[229.09027100 -50.89235306]
[241.10063171 -39.72619629]
[237.17240906 -23.80447769]
[221.34660339 -19.50609970]
[211.13313293 -8.52043438]
[200.91964722 2.46523023]
[190.70616150 13.45089436]
[208.79280090 37.69043350]
[220.54858398 65.55588531]
[235.19207764 62.30506134]
[249.83558655 59.05423355]
[264.47909546 55.80340958]
[271.53469849 41.84804916]
[285.93023682 35.74044800]
[300.86853027 40.36442947]
[309.29620361 53.53669357]
[307.23394775 69.03769684]
[295.65548706 79.54833984]
[280.02786255 80.10581970]
[267.72991943 70.44690704]
[253.08641052 73.69773865]
[238.44290161 76.94856262]
[223.79940796 80.19938660]
[224.87962341 88.88977814]
[225.35055542 97.63437653]
[225.20989990 106.39051056]
[224.45834351 115.11547089]
[223.09956360 123.76668549]
[221.14016724 132.30194092]
[218.58973694 140.67959595]
[215.46072388 148.85876465]
[211.76835632 156.79956055]
[207.53068542 164.46324158]
[202.76837158 171.81239319]
[197.50463867 178.81117249]
[191.76519775 185.42543030]
[185.57801819 191.62290955]
[178.97332764 197.37335205]
[171.98330688 202.64872742]
[164.64208984 207.42326355]
[156.98547363 211.67369080]
[149.05084229 215.37925720]
[140.87687683 218.52188110]
[132.50347900 221.08625793]
[123.97150421 223.05982971]
[115.32256317 224.43301392]
[106.59886932 225.19908142]
[97.84297180 225.35430908]
[89.09760284 224.89793396]
[80.40543365 223.83218384]
[71.80885315 222.16224670]
[63.34982681 219.89628601]
[55.06961441 217.04536438]
[47.00861359 213.62336731]
[39.20616150 209.64700317]
[31.70031929 205.13568115]
[24.52771187 200.11138916]
[17.72333336 194.59866333]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 43]
[2 42]
[3 41]
[4 40]
[5 39]
[6 38]
[7 35]
[8 34]
[9 33]
[10 32]
[11 31]
[49 65]
[50 64]
[52 63]
[53 62]
[54 61]
[55 60]
[88 99]
[89 98]
[90 97]
[91 96]
[101 115]
[102 114]
[103 113]
[104 112]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
