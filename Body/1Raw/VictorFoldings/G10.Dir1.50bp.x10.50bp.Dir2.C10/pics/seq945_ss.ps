%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:15 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGUCCUAGCCUUUCUAUUAGCUCUUAGUAAGAUUACACAUGCAAGCAUCCCCGUUCCAGUGAGUUCxxxxxxxxxxCAUUCAAAAAAGAGUAAUAAACUUCGCCUUAAUUUUAAUAAUCAACACCCUCCUAGCCUUACUACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[92.50000000 92.50000000]
[92.50000000 77.50000000]
[92.50000000 62.50000000]
[92.50000000 47.50000000]
[92.50000000 32.50000000]
[92.50000000 17.50000000]
[92.50000000 2.49999952]
[92.50000000 -12.50000000]
[92.50000000 -27.50000000]
[92.50000000 -42.50000000]
[77.51256561 -43.17303085]
[62.57042313 -44.51779175]
[47.70365906 -46.53157806]
[32.94221115 -49.21033096]
[18.31580925 -52.54865646]
[3.85390854 -56.53983307]
[-10.41436577 -61.17582321]
[-24.46027946 -66.44728851]
[-38.25554657 -72.34361267]
[-51.77238464 -78.85292816]
[-64.98357391 -85.96212006]
[-77.86250305 -93.65686798]
[-90.38324738 -101.92167664]
[-102.52057648 -110.73991394]
[-114.25006104 -120.09380341]
[-125.54807281 -129.96452332]
[-136.39186096 -140.33218384]
[-146.75958252 -151.17590332]
[-156.63035583 -162.47386169]
[-165.98431396 -174.20329285]
[-174.80261230 -186.34057617]
[-183.06750488 -198.86126709]
[-190.76232910 -211.74015808]
[-197.87158203 -224.95129395]
[-204.38098145 -238.46810913]
[-210.27738953 -252.26333618]
[-215.54893494 -266.30923462]
[-220.18499756 -280.57745361]
[-224.17625427 -295.03933716]
[-227.51466370 -309.66574097]
[-230.19351196 -324.42715454]
[-232.20738220 -339.29391479]
[-233.55221558 -354.23605347]
[-234.22534180 -369.22348022]
[-234.22537231 -384.22601318]
[-233.55230713 -399.21343994]
[-232.20751953 -414.15557861]
[-230.19371033 -429.02233887]
[-227.51492310 -443.78378296]
[-224.17657471 -458.41018677]
[-220.18536377 -472.87207031]
[-215.54934692 -487.14035034]
[-210.27784729 -501.18624878]
[-204.38150024 -514.98150635]
[-197.87216187 -528.49835205]
[-190.76295471 -541.70953369]
[-183.06817627 -554.58843994]
[-174.80334473 -567.10913086]
[-165.98509216 -579.24645996]
[-156.63116455 -590.97595215]
[-146.76043701 -602.27392578]
[-136.39274597 -613.11767578]
[-125.54900360 -623.48541260]
[-114.25103760 -633.35614014]
[-102.52159119 -642.71008301]
[-90.38428497 -651.52838135]
[-77.86357880 -659.79321289]
[-64.98468018 -667.48803711]
[-51.77351379 -674.59722900]
[-38.25670242 -681.10662842]
[-24.46145630 -687.00299072]
[-10.41556263 -692.27453613]
[3.85269427 -696.91058350]
[18.31457901 -700.90179443]
[32.94096756 -704.24017334]
[47.70240784 -706.91900635]
[62.56916428 -708.93280029]
[77.51130676 -710.27764893]
[92.49873352 -710.95074463]
[107.50126648 -710.95074463]
[122.48869324 -710.27764893]
[137.43083191 -708.93280029]
[152.29759216 -706.91900635]
[167.05903625 -704.24017334]
[181.68542480 -700.90179443]
[196.14730835 -696.91058350]
[210.41555786 -692.27453613]
[224.46145630 -687.00299072]
[238.25669861 -681.10662842]
[251.77351379 -674.59722900]
[264.98468018 -667.48803711]
[277.86358643 -659.79321289]
[290.38427734 -651.52838135]
[302.52157593 -642.71008301]
[314.25103760 -633.35614014]
[325.54901123 -623.48541260]
[336.39276123 -613.11767578]
[346.76043701 -602.27392578]
[356.63116455 -590.97595215]
[365.98507690 -579.24645996]
[374.80334473 -567.10913086]
[383.06817627 -554.58843994]
[390.76293945 -541.70953369]
[397.87216187 -528.49835205]
[404.38150024 -514.98150635]
[410.27786255 -501.18624878]
[415.54934692 -487.14035034]
[420.18536377 -472.87207031]
[424.17657471 -458.41018677]
[427.51492310 -443.78378296]
[430.19369507 -429.02233887]
[432.20751953 -414.15557861]
[433.55230713 -399.21343994]
[434.22537231 -384.22601318]
[434.22534180 -369.22348022]
[433.55221558 -354.23605347]
[432.20736694 -339.29391479]
[430.19351196 -324.42715454]
[427.51467896 -309.66574097]
[424.17626953 -295.03933716]
[420.18499756 -280.57745361]
[415.54891968 -266.30923462]
[410.27737427 -252.26333618]
[404.38098145 -238.46810913]
[397.87158203 -224.95129395]
[390.76232910 -211.74015808]
[383.06750488 -198.86126709]
[374.80261230 -186.34057617]
[365.98431396 -174.20329285]
[356.63037109 -162.47386169]
[346.75958252 -151.17590332]
[336.39184570 -140.33218384]
[325.54806519 -129.96452332]
[314.25006104 -120.09380341]
[302.52056885 -110.73991394]
[290.38323975 -101.92167664]
[277.86251831 -93.65686798]
[264.98358154 -85.96212006]
[251.77238464 -78.85292816]
[238.25555420 -72.34361267]
[224.46028137 -66.44728851]
[210.41436768 -61.17582321]
[196.14608765 -56.53983307]
[181.68418884 -52.54865646]
[167.05778503 -49.21033096]
[152.29634094 -46.53157806]
[137.42958069 -44.51779175]
[122.48743439 -43.17303085]
[107.50000000 -42.50000000]
[107.50000000 -27.50000000]
[107.50000000 -12.50000000]
[107.50000000 2.49999952]
[107.50000000 17.50000000]
[107.50000000 32.50000000]
[107.50000000 47.50000000]
[107.50000000 62.50000000]
[107.50000000 77.50000000]
[107.50000000 92.50000000]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 158]
[2 157]
[3 156]
[4 155]
[5 154]
[6 153]
[7 152]
[8 151]
[9 150]
[10 149]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
