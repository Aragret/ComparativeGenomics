%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:04 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCCAUCCCUGAGAAUCCAAAAUUCUCCGUGCCACCUAUCACACCCCAUCCUAAAGUAAGGUxxxxxxxxxxCUACUAGGCCUCCUCCUAGCAGCAGCAGGCAAAUCAGCCCAAUUAGGUCUCCACCCCUGACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[92.50000000 307.72042847]
[92.50000000 292.72042847]
[92.50000000 277.72042847]
[92.50000000 262.72042847]
[92.50000000 247.72042847]
[92.50000000 232.72042847]
[92.50000000 217.72042847]
[92.50000000 202.72042847]
[92.50000000 187.72042847]
[92.50000000 172.72042847]
[85.13482666 171.57888794]
[77.92414856 169.69338989]
[70.94292450 167.08351135]
[64.26371002 163.77639771]
[57.95592117 159.80641174]
[52.08512497 155.21482849]
[46.71234131 150.04934692]
[41.89340973 144.36367798]
[37.67841721 138.21690369]
[24.15422630 144.70507812]
[10.63003731 151.19323730]
[-2.89415288 157.68139648]
[-16.41834259 164.16957092]
[-29.94253349 170.65773010]
[-36.59877396 185.25479126]
[-52.19568253 189.01191711]
[-64.76864624 179.04696655]
[-64.67276001 163.00419617]
[-51.98158264 153.19024658]
[-36.43069839 157.13354492]
[-22.90650749 150.64538574]
[-9.38231850 144.15721130]
[4.14187193 137.66905212]
[17.66606140 131.18087769]
[31.19025230 124.69271851]
[27.14684296 106.07695007]
[28.05021477 87.04854584]
[13.63799763 82.89066315]
[-0.77421802 78.73277283]
[-11.78393555 89.44172668]
[-26.67703819 93.19553375]
[-41.44735336 88.98444366]
[-52.12174606 77.94121552]
[-55.82885361 63.03641891]
[-51.57148361 48.27937317]
[-40.49484634 37.63964844]
[-25.57850647 33.97927856]
[-10.83487797 38.28288269]
[-0.22992697 49.39281464]
[3.38366938 64.32055664]
[17.79588509 68.47844696]
[32.20810318 72.63632965]
[43.25909042 53.90248489]
[59.33263016 39.24905777]
[79.00593567 29.97314072]
[100.53757477 26.89580917]
[122.02162933 30.28945732]
[141.55639648 39.85369492]
[151.30404663 28.45267296]
[161.05169678 17.05165100]
[170.79934692 5.65063047]
[180.54699707 -5.75039053]
[185.30081177 -19.97716904]
[184.36518860 -34.94795990]
[183.42955017 -49.91875458]
[182.49392700 -64.88954163]
[168.01780701 -69.45095062]
[156.16944885 -78.93676758]
[148.55122375 -92.06410980]
[146.19346619 -107.05762482]
[149.41500854 -121.88954926]
[157.78019714 -134.55400085]
[170.15768433 -143.33819580]
[184.87351990 -147.05416870]
[199.93753052 -145.19934082]
[213.31239319 -138.02458191]
[223.18930054 -126.50021362]
[228.23246765 -112.18480682]
[227.75985718 -97.01441193]
[221.83537292 -83.04068756]
[211.26026917 -72.15347290]
[197.46472168 -65.82517242]
[198.40034485 -50.85438156]
[199.33598328 -35.88359070]
[200.27160645 -20.91279793]
[214.36125183 -22.99491310]
[225.38984680 -16.37980270]
[239.04608154 -22.58520889]
[252.70233154 -28.79061699]
[252.74362183 -45.90687943]
[260.20901489 -61.24811172]
[273.56591797 -71.77441406]
[290.11959839 -75.42323303]
[306.55700684 -71.51338196]
[319.60958862 -60.87163162]
[332.99584961 -67.63974762]
[346.38214111 -74.40785980]
[352.67883301 -81.11634064]
[360.11807251 -81.17426300]
[373.64224243 -87.66242981]
[382.44869995 -101.49639893]
[398.81854248 -100.51654816]
[405.91189575 -85.73086548]
[396.43173218 -72.34960175]
[380.13040161 -74.13823700]
[366.60623169 -67.65007782]
[353.15026855 -61.02157593]
[339.76397705 -54.25345993]
[326.37768555 -47.48534775]
[327.68637085 -34.49235535]
[324.47460938 -21.80168724]
[317.10678101 -10.94240856]
[306.44946289 -3.23060560]
[293.76934814 0.39009303]
[280.58288574 -0.53605855]
[268.47479248 -5.91967916]
[258.90774536 -15.13437557]
[245.25149536 -8.92896843]
[231.59524536 -2.72356105]
[228.01998901 9.85138607]
[216.46482849 17.41164207]
[202.05221558 15.45946026]
[191.94801331 3.99726129]
[182.20036316 15.39828205]
[172.45271301 26.79930305]
[162.70506287 38.20032501]
[152.95741272 49.60134506]
[160.27697754 58.63336563]
[166.07223511 68.71147156]
[170.19664001 79.58081055]
[172.54589844 90.96652222]
[173.06060791 102.58066559]
[171.72773743 114.12955475]
[168.58099365 125.32112885]
[163.69995117 135.87237549]
[157.20806885 145.51647949]
[149.26947021 154.00953674]
[140.08494568 161.13679504]
[129.88674927 166.71801758]
[118.93276215 170.61206055]
[107.50000000 172.72042847]
[107.50000000 187.72042847]
[107.50000000 202.72042847]
[107.50000000 217.72042847]
[107.50000000 232.72042847]
[107.50000000 247.72042847]
[107.50000000 262.72042847]
[107.50000000 277.72042847]
[107.50000000 292.72042847]
[107.50000000 307.72042847]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[19 35]
[20 34]
[21 33]
[22 32]
[23 31]
[24 30]
[37 52]
[38 51]
[39 50]
[58 127]
[59 126]
[60 125]
[61 124]
[62 123]
[63 85]
[64 84]
[65 83]
[66 82]
[87 119]
[88 118]
[89 117]
[95 109]
[96 108]
[97 107]
[99 106]
[100 105]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
