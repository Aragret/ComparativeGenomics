%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:44 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGACCCCCUCCCCAAUAAAGCUAAAACUCACCUGAGUUGUAAAAAACUCCAGUUGACACAAAxxxxxxxxxxUCCUCUAUCUUAGGGGCCAUCAAUUUCAUCACAACAAUUAUCAAUAUAAAACCCCCUGCCCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[23.59460258 272.07641602]
[16.96610451 285.53240967]
[10.33760643 298.98837280]
[3.70910764 312.44433594]
[-2.91939092 325.90029907]
[-9.54788971 339.35626221]
[-16.17638779 352.81222534]
[-22.80488586 366.26818848]
[-29.43338585 379.72415161]
[-31.00874138 396.60476685]
[-47.66574097 399.76397705]
[-55.31261826 384.63250732]
[-42.88935089 373.09564209]
[-36.26085281 359.63967896]
[-29.63235283 346.18371582]
[-23.00385475 332.72775269]
[-16.37535667 319.27178955]
[-9.74685764 305.81582642]
[-3.11835933 292.35986328]
[3.51013947 278.90390015]
[10.13863754 265.44793701]
[-6.37664890 255.34507751]
[-21.76712608 243.59960938]
[-35.87005615 230.33575439]
[-48.53631592 215.69375610]
[-59.63198090 199.82841492]
[-69.03971863 182.90751648]
[-76.66005707 165.10997009]
[-82.41241455 146.62394714]
[-86.23597717 127.64493561]
[-88.09030914 108.37361145]
[-87.95580292 89.01374817]
[-85.83388519 69.77005005]
[-81.74698639 50.84599304]
[-75.73831940 32.44168854]
[-67.87142944 14.75173473]
[-80.96458435 7.43262911]
[-94.05773926 0.11352356]
[-109.87892914 0.13357349]
[-117.21292877 -12.83028793]
[-130.30609131 -20.14939308]
[-143.39924622 -27.46849823]
[-156.56782532 -34.65100861]
[-169.81040955 -41.69614410]
[-183.05299377 -48.74127579]
[-196.29557800 -55.78641129]
[-211.33523560 -50.93006134]
[-225.36558533 -58.20502090]
[-230.06265259 -73.29518890]
[-222.63977051 -87.24782562]
[-207.50077820 -91.78509521]
[-193.62739563 -84.21510315]
[-189.25044250 -69.02899933]
[-176.00785828 -61.98386383]
[-162.76527405 -54.93872833]
[-149.52268982 -47.89359283]
[-142.09230042 -47.52626038]
[-136.08013916 -40.56165314]
[-122.98697662 -33.24254608]
[-109.89382172 -25.92344284]
[-95.00914001 -26.46700287]
[-86.73863220 -12.97963047]
[-73.64547729 -5.66052532]
[-60.55232239 1.65858030]
[-51.54233170 -11.72736835]
[-41.41927338 -24.29268837]
[-30.25749969 -35.94508743]
[-18.13899422 -46.59897995]
[-5.15276766 -56.17611313]
[8.60579777 -64.60614014]
[23.03564835 -71.82715607]
[38.03079605 -77.78610992]
[53.48110199 -82.43923950]
[69.27308655 -85.75235748]
[85.29075623 -87.70114899]
[101.41646576 -88.27128601]
[117.53177643 -87.45858002]
[133.51831055 -85.26901245]
[149.25865173 -81.71865082]
[164.63720703 -76.83358002]
[179.54098511 -70.64968109]
[193.86056519 -63.21237183]
[201.85047913 -75.90730286]
[209.84039307 -88.60223389]
[217.83030701 -101.29715729]
[225.82022095 -113.99208832]
[233.81013489 -126.68701935]
[237.12983704 -143.31277466]
[254.02484131 -144.72528076]
[260.05914307 -128.88156128]
[246.50506592 -118.69710541]
[238.51515198 -106.00217438]
[230.52523804 -93.30724335]
[222.53532410 -80.61231232]
[214.54541016 -67.91738129]
[206.55548096 -55.22245407]
[215.91357422 -48.36484528]
[224.83151245 -40.94387436]
[233.27545166 -32.98772430]
[241.21333313 -24.52660561]
[248.61502075 -15.59264278]
[255.45239258 -6.21976233]
[261.69949341 3.55644751]
[267.33258057 13.69886494]
[272.33032227 24.16897774]
[276.67367554 34.92702866]
[280.34619141 45.93217087]
[283.33392334 57.14261246]
[285.62548828 68.51579285]
[287.21224976 80.00852203]
[288.08810425 91.57715607]
[288.24978638 103.17778015]
[287.69665527 114.76632690]
[286.43081665 126.29881287]
[284.45709229 137.73143005]
[281.78295898 149.02079773]
[278.41857910 160.12400818]
[274.37670898 170.99893188]
[288.03295898 177.20433044]
[301.68917847 183.40974426]
[315.34542847 189.61514282]
[331.60601807 187.48776245]
[341.36248779 200.66891479]
[334.57827759 215.59896851]
[318.23236084 216.91915894]
[309.14001465 203.27139282]
[295.48379517 197.06597900]
[281.82754517 190.86058044]
[268.17129517 184.65516663]
[262.20404053 195.59252930]
[255.52647400 206.11126709]
[248.16781616 216.16531372]
[240.16030884 225.71066284]
[231.53900146 234.70550537]
[222.34167480 243.11044312]
[212.60858154 250.88867188]
[202.38235474 258.00613403]
[191.70777893 264.43164062]
[180.63160706 270.13708496]
[169.20231628 275.09747314]
[157.46998596 279.29104614]
[145.48597717 282.69949341]
[133.30278015 285.30786133]
[120.97374725 287.10473633]
[108.55286407 288.08224487]
[96.09452057 288.23611450]
[83.65328979 287.56564331]
[71.28363800 286.07379150]
[59.03974152 283.76708984]
[46.97521591 280.65563965]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 21]
[2 20]
[3 19]
[4 18]
[5 17]
[6 16]
[7 15]
[8 14]
[9 13]
[36 64]
[37 63]
[38 62]
[40 60]
[41 59]
[42 58]
[43 56]
[44 55]
[45 54]
[46 53]
[82 96]
[83 95]
[84 94]
[85 93]
[86 92]
[87 91]
[118 129]
[119 128]
[120 127]
[121 126]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
