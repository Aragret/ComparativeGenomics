%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:00 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCUCUUAGUAAGAUUACACAUGCAAGCAUCCCCGUUCCAGUGAGUUCACCCUCUAAAUCACxxxxxxxxxxAAACAGACCUAAAAUCGCUCAUUGCAUACUCUUCAAUCAGCCACAUAGCCCUCGUAGUAACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[122.04632568 310.89999390]
[121.42234802 295.91299438]
[120.79837036 280.92596436]
[120.17439270 265.93893433]
[119.55041504 250.95193481]
[118.92643738 235.96492004]
[118.30245972 220.97790527]
[117.67848206 205.99087524]
[115.50164032 191.14967346]
[111.79547882 176.61474609]
[108.08931732 162.07980347]
[104.38316345 147.54487610]
[89.48322296 146.57385254]
[75.61179352 141.04804993]
[64.12546539 131.50784302]
[56.14757156 118.88626862]
[52.45832443 104.41767120]
[53.41852188 89.51702881]
[58.93426514 75.64159393]
[68.46611786 64.14834595]
[81.08190155 56.16129303]
[77.37574005 41.62635803]
[73.66957855 27.09142113]
[69.96341705 12.55648422]
[52.09320068 8.22556973]
[38.91308594 -4.47438383]
[33.96810913 -22.00916100]
[38.52848434 -39.56066895]
[51.26468277 -52.35078812]
[46.65911865 -66.62625122]
[42.05355453 -80.90171051]
[37.44799042 -95.17716980]
[32.84242630 -109.45262909]
[28.23686218 -123.72808838]
[24.32030678 -109.24842834]
[15.51929474 -97.10173035]
[2.97993851 -88.86981201]
[-11.66482258 -85.62466431]
[-26.50787163 -87.78889465]
[-39.61627197 -95.08066559]
[-49.28297424 -106.55039978]
[-54.24913788 -120.70445251]
[-53.86804199 -135.69961548]
[-48.18931198 -149.58312988]
[-37.95246124 -160.54701233]
[-24.49058723 -167.16351318]
[-9.55676365 -168.57096863]
[4.90424871 -164.58610535]
[17.00926208 -155.72784424]
[25.18121910 -143.15141296]
[25.18121910 -158.15141296]
[25.18121910 -173.15141296]
[25.18121910 -188.15141296]
[10.29716587 -190.19560242]
[-4.16988564 -194.24754333]
[-17.95042419 -200.23173523]
[-30.78772545 -208.03669739]
[-42.44263840 -217.51702881]
[-52.69804001 -228.49612427]
[-61.36287689 -240.76943970]
[-68.27573395 -254.10833740]
[-73.30782318 -268.26431274]
[-76.36539459 -282.97366333]
[-77.39150238 -297.96237183]
[-76.36701965 -312.95117188]
[-73.31103516 -327.66085815]
[-68.28047943 -341.81738281]
[-61.36906815 -355.15701294]
[-52.70555878 -367.43127441]
[-42.45134735 -378.41146851]
[-30.79745865 -387.89306641]
[-17.96100235 -395.69943237]
[-4.18111229 -401.68511963]
[10.28550053 -405.73861694]
[25.16933250 -407.78442383]
[40.19310379 -407.78442383]
[55.07693481 -405.73861694]
[69.54354858 -401.68511963]
[83.32344055 -395.69943237]
[96.15989685 -387.89306641]
[107.81378174 -378.41146851]
[118.06799316 -367.43127441]
[126.73150635 -355.15701294]
[133.64291382 -341.81738281]
[138.67347717 -327.66085815]
[141.72946167 -312.95117188]
[142.75393677 -297.96237183]
[141.72782898 -282.97366333]
[138.67025757 -268.26431274]
[133.63816833 -254.10833740]
[126.72531128 -240.76943970]
[118.06047821 -228.49612427]
[107.80507660 -217.51702881]
[96.15016174 -208.03669739]
[83.31285858 -200.23173523]
[69.53232574 -194.24754333]
[55.06526947 -190.19560242]
[40.18121719 -188.15141296]
[40.18121719 -173.15141296]
[40.18121719 -158.15141296]
[40.18121719 -143.15141296]
[42.51232147 -128.33364868]
[47.11788559 -114.05819702]
[51.72344971 -99.78273010]
[56.32901382 -85.50727081]
[60.93458176 -71.23181152]
[65.54014587 -56.95635223]
[77.39153290 -56.09885025]
[88.28018951 -51.25577545]
[96.90386963 -42.98051071]
[102.22248840 -32.23842621]
[103.58350372 -20.29429054]
[100.80188751 -8.56337643]
[94.18491364 1.55624616]
[84.49835968 8.85032272]
[88.20452118 23.38525963]
[91.91068268 37.92019653]
[95.61683655 52.45513153]
[110.51677704 53.42614365]
[124.38820648 58.95195389]
[135.87452698 68.49214935]
[143.85243225 81.11373138]
[147.54167175 95.58232880]
[146.58148193 110.48297119]
[141.06573486 124.35840607]
[131.53387451 135.85165405]
[118.91809845 143.83871460]
[122.62425995 158.37364197]
[126.33042145 172.90858459]
[130.03657532 187.44351196]
[136.20553589 173.77076721]
[148.30352783 164.90293884]
[163.19903564 163.13540649]
[177.03637695 168.92572021]
[186.23382568 180.77507019]
[188.41062927 195.61628723]
[183.00334167 209.60775757]
[171.41162109 219.12783813]
[156.63595581 221.71228027]
[142.50096130 216.69212341]
[132.66549683 205.36691284]
[133.28947449 220.35392761]
[133.91345215 235.34094238]
[134.53742981 250.32795715]
[135.16140747 265.31497192]
[135.78538513 280.30197144]
[136.40936279 295.28900146]
[137.03334045 310.27603149]
[143.73332214 325.84991455]
[130.62280273 336.59936523]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 148]
[2 147]
[3 146]
[4 145]
[5 144]
[6 143]
[7 142]
[8 141]
[9 130]
[10 129]
[11 128]
[12 127]
[21 118]
[22 117]
[23 116]
[24 115]
[29 107]
[30 106]
[31 105]
[32 104]
[33 103]
[34 102]
[50 101]
[51 100]
[52 99]
[53 98]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
