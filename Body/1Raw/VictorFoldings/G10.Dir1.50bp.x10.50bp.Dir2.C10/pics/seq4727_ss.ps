%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:21 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGAUUUUUUACCUGAGUAGGCCUAGAAAUAAACAUGCUAGCUUUUAUUCCAGUUCUAACCAAxxxxxxxxxxUGAAUCAACACAACCACCCACAGCCUAAUUAUUAGCAUCAUCCCUCUACUAUUUUUUAACCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[84.64990997 512.23248291]
[84.64990997 497.23248291]
[84.64990997 482.23248291]
[84.64990997 467.23248291]
[84.64990997 452.23248291]
[84.64990997 437.23248291]
[84.64990997 422.23248291]
[84.64990997 407.23248291]
[84.64990997 392.23248291]
[84.64990997 377.23248291]
[71.07222748 374.02047729]
[58.55382156 367.84152222]
[47.73411942 359.00723267]
[39.16667175 347.96508789]
[33.29081726 335.27554321]
[30.40915489 321.58370972]
[30.67198181 307.58648682]
[34.06943130 293.99719238]
[40.43182373 281.50909424]
[49.43810654 270.76016235]
[60.63208008 262.30032349]
[73.44549561 256.56347656]
[87.22689056 253.84515381]
[87.85086823 238.85813904]
[88.47484589 223.87112427]
[89.09882355 208.88410950]
[89.72280121 193.89709473]
[75.50744629 186.66355896]
[65.82217407 173.91793823]
[62.63805389 158.17059326]
[66.63939667 142.55087280]
[77.07745361 130.18524170]
[91.90992737 123.57148743]
[92.22198486 108.57472992]
[81.72449493 119.28933716]
[66.96153259 121.94547272]
[53.38772964 115.56176758]
[46.01832199 102.49685669]
[47.57616806 87.57797241]
[57.48567200 76.31734467]
[72.08547211 72.87554932]
[85.98122406 78.52426147]
[94.03851318 91.17555237]
[96.83083344 76.43774414]
[99.62316132 61.69993973]
[102.41548157 46.96213150]
[105.20780945 32.22432709]
[106.76538849 17.30541420]
[107.07744598 2.30866122]
[107.38950348 -12.68809223]
[105.67681122 -27.58999443]
[101.97064972 -42.12493134]
[91.06352997 -53.58552551]
[95.41632080 -67.82991028]
[91.71015930 -82.36484528]
[88.00399780 -96.89978027]
[84.29783630 -111.43472290]
[69.22312927 -111.30565643]
[54.55574036 -114.78863525]
[41.14841080 -121.68116760]
[29.78063011 -131.58253479]
[21.11330032 -143.91706848]
[15.65033245 -157.96766663]
[13.70933437 -172.91744995]
[15.40315342 -187.89724731]
[20.63331223 -202.03616333]
[29.09573936 -214.51217651]
[40.29843521 -224.59992981]
[53.59009552 -231.71296692]
[68.19795990 -235.43772888]
[83.27274323 -235.55764771]
[97.93801117 -232.06578064]
[111.34116364 -225.16511536]
[122.70294189 -215.25686646]
[131.36279297 -202.91708374]
[136.81723022 -188.86315918]
[138.74917603 -173.91221619]
[137.04626465 -158.93344116]
[131.80754089 -144.79769897]
[123.33755493 -132.32682800]
[112.12873840 -122.24584961]
[98.83277130 -115.14088440]
[102.53893280 -100.60594177]
[106.24509430 -86.07100677]
[109.95125580 -71.53607178]
[120.59328461 -61.11511230]
[116.50558472 -45.83109283]
[120.21174622 -31.29615593]
[125.40479279 -45.36855316]
[135.79125977 -56.19081116]
[149.63845825 -61.95753860]
[164.63635254 -61.70671463]
[178.28297424 -55.48018646]
[188.30175781 -44.31666946]
[193.02133179 -30.07849693]
[191.65438843 -15.14091206]
[184.42893982 -1.99584019]
[172.55036926 7.16382599]
[158.00027466 10.81004906]
[143.20594788 8.33455658]
[130.63542175 0.15031615]
[122.38625336 -12.37603664]
[122.07419586 2.62071729]
[121.76214600 17.61747169]
[132.25962830 6.90286827]
[147.02258301 4.24672651]
[160.59638977 10.63043785]
[167.96580505 23.69534874]
[166.40795898 38.61423111]
[156.49845886 49.87486267]
[141.89865112 53.31665421]
[128.00289917 47.66794205]
[119.94561768 35.01665115]
[117.15328979 49.75445938]
[114.36096191 64.49226379]
[111.56864166 79.23007202]
[108.77631378 93.96787262]
[107.21873474 108.88678741]
[106.90667725 123.88354492]
[119.77375031 129.81224060]
[129.37130737 140.17419434]
[134.26835632 153.37564087]
[133.75338745 167.40324402]
[127.93763733 180.13114929]
[117.73312378 189.64312744]
[104.70981598 194.52107239]
[104.08583832 209.50808716]
[103.46186066 224.49510193]
[102.83788300 239.48211670]
[102.21390533 254.46913147]
[117.63777924 259.15283203]
[131.33197021 267.63562012]
[142.38044739 279.34356689]
[150.04576111 293.48724365]
[153.81834412 309.11495972]
[153.45040894 325.17666626]
[148.97209167 340.59469604]
[140.68919373 354.33596802]
[129.16224670 365.48114014]
[115.16857910 373.28631592]
[99.64990997 377.23248291]
[99.64990997 392.23248291]
[99.64990997 407.23248291]
[99.64990997 422.23248291]
[99.64990997 437.23248291]
[99.64990997 452.23248291]
[99.64990997 467.23248291]
[99.64990997 482.23248291]
[99.64990997 497.23248291]
[99.64990997 512.23248291]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[23 130]
[24 129]
[25 128]
[26 127]
[27 126]
[33 119]
[34 118]
[43 117]
[44 116]
[45 115]
[46 114]
[47 113]
[48 104]
[49 103]
[50 102]
[51 88]
[52 87]
[54 85]
[55 84]
[56 83]
[57 82]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
