%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:11 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCAGGCAAAUCAGCCCAAUUAGGUCUCCACCCCUGACUCCCCUCAGCCAUAGAAGGCCCCAxxxxxxxxxxCCCUUAACAGUACAUAGUACAUAAAGCCAUUUACCGUACAUAGCACAUUACAGUCAAAUCCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[144.81805420 104.12509155]
[129.91615295 105.83777618]
[115.01425171 107.55046844]
[85.90075684 137.99919128]
[72.24451447 144.20460510]
[58.58827591 150.41000366]
[44.93203354 156.61541748]
[31.27579308 162.82081604]
[17.61955261 169.02622986]
[8.25652695 181.77943420]
[-6.53145885 180.00047302]
[-20.18770027 186.20587158]
[-33.84394073 192.41128540]
[-47.50018311 198.61668396]
[-39.20386887 209.54112244]
[-38.37003708 226.25068665]
[-47.76893616 244.15731812]
[-60.03130341 252.79643250]
[-72.29367065 261.43554688]
[-73.43118286 277.03170776]
[-84.36460114 288.21179199]
[-99.93150330 289.69692993]
[-112.78166962 280.78585815]
[-116.84764862 265.68612671]
[-110.20960999 251.52737427]
[-96.00183105 244.99491882]
[-80.93278503 249.17318726]
[-68.67041779 240.53407288]
[-56.40805054 231.89495850]
[-61.60370636 217.82281494]
[-66.79888153 203.75192261]
[-81.73319244 205.15422058]
[-96.66749573 206.55651855]
[-109.72038269 216.48397827]
[-124.73757172 209.89489746]
[-126.27067566 193.56758118]
[-112.74256897 184.29814148]
[-98.06980133 191.62222290]
[-83.13549042 190.21990967]
[-68.20118713 188.81761169]
[-53.70558929 184.96044922]
[-40.04934692 178.75503540]
[-26.39310646 172.54963684]
[-12.73686600 166.34422302]
[-4.35062647 154.03486633]
[11.41414547 155.36999512]
[25.07038689 149.16458130]
[38.72662735 142.95916748]
[52.38286972 136.75376892]
[66.03910828 130.54835510]
[79.69535065 124.34295654]
[81.62393188 117.09515381]
[70.99893188 106.50698090]
[85.48109436 102.59955597]
[87.40966797 95.35176086]
[78.64346313 83.17992401]
[69.87725830 71.00808716]
[54.23969269 68.71852112]
[44.86837387 55.99240494]
[47.32314301 40.37992096]
[60.14762497 31.14367676]
[75.73328400 33.76337433]
[84.83341980 46.68478775]
[82.04909515 62.24187851]
[90.81529999 74.41371918]
[99.58150482 86.58555603]
[113.30155945 92.64856720]
[128.20346069 90.93587494]
[143.10536194 89.22318268]
[142.92247009 73.46858215]
[144.39036560 57.78215027]
[147.49279785 42.33638000]
[152.19548035 27.30110741]
[158.44656372 12.84162903]
[166.17718506 -0.88310075]
[175.30216980 -13.72222042]
[185.72106934 -25.53462219]
[197.31918335 -36.19049835]
[209.96888733 -45.57277679]
[223.53097534 -53.57839966]
[237.85621643 -60.11944580]
[252.78701782 -65.12412262]
[268.15914917 -68.53753662]
[283.80352783 -70.32228088]
[299.54806519 -70.45888519]
[315.21966553 -68.94599152]
[330.64596558 -65.80037689]
[345.65734863 -61.05678940]
[360.08877563 -54.76752853]
[373.78161621 -47.00189209]
[386.58535767 -37.84540939]
[398.35928345 -27.39889526]
[408.97399902 -15.77733994]
[418.31289673 -3.10864639]
[426.27337646 10.46777821]
[432.76806641 24.80255890]
[437.72561646 39.73799515]
[452.36911011 36.48716736]
[467.01260376 33.23634338]
[481.65609741 29.98551559]
[494.89566040 17.23034668]
[511.41412354 23.07328415]
[525.98681641 19.51852036]
[540.55950928 15.96375942]
[555.13226318 12.40899754]
[566.60626221 0.69237286]
[582.42065430 5.03236151]
[586.30700684 20.96435547]
[574.26733398 32.09888458]
[558.68701172 26.98170090]
[544.11431885 30.53646278]
[529.54156494 34.09122467]
[514.96887207 37.64598465]
[508.38873291 47.84445572]
[496.22750854 50.89788055]
[484.90692139 44.62901688]
[470.26342773 47.87984467]
[455.61993408 51.13066864]
[440.97644043 54.38149643]
[442.70507812 68.57574463]
[443.07492065 82.87063599]
[442.08245850 97.13636017]
[439.73660278 111.24339294]
[436.05853271 125.06363678]
[431.08160400 138.47155762]
[424.85089111 151.34539795]
[417.42282104 163.56822205]
[408.86480713 175.02899170]
[399.25445557 185.62359619]
[388.67895508 195.25573730]
[377.23422241 203.83792114]
[365.02416992 211.29211426]
[352.15957642 217.55056763]
[338.75720215 222.55635071]
[324.93869019 226.26391602]
[310.82949829 228.63949585]
[296.55770874 229.66143799]
[282.25292969 229.32034302]
[268.04498291 227.61921692]
[254.06294250 224.57337952]
[240.43376160 220.21041870]
[227.28121948 214.56983948]
[214.72479248 207.70274353]
[202.87852478 199.67141724]
[191.85002136 190.54869080]
[181.73951721 180.41729736]
[172.63885498 169.36918640]
[164.63076782 157.50457764]
[157.78804016 144.93115234]
[152.17288208 131.76303101]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 69]
[2 68]
[3 67]
[4 51]
[5 50]
[6 49]
[7 48]
[8 47]
[9 46]
[11 44]
[12 43]
[13 42]
[14 41]
[17 29]
[18 28]
[19 27]
[31 40]
[32 39]
[33 38]
[55 66]
[56 65]
[57 64]
[97 119]
[98 118]
[99 117]
[100 116]
[102 113]
[103 112]
[104 111]
[105 110]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
