%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:17 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGACCCAACCCCCUGGUCAACCUCAACCUAGGCCUCCUAUUUAUUCUAGCCACCUCUAGCCUAGxxxxxxxxxxAUCAUGACCCUUGGCCAUAAUAUGAUUUAUCUCCACACUAGCAGAGACCAACCGAACCCCCUCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[95.27130890 435.66561890]
[95.27130890 420.66561890]
[95.27130890 405.66561890]
[95.27130890 390.66561890]
[95.27130890 375.66561890]
[95.27130890 360.66561890]
[95.27130890 345.66561890]
[95.27130890 330.66561890]
[95.27130890 315.66561890]
[95.27130890 300.66561890]
[80.22831726 297.06762695]
[66.46909332 289.98306274]
[54.78900528 279.81686401]
[45.86432648 267.15206909]
[40.21311951 252.71669006]
[38.16514206 237.34162903]
[39.84260559 221.91297913]
[45.15291214 207.32093811]
[53.79372787 194.40837097]
[65.27021790 183.92224121]
[78.92337036 176.47030640]
[93.96782684 172.48596191]
[93.66382599 157.48904419]
[93.35982513 142.49212646]
[93.05581665 127.49520874]
[92.75181580 112.49829102]
[89.88138580 97.77549744]
[84.52953339 83.76272583]
[73.06518555 77.76910400]
[68.91392517 65.94150543]
[73.79551697 54.83347702]
[68.72875214 40.71512604]
[63.66198730 26.59677124]
[47.49338913 25.04424286]
[33.66252136 16.63840485]
[24.90148354 3.09886932]
[22.91509438 -12.84665012]
[28.04934311 -28.01181030]
[39.23239899 -39.38835907]
[33.88054276 -53.40112305]
[28.52868271 -67.41388702]
[23.17682266 -81.42665863]
[8.62105274 -77.73259735]
[-6.26515627 -75.75337982]
[-21.28048325 -75.51576233]
[-36.22186661 -77.02296448]
[-50.88723373 -80.25460052]
[-65.07826233 -85.16696167]
[-78.60302734 -91.69361877]
[-91.27861786 -99.74630737]
[-102.93362427 -109.21612549]
[-113.41041565 -119.97499847]
[-122.56731415 -131.87742615]
[-130.28047180 -144.76245117]
[-136.44558716 -158.45579529]
[-140.97926331 -172.77229309]
[-143.82022095 -187.51832581]
[-144.93002319 -202.49447632]
[-144.29365540 -217.49819946]
[-141.91972351 -232.32658386]
[-137.84034729 -246.77909851]
[-132.11067200 -260.66027832]
[-124.80820465 -273.78240967]
[-116.03170013 -285.96804810]
[-105.89984894 -297.05236816]
[-94.54966736 -306.88546753]
[-82.13465118 -315.33438110]
[-68.82271576 -322.28482056]
[-54.79387283 -327.64282227]
[-40.23785400 -331.33590698]
[-25.35151482 -333.31411743]
[-10.33617115 -333.55075073]
[4.60510921 -332.04254150]
[19.27026367 -328.80993652]
[33.46096039 -323.89660645]
[46.98529053 -317.36904907]
[59.66034698 -309.31552124]
[71.31472015 -299.84494019]
[81.79079437 -289.08535767]
[90.94689178 -277.18231201]
[98.65919495 -264.29678345]
[104.82338715 -250.60302734]
[109.35612488 -236.28622437]
[112.19609070 -221.53999329]
[113.30489349 -206.56378174]
[112.66751862 -191.56010437]
[110.29260254 -176.73187256]
[106.21225739 -162.27963257]
[100.48165894 -148.39883423]
[93.17832184 -135.27717590]
[84.40100098 -123.09214020]
[74.26840210 -112.00849915]
[62.91756821 -102.17615509]
[50.50199509 -93.72808075]
[37.18959045 -86.77851105]
[42.54144669 -72.76574707]
[47.89330673 -58.75298309]
[53.24516678 -44.74021530]
[67.14041138 -44.25194931]
[79.83560181 -38.47640610]
[89.39272308 -28.25885773]
[94.33895111 -15.12539959]
[93.89354706 -1.05506635]
[88.09090424 11.81837463]
[77.78034210 21.53000832]
[82.84710693 35.64836121]
[87.91387177 49.76671600]
[101.89459991 60.33209229]
[98.54229736 78.41086578]
[103.89415741 92.42363739]
[111.23656464 87.94346619]
[120.90019989 87.32501984]
[135.77021790 89.29547882]
[150.64022827 91.26593018]
[159.93667603 79.04006195]
[174.10676575 73.11518097]
[189.33880615 75.08504486]
[201.53546143 84.41976929]
[207.41589355 98.60835266]
[205.39830017 113.83415222]
[196.02539062 126.00149536]
[181.81845093 131.83743286]
[166.59904480 129.77210999]
[154.46115112 120.36111450]
[148.66976929 106.13594055]
[133.79975891 104.16548920]
[118.92974854 102.19503784]
[107.74873352 112.19428253]
[108.05273438 127.19120026]
[108.35674286 142.18812561]
[108.66074371 157.18504333]
[108.96475220 172.18196106]
[123.21493530 175.22863770]
[136.41738892 181.37889099]
[147.90609741 190.31875610]
[157.10227966 201.59361267]
[163.54364014 214.63131714]
[166.90754700 228.77127075]
[167.02720642 243.29783630]
[163.89994812 257.47659302]
[157.68713379 270.59143066]
[148.70591736 281.98080444]
[137.41297913 291.07095337]
[124.38134003 297.40493774]
[110.27130890 300.66561890]
[110.27130890 315.66561890]
[110.27130890 330.66561890]
[110.27130890 345.66561890]
[110.27130890 360.66561890]
[110.27130890 375.66561890]
[110.27130890 390.66561890]
[110.27130890 405.66561890]
[110.27130890 420.66561890]
[110.27130890 435.66561890]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 154]
[2 153]
[3 152]
[4 151]
[5 150]
[6 149]
[7 148]
[8 147]
[9 146]
[10 145]
[22 132]
[23 131]
[24 130]
[25 129]
[26 128]
[27 110]
[28 109]
[31 107]
[32 106]
[33 105]
[39 98]
[40 97]
[41 96]
[42 95]
[112 127]
[113 126]
[114 125]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
