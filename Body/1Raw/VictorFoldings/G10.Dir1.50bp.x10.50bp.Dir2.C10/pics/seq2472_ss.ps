%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:28 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGACCCAAUUGGACCAAUCUAUCACCCUAUAGAAGAACUAAUGUUAGUAUAAGUAACAUGAAxxxxxxxxxxUCCUAGCCCUAAGUCUGGCCUAUGAGUGACUACAAAAAGGAUUAGACUGAACCGAAUUGGCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[105.89341736 268.17803955]
[105.89341736 253.17802429]
[105.89341736 238.17802429]
[105.89341736 223.17802429]
[105.89341736 208.17802429]
[105.89341736 193.17802429]
[105.89341736 178.17802429]
[105.89341736 163.17802429]
[105.89341736 148.17802429]
[105.89341736 133.17802429]
[93.38249207 138.00779724]
[78.38362122 137.70489502]
[69.11867523 149.50152588]
[69.59803009 165.53741455]
[57.26687622 175.80007935]
[41.58460999 172.41687012]
[34.58132935 157.98310852]
[41.62934875 143.57113647]
[57.32203293 140.23658752]
[66.58698273 128.43994141]
[62.72494125 122.01074219]
[52.88260651 133.33012390]
[39.07585526 127.46721649]
[40.38547897 112.52449799]
[55.00085449 109.15233612]
[51.13881302 102.72313690]
[36.37275696 105.36199951]
[21.60670280 108.00086212]
[6.84064722 110.63973236]
[-7.92540836 113.27859497]
[-16.75365067 126.38728333]
[-32.28118515 129.33197021]
[-45.29580307 120.36563110]
[-48.07616043 104.80783081]
[-38.97272110 91.88874054]
[-23.38639641 89.27301788]
[-10.56427288 98.51253510]
[4.20178318 95.87367249]
[18.96783829 93.23480988]
[33.73389435 90.59594727]
[48.49995041 87.95708466]
[55.68245697 74.78849792]
[49.90618515 60.94528198]
[35.56460953 54.86605835]
[29.90385056 40.74478149]
[35.78784561 27.10974503]
[30.01157188 13.26652622]
[24.23530006 -0.57669121]
[16.24538231 -13.27162075]
[6.26265669 -24.46738625]
[-3.72006989 -35.66315079]
[-13.70279598 -46.85891724]
[-23.68552208 -58.05468369]
[-33.66824722 -69.25045013]
[-48.62747192 -74.40139008]
[-51.32266235 -89.05011749]
[-66.37673950 -96.84827423]
[-63.05072403 -113.47277069]
[-46.15518570 -114.87886047]
[-40.12689972 -99.03284454]
[-25.88170624 -94.68270111]
[-22.47248268 -79.23317719]
[-12.48975658 -68.03740692]
[-2.50703049 -56.84164429]
[7.47569609 -45.64587784]
[17.45842171 -34.45011139]
[27.44114876 -23.25434685]
[25.03013802 -38.05931473]
[27.73361778 -52.81367493]
[35.23725510 -65.80195618]
[46.66860962 -75.51401520]
[60.69856644 -80.82064819]
[75.69586945 -81.10485077]
[89.91680908 -76.33358002]
[101.70790863 -67.06158447]
[109.69824219 -54.36692047]
[112.95877838 -39.72557831]
[111.11041260 -24.83989525]
[104.36805725 -11.44061947]
[93.51563263 -1.08567202]
[79.81494904 5.02098513]
[64.85897064 6.16933632]
[50.38661575 2.22586393]
[38.07851791 -6.35296345]
[43.85478973 7.49025393]
[49.63106155 21.33347130]
[63.46142197 26.74242401]
[69.51658630 40.69913101]
[63.74940491 55.16901016]
[69.52567291 69.01222992]
[115.63101959 64.72882843]
[133.66967773 101.36647034]
[148.53271484 99.34413910]
[163.39576721 97.32180786]
[178.25880432 95.29946899]
[193.12185669 93.27713776]
[207.98490906 91.25479889]
[222.23890686 79.64431763]
[238.21452332 86.84012604]
[253.03227234 84.50902557]
[267.85003662 82.17791748]
[273.44192505 67.94142151]
[285.33047485 58.47784042]
[300.26046753 56.25038528]
[314.20748901 61.75823593]
[323.46267700 73.42903900]
[338.28042603 71.09793091]
[350.68865967 60.37563324]
[366.08761597 66.01517487]
[368.63613892 82.21508026]
[355.71255493 92.31027985]
[340.61154175 85.91568756]
[325.79376221 88.24679565]
[320.56903076 102.19554901]
[308.98678589 111.71961212]
[294.09405518 114.18382263]
[279.87408447 108.82759094]
[270.18112183 96.99567413]
[255.36337280 99.32678223]
[240.54562378 101.65788269]
[233.14048767 111.27408600]
[220.76753235 113.30603790]
[210.00723267 106.11785126]
[195.14419556 108.14018250]
[180.28114319 110.16251373]
[165.41809082 112.18485260]
[150.55505371 114.20718384]
[135.69200134 116.22952271]
[149.70510864 121.58048248]
[164.66058350 120.42558289]
[178.49938965 126.21243286]
[188.18098450 137.66960144]
[191.57824707 152.27981567]
[187.94474792 166.83308411]
[178.07881165 178.13191223]
[164.14808655 183.69380188]
[149.21328735 182.29678345]
[136.55574036 174.24778748]
[128.95643616 161.31524658]
[128.08480835 146.34176636]
[120.89341736 133.17802429]
[120.89341736 148.17802429]
[120.89341736 163.17802429]
[120.89341736 178.17802429]
[120.89341736 193.17802429]
[120.89341736 208.17802429]
[120.89341736 223.17802429]
[120.89341736 238.17802429]
[120.89341736 253.17802429]
[120.89341736 268.17803955]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[12 20]
[13 19]
[26 41]
[27 40]
[28 39]
[29 38]
[30 37]
[42 90]
[43 89]
[46 86]
[47 85]
[48 84]
[49 67]
[50 66]
[51 65]
[52 64]
[53 63]
[54 62]
[56 60]
[92 128]
[93 127]
[94 126]
[95 125]
[96 124]
[97 123]
[99 120]
[100 119]
[101 118]
[106 113]
[107 112]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
