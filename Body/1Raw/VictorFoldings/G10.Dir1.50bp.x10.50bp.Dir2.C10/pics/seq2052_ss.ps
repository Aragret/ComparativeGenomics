%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:00 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGAAUUAUAACCAAGCAUAAUAUAGCAAGGACUAACCCCUAUACCUUCUGCAUAAUGAAUUAxxxxxxxxxxCCUUAAUGACAUUAACACUAUUCUCACCAGACCUCCUAGGCGACCCAGACAAUUAUACCCCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[92.50000000 251.81280518]
[92.50000000 236.81280518]
[92.50000000 221.81280518]
[92.50000000 206.81280518]
[92.50000000 191.81280518]
[92.50000000 176.81280518]
[92.50000000 161.81280518]
[92.50000000 146.81280518]
[92.50000000 131.81280518]
[92.50000000 116.81280518]
[85.67188263 113.71010590]
[65.18751526 104.40199280]
[53.88851166 114.26771545]
[42.58950806 124.13343811]
[31.29050255 133.99916077]
[19.99149895 143.86488342]
[21.51191902 159.30729675]
[13.63612080 172.67709351]
[-0.60749352 178.83331299]
[-15.74196243 175.40876770]
[-25.94777298 163.72027588]
[-27.30058479 148.26228333]
[-19.28021240 134.97871399]
[-4.97065258 128.97735596]
[10.12577534 132.56588745]
[21.42477989 122.70015717]
[32.72378540 112.83443451]
[44.02278900 102.96871185]
[55.32179642 93.10298920]
[58.57262039 78.45948792]
[52.50960541 64.73943329]
[46.44659424 51.01938248]
[40.38357925 37.29932785]
[21.43239403 45.99552155]
[8.57128429 32.31997681]
[-5.75131321 27.86316109]
[-20.07390976 23.40634537]
[-34.39650726 18.94952965]
[-44.41282654 30.42094040]
[-58.23176193 36.82069778]
[-73.45909882 37.04001236]
[-87.45661163 31.04088020]
[-97.79914093 19.86268997]
[-102.69478607 5.44213009]
[-101.29534912 -9.72235012]
[-93.84328461 -23.00341225]
[-81.62970734 -32.10003281]
[-66.77069855 -35.43616867]
[-51.84067154 -32.43381119]
[-39.42634201 -23.61313629]
[-31.67856407 -10.50238419]
[-29.93969154 4.62693262]
[-15.61709499 9.08374786]
[-1.29449737 13.54056358]
[13.02810001 17.99737930]
[23.55228806 12.07555199]
[36.49398041 15.53462982]
[37.42960739 0.56383866]
[29.47761154 -9.64496231]
[30.60400009 -22.13296509]
[39.65596390 -30.21809387]
[40.90283585 -45.16617966]
[42.14971161 -60.11426544]
[43.39658737 -75.06235504]
[44.64345932 -90.01044464]
[36.39806366 -106.44191742]
[46.88512039 -120.47835541]
[47.82074738 -135.44914246]
[48.75637817 -150.41993713]
[49.69200516 -165.39073181]
[36.17366791 -172.40318298]
[26.68134499 -184.31181335]
[22.85964203 -199.05340576]
[25.37069321 -214.07388306]
[33.77944183 -226.77084351]
[46.62901688 -234.94447327]
[61.69316101 -237.17863464]
[76.36191559 -233.08625793]
[88.09382629 -223.37635803]
[94.85627747 -209.73124695]
[95.47762299 -194.51499939]
[89.85021973 -180.36395264]
[78.94904327 -169.72984314]
[64.66279602 -164.45509338]
[63.72716904 -149.48431396]
[62.79153824 -134.51351929]
[61.85591125 -119.54272461]
[69.63871002 -110.22954559]
[68.94088745 -97.71028137]
[59.59154892 -88.76356506]
[58.34467316 -73.81548309]
[57.09779739 -58.86739349]
[55.85092545 -43.91930389]
[54.60404968 -28.97121811]
[62.94308090 -13.56146622]
[52.40039825 1.49946713]
[51.46477127 16.47025871]
[54.10363388 31.23631477]
[60.16664886 44.95636749]
[66.22966003 58.67642212]
[72.29267120 72.39647675]
[131.08493042 81.68119812]
[146.01924133 83.08350372]
[160.95355225 84.48580933]
[167.25811768 71.67748260]
[177.54183960 61.81885910]
[190.54998779 56.08444214]
[204.70510864 55.14725876]
[218.29826355 59.09992981]
[229.69540405 67.44598389]
[237.53372192 79.16210175]
[240.88470459 92.82353210]
[255.78660583 94.53622437]
[270.68850708 96.24891663]
[287.11441040 92.05062103]
[295.69580078 106.67240143]
[284.02099609 118.96611786]
[268.97583008 111.15081787]
[254.07391357 109.43812561]
[239.17201233 107.72544098]
[231.71008301 121.67192841]
[219.44613647 131.72171021]
[204.23156738 136.31956482]
[188.37785339 134.73617554]
[174.30538940 127.18370819]
[164.17396545 114.78783417]
[159.55123901 99.42012024]
[144.61694336 98.01781464]
[129.68263245 96.61550903]
[124.13697052 101.66483307]
[136.57075500 110.05535889]
[149.00454712 118.44588470]
[162.37242126 125.25031281]
[167.19168091 139.45504761]
[160.72409058 152.98908997]
[146.64447021 158.16249084]
[132.95274353 152.03578186]
[127.42842102 138.09095764]
[120.23703766 124.92722321]
[113.04565430 111.76348114]
[107.50000000 116.81280518]
[107.50000000 131.81280518]
[107.50000000 146.81280518]
[107.50000000 161.81280518]
[107.50000000 176.81280518]
[107.50000000 191.81280518]
[107.50000000 206.81280518]
[107.50000000 221.81280518]
[107.50000000 236.81280518]
[107.50000000 251.81280518]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[12 29]
[13 28]
[14 27]
[15 26]
[16 25]
[30 101]
[31 100]
[32 99]
[33 98]
[35 55]
[36 54]
[37 53]
[38 52]
[57 97]
[58 96]
[61 94]
[62 93]
[63 92]
[64 91]
[65 90]
[67 87]
[68 86]
[69 85]
[70 84]
[102 129]
[103 128]
[104 127]
[112 120]
[113 119]
[114 118]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
