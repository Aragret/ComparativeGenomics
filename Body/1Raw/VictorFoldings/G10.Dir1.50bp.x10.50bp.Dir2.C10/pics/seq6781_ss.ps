%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:04 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCUCAACACCACCUUCUUCGACCCCGCCGGAGGAGGAGACCCCAUUCUAUACCAACACCUAxxxxxxxxxxUCAUCCACAACCUUAACAAUGAACAAGAUAUUCGAAAAAUAGGAGGACUACUCAAAACCACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[111.52982330 264.00329590]
[111.52982330 249.00329590]
[111.52982330 234.00329590]
[111.52982330 219.00329590]
[111.52982330 204.00329590]
[111.52982330 189.00329590]
[111.52982330 174.00329590]
[111.52982330 159.00329590]
[111.52982330 144.00329590]
[111.52982330 129.00329590]
[105.72915649 124.24911499]
[98.53777313 137.41285706]
[98.32630920 152.41136169]
[87.97225952 163.26464844]
[73.00031281 164.18162537]
[61.39916611 154.67303467]
[59.35892868 139.81243896]
[67.96822357 127.52910614]
[82.63249969 124.37702942]
[94.12781525 114.74075317]
[88.32714081 109.98657990]
[73.61917877 112.93206024]
[58.91122055 115.87754059]
[44.20325851 118.82302856]
[29.49529648 121.76850891]
[14.78733540 124.71398926]
[0.07937405 127.65946960]
[-14.62858772 130.60494995]
[-29.33654976 133.55043030]
[-36.68097305 147.35598755]
[-51.20044708 153.16279602]
[-66.03932190 148.22903442]
[-74.19112396 134.88429260]
[-71.80683136 119.42955017]
[-60.01223373 109.16205597]
[-44.37637329 108.92980957]
[-32.28203201 118.84247589]
[-17.57406998 115.89699554]
[-2.86610842 112.95150757]
[11.84185314 110.00602722]
[26.54981422 107.06054688]
[41.25777435 104.11506653]
[55.96573639 101.16957855]
[70.67369843 98.22409821]
[85.38166046 95.27861786]
[97.46164703 86.38626862]
[104.64415741 73.21768188]
[104.45953369 57.39755630]
[117.34639740 49.92909241]
[124.52890778 36.76051331]
[131.57403564 23.51792526]
[138.48103333 10.20277023]
[145.24916077 -3.18351436]
[151.87765503 -16.63948059]
[158.50614929 -30.09544563]
[145.75399780 -38.01689529]
[133.83970642 -47.15014648]
[122.87799835 -57.40723801]
[112.97447205 -68.68938446]
[104.22448730 -80.88793182]
[96.71231842 -93.88539886]
[90.51031494 -107.55661011]
[85.67820740 -121.76989746]
[82.26253510 -136.38838196]
[80.29618073 -151.27125549]
[79.79810333 -166.27522278]
[80.77307892 -181.25575256]
[83.21173096 -196.06857300]
[87.09056854 -210.57102966]
[92.37223053 -224.62345886]
[99.00585938 -238.09053040]
[106.92756653 -250.84251404]
[116.06105804 -262.75662231]
[126.31836700 -273.71813965]
[137.60070801 -283.62142944]
[149.79943848 -292.37118530]
[162.79705811 -299.88308716]
[176.46838379 -306.08480835]
[190.68177795 -310.91662598]
[205.30032349 -314.33203125]
[220.18324280 -316.29806519]
[235.18721008 -316.79586792]
[250.16772461 -315.82058716]
[264.98049927 -313.38162231]
[279.48287964 -309.50250244]
[293.53521729 -304.22055054]
[307.00213623 -297.58666992]
[319.75396729 -289.66470337]
[331.66790771 -280.53097534]
[342.62918091 -270.27343750]
[352.53225708 -258.99090576]
[361.28176880 -246.79199219]
[368.79342651 -233.79421997]
[374.99487305 -220.12277222]
[379.82641602 -205.90928650]
[383.24151611 -191.29067993]
[385.20724487 -176.40771484]
[385.70474243 -161.40373230]
[384.72915649 -146.42324829]
[382.28991699 -131.61051941]
[378.41049194 -117.10820770]
[373.12826538 -103.05599213]
[366.49411011 -89.58919525]
[358.57189941 -76.83751678]
[349.43792725 -64.92376709]
[339.18017578 -53.96268463]
[327.89743042 -44.05982971]
[315.69836426 -35.31057739]
[302.70043945 -27.79918861]
[289.02886963 -21.59800529]
[274.81527710 -16.76675034]
[260.19659424 -13.35195160]
[245.31359863 -11.38649654]
[230.30960083 -10.88931274]
[215.32913208 -11.86519051]
[200.51646423 -14.30473042]
[186.01423645 -18.18443680]
[171.96211243 -23.46694756]
[165.33361816 -10.01098156]
[158.70512390 3.44498420]
[158.56980896 10.88321877]
[151.79620361 17.10976982]
[144.88919067 30.42492485]
[144.59918213 37.85873413]
[137.69749451 43.94301987]
[130.51498413 57.11160278]
[131.21334839 71.98983002]
[117.81274414 80.40019226]
[110.63023376 93.56877136]
[123.24683380 85.45573425]
[135.93215942 77.45057678]
[150.80680847 75.51549530]
[165.11805725 80.00860596]
[176.21743774 90.09839630]
[182.05084229 103.91763306]
[181.53875732 118.90888977]
[174.77592468 132.29785156]
[163.01390076 141.60670471]
[148.42939758 145.11274719]
[133.72120667 142.16703796]
[126.52982330 129.00329590]
[126.52982330 144.00329590]
[126.52982330 159.00329590]
[126.52982330 174.00329590]
[126.52982330 189.00329590]
[126.52982330 204.00329590]
[126.52982330 219.00329590]
[126.52982330 234.00329590]
[126.52982330 249.00329590]
[126.52982330 264.00329590]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[21 45]
[22 44]
[23 43]
[24 42]
[25 41]
[26 40]
[27 39]
[28 38]
[29 37]
[46 129]
[47 128]
[49 126]
[50 125]
[51 123]
[52 122]
[53 120]
[54 119]
[55 118]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
