%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:12 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCUCCUCCUAGCAGCAGCAGGCAAAUCAGCCCAAUUAGGUCUCCACCCCUGACUCCCCUCAxxxxxxxxxxACCGCACAAUCCCCUAUCUAGGCCUUCUUACGAGCCAAAACCUGCCCCUACUCCUCCUAGCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[92.50000000 315.82177734]
[92.50000000 300.82177734]
[92.50000000 285.82177734]
[92.50000000 270.82177734]
[92.50000000 255.82177734]
[92.50000000 240.82177734]
[92.50000000 225.82177734]
[92.50000000 210.82177734]
[92.50000000 195.82177734]
[92.50000000 180.82177734]
[77.77803040 178.06788635]
[63.81266022 172.65594482]
[51.07939148 164.77024841]
[40.01176071 154.67926025]
[30.98659325 142.72656250]
[24.31117439 129.31913757]
[20.21278954 114.91345215]
[18.83097839 100.00000000]
[20.21278954 85.08654785]
[24.31117439 70.68086243]
[30.98659325 57.27343369]
[40.01176071 45.32074356]
[51.07939148 35.22975922]
[63.81266022 27.34405327]
[77.77803040 21.93211937]
[92.50000000 19.17822075]
[92.50000000 4.17822075]
[92.50000000 -10.82177925]
[92.50000000 -25.82177925]
[92.50000000 -40.82177734]
[77.71820831 -43.60292435]
[63.70289993 -49.05153656]
[50.93086243 -56.98068619]
[39.83630371 -67.11908722]
[30.79607773 -79.12037659]
[24.11689758 -92.57493591]
[20.02492142 -107.02390289]
[18.65810013 -121.97479248]
[20.06152153 -136.91827393]
[24.18593407 -151.34558105]
[30.88946152 -164.76574707]
[39.94248962 -176.72238159]
[51.03553772 -186.80915833]
[63.78981781 -194.68365479]
[77.77018738 -200.07891846]
[92.50000000 -202.81257629]
[92.50000000 -217.81257629]
[92.50000000 -232.81257629]
[92.50000000 -247.81257629]
[92.50000000 -262.81259155]
[92.50000000 -277.81259155]
[77.59819031 -279.69387817]
[63.04969025 -283.42810059]
[49.08395004 -288.95632935]
[35.92123032 -296.19140625]
[23.76912498 -305.01916504]
[12.81928921 -315.30044556]
[3.24441957 -326.87304688]
[-4.80447531 -339.55444336]
[-11.20045280 -353.14471436]
[-15.84263802 -367.42941284]
[-18.65781975 -382.18334961]
[-19.60159492 -397.17376709]
[-18.65908051 -412.16424561]
[-15.84514236 -426.91839600]
[-11.20415878 -441.20352173]
[-4.80932522 -454.79428101]
[3.23850226 -467.47640991]
[12.81239796 -479.04980469]
[23.76136780 -489.33200073]
[35.91273117 -498.16076660]
[49.07484436 -505.39694214]
[63.04011536 -510.92636108]
[77.58830261 -514.66180420]
[92.48995209 -516.54437256]
[107.51004791 -516.54437256]
[122.41169739 -514.66180420]
[136.95988464 -510.92636108]
[150.92515564 -505.39694214]
[164.08726501 -498.16076660]
[176.23863220 -489.33200073]
[187.18760681 -479.04980469]
[196.76150513 -467.47640991]
[204.80932617 -454.79428101]
[211.20416260 -441.20352173]
[215.84513855 -426.91839600]
[218.65908813 -412.16424561]
[219.60159302 -397.17376709]
[218.65782166 -382.18334961]
[215.84263611 -367.42941284]
[211.20045471 -353.14471436]
[204.80447388 -339.55444336]
[196.75558472 -326.87304688]
[187.18070984 -315.30044556]
[176.23088074 -305.01916504]
[164.07876587 -296.19140625]
[150.91604614 -288.95632935]
[136.95030212 -283.42810059]
[122.40180969 -279.69387817]
[107.50000000 -277.81259155]
[107.50000000 -262.81259155]
[107.50000000 -247.81257629]
[107.50000000 -232.81257629]
[107.50000000 -217.81257629]
[107.50000000 -202.81257629]
[122.22981262 -200.07891846]
[136.21018982 -194.68365479]
[148.96446228 -186.80915833]
[160.05751038 -176.72238159]
[169.11053467 -164.76574707]
[175.81407166 -151.34558105]
[179.93847656 -136.91827393]
[181.34190369 -121.97479248]
[179.97508240 -107.02390289]
[175.88310242 -92.57493591]
[169.20391846 -79.12037659]
[160.16369629 -67.11908722]
[149.06913757 -56.98068619]
[136.29710388 -49.05153656]
[122.28179169 -43.60292435]
[107.50000000 -40.82177734]
[107.50000000 -25.82177925]
[107.50000000 -10.82177925]
[107.50000000 4.17822075]
[107.50000000 19.17822075]
[122.22196960 21.93211937]
[136.18733215 27.34405327]
[148.92060852 35.22975922]
[159.98823547 45.32074356]
[169.01341248 57.27343369]
[175.68882751 70.68086243]
[179.78721619 85.08654785]
[181.16902161 100.00000000]
[179.78721619 114.91345215]
[175.68882751 129.31913757]
[169.01341248 142.72656250]
[159.98823547 154.67926025]
[148.92060852 164.77024841]
[136.18733215 172.65594482]
[122.22196960 178.06788635]
[107.50000000 180.82177734]
[107.50000000 195.82177734]
[107.50000000 210.82177734]
[107.50000000 225.82177734]
[107.50000000 240.82177734]
[107.50000000 255.82177734]
[107.50000000 270.82177734]
[107.50000000 285.82177734]
[107.50000000 300.82177734]
[107.50000000 315.82177734]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[26 125]
[27 124]
[28 123]
[29 122]
[30 121]
[46 105]
[47 104]
[48 103]
[49 102]
[50 101]
[51 100]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
