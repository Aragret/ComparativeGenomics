%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:33 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGACCUACUCAUGCACCUAAUUGGAAGCGCCACCCUAGCAAUAUCAACCAUUAACCUUCCCUxxxxxxxxxxCAUAAUAUUUCGCCCACUAAGCCAAUCACUUUAUUGACUCCUAGCCGCAGACCUCCUCAUCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[97.07028198 401.25897217]
[97.07028198 386.25897217]
[97.07028198 371.25897217]
[97.07028198 356.25897217]
[97.07028198 341.25897217]
[97.07028198 326.25897217]
[97.07028198 311.25897217]
[97.07028198 296.25897217]
[97.07028198 281.25897217]
[97.07028198 266.25897217]
[81.53824615 261.94635010]
[67.82253265 253.45101929]
[57.02389526 241.44563293]
[50.01151276 226.88488770]
[47.35308075 210.92961121]
[49.26882172 194.85423279]
[55.61328888 179.94497681]
[65.88636780 167.39697266]
[79.27269745 158.21842957]
[94.70635986 153.14961243]
[94.08238220 138.16259766]
[93.45840454 123.17559052]
[85.67667389 120.08354950]
[79.25466156 114.40251923]
[75.04328918 106.70433807]
[73.66038513 97.83599854]
[75.40364075 88.82688904]
[80.19973755 80.76932526]
[87.59754944 74.68623352]
[96.80794525 71.40200043]
[89.35303497 58.38568878]
[81.89812469 45.36938095]
[76.29798126 41.66183090]
[73.83036804 36.45201492]
[74.41677094 31.65288544]
[67.50976562 18.33773041]
[60.60277176 5.02257395]
[46.57189941 10.37349987]
[32.02251434 14.09011459]
[17.14430237 16.12396431]
[2.13122773 16.44853401]
[-12.82098293 15.05959129]
[-27.51739693 11.97524643]
[-41.76641464 7.23570728]
[-55.38227463 0.90276504]
[-68.18746185 -6.94101763]
[-80.01503754 -16.19338036]
[-90.71080017 -26.73370171]
[-100.13531494 -38.42456436]
[-108.16571808 -51.11355591]
[-114.69730377 -64.63524628]
[-119.64492035 -78.81336212]
[-122.94407654 -93.46304321]
[-124.55175018 -108.39331818]
[-124.44699097 -123.40953827]
[-122.63116455 -138.31593323]
[-119.12793732 -152.91816711]
[-113.98297882 -167.02586365]
[-107.26337433 -180.45510864]
[-99.05671692 -193.03082275]
[-89.47000885 -204.58905029]
[-78.62821960 -214.97912598]
[-66.67270660 -224.06556702]
[-53.75933075 -231.72991943]
[-40.05643845 -237.87228394]
[-25.74267960 -242.41255188]
[-11.00466251 -245.29154968]
[3.96547198 -246.47174072]
[18.97255707 -245.93774414]
[33.82094574 -243.69650269]
[48.31705856 -239.77725220]
[62.27190781 -234.23109436]
[75.50356293 -227.13031006]
[87.83952332 -218.56748962]
[99.11896515 -208.65426636]
[109.19483948 -197.51988220]
[117.93577576 -185.30949402]
[125.22783661 -172.18228149]
[130.97593689 -158.30938721]
[135.10514832 -143.87168884]
[137.56164551 -129.05738831]
[138.31338501 -114.05963135]
[137.35057068 -99.07394409]
[134.68576050 -84.29570007]
[130.35369873 -69.91755676]
[124.41085815 -56.12696838]
[116.93470764 -43.10371780]
[108.02272797 -31.01759338]
[97.79109955 -20.02616310]
[86.37321472 -10.27272129]
[73.91792297 -1.88442445]
[80.82492828 11.43073082]
[87.73192596 24.74588776]
[94.91442871 37.91447067]
[102.36933899 50.93077850]
[109.82424927 63.94709015]
[123.21054077 70.71520233]
[138.11244202 69.00251007]
[153.01434326 67.28982544]
[167.87739563 65.26748657]
[182.69514465 62.93638611]
[195.12522888 53.14844513]
[208.90029907 58.81383514]
[223.71804810 56.48273468]
[238.53581238 54.15163040]
[253.35357666 51.82052612]
[262.45260620 38.89833450]
[278.03805542 36.27731323]
[290.86331177 45.51246643]
[293.31939697 61.12474442]
[283.94918823 73.85165405]
[268.31179810 76.14254761]
[255.68467712 66.63828278]
[240.86691284 68.96939087]
[226.04916382 71.30049133]
[211.23139954 73.63159180]
[199.86119080 83.25279999]
[185.02624512 77.75414276]
[170.20849609 80.08525085]
[166.69122314 83.40253448]
[161.03273010 84.50378418]
[154.72703552 82.19172668]
[139.82513428 83.90441895]
[124.92322540 85.61710358]
[127.16928864 101.50186920]
[120.66436768 115.18875885]
[108.44542694 122.55161285]
[109.06939697 137.53862000]
[109.69337463 152.52563477]
[123.32337189 155.48568726]
[135.82952881 161.63850403]
[146.47694397 170.61720276]
[154.64118958 181.88896179]
[159.84500122 194.78668213]
[161.78613281 208.54846191]
[160.35494995 222.36257935]
[155.64054871 235.41540527]
[147.92527771 246.93933105]
[137.66781616 256.25784302]
[125.47588348 262.82534790]
[112.07028198 266.25897217]
[112.07028198 281.25897217]
[112.07028198 296.25897217]
[112.07028198 311.25897217]
[112.07028198 326.25897217]
[112.07028198 341.25897217]
[112.07028198 356.25897217]
[112.07028198 371.25897217]
[112.07028198 386.25897217]
[112.07028198 401.25897217]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[20 129]
[21 128]
[22 127]
[30 96]
[31 95]
[32 94]
[35 93]
[36 92]
[37 91]
[97 124]
[98 123]
[99 122]
[100 119]
[101 118]
[103 116]
[104 115]
[105 114]
[106 113]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
