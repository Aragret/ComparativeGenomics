%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:30 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGUCAAAUUUUAUCUUUUGGCGGUAUGCACUUUUAACAGUCACCCCCCAACUAACACAUUAUxxxxxxxxxxGCUCACAAGAACUGCUAACUCAUGCCCCCAUGUCUAACAACAUGGCUUUCUCAACUUUUACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[95.40299225 239.58944702]
[95.09093475 224.59268188]
[94.77887726 209.59593201]
[94.46681976 194.59918213]
[94.15476227 179.60243225]
[93.84270477 164.60566711]
[93.53065491 149.60891724]
[93.21859741 134.61216736]
[92.90653992 119.61540985]
[79.06332397 113.83914185]
[68.18449402 124.16634369]
[57.30567169 134.49354553]
[46.42684555 144.82075500]
[35.54801941 155.14796448]
[24.66919518 165.47515869]
[26.83068085 180.84095764]
[19.51786232 194.52679443]
[5.54266691 201.27020264]
[-9.72115707 198.47819519]
[-20.40435791 187.22436523]
[-22.39902687 171.83602905]
[-14.93817425 158.23031616]
[-0.89064789 151.63891602]
[14.34199047 154.59634399]
[25.22081566 144.26913452]
[36.09963989 133.94192505]
[46.97846603 123.61472321]
[57.85729218 113.28752136]
[68.73611450 102.96031189]
[72.44227600 88.42537689]
[67.83671570 74.14991760]
[63.23114777 59.87445450]
[58.62558365 45.59899521]
[54.02001953 31.32353401]
[49.41445541 17.04807472]
[38.89705276 14.67638779]
[30.39887238 8.17415905]
[25.43535805 -1.21371615]
[24.85576439 -11.73590755]
[28.69855881 -21.46125031]
[36.19675446 -28.63317680]
[32.49059296 -43.16811371]
[28.78443336 -57.70304871]
[17.87731171 -69.16364288]
[22.23010063 -83.40802765]
[18.52393913 -97.94296265]
[14.81777763 -112.47790527]
[11.11161709 -127.01284027]
[-3.82848144 -125.40840149]
[-18.84484291 -125.94657135]
[-33.63175583 -128.61640930]
[-47.88817596 -133.36354065]
[-61.32386017 -140.09132385]
[-73.66527557 -148.66279602]
[-84.66117096 -158.90345764]
[-94.08767700 -170.60481262]
[-101.75288391 -183.52864075]
[-107.50074005 -197.41183472]
[-111.21422577 -211.97174072]
[-112.81774139 -226.91192627]
[-112.27864075 -241.92826843]
[-109.60789490 -256.71499634]
[-104.85987854 -270.97113037]
[-98.13125610 -284.40640259]
[-89.55902100 -296.74728394]
[-79.31768036 -307.74255371]
[-67.61573792 -317.16833496]
[-54.69143677 -324.83273315]
[-40.80789185 -330.57974243]
[-26.24776077 -334.29232788]
[-11.30746365 -335.89489746]
[3.70883179 -335.35488892]
[18.49541283 -332.68322754]
[32.75124359 -327.93432617]
[46.18609619 -321.20486450]
[58.52645111 -312.63186646]
[69.52108002 -302.38983154]
[78.94613647 -290.68731689]
[86.60974121 -277.76254272]
[92.35588074 -263.87866211]
[96.06756592 -249.31828308]
[97.66923523 -234.37788391]
[97.12827301 -219.36163330]
[94.45569611 -204.57521057]
[89.70591736 -190.31967163]
[82.97563171 -176.88523865]
[74.40186310 -164.54541016]
[64.15916443 -153.55142212]
[52.45605850 -144.12709045]
[39.53080750 -136.46427917]
[25.64655304 -130.71899414]
[29.35271454 -116.18406677]
[33.05887604 -101.64912415]
[36.76503754 -87.11418915]
[47.40707016 -76.69322968]
[43.31937027 -61.40921021]
[47.02553177 -46.87427521]
[50.73168945 -32.33934021]
[68.15068054 -23.73995590]
[73.81417847 -4.84175920]
[63.68991470 12.44250965]
[68.29547882 26.71796989]
[72.90104675 40.99343109]
[77.50660706 55.26889038]
[82.11217499 69.54434967]
[86.71773529 83.81980896]
[106.13524628 72.27752686]
[132.31715393 84.47485352]
[147.18020630 86.49719238]
[162.04325867 88.51952362]
[176.90629578 90.54185486]
[191.76934814 92.56419373]
[206.63240051 94.58652496]
[219.05906677 84.82162476]
[234.74070740 86.78671265]
[244.37368774 99.31593323]
[242.24291992 114.97592163]
[229.61254883 124.47589111]
[213.97596741 122.17967224]
[204.61006165 109.44957733]
[189.74700928 107.42723846]
[174.88397217 105.40490723]
[160.02091980 103.38256836]
[145.15786743 101.36023712]
[130.29483032 99.33789825]
[124.69693756 104.32926178]
[136.77093506 113.22975159]
[148.84492493 122.13024139]
[160.91891479 131.03073120]
[175.24664307 135.47105408]
[184.52125549 147.26010132]
[185.46417236 162.23042297]
[177.74206543 175.09002686]
[164.08473206 181.29299927]
[149.32002258 178.64660645]
[138.66729736 168.08631897]
[135.89222717 153.34584045]
[128.42854309 140.33454895]
[120.96485901 127.32327271]
[113.50117493 114.31198883]
[107.90328979 119.30335236]
[108.21534729 134.30010986]
[108.52740479 149.29685974]
[108.83946228 164.29360962]
[109.15151978 179.29037476]
[109.46357727 194.28712463]
[109.77562714 209.28387451]
[110.08768463 224.28062439]
[110.39974213 239.27738953]
[112.99073792 258.48510742]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 149]
[2 148]
[3 147]
[4 146]
[5 145]
[6 144]
[7 143]
[8 142]
[9 141]
[10 29]
[11 28]
[12 27]
[13 26]
[14 25]
[15 24]
[30 106]
[31 105]
[32 104]
[33 103]
[34 102]
[35 101]
[41 98]
[42 97]
[43 96]
[45 94]
[46 93]
[47 92]
[48 91]
[108 125]
[109 124]
[110 123]
[111 122]
[112 121]
[113 120]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
