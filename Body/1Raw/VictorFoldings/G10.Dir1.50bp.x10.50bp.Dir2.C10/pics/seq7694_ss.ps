%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:11 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCUCCCAUCCCUACGCAUCCUUUACAUAACAGACGAGGUCAACGAUCCCUCCCUUACCAUCxxxxxxxxxxCCAGAACGCCUGAACGCAGGCACAUACUUCCUAUUCUACACCCUAGUAGGCUCCCUUCCCCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[12.32621765 305.45825195]
[5.97908831 319.04919434]
[-0.36804110 332.64013672]
[-6.71517086 346.23107910]
[-5.54411793 362.00891113]
[-17.94004631 370.26663208]
[-24.28717422 383.85760498]
[-30.63430405 397.44854736]
[-28.67618561 413.73037720]
[-41.95811462 423.34921265]
[-56.81678391 416.41006470]
[-57.96686554 400.05130005]
[-44.22525406 391.10140991]
[-37.87812424 377.51046753]
[-31.53099632 363.91952515]
[-33.15603638 349.11383057]
[-20.30612183 339.88397217]
[-13.95899200 326.29299927]
[-7.61186266 312.70205688]
[-1.26473296 299.11111450]
[-14.78087139 291.63803101]
[-27.74832916 283.24887085]
[-40.10511780 273.98373413]
[-51.79217148 263.88690186]
[-62.75362396 253.00666809]
[-72.93707275 241.39501953]
[-82.29383850 229.10746765]
[-90.77919769 216.20274353]
[-98.35258484 202.74255371]
[-104.97779846 188.79122925]
[-110.62317657 174.41545105]
[-115.26171875 159.68395996]
[-118.87125397 144.66716003]
[-121.43453217 129.43684387]
[-122.93930817 114.06581116]
[-123.37837219 98.62753296]
[-122.74963379 83.19582367]
[-121.05610657 67.84444427]
[-118.30587006 52.64677048]
[-114.51207733 37.67545700]
[-109.69287109 23.00207329]
[-103.87127686 8.69675636]
[-97.07513428 -5.17210913]
[-89.33692169 -18.53822708]
[-101.77635956 -26.92037010]
[-114.21580505 -35.30251312]
[-126.65524292 -43.68465424]
[-140.78353882 -37.48831940]
[-156.01541138 -39.93652725]
[-167.49041748 -50.24806976]
[-171.54692078 -65.13256836]
[-166.89050293 -79.84043884]
[-155.00701904 -89.67844391]
[-139.68844604 -91.50732422]
[-125.82287598 -84.74347687]
[-117.83477020 -71.54523468]
[-118.27310181 -56.12409592]
[-105.83365631 -47.74195480]
[-93.39421844 -39.35980988]
[-80.95478058 -30.97766685]
[-72.66753387 -41.72404480]
[-63.74302673 -51.94736862]
[-54.21419907 -61.60990524]
[-44.11622238 -70.67599487]
[-33.48636246 -79.11217499]
[-22.36384583 -86.88732147]
[-10.78972912 -93.97272491]
[1.19327617 -100.34223938]
[13.54094315 -105.97235870]
[26.20770073 -110.84230804]
[39.14680099 -114.93410492]
[52.31048965 -118.23265839]
[65.65018463 -120.72578430]
[79.11665344 -122.40428925]
[92.66019440 -123.26197052]
[106.23082733 -123.29567719]
[119.77845764 -122.50526428]
[133.25309753 -120.89366913]
[146.60501099 -118.46682739]
[159.78491211 -115.23369598]
[172.74418640 -111.20621490]
[185.43496704 -106.39923859]
[197.81045532 -100.83052063]
[209.82495117 -94.52059937]
[221.43411255 -87.49276733]
[232.59510803 -79.77296448]
[243.26673889 -71.38968658]
[253.40962219 -62.37385941]
[264.07125854 -72.92514801]
[274.73287964 -83.47644043]
[285.39450073 -94.02773285]
[296.05612183 -104.57901764]
[299.85861206 -120.53123474]
[315.64999390 -124.95435333]
[327.18545532 -113.29824829]
[322.59832764 -97.55372620]
[306.60742188 -93.91739655]
[295.94580078 -83.36610413]
[285.28414917 -72.81481171]
[274.62252808 -62.26352310]
[263.96090698 -51.71223450]
[274.61660767 -39.31552887]
[284.33721924 -26.17276382]
[293.07067871 -12.35431862]
[300.77020264 2.06580281]
[307.39456177 17.01037979]
[312.90829468 32.39938354]
[317.28182983 48.15039825]
[320.49182129 64.17907715]
[322.52102661 80.39958954]
[323.35858154 96.72505951]
[323.00000000 113.06806946]
[321.44723511 129.34109497]
[318.70858765 145.45700073]
[314.79867554 161.32946777]
[309.73852539 176.87350464]
[323.64108276 182.50546265]
[337.54364014 188.13742065]
[351.44619751 193.76937866]
[365.90026855 187.37757874]
[380.61019897 193.15632629]
[386.84881592 207.67716980]
[380.91485596 222.32516479]
[366.32885742 228.40992737]
[351.74441528 222.32144165]
[345.81423950 207.67193604]
[331.91168213 202.03997803]
[318.00912476 196.40802002]
[304.10656738 190.77606201]
[297.50473022 204.36309814]
[289.99972534 217.47288513]
[281.62585449 230.04547119]
[272.42141724 242.02336121]
[262.42849731 253.35177612]
[251.69276428 263.97891235]
[240.26336670 273.85617065]
[228.19253540 282.93838501]
[215.53547668 291.18405151]
[202.35006714 298.55538940]
[188.69662476 305.01876831]
[174.63757324 310.54455566]
[160.23719788 315.10754395]
[145.56135559 318.68685913]
[130.67716980 321.26611328]
[115.65268707 322.83352661]
[100.55663300 323.38189697]
[85.45803070 322.90875244]
[70.42592621 321.41625977]
[55.52906799 318.91119385]
[40.83557510 315.40509033]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 20]
[2 19]
[3 18]
[4 17]
[6 15]
[7 14]
[8 13]
[44 60]
[45 59]
[46 58]
[47 57]
[88 101]
[89 100]
[90 99]
[91 98]
[92 97]
[116 129]
[117 128]
[118 127]
[119 126]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
