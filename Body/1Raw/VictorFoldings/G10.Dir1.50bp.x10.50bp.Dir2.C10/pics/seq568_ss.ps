%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:04 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGUCCCCUCCCACUCCCAUACUACUAAUCUCAUCAAUACAACCCCCGCCCAUCCUACCCAGCACACxxxxxxxxxxACUCCACCUCCUAUUCUUGCACGAAACGGGAUCAAACAACCCCCUAGGAAUCACCUCCCAUUCCCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[-246.73851013 231.80603027]
[-254.21672058 217.62716675]
[-268.11706543 223.26458740]
[-282.01742554 228.90199280]
[-291.89801025 241.25856018]
[-306.60012817 238.87174988]
[-320.50045776 244.50915527]
[-334.40081787 250.14657593]
[-348.30114746 255.78398132]
[-362.20150757 261.42138672]
[-376.10183716 267.05880737]
[-372.75735474 281.71524048]
[-371.80737305 296.71835327]
[-373.27648926 311.67956543]
[-377.12664795 326.21133423]
[-383.25817871 339.93725586]
[-391.51217651 352.50180054]
[-401.67489624 363.57949829]
[-413.48306274 372.88339233]
[-426.63085938 380.17254639]
[-440.77770996 385.25814819]
[-455.55715942 388.00842285]
[-470.58639526 388.35214233]
[-485.47613525 386.28042603]
[-499.84066772 381.84692383]
[-513.30798340 375.16647339]
[-525.52917480 366.41210938]
[-536.18768311 355.81060791]
[-545.00750732 343.63656616]
[-551.76007080 330.20532227]
[-556.27056885 315.86477661]
[-558.42218018 300.98635864]
[-558.15905762 285.95550537]
[-555.48815918 271.16149902]
[-550.47851562 256.98757935]
[-543.26000977 243.80087280]
[-534.01959229 231.94294739]
[-522.99658203 221.72093201]
[-510.47650146 213.39964294]
[-496.78369141 207.19458008]
[-482.27279663 203.26649475]
[-467.31967163 201.71711731]
[-452.31167603 202.58659363]
[-437.63751221 205.85240173]
[-423.67730713 211.42994690]
[-410.79266357 219.17475891]
[-399.31732178 228.88621521]
[-389.54849243 240.31277466]
[-381.73925781 253.15846252]
[-367.83889771 247.52105713]
[-353.93856812 241.88363647]
[-340.03820801 236.24623108]
[-326.13787842 230.60881042]
[-312.23751831 224.97140503]
[-303.35119629 213.01806641]
[-287.65481567 215.00164795]
[-273.75448608 209.36424255]
[-259.85412598 203.72682190]
[-263.89257812 190.27381897]
[-266.69271851 176.50918579]
[-268.23135376 162.54667664]
[-268.49563599 148.50166321]
[-267.48333740 134.49020386]
[-265.20269775 120.62810516]
[-261.67254639 107.02994537]
[-256.92190552 93.80810547]
[-250.98997498 81.07189941]
[-243.92572021 68.92659760]
[-235.78742981 57.47262955]
[-226.64228821 46.80468750]
[-216.56579590 37.01099777]
[-205.64118958 28.17255211]
[-193.95869446 20.36246109]
[-181.61479187 13.64533806]
[-168.71145630 8.07676983]
[-155.35528564 3.70285439]
[-141.65664673 0.55981880]
[-127.72870636 -1.32627833]
[-113.68656921 -1.93976545]
[-99.64626312 -1.27548671]
[-85.72383118 0.66115385]
[-72.03433990 3.85423684]
[-58.69094086 8.27745819]
[-45.80392456 13.89434433]
[-33.47983551 20.65855789]
[-21.82055283 28.51427078]
[-10.92248249 37.39663696]
[-0.87573904 47.23231888]
[8.23658943 57.94009399]
[16.33913231 69.43152618]
[23.36486244 81.61170197]
[29.25564003 94.38000488]
[33.96270752 107.63095093]
[48.50753403 103.96379089]
[63.05236053 100.29663086]
[77.59718323 96.62947083]
[92.14200592 92.96231842]
[105.74704742 86.64543152]
[117.93434906 77.90074158]
[130.12165833 69.15605164]
[132.43884277 53.52255249]
[145.18148804 44.17373276]
[160.78961182 46.65607452]
[170.00318909 59.49685287]
[167.35595703 75.07785797]
[154.41848755 84.15515900]
[138.86634827 81.34335327]
[126.67903900 90.08804321]
[114.49173737 98.83274078]
[116.82345581 105.96106720]
[121.48688507 120.21772766]
[123.81860352 127.34606171]
[138.81787109 127.19787598]
[153.81713867 127.04969025]
[161.94195557 113.93515015]
[175.87704468 107.31574249]
[191.17579651 109.30368805]
[202.95642090 119.26463318]
[207.45976257 134.02009583]
[203.24882507 148.86163330]
[191.66729736 159.05339050]
[176.41081238 161.34321594]
[162.34765625 155.00041199]
[153.96533203 142.04895020]
[138.96606445 142.19714355]
[123.96678925 142.34532166]
[106.09935760 134.77322388]
[96.33482361 121.64273834]
[95.80916595 107.50714111]
[81.26434326 111.17430115]
[66.71952057 114.84146118]
[52.17469025 118.50861359]
[37.62986755 122.17577362]
[39.96739960 138.05290222]
[40.64733887 154.08610535]
[39.66250229 170.10279846]
[37.02363205 185.93058777]
[32.75926590 201.39912415]
[26.91544151 216.34197998]
[19.55518532 230.59835815]
[10.75784397 244.01487732]
[0.61822575 256.44720459]
[-10.75442505 267.76159668]
[-23.23760223 277.83636475]
[-36.69685364 286.56323242]
[-50.98723984 293.84832764]
[-65.95487976 299.61340332]
[-81.43861389 303.79650879]
[-97.27175903 306.35278320]
[-113.28387451 307.25482178]
[-129.30259705 306.49304199]
[-145.15551758 304.07583618]
[-160.67202759 300.02932739]
[-175.68516541 294.39721680]
[-190.03335571 287.24020386]
[-203.56225586 278.63552856]
[-216.12631226 268.67587280]
[-227.59037781 257.46856689]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 58]
[3 57]
[4 56]
[6 54]
[7 53]
[8 52]
[9 51]
[10 50]
[11 49]
[93 133]
[94 132]
[95 131]
[96 130]
[97 129]
[98 109]
[99 108]
[100 107]
[112 126]
[113 125]
[114 124]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
