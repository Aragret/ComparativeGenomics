%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:59 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGGACUACGAAAGUGGCUUUAACAUAUCUGAACACACAAUAGCUAAGACCCAAACUGGGAUUxxxxxxxxxxGUCAUCCCUCUUAUUAAUCAUCAUCCUAGCCCUAAGUCUGGCCUAUGAGUGACUACAAAACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[130.91213989 310.50613403]
[130.91213989 295.50613403]
[130.91213989 280.50613403]
[130.91213989 265.50613403]
[130.91213989 250.50613403]
[130.91213989 235.50613403]
[130.91213989 220.50613403]
[130.91213989 205.50613403]
[130.91213989 190.50613403]
[130.91213989 175.50613403]
[127.50916290 160.89723206]
[120.88066864 147.44126892]
[114.25216675 133.98530579]
[107.62366486 120.52934265]
[92.80590820 118.19823456]
[82.36609650 128.96903992]
[78.89630890 144.99691772]
[63.20035172 149.74758911]
[51.42488098 138.33399963]
[55.68349075 122.49744415]
[71.59529114 118.52922821]
[82.03510284 107.75842285]
[85.13342285 93.08189392]
[79.93801117 79.01037598]
[74.74259186 64.93885803]
[69.54718018 50.86734009]
[62.91867828 37.41137314]
[54.92876053 24.71644402]
[46.93884659 12.02151489]
[38.94892883 -0.67341501]
[39.19627762 14.32454586]
[35.46211624 28.85231400]
[28.01320457 41.87205505]
[17.38167572 52.45367432]
[4.32702541 59.84123611]
[-10.21815300 63.50699615]
[-25.21478271 63.18907547]
[-39.59154129 58.91018677]
[-52.32137680 50.97600937]
[-62.49490738 39.95333481]
[-69.38535309 26.62960625]
[-72.50047302 11.95663834]
[-71.61773682 -3.01736546]
[-66.80020142 -17.22269440]
[-58.39202118 -29.64455032]
[-46.99385834 -39.39554214]
[-33.41997147 -45.77908325]
[-18.64005089 -48.33914948]
[-3.70994020 -46.89284897]
[10.30378628 -41.54350662]
[22.40001869 -32.67326355]
[31.71182251 -20.92052078]
[29.84420967 -35.80380249]
[27.97659683 -50.68708038]
[26.10898399 -65.57035828]
[24.24136925 -80.45364380]
[15.40993977 -68.32904053]
[1.18873346 -63.55858612]
[-13.16779709 -67.90485382]
[-22.35519791 -79.76198578]
[-22.97891045 -94.74901581]
[-14.80848217 -107.32852173]
[-0.86272514 -112.85263824]
[13.70568085 -109.28031158]
[23.51365662 -97.93225098]
[24.13763428 -112.91926575]
[24.76161194 -127.90628052]
[25.38558960 -142.89329529]
[26.00956535 -157.88031006]
[12.20518589 -164.24485779]
[1.89088094 -175.41104126]
[-3.36049104 -189.67608643]
[-2.74813461 -204.86468506]
[3.63457060 -218.66067505]
[14.81430817 -228.96028137]
[29.08625031 -234.19288635]
[44.27402878 -233.56056213]
[58.06161499 -227.15971375]
[68.34650421 -215.96643066]
[73.56033325 -201.68762207]
[72.90802002 -186.50068665]
[66.48903656 -172.72152710]
[55.28224182 -162.45137024]
[40.99658203 -157.25633240]
[40.37260437 -142.26931763]
[39.74862671 -127.28230286]
[39.12464905 -112.29528809]
[38.50067139 -97.30827332]
[39.12464905 -82.32125092]
[40.99226379 -67.43797302]
[42.85987473 -52.55469513]
[44.72748947 -37.67141342]
[46.59510422 -22.78813362]
[51.64385986 -8.66333103]
[59.63377380 4.03159857]
[67.62368774 16.72652817]
[75.61360931 29.42145729]
[77.28654480 14.51503944]
[86.07740784 2.36100125]
[99.71071625 -3.89462233]
[114.65753174 -2.63258147]
[127.04891205 5.82044792]
[133.67738342 19.27642441]
[132.82719421 34.25231171]
[124.71840668 46.87164307]
[111.44995880 53.86794662]
[96.45634460 53.43024826]
[83.61869812 45.67192459]
[88.81410980 59.74344254]
[94.00952911 73.81496429]
[99.20494080 87.88648224]
[107.24612427 86.39167023]
[116.16151428 90.60272980]
[121.96401215 100.61856842]
[121.07963562 113.90084076]
[127.70812988 127.35680389]
[134.33662415 140.81277466]
[140.96513367 154.26873779]
[142.26689148 139.32533264]
[147.32266235 125.20304108]
[155.80065918 112.82872772]
[167.14443970 103.01452637]
[180.60951233 96.40454865]
[195.31216431 93.43261719]
[210.28741455 94.29377747]
[224.55245972 98.93151855]
[237.17105103 107.04145050]
[247.31503296 118.09132385]
[254.31863403 131.35592651]
[257.72222900 145.96467590]
[257.30239868 160.95880127]
[253.08673096 175.35421753]
[245.35188293 188.20614624]
[234.60549927 198.67111206]
[221.55288696 206.06227112]
[207.05068970 209.89454651]
[192.05070496 209.91642761]
[177.53739929 206.12648010]
[164.46327209 198.77343750]
[153.68641663 188.33987427]
[145.91213989 175.50613403]
[145.91213989 190.50613403]
[145.91213989 205.50613403]
[145.91213989 220.50613403]
[145.91213989 235.50613403]
[145.91213989 250.50613403]
[145.91213989 265.50613403]
[145.91213989 280.50613403]
[145.91213989 295.50613403]
[145.91213989 310.50613403]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[11 118]
[12 117]
[13 116]
[14 115]
[15 22]
[16 21]
[23 111]
[24 110]
[25 109]
[26 108]
[27 97]
[28 96]
[29 95]
[30 94]
[52 93]
[53 92]
[54 91]
[55 90]
[56 89]
[65 88]
[66 87]
[67 86]
[68 85]
[69 84]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
