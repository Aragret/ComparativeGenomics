%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:50 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGACCCUAUAGAAGAACUAAUGUUAGUAUAAGUAACAUGAAAACAUUCUCCUCCGCAUAAGCxxxxxxxxxxGAAAUUGACCUGCCCGUGAAGAGGCGGGCAUAACACAGCAAGACGAGAAGACCCUAUGGACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[92.50000000 302.48727417]
[92.50000000 287.48727417]
[92.50000000 272.48727417]
[92.50000000 257.48727417]
[92.50000000 242.48727417]
[92.50000000 227.48727417]
[92.50000000 212.48727417]
[92.50000000 197.48727417]
[92.50000000 182.48727417]
[92.50000000 167.48727417]
[84.68237305 166.65185547]
[76.95881653 164.90759277]
[69.43534851 162.26522827]
[62.21674347 158.74794006]
[55.40503693 154.39114380]
[49.09814072 149.24220276]
[43.38841248 143.35989380]
[31.49603271 152.50163269]
[19.60365295 161.64337158]
[16.10604286 177.30052185]
[1.62153339 184.19824219]
[-12.73860073 177.04518127]
[-15.95849323 161.32858276]
[-5.56811810 149.10484314]
[10.46191788 149.75099182]
[22.35429764 140.60925293]
[34.24667740 131.46751404]
[29.19792175 117.34271240]
[14.20522499 117.81076050]
[-0.78747118 118.27880096]
[-15.78016758 118.74684143]
[-30.77286339 119.21488190]
[-45.76556015 119.68292999]
[-59.31758499 127.84706116]
[-72.28009033 120.51065826]
[-87.92284393 127.04827881]
[-98.53531647 113.82663727]
[-88.76821136 99.96878815]
[-72.74813080 105.51795959]
[-60.26847839 97.38729858]
[-46.23360062 104.69023132]
[-31.24090576 104.22219086]
[-16.24820900 103.75414276]
[-1.25551331 103.28610229]
[13.73718262 102.81806183]
[28.72987938 102.35002136]
[31.09656906 83.36479950]
[38.39731216 65.80433655]
[50.04676437 50.91748047]
[65.15280151 39.74521255]
[82.58460999 33.04792023]
[101.05726624 31.25386047]
[119.22641754 34.43225479]
[135.78608704 42.29265594]
[145.05104065 30.49601364]
[154.31599426 18.69937515]
[163.58093262 6.90273428]
[172.84588623 -4.89390564]
[175.28480530 -20.52599716]
[189.23091125 -25.75621986]
[198.49586487 -37.55286026]
[200.65025330 -55.81042099]
[217.12979126 -61.76226807]
[226.14732361 -73.74909973]
[212.22059631 -68.17717743]
[197.31542969 -66.49320984]
[182.49659729 -68.81748199]
[168.82273865 -74.98396301]
[157.27067566 -84.55213165]
[148.66566467 -96.83846283]
[143.62242126 -110.96523285]
[142.50125122 -125.92327881]
[145.38221741 -140.64401245]
[152.05952454 -154.07582092]
[162.05615234 -165.25917053]
[174.65797424 -173.39514160]
[188.96473694 -177.90252686]
[203.95440674 -178.45932007]
[218.55613708 -175.02575684]
[231.72682190 -167.84710693]
[242.52558899 -157.43620300]
[250.18096924 -144.53678894]
[254.14610291 -130.07035828]
[254.13772583 -115.07035828]
[250.15643311 -100.60836029]
[242.49005127 -87.72180939]
[255.73263550 -94.76694489]
[257.67916870 -112.73981476]
[269.88119507 -125.86585999]
[287.35671997 -129.06057739]
[303.13320923 -121.23943329]
[316.07125854 -128.82934570]
[329.00933838 -136.41925049]
[341.94738770 -144.00915527]
[354.88543701 -151.59907532]
[367.82348633 -159.18898010]
[380.76153564 -166.77888489]
[384.50299072 -182.13392639]
[398.04946899 -190.27447510]
[413.36410522 -186.37089539]
[421.36096191 -172.73910522]
[417.29568481 -157.46661377]
[403.58010864 -149.61430359]
[388.35147095 -153.84083557]
[375.41339111 -146.25091553]
[362.47534180 -138.66101074]
[349.53729248 -131.07110596]
[336.59924316 -123.48120117]
[323.66116333 -115.89128876]
[310.72311401 -108.30138397]
[311.33642578 -96.10447693]
[306.65457153 -84.74687958]
[297.51721191 -76.42771912]
[285.63299561 -72.78629303]
[273.26022339 -74.57925415]
[262.77777100 -81.52435303]
[249.53518677 -74.47921753]
[238.13415527 -64.73156738]
[229.11662292 -52.74473572]
[230.49209595 -40.68590546]
[223.02186584 -30.61542702]
[210.29251099 -28.28791046]
[201.02755737 -16.49127007]
[199.25132751 -1.70295429]
[184.64253235 4.37104368]
[175.37757874 16.16768456]
[166.11262512 27.96432304]
[156.84768677 39.76096344]
[147.58273315 51.55760193]
[155.79299927 61.29698944]
[162.03979492 72.39842987]
[166.10324097 84.47122955]
[167.84037781 97.09052277]
[167.19004822 109.81221008]
[164.17514038 122.18858337]
[158.90176392 133.78408813]
[151.55549622 144.19064331]
[142.39486694 153.04203796]
[131.74226379 160.02674866]
[119.97257233 164.89898682]
[107.50000000 167.48727417]
[107.50000000 182.48727417]
[107.50000000 197.48727417]
[107.50000000 212.48727417]
[107.50000000 227.48727417]
[107.50000000 242.48727417]
[107.50000000 257.48727417]
[107.50000000 272.48727417]
[107.50000000 287.48727417]
[107.50000000 302.48727417]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[17 27]
[18 26]
[19 25]
[28 46]
[29 45]
[30 44]
[31 43]
[32 42]
[33 41]
[35 39]
[54 129]
[55 128]
[56 127]
[57 126]
[58 125]
[60 123]
[61 122]
[63 119]
[64 118]
[86 117]
[87 116]
[91 110]
[92 109]
[93 108]
[94 107]
[95 106]
[96 105]
[97 104]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
