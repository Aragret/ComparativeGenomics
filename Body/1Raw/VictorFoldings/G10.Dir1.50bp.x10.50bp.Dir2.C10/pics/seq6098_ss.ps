%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:50 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGAAACCCACAAACACUUAGUUAACAGCUAAGCACCCUAAUCAACUGGCUUCAAUCUACUUCxxxxxxxxxxAUCGGUUUCAUCCUCGCCUUAGCAUGAUUUAUCCUACACUCCAACUCAUGAGACCCACAACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[85.77520752 265.48083496]
[85.77520752 250.48081970]
[85.77520752 235.48081970]
[85.77520752 220.48081970]
[85.77520752 205.48081970]
[85.77520752 190.48081970]
[85.77520752 175.48081970]
[85.77520752 160.48081970]
[85.77520752 145.48081970]
[85.77520752 130.48081970]
[79.87688446 125.84834290]
[72.68550110 139.01208496]
[65.49411774 152.17582703]
[58.30273819 165.33955383]
[53.60272598 179.58421326]
[40.33226395 186.57669067]
[25.92555046 182.39978027]
[18.45331573 169.39341736]
[22.10155678 154.84382629]
[34.82672882 146.90176392]
[45.91123199 136.79563904]
[56.99573898 126.68952179]
[68.08024597 116.58339691]
[62.18192673 111.95092010]
[47.60922241 115.50568390]
[33.03652191 119.06044769]
[18.46381760 122.61521149]
[3.89111471 126.16996765]
[-10.68158817 129.72473145]
[-20.20937920 142.63212585]
[-36.24599457 143.08660889]
[-46.48951340 130.73954773]
[-43.08198547 115.06255341]
[-28.63737488 108.08166504]
[-14.23635006 115.15203094]
[0.33635288 111.59726715]
[14.90905571 108.04250336]
[29.48175812 104.48773956]
[44.05446243 100.93298340]
[58.62716293 97.37821960]
[66.47172546 87.12901306]
[76.18982697 81.14447021]
[86.02595520 79.47548676]
[94.40135193 81.54233551]
[100.12025452 86.25437927]
[98.87338257 71.30628967]
[97.62651062 56.35820389]
[96.37963104 41.41011429]
[85.58741760 51.82779694]
[70.58759308 51.75545120]
[59.89636993 41.23415375]
[59.58373260 26.23741150]
[69.82717896 15.27968693]
[84.81095886 14.58227253]
[96.02864838 24.54251099]
[96.65262604 9.55549431]
[97.27660370 -5.43152189]
[82.54035187 -8.39621353]
[68.44935608 -13.62977886]
[55.35060883 -21.00333595]
[43.56668472 -30.33530617]
[33.38777542 -41.39587784]
[25.06454086 -53.91267776]
[18.80195236 -67.57746887]
[14.75423050 -82.05374146]
[13.02105331 -96.98500061]
[13.64510250 -112.00355530]
[16.61100960 -126.73956299]
[21.84573746 -140.83013916]
[29.22037697 -153.92826843]
[38.55331802 -165.71142578]
[49.61473083 -175.88941956]
[62.13221741 -184.21162415]
[75.79752350 -190.47308350]
[90.27413177 -194.51960754]
[105.20553589 -196.25155640]
[120.22403717 -195.62626648]
[134.95980835 -192.65914917]
[149.04994202 -187.42324829]
[162.14746094 -180.04753113]
[173.92985535 -170.71362305]
[184.10693359 -159.65136719]
[192.42810059 -147.13319397]
[198.68843079 -133.46737671]
[202.73376465 -118.99043274]
[204.46447754 -104.05888367]
[203.83795166 -89.04042816]
[200.86961365 -74.30491638]
[195.63256836 -60.21520996]
[188.25576782 -47.11828995]
[178.92086792 -35.33667755]
[167.85778809 -25.16050339]
[155.33892822 -16.84037018]
[141.67257690 -10.58116436]
[127.19531250 -6.53702545]
[112.26361847 -4.80754423]
[111.63964081 10.17947197]
[111.01566315 25.16648865]
[111.32772064 40.16324234]
[112.57459259 55.11132812]
[113.82147217 70.05941772]
[115.06834412 85.00749969]
[125.39555359 95.88632965]
[140.25859070 97.90866089]
[155.12164307 99.93099976]
[169.98469543 101.95333099]
[184.84773254 103.97566223]
[199.56507874 98.16957855]
[211.13298035 107.55215454]
[225.99603271 109.57449341]
[234.36897278 96.81296539]
[247.45417786 88.95547485]
[262.65356445 87.56213379]
[276.94927979 92.90958405]
[287.50289917 103.93608856]
[292.21902466 118.45232391]
[290.16119385 133.57608032]
[281.73806763 146.30453491]
[268.62200928 154.11044312]
[253.41726685 155.44392395]
[239.14271545 150.04020691]
[228.63259888 138.97222900]
[223.97369385 124.43753815]
[209.11064148 122.41520691]
[195.45642090 128.36593628]
[182.82540894 118.83871460]
[167.96235657 116.81637573]
[153.09930420 114.79404449]
[138.23626709 112.77170563]
[123.37321472 110.74937439]
[117.72371674 115.68223572]
[129.79769897 124.58272552]
[144.50242615 127.54437256]
[153.34396362 139.66159058]
[151.67752075 154.56874084]
[140.37854004 164.43449402]
[125.38283539 164.07598877]
[114.56822205 153.68154907]
[113.61608887 138.71170044]
[106.42470551 125.54795837]
[100.77520752 130.48081970]
[100.77520752 145.48081970]
[100.77520752 160.48081970]
[100.77520752 175.48081970]
[100.77520752 190.48081970]
[100.77520752 205.48081970]
[100.77520752 220.48081970]
[100.77520752 235.48081970]
[100.77520752 250.48081970]
[100.77520752 265.48083496]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[24 40]
[25 39]
[26 38]
[27 37]
[28 36]
[29 35]
[45 102]
[46 101]
[47 100]
[48 99]
[55 98]
[56 97]
[57 96]
[103 130]
[104 129]
[105 128]
[106 127]
[107 126]
[109 124]
[110 123]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
