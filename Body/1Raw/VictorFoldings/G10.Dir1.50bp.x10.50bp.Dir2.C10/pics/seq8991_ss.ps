%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:30 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGAUCCUAUUUAUUACCUCAGAAGUUUUUUUCUUCGCAGGAUUUUUCUGAGCCUUUUACCACUxxxxxxxxxxAACCACACCUAGCAUUCCUGCACAUCUGUACCCACGCCUUCUUCAAAGCCAUACUAUUUAUCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[83.85645294 414.11190796]
[86.44223022 394.90347290]
[86.75020599 379.90664673]
[87.05818176 364.90979004]
[87.36616516 349.91296387]
[87.67414093 334.91613770]
[87.98211670 319.91928101]
[88.29009247 304.92245483]
[88.59807587 289.92559814]
[88.90605164 274.92877197]
[74.27314758 271.72686768]
[60.54173279 265.72970581]
[48.24030685 257.16601562]
[37.84273529 246.36340332]
[29.74998093 233.73576355]
[24.27465439 219.76742554]
[21.62893677 204.99455261]
[21.91635513 189.98458862]
[25.12773705 175.31443787]
[31.14148712 161.54835510]
[39.72819138 149.21617126]
[50.55936813 138.79290771]
[63.22003174 130.68052673]
[77.22460175 125.19240570]
[92.03550720 122.54120636]
[92.34348297 107.54437256]
[89.89055634 92.74629211]
[84.76025391 78.65090179]
[79.62995148 64.55551147]
[74.49964905 50.46012115]
[62.50902939 40.13851547]
[65.42673492 25.53247833]
[60.29642868 11.43708897]
[55.54251099 25.66383362]
[44.40261841 35.70886993]
[29.76160240 38.97088242]
[15.41098976 34.60511780]
[5.06709528 23.74216080]
[1.40863335 9.19514656]
[5.38302135 -5.26874828]
[15.96102810 -15.90386772]
[30.40331268 -19.95607948]
[44.96981812 -16.37600136]
[55.88779068 -6.09158802]
[53.73921204 -20.93691063]
[51.59063339 -35.78223419]
[49.44205093 -50.62755585]
[47.29347229 -65.47287750]
[45.14489365 -80.31819916]
[30.12578964 -80.08403015]
[15.20005322 -81.77243042]
[0.61277777 -85.35568237]
[-13.39650059 -90.77494812]
[-26.59773636 -97.94123840]
[-38.77415085 -106.73687744]
[-49.72580338 -117.01742554]
[-59.27285004 -128.61407471]
[-67.25852203 -141.33639526]
[-73.55168915 -154.97546387]
[-78.04901123 -169.30732727]
[-80.67663574 -184.09664917]
[-81.39141846 -199.10057068]
[-80.18162537 -214.07269287]
[-77.06710815 -228.76718140]
[-72.09902954 -242.94274902]
[-65.35894775 -256.36660767]
[-56.95756149 -268.81829834]
[-47.03281784 -280.09338379]
[-35.74769211 -290.00674438]
[-23.28749847 -298.39553833]
[-9.85684204 -305.12203979]
[4.32373285 -310.07577515]
[19.02136803 -313.17544556]
[33.99471664 -314.37008667]
[48.99789810 -313.64013672]
[63.78454971 -310.99755859]
[78.11186218 -306.48574829]
[91.74456787 -300.17880249]
[104.45880127 -292.18026733]
[116.04579163 -282.62149048]
[126.31526184 -271.65945435]
[135.09858704 -259.47415161]
[142.25152588 -246.26567078]
[147.65661621 -232.25093079]
[151.22512817 -217.66003418]
[152.89843750 -202.73260498]
[152.64907837 -187.71374512]
[150.48114014 -172.85008240]
[146.43022156 -158.38569641]
[140.56285095 -144.55810547]
[132.97537231 -131.59436035]
[123.79238129 -119.70735931]
[113.16465759 -109.09227753]
[101.26673126 -99.92343903]
[88.29397583 -92.35138702]
[74.45941162 -86.50048065]
[59.99021912 -82.46678162]
[62.13879776 -67.62145996]
[64.28737640 -52.77613449]
[66.43595123 -37.93081284]
[68.58453369 -23.08548927]
[70.73311615 -8.24016762]
[74.39181519 6.30678701]
[79.52211761 20.40217590]
[91.14579010 29.71558762]
[88.59503937 45.32981873]
[93.72534180 59.42520905]
[98.85564423 73.52059937]
[103.98594666 87.61598969]
[106.98902130 72.91967773]
[114.31151581 59.82841873]
[125.26239014 49.57764816]
[138.80821228 43.13474655]
[153.67060852 41.10773849]
[168.44703674 43.68791962]
[181.74299622 50.63179016]
[192.30375671 61.28404999]
[199.13264465 74.63942719]
[201.58525085 89.43756104]
[199.43008423 104.28192902]
[192.87055969 117.77165222]
[182.52568054 128.63368225]
[169.37173462 135.84295654]
[154.65005493 138.71911621]
[139.74996948 136.99075317]
[126.07759857 130.82096863]
[114.92323303 120.79199982]
[107.34032440 107.85234833]
[107.03234863 122.84918213]
[121.72192383 126.10620880]
[135.48936462 132.16467285]
[147.80630493 140.78999329]
[158.20042419 151.64913940]
[166.27359009 164.32345581]
[171.71710205 178.32482910]
[174.32348633 193.11444092]
[173.99443054 208.12355042]
[170.74444580 222.77536011]
[164.70025635 236.50712585]
[156.09590149 248.79187012]
[145.26359558 259.15847778]
[132.62095642 267.20993042]
[118.65491486 272.63830566]
[103.90289307 275.23675537]
[103.59490967 290.23358154]
[103.28693390 305.23043823]
[102.97895813 320.22726440]
[102.67098236 335.22409058]
[102.36299896 350.22094727]
[102.05502319 365.21777344]
[101.74704742 380.21463013]
[101.43907166 395.21145630]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 152]
[3 151]
[4 150]
[5 149]
[6 148]
[7 147]
[8 146]
[9 145]
[10 144]
[25 129]
[26 128]
[27 109]
[28 108]
[29 107]
[30 106]
[32 104]
[33 103]
[44 102]
[45 101]
[46 100]
[47 99]
[48 98]
[49 97]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
