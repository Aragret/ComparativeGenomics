%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:07 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCCAUCGCUCUUCUACUAUGAACCCCCCUCCCCAUACCCAACCCCCUGGUCAACCUCAACCxxxxxxxxxxCACCAAGACCUCAACCCCUGACCCCCAUGCCUCAGGAUACUCCUCAAUAGCCAUCGCUGUCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[-30.78497124 214.55067444]
[-42.48459625 223.93783569]
[-54.18421936 233.32499695]
[-65.88384247 242.71215820]
[-77.48518372 252.22050476]
[-88.98698425 261.84902954]
[-100.48879242 271.47756958]
[-111.99059296 281.10607910]
[-123.49240112 290.73461914]
[-134.99420166 300.36312866]
[-140.87330627 317.78198242]
[-158.22686768 320.20153809]
[-169.52586365 330.06726074]
[-180.82487488 339.93298340]
[-176.71905518 354.63351440]
[-179.40660095 369.65814209]
[-188.35389709 382.02377319]
[-201.78445435 389.27514648]
[-217.03163147 389.97256470]
[-231.06808472 383.97750854]
[-241.10687256 372.48028564]
[-245.15476990 357.76373291]
[-242.40808105 342.74978638]
[-233.41215515 330.41949463]
[-219.95314026 323.22103882]
[-204.70332336 322.58370972]
[-190.69059753 328.63400269]
[-179.39158630 318.76828003]
[-168.09259033 308.90252686]
[-166.94758606 296.81964111]
[-157.55833435 288.50933838]
[-144.62272644 288.86132812]
[-133.12092590 279.23281860]
[-121.61911774 269.60427856]
[-110.11731720 259.97576904]
[-98.61551666 250.34722900]
[-87.11370850 240.71870422]
[-83.98341370 233.96986389]
[-75.27100372 231.01252747]
[-63.57138062 221.62536621]
[-51.87175751 212.23820496]
[-40.17213440 202.85104370]
[-54.83548737 179.07298279]
[-65.50119019 153.25335693]
[-71.89386749 126.05880737]
[-73.84848022 98.19145203]
[-71.31454468 70.37078857]
[-64.35749817 43.31511688]
[-53.15695953 17.72297096]
[-38.00210953 -5.74489021]
[-49.50391388 -15.37341690]
[-61.00571823 -25.00194359]
[-77.24355316 -27.29644203]
[-83.12358856 -42.60517120]
[-72.59694672 -55.17982483]
[-56.49253464 -52.08467484]
[-51.37718964 -36.50374603]
[-39.87538910 -26.87521935]
[-28.37358475 -17.24669456]
[-21.77516556 -24.08615303]
[-14.81288052 -30.55484200]
[-7.50753307 -36.63343048]
[0.11904756 -42.30375671]
[8.04407406 -47.54888153]
[16.24386597 -52.35312271]
[24.69392204 -56.70213318]
[33.36899185 -60.58291626]
[42.24316025 -63.98387527]
[51.28990173 -66.89485168]
[60.48219299 -69.30713654]
[69.79256439 -71.21353912]
[79.19319153 -72.60834503]
[88.65599823 -73.48739624]
[98.15269470 -73.84806824]
[107.65490723 -73.68928528]
[117.13425446 -73.01150513]
[126.56240082 -71.81677246]
[135.91117859 -70.10864258]
[145.15264893 -67.89223480]
[154.25921631 -65.17415619]
[163.20364380 -61.96253967]
[171.95921326 -58.26697540]
[180.49978638 -54.09850693]
[188.79980469 -49.46958923]
[196.83450317 -44.39405441]
[204.57984924 -38.88706970]
[212.01272583 -32.96508789]
[219.11088562 -26.64580536]
[225.85314941 -19.94810486]
[232.21937561 -12.89199638]
[238.19050598 -5.49856567]
[243.74873352 2.21009636]
[248.87744141 10.21095562]
[253.56129456 18.48010445]
[257.78631592 26.99283791]
[261.53985596 35.72371674]
[264.81069946 44.64665222]
[279.22293091 40.48876572]
[293.63513184 36.33087921]
[308.04736328 32.17299271]
[322.45956421 28.01510429]
[326.07318115 13.08736134]
[336.67813110 1.97742975]
[351.42175293 -2.32617521]
[366.33810425 1.33419466]
[377.41473389 11.97391796]
[381.67208862 26.73096275]
[377.96499634 41.63575745]
[367.29058838 52.67898941]
[352.52029419 56.89008331]
[337.62719727 53.13627243]
[326.61746216 42.42731857]
[312.20526123 46.58520889]
[297.79302979 50.74309540]
[283.38082886 54.90098190]
[268.96859741 59.05886841]
[271.52990723 71.64407349]
[273.15515137 84.38401031]
[273.83547974 97.20916748]
[273.56719971 110.04955292]
[272.35174561 122.83509827]
[270.19577026 135.49603271]
[267.11102295 147.96327209]
[263.11431885 160.16876221]
[258.22753906 172.04591370]
[252.47727966 183.52990723]
[245.89494324 194.55807495]
[238.51646423 205.07023621]
[230.38209534 215.00901794]
[221.53622437 224.32020569]
[212.02711487 232.95295715]
[201.90667725 240.86018372]
[191.23013306 247.99873352]
[180.05574036 254.32965088]
[168.44448853 259.81838989]
[156.45971680 264.43499756]
[144.16685486 268.15426636]
[131.63296509 270.95590210]
[118.92646027 272.82464600]
[106.11666870 273.75024414]
[93.27349854 273.72772217]
[80.46703339 272.75714111]
[67.76716614 270.84381104]
[55.24319077 267.99819946]
[42.96345520 264.23580933]
[30.99497032 259.57714844]
[19.40304756 254.04769897]
[8.25094700 247.67761230]
[-2.40047598 240.50163269]
[-12.49309540 232.55891418]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 42]
[2 41]
[3 40]
[4 39]
[5 37]
[6 36]
[7 35]
[8 34]
[9 33]
[10 32]
[12 29]
[13 28]
[14 27]
[50 59]
[51 58]
[52 57]
[97 116]
[98 115]
[99 114]
[100 113]
[101 112]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
