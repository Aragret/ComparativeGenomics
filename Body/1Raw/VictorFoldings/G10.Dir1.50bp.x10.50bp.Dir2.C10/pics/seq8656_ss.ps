%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:15 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCAUUACUGCAGGCCACCUACUCAUGCACCUAAUUGGAAGCGCCACCCUAGCAAUAUCAACCxxxxxxxxxxGACAGUCCCACCCUCACACGAUUCUUUACCUUUCACUUCAUCUUGCCCUUCAUUAUUGCAGCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[92.50000000 286.79040527]
[92.50000000 271.79040527]
[92.50000000 256.79040527]
[92.50000000 241.79040527]
[92.50000000 226.79040527]
[92.50000000 211.79040527]
[92.50000000 196.79040527]
[92.50000000 181.79040527]
[92.50000000 166.79040527]
[92.50000000 151.79040527]
[66.40811920 142.75187683]
[47.66935349 121.06189728]
[34.10745621 127.47087097]
[20.54555893 133.87985229]
[6.98366356 140.28881836]
[-3.10882092 155.65672302]
[-20.51136589 153.60832214]
[-33.93881607 160.29440308]
[-47.36626434 166.98046875]
[-60.79371643 173.66654968]
[-69.69831085 186.74395752]
[-84.54010773 185.49084473]
[-86.11917114 200.83718872]
[-95.76227570 212.87937927]
[-110.39232635 217.77478027]
[-125.34093475 213.96131897]
[-135.83805847 202.65583801]
[-138.53410339 187.46588135]
[-132.56875610 173.23849487]
[-119.84555817 164.51361084]
[-104.42442322 164.07528687]
[-91.22618103 172.06340027]
[-83.28201294 159.46421814]
[-67.47978973 160.23910522]
[-54.05234146 153.55302429]
[-40.62488937 146.86695862]
[-27.19744110 140.18087769]
[-23.03382301 128.78234863]
[-11.85002422 123.11718750]
[0.57468772 126.72692871]
[14.13658428 120.31795502]
[27.69848061 113.90897369]
[41.26037598 107.50000000]
[41.26037598 92.50000000]
[27.69848061 86.09102631]
[14.13658428 79.68204498]
[-1.39097726 83.71620178]
[-14.13932228 73.97663116]
[-14.32901096 57.93470001]
[-1.81453121 47.89640427]
[13.80407906 51.56226730]
[20.54555893 66.12015533]
[34.10745621 72.52912903]
[47.66935349 78.93810272]
[56.42330170 65.25915527]
[68.58399200 54.79415512]
[83.05596161 48.33727264]
[98.57697296 46.32839584]
[113.82791901 48.82473373]
[127.54489899 55.50533676]
[137.18672180 44.01467133]
[146.82853699 32.52400208]
[156.47033691 21.03333664]
[146.00453186 10.26960468]
[136.68139648 -1.49772334]
[128.59658813 -14.14789486]
[121.83306885 -27.55109978]
[116.46025848 -41.56979752]
[112.53327942 -56.06013489]
[110.09243011 -70.87341309]
[109.16276550 -85.85762787]
[109.75381470 -100.85901642]
[111.85951996 -115.72364044]
[115.45827484 -130.29896545]
[120.51313782 -144.43540955]
[126.97225189 -157.98794556]
[134.76933289 -170.81745911]
[143.82437134 -182.79232788]
[154.04443359 -193.78965759]
[165.32466125 -203.69659424]
[177.54928589 -212.41148376]
[190.59288025 -219.84490967]
[204.32159424 -225.92056274]
[218.59452820 -230.57612610]
[233.26524353 -233.76380920]
[248.18316650 -235.45089722]
[263.19525146 -235.62010193]
[278.14739990 -234.26965332]
[292.88623047 -231.41343689]
[307.26046753 -227.08074951]
[321.12261963 -221.31605530]
[334.33044434 -214.17851257]
[346.74838257 -205.74134827]
[358.24905396 -196.09115601]
[368.71438599 -185.32696533]
[378.03698730 -173.55923462]
[386.12124634 -160.90870667]
[392.88418579 -147.50520325]
[398.25637817 -133.48626709]
[402.18270874 -118.99575806]
[404.62292480 -104.18237305]
[405.55191040 -89.19811249]
[404.96020508 -74.19675446]
[402.85385132 -59.33222198]
[399.25445557 -44.75705719]
[394.19897461 -30.62082672]
[387.73925781 -17.06859016]
[379.94161987 -4.23941278]
[370.88604736 7.73505402]
[360.66549683 18.73193359]
[349.38482666 28.63838005]
[337.15982056 37.35273743]
[324.11590576 44.78557968]
[310.38693237 50.86063385]
[296.11380005 55.51556396]
[281.44293213 58.70260239]
[266.52493286 60.38903809]
[251.51284790 60.55757523]
[236.56074524 59.20647430]
[221.82203674 56.34960938]
[207.44798279 52.01628876]
[193.58609009 46.25098419]
[180.37858582 39.11285400]
[167.96101379 30.67514992]
[158.31919861 42.16581726]
[148.67738342 53.65648270]
[139.03556824 65.14714813]
[143.36361694 70.70677948]
[146.90560913 76.79740906]
[149.59733582 83.30863953]
[151.38998413 90.12243652]
[152.25108337 97.11529541]
[152.16500854 104.16043854]
[151.13331604 111.13016510]
[149.17472839 117.89813232]
[146.32472229 124.34165955]
[142.63499451 130.34393311]
[138.17239380 135.79615784]
[133.01783752 140.59950256]
[127.26476288 144.66687012]
[121.01744080 147.92456055]
[114.38913727 150.31350708]
[107.50000000 151.79040527]
[107.50000000 166.79040527]
[107.50000000 181.79040527]
[107.50000000 196.79040527]
[107.50000000 211.79040527]
[107.50000000 226.79040527]
[107.50000000 241.79040527]
[107.50000000 256.79040527]
[107.50000000 271.79040527]
[107.50000000 286.79040527]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 152]
[2 151]
[3 150]
[4 149]
[5 148]
[6 147]
[7 146]
[8 145]
[9 144]
[10 143]
[12 43]
[13 42]
[14 41]
[15 40]
[17 37]
[18 36]
[19 35]
[20 34]
[22 32]
[44 54]
[45 53]
[46 52]
[60 127]
[61 126]
[62 125]
[63 124]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
