%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:01 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGUAGCCAUCAUUCUACUAUCAACAUUACUAAUAAGUGGCUCCUUUAACCUCUCCACCCUUAxxxxxxxxxxCAACGUUAUCGUCACAGCCCAUGCAUUUGUAAUAAUCUUCUUCAUAGUAAUACCCAUCAUCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[119.38610840 637.26818848]
[119.38610840 622.26818848]
[119.38610840 607.26818848]
[119.38610840 592.26818848]
[119.38610840 577.26818848]
[119.38610840 562.26818848]
[119.38610840 547.26818848]
[119.38610840 532.26818848]
[119.38610840 517.26818848]
[119.38610840 502.26815796]
[105.27340698 499.00659180]
[92.23963165 492.67053223]
[80.94542694 483.57745361]
[71.96410370 472.18460083]
[65.75252533 459.06604004]
[62.62788010 444.88381958]
[62.75147629 430.35449219]
[66.12042999 416.21282959]
[72.56763458 403.17483521]
[81.77004242 391.90142822]
[93.26485443 382.96481323]
[106.47280884 376.81964111]
[120.72733307 373.77978516]
[121.03939056 358.78302002]
[121.35144806 343.78625488]
[121.66350555 328.78952026]
[121.97556305 313.79275513]
[122.28761292 298.79602051]
[110.94259644 291.30349731]
[105.57583618 278.13354492]
[108.71360016 263.62164307]
[119.94821930 252.98202515]
[135.84487915 250.43670654]
[134.28730774 235.51779175]
[132.72972107 220.59889221]
[131.17213440 205.67997742]
[129.61456299 190.76106262]
[120.59750366 178.90602112]
[126.85998535 164.37701416]
[125.30239868 149.45811462]
[123.74481964 134.53919983]
[93.54869080 139.49606323]
[69.52749634 122.91174316]
[64.02760315 95.68159485]
[52.52579880 86.05307007]
[41.02399445 76.42454529]
[29.52219200 66.79601288]
[16.06314850 73.86161041]
[0.92427760 75.23383331]
[-13.58585453 70.70343781]
[-25.25455856 60.96127319]
[-32.30244064 47.49294662]
[-33.65475082 32.35228348]
[-29.10527039 17.84812164]
[-19.34776306 6.19224405]
[-5.87017822 -0.83791512]
[9.27225113 -2.17030668]
[23.77041435 2.39824891]
[35.41344833 12.17108059]
[42.42586899 25.65790176]
[43.73834229 40.80207062]
[39.15071869 55.29421234]
[50.65252304 64.92273712]
[62.15432358 74.55126190]
[73.65612793 84.17979431]
[81.02503204 82.78363037]
[75.54740906 68.81954193]
[70.06979370 54.85545731]
[64.59217072 40.89137268]
[59.11454773 26.92728806]
[49.84797668 15.13192177]
[48.64414978 0.18030699]
[55.90417862 -12.94569778]
[69.20903015 -19.87252235]
[84.12554932 -18.29215813]
[95.68356323 -8.73118114]
[100.03195953 5.62470436]
[95.72239685 19.99131775]
[95.73250580 34.99131393]
[95.74261475 49.99131012]
[95.75272369 64.99131012]
[95.76284027 79.99130249]
[103.13174438 78.59513855]
[110.31424713 65.42655945]
[117.49675751 52.25797653]
[116.55803680 35.88571930]
[130.41407776 27.11405754]
[144.81098938 34.96652603]
[144.93844604 51.36517715]
[130.66534424 59.44048691]
[123.48283386 72.60906982]
[116.30032349 85.77764893]
[121.68572998 90.99755859]
[132.12571716 80.22692108]
[142.89617920 90.66709137]
[132.45654297 101.43737030]
[137.84193420 106.65727234]
[150.77999878 99.06736755]
[158.40600586 84.54924011]
[174.80065918 84.16495514]
[183.09852600 98.30982971]
[174.76348877 112.43283081]
[158.36990356 112.00542450]
[145.43185425 119.59532928]
[138.66372681 132.98161316]
[140.22131348 147.90052795]
[141.77890015 162.81944275]
[150.90736389 175.74157715]
[144.53347778 189.20347595]
[146.09104919 204.12239075]
[147.64863586 219.04130554]
[149.20620728 233.96022034]
[150.76379395 248.87913513]
[160.86244202 259.97045898]
[175.57040405 262.91592407]
[189.66485596 255.25262451]
[204.38734436 261.62658691]
[208.44406128 277.14828491]
[198.72303772 289.91076660]
[182.68139648 290.12377930]
[172.62492371 277.62390137]
[157.91696167 274.67840576]
[151.41596985 291.34143066]
[137.28436279 299.10806274]
[136.97232056 314.10482788]
[136.66026306 329.10156250]
[136.34820557 344.09832764]
[136.03614807 359.09506226]
[135.72409058 374.09182739]
[150.76390076 378.08322144]
[164.41117859 385.54025269]
[175.88122559 396.02944946]
[184.51564026 408.94305420]
[189.82012939 423.53436279]
[191.49281311 438.96081543]
[189.44139099 454.33270264]
[183.78825378 468.76443481]
[174.86312866 481.42562866]
[163.18391418 491.58877563]
[149.42658997 498.67114258]
[134.38610840 502.26815796]
[134.38610840 517.26818848]
[134.38610840 532.26818848]
[134.38610840 547.26818848]
[134.38610840 562.26818848]
[134.38610840 577.26818848]
[134.38610840 592.26818848]
[134.38610840 607.26818848]
[134.38610840 622.26818848]
[134.38610840 637.26818848]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[23 129]
[24 128]
[25 127]
[26 126]
[27 125]
[28 124]
[33 113]
[34 112]
[35 111]
[36 110]
[37 109]
[39 107]
[40 106]
[41 105]
[44 65]
[45 64]
[46 63]
[47 62]
[83 92]
[84 91]
[85 90]
[97 104]
[98 103]
[114 122]
[115 121]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
