%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:34 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGAACCUAGGCCUCCUAUUUAUUCUAGCCACCUCUAGCCUAGCCGUUUACUCAAUCCUCUGAUCAxxxxxxxxxxUGAGAACCAAAAUGAACGAAAAUCUGUUCGCUUCAUUCAUUGCCCCCACAAUCCUAGGCCUACCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[102.85384369 288.47323608]
[102.85384369 273.47323608]
[102.85384369 258.47323608]
[102.85384369 243.47322083]
[102.85384369 228.47322083]
[102.85384369 213.47322083]
[102.85384369 198.47322083]
[102.85384369 183.47322083]
[102.85384369 168.47322083]
[102.85384369 153.47322083]
[91.00704193 144.27250671]
[76.47383118 147.98541260]
[61.94061279 151.69831848]
[47.48459625 155.70126343]
[33.11156845 159.99266052]
[18.73854256 164.28405762]
[4.36551571 168.57545471]
[-10.00751114 172.86685181]
[-24.38053894 177.15824890]
[-23.50792694 192.20269775]
[-26.12891769 207.04273987]
[-32.10216522 220.87809753]
[-41.10554123 232.96263123]
[-52.65349960 242.64463806]
[-66.12328339 249.40199280]
[-80.78847504 252.87026978]
[-95.85820007 252.86241150]
[-110.51976776 249.37887573]
[-123.98250580 242.60749817]
[-135.52037048 232.91346741]
[-144.51115417 220.81956482]
[-150.47000122 206.97799683]
[-153.07553101 192.13522339]
[-152.18725586 177.09169006]
[-147.85305786 162.65869141]
[-140.30670166 149.61457825]
[-129.95512390 138.66278076]
[-117.35659027 130.39393616]
[-103.19052124 125.25397491]
[-88.22087860 123.52008057]
[-73.25494385 125.28575897]
[-59.09982300 130.45579529]
[-46.51887894 138.75135803]
[-36.19058609 149.72511292]
[-28.67193604 162.78523254]
[-14.29890919 158.49382019]
[0.07411800 154.20242310]
[14.44714546 149.91102600]
[28.82017136 145.61962891]
[43.19319916 141.32823181]
[46.23205566 137.57803345]
[51.68098450 135.73042297]
[58.22771072 137.16510010]
[72.76092529 133.45219421]
[87.29414368 129.73928833]
[72.54299164 112.65621948]
[73.15563965 91.60217285]
[86.78947449 77.58184052]
[83.22216034 63.01220703]
[79.65484619 48.44257355]
[76.08753204 33.87293625]
[70.80085754 19.83544922]
[63.87092972 6.53221226]
[56.94100189 -6.77102470]
[42.82458878 -15.11721325]
[43.26493454 -31.51044846]
[57.80904770 -39.08677292]
[71.49519348 -30.05231667]
[70.24423981 -13.70095158]
[77.17416382 -0.39771429]
[84.10409546 12.90552235]
[86.12220001 -1.95809913]
[94.29262543 -14.53761101]
[107.05143738 -22.42511368]
[121.95641327 -24.11082649]
[136.15452576 -19.27207756]
[146.92807007 -8.83507633]
[152.21479797 5.20238829]
[151.00279236 20.15334129]
[143.52401733 33.15596008]
[131.21003723 41.72135162]
[116.41792297 44.20997620]
[101.97909546 40.14548111]
[90.65716553 30.30562401]
[94.22447968 44.87525940]
[97.79179382 59.44489288]
[101.35910797 74.01452637]
[115.75818634 77.33994293]
[126.78789520 88.42826843]
[130.42555237 104.52445221]
[124.67199707 120.90830231]
[138.54449463 115.20272827]
[152.41700745 109.49716187]
[166.17257690 103.51515961]
[179.80569458 97.25912476]
[193.43882751 91.00308990]
[207.07194519 84.74705505]
[220.70506287 78.49102020]
[234.33819580 72.23498535]
[247.90803528 65.84286499]
[261.41326904 59.31529617]
[274.91845703 52.78773117]
[288.42367554 46.26016617]
[293.38485718 31.25475121]
[307.54067993 24.22712517]
[322.49282837 29.34665298]
[329.37039185 43.57600784]
[324.09304810 58.47317123]
[309.79177856 65.19991302]
[294.95126343 59.76538086]
[281.44604492 66.29294586]
[267.94082642 72.82051086]
[254.43560791 79.34807587]
[249.75569153 85.12270355]
[240.59422302 85.86810303]
[226.96110535 92.12413788]
[213.32797241 98.38017273]
[199.69485474 104.63620758]
[186.06173706 110.89225006]
[172.42861938 117.14828491]
[169.94309998 121.28602600]
[164.80549622 123.87628937]
[158.12257385 123.36966705]
[144.25007629 129.07524109]
[130.37756348 134.78080750]
[145.28723145 136.42453003]
[160.19689941 138.06825256]
[174.41365051 133.28456116]
[189.40589905 132.80235291]
[203.90068054 136.66259766]
[216.66726685 144.53750610]
[226.62167358 155.75845337]
[232.91870117 169.37269592]
[235.02368164 184.22425842]
[232.75787354 199.05213928]
[226.31367493 212.59733582]
[216.23823547 223.70974731]
[203.38705444 231.44584656]
[188.85130310 235.14877319]
[173.86515808 234.50411987]
[159.70108032 229.56661987]
[147.56170654 220.75552368]
[138.47776794 208.81893921]
[133.22055054 194.77038574]
[132.23661804 179.80070496]
[125.04522705 166.63696289]
[117.85384369 153.47322083]
[117.85384369 168.47322083]
[117.85384369 183.47322083]
[117.85384369 198.47322083]
[117.85384369 213.47322083]
[117.85384369 228.47322083]
[117.85384369 243.47322083]
[117.85384369 258.47323608]
[117.85384369 273.47323608]
[117.85384369 288.47323608]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 156]
[2 155]
[3 154]
[4 153]
[5 152]
[6 151]
[7 150]
[8 149]
[9 148]
[10 147]
[11 55]
[12 54]
[13 53]
[14 50]
[15 49]
[16 48]
[17 47]
[18 46]
[19 45]
[58 87]
[59 86]
[60 85]
[61 84]
[62 71]
[63 70]
[64 69]
[91 125]
[92 124]
[93 123]
[94 120]
[95 119]
[96 118]
[97 117]
[98 116]
[99 115]
[100 113]
[101 112]
[102 111]
[103 110]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
