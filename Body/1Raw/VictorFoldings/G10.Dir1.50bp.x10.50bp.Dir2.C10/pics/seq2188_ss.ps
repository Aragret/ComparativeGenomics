%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:20 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGACACCCGUCUAUGUAGCAAAAUAGUGGGAAGAUUUAUAGGUAGAGGCGACAAACCUACCGxxxxxxxxxxAAUUGAAAACAAAAUACUCAAAUGGGCCUGUCCUUGUAGUAUAAACUAAUACACCAGUCUCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[92.50000000 250.30464172]
[92.50000000 235.30464172]
[92.50000000 220.30464172]
[92.50000000 205.30464172]
[92.50000000 190.30464172]
[92.50000000 175.30464172]
[92.50000000 160.30464172]
[92.50000000 145.30464172]
[92.50000000 130.30464172]
[92.50000000 115.30464172]
[86.07080078 111.44259644]
[72.95236206 118.71628571]
[73.21239471 103.71851349]
[66.78319550 99.85646820]
[53.54061127 106.90160370]
[40.29802322 113.94673920]
[35.76740646 126.06809998]
[24.53979301 131.65019226]
[12.91101265 128.17472839]
[-0.47527176 134.94284058]
[-13.86155701 141.71095276]
[-27.24784088 148.47906494]
[-29.59003067 163.81835938]
[-40.52502060 174.82769775]
[-55.84808350 177.27378845]
[-69.66719055 170.21603394]
[-76.66861725 156.36830139]
[-74.16016388 141.05531311]
[-63.10638809 130.16525269]
[-47.75769043 127.88553619]
[-34.01595688 135.09278870]
[-20.62967110 128.32467651]
[-7.24338675 121.55655670]
[6.14289856 114.78844452]
[14.90107059 99.61299133]
[33.25288773 100.70415497]
[46.49547577 93.65901947]
[59.73806000 86.61388397]
[81.44879913 79.98631287]
[97.05111694 88.21402740]
[101.95266724 74.03746796]
[101.80500031 64.83801270]
[107.10646820 59.61880112]
[112.30187988 45.54728317]
[117.49729919 31.47576332]
[122.69271088 17.40424347]
[127.88813019 3.33272505]
[132.19570923 -11.03545952]
[135.59869385 -25.64435196]
[139.00166321 -40.25324249]
[137.89953613 -49.38763809]
[142.63038635 -55.12913132]
[138.54269409 -70.41314697]
[149.18472290 -80.83411407]
[152.89088440 -95.36904907]
[156.59704590 -109.90398407]
[160.30320740 -124.43891907]
[154.39062500 -135.94958496]
[157.82202148 -148.00961304]
[168.22085571 -154.26834106]
[172.22859192 -168.72303772]
[158.48579407 -174.80197144]
[145.77459717 -182.81716919]
[134.36595154 -192.59779358]
[124.50301361 -203.93534851]
[116.39602661 -216.58819580]
[110.21778107 -230.28663635]
[106.09997559 -244.73867798]
[104.13037872 -259.63629150]
[104.35097504 -274.66189575]
[106.75705719 -289.49526978]
[111.29734039 -303.82019043]
[117.87504578 -317.33135986]
[126.34998322 -329.74075317]
[136.54148865 -340.78390503]
[148.23234558 -350.22540283]
[161.17335510 -357.86398315]
[175.08868408 -363.53686523]
[189.68171692 -367.12313843]
[204.64140320 -368.54629517]
[219.64889526 -367.77606201]
[234.38427734 -364.82885742]
[248.53349304 -359.76745605]
[261.79492188 -352.69979858]
[273.88592529 -343.77645874]
[284.54876709 -333.18771362]
[293.55618286 -321.15924072]
[300.71615601 -307.94738770]
[305.87606812 -293.83380127]
[308.92596436 -279.11932373]
[309.80081177 -264.11758423]
[308.48196411 -249.14833069]
[304.99755859 -234.53063965]
[299.42184448 -220.57609558]
[291.87365723 -207.58213806]
[282.51391602 -195.82574463]
[271.54211426 -185.55747986]
[259.19210815 -176.99623108]
[245.72711182 -170.32447815]
[231.43418884 -165.68441772]
[216.61796570 -163.17497253]
[201.59425354 -162.84962463]
[186.68327332 -164.71530151]
[182.67553711 -150.26060486]
[188.00021362 -133.56785583]
[174.83813477 -120.73275757]
[171.13197327 -106.19782257]
[167.42581177 -91.66288757]
[163.71965027 -77.12795258]
[168.07244873 -62.88356400]
[157.16532898 -51.42296982]
[153.61056519 -36.85026550]
[150.20758057 -22.24137306]
[146.80461121 -7.63248110]
[160.27415466 -14.23334503]
[174.52723694 -9.55898285]
[181.47160339 3.73671770]
[177.16458130 18.10506821]
[164.05148315 25.38838196]
[149.57733154 21.45152664]
[141.95964050 8.52814007]
[136.76423645 22.59965897]
[131.56881714 36.67118073]
[126.37339783 50.74269867]
[121.17798615 64.81421661]
[116.12922668 78.93901825]
[111.22767639 93.11557770]
[120.60595703 81.40883636]
[133.83833313 74.34453583]
[148.78372192 73.06572723]
[163.02388000 77.77932739]
[174.25465393 87.72264862]
[180.65884399 101.28680420]
[181.20022583 116.27703094]
[175.79118347 130.26782227]
[165.30693054 140.99539185]
[151.44390869 146.72395325]
[136.44520569 146.52658081]
[122.73770905 140.43521118]
[112.53938293 129.43548584]
[107.50000000 115.30464172]
[107.50000000 130.30464172]
[107.50000000 145.30464172]
[107.50000000 160.30464172]
[107.50000000 175.30464172]
[107.50000000 190.30464172]
[107.50000000 205.30464172]
[107.50000000 220.30464172]
[107.50000000 235.30464172]
[107.50000000 250.30464172]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[14 38]
[15 37]
[16 36]
[19 34]
[20 33]
[21 32]
[22 31]
[40 127]
[41 126]
[43 125]
[44 124]
[45 123]
[46 122]
[47 121]
[48 114]
[49 113]
[50 112]
[52 111]
[54 109]
[55 108]
[56 107]
[57 106]
[60 104]
[61 103]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
