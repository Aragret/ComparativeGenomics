%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:37 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGAACCCCCUUCGACCUUGCCGAAGGGGAGUCCGAACUAGUCUCAGGCUUCAACAUCGAAUAxxxxxxxxxxCUCCUCUAUCUUAGGGGCCAUCAAUUUCAUCACAACAAUUAUCAAUAUAAAACCCCCUGCCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[91.69226074 274.51797485]
[91.69226074 259.51797485]
[91.69226074 244.51795959]
[91.69226074 229.51795959]
[91.69226074 214.51795959]
[91.69226074 199.51795959]
[91.69226074 184.51795959]
[91.69226074 169.51795959]
[91.69226074 154.51795959]
[91.69226074 139.51795959]
[87.07459259 135.32341003]
[83.46671295 130.67416382]
[80.89627075 125.76948547]
[79.35520935 120.80622101]
[66.41715240 128.39613342]
[53.47909927 135.98603821]
[40.54104233 143.57594299]
[27.60298729 151.16584778]
[14.66493130 158.75576782]
[1.72687531 166.34567261]
[-11.21118069 173.93557739]
[-13.64118290 189.38320923]
[-25.46610641 199.61575317]
[-41.10258484 199.80174255]
[-53.16754913 189.85334778]
[-55.96429443 174.46789551]
[-48.17227936 160.90992737]
[-33.47066116 155.58110046]
[-18.80108833 160.99752808]
[-5.86303282 153.40760803]
[7.07502317 145.81770325]
[20.01307869 138.22779846]
[32.95113373 130.63789368]
[45.88919067 123.04798126]
[58.82724762 115.45807648]
[71.76530457 107.86816406]
[75.03260803 84.64632416]
[94.28199005 71.25264740]
[95.21762085 56.28185272]
[80.29834747 52.36726379]
[66.42694855 45.63301849]
[54.13037109 36.33694077]
[43.87535477 24.83413124]
[36.05070496 11.56341076]
[30.95256042 -2.96942520]
[28.77318001 -18.21088028]
[29.59369659 -33.58084106]
[33.38109970 -48.49465942]
[39.98955154 -62.38537979]
[49.16601181 -74.72530365]
[60.55991364 -85.04604340]
[73.73657990 -92.95626831]
[88.19377136 -98.15658569]
[103.38085938 -100.45084381]
[104.00483704 -115.43785858]
[104.62881470 -130.42488098]
[105.25279236 -145.41189575]
[96.91730499 -132.94114685]
[85.97544861 -122.68074799]
[72.99517059 -115.16327667]
[58.65022278 -110.77892303]
[43.68519211 -109.75527954]
[28.87684631 -112.14546204]
[14.99382877 -117.82540894]
[2.75674486 -126.50029755]
[-7.19923067 -137.71986389]
[-14.35732460 -150.90173340]
[-18.34599113 -165.36169434]
[-18.95819664 -180.34919739]
[-16.16216087 -195.08630371]
[-10.10301781 -208.80805969]
[-1.09527028 -220.80224609]
[10.39352798 -230.44628906]
[23.76704216 -237.23959351]
[38.33111191 -240.82957458]
[53.32977295 -241.02987671]
[67.98451233 -237.83009338]
[81.53466797 -231.39633179]
[93.27690125 -222.06253052]
[102.60173035 -210.31315613]
[109.02513885 -196.75808716]
[112.21371460 -182.10090637]
[112.00169373 -167.10043335]
[119.99161530 -179.79536438]
[127.98152924 -192.49028015]
[123.02547455 -207.32173157]
[128.81044006 -221.84991455]
[142.60493469 -229.21508789]
[157.89562988 -225.93963623]
[167.46272278 -213.57012939]
[166.78892517 -197.94706726]
[156.19238281 -186.44717407]
[140.67645264 -184.50036621]
[132.68653870 -171.80543518]
[124.69662476 -159.11051941]
[120.23981476 -144.78791809]
[119.61583710 -129.80090332]
[118.99185944 -114.81388092]
[118.36788177 -99.82686615]
[132.59466553 -96.52021027]
[145.96980286 -90.64129639]
[158.03251648 -82.39098358]
[168.36692810 -72.05185699]
[176.61640930 -59.97856903]
[182.49586487 -46.58562088]
[185.80165100 -32.33318710]
[186.41850281 -17.71127129]
[184.32371521 -3.22287035]
[179.58781433 10.63332653]
[172.37231445 23.38010788]
[162.92411804 34.57817078]
[151.56713867 43.84127045]
[138.69113159 50.84952545]
[124.73835754 55.36047745]
[110.18840790 57.21747971]
[109.25277710 72.18827057]
[124.23370361 77.59934235]
[135.61689758 91.18568420]
[139.01509094 110.41682434]
[152.40138245 117.18493652]
[165.78765869 123.95305634]
[179.17395020 130.72117615]
[195.50894165 129.27204895]
[204.70867920 142.84764099]
[197.30926514 157.48254395]
[180.92257690 158.12162781]
[172.40583801 144.10745239]
[159.01954651 137.33934021]
[145.63327026 130.57122803]
[132.24697876 123.80310822]
[125.85829926 127.73181915]
[134.36106873 140.08912659]
[142.86383057 152.44644165]
[155.45954895 160.59185791]
[155.28939819 175.59089661]
[142.51213074 183.44847107]
[129.04977417 176.83297729]
[127.46370697 161.91671753]
[120.27232361 148.75299072]
[113.08094025 135.58924866]
[106.69226074 139.51795959]
[106.69226074 154.51795959]
[106.69226074 169.51795959]
[106.69226074 184.51795959]
[106.69226074 199.51795959]
[106.69226074 214.51795959]
[106.69226074 229.51795959]
[106.69226074 244.51795959]
[106.69226074 259.51797485]
[106.69226074 274.51797485]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[14 36]
[15 35]
[16 34]
[17 33]
[18 32]
[19 31]
[20 30]
[21 29]
[38 116]
[39 115]
[54 99]
[55 98]
[56 97]
[57 96]
[83 95]
[84 94]
[85 93]
[119 130]
[120 129]
[121 128]
[122 127]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
