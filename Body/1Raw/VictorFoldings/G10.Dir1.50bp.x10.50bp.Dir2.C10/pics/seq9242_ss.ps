%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:26 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGGCCUGAUACUGGCAUUUUGUAGAUGUGGUUUGACUAUUUCUGUAUGUCUCCAUCUAUUGAxxxxxxxxxxCCCAUCCAACAUCUCCGCAUGAUGAAACUUCGGCUCACUCCUUGGCGCCUGCCUGAUCCUCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[99.33038330 287.57662964]
[99.33038330 272.57662964]
[99.33038330 257.57662964]
[99.33038330 242.57662964]
[99.33038330 227.57662964]
[99.33038330 212.57662964]
[99.33038330 197.57662964]
[99.33038330 182.57662964]
[99.33038330 167.57662964]
[99.33038330 152.57662964]
[85.25886536 147.38121033]
[75.51120758 158.78224182]
[65.76355743 170.18325806]
[62.67648315 185.70036316]
[48.52487183 190.34591675]
[42.82754517 206.31391907]
[25.90641022 205.25962830]
[22.23526573 188.70791626]
[37.12385178 180.59826660]
[39.51371002 165.89663696]
[54.36253738 160.43560791]
[64.11019135 149.03459167]
[73.85784149 137.63356018]
[62.31540680 100.84144592]
[82.06557465 76.49519348]
[76.28929901 62.65197372]
[70.51303101 48.80875778]
[56.82498550 50.95953369]
[41.96017838 44.47356796]
[31.36603355 29.16898727]
[17.70979309 22.96357918]
[4.05355215 16.75817299]
[-9.60268879 10.55276585]
[-23.25893021 4.34735823]
[-36.91517258 -1.85804868]
[-46.08814621 -2.57105660]
[-50.78887939 -8.33722973]
[-64.31307220 -14.82539463]
[-69.64656830 -14.40900707]
[-74.13380432 -15.96370316]
[-77.15643311 -18.82121658]
[-78.45916748 -22.16342926]
[-91.55232239 -29.48253441]
[-104.64547729 -36.80163956]
[-117.43189240 -28.38937950]
[-132.66421509 -26.89437675]
[-146.84216309 -32.66017532]
[-156.70774841 -44.36183167]
[-159.99392700 -59.31039810]
[-155.94557190 -74.07079315]
[-145.49295044 -85.25119781]
[-131.03800964 -90.28243256]
[-115.90238953 -88.00835419]
[-103.56413269 -78.95153046]
[-96.85848999 -65.19315338]
[-97.32637024 -49.89479446]
[-84.23321533 -42.57568741]
[-71.14006042 -35.25658417]
[-57.82490540 -28.34958458]
[-44.30071640 -21.86141968]
[-30.70976448 -15.51428986]
[-17.05352402 -9.30888271]
[-3.39728189 -3.10347581]
[10.25895882 3.10193133]
[23.91520119 9.30733871]
[37.57144165 15.51274586]
[50.58774948 8.05783558]
[52.14533234 -6.86107683]
[53.70291138 -21.77998924]
[39.96043015 -28.13788605]
[29.02868271 -38.61527252]
[22.09346771 -52.07564163]
[19.90706444 -67.05891418]
[22.70663834 -81.93981171]
[30.18851089 -95.10416412]
[41.54110718 -105.12401581]
[55.53297806 -110.91246796]
[70.64639282 -111.84164429]
[85.24196625 -107.81076050]
[97.73647308 -99.25704193]
[106.77459717 -87.10833740]
[111.37596130 -72.68245697]
[111.04144287 -57.54419708]
[105.80732727 -43.33565521]
[96.24136353 -31.59806061]
[83.38121033 -23.60462189]
[68.62182617 -20.22240829]
[67.06424713 -5.30349588]
[65.50666046 9.61541653]
[78.67524719 16.79792595]
[90.37487030 7.41076326]
[102.07449341 -1.97639859]
[113.77411652 -11.36356068]
[113.93659973 -27.00029945]
[124.15136719 -38.84059143]
[139.59532166 -41.29381561]
[152.97630310 -33.20162964]
[157.97621155 -18.38492012]
[152.23425293 -3.83968329]
[138.46159363 3.56626558]
[123.16127777 0.33606324]
[111.46165466 9.72322464]
[99.76203156 19.11038780]
[88.06240845 28.49754906]
[84.35624695 43.03248596]
[90.13252258 56.87570190]
[95.90879059 70.71891785]
[113.04395294 69.00298309]
[130.33886719 77.63060760]
[141.55706787 95.90623474]
[141.47842407 119.47402954]
[156.05113220 123.02879333]
[171.29179382 118.78232574]
[181.82289124 129.31536865]
[192.93051147 118.60909271]
[208.06750488 115.63003540]
[222.40373230 121.32881165]
[231.36456299 133.88696289]
[232.09060669 149.29724121]
[224.35018921 162.64225769]
[210.61326599 169.66368103]
[195.26322937 168.12100220]
[183.19821167 158.50648499]
[178.26814270 143.88807678]
[164.06980896 148.38880920]
[152.49636841 137.60150146]
[137.92366028 134.04673767]
[132.02534485 138.67921448]
[143.10984802 148.78532410]
[154.19435120 158.89144897]
[165.27885437 168.99757385]
[178.00389099 176.93945312]
[181.65229797 191.48899841]
[174.18022156 204.49545288]
[159.77354431 208.67253113]
[146.50300598 201.68019104]
[141.80285645 187.43537903]
[134.61146545 174.27163696]
[127.42008209 161.10789490]
[120.22870636 147.94415283]
[114.33038330 152.57662964]
[114.33038330 167.57662964]
[114.33038330 182.57662964]
[114.33038330 197.57662964]
[114.33038330 212.57662964]
[114.33038330 227.57662964]
[114.33038330 242.57662964]
[114.33038330 257.57662964]
[114.33038330 272.57662964]
[114.33038330 287.57662964]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[11 23]
[12 22]
[13 21]
[15 19]
[25 107]
[26 106]
[27 105]
[30 66]
[31 65]
[32 64]
[33 63]
[34 62]
[35 61]
[37 60]
[38 59]
[42 58]
[43 57]
[44 56]
[67 89]
[68 88]
[69 87]
[90 104]
[91 103]
[92 102]
[93 101]
[111 127]
[112 126]
[114 124]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
