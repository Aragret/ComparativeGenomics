%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:55 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGUUCGCUUCGAAGCGAAAAGUCCUAAUAGUAGAAGAACCCUCCAUAAACCUGGAGUGACUAUAUxxxxxxxxxxUAUCUGCUUCAUCCGCCAACUAAUAUUUCACUUUACAUCCAAACAUCACUUUGGCUUCGAAGCCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[127.88668823 261.40106201]
[127.58655548 246.40405273]
[127.28642273 231.40705872]
[126.98629761 216.41006470]
[126.68616486 201.41307068]
[126.38603210 186.41606140]
[126.08589935 171.41906738]
[125.78576660 156.42207336]
[125.48563385 141.42507935]
[121.19423676 127.05204773]
[113.22283173 114.34548950]
[98.28360748 112.99662781]
[88.16513062 124.06985474]
[78.04665375 135.14308167]
[67.92817688 146.21632385]
[57.80970001 157.28955078]
[54.81287003 173.41255188]
[39.26344299 178.62286377]
[27.15734100 167.56057739]
[30.94828033 151.60560608]
[46.73646927 147.17108154]
[56.85494614 136.09783936]
[66.97341919 125.02461243]
[77.09189606 113.95138550]
[87.21037292 102.87815094]
[90.63173676 88.27355194]
[86.48435974 73.85831451]
[82.33697510 59.44306946]
[78.18959045 45.02782440]
[74.04221344 30.61258316]
[61.55551147 25.47451210]
[54.42725372 14.23711395]
[55.08096313 1.14079368]
[63.05236435 -9.02402496]
[59.19424438 -23.51936531]
[55.33612442 -38.01470566]
[51.47800446 -52.51004791]
[40.45150375 -63.85583115]
[44.65493393 -78.14500427]
[40.79681396 -92.64034271]
[36.93869400 -107.13568878]
[22.86796761 -107.35929871]
[9.35251808 -111.77448273]
[-2.37481022 -120.06902313]
[-11.21782207 -131.57301331]
[-16.31920815 -145.31237793]
[-17.14309883 -160.09114075]
[-13.53005886 -174.59545898]
[-5.71893167 -187.51045227]
[-17.28427887 -197.06256104]
[-28.84962654 -206.61466980]
[-40.41497421 -216.16677856]
[-51.98032379 -225.71888733]
[-67.68751526 -223.96966553]
[-79.97870636 -233.90454102]
[-81.56176758 -249.62934875]
[-71.49748230 -261.81481934]
[-55.75682068 -263.23153687]
[-43.67843628 -253.03898621]
[-42.42821884 -237.28422546]
[-30.86286926 -227.73211670]
[-19.29752159 -218.18002319]
[-7.73217344 -208.62791443]
[3.83317447 -199.07580566]
[17.52820587 -205.19512939]
[18.12834930 -220.18312073]
[18.72849274 -235.17111206]
[4.24501562 -239.35348511]
[-8.81633854 -246.88107300]
[-19.69619751 -257.31619263]
[-27.76202393 -270.05221558]
[-32.54487991 -284.34863281]
[-33.76669312 -299.37429810]
[-31.35643196 -314.25564575]
[-25.45422745 -328.12744141]
[-16.40322304 -340.18328857]
[-4.72963238 -349.72216797]
[8.88785553 -356.18960571]
[23.65753937 -359.20950317]
[38.72072601 -358.60635376]
[53.20166779 -354.41519165]
[66.25845337 -346.87969971]
[77.13198853 -336.43795776]
[85.19008636 -323.69708252]
[89.96427155 -309.39776611]
[91.17697906 -294.37133789]
[88.75769806 -279.49148560]
[82.84708405 -265.62322998]
[73.78877258 -253.57290649]
[62.10940170 -244.04107666]
[48.48799515 -237.58192444]
[33.71648407 -234.57096863]
[33.11634064 -219.58297729]
[32.51619339 -204.59498596]
[47.47462082 -201.81462097]
[60.81327820 -194.77140808]
[71.36074066 -184.17172241]
[78.21706390 -171.03004456]
[80.83029175 -156.57225037]
[79.04021454 -142.12127686]
[73.08601379 -128.97613525]
[63.57759857 -118.29510498]
[51.43403625 -110.99380493]
[55.29215622 -96.49846649]
[59.15027618 -82.00312805]
[69.90081787 -71.69414520]
[65.97334290 -56.36816788]
[69.83146667 -41.87282562]
[73.68958282 -27.37748528]
[77.54770660 -12.88214493]
[92.43071747 -5.10487795]
[97.20390320 11.34625053]
[88.45745087 26.46520042]
[92.60483551 40.88044357]
[96.75222015 55.29568481]
[100.89959717 69.71092987]
[105.04698181 84.12617493]
[125.92939758 106.37408447]
[133.90080261 119.08065033]
[133.59721375 104.08371735]
[136.46661377 89.36072540]
[142.37963867 75.57536316]
[151.06973267 63.34907150]
[162.14515686 53.23299408]
[175.10662842 45.68315506]
[189.36988831 41.03990173]
[204.29191589 39.51254272]
[219.20007324 41.16993332]
[233.42230225 45.93735886]
[246.31745911 53.59990311]
[257.30426025 63.81215286]
[265.88745117 76.11374664]
[271.68005371 89.95012665]
[274.42098999 104.69757843]
[273.98669434 119.69129181]
[270.39672852 134.25535583]
[263.81289673 147.73324585]
[254.53205872 159.51737976]
[242.97254944 169.07655334]
[229.65547180 175.97982788]
[215.18113708 179.91603088]
[200.20204163 180.70770264]
[185.39343262 178.31916809]
[171.42286682 172.85807800]
[158.92013550 164.57064819]
[148.44883728 153.83044434]
[140.48263550 141.12493896]
[140.78276062 156.12194824]
[141.08290100 171.11894226]
[141.38302612 186.11593628]
[141.68316650 201.11293030]
[141.98329163 216.10992432]
[142.28341675 231.10693359]
[142.58355713 246.10392761]
[142.88368225 261.10092163]
[145.45941162 280.31069946]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 155]
[2 154]
[3 153]
[4 152]
[5 151]
[6 150]
[7 149]
[8 148]
[9 147]
[10 119]
[11 118]
[12 25]
[13 24]
[14 23]
[15 22]
[16 21]
[26 117]
[27 116]
[28 115]
[29 114]
[30 113]
[34 110]
[35 109]
[36 108]
[37 107]
[39 105]
[40 104]
[41 103]
[49 64]
[50 63]
[51 62]
[52 61]
[53 60]
[65 94]
[66 93]
[67 92]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
