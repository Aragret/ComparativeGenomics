%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:22 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGAAACCACAAAGACAUUGGAACACUAUACCUAUUAUUCGGCGCAUGAGCUGGAGUCCUAGGxxxxxxxxxxAGCAGGAAUACCUUUCCUCACAGGUUUCUACUCCAAAGACCACAUCAUCGAAACCGCAAACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[113.18183136 263.86578369]
[113.18183136 248.86579895]
[113.18183136 233.86579895]
[113.18183136 218.86579895]
[113.18183136 203.86579895]
[113.18183136 188.86579895]
[113.18183136 173.86579895]
[113.18183136 158.86579895]
[113.18183136 143.86579895]
[113.18183136 128.86579895]
[107.23564148 124.29492950]
[93.37259674 130.02345276]
[95.34326172 115.15319824]
[89.39707184 110.58232880]
[74.90147400 114.43949127]
[77.98949432 127.56674957]
[70.38059235 143.03434753]
[58.48821259 152.17608643]
[46.59583282 161.31782532]
[43.09822083 176.97497559]
[28.61371231 183.87269592]
[14.25357819 176.71963501]
[11.03368664 161.00303650]
[21.42406082 148.77929688]
[37.45409775 149.42544556]
[49.34647751 140.28370667]
[61.23885727 131.14196777]
[56.33730698 116.96541595]
[41.33811569 117.12145233]
[26.33892822 117.27748871]
[20.70067024 131.39408875]
[10.08582878 142.27497864]
[-3.88690829 148.26087952]
[-19.08679962 148.43899536]
[-33.19597244 142.78218079]
[-44.06288147 132.15303040]
[-50.03040314 118.17243195]
[-50.18852997 102.97232056]
[-44.51314926 88.87059784]
[-33.86972046 78.01768494]
[-19.88128090 72.06855774]
[-4.68097401 71.93042755]
[9.41326809 77.62435150]
[20.25217438 88.28205109]
[26.18289185 102.27829742]
[41.18207932 102.12226105]
[56.18127060 101.96622467]
[71.04431915 99.94389343]
[85.53990936 96.08673096]
[97.80228424 87.44761658]
[106.31336975 75.09604645]
[108.62900543 66.19156647]
[115.13222504 62.57855988]
[123.89842987 50.40672302]
[132.66464233 38.23488617]
[141.43084717 26.06304932]
[137.04804993 7.31461334]
[147.15835571 -8.72453403]
[165.38916016 -12.72987843]
[172.29615784 -26.04503441]
[179.20315552 -39.36019135]
[186.11015320 -52.67534637]
[193.01715088 -65.99050140]
[199.92414856 -79.30565643]
[187.10034180 -71.52426147]
[172.62445068 -67.59381104]
[157.62617493 -67.82103729]
[143.27598572 -72.18821716]
[130.69380188 -80.35452271]
[120.86153412 -91.68265533]
[114.54650879 -105.28855133]
[112.24154663 -120.11039734]
[114.12654114 -134.99148560]
[120.05437469 -148.77047729]
[129.56243896 -160.37207031]
[141.90872192 -168.89083862]
[156.12969971 -173.66197205]
[171.11555481 -174.31314087]
[185.69679260 -170.79353333]
[198.73545837 -163.37780762]
[209.21401978 -152.64468384]
[216.31472778 -139.43180847]
[219.48341370 -124.77031708]
[218.47280884 -109.80440521]
[213.36050415 -95.69962311]
[225.06011963 -105.08678436]
[236.75975037 -114.47394562]
[248.45938110 -123.86110687]
[253.23458862 -131.72552490]
[260.50143433 -133.31881714]
[272.39382935 -142.46054077]
[284.28619385 -151.60227966]
[296.17858887 -160.74401855]
[295.62432861 -176.25119019]
[304.31875610 -189.10369873]
[318.91864014 -194.35948181]
[333.81002808 -189.99758911]
[343.26687622 -177.69526672]
[343.65286255 -162.18298340]
[334.81954956 -149.42555237]
[320.16351318 -144.32846069]
[305.32031250 -148.85163879]
[293.42794800 -139.70989990]
[281.53555298 -130.56816101]
[269.64318848 -121.42643738]
[257.84652710 -112.16148376]
[246.14691162 -102.77432251]
[234.44728088 -93.38716125]
[222.74766541 -84.00000000]
[213.23930359 -72.39865875]
[206.33230591 -59.08350372]
[199.42530823 -45.76834488]
[192.51831055 -32.45318985]
[185.61131287 -19.13803482]
[178.70431519 -5.82287979]
[182.35848999 -0.99725652]
[184.68943787 4.58900833]
[185.54895020 10.58074379]
[201.41812134 6.44535065]
[212.73985291 18.30917740]
[207.86732483 33.96773529]
[191.81297302 37.31284332]
[181.09213257 24.90334129]
[169.16123962 34.33502197]
[153.60267639 34.82925797]
[144.83647156 47.00109482]
[136.07026672 59.17292786]
[127.30406189 71.34476471]
[118.66493988 83.60713196]
[110.15385437 95.95870972]
[123.54470062 89.19961548]
[136.37765503 81.43331909]
[151.34034729 80.37605286]
[165.13786316 86.26063538]
[174.73190308 97.79122925]
[178.00975037 112.42870331]
[174.24960327 126.94976807]
[164.27949524 138.15676880]
[150.29490662 143.58181763]
[135.37321472 142.02954102]
[128.18183899 128.86579895]
[128.18183899 143.86579895]
[128.18183899 158.86579895]
[128.18183899 173.86579895]
[128.18183899 188.86579895]
[128.18183899 203.86579895]
[128.18183899 218.86579895]
[128.18183899 233.86579895]
[128.18183899 248.86579895]
[128.18183899 263.86578369]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[14 49]
[15 48]
[17 27]
[18 26]
[19 25]
[28 47]
[29 46]
[30 45]
[50 130]
[51 129]
[53 128]
[54 127]
[55 126]
[56 125]
[59 115]
[60 114]
[61 113]
[62 112]
[63 111]
[64 110]
[85 109]
[86 108]
[87 107]
[88 106]
[90 105]
[91 104]
[92 103]
[93 102]
[118 123]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
