%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:23 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGAUUCCCCCGAGCAAUCUCAAUUACAAUAUAUACACCAACAAACAAUGUUCAACCAGUAACxxxxxxxxxxCAGGAUACUCCUCAAUAGCCAUCGCUGUAGUAUAUCCAAAGACAACCAUCAUUCCCCCUACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[50.14689255 252.04595947]
[39.86679459 248.32330322]
[29.86244011 243.90632629]
[20.18066788 238.81529236]
[10.86684513 233.07366943]
[3.95984602 246.38882446]
[-2.94715238 259.70397949]
[-9.85415077 273.01913452]
[-16.76115036 286.33428955]
[-15.48202515 302.68347168]
[-29.15258789 311.74148560]
[-43.70973587 304.19024658]
[-44.17832184 287.79779053]
[-30.07630539 279.42727661]
[-23.16930580 266.11212158]
[-16.26230812 252.79698181]
[-9.35530949 239.48182678]
[-2.44831109 226.16667175]
[-13.64407730 216.18394470]
[-26.08351707 224.56608582]
[-38.52295685 232.94822693]
[-45.22855377 247.91375732]
[-61.56730270 249.31991577]
[-70.73130035 235.72016907]
[-63.29341507 221.10476685]
[-46.90510178 220.50878906]
[-34.46566010 212.12664795]
[-22.02622032 203.74449158]
[-28.72826958 195.16659546]
[-34.82895660 186.15766907]
[-40.30070114 176.75975037]
[-45.11885071 167.01667786]
[-49.26179886 156.97378540]
[-52.71108627 146.67776489]
[-55.45147324 136.17646790]
[-57.47100830 125.51858521]
[-58.76108551 114.75353241]
[-59.31647873 103.93113708]
[-59.13536072 93.10147095]
[-58.21930695 82.31456757]
[-56.57329178 71.62021637]
[-54.20565033 61.06772614]
[-51.12805176 50.70571899]
[-47.35542679 40.58186722]
[-42.90590668 30.74270248]
[-37.80073166 21.23339653]
[-32.06415176 12.09754753]
[-44.14413834 3.20519781]
[-56.22412491 -5.68715191]
[-68.30411530 -14.57950115]
[-84.31723785 -13.60001087]
[-94.95966339 -25.60494041]
[-92.06743622 -41.38513565]
[-77.85921478 -48.83538055]
[-63.23434448 -42.24048615]
[-59.41176605 -26.65949059]
[-47.33177567 -17.76713943]
[-35.25178909 -8.87479019]
[-23.17180061 0.01755922]
[-15.05616474 -9.22389793]
[-6.24899626 -17.80887794]
[3.19676924 -25.68577957]
[13.22435951 -32.80726242]
[23.77350426 -39.13052368]
[34.78079987 -44.61755371]
[46.18008804 -49.23537827]
[57.90285492 -52.95624161]
[69.87864685 -55.75777435]
[82.03546906 -57.62314606]
[94.30027008 -58.54114151]
[106.59933472 -58.50624466]
[118.85872650 -57.51866150]
[131.00477600 -55.58433151]
[142.96447754 -52.71488190]
[154.66593933 -48.92755508]
[166.03883362 -44.24511719]
[177.01481628 -38.69570923]
[187.52790833 -32.31268311]
[197.51492310 -25.13441086]
[206.91583252 -17.20403290]
[215.67414856 -8.56921196]
[223.73719788 0.71815169]
[231.05654907 10.60223770]
[243.83390808 2.74481177]
[256.61126709 -5.11261415]
[269.38864136 -12.97003937]
[281.99975586 -21.09158134]
[294.43920898 -29.47372437]
[306.87863159 -37.85586929]
[293.01770020 -43.58946228]
[288.65377808 -57.94064331]
[296.97659302 -70.41986084]
[311.90280151 -71.90581512]
[322.52258301 -61.31239319]
[321.07403564 -46.38309860]
[334.31661987 -53.42823410]
[347.55920410 -60.47336960]
[360.80181885 -67.51850128]
[374.04440308 -74.56363678]
[382.26773071 -88.75196075]
[398.66418457 -88.45392609]
[406.36645508 -73.97612000]
[397.45114136 -60.21207047]
[381.08953857 -61.32105255]
[367.84695435 -54.27591705]
[354.60433960 -47.23078156]
[341.36175537 -40.18564606]
[328.11917114 -33.14051437]
[315.26077271 -25.41642761]
[302.82135010 -17.03428459]
[290.38189697 -8.65214157]
[288.59872437 -4.15816975]
[283.93774414 -0.76602125]
[277.24606323 -0.19268234]
[264.46868896 7.66474342]
[251.69134521 15.52216911]
[238.91398621 23.37959480]
[243.85685730 33.02705002]
[248.13050842 42.99194336]
[251.71466064 53.22791290]
[254.59222412 63.68729401]
[256.74942017 74.32135773]
[258.17581177 85.08055115]
[258.86441040 95.91468811]
[258.81158447 106.77322388]
[258.01730347 117.60547638]
[256.48480225 128.36085510]
[254.22097778 138.98908997]
[251.23596191 149.44052124]
[247.54338074 159.66624451]
[243.16012573 169.61840820]
[238.10630798 179.25041199]
[232.40519714 188.51712036]
[226.08309937 197.37509155]
[219.16921997 205.78277588]
[211.69557190 213.70068359]
[203.69674683 221.09161377]
[195.20985413 227.92080688]
[186.27427673 234.15608215]
[176.93151855 239.76803589]
[167.22499084 244.73017883]
[157.19984436 249.01901245]
[146.90272522 252.61419678]
[136.38159180 255.49858093]
[125.68544006 257.65835571]
[114.86413574 259.08312988]
[103.96813965 259.76580811]
[93.04829407 259.70291138]
[82.15556335 258.89431763]
[71.34082794 257.34347534]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 18]
[6 17]
[7 16]
[8 15]
[9 14]
[19 28]
[20 27]
[21 26]
[47 59]
[48 58]
[49 57]
[50 56]
[83 117]
[84 116]
[85 115]
[86 114]
[87 111]
[88 110]
[89 109]
[95 108]
[96 107]
[97 106]
[98 105]
[99 104]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
