%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:20 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCUCAUCAACAACCGACUAAUCACCACCCAACAAUGACUAAUCAAACUAACCUCAAAACAAAUGAxxxxxxxxxxCUGUUCUUUCAUGGGGAAGCAGAUUUGGGUACCACCCAAGUAUUGACUCACCCAUCAACAACCGCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[147.05590820 441.26986694]
[147.05590820 426.26986694]
[147.05590820 411.26986694]
[147.05590820 396.26986694]
[147.05590820 381.26986694]
[147.05590820 366.26986694]
[147.05590820 351.26986694]
[147.05590820 336.26986694]
[147.05590820 321.26986694]
[147.05590820 306.26986694]
[125.43645477 296.85693359]
[111.10807800 278.05422974]
[107.75010681 254.59324646]
[116.27194214 232.41381836]
[134.56776428 217.16014099]
[130.47120667 202.73037720]
[126.37464905 188.30059814]
[122.27809143 173.87083435]
[111.84609985 167.68156433]
[108.33605957 155.65179443]
[114.16365814 144.10623169]
[110.35298920 129.59835815]
[90.51697540 128.24880981]
[76.48095703 115.63051605]
[73.39202881 98.03292847]
[81.34953308 83.16944122]
[73.72156525 70.25378418]
[56.72464371 66.22467804]
[48.04806137 51.45363617]
[52.62205505 35.29472733]
[44.74039841 22.53229904]
[30.90607262 14.85623550]
[30.80172348 -0.03800384]
[22.92006874 -12.80043030]
[15.03841400 -25.56285667]
[1.53265274 -19.00652885]
[-12.56711483 -13.85021496]
[-27.11620140 -10.14682770]
[-41.96530914 -7.93436861]
[-56.96206665 -7.23554182]
[-71.95257568 -8.05751801]
[-86.78301239 -10.39186287]
[-101.30119324 -14.21462154]
[-115.35813141 -19.48656654]
[-128.80958557 -26.15360069]
[-141.51753235 -34.14730453]
[-153.35154724 -43.38565445]
[-164.19020081 -53.77384949]
[-173.92227173 -65.20529175]
[-182.44789124 -77.56266785]
[-189.67958069 -90.71916962]
[-195.54312134 -104.53980255]
[-199.97834778 -118.88273621]
[-202.93974304 -133.60079956]
[-204.39694214 -148.54293823]
[-204.33494568 -163.55583191]
[-202.75444031 -178.48544312]
[-199.67160034 -193.17854309]
[-195.11808777 -207.48435974]
[-189.14062500 -221.25610352]
[-181.80055237 -234.35244751]
[-173.17317200 -246.63900757]
[-163.34704590 -257.98968506]
[-152.42297363 -268.28802490]
[-140.51309204 -277.42834473]
[-127.73957062 -285.31686401]
[-114.23352051 -291.87258911]
[-100.13352966 -297.02828979]
[-85.58428192 -300.73101807]
[-70.73507690 -302.94284058]
[-55.73828888 -303.64099121]
[-40.74781418 -302.81835938]
[-25.91748238 -300.48336792]
[-11.39947033 -296.65997314]
[2.65723896 -291.38739014]
[16.10840225 -284.71978760]
[28.81598854 -276.72552490]
[40.64959717 -267.48663330]
[51.48779297 -257.09796143]
[61.21936417 -245.66610718]
[69.74444580 -233.30834961]
[76.97554779 -220.15151978]
[82.83848572 -206.33062744]
[87.27307892 -191.98750305]
[90.23383331 -177.26931763]
[91.69036102 -162.32711792]
[91.62771606 -147.31422424]
[90.04654694 -132.38468933]
[86.96306610 -117.69171906]
[82.40892792 -103.38610077]
[76.43085480 -89.61461639]
[69.09020233 -76.51860046]
[60.46228790 -64.23242188]
[50.63565445 -52.88216400]
[39.71113586 -42.58430481]
[27.80084038 -33.44451141]
[35.68249512 -20.68208504]
[43.56414795 -7.91965818]
[56.83472824 -1.15644896]
[57.50282669 14.65064526]
[65.38448334 27.41307068]
[78.24552917 28.60427094]
[88.21011353 37.12517166]
[91.47945404 50.02320862]
[86.63722229 62.62582016]
[94.26519012 75.54147339]
[109.42362213 74.48443604]
[123.60754395 82.68202972]
[131.31942749 98.47013092]
[146.19589233 96.54898071]
[161.07235718 94.62782288]
[175.94882202 92.70666504]
[190.82527161 90.78550720]
[205.70173645 88.86434937]
[220.63603210 80.83917999]
[232.48179626 92.96823883]
[224.10598755 107.70872498]
[207.62289429 103.74081421]
[192.74642944 105.66197205]
[177.86996460 107.58312988]
[162.99351501 109.50428009]
[148.11705017 111.42543793]
[133.24058533 113.34659576]
[124.86087799 125.78768158]
[128.67155457 140.29556274]
[141.92608643 153.04281616]
[136.70785522 169.77427673]
[140.80441284 184.20404053]
[144.90098572 198.63381958]
[148.99754333 213.06358337]
[156.70642090 212.81665039]
[164.34805298 213.82380676]
[171.71990967 216.05667114]
[178.62689209 219.45442200]
[184.88648987 223.92539978]
[190.33358765 229.34965515]
[194.82484436 235.58209229]
[198.24246216 242.45639038]
[200.49725342 249.78941345]
[201.53099060 257.38613892]
[201.31788635 265.04479980]
[199.86524963 272.56222534]
[197.21328735 279.73931885]
[193.43388367 286.38619995]
[188.62875366 292.32739258]
[182.92671204 297.40628052]
[176.48010254 301.48937988]
[169.46087646 304.46975708]
[162.05590820 306.26986694]
[162.05590820 321.26986694]
[162.05590820 336.26986694]
[162.05590820 351.26986694]
[162.05590820 366.26986694]
[162.05590820 381.26986694]
[162.05590820 396.26986694]
[162.05590820 411.26986694]
[162.05590820 426.26986694]
[162.05590820 441.26986694]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 158]
[2 157]
[3 156]
[4 155]
[5 154]
[6 153]
[7 152]
[8 151]
[9 150]
[10 149]
[15 130]
[16 129]
[17 128]
[18 127]
[21 125]
[22 124]
[26 106]
[27 105]
[30 101]
[31 100]
[33 98]
[34 97]
[35 96]
[109 123]
[110 122]
[111 121]
[112 120]
[113 119]
[114 118]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
