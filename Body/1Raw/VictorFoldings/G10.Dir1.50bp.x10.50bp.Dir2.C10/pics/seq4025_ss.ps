%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:37 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGACUAGUCUCAGGCUUCAACAUCGAAUACGCCGCAGGCCCCUUCGCCCUAUUCUUCAUAGCCxxxxxxxxxxACCACGUUCUCCUGAUCAAAUAUCACUCUCCUACUUACAGGACUCAACAUACUAGUCACAGCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[-53.81391525 180.95832825]
[-59.92837524 168.08734131]
[-73.97035217 173.36209106]
[-88.01232910 178.63682556]
[-98.21028900 190.73278809]
[-112.84551239 187.96517944]
[-126.77622986 193.52713013]
[-140.58981323 199.37391663]
[-154.40339661 205.22070312]
[-168.21697998 211.06748962]
[-177.90974426 223.57192993]
[-192.64624023 221.40751648]
[-206.45982361 227.25430298]
[-213.19357300 233.51948547]
[-220.61756897 233.07609558]
[-234.54827881 238.63803101]
[-237.18641663 242.26292419]
[-240.52040100 244.58845520]
[-244.04321289 245.55622864]
[-247.28273010 245.28289795]
[-249.85722351 244.03269958]
[-264.19729614 248.43299866]
[-278.53735352 252.83329773]
[-292.73510742 257.67312622]
[-306.77706909 262.94784546]
[-320.81906128 268.22259521]
[-327.12179565 282.71572876]
[-341.85708618 288.42941284]
[-356.28280640 281.97381592]
[-361.84036255 267.17892456]
[-355.23260498 252.82228088]
[-340.37976074 247.42144775]
[-326.09381104 254.18061829]
[-312.05181885 248.90588379]
[-298.00985718 243.63113403]
[-296.22134399 240.52494812]
[-292.80801392 238.15452576]
[-288.14376831 237.28836060]
[-282.93765259 238.49324036]
[-268.59759521 234.09294128]
[-254.25753784 229.69264221]
[-240.11021423 224.70732117]
[-226.17950439 219.14538574]
[-212.30662537 213.44071960]
[-198.49304199 207.59393311]
[-189.78831482 195.50769043]
[-174.06376648 197.25390625]
[-160.25018311 191.40711975]
[-146.43659973 185.56033325]
[-132.62301636 179.71354675]
[-130.01364136 175.64656067]
[-124.79358673 173.20957947]
[-118.12025452 173.92320251]
[-108.92666626 162.20454407]
[-93.28707123 164.59484863]
[-79.24509430 159.32011414]
[-65.20311737 154.04536438]
[-68.82624054 141.36029053]
[-71.47685242 128.43696594]
[-73.13969421 115.34982300]
[-73.80519104 102.17426300]
[-73.46949768 88.98618317]
[-72.13455963 75.86154175]
[-69.80805969 62.87594986]
[-66.50340271 50.10420990]
[-62.23961639 37.61988449]
[-57.04127121 25.49489212]
[-50.93830872 13.79907894]
[-43.96588516 2.59981537]
[-36.16416168 -8.03838634]
[-27.57808304 -18.05424500]
[-18.25710487 -27.39006615]
[-8.25492096 -35.99207306]
[2.37085271 -43.81071472]
[13.55900669 -50.80094910]
[25.24509430 -56.92251587]
[37.36179733 -62.14014816]
[49.83932114 -66.42378998]
[62.60578918 -69.74877167]
[75.58766174 -72.09593201]
[88.71015930 -73.45175934]
[101.89768982 -73.80843353]
[115.07429504 -73.16390228]
[128.16406250 -71.52188873]
[141.09158325 -68.89183807]
[153.78242493 -65.28890991]
[166.16343689 -60.73385239]
[178.16333008 -55.25290680]
[189.71298218 -48.87764740]
[200.74583435 -41.64479446]
[211.19836426 -33.59601593]
[221.01034546 -24.77767181]
[230.12525940 -15.24056149]
[238.49061584 -5.03962135]
[250.82189941 -13.58008003]
[263.15316772 -22.12053871]
[275.48446655 -30.66099739]
[279.75457764 -46.12533569]
[294.56344604 -52.29594040]
[308.55102539 -44.43925095]
[310.98718262 -28.58224678]
[300.00317383 -16.88906479]
[284.02493286 -18.32971382]
[271.69363403 -9.78925514]
[259.36236572 -1.24879658]
[247.03106689 7.29166222]
[259.08181763 29.95755577]
[267.66290283 54.15111923]
[272.58715820 79.34467316]
[273.74719238 104.98873138]
[288.70846558 106.06580353]
[303.66973877 107.14287567]
[318.63104248 108.21994019]
[330.41439819 97.68772125]
[346.18899536 98.65581512]
[356.59606934 110.54988098]
[355.46124268 126.31336975]
[343.45782471 136.59410095]
[327.70718384 135.29267883]
[317.55395508 123.18122101]
[302.59268188 122.10415649]
[287.63140869 121.02708435]
[272.67010498 119.95001221]
[270.45578003 134.02644348]
[267.09588623 147.87419128]
[262.61300659 161.40019226]
[257.03726196 174.51354980]
[250.40614319 187.12614441]
[242.76420593 199.15318298]
[234.16281128 210.51387024]
[224.65975952 221.13182068]
[214.31890869 230.93569946]
[203.20977783 239.85961914]
[191.40701294 247.84359741]
[178.98994446 254.83396912]
[166.04202271 260.78378296]
[152.65025330 265.65301514]
[138.90463257 269.40896606]
[124.89756012 272.02639771]
[110.72315979 273.48770142]
[96.47669220 273.78308105]
[82.25390625 272.91052246]
[68.15038300 270.87591553]
[54.26090622 267.69290161]
[40.67882538 263.38290405]
[27.49541664 257.97485352]
[14.79928207 251.50514221]
[2.67574644 244.01722717]
[-8.79371262 235.56143188]
[-19.53201294 226.19456482]
[-29.46698761 215.97961426]
[-38.53186798 204.98521423]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 57]
[3 56]
[4 55]
[6 53]
[7 50]
[8 49]
[9 48]
[10 47]
[12 45]
[13 44]
[15 43]
[16 42]
[21 41]
[22 40]
[23 39]
[24 35]
[25 34]
[26 33]
[94 106]
[95 105]
[96 104]
[97 103]
[110 123]
[111 122]
[112 121]
[113 120]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
