%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:11 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCCCACAACACUUUCUCGGCCUAUCCGGAAUGCCCCGACGUUACUCGGACUACCCCGAUGCxxxxxxxxxxUCCUACACUAUUAAAGUUUACCACAACCACCACCCCAUCAUACUCUUUCACCCACAGCACCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[-37.66267014 206.16087341]
[-49.92503738 214.80000305]
[-62.18740463 223.43911743]
[-74.44977570 232.07823181]
[-83.71472168 243.87486267]
[-89.20175171 257.83526611]
[-94.68878937 271.79565430]
[-94.85549164 288.74877930]
[-111.19223022 293.28167725]
[-120.07044983 278.83822632]
[-108.64917755 266.30862427]
[-103.16214752 252.34822083]
[-97.67510986 238.38783264]
[-102.89501953 233.00242615]
[-113.66600037 243.44206238]
[-124.10545349 232.67091370]
[-113.33483124 222.23162842]
[-118.55474091 216.84622192]
[-132.67953491 221.89497375]
[-137.31446838 226.75552368]
[-142.87713623 228.26812744]
[-147.49826050 226.84658813]
[-161.82086182 231.30340576]
[-176.14346313 235.76022339]
[-183.46453857 241.33279419]
[-190.81056213 240.15742493]
[-205.22277832 244.31530762]
[-219.63499451 248.47319031]
[-228.61761475 261.76574707]
[-244.62144470 262.88696289]
[-255.36972046 250.97668457]
[-252.61727905 235.17150879]
[-238.47555542 227.59579468]
[-223.79289246 234.06097412]
[-209.38067627 229.90309143]
[-194.96846008 225.74520874]
[-180.60026550 221.43762207]
[-166.27767944 216.98080444]
[-151.95507812 212.52398682]
[-137.72830200 207.77017212]
[-123.60349274 202.72142029]
[-83.08889008 219.81585693]
[-70.82652283 211.17674255]
[-58.56415558 202.53762817]
[-46.30178452 193.89851379]
[-59.65448761 168.78654480]
[-68.73384094 141.83340454]
[-73.29682922 113.76055908]
[-73.22131348 85.31938934]
[-68.50931549 57.27116394]
[-59.28696442 30.36662865]
[-45.80110168 5.32591629]
[-28.41269302 -17.18072891]
[-7.58716297 -36.55088806]
[-16.35337067 -48.72272491]
[-25.11957741 -60.89456177]
[-33.88578415 -73.06639862]
[-49.52334976 -75.35596466]
[-58.89466476 -88.08207703]
[-56.43989944 -103.69456482]
[-43.61541748 -112.93080902]
[-28.02975845 -110.31111145]
[-18.92961884 -97.38969421]
[-21.71394730 -81.83260345]
[-12.94774055 -69.66076660]
[-4.18153334 -57.48893356]
[4.58467388 -45.31709671]
[13.65431976 -50.88262558]
[23.04748726 -55.88282013]
[32.72898483 -60.29895020]
[42.66253662 -64.11446381]
[52.81092072 -67.31507111]
[63.13611221 -69.88877869]
[73.59942627 -71.82593536]
[84.16166687 -73.11929321]
[94.78324127 -73.76399994]
[105.42436981 -73.75764465]
[116.04516602 -73.10025024]
[126.60585022 -71.79427338]
[137.06684875 -69.84461212]
[147.38896179 -67.25857544]
[157.53350830 -64.04584503]
[167.46249390 -60.21846008]
[177.13870239 -55.79076767]
[186.52589417 -50.77935028]
[195.58888245 -45.20299149]
[204.29371643 -39.08257675]
[213.80207825 -50.68391800]
[223.31044006 -62.28525925]
[223.16477966 -78.32765198]
[235.70677185 -88.33155060]
[251.31526184 -84.62282562]
[258.01675415 -70.04648590]
[250.67044067 -55.78425980]
[234.91177368 -52.77690125]
[225.40341187 -41.17556000]
[215.89506531 -29.57421875]
[223.51358032 -22.33371162]
[230.68063354 -14.64604092]
[237.37001038 -6.53930569]
[243.55725098 1.95686126]
[249.21975708 10.81140327]
[254.33682251 19.99195671]
[258.88973999 29.46496010]
[262.86187744 39.19578934]
[266.23870850 49.14887619]
[269.00787354 59.28783798]
[271.15927124 69.57561493]
[272.68505859 79.97460175]
[273.57958984 90.44678497]
[273.83969116 100.95389557]
[273.46432495 111.45751190]
[272.45489502 121.91925049]
[270.81509399 132.30085754]
[268.55093384 142.56440735]
[265.67065430 152.67237854]
[262.18481445 162.58779907]
[258.10610962 172.27445984]
[253.44952393 181.69692993]
[248.23200989 190.82077026]
[242.47268677 199.61264038]
[236.19256592 208.04039001]
[229.41462708 216.07322693]
[222.16365051 223.68179321]
[214.46612549 230.83825684]
[206.35018921 237.51646423]
[197.84552002 243.69201660]
[188.98320007 249.34233093]
[179.79560852 254.44676208]
[170.31634521 258.98663330]
[160.58006287 262.94537354]
[150.62234497 266.30850220]
[140.47958374 269.06372070]
[130.18885803 271.20098877]
[119.78777313 272.71243286]
[109.31436920 273.59259033]
[98.80691528 273.83819580]
[88.30382538 273.44839478]
[77.84349060 272.42456055]
[67.46413422 270.77047729]
[57.20371628 268.49218750]
[47.09972382 265.59802246]
[37.18910217 262.09854126]
[27.50806808 258.00653076]
[18.09201431 253.33695984]
[8.97535706 248.10691833]
[0.19142121 242.33547974]
[-8.22768593 236.04377747]
[-16.25119019 229.25480652]
[-23.84976196 221.99336243]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 45]
[2 44]
[3 43]
[4 42]
[5 13]
[6 12]
[7 11]
[18 41]
[19 40]
[22 39]
[23 38]
[24 37]
[26 36]
[27 35]
[28 34]
[54 67]
[55 66]
[56 65]
[57 64]
[87 97]
[88 96]
[89 95]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
