%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:02 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCACCCCUGACUCCCCUCAGCCAUAGAAGGCCCCACCCCAGUCUCAGCCCUACUCCACUCAxxxxxxxxxxCAACGCCCAUAAUCAUACAAAGCCCCCGCACCAAUAGGAUCCUCCCGAAUCAACCCUGACCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[-79.65265656 219.28189087]
[-92.43001556 227.13932800]
[-105.20737457 234.99674988]
[-117.98473358 242.85417175]
[-125.68702698 256.67391968]
[-140.58143616 256.75000000]
[-153.35879517 264.60742188]
[-166.13615417 272.46484375]
[-178.91351318 280.32226562]
[-186.61581421 294.14202881]
[-201.51022339 294.21810913]
[-200.10212708 313.31115723]
[-208.47883606 330.43624878]
[-224.28092957 340.95553589]
[-243.15060425 342.06597900]
[-259.93325806 333.54598999]
[-272.01324463 342.43832397]
[-284.09323120 351.33068848]
[-296.17321777 360.22302246]
[-298.29998779 375.88357544]
[-310.92794800 385.38674927]
[-326.56512451 383.09451294]
[-335.93426514 370.36682129]
[-333.47683716 354.75476074]
[-320.65078735 345.52069092]
[-305.06558228 348.14303589]
[-292.98559570 339.25070190]
[-280.90560913 330.35833740]
[-268.82559204 321.46600342]
[-271.87408447 310.70019531]
[-271.46829224 299.49172974]
[-267.63104248 288.92431641]
[-260.71771240 280.02474976]
[-251.38339233 273.66311646]
[-240.52088928 270.46774292]
[-229.17527771 270.76315308]
[-218.44334412 274.53723145]
[-209.36764526 281.44076538]
[-202.57926941 268.18301392]
[-186.77093506 267.54492188]
[-173.99357605 259.68750000]
[-161.21621704 251.83007812]
[-148.43885803 243.97264099]
[-141.65048218 230.71492004]
[-125.84215546 230.07681274]
[-113.06479645 222.21939087]
[-100.28744507 214.36196899]
[-87.51008606 206.50454712]
[-93.66616058 194.85075378]
[-99.09881592 182.84268188]
[-103.78776550 170.52514648]
[-107.71548462 157.94416809]
[-110.86730194 145.14674377]
[-113.23145294 132.18069458]
[-114.79909515 119.09442902]
[-115.56438446 105.93683624]
[-115.52445221 92.75706482]
[-114.67945099 79.60435486]
[-113.03253937 66.52783203]
[-110.58986664 53.57633591]
[-107.36055756 40.79825211]
[-103.35668182 28.24130821]
[-98.59318542 15.95241261]
[-93.08786011 3.97746778]
[-86.86128235 -7.63879538]
[-79.93669891 -18.85298538]
[-72.33998871 -29.62321281]
[-64.09951782 -39.90924835]
[-55.24607086 -49.67266464]
[-45.81271744 -58.87699890]
[-35.83469772 -67.48786163]
[-25.34928131 -75.47309113]
[-14.39563751 -82.80286407]
[-3.01468039 -89.44979095]
[8.75107670 -95.38905334]
[20.85768509 -100.59846497]
[33.25991821 -105.05855560]
[45.91145325 -108.75267029]
[58.76503372 -111.66701508]
[71.77263641 -113.79070282]
[84.88568878 -115.11579895]
[98.05519104 -115.63735199]
[111.23195648 -115.35340881]
[124.36677551 -114.26504517]
[137.41056824 -112.37631226]
[150.31462097 -109.69427490]
[163.03071594 -106.22894287]
[175.51138306 -101.99326324]
[187.70997620 -97.00306702]
[199.58094788 -91.27698517]
[211.07994080 -84.83640289]
[222.16400146 -77.70539093]
[232.79173279 -69.91057587]
[242.92344666 -61.48107910]
[252.52127075 -52.44838715]
[261.54937744 -42.84624100]
[269.97402954 -32.71050644]
[277.76376343 -22.07904816]
[284.88946533 -10.99157619]
[291.32455444 0.51049304]
[297.04498291 12.38419437]
[302.02932739 24.58517456]
[316.25610352 19.83135986]
[326.71646118 7.20150900]
[342.83694458 10.21190262]
[348.03417969 25.76570511]
[336.96170044 37.86249924]
[321.00991821 34.05813980]
[306.78314209 38.81195450]
[310.64562988 53.82995605]
[313.41888428 69.08670044]
[315.08859253 84.50328064]
[315.64611816 100.00000000]
[315.08859253 115.49671936]
[313.41888428 130.91329956]
[310.64562988 146.17004395]
[306.78314209 161.18804932]
[321.00991821 165.94186401]
[335.23672485 170.69567871]
[352.17556763 169.98077393]
[357.55169678 186.05975342]
[343.58932495 195.67686462]
[330.48291016 184.92245483]
[316.25610352 180.16864014]
[302.02932739 175.41482544]
[295.22705078 191.59503174]
[287.13140869 207.16845703]
[277.79611206 222.03192139]
[267.28295898 236.08695984]
[255.66159058 249.24046326]
[243.00903320 261.40527344]
[229.40905762 272.50085449]
[214.95179749 282.45364380]
[199.73301697 291.19772339]
[183.85353088 298.67520142]
[167.41853333 304.83648682]
[150.53691101 309.64080811]
[133.32051086 313.05630493]
[115.88335419 315.06039429]
[98.34098053 315.63973999]
[80.80959320 314.79052734]
[63.40534210 312.51843262]
[46.24351883 308.83843994]
[29.43781662 303.77493286]
[13.09956741 297.36151123]
[-2.66299105 289.64059448]
[-17.74543762 280.66339111]
[-32.04785156 270.48934937]
[-45.47549057 259.18582153]
[-57.93939590 246.82777405]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 48]
[2 47]
[3 46]
[4 45]
[6 43]
[7 42]
[8 41]
[9 40]
[11 38]
[16 29]
[17 28]
[18 27]
[19 26]
[102 109]
[103 108]
[117 125]
[118 124]
[119 123]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
