%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:16 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGAAGAACAGCUAAAAGAGCACACCCGUCUAUGUAGCAAAAUAGUGGGAAGAUUUAUAGGUAxxxxxxxxxxGCCCACAGAACCCUCUAAAUCCCCUUGUAAAUUUAACUGUUAGUCCAAAGAGGAACAGCUCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[200.24417114 511.82196045]
[199.62019348 496.83496094]
[198.99621582 481.84793091]
[198.37223816 466.86093140]
[197.74826050 451.87390137]
[197.12428284 436.88687134]
[196.50030518 421.89987183]
[195.87632751 406.91284180]
[193.08401489 392.17504883]
[188.18244934 377.99850464]
[183.28089905 363.82192993]
[169.81486511 357.56085205]
[164.64204407 343.25363159]
[171.30055237 329.17163086]
[166.39900208 314.99508667]
[161.49745178 300.81854248]
[156.59590149 286.64196777]
[151.69435120 272.46542358]
[140.22291565 262.96514893]
[143.02597046 247.39422607]
[138.12442017 233.21766663]
[133.22286987 219.04110718]
[128.32131958 204.86454773]
[114.04213715 200.71209717]
[104.83724976 188.80688477]
[104.40252686 173.58636475]
[113.11416626 160.88150024]
[108.21261597 146.70494080]
[103.31106567 132.52839661]
[85.32318115 129.21730042]
[71.92793274 116.76359558]
[67.31691742 99.06427765]
[52.82132339 95.20711517]
[38.32572556 91.34996033]
[26.75418663 97.14247894]
[14.73049831 93.58580780]
[8.58027458 83.12243652]
[-5.83194113 78.96455383]
[-20.24415779 74.80666351]
[-34.65637207 70.64878082]
[-46.81624222 80.28813934]
[-62.32102966 80.90550995]
[-75.20883179 72.26351166]
[-80.52402496 57.68516159]
[-76.22280884 42.77613068]
[-63.95908737 33.26924896]
[-48.44851303 32.82010651]
[-35.65522003 41.60140610]
[-30.49848557 56.23656082]
[-16.08626938 60.39444733]
[-1.67405367 64.55233765]
[12.73816204 68.71022034]
[29.48539734 63.55949020]
[42.18288803 76.85436249]
[56.67848206 80.71152496]
[71.17407990 84.56867981]
[78.09219360 75.72846985]
[87.59257507 69.74913025]
[98.55541992 67.33545685]
[101.34774017 52.59764862]
[104.14006805 37.85984421]
[106.93238831 23.12203789]
[109.72471619 8.38423157]
[112.51703644 -6.35357380]
[107.48395538 -21.35286140]
[117.45525360 -32.41732788]
[120.24758148 -47.15513611]
[123.03990173 -61.89294052]
[109.38175201 -68.28870392]
[97.74378967 -77.88081360]
[88.85757446 -90.06629944]
[83.28170776 -104.07917023]
[81.36669922 -119.03856659]
[83.23291779 -134.00411987]
[88.76305389 -148.03511047]
[97.60948181 -160.24949646]
[109.21610260 -169.87951660]
[122.85332489 -176.31977844]
[137.66389465 -179.16546631]
[152.71679688 -178.23770142]
[167.06581116 -173.59478760]
[179.80892944 -165.52857971]
[190.14512634 -154.54615784]
[197.42465210 -141.33784485]
[201.18991089 -126.73395538]
[201.20420837 -111.65248871]
[197.46664429 -97.04148102]
[190.21217346 -83.81939697]
[179.89682007 -72.81738281]
[167.16902161 -64.72703552]
[152.82882690 -60.05692673]
[137.77770996 -59.10061646]
[134.98538208 -44.36281204]
[132.19305420 -29.62500381]
[137.42587280 -15.67986298]
[127.25484467 -3.56124949]
[124.46251678 11.17655659]
[121.67019653 25.91436195]
[118.87786865 40.65216827]
[116.08554840 55.38997269]
[113.29322052 70.12777710]
[124.57296753 78.43083954]
[131.34355164 90.69186401]
[132.36254883 104.66094208]
[127.44300079 117.77473450]
[117.48762512 127.62683868]
[122.38917542 141.80339050]
[127.29072571 155.97994995]
[141.98925781 160.59072876]
[151.04853821 172.82931519]
[151.16282654 187.87760925]
[142.49787903 199.96299744]
[147.39942932 214.13955688]
[152.30097961 228.31611633]
[157.20252991 242.49267578]
[169.02456665 253.00695801]
[165.87091064 267.56387329]
[170.77246094 281.74041748]
[175.67401123 295.91699219]
[180.57556152 310.09353638]
[185.47711182 324.27008057]
[199.41157532 331.23205566]
[204.18048096 345.67892456]
[197.45745850 358.92037964]
[202.35900879 373.09695435]
[207.26055908 387.27349854]
[211.04910278 372.75982666]
[220.01795959 360.73651123]
[232.85020447 352.96905518]
[247.66160583 350.59796143]
[262.27734375 353.97137451]
[274.55133057 362.59396362]
[282.68130493 375.19967651]
[285.47351074 389.93750000]
[282.51794434 404.64343262]
[274.24859619 417.15814209]
[261.87969971 425.64401245]
[247.22740173 428.85504150]
[232.44322205 426.31973267]
[219.69795227 418.41033936]
[210.86334229 406.28887939]
[211.48731995 421.27587891]
[212.11129761 436.26290894]
[212.73527527 451.24993896]
[213.35925293 466.23693848]
[213.98323059 481.22396851]
[214.60720825 496.21096802]
[215.23118591 511.19799805]
[221.93118286 526.77191162]
[208.82064819 537.52130127]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 148]
[2 147]
[3 146]
[4 145]
[5 144]
[6 143]
[7 142]
[8 141]
[9 126]
[10 125]
[11 124]
[14 121]
[15 120]
[16 119]
[17 118]
[18 117]
[20 115]
[21 114]
[22 113]
[23 112]
[27 108]
[28 107]
[29 106]
[32 56]
[33 55]
[34 54]
[37 52]
[38 51]
[39 50]
[40 49]
[59 101]
[60 100]
[61 99]
[62 98]
[63 97]
[64 96]
[66 94]
[67 93]
[68 92]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
