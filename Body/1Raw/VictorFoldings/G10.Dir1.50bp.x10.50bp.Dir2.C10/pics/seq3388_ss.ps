%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:33 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCAAAGGCCCCAACGUUGUAGGCCCCUACGGGCUACUACAACCCUUCGCUGACGCCAUAAAxxxxxxxxxxACAAACAAUGUUCAACCAGUAACUACUACUAAUCAACGCCCAUAAUCAUACAAAGCCCCCCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[68.95491028 246.09480286]
[61.64099884 244.34706116]
[54.42432785 242.23342896]
[47.32318497 239.75923157]
[40.35557556 236.93075562]
[33.53915787 233.75517273]
[26.89121628 230.24052429]
[18.90130043 242.93545532]
[10.91138363 255.63038635]
[2.92146707 268.32531738]
[-5.06844902 281.02023315]
[-5.15277767 297.41915894]
[-19.52897644 305.30947876]
[-33.40804291 296.57427979]
[-32.51238632 280.19961548]
[-17.76337814 273.03033447]
[-9.77346230 260.33538818]
[-1.78354633 247.64047241]
[6.20636988 234.94554138]
[14.19628620 222.25061035]
[-10.87029839 200.07629395]
[-30.37021065 172.87727356]
[-43.32438278 142.01914978]
[-49.08240128 109.05130768]
[-64.08158875 109.20734406]
[-79.08078003 109.36338043]
[-94.07996368 109.51941681]
[-109.07915497 109.67545319]
[-124.07833862 109.83148956]
[-139.07752991 109.98752594]
[-154.07022095 110.45557404]
[-169.04994202 111.23542023]
[-184.02964783 112.01525879]
[-199.00936890 112.79510498]
[-212.46391296 122.17098999]
[-227.19401550 114.96292114]
[-228.04660034 98.58595276]
[-214.14460754 89.88729858]
[-199.78921509 97.81539154]
[-184.80949402 97.03554535]
[-169.82978821 96.25569916]
[-154.85006714 95.47586060]
[-151.00735474 92.54173279]
[-145.26510620 92.03400421]
[-139.23356628 94.98834229]
[-124.23437500 94.83230591]
[-109.23519135 94.67626953]
[-94.23600006 94.52023315]
[-79.23681641 94.36419678]
[-64.23762512 94.20816040]
[-49.23843765 94.05212402]
[-46.29529953 69.91389465]
[-39.47423935 46.57318115]
[-28.95606232 24.64867401]
[-15.01958179 4.72154522]
[1.96578074 -12.67998886]
[-7.29916859 -24.47662926]
[-22.71289635 -30.07565117]
[-25.30403709 -46.26879883]
[-12.40704727 -56.39794922]
[2.71075487 -50.04310226]
[4.49747133 -33.74157715]
[13.76242065 -21.94493866]
[20.68220901 -26.55503273]
[27.84782219 -30.77289963]
[35.23705292 -34.58547211]
[42.82699966 -37.98092651]
[50.59414291 -40.94874573]
[58.51440430 -43.47973251]
[66.56324005 -45.56603622]
[74.71570587 -47.20119858]
[82.94653320 -48.38014603]
[91.23020935 -49.09922409]
[99.54106903 -49.35620880]
[107.85334778 -49.15030289]
[116.14129639 -48.48214340]
[124.37921143 -47.35379791]
[132.54156494 -45.76877213]
[140.60307312 -43.73196793]
[148.53874207 -41.24970245]
[156.32397461 -38.32967377]
[162.67109680 -51.92062378]
[169.01823425 -65.51157379]
[164.91339111 -81.02059937]
[174.59478760 -93.81317902]
[190.63568115 -94.07594299]
[200.73088074 -81.60732269]
[197.13619995 -65.97216797]
[182.60917664 -59.16444397]
[176.26205444 -45.57349396]
[169.91491699 -31.98254204]
[181.82514954 -24.94851875]
[193.03356934 -16.84281158]
[203.44404602 -7.73494673]
[212.96726990 2.29696035]
[221.52157593 13.16686535]
[229.03359985 24.78153801]
[235.43890381 37.04135895]
[249.34146118 31.40940094]
[263.24401855 25.77744484]
[277.14657593 20.14548683]
[284.70034790 5.99204159]
[300.50125122 3.21509242]
[312.42816162 13.94487762]
[311.33178711 29.95042419]
[298.05316162 38.95364761]
[282.77853394 34.04804230]
[268.87597656 39.68000031]
[254.97341919 45.31195831]
[241.07086182 50.94391251]
[243.36116028 58.10648346]
[245.28804016 65.37525177]
[246.84663391 72.73178864]
[248.03297424 80.15745544]
[248.84407043 87.63341522]
[249.27784729 95.14072418]
[249.33322144 102.66034698]
[249.01004028 110.17323303]
[248.30914307 117.66033173]
[247.23228455 125.10265350]
[245.78219604 132.48135376]
[243.96257019 139.77770996]
[241.77801514 146.97323608]
[239.23405457 154.04968262]
[236.33714294 160.98912048]
[233.09461975 167.77395630]
[229.51472473 174.38697815]
[225.60652161 180.81144714]
[221.37991333 187.03106689]
[216.84561157 193.03005981]
[212.01510620 198.79322815]
[206.90066528 204.30596924]
[201.51522827 209.55430603]
[195.87246704 214.52493286]
[189.98666382 219.20523071]
[183.87275696 223.58335876]
[177.54624939 227.64822388]
[171.02316284 231.38949585]
[164.32002258 234.79771423]
[157.45385742 237.86422729]
[150.44203186 240.58125305]
[143.30235291 242.94192505]
[136.05290222 244.94024658]
[128.71205139 246.57116699]
[121.29842377 247.83053589]
[113.83081055 248.71514893]
[106.32813263 249.22279358]
[98.80941772 249.35217285]
[91.29371643 249.10295105]
[83.80008698 248.47575378]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[7 20]
[8 19]
[9 18]
[10 17]
[11 16]
[24 51]
[25 50]
[26 49]
[27 48]
[28 47]
[29 46]
[30 45]
[31 42]
[32 41]
[33 40]
[34 39]
[56 63]
[57 62]
[81 91]
[82 90]
[83 89]
[98 110]
[99 109]
[100 108]
[101 107]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
