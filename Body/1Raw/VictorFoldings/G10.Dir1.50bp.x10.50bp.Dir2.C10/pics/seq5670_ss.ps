%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:48 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCCUACGCCUAAUCUACUCCACCUCAAUCACACUACUCCCCAUAUCUAACAACGUAAAAAUxxxxxxxxxxAGAACCAAAAUGAACGAAAAUCUGUUCGCUUCAUUCAUUGCCCCCACAAUCCUAGGCCUACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[95.60089874 279.16516113]
[95.60089874 264.16516113]
[95.60089874 249.16517639]
[95.60089874 234.16517639]
[95.60089874 219.16517639]
[95.60089874 204.16517639]
[95.60089874 189.16517639]
[95.60089874 174.16517639]
[95.60089874 159.16517639]
[95.60089874 144.16517639]
[68.55149078 124.01072693]
[65.73581696 94.21154022]
[51.83326340 88.57958221]
[37.18976212 85.32875824]
[22.21004677 84.54891205]
[7.23033333 83.76906586]
[4.45807648 98.53382111]
[-0.25745526 112.79731750]
[-6.83210850 126.30499268]
[-15.14855099 138.81579590]
[-25.05836487 150.10646057]
[-36.38470078 159.97547913]
[-48.92542267 168.24673462]
[-62.45672989 174.77262878]
[-76.73713684 179.43667603]
[-91.51179504 182.15565491]
[-106.51703644 182.88104248]
[-121.48507690 181.59988403]
[-136.14878845 178.33505249]
[-150.24647522 173.14480591]
[-163.52655029 166.12178040]
[-175.75202942 157.39129639]
[-186.70471191 147.10917664]
[-196.18914795 135.45889282]
[-204.03607178 122.64839172]
[-210.10545349 108.90626526]
[-214.28897095 94.47776031]
[-216.51196289 79.62038422]
[-216.73477173 64.59927368]
[-214.95339966 49.68249512]
[-211.19964600 35.13626480]
[-205.54051208 21.22017479]
[-198.07698059 8.18257236]
[-188.94224548 -3.74387050]
[-178.29933167 -14.34631252]
[-166.33816528 -23.43554115]
[-153.27221680 -30.84934807]
[-139.33467102 -36.45542526]
[-124.77423859 -40.15372467]
[-109.85078430 -41.87824631]
[-94.83063507 -41.59821320]
[-79.98182678 -39.31862640]
[-65.56937408 -35.08016205]
[-51.85047150 -28.95846748]
[-39.06995392 -21.06278801]
[-27.45590019 -11.53402901]
[-17.21558189 -0.54224575]
[-8.53174591 11.71640205]
[-1.55936742 25.02314377]
[3.57712412 39.14050674]
[6.78606176 53.81654358]
[8.01017857 68.78935242]
[22.98989296 69.56919861]
[37.96960831 70.34904480]
[25.75065422 61.64862823]
[17.16530228 49.34856033]
[13.21175861 34.87895584]
[14.34970284 19.92218018]
[20.44682503 6.21725035]
[30.79421616 -4.64237499]
[44.18879700 -11.39405632]
[59.07318878 -13.25278091]
[73.71679688 -10.00243759]
[86.41702271 -2.02093911]
[95.69721985 9.76371098]
[100.47838593 23.98132133]
[100.20462036 38.97882462]
[94.90775299 53.01247025]
[85.20364380 64.45057678]
[72.22058868 71.96324921]
[57.46522141 74.67702484]
[71.36777496 80.30898285]
[77.51882172 73.50213623]
[85.23685455 68.54225159]
[93.98391724 65.77505493]
[103.15031433 65.39340973]
[112.09712982 67.42393494]
[120.20074463 71.72509003]
[126.89631653 77.99707794]
[140.28260803 71.22896576]
[153.66888428 64.46085358]
[167.05517578 57.69273376]
[180.44145203 50.92462158]
[193.82774353 44.15650558]
[207.14289856 37.24950790]
[220.38548279 30.20437241]
[233.62806702 23.15923691]
[246.87065125 16.11410332]
[251.24760437 0.92799640]
[265.12100220 -6.64199448]
[280.25997925 -2.10472822]
[287.68286133 11.84791470]
[282.98577881 26.93807983]
[268.95544434 34.21303940]
[253.91578674 29.35668755]
[240.67320251 36.40182495]
[227.43061829 43.44695663]
[214.18803406 50.49209213]
[209.73123169 56.44881821]
[200.59585571 57.54278946]
[187.20956421 64.31090546]
[173.82328796 71.07901764]
[160.43699646 77.84713745]
[147.05072021 84.61524963]
[133.66442871 91.38336182]
[139.53764343 101.51606750]
[142.02856445 114.26584625]
[155.68479919 120.47126007]
[169.34104919 126.67666626]
[182.99728394 132.88206482]
[197.70474243 127.09707642]
[212.16154480 133.48272705]
[217.79072571 148.25051880]
[211.25259399 162.63900757]
[196.42610168 168.11172485]
[182.10754395 161.42182922]
[176.79188538 146.53831482]
[163.13563538 140.33290100]
[149.47940063 134.12750244]
[135.82315063 127.92208862]
[129.51759338 131.98286438]
[138.52703857 143.97576904]
[147.53648376 155.96867371]
[160.04655457 164.24504089]
[159.95408630 179.24475098]
[147.34292603 187.36624146]
[133.64874268 181.24501038]
[131.28923035 166.43188477]
[124.09784698 153.26814270]
[116.90646362 140.10440063]
[110.60089874 144.16517639]
[110.60089874 159.16517639]
[110.60089874 174.16517639]
[110.60089874 189.16517639]
[110.60089874 204.16517639]
[110.60089874 219.16517639]
[110.60089874 234.16517639]
[110.60089874 249.16517639]
[110.60089874 264.16516113]
[110.60089874 279.16516113]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[12 82]
[13 81]
[14 64]
[15 63]
[16 62]
[89 115]
[90 114]
[91 113]
[92 112]
[93 111]
[94 110]
[95 108]
[96 107]
[97 106]
[98 105]
[117 130]
[118 129]
[119 128]
[120 127]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
