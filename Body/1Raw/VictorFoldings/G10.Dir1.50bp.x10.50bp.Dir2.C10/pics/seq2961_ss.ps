%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:43 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGACUUGACCAACGGAACAAGUUACCCUAGGGAUAACAGCGCAAUCCUAUUCUAGAGUCCAUxxxxxxxxxxCUCUGCAUCAACUGAACGCAAAUCAGCCACUUUAAUUAAGCUAAGCCCUUACUAGACCAACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[83.90886688 288.54110718]
[83.90886688 273.54110718]
[83.90886688 258.54110718]
[83.90886688 243.54110718]
[83.90886688 228.54110718]
[83.90886688 213.54110718]
[83.90886688 198.54110718]
[83.90886688 183.54110718]
[83.90886688 168.54110718]
[83.90886688 153.54110718]
[70.25262451 147.33570862]
[58.95362091 157.20143127]
[47.65461731 167.06715393]
[36.35560989 176.93287659]
[25.05660629 186.79859924]
[19.54114532 204.33596802]
[2.24168777 207.11602783]
[-8.84962749 217.21469116]
[-16.49075699 232.34906006]
[-33.14895630 229.19616699]
[-34.73072433 212.31616211]
[-18.94827652 206.12336731]
[-7.85696173 196.02471924]
[-6.96357679 183.92062378]
[2.25075197 175.41679382]
[15.19088364 175.49958801]
[26.48988724 165.63386536]
[37.78889465 155.76814270]
[49.08789825 145.90242004]
[60.38690186 136.03669739]
[50.95633316 119.90717316]
[47.72089386 101.72683716]
[50.93116379 83.76360321]
[60.04300690 68.20583344]
[73.80286407 56.89577484]
[90.41830444 51.11172867]
[107.79075623 51.42470932]
[112.39632416 37.14925003]
[117.00188446 22.87378883]
[121.60745239 8.59832764]
[118.48105621 -6.91090250]
[129.75238037 -16.64777184]
[119.08497620 -27.12768173]
[114.10939026 -41.14825821]
[115.76709747 -55.85566330]
[123.65654755 -68.28735352]
[136.12779236 -75.96881104]
[134.57020569 -90.88772583]
[133.01263428 -105.80663300]
[118.06457520 -107.64006042]
[103.90615845 -112.75159454]
[91.24638367 -120.88184357]
[80.71842194 -131.62034607]
[72.84798431 -144.42630005]
[68.02706146 -158.65577698]
[66.49437714 -173.59407043]
[68.32360077 -188.49169922]
[73.41980743 -202.60186768]
[81.52438354 -215.21801758]
[92.22815704 -225.70916748]
[104.99205017 -233.55143738]
[119.17424774 -238.35427856]
[117.61666107 -253.27319336]
[116.05908203 -268.19210815]
[114.50150299 -283.11102295]
[99.84816742 -287.06628418]
[87.61546326 -296.05102539]
[79.45776367 -308.85009766]
[76.47833252 -323.73254395]
[79.08010864 -338.68563843]
[86.91122437 -351.68710327]
[98.91259003 -360.97860718]
[113.46111298 -365.30349731]
[128.58923340 -364.07693481]
[142.25099182 -357.46475220]
[152.59873962 -346.36123657]
[158.23304749 -332.26800537]
[158.39190674 -317.09106445]
[153.05383301 -302.88299561]
[142.94076538 -291.56527710]
[129.42041016 -284.66860962]
[130.97799683 -269.74969482]
[132.53558350 -254.83076477]
[134.09315491 -239.91186523]
[148.96156311 -238.14199829]
[163.07006836 -233.10528564]
[175.71000671 -225.05130005]
[186.24572754 -214.38124084]
[194.14656067 -201.62800598]
[199.01351929 -187.42948914]
[200.59945679 -172.49674988]
[198.82165527 -157.57835388]
[193.76608276 -143.42288208]
[185.68324280 -130.74134827]
[174.97581482 -120.17148590]
[162.17854309 -112.24569702]
[147.93154907 -107.36421967]
[149.48912048 -92.44530487]
[151.04670715 -77.52639008]
[157.46951294 -76.01980591]
[163.45594788 -73.24762726]
[168.75947571 -69.32400513]
[173.16172791 -64.41050720]
[176.48141479 -58.70945740]
[178.58184814 -52.45562363]
[193.58103943 -52.29958725]
[208.58023071 -52.14355087]
[215.29911804 -65.84826660]
[227.30418396 -75.27381897]
[242.21182251 -78.54876709]
[257.06210327 -75.02285004]
[268.90649414 -65.39614868]
[275.39328003 -51.58005905]
[275.23449707 -36.31776810]
[268.46166992 -22.63961601]
[256.41958618 -13.26141071]
[241.49917603 -10.04520035]
[226.66290283 -13.62956810]
[214.85652161 -23.30283356]
[208.42419434 -37.14436340]
[193.42500305 -37.30039978]
[178.42581177 -37.45643616]
[166.03997803 -18.49962234]
[144.02783203 -12.04220676]
[147.48365784 2.44594646]
[135.88290405 13.20389175]
[131.27734375 27.47935295]
[126.67178345 41.75481415]
[122.06621552 56.03027344]
[131.54098511 61.77344131]
[139.55422974 69.54216003]
[145.67681885 78.97093964]
[149.56977844 89.60432434]
[151.00286865 100.91889954]
[149.86787415 112.34903717]
[146.18592834 123.31513214]
[140.10815430 133.25303650]
[131.90991211 141.64306641]
[121.97834778 148.03707886]
[110.79426575 152.08239746]
[98.90886688 153.54110718]
[98.90886688 168.54110718]
[98.90886688 183.54110718]
[98.90886688 198.54110718]
[98.90886688 213.54110718]
[98.90886688 228.54110718]
[98.90886688 243.54110718]
[98.90886688 258.54110718]
[98.90886688 273.54110718]
[98.90886688 288.54110718]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[11 30]
[12 29]
[13 28]
[14 27]
[15 26]
[17 23]
[18 22]
[37 129]
[38 128]
[39 127]
[40 126]
[42 124]
[47 99]
[48 98]
[49 97]
[62 84]
[63 83]
[64 82]
[65 81]
[105 122]
[106 121]
[107 120]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
