%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:15 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCCACAACACAAUGGGGCUCACUCACCCACCACAUUAACAACAUAAAACCCUCAUUCACACxxxxxxxxxxGUUUCAUCCUCGCCUUAGCAUGAUUUAUCCUACACUCCAACUCAUGAGACCCACAACAAACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[92.38560486 266.20144653]
[92.07354736 251.20471191]
[91.76148987 236.20794678]
[91.44943237 221.21119690]
[91.13737488 206.21444702]
[90.82532501 191.21769714]
[90.51326752 176.22093201]
[90.20121002 161.22418213]
[89.88915253 146.22743225]
[75.92876434 140.74040222]
[65.48895264 151.51119995]
[55.04913712 162.28201294]
[51.00019073 177.57633972]
[36.58636856 181.33015442]
[26.14655685 192.10095215]
[26.64372635 207.89743042]
[15.76473522 219.36141968]
[-0.03610480 219.69154358]
[-11.38443565 208.69195557]
[-11.54749489 192.88851929]
[-0.42854044 181.65710449]
[15.37574768 181.66114807]
[25.81556129 170.89033508]
[29.11778450 156.36640930]
[44.27833176 151.84220886]
[54.71814346 141.07139587]
[65.15795135 130.30058289]
[55.62699127 106.64229584]
[60.20112610 82.29288483]
[76.66886139 64.77251434]
[99.27256012 59.06063461]
[101.75767517 44.26792908]
[104.24279785 29.47522163]
[106.72791290 14.68251514]
[92.13350677 11.19252110]
[77.81129456 6.71470165]
[63.82804489 1.26993430]
[50.24895859 -5.11639452]
[37.13734818 -12.41450882]
[24.55435181 -20.59038162]
[12.55862999 -29.60589027]
[1.20611680 -39.41900253]
[-9.45025730 -49.98396683]
[-19.36080742 -61.25151825]
[-28.47932625 -73.16912842]
[-36.76329422 -85.68122101]
[-44.17409515 -98.72946930]
[-50.67716980 -112.25303650]
[-56.24219894 -126.18885803]
[-60.84323883 -140.47196960]
[-64.45883179 -155.03576660]
[-67.07212830 -169.81234741]
[-68.67092896 -184.73281860]
[-69.24779510 -199.72763062]
[-68.80003357 -214.72683716]
[-67.32971954 -229.66052246]
[-64.84372711 -244.45904541]
[-61.35363770 -259.05343628]
[-56.87572098 -273.37561035]
[-51.43085861 -287.35882568]
[-45.04444122 -300.93786621]
[-37.74623871 -314.04943848]
[-29.57028008 -326.63238525]
[-20.55469131 -338.62805176]
[-10.74150181 -349.98049927]
[-0.17646763 -360.63677979]
[11.09115124 -370.54727173]
[23.00881958 -379.66571045]
[35.52097321 -387.94958496]
[48.56927109 -395.36029053]
[62.09288025 -401.86328125]
[76.02873993 -407.42822266]
[90.31188202 -412.02917480]
[104.87570190 -415.64465332]
[119.65230560 -418.25784302]
[134.57278442 -419.85656738]
[149.56759644 -420.43331909]
[164.56680298 -419.98544312]
[179.50047302 -418.51504517]
[194.29898071 -416.02896118]
[208.89334106 -412.53875732]
[223.21549988 -408.06076050]
[237.19868469 -402.61578369]
[250.77767944 -396.22927856]
[263.88919067 -388.93099976]
[276.47207642 -380.75494385]
[288.46768188 -371.73928833]
[299.82006836 -361.92602539]
[310.47628784 -351.36090088]
[320.38668823 -340.09323120]
[329.50503540 -328.17550659]
[337.78884888 -315.66329956]
[345.19946289 -302.61492920]
[351.70236206 -289.09127808]
[357.26721191 -275.15539551]
[361.86807251 -260.87222290]
[365.48345947 -246.30838013]
[368.09655762 -231.53175354]
[369.69515991 -216.61126709]
[370.27182007 -201.61645508]
[369.82385254 -186.61724854]
[368.35333252 -171.68359375]
[365.86715698 -156.88508606]
[362.37686157 -142.29075623]
[357.89877319 -127.96862793]
[352.45370483 -113.98548889]
[346.06710815 -100.40653229]
[338.76873779 -87.29506683]
[330.59259033 -74.71223450]
[321.57684326 -62.71669388]
[311.76351929 -51.36437988]
[301.19833374 -40.70821762]
[289.93057251 -30.79789543]
[278.01278687 -21.67961693]
[265.50051880 -13.39589787]
[252.45213318 -5.98536110]
[238.92843628 0.51744181]
[224.99250793 6.08219147]
[210.70930481 10.68294239]
[196.14543152 14.29824352]
[181.36878967 16.91123962]
[166.44828796 18.50974464]
[151.45347595 19.08630753]
[136.45426941 18.63824081]
[121.52062225 17.16763306]
[119.03549957 31.96034050]
[116.55038452 46.75304794]
[114.06526947 61.54575348]
[121.86476898 64.90595245]
[128.87492371 69.84503174]
[134.77691650 76.17992401]
[139.29396057 83.66337585]
[142.20416260 91.99353027]
[143.35124207 100.82606506]
[142.65254211 109.78842163]
[140.10403442 118.49550629]
[135.78184509 126.56624603]
[129.84042358 133.64025879]
[122.50724030 139.39387512]
[114.07416534 143.55490112]
[104.88591003 145.91537476]
[105.19795990 160.91212463]
[105.51001740 175.90887451]
[105.82207489 190.90563965]
[106.13413239 205.90238953]
[106.44618988 220.89913940]
[106.75824738 235.89588928]
[107.07029724 250.89265442]
[107.38235474 265.88940430]
[109.97335815 285.09713745]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 149]
[2 148]
[3 147]
[4 146]
[5 145]
[6 144]
[7 143]
[8 142]
[9 141]
[10 27]
[11 26]
[12 25]
[14 23]
[15 22]
[31 128]
[32 127]
[33 126]
[34 125]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
