%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:11 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGAAAACAGAUGCAAUUCCCGGACGUCUAAACCAAACCACUUUCACCGCUACACGACCGGGGxxxxxxxxxxAUCAACAACCGACUAAUCACCACCCAACAAUGACUAAUCAAACUAACCUCAAAACAAAUGCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[118.17126465 375.51489258]
[118.17126465 360.51489258]
[118.17126465 345.51489258]
[118.17126465 330.51489258]
[118.17126465 315.51489258]
[118.17126465 300.51489258]
[118.17126465 285.51489258]
[118.17126465 270.51489258]
[118.17126465 255.51489258]
[118.17126465 240.51489258]
[101.37223053 234.30810547]
[88.17626190 222.15071106]
[80.58790588 205.85472107]
[79.77311707 187.86338806]
[85.88014221 170.88496399]
[98.01338196 157.48492432]
[114.36460114 149.69841003]
[113.11772156 134.75032043]
[107.48576355 120.84777069]
[97.97740936 109.24642944]
[92.94205475 107.54409027]
[89.24520111 103.11486816]
[88.32696533 96.95895386]
[79.30944061 84.97212219]
[70.29190826 72.98529053]
[58.49526596 63.72034454]
[44.71288681 57.80038071]
[30.93050385 51.88041687]
[17.14812279 45.96045303]
[3.36574197 40.04048920]
[-12.36784267 41.70328522]
[-21.00834846 29.57105827]
[-34.79072952 23.65109444]
[-48.57311249 17.73113251]
[-57.44421005 29.90698051]
[-68.80261993 39.80315781]
[-82.07859802 46.92327499]
[-96.60623932 50.91018677]
[-111.65682983 51.56391525]
[-126.47544861 48.85166931]
[-140.31880188 42.90949249]
[-152.49249268 34.03544235]
[-162.38592529 22.67463684]
[-169.50282288 9.39693069]
[-173.48622131 -5.13167286]
[-174.13629150 -20.18242455]
[-171.42045593 -35.00038528]
[-165.47492981 -48.84229279]
[-156.59793091 -61.01384354]
[-145.23472595 -70.90451050]
[-131.95529175 -78.01819611]
[-117.42572784 -81.99806976]
[-102.37481689 -82.64450073]
[-87.55751801 -79.92507935]
[-73.71704865 -73.97618866]
[-61.54765320 -65.09624481]
[-51.65973282 -53.73064423]
[-44.54927063 -40.44948959]
[-40.57291794 -25.91895866]
[-39.93013000 -10.86789322]
[-42.65314865 3.94875026]
[-28.87076759 9.86871338]
[-15.08838558 15.78867626]
[-0.34060878 13.70244694]
[9.28570461 26.25811005]
[23.06808662 32.17807388]
[36.85046768 38.09803391]
[50.63285065 44.01799774]
[64.41522980 49.93796158]
[55.73024750 37.70803833]
[50.03884888 23.82971001]
[47.63645172 9.02334309]
[48.64775848 -5.94252729]
[53.02027130 -20.29108620]
[60.52703094 -33.27756119]
[70.77839661 -44.22787857]
[83.24227142 -52.57365417]
[97.27169037 -57.88169479]
[112.13845825 -59.87648392]
[127.07090759 -58.45447922]
[141.29394531 -53.68949127]
[154.06932068 -45.82884598]
[164.73393250 -35.28056335]
[172.73419189 -22.59215736]
[177.65487671 -8.42222786]
[179.24055481 6.49372435]
[177.40892029 21.38147545]
[172.25505066 35.46826553]
[164.04646301 48.02290726]
[153.20922852 58.39374542]
[140.30584717 66.04247284]
[126.00610352 70.57207489]
[111.05223083 71.74744415]
[96.22040558 69.50756836]
[82.27873993 63.96776199]
[91.29627228 75.95459747]
[100.31379700 87.94142914]
[109.57875061 99.73806763]
[119.08710480 111.33940887]
[117.19373322 96.45938110]
[118.27705383 81.49855042]
[122.29436493 67.04652405]
[129.08734131 53.67284012]
[138.38829041 41.90456009]
[149.83065796 32.20546722]
[162.96348572 24.95780182]
[177.26922607 20.44719124]
[192.18411255 18.85139847]
[207.12031555 20.23331261]
[221.48922729 24.53847313]
[234.72456360 31.59721565]
[246.30471802 41.13135529]
[255.77334595 52.76515198]
[262.75726318 66.04013062]
[266.98123169 80.43311310]
[268.27880859 95.37688446]
[266.59884644 110.28250885]
[262.00756836 124.56256866]
[254.68588257 137.65428162]
[244.92234802 149.04170227]
[233.10174561 158.27607727]
[219.68994141 164.99345398]
[205.21545410 168.92912292]
[190.24874878 169.92796326]
[175.37965393 167.95062256]
[161.19413757 163.07502747]
[148.25128174 155.49331665]
[137.06112671 145.50430298]
[128.06581116 133.50344849]
[129.31268311 148.45153809]
[141.30506897 151.06169128]
[152.18994141 156.70034790]
[161.21847534 164.97109985]
[167.77178955 175.29678345]
[171.40333557 186.95968628]
[171.86933899 199.15151978]
[169.14511108 211.02935791]
[163.42633057 221.77400208]
[155.11486816 230.64639282]
[144.79066467 237.03846741]
[133.17126465 240.51489258]
[133.17126465 255.51489258]
[133.17126465 270.51489258]
[133.17126465 285.51489258]
[133.17126465 300.51489258]
[133.17126465 315.51489258]
[133.17126465 330.51489258]
[133.17126465 345.51489258]
[133.17126465 360.51489258]
[133.17126465 375.51489258]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[17 130]
[18 129]
[19 99]
[20 98]
[23 97]
[24 96]
[25 95]
[26 69]
[27 68]
[28 67]
[29 66]
[30 65]
[32 63]
[33 62]
[34 61]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
