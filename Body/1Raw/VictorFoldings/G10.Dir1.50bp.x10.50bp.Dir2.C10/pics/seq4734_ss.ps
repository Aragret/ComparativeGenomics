%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:19 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGAGUAGGCCUAGAAAUAAACAUGCUAGCUUUUAUUCCAGUUCUAACCAAAAAAAUAAACCCxxxxxxxxxxAGUUAAAUUAUAGGCUAAAUCCUAUAUAUCUUAAUGGCACAUGCAGCGCAAGUAGGUCUACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[120.18137360 353.55239868]
[120.18137360 338.55239868]
[120.18137360 323.55239868]
[120.18137360 308.55239868]
[120.18137360 293.55239868]
[120.18137360 278.55239868]
[120.18137360 263.55239868]
[120.18137360 248.55241394]
[120.18137360 233.55241394]
[120.18137360 218.55241394]
[108.21277618 192.39813232]
[120.78469086 173.44004822]
[115.00841522 159.59683228]
[109.49443054 154.60267639]
[109.25929260 145.40502930]
[97.40258026 136.39018250]
[99.55549622 120.71614075]
[85.59510803 115.22911072]
[72.07091522 121.71726990]
[58.54672623 128.20544434]
[45.02253342 134.69360352]
[39.99160767 146.61599731]
[28.54150581 151.72621155]
[17.06736755 147.77001953]
[3.41112542 153.97541809]
[-5.68120861 167.62318420]
[-22.02713013 166.30299377]
[-28.81135559 151.37295532]
[-19.05485535 138.19180298]
[-2.79428148 140.31918335]
[10.86195946 134.11376953]
[20.24382782 119.31578827]
[38.53437042 121.16941071]
[52.05855942 114.68125153]
[65.58274841 108.19308472]
[79.10694122 101.70491791]
[82.50991821 87.09602356]
[73.24496460 75.29938507]
[62.47415924 64.85957336]
[50.39417267 55.96722412]
[38.31418228 47.07487488]
[26.23419380 38.18252182]
[14.15420628 29.29017448]
[2.07421780 20.39782524]
[-10.36331749 29.03416824]
[-24.93184853 33.16171265]
[-40.05109024 32.33272552]
[-54.08102417 26.63713837]
[-65.49977875 16.69275856]
[-73.06874847 3.57828164]
[-75.96688843 -11.28373337]
[-73.87984467 -26.28116417]
[-67.03400421 -39.78720474]
[-56.17193985 -50.33681870]
[-42.47190094 -56.78566360]
[-27.41995811 -58.43421936]
[-12.64883423 -55.10365677]
[0.23920818 -47.15525436]
[9.84617138 -35.45119858]
[15.12996387 -21.26105118]
[15.51743984 -6.12405729]
[10.96656704 8.31783581]
[23.04655647 17.21018600]
[35.12654495 26.10253525]
[47.20653152 34.99488449]
[59.28652191 43.88723373]
[71.36650848 52.77958298]
[66.46257019 38.60385513]
[67.63556671 23.64978790]
[74.68982697 10.41206169]
[86.44854736 1.09902537]
[100.95008850 -2.73569870]
[115.77529144 -0.45239216]
[128.45095825 7.56803846]
[136.86251831 19.98760414]
[139.60673523 34.73444366]
[136.22579956 49.34845352]
[127.28374481 61.39168930]
[114.27228546 68.85507202]
[99.36203766 70.49353027]
[85.04161072 66.03443909]
[94.30655670 77.83107758]
[109.14776611 80.00791168]
[121.41013336 71.36879730]
[133.67250061 62.72967911]
[145.93486023 54.09056473]
[158.10670471 45.32435608]
[170.18669128 36.43200684]
[182.17352295 27.41447830]
[194.06590271 18.27274323]
[205.95828247 9.13100910]
[217.85066223 -0.01072500]
[229.74304199 -9.15245914]
[241.63542175 -18.29419327]
[243.43594360 -33.99558640]
[255.86344910 -43.75942993]
[271.54492188 -41.79301071]
[281.17681885 -29.26296997]
[279.04473877 -13.60315895]
[266.41354370 -4.10426474]
[250.77716064 -6.40181351]
[238.88478088 2.73992062]
[226.99240112 11.88165474]
[215.10002136 21.02338982]
[203.20764160 30.16512299]
[191.31526184 39.30685806]
[187.90692139 45.91964340]
[179.07904053 48.51199722]
[166.99905396 57.40434647]
[163.45388794 63.94479370]
[154.57398987 66.35293579]
[142.31161499 74.99205017]
[130.04924011 83.63116455]
[117.78688049 92.27027893]
[119.40957642 104.28919983]
[113.51588440 115.22911072]
[125.76506805 125.24250793]
[123.21968079 139.91799927]
[128.85163879 153.82055664]
[134.62791443 167.66377258]
[154.77716064 169.46020508]
[168.80390930 190.70452881]
[181.74195862 198.29444885]
[194.68002319 205.88435364]
[211.40126038 208.68367004]
[213.34025574 225.52636719]
[197.69253540 232.05210876]
[187.09010315 218.82240295]
[174.15205383 211.23249817]
[161.21398926 203.64259338]
[154.70584106 207.37004089]
[162.42126465 220.23365784]
[170.13667297 233.09725952]
[182.86199951 241.03866577]
[182.57853699 256.03598022]
[169.56221008 263.49087524]
[156.48307800 256.14672852]
[156.07229614 241.15243530]
[148.88092041 227.98869324]
[141.68952942 214.82495117]
[135.18138123 218.55241394]
[135.18138123 233.55241394]
[135.18138123 248.55241394]
[135.18138123 263.55239868]
[135.18138123 278.55239868]
[135.18138123 293.55239868]
[135.18138123 308.55239868]
[135.18138123 323.55239868]
[135.18138123 338.55239868]
[135.18138123 353.55239868]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[12 120]
[13 119]
[15 118]
[17 116]
[18 36]
[19 35]
[20 34]
[21 33]
[24 31]
[25 30]
[37 82]
[38 81]
[39 67]
[40 66]
[41 65]
[42 64]
[43 63]
[44 62]
[83 114]
[84 113]
[85 112]
[86 111]
[87 109]
[88 108]
[89 106]
[90 105]
[91 104]
[92 103]
[93 102]
[94 101]
[122 130]
[123 129]
[124 128]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
