%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:58 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGUAAAUUAUAGGCUAAAUCCUAUAUAUCUUAAUGGCACAUGCAGCGCAAGUAGGUCUACAAxxxxxxxxxxACCAGACGCCUCAACCGCCUUUUCAUCAAUCGCCCACAUCACUCGAGACGUAAAUUAUGGCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[101.09484863 291.97012329]
[101.09484863 276.97012329]
[101.09484863 261.97012329]
[101.09484863 246.97013855]
[101.09484863 231.97013855]
[101.09484863 216.97013855]
[101.09484863 201.97013855]
[101.09484863 186.97013855]
[101.09484863 171.97013855]
[101.09484863 156.97013855]
[88.15679932 149.38023376]
[75.06364441 156.69932556]
[61.97048569 164.01843262]
[48.95417786 171.47334290]
[36.01612091 179.06326294]
[23.15771866 186.78733826]
[10.38036156 194.64476013]
[-2.39699554 202.50219727]
[-15.17435265 210.35961914]
[-27.95170975 218.21704102]
[-40.72906876 226.07447815]
[-44.15026093 241.50401306]
[-57.52445221 249.92462158]
[-72.91696930 246.34048462]
[-81.19570160 232.87802124]
[-77.44902802 217.52426147]
[-63.89978409 209.38832092]
[-48.58649445 213.29711914]
[-35.80913544 205.43968201]
[-23.03177834 197.58226013]
[-10.25442123 189.72483826]
[2.52293587 181.86741638]
[15.30029297 174.00997925]
[19.37686348 167.78686523]
[28.42621231 166.12519836]
[41.36426926 158.53529358]
[45.56941986 152.39833069]
[54.65138245 150.92527771]
[67.74453735 143.60618591]
[80.83769226 136.28707886]
[65.10916138 114.91567230]
[66.47368622 90.46900940]
[81.72894287 74.01672363]
[76.24191284 60.05633163]
[70.75488281 46.09593964]
[61.61314774 34.20355988]
[49.53315735 25.31121254]
[33.83257675 23.36124802]
[28.16974449 9.58512402]
[16.08975601 0.69277471]
[4.00976706 -8.19957542]
[-12.33041286 -12.72006798]
[-12.50999451 -29.67306328]
[3.73075867 -34.53868484]
[12.90211678 -20.27956390]
[24.98210526 -11.38721371]
[37.06209183 -2.49486399]
[51.89863205 -1.18094027]
[58.42550659 13.23122311]
[70.50549316 22.12357330]
[77.16307068 18.67007446]
[90.47823334 11.76307487]
[97.13581085 8.30957603]
[96.82375336 -6.68717766]
[96.51169586 -21.68393135]
[96.19963837 -36.68068695]
[81.77248383 -41.27806854]
[69.62128448 -50.31283951]
[61.06412125 -62.80498505]
[57.02920151 -77.39943695]
[57.95420456 -92.51311493]
[63.73879623 -106.50658417]
[73.75550842 -117.86194611]
[86.91780090 -125.34745026]
[101.79792023 -128.15113831]
[116.78179169 -125.96887207]
[130.24407959 -119.03736877]
[140.72448730 -108.10852051]
[147.08618164 -94.36779022]
[148.63908386 -79.30567932]
[145.21476746 -64.55600739]
[137.18466187 -51.71871567]
[125.41981506 -42.18629074]
[111.19639587 -36.99274063]
[111.50844574 -21.99598694]
[111.82050323 -6.99923420]
[112.13256073 7.99751949]
[84.71527100 40.60890961]
[90.20230103 54.56929779]
[95.68933105 68.52968597]
[108.64721680 67.83254242]
[121.40718079 72.49388885]
[131.75535583 82.20785522]
[137.70771790 95.76019287]
[137.87791443 111.17016602]
[131.76574707 125.97850800]
[146.76493835 125.82247162]
[135.72799683 115.66442108]
[132.61250305 100.99153137]
[138.56956482 87.22514343]
[151.39817810 79.45166016]
[166.35839844 80.54324341]
[177.92274475 90.09655762]
[181.81842041 104.58184814]
[176.60604858 118.64709473]
[164.21232605 127.09521484]
[179.03009033 129.42631531]
[185.42651367 127.37857056]
[191.03430176 128.71424866]
[194.41052246 132.17497253]
[209.11848450 135.12045288]
[223.82644653 138.06594849]
[233.41236877 126.13410187]
[247.44990540 120.03441620]
[262.71331787 121.16854858]
[275.69522095 129.27587891]
[283.41244507 142.49340820]
[284.09164429 157.78384399]
[277.57672119 171.63354492]
[265.36477661 180.85997009]
[250.26200867 183.34294128]
[235.73893738 178.51188660]
[225.13285828 167.47695923]
[220.88096619 152.77391052]
[206.17300415 149.82841492]
[191.46504211 146.88293457]
[176.69898987 144.24407959]
[161.88122559 141.91296387]
[146.92097473 140.82165527]
[131.92178345 140.97769165]
[145.15962219 148.03175354]
[160.08027649 149.57261658]
[171.88471985 158.82762146]
[176.94146729 172.94955444]
[173.69487000 187.59399414]
[163.14369202 198.25573730]
[148.53388977 201.65483093]
[134.36000061 196.74555969]
[124.98245239 185.03823853]
[123.28623199 170.13388062]
[116.09484863 156.97013855]
[116.09484863 171.97013855]
[116.09484863 186.97013855]
[116.09484863 201.97013855]
[116.09484863 216.97013855]
[116.09484863 231.97013855]
[116.09484863 246.97013855]
[116.09484863 261.97012329]
[116.09484863 276.97012329]
[116.09484863 291.97012329]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[11 40]
[12 39]
[13 38]
[14 36]
[15 35]
[16 33]
[17 32]
[18 31]
[19 30]
[20 29]
[21 28]
[43 90]
[44 89]
[45 88]
[46 60]
[47 59]
[49 57]
[50 56]
[51 55]
[63 87]
[64 86]
[65 85]
[66 84]
[96 130]
[97 129]
[106 128]
[107 127]
[110 126]
[111 125]
[112 124]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
