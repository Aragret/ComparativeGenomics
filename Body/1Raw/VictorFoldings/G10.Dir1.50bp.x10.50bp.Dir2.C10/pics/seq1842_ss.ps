%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:09 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCUCUGAGCUAAACCUAGCCCCAAACCCACUCCACCUUACUACCAGACAACCUUAGCCAAAxxxxxxxxxxAGCCUCGCUAACCUCGCCUUACCCCCCACUAUUAACCUACUGGGAGAACUCUCUGUGCUACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[121.74162292 261.55255127]
[121.74162292 246.55255127]
[121.74162292 231.55255127]
[121.74162292 216.55255127]
[121.74162292 201.55255127]
[121.74162292 186.55255127]
[121.74162292 171.55255127]
[121.74162292 156.55255127]
[121.74162292 141.55255127]
[121.74162292 126.55254364]
[115.04847717 123.16848755]
[108.28036499 136.55477905]
[101.51203918 149.94094849]
[88.12596893 143.17242432]
[94.89408112 129.78665161]
[101.66219330 116.40037537]
[94.96905518 113.01631927]
[82.88906097 121.90866852]
[70.80907440 130.80101013]
[58.72908783 139.69335938]
[52.65184021 154.92488098]
[36.38572693 157.00949097]
[26.66392899 143.80271912]
[33.48740005 128.89056396]
[49.83673859 127.61338043]
[61.91672516 118.72103119]
[73.99671173 109.82867432]
[86.07669830 100.93632507]
[93.12183380 87.69374084]
[93.74581146 72.70672607]
[94.36978912 57.71971130]
[94.99376678 42.73269272]
[80.08064270 41.06431961]
[65.32022858 38.35971832]
[50.78443527 34.63206482]
[36.54407883 29.89952278]
[22.66853714 24.18514633]
[9.22541428 17.51677704]
[-3.71979880 9.92690277]
[-16.10403252 1.45250034]
[-27.86695099 -7.86514282]
[-38.95124435 -17.98063278]
[-49.30291748 -28.84468460]
[-58.87152863 -40.40437317]
[-67.61046600 -52.60337830]
[-75.47714996 -65.38226318]
[-82.43325806 -78.67877960]
[-88.44490051 -92.42813873]
[-93.48278809 -106.56335449]
[-97.52237701 -121.01557159]
[-100.54398346 -135.71437073]
[-102.53288269 -150.58813477]
[-103.47940063 -165.56440735]
[-103.37890625 -180.57023621]
[-102.23190308 -195.53248596]
[-100.04397583 -210.37828064]
[-96.82578278 -225.03529358]
[-92.59300995 -239.43211365]
[-87.36626434 -253.49859619]
[-81.17102051 -267.16619873]
[-74.03745270 -280.36837769]
[-66.00032806 -293.04074097]
[-57.09880066 -305.12161255]
[-47.37622833 -316.55212402]
[-36.87998581 -327.27655029]
[-25.66121101 -337.24270630]
[-13.77455807 -346.40197754]
[-1.27793968 -354.70974731]
[11.76776123 -362.12557983]
[25.29898834 -368.61331177]
[39.24981689 -374.14132690]
[53.55227661 -378.68273926]
[68.13668823 -382.21536255]
[82.93200684 -384.72204590]
[97.86613464 -386.19055176]
[112.86632538 -386.61370850]
[127.85948944 -385.98947144]
[142.77259827 -384.32089233]
[157.53297424 -381.61608887]
[172.06871033 -377.88821411]
[186.30899048 -373.15545654]
[200.18446350 -367.44088745]
[213.62748718 -360.77233887]
[226.57258606 -353.18228149]
[238.95669556 -344.70770264]
[250.71948242 -335.38989258]
[261.80364990 -325.27423096]
[272.15515137 -314.41003418]
[281.72360229 -302.85021973]
[290.46237183 -290.65109253]
[298.32885742 -277.87207031]
[305.28479004 -264.57546997]
[311.29623413 -250.82601929]
[316.33392334 -236.69071960]
[320.37329102 -222.23844910]
[323.39468384 -207.53961182]
[325.38336182 -192.66581726]
[326.32968140 -177.68952942]
[326.22897339 -162.68371582]
[325.08175659 -147.72146606]
[322.89361572 -132.87570190]
[319.67520142 -118.21874237]
[315.44223022 -103.82198334]
[310.21527100 -89.75557709]
[304.01983643 -76.08805084]
[296.88607788 -62.88599777]
[288.84878540 -50.21372604]
[279.94708252 -38.13298035]
[270.22433472 -26.70261955]
[259.72793579 -15.97832966]
[248.50903320 -6.01235819]
[236.62223816 3.14674067]
[224.12550354 11.45434475]
[211.07969666 18.86997795]
[197.54838562 25.35751534]
[183.59747314 30.88534737]
[169.29495239 35.42654419]
[154.71047974 38.95897675]
[139.91513062 41.46544266]
[124.98097992 42.93372345]
[109.98078156 43.35667038]
[109.35681152 58.34368896]
[108.73283386 73.33070374]
[108.10885620 88.31771851]
[115.84160614 75.46452332]
[123.71739960 62.69848251]
[135.12145996 52.95439148]
[148.95997620 47.16684723]
[163.90560913 45.89097214]
[178.52487183 49.24913406]
[191.41554260 56.91923904]
[201.34123230 68.16561127]
[207.34989929 81.90955353]
[208.86523438 96.83280945]
[205.74188232 111.50403595]
[198.27944946 124.51602936]
[187.19366455 134.62074280]
[173.54782104 140.84899902]
[158.65077209 142.60340881]
[143.93299866 139.71627808]
[136.74162292 126.55254364]
[136.74162292 141.55255127]
[136.74162292 156.55255127]
[136.74162292 171.55255127]
[136.74162292 186.55255127]
[136.74162292 201.55255127]
[136.74162292 216.55255127]
[136.74162292 231.55255127]
[136.74162292 246.55255127]
[136.74162292 261.55255127]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[17 28]
[18 27]
[19 26]
[20 25]
[29 124]
[30 123]
[31 122]
[32 121]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
