%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:33 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGACGCUGGAGCCGGAGCACCCUAUGUCGCAGUAUCUGUCUUUGAUUCCUGCCUCAUCCUAUUxxxxxxxxxxAGCAGGAACAGGUUGAACAGUCUACCCUCCCUUAGCAGGGAACUACUCCCACCCUGGAGCCCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[158.24801636 378.20016479]
[158.24801636 363.20016479]
[158.24801636 348.20016479]
[158.24801636 333.20016479]
[158.24801636 318.20016479]
[158.24801636 303.20016479]
[158.24801636 288.20016479]
[158.24801636 273.20016479]
[158.24801636 258.20016479]
[158.24801636 243.20016479]
[143.02041626 226.72071838]
[142.05607605 206.90892029]
[152.56706238 193.23652649]
[145.74349976 179.87843323]
[138.91992188 166.52032471]
[131.68821716 153.37869263]
[124.05524445 140.46600342]
[116.42227173 127.55329895]
[108.78930664 114.64060211]
[99.47648621 134.60560608]
[71.82161713 143.87316895]
[57.89089966 149.43510437]
[53.44002533 154.45828247]
[47.94057083 156.17407227]
[43.27230835 154.92645264]
[29.12499237 159.91177368]
[14.97767639 164.89709473]
[6.77971220 178.68740845]
[-9.13235760 180.73329163]
[-20.55215645 169.46528625]
[-18.71938896 153.52726746]
[-5.04000044 145.14550781]
[9.99235439 150.74978638]
[24.13967133 145.76445007]
[38.28698730 140.77912903]
[52.32896423 135.50439453]
[66.25968170 129.94245911]
[64.56928253 115.03800964]
[49.74679947 112.73713684]
[34.92431641 110.43625641]
[18.34517670 113.98145294]
[10.34896755 99.03163910]
[22.50096703 87.20940399]
[37.22519302 95.61377716]
[52.04767609 97.91464996]
[66.87015533 100.21552277]
[71.97950745 94.72512817]
[60.99887848 84.50623322]
[71.21794891 73.52577209]
[82.19821930 83.74432373]
[87.30757141 78.25392151]
[83.94831085 63.63491440]
[78.94761658 55.91553497]
[80.67342377 48.68132401]
[77.61502838 33.99642944]
[74.55663300 19.31153107]
[71.49823761 4.62663317]
[68.43984222 -10.05826473]
[65.38144684 -24.74316216]
[62.32305527 -39.42805862]
[47.25801849 -40.26893616]
[32.92424774 -44.98120499]
[20.29904366 -53.24356842]
[10.24321651 -64.49269104]
[3.44238663 -77.96158600]
[0.36024618 -92.73191833]
[1.20694089 -107.79663086]
[5.92474174 -122.12858582]
[14.19198036 -134.75059509]
[25.44498444 -144.80207825]
[38.91650391 -151.59770203]
[53.68803024 -154.67414856]
[68.75241089 -153.82162476]
[83.08253479 -149.09829712]
[95.70135498 -140.82618713]
[105.74849701 -129.56930542]
[112.53892517 -116.09516144]
[115.60965729 -101.32244873]
[114.75132751 -86.25839233]
[110.02246094 -71.93009186]
[101.74547577 -59.31446838]
[90.48471832 -49.27167892]
[77.00794983 -42.48645401]
[80.06634521 -27.80155754]
[83.12474060 -13.11666012]
[86.18313599 1.56823754]
[89.24153137 16.25313568]
[92.29992676 30.93803215]
[95.35832214 45.62292862]
[98.56732178 60.27565384]
[101.92658234 74.89466095]
[115.96855927 80.16940308]
[128.12188721 71.37756348]
[140.27522278 62.58572006]
[146.92141724 48.22819138]
[161.76834106 47.03737640]
[173.92167664 38.24553680]
[180.12506104 23.06495285]
[196.40789795 21.11534119]
[206.01982117 34.40229416]
[199.07289124 49.25733566]
[182.71351624 50.39886856]
[170.56019592 59.19071198]
[164.78327942 72.91938782]
[149.06706238 74.73905182]
[136.91372681 83.53089142]
[124.76039886 92.32273865]
[121.70200348 107.00763702]
[129.33497620 119.92033386]
[136.96794128 132.83303833]
[144.60090637 145.74572754]
[149.25999451 148.36264038]
[152.12339783 152.14503479]
[153.04891968 156.19633484]
[152.27801514 159.69676208]
[159.10159302 173.05485535]
[165.92517090 186.41294861]
[189.67161560 188.33311462]
[204.55406189 213.19621277]
[218.24468994 219.32539368]
[231.93531799 225.45455933]
[245.62594604 231.58374023]
[261.06741333 227.23162842]
[274.01303101 236.70739746]
[274.53204346 252.74205017]
[262.22631836 263.03518677]
[246.53573608 259.69076538]
[239.49676514 245.27436829]
[225.80613708 239.14518738]
[212.11552429 233.01600647]
[198.42489624 226.88684082]
[192.13067627 230.96517944]
[201.20684814 242.90766907]
[210.28302002 254.85015869]
[223.95474243 261.02139282]
[228.23997498 275.39624023]
[220.17897034 288.04614258]
[205.33937073 290.23391724]
[193.97076416 280.44848633]
[193.92500305 265.44931030]
[186.73361206 252.28558350]
[179.54223633 239.12184143]
[173.24801636 243.20016479]
[173.24801636 258.20016479]
[173.24801636 273.20016479]
[173.24801636 288.20016479]
[173.24801636 303.20016479]
[173.24801636 318.20016479]
[173.24801636 333.20016479]
[173.24801636 348.20016479]
[173.24801636 363.20016479]
[173.24801636 378.20016479]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 152]
[2 151]
[3 150]
[4 149]
[5 148]
[6 147]
[7 146]
[8 145]
[9 144]
[10 143]
[13 117]
[14 116]
[15 115]
[16 111]
[17 110]
[18 109]
[19 108]
[21 37]
[22 36]
[25 35]
[26 34]
[27 33]
[38 46]
[39 45]
[40 44]
[51 91]
[52 90]
[54 89]
[55 88]
[56 87]
[57 86]
[58 85]
[59 84]
[60 83]
[92 107]
[93 106]
[94 105]
[96 103]
[97 102]
[119 131]
[120 130]
[121 129]
[122 128]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
