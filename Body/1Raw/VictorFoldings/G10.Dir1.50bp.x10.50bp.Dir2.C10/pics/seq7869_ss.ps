%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:38 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGUAGAAUUAAUUCCCCUAAAAAUCUUUGAAAUAGGGCCCGUAUUUACCCUAUAGCACCCCCUxxxxxxxxxxUUCAACUACAAGAACACCAAUGACCCCAAUACGCAAAACUAACCCCCUAAUAAAAUUAAUUCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[137.07014465 349.71383667]
[137.07014465 334.71383667]
[137.07014465 319.71383667]
[137.07014465 304.71383667]
[137.07014465 289.71383667]
[137.07014465 274.71383667]
[137.07014465 259.71383667]
[137.07014465 244.71385193]
[137.07014465 229.71385193]
[137.07014465 214.71385193]
[134.01174927 200.02894592]
[128.02345276 186.27612305]
[122.03515625 172.52328491]
[110.86528015 167.78028870]
[105.78143311 156.32054138]
[110.02394104 144.09741211]
[104.31927490 130.22453308]
[97.77139282 130.45014954]
[91.32614136 129.27359009]
[85.28030396 126.74900055]
[79.91229248 122.99266052]
[75.46929169 118.17753601]
[72.15590668 112.52536774]
[57.38378525 115.13008881]
[42.61167145 117.73480988]
[27.83955383 120.33953094]
[13.06743813 122.94425201]
[9.42419052 137.73095703]
[0.07649680 149.75346375]
[-13.35609722 156.92878723]
[-28.54631424 158.01376343]
[-42.86235809 152.82043457]
[-53.82388687 142.24853516]
[-59.53174973 128.12974548]
[-58.99702454 112.91022491]
[-52.31235504 99.22683716]
[-40.63590240 89.45031738]
[-25.99068069 85.27450562]
[-10.91406441 87.42288971]
[1.98183131 95.52324677]
[10.46271515 108.17214203]
[25.23483086 105.56741333]
[40.00694656 102.96269226]
[54.77906418 100.35797119]
[69.55117798 97.75325012]
[73.99619293 84.00061798]
[84.26842499 73.83330536]
[98.06597137 69.52971649]
[100.82221222 54.78512192]
[103.57845306 40.04052734]
[106.33469391 25.29592896]
[109.09094238 10.55133343]
[111.84718323 -4.19326353]
[97.48027802 -8.55850601]
[83.68080139 -14.47775841]
[70.61625671 -21.87916756]
[58.44524002 -30.67288589]
[47.31549072 -40.75216675]
[37.36212158 -51.99465942]
[28.70594978 -64.26388550]
[21.45205879 -77.41091156]
[15.68850136 -91.27613831]
[11.48524380 -105.69126129]
[8.89330864 -120.48129272]
[7.94415998 -135.46670532]
[8.64931965 -150.46556091]
[11.00022697 -165.29582214]
[14.96834373 -179.77743530]
[20.50550270 -193.73461914]
[27.54448509 -206.99795532]
[35.99984741 -219.40641785]
[45.76894760 -230.80940247]
[56.73319626 -241.06846619]
[68.75949860 -250.05908203]
[81.70186615 -257.67211914]
[95.40319061 -263.81515503]
[109.69715118 -268.41360474]
[124.41023254 -271.41168213]
[139.36383057 -272.77297974]
[154.37641907 -272.48092651]
[169.26577759 -270.53915405]
[183.85113525 -266.97116089]
[197.95544434 -261.82028198]
[211.40750122 -255.14907837]
[224.04402161 -247.03848267]
[235.71157837 -237.58695984]
[246.26856995 -226.90927124]
[255.58682251 -215.13499451]
[263.55322266 -202.40708923]
[270.07107544 -188.88006592]
[275.06127930 -174.71809387]
[278.46319580 -160.09310913]
[280.23559570 -145.18264771]
[280.35693359 -130.16770935]
[278.82571411 -115.23055267]
[275.66058350 -100.55251312]
[270.89990234 -86.31175232]
[264.60150146 -72.68115234]
[256.84179688 -59.82617188]
[247.71504211 -47.90286255]
[237.33198547 -37.05595779]
[225.81867981 -27.41712952]
[213.31488037 -19.10338593]
[199.97239685 -12.21564770]
[185.95315552 -6.83752632]
[171.42735291 -3.03430676]
[156.57133484 -0.85215622]
[141.56542969 -0.31756443]
[126.59178162 -1.43702078]
[123.83553314 13.30757618]
[121.07929230 28.05217171]
[118.32305145 42.79676819]
[115.56681061 57.54136658]
[112.81056213 72.28596497]
[127.52237701 86.78268433]
[129.63912964 107.32804108]
[118.19215393 124.51986694]
[123.89682007 138.39274597]
[138.72662354 149.26048279]
[135.78799438 166.53498840]
[141.77629089 180.28782654]
[147.76458740 194.04064941]
[149.75094604 179.17276001]
[155.77346802 165.43489075]
[165.36193848 153.89967346]
[177.76770020 145.46775818]
[192.02214050 140.79750061]
[207.01226807 140.25355530]
[221.56770325 143.87837219]
[234.55197144 151.38894653]
[244.95129395 162.19885254]
[251.95370483 175.46408081]
[255.01245117 190.14891052]
[253.88873291 205.10675049]
[248.67027283 219.16973877]
[239.76454163 231.23986816]
[227.86685181 240.37469482]
[213.90618896 245.86100769]
[198.97254944 247.27044678]
[184.23193359 244.49295044]
[170.83528137 237.74537659]
[159.82856750 227.55459595]
[152.07014465 214.71385193]
[152.07014465 229.71385193]
[152.07014465 244.71385193]
[152.07014465 259.71383667]
[152.07014465 274.71383667]
[152.07014465 289.71383667]
[152.07014465 304.71383667]
[152.07014465 319.71383667]
[152.07014465 334.71383667]
[152.07014465 349.71383667]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 152]
[2 151]
[3 150]
[4 149]
[5 148]
[6 147]
[7 146]
[8 145]
[9 144]
[10 143]
[11 122]
[12 121]
[13 120]
[16 118]
[17 117]
[23 45]
[24 44]
[25 43]
[26 42]
[27 41]
[48 114]
[49 113]
[50 112]
[51 111]
[52 110]
[53 109]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
