%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:58 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCCCUCCCUUAGCAGGGAACUACUCCCACCCUGGAGCCUCCGUAGACCUAACCAUCUUCUCxxxxxxxxxxCCUAUAGCACUCGAAUAAUUCUUCUCACCCUAACAGGUCAACCUCGCUUCCCCACCCUUACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[102.86407471 368.26235962]
[102.86407471 353.26235962]
[102.86407471 338.26235962]
[102.86407471 323.26235962]
[102.86407471 308.26235962]
[102.86407471 293.26235962]
[102.86407471 278.26235962]
[102.86407471 263.26235962]
[102.86407471 248.26237488]
[102.86407471 233.26237488]
[88.39922333 229.42604065]
[75.41036224 221.97041321]
[64.78588867 211.39851379]
[57.25428391 198.42672729]
[53.33413696 183.93627930]
[53.29846954 168.91337585]
[57.15572357 154.38206482]
[64.64875793 141.33441162]
[75.27201843 130.66285706]
[88.30561066 123.09905243]
[102.86407471 119.16381073]
[91.06743622 109.89885712]
[76.49473572 113.45362091]
[61.92203140 117.00838470]
[47.34933090 120.56314850]
[32.77662659 124.11790466]
[29.14003754 138.98510742]
[19.00217247 150.45169067]
[4.69263840 155.88269043]
[-10.50033951 154.03012085]
[-23.08552551 145.31968689]
[-30.17093468 131.75297546]
[-30.12839508 116.44752502]
[-22.96767807 102.92041779]
[-10.33426762 94.28007507]
[4.86877394 92.51198578]
[19.14789772 98.02245331]
[29.22186470 109.54520416]
[43.79456711 105.99044037]
[58.36727142 102.43567657]
[72.93997192 98.88092041]
[87.51268005 95.32615662]
[99.11402130 85.81779480]
[105.46114349 72.22684479]
[111.80827332 58.63589478]
[118.15540314 45.04494476]
[110.58651733 33.48159027]
[109.74320984 19.79576302]
[115.73959351 7.58535957]
[126.90573883 0.00719516]
[140.25120544 -1.03897440]
[146.87969971 -14.49493980]
[146.03713989 -30.29369545]
[158.60218811 -38.29176331]
[165.23068237 -51.74773026]
[171.85917664 -65.20369720]
[178.48767090 -78.65966034]
[185.11618042 -92.11562347]
[172.44276428 -100.16744995]
[160.71421814 -109.54232788]
[150.06803894 -120.13034821]
[140.62905884 -131.80737305]
[132.50794983 -144.43649292]
[125.79991150 -157.86964417]
[120.58361053 -171.94932556]
[116.92018890 -186.51046753]
[114.85260773 -201.38232422]
[114.40510559 -216.39054871]
[115.58293152 -231.35919189]
[118.37226868 -246.11273193]
[122.74042511 -260.47817993]
[128.63616943 -274.28713989]
[135.99040222 -287.37768555]
[144.71687317 -299.59637451]
[154.71328735 -310.79989624]
[165.86244202 -320.85690308]
[178.03359985 -329.64953613]
[191.08407593 -337.07464600]
[204.86085510 -343.04519653]
[219.20242310 -347.49121094]
[233.94061279 -350.36050415]
[248.90263367 -351.61950684]
[263.91308594 -351.25338745]
[278.79592896 -349.26651001]
[293.37670898 -345.68209839]
[307.48446655 -340.54223633]
[320.95379639 -333.90713501]
[333.62680054 -325.85464478]
[345.35482788 -316.47912598]
[356.00042725 -305.89053345]
[365.43878174 -294.21301270]
[373.55923462 -281.58343506]
[380.26654053 -268.14993286]
[385.48208618 -254.06997681]
[389.14471436 -239.50865173]
[391.21148682 -224.63667297]
[391.65820312 -209.62841797]
[390.47955322 -194.65985107]
[387.68942261 -179.90646362]
[383.32049561 -165.54122925]
[377.42401123 -151.73258972]
[370.06909180 -138.64244080]
[361.34194946 -126.42424011]
[351.34494019 -115.22125244]
[340.19525146 -105.16482544]
[328.02362061 -96.37286377]
[314.97271729 -88.94845581]
[301.19561768 -82.97863770]
[286.85382080 -78.53340912]
[272.11547852 -75.66489410]
[257.15338135 -74.40670776]
[242.14297485 -74.77362061]
[227.26022339 -76.76131439]
[212.67962646 -80.34649658]
[198.57214355 -85.48712921]
[191.94364929 -72.03116608]
[185.31513977 -58.57519531]
[178.68664551 -45.11923218]
[172.05815125 -31.66326523]
[173.37481689 -16.82697105]
[160.33567810 -7.86644125]
[153.70716858 5.58952427]
[161.81561279 19.82885170]
[159.84239197 36.26272964]
[148.36601257 48.41896057]
[131.74635315 51.39207458]
[125.39923096 64.98302460]
[119.05210114 78.57397461]
[112.70497131 92.16492462]
[117.86407471 119.16381073]
[132.42254639 123.09905243]
[145.45613098 130.66285706]
[156.07939148 141.33441162]
[163.57243347 154.38206482]
[167.42968750 168.91337585]
[167.39402771 183.93627930]
[163.47387695 198.42672729]
[155.94226074 211.39851379]
[145.31779480 221.97041321]
[132.32893372 229.42604065]
[117.86407471 233.26237488]
[117.86407471 248.26237488]
[117.86407471 263.26235962]
[117.86407471 278.26235962]
[117.86407471 293.26235962]
[117.86407471 308.26235962]
[117.86407471 323.26235962]
[117.86407471 338.26235962]
[117.86407471 353.26235962]
[117.86407471 368.26235962]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[21 130]
[22 42]
[23 41]
[24 40]
[25 39]
[26 38]
[43 129]
[44 128]
[45 127]
[46 126]
[51 122]
[52 121]
[54 119]
[55 118]
[56 117]
[57 116]
[58 115]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
