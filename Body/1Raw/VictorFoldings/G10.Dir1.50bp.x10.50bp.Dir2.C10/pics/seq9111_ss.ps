%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:55 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCAACCGAAACCAAAUAAUUCAAGCACUGCUUAUUACAAUUUUACUGGGUCUCUAUUUUACxxxxxxxxxxGGAGAAGGCUUAGAAGAAAACCCCACAAACCCCAUUACUAAACCCACACUCAACAGAAACCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[92.50000000 254.58078003]
[92.50000000 239.58078003]
[92.50000000 224.58078003]
[92.50000000 209.58078003]
[92.50000000 194.58078003]
[92.50000000 179.58078003]
[92.50000000 164.58078003]
[92.50000000 149.58078003]
[92.50000000 134.58078003]
[92.50000000 119.58078766]
[87.06058502 114.41718292]
[79.86920166 127.58091736]
[79.44877625 142.57502747]
[69.94953918 154.18383789]
[55.33520508 157.56336975]
[41.70385361 151.30348206]
[34.74340057 138.01618958]
[37.35820389 123.24585724]
[48.45719910 113.15564728]
[63.40970230 111.95601654]
[76.18176270 104.08998108]
[70.74234772 98.92637634]
[55.76263428 99.70622253]
[40.78292084 100.48606873]
[25.80320740 101.26590729]
[10.85511971 102.51278687]
[-4.04678297 104.22547150]
[-18.94868469 105.93816376]
[-24.56545067 109.62048340]
[-30.32624054 109.83165741]
[-34.50437164 107.39881134]
[-49.46462250 108.49012756]
[-64.42486572 109.58143616]
[-79.38511658 110.67274475]
[-94.74237823 117.85542297]
[-105.89566803 105.08669281]
[-96.71347809 90.83454132]
[-80.47642517 95.71249390]
[-65.51618195 94.62118530]
[-50.55593109 93.52987671]
[-35.59568405 92.43856812]
[-20.66137505 91.03626251]
[-5.75947237 89.32357025]
[9.14243031 87.61088562]
[11.63172913 85.02807617]
[15.52164364 83.55490112]
[20.26152039 83.84806824]
[25.02336121 86.28619385]
[40.00307465 85.50634766]
[54.98279190 84.72650909]
[69.96250153 83.94666290]
[80.57804108 79.48309326]
[90.52097321 79.65470886]
[98.10701752 83.46947479]
[102.23651123 89.40139008]
[111.00271606 77.22955322]
[119.76892090 65.05771637]
[128.53512573 52.88587570]
[137.30134583 40.71403885]
[126.03779602 30.78935242]
[115.80129242 19.80842209]
[106.69042206 7.87700272]
[98.79291534 -4.88999414]
[92.18484497 -18.36961365]
[86.92984009 -32.43203735]
[83.07851410 -46.94182968]
[80.66796875 -61.75925446]
[79.72140503 -76.74160004]
[80.24794769 -91.74459076]
[82.24251556 -106.62371826]
[85.68591309 -121.23569489]
[90.54497528 -135.43978882]
[96.77289581 -149.09921265]
[104.30970001 -162.08239746]
[113.08280945 -174.26432800]
[123.00772095 -185.52767944]
[133.98886108 -195.76396179]
[145.92045593 -204.87458801]
[158.68760681 -212.77183533]
[172.16735840 -219.37965393]
[186.22988892 -224.63436890]
[200.73976135 -228.48539734]
[215.55723572 -230.89566040]
[230.53961182 -231.84191895]
[245.54257202 -231.31507874]
[260.42166138 -229.32020569]
[275.03356934 -225.87651062]
[289.23757935 -221.01716614]
[302.89688110 -214.78897095]
[315.87991333 -207.25190735]
[328.06167603 -198.47856140]
[339.32479858 -188.55342102]
[349.56088257 -177.57208252]
[358.67126465 -165.64030457]
[366.56826782 -152.87298584]
[373.17581177 -139.39309692]
[378.43023682 -125.33047485]
[382.28097534 -110.82052612]
[384.69094849 -96.00300598]
[385.63690186 -81.02061462]
[385.10977173 -66.01765442]
[383.11459351 -51.13860321]
[379.67062378 -36.52676773]
[374.81097412 -22.32286453]
[368.58251953 -8.66369343]
[361.04519653 4.31919956]
[352.27160645 16.50077820]
[342.34622192 27.76372337]
[331.36468506 37.99956512]
[319.43270874 47.10972595]
[306.66525269 55.00646591]
[293.18524170 61.61373138]
[279.12249756 66.86788940]
[264.61248779 70.71833801]
[249.79490662 73.12800598]
[234.81250000 74.07366943]
[219.80953979 73.54622650]
[204.93054199 71.55075836]
[190.31877136 68.10648346]
[176.11495972 63.24657440]
[162.45591736 57.01783371]
[149.47317505 49.48024750]
[140.70697021 61.65208435]
[131.94076538 73.82392120]
[123.17455292 85.99575806]
[114.40834808 98.16759491]
[125.06329346 87.60955811]
[138.87744141 81.76409149]
[153.87451172 81.46745300]
[167.90899658 86.76207733]
[178.97312927 96.89050293]
[185.48403931 110.40375519]
[186.51028442 125.36860657]
[181.90504456 139.64418030]
[172.32713318 151.18817139]
[159.14680481 158.34909058]
[144.24963379 160.10250854]
[129.76684570 156.19755554]
[117.77034760 147.19288635]
[109.97637939 134.37672424]
[107.50000000 119.58078766]
[107.50000000 134.58078003]
[107.50000000 149.58078003]
[107.50000000 164.58078003]
[107.50000000 179.58078003]
[107.50000000 194.58078003]
[107.50000000 209.58078003]
[107.50000000 224.58078003]
[107.50000000 239.58078003]
[107.50000000 254.58078003]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[22 51]
[23 50]
[24 49]
[25 48]
[26 44]
[27 43]
[28 42]
[31 41]
[32 40]
[33 39]
[34 38]
[55 126]
[56 125]
[57 124]
[58 123]
[59 122]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
