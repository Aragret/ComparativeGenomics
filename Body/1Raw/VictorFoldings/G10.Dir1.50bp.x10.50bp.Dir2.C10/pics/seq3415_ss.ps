%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:47 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCUACUACAACCCUUCGCUGACGCCAUAAAACUCUUCACCAAAGAGCCCCUAAAACCCGCCAxxxxxxxxxxGGCCCCAAAAAUUUUGGUGCAACUCCAAAUAAAAGUAAUAACCAUGCACACUACUAUAACCCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[127.87540436 104.38657379]
[112.97096252 106.07697296]
[101.61421204 114.23269653]
[88.71943665 108.82747650]
[73.81498718 110.51787567]
[58.91054153 112.20826721]
[44.11246490 114.66120148]
[29.45973969 117.87019348]
[14.80701447 121.07919312]
[0.15428925 124.28818512]
[-14.49843597 127.49718475]
[-29.15116119 130.70617676]
[-15.02927876 135.76310730]
[-2.13702703 143.43055725]
[9.04847336 153.42478943]
[18.11326599 165.37591553]
[24.72187996 178.84165955]
[28.62973976 193.32366943]
[29.69222260 208.28599548]
[27.87000656 223.17489624]
[23.23053169 237.43937683]
[15.94549465 250.55151367]
[6.28450298 262.02606201]
[-5.39490604 271.43835449]
[-18.66049767 278.44009399]
[-33.02133179 282.77209473]
[-47.94594574 284.27410889]
[-62.88199615 282.89047241]
[-77.27672577 278.67245483]
[-90.59741974 271.77615356]
[-102.35108948 262.45675659]
[-112.10275269 251.05915833]
[-119.49153137 238.00518799]
[-124.24395752 223.77795410]
[-126.18417358 208.90396118]
[-125.24035645 193.93368530]
[-121.44744110 179.42114258]
[-114.94580841 165.90342712]
[-105.97605896 153.88079834]
[-94.87014771 143.79820251]
[-82.03910065 136.02876282]
[-67.95775604 130.86003113]
[-53.14295578 128.48301697]
[-66.95654297 122.63622284]
[-80.77012634 116.78943634]
[-96.11897278 121.45767212]
[-109.25642395 112.24969482]
[-110.10455322 96.22908020]
[-98.01274872 85.68546295]
[-82.25680542 88.70701599]
[-74.92333221 102.97585297]
[-61.10975266 108.82263947]
[-47.29616928 114.66942596]
[-32.36015701 116.05345154]
[-17.70743179 112.84445953]
[-3.05470705 109.63545990]
[11.59801769 106.42646790]
[26.25074196 103.21746826]
[40.90346909 100.00847626]
[30.11839294 89.58339691]
[31.33501816 74.63282013]
[43.66373825 66.08866119]
[58.08974457 70.19844818]
[64.06468201 83.95708466]
[57.22014618 97.30382538]
[72.12459564 95.61342621]
[87.02903748 93.92302704]
[98.38578796 85.76730347]
[111.28056335 91.17252350]
[126.18501282 89.48212433]
[126.82096100 66.00740051]
[131.42156982 42.98184204]
[139.85311890 21.07006073]
[151.87132263 0.90437615]
[167.12843323 -16.93344498]
[185.18324280 -31.92897606]
[205.51390076 -43.64995575]
[227.53297424 -51.75875473]
[250.60441589 -56.02209854]
[274.06195068 -56.31778717]
[297.22824097 -52.63818359]
[319.43466187 -45.09041214]
[340.04028320 -33.89324951]
[348.95642090 -45.95568085]
[350.93734741 -61.65238571]
[364.72460938 -67.28804779]
[373.64074707 -79.35047913]
[382.55691528 -91.41291046]
[391.47305298 -103.47534180]
[400.38919067 -115.53777313]
[404.94189453 -131.86900330]
[421.89523315 -132.01516724]
[426.72882080 -115.76484680]
[412.45162964 -106.62162018]
[403.53549194 -94.55918884]
[394.61932373 -82.49675751]
[385.70318604 -70.43432617]
[376.78701782 -58.37189484]
[375.44384766 -43.53797913]
[361.01885986 -37.03953171]
[352.10269165 -24.97710037]
[359.60070801 -18.30898094]
[366.59463501 -11.11349583]
[373.04742432 -3.42865252]
[378.92495728 4.70495129]
[384.19613647 13.24434376]
[388.83306885 22.14440727]
[392.81118774 31.35811234]
[396.10943604 40.83676910]
[398.71032715 50.53028870]
[400.60009766 60.38743591]
[401.76870728 70.35611725]
[402.20993042 80.38362885]
[401.92141724 90.41698456]
[400.90463257 100.40313721]
[399.16491699 110.28928375]
[396.71139526 120.02317810]
[393.55706787 129.55332947]
[389.71850586 138.82937622]
[385.21600342 147.80224609]
[380.07330322 156.42449951]
[374.31753540 164.65054321]
[367.97915649 172.43685913]
[361.09158325 179.74224854]
[353.69122314 186.52809143]
[345.81713867 192.75848389]
[337.51095581 198.40045166]
[328.81655884 203.42413330]
[319.77987671 207.80293274]
[310.44866943 211.51368713]
[300.87225342 214.53674316]
[291.10119629 216.85604858]
[281.18719482 218.45933533]
[271.18264771 219.33808899]
[261.14038086 219.48760986]
[251.11352539 218.90705872]
[241.15507507 217.59948730]
[231.31768799 215.57174683]
[221.65335083 212.83453369]
[212.21318054 209.40226746]
[203.04708862 205.29306030]
[194.20353699 200.52857971]
[185.72930908 195.13400269]
[177.66920471 189.13778687]
[170.06587219 182.57162476]
[162.95951843 175.47016907]
[156.38774109 167.87092590]
[150.38531494 159.81407166]
[144.98399353 151.34214783]
[140.21235657 142.49990845]
[136.09568787 133.33410645]
[132.65577698 123.89315033]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 70]
[2 69]
[4 67]
[5 66]
[6 65]
[7 59]
[8 58]
[9 57]
[10 56]
[11 55]
[12 54]
[43 53]
[44 52]
[45 51]
[83 101]
[84 100]
[86 98]
[87 97]
[88 96]
[89 95]
[90 94]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
