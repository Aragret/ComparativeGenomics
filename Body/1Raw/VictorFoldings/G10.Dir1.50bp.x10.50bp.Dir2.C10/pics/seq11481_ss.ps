%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:29 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCUCCUUGGCGCCUGCCUGAUCCUCCAAAUCACCACAGGACUAUUCCUAGCCAUGCACUACxxxxxxxxxxUACUUCUCUUCCUUCUCUCCUUAAUGACAUUAACACUAUUCUCACCAGACCUCCUAGGCGCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[76.47442627 236.40719604]
[75.85044861 221.42018127]
[75.22647095 206.43316650]
[74.60249329 191.44615173]
[73.97851562 176.45913696]
[73.35453796 161.47212219]
[72.73056030 146.48510742]
[72.10658264 131.49809265]
[60.70555878 121.75043488]
[45.80365753 123.46312714]
[30.90175629 125.17581940]
[15.99985313 126.88850403]
[22.73354530 136.20642090]
[25.66386986 148.78829956]
[23.69826508 163.24147034]
[16.21477127 177.86216736]
[3.14136410 190.78524780]
[-8.55825901 200.17240906]
[-20.25788307 209.55957031]
[-25.69626236 225.03070068]
[-41.86157990 227.79014587]
[-52.12434387 214.99922180]
[-45.92710114 199.81613159]
[-29.64504433 197.85993958]
[-17.94542122 188.47277832]
[-6.24579763 179.08561707]
[-12.30881119 165.36557007]
[-27.12656975 167.69667053]
[-41.94432831 170.02777100]
[-56.76208496 172.35887146]
[-64.67444611 185.84696960]
[-79.42290497 191.04475403]
[-94.04369354 185.49798584]
[-101.63332367 171.82569885]
[-98.60820007 156.48352051]
[-86.39669800 146.71554565]
[-70.76470947 147.13392639]
[-59.09318924 157.54112244]
[-44.27543259 155.21000671]
[-29.45767212 152.87890625]
[-14.63991451 150.54780579]
[-13.09075356 143.20954895]
[-27.76723099 140.11099243]
[-24.66845703 125.43456268]
[-9.99243164 128.53302002]
[-8.44327068 121.19475555]
[-21.05439949 113.07321167]
[-33.66552734 104.95166779]
[-46.27665710 96.83013153]
[-62.67382050 96.57521820]
[-70.41415405 82.11771393]
[-61.53506470 68.33026886]
[-45.17059708 69.39620972]
[-38.15511322 84.21900177]
[-25.54398537 92.34054565]
[-12.93285751 100.46208191]
[-0.32172900 108.58362579]
[14.28716373 111.98660278]
[29.18906593 110.27391815]
[44.09096909 108.56122589]
[58.99287033 106.84853363]
[98.14069366 73.63277435]
[104.48782349 60.04182434]
[110.83495331 46.45087433]
[117.04035950 32.79463196]
[123.10337067 19.07457924]
[110.47293854 10.92481136]
[99.27300262 0.89945334]
[89.77935791 -10.75461102]
[82.22579956 -23.75039101]
[76.79833984 -37.76785278]
[73.63064575 -52.46179962]
[72.80070496 -67.47039032]
[74.32897186 -82.42401123]
[78.17780304 -96.95442963]
[84.25241852 -110.70381165]
[92.40322876 -123.33357239]
[102.42951202 -134.53268433]
[114.08436584 -144.02536011]
[127.08076477 -151.57785034]
[141.09867859 -157.00415039]
[155.79287720 -160.17063904]
[170.80154419 -160.99932861]
[185.75503540 -159.46983337]
[200.28514099 -155.61981201]
[214.03401184 -149.54405212]
[226.66310120 -141.39219666]
[237.86138916 -131.36499023]
[247.35310364 -119.70936584]
[254.90452576 -106.71233368]
[260.32965088 -92.69397736]
[263.49493408 -77.99951172]
[264.32238770 -62.99078369]
[262.79165649 -48.03741074]
[258.94042969 -33.50762939]
[252.86355591 -19.75925064]
[244.71066284 -7.13083935]
[234.68252563 4.06662035]
[223.02610779 13.55737877]
[210.02845764 21.10771751]
[196.00965881 26.53170395]
[181.31492615 29.69576645]
[166.30613708 30.52198792]
[151.35289001 28.99002266]
[136.82342529 25.13759232]
[130.76040649 38.85764694]
[130.93464661 46.29507065]
[124.42590332 52.79800415]
[118.07877350 66.38895416]
[111.73164368 79.97990417]
[123.81761932 71.09570312]
[133.00457764 59.23822403]
[147.34585571 54.84185410]
[161.59985352 59.51340866]
[170.55691528 71.54548645]
[170.94334412 86.54051208]
[162.61788940 99.01796722]
[148.62341309 104.41748810]
[134.07633972 100.76659393]
[119.08396912 101.24474335]
[132.47026062 108.01285553]
[145.85653687 114.78097534]
[162.19152832 113.33184814]
[171.39126587 126.90744781]
[163.99185181 141.54235840]
[147.60516357 142.18144226]
[139.08842468 128.16725159]
[125.70214081 121.39913940]
[112.31585693 114.63102722]
[106.01029205 118.69180298]
[114.51305389 131.04910278]
[123.01581573 143.40641785]
[131.51858521 155.76371765]
[142.35145569 166.13911438]
[136.55433655 179.97361755]
[121.56098938 179.52696228]
[116.59741211 165.37292480]
[108.86466217 152.51972961]
[101.13191223 139.66653442]
[93.39916229 126.81333923]
[87.09359741 130.87411499]
[87.71757507 145.86112976]
[88.34155273 160.84814453]
[88.96553040 175.83515930]
[89.58950806 190.82217407]
[90.21348572 205.80918884]
[90.83746338 220.79620361]
[91.46144104 235.78321838]
[98.16143036 251.35713196]
[85.05090332 262.10656738]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 148]
[2 147]
[3 146]
[4 145]
[5 144]
[6 143]
[7 142]
[8 141]
[9 61]
[10 60]
[11 59]
[12 58]
[17 26]
[18 25]
[19 24]
[27 41]
[28 40]
[29 39]
[30 38]
[46 57]
[47 56]
[48 55]
[49 54]
[62 110]
[63 109]
[64 108]
[65 106]
[66 105]
[120 129]
[121 128]
[122 127]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
