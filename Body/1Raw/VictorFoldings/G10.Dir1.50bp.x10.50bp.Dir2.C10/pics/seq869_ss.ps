%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:38 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGAAUACACUGAAAAUGUUUAGACGGGCUCACAUCACCCCAUAAACAAAUAGGUUUGGUCCUAxxxxxxxxxxAGUAUAAGUAACAUGAAAACAUUCUCCUCCGCAUAAGCCUGCGUCAGAUUAAAACACUGAACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[108.92776489 361.75909424]
[108.92776489 346.75909424]
[108.92776489 331.75909424]
[108.92776489 316.75909424]
[108.92776489 301.75909424]
[108.92776489 286.75909424]
[108.92776489 271.75909424]
[108.92776489 256.75909424]
[108.92776489 241.75907898]
[108.92776489 226.75907898]
[107.23736572 211.85462952]
[103.87810516 197.23562622]
[100.51885223 182.61662292]
[97.67828369 180.43066406]
[95.78314972 176.73226929]
[95.54535675 171.99423218]
[97.43230438 166.99476624]
[94.97937775 152.19668579]
[92.52645111 137.39860535]
[90.07352448 122.60052490]
[79.63349915 106.02536774]
[85.13237000 90.22382355]
[77.23588562 77.47056580]
[69.33940125 64.71730804]
[61.44292068 51.96405411]
[53.54644012 39.21079636]
[45.64995575 26.45753860]
[37.75347519 13.70428085]
[29.44052505 15.26142502]
[20.69296646 13.67103004]
[12.71525192 8.84322071]
[6.71032333 1.15048325]
[3.70281839 -8.58918571]
[-11.25846195 -9.66625500]
[-26.21974373 -10.74332523]
[-35.38828659 1.66398644]
[-49.81735611 7.12342691]
[-64.90268707 3.89290881]
[-75.83061218 -6.99672127]
[-79.11405945 -22.07062340]
[-73.70530701 -36.51876831]
[-61.33025360 -45.73080444]
[-45.93774033 -46.76720810]
[-32.43946457 -39.29726410]
[-25.14267349 -25.70460510]
[-10.18139267 -24.62753677]
[4.77988815 -23.55046654]
[14.77098560 -34.73876190]
[12.01474285 -49.48336029]
[9.25850010 -64.22795868]
[2.29814339 -77.51529694]
[-8.25387192 -88.17620850]
[-18.80588722 -98.83711243]
[-29.35790253 -109.49802399]
[-45.16128159 -109.32851410]
[-56.39722443 -120.44287872]
[-56.39964294 -136.24716187]
[-45.16710281 -147.36497498]
[-29.36367416 -147.20030212]
[-18.36524582 -135.85084534]
[-18.69699287 -120.05004120]
[-8.14497757 -109.38912964]
[2.40703726 -98.72821808]
[12.95905209 -88.06731415]
[9.61405754 -102.68959045]
[9.22418118 -117.68452454]
[11.80479717 -132.46087646]
[17.25415230 -146.43600464]
[25.35738182 -159.05891418]
[35.79498291 -169.83186340]
[48.15540695 -178.33009338]
[61.95128632 -184.21852112]
[76.63866425 -187.26498413]
[91.63842773 -187.34933472]
[106.35914612 -184.46827698]
[120.22038269 -178.73538208]
[132.67561340 -170.37672424]
[143.23371887 -159.72184753]
[151.47842407 -147.19088745]
[157.08460999 -133.27792358]
[159.83126831 -118.53153992]
[159.61007690 -103.53317261]
[156.42976379 -88.87419128]
[150.41571045 -75.13260651]
[141.80506897 -62.85021973]
[130.93734741 -52.51133347]
[118.24105072 -44.52359390]
[104.21678162 -39.20195770]
[89.41751099 -36.75624847]
[74.42675781 -37.28290558]
[59.83560181 -40.76115417]
[46.21936417 -47.05385590]
[34.11492538 -55.91289139]
[24.00309563 -66.98419952]
[26.75933838 -52.23960114]
[29.51558113 -37.49500656]
[55.53430557 -21.07851410]
[50.50673294 5.80779886]
[58.40321350 18.56105614]
[66.29969788 31.31431198]
[74.19618225 44.06756973]
[82.09265900 56.82082748]
[89.98914337 69.57408142]
[97.88562775 82.32733917]
[96.84387207 67.36356354]
[106.10526276 55.56412888]
[120.88813019 53.02111816]
[133.56004333 61.04749298]
[137.57846069 75.49921417]
[130.86866760 88.91483307]
[116.89289856 94.36783600]
[131.79734802 96.05823517]
[146.70179749 97.74863434]
[161.60624695 99.43902588]
[173.81207275 89.39945221]
[189.53364563 91.01435852]
[199.44361877 103.32565308]
[197.66258240 119.02926636]
[185.24719238 128.80851746]
[169.56329346 126.86155701]
[159.91584778 114.34347534]
[145.01139832 112.65307617]
[130.10694885 110.96268463]
[115.20250702 109.27228546]
[104.87159729 120.14759827]
[107.32453156 134.94567871]
[109.77745819 149.74375916]
[112.23038483 164.54183960]
[115.13785553 179.25735474]
[118.49711609 193.87635803]
[121.85637665 208.49537659]
[127.92981720 194.77993774]
[139.60220337 185.35891724]
[154.29054260 182.31709290]
[168.74446106 186.32759094]
[179.76547241 196.50292969]
[184.91471863 210.59141541]
[183.05274963 225.47540283]
[174.59158325 237.86122131]
[161.40359497 245.00804138]
[146.40715027 245.33432007]
[132.92079163 238.76786804]
[123.92776489 226.75907898]
[123.92776489 241.75907898]
[123.92776489 256.75909424]
[123.92776489 271.75909424]
[123.92776489 286.75909424]
[123.92776489 301.75909424]
[123.92776489 316.75909424]
[123.92776489 331.75909424]
[123.92776489 346.75909424]
[123.92776489 361.75909424]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 152]
[2 151]
[3 150]
[4 149]
[5 148]
[6 147]
[7 146]
[8 145]
[9 144]
[10 143]
[11 131]
[12 130]
[13 129]
[17 128]
[18 127]
[19 126]
[20 125]
[22 104]
[23 103]
[24 102]
[25 101]
[26 100]
[27 99]
[28 98]
[33 47]
[34 46]
[35 45]
[48 96]
[49 95]
[50 94]
[51 64]
[52 63]
[53 62]
[54 61]
[111 124]
[112 123]
[113 122]
[114 121]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
