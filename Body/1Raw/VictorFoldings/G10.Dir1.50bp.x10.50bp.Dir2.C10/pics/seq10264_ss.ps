%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:30 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGUAACAGCCAUUCUCAUCCAAACCCCCUGAAGCUUCACCGGCGCAGUCAUUCUCAUAAUCGxxxxxxxxxxCCCCCUCUACCUAAAACUCACAGCCCUCGCUGUCACUUUCCUAGGACUUCUAACAGCCCUCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[32.92002106 249.04574585]
[21.08013153 243.12934875]
[9.75777912 236.27435303]
[-0.97278500 228.52569580]
[-11.04119205 219.93420410]
[-20.38141632 210.55619812]
[-31.88322067 220.18472290]
[-43.38502502 229.81324768]
[-54.88682556 239.44177246]
[-66.38863373 249.07029724]
[-77.89043427 258.69882202]
[-72.02040863 272.62844849]
[-70.51865387 287.66958618]
[-73.51870728 302.48483276]
[-80.75379944 315.75677490]
[-91.58059692 326.30532837]
[-105.03639221 333.19250488]
[-119.92469788 335.80587769]
[-134.92166138 333.91308594]
[-148.69375610 327.68246460]
[-160.01637268 317.66799927]
[-167.88273621 304.76016235]
[-171.59333801 290.10675049]
[-170.81826782 275.01071167]
[-165.62643433 260.81436157]
[-156.47947693 248.78004456]
[-144.19075012 239.97784424]
[-129.85296631 235.19046021]
[-114.74101257 234.84355164]
[-100.19864655 238.96798706]
[-87.51895905 247.19702148]
[-76.01715851 237.56849670]
[-64.51535034 227.93997192]
[-53.01354980 218.31144714]
[-41.51174545 208.68292236]
[-30.00994301 199.05439758]
[-46.35515976 172.76348877]
[-57.44988632 143.86218262]
[-62.89609528 113.38732910]
[-62.49840164 82.43220520]
[-56.27107620 52.10732651]
[-70.39588165 47.05856705]
[-84.52068329 42.00981140]
[-99.57803345 47.54657364]
[-113.21967316 39.10351181]
[-114.98090363 23.15742683]
[-103.51065826 11.94078827]
[-87.60792542 14.05804062]
[-79.47192383 27.88500977]
[-65.34712219 32.93376541]
[-51.22232056 37.98252106]
[-46.99904633 28.54625130]
[-42.18765640 19.39585495]
[-36.80739975 10.56794071]
[-30.87980270 2.09782791]
[-24.42857933 -5.98059654]
[-17.47953796 -13.63501263]
[-10.06048489 -20.83479500]
[-2.20109940 -27.55113983]
[6.06717443 -33.75717545]
[14.71125603 -39.42807388]
[23.69656181 -44.54114914]
[32.98714447 -49.07593918]
[42.54583359 -53.01430130]
[52.33438492 -56.34048462]
[62.31363678 -59.04117584]
[72.44366455 -61.10557556]
[82.68394470 -62.52542114]
[92.99349976 -63.29502869]
[103.33108521 -63.41132736]
[113.65534973 -62.87384415]
[123.92497253 -61.68473434]
[134.09887695 -59.84875488]
[144.13636780 -57.37324905]
[153.99726868 -54.26811981]
[163.64213562 -50.54579544]
[173.03239441 -46.22116089]
[182.13044739 -41.31152344]
[190.89991760 -35.83652878]
[199.30572510 -29.81807327]
[207.31420898 -23.28023911]
[214.89335632 -16.24918556]
[222.01284790 -8.75303936]
[228.64418030 -0.82179213]
[234.76083374 7.51282454]
[240.33831787 16.21746445]
[245.35435486 25.25730515]
[249.78884888 34.59617615]
[253.62405396 44.19671631]
[256.84466553 54.02051163]
[271.41735840 50.46575165]
[285.99005127 46.91098785]
[300.56277466 43.35622787]
[315.05834961 39.49906921]
[329.47058105 35.34117889]
[343.88278198 31.18329239]
[349.25149536 16.74435043]
[361.94451904 8.33360863]
[376.97839355 9.00182533]
[388.59695435 18.28336716]
[403.00918579 14.12548065]
[417.42138672 9.96759319]
[431.83361816 5.80970526]
[446.24581909 1.65181804]
[457.22250366 -10.53196621]
[473.20379639 -6.85359097]
[477.74951172 8.90294552]
[466.18341064 20.52867126]
[450.40371704 16.06403351]
[435.99151611 20.22192192]
[421.57928467 24.37980843]
[407.16708374 28.53769684]
[392.75485229 32.69558334]
[387.86566162 46.73957443]
[375.49798584 55.31306839]
[360.27545166 54.95589447]
[348.04067993 45.59550858]
[333.62844849 49.75339508]
[319.21624756 53.91128540]
[316.13937378 57.64068222]
[310.66201782 59.43788910]
[304.11752319 57.92892838]
[289.54483032 61.48369217]
[274.97210693 65.03845215]
[260.39941406 68.59321594]
[262.41473389 81.67469788]
[263.36495972 94.87635803]
[263.24386597 108.11161804]
[262.05227661 121.29367828]
[259.79797363 134.33610535]
[256.49575806 147.15336609]
[252.16726685 159.66139221]
[246.84089661 171.77818298]
[240.55158997 183.42427063]
[233.34057617 194.52326965]
[225.25514221 205.00241089]
[216.34831238 214.79298401]
[206.67849731 223.83074951]
[196.30911255 232.05647278]
[185.30815125 239.41619873]
[173.74775696 245.86166382]
[161.70375061 251.35060120]
[149.25509644 255.84701538]
[136.48344421 259.32141113]
[123.47252655 261.75103760]
[110.30769348 263.11993408]
[97.07526398 263.41909790]
[83.86201477 262.64663696]
[70.75460052 260.80752563]
[57.83896255 257.91390991]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[6 36]
[7 35]
[8 34]
[9 33]
[10 32]
[11 31]
[41 51]
[42 50]
[43 49]
[90 125]
[91 124]
[92 123]
[93 122]
[94 119]
[95 118]
[96 117]
[100 113]
[101 112]
[102 111]
[103 110]
[104 109]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
