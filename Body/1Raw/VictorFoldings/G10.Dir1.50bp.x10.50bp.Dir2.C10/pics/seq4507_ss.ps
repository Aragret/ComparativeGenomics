%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:22 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGAAACCCCCUUAUUUCUAGGACUAUGAGAAUCGAACCCAUCCCUGAGAAUCCAAAAUUCUCCxxxxxxxxxxAUACUCUUCAAUCAGCCACAUAGCCCUCGUAGUAACAGCCAUUCUCAUCCAAACCCCCUGACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[95.60397339 260.75051880]
[95.29599762 245.75367737]
[94.98801422 230.75683594]
[94.68003845 215.76000977]
[94.37206268 200.76316833]
[94.06408691 185.76632690]
[93.75610352 170.76948547]
[93.44812775 155.77265930]
[93.14015198 140.77581787]
[79.04476166 135.64550781]
[69.16905212 146.93579102]
[59.29335022 158.22607422]
[49.41764450 169.51635742]
[52.99281693 184.61595154]
[46.97882843 198.92019653]
[33.68817139 206.92881775]
[18.23138237 205.56234741]
[6.55190706 195.34620667]
[3.14074373 180.20872498]
[9.30955410 165.97055054]
[22.68630600 158.10658264]
[38.12736130 159.64064026]
[48.00306702 148.35037231]
[57.87877655 137.06008911]
[67.75447845 125.76980591]
[60.77084351 98.28484344]
[73.03762817 74.29006195]
[96.78875732 64.90228271]
[98.63208008 50.01597977]
[100.47541046 35.12966919]
[98.38479614 30.21188545]
[98.42787170 25.46807480]
[100.16956329 21.69499779]
[102.91799164 19.39426994]
[105.67423248 4.64967394]
[108.43048096 -10.09492302]
[111.18672180 -24.83951950]
[113.94296265 -39.58411407]
[116.69920349 -54.32871246]
[119.45545197 -69.07331085]
[120.53251648 -84.03459167]
[119.91669464 -99.02194214]
[119.30086517 -114.00929260]
[102.89962769 -118.29596710]
[88.61650848 -127.39347839]
[77.82035065 -140.41700745]
[71.54187012 -156.10609436]
[70.37520599 -172.94664001]
[74.42176056 -189.31701660]
[83.28145599 -203.64422607]
[96.09226990 -214.55503845]
[111.61412048 -221.00764465]
[110.07682800 -235.92866516]
[108.53953552 -250.84968567]
[107.00224304 -265.77069092]
[101.87194061 -279.86608887]
[93.45852661 -292.28439331]
[85.04512024 -304.70272827]
[76.63170624 -317.12103271]
[61.21202087 -321.54968262]
[55.19377899 -336.42114258]
[63.19365692 -350.32730103]
[79.07483673 -352.60055542]
[90.65463257 -341.49703979]
[89.05002594 -325.53445435]
[97.46343231 -313.11611938]
[105.87684631 -300.69781494]
[114.29025269 -288.27951050]
[113.48755646 -303.25799561]
[116.22657013 -318.00582886]
[122.35394287 -331.69723511]
[131.52662659 -343.56576538]
[143.23107910 -352.94689941]
[156.81201172 -359.31546021]
[171.50906372 -362.31484985]
[186.49943542 -361.77716064]
[200.94383240 -357.73251343]
[214.03359985 -350.40734863]
[225.03585815 -340.21176147]
[233.33465576 -327.71655273]
[238.46537781 -313.62130737]
[240.14074707 -298.71517944]
[238.26699829 -283.83267212]
[232.94900513 -269.80700684]
[224.48452759 -257.42346191]
[213.34744263 -247.37530518]
[200.16128540 -240.22511292]
[185.66429138 -236.37319946]
[170.66809082 -236.03523254]
[156.01228333 -239.23010254]
[142.51737976 -245.77896118]
[130.93890381 -255.31515503]
[121.92325592 -267.30798340]
[123.46054840 -252.38697815]
[124.99784088 -237.46595764]
[126.53513336 -222.54493713]
[139.55732727 -220.51055908]
[151.71253967 -215.38772583]
[162.27937317 -207.47499084]
[170.62934875 -197.23666382]
[176.26435852 -185.27548218]
[178.84629822 -172.29728699]
[178.21736145 -159.06921387]
[174.40974426 -146.37443542]
[167.64395142 -134.96580505]
[158.31608582 -125.52111816]
[146.97462463 -118.60296631]
[134.28822327 -114.62512207]
[134.90405273 -99.63777161]
[135.51986694 -84.65041351]
[144.01011658 -97.01632690]
[157.21485901 -104.13214111]
[172.21203613 -104.42318726]
[185.68292236 -97.82508087]
[194.64656067 -85.79788971]
[197.11938477 -71.00312805]
[192.55419922 -56.71470261]
[181.96121216 -46.09450531]
[167.68453979 -41.49266815]
[152.88348389 -43.92752838]
[140.83334351 -52.86028290]
[134.20004272 -66.31706238]
[131.44380188 -51.57246780]
[128.68756104 -36.82787323]
[125.93132019 -22.08327675]
[123.17507172 -7.33867979]
[120.41883087 7.40591669]
[117.66259003 22.15051270]
[115.36171722 36.97299576]
[113.51838684 51.85930252]
[111.67506409 66.74561310]
[118.82961273 69.61412811]
[125.28407288 74.02365875]
[130.70645142 79.80410767]
[134.80590820 86.71393585]
[137.34815979 94.45005035]
[138.16839600 102.66106415]
[137.18122864 110.96321106]
[134.38677979 118.95832062]
[129.87297058 126.25286865]
[123.81333160 132.47732544]
[116.46074677 137.30474854]
[108.13698578 140.46783447]
[108.44496918 155.46467590]
[108.75294495 170.46151733]
[109.06092072 185.45834351]
[109.36889648 200.45518494]
[109.67687988 215.45202637]
[109.98485565 230.44886780]
[110.29283142 245.44570923]
[110.60080719 260.44253540]
[113.18658447 279.65097046]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 151]
[2 150]
[3 149]
[4 148]
[5 147]
[6 146]
[7 145]
[8 144]
[9 143]
[10 25]
[11 24]
[12 23]
[13 22]
[28 131]
[29 130]
[30 129]
[34 128]
[35 127]
[36 126]
[37 125]
[38 124]
[39 123]
[40 122]
[41 110]
[42 109]
[43 108]
[52 96]
[53 95]
[54 94]
[55 93]
[56 68]
[57 67]
[58 66]
[59 65]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
