%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:24 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCCACAAUCCUAGGCCUACCCGCCGCAGUACUGAUCAUUCUAUUUCCCCCUCUAUUGAUCCxxxxxxxxxxAAUCCCUUCUCGUCCCCAUGGAUGACCCCCCUCAGAUAGGGGUCCCUUGACCACCAUCCUCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[18.92636299 206.36636353]
[9.17871094 217.76737976]
[6.09163380 233.28448486]
[-8.05997562 237.93003845]
[-17.80762863 249.33105469]
[-27.55528069 260.73208618]
[-30.64235687 276.24917603]
[-44.79396820 280.89474487]
[-54.54161835 292.29577637]
[-64.28926849 303.69677734]
[-74.03692627 315.09780884]
[-83.78457642 326.49884033]
[-79.24192047 341.24221802]
[-83.41328430 356.09494019]
[-94.96759796 366.31753540]
[-110.21792603 368.64801025]
[-124.29793549 362.34271240]
[-132.71475220 349.41366577]
[-132.78260803 333.98645020]
[-124.47983551 320.98382568]
[-110.45583344 314.55493164]
[-95.18559265 316.75119019]
[-85.43794250 305.35015869]
[-75.69029236 293.94912720]
[-65.94264221 282.54812622]
[-56.19498825 271.14709473]
[-53.80512619 256.44546509]
[-38.95630264 250.98443604]
[-29.20864868 239.58340454]
[-19.46099663 228.18238831]
[-17.07113647 213.48075867]
[-2.22231030 208.01972961]
[7.52534199 196.61869812]
[-7.13115931 180.06030273]
[-18.85887146 161.31317139]
[-27.33717728 140.88984680]
[-32.33429718 119.34866333]
[-33.71361160 97.27851105]
[-31.43741798 75.28276825]
[-25.56794357 53.96275330]
[-16.26564598 33.90131760]
[-3.78483915 15.64691067]
[-14.87615490 5.54826117]
[-25.96747017 -4.55038834]
[-37.05878448 -14.64903831]
[-48.15010071 -24.74768829]
[-61.28401566 -17.24066353]
[-76.09532166 -14.16164684]
[-91.13296509 -15.81229019]
[-104.92369843 -22.03087807]
[-116.11645508 -32.20817947]
[-123.61467743 -45.34712219]
[-126.68376160 -60.16049194]
[-125.02304840 -75.19702148]
[-118.79521942 -88.98358154]
[-108.61042023 -100.16951752]
[-95.46645355 -107.65893555]
[-80.65103149 -110.71809387]
[-65.61562347 -109.04730225]
[-51.83323288 -102.81023407]
[-40.65412903 -92.61795044]
[-33.17351913 -79.46896362]
[-30.12428474 -64.65149689]
[-31.80515289 -49.61720657]
[-38.05145264 -35.83900452]
[-26.96013641 -25.74035263]
[-15.86882019 -15.64170361]
[-4.77750492 -5.54305458]
[6.31381035 4.55559540]
[14.02321529 -2.44378471]
[22.25379562 -8.82216835]
[30.95566177 -14.54089165]
[40.07606125 -19.56528854]
[49.55970764 -23.86490059]
[59.34911728 -27.41366577]
[69.38494110 -30.19007111]
[79.60635376 -32.17728806]
[89.95138550 -33.36326981]
[100.35733032 -33.74082565]
[110.76110840 -33.30767059]
[121.09965515 -32.06642532]
[131.31030273 -30.02462006]
[141.33114624 -27.19462585]
[151.10145569 -23.59359932]
[160.56199646 -19.24337196]
[169.65541077 -14.17031193]
[178.32659912 -8.40517139]
[186.52297974 -1.98289847]
[194.19487000 5.05757761]
[201.29576111 12.67357731]
[213.18814087 3.53184319]
[225.08052063 -5.60989094]
[236.97290039 -14.75162506]
[248.86528015 -23.89336014]
[260.75765991 -33.03509521]
[266.51672363 -48.38974380]
[282.73596191 -50.81229782]
[292.73040771 -37.81063843]
[286.21862793 -22.75975800]
[269.89941406 -21.14271355]
[258.00701904 -12.00097942]
[246.11463928 -2.85924554]
[234.22225952 6.28248882]
[222.32987976 15.42422295]
[210.43750000 24.56595802]
[223.49751282 48.66676712]
[231.36946106 74.92406464]
[233.72262573 102.23478699]
[248.68287659 103.32609558]
[263.64312744 104.41740417]
[278.60336304 105.50871277]
[293.56362915 106.60002899]
[306.59426880 97.24148560]
[321.99581909 101.73279572]
[327.95352173 116.62860870]
[319.89715576 130.50212097]
[304.00686646 132.71078491]
[292.47232056 121.56027222]
[277.51205444 120.46896362]
[262.55181885 119.37765503]
[247.59156799 118.28634644]
[232.63131714 117.19503021]
[231.10987854 126.39955902]
[228.95043945 135.47561646]
[226.16352844 144.37905884]
[222.76269531 153.06654358]
[218.76448059 161.49580383]
[214.18836975 169.62582397]
[209.05659485 177.41702271]
[203.39414978 184.83152771]
[197.22857666 191.83322144]
[190.58987427 198.38806152]
[183.51037598 204.46412659]
[176.02449036 210.03187561]
[168.16868591 215.06419373]
[159.98115540 219.53659058]
[151.50175476 223.42733765]
[142.77172852 226.71746826]
[133.83358765 229.39097595]
[124.73081207 231.43486023]
[115.50769043 232.83918762]
[106.20910645 233.59709167]
[96.88031006 233.70491028]
[87.56669617 233.16212463]
[78.31358337 231.97134399]
[69.16599274 230.13839722]
[60.16844559 227.67218018]
[51.36472321 224.58470154]
[42.79766083 220.89097595]
[34.50894928 216.60899353]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 33]
[2 32]
[4 30]
[5 29]
[6 28]
[8 26]
[9 25]
[10 24]
[11 23]
[12 22]
[42 69]
[43 68]
[44 67]
[45 66]
[46 65]
[90 105]
[91 104]
[92 103]
[93 102]
[94 101]
[95 100]
[108 122]
[109 121]
[110 120]
[111 119]
[112 118]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
