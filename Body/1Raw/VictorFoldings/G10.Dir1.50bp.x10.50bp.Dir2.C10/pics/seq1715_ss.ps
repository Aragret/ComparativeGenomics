%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:20 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGAGUAUACUUCAAAGGACAUUUAACUAAAACCCCUACGCAUUUAUAUAGAGGAGACAAGUCGUAxxxxxxxxxxGGACAACCAGUAAGCUACCCUUUUACCAUCAUUGGACAAGUAGCAUCCGUACUAUACUUCACACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[98.10473633 450.79165649]
[98.10473633 435.79165649]
[98.10473633 420.79165649]
[98.10473633 405.79165649]
[98.10473633 390.79165649]
[98.10473633 375.79165649]
[98.10473633 360.79165649]
[98.10473633 345.79165649]
[98.10473633 330.79165649]
[98.10473633 315.79165649]
[82.63867950 312.64547729]
[68.14748383 306.37854004]
[55.25366592 297.25765991]
[44.51165009 285.67221069]
[36.38388443 272.11767578]
[31.22096443 257.17437744]
[29.24648476 241.48262024]
[30.54737663 225.71524048]
[35.07006836 210.54881287]
[42.62269974 196.63461304]
[52.88324738 184.57057190]
[65.41327667 174.87567139]
[79.67663574 167.96759033]
[95.06244659 164.14466858]
[94.46230316 149.15667725]
[93.86215973 134.16868591]
[83.37263489 130.47462463]
[74.58942413 123.65322876]
[68.41388702 114.40450287]
[53.74375534 117.53296661]
[39.07362366 120.66142273]
[29.17363358 133.28559875]
[13.13058472 133.27243042]
[3.25133276 120.63201904]
[7.11439323 105.06101227]
[21.75635719 98.50415039]
[35.94515991 105.99129486]
[50.61529160 102.86283112]
[65.28542328 99.73437500]
[65.37702942 88.21897888]
[69.36765289 76.79511261]
[77.18070221 66.79987335]
[68.70729828 54.42241669]
[59.03996277 42.95321274]
[48.27537918 32.50698090]
[37.51079941 22.06074715]
[26.74621964 11.61451435]
[13.79937649 19.36317062]
[-0.71207857 23.49597740]
[-15.79873180 23.73114777]
[-30.43194962 20.05265045]
[-43.61401749 12.71129227]
[-54.44615555 2.20761704]
[-62.18981171 -10.74221611]
[-66.31701660 -25.25526619]
[-66.54636383 -40.34201050]
[-62.86221313 -54.97380447]
[-55.51576614 -68.15303802]
[-45.00790787 -78.98111725]
[-32.05508804 -86.71977234]
[-17.54044533 -90.84136963]
[-2.45361400 -91.06489563]
[12.17675877 -87.37509918]
[25.35315132 -80.02355957]
[36.17717743 -69.51152802]
[43.91083145 -56.55571747]
[48.02682495 -42.03948212]
[48.24452209 -26.95256805]
[44.54907608 -12.32362080]
[37.19245148 0.84993291]
[47.95703506 11.29616642]
[58.72161484 21.74239922]
[69.48619843 32.18863297]
[67.50281525 17.32033920]
[73.09656525 3.40236688]
[84.81764984 -5.95798635]
[99.62816620 -8.33468246]
[113.68948364 -3.11172223]
[123.35716248 8.35719395]
[126.12550354 23.09952354]
[121.27700806 37.29431152]
[110.06831360 47.26252365]
[95.40451813 50.42056656]
[81.08475494 45.94901276]
[89.55815887 58.32646561]
[104.52138519 57.27679443]
[111.18374634 43.83755875]
[107.44170380 28.23702621]
[117.41880035 15.67370510]
[133.46147156 15.78510189]
[143.26313782 28.48576164]
[139.30480957 44.03282547]
[124.62297821 50.49991608]
[117.96062469 63.93915176]
[124.23487091 70.17587280]
[128.70823669 77.34212494]
[131.29158020 84.96637726]
[145.89617920 81.54501343]
[160.50076294 78.12364960]
[175.10536194 74.70227814]
[189.70996094 71.28091431]
[193.59260559 67.62620544]
[198.04835510 66.02552795]
[202.18409729 66.34760284]
[205.29301453 68.12042999]
[220.07656860 65.58141327]
[229.20495605 52.95959473]
[244.23374939 50.59527588]
[256.21047974 59.37557983]
[270.99401855 56.83657074]
[285.77758789 54.29755783]
[298.03396606 43.40202713]
[313.51062012 48.82471466]
[316.28646851 64.98722839]
[303.50595093 75.26295471]
[288.31658936 69.08110809]
[273.53302002 71.62012482]
[258.74948120 74.15913391]
[250.38859558 86.43232727]
[235.43214417 89.21784210]
[222.61558533 80.36496735]
[207.83203125 82.90397644]
[193.13133240 85.88551331]
[178.52673340 89.30687714]
[163.92213440 92.72824097]
[149.31753540 96.14961243]
[134.71293640 99.57097626]
[127.62959290 121.01851654]
[108.85015106 133.56854248]
[109.45029449 148.55653381]
[110.05043793 163.54452515]
[124.14326477 165.71752930]
[137.58447266 170.46528625]
[149.90817261 177.62153625]
[160.68746948 186.93656921]
[169.54936218 198.08590698]
[176.18756104 210.68167114]
[180.37310791 224.28599548]
[181.96226501 238.42634583]
[180.90147400 252.61180115]
[177.22914124 266.35025024]
[171.07423401 279.16531372]
[162.65177917 290.61297607]
[152.25534058 300.29693604]
[140.24676514 307.88226318]
[127.04364014 313.10711670]
[113.10473633 315.79165649]
[113.10473633 330.79165649]
[113.10473633 345.79165649]
[113.10473633 360.79165649]
[113.10473633 375.79165649]
[113.10473633 390.79165649]
[113.10473633 405.79165649]
[113.10473633 420.79165649]
[113.10473633 435.79165649]
[113.10473633 450.79165649]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 156]
[2 155]
[3 154]
[4 153]
[5 152]
[6 151]
[7 150]
[8 149]
[9 148]
[10 147]
[24 131]
[25 130]
[26 129]
[29 39]
[30 38]
[31 37]
[42 85]
[43 84]
[44 73]
[45 72]
[46 71]
[47 70]
[86 94]
[87 93]
[97 127]
[98 126]
[99 125]
[100 124]
[101 123]
[105 122]
[106 121]
[109 118]
[110 117]
[111 116]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
