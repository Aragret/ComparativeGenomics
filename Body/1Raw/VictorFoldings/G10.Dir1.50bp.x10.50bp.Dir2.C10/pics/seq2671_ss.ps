%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:25 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGUUAAAAAAAGUAAAAGGAACUCGGCAAAUCUUACCCCGCCUGUUUACCAAAAACAUCACCxxxxxxxxxxUAAUUACAUCACAAGACGUCUUGCACUCAUGAGCUGUCCCCACAUUAGGCUUAAAAACAGCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[73.02084351 278.28961182]
[73.02084351 263.28961182]
[73.02084351 248.28961182]
[73.02084351 233.28961182]
[73.02084351 218.28961182]
[73.02084351 203.28961182]
[73.02084351 188.28961182]
[73.02084351 173.28961182]
[73.02084351 158.28961182]
[73.02084351 143.28961182]
[65.82946014 156.45335388]
[52.41343307 149.74440002]
[43.80398560 137.46118164]
[42.07410431 122.56126404]
[47.64030457 108.63224792]
[59.16236496 99.02796936]
[73.86579132 96.06093597]
[88.82677460 97.14216614]
[76.21564484 89.02062225]
[61.89304733 84.56380463]
[46.90035248 84.09576416]
[31.90765572 83.62772369]
[16.91496086 83.15967560]
[1.92226422 82.69163513]
[-13.07448959 82.37957764]
[-28.07367706 82.22354126]
[-43.07286453 82.06750488]
[-46.89725113 84.42028809]
[-50.87122345 85.30266571]
[-54.50175476 84.85419464]
[-57.39530563 83.36377716]
[-59.29884720 81.22277832]
[-74.23315430 79.82048035]
[-89.16746521 78.41817474]
[-97.46257782 91.28089905]
[-110.79084015 98.80525208]
[-126.08953094 99.26218414]
[-139.84310913 92.54670715]
[-148.89109802 80.20197296]
[-151.15435791 65.06472778]
[-146.11279297 50.61339188]
[-134.92491150 40.16877365]
[-120.16162872 36.13097382]
[-105.21541595 39.42784882]
[-93.52081299 49.30179977]
[-87.76515961 63.48386765]
[-72.83084869 64.88616943]
[-57.89654541 66.28847504]
[-42.91682816 67.06832123]
[-27.91764069 67.22435760]
[-12.91845322 67.38039398]
[-6.15352106 64.28501892]
[2.39030623 67.69893646]
[17.38300323 68.16698456]
[32.37569809 68.63502502]
[47.36839294 69.10306549]
[62.36109161 69.57110596]
[49.82347870 61.33653259]
[39.38686371 50.56262207]
[31.55510330 37.76951981]
[26.70628929 23.57483673]
[25.07451057 8.66385746]
[26.73854446 -6.24355650]
[31.61805725 -20.42771530]
[39.47747803 -33.20384598]
[49.93737793 -43.95515060]
[62.49277496 -52.16258240]
[76.53753662 -57.42991257]
[91.39360809 -59.50284576]
[106.34378815 -58.28131104]
[120.66631317 -53.82427216]
[133.66973877 -46.34691238]
[144.72628784 -36.21021271]
[153.30218506 -23.90354538]
[158.98341370 -10.02104855]
[161.49568176 4.76707172]
[160.71771240 19.74688339]
[156.68705750 34.19520187]
[149.59832764 47.41450119]
[139.79373169 58.76658630]
[127.74661255 67.70341492]
[114.03856659 73.79353333]
[99.33139038 76.74292755]
[84.33718872 76.40949249]
[96.94831848 84.53103638]
[111.93533325 85.15501404]
[125.17791748 78.10987854]
[138.42050171 71.06474304]
[151.51365662 63.74563599]
[164.45172119 56.15572739]
[177.38977051 48.56581879]
[189.82920837 40.18367767]
[201.72158813 31.04194260]
[213.61396790 21.90020752]
[225.50634766 12.75847435]
[231.26541138 -2.59617591]
[247.48463440 -5.01872826]
[257.47906494 7.98293066]
[250.96731567 23.03380966]
[234.64808655 24.65085411]
[222.75570679 33.79258728]
[210.86332703 42.93432236]
[198.97094727 52.07605743]
[213.57281494 55.50901413]
[221.63343811 68.15916443]
[218.57637024 82.84433746]
[206.13725281 91.22696686]
[191.37844849 88.54777527]
[182.67935181 76.32788849]
[184.97967529 61.50387573]
[172.04162598 69.09378052]
[159.10356140 76.68369293]
[157.04354858 81.05768585]
[152.18006897 84.15250397]
[145.46563721 84.30732727]
[132.22305298 91.35246277]
[118.98046875 98.39759827]
[119.44850922 113.39029694]
[133.10475159 119.59570312]
[146.53477478 111.82305908]
[161.96502686 113.46231079]
[173.46224976 123.88313293]
[176.60551453 139.07850647]
[170.18620300 153.20550537]
[156.67265320 160.83200073]
[141.26109314 159.02545166]
[129.87759399 148.48051453]
[126.89934540 133.25193787]
[113.24310303 127.04653168]
[106.93753815 131.10729980]
[115.94698334 143.10021973]
[124.95643616 155.09312439]
[133.96588135 167.08602905]
[143.63111877 178.55700684]
[137.34593201 192.17671204]
[122.34619904 192.26536560]
[115.90055847 178.72006226]
[108.70917511 165.55632019]
[101.51779175 152.39259338]
[94.32640839 139.22885132]
[88.02084351 143.28961182]
[88.02084351 158.28961182]
[88.02084351 173.28961182]
[88.02084351 188.28961182]
[88.02084351 203.28961182]
[88.02084351 218.28961182]
[88.02084351 233.28961182]
[88.02084351 248.28961182]
[88.02084351 263.28961182]
[88.02084351 278.28961182]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[18 85]
[19 84]
[20 57]
[21 56]
[22 55]
[23 54]
[24 53]
[25 51]
[26 50]
[27 49]
[32 48]
[33 47]
[34 46]
[86 117]
[87 116]
[88 115]
[89 112]
[90 111]
[91 110]
[92 103]
[93 102]
[94 101]
[95 100]
[118 129]
[119 128]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
