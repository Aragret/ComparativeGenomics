%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:04 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCAAAGGCCCCAACGUUGUAGGCCCCUACGGGCUACUACAACCCUUCGCUGACGCCAUAAAxxxxxxxxxxUAAACAAAACGAAUGAUUUCGACUCAUUAAAUUAUGAUAAUCAUAUUUACCAAAUGCCCCCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[81.55860138 236.91647339]
[73.07582092 235.50386047]
[64.69736481 233.56619263]
[56.45569229 231.11102295]
[48.38274002 228.14782715]
[40.50978851 224.68809509]
[32.86734390 220.74523926]
[24.87742805 233.44017029]
[16.88751221 246.13510132]
[8.89759636 258.83001709]
[0.90767980 271.52496338]
[0.82335144 287.92388916]
[-13.55284691 295.81420898]
[-27.43191528 287.07901001]
[-26.53625679 270.70434570]
[-11.78724957 263.53503418]
[-3.79733348 250.84010315]
[4.19258261 238.14518738]
[12.18249893 225.45025635]
[20.17241478 212.75532532]
[-2.74184394 192.35972595]
[-20.59042740 167.41033936]
[-32.49330902 139.13729858]
[-37.86362457 108.93460083]
[-52.86281204 109.09063721]
[-67.86199951 109.24667358]
[-82.86119080 109.40270996]
[-97.86037445 109.55874634]
[-112.85956573 109.71478271]
[-127.85875702 109.87081909]
[-142.85145569 110.33885956]
[-157.83116150 111.11870575]
[-172.81088257 111.89855194]
[-187.79058838 112.67839813]
[-201.24514771 122.05427551]
[-215.97525024 114.84621429]
[-216.82783508 98.46924591]
[-202.92582703 89.77059174]
[-188.57043457 97.69868469]
[-173.59072876 96.91883850]
[-158.61100769 96.13899231]
[-143.63130188 95.35914612]
[-139.78858948 92.42502594]
[-134.04632568 91.91729736]
[-128.01478577 94.87163544]
[-113.01560211 94.71559906]
[-98.01641083 94.55956268]
[-83.01722717 94.40351868]
[-68.01803589 94.24748230]
[-53.01884842 94.09144592]
[-38.01966095 93.93540955]
[-35.25238800 71.83979797]
[-28.97116280 50.47581482]
[-19.33916664 30.39850044]
[-6.60665274 12.12948608]
[8.89558220 -3.85658741]
[-0.36936718 -15.65322781]
[-15.78309441 -21.25224876]
[-18.37423515 -37.44539642]
[-5.47724628 -47.57454681]
[9.64055634 -41.21969986]
[11.42727280 -24.91817665]
[20.69222260 -13.12153625]
[26.61556625 -17.05097389]
[32.73317719 -20.67054558]
[39.02886581 -23.97066689]
[45.48595810 -26.94260597]
[52.08736801 -29.57849121]
[58.81561279 -31.87134552]
[65.65288544 -33.81510162]
[72.58108521 -35.40460968]
[79.58187103 -36.63566589]
[86.63670349 -37.50501251]
[93.72692108 -38.01034164]
[100.83374023 -38.15031815]
[107.93834686 -37.92457581]
[115.02194977 -37.33370590]
[122.06578064 -36.37927628]
[129.05119324 -35.06381226]
[135.95970154 -33.39080048]
[142.77302551 -31.36466217]
[149.47309875 -28.99076653]
[156.04220581 -26.27539825]
[162.46296692 -23.22574234]
[168.71836853 -19.84987259]
[174.79183960 -16.15672874]
[180.66732788 -12.15608597]
[186.32926941 -7.85853434]
[191.76266479 -3.27545118]
[196.95314026 1.58103073]
[208.04446411 -8.51761913]
[219.13577271 -18.61626816]
[230.22709656 -28.71491814]
[234.68986511 -44.49514771]
[250.65158081 -48.25754166]
[261.69219971 -36.13166428]
[256.45407104 -20.59158516]
[240.32574463 -17.62360191]
[229.23442078 -7.52495289]
[218.14311218 2.57369661]
[207.05178833 12.67234612]
[216.82484436 26.25610542]
[224.88385010 40.92182922]
[231.11056519 56.45434189]
[235.41365051 72.62574768]
[237.72994995 89.19879150]
[238.02549744 105.93030548]
[236.29594421 122.57481384]
[250.93943787 125.82564545]
[265.58294678 129.07646179]
[280.22644043 132.32730103]
[294.86993408 135.57812500]
[303.99237061 134.38102722]
[309.78277588 139.05189514]
[324.35546875 142.60665894]
[338.92819214 146.16142273]
[353.50088501 149.71618652]
[370.32168579 147.59570312]
[377.01577759 163.17214966]
[363.90115356 173.91661072]
[349.94610596 164.28887939]
[335.37341309 160.73411560]
[320.80072021 157.17936707]
[306.22802734 153.62460327]
[291.61911011 150.22161865]
[276.97561646 146.97079468]
[262.33212280 143.71997070]
[247.68861389 140.46914673]
[233.04512024 137.21832275]
[230.47175598 145.42385864]
[227.39285278 153.45339966]
[223.82035828 161.27581787]
[219.76808167 168.86080933]
[215.25175476 176.17900085]
[210.28884888 183.20201111]
[204.89862061 189.90264893]
[199.10194397 196.25492859]
[192.92126465 202.23426819]
[186.38055420 207.81745911]
[179.50514221 212.98291016]
[172.32167053 217.71058655]
[164.85798645 221.98216248]
[157.14299011 225.78109741]
[149.20658875 229.09266663]
[141.07951355 231.90405273]
[132.79327393 234.20434570]
[124.37998199 235.98463440]
[115.87221527 237.23803711]
[107.30294800 237.95967102]
[98.70538330 238.14677429]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[7 20]
[8 19]
[9 18]
[10 17]
[11 16]
[24 51]
[25 50]
[26 49]
[27 48]
[28 47]
[29 46]
[30 45]
[31 42]
[32 41]
[33 40]
[34 39]
[56 63]
[57 62]
[90 101]
[91 100]
[92 99]
[93 98]
[108 129]
[109 128]
[110 127]
[111 126]
[112 125]
[114 124]
[115 123]
[116 122]
[117 121]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
