%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:39 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGAUUCUAUACCAACACCUAUUCUGAUUUUUCGGUCACCCUGAAGUUUAUAUUCUUAUCCUAxxxxxxxxxxACCCGAUGAGGCAACCAGCCAGAACGCCUGAACGCAGGCACAUACUUCCUAUUCUACACCCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[92.50000000 301.78170776]
[92.50000000 286.78170776]
[92.50000000 271.78170776]
[92.50000000 256.78170776]
[92.50000000 241.78170776]
[92.50000000 226.78170776]
[92.50000000 211.78170776]
[92.50000000 196.78170776]
[92.50000000 181.78170776]
[92.50000000 166.78170776]
[83.86169434 165.23497009]
[75.49859619 162.57577515]
[67.55332184 158.84945679]
[60.16136551 154.11958313]
[53.44878387 148.46679688]
[47.53004456 141.98750305]
[42.50608444 134.79217529]
[38.46257782 127.00354767]
[24.13998032 131.46035767]
[9.81738281 135.91717529]
[10.07401466 151.02052307]
[6.06381798 165.58399963]
[-1.88811696 178.42703247]
[-13.13716316 188.50848389]
[-26.77140999 195.01109314]
[-41.68559265 197.40773010]
[-56.67068100 195.50410461]
[-70.51190186 189.45454407]
[-82.08721924 179.74945068]
[-90.45825958 167.17558289]
[-94.94642639 152.75222778]
[-95.18788147 137.64863586]
[-91.16305542 123.08919525]
[-83.19822693 110.25415802]
[-71.93905640 100.18401337]
[-58.29828262 93.69509888]
[-43.38170242 91.31344604]
[-28.39853287 93.23212433]
[-14.56339359 99.29558563]
[-2.99783754 109.01230621]
[5.36056709 121.59458160]
[19.68316460 117.13776398]
[34.00576019 112.68095398]
[33.33081055 91.55814362]
[39.24931335 71.27021790]
[51.17595291 53.82361603]
[67.93119812 40.94377518]
[87.85798645 33.90448380]
[108.98559570 33.40191269]
[129.22454834 39.48577118]
[137.21446228 26.79084396]
[145.20437622 14.09591389]
[153.19430542 1.40098417]
[161.18421936 -11.29394531]
[152.30783081 -24.22754860]
[149.32202148 -39.57662582]
[152.68124390 -54.79737091]
[161.79176331 -67.38327789]
[175.11608887 -75.27790070]
[190.43232727 -77.21083069]
[194.44006348 -91.66551208]
[198.44781494 -106.12020111]
[202.45555115 -120.57489014]
[191.48432922 -110.34589386]
[178.54402161 -102.75983429]
[164.25933838 -98.18292999]
[149.31993103 -96.83615875]
[134.44700623 -98.78453064]
[120.35859680 -103.93398285]
[107.73486328 -112.03591156]
[97.18524170 -122.69918823]
[89.21903229 -135.40901184]
[84.22083282 -149.55177307]
[82.43193054 -164.44473267]
[83.93869781 -179.36885071]
[88.66839600 -193.60366821]
[96.39267731 -206.46195984]
[106.73863983 -217.32293701]
[119.20681000 -225.66229248]
[133.19525146 -231.07740784]
[148.02864075 -233.30685425]
[162.99087524 -232.24301147]
[177.35960388 -227.93722534]
[190.44113159 -220.59738159]
[201.60394287 -210.57781982]
[210.30911255 -198.36224365]
[216.13638306 -184.54042053]
[218.80442810 -169.77961731]
[218.18444824 -154.79243469]
[214.30711365 -140.30438232]
[225.18594360 -150.63159180]
[236.06477356 -160.95878601]
[237.91764832 -176.89448547]
[251.60760498 -185.25897217]
[266.63287354 -179.63572693]
[271.46734619 -164.33842468]
[262.40243530 -151.10185242]
[246.39196777 -150.07997131]
[235.51315308 -139.75276184]
[224.63432312 -129.42555237]
[216.91023254 -116.56715393]
[212.90249634 -102.11246490]
[208.89476013 -87.65777588]
[204.88700867 -73.20308685]
[217.54891968 -62.81003571]
[224.64523315 -48.04584122]
[239.63793945 -48.51388168]
[254.63063049 -48.98192215]
[269.62332153 -49.44996643]
[284.61602783 -49.91800690]
[298.26272583 -59.01195526]
[312.83966064 -51.49900818]
[313.35137939 -35.10784531]
[299.27142334 -26.70028877]
[285.08407593 -34.92531204]
[270.09136963 -34.45727158]
[255.09867859 -33.98922729]
[240.10597229 -33.52118683]
[225.11328125 -33.05314255]
[220.72840881 -20.41764832]
[212.20336914 -10.04497051]
[200.56715393 -3.24358749]
[187.24401855 -0.88749373]
[173.87915039 -3.30402923]
[165.88922119 9.39090061]
[157.89930725 22.08583069]
[149.90939331 34.78075790]
[141.91947937 47.47568893]
[150.70054626 55.89216614]
[157.82067871 65.75360107]
[163.04661560 76.73693848]
[166.20716858 88.48236084]
[167.19880676 100.60510254]
[165.98902893 112.70802307]
[162.61747742 124.39463043]
[157.19459534 135.28207397]
[149.89802551 145.01368713]
[140.96682739 153.27067566]
[130.69357300 159.78253174]
[119.41479492 164.33592224]
[107.50000000 166.78170776]
[107.50000000 181.78170776]
[107.50000000 196.78170776]
[107.50000000 211.78170776]
[107.50000000 226.78170776]
[107.50000000 241.78170776]
[107.50000000 256.78170776]
[107.50000000 271.78170776]
[107.50000000 286.78170776]
[107.50000000 301.78170776]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[18 43]
[19 42]
[20 41]
[50 128]
[51 127]
[52 126]
[53 125]
[54 124]
[60 104]
[61 103]
[62 102]
[63 101]
[90 100]
[91 99]
[92 98]
[106 119]
[107 118]
[108 117]
[109 116]
[110 115]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
