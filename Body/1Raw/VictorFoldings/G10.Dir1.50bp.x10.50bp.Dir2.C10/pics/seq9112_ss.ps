%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:45 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGAACCGAAACCAAAUAAUUCAAGCACUGCUUAUUACAAUUUUACUGGGUCUCUAUUUUACCxxxxxxxxxxUAGCCCUACUAGUCUCAAUCUCCAACACAUAUGGCCUAGACUACGUACAUAACCUAAACCCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[100.70149231 264.74731445]
[100.70149231 249.74732971]
[100.70149231 234.74732971]
[100.70149231 219.74732971]
[100.70149231 204.74732971]
[100.70149231 189.74732971]
[100.70149231 174.74732971]
[100.70149231 159.74732971]
[100.70149231 144.74732971]
[100.70149231 129.74732971]
[95.15583038 124.69800568]
[87.96444702 137.86174011]
[86.52151489 152.79217529]
[75.41187286 162.87066650]
[60.41188049 162.85699463]
[49.32062912 152.75827026]
[47.90490723 137.82524109]
[56.90080261 125.82215881]
[71.63072968 122.98988342]
[84.06452179 114.59935760]
[78.51885986 109.55002594]
[63.58455276 110.95233154]
[48.65024567 112.35463715]
[33.71593857 113.75694275]
[18.83265686 115.62454987]
[4.01489925 117.95565796]
[-10.80285835 120.28675842]
[-16.26158333 124.19953918]
[-22.00860214 124.65017700]
[-26.28431892 122.39324188]
[-41.18622208 124.10592651]
[-56.08812332 125.81861877]
[-70.99002838 127.53131104]
[-86.03520966 135.34660339]
[-97.70999908 123.05288696]
[-89.12863159 108.43111420]
[-72.70271301 112.62940979]
[-57.80081558 110.91671753]
[-42.89891052 109.20402527]
[-27.99700928 107.49134064]
[-13.13396263 105.46900177]
[1.68379545 103.13790131]
[16.50155449 100.80679321]
[18.88125801 98.12268066]
[22.70652199 96.48896027]
[27.45449257 96.58470154]
[32.31363297 98.82263184]
[47.24794006 97.42032623]
[62.18224716 96.01802826]
[77.11655426 94.61572266]
[81.56272888 88.57572937]
[69.48287964 79.68318939]
[78.37560272 67.60347748]
[90.45507812 76.49574280]
[94.90125275 70.45574188]
[91.80293274 55.77922058]
[88.70461273 41.10269547]
[83.84086609 33.29270935]
[85.69785309 26.08873558]
[82.90552521 11.35092926]
[67.86375427 10.06727886]
[53.72650528 4.77192831]
[41.54285049 -4.14217091]
[32.21690369 -16.01353455]
[26.44070625 -29.96122551]
[24.64289474 -44.95023727]
[26.95687485 -59.86828232]
[33.21093750 -73.60834503]
[42.94098663 -85.15081787]
[55.42499161 -93.63917542]
[69.73655701 -98.44352722]
[84.81365967 -99.20735168]
[99.53749084 -95.87397003]
[112.81543732 -88.69075012]
[123.66219330 -78.19072723]
[131.27284241 -65.15306854]
[135.08265686 -50.54526520]
[134.80888367 -35.45130539]
[130.47186279 -20.99126244]
[122.39341736 -8.23816967]
[111.17303467 1.86160970]
[97.64333344 8.55860519]
[100.43565369 23.29641151]
[103.38114166 38.00437164]
[106.47946167 52.68089676]
[109.57778168 67.35742188]
[122.35514069 75.21485138]
[136.85073853 71.35768890]
[151.34632874 67.50053406]
[165.80102539 63.49279022]
[180.21324158 59.33490372]
[194.62545776 55.17701340]
[209.03767395 51.01912689]
[223.44989014 46.86124039]
[237.86210632 42.70335388]
[239.85632324 31.30310059]
[245.96012878 21.53090096]
[255.24641418 14.79796886]
[266.33190918 12.05940437]
[277.58316040 13.67884922]
[287.35726929 19.38070869]
[294.24169922 28.29615021]
[308.88519287 25.04532433]
[323.52871704 21.79449844]
[330.58435059 7.83913660]
[344.97985840 1.73153663]
[359.91815186 6.35551977]
[368.34582520 19.52778244]
[366.28356934 35.02878571]
[354.70510864 45.53942871]
[339.07748413 46.09690857]
[326.77954102 36.43799973]
[312.13604736 39.68882370]
[297.49252319 42.93965149]
[291.12075806 60.43988800]
[275.40573120 70.70941925]
[256.52258301 69.49972534]
[242.01998901 57.11557007]
[227.60777283 61.27345657]
[213.19555664 65.43134308]
[198.78334045 69.58923340]
[184.37112427 73.74711609]
[169.95890808 77.90500641]
[164.36782837 82.81269836]
[155.20349121 81.99612427]
[140.70790100 85.85328674]
[126.21229553 89.71044922]
[140.78260803 93.27503204]
[155.35290527 96.83961487]
[170.25305176 98.56754303]
[183.20674133 106.13072205]
[192.03555298 118.25722504]
[195.25471497 132.90773010]
[192.32284546 147.61840820]
[183.73301697 159.91534424]
[170.92977905 167.73054504]
[156.06629944 169.74971008]
[141.64219666 165.63325500]
[130.08425903 156.07479858]
[122.89287567 142.91107178]
[115.70149231 129.74732971]
[115.70149231 144.74732971]
[115.70149231 159.74732971]
[115.70149231 174.74732971]
[115.70149231 189.74732971]
[115.70149231 204.74732971]
[115.70149231 219.74732971]
[115.70149231 234.74732971]
[115.70149231 249.74732971]
[115.70149231 264.74731445]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[21 50]
[22 49]
[23 48]
[24 47]
[25 43]
[26 42]
[27 41]
[30 40]
[31 39]
[32 38]
[33 37]
[55 86]
[56 85]
[57 84]
[59 83]
[60 82]
[87 127]
[88 126]
[89 125]
[90 123]
[91 122]
[92 121]
[93 120]
[94 119]
[95 118]
[102 114]
[103 113]
[104 112]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
