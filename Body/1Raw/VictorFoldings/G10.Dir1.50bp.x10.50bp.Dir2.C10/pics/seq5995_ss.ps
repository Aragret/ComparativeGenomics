%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:45 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGAGCCCUCAGUAAGUUGCAAUACUUAAUUUCUGUAACAGCUAAGGACUGCAAAACCCCACUxxxxxxxxxxACUAACCUGCCACUAAUAGUUAUGUCAUCCCUCUUAUUAAUCAUCAUCCUAGCCCUAAGUCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[92.50000000 250.90695190]
[92.50000000 235.90695190]
[92.50000000 220.90695190]
[92.50000000 205.90695190]
[92.50000000 190.90695190]
[92.50000000 175.90695190]
[92.50000000 160.90695190]
[92.50000000 145.90695190]
[92.50000000 130.90695190]
[92.50000000 115.90694427]
[80.42001343 107.01459503]
[66.09741211 111.47141266]
[51.77481842 115.92823029]
[46.51657104 133.22457886]
[32.08435822 143.84973145]
[14.31957340 143.73544312]
[0.27479264 133.11413574]
[-13.85000992 138.16290283]
[-27.97481346 143.21165466]
[-41.87736893 148.84361267]
[-55.53361130 155.04901123]
[-69.18984985 161.25442505]
[-82.84609222 167.45982361]
[-96.50233459 173.66523743]
[-101.81800079 188.54875183]
[-116.13655090 195.23864746]
[-130.96304321 189.76593018]
[-137.50117493 175.37744141]
[-131.87199402 160.60964966]
[-117.41519928 154.22399902]
[-102.70774078 160.00900269]
[-89.05149841 153.80358887]
[-75.39525604 147.59817505]
[-61.73901749 141.39277649]
[-48.08277512 135.18736267]
[-46.98334503 132.54188538]
[-44.73566055 130.18775940]
[-41.45098114 128.57756042]
[-37.40682983 128.11293030]
[-33.02357101 129.08685303]
[-18.89876747 124.03809357]
[-4.77396393 118.98933411]
[-3.10602593 106.89146423]
[3.60825539 96.60393524]
[14.13453865 90.13115692]
[26.48889542 88.76569366]
[38.31163406 92.83055878]
[47.31800079 101.60562897]
[61.64059830 97.14881134]
[75.96319580 92.69200134]
[89.64004517 83.00128174]
[102.64389038 85.54924774]
[111.66142273 73.56241608]
[120.67894745 61.57558060]
[129.69647217 49.58874893]
[118.52196503 39.56818390]
[108.25024414 28.62409401]
[98.95735931 16.83750343]
[90.71211243 4.29567623]
[83.57556152 -8.90852833]
[77.60053253 -22.67735100]
[72.83126068 -36.90884781]
[69.30307007 -51.49765778]
[67.04207611 -66.33576202]
[66.06501007 -81.31330109]
[66.37911987 -96.31939697]
[67.98207092 -111.24293518]
[70.86199951 -125.97342682]
[74.99758148 -140.40180969]
[80.35819244 -154.42127991]
[86.90415955 -167.92800903]
[94.58699799 -180.82200623]
[103.34983826 -193.00782776]
[113.12780762 -204.39523315]
[123.84849548 -214.89990234]
[135.43254089 -224.44409180]
[147.79417419 -232.95710754]
[160.84185791 -240.37594604]
[174.47901917 -246.64566040]
[188.60467529 -251.71983337]
[203.11424255 -255.56091309]
[217.90029907 -258.14044189]
[232.85337830 -259.43933105]
[247.86274719 -259.44799805]
[262.81729126 -258.16629028]
[277.60632324 -255.60379028]
[292.12030029 -251.77941895]
[306.25177002 -246.72149658]
[319.89614868 -240.46748352]
[332.95236206 -233.06367493]
[345.32379150 -224.56488037]
[356.91882324 -215.03404236]
[367.65158081 -204.54171753]
[377.44265747 -193.16557312]
[386.21951294 -180.98985291]
[393.91720581 -168.10470581]
[400.47869873 -154.60551453]
[405.85546875 -140.59223938]
[410.00762939 -126.16861725]
[412.90451050 -111.44144440]
[414.52465820 -96.51976776]
[414.85601807 -81.51404572]
[413.89620972 -66.53538513]
[411.65228271 -51.69469070]
[408.14089966 -37.10183334]
[403.38800049 -22.86485291]
[397.42883301 -9.08916283]
[390.30749512 4.12324858]
[382.07669067 16.67455673]
[372.79736328 28.47183800]
[362.53826904 39.42774582]
[351.37527466 49.46116638]
[339.39111328 58.49781036]
[326.67446899 66.47077942]
[313.31948853 73.32103729]
[299.42504883 78.99786377]
[285.09405518 83.45924377]
[270.43258667 86.67212677]
[255.54917908 88.61273956]
[240.55406189 89.26670837]
[225.55822754 88.62919617]
[210.67271423 86.70491791]
[196.00772095 83.50811768]
[181.67182922 79.06246948]
[167.77119446 73.40088654]
[154.40870667 66.56528473]
[141.68331909 58.60627747]
[132.66578674 70.59310913]
[123.64825439 82.57994080]
[114.63072205 94.56678009]
[126.87552643 85.90278625]
[141.77821350 84.19695282]
[155.66409302 89.86991119]
[165.10917664 101.52281952]
[167.78451538 116.28231049]
[163.03041077 130.50900269]
[152.01913452 140.69485474]
[137.46585083 144.32827759]
[122.95908356 140.51333618]
[112.07592010 130.19068909]
[107.50000000 115.90694427]
[107.50000000 130.90695190]
[107.50000000 145.90695190]
[107.50000000 160.90695190]
[107.50000000 175.90695190]
[107.50000000 190.90695190]
[107.50000000 205.90695190]
[107.50000000 220.90695190]
[107.50000000 235.90695190]
[107.50000000 250.90695190]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[11 50]
[12 49]
[13 48]
[17 42]
[18 41]
[19 40]
[20 35]
[21 34]
[22 33]
[23 32]
[24 31]
[52 130]
[53 129]
[54 128]
[55 127]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
