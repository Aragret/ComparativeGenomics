%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:18 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGAACUAGGAAUAGCCCCCUUUCACUUCUGAGUCCCAGAGGUUACCCAAGGCACCCCUCUGAxxxxxxxxxxCCUUACACAAAAUGACAUCAAAAAAAUCGUAGCCUUCUCCACUUCAAGUCAACUAGGACUCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[81.65213013 300.23568726]
[81.34007263 285.23892212]
[81.02801514 270.24218750]
[80.71595764 255.24542236]
[80.40390015 240.24867249]
[80.09185028 225.25192261]
[79.77979279 210.25517273]
[79.46773529 195.25840759]
[79.15567780 180.26165771]
[65.43562317 174.19865417]
[54.13661957 184.06437683]
[42.83761597 193.93009949]
[40.30192566 200.14924622]
[35.67809296 203.59184265]
[30.85725021 203.95924377]
[19.15762711 213.34640503]
[7.45800352 222.73356628]
[8.33472729 238.22584534]
[-0.09041779 251.25645447]
[-14.57779217 256.81481934]
[-29.55670547 252.76368713]
[-39.26745605 240.66075134]
[-39.97607040 225.15986633]
[-31.41006279 212.22143555]
[-16.86324310 206.82054138]
[-1.92915845 211.03393555]
[9.77046490 201.64677429]
[21.47008896 192.25961304]
[32.97189331 182.63108826]
[44.27089691 172.76536560]
[55.56990051 162.89964294]
[51.26231766 148.53146362]
[36.39926910 146.50912476]
[21.53622246 144.48678589]
[6.67317629 142.46446228]
[-8.18987083 140.44212341]
[-23.05291748 138.41978455]
[-37.91596603 136.39744568]
[-51.50495911 144.92497253]
[-66.59637451 139.48173523]
[-71.61335754 124.24332428]
[-62.70731735 110.89933777]
[-46.71020126 109.68614197]
[-35.89363098 121.53440857]
[-21.03058243 123.55673981]
[-6.16753626 125.57907104]
[8.69551086 127.60140991]
[23.55855751 129.62374878]
[38.42160416 131.64607239]
[53.28465271 133.66841125]
[46.03295517 111.76692200]
[48.11748123 89.74541473]
[58.43136978 71.25832367]
[74.56498718 59.07064819]
[93.32118988 54.64920044]
[111.33177185 58.01100922]
[117.67890167 44.42005920]
[124.02603149 30.82910728]
[130.37315369 17.23815536]
[136.72029114 3.64720488]
[123.95970917 -4.27137518]
[112.22527313 -13.64364052]
[101.68171692 -24.33802032]
[92.47705078 -36.20438385]
[84.74050140 -49.07614136]
[78.58067322 -62.77259445]
[74.08404541 -77.10147095]
[71.31373596 -91.86161041]
[70.30863953 -106.84580994]
[71.08287048 -121.84370422]
[73.62554932 -136.64476013]
[77.90098572 -151.04118347]
[83.84916687 -164.83087158]
[91.38658142 -177.82023621]
[100.40741730 -189.82693481]
[110.78503418 -200.68241882]
[122.37374878 -210.23428345]
[135.01087952 -218.34841919]
[148.51901245 -224.91094971]
[162.70851135 -229.82972717]
[177.38018799 -233.03570557]
[192.32806396 -234.48387146]
[207.34231567 -234.15390015]
[222.21214294 -232.05043030]
[236.72880554 -228.20297241]
[250.68850708 -222.66555786]
[263.89529419 -215.51591492]
[276.16372681 -206.85441589]
[287.32162476 -196.80265808]
[297.21231079 -185.50173950]
[305.69692993 -173.11032104]
[312.65640259 -159.80233765]
[317.99301147 -145.76464844]
[321.63186646 -131.19429016]
[323.52182007 -116.29582214]
[323.63641357 -101.27839661]
[321.97396851 -86.35282135]
[318.55789185 -71.72863770]
[313.43609619 -57.61115265]
[306.68048096 -44.19853973]
[298.38589478 -31.67910004]
[288.66879272 -20.22858429]
[277.66558838 -10.00774002]
[265.53073120 -1.16005218]
[252.43458557 6.19027138]
[238.56098938 11.94004345]
[224.10473633 16.00854683]
[209.26872253 18.33866692]
[194.26127625 18.89768982]
[179.29302979 17.67776871]
[164.57414246 14.69603062]
[150.31124878 9.99433422]
[143.96411133 23.58528519]
[137.61698914 37.17623520]
[131.26985168 50.76718903]
[124.92272186 64.35813904]
[139.45764160 75.75781250]
[148.63867188 93.08182526]
[150.08749390 113.77333832]
[142.65293884 134.35050964]
[126.75228119 150.99217224]
[139.99487305 158.03730774]
[153.23745728 165.08244324]
[170.06066895 167.18374634]
[172.69862366 183.93121338]
[157.33590698 191.10221863]
[146.19232178 178.32502747]
[132.94973755 171.27989197]
[119.70714569 164.23475647]
[113.31846619 168.16346741]
[121.56230927 180.69499207]
[129.80615234 193.22650146]
[138.05000305 205.75802612]
[148.66468811 216.35653687]
[142.58100891 230.06744385]
[127.60020447 229.30897522]
[122.93215942 215.05473328]
[115.46847534 202.04345703]
[108.00479126 189.03218079]
[100.54110718 176.02088928]
[94.15243530 179.94960022]
[94.46448517 194.94636536]
[94.77654266 209.94311523]
[95.08860016 224.93986511]
[95.40065765 239.93661499]
[95.71271515 254.93338013]
[96.02477264 269.93011475]
[96.33682251 284.92687988]
[96.64888000 299.92364502]
[99.23988342 319.13134766]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 149]
[2 148]
[3 147]
[4 146]
[5 145]
[6 144]
[7 143]
[8 142]
[9 141]
[10 31]
[11 30]
[12 29]
[15 28]
[16 27]
[17 26]
[32 50]
[33 49]
[34 48]
[35 47]
[36 46]
[37 45]
[38 44]
[56 116]
[57 115]
[58 114]
[59 113]
[60 112]
[121 129]
[122 128]
[123 127]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
