%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:43 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGAAUAAUUACAUCACAAGACGUCUUGCACUCAUGAGCUGUCCCCACAUUAGGCUUAAAAACxxxxxxxxxxUUCAUAGGCUAUGUCCUCCCGUGAGGCCAAAUAUCAUUCUGAGGGGCCACAGUAAUUACACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[82.11763763 359.21078491]
[82.11763763 344.21078491]
[82.11763763 329.21078491]
[82.11763763 314.21078491]
[82.11763763 299.21078491]
[82.11763763 284.21078491]
[82.11763763 269.21078491]
[82.11763763 254.21076965]
[82.11763763 239.21076965]
[82.11763763 224.21076965]
[76.36673737 219.39651489]
[76.01028442 234.39227295]
[64.06398010 243.46343994]
[49.52342606 239.77938843]
[43.33768463 226.11422729]
[50.16463089 212.75785828]
[64.86492920 209.76799011]
[59.11403275 204.95372009]
[44.34797668 207.59259033]
[29.58192062 210.23144531]
[14.87395859 213.17694092]
[0.23045707 216.42776489]
[-14.41304398 219.67858887]
[-28.82526016 223.83647156]
[-42.95006180 228.88522339]
[-57.07486725 233.93399048]
[-71.19966888 238.98274231]
[-81.39500427 251.82746887]
[-97.57461548 249.15310669]
[-103.09429932 233.71078491]
[-92.27588654 221.38626099]
[-76.24842834 224.85794067]
[-62.12362289 219.80918884]
[-47.99882126 214.76042175]
[-33.87401581 209.71166992]
[-46.71653748 201.96121216]
[-50.50373840 187.44717407]
[-43.08542252 174.40997314]
[-28.67336655 170.25152588]
[-15.45007610 177.33280945]
[-10.92312431 191.63339233]
[-17.66386986 205.03507996]
[-3.02036858 201.78425598]
[11.62313271 198.53343201]
[14.92663097 195.00321960]
[20.50541496 193.55116272]
[26.94305611 195.46539307]
[41.70911026 192.82653809]
[56.47516632 190.18766785]
[68.73753357 181.54855347]
[76.19244385 168.53224182]
[83.64735413 155.51593018]
[91.10226440 142.49961853]
[79.94677734 80.40818787]
[79.01114655 65.43739319]
[78.07551575 50.46660614]
[77.13989258 35.49581528]
[73.46103668 27.06267166]
[76.34381866 20.20444870]
[75.71984100 5.21743250]
[67.41517639 -8.24893475]
[74.61634064 -21.28705025]
[73.99236298 -36.27406693]
[59.26584244 -39.55917740]
[45.89181519 -46.54471970]
[34.78214264 -56.75439835]
[26.69430161 -69.49211121]
[22.17973709 -83.88937378]
[21.54625893 -98.96455383]
[24.83705711 -113.68980408]
[31.82776070 -127.06113434]
[42.04172897 -138.16687012]
[54.78256226 -146.24978638]
[69.18156433 -150.75878906]
[84.25698853 -151.38644409]
[98.98097229 -148.08996582]
[112.34960175 -141.09410095]
[123.45138550 -130.87583923]
[131.52938843 -118.13188934]
[136.03283691 -103.73114777]
[136.65466309 -88.65547943]
[133.35250854 -73.93277740]
[126.35147858 -60.56684494]
[116.12892914 -49.46900940]
[103.38185883 -41.39592743]
[88.97937775 -36.89804459]
[89.60335541 -21.91102791]
[97.86339569 -9.51663208]
[90.70686340 4.59345484]
[91.33084106 19.58047104]
[92.11067963 34.56018448]
[93.04631042 49.53097534]
[93.98194122 64.50177002]
[94.91756439 79.47255707]
[108.16015625 86.51769257]
[121.09821320 78.92778778]
[134.03627014 71.33787537]
[146.97431946 63.74797058]
[154.60034180 49.22984695]
[170.99497986 48.84556198]
[179.29284668 62.99043274]
[170.95780945 77.11343384]
[154.56422424 76.68602753]
[141.62617493 84.27593231]
[128.68811035 91.86584473]
[115.75006104 99.45574951]
[116.99262238 106.85210419]
[131.78532410 104.36698914]
[145.08616638 97.43246460]
[155.79135132 107.93956757]
[149.10641479 121.36758423]
[134.27044678 119.15969086]
[119.47773743 121.64481354]
[120.72029877 129.04116821]
[135.42825317 131.98664856]
[150.13621521 134.93212891]
[166.85427856 132.11376953]
[174.19050598 147.39826965]
[161.53421021 158.67897034]
[147.19073486 149.64009094]
[132.48277283 146.69461060]
[117.77481842 143.74913025]
[104.11857605 149.95452881]
[96.66366577 162.97084045]
[89.20875549 175.98715210]
[81.75384521 189.00346375]
[94.53649139 181.15464783]
[105.03061676 170.43675232]
[118.66401672 164.18132019]
[133.63291931 163.21598816]
[147.95686340 167.66848755]
[159.74070740 176.94969177]
[167.42538452 189.83169556]
[169.99417114 204.61009216]
[167.10720825 219.32965088]
[159.14645386 232.04289246]
[147.16514587 241.06776428]
[132.74848938 245.21025085]
[117.80389404 243.92225647]
[104.30902100 237.37451172]
[97.11763763 224.21076965]
[97.11763763 239.21076965]
[97.11763763 254.21076965]
[97.11763763 269.21078491]
[97.11763763 284.21078491]
[97.11763763 299.21078491]
[97.11763763 314.21078491]
[97.11763763 329.21078491]
[97.11763763 344.21078491]
[97.11763763 359.21078491]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[18 49]
[19 48]
[20 47]
[21 44]
[22 43]
[23 42]
[24 35]
[25 34]
[26 33]
[27 32]
[50 126]
[51 125]
[52 124]
[53 123]
[54 94]
[55 93]
[56 92]
[57 91]
[59 90]
[60 89]
[62 87]
[63 86]
[95 106]
[96 105]
[97 104]
[98 103]
[114 122]
[115 121]
[116 120]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
