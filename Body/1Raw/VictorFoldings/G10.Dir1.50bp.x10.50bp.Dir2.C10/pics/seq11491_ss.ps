%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:40 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCAACCGCCUUUUCAUCAAUCGCCCACAUCACUCGAGACGUAAAUUAUGGCUGAAUCAUCCxxxxxxxxxxCUACUCAGAAACCUGAAACAUCGGCAUUAUCCUCCUGCUUGCAACUAUAGCAACAGCCUUCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[158.23056030 334.52474976]
[157.91850281 319.52798462]
[157.60644531 304.53125000]
[157.29438782 289.53448486]
[156.98233032 274.53771973]
[156.67028809 259.54098511]
[156.35823059 244.54421997]
[156.04617310 229.54747009]
[155.73411560 214.55072021]
[152.63578796 199.87419128]
[146.85951233 186.03097534]
[141.08325195 172.18775940]
[135.30697632 158.34454346]
[127.58288574 145.48614502]
[118.07453156 133.88479614]
[108.56616974 122.28345490]
[93.89472198 123.07936859]
[81.53588867 115.13302612]
[76.17110443 101.45442200]
[79.83248901 87.22490692]
[70.32412720 75.62356567]
[60.81576920 64.02222443]
[51.30741119 52.42087936]
[41.79905319 40.81953812]
[29.18792534 32.69799805]
[14.69232845 28.84083748]
[0.19673194 24.98367691]
[-4.96602678 26.38564491]
[-9.66424370 25.69344521]
[-13.16597939 23.44855690]
[-15.06810760 20.40727615]
[-29.29488754 15.65346050]
[-43.52166748 10.89964581]
[-51.88531876 22.65842628]
[-63.21692276 31.56653214]
[-76.58827209 36.90573502]
[-90.90731812 38.24967194]
[-105.00732422 35.49789047]
[-117.74198914 28.88328362]
[-128.07858276 18.95242119]
[-135.18171692 6.52038002]
[-138.48088074 -7.39613056]
[-137.71620178 -21.66193008]
[-151.84100342 -26.71068764]
[-168.79107666 -26.34832382]
[-173.83152771 -42.53567123]
[-159.67211914 -51.86024094]
[-146.79223633 -40.83549118]
[-132.66743469 -35.78673553]
[-123.24919128 -48.26455688]
[-110.42595673 -57.24068069]
[-95.44098663 -61.83025742]
[-79.75161743 -61.57442093]
[-64.88755798 -56.48615646]
[-52.30174255 -47.05018616]
[-43.22829819 -34.17683411]
[-38.56154251 -19.11419106]
[-38.76785278 -3.32713342]
[-24.54107094 1.42668152]
[-10.31429291 6.18049622]
[4.05389118 10.48808098]
[18.54948807 14.34524059]
[33.04508591 18.20240021]
[22.85913658 7.19120312]
[14.96959496 -5.56634903]
[9.66831207 -19.59832764]
[7.15139389 -34.38565826]
[7.51194715 -49.38132095]
[10.73663425 -64.03060150]
[16.70616531 -77.79158783]
[25.19971657 -90.15522766]
[35.90309143 -100.66416168]
[48.42034912 -108.92964935]
[62.28844833 -114.64592743]
[76.99437714 -117.60153198]
[91.99413300 -117.68714142]
[106.73284149 -114.89958191]
[120.66528320 -109.34197235]
[133.27607727 -101.21989441]
[144.09869385 -90.83380890]
[152.73281860 -78.56792450]
[158.85902405 -64.87596893]
[162.25071716 -50.26445389]
[162.78240967 -35.27388000]
[160.43443298 -20.45878410]
[155.29365540 -6.36721182]
[147.55024719 6.47956133]
[137.49064636 17.60630417]
[125.48697662 26.60141373]
[111.98329163 33.13214111]
[97.47911072 36.95690155]
[82.51098633 37.93420792]
[67.63261414 36.02790833]
[53.40039444 31.31118011]
[62.90875244 42.91252136]
[72.41711426 54.51386261]
[81.92546844 66.11520386]
[91.43383026 77.71654510]
[106.10527802 76.92063141]
[118.46411133 84.86697388]
[123.82889557 98.54557800]
[120.16751099 112.77509308]
[129.67587280 124.37643433]
[139.18423462 135.97778320]
[137.71128845 121.05027008]
[141.96057129 106.66474152]
[151.30816650 94.93348694]
[164.38151550 87.57905579]
[179.26098633 85.68133545]
[193.76176453 89.51898193]
[205.75462341 98.52849579]
[213.47860718 111.38696289]
[215.79954529 126.20631409]
[212.37666321 140.81056213]
[203.71255493 153.05528259]
[191.07940674 161.14253235]
[176.33219910 163.88481140]
[161.63635254 160.87947083]
[149.15019226 152.56826782]
[154.92646790 166.41148376]
[160.70274353 180.25469971]
[166.47900391 194.09791565]
[168.84576416 179.28581238]
[175.59608459 165.89054871]
[186.09324646 155.17562866]
[199.34710693 148.15173340]
[214.10749817 145.48139954]
[228.98216248 147.41650391]
[242.56802368 153.77450562]
[253.58360291 163.95570374]
[260.98986816 176.99975586]
[264.08822632 191.67628479]
[262.58639526 206.60090637]
[256.62606812 220.36587524]
[246.76945496 231.67282104]
[233.94624329 239.45520020]
[219.36601257 242.97894287]
[204.40402222 241.91168213]
[190.47158813 236.35408020]
[178.88285828 226.83035278]
[170.73086548 214.23866272]
[171.04292297 229.23541260]
[171.35498047 244.23216248]
[171.66703796 259.22891235]
[171.97909546 274.22567749]
[172.29115295 289.22244263]
[172.60321045 304.21917725]
[172.91525269 319.21594238]
[173.22731018 334.21267700]
[175.81831360 353.42041016]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 149]
[2 148]
[3 147]
[4 146]
[5 145]
[6 144]
[7 143]
[8 142]
[9 141]
[10 122]
[11 121]
[12 120]
[13 119]
[14 104]
[15 103]
[16 102]
[20 98]
[21 97]
[22 96]
[23 95]
[24 94]
[25 63]
[26 62]
[27 61]
[31 60]
[32 59]
[33 58]
[43 49]
[44 48]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
