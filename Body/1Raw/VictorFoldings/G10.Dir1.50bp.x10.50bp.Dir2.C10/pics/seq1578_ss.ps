%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:11 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCCACCUCUUGCUCAGCCUAUAUACCGCCAUCUUCAGCAAACCCUGAUGAAGGCUACAAAGUxxxxxxxxxxCAUACCCAACCCCCUGGUCAACCUCAACCUAGGCCUCCUAUUUAUUCUAGCCACCUCUAGCCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[142.23901367 284.51586914]
[141.62318420 269.52850342]
[141.00735474 254.54115295]
[140.39152527 239.55380249]
[139.77571106 224.56645203]
[139.15988159 209.57910156]
[138.54405212 194.59173584]
[137.92823792 179.60438538]
[133.38093567 165.31025696]
[125.22427368 152.72181702]
[117.06761169 140.13337708]
[108.91094208 127.54493713]
[95.17446899 130.04209900]
[81.16764832 125.75270844]
[70.19728851 115.03548431]
[65.14304352 99.82908630]
[67.72245026 83.31687927]
[77.98126221 69.26184845]
[63.26573944 66.35437012]
[48.55021667 63.44689941]
[39.46133041 64.85684967]
[33.56379318 60.32570648]
[24.44787598 61.54874802]
[18.64461517 56.89747238]
[4.06086588 53.38830566]
[-10.52288342 49.87913895]
[-25.10663223 46.36997223]
[-39.69038391 42.86080551]
[-30.11999321 54.41102600]
[-26.88947487 69.05902100]
[-30.71370506 83.56333923]
[-40.74642563 94.71433258]
[-54.76749420 100.04439545]
[-69.67420197 98.37403870]
[-82.16784668 90.07290649]
[-89.48371887 76.97794342]
[-90.00289154 61.98693085]
[-83.61047363 48.41722488]
[-71.72104645 39.27165222]
[-56.96268082 36.57420349]
[-70.39012909 29.88812637]
[-86.19234467 30.66300774]
[-94.13652039 18.06382751]
[-107.56397247 11.37775230]
[-120.99142456 4.69167662]
[-134.41886902 -1.99439883]
[-149.32234192 3.26507735]
[-163.54345703 -3.62953162]
[-168.64506531 -18.58777618]
[-161.60047913 -32.73519516]
[-146.58914185 -37.67837524]
[-132.51699829 -30.48461723]
[-127.73279572 -15.42184830]
[-114.30534363 -8.73577309]
[-100.87789917 -2.04969740]
[-87.45044708 4.63637781]
[-72.60865021 3.38326383]
[-63.70405197 16.46067810]
[-50.27660370 23.14675331]
[-36.18121338 28.27705383]
[-21.59746552 31.78622246]
[-7.01371622 35.29539108]
[7.57003307 38.80455780]
[22.15378189 42.31372452]
[36.77278900 45.67298126]
[51.45768738 48.73137665]
[66.17321014 51.63885117]
[80.88873291 54.54632187]
[93.56024933 46.51932526]
[97.21895599 31.97237206]
[83.89986420 24.91082954]
[72.65821838 14.86649323]
[64.14757538 2.42332625]
[58.86273575 -11.69524097]
[57.11096191 -26.66837502]
[58.99409485 -41.62555313]
[64.40264893 -55.69719315]
[73.02217865 -68.06517792]
[84.35156250 -78.01045990]
[97.73211670 -84.95482635]
[112.38591766 -88.49453735]
[127.46100616 -88.42380524]
[142.08094788 -84.74674225]
[155.39575195 -77.67713165]
[166.63131714 -67.62597656]
[175.13441467 -55.17765427]
[180.41069031 -41.05588531]
[182.15338135 -26.08169365]
[180.26118469 -11.12565804]
[174.84410095 2.94269776]
[166.21707153 15.30545712]
[154.88166809 25.24386597]
[141.49690247 32.18011856]
[126.84095764 35.71094513]
[111.76590729 35.63107681]
[108.10720062 50.17803192]
[119.79341125 59.58189011]
[133.22085571 52.89581299]
[146.64831543 46.20973587]
[149.08432007 30.88506889]
[160.08647156 19.94284439]
[175.42422485 17.59057617]
[189.19987488 24.73275757]
[196.11643982 38.62307358]
[193.51432800 53.92041397]
[182.39411926 64.74264526]
[167.03175354 66.92839050]
[153.33438110 59.63718796]
[139.90693665 66.32326508]
[126.47948456 73.00933838]
[133.44767761 90.18728638]
[131.10527039 107.09377289]
[121.49938202 119.38827515]
[129.65605164 131.97671509]
[137.81271362 144.56515503]
[145.96937561 157.15359497]
[145.53086853 142.16000366]
[148.37814331 127.43271637]
[154.37368774 113.68304443]
[163.22790527 101.57508087]
[174.51315308 91.69363403]
[187.68438721 84.51596832]
[202.10540771 80.38875580]
[217.07972717 79.51133728]
[231.88407898 81.92609406]
[245.80343628 87.51639557]
[258.16549683 96.01223755]
[268.37319946 107.00327301]
[275.93353271 119.95864105]
[280.48129272 134.25262451]
[281.79684448 149.19482422]
[279.81668091 164.06353760]
[274.63641357 178.14064026]
[266.50625610 190.74621582]
[255.81886292 201.27140808]
[243.09045410 209.20788574]
[228.93579102 214.17230225]
[214.03852844 215.92489624]
[199.11819458 214.38101196]
[184.89541626 209.61521912]
[172.05715942 201.85769653]
[161.22349548 191.48313904]
[152.91558838 178.98855591]
[153.53140259 193.97592163]
[154.14723206 208.96327209]
[154.76306152 223.95062256]
[155.37889099 238.93797302]
[155.99470520 253.92532349]
[156.61053467 268.91268921]
[157.22636414 283.90002441]
[163.91787720 299.47756958]
[150.80151367 310.21987915]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 116]
[10 115]
[11 114]
[12 113]
[18 68]
[19 67]
[20 66]
[22 65]
[24 64]
[25 63]
[26 62]
[27 61]
[28 60]
[40 59]
[41 58]
[43 56]
[44 55]
[45 54]
[46 53]
[69 96]
[70 95]
[97 110]
[98 109]
[99 108]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
