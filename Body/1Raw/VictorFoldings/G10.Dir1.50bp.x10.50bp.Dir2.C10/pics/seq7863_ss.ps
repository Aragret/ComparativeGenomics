%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:25 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCAUCGUCCUAGAAUUAAUUCCCCUAAAAAUCUUUGAAAUAGGGCCCGUAUUUACCCUAUAxxxxxxxxxxUGAUAUAUAAACUCAGACCCAAACAUUAAUCAGUUCUUCAAAUAUCUACUCAUCUUCCUACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[96.58341217 420.35269165]
[96.58341217 405.35269165]
[96.58341217 390.35269165]
[96.58341217 375.35269165]
[96.58341217 360.35269165]
[96.58341217 345.35269165]
[96.58341217 330.35269165]
[96.58341217 315.35269165]
[96.58341217 300.35269165]
[96.58341217 285.35269165]
[79.97019958 280.46493530]
[65.62694550 270.73077393]
[54.92797089 257.07025146]
[48.90229797 240.78022766]
[48.13463593 223.41130066]
[52.70867920 206.62010193]
[62.19812775 192.01142883]
[75.70639038 180.98474121]
[91.95129395 174.60020447]
[90.70442200 159.65211487]
[89.45754242 144.70404053]
[88.21067047 129.75595093]
[75.94830322 121.11682892]
[61.45270538 124.97399139]
[46.95711136 128.83114624]
[39.79470825 139.60862732]
[27.59346008 142.49800110]
[17.05634880 136.47500610]
[2.48364544 140.02975464]
[-7.04414654 152.93714905]
[-23.08076096 153.39164734]
[-33.32427979 141.04458618]
[-29.91675186 125.36758423]
[-15.47214031 118.38669586]
[-1.07111657 125.45706177]
[13.50158596 121.90229797]
[25.47418213 109.10945129]
[43.09994888 114.33555603]
[57.59554672 110.47839355]
[72.09114075 106.62123871]
[79.66987610 85.30483246]
[98.15243530 78.59292603]
[102.16017151 64.13823700]
[106.16791534 49.68354416]
[110.17565155 35.22885513]
[114.18339539 20.77416801]
[118.19113159 6.31947994]
[114.94030762 -8.32402134]
[105.19265747 -19.72504234]
[95.44500732 -31.12606239]
[85.69734955 -42.52708435]
[75.94969940 -53.92810440]
[66.20204926 -65.32912445]
[51.11666870 -62.44348907]
[36.61480713 -67.50229645]
[26.59738922 -79.14476013]
[23.75905037 -94.23910522]
[28.86328888 -108.72504425]
[40.53709412 -118.70591736]
[55.64026642 -121.49693298]
[70.11013031 -116.34730530]
[80.05436707 -104.64228058]
[82.79801941 -89.53043365]
[77.60307312 -75.07677460]
[87.35072327 -63.67575836]
[97.09837341 -52.27473450]
[106.84602356 -40.87371445]
[116.59368134 -29.47269440]
[126.34133148 -18.07167435]
[123.25289917 -32.75028229]
[113.92552948 -44.49763107]
[111.61901855 -59.31923676]
[116.93554688 -73.34544373]
[128.48707581 -82.91425323]
[143.25770569 -85.52742767]
[157.39106750 -80.50270081]
[167.19721985 -69.15194702]
[170.11592102 -54.43864822]
[165.38516235 -40.20418549]
[154.24108887 -30.16544724]
[148.76345825 -16.20136070]
[160.26525879 -25.82988739]
[171.76707458 -35.45841599]
[183.26887512 -45.08694077]
[185.09622192 -50.11489868]
[188.36798096 -53.55698395]
[192.21995544 -55.12670135]
[195.80168152 -54.93007278]
[207.88168335 -63.82242584]
[219.96166992 -72.71477509]
[215.95874023 -87.35516357]
[217.51872253 -102.45254517]
[224.43066406 -115.96511841]
[235.75975037 -126.06541443]
[249.97383118 -131.38746643]
[265.15057373 -131.21150208]
[279.23745728 -125.56130981]
[290.32931519 -115.20104218]
[296.92608643 -101.53184509]
[298.13558960 -86.40235138]
[293.79428101 -71.85871124]
[284.48928833 -59.86782837]
[271.47900391 -52.05137253]
[256.52297974 -49.46645355]
[241.64389038 -52.46266174]
[228.85401917 -60.63478470]
[216.77403259 -51.74243546]
[204.69403076 -42.85008621]
[192.89739990 -33.58513641]
[181.39559937 -23.95660973]
[169.89378357 -14.32808399]
[158.39198303 -4.69955826]
[154.71711731 1.40429747]
[149.83544922 6.08594227]
[144.21215820 9.14962482]
[138.32902527 10.53804970]
[132.64582825 10.32721996]
[128.63807678 24.78190804]
[124.63034058 39.23659897]
[120.62260437 53.69128418]
[116.61486053 68.14597321]
[112.60712433 82.60066223]
[123.64398193 96.61107635]
[120.78002167 116.09563446]
[103.15876007 128.50907898]
[104.40563202 143.45715332]
[105.65250397 158.40524292]
[106.89938354 173.35333252]
[119.55199432 175.48040771]
[131.39077759 180.40306091]
[141.80711365 187.86398315]
[150.26651001 197.47547913]
[156.33595276 208.73960876]
[159.70610046 221.07402039]
[160.20710754 233.84201050]
[157.81706238 246.38542175]
[152.66299438 258.05856323]
[145.01414490 268.26147461]
[135.26783752 276.47067261]
[123.92887878 282.26614380]
[111.58341217 285.35269165]
[111.58341217 300.35269165]
[111.58341217 315.35269165]
[111.58341217 330.35269165]
[111.58341217 345.35269165]
[111.58341217 360.35269165]
[111.58341217 375.35269165]
[111.58341217 390.35269165]
[111.58341217 405.35269165]
[111.58341217 420.35269165]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[19 128]
[20 127]
[21 126]
[22 125]
[23 40]
[24 39]
[25 38]
[28 36]
[29 35]
[42 122]
[43 121]
[44 120]
[45 119]
[46 118]
[47 117]
[48 69]
[49 68]
[50 67]
[51 66]
[52 65]
[53 64]
[81 112]
[82 111]
[83 110]
[84 109]
[88 108]
[89 107]
[90 106]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
