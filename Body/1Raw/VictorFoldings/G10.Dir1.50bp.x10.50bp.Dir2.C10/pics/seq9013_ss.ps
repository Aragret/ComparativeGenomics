%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:08 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGAGCCUUUUACCACUCCAGCCUAGCCCCUACCCCCCAAUUAGGAGGGCACUGGCCCCCAACAxxxxxxxxxxCACUAGGAUACCAACAAACCUACCCACCCUUAACAGUACAUAGUACAUAAAGCCAUUUACCCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[-4.38085461 184.76687622]
[-16.53418732 193.55871582]
[-28.68752098 202.35055542]
[-40.84085464 211.14239502]
[-52.99418640 219.93424988]
[-65.14752197 228.72608948]
[-72.24431610 245.68681335]
[-89.72694397 246.87100220]
[-101.69720459 255.91052246]
[-113.66745758 264.95004272]
[-118.66966248 272.66842651]
[-125.97756958 274.04925537]
[-138.13090515 282.84109497]
[-133.25968933 297.15063477]
[-132.82437134 312.26031494]
[-136.86364746 326.82653809]
[-145.01835632 339.55416870]
[-156.56336975 349.31143188]
[-170.47212219 355.23071289]
[-185.50787354 356.78567505]
[-200.33361816 353.83807373]
[-213.63110352 346.64996338]
[-224.21789551 335.86056519]
[-231.15261841 322.42922974]
[-233.81867981 307.55026245]
[-231.97897339 292.54669189]
[-225.79711914 278.75265503]
[-215.82276917 267.39465332]
[-202.94287109 259.48266602]
[-188.30267334 255.72023010]
[-173.20397949 256.44189453]
[-158.98934937 261.58346558]
[-146.92274475 270.68777466]
[-134.76940918 261.89593506]
[-122.70697784 252.97978210]
[-110.73671722 243.94026184]
[-98.76646423 234.90074158]
[-96.76821136 222.93122864]
[-86.81581116 215.30751038]
[-73.93936157 216.57275391]
[-61.78602982 207.78091431]
[-49.63269806 198.98907471]
[-37.47936249 190.19721985]
[-25.32603073 181.40538025]
[-13.17269707 172.61354065]
[-26.64750862 145.17958069]
[-33.57873154 115.41128540]
[-33.60824966 84.84673309]
[-26.73453140 55.06511307]
[-13.31273270 27.60517883]
[5.96367741 3.88571596]
[-3.91202879 -7.40456438]
[-11.96969223 -11.83963394]
[-13.87168980 -19.02952957]
[-23.51350403 -30.52019691]
[-33.15531921 -42.01086426]
[-42.79713058 -53.50152969]
[-58.38396072 -58.59886169]
[-61.49772644 -74.69968414]
[-48.93524933 -85.24085236]
[-33.61973190 -79.37851715]
[-31.30646515 -63.14334488]
[-21.66465187 -51.65267563]
[-12.02283764 -40.16201019]
[-2.38102293 -28.67134476]
[7.37825155 -17.28026962]
[17.25395775 -5.98999023]
[25.27750015 -11.79147339]
[33.70619202 -16.98682213]
[42.49432755 -21.54786301]
[51.59426117 -25.44987106]
[60.95665359 -28.67168427]
[70.53073883 -31.19583893]
[80.26460266 -33.00864410]
[90.10547638 -34.10027695]
[100.00000000 -34.46481323]
[109.89452362 -34.10027695]
[119.73539734 -33.00864410]
[129.46926880 -31.19583893]
[139.04335022 -28.67168427]
[148.40574646 -25.44987106]
[157.50567627 -21.54786301]
[166.29380798 -16.98682213]
[174.72250366 -11.79147339]
[182.74604797 -5.98999023]
[192.62174988 -17.28026962]
[202.49745178 -28.57055092]
[212.37315369 -39.86083221]
[206.79600525 -54.11403656]
[208.49299622 -69.32518005]
[217.07417297 -81.99884796]
[230.56767273 -89.22272491]
[245.87274170 -89.33681488]
[259.47244263 -82.31490326]
[268.24160767 -69.77057648]
[270.16519165 -54.58642960]
[264.80114746 -40.25165939]
[253.38208008 -30.06029892]
[238.53204346 -26.35424614]
[223.66343689 -29.98512459]
[213.78773499 -18.69484520]
[203.91203308 -7.40456438]
[194.03631592 3.88571596]
[200.89924622 11.11732960]
[207.20747375 18.83756065]
[212.92636108 27.00396538]
[218.02445984 35.57165527]
[222.47373962 44.49352646]
[226.24974060 53.72053528]
[229.33171082 63.20195770]
[231.70269775 72.88567352]
[233.34967041 82.71843719]
[234.26358032 92.64620972]
[234.43939209 102.61440277]
[233.87615967 112.56822968]
[232.57696533 122.45296478]
[230.54895020 132.21426392]
[244.88900757 136.61456299]
[259.22906494 141.01486206]
[273.56912231 145.41516113]
[290.48510742 144.28131104]
[296.25747681 160.22232056]
[282.53738403 170.18202209]
[269.16882324 159.75523376]
[254.82876587 155.35493469]
[240.48870850 150.95463562]
[226.14863586 146.55432129]
[222.13757324 156.24232483]
[217.38380432 165.58833313]
[211.91624451 174.53549194]
[205.76814270 183.02941895]
[198.97688293 191.01846313]
[191.58377075 198.45404053]
[183.63374329 205.29093933]
[175.17515564 211.48757935]
[166.25944519 217.00628662]
[156.94082642 221.81349182]
[147.27595520 225.87998962]
[137.32360840 229.18101501]
[127.14429474 231.69651794]
[116.79993439 233.41119385]
[106.35340881 234.31463623]
[95.86825562 234.40132141]
[85.40821838 233.67073059]
[75.03691864 232.12731934]
[64.81741333 229.78047180]
[54.81184387 226.64445496]
[45.08105850 222.73832703]
[35.68422699 218.08584595]
[26.67848396 212.71530151]
[18.11859894 206.65937805]
[10.05661869 199.95486450]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 45]
[2 44]
[3 43]
[4 42]
[5 41]
[6 40]
[8 37]
[9 36]
[10 35]
[12 34]
[13 33]
[51 67]
[52 66]
[54 65]
[55 64]
[56 63]
[57 62]
[85 103]
[86 102]
[87 101]
[88 100]
[117 127]
[118 126]
[119 125]
[120 124]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
