%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:18 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGAAAGCAGCCACCAAUUAAGAAAGCGUUCAAGCUCAACACCCACUACCUAAAAAAUCCCAAAxxxxxxxxxxUUCUGUAACAGCUAAGGACUGCAAAACCCCACUCUGCAUCAACUGAACGCAAAUCAGCCACCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[30.28097153 439.32885742]
[30.28097153 424.32885742]
[30.28097153 409.32885742]
[30.28097153 394.32885742]
[30.28097153 379.32885742]
[30.28097153 364.32885742]
[30.28097153 349.32885742]
[30.28097153 334.32885742]
[30.28097153 319.32885742]
[30.28097153 304.32885742]
[16.35025406 298.76693726]
[6.01935196 309.64224243]
[11.47665215 323.89639282]
[10.20031166 339.10604858]
[2.44374919 352.25134277]
[-10.25296497 360.72222900]
[-25.36888885 362.83685303]
[-39.90274429 358.17532349]
[-50.96882248 347.66320801]
[-56.36994934 333.38769531]
[-55.03372192 318.18316650]
[-47.22545624 305.06854248]
[-34.49547958 296.64770508]
[-19.37134743 294.59262085]
[-4.85596180 299.31134033]
[5.47494078 288.43603516]
[-5.14518213 272.57644653]
[-9.65264606 254.22218323]
[-7.62764740 235.61975098]
[0.55796689 219.00134277]
[13.80092239 206.31692505]
[30.41355896 199.00559998]
[48.33827591 197.83294678]
[51.69753265 183.21394348]
[55.05679321 168.59494019]
[58.41604996 153.97592163]
[61.77531052 139.35691833]
[65.13456726 124.73790741]
[68.49382782 110.11890411]
[67.26321411 95.16947174]
[61.55855179 81.29658508]
[55.85388947 67.42370605]
[50.14922333 53.55082703]
[33.90511703 47.13864136]
[27.42310333 31.28572273]
[34.24742508 15.94519615]
[28.25913048 2.19236755]
[22.27083397 -11.56046104]
[7.68669271 -7.90632725]
[-7.30000257 -6.70265341]
[-22.28040314 -7.98227739]
[-36.84583664 -11.71028900]
[-50.59894180 -17.78498650]
[-63.16452408 -26.04064751]
[-74.19979095 -36.25205231]
[-83.40368652 -48.14062119]
[-90.52513123 -61.38203430]
[-95.36983490 -75.61505127]
[-97.80563354 -90.45137787]
[-97.76607513 -105.48628235]
[-95.25225067 -120.30959320]
[-90.33272552 -134.51692200]
[-83.14171600 -147.72067261]
[-73.87539673 -159.56065369]
[-62.78655243 -169.71385193]
[-50.17770386 -177.90328979]
[-36.39282990 -183.90554810]
[-21.80798340 -187.55686951]
[-6.82105684 -188.75765991]
[8.15909767 -187.47514343]
[22.72381020 -183.74432373]
[36.47574615 -177.66697693]
[49.03974152 -169.40888977]
[60.07304001 -159.19537354]
[69.27464294 -147.30502319]
[76.39353180 -134.06224060]
[81.23549652 -119.82829285]
[83.66843414 -104.99149323]
[83.62598419 -89.95659637]
[81.10930634 -75.13377380]
[76.18704224 -60.92739105]
[68.99348450 -47.72502136]
[59.72488403 -35.88682556]
[48.63408661 -25.73576164]
[36.02366257 -17.54875755]
[42.01195908 -3.79592896]
[48.00025558 9.95689964]
[60.56605911 12.96569824]
[69.21919250 22.82226944]
[70.61663818 36.05965424]
[64.02210236 47.84616470]
[69.72676849 61.71904373]
[75.43143463 75.59192657]
[81.13609314 89.46480560]
[88.92024994 82.52813721]
[98.64005280 80.27561951]
[107.81619263 82.84291840]
[114.31093597 89.18810272]
[128.96366882 85.97911072]
[136.73397827 81.05792236]
[143.95008850 82.85791779]
[158.66560364 79.95043945]
[173.38113403 77.04296875]
[188.09664917 74.13549805]
[192.38652039 59.44347000]
[203.02107239 48.43598557]
[217.55657959 43.64247513]
[232.65287781 46.16445923]
[244.84094238 55.42239761]
[251.32006836 69.28889465]
[250.60137939 84.57751465]
[242.85002136 97.77506256]
[229.84722900 105.84882355]
[214.58091736 106.94351959]
[200.55918884 100.80758667]
[191.00411987 88.85102081]
[176.28860474 91.75849152]
[161.57307434 94.66596222]
[146.85755920 97.57343292]
[132.17265320 100.63183594]
[117.51993561 103.84082794]
[113.41842651 113.24402618]
[104.48609924 119.25553131]
[93.21474457 119.54449463]
[83.11283112 113.47816467]
[79.75357819 128.09716797]
[76.39431763 142.71617126]
[73.03505707 157.33518982]
[69.67579651 171.95419312]
[66.31654358 186.57319641]
[62.95728302 201.19221497]
[73.53544617 206.43701172]
[82.69947815 213.99552917]
[89.94847107 223.49702454]
[94.87665558 234.46357727]
[97.19602203 246.33409119]
[96.75294495 258.49298096]
[93.53794861 270.30215454]
[87.68788147 281.13433838]
[79.48040009 290.40658569]
[69.32093811 297.61151123]
[57.72273636 302.34503174]
[45.28097153 304.32885742]
[45.28097153 319.32885742]
[45.28097153 334.32885742]
[45.28097153 349.32885742]
[45.28097153 364.32885742]
[45.28097153 379.32885742]
[45.28097153 394.32885742]
[45.28097153 409.32885742]
[45.28097153 424.32885742]
[45.28097153 439.32885742]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 152]
[2 151]
[3 150]
[4 149]
[5 148]
[6 147]
[7 146]
[8 145]
[9 144]
[10 143]
[11 26]
[12 25]
[33 131]
[34 130]
[35 129]
[36 128]
[37 127]
[38 126]
[39 125]
[40 94]
[41 93]
[42 92]
[43 91]
[46 87]
[47 86]
[48 85]
[98 121]
[99 120]
[101 119]
[102 118]
[103 117]
[104 116]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
