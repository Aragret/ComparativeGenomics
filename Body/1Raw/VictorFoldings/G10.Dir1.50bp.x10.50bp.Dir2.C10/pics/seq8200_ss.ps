%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:46 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCCCCACAAUCCUAGGCCUACCCGCCGCAGUACUGAUCAUUCUAUUUCCCCCUCUAUUGAUCxxxxxxxxxxCUAACAAUCAAUACUAAACCCCCAUAAAUAGGAGAAGGCUUAGAAGAAAACCCCACAAACCCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[-90.70320892 439.74786377]
[-100.80863953 450.83300781]
[-104.38782501 466.24404907]
[-118.68006897 470.43701172]
[-128.78550720 481.52215576]
[-138.89093018 492.60726929]
[-142.47012329 508.01831055]
[-156.76235962 512.21130371]
[-166.86779785 523.29644775]
[-176.97322083 534.38159180]
[-187.07865906 545.46667480]
[-197.18409729 556.55181885]
[-191.90075684 570.91656494]
[-193.90969849 586.08966064]
[-202.74929810 598.58447266]
[-216.38825989 605.52978516]
[-231.69245911 605.32958984]
[-245.14509583 598.02990723]
[-253.65487671 585.30822754]
[-255.26628113 570.08776855]
[-249.60903931 555.86614990]
[-237.98315430 545.91137695]
[-223.06015015 542.51098633]
[-208.26922607 546.44641113]
[-198.16380310 535.36126709]
[-188.05836487 524.27612305]
[-177.95292664 513.19097900]
[-167.84748840 502.10586548]
[-164.99111938 487.48770142]
[-149.97607422 482.50186157]
[-139.87063599 471.41671753]
[-129.76519775 460.33157349]
[-126.90882874 445.71343994]
[-111.89377594 440.72756958]
[-101.78833771 429.64242554]
[-113.48883057 414.57510376]
[-122.08309174 397.53942871]
[-127.25051117 379.16766357]
[-128.79765320 360.14187622]
[-126.66557312 341.16882324]
[-120.93196869 322.95352173]
[-111.80842590 306.17309570]
[-99.63257599 291.45172119]
[-84.85559845 279.33724976]
[-68.02552795 270.28088379]
[-49.76690674 264.62042236]
[-30.75760651 262.56753540]
[-11.70368195 264.20004272]
[6.68687105 269.45877075]
[13.23474216 255.96339417]
[19.78261185 242.46800232]
[26.33048248 228.97262573]
[32.87835312 215.47723389]
[26.98770714 203.97712708]
[28.84294891 190.99302673]
[37.98628235 181.31932068]
[51.22753906 178.65872192]
[58.05111313 165.30061340]
[53.23293686 151.25352478]
[59.96271896 137.60931396]
[74.72927094 132.65080261]
[81.55284119 119.29270935]
[88.37641907 105.93460846]
[78.45705414 78.70096588]
[79.99434662 63.77995300]
[81.53163910 48.85893631]
[83.06893158 33.93791962]
[84.60622406 19.01690292]
[86.14351654 4.09588671]
[87.68080902 -10.82512951]
[73.92968750 -17.16433334]
[62.98370743 -27.62684631]
[56.03019333 -41.07777023]
[53.82341766 -56.05805588]
[56.60275650 -70.94274139]
[64.06671906 -84.11726379]
[75.40567780 -94.15253448]
[89.38966370 -99.96001434]
[104.50180817 -100.90974426]
[119.10284424 -96.89870453]
[131.60896301 -88.36198425]
[140.66360474 -76.22558594]
[145.28459167 -61.80597305]
[144.97065735 -46.66727448]
[139.75585938 -32.45162964]
[130.20587158 -20.70103645]
[117.35659027 -12.69011784]
[102.60182190 -9.28783703]
[101.06452942 5.63317919]
[99.52723694 20.55419540]
[97.98994446 35.47521210]
[96.45265198 50.39622879]
[94.91535950 65.31724548]
[93.37806702 80.23825836]
[105.70935059 88.77871704]
[119.13680267 82.09264374]
[132.56425476 75.40657043]
[132.31126404 60.14554977]
[138.71264648 46.28968048]
[150.49739075 36.59005356]
[165.32560730 32.97254181]
[180.25317383 36.15539932]
[192.31619263 45.50666809]
[199.11955261 59.16965103]
[199.31243896 74.43154907]
[192.85655212 88.26210785]
[181.03370667 97.91524506]
[166.19134521 101.47434235]
[151.27642822 98.23271942]
[139.25032043 88.83402252]
[125.82287598 95.52009583]
[112.39543152 102.20616913]
[101.73451996 112.75818634]
[94.91094208 126.11628723]
[88.08737183 139.47438049]
[92.72489166 154.34486389]
[85.61452484 167.79467773]
[71.40921021 172.12419128]
[64.58563995 185.48229980]
[70.28491211 201.99003601]
[62.46343613 217.22671509]
[46.37373734 222.02511597]
[39.82586670 235.52049255]
[33.27799606 249.01588440]
[26.73012543 262.51126099]
[20.18225479 276.00665283]
[29.85054970 282.43499756]
[38.70101547 289.94775391]
[46.61270905 298.44186401]
[53.47753906 307.80087280]
[59.20178223 317.89654541]
[63.70733261 328.59057617]
[66.93278503 339.73645020]
[68.83425140 351.18161011]
[69.38597870 362.76931763]
[68.58071136 374.34100342]
[66.42972565 385.73825073]
[62.96274567 396.80520630]
[58.22748184 407.39041138]
[52.28899384 417.34915161]
[45.22880173 426.54522705]
[37.14374924 434.85299683]
[28.14469337 442.15893555]
[18.35497284 448.36322021]
[7.90872097 453.38122559]
[-3.05096960 457.14450073]
[-14.37401009 459.60180664]
[-25.90536880 460.71978760]
[-37.48719788 460.48339844]
[-48.96098709 458.89614868]
[-60.16974258 455.98007202]
[-70.96012115 451.77532959]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 35]
[2 34]
[4 32]
[5 31]
[6 30]
[8 28]
[9 27]
[10 26]
[11 25]
[12 24]
[49 126]
[50 125]
[51 124]
[52 123]
[53 122]
[57 119]
[58 118]
[61 115]
[62 114]
[63 113]
[64 94]
[65 93]
[66 92]
[67 91]
[68 90]
[69 89]
[70 88]
[95 112]
[96 111]
[97 110]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
