%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:46 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGUACUCGGACUACCCCGAUGCAUACACCACAUGAAACAUCCUAUCAUCUGUAGGCUCAUUCxxxxxxxxxxCAACAAACUUAAAAUAAAAUCCCCACUAUGCACAUUUUAUUUCUCCAACAUACUCGGAUUCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[115.79399109 272.86126709]
[115.79399109 257.86126709]
[115.79399109 242.86126709]
[115.79399109 227.86126709]
[115.79399109 212.86126709]
[115.79399109 197.86126709]
[115.79399109 182.86126709]
[115.79399109 167.86126709]
[115.79399109 152.86126709]
[115.79399109 137.86126709]
[105.38681030 139.29922485]
[95.30883789 138.02162170]
[86.23345947 134.29312134]
[78.72119904 128.53620911]
[67.42219543 138.40193176]
[56.12318802 148.26765442]
[44.82418442 158.13337708]
[44.00655365 173.91650391]
[32.21226883 184.43650818]
[16.43867111 183.45204163]
[6.04395485 171.54719543]
[7.19512177 155.78489685]
[19.20920563 145.51661682]
[34.95846176 146.83438110]
[46.25746536 136.96864319]
[57.55646896 127.10292816]
[68.85547638 117.23720551]
[64.95878601 106.26226807]
[64.81298828 94.61700439]
[50.79627228 89.27548981]
[35.14547729 91.59133911]
[26.00776672 79.82904816]
[11.99105453 74.48753357]
[-2.02565861 69.14602661]
[-16.04237175 63.80451202]
[-24.15588379 68.83052063]
[-33.53717804 69.51002502]
[-42.03669739 65.81578827]
[-47.76627731 58.70816803]
[-49.51833344 49.88932800]
[-63.17457581 43.68391800]
[-76.83081818 37.47851181]
[-90.48706055 31.27310562]
[-103.39353943 39.72451401]
[-118.82051849 39.83366776]
[-131.84529114 31.56574249]
[-138.31172180 17.55899811]
[-136.15637207 2.28293729]
[-126.06703186 -9.38790417]
[-111.26314545 -13.72940445]
[-96.46859741 -9.35620499]
[-86.40426636 2.33622146]
[-84.28165436 17.61686325]
[-70.62541199 23.82227135]
[-56.96916962 30.02767754]
[-43.31292725 36.23308563]
[-23.07878494 32.34688187]
[-10.70085907 49.78779602]
[3.31585383 55.12931061]
[17.33256721 60.47082138]
[31.34927940 65.81233215]
[45.99750519 63.11442566]
[56.13778305 75.25878143]
[70.15449524 80.60029602]
[75.01443481 74.64602661]
[81.03919220 69.87375641]
[87.94789886 66.50597382]
[95.41847992 64.69968414]
[96.66535950 49.75159836]
[82.89102936 43.42358398]
[72.11389160 32.76388931]
[65.63532257 19.05973053]
[64.23765564 3.96594667]
[68.08965302 -10.69481373]
[76.72617340 -23.15219307]
[89.10431671 -31.90190125]
[103.72936249 -35.88736725]
[118.83525848 -34.62733078]
[132.59790039 -28.27394295]
[143.35537720 -17.59440804]
[149.80867004 -3.87833166]
[151.17852783 11.21800232]
[147.29951477 25.87163925]
[138.64004517 38.31307983]
[126.24580383 47.03996277]
[111.61344147 50.99847031]
[110.36656952 65.94655609]
[120.02861023 69.26875305]
[128.61370850 75.35007477]
[135.33139038 83.83769989]
[139.50764465 94.15240479]
[140.64942932 105.52709961]
[155.14503479 101.66993713]
[169.64062500 97.81277466]
[184.13623047 93.95561981]
[198.63182068 90.09845734]
[213.12742615 86.24130249]
[227.62301636 82.38414001]
[242.11860657 78.52697754]
[256.61419678 74.66982269]
[258.98092651 59.62593460]
[267.26739502 46.84882736]
[280.03790283 38.55220413]
[295.07989502 36.17351151]
[309.78726196 40.12487030]
[321.61187744 49.72168350]
[328.50500488 63.30124664]
[329.27243042 78.51081848]
[323.78112793 92.71524048]
[312.98257446 103.45352173]
[298.74761963 108.86518860]
[283.54257202 108.01262665]
[270.00183105 101.04356384]
[260.47137451 89.16542053]
[245.97576904 93.02257538]
[231.48017883 96.87973785]
[216.98457336 100.73689270]
[202.48898315 104.59405518]
[187.99339294 108.45121765]
[173.49778748 112.30837250]
[159.00219727 116.16553497]
[144.50659180 120.02268982]
[159.07690430 123.58727264]
[173.64720154 127.15186310]
[188.40104675 124.44559479]
[203.20338440 126.87270355]
[216.32043457 134.14889526]
[226.21583557 145.42192078]
[231.73052979 159.37141418]
[232.21862793 174.36346436]
[227.62292480 188.64210510]
[218.48171997 200.53489685]
[205.86572266 208.64886475]
[191.25259399 212.03363037]
[176.35395813 210.29273987]
[162.91487122 203.63011169]
[152.50939941 192.82611084]
[146.35635376 179.14619446]
[145.17675781 164.18873596]
[137.98538208 151.02499390]
[130.79399109 137.86126709]
[130.79399109 152.86126709]
[130.79399109 167.86126709]
[130.79399109 182.86126709]
[130.79399109 197.86126709]
[130.79399109 212.86126709]
[130.79399109 227.86126709]
[130.79399109 242.86126709]
[130.79399109 257.86126709]
[130.79399109 272.86126709]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[14 27]
[15 26]
[16 25]
[17 24]
[29 64]
[30 63]
[32 61]
[33 60]
[34 59]
[35 58]
[40 56]
[41 55]
[42 54]
[43 53]
[68 87]
[69 86]
[92 122]
[93 121]
[94 120]
[95 119]
[96 118]
[97 117]
[98 116]
[99 115]
[100 114]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
