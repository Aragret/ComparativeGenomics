%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:25 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCCAUUCUAAUCGCAAUGGCAUUCCUAAUGCUUACCGAACGAAAAAUUCUAGGCUAUAUACAxxxxxxxxxxAGACCCAAACAUUAAUCAGUUCUUCAAAUAUCUACUCAUCUUCCUAAUUACCAUACUAAUCCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[92.50000000 251.76818848]
[92.50000000 236.76818848]
[92.50000000 221.76818848]
[92.50000000 206.76818848]
[92.50000000 191.76818848]
[92.50000000 176.76818848]
[92.50000000 161.76818848]
[92.50000000 146.76818848]
[92.50000000 131.76818848]
[92.50000000 116.76818848]
[86.65689850 112.06626129]
[72.66992188 117.48517609]
[74.97068787 102.66239929]
[69.12758636 97.96047211]
[54.47485733 101.16947174]
[39.82213211 104.37846375]
[33.88729858 116.51055145]
[22.20938492 122.89862061]
[9.17965698 121.39698029]
[-0.44834805 112.77991486]
[-15.16387081 115.68738556]
[-29.87939262 118.59485626]
[-33.71389771 132.08178711]
[-42.95132065 142.54202271]
[-55.73839188 147.96339417]
[-69.54673004 147.33612061]
[-81.67272186 140.84028625]
[-89.76689911 129.79943848]
[-104.53901672 132.40415955]
[-119.31113434 135.00888062]
[-134.08325195 137.61361694]
[-148.85536194 140.21833801]
[-163.40393066 148.92324829]
[-175.79609680 137.35301208]
[-168.10852051 122.24217224]
[-151.46008301 125.44621277]
[-136.68797302 122.84149170]
[-121.91585541 120.23677063]
[-107.14373779 117.63204956]
[-92.37162018 115.02732849]
[-87.23659515 99.73590851]
[-75.03217316 89.04577637]
[-59.01372528 85.93372345]
[-43.51751328 91.33826447]
[-32.78686523 103.87934113]
[-18.07134247 100.97186279]
[-3.35582042 98.06439209]
[5.36988163 83.71987152]
[22.09296227 80.02256012]
[36.61313629 89.72573853]
[51.26586151 86.51674652]
[65.91858673 83.30774689]
[88.36316681 76.92135620]
[102.47827148 86.48200226]
[111.39441681 74.41957092]
[120.31056976 62.35713577]
[129.22671509 50.29470444]
[130.36657715 43.68083191]
[134.13905334 39.32695770]
[138.76487732 37.93017578]
[148.16873169 26.24396706]
[157.57260132 14.55775833]
[146.87135315 4.02864695]
[137.27168274 -7.51365471]
[128.86895752 -19.95442963]
[121.74671173 -33.17003632]
[115.97572327 -47.02912521]
[111.61335754 -61.39395523]
[108.70295715 -76.12175751]
[107.27346039 -91.06616211]
[107.33906555 -106.07862854]
[108.89912415 -121.00996399]
[111.93812561 -135.71177673]
[116.42588043 -150.03793335]
[122.31777191 -163.84605408]
[129.55525208 -176.99890137]
[138.06637573 -189.36575317]
[147.76657104 -200.82371521]
[158.55943298 -211.25889587]
[170.33766174 -220.56759644]
[182.98423767 -228.65727234]
[196.37344360 -235.44754028]
[210.37220764 -240.87092590]
[224.84141541 -244.87350464]
[239.63725281 -247.41551208]
[254.61267090 -248.47166443]
[269.61883545 -248.03149414]
[284.50659180 -246.09934998]
[299.12799072 -242.69445801]
[313.33770752 -237.85063171]
[326.99450684 -231.61602783]
[339.96267700 -224.05262756]
[352.11331177 -215.23556519]
[363.32568359 -205.25248718]
[373.48831177 -194.20262146]
[382.50021362 -182.19578552]
[390.27182007 -169.35128784]
[396.72589111 -155.79682922]
[401.79827881 -141.66709900]
[405.43856812 -127.10251617]
[407.61059570 -112.24785614]
[408.29275513 -97.25074768]
[407.47830200 -82.26024628]
[405.17529297 -67.42533112]
[401.40661621 -52.89344406]
[396.20974731 -38.80901337]
[389.63632202 -25.31202507]
[381.75167847 -12.53661728]
[372.63418579 -0.60976183]
[362.37445068 10.35000324]
[351.07443237 20.23375130]
[338.84646606 28.94325256]
[325.81207275 36.39194107]
[312.10076904 42.50579453]
[297.84887695 47.22404099]
[283.19799805 50.49979401]
[268.29376221 52.30049133]
[253.28430176 52.60823822]
[238.31878662 51.41997528]
[223.54595947 48.74751282]
[209.11264038 44.61741638]
[195.16226196 39.07072449]
[181.83349609 32.16257477]
[169.25880432 23.96161461]
[159.85494995 35.64782333]
[150.45109558 47.33403397]
[141.28915405 59.21085739]
[132.37300110 71.27328491]
[123.45684814 83.33571625]
[114.54070282 95.39814758]
[125.93447113 85.64202881]
[140.36982727 81.56520844]
[155.18388367 83.91973877]
[167.64389038 92.27128601]
[175.45133972 105.07923889]
[177.16600037 119.98091888]
[172.47158813 134.22740173]
[162.23405457 145.19065857]
[148.34191895 150.84828186]
[133.35786438 150.15661621]
[120.04602051 143.24325562]
[110.86199188 131.38349915]
[107.50000000 116.76818848]
[107.50000000 131.76818848]
[107.50000000 146.76818848]
[107.50000000 161.76818848]
[107.50000000 176.76818848]
[107.50000000 191.76818848]
[107.50000000 206.76818848]
[107.50000000 221.76818848]
[107.50000000 236.76818848]
[107.50000000 251.76818848]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 152]
[2 151]
[3 150]
[4 149]
[5 148]
[6 147]
[7 146]
[8 145]
[9 144]
[10 143]
[14 52]
[15 51]
[16 50]
[20 47]
[21 46]
[22 45]
[28 40]
[29 39]
[30 38]
[31 37]
[32 36]
[54 130]
[55 129]
[56 128]
[57 127]
[60 126]
[61 125]
[62 124]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
