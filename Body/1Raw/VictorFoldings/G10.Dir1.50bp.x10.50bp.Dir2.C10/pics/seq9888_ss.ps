%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:41 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGAACCCCCCUCCUAAUACUAACUACCUGACUCCUACCCCUCACAAUCAUGGCAAGCCAACGCxxxxxxxxxxUACCAUAAAUACUUGACCACCUGUAGUACAUAAAAACCCAAUCCACAUCAAAACCCCCUCCCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[117.88130951 372.79675293]
[111.33343506 386.29214478]
[104.78556824 399.78753662]
[98.23769379 413.28289795]
[91.68982697 426.77828979]
[85.14195251 440.27368164]
[78.59408569 453.76907349]
[72.04621124 467.26443481]
[65.49834442 480.75982666]
[64.02401733 497.64956665]
[47.38621521 500.90838623]
[39.64894104 485.82293701]
[52.00295639 474.21197510]
[58.55082703 460.71658325]
[65.09870148 447.22119141]
[71.64656830 433.72579956]
[78.19444275 420.23043823]
[84.74230957 406.73504639]
[91.29018402 393.23965454]
[97.83805084 379.74426270]
[104.38592529 366.24890137]
[83.91490173 350.77148438]
[67.87580872 330.72793579]
[57.25733185 307.34786987]
[52.71545029 282.06674194]
[54.53294373 256.43777466]
[62.60176849 232.03640747]
[76.42948914 210.36360168]
[95.16931915 192.75338745]
[117.67198181 180.29080200]
[113.12469482 165.99667358]
[108.57740021 151.70254517]
[104.03011322 137.40841675]
[99.48281860 123.11428833]
[78.32055664 115.43505859]
[71.33875275 90.78741455]
[57.19143677 85.80209351]
[43.04412079 80.81677246]
[33.43944168 92.54392242]
[20.40149307 100.27616882]
[5.50466776 103.07981110]
[-9.45216751 100.61630249]
[-22.66290283 93.18311310]
[-32.53227615 81.67784119]
[-37.86851501 67.48980713]
[-38.02724075 52.33227921]
[-32.98928833 38.03560638]
[-23.36301422 26.32618141]
[-10.31083679 18.61797333]
[4.59112930 15.84178638]
[19.54339981 18.33285713]
[32.74041367 25.79037857]
[42.58856964 37.31381989]
[47.89865112 51.51166534]
[48.02944565 66.66945648]
[62.17676163 71.65477753]
[76.32407379 76.64009857]
[88.99559021 68.61310577]
[90.53288269 53.69208908]
[92.07017517 38.77107239]
[93.45420074 23.83505821]
[94.68481445 8.88562393]
[95.91542816 -6.06381035]
[97.14604187 -21.01324463]
[82.72358704 -25.33603096]
[69.51524353 -32.56329727]
[58.09842300 -42.37909698]
[48.97222519 -54.35432816]
[42.53560257 -67.96548462]
[39.06993866 -82.61754608]
[38.72673798 -97.66998291]
[41.52100372 -112.46477509]
[47.33057785 -126.35514832]
[55.90150070 -138.73388672]
[66.85907745 -149.05982971]
[79.72429657 -156.88157654]
[93.93474579 -161.85720825]
[108.86920166 -163.76919556]
[123.87479401 -162.53396606]
[138.29554749 -158.20550537]
[151.50105286 -150.97303772]
[162.91400146 -141.15274048]
[172.03549194 -129.17391968]
[178.46675110 -115.56023407]
[181.92665100 -100.90681458]
[182.26393127 -85.85424042]
[179.46385193 -71.06055450]
[173.64880371 -57.17246628]
[165.07302856 -44.79710770]
[154.11138916 -34.47547150]
[141.24308777 -26.65878105]
[127.03068542 -21.68874550]
[112.09547424 -19.78263283]
[110.86486053 -4.83319807]
[109.63424683 10.11623669]
[108.40364075 25.06567192]
[111.00536346 32.03296661]
[106.99119568 40.30836487]
[105.45390320 55.22938156]
[103.91661072 70.15039825]
[118.77737427 78.74795532]
[125.75921631 93.31404877]
[123.44924927 108.27474976]
[113.77695465 118.56700134]
[118.32424164 132.86112976]
[122.87152863 147.15525818]
[127.41882324 161.44938660]
[131.96611023 175.74351501]
[140.27870178 174.10916138]
[148.69642639 173.15837097]
[157.16316223 172.89741516]
[165.62251282 173.32795715]
[174.01805115 174.44702148]
[182.29386902 176.24711609]
[190.39480591 178.71612549]
[198.26690674 181.83753967]
[205.85771179 185.59048462]
[213.11668396 189.94985962]
[219.99546814 194.88655090]
[226.44827271 200.36759949]
[232.43212891 206.35639954]
[237.90722656 212.81298828]
[242.83711243 219.69427490]
[247.18901062 226.95436096]
[250.93397522 234.54481506]
[254.04711914 242.41500854]
[256.50778198 250.51245117]
[258.29959106 258.78317261]
[259.41073608 267.17199707]
[259.83383179 275.62301636]
[259.56619263 284.07992554]
[258.60968018 292.48632812]
[256.97070312 300.78622437]
[254.66026306 308.92428589]
[251.69387817 316.84634399]
[248.09136963 324.49957275]
[243.87681580 331.83303833]
[239.07838440 338.79785156]
[233.72811890 345.34768677]
[227.86174011 351.43890381]
[221.51838684 357.03097534]
[214.74041748 362.08670044]
[207.57304382 366.57241821]
[200.06407166 370.45831299]
[192.26358032 373.71856689]
[184.22361755 376.33151245]
[175.99775696 378.27978516]
[167.64086914 379.55050659]
[159.20866394 380.13528442]
[150.75732422 380.03027344]
[142.34320068 379.23626709]
[134.02236938 377.75866699]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 21]
[2 20]
[3 19]
[4 18]
[5 17]
[6 16]
[7 15]
[8 14]
[9 13]
[30 108]
[31 107]
[32 106]
[33 105]
[34 104]
[36 57]
[37 56]
[38 55]
[58 100]
[59 99]
[60 98]
[61 96]
[62 95]
[63 94]
[64 93]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
