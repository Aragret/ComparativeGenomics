%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:46 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCUACCUAAGAACAGCUAAAAGAGCACACCCGUCUAUGUAGCAAAAUAGUGGGAAGAUUUAxxxxxxxxxxAUUACUAACAACAUUUCCCCCGCAUCCCCCUUCCAAACAACAAUCCCCCUCUACCUAAAACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[81.59750366 261.82550049]
[81.28544617 246.82873535]
[80.97338867 231.83198547]
[80.66133118 216.83523560]
[80.34927368 201.83848572]
[80.03721619 186.84172058]
[79.72516632 171.84497070]
[79.41310883 156.84822083]
[79.10105133 141.85147095]
[66.92921448 133.08525085]
[52.60661697 137.54206848]
[38.28401947 141.99888611]
[23.96142197 146.45570374]
[9.63882446 150.91252136]
[4.76800156 163.51144409]
[-6.31967354 170.87971497]
[-19.43193245 170.50154114]
[-29.76461601 162.74058533]
[-44.17683411 166.89846802]
[-58.58905029 171.05635071]
[-64.30062103 190.13508606]
[-80.19821930 201.89212036]
[-99.82800293 201.76718140]
[-115.34757996 189.98120117]
[-129.36428833 195.32270813]
[-143.38101196 200.66421509]
[-151.22758484 214.65745544]
[-167.08282471 217.10508728]
[-178.78395081 206.12950134]
[-177.35484314 190.15022278]
[-163.89179993 181.42520142]
[-148.72251892 186.64750671]
[-134.70581055 181.30599976]
[-120.68909454 175.96447754]
[-120.23709869 165.48973083]
[-116.28025055 155.73907471]
[-109.25394440 147.85408020]
[-99.95455170 142.76719666]
[-89.44915771 141.09153748]
[-78.95316315 143.04710388]
[-69.68966675 148.43223572]
[-62.74693680 156.64413452]
[-48.33472061 152.48625183]
[-33.92250443 148.32836914]
[-26.45960999 133.28964233]
[-10.11694241 128.17092896]
[5.18200874 136.58992004]
[19.50460625 132.13310242]
[33.82720184 127.67629242]
[48.14979935 123.21947479]
[62.47239685 118.76265717]
[58.86658478 101.38243103]
[62.77321625 84.41712189]
[73.20096588 70.90460968]
[88.01796722 63.14200592]
[104.38245392 62.29714584]
[119.28637695 68.24063110]
[129.49986267 57.25496674]
[133.22975159 41.87971497]
[147.56236267 37.82686234]
[157.77583313 26.84119606]
[167.98931885 15.85553169]
[178.20278931 4.86986732]
[168.29769897 -6.41198063]
[159.58480835 -18.63803864]
[152.15351868 -31.68284988]
[146.08010864 -45.41254807]
[141.42689514 -59.68624878]
[138.24160767 -74.35748291]
[136.55696106 -89.27568817]
[136.39022827 -104.28778839]
[137.74310303 -119.23973846]
[140.60174561 -133.97810364]
[144.93678284 -148.35162354]
[150.70375061 -162.21284485]
[157.84346008 -175.41949463]
[166.28265381 -187.83605957]
[175.93472290 -199.33511353]
[186.70062256 -209.79869080]
[198.46989441 -219.11938477]
[211.12173462 -227.20156860]
[224.52635193 -233.96229553]
[238.54615784 -239.33219910]
[253.03730774 -243.25616455]
[267.85110474 -245.69393921]
[282.83551025 -246.62049866]
[297.83676147 -246.02632141]
[312.70095825 -243.91754150]
[327.27554321 -240.31575012]
[341.41094971 -235.25794983]
[354.96212769 -228.79602051]
[367.79000854 -220.99627686]
[379.76300049 -211.93875122]
[390.75820923 -201.71641541]
[400.66281128 -190.43412781]
[409.37515259 -178.20768738]
[416.80587769 -165.16255188]
[422.87866211 -151.43257141]
[427.53128052 -137.15867615]
[430.71591187 -122.48730469]
[432.39990234 -107.56901550]
[432.56597900 -92.55690765]
[431.21243286 -77.60501862]
[428.35314941 -62.86678696]
[424.01748657 -48.49344635]
[418.24990845 -34.63249207]
[411.10961914 -21.42615700]
[402.66986084 -9.00996399]
[393.01730347 2.48867774]
[382.25094604 12.95177364]
[370.48126221 22.27195549]
[357.82904053 30.35358047]
[344.42413330 37.11371994]
[330.40408325 42.48300552]
[315.91278076 46.40633774]
[301.09887695 48.84345245]
[286.11444092 49.76934814]
[271.11318970 49.17452240]
[256.24908447 47.06507492]
[241.67468262 43.46265411]
[227.53950500 38.40422821]
[213.98860168 31.94170189]
[201.16104126 24.14139366]
[189.18846130 15.08334732]
[178.97497559 26.06901169]
[168.76150513 37.05467606]
[158.54801941 48.04034042]
[155.54866028 62.62982941]
[140.48551941 67.46844482]
[130.27203369 78.45411682]
[134.52665710 85.12892914]
[137.30989075 92.63729858]
[138.46020508 100.65496826]
[137.88751221 108.82683563]
[135.57890320 116.78270721]
[131.60095215 124.15405273]
[126.09841156 130.59106445]
[119.28917694 135.77920532]
[111.45582581 139.45443726]
[102.93394470 141.41647339]
[94.09780121 141.53941345]
[94.40985870 156.53616333]
[94.72191620 171.53291321]
[95.03397369 186.52966309]
[95.34603119 201.52642822]
[95.65808868 216.52317810]
[95.97013855 231.51992798]
[96.28219604 246.51667786]
[96.59425354 261.51342773]
[99.18524933 280.72116089]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 149]
[2 148]
[3 147]
[4 146]
[5 145]
[6 144]
[7 143]
[8 142]
[9 141]
[10 51]
[11 50]
[12 49]
[13 48]
[14 47]
[18 44]
[19 43]
[20 42]
[24 34]
[25 33]
[26 32]
[57 130]
[58 129]
[60 127]
[61 126]
[62 125]
[63 124]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
