%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:47 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGACAUUACUGCAGGCCACCUACUCAUGCACCUAAUUGGAAGCGCCACCCUAGCAAUAUCAAxxxxxxxxxxGGUACCACCCAAGUAUUGACUCACCCAUCAACAACCGCUAUGUAUUUCGUACAUUACUGCCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[117.01383972 310.35366821]
[117.01383972 295.35366821]
[117.01383972 280.35366821]
[117.01383972 265.35366821]
[117.01383972 250.35365295]
[117.01383972 235.35365295]
[117.01383972 220.35365295]
[117.01383972 205.35365295]
[117.01383972 190.35365295]
[117.01383972 175.35365295]
[114.37497711 160.58760071]
[109.17955780 146.51608276]
[103.98414612 132.44456482]
[98.78872681 118.37304688]
[91.89753723 115.41306305]
[79.87969971 124.38922119]
[78.11515808 109.49309540]
[71.22396851 106.53311920]
[57.44158554 112.45307922]
[43.65920639 118.37304688]
[29.87682343 124.29300690]
[20.25050926 136.84866333]
[5.50273275 134.76243591]
[3.06267977 149.99562073]
[-7.24271679 161.47613525]
[-22.12504196 165.54060364]
[-36.83539963 160.89207458]
[-46.67977142 149.01385498]
[-48.51684952 133.69625854]
[-41.76042938 119.82707977]
[-28.56646538 111.83190155]
[-13.14509678 112.26197815]
[-0.41723013 120.98005676]
[8.22327518 108.84783173]
[23.95685959 110.51062775]
[37.73924255 104.59066010]
[51.52162170 98.67070007]
[65.30400085 92.75073242]
[63.90169907 77.81642914]
[49.25819778 74.56560516]
[35.00738144 81.93402863]
[20.42066956 75.25515747]
[16.68773842 59.65244293]
[26.67217445 47.09495163]
[42.71477127 47.21571732]
[52.50902557 59.92210007]
[67.15252686 63.17292786]
[87.72834015 74.57169342]
[98.78872681 92.98220825]
[103.98414612 78.91069031]
[109.17955780 64.83917236]
[114.37497711 50.76765442]
[100.85967255 44.23373795]
[88.03808594 36.42589569]
[76.02993011 27.41702652]
[64.94732666 17.29124832]
[54.89374924 6.14310217]
[45.96307373 -5.92332029]
[38.23868179 -18.79535484]
[31.79269981 -32.35281754]
[26.68530846 -46.46912384]
[22.96419716 -61.01246643]
[20.66411018 -75.84706116]
[19.80652237 -90.83438873]
[20.39944267 -105.83451843]
[22.43733215 -120.70739746]
[25.90116692 -135.31416321]
[30.75860214 -149.51841736]
[36.96428680 -163.18753052]
[44.46027756 -176.19390869]
[53.17658234 -188.41607666]
[63.03182220 -199.73994446]
[73.93397522 -210.05975342]
[85.78125000 -219.27917480]
[98.46302795 -227.31210327]
[111.86090088 -234.08355713]
[125.84976959 -239.53028870]
[140.29902649 -243.60147095]
[155.07376099 -246.25906372]
[170.03601074 -247.47827148]
[185.04608154 -247.24769592]
[199.96383667 -245.56951904]
[214.64996338 -242.45936584]
[228.96736145 -237.94630432]
[242.78234863 -232.07247925]
[255.96591187 -224.89270020]
[268.39498901 -216.47404480]
[279.95349121 -206.89509583]
[290.53353882 -196.24530029]
[300.03631592 -184.62406921]
[308.37310791 -172.13995361]
[315.46606445 -158.90948486]
[321.24899292 -145.05619812]
[325.66784668 -130.70945740]
[328.68139648 -116.00319672]
[330.26150513 -101.07473755]
[330.39343262 -86.06346893]
[329.07592773 -71.10955048]
[326.32128906 -56.35260773]
[322.15521240 -41.93041992]
[316.61666870 -27.97764587]
[309.75729370 -14.62456512]
[301.64120483 -1.99585509]
[292.34411621 9.79057121]
[281.95288086 20.62466431]
[270.56448364 30.40526772]
[258.28530884 39.04105759]
[245.22994995 46.45140839]
[231.52032471 52.56711960]
[217.28445435 57.33110046]
[202.65525818 60.69886017]
[187.76930237 62.63895798]
[172.76559448 63.13328171]
[157.78422546 62.17721558]
[142.96507263 59.77968216]
[128.44650269 55.96306992]
[123.25108337 70.03459167]
[118.05566406 84.10610962]
[112.86025238 98.17762756]
[112.86025238 113.17762756]
[118.05566406 127.24914551]
[123.25108337 141.32066345]
[128.44650269 155.39218140]
[131.50979614 140.70831299]
[139.09617615 127.76818085]
[150.41331482 117.92326355]
[164.27925110 112.20174408]
[179.24583435 111.20118713]
[193.74998474 115.02608490]
[206.27687073 123.27696228]
[215.51821899 135.09210205]
[220.50883484 149.23754883]
[220.72752380 164.23596191]
[216.15145874 178.52090454]
[207.25852966 190.60046387]
[194.97752380 199.21307373]
[180.59106445 203.45921326]
[165.60166931 202.89544678]
[151.57479858 197.58064270]
[139.97543335 188.06987000]
[132.01383972 175.35365295]
[132.01383972 190.35365295]
[132.01383972 205.35365295]
[132.01383972 220.35365295]
[132.01383972 235.35365295]
[132.01383972 250.35365295]
[132.01383972 265.35366821]
[132.01383972 280.35366821]
[132.01383972 295.35366821]
[132.01383972 310.35366821]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[11 123]
[12 122]
[13 121]
[14 120]
[18 38]
[19 37]
[20 36]
[21 35]
[23 33]
[39 47]
[40 46]
[49 119]
[50 118]
[51 117]
[52 116]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
