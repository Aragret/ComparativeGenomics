%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:09 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGAAAAAAAGAACCAUUUGGAUACAUAGGUAUGGUCUGAGCUAUGAUAUCAAUUGGCUUCCUxxxxxxxxxxCCCCCCACCCUACCACACAUUCGAAGAACCCGUAUACAUAAAAUCUAGACAAAAAAGGAACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[408.99087524 194.72523499]
[394.76409912 189.97142029]
[380.53732300 185.21760559]
[366.01400757 188.52252197]
[355.37731934 176.81050110]
[341.15054321 172.05668640]
[326.92376709 167.30287170]
[312.69699097 162.54905701]
[298.47021484 157.79524231]
[284.24340820 153.04142761]
[273.52905273 167.62844849]
[258.50152588 177.75634766]
[240.91561890 182.22396851]
[222.83111572 180.49224854]
[206.37155151 172.74913025]
[193.47483826 159.88935852]
[185.66511536 143.41105652]
[183.87261963 125.24126434]
[169.22911072 121.99044037]
[154.58561707 118.73961639]
[139.90908813 115.64128876]
[125.20112610 112.69580841]
[110.49316406 109.75032806]
[97.18727112 114.04506683]
[86.56135559 104.95763397]
[71.85339355 102.01215363]
[57.14542770 99.06667328]
[48.04987335 100.45327759]
[42.16355896 95.90388489]
[27.52005959 92.65306091]
[12.87655735 89.40223694]
[-1.79996800 86.30391693]
[-16.50792885 83.35842896]
[-31.21589088 80.41294861]
[-45.92385101 77.46746826]
[-60.63181305 74.52198792]
[-75.68264771 79.39876556]
[-86.64279175 69.31291199]
[-97.95930481 79.92969513]
[-113.35910797 81.83377075]
[-126.92067719 74.29297638]
[-133.42930603 60.20690536]
[-130.38227844 44.99193573]
[-118.95126343 34.49853516]
[-103.53170013 32.76163101]
[-90.05274200 40.44909668]
[-83.69730377 54.60494614]
[-69.69848633 49.51748276]
[-57.68633270 59.81402206]
[-42.97837067 62.75950623]
[-28.27040863 65.70498657]
[-13.56244755 68.65046692]
[1.14551449 71.59595490]
[8.36841774 69.81401062]
[16.12738419 74.75873566]
[30.77088547 78.00955963]
[45.41438675 81.26038361]
[60.09091187 84.35871124]
[74.79887390 87.30419159]
[89.50683594 90.24967194]
[102.81272888 85.95493317]
[113.43864441 95.04236603]
[128.14660645 97.98784637]
[142.85456848 100.93332672]
[151.95013428 99.54672241]
[157.83644104 104.09611511]
[172.47993469 107.34693909]
[187.12344360 110.59776306]
[192.68637085 99.82869720]
[200.53207397 90.60159302]
[210.25181580 83.39070129]
[221.34065247 78.56540680]
[233.22372437 76.37127686]
[245.28602600 76.91762543]
[256.90423584 80.17202759]
[267.47894287 85.96221924]
[276.46551514 93.98522949]
[283.40219116 103.82322693]
[287.93389893 114.96524048]
[289.83020020 126.83377075]
[288.99722290 138.81465149]
[303.22402954 143.56846619]
[317.45080566 148.32228088]
[331.67758179 153.07609558]
[345.90435791 157.82991028]
[360.13113403 162.58372498]
[375.67205811 159.61882019]
[385.29113770 170.99082947]
[399.51791382 175.74464417]
[413.74468994 180.49845886]
[419.89602661 166.80393982]
[427.38034058 153.78996277]
[436.12326050 141.58586121]
[446.03790283 130.31294250]
[457.02566528 120.08322144]
[468.97741699 110.99838257]
[481.77435303 103.14871979]
[495.28927612 96.61224365]
[509.38787842 91.45391846]
[523.92999268 87.72500610]
[538.77117920 85.46257782]
[553.76385498 84.68911743]
[568.75903320 85.41230774]
[583.60766602 87.62495422]
[598.16223145 91.30508423]
[612.27807617 96.41610718]
[625.81481934 102.90723419]
[638.63800049 110.71394348]
[650.62017822 119.75865936]
[661.64215088 129.95147705]
[671.59454346 141.19110107]
[680.37835693 153.36581421]
[687.90625000 166.35461426]
[694.10345459 180.02842712]
[698.90838623 194.25134277]
[702.27325439 208.88200378]
[704.16467285 223.77499390]
[704.56384277 238.78230286]
[703.46667480 253.75477600]
[700.88421631 268.54360962]
[696.84210205 283.00180054]
[691.38043213 296.98568726]
[684.55352783 310.35626221]
[676.42932129 322.98065186]
[667.08843994 334.73339844]
[656.62377930 345.49765015]
[645.13934326 355.16647339]
[632.74920654 363.64373779]
[619.57659912 370.84521484]
[605.75244141 376.69931030]
[591.41406250 381.14785767]
[576.70397949 384.14663696]
[561.76843262 385.66583252]
[546.75585938 385.69039917]
[531.81542969 384.22000122]
[517.09564209 381.26934814]
[502.74279785 376.86767578]
[488.89953613 371.05880737]
[475.70346069 363.90045166]
[463.28570557 355.46371460]
[451.76971436 345.83248901]
[441.26992798 335.10250854]
[431.89068604 323.38037109]
[423.72518921 310.78262329]
[416.85464478 297.43441772]
[411.34732056 283.46847534]
[407.25793457 269.02355957]
[404.62713623 254.24324036]
[403.48107910 239.27444458]
[403.83111572 224.26589966]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 90]
[2 89]
[3 88]
[5 86]
[6 85]
[7 84]
[8 83]
[9 82]
[10 81]
[18 68]
[19 67]
[20 66]
[21 64]
[22 63]
[23 62]
[25 60]
[26 59]
[27 58]
[29 57]
[30 56]
[31 55]
[32 53]
[33 52]
[34 51]
[35 50]
[36 49]
[38 47]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
