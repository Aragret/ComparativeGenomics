%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:17 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCUCAACAGUUAAAUCAACAAAACUGCUCGCCAGAACACUACGAGCCACAGCUUAAAACUCxxxxxxxxxxGCCUCAGAGUACUUCGAGUCUCCCUUCACCAUUUCCGACGGCAUCUACGGCUCAACAUUUCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[82.51900482 253.38990784]
[82.20694733 238.39315796]
[81.89489746 223.39640808]
[81.58283997 208.39965820]
[81.27078247 193.40289307]
[80.95872498 178.40614319]
[80.64666748 163.40939331]
[80.33460999 148.41264343]
[80.02256012 133.41587830]
[68.82678986 123.43315887]
[53.89248276 124.83546448]
[38.95817566 126.23776245]
[34.61858749 140.37875366]
[24.08593369 151.48899841]
[9.22566223 156.93508911]
[-7.02109289 155.15129089]
[-21.21852493 146.05392456]
[-34.31167984 153.37303162]
[-47.40483475 160.69213867]
[-60.49798965 168.01124573]
[-60.63077927 183.36956787]
[-68.43875885 196.59571838]
[-81.82162476 204.13192749]
[-97.17945862 203.95098877]
[-110.38106537 196.10159302]
[-117.87528992 182.69515991]
[-117.64621735 167.33798218]
[-109.75547028 154.16104126]
[-96.32562256 146.70887756]
[-80.96923828 146.98608398]
[-67.81709290 154.91809082]
[-54.72393799 147.59898376]
[-41.63078308 140.27987671]
[-28.53763008 132.96076965]
[-30.09521103 118.04186249]
[-44.41780853 113.58504486]
[-58.74040604 109.12823486]
[-73.06300354 104.67141724]
[-87.38559723 100.21459961]
[-99.18808746 105.52075195]
[-111.05341339 101.46698761]
[-116.76305389 90.75683594]
[-130.98983765 86.00302124]
[-146.94160461 89.80738068]
[-158.01406860 77.71058655]
[-152.81683350 62.15678787]
[-136.69636536 59.14639282]
[-126.23601532 71.77624512]
[-112.00923920 76.53005981]
[-95.06223297 72.08044434]
[-82.92878723 85.89200592]
[-68.60618591 90.34882355]
[-54.28359222 94.80563354]
[-39.96099472 99.26245117]
[-25.63839531 103.71926880]
[-9.78039932 89.83740997]
[10.28995132 87.04538727]
[27.86555862 95.38019562]
[37.55587387 111.30345917]
[52.49018097 109.90115356]
[67.42448425 108.49884796]
[70.60059357 90.94866180]
[81.66838837 79.02535248]
[95.91678619 75.38459015]
[108.37163544 79.60420227]
[116.62392426 67.07824707]
[124.87621307 54.55228043]
[114.68902588 44.56281281]
[106.53502655 32.85990143]
[100.69617462 19.85100555]
[97.37385559 5.98870277]
[96.68193817 -8.24506760]
[98.64287567 -22.35575294]
[103.18695831 -35.85337448]
[110.15482330 -48.26954269]
[119.30301666 -59.17370224]
[130.31253052 -68.18807220]
[142.79986572 -75.00073242]
[156.33049011 -79.37640381]
[170.43382263 -81.16460419]
[184.61976624 -80.30477905]
[198.39558411 -76.82839966]
[211.28309631 -70.85777283]
[220.04930115 -83.02960968]
[228.81550598 -95.20144653]
[231.31588745 -104.05581665]
[237.89285278 -107.53275299]
[246.91038513 -119.51958466]
[246.09751892 -135.54203796]
[258.21252441 -146.05900574]
[273.96176147 -143.00277710]
[281.26379395 -128.71783447]
[274.51715088 -114.16235352]
[258.89721680 -110.50205994]
[249.87968445 -98.51522827]
[240.98733521 -86.43523407]
[232.22113037 -74.26339722]
[223.45492554 -62.09156418]
[234.16175842 -50.50635147]
[242.25665283 -36.96021652]
[247.39082336 -22.03247452]
[249.34213257 -6.36207581]
[248.02473450 9.37976265]
[243.49285889 24.51829529]
[235.93855286 38.40417099]
[225.68354797 50.44129181]
[213.16558838 60.11239624]
[198.91970825 67.00128937]
[183.55540466 70.81076050]
[167.73048401 71.37538147]
[152.12301636 68.66873169]
[137.40217590 62.80456924]
[129.14988708 75.33053589]
[120.89759827 87.85649109]
[125.35441589 102.17909241]
[139.25697327 107.81105042]
[153.15953064 113.44300842]
[165.22172546 103.93518066]
[180.42411804 101.74814606]
[194.67730713 107.47019958]
[204.14727783 119.56214905]
[206.28665161 134.77131653]
[200.51994324 149.00650024]
[188.39837646 158.43852234]
[173.18257141 160.53021240]
[158.96553040 154.71891785]
[149.57154846 142.56784058]
[147.52757263 127.34555817]
[133.62501526 121.71360779]
[119.72245789 116.08164978]
[113.54666901 120.33719635]
[123.04720306 131.94494629]
[132.54774475 143.55268860]
[145.18609619 151.63180542]
[145.44537354 166.62956238]
[133.09382629 175.14068604]
[119.17150116 169.55778503]
[116.12245941 154.87084961]
[108.65877533 141.85955811]
[101.19509888 128.84828186]
[95.01931000 133.10383606]
[95.33136749 148.10058594]
[95.64342499 163.09733582]
[95.95548248 178.09408569]
[96.26753235 193.09085083]
[96.57958984 208.08760071]
[96.89164734 223.08435059]
[97.20370483 238.08110046]
[97.51576233 253.07786560]
[100.10675812 272.28558350]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 149]
[2 148]
[3 147]
[4 146]
[5 145]
[6 144]
[7 143]
[8 142]
[9 141]
[10 61]
[11 60]
[12 59]
[17 34]
[18 33]
[19 32]
[20 31]
[35 55]
[36 54]
[37 53]
[38 52]
[39 51]
[42 49]
[43 48]
[65 114]
[66 113]
[67 112]
[83 98]
[84 97]
[85 96]
[87 95]
[88 94]
[115 130]
[116 129]
[117 128]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
