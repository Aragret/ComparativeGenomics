%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:24 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGAUAGAAACCGUCUGAACUAUCCUGCCCGCCAUCAUCCUAGUCCUCAUCGCCCUCCCAUCCxxxxxxxxxxCAUUAGCAGGAAUACCUUUCCUCACAGGUUUCUACUCCAAAGACCACAUCAUCGAAACCGCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[88.70174408 271.64471436]
[88.70174408 256.64471436]
[88.70174408 241.64471436]
[88.70174408 226.64471436]
[88.70174408 211.64471436]
[88.70174408 196.64471436]
[88.70174408 181.64471436]
[88.70174408 166.64471436]
[88.70174408 151.64471436]
[88.70174408 136.64471436]
[68.78457642 108.16324615]
[81.02410889 81.95872498]
[73.56919861 68.94242096]
[66.11428833 55.92610931]
[58.65937805 42.90980148]
[51.20446777 29.89348984]
[43.74955750 16.87718201]
[36.29464722 3.86087179]
[28.83973694 -9.15543747]
[21.24982834 -22.09349442]
[13.52574444 -34.95189667]
[-3.49612188 -38.84977341]
[-12.28744984 -53.54659653]
[-7.84914112 -69.73793030]
[-15.83905697 -82.43286133]
[-23.82897377 -95.12779236]
[-42.89532471 -95.53614807]
[-57.79448318 -107.20027161]
[-62.68940353 -125.32386780]
[-55.79852676 -142.62629700]
[-64.56473541 -154.79812622]
[-73.33094025 -166.96997070]
[-82.09714508 -179.14179993]
[-90.86335754 -191.31364441]
[-99.62956238 -203.48547363]
[-112.78504944 -196.24043274]
[-126.71791840 -190.63397217]
[-141.22500610 -186.74786377]
[-156.09474182 -184.63874817]
[-171.11029053 -184.33741760]
[-186.05265808 -185.84825134]
[-200.70397949 -189.14921570]
[-214.85057068 -194.19216919]
[-228.28613281 -200.90357971]
[-240.81474304 -209.18556213]
[-252.25369263 -218.91735840]
[-262.43615723 -229.95703125]
[-271.21368408 -242.14361572]
[-278.45822144 -255.29936218]
[-284.06417847 -269.23245239]
[-287.94973755 -283.73968506]
[-290.05828857 -298.60949707]
[-290.35906982 -313.62506104]
[-288.84765625 -328.56738281]
[-285.54617310 -343.21856689]
[-280.50268555 -357.36495972]
[-273.79077148 -370.80026245]
[-265.50830078 -383.32858276]
[-255.77609253 -394.76715088]
[-244.73602295 -404.94921875]
[-232.54913330 -413.72628784]
[-219.39309692 -420.97033691]
[-205.45980835 -426.57574463]
[-190.95243835 -430.46078491]
[-176.08253479 -432.56878662]
[-161.06697083 -432.86898804]
[-146.12471008 -431.35705566]
[-131.47363281 -428.05499268]
[-117.32742310 -423.01098633]
[-103.89236450 -416.29855347]
[-91.36437225 -408.01562500]
[-79.92615509 -398.28298950]
[-69.74449921 -387.24255371]
[-60.96789932 -375.05532837]
[-53.72433472 -361.89901733]
[-48.11944199 -347.96551514]
[-44.23495102 -333.45800781]
[-42.12751770 -318.58801270]
[-41.82786560 -303.57244873]
[-43.34037399 -288.63021851]
[-46.64297867 -273.97927856]
[-51.68751907 -259.83325195]
[-58.40043259 -246.39845276]
[-66.68383026 -233.87077332]
[-76.41690063 -222.43292236]
[-87.45772552 -212.25167847]
[-78.69152069 -200.07984924]
[-69.92530823 -187.90800476]
[-61.15910339 -175.73617554]
[-52.39289856 -163.56433105]
[-43.62668991 -151.39250183]
[-32.55488968 -153.46514893]
[-21.46497536 -151.21611023]
[-11.98944759 -144.93695068]
[-5.53796911 -135.51536560]
[-3.08770108 -124.30986023]
[-5.03546095 -112.95386505]
[-11.13404369 -103.11770630]
[-3.14412761 -90.42277527]
[4.84578848 -77.72784424]
[17.72297478 -76.64394379]
[27.76143837 -68.19979858]
[31.13341141 -55.32122421]
[26.38414764 -42.67597961]
[34.10823059 -29.81757927]
[40.28860855 -25.67649269]
[41.85604858 -16.61034775]
[49.31095886 -3.59403849]
[56.76586914 9.42227077]
[64.22077942 22.43857956]
[71.67568970 35.45489120]
[79.13059998 48.47119904]
[86.58551025 61.48751068]
[94.04042053 74.50381470]
[100.67490387 72.30435944]
[108.02990723 71.90052795]
[115.60435486 73.50956726]
[122.83591461 77.20609283]
[129.14204407 82.90589905]
[133.96493530 90.36154175]
[136.81713867 99.17064667]
[137.32426453 108.79683685]
[150.26232910 116.38674164]
[166.08717346 113.74976349]
[177.91865540 124.58470154]
[176.68064880 140.57991028]
[163.32286072 149.46525574]
[148.09223938 144.42463684]
[142.67242432 129.32479858]
[129.73435974 121.73489380]
[123.22620392 125.46234894]
[130.94161987 138.32595825]
[138.65704346 151.18955994]
[151.38237000 159.13096619]
[151.09890747 174.12829590]
[138.08256531 181.58316040]
[125.00344086 174.23902893]
[124.59266663 159.24473572]
[117.40128326 146.08099365]
[110.20989990 132.91725159]
[103.70174408 136.64471436]
[103.70174408 151.64471436]
[103.70174408 166.64471436]
[103.70174408 181.64471436]
[103.70174408 196.64471436]
[103.70174408 211.64471436]
[103.70174408 226.64471436]
[103.70174408 241.64471436]
[103.70174408 256.64471436]
[103.70174408 271.64471436]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[12 114]
[13 113]
[14 112]
[15 111]
[16 110]
[17 109]
[18 108]
[19 107]
[20 105]
[21 104]
[24 100]
[25 99]
[26 98]
[30 91]
[31 90]
[32 89]
[33 88]
[34 87]
[35 86]
[122 130]
[123 129]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
