%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:15 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCUAGGCCUCCUAUUUAUUCUAGCCACCUCUAGCCUAGCCGUUUACUCAAUCCUCUGAUCAGxxxxxxxxxxGAACACUAUACCUAUUAUUCGGCGCAUGAGCUGGAGUCCUAGGCACAGCUCUAAGCCUCCUCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[149.28514099 382.60336304]
[149.28514099 367.60336304]
[149.28514099 352.60336304]
[149.28514099 337.60336304]
[149.28514099 322.60336304]
[149.28514099 307.60336304]
[149.28514099 292.60336304]
[149.28514099 277.60336304]
[149.28514099 262.60336304]
[149.28514099 247.60334778]
[146.37767029 232.88783264]
[140.67300415 219.01495361]
[134.96833801 205.14207458]
[129.26367188 191.26918030]
[123.55901337 177.39630127]
[111.56278229 168.56796265]
[113.47033691 152.86216736]
[107.76567078 138.98928833]
[102.06101227 125.11640930]
[96.35634613 111.24353027]
[92.19051361 125.65345001]
[81.47241211 136.14736938]
[66.97766876 140.00772095]
[52.45991516 136.23480225]
[41.67876434 125.80566406]
[37.42615891 111.42111206]
[40.80337906 96.80624390]
[50.93584442 85.74581146]
[65.19958496 81.10408783]
[79.90078735 84.08312225]
[91.23178864 93.91062927]
[88.47554016 79.16603088]
[85.71929932 64.42143250]
[82.67450714 61.13070679]
[81.03930664 57.40918732]
[80.77272797 53.76560974]
[81.66879272 50.64049911]
[83.39430237 48.35715866]
[81.85700989 33.43614197]
[69.87882996 23.47818184]
[68.53234863 8.32425022]
[78.09956360 -3.03374481]
[76.56227112 -17.95476151]
[73.42342377 -22.27944374]
[72.40302277 -26.91241074]
[73.25549316 -30.97970581]
[75.41886139 -33.83750916]
[74.80303955 -48.82486343]
[74.18721008 -63.81221390]
[73.57138824 -78.79956818]
[58.60048676 -79.99516296]
[43.88285828 -82.98662567]
[29.63313675 -87.73033142]
[16.05911827 -94.15709686]
[3.35875487 -102.17321777]
[-8.28274536 -111.66178131]
[-18.69561577 -122.48442078]
[-27.72800255 -134.48330688]
[-35.24819183 -147.48345947]
[-41.14651489 -161.29531860]
[-45.33695602 -175.71743774]
[-47.75840759 -190.53950500]
[-48.37555695 -205.54539490]
[-47.17940140 -220.51625061]
[-44.18738937 -235.23376465]
[-39.44315338 -249.48330688]
[-33.01587296 -263.05709839]
[-24.99928284 -275.75714111]
[-15.51028347 -287.39828491]
[-4.68725538 -297.81076050]
[7.31197071 -306.84271240]
[20.31241035 -314.36239624]
[34.12447739 -320.26022339]
[48.54675674 -324.45010376]
[63.36892319 -326.87100220]
[78.37482452 -327.48760986]
[93.34564209 -326.29089355]
[108.06304169 -323.29830933]
[122.31240845 -318.55355835]
[135.88595581 -312.12576294]
[148.58570862 -304.10870361]
[160.22650146 -294.61926270]
[170.63856506 -283.79583740]
[179.67005920 -271.79629517]
[187.18927002 -258.79556274]
[193.08656311 -244.98327637]
[197.27592468 -230.56083679]
[199.69625854 -215.73858643]
[200.31228638 -200.73265076]
[199.11502075 -185.76188660]
[196.12190247 -171.04460144]
[191.37660217 -156.79541016]
[184.94830322 -143.22210693]
[176.93077087 -130.52264404]
[167.44090271 -118.88220978]
[156.61709595 -108.47055054]
[144.61718750 -99.43950653]
[131.61619568 -91.92077637]
[117.80368042 -86.02400208]
[103.38108826 -81.83518219]
[88.55873871 -79.41539764]
[89.17456818 -64.42803955]
[89.79039001 -49.44068909]
[90.40621948 -34.45333481]
[91.48329163 -19.49205399]
[93.02057648 -4.57103729]
[104.70262909 4.59767437]
[106.47422028 19.70780754]
[96.77802277 31.89885139]
[98.31531525 46.81986618]
[100.46389771 61.66519165]
[103.22013855 76.40979004]
[105.97637939 91.15438080]
[110.22922516 105.53886414]
[115.93389130 119.41174316]
[121.63855743 133.28462219]
[127.34321594 147.15750122]
[139.74748230 156.97813416]
[137.43190002 171.69165039]
[143.13655090 185.56452942]
[148.84121704 199.43740845]
[154.54588318 213.31028748]
[160.25054932 227.18316650]
[162.58497620 212.36593628]
[169.10910034 198.85905457]
[179.26414490 187.81935120]
[192.18037415 180.19233704]
[206.75152588 176.63125610]
[221.72964478 177.44110107]
[235.83190918 182.55250549]
[247.85047913 191.52767944]
[256.75601196 203.59796143]
[261.78576660 217.72953796]
[262.50897217 232.71208191]
[258.86370850 247.26240540]
[251.16212463 260.13430786]
[240.06388855 270.22534180]
[226.51950073 276.67126465]
[211.68901062 278.91995239]
[196.84260559 276.77886963]
[183.25184631 270.43136597]
[172.08070374 260.42108154]
[164.28514099 247.60334778]
[164.28514099 262.60336304]
[164.28514099 277.60336304]
[164.28514099 292.60336304]
[164.28514099 307.60336304]
[164.28514099 322.60336304]
[164.28514099 337.60336304]
[164.28514099 352.60336304]
[164.28514099 367.60336304]
[164.28514099 382.60336304]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 152]
[2 151]
[3 150]
[4 149]
[5 148]
[6 147]
[7 146]
[8 145]
[9 144]
[10 143]
[11 123]
[12 122]
[13 121]
[14 120]
[15 119]
[17 117]
[18 116]
[19 115]
[20 114]
[31 113]
[32 112]
[33 111]
[38 110]
[39 109]
[42 106]
[43 105]
[47 104]
[48 103]
[49 102]
[50 101]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
