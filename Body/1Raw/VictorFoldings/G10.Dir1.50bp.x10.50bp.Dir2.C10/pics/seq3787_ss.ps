%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:10 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGUCUCAUAUGAAGUCACCCUAGCCAUCAUUCUACUAUCAACAUUACUAAUAAGUGGCUCCUxxxxxxxxxxUGAGUCCCAGAGGUUACCCAAGGCACCCCUCUGACAUCCGGCCUGCUUCUUCUCACAUGACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[103.80253601 481.83139038]
[103.80253601 466.83139038]
[103.80253601 451.83139038]
[103.80253601 436.83139038]
[103.80253601 421.83139038]
[103.80253601 406.83139038]
[103.80253601 391.83139038]
[103.80253601 376.83139038]
[103.80253601 361.83139038]
[103.80253601 346.83139038]
[87.70442963 342.00546265]
[73.84457397 332.46908569]
[63.56239319 319.13067627]
[57.85560226 303.26657104]
[57.28343582 286.39910889]
[61.91183090 270.15048218]
[71.30606842 256.08670044]
[84.57156372 245.56665039]
[100.43903351 239.61085510]
[99.50340271 224.64006042]
[98.56777191 209.66926575]
[97.63214874 194.69848633]
[94.05279541 188.17668152]
[96.83607483 179.40711975]
[96.21209717 164.42010498]
[86.01932526 150.16853333]
[94.60477448 133.91213989]
[93.66914368 118.94135284]
[77.08682251 105.54415131]
[80.55411530 81.01396179]
[67.02992249 74.52580261]
[53.50573349 68.03763580]
[39.98154449 61.54946899]
[26.45735550 55.06130600]
[12.93316555 48.57313919]
[-5.35737658 50.42676544]
[-14.73924446 35.62877655]
[-28.39548492 29.42337036]
[-42.05172729 23.21796227]
[-52.43716812 34.23709869]
[-65.83896637 41.28482819]
[-80.80339050 43.59667206]
[-95.70722198 40.92185974]
[-108.93379211 33.55052948]
[-119.04839325 22.28227234]
[-124.95385742 8.33938122]
[-126.00961304 -6.76572037]
[-122.10113525 -21.39454460]
[-113.65238953 -33.96026993]
[-101.57982635 -43.09985352]
[-87.19299316 -47.82190704]
[-72.05246735 -47.61421585]
[-57.80057526 -42.49930954]
[-45.98325729 -33.03201294]
[-37.88236618 -20.23926735]
[-34.37662888 -5.50873709]
[-35.84632111 9.56172180]
[-22.19007874 15.76712894]
[-8.53383732 21.97253609]
[2.94030261 18.01634598]
[14.39040279 23.12654877]
[19.42133141 35.04895020]
[32.94552231 41.53711319]
[46.46971130 48.02528000]
[59.99390030 54.51344299]
[73.51808929 61.00160980]
[87.04228210 67.48977661]
[78.28427887 55.31203079]
[66.68992615 45.79515076]
[59.72190475 32.51182938]
[58.48235703 17.56313324]
[63.16735077 3.31354141]
[73.03584290 -7.98304272]
[86.52690887 -14.53980541]
[101.50662231 -15.31964302]
[115.60559845 -10.19920731]
[126.59375763 0.01158815]
[132.73307800 13.69766998]
[133.05245972 28.69426918]
[127.50141907 42.62932968]
[116.95798492 53.29867554]
[109.51184845 66.32000732]
[122.28920746 58.46258163]
[134.98414612 50.47266388]
[147.59526062 42.35112381]
[151.00665283 36.56579971]
[156.08113098 33.83066559]
[160.90425110 34.16677094]
[173.84231567 26.57686043]
[186.78036499 18.98695374]
[199.71842957 11.39704514]
[212.65647888 3.80713630]
[225.59454346 -3.78277183]
[223.47129822 -18.83469009]
[227.27462769 -33.55213165]
[236.42457581 -45.69079208]
[249.52580261 -53.39961243]
[264.58050537 -55.50305557]
[279.29293823 -51.68036270]
[291.41955566 -42.51446533]
[299.11111450 -29.40309334]
[301.19476318 -14.34564018]
[297.35272217 0.36174351]
[288.17086792 12.47628880]
[275.04940796 20.15061569]
[259.98922729 22.21444321]
[245.28689575 18.35305595]
[233.18444824 9.15528393]
[220.24638367 16.74519157]
[207.30833435 24.33510017]
[194.37028503 31.92500877]
[181.43222046 39.51491547]
[168.49417114 47.10482407]
[155.71681213 54.96224976]
[143.10568237 63.08379364]
[139.15945435 69.39037323]
[130.14663696 71.23993683]
[117.36927795 79.09736633]
[123.39635468 102.89168549]
[108.63993835 118.00572205]
[109.57556152 132.97651672]
[118.73675537 142.11579895]
[119.17398071 154.64686584]
[111.19911194 163.79612732]
[111.82308960 178.78314209]
[112.60293579 193.76284790]
[113.53856659 208.73364258]
[114.47419739 223.70443726]
[115.40982056 238.67523193]
[128.44366455 241.32254028]
[140.44265747 247.03523254]
[150.69837952 255.47042847]
[158.60668945 266.12463379]
[163.70333862 278.36392212]
[165.69113159 291.46151733]
[164.45739746 304.64099121]
[160.08021545 317.12228394]
[152.82359314 328.16799927]
[143.12150574 337.12670898]
[131.55195618 343.47158813]
[118.80253601 346.83139038]
[118.80253601 361.83139038]
[118.80253601 376.83139038]
[118.80253601 391.83139038]
[118.80253601 406.83139038]
[118.80253601 421.83139038]
[118.80253601 436.83139038]
[118.80253601 451.83139038]
[118.80253601 466.83139038]
[118.80253601 481.83139038]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[19 129]
[20 128]
[21 127]
[22 126]
[24 125]
[25 124]
[27 121]
[28 120]
[30 67]
[31 66]
[32 65]
[33 64]
[34 63]
[35 62]
[37 59]
[38 58]
[39 57]
[82 118]
[83 117]
[84 115]
[85 114]
[88 113]
[89 112]
[90 111]
[91 110]
[92 109]
[93 108]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
