%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:27 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCCCCUUAUUUCUAGGACUAUGAGAAUCGAACCCAUCCCUGAGAAUCCAAAAUUCUCCGUGxxxxxxxxxxAUAGUUUAACCAAAACAUCAGAUUGUGAAUCUGACAACAGAGGCUUACGACCCCUUAUUUCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[122.12979126 576.32946777]
[122.12979126 561.32946777]
[122.12979126 546.32946777]
[122.12979126 531.32946777]
[122.12979126 516.32946777]
[122.12979126 501.32946777]
[122.12979126 486.32946777]
[122.12979126 471.32946777]
[122.12979126 456.32946777]
[122.12979126 441.32946777]
[107.15372467 437.08197021]
[93.96175385 428.79055786]
[83.62074280 417.11621094]
[76.96969604 402.99380493]
[74.55167389 387.55731201]
[76.56947327 372.04882812]
[82.86865997 357.71847534]
[92.94931793 345.72378540]
[106.00574493 337.03607178]
[120.99084473 332.36187744]
[120.67878723 317.36511230]
[120.21074677 302.37243652]
[119.58676910 287.38540649]
[118.96279144 272.39840698]
[118.33881378 257.41137695]
[110.07877350 245.01698303]
[117.23531342 230.90690613]
[116.61133575 215.91989136]
[108.35129547 203.52548218]
[115.50783539 189.41540527]
[114.88385773 174.42839050]
[104.69107819 160.17681885]
[113.27652740 143.92042542]
[61.02797318 95.49355316]
[48.14418030 103.25524902]
[34.05723953 108.51589203]
[19.24742126 111.09767914]
[4.21935606 110.91413116]
[-10.51516533 107.97296906]
[-24.45461655 102.37578583]
[-37.12480927 94.31457520]
[-48.09502411 84.06510925]
[-56.99264908 71.97752380]
[-63.51583862 58.46435165]
[-67.44374847 43.98645401]
[-68.64403534 29.03727913]
[-67.07726288 14.12607384]
[-62.79825974 -0.23948969]
[-55.95415878 -13.57058144]
[-46.77935028 -25.41385460]
[-56.76207733 -36.60961914]
[-66.74480438 -47.80538559]
[-76.72753143 -59.00115204]
[-86.71025848 -70.19691467]
[-96.69298553 -81.39268494]
[-112.56310272 -83.74190521]
[-120.49635315 -97.68618774]
[-114.40701294 -112.52867889]
[-98.96631622 -116.88349152]
[-86.01903534 -107.40997314]
[-85.49721527 -91.37541199]
[-75.51448822 -80.17964172]
[-65.53176117 -68.98387909]
[-55.54903793 -57.78811264]
[-45.56631088 -46.59234619]
[-35.58358383 -35.39657974]
[-22.77019119 -43.15913010]
[-8.74482727 -48.43633652]
[6.01536083 -51.04710770]
[21.00794220 -50.90107727]
[35.72230148 -48.00176239]
[49.65703201 -42.44645691]
[62.33701706 -34.42300415]
[73.32962799 -24.20341873]
[82.25949097 -12.13467026]
[88.82131195 1.37308598]
[92.79029083 15.86045742]
[94.02984619 30.83443832]
[92.49629211 45.78517914]
[88.24041748 60.20335388]
[81.40574646 73.59751129]
[72.22373962 85.51082611]
[79.70913696 85.04300690]
[102.16532135 83.63956451]
[110.67641449 71.28799438]
[119.18750000 58.93642044]
[127.69859314 46.58485031]
[126.21992493 30.61008453]
[137.88693237 19.59825325]
[153.74969482 21.99668884]
[161.63964844 35.96551895]
[155.50430298 50.78905106]
[140.05017090 55.09593964]
[131.53907776 67.44750977]
[123.02798462 79.79908752]
[114.51689148 92.15065765]
[118.96306610 98.19065094]
[132.30158997 116.31063080]
[146.62419128 111.85382080]
[160.94679260 107.39700317]
[175.26937866 102.94018555]
[189.59197998 98.48336792]
[203.91458130 94.02655792]
[218.23718262 89.56974030]
[231.56451416 79.09031677]
[245.32377625 88.99581909]
[239.61431885 104.95948029]
[222.69400024 103.89233398]
[208.37139893 108.34915161]
[194.04879761 112.80596924]
[179.72619629 117.26278687]
[165.40361023 121.71959686]
[151.08100891 126.17641449]
[136.75840759 130.63322449]
[128.24731445 142.98480225]
[137.40850830 152.12408447]
[137.84573364 164.65515137]
[129.87086487 173.80441284]
[130.49484253 188.79142761]
[138.79951477 202.25779724]
[131.59834290 215.29591370]
[132.22232056 230.28292847]
[140.52699280 243.74928284]
[133.32583618 256.78741455]
[133.94981384 271.77441406]
[134.57377625 286.76144409]
[135.19775391 301.74844360]
[138.70037842 310.25631714]
[135.67553711 317.05307007]
[135.98759460 332.04983521]
[150.02508545 335.62899780]
[162.64120483 342.72427368]
[172.97366333 352.84347534]
[180.31813049 365.28793335]
[184.17625427 379.20086670]
[184.28948975 393.62625122]
[180.65637207 407.57449341]
[173.53222656 420.09048462]
[163.41120911 430.31878662]
[150.99205017 437.56222534]
[137.12979126 441.32946777]
[137.12979126 456.32946777]
[137.12979126 471.32946777]
[137.12979126 486.32946777]
[137.12979126 501.32946777]
[137.12979126 516.32946777]
[137.12979126 531.32946777]
[137.12979126 546.32946777]
[137.12979126 561.32946777]
[137.12979126 576.32946777]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[20 130]
[21 129]
[22 127]
[23 126]
[24 125]
[25 124]
[27 122]
[28 121]
[30 119]
[31 118]
[33 115]
[34 82]
[50 66]
[51 65]
[52 64]
[53 63]
[54 62]
[55 61]
[84 96]
[85 95]
[86 94]
[87 93]
[98 114]
[99 113]
[100 112]
[101 111]
[102 110]
[103 109]
[104 108]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
