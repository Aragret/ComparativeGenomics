%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:03 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGACCUCGGAGCAGAACCCAACCUCCGAGCAGUACAUGCUAAGACUUCACCAGUCAAAGCGAACxxxxxxxxxxCCGGCAGGUUUGAAGCUGCUUCUUCGAAUUUGCAAUUCAAUAUGAAAAUCACCUCGGAGCUGCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[73.08808136 297.72470093]
[73.08808136 282.72470093]
[73.08808136 267.72470093]
[73.08808136 252.72470093]
[73.08808136 237.72470093]
[73.08808136 222.72470093]
[73.08808136 207.72470093]
[73.08808136 192.72470093]
[73.08808136 177.72470093]
[73.08808136 162.72470093]
[60.12310410 155.18086243]
[47.08235168 162.59292603]
[34.19449615 170.26776123]
[21.46483040 178.20222473]
[8.73516655 186.13668823]
[-3.99449730 194.07115173]
[-16.72416115 202.00559998]
[-29.45382500 209.94006348]
[-42.18348694 217.87452698]
[-40.98744202 233.13322449]
[-47.03012466 247.19540405]
[-58.92297363 256.82965088]
[-73.93309784 259.82208252]
[-88.61128235 255.48510742]
[-99.58458710 244.81527710]
[-104.33142090 230.26446533]
[-101.76100922 215.17634583]
[-92.46400452 203.01803589]
[-78.57678986 196.58345032]
[-63.29055023 197.35119629]
[-50.11795044 205.14486694]
[-37.38828659 197.21040344]
[-24.65862083 189.27593994]
[-11.92895699 181.34147644]
[0.80070651 173.40702820]
[13.53037071 165.47256470]
[26.26003456 157.53810120]
[28.20111847 153.11590576]
[32.97232819 149.89392090]
[39.67028427 149.55216980]
[52.71104050 142.14010620]
[65.17153168 135.25987244]
[76.86948395 136.25131226]
[81.06894684 121.85115814]
[85.26840973 107.45100403]
[81.21509552 93.00902557]
[70.13598633 82.89698792]
[59.05687714 72.78494263]
[43.48945999 73.32649994]
[32.39772034 62.91362762]
[31.97736931 48.06913376]
[20.89826012 37.95709610]
[9.81915283 27.84505272]
[-1.25995445 17.73301315]
[-17.28738022 17.02506256]
[-26.60993195 3.96866322]
[-22.07614517 -11.42043495]
[-7.16395521 -17.33703232]
[6.68728399 -9.24242115]
[8.85208702 6.65390491]
[19.93119431 16.76594543]
[31.01030159 26.87798691]
[42.08940887 36.99002838]
[56.91048431 36.05657959]
[68.29032135 46.15380096]
[69.16892242 61.70583725]
[80.24802399 71.81787872]
[91.32713318 81.92991638]
[105.92150879 78.46520233]
[111.27336884 64.45243835]
[116.62522888 50.43967056]
[104.44123077 59.18896866]
[89.86057281 62.71097565]
[75.02619934 60.48806000]
[62.11833191 52.84692764]
[53.03404999 40.91060257]
[49.10848618 26.43338013]
[50.91858292 11.54299545]
[58.19830704 -1.57209551]
[69.87774658 -10.98435307]
[84.24037170 -15.31044769]
[99.17527771 -13.91456795]
[112.48748016 -7.00186777]
[122.22045135 4.41168547]
[126.94374084 18.64862823]
[125.96344757 33.61541748]
[135.02436829 21.66134644]
[144.08526611 9.70727253]
[153.14617920 -2.24680042]
[155.31617737 -17.91848564]
[169.17037964 -23.38753510]
[170.67675781 -39.71735001]
[185.68315125 -46.33098602]
[198.75225830 -36.42490387]
[196.43971252 -20.18962860]
[181.12445068 -14.32662201]
[179.60255432 0.49002752]
[165.10026550 6.81411219]
[156.03935242 18.76818466]
[146.97843933 30.72225761]
[137.91752625 42.67633057]
[130.63798523 55.79153061]
[125.28613281 69.80429840]
[119.93427277 83.81706238]
[129.11585999 95.67869568]
[144.02276611 94.01002502]
[152.25967407 89.92414856]
[159.24826050 92.46173859]
[174.18591309 91.09552002]
[189.12356567 89.72930908]
[204.06121826 88.36309052]
[218.99887085 86.99687195]
[234.22145081 79.53302002]
[245.60765076 92.09450531]
[236.68908691 106.51308441]
[220.36508179 101.93452454]
[205.42742920 103.30074310]
[190.48977661 104.66696167]
[175.55212402 106.03317261]
[160.61447144 107.39939117]
[145.69143677 108.91691589]
[130.78454590 110.58559418]
[112.58271790 118.17364502]
[99.66856384 111.65046692]
[95.46910095 126.05062103]
[91.26964569 140.45077515]
[98.80091858 127.47850037]
[109.89406586 117.38186646]
[123.51589203 111.10127258]
[138.39765930 109.22167206]
[153.15330505 111.91814423]
[166.40849304 118.93953705]
[176.92864990 129.63188171]
[183.73394775 142.99929810]
[186.19053650 157.79676819]
[184.06961060 172.64607239]
[177.56871033 186.16415405]
[167.29333496 197.09193420]
[154.20050049 204.41163635]
[139.50968933 207.44149780]
[124.58917999 205.89932251]
[110.82865143 199.92874146]
[99.50975037 190.08584595]
[91.68669891 177.28741455]
[88.08808136 162.72470093]
[88.08808136 177.72470093]
[88.08808136 192.72470093]
[88.08808136 207.72470093]
[88.08808136 222.72470093]
[88.08808136 237.72470093]
[88.08808136 252.72470093]
[88.08808136 267.72470093]
[88.08808136 282.72470093]
[88.08808136 297.72470093]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 154]
[2 153]
[3 152]
[4 151]
[5 150]
[6 149]
[7 148]
[8 147]
[9 146]
[10 145]
[11 41]
[12 40]
[13 37]
[14 36]
[15 35]
[16 34]
[17 33]
[18 32]
[19 31]
[43 126]
[44 125]
[45 124]
[46 68]
[47 67]
[48 66]
[51 63]
[52 62]
[53 61]
[54 60]
[69 104]
[70 103]
[71 102]
[86 101]
[87 100]
[88 99]
[89 98]
[91 96]
[105 122]
[106 121]
[108 120]
[109 119]
[110 118]
[111 117]
[112 116]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
