%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:33 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGUAAACGAAAGUUUAACUAAGCUAUACUAACCCCAGGGUUGGUCAAUUUCGUGCCAGCCACxxxxxxxxxxAUGACAAAAACUAGCCCCCAUCUCAAUCAUAUACCAAAUCUCUCCCUCACUAAACGUAAGCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[82.73391724 301.36953735]
[82.73391724 286.36953735]
[82.73391724 271.36953735]
[82.73391724 256.36953735]
[82.73391724 241.36953735]
[82.73391724 226.36953735]
[82.73391724 211.36953735]
[82.73391724 196.36953735]
[82.73391724 181.36953735]
[82.73391724 166.36953735]
[68.71720123 161.02803040]
[58.73447800 172.22380066]
[48.75175095 183.41955566]
[38.76902390 194.61532593]
[28.78629684 205.81109619]
[25.98624802 221.96942139]
[10.50149918 227.36892700]
[-1.73856890 216.45504761]
[1.85757780 200.45504761]
[17.59053230 195.82836914]
[27.57325745 184.63259888]
[37.55598450 173.43682861]
[47.53871155 162.24107361]
[57.52143860 151.04530334]
[52.60462570 145.48716736]
[48.39130020 139.47563171]
[44.92056656 133.09751892]
[42.22103119 126.44264984]
[40.31062698 119.60257721]
[25.60266495 122.54806519]
[15.54619312 135.04794312]
[-0.49544618 134.83493042]
[-10.21647930 122.07244873]
[-6.15976095 106.55076599]
[8.56274128 100.17679596]
[22.65718269 107.84010315]
[37.36514282 104.89462280]
[38.42530823 87.52444458]
[44.20989609 71.11147308]
[54.27508545 56.91503143]
[67.84859467 46.02436066]
[83.88898468 39.27506638]
[101.16551971 37.18500137]
[118.35262299 39.91453171]
[124.41563416 26.19447708]
[130.47865295 12.47442341]
[136.54165649 -1.24562991]
[141.73707581 -15.31714916]
[146.04466248 -29.68533325]
[150.35224915 -44.05351639]
[154.65983582 -58.42170334]
[158.96742249 -72.78988647]
[145.09646606 -78.53337097]
[131.87774658 -85.65070343]
[119.44690704 -94.06885529]
[107.93151093 -103.70143890]
[97.44972229 -114.44960785]
[88.10910797 -126.20307159]
[80.00550842 -138.84121704]
[73.22209167 -152.23435974]
[67.82845306 -166.24505615]
[63.87994766 -180.72953796]
[61.41709518 -195.53918457]
[60.46516800 -210.52200317]
[61.03393173 -225.52424622]
[63.11754990 -240.39198303]
[66.69464111 -254.97264099]
[71.72850037 -269.11657715]
[78.16747284 -282.67868042]
[85.94548035 -295.51977539]
[94.98271179 -307.50808716]
[105.18642426 -318.52059937]
[116.45191956 -328.44427490]
[128.66358948 -337.17733765]
[141.69612122 -344.63012695]
[155.41578674 -350.72616577]
[169.68179321 -355.40292358]
[184.34774780 -358.61239624]
[199.26316833 -360.32165527]
[214.27496338 -360.51315308]
[229.22912598 -359.18493652]
[243.97218323 -356.35061646]
[258.35284424 -352.03927612]
[272.22354126 -346.29519653]
[285.44195557 -339.17727661]
[297.87243652 -330.75857544]
[309.38739014 -321.12548828]
[319.86871338 -310.37686157]
[329.20880127 -298.62298584]
[337.31185913 -285.98446655]
[344.09466553 -272.59103394]
[349.48770142 -258.58010864]
[353.43557739 -244.09544373]
[355.89776611 -229.28569031]
[356.84902954 -214.30284119]
[356.27960205 -199.30061340]
[354.19534302 -184.43296814]
[350.61761475 -169.85247803]
[345.58312988 -155.70874023]
[339.14355469 -142.14692688]
[331.36499023 -129.30618286]
[322.32720947 -117.31826782]
[312.12301636 -106.30622101]
[300.85708618 -96.38302612]
[288.64505005 -87.65051270]
[275.61218262 -80.19829559]
[261.89224243 -74.10285187]
[247.62602234 -69.42671967]
[232.95993042 -66.21788788]
[218.04444885 -64.50929260]
[203.03262329 -64.31845093]
[188.07853699 -65.64733124]
[173.33560181 -68.48229980]
[169.02801514 -54.11411667]
[164.72042847 -39.74593353]
[160.41284180 -25.37774849]
[156.10527039 -11.00956440]
[169.96031189 -16.75740814]
[183.89407349 -11.20310974]
[189.99560547 2.49985790]
[184.80073547 16.57157898]
[171.25886536 23.02277756]
[157.05845642 18.19075775]
[150.26171875 4.81738329]
[144.19869995 18.53743744]
[138.13569641 32.25749207]
[132.07267761 45.97754288]
[141.80035400 52.75563049]
[150.11795044 61.27222824]
[156.71739197 71.23773956]
[161.34942627 82.30851746]
[163.83303833 94.09867859]
[164.06242371 106.19358826]
[162.01139832 118.16439819]
[157.73492432 129.58329773]
[151.36784363 140.03877258]
[143.12066650 149.15042114]
[133.27261353 156.58282471]
[122.16226959 162.05783081]
[110.17587280 165.36499023]
[97.73391724 166.36953735]
[97.73391724 181.36953735]
[97.73391724 196.36953735]
[97.73391724 211.36953735]
[97.73391724 226.36953735]
[97.73391724 241.36953735]
[97.73391724 256.36953735]
[97.73391724 271.36953735]
[97.73391724 286.36953735]
[97.73391724 301.36953735]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[11 24]
[12 23]
[13 22]
[14 21]
[15 20]
[29 37]
[30 36]
[44 127]
[45 126]
[46 125]
[47 124]
[48 117]
[49 116]
[50 115]
[51 114]
[52 113]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
