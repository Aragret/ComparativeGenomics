%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:42 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGACCCUAACACCAGCCUAACCAGAUUUCAAAUUUUAUCUUUUGGCGGUAUGCACUUUUAACxxxxxxxxxxAUAGUAGAAGAACCCUCCAUAAACCUGGAGUGACUAUAUGGAUGCCCCCCACCCUACCACCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[92.50000000 253.41011047]
[92.50000000 238.41011047]
[92.50000000 223.41011047]
[92.50000000 208.41011047]
[92.50000000 193.41011047]
[92.50000000 178.41011047]
[92.50000000 163.41011047]
[92.50000000 148.41011047]
[92.50000000 133.41011047]
[92.50000000 118.41011047]
[85.30861664 131.57385254]
[80.55490875 145.80067444]
[67.91574097 153.87849426]
[53.00798416 152.21754456]
[42.45667648 141.55593872]
[40.95084381 126.63171387]
[49.15967941 114.07723236]
[63.43523026 109.47173309]
[76.67306519 102.41767120]
[61.67387772 102.26163483]
[46.67468643 102.10559845]
[37.99624252 105.16115570]
[31.36592865 101.78705597]
[16.37323189 101.31900787]
[1.38053632 100.85096741]
[-12.65434170 108.15390015]
[-25.13399124 100.02323914]
[-40.12668610 99.55519867]
[-46.21837997 102.38340759]
[-51.94882965 101.75633240]
[-55.72967148 98.74290466]
[-70.68991852 97.65158844]
[-85.65016937 96.56027985]
[-100.61041260 95.46897125]
[-109.17072296 108.22109985]
[-122.96729279 114.97019196]
[-138.28890991 113.90079498]
[-151.01414490 105.30056000]
[-157.71995544 91.48290253]
[-156.60253906 76.16471100]
[-147.96244812 63.46650314]
[-134.12385559 56.80402756]
[-118.80923462 57.96945953]
[-106.13816833 66.64929962]
[-99.51910400 80.50872040]
[-84.55885315 81.60003662]
[-69.59860992 82.69134521]
[-54.63835907 83.78265381]
[-39.65864563 84.56250000]
[-24.66594887 85.03054047]
[-11.70344830 77.69413757]
[1.84857845 85.85826874]
[16.84127426 86.32631683]
[31.83397102 86.79435730]
[46.83072281 87.10641479]
[61.82991409 87.26245117]
[76.82910156 87.41848755]
[87.35916138 82.08714294]
[97.28892517 82.72988129]
[103.89210510 87.55518341]
[113.63975525 76.15415955]
[123.38740540 64.75314331]
[107.58084869 31.92440224]
[108.20482635 16.93738747]
[108.82880402 1.95037079]
[109.45278168 -13.03664494]
[110.07675934 -28.02366066]
[110.70073700 -43.01067734]
[96.67509460 -48.76022339]
[85.46385193 -58.96237564]
[78.42082977 -72.38517761]
[76.39648438 -87.40775299]
[79.63528442 -102.21605682]
[87.74612427 -115.02191925]
[99.74958038 -124.27896881]
[114.19617462 -128.86936951]
[129.34141541 -128.23880005]
[143.35643005 -122.46341705]
[154.54884338 -112.24062347]
[161.56712341 -98.80486298]
[163.56378174 -83.77857971]
[160.29769897 -68.97627258]
[152.16326904 -56.18537521]
[140.14277649 -46.95046616]
[125.68775177 -42.38669968]
[125.06377411 -27.39968491]
[124.43979645 -12.41266823]
[123.81581879 2.57434821]
[123.19184113 17.56136513]
[122.56786346 32.54838181]
[128.21736145 37.48124313]
[134.10881042 23.68664742]
[149.04879761 25.02717018]
[152.39041138 39.65021896]
[139.51637268 47.34696579]
[145.16587830 52.27982712]
[159.93193054 49.64096069]
[174.69798279 47.00209808]
[189.46403503 44.36323547]
[204.23008728 41.72436905]
[218.99615479 39.08550644]
[221.87484741 24.18323898]
[229.94580078 11.32927799]
[242.11744690 2.26201224]
[256.74368286 -1.79228401]
[271.84646606 -0.28530052]
[285.38320923 6.57915545]
[295.52322388 17.87272263]
[300.89514160 32.06803894]
[300.77243042 47.24530411]
[295.17172241 61.35191727]
[284.85046387 72.48007965]
[271.20449829 79.12478638]
[256.07934570 80.38741302]
[241.52056885 76.09718323]
[229.49708557 66.83432770]
[221.63500977 53.85155869]
[206.86895752 56.49042511]
[192.10290527 59.12928772]
[177.33685303 61.76815414]
[162.57078552 64.40702057]
[147.80473328 67.04588318]
[134.78842163 74.50079346]
[125.04077911 85.90180969]
[115.29312134 97.30283356]
[126.09610748 86.89631653]
[139.86557007 80.94638824]
[154.84753418 80.21095276]
[169.13354492 84.78370667]
[180.90379333 94.08215332]
[188.65898132 106.92182922]
[191.41119385 121.66717529]
[188.80987549 136.43989563]
[181.18637085 149.35818481]
[169.51179504 158.77647400]
[155.27328491 163.49505615]
[140.28459167 162.91282654]
[126.45500946 157.10398865]
[115.54619598 146.80847168]
[108.94775391 133.33773804]
[107.50000000 118.41011047]
[107.50000000 133.41011047]
[107.50000000 148.41011047]
[107.50000000 163.41011047]
[107.50000000 178.41011047]
[107.50000000 193.41011047]
[107.50000000 208.41011047]
[107.50000000 223.41011047]
[107.50000000 238.41011047]
[107.50000000 253.41011047]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[19 57]
[20 56]
[21 55]
[23 54]
[24 53]
[25 52]
[27 50]
[28 49]
[31 48]
[32 47]
[33 46]
[34 45]
[60 125]
[61 124]
[62 123]
[63 90]
[64 89]
[65 88]
[66 87]
[67 86]
[68 85]
[96 122]
[97 121]
[98 120]
[99 119]
[100 118]
[101 117]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
