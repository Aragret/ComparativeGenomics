%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:32 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGUGAUAUCAAUUGGCUUCCUAGGGUUUAUCGUGUGAGCACACCAUAUAUUUACAGUAGGAAxxxxxxxxxxCCCCAUGGAUGACCCCCCUCAGAUAGGGGUCCCUUGACCACCAUCCUCCGUGAAAUCAAUCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[92.50000000 391.35272217]
[92.50000000 376.35272217]
[92.50000000 361.35272217]
[92.50000000 346.35272217]
[92.50000000 331.35272217]
[92.50000000 316.35272217]
[92.50000000 301.35272217]
[92.50000000 286.35272217]
[92.50000000 271.35272217]
[92.50000000 256.35272217]
[77.95760345 252.80206299]
[64.67964935 245.86981201]
[53.43997574 235.95510864]
[44.89479446 223.63099670]
[39.54439163 209.61138916]
[37.70384216 194.70968628]
[39.48443985 179.79158020]
[44.78699112 165.72471619]
[53.30733109 153.32835388]
[64.55376434 143.32550049]
[77.87543488 136.30087280]
[92.50000000 132.66664124]
[92.50000000 117.66664124]
[77.97361755 102.65761566]
[84.93013000 79.82802582]
[71.14775085 73.90805817]
[57.36536789 67.98809814]
[43.58298492 62.06813431]
[29.80060577 56.14817047]
[16.01822472 50.22820663]
[1.48913562 55.84455490]
[-12.40382671 49.64453506]
[-17.66861725 35.75865936]
[-31.45099831 29.83869362]
[-45.41138840 24.35166359]
[-59.58794785 19.45011139]
[-73.81472778 14.69629765]
[-88.04150391 9.94248199]
[-103.58242035 12.90737534]
[-113.20150757 1.53537846]
[-127.42829132 -3.21843624]
[-141.65507507 -7.97225142]
[-155.88185120 -12.72606564]
[-171.83361816 -8.92170620]
[-182.90608215 -21.01849937]
[-177.70884705 -36.57230377]
[-161.58837891 -39.58269501]
[-151.12803650 -26.95284462]
[-136.90126038 -22.19902992]
[-122.67447662 -17.44521523]
[-108.44769287 -12.69140053]
[-93.92437744 -15.99631882]
[-83.28768921 -4.28429651]
[-69.06091309 0.46951810]
[-54.83413315 5.22333288]
[-47.44556808 4.35456228]
[-40.36263275 10.22686005]
[-36.98822784 9.00994110]
[-32.84772873 9.40735912]
[-28.72530556 11.76490021]
[-25.53103638 16.05631256]
[-11.74865437 21.97627640]
[1.94685221 16.23443794]
[16.00847816 22.04178810]
[21.93818665 36.44582748]
[35.72056961 42.36578751]
[49.50294876 48.28575134]
[63.28533173 54.20571518]
[77.06771088 60.12567902]
[90.85009766 66.04563904]
[77.60319519 59.00861740]
[67.45539856 47.96225357]
[61.56486130 34.16727066]
[60.60387421 19.19808578]
[64.68212128 4.76313066]
[73.33413696 -7.49013472]
[85.57248688 -16.16324806]
[100.00039673 -20.26634598]
[114.97121429 -19.33114243]
[128.77632141 -13.46437454]
[139.84014893 -3.33561373]
[146.89997864 9.89914513]
[149.15007019 24.72942162]
[146.33361816 39.46263504]
[138.77207947 52.41729355]
[127.32843781 62.11487198]
[113.30628204 67.44908142]
[127.71849823 63.29119492]
[142.13070679 59.13330841]
[156.54292297 54.97542191]
[170.95513916 50.81753540]
[184.79837036 45.04126358]
[197.89152527 37.72215652]
[210.98466492 30.40305138]
[224.07781982 23.08394432]
[237.17097473 15.76483917]
[238.01605225 0.36063871]
[247.07360840 -12.12791920]
[261.45343018 -17.71578026]
[276.56698608 -14.61987782]
[287.59155273 -3.82810378]
[291.00924683 11.21592617]
[285.72952271 25.71171570]
[273.43707275 35.03371429]
[258.05441284 36.20730209]
[244.49008179 28.85799408]
[231.39692688 36.17710114]
[218.30377197 43.49620438]
[205.21061707 50.81531143]
[192.11746216 58.13441467]
[206.98077393 60.15487289]
[219.27667236 68.74620056]
[226.28541565 82.00807953]
[226.45675659 97.00709534]
[219.75277710 110.42562103]
[207.65634155 119.29558563]
[192.84307861 121.65504456]
[178.58953857 116.98210144]
[168.04846191 106.31037140]
[163.55145264 92.00034332]
[166.09320068 77.21726227]
[175.11303711 65.22975159]
[160.70082092 69.38763428]
[146.28860474 73.54552460]
[131.87638855 77.70341492]
[117.46417236 81.86129761]
[121.81771851 104.02634430]
[107.50000000 117.66664124]
[107.50000000 132.66664124]
[122.12456512 136.30087280]
[135.44624329 143.32550049]
[146.69267273 153.32835388]
[155.21301270 165.72471619]
[160.51556396 179.79158020]
[162.29615784 194.70968628]
[160.45561218 209.61138916]
[155.10520935 223.63099670]
[146.56002808 235.95510864]
[135.32034302 245.86981201]
[122.04239655 252.80206299]
[107.50000000 256.35272217]
[107.50000000 271.35272217]
[107.50000000 286.35272217]
[107.50000000 301.35272217]
[107.50000000 316.35272217]
[107.50000000 331.35272217]
[107.50000000 346.35272217]
[107.50000000 361.35272217]
[107.50000000 376.35272217]
[107.50000000 391.35272217]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[22 129]
[23 128]
[25 70]
[26 69]
[27 68]
[28 67]
[29 66]
[30 65]
[33 62]
[34 61]
[35 57]
[36 55]
[37 54]
[38 53]
[40 51]
[41 50]
[42 49]
[43 48]
[87 126]
[88 125]
[89 124]
[90 123]
[91 122]
[92 110]
[93 109]
[94 108]
[95 107]
[96 106]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
