%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:03 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCAUUCUCCUCCGCAUAAGCCUGCGUCAGAUUAAAACACUGAACUGACAAUUAACAGCCCAAxxxxxxxxxxUCGCUCAUUGCAUACUCUUCAAUCAGCCACAUAGCCCUCGUAGUAACAGCCAUUCUCAUCCCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[92.50000000 254.55699158]
[92.50000000 239.55699158]
[92.50000000 224.55699158]
[92.50000000 209.55699158]
[92.50000000 194.55699158]
[92.50000000 179.55699158]
[92.50000000 164.55699158]
[92.50000000 149.55699158]
[92.50000000 134.55699158]
[92.50000000 119.55699158]
[86.16424561 115.54348755]
[78.97286224 128.70722961]
[71.78147888 141.87097168]
[69.69898987 156.72570801]
[56.08600998 163.02543640]
[43.41446686 154.99848938]
[43.29377365 139.99897766]
[55.83460999 131.76914978]
[64.66366577 119.64281464]
[73.49272919 107.51649475]
[67.15696716 103.50299072]
[53.59506989 109.91197205]
[40.03317642 116.32094574]
[26.47127914 122.72991943]
[21.37882614 137.69128418]
[7.16194201 144.59460449]
[-7.74474716 139.34425354]
[-14.49736691 125.05517578]
[-9.08970833 110.20483398]
[5.26996040 103.60366058]
[20.06230354 109.16802216]
[33.62419891 102.75904846]
[47.18609619 96.35007477]
[60.74799347 89.94110107]
[58.90466690 75.05478668]
[44.18914413 72.14731598]
[29.47362328 69.23984528]
[14.75810051 66.33237457]
[4.13433790 77.51893616]
[-10.85626793 81.16383362]
[-25.43026924 76.10398865]
[-34.93715668 63.95398331]
[-36.34331512 48.59083939]
[-29.20004463 34.91687775]
[-15.78673840 27.29541016]
[-0.38353276 28.15842056]
[12.09446526 37.23052597]
[17.66557312 51.61685181]
[32.38109589 54.52432251]
[47.09661865 57.43179703]
[61.81214142 60.33926773]
[90.71654510 68.43139648]
[102.07798004 89.44918823]
[110.74459076 77.20623016]
[119.41119385 64.96327972]
[116.60205841 46.69860458]
[128.27909851 33.07609558]
[126.74179840 18.15507698]
[125.20450592 3.23406076]
[123.66721344 -11.68695545]
[115.53226471 -16.66806602]
[110.70500183 -24.73460007]
[110.17600250 -33.98189545]
[113.93804169 -42.29444122]
[121.01675415 -47.82983017]
[120.40093231 -62.81718063]
[119.78510284 -77.80453491]
[105.33255768 -82.37615967]
[93.31709290 -91.61760712]
[85.18962860 -104.41292572]
[81.93159485 -119.21701050]
[83.93641663 -134.24220276]
[90.96200562 -147.67414856]
[102.15998840 -157.89085388]
[116.17814636 -163.65861511]
[131.32371521 -164.28094482]
[145.76782227 -159.68267822]
[157.76623535 -150.41911316]
[165.87010193 -137.60884094]
[169.10084534 -122.79876709]
[167.06834412 -107.77729797]
[160.01800537 -94.35832977]
[148.80122375 -84.16227722]
[134.77246094 -78.42036438]
[135.38829041 -63.43300629]
[136.00410461 -48.44565582]
[148.59010315 -32.13050461]
[138.58822632 -13.22424793]
[140.12551880 1.69676840]
[141.66281128 16.61778450]
[143.20010376 31.53880119]
[148.12339783 33.53409958]
[152.39530945 36.69175339]
[155.74708557 40.81311035]
[170.46260071 37.90563583]
[185.17813110 34.99816513]
[199.89364624 32.09069061]
[200.45326233 17.03135681]
[204.47129822 2.50716615]
[211.73106384 -10.69861031]
[221.84104919 -21.87380219]
[234.25604248 -30.41574287]
[248.30650330 -35.86378098]
[263.23471069 -37.92410660]
[278.23562622 -36.48560715]
[292.50027466 -31.62586594]
[305.25933838 -23.60695648]
[315.82476807 -12.86133194]
[323.62677002 0.03151165]
[328.24459839 14.37627792]
[329.42922974 29.39937210]
[327.11676025 44.29061890]
[321.43191528 58.24695206]
[312.68127441 70.51572418]
[301.33670044 80.43528748]
[288.01007080 87.47071075]
[273.41998291 91.24256134]
[258.35336304 91.54744720]
[243.62265015 88.36891174]
[230.02229309 81.87837982]
[218.28573608 72.42586517]
[209.04591370 60.52114487]
[202.80111694 46.80621338]
[188.08560181 49.71368790]
[173.37007141 52.62115860]
[158.65455627 55.52863312]
[149.43798828 70.45244598]
[131.65414429 73.62988281]
[122.98754120 85.87284088]
[114.32093811 98.11579132]
[125.61394501 88.24320984]
[140.00668335 84.01840210]
[154.84413147 86.22072601]
[167.38922119 94.44391632]
[175.32775879 107.17103577]
[177.19531250 122.05432129]
[172.64739990 136.34825134]
[162.52296448 147.41603088]
[148.68965149 153.21597290]
[133.69929504 152.67819214]
[120.31716156 145.90185547]
[111.01186371 134.13702393]
[107.50000000 119.55699158]
[107.50000000 134.55699158]
[107.50000000 149.55699158]
[107.50000000 164.55699158]
[107.50000000 179.55699158]
[107.50000000 194.55699158]
[107.50000000 209.55699158]
[107.50000000 224.55699158]
[107.50000000 239.55699158]
[107.50000000 254.55699158]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 152]
[2 151]
[3 150]
[4 149]
[5 148]
[6 147]
[7 146]
[8 145]
[9 144]
[10 143]
[21 34]
[22 33]
[23 32]
[24 31]
[35 51]
[36 50]
[37 49]
[38 48]
[53 130]
[54 129]
[55 128]
[57 91]
[58 90]
[59 89]
[60 88]
[65 86]
[66 85]
[67 84]
[94 126]
[95 125]
[96 124]
[97 123]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
