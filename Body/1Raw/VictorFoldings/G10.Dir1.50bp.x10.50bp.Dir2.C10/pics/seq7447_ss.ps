%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:15 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCUAAAUCCUAUAUAUCUUAAUGGCACAUGCAGCGCAAGUAGGUCUACAAGACGCUACUUCxxxxxxxxxxUAAGUUAAAGAUUAAGAGAACCAACACCUCUUUACAGUGAAAUGCCCCAACUAAAUACUACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[88.43743896 432.46475220]
[88.43743896 417.46475220]
[88.43743896 402.46475220]
[88.43743896 387.46475220]
[88.43743896 372.46475220]
[88.43743896 357.46475220]
[88.43743896 342.46475220]
[88.43743896 327.46475220]
[88.43743896 312.46475220]
[88.43743896 297.46475220]
[79.62643433 294.65255737]
[71.71297455 289.86514282]
[60.41396713 299.73086548]
[49.11496353 309.59658813]
[53.22078323 324.29708862]
[50.53323746 339.32171631]
[41.58593369 351.68734741]
[28.15537262 358.93875122]
[12.90819550 359.63613892]
[-1.12825608 353.64108276]
[-11.16703510 342.14389038]
[-15.21493530 327.42730713]
[-12.46824265 312.41336060]
[-3.47231483 300.08306885]
[9.98670006 292.88464355]
[25.23650360 292.24728394]
[39.24923706 298.29757690]
[50.54824448 288.43185425]
[61.84724808 278.56613159]
[56.77157211 252.49432373]
[69.41065979 228.95312500]
[94.23869324 218.65815735]
[96.41552734 203.81694031]
[98.59236145 188.97573853]
[100.76920319 174.13453674]
[102.48188782 159.23263550]
[103.72876740 144.28454590]
[104.82007599 129.32429504]
[105.75570679 114.35350800]
[87.69362640 118.99525452]
[70.22136688 101.18237305]
[58.14137650 92.29002380]
[46.06138992 83.39767456]
[33.98139954 74.50532532]
[21.80956459 65.73911285]
[6.43371153 68.23329163]
[-5.87900591 59.29731750]
[-8.16206741 44.62342072]
[-20.42443466 35.98430634]
[-32.68680191 27.34519005]
[-49.05917358 26.40840149]
[-56.19139481 11.64142990]
[-46.74645233 -1.76472926]
[-30.44049072 -0.01896901]
[-24.04768753 15.08282185]
[-11.78531933 23.72193718]
[0.47704911 32.36105347]
[15.06321621 29.57191086]
[27.62206841 38.15851974]
[30.44867897 53.47674561]
[37.77551651 54.76636124]
[42.87374878 62.42533493]
[54.95373917 71.31768036]
[67.03372955 80.21002960]
[79.11371613 89.10238647]
[92.50000000 82.33426666]
[92.50000000 67.33426666]
[92.50000000 52.33426666]
[92.50000000 37.33426666]
[78.72612762 30.75830460]
[69.17620850 18.85193443]
[65.74636841 3.97917533]
[69.11760712 -10.90697479]
[78.62057495 -22.85086060]
[92.36843872 -29.48101425]
[107.63156128 -29.48101425]
[121.37942505 -22.85086060]
[130.88238525 -10.90697479]
[134.25363159 3.97917533]
[130.82379150 18.85193443]
[121.27387238 30.75830460]
[107.50000000 37.33426666]
[107.50000000 52.33426666]
[107.50000000 67.33426666]
[107.50000000 82.33426666]
[120.59315491 89.65337372]
[133.37051392 81.79594421]
[146.14787292 73.93852234]
[158.92523193 66.08109283]
[171.70259094 58.22367096]
[184.47993469 50.36624527]
[181.14529419 35.59604263]
[182.78970337 20.54364395]
[189.23475647 6.84182310]
[199.78137207 -4.02315044]
[213.28552246 -10.87272549]
[228.28237915 -12.96391010]
[243.14518738 -10.06987000]
[256.26174927 -2.50452805]
[266.20928955 8.91148376]
[271.90875244 22.93984222]
[272.74191284 38.05885696]
[268.61840820 52.62852478]
[259.98547363 65.06844330]
[247.77961731 74.02922821]
[233.32479858 78.53886414]
[218.18896484 78.10819244]
[204.01396179 72.78392792]
[192.33737183 63.14360428]
[179.56001282 71.00102997]
[166.78265381 78.85845184]
[154.00529480 86.71588135]
[141.22793579 94.57330322]
[128.45057678 102.43073273]
[120.72649384 115.28913116]
[119.79086304 130.25991821]
[122.39110565 139.08549500]
[118.67684937 145.53141785]
[117.42997742 160.47950745]
[119.71833038 165.31510925]
[119.86345673 170.06182861]
[118.26962280 173.90386963]
[115.61040497 176.31137085]
[113.43357086 191.15257263]
[111.25672913 205.99378967]
[109.07989502 220.83499146]
[115.43910217 223.73262024]
[121.19209290 227.68536377]
[126.16586304 232.57086182]
[130.21142578 238.23880005]
[133.20829773 244.51547241]
[135.06808472 251.20912170]
[135.73707581 258.11578369]
[135.19779968 265.02554321]
[133.46948242 271.72891235]
[130.60731506 278.02307129]
[126.70081329 283.71817017]
[121.87087250 288.64291382]
[116.26616669 292.64984131]
[110.05846405 295.61965942]
[103.43743896 297.46475220]
[103.43743896 312.46475220]
[103.43743896 327.46475220]
[103.43743896 342.46475220]
[103.43743896 357.46475220]
[103.43743896 372.46475220]
[103.43743896 387.46475220]
[103.43743896 402.46475220]
[103.43743896 417.46475220]
[103.43743896 432.46475220]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[12 29]
[13 28]
[14 27]
[32 126]
[33 125]
[34 124]
[35 123]
[36 119]
[37 118]
[38 116]
[39 115]
[41 65]
[42 64]
[43 63]
[44 62]
[45 60]
[48 57]
[49 56]
[50 55]
[66 85]
[67 84]
[68 83]
[69 82]
[86 114]
[87 113]
[88 112]
[89 111]
[90 110]
[91 109]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
