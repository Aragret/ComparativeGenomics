%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:28 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGAAGAUGAAAAAUUAUAACCAAGCAUAAUAUAGCAAGGACUAACCCCUAUACCUUCUGCAUxxxxxxxxxxCCAAUUGGACCAAUCUAUCACCCUAUAGAAGAACUAAUGUUAGUAUAAGUAACAUGAAAACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[96.03347015 459.12097168]
[96.03347015 444.12097168]
[96.03347015 429.12097168]
[96.03347015 414.12097168]
[96.03347015 399.12097168]
[96.03347015 384.12097168]
[96.03347015 369.12097168]
[96.03347015 354.12097168]
[96.03347015 339.12097168]
[96.03347015 324.12097168]
[81.05740356 319.87347412]
[67.86543274 311.58209229]
[57.52441788 299.90774536]
[50.87336731 285.78530884]
[48.45534515 270.34881592]
[50.47314835 254.84033203]
[56.77233505 240.50999451]
[66.85298920 228.51530457]
[79.90941620 219.82759094]
[94.89451599 215.15339661]
[86.89411926 202.58984375]
[94.34264374 188.63169861]
[94.03059387 173.63493347]
[93.71853638 158.63818359]
[93.40647888 143.64143372]
[93.09442139 128.64468384]
[72.57685089 110.77847290]
[75.43838501 83.72327423]
[65.45565796 72.52751160]
[55.47293472 61.33174515]
[45.49020767 50.13597870]
[33.79058456 40.74881744]
[20.69742966 33.42971039]
[7.60427475 26.11060715]
[-8.21691895 26.13065720]
[-15.55092049 13.16679573]
[-28.64407539 5.84769011]
[-41.88666153 -1.19744503]
[-55.27294540 -7.96555996]
[-68.65923309 -14.73367500]
[-82.04551697 -21.50178909]
[-95.43180084 -28.26990318]
[-107.21022034 -18.61647224]
[-121.89846039 -14.59460068]
[-136.95169067 -16.90110207]
[-149.76187134 -25.13636017]
[-158.10952759 -37.87356567]
[-160.54840088 -52.90592575]
[-156.65592957 -67.62899017]
[-147.10650635 -79.49189758]
[-133.55464172 -86.43932343]
[-118.34826660 -87.26760101]
[-104.12197876 -81.83320618]
[-93.34056854 -71.07769012]
[-87.87198639 -56.86451340]
[-88.66368103 -41.65618896]
[-75.27739716 -34.88807297]
[-61.89111328 -28.11995888]
[-48.50482941 -21.35184479]
[-35.11854553 -14.58372974]
[-30.32577515 -15.22002220]
[-25.09057236 -12.80673695]
[-21.32496834 -7.24546432]
[-8.23181438 0.07364109]
[6.65286922 -0.46992028]
[14.92338085 13.01745224]
[28.01653481 20.33655739]
[41.10968781 27.65566254]
[33.99321365 14.45127773]
[31.72699928 -0.37654266]
[34.57453537 -15.10378075]
[42.20474243 -28.01811218]
[53.73045731 -37.61800003]
[67.81160736 -42.78726959]
[82.81097412 -42.92490005]
[96.98460388 -38.01488113]
[108.68453217 -28.62810516]
[116.55043030 -15.85596085]
[119.66772461 -1.18345368]
[117.67398071 13.68345451]
[110.80099487 27.01620293]
[99.84790039 37.26459885]
[86.08819580 43.23707581]
[71.12171173 44.23921967]
[56.68597412 40.15325165]
[66.66870117 51.34901810]
[76.65142822 62.54478455]
[86.63415527 73.74054718]
[90.98753357 69.84067535]
[96.32536316 66.71326447]
[102.50020599 64.58738708]
[109.31414795 63.66213608]
[116.52512360 64.09598541]
[123.85549927 65.99746704]
[137.09808350 58.95232773]
[150.34066772 51.90719604]
[163.58325195 44.86206055]
[176.82583618 37.81692505]
[181.20278931 22.63081932]
[195.07617188 15.06082821]
[210.21516418 19.59809303]
[217.63804626 33.55073547]
[212.94097900 48.64090347]
[198.91062927 55.91585922]
[183.87097168 51.05950928]
[170.62838745 58.10464478]
[157.38580322 65.14978027]
[144.14321899 72.19491577]
[130.90063477 79.24005127]
[132.22006226 86.62307739]
[134.85893250 101.38912964]
[136.17835999 108.77216339]
[151.04141235 110.79449463]
[165.90444946 112.81683350]
[180.86918640 106.10946655]
[194.00000000 115.93361664]
[191.78903198 132.18304443]
[176.51074219 138.14172363]
[163.88212585 127.67987823]
[149.01907349 125.65753937]
[134.15602112 123.63520813]
[125.19367981 127.79338837]
[116.26880646 129.27174377]
[108.09117889 128.33262634]
[108.40322876 143.32937622]
[108.71528625 158.32612610]
[109.02734375 173.32287598]
[109.33940125 188.31964111]
[117.36212158 201.95585632]
[109.89127350 214.84133911]
[123.92875671 218.42051697]
[136.54487610 225.51579285]
[146.87733459 235.63497925]
[154.22180176 248.07945251]
[158.07992554 261.99240112]
[158.19316101 276.41775513]
[154.56005859 290.36602783]
[147.43589783 302.88198853]
[137.31488037 313.11029053]
[124.89572144 320.35375977]
[111.03347015 324.12097168]
[111.03347015 339.12097168]
[111.03347015 354.12097168]
[111.03347015 369.12097168]
[111.03347015 384.12097168]
[111.03347015 399.12097168]
[111.03347015 414.12097168]
[111.03347015 429.12097168]
[111.03347015 444.12097168]
[111.03347015 459.12097168]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[20 130]
[22 128]
[23 127]
[24 126]
[25 125]
[26 124]
[28 88]
[29 87]
[30 86]
[31 85]
[32 68]
[33 67]
[34 66]
[36 64]
[37 63]
[38 60]
[39 59]
[40 58]
[41 57]
[42 56]
[94 109]
[95 108]
[96 107]
[97 106]
[98 105]
[112 121]
[113 120]
[114 119]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
