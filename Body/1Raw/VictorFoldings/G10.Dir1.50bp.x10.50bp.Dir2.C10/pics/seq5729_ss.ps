%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:27 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGUACUCCCCAUAUCUAACAACGUAAAAAUAAAAUGACAGUUUGAACAUACAAAACCCACCCxxxxxxxxxxAUUCCUAGAACCAGGCGACCUGCGACUCCUUGACGUUGACAAUCGAGUAGUACUCCCGAUCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[92.50000000 242.61666870]
[92.50000000 227.61666870]
[92.50000000 212.61666870]
[92.50000000 197.61666870]
[92.50000000 182.61666870]
[92.50000000 167.61666870]
[92.50000000 152.61666870]
[92.50000000 137.61666870]
[92.50000000 122.61666870]
[92.50000000 107.61666870]
[90.78730774 92.71475983]
[87.38433075 78.10587311]
[83.98135376 63.49697876]
[80.57837677 48.88808441]
[77.17539978 34.27919388]
[65.42214966 33.65237045]
[54.18099976 30.20440674]
[44.11802292 24.14562607]
[35.82802963 15.84086895]
[29.79939270 5.78753328]
[26.38530350 -5.41422033]
[25.78306389 -17.09729195]
[28.02270317 -28.56736946]
[32.96553040 -39.14419556]
[40.31270981 -48.20190811]
[49.62332535 -55.20607376]
[60.34083939 -59.74521637]
[58.47322464 -74.62849426]
[56.60561371 -89.51177979]
[54.73799896 -104.39505768]
[52.87038422 -119.27833557]
[51.00277328 -134.16162109]
[36.01279831 -133.43815613]
[21.01142502 -133.86428833]
[6.08669186 -135.43753052]
[-8.67381763 -138.14863586]
[-23.18348312 -141.98168945]
[-37.35715485 -146.91421509]
[-51.11165237 -152.91726685]
[-64.36625671 -159.95559692]
[-77.04319000 -167.98791504]
[-89.06805420 -176.96707153]
[-100.37028503 -186.84039307]
[-110.88355255 -197.54992676]
[-120.54615784 -209.03280640]
[-129.30139160 -221.22167969]
[-137.09790039 -234.04499817]
[-143.88989258 -247.42750549]
[-149.63754272 -261.29067993]
[-154.30709839 -275.55313110]
[-157.87117004 -290.13119507]
[-160.30882263 -304.93933105]
[-161.60577393 -319.89059448]
[-161.75440979 -334.89730835]
[-160.75384521 -349.87133789]
[-158.60995483 -364.72482300]
[-155.33532715 -379.37063599]
[-150.94918823 -393.72277832]
[-145.47724915 -407.69708252]
[-138.95164490 -421.21148682]
[-131.41065979 -434.18670654]
[-122.89855957 -446.54660034]
[-113.46528625 -458.21862793]
[-103.16620636 -469.13427734]
[-92.06175232 -479.22952271]
[-80.21709442 -488.44509888]
[-67.70173645 -496.72692871]
[-54.58913803 -504.02639771]
[-40.95623779 -510.30068970]
[-26.88304520 -515.51300049]
[-12.45214653 -519.63269043]
[2.25177002 -522.63562012]
[17.14241600 -524.50415039]
[32.13240433 -525.22735596]
[47.13376617 -524.80090332]
[62.05847168 -523.22741699]
[76.81893158 -520.51599121]
[91.32852173 -516.68267822]
[105.50209808 -511.74987793]
[119.25648499 -505.74658203]
[132.51095581 -498.70797729]
[145.18774414 -490.67541504]
[157.21243286 -481.69604492]
[168.51448059 -471.82250977]
[179.02754211 -461.11276245]
[188.68992615 -449.62969971]
[197.44493103 -437.44067383]
[205.24119568 -424.61721802]
[212.03294373 -411.23455811]
[217.78031921 -397.37130737]
[222.44960022 -383.10873413]
[226.01339722 -368.53060913]
[228.45077515 -353.72244263]
[229.74745178 -338.77111816]
[229.89579773 -323.76443481]
[228.89494324 -308.79043579]
[226.75077820 -293.93698120]
[223.47587585 -279.29122925]
[219.08944702 -264.93914795]
[213.61724854 -250.96496582]
[207.09140015 -237.45068359]
[199.55017090 -224.47560120]
[191.03782654 -212.11587524]
[181.60433960 -200.44403076]
[171.30503845 -189.52856445]
[160.20039368 -179.43354797]
[148.35556030 -170.21818542]
[135.84005737 -161.93659973]
[122.72731018 -154.63737488]
[109.09429169 -148.36332703]
[95.02100372 -143.15130615]
[80.59002686 -139.03187561]
[65.88605499 -136.02923584]
[67.75366211 -121.14595032]
[69.62127686 -106.26267242]
[71.48889160 -91.37938690]
[73.35650635 -76.49610901]
[75.22412109 -61.61283112]
[93.23922729 -57.52605820]
[108.38343811 -46.89144135]
[118.37815094 -31.27906990]
[121.70821381 -13.01019764]
[117.85152435 5.18786573]
[107.36075592 20.58890533]
[91.78429413 30.87621498]
[95.18727112 45.48510742]
[98.59024811 60.09400177]
[101.99322510 74.70289612]
[105.39620209 89.31178284]
[111.45748138 75.59096527]
[123.12048340 66.15834045]
[137.80546570 63.10032272]
[152.26423645 67.09331512]
[163.29864502 77.25410461]
[168.46800232 91.33522034]
[166.62887573 106.22204590]
[158.18806458 118.62175751]
[145.01260376 125.79164886]
[130.01678467 126.14580536]
[116.51754761 119.60589600]
[107.50000000 107.61666870]
[107.50000000 122.61666870]
[107.50000000 137.61666870]
[107.50000000 152.61666870]
[107.50000000 167.61666870]
[107.50000000 182.61666870]
[107.50000000 197.61666870]
[107.50000000 212.61666870]
[107.50000000 227.61666870]
[107.50000000 242.61666870]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[11 129]
[12 128]
[13 127]
[14 126]
[15 125]
[27 118]
[28 117]
[29 116]
[30 115]
[31 114]
[32 113]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
