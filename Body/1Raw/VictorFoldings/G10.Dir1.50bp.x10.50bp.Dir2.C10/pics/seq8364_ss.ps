%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:07 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGAACUAACCUCAAAACAAAUGAUAACCAUACACAACACUAAAGGACGAACCUGAUCUCUUAxxxxxxxxxxGGACGAACCUGAUCUCUUAUACUAGUAUCCUUAAUCAUUUUUAUUGCCACAACUAACCUCCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[117.85187531 540.17913818]
[117.85187531 525.17913818]
[117.85187531 510.17913818]
[117.85187531 495.17913818]
[117.85187531 480.17913818]
[117.85187531 465.17913818]
[117.85187531 450.17913818]
[117.85187531 435.17913818]
[117.85187531 420.17913818]
[117.85187531 405.17913818]
[100.90098572 400.72174072]
[85.83049011 391.74859619]
[73.81690216 378.95217896]
[65.80032349 363.32379150]
[62.41083908 346.07675171]
[63.91901398 328.55212402]
[70.21431732 312.11453247]
[80.81317139 298.04586792]
[94.89612579 287.44528198]
[111.37116241 281.14334106]
[109.81358337 266.22442627]
[108.25600433 251.30551147]
[99.23894501 239.45048523]
[105.50142670 224.92147827]
[96.48436737 213.06643677]
[102.74684906 198.53742981]
[101.18927002 183.61853027]
[99.63169098 168.69961548]
[98.07411194 153.78070068]
[96.51652527 138.86178589]
[94.95894623 123.94287872]
[93.40136719 109.02396393]
[91.68867493 94.12206268]
[89.82106018 79.23877716]
[77.62512207 69.54874420]
[75.94311523 54.42837524]
[85.25624847 42.86112976]
[83.38863373 27.97784805]
[81.52102661 13.09456825]
[79.65341187 -1.78871191]
[62.77157974 -3.81593609]
[46.97089005 -10.06945229]
[33.29017258 -20.13268280]
[22.62747955 -33.33875656]
[15.68115997 -48.81470490]
[12.90410709 -65.53916168]
[14.47423840 -82.40976715]
[20.28310585 -98.31584167]
[29.94337082 -112.21150208]
[42.81462479 -123.18440247]
[58.04584122 -130.51570129]
[54.94752121 -145.19223022]
[51.84919739 -159.86874390]
[39.23244476 -173.24026489]
[45.24689484 -189.69706726]
[41.84391785 -204.30595398]
[31.29518318 -211.80116272]
[28.78791809 -224.08662415]
[35.13677597 -234.43066406]
[32.03845596 -249.10719299]
[16.97727203 -250.26365662]
[2.85247087 -255.61778259]
[-9.19091129 -264.73553467]
[-18.17657089 -276.87780762]
[-23.37608337 -291.06024170]
[-24.36794472 -306.13317871]
[-21.07174873 -320.87466431]
[-13.75470734 -334.08972168]
[-3.00997686 -344.70703125]
[10.29141426 -351.86593628]
[25.07118225 -354.98605347]
[40.13119888 -353.81445312]
[54.25061417 -348.44613647]
[66.28482819 -339.31628418]
[75.25828552 -327.16500854]
[80.44355011 -312.97732544]
[81.42026520 -297.90344238]
[78.10926056 -283.16525269]
[70.77894592 -269.95755005]
[60.02355957 -259.35104370]
[46.71498108 -252.20552063]
[49.81330490 -237.52899170]
[62.22634125 -225.16305542]
[56.45281219 -207.70893860]
[59.85578918 -193.10003662]
[69.98526001 -186.41415405]
[72.91201019 -174.22181702]
[66.52572632 -162.96707153]
[69.62404633 -148.29054260]
[72.72236633 -133.61401367]
[85.86059570 -133.56338501]
[98.73290253 -130.90478516]
[110.82659149 -125.74182129]
[121.65950775 -118.27790070]
[130.79928589 -108.80817413]
[137.88061523 -97.70793915]
[142.61976624 -85.41770935]
[144.82608032 -72.42575836]
[144.40954590 -59.24871445]
[141.38446045 -46.41102982]
[135.86904907 -34.42408371]
[128.08073425 -23.76583672]
[118.32763672 -14.86174774]
[106.99636841 -8.06781483]
[94.53668976 -3.65632510]
[96.40430450 11.22695446]
[98.27191925 26.11023521]
[100.13952637 40.99351501]
[112.02191925 49.90106201]
[114.12796021 64.96821594]
[104.70434570 77.37117004]
[106.57195282 92.25444794]
[110.64397430 99.27603912]
[108.32027435 107.46638489]
[109.87786102 122.38529205]
[111.43544006 137.30419922]
[112.99301910 152.22311401]
[114.55059814 167.14202881]
[116.10818481 182.06094360]
[117.66576385 196.97985840]
[126.79422760 209.90199280]
[120.42034149 223.36389160]
[129.54881287 236.28604126]
[123.17491913 249.74794006]
[124.73249817 264.66683960]
[126.29007721 279.58575439]
[138.85812378 281.06817627]
[150.87361145 285.02172852]
[161.85601807 291.28579712]
[171.36662292 299.60742188]
[179.02606201 309.65151978]
[184.52940369 321.01434326]
[187.65837097 333.23971558]
[188.28993225 345.83740234]
[186.40113831 358.30264282]
[182.07000732 370.13653564]
[175.47224426 380.86590576]
[166.87413025 390.06219482]
[156.62178040 397.35873413]
[145.12724304 402.46517944]
[132.85188293 405.17913818]
[132.85188293 420.17913818]
[132.85188293 435.17913818]
[132.85188293 450.17913818]
[132.85188293 465.17913818]
[132.85188293 480.17913818]
[132.85188293 495.17913818]
[132.85188293 510.17913818]
[132.85188293 525.17913818]
[132.85188293 540.17913818]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[20 126]
[21 125]
[22 124]
[24 122]
[26 120]
[27 119]
[28 118]
[29 117]
[30 116]
[31 115]
[32 114]
[33 112]
[34 111]
[37 108]
[38 107]
[39 106]
[40 105]
[51 90]
[52 89]
[53 88]
[55 85]
[56 84]
[59 82]
[60 81]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
