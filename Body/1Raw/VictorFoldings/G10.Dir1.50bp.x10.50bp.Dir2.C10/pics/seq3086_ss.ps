%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:43 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGGCCUACUUCACAAAGCGCCUUCCCCCGUAAAUGAUAUCAUCUCAACUUAGUAUUAUACCCxxxxxxxxxxCAAUCGGCAUCAACCAACCACACCUAGCAUUCCUGCACAUCUGUACCCACGCCUUCUUCACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[-73.93825531 290.22906494]
[-84.37806702 300.99987793]
[-94.81788635 311.77066040]
[-105.25769806 322.54147339]
[-115.69750977 333.31228638]
[-126.13732147 344.08309937]
[-136.57713318 354.85391235]
[-147.01695251 365.62472534]
[-157.45675659 376.39553833]
[-161.50570679 391.68984985]
[-175.91952515 395.44366455]
[-186.35934448 406.21447754]
[-181.04574585 420.52279663]
[-182.47506714 435.71884155]
[-190.36351013 448.78543091]
[-203.14482117 457.12814331]
[-218.28126526 459.09054565]
[-232.76747131 454.28302002]
[-243.72721863 443.66006470]
[-248.98442078 429.33090210]
[-247.49526978 414.14062500]
[-239.55543518 401.10522461]
[-226.74136353 392.81289673]
[-211.59732056 390.91012573]
[-197.13014221 395.77465820]
[-186.69033813 385.00384521]
[-183.38810730 370.47991943]
[-168.22756958 365.95571899]
[-157.78775024 355.18490601]
[-147.34794617 344.41409302]
[-136.90812683 333.64328003]
[-126.46831512 322.87246704]
[-116.02850342 312.10168457]
[-105.58869171 301.33087158]
[-95.14888000 290.56005859]
[-84.70906830 279.78924561]
[-94.09016418 269.61904907]
[-102.91203308 258.96011353]
[-111.14924622 247.84318542]
[-118.77808380 236.30026245]
[-125.77655029 224.36462402]
[-132.12448120 212.07066345]
[-137.80360413 199.45378113]
[-142.79754639 186.55035400]
[-147.09190369 173.39753723]
[-150.67433167 160.03324890]
[-153.53448486 146.49598694]
[-155.66412354 132.82475281]
[-157.05712891 119.05894470]
[-157.70947266 105.23822021]
[-157.61927795 91.40240479]
[-156.78680420 77.59135437]
[-155.21446228 63.84487915]
[-152.90675354 50.20257187]
[-149.87036133 36.70374680]
[-146.11401367 23.38729858]
[-141.64852905 10.29159260]
[-136.48680115 -2.54563642]
[-130.64366150 -15.08740139]
[-124.13598633 -27.29756546]
[-116.98250580 -39.14094543]
[-109.20383453 -50.58342361]
[-100.82238770 -61.59202194]
[-91.86230469 -72.13502502]
[-82.34941101 -82.18206024]
[-72.31111908 -91.70417023]
[-61.77634430 -100.67392731]
[-50.77544403 -109.06548309]
[-39.34011841 -116.85466003]
[-27.50330925 -124.01901245]
[-15.29912472 -130.53790283]
[-2.76273060 -136.39253235]
[10.06975365 -141.56605530]
[23.16135406 -146.04356384]
[36.47434998 -149.81213379]
[49.97037888 -152.86093140]
[63.61056137 -155.18115234]
[77.35559082 -156.76612854]
[91.16586304 -157.61128235]
[105.00159454 -157.71417236]
[118.82291412 -157.07452393]
[132.58999634 -155.69416809]
[146.26318359 -153.57707214]
[159.80307007 -150.72933960]
[173.17063904 -147.15919495]
[186.32737732 -142.87690735]
[199.23539734 -137.89482117]
[211.85748291 -132.22729492]
[224.15727234 -125.89064026]
[236.09933472 -118.90313721]
[247.64924622 -111.28490448]
[258.77374268 -103.05789948]
[269.44076538 -94.24582672]
[279.61956787 -84.87406921]
[289.28085327 -74.96963501]
[298.39675903 -64.56106567]
[306.94100952 -53.67834091]
[314.88900757 -42.35282898]
[322.21783447 -30.61715317]
[328.90640259 -18.50513077]
[334.93542480 -6.05166101]
[340.28753662 6.70737553]
[344.94729614 19.73521614]
[348.90127563 32.99432373]
[352.13812256 46.44649124]
[354.64846802 60.05296707]
[356.42510986 73.77453613]
[371.38534546 72.68322754]
[386.34561157 71.59191895]
[399.60220337 61.93815994]
[414.47906494 68.83822632]
[415.67214966 85.19390869]
[401.95413208 94.17989349]
[387.43692017 86.55216980]
[372.47665405 87.64347839]
[357.51641846 88.73478699]
[357.70199585 105.59422302]
[356.78497314 122.42972565]
[354.76925659 139.16925049]
[351.66351318 155.74119568]
[347.48101807 172.07464600]
[342.23965454 188.09973145]
[335.96185303 203.74786377]
[328.67446899 218.95210266]
[320.40866089 233.64739990]
[311.19985962 247.77087402]
[301.08740234 261.26211548]
[290.11459351 274.06338501]
[278.32833862 286.11987305]
[265.77911377 297.38006592]
[252.52059937 307.79577637]
[238.60949707 317.32238770]
[224.10536194 325.91915894]
[209.07022095 333.54934692]
[193.56842041 340.18026733]
[177.66627502 345.78356934]
[161.43183899 350.33526611]
[144.93455505 353.81588745]
[128.24501038 356.21051025]
[111.43463135 357.50894165]
[94.57531738 357.70562744]
[77.73921967 356.79968262]
[60.99836349 354.79498291]
[44.42438126 351.70013428]
[28.08817863 347.52838135]
[12.05965900 342.29754639]
[-3.59260273 336.03005981]
[-18.80163574 328.75265503]
[-33.50236893 320.49655151]
[-47.63190079 311.29702759]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 36]
[2 35]
[3 34]
[4 33]
[5 32]
[6 31]
[7 30]
[8 29]
[9 28]
[11 26]
[12 25]
[107 116]
[108 115]
[109 114]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
