%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:45 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGGCCAUCAUUCUACUAUCAACAUUACUAAUAAGUGGCUCCUUUAACCUCUCCACCCUUAUCACxxxxxxxxxxCUAACAUCUCAGACGCUCAGGAAAUAGAAACCGUCUGAACUAUCCUGCCCGCCAUCAUCCUACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[142.79460144 97.54898071]
[128.20022583 101.01369476]
[113.60585022 104.47840881]
[103.30856323 113.93659973]
[89.85886383 110.11596680]
[75.26448822 113.58068085]
[61.04634857 118.36026764]
[47.32263565 124.41499329]
[33.59892273 130.46971130]
[19.87520790 136.52444458]
[6.15149450 142.57916260]
[-7.57221889 148.63389587]
[-21.29593277 154.68861389]
[-35.01964569 160.74334717]
[-48.74335861 166.79806519]
[-59.23320389 181.89916992]
[-76.57746124 179.39624023]
[-90.17564392 185.72785950]
[-103.77382660 192.05947876]
[-102.16462708 207.11567688]
[-105.53378296 221.87803650]
[-113.51584625 234.74525452]
[-125.24497986 244.32159424]
[-139.44888306 249.56828308]
[-154.58683777 249.91618347]
[-169.01678467 245.32757568]
[-181.17347717 236.30020142]
[-189.73823547 223.81326294]
[-193.78204346 209.22126770]
[-192.86622620 194.10704041]
[-187.09014893 180.11004639]
[-177.08033752 168.74859619]
[-163.92260742 161.25508118]
[-149.04418945 158.44235229]
[-134.05899048 160.61550903]
[-120.59249878 167.53881836]
[-110.10544586 178.46128845]
[-96.50726318 172.12966919]
[-82.90908051 165.79804993]
[-78.44908905 154.51412964]
[-67.12297058 149.14346313]
[-54.79808426 153.07435608]
[-41.07437134 147.01962280]
[-27.35065651 140.96490479]
[-13.62694359 134.91017151]
[0.09676947 128.85545349]
[13.82048321 122.80072784]
[27.54419708 116.74600220]
[41.26791000 110.69127655]
[54.99162292 104.63655090]
[40.61899948 100.34381104]
[30.73965836 89.05670929]
[28.38812828 74.24217987]
[34.28669739 60.45062637]
[46.62357330 51.91824722]
[61.60937881 51.26583099]
[74.64109802 58.69377136]
[81.71592712 71.92051697]
[80.66077423 86.88336182]
[71.79977417 98.98630524]
[86.39414978 95.52159119]
[96.69143677 86.06340027]
[110.14113617 89.88403320]
[124.73551178 86.41931915]
[139.32987976 82.95460510]
[137.20834351 66.54174042]
[136.88859558 49.99620056]
[138.37428284 33.51517487]
[141.64753723 17.29508209]
[146.66917419 1.52920282]
[153.37918091 -13.59461308]
[161.69743347 -27.89618301]
[171.52464294 -41.20514297]
[182.74354553 -53.36296844]
[195.22032166 -64.22487640]
[208.80613708 -73.66154480]
[223.33897400 -81.56063080]
[238.64556885 -87.82815552]
[254.54341125 -92.38956451]
[270.84295654 -95.19066620]
[287.34997559 -96.19823456]
[303.86764526 -95.40043640]
[320.19915771 -92.80695343]
[336.14990234 -88.44886017]
[351.52978516 -82.37825012]
[366.15557861 -74.66765594]
[379.85305786 -65.40910339]
[392.45904541 -54.71309662]
[403.82342529 -42.70722961]
[413.81088257 -29.53472137]
[422.30249023 -15.35266209]
[435.90066528 -21.68428040]
[449.49884033 -28.01589966]
[463.09704590 -34.34751892]
[476.69522095 -40.67913818]
[490.29339600 -47.01075745]
[503.89160156 -53.34237671]
[502.55422974 -68.44161987]
[506.46475220 -83.08688354]
[515.15093994 -95.50966644]
[527.56396484 -104.20986176]
[542.20477295 -108.13687897]
[557.30554199 -106.81652069]
[571.04266357 -100.40821075]
[581.75744629 -89.68579865]
[588.15588379 -75.94405365]
[589.46545410 -60.84236908]
[585.52789307 -46.20434189]
[576.81884766 -33.79758453]
[564.38983154 -25.12027931]
[549.74176025 -21.22024536]
[534.64349365 -22.56843567]
[520.91815186 -29.00204849]
[510.22320557 -39.74419403]
[496.62503052 -33.41257477]
[483.02682495 -27.08095360]
[469.42864990 -20.74933624]
[455.83047485 -14.41771603]
[442.23229980 -8.08609772]
[428.63409424 -1.75447822]
[433.20388794 11.10195541]
[436.59786987 24.31802368]
[438.78836060 37.78642654]
[439.75753784 51.39780045]
[439.49743652 65.04162598]
[438.01010132 78.60709381]
[435.30746460 91.98404694]
[431.41146851 105.06382751]
[426.35360718 117.74020386]
[420.17492676 129.91020203]
[412.92550659 141.47494507]
[404.66412354 152.34048462]
[395.45782471 162.41854858]
[385.38131714 171.62721252]
[374.51635742 179.89166260]
[362.95114136 187.14468384]
[350.77951050 193.32734680]
[338.10028076 198.38934326]
[325.01638794 202.28948975]
[311.63406372 204.99604797]
[298.06198120 206.48693848]
[284.41030884 206.75000000]
[270.78994751 205.78297424]
[257.31146240 203.59365845]
[244.08433533 200.19975281]
[231.21601868 195.62870789]
[218.81103516 189.91758728]
[206.97013855 183.11268616]
[195.78953552 175.26919556]
[185.36009216 166.45074463]
[175.76651001 156.72886658]
[167.08679199 146.18246460]
[159.39147949 134.89712524]
[152.74311829 122.96443939]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 65]
[2 64]
[3 63]
[5 61]
[6 60]
[7 50]
[8 49]
[9 48]
[10 47]
[11 46]
[12 45]
[13 44]
[14 43]
[15 42]
[17 39]
[18 38]
[19 37]
[91 120]
[92 119]
[93 118]
[94 117]
[95 116]
[96 115]
[97 114]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
