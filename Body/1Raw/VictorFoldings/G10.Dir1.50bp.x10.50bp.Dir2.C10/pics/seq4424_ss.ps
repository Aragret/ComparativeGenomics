%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:04 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGAUAUGAUAUGUCUCCAUACCCAUUACAAUCUCCAGCAUUCCCCCUCAAACCUAAGAAAUAxxxxxxxxxxCCCCACCGGCGUCAAAGUAUUUAGCUGACUCGCCACACUCCACGGAAGCAAUAUGAAAUGCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[171.80310059 93.05551910]
[164.99586487 80.24484253]
[151.21348572 86.16480255]
[137.43110657 92.08476257]
[123.64872742 98.00473022]
[109.86634827 103.92469025]
[96.48005676 110.69281006]
[83.54200745 118.28271484]
[70.60395050 125.87262726]
[57.66589355 133.46252441]
[44.72783661 141.05244446]
[31.78977966 148.64234924]
[19.17865181 156.76388550]
[6.91628361 165.40299988]
[-5.34608459 174.04212952]
[-12.65278912 190.91197205]
[-30.14740562 191.88066101]
[-42.22739410 200.77301025]
[-54.30738449 209.66535950]
[-66.38736725 218.55770874]
[-72.46461487 233.78921509]
[-88.73072815 235.87382507]
[-98.45252991 222.66705322]
[-91.62905884 207.75491333]
[-75.27972412 206.47772217]
[-63.19973373 197.58537292]
[-51.11974335 188.69302368]
[-39.03975677 179.80065918]
[-36.89432526 167.85476685]
[-26.84678078 160.35371399]
[-13.98520088 161.77975464]
[-1.72283244 153.14064026]
[10.53953552 144.50152588]
[11.12727833 141.69761658]
[12.89744282 138.96621704]
[15.82496166 136.77270508]
[19.71192932 135.56335449]
[24.19987106 135.70429993]
[37.13792801 128.11437988]
[50.07598495 120.52447510]
[63.01403809 112.93457031]
[75.95209503 105.34465790]
[88.89015198 97.75475311]
[74.82932281 92.53046417]
[68.40646362 78.97513580]
[73.26817322 64.78486633]
[86.65419769 58.01623154]
[100.96456146 62.51215363]
[108.07450867 75.72005463]
[103.94638062 90.14231110]
[117.72875977 84.22235107]
[131.51113892 78.30238342]
[145.29353333 72.38242340]
[159.07591248 66.46245575]
[154.18525696 51.70714951]
[150.59336853 36.58354187]
[148.32728577 21.20571518]
[147.40400696 5.68966675]
[147.83044434 -9.84757423]
[149.60331726 -25.28882408]
[152.70916748 -40.51762772]
[157.12449646 -55.41913986]
[162.81596375 -69.88098907]
[169.74055481 -83.79412079]
[177.84599304 -97.05363464]
[187.07107544 -109.55956268]
[197.34617615 -121.21761322]
[208.59375000 -131.93991089]
[220.72889709 -141.64564514]
[233.66004944 -150.26164246]
[247.28965759 -157.72299194]
[261.51486206 -163.97348022]
[276.22839355 -168.96603394]
[291.31921387 -172.66304016]
[306.67349243 -175.03671265]
[322.17538452 -176.06919861]
[337.70803833 -175.75277710]
[353.15426636 -174.08992004]
[368.39755249 -171.09321594]
[383.32296753 -166.78536987]
[397.81796265 -161.19889832]
[411.77319336 -154.37603760]
[425.08349609 -146.36828613]
[437.64849854 -137.23611450]
[449.37347412 -127.04844666]
[460.17001343 -115.88217163]
[469.95675659 -103.82157135]
[478.65991211 -90.95764160]
[491.75308228 -98.27674866]
[504.84622192 -105.59585571]
[517.93939209 -112.91496277]
[530.87744141 -120.50486755]
[543.65478516 -128.36228943]
[556.43212891 -136.21972656]
[555.32830811 -151.48536682]
[561.45581055 -165.51078796]
[573.40661621 -175.07302856]
[588.43457031 -177.97474670]
[603.08630371 -173.54917908]
[613.99493408 -162.81326294]
[618.65380859 -148.23405457]
[615.99230957 -133.16172791]
[606.62200928 -121.05979919]
[592.69616699 -114.70921326]
[577.41485596 -115.56928253]
[564.28955078 -123.44236755]
[551.51220703 -115.58493805]
[538.73486328 -107.72751617]
[536.76629639 -103.31160736]
[531.96826172 -100.11628723]
[525.25848389 -99.82180786]
[512.16534424 -92.50270081]
[499.07217407 -85.18359375]
[485.97903442 -77.86449432]
[491.98870850 -64.67450714]
[496.91058350 -51.04085922]
[500.71234131 -37.05309296]
[503.36889648 -22.80307770]
[504.86276245 -8.38440514]
[505.18408203 6.10821342]
[504.33068848 20.57957840]
[502.30813599 34.93462753]
[499.12963867 49.07905960]
[494.81607056 62.91994476]
[489.39566040 76.36634827]
[482.90402222 89.32993317]
[475.38369751 101.72550964]
[466.88406372 113.47162628]
[457.46090698 124.49110413]
[447.17611694 134.71150208]
[436.09716797 144.06567383]
[424.29681396 152.49211121]
[411.85256958 159.93542480]
[398.84613037 166.34667969]
[385.36288452 171.68371582]
[371.49142456 175.91140747]
[357.32284546 179.00195312]
[342.95019531 180.93499756]
[328.46789551 181.69778442]
[313.97103882 181.28524780]
[299.55490112 179.70005798]
[285.31414795 176.95256042]
[271.34234619 173.06074524]
[257.73132324 168.05015564]
[244.57044983 161.95362854]
[231.94622803 154.81117249]
[219.94160461 146.66966248]
[208.63548279 137.58251953]
[198.10214233 127.60942078]
[188.41082764 116.81581879]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 54]
[3 53]
[4 52]
[5 51]
[6 50]
[7 43]
[8 42]
[9 41]
[10 40]
[11 39]
[12 38]
[13 33]
[14 32]
[15 31]
[17 28]
[18 27]
[19 26]
[20 25]
[88 114]
[89 113]
[90 112]
[91 111]
[92 108]
[93 107]
[94 106]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
