%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:26 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGAUAAUCCUAUUUAUUACCUCAGAAGUUUUUUUCUUCGCAGGAUUUUUCUGAGCCUUUUACxxxxxxxxxxUACUAGUAUAUCGCUCACACCUCAUAUCCUCCCUACUAUGCCUAGAAGGAAUAAUACUAUCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[99.22348022 279.62481689]
[99.22348022 264.62481689]
[99.22348022 249.62481689]
[99.22348022 234.62481689]
[99.22348022 219.62481689]
[99.22348022 204.62481689]
[99.22348022 189.62481689]
[99.22348022 174.62481689]
[99.22348022 159.62481689]
[99.22348022 144.62481689]
[87.88232422 143.48149109]
[77.07538605 139.47094727]
[66.41376495 150.02223206]
[55.75213623 160.57353210]
[45.09050751 171.12481689]
[46.55260468 186.69389343]
[37.62253952 199.53086853]
[22.51681328 203.57450867]
[8.36788845 196.91554260]
[1.85645616 182.69810486]
[6.05701494 167.63526917]
[18.98618889 158.83921814]
[34.53921890 160.46319580]
[45.20084381 149.91189575]
[55.86247253 139.36061096]
[66.52410126 128.80932617]
[63.85334015 121.80096436]
[52.17325974 131.21243286]
[39.61309433 123.01229095]
[43.53060532 108.53288269]
[58.51182938 107.78424835]
[55.84107208 100.77589417]
[40.86135864 99.99604797]
[25.88164330 99.21620178]
[10.90192986 98.43635559]
[0.37417078 109.99924469]
[-15.12986565 112.03856659]
[-28.28964806 103.59143066]
[-32.89152908 88.64630890]
[-26.76264381 74.25983429]
[-12.79686069 67.22485352]
[2.41160274 70.86307526]
[11.68177414 83.45664215]
[26.66148949 84.23648834]
[41.64120483 85.01633453]
[56.62091827 85.79618073]
[68.20470428 72.16780090]
[83.12349701 64.98844910]
[98.34852600 64.56097412]
[100.83364105 49.76826859]
[103.31875610 34.97555923]
[105.80387878 20.18285370]
[108.28899384 5.39014626]
[93.38766479 -4.49699545]
[84.29706573 -19.83611870]
[82.78779602 -37.54989624]
[89.11478424 -54.10763168]
[101.97560120 -66.22901154]
[118.77831268 -71.53393555]
[120.33589172 -86.45285034]
[121.89347076 -101.37175751]
[123.45104980 -116.29067230]
[125.00862885 -131.20957947]
[110.65686035 -135.74957275]
[97.51293182 -143.08592224]
[86.11508179 -152.91821289]
[76.93004608 -164.84381104]
[70.33394623 -178.37438965]
[66.59689331 -192.95585632]
[65.87190247 -207.99113464]
[68.18868256 -222.86450195]
[73.45233917 -236.96694946]
[81.44734955 -249.72094727]
[91.84631348 -260.60427856]
[104.22340393 -269.17120361]
[118.07177734 -275.07098389]
[132.82435608 -278.06198120]
[147.87704468 -278.02175903]
[162.61343384 -274.95193481]
[176.43006897 -268.97821045]
[188.76118469 -260.34521484]
[199.10180664 -249.40646362]
[207.02851868 -236.60989380]
[212.21672058 -222.47950745]
[214.45394897 -207.59396362]
[213.64859009 -192.56277466]
[209.83363342 -178.00149536]
[203.16528320 -164.50637817]
[193.91662598 -152.63005066]
[182.46638489 -142.85884094]
[169.28341675 -135.59286499]
[154.90757751 -131.12966919]
[139.92755127 -129.65200806]
[138.36996460 -114.73309326]
[136.81237793 -99.81417847]
[135.25480652 -84.89526367]
[133.69721985 -69.97635651]
[144.82749939 -64.65412903]
[153.78865051 -56.13866806]
[159.69468689 -45.25098419]
[161.95524597 -33.04763794]
[160.33453369 -20.71819496]
[154.97589111 -9.46928883]
[146.38919067 -0.40651181]
[135.40238953 5.57422733]
[123.08170319 7.87526512]
[120.59658813 22.66797256]
[118.11146545 37.46067810]
[115.62635040 52.25338745]
[113.14122772 67.04609680]
[136.00518799 82.45029449]
[142.84027100 112.51752472]
[157.16287231 116.97434235]
[171.48547363 121.43115234]
[186.96133423 118.14359283]
[196.81492615 129.31301880]
[211.13752747 133.76983643]
[225.46012878 138.22665405]
[241.32929993 134.09126282]
[252.65103149 145.95507812]
[247.77850342 161.61364746]
[231.72413635 164.95875549]
[221.00331116 152.54924011]
[206.68070984 148.09243774]
[192.35810852 143.63562012]
[177.90669250 147.24195862]
[167.02865601 135.75375366]
[152.70605469 131.29693604]
[138.38345337 126.84011841]
[132.34346008 131.28630066]
[142.77601624 142.06413269]
[153.20857239 152.84197998]
[166.76275635 159.26724243]
[171.22978210 173.58665466]
[163.73300171 186.57888794]
[149.10014343 189.87728882]
[136.75439453 181.35774231]
[134.64624023 166.50611877]
[127.45485687 153.34239197]
[120.26348114 140.17864990]
[114.22348022 144.62481689]
[114.22348022 159.62481689]
[114.22348022 174.62481689]
[114.22348022 189.62481689]
[114.22348022 204.62481689]
[114.22348022 219.62481689]
[114.22348022 234.62481689]
[114.22348022 249.62481689]
[114.22348022 264.62481689]
[114.22348022 279.62481689]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[12 26]
[13 25]
[14 24]
[15 23]
[32 46]
[33 45]
[34 44]
[35 43]
[49 110]
[50 109]
[51 108]
[52 107]
[53 106]
[59 97]
[60 96]
[61 95]
[62 94]
[63 93]
[112 129]
[113 128]
[114 127]
[116 125]
[117 124]
[118 123]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
