%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:22 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGAAAUCACCACGAUCAAAAGGAACAAGCAUCAAGCACGCAGCAAUGCAGCUCAAAACGCUUAxxxxxxxxxxAAGCCCCGGCAGGUUUGAAGCUGCUUCUUCGAAUUUGCAAUUCAAUAUGAAAAUCACCUCGCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[88.18097687 509.26647949]
[88.18097687 494.26647949]
[88.18097687 479.26647949]
[88.18097687 464.26647949]
[88.18097687 449.26647949]
[88.18097687 434.26647949]
[88.18097687 419.26647949]
[88.18097687 404.26647949]
[88.18097687 389.26647949]
[88.18097687 374.26647949]
[74.06962585 371.00537109]
[61.03693771 364.67034912]
[49.74337387 355.57876587]
[40.76210403 344.18765259]
[34.54990005 331.07098389]
[31.42392731 316.89053345]
[31.54553223 302.36257935]
[34.91193008 288.22180176]
[41.35617447 275.18395996]
[50.55543137 263.90979004]
[62.04714584 254.97154236]
[75.25231934 248.82380676]
[89.50464630 245.78048706]
[89.81262207 230.78364563]
[90.12059784 215.78680420]
[77.30648804 208.19311523]
[69.96500397 195.11799622]
[70.15511322 180.02395630]
[77.92590332 166.96594238]
[91.27647400 159.50205994]
[91.58444977 144.50523376]
[91.89242554 129.50839233]
[84.00820160 126.09100342]
[77.38490295 120.61638641]
[72.54476166 113.51620483]
[69.86941528 105.35029602]
[54.90813446 104.27322388]
[41.88641739 113.64416504]
[26.48060226 109.16751862]
[20.50870895 94.27738190]
[28.55186272 80.39620209]
[44.44004440 78.17242432]
[55.98520279 89.31194305]
[70.94648743 90.38901520]
[73.77630615 84.22673798]
[77.89372253 78.83894348]
[83.09656525 74.49016571]
[89.12937927 71.39392853]
[95.69594574 69.70226288]
[102.47383881 69.49822998]
[107.31365967 55.30047607]
[112.15347290 41.10272598]
[116.99328613 26.90497208]
[107.74841309 4.07137966]
[128.62477112 -15.42102146]
[130.77334595 -30.26634407]
[132.92193604 -45.11166763]
[135.07051086 -59.95698929]
[137.21908569 -74.80231476]
[139.36767578 -89.64763641]
[141.36372375 -104.51423645]
[143.20704651 -119.40054321]
[145.05036926 -134.28684998]
[146.89369202 -149.17315674]
[140.91091919 -163.81954956]
[150.15361023 -175.49954224]
[151.84400940 -190.40399170]
[153.38130188 -205.32499695]
[139.33419800 -210.85507202]
[127.30069733 -219.97084045]
[118.17375946 -231.99588013]
[112.63065338 -246.03784180]
[111.08272552 -261.05471802]
[113.64484406 -275.93215942]
[120.12686920 -289.56613159]
[130.04780579 -300.94497681]
[142.67144775 -309.22424316]
[157.06103516 -313.78955078]
[172.14877319 -314.30218506]
[186.81504822 -310.72406006]
[199.97152710 -303.32067871]
[210.64189148 -292.64147949]
[218.03436279 -279.47885132]
[221.60034180 -264.80963135]
[221.07522583 -249.72233582]
[216.49798584 -235.33651733]
[208.20826721 -222.71974182]
[196.82122803 -212.80822754]
[183.18186951 -206.33749390]
[168.30232239 -203.78770447]
[166.76502991 -188.86669922]
[169.22315979 -181.84744263]
[165.03991699 -173.65621948]
[171.15454102 -160.07458496]
[161.78001404 -147.32983398]
[159.93667603 -132.44352722]
[158.09335327 -117.55722046]
[156.25003052 -102.67091370]
[158.56352234 -95.60267639]
[154.21299744 -87.49905396]
[152.06440735 -72.65373230]
[149.91583252 -57.80841064]
[147.76725769 -42.96308899]
[145.61868286 -28.11776543]
[143.47009277 -13.27244282]
[154.34541321 -2.94154024]
[169.06092834 -5.84901237]
[183.77645874 -8.75648499]
[198.14321899 -17.75827789]
[210.77033997 -6.44491053]
[203.39463806 8.82058525]
[186.68392944 5.95903778]
[171.96839905 8.86651039]
[157.25288391 11.77398205]
[147.22457886 27.95683861]
[131.19104004 31.74478912]
[126.35122681 45.94254303]
[121.51140594 60.14029312]
[116.67159271 74.33804321]
[129.89607239 93.46524811]
[125.85810089 116.36571503]
[106.88926697 129.81637573]
[106.58129120 144.81320190]
[106.27331543 159.81004333]
[119.30619812 167.81573486]
[126.53433228 181.18177795]
[126.10459900 196.27088928]
[118.23250580 209.03358459]
[105.11743927 216.09478760]
[104.80946350 231.09162903]
[104.50148010 246.08845520]
[119.54364777 250.07627869]
[133.19390869 257.53073120]
[144.66722107 268.01837158]
[153.30487061 280.93145752]
[158.61230469 295.52313232]
[160.28741455 310.95071411]
[158.23773193 326.32418823]
[152.58557129 340.75778198]
[143.66067505 353.42077637]
[131.98101807 363.58547974]
[118.22273254 370.66897583]
[103.18097687 374.26647949]
[103.18097687 389.26647949]
[103.18097687 404.26647949]
[103.18097687 419.26647949]
[103.18097687 434.26647949]
[103.18097687 449.26647949]
[103.18097687 464.26647949]
[103.18097687 479.26647949]
[103.18097687 494.26647949]
[103.18097687 509.26647949]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 152]
[2 151]
[3 150]
[4 149]
[5 148]
[6 147]
[7 146]
[8 145]
[9 144]
[10 143]
[23 131]
[24 130]
[25 129]
[30 124]
[31 123]
[32 122]
[36 44]
[37 43]
[50 119]
[51 118]
[52 117]
[53 116]
[55 105]
[56 104]
[57 103]
[58 102]
[59 101]
[60 100]
[61 98]
[62 97]
[63 96]
[64 95]
[66 93]
[67 91]
[68 90]
[106 114]
[107 113]
[108 112]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
