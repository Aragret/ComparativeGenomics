%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:00 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCCUAGCCAUGGCCAUCCCCUUAUGAGCGGGCACAGUGAUUAUAGGCUUUCGCUCUAAGAUxxxxxxxxxxGGCUCACUCCUUGGCGCCUGCCUGAUCCUCCAAAUCACCACAGGACUAUUCCUAGCCAUGCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[103.87663269 266.90405273]
[103.87663269 251.90405273]
[103.87663269 236.90405273]
[103.87663269 221.90405273]
[103.87663269 206.90405273]
[103.87663269 191.90405273]
[103.87663269 176.90405273]
[103.87663269 161.90405273]
[103.87663269 146.90405273]
[103.87663269 131.90405273]
[91.04126740 129.19245911]
[80.99916840 121.82028198]
[75.22204590 111.53446198]
[74.27511597 100.43740845]
[77.79418945 90.56762695]
[66.49517822 80.70190430]
[55.19617844 70.83618164]
[43.89717102 60.97045898]
[32.10053253 51.70550919]
[19.83816338 43.06639481]
[7.48659134 34.55530548]
[-4.95284891 26.17316055]
[-17.39228821 17.79101753]
[-30.63487434 10.74588299]
[-44.53742981 5.11392593]
[-58.43998718 -0.51803064]
[-63.73712921 0.23022436]
[-68.31259918 -1.04155171]
[-71.50758362 -3.70496416]
[-73.01625061 -6.95940971]
[-86.54043579 -13.44757462]
[-100.06462860 -19.93573952]
[-109.22078705 -20.83942604]
[-113.80054474 -26.70214462]
[-127.18682861 -33.47025681]
[-140.57312012 -40.23837280]
[-153.95939636 -47.00648880]
[-167.34568787 -53.77460098]
[-180.86987305 -60.26276779]
[-194.52610779 -66.46817780]
[-208.18235779 -72.67358398]
[-219.54901123 -62.53854370]
[-234.05723572 -57.90914154]
[-249.19338989 -59.58745575]
[-262.33505249 -67.28269958]
[-271.20532227 -79.66163635]
[-274.26739502 -94.57952881]
[-270.99075317 -109.45176697]
[-261.94308472 -121.70164490]
[-248.69195557 -129.20680237]
[-233.53320312 -130.66691589]
[-219.09317017 -125.82901764]
[-207.87367249 -115.53130341]
[-201.81857300 -101.55791473]
[-201.97694397 -86.32982635]
[-188.32070923 -80.12441254]
[-174.66445923 -73.91900635]
[-169.90231323 -74.75411987]
[-164.57125854 -72.56069946]
[-160.57757568 -67.16088867]
[-147.19128418 -60.39277267]
[-133.80499268 -53.62465668]
[-120.41871643 -46.85654449]
[-107.03243256 -40.08842850]
[-93.57646179 -33.45993042]
[-80.05227661 -26.97176552]
[-66.52808380 -20.48360062]
[-52.80802917 -14.42058659]
[-38.90547562 -8.78862953]
[-25.00291824 -3.15667319]
[-32.35692215 -16.23025703]
[-32.32651138 -31.23022652]
[-24.91955376 -44.27388382]
[-12.05332088 -51.98492050]
[2.94180274 -52.36735153]
[16.18437576 -45.32219315]
[24.24659729 -32.67306137]
[25.04158783 -17.69414139]
[18.36356354 -4.26268673]
[5.94111395 4.14461517]
[-9.01014614 5.35157728]
[3.42929435 13.73372078]
[15.86873436 22.11586380]
[23.22081566 23.25277328]
[28.47727966 30.80402565]
[40.73964691 39.44314194]
[41.16149521 24.44907570]
[53.01793289 15.26077366]
[67.64286041 18.59414101]
[74.34664917 32.01275635]
[68.22936249 45.70869827]
[53.76289368 49.67145538]
[65.06189728 59.53717804]
[76.36090851 69.40290070]
[87.65991211 79.26862335]
[113.98298645 75.58878326]
[132.13803101 100.20849609]
[147.03993225 98.49580383]
[161.94183350 96.78311920]
[176.84373474 95.07042694]
[187.43426514 81.18597412]
[204.45141602 79.26219177]
[217.35615540 90.00115204]
[232.21920776 87.97882080]
[247.08226013 85.95648193]
[261.94531250 83.93415070]
[270.13653564 70.61358643]
[284.98995972 65.72375488]
[299.49218750 71.57347870]
[306.79574585 85.40070343]
[303.45208740 100.67663574]
[291.04000854 110.18844604]
[275.42013550 109.44494629]
[263.96765137 98.79719543]
[249.10458374 100.81953430]
[234.24154663 102.84186554]
[219.37849426 104.86420441]
[213.06448364 116.13939667]
[201.22393799 121.78528595]
[188.10411072 119.52738953]
[178.55642700 109.97232819]
[163.65452576 111.68502045]
[148.75262451 113.39770508]
[133.85072327 115.11039734]
[147.74948120 120.75172424]
[161.64823914 126.39305115]
[176.62310791 125.52522278]
[190.78961182 130.45576477]
[201.98973083 140.43360901]
[208.51736450 153.93879700]
[209.37811279 168.91407776]
[204.44088745 183.07824707]
[194.45776367 194.27366638]
[180.94950867 200.79490662]
[165.97381592 201.64860535]
[151.81198120 196.70469666]
[140.62127686 186.71629333]
[134.10639954 173.20495605]
[133.25939941 158.23152161]
[126.06801605 145.06777954]
[118.87663269 131.90405273]
[118.87663269 146.90405273]
[118.87663269 161.90405273]
[118.87663269 176.90405273]
[118.87663269 191.90405273]
[118.87663269 206.90405273]
[118.87663269 221.90405273]
[118.87663269 236.90405273]
[118.87663269 251.90405273]
[118.87663269 266.90405273]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[15 95]
[16 94]
[17 93]
[18 92]
[19 86]
[20 85]
[21 83]
[22 82]
[23 81]
[24 70]
[25 69]
[26 68]
[30 67]
[31 66]
[32 65]
[34 64]
[35 63]
[36 62]
[37 61]
[38 60]
[39 57]
[40 56]
[41 55]
[97 124]
[98 123]
[99 122]
[100 121]
[103 117]
[104 116]
[105 115]
[106 114]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
