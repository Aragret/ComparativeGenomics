%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:53 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCUUCUGAGUCCCAGAGGUUACCCAAGGCACCCCUCUGACAUCCGGCCUGCUUCUUCUCACxxxxxxxxxxCUAAUAAUCGGUGCCCCCGAUAUGGCGUUUCCCCGCAUAAACAACAUAAGCUUCUGACUCCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[115.18701935 350.79055786]
[115.18701935 335.79055786]
[115.18701935 320.79055786]
[115.18701935 305.79055786]
[115.18701935 290.79055786]
[115.18701935 275.79055786]
[115.18701935 260.79055786]
[115.18701935 245.79054260]
[115.18701935 230.79054260]
[115.18701935 215.79054260]
[113.62944031 200.87162781]
[110.53111267 186.19511414]
[107.43279266 171.51858521]
[97.23346710 160.66395569]
[101.95342255 145.56320190]
[98.85510254 130.88667297]
[82.72837830 125.63179016]
[71.80295563 112.65796661]
[57.03689575 115.29682922]
[51.66075516 119.32231903]
[45.92435455 119.89241791]
[41.60260773 117.72492218]
[26.73956299 119.74725342]
[11.87651539 121.76959229]
[-2.98653150 123.79192352]
[-17.84957886 125.81426239]
[-32.71262360 127.83659363]
[-36.54938889 142.54536438]
[-45.72687912 154.66319275]
[-58.84560013 162.34223938]
[-73.90503693 164.41146851]
[-88.60874176 160.55535889]
[-100.71450043 151.36193848]
[-108.37627411 138.23313904]
[-110.42569733 123.17098236]
[-106.55025482 108.47236633]
[-97.34091187 96.37871552]
[-84.20203400 88.73421478]
[-69.13719940 86.70460510]
[-54.44369507 90.59938049]
[-42.36216736 99.82462311]
[-34.73495865 112.97354889]
[-19.87191200 110.95121002]
[-5.00886583 108.92887878]
[9.85418129 106.90654755]
[24.71722794 104.88420868]
[39.58027649 102.86187744]
[54.39803314 100.53076935]
[69.16408539 97.89190674]
[70.47071838 88.21323395]
[74.82144165 79.16425323]
[81.94250488 71.70211792]
[91.26012421 66.67155457]
[101.94493103 64.71134186]
[112.98535156 66.17800903]
[116.08367157 51.50148773]
[119.18199158 36.82496262]
[108.87017059 47.71837234]
[96.42824554 56.09682083]
[82.45687103 61.55581665]
[67.63054657 63.83181763]
[52.66505432 62.81494522]
[38.28288269 58.55428696]
[25.17837143 51.25553894]
[13.98416424 41.27106476]
[5.24069118 29.08288574]
[-0.62993735 15.27941704]
[-3.34430265 0.52705425]
[-2.77136254 -14.46199989]
[1.06122279 -28.96411324]
[7.96842670 -42.27916336]
[17.61678696 -53.76433182]
[29.54050827 -62.86515045]
[43.16394424 -69.14225006]
[57.82939148 -72.29259491]
[72.82884216 -72.16409302]
[87.43815613 -68.76294708]
[100.95204926 -62.25335693]
[112.71809387 -52.94958496]
[122.16826630 -41.30079651]
[128.84632874 -27.86935806]
[132.42988586 -13.30371094]
[132.74592590 1.69295955]
[129.77984619 16.39464760]
[139.99333191 5.40898323]
[150.20681763 -5.57668161]
[153.79017639 -14.05084038]
[160.74887085 -16.68183899]
[171.18869019 -27.45264816]
[181.62849426 -38.22345734]
[192.06831360 -48.99426651]
[193.25668335 -64.99324036]
[206.58685303 -73.91996765]
[221.83302307 -68.92662048]
[227.29966736 -53.84366989]
[218.79322815 -40.24146652]
[202.83911133 -38.55445099]
[192.39930725 -27.78364372]
[181.95948792 -17.01283646]
[171.51968384 -6.24202681]
[161.19247437 4.63679838]
[150.97898865 15.62246323]
[140.76551819 26.60812759]
[133.85852051 39.92328262]
[130.76019287 54.59980774]
[127.66187286 69.27633667]
[136.80360413 81.16871643]
[151.78332520 81.94856262]
[166.76303101 82.72840118]
[181.74275208 83.50824738]
[191.39872742 71.36157227]
[206.35919189 67.24279785]
[220.87152100 72.73567963]
[229.35545349 85.72808075]
[228.54872131 101.22417450]
[218.76155090 113.26538086]
[203.75727844 117.22162628]
[189.30538940 111.57164001]
[180.96290588 98.48796082]
[165.98318481 97.70812225]
[151.00347900 96.92827606]
[136.02375793 96.14842987]
[132.90074158 110.23287201]
[124.79323578 121.29280090]
[113.53162384 127.78835297]
[116.62995148 142.46487427]
[127.05088806 154.36927795]
[122.10932159 168.42025757]
[125.20764160 183.09678650]
[128.30596924 197.77331543]
[135.03834534 184.36901855]
[147.49475098 176.01211548]
[162.45088196 174.86575317]
[176.03538513 181.22666931]
[184.73196411 193.44836426]
[186.28952026 208.36727905]
[180.30488586 222.12170410]
[168.32717896 231.15133667]
[153.45677185 233.11891174]
[139.54284668 227.51510620]
[130.18701172 215.79054260]
[130.18701172 230.79054260]
[130.18701172 245.79054260]
[130.18701172 260.79055786]
[130.18701172 275.79055786]
[130.18701172 290.79055786]
[130.18701172 305.79055786]
[130.18701172 320.79055786]
[130.18701172 335.79055786]
[130.18701172 350.79055786]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[11 130]
[12 129]
[13 128]
[15 126]
[16 125]
[18 49]
[19 48]
[22 47]
[23 46]
[24 45]
[25 44]
[26 43]
[27 42]
[55 106]
[56 105]
[57 104]
[84 103]
[85 102]
[86 101]
[88 100]
[89 99]
[90 98]
[91 97]
[107 122]
[108 121]
[109 120]
[110 119]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
