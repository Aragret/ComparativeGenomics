%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:47 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGUCUCCAACACAUAUGGCCUAGACUACGUACAUAACCUAAACCUACUCCAAUGCUAAAACUAxxxxxxxxxxCUACCUAACCAACAAACUUAAAAUAAAAUCCCCACUAUGCACAUUUUAUUUCUCCAACAUACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[95.38136292 240.38359070]
[95.07337952 225.38674927]
[94.76540375 210.38990784]
[94.45742798 195.39306641]
[94.14945221 180.39624023]
[93.84146881 165.39939880]
[93.53349304 150.40255737]
[93.22551727 135.40571594]
[92.91754150 120.40888214]
[79.29055786 114.13948059]
[67.70151520 123.66281891]
[56.11246490 133.18615723]
[44.52341461 142.70948792]
[33.23313522 152.58520508]
[22.25233269 162.80390930]
[11.27152920 173.02261353]
[12.25454330 188.62927246]
[2.93425035 201.18579102]
[-12.28859329 204.76336670]
[-26.22622490 197.67277527]
[-32.29772186 183.26197815]
[-27.63630867 168.33532715]
[-14.44296265 159.94070435]
[1.05282235 162.04180908]
[12.03362465 151.82310486]
[23.01442719 141.60440063]
[23.48723221 138.05140686]
[25.74256706 134.56098938]
[29.72693825 131.98603821]
[35.00007629 131.12043762]
[46.58912659 121.59710693]
[58.17817307 112.07376862]
[69.76721954 102.55043030]
[73.57508087 88.04180145]
[68.15645599 74.05471802]
[55.95643997 63.98147964]
[58.57363892 49.31861496]
[53.15501404 35.33153152]
[38.66490555 39.26274872]
[23.84324646 41.65777969]
[8.85243320 42.49037552]
[-6.14328861 41.75142288]
[-20.97961617 39.44901276]
[-35.49399567 35.60837555]
[-49.52740097 30.27158928]
[-62.92606735 23.49712563]
[-75.54320526 15.35921001]
[-87.24055481 5.94700718]
[-97.88997650 -4.63635921]
[-107.37477112 -16.27493095]
[-115.59102631 -28.84119034]
[-122.44871521 -42.19745255]
[-127.87271118 -56.19738388]
[-131.80357361 -70.68758392]
[-134.19824219 -85.50930023]
[-135.03047180 -100.50013733]
[-134.29115295 -115.49584198]
[-131.98838806 -130.33210754]
[-128.14739990 -144.84640503]
[-122.81027222 -158.87966919]
[-116.03548431 -172.27818298]
[-107.89726257 -184.89511108]
[-98.48477173 -196.59223938]
[-87.90114594 -207.24139404]
[-76.26234436 -216.72590637]
[-63.69588852 -224.94186401]
[-50.33945847 -231.79922485]
[-36.33939743 -237.22288513]
[-21.84909821 -241.15339661]
[-7.02732372 -243.54769897]
[7.96353054 -244.37957764]
[22.95921516 -243.63989258]
[37.79543304 -241.33676147]
[52.30962372 -237.49542236]
[66.34276581 -232.15794373]
[79.74111176 -225.38282776]
[92.35784912 -217.24430847]
[104.05474854 -207.83154297]
[114.70365143 -197.24765015]
[124.18788147 -185.60861206]
[132.40351868 -173.04196167]
[139.26055908 -159.68536377]
[144.68388367 -145.68516541]
[148.61404419 -131.19477844]
[151.00799561 -116.37294769]
[151.83949280 -101.38207245]
[151.09944153 -86.38640594]
[148.79595947 -71.55023956]
[144.95426941 -57.03614426]
[139.61645508 -43.00312805]
[132.84101868 -29.60495377]
[124.70217896 -16.98841286]
[115.28912354 -5.29174280]
[104.70497894 5.35690212]
[93.06571960 14.84084988]
[80.49886322 23.05618858]
[67.14209747 29.91290855]
[72.56072235 43.89999008]
[84.37316132 52.97278214]
[82.14353943 68.63609314]
[87.56216431 82.62317657]
[106.88060760 72.77563477]
[131.26000977 84.72747803]
[146.19601440 86.11150360]
[161.13203430 87.49552917]
[176.06803894 88.87955475]
[191.00405884 90.26358032]
[205.94006348 91.64760590]
[220.87608337 93.03163147]
[235.81210327 94.41565704]
[243.22666931 81.11362457]
[255.41453552 71.98258972]
[270.26406860 68.60454559]
[285.20251465 71.56477356]
[297.64166260 80.35039520]
[305.42639160 93.43923950]
[307.20794678 108.56359100]
[302.67764282 123.10305786]
[292.62039185 134.53860474]
[278.77868652 140.88893127]
[263.55065918 141.05383301]
[249.57466125 135.00471497]
[239.27215576 123.78963470]
[234.42807007 109.35166931]
[219.49206543 107.96764374]
[204.55604553 106.58361816]
[189.62002563 105.19959259]
[174.68402100 103.81556702]
[159.74800110 102.43154144]
[144.81199646 101.04751587]
[129.87597656 99.66349030]
[124.38558197 104.77284241]
[136.82962036 113.14814758]
[149.27368164 121.52345276]
[162.79417419 128.01930237]
[167.87045288 142.13423157]
[161.58409119 155.75340271]
[147.54920959 161.04695129]
[133.83462524 154.97157288]
[128.32505798 141.01817322]
[120.86492157 128.00486755]
[113.40477753 114.99155426]
[107.91437531 120.10090637]
[108.22235107 135.09774780]
[108.53033447 150.09458923]
[108.83831024 165.09141541]
[109.14628601 180.08825684]
[109.45426178 195.08509827]
[109.76224518 210.08193970]
[110.07022095 225.07876587]
[110.37819672 240.07560730]
[112.96397400 259.28402710]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 151]
[2 150]
[3 149]
[4 148]
[5 147]
[6 146]
[7 145]
[8 144]
[9 143]
[10 33]
[11 32]
[12 31]
[13 30]
[14 26]
[15 25]
[16 24]
[34 101]
[35 100]
[37 98]
[38 97]
[103 131]
[104 130]
[105 129]
[106 128]
[107 127]
[108 126]
[109 125]
[110 124]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
