%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:31 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCCUAAUACUAACUACCUGACUCCUACCCCUCACAAUCAUGGCAAGCCAACGCCACUUAUCxxxxxxxxxxGCCUACACAAUUCUCCGAUCCGUCCCUAACAAACUAGGAGGCGUCCUUGCCCUAUUACUACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[106.69416046 264.46450806]
[106.69416046 249.46450806]
[106.69416046 234.46450806]
[106.69416046 219.46450806]
[106.69416046 204.46450806]
[106.69416046 189.46450806]
[106.69416046 174.46450806]
[106.69416046 159.46450806]
[106.69416046 144.46450806]
[106.69416046 129.46450806]
[101.04465485 124.53164673]
[93.85327148 137.69538879]
[86.66188812 150.85911560]
[79.47050476 164.02285767]
[78.07582855 178.95788574]
[69.09417725 190.97161865]
[55.16400146 196.53491211]
[40.37744141 194.01347351]
[29.07820511 184.14802551]
[24.58556366 169.83662415]
[28.21928024 155.28340149]
[38.91190720 144.76353455]
[53.52367401 141.36738586]
[65.59767151 132.46690369]
[77.67166138 123.56640625]
[89.74565125 114.66591644]
[84.09614563 109.73305511]
[69.23310089 111.75539398]
[54.37005615 113.77772522]
[48.62836456 128.02302551]
[36.52337646 137.47633362]
[21.31128120 139.59474182]
[7.08404970 133.80842590]
[-2.33126235 121.67386627]
[-4.40198374 106.45520782]
[1.42889988 92.24618530]
[13.59290981 82.86894989]
[28.81798744 80.84594727]
[43.00866699 86.72133636]
[52.34772110 98.91468048]
[67.21076965 96.89234924]
[82.07381439 94.87001038]
[83.78650665 79.96810913]
[69.76979065 74.62659454]
[53.67357635 77.76409149]
[43.11389923 65.21717072]
[48.95364761 49.89303207]
[65.18539429 47.55583191]
[75.11130524 60.60988235]
[89.12801361 65.95139313]
[103.49620056 61.64381027]
[112.26240540 49.47197342]
[121.02861786 37.30013657]
[129.79483032 25.12830162]
[138.56103516 12.95646477]
[136.18606567 2.25857043]
[140.04621887 -7.76154900]
[148.62532043 -13.84579849]
[158.91767883 -14.16116810]
[168.18261719 -25.95780754]
[177.44757080 -37.75444794]
[186.71252441 -49.55108643]
[195.97747803 -61.34772873]
[185.24050903 -71.84366608]
[175.70130920 -83.43896484]
[167.47172546 -95.99767303]
[160.64823914 -109.37255096]
[155.31086731 -123.40678406]
[151.52217102 -137.93582153]
[149.32658386 -152.78933716]
[148.74983215 -167.79315186]
[149.79869080 -182.77137756]
[152.46086121 -197.54838562]
[156.70512390 -211.95092773]
[162.48173523 -225.81015015]
[169.72294617 -238.96356201]
[178.34385681 -251.25694275]
[188.24340820 -262.54614258]
[199.30552673 -272.69882202]
[211.40051270 -281.59594727]
[224.38655090 -289.13317871]
[238.11138916 -295.22216797]
[252.41413879 -299.79150391]
[267.12707520 -302.78765869]
[282.07769775 -304.17544556]
[297.09072876 -303.93865967]
[311.99014282 -302.08001709]
[326.60125732 -298.62133789]
[340.75277710 -293.60314941]
[354.27874756 -287.08432007]
[367.02059937 -279.14126587]
[378.82897949 -269.86712646]
[389.56536865 -259.37060547]
[399.10394287 -247.77478027]
[407.33285522 -235.21563721]
[414.15560913 -221.84039307]
[419.49224854 -207.80586243]
[423.28015137 -193.27662659]
[425.47494507 -178.42300415]
[426.05087280 -163.41914368]
[425.00122070 -148.44097900]
[422.33825684 -133.66410828]
[418.09320068 -119.26179504]
[412.31585693 -105.40287781]
[405.07394409 -92.24986267]
[396.45236206 -79.95695496]
[386.55221558 -68.66828156]
[375.48953247 -58.51620102]
[363.39407349 -49.61973572]
[350.40762329 -42.08319855]
[336.68246460 -35.99494553]
[322.37948608 -31.42636299]
[307.66638184 -28.43101311]
[292.71569824 -27.04401398]
[277.70266724 -27.28162956]
[262.80334473 -29.14107323]
[248.19241333 -32.60054398]
[234.04118347 -37.61948013]
[220.51554871 -44.13903809]
[207.77410889 -52.08277893]
[198.50915527 -40.28613663]
[189.24421692 -28.48949814]
[179.97926331 -16.69285774]
[170.71430969 -4.89621878]
[169.45327759 14.36097240]
[150.73286438 21.72267151]
[141.96665955 33.89450836]
[133.20045471 46.06634521]
[124.43424225 58.23818207]
[115.66803741 70.41001892]
[128.43870544 62.54172134]
[143.27488708 60.33094788]
[157.78474426 64.13411713]
[169.62902832 73.33808899]
[176.89822388 86.45901489]
[178.42041016 101.38158417]
[173.95018005 115.69999695]
[164.20822144 127.10588837]
[150.76510620 133.76042175]
[135.78811646 134.59075928]
[121.69416046 129.46450806]
[121.69416046 144.46450806]
[121.69416046 159.46450806]
[121.69416046 174.46450806]
[121.69416046 189.46450806]
[121.69416046 204.46450806]
[121.69416046 219.46450806]
[121.69416046 234.46450806]
[121.69416046 249.46450806]
[121.69416046 264.46450806]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[27 42]
[28 41]
[29 40]
[43 50]
[44 49]
[51 130]
[52 129]
[53 128]
[54 127]
[55 126]
[59 124]
[60 123]
[61 122]
[62 121]
[63 120]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
