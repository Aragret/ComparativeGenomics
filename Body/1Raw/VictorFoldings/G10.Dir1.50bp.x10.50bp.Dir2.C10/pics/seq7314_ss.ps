%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:59 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCAUAAACCUGGAGUGACUAUAUGGAUGCCCCCCACCCUACCACACAUUCGAAGAACCCGUxxxxxxxxxxCCUCUUCCUACACAUCGGGCGAGGCCUAUAUUACGGAUCAUUUCUCUACUCAGAAACCUGCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[-23.19858551 188.26034546]
[-35.80971527 196.38188171]
[-48.42084122 204.50343323]
[-55.83396912 218.48040771]
[-70.72357178 218.86634827]
[-83.33470154 226.98788452]
[-95.94583130 235.10943604]
[-108.55696106 243.23097229]
[-121.16809082 251.35250854]
[-133.77922058 259.47406006]
[-146.39035034 267.59561157]
[-159.00148010 275.71713257]
[-171.61259460 283.83868408]
[-174.05174255 288.60000610]
[-177.72662354 291.60794067]
[-181.74406433 292.68585205]
[-185.27343750 292.04479980]
[-198.36659241 299.36389160]
[-196.55694580 314.45672607]
[-200.66563416 329.09185791]
[-210.06613159 341.03753662]
[-223.32490540 348.47213745]
[-238.42010498 350.26193237]
[-253.04981995 346.13400269]
[-264.98312378 336.71780396]
[-272.40026855 323.44924927]
[-274.17019653 308.35171509]
[-270.02301025 293.72744751]
[-260.59115601 281.80654907]
[-247.31285095 274.40686035]
[-232.21299744 272.65676880]
[-217.59419250 276.82318115]
[-205.68569946 286.27075195]
[-192.59254456 278.95162964]
[-179.73414612 271.22756958]
[-167.12301636 263.10601807]
[-154.51188660 254.98446655]
[-141.90075684 246.86293030]
[-129.28962708 238.74137878]
[-116.67850494 230.61984253]
[-104.06737518 222.49830627]
[-91.45624542 214.37675476]
[-78.84511566 206.25521851]
[-72.33402252 192.85914612]
[-56.54238510 191.89230347]
[-43.93125534 183.77075195]
[-31.32012749 175.64921570]
[-41.19580078 155.05929565]
[-47.86568069 133.21926880]
[-51.17833328 110.62503052]
[-51.05854797 87.78954315]
[-47.50904083 65.23129272]
[-40.61040115 43.46244812]
[-30.51926422 22.97726631]
[-17.46474266 4.24085236]
[-1.74323213 -12.32139015]
[16.28831482 -26.33342171]
[36.22050095 -37.47710800]
[57.60077286 -45.49943542]
[79.94370270 -50.21825790]
[78.69682312 -65.16634369]
[77.44995117 -80.11443329]
[76.20307922 -95.06251526]
[74.95619965 -110.01060486]
[60.22569275 -113.45549774]
[47.28172302 -121.28549194]
[37.39241409 -132.73348999]
[31.52661705 -146.67794800]
[30.25900459 -161.75270081]
[33.71376419 -176.48089600]
[41.55243301 -189.41961670]
[53.00705719 -199.30125427]
[66.95542908 -205.15769958]
[82.03103638 -206.41522217]
[96.75691986 -202.95059204]
[109.69038391 -195.10325623]
[119.56433868 -183.64201355]
[125.41144562 -169.68971252]
[126.65885162 -154.61326599]
[123.18435669 -139.88970947]
[115.32835388 -126.96150970]
[103.86049652 -117.09523010]
[89.90428925 -111.25747681]
[91.15116119 -96.30939484]
[92.39804077 -81.36130524]
[93.64491272 -66.41321564]
[94.89178467 -51.46512985]
[109.85825348 -51.23027039]
[124.72854614 -49.52016068]
[139.35762024 -46.35148621]
[153.60275269 -41.75515747]
[167.32499695 -35.77600861]
[180.39048767 -28.47236633]
[192.67176819 -19.91547966]
[204.04904175 -10.18881989]
[214.41131592 0.61272907]
[223.65751648 12.38379860]
[231.69743347 25.00956345]
[245.08372498 18.24144745]
[258.47000122 11.47333336]
[269.87698364 -1.06927264]
[285.08718872 6.41978693]
[282.10140991 23.10874939]
[265.23812866 24.85961914]
[251.85183716 31.62773323]
[238.46554565 38.39584732]
[242.11581421 47.36087799]
[245.18630981 56.54064560]
[247.66453552 65.89770508]
[249.54035950 75.39388275]
[250.80613708 84.99044037]
[251.45672607 94.64823151]
[251.48944092 104.32785034]
[250.90415955 113.98981476]
[249.70327759 123.59471130]
[247.89167786 133.10334778]
[245.47676086 142.47695923]
[242.46838379 151.67726135]
[238.87881470 160.66676331]
[234.72268677 169.40878296]
[230.01696777 177.86764526]
[224.78083801 186.00883484]
[219.03569031 193.79917908]
[212.80493164 201.20686340]
[206.11398315 208.20167542]
[198.99015808 214.75508118]
[191.46249390 220.84036255]
[183.56172180 226.43266296]
[175.32006836 231.50920105]
[166.77113342 236.04924011]
[157.94981384 240.03427124]
[148.89210510 243.44804382]
[139.63493347 246.27662659]
[130.21606445 248.50848389]
[120.67393494 250.13450623]
[111.04747009 251.14805603]
[101.37593842 251.54499817]
[91.69879150 251.32373047]
[82.05550385 250.48513794]
[72.48542786 249.03263855]
[63.02759171 246.97218323]
[53.72058487 244.31214905]
[44.60237503 241.06340027]
[35.71015549 237.23919678]
[27.08020401 232.85511780]
[18.74772644 227.92907715]
[10.74671268 222.48114014]
[3.10980558 216.53355408]
[-4.13184214 210.11058044]
[-10.94868851 203.23840332]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 47]
[2 46]
[3 45]
[5 43]
[6 42]
[7 41]
[8 40]
[9 39]
[10 38]
[11 37]
[12 36]
[13 35]
[17 34]
[18 33]
[60 87]
[61 86]
[62 85]
[63 84]
[64 83]
[98 106]
[99 105]
[100 104]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
