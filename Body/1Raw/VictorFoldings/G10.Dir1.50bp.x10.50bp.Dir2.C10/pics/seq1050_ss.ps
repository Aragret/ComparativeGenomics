%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:33:59 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCAGCUCAAAACGCUUAGCCUAGCCACACCCCCACGGGAAACAGCAGUGAUUAACCUUUAGCxxxxxxxxxxAACCUCAACAGUUAAAUCAACAAAACUGCUCGCCAGAACACUACGAGCCACAGCUUAAAACCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[-42.39115524 226.71783447]
[-53.98020554 236.24116516]
[-65.56925201 245.76449585]
[-77.15830231 255.28784180]
[-88.74735260 264.81118774]
[-94.49707794 279.55062866]
[-109.24253845 281.65316772]
[-114.99227142 296.39260864]
[-129.73773193 298.49514771]
[-141.32678223 308.01849365]
[-152.91583252 317.54183960]
[-164.40649414 327.18365479]
[-175.79756165 336.94290161]
[-187.08784485 346.81863403]
[-198.27613831 356.80972290]
[-195.06605530 371.82940674]
[-199.81115723 386.43692017]
[-211.23503113 396.70294189]
[-226.26469421 399.86590576]
[-240.85726929 395.07504272]
[-251.08741760 383.61904907]
[-254.20327759 368.57955933]
[-249.36669922 354.00207520]
[-237.87869263 343.80789185]
[-222.82949829 340.73916626]
[-208.26724243 345.62142944]
[-197.07894897 335.63034058]
[-194.16668701 328.78701782]
[-185.55683899 325.55184937]
[-174.16577148 315.79257202]
[-171.11361694 309.01049805]
[-162.43916321 305.95278931]
[-150.85011292 296.42944336]
[-139.26106262 286.90609741]
[-134.34025574 272.84783936]
[-118.76587677 270.06411743]
[-113.84506989 256.00585938]
[-98.27069092 253.22213745]
[-86.68164062 243.69879150]
[-75.09259033 234.17546082]
[-63.50354385 224.65211487]
[-51.91449356 215.12878418]
[-58.59085846 205.74304199]
[-64.68813324 195.97117615]
[-70.18406677 185.84889221]
[-75.05858612 175.41313171]
[-79.29389191 164.70201111]
[-82.87451935 153.75462341]
[-85.78739166 142.61096191]
[-88.02187347 131.31172180]
[-89.56980896 119.89813232]
[-90.42555237 108.41189575]
[-90.58596039 96.89493561]
[-90.05046082 85.38932037]
[-88.82100677 73.93704987]
[-86.90208435 62.57995224]
[-84.30070496 51.35948563]
[-81.02636719 40.31663132]
[-77.09101868 29.49170303]
[-72.50904083 18.92423058]
[-67.29715729 8.65280151]
[-61.47439957 -1.28508079]
[-55.06203079 -10.85312748]
[-48.08346558 -20.01640320]
[-40.56418228 -28.74144745]
[-32.53163910 -36.99639893]
[-24.01516914 -44.75112152]
[-15.04586506 -51.97729492]
[-5.65647984 -58.64853668]
[4.11870241 -64.74047852]
[14.24398804 -70.23088837]
[24.68240547 -75.09971619]
[35.39583969 -79.32917023]
[46.34517288 -82.90382385]
[57.49042130 -85.81061554]
[68.79088593 -88.03893280]
[80.20531464 -89.58064270]
[91.69201660 -90.43010712]
[103.20906067 -90.58423615]
[114.71438599 -90.04245758]
[126.16597748 -88.80675507]
[137.52203369 -86.88163757]
[148.74107361 -84.27413940]
[159.78215027 -80.99376678]
[170.60491943 -77.05252075]
[181.16989136 -72.46477509]
[191.43847656 -67.24728394]
[201.37318420 -61.41910553]
[210.93772888 -55.00151825]
[220.09719849 -48.01795197]
[228.81813049 -40.49390793]
[237.06869507 -32.45686340]
[248.25700378 -42.44795990]
[259.44528198 -52.43905640]
[261.78265381 -68.31092834]
[275.72100830 -76.25460052]
[290.56802368 -70.17636871]
[294.93438721 -54.73893356]
[285.47055054 -41.78456879]
[269.43640137 -41.25076294]
[258.24810791 -31.25966454]
[247.05979919 -21.26856804]
[260.29525757 -3.14108610]
[271.30807495 16.41653252]
[279.94555664 37.13310623]
[286.08795166 58.72138214]
[289.65008545 80.88201904]
[290.58255005 103.30774689]
[288.87243652 125.68760681]
[303.64456177 128.29232788]
[318.41665649 130.89704895]
[333.18878174 133.50177002]
[347.96090698 136.10649109]
[358.99343872 129.34729004]
[371.27548218 131.86181641]
[378.29827881 141.75840759]
[393.01379395 144.66587830]
[408.35281372 138.86535645]
[420.87268066 149.45709229]
[417.69400024 165.54522705]
[402.08676147 170.57966614]
[390.10632324 159.38139343]
[375.39080811 156.47392273]
[359.14489746 163.04011536]
[345.35617065 150.87861633]
[330.58404541 148.27389526]
[315.81195068 145.66917419]
[301.03982544 143.06443787]
[286.26770020 140.45971680]
[281.98999023 156.67706299]
[276.30325317 172.45559692]
[269.25149536 187.67315674]
[260.88931274 202.21191406]
[251.28149414 215.95930481]
[240.50238037 228.80888367]
[228.63545227 240.66119385]
[215.77256775 251.42443848]
[202.01333618 261.01531982]
[187.46427917 269.35952759]
[172.23803711 276.39251709]
[156.45249939 282.05978394]
[140.22988892 286.31747437]
[123.69580078 289.13265991]
[106.97825623 290.48345947]
[90.20667267 290.35949707]
[73.51091766 288.76168823]
[57.02025604 285.70242310]
[40.86235428 281.20538330]
[25.16232300 275.30535889]
[10.04170990 268.04806519]
[-4.38241053 259.48968506]
[-17.99836349 249.69647217]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 42]
[2 41]
[3 40]
[4 39]
[5 38]
[7 36]
[9 34]
[10 33]
[11 32]
[12 30]
[13 29]
[14 27]
[15 26]
[92 102]
[93 101]
[94 100]
[109 129]
[110 128]
[111 127]
[112 126]
[113 125]
[116 123]
[117 122]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
