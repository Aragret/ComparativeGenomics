%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:32 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCAAUAAAACUAGGAAUAGCCCCCUUUCACUUCUGAGUCCCAGAGGUUACCCAAGGCACCCCxxxxxxxxxxCAUUUUCCUUAUCUGCUUCCUAGUCCUGUAUGCCCUUUUCCUAACACUCACAACAAAACUACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[243.09346008 407.85446167]
[242.17004395 392.88290405]
[241.24662781 377.91137695]
[240.32321167 362.93981934]
[239.39979553 347.96826172]
[238.47637939 332.99670410]
[237.55297852 318.02517700]
[232.71315002 303.82742310]
[224.29974365 291.40908813]
[215.88633728 278.99078369]
[207.47293091 266.57247925]
[199.05950928 254.15415955]
[183.32839966 256.79534912]
[167.96028137 252.30973816]
[156.03370667 241.54318237]
[149.96064758 226.60501099]
[150.99887085 210.45480347]
[158.99180603 196.31611633]
[150.32519531 184.07316589]
[141.65858459 171.83020020]
[132.99198914 159.58724976]
[124.32537842 147.34429932]
[115.65876770 135.10134888]
[106.99216461 122.85839081]
[98.32555389 110.61544037]
[86.35529327 101.57592010]
[77.15817261 101.66944885]
[71.97048950 96.34027863]
[57.92850876 91.06553650]
[43.88653183 85.79079437]
[33.99479294 97.25285339]
[20.80311584 104.62520599]
[5.91306734 107.03491211]
[-8.87513638 104.21018982]
[-21.78027534 96.51091003]
[-31.25467110 84.88291168]
[-36.16978455 70.74181366]
[-35.95063019 55.80068207]
[-49.99260712 50.52594376]
[-64.03458405 45.25120163]
[-78.07656097 39.97645950]
[-92.11853790 34.70171738]
[-106.16051483 29.42697525]
[-120.20249176 24.15223503]
[-135.34674072 29.44668388]
[-148.85115051 20.78582764]
[-150.35629272 4.81353664]
[-138.70755005 -6.21761656]
[-122.84084320 -3.84547472]
[-114.92774963 10.11025810]
[-100.88577271 15.38499928]
[-86.84379578 20.65974045]
[-72.80181885 25.93448257]
[-58.75984192 31.20922470]
[-44.71786499 36.48396683]
[-30.67588806 41.75870895]
[-21.00389862 30.36845207]
[-7.99413919 22.96066856]
[6.79274511 20.44620132]
[21.57530785 23.14755821]
[34.56591797 30.75769043]
[44.18693542 42.37475586]
[49.26230240 56.60896301]
[49.16127396 71.74881744]
[63.20325089 77.02355957]
[77.24523163 82.29830170]
[91.34061432 87.42860413]
[81.99607849 75.69490814]
[75.07125854 62.38901138]
[70.82244110 48.00334167]
[69.40685272 33.07028580]
[70.87689972 18.14249420]
[75.17816162 3.77241707]
[82.15147400 -9.50813198]
[91.53874969 -21.20766258]
[102.99259186 -30.89319420]
[116.08910370 -38.20628357]
[130.34361267 -42.87628555]
[145.22859192 -44.73036575]
[160.19316101 -43.69991684]
[174.68350220 -39.82306671]
[188.16336060 -33.24329376]
[200.13386536 -24.20410538]
[210.15200806 -13.04002380]
[217.84704590 -0.16421571]
[222.93418884 13.94680882]
[225.22515869 28.77082253]
[224.63519287 43.75921631]
[221.18612671 58.35729218]
[215.00556946 72.02480316]
[206.32229614 84.25593567]
[195.45762634 94.59803772]
[182.81365967 102.66835785]
[168.85832214 108.16824341]
[154.10809326 110.89413452]
[139.10882568 110.74516296]
[124.41564178 107.72683716]
[110.56850433 101.94882965]
[119.23511505 114.19178772]
[127.90172577 126.43473816]
[136.56832886 138.67768860]
[145.23493958 150.92063904]
[153.90155029 163.16360474]
[162.56814575 175.40655518]
[171.23475647 187.64950562]
[185.10368347 184.76513672]
[198.98025513 187.38810730]
[210.76687622 195.08816528]
[218.69474792 206.67022705]
[221.58932495 220.35966492]
[219.04420471 234.07421875]
[211.47782898 245.74075317]
[219.89123535 258.15905762]
[228.30465698 270.57739258]
[236.71806335 282.99569702]
[245.13146973 295.41400146]
[244.38520813 280.43258667]
[246.92950439 265.64993286]
[252.64146423 251.78005981]
[261.24523926 239.49285889]
[272.32522583 229.38179016]
[285.34628296 221.93521118]
[299.67953491 217.51277161]
[314.63269043 216.32809448]
[329.48348999 218.43838501]
[343.51470947 223.74171448]
[356.04861450 231.98194885]
[366.47982788 242.76107788]
[374.30453491 255.55850220]
[379.14483643 269.75607300]
[380.76690674 284.66812134]
[379.09243774 299.57437134]
[374.20227051 313.75485229]
[366.33264160 326.52471924]
[355.86361694 337.26712036]
[343.30084229 345.46325684]
[329.25109863 350.71725464]
[314.39294434 352.77532959]
[299.44406128 351.53811646]
[285.12643433 347.06533813]
[272.13162231 339.57305908]
[261.08721924 329.42312622]
[252.52452087 317.10174561]
[253.44793701 332.07330322]
[254.37135315 347.04486084]
[255.29476929 362.01641846]
[256.21817017 376.98794556]
[257.14160156 391.95950317]
[258.06500244 406.93106079]
[267.56942749 420.29510498]
[260.50292969 435.09362793]
[244.13487244 436.10317993]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 149]
[2 148]
[3 147]
[4 146]
[5 145]
[6 144]
[7 143]
[8 116]
[9 115]
[10 114]
[11 113]
[12 112]
[18 105]
[19 104]
[20 103]
[21 102]
[22 101]
[23 100]
[24 99]
[25 98]
[26 67]
[28 66]
[29 65]
[30 64]
[38 56]
[39 55]
[40 54]
[41 53]
[42 52]
[43 51]
[44 50]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
