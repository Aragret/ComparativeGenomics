%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:47 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGGCCAACCCCAUGGCCUCCAUGACUUUUUCAAAAAGGUAUUAGAAAAACCAUUUCAUAACUxxxxxxxxxxCCACCACCCCAUCAUACUCUUUCACCCACAGCACCAAUCCUACCUCCAUCGCUAACCCCACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[89.05136108 278.04309082]
[88.73930359 263.04632568]
[88.42724609 248.04957581]
[88.11518860 233.05282593]
[87.80313110 218.05607605]
[87.49107361 203.05931091]
[87.17902374 188.06256104]
[86.86696625 173.06581116]
[86.55490875 158.06906128]
[72.48339081 152.87364197]
[62.50066376 164.06941223]
[52.51793671 175.26516724]
[42.53520966 186.46093750]
[32.55248260 197.65670776]
[33.70633316 213.41882324]
[23.31364250 225.32543945]
[7.54021168 226.31257629]
[-4.25586271 215.79458618]
[-5.07617950 200.01159668]
[5.56594038 188.32737732]
[21.35671616 187.67398071]
[31.33944321 176.47821045]
[41.32217026 165.28244019]
[51.30489731 154.08668518]
[61.28762436 142.89091492]
[57.19079971 137.56071472]
[53.79967499 131.86672974]
[51.14250565 125.89970398]
[49.23616028 119.75193787]
[48.08611679 113.51588440]
[33.18421555 115.22857666]
[18.28231239 116.94126129]
[7.22159195 128.56193542]
[-8.74682331 127.01620483]
[-17.37333107 113.48983002]
[-12.04041386 98.35907745]
[3.16097140 93.23097992]
[16.56962204 102.03936005]
[31.47152519 100.32666779]
[46.37342834 98.61398315]
[52.18772888 75.67475891]
[67.30642700 57.46929550]
[88.78737640 47.54042053]
[112.45034027 47.82031631]
[117.93737030 33.85992432]
[123.42440033 19.89953613]
[128.91143799 5.93914604]
[134.39846802 -8.02124405]
[120.94535065 -14.67613983]
[108.10508728 -22.44797516]
[95.97018433 -31.28075027]
[84.62807465 -41.11082458]
[74.16047668 -51.86737442]
[64.64282227 -63.47288895]
[56.14367676 -75.84375763]
[48.72428131 -88.89084625]
[42.43809509 -102.52014160]
[37.33041000 -116.63344574]
[33.43802643 -131.12907410]
[30.78899193 -145.90257263]
[29.40239143 -160.84751892]
[29.28821564 -175.85620117]
[30.44728661 -190.82051086]
[32.87125397 -205.63261414]
[36.54265594 -220.18577576]
[41.43503189 -234.37515259]
[47.51314163 -248.09851074]
[54.73318100 -261.25695801]
[63.04313278 -273.75570679]
[72.38312531 -285.50466919]
[82.68585968 -296.41921997]
[93.87710571 -306.42071533]
[105.87622833 -315.43710327]
[118.59677124 -323.40338135]
[131.94708252 -330.26217651]
[145.83096313 -335.96408081]
[160.14839172 -340.46798706]
[174.79618835 -343.74145508]
[189.66883850 -345.76089478]
[204.65917969 -346.51174927]
[219.65917969 -345.98864746]
[234.56079102 -344.19531250]
[249.25662231 -341.14468384]
[263.64080811 -336.85876465]
[277.60968018 -331.36837769]
[291.06262207 -324.71313477]
[303.90267944 -316.94097900]
[316.03735352 -308.10787964]
[327.37921143 -298.27752686]
[337.84652710 -287.52072144]
[347.36389160 -275.91494751]
[355.86273193 -263.54385376]
[363.28176880 -250.49658203]
[369.56759644 -236.86712646]
[374.67492676 -222.75367737]
[378.56692505 -208.25794983]
[381.21560669 -193.48437500]
[382.60180664 -178.53941345]
[382.71560669 -163.53071594]
[381.55612183 -148.56643677]
[379.13177490 -133.75440979]
[375.46002197 -119.20133209]
[370.56726074 -105.01207733]
[364.48880005 -91.28887939]
[357.26843262 -78.13061523]
[348.95816040 -65.63209534]
[339.61785889 -53.88335800]
[329.31481934 -42.96907043]
[318.12332153 -32.96786880]
[306.12396240 -23.95180702]
[293.40322876 -15.98585224]
[280.05273438 -9.12739944]
[266.16870117 -3.42586350]
[251.85116577 1.07767427]
[237.20327759 4.35076571]
[222.33058167 6.36982727]
[207.34022522 7.12031126]
[192.34024048 6.59681082]
[177.43867493 4.80309772]
[162.74291992 1.75209570]
[148.35885620 -2.53421211]
[142.87182617 11.42617798]
[137.38479614 25.38656807]
[131.89776611 39.34695816]
[126.41072845 53.30734634]
[133.77880859 57.99398041]
[140.32203674 63.83975220]
[145.85868835 70.70049286]
[150.23207092 78.40364075]
[153.31498718 86.75259399]
[155.01332092 95.53170776]
[155.26896667 104.51186371]
[154.06159973 113.45645905]
[151.40965271 122.12761688]
[147.37014771 130.29254150]
[142.03750610 137.72976685]
[135.54144287 144.23509216]
[128.04379272 149.62730408]
[119.73448181 153.75306702]
[110.82675171 156.49136353]
[101.55165863 157.75700378]
[101.86371613 172.75375366]
[102.17577362 187.75050354]
[102.48783112 202.74725342]
[102.79988861 217.74401855]
[103.11194611 232.74076843]
[103.42399597 247.73751831]
[103.73605347 262.73428345]
[104.04811096 277.73101807]
[106.63910675 296.93875122]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 149]
[2 148]
[3 147]
[4 146]
[5 145]
[6 144]
[7 143]
[8 142]
[9 141]
[10 25]
[11 24]
[12 23]
[13 22]
[14 21]
[30 40]
[31 39]
[32 38]
[44 125]
[45 124]
[46 123]
[47 122]
[48 121]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
