%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:47 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCCCAUACUACUAAUCUCAUCAAUACAACCCCCGCCCAUCCUACCCAGCACACACACACCGCxxxxxxxxxxAAAAUGCCCUAGCCCACUUCUUACCACAAGGCACACCUACACCCCUUAUCCCCAUACUAGUCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[-81.33882904 234.71563721]
[-93.67011261 243.25610352]
[-106.00139618 251.79655457]
[-112.94097900 266.01458740]
[-127.80922699 266.90032959]
[-140.14050293 275.44079590]
[-152.47178650 283.98123169]
[-164.80307007 292.52169800]
[-177.13436890 301.06216431]
[-171.31750488 314.94949341]
[-168.51547241 329.74279785]
[-168.85078430 344.79544067]
[-172.30876160 359.44931030]
[-178.73823547 373.06384277]
[-187.85815430 385.04385376]
[-199.26982117 394.86563110]
[-212.47438049 402.09982300]
[-226.89456177 406.43017578]
[-241.89999390 407.66738892]
[-256.83468628 405.75735474]
[-271.04580688 400.78359985]
[-283.91204834 392.96353149]
[-294.87097168 382.63900757]
[-303.44351196 370.26141357]
[-309.25491333 356.37179565]
[-312.05111694 341.57736206]
[-311.70989990 326.52490234]
[-308.24615479 311.87237549]
[-301.81130981 298.26037598]
[-292.68667603 286.28393555]
[-281.27114868 276.46664429]
[-268.06375122 269.23764038]
[-253.64187622 264.91296387]
[-238.63595581 263.68167114]
[-223.70199585 265.59759521]
[-209.49285889 270.57693481]
[-196.62968445 278.40206909]
[-185.67481995 288.73089600]
[-173.34353638 280.19042969]
[-161.01225281 271.64996338]
[-148.68096924 263.10949707]
[-136.34968567 254.56904602]
[-130.29211426 240.96186829]
[-114.54185486 239.46527100]
[-102.21057129 230.92481995]
[-89.87928772 222.38435364]
[-97.48135376 209.69589233]
[-104.23676300 196.53713989]
[-110.11655426 182.96450806]
[-115.09552002 169.03617859]
[-119.15230560 154.81187439]
[-122.26953125 140.35256958]
[-124.43383026 125.72026825]
[-125.63591003 110.97769928]
[-125.87063599 96.18806458]
[-125.13698578 81.41477203]
[-123.43811798 66.72115326]
[-120.78131104 52.17021942]
[-117.17794800 37.82434082]
[-112.64349365 23.74502754]
[-107.19737244 9.99263859]
[-100.86293793 -3.37386346]
[-93.66735077 -16.29717445]
[-85.64145660 -28.72188568]
[-76.81967163 -40.59473419]
[-67.23980713 -51.86481094]
[-56.94294357 -62.48380661]
[-45.97322464 -72.40618896]
[-34.37767410 -81.58941650]
[-22.20601463 -89.99411774]
[-9.51042080 -97.58426666]
[3.65467215 -104.32731628]
[17.23282433 -110.19435883]
[31.16582108 -115.16024780]
[45.39393234 -119.20367432]
[59.85615158 -122.30732727]
[74.49047852 -124.45787811]
[89.23416901 -125.64611816]
[104.02401733 -125.86695862]
[118.79661560 -125.11943817]
[133.48863220 -123.40677643]
[148.03706360 -120.73630524]
[162.37954712 -117.11947632]
[176.45460510 -112.57179260]
[190.20187378 -107.11276245]
[203.56242371 -100.76578522]
[216.47897339 -93.55806732]
[224.63563538 -106.14650726]
[224.93624878 -122.54289246]
[239.41528320 -130.24288940]
[253.17791748 -121.32540894]
[252.06636047 -104.96397400]
[237.22407532 -97.98983765]
[229.06741333 -85.40139771]
[239.49975586 -77.68480682]
[249.47183228 -69.38195038]
[258.95074463 -60.52021408]
[267.90518188 -51.12884903]
[276.30560303 -41.23883057]
[284.12432861 -30.88279915]
[291.33554077 -20.09492111]
[297.91543579 -8.91078949]
[303.84228516 2.63269043]
[309.09658813 14.49743271]
[313.66098022 26.64429092]
[317.52038574 39.03318405]
[320.66210938 51.62323761]
[323.07574463 64.37290955]
[324.75332642 77.24013519]
[325.68936157 90.18244934]
[340.68856812 90.02845764]
[355.68777466 89.87445831]
[369.52191162 81.06826019]
[383.93835449 88.88479614]
[384.10671997 105.28308105]
[369.85379028 113.39396667]
[355.84179688 104.87366486]
[340.84255981 105.02766418]
[325.84335327 105.18166351]
[324.90997314 121.15605164]
[322.84811401 137.02429199]
[319.66809082 152.70677185]
[315.38589478 168.12478638]
[310.02301025 183.20100403]
[303.60635376 197.85974121]
[296.16809082 212.02748108]
[287.74554443 225.63311768]
[278.38101196 238.60839844]
[268.12145996 250.88821411]
[257.01834106 262.41094971]
[245.12739563 273.11877441]
[232.50827026 282.95800781]
[219.22428894 291.87924194]
[205.34210205 299.83770752]
[190.93136597 306.79351807]
[176.06439209 312.71173096]
[160.81575012 317.56268311]
[145.26197815 321.32199097]
[129.48109436 323.97085571]
[113.55229950 325.49591064]
[97.55550385 325.88958740]
[81.57097626 325.14984131]
[65.67890930 323.28039551]
[49.95904922 320.29067993]
[34.49027252 316.19561768]
[19.35018539 311.01583862]
[4.61475849 304.77728271]
[-9.64207458 297.51123047]
[-23.34878159 289.25421143]
[-36.43658829 280.04757690]
[-48.83982468 269.93759155]
[-60.49626160 258.97491455]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 46]
[2 45]
[3 44]
[5 42]
[6 41]
[7 40]
[8 39]
[9 38]
[87 94]
[88 93]
[110 119]
[111 118]
[112 117]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
