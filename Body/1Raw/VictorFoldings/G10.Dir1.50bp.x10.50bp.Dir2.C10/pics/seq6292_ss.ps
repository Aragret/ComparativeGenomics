%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:43 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGAUUAUUCGGCGCAUGAGCUGGAGUCCUAGGCACAGCUCUAAGCCUCCUUAUUCGAGCCGAxxxxxxxxxxCCGCACCAAUAGGAUCCUCCCGAAUCAACCCUGACCCCUCUCCUUCAUAAAUUAUUCAGCCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[100.72405243 280.06765747]
[100.72405243 265.06765747]
[100.72405243 250.06764221]
[100.72405243 235.06764221]
[100.72405243 220.06764221]
[100.72405243 205.06764221]
[100.72405243 190.06764221]
[100.72405243 175.06764221]
[100.72405243 160.06764221]
[100.72405243 145.06764221]
[77.43264771 136.42355347]
[63.33950806 117.49903870]
[61.90417099 95.19709015]
[72.24506378 76.80343628]
[62.98011780 65.00679779]
[53.71516800 53.21015930]
[44.45021820 41.41352081]
[35.18526840 29.61688042]
[25.92032051 17.82024002]
[13.21510220 18.45614243]
[2.18570876 12.74960804]
[-10.59164810 20.60703278]
[-17.91398239 35.28066635]
[-34.29708481 36.00593948]
[-42.88742447 22.03675270]
[-34.84799576 7.74341106]
[-18.44907379 7.82967615]
[-5.67171717 -0.02774971]
[-5.48512506 -11.38850784]
[-0.00081219 -21.33958435]
[-7.18332100 -34.50816727]
[-14.36583042 -47.67675018]
[-21.26751900 -53.76103592]
[-21.55753708 -61.19484711]
[-28.46453667 -74.51000214]
[-35.37153625 -87.82515717]
[-42.27853394 -101.14031219]
[-49.18553162 -114.45546722]
[-56.36804199 -127.62405396]
[-63.82295227 -140.64036560]
[-77.54553223 -139.10801697]
[-90.99810791 -144.18943787]
[-101.05342102 -155.25643921]
[-105.12985229 -170.23728943]
[-101.83740997 -185.99542236]
[-112.71623230 -196.32263184]
[-123.59506226 -206.64984131]
[-134.47389221 -216.97705078]
[-145.66964722 -226.95976257]
[-157.17144775 -236.58830261]
[-168.67326355 -246.21682739]
[-180.17506409 -255.84535217]
[-196.41290283 -258.13986206]
[-202.29293823 -273.44857788]
[-191.76629639 -286.02322388]
[-175.66188049 -282.92807007]
[-170.54653931 -267.34713745]
[-159.04473877 -257.71862793]
[-147.54292297 -248.09010315]
[-136.04112244 -238.46157837]
[-132.45410156 -238.43440247]
[-128.70753479 -236.62747192]
[-125.65685272 -232.98802185]
[-124.14668274 -227.85586548]
[-113.26785278 -217.52867126]
[-102.38903046 -207.20146179]
[-91.51020813 -196.87425232]
[-77.72782135 -202.79421997]
[-77.72782135 -217.79421997]
[-91.50169373 -224.37017822]
[-101.05162048 -236.27655029]
[-104.48146057 -251.14930725]
[-101.11021423 -266.03546143]
[-91.60724640 -277.97933960]
[-77.85938263 -284.60949707]
[-62.59626389 -284.60949707]
[-48.84840012 -277.97933960]
[-39.34543228 -266.03546143]
[-35.97418976 -251.14930725]
[-39.40402985 -236.27655029]
[-48.95395279 -224.37017822]
[-62.72782135 -217.79421997]
[-62.72782135 -202.79421997]
[-44.31071472 -187.94265747]
[-40.29078674 -166.06809998]
[-50.80664062 -148.09527588]
[-43.35173035 -135.07896423]
[-38.99940491 -132.97355652]
[-35.95534897 -128.07814026]
[-35.87037659 -121.36246490]
[-28.96337891 -108.04730988]
[-22.05637932 -94.73215485]
[-15.14938068 -81.41699982]
[-8.24238205 -68.10184479]
[-1.19724739 -54.85926056]
[5.98526144 -41.69067764]
[13.16777039 -28.52209473]
[30.90171051 -25.01260948]
[41.18804932 -9.78836918]
[37.71696091 8.55529022]
[46.98191071 20.35193062]
[56.24686050 32.14857101]
[65.51181030 43.94520950]
[74.77675629 55.74185181]
[84.04170990 67.53849030]
[95.22805786 62.86164474]
[107.74195099 62.06667709]
[120.23019409 65.50805664]
[131.25585938 73.06785583]
[139.46293640 84.14141846]
[143.74034119 97.68005371]
[143.36596680 112.28858185]
[157.86157227 116.14573669]
[172.35716248 120.00289917]
[183.14170837 109.06721497]
[197.95350647 105.00438690]
[212.80822754 108.90729523]
[223.71005249 119.72606659]
[227.72642517 134.55052185]
[223.77697754 149.39292908]
[212.92408752 160.26078796]
[198.08712769 164.23068237]
[183.25715637 160.23474121]
[172.42337036 149.34782410]
[168.50000000 134.49848938]
[154.00440979 130.64134216]
[139.50881958 126.78417969]
[133.56262207 131.35504150]
[144.43447876 141.68957520]
[155.30635071 152.02410889]
[166.17820740 162.35864258]
[178.97673035 170.18154907]
[182.64591980 184.72586060]
[175.08990479 197.68374634]
[160.62474060 201.65351868]
[147.51307678 194.36763000]
[143.24440002 179.98799133]
[136.05300903 166.82424927]
[128.86163330 153.66052246]
[121.67024231 140.49678040]
[115.72405243 145.06764221]
[115.72405243 160.06764221]
[115.72405243 175.06764221]
[115.72405243 190.06764221]
[115.72405243 205.06764221]
[115.72405243 220.06764221]
[115.72405243 235.06764221]
[115.72405243 250.06764221]
[115.72405243 265.06765747]
[115.72405243 280.06765747]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[14 105]
[15 104]
[16 103]
[17 102]
[18 101]
[19 100]
[21 28]
[22 27]
[30 97]
[31 96]
[32 95]
[34 94]
[35 93]
[36 92]
[37 91]
[38 90]
[39 87]
[40 86]
[45 67]
[46 66]
[47 65]
[48 64]
[49 60]
[50 59]
[51 58]
[52 57]
[68 83]
[69 82]
[112 127]
[113 126]
[114 125]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
