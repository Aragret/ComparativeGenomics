%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:09 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGAUCAUCCCUCUACUAUUUUUUAACCAAAUCAACAACAACCUAUUUAGCUGUUCCCCAACCUUUUCCxxxxxxxxxxACCCAAUCCACAUCAAAACCCCCUCCCCAUGCUUACAAGCAAGUACAGCAAUCAACCCUCAACUAUCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[87.67768097 100.14780426]
[75.69718170 91.12186432]
[63.71668243 82.09591675]
[51.73618317 73.06997681]
[39.75568390 64.04403687]
[27.77518463 55.01809311]
[15.79468441 45.99214935]
[3.81418538 36.96620560]
[-8.16631413 27.94026375]
[-20.14681244 18.91432190]
[-29.94038963 30.28305435]
[-40.45655441 40.98691177]
[-51.65026855 50.98006058]
[-63.47359848 60.21970749]
[-75.87592316 68.66628265]
[-88.80412292 76.28362274]
[-102.20285034 83.03910065]
[-116.01470947 88.90379333]
[-130.18057251 93.85259247]
[-144.63977051 97.86429596]
[-159.33039856 100.92173004]
[-174.18952942 103.01180267]
[-189.15354919 104.12555695]
[-204.15837097 104.25823975]
[-219.13973999 103.40926361]
[-234.03350830 101.58227539]
[-248.77589417 98.78509521]
[-263.30377197 95.02970886]
[-277.55493164 90.33218384]
[-291.46835327 84.71264648]
[-304.98443604 78.19515228]
[-318.04531860 70.80761719]
[-330.59506226 62.58167648]
[-342.57992554 53.55255127]
[-353.94860840 43.75890732]
[-364.65240479 33.24268341]
[-374.64547729 22.04890823]
[-383.88507080 10.22552013]
[-392.33157349 -2.17685175]
[-399.94882202 -15.10509872]
[-406.70422363 -28.50386047]
[-412.56884766 -42.31576157]
[-417.51754761 -56.48165131]
[-421.52917480 -70.94087982]
[-424.58651733 -85.63151550]
[-426.67651367 -100.49066162]
[-427.79016113 -115.45468903]
[-427.92276001 -130.45950317]
[-427.07369995 -145.44087219]
[-425.24661255 -160.33462524]
[-422.44937134 -175.07701111]
[-418.69387817 -189.60485840]
[-413.99627686 -203.85598755]
[-408.37664795 -217.76937866]
[-401.85906982 -231.28541565]
[-394.47146606 -244.34625244]
[-386.24545288 -256.89596558]
[-377.21624756 -268.88076782]
[-367.42254639 -280.24938965]
[-356.90625000 -290.95312500]
[-345.71243286 -300.94613647]
[-333.88897705 -310.18563843]
[-321.48657227 -318.63208008]
[-308.55825806 -326.24926758]
[-295.15948486 -333.00457764]
[-281.34753418 -338.86911011]
[-267.18161011 -343.81774902]
[-252.72236633 -347.82928467]
[-238.03170776 -350.88653564]
[-223.17254639 -352.97644043]
[-208.20852661 -354.09002686]
[-193.20370483 -354.22250366]
[-178.22233582 -353.37335205]
[-163.32858276 -351.54620361]
[-148.58622742 -348.74884033]
[-134.05839539 -344.99328613]
[-119.80729675 -340.29559326]
[-105.89394379 -334.67590332]
[-92.37793732 -328.15823364]
[-79.31714630 -320.77056885]
[-66.76749420 -312.54446411]
[-54.78273392 -303.51519775]
[-43.41417313 -293.72140503]
[-32.71049881 -283.20507812]
[-22.71755028 -272.01116943]
[-13.47811413 -260.18768311]
[-5.03175688 -247.78520203]
[2.58535218 -234.85687256]
[9.34059525 -221.45802307]
[15.20504570 -207.64605713]
[20.15358925 -193.48011780]
[24.16503716 -179.02084351]
[27.22221184 -164.33016968]
[29.31202126 -149.47099304]
[30.42551422 -134.50695801]
[30.55792618 -119.50213623]
[29.70868874 -104.52077484]
[27.88143730 -89.62703705]
[25.08399963 -74.88469696]
[21.32835007 -60.35688400]
[16.63057518 -46.10580826]
[11.01078987 -32.19249725]
[4.49305964 -18.67652702]
[-2.89470577 -5.61577797]
[-11.12087059 6.93382263]
[0.85962880 15.95976543]
[12.84012794 24.98570824]
[24.82062721 34.01165009]
[36.80112457 43.03759384]
[48.78162384 52.06353378]
[60.76212311 61.08947754]
[72.74262238 70.11541748]
[84.72312164 79.14136505]
[96.70362091 88.16730499]
[104.66418457 88.68065643]
[110.60489655 93.96467590]
[125.44845581 96.12541199]
[140.29202271 98.28614807]
[155.13557434 100.44688416]
[169.99926758 102.46446991]
[184.88171387 104.33873749]
[199.76416016 106.21299744]
[212.09300232 96.32485962]
[227.79342651 98.13372803]
[237.55065918 110.56642151]
[235.57589722 126.24685669]
[223.04074097 135.87210083]
[207.38206482 133.73165894]
[197.88989258 121.09544373]
[183.00744629 119.22117615]
[168.12500000 117.34691620]
[161.06178284 119.64220428]
[152.97483826 115.29043579]
[138.13128662 113.12970734]
[123.28771973 110.96897125]
[108.44416809 108.80823517]
[120.27845764 118.02503967]
[129.89736938 129.53488159]
[136.86630249 142.81773376]
[140.87037659 157.27343750]
[141.72869873 172.24885559]
[139.40246582 187.06738281]
[133.99678040 201.05947876]
[125.75591278 213.59294128]
[115.05216980 224.10151672]
[102.36918640 232.11036682]
[88.27999115 237.25767517]
[73.42117310 239.31083679]
[58.46407700 238.17712402]
[44.08449936 233.90773010]
[30.93213272 226.69557190]
[19.60123062 216.86650085]
[10.60374355 204.86460876]
[4.34619761 191.23217773]
[1.11131966 176.58514404]
[1.04526865 161.58529663]
[4.15102863 146.91033936]
[10.28827572 133.22332764]
[19.17971611 121.14267731]
[30.42361832 111.21419525]
[43.51195908 103.88648987]
[57.85338211 99.49062347]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 114]
[2 113]
[3 112]
[4 111]
[5 110]
[6 109]
[7 108]
[8 107]
[9 106]
[10 105]
[116 136]
[117 135]
[118 134]
[119 133]
[120 131]
[121 130]
[122 129]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
