%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:33:58 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGAAACUCUACUCCCACUAAUAGCUUUUUGAUGACUUCUAGCAAGCCUCGCUAACCUCGCCUxxxxxxxxxxAGCACCAAAUCUCCACCUCCAUCAUCACCUCAACCCAAAAAGGCAUAAUUAAACUUUACUCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[120.49996185 292.96295166]
[120.49996185 277.96295166]
[120.49996185 262.96295166]
[120.49996185 247.96295166]
[120.49996185 232.96295166]
[120.49996185 217.96295166]
[120.49996185 202.96295166]
[120.49996185 187.96295166]
[120.49996185 172.96295166]
[120.49996185 157.96295166]
[118.94237518 143.04405212]
[115.84405518 128.36752319]
[108.89277649 125.55154419]
[97.06427765 134.77577209]
[94.99021912 119.91958618]
[88.03894043 117.10360718]
[75.59950256 125.48574829]
[63.16006470 133.86788940]
[64.30438995 149.18409729]
[57.62285614 163.01350403]
[44.91275024 171.63607788]
[29.59303665 172.73240662]
[15.78463650 166.00755310]
[7.20194054 153.27047729]
[6.15365171 137.94740295]
[12.92175388 124.16014862]
[25.68566322 115.61741638]
[41.01194763 114.61716461]
[54.77791977 121.42845154]
[67.21736145 113.04631042]
[79.65679932 104.66416168]
[87.11170959 91.64785767]
[88.04734039 76.67706299]
[88.98297119 61.70627213]
[89.91859436 46.73548126]
[90.85422516 31.76469040]
[90.23024750 16.77767372]
[88.05341339 1.93646812]
[85.87657166 -12.90473747]
[83.69973755 -27.74594307]
[81.52290344 -42.58714676]
[79.34606171 -57.42835236]
[64.34627533 -56.78779602]
[49.36012268 -57.69295120]
[34.54647064 -60.13422394]
[20.06235504 -64.08573151]
[6.06131315 -69.50559235]
[-7.30823612 -76.33634186]
[-19.90456772 -84.50557709]
[-31.59415436 -93.92670441]
[-42.25307846 -104.49984741]
[-51.76835251 -116.11293030]
[-60.03910446 -128.64283752]
[-66.97766113 -141.95675659]
[-72.51047516 -155.91354370]
[-76.57888794 -170.36526489]
[-79.13977814 -185.15870667]
[-80.16599274 -200.13705444]
[-79.64665985 -215.14152527]
[-77.58728027 -230.01307678]
[-74.00968933 -244.59405518]
[-68.95180511 -258.72988892]
[-62.46724319 -272.27075195]
[-54.62475204 -285.07305908]
[-45.50746155 -297.00112915]
[-35.21202087 -307.92852783]
[-23.84756660 -317.73941040]
[-11.53456783 -326.32974243]
[1.59644890 -333.60852051]
[15.40628910 -339.49853516]
[29.74855995 -343.93737793]
[44.47122574 -346.87799072]
[59.41821671 -348.28918457]
[74.43108368 -348.15600586]
[89.35069275 -346.47988892]
[104.01887512 -343.27856445]
[118.28015137 -338.58599854]
[131.98333740 -332.45193481]
[144.98316956 -324.94137573]
[157.14183044 -316.13397217]
[168.33045959 -306.12304688]
[178.43045044 -295.01473999]
[187.33470154 -282.92678833]
[194.94885254 -269.98736572]
[201.19218445 -256.33361816]
[205.99851990 -242.11029053]
[209.31689453 -227.46815491]
[211.11213684 -212.56240845]
[211.36521912 -197.55107117]
[210.07347107 -182.59329224]
[207.25054932 -167.84761047]
[202.92642212 -153.47033691]
[197.14689636 -139.61389160]
[189.97325134 -126.42514801]
[181.48152161 -114.04393005]
[171.76174927 -102.60147095]
[160.91694641 -92.21907043]
[149.06207275 -83.00679016]
[136.32279968 -75.06228638]
[122.83418274 -68.46977997]
[108.73920441 -63.29914093]
[94.18727112 -59.60519028]
[96.36410522 -44.76398468]
[98.54093933 -29.92277908]
[100.71778107 -15.08157444]
[102.89461517 -0.24036880]
[105.07145691 14.60083675]
[112.62682343 1.64258122]
[125.58023834 -5.92108011]
[140.57875061 -6.13231611]
[153.74003601 1.06355023]
[161.65734863 13.80389118]
[162.28129578 28.79090881]
[155.45037842 42.14525986]
[142.93276978 50.41020584]
[127.96860504 51.44639969]
[114.43131256 44.98561859]
[105.82501984 32.70031738]
[104.88938904 47.67110825]
[103.95375824 62.64190292]
[103.01813507 77.61269379]
[102.08250427 92.58348083]
[106.49157715 89.59565735]
[112.54894257 88.79498291]
[119.30285645 90.79924011]
[125.60923767 95.84852600]
[130.27174377 103.75385284]
[132.19299316 113.89500427]
[130.52058411 125.26919556]
[133.61889648 139.94572449]
[140.35128784 126.54143524]
[152.80769348 118.18452454]
[167.76382446 117.03816986]
[181.34832764 123.39908600]
[190.04490662 135.62077332]
[191.60244751 150.53968811]
[185.61782837 164.29411316]
[173.64012146 173.32376099]
[158.76971436 175.29132080]
[144.85578918 169.68751526]
[135.49995422 157.96295166]
[135.49995422 172.96295166]
[135.49995422 187.96295166]
[135.49995422 202.96295166]
[135.49995422 217.96295166]
[135.49995422 232.96295166]
[135.49995422 247.96295166]
[135.49995422 262.96295166]
[135.49995422 277.96295166]
[135.49995422 292.96295166]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[11 130]
[12 129]
[16 31]
[17 30]
[18 29]
[32 122]
[33 121]
[34 120]
[35 119]
[36 118]
[37 107]
[38 106]
[39 105]
[40 104]
[41 103]
[42 102]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
