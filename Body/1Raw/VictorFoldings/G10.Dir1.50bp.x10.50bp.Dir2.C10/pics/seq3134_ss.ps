%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:21 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGAACUUAGUAUUAUACCCACACCCACCCAAGAACAGGGUUUGUUAAGAUGGCAGAGCCCGGxxxxxxxxxxAUGUCCUCCCGUGAGGCCAAAUAUCAUUCUGAGGGGCCACAGUAAUUACAAACUUACUAUCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[93.52623749 296.92959595]
[93.52623749 281.92959595]
[93.52623749 266.92959595]
[93.52623749 251.92961121]
[93.52623749 236.92961121]
[93.52623749 221.92961121]
[93.52623749 206.92961121]
[93.52623749 191.92961121]
[93.52623749 176.92961121]
[93.52623749 161.92961121]
[91.50389862 147.06655884]
[87.49616241 132.61187744]
[74.97019958 124.35958862]
[60.10715103 126.38191986]
[45.24410629 128.40425110]
[30.38105774 130.42658997]
[16.66100311 136.48960876]
[5.15920067 146.11813354]
[-6.34260273 155.74665833]
[-14.60668564 170.55007935]
[-31.11930847 166.70695496]
[-31.99752426 149.77575684]
[-15.97112942 144.24485779]
[-4.46932554 134.61631775]
[7.03247786 124.98780060]
[2.27844453 110.76039124]
[-2.47515178 96.53424072]
[-17.45486641 95.75439453]
[-31.63863564 102.76376343]
[-43.94643402 94.37524414]
[-58.92615128 93.59539795]
[-73.90586090 92.81555176]
[-88.88558197 92.03570557]
[-96.63844299 105.23236084]
[-109.64216614 113.30463409]
[-124.90860748 114.39757538]
[-138.92962646 108.26004028]
[-148.48332214 96.30237579]
[-151.37429810 81.27238464]
[-146.93824768 66.62383270]
[-136.19454956 55.72285461]
[-121.61199951 51.07442093]
[-106.54158020 53.74670029]
[-94.44635773 63.12562943]
[-88.10573578 77.05599213]
[-73.12602234 77.83583832]
[-58.14630508 78.61568451]
[-43.16659164 79.39553070]
[-30.05426979 72.33037567]
[-16.67502022 80.77468109]
[-1.69530678 81.55452728]
[24.19086075 94.88751984]
[28.35872269 115.56354523]
[43.22177124 113.54120636]
[58.08481598 111.51887512]
[72.94786072 109.49653625]
[80.63983917 83.03460693]
[104.66512299 77.66906738]
[112.38920593 64.81066132]
[120.11329651 51.95226288]
[127.83737946 39.09386063]
[127.74313354 34.60469437]
[128.99285889 30.73051643]
[131.21670532 27.82597351]
[133.96636963 26.08431816]
[136.77622986 25.52577591]
[145.54243469 13.35393810]
[154.30863953 1.18210137]
[144.20652771 -9.97701359]
[136.64837646 -22.98767662]
[131.96249390 -37.27995682]
[130.35137939 -52.22837830]
[131.88304138 -67.17926788]
[136.48811340 -81.47936249]
[143.96296692 -94.50434113]
[153.97879028 -105.68608093]
[166.09596252 -114.53745270]
[179.78338623 -120.67350769]
[194.44180298 -123.82826233]
[209.42996216 -123.86619568]
[224.09271240 -120.78807831]
[237.78962708 -114.73084259]
[246.55583191 -126.90267944]
[248.34237671 -142.62269592]
[262.05883789 -148.42852783]
[270.82504272 -160.60035706]
[279.59124756 -172.77220154]
[288.35745239 -184.94403076]
[289.46450806 -201.30577087]
[304.30487061 -208.28399658]
[317.61206055 -198.70011902]
[315.69677734 -182.41319275]
[300.52929688 -176.17782593]
[291.76309204 -164.00599670]
[282.99688721 -151.83415222]
[274.23068237 -139.66232300]
[273.07116699 -124.81291962]
[258.72766113 -118.13647461]
[249.96147156 -105.96463776]
[260.04730225 -94.89343262]
[267.61367798 -81.96203613]
[272.32775879 -67.73447418]
[273.98120117 -52.83186340]
[272.49926758 -37.90534592]
[267.94436646 -23.60761070]
[260.51324463 -10.56435871]
[250.52861023 0.65307844]
[238.42509460 9.55276012]
[224.73031616 15.74371719]
[210.04185486 18.95312119]
[195.00126648 19.03831100]
[180.26594543 15.99313259]
[166.48048401 9.94830894]
[157.71427917 22.12014580]
[148.94807434 34.29198074]
[140.69578552 46.81794357]
[132.97169495 59.67634583]
[125.24761200 72.53475189]
[117.52352905 85.39315033]
[121.95456696 91.20734406]
[124.43168640 98.36080170]
[124.55518341 106.19013977]
[122.15206146 113.91553497]
[117.30865479 120.71829987]
[110.37669373 125.82719421]
[101.95085144 128.60414124]
[105.95858765 143.05882263]
[110.85774994 128.88143921]
[121.01682281 117.84544373]
[134.74105835 111.79188538]
[149.74092102 111.73064423]
[163.51412964 117.67192841]
[173.76298523 128.62460327]
[178.77775574 142.76150513]
[177.72184753 157.72428894]
[170.77143860 171.01684570]
[159.08598328 180.42164612]
[144.61489868 184.36976624]
[129.77229309 182.20259094]
[117.03421021 174.28163147]
[108.52623749 161.92961121]
[108.52623749 176.92961121]
[108.52623749 191.92961121]
[108.52623749 206.92961121]
[108.52623749 221.92961121]
[108.52623749 236.92961121]
[108.52623749 251.92961121]
[108.52623749 266.92959595]
[108.52623749 281.92959595]
[108.52623749 296.92959595]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[11 127]
[12 126]
[13 56]
[14 55]
[15 54]
[16 53]
[17 25]
[18 24]
[19 23]
[27 51]
[28 50]
[30 48]
[31 47]
[32 46]
[33 45]
[58 119]
[59 118]
[60 117]
[61 116]
[66 115]
[67 114]
[68 113]
[82 99]
[83 98]
[85 96]
[86 95]
[87 94]
[88 93]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
