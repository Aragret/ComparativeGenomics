%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:19 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGAAUAAACGAAAGUUUAACUAAGCUAUACUAACCCCAGGGUUGGUCAAUUUCGUGCCAGCCAxxxxxxxxxxCUCACCAAAGCCCAUAAAAAUAAAAAAUUAUAACAAACCCUGAGAACCAAAAUGAACGAAACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[92.50000000 248.54154968]
[92.50000000 233.54154968]
[92.50000000 218.54154968]
[92.50000000 203.54154968]
[92.50000000 188.54154968]
[92.50000000 173.54154968]
[92.50000000 158.54154968]
[92.50000000 143.54154968]
[92.50000000 128.54154968]
[92.50000000 113.54155731]
[85.59320831 110.61816406]
[71.77962494 104.77136993]
[64.87283325 101.84797668]
[54.10415649 112.28998566]
[43.33547592 122.73199463]
[32.56679916 133.17401123]
[21.79811859 143.61601257]
[17.83315277 159.52862549]
[1.99747241 163.79046631]
[-9.41853046 152.01731873]
[-4.67105198 136.32038879]
[11.35610962 132.84733582]
[22.12478828 122.40532684]
[32.89346695 111.96331787]
[43.66214752 101.52130890]
[54.43082428 91.07929993]
[74.98014832 85.22091675]
[92.50000000 91.04155731]
[92.50000000 76.04155731]
[84.36068726 88.64122009]
[72.27841949 97.53047180]
[57.82733154 101.55117035]
[42.89018250 100.17948151]
[29.41305923 93.59410858]
[19.15182877 82.65303040]
[13.44337749 68.78170776]
[13.03142929 53.78736496]
[17.96965790 39.62353897]
[27.61468124 28.13556862]
[40.70990372 20.82015991]
[55.54920578 18.63040161]
[70.19925690 21.85158920]
[82.75137329 30.06404686]
[91.57019043 42.19781494]
[95.50674438 56.67178345]
[100.05403137 42.37765121]
[104.60132599 28.08352280]
[109.14861298 13.78939247]
[113.69590759 -0.50473744]
[118.24319458 -14.79886723]
[122.79048920 -29.09299660]
[127.19078827 -43.43305969]
[123.68364716 -58.86064911]
[134.71192932 -68.87196350]
[129.97155762 -86.63595581]
[143.09078979 -98.25189209]
[147.04740906 -112.72065735]
[151.00401306 -127.18943024]
[154.96063232 -141.65818787]
[158.91723633 -156.12696838]
[145.08340454 -161.98429871]
[132.15373230 -169.63330078]
[120.35899353 -178.93746948]
[109.90965271 -189.73074341]
[100.99220276 -201.82051086]
[93.76579285 -214.99102783]
[88.35936737 -229.00723267]
[84.86943054 -243.61900330]
[83.35824585 -258.56555176]
[83.85279846 -273.58016968]
[86.34425354 -288.39489746]
[90.78815460 -302.74536133]
[97.10518646 -316.37542725]
[105.18261719 -329.04183960]
[114.87629700 -340.51861572]
[126.01322937 -350.60086060]
[138.39466858 -359.10873413]
[151.79965210 -365.89031982]
[165.98893738 -370.82461548]
[180.70932007 -373.82360840]
[195.69807434 -374.83374023]
[210.68774414 -373.83697510]
[225.41078186 -370.85110474]
[239.60446167 -365.92944336]
[253.01548767 -359.15979004]
[265.40451050 -350.66296387]
[276.55041504 -340.59063721]
[286.25430298 -329.12252808]
[294.34301758 -316.46328735]
[300.67221069 -302.83886719]
[305.12887573 -288.49237061]
[307.63354492 -273.67987061]
[308.14147949 -258.66571045]
[306.64361572 -243.71780396]
[303.16668701 -229.10293579]
[297.77276611 -215.08190918]
[290.55807495 -201.90496826]
[281.65139771 -189.80725098]
[271.21170044 -179.00466919]
[259.42523193 -169.69000244]
[246.50239563 -162.02947998]
[232.67378235 -156.15982056]
[218.18618774 -152.18576050]
[203.29817200 -150.17823792]
[188.27540588 -150.17306519]
[173.38600159 -152.17034912]
[169.42939758 -137.70158386]
[165.47277832 -123.23281860]
[161.51617432 -108.76405334]
[157.55955505 -94.29528046]
[163.28829956 -83.59744263]
[160.06463623 -71.48218536]
[149.09640503 -64.61911011]
[152.90774536 -50.22039795]
[141.57527161 -39.18021011]
[142.70175171 -31.82880402]
[137.08460999 -24.54570770]
[132.53732300 -10.25157738]
[127.99003601 4.04255247]
[123.44274139 18.33668327]
[118.89545441 32.63081360]
[114.34816742 46.92494202]
[109.80087280 61.21907425]
[107.50000000 76.04155731]
[107.50000000 91.04155731]
[113.39561462 77.24874115]
[123.35402679 66.03134155]
[136.35112000 58.54296875]
[151.05024719 55.55372620]
[165.93974304 57.37103271]
[179.48838806 63.80799484]
[190.30279541 74.20262909]
[197.27084351 87.48594666]
[199.67588806 102.29187775]
[197.27062988 117.09777832]
[190.30241394 130.38099670]
[179.48785400 140.77548218]
[165.93913269 147.21224976]
[151.04959106 149.02935791]
[136.35050964 146.03991699]
[123.35352325 138.55136108]
[113.39526367 127.33382416]
[107.50000000 113.54155731]
[107.50000000 128.54154968]
[107.50000000 143.54154968]
[107.50000000 158.54154968]
[107.50000000 173.54154968]
[107.50000000 188.54154968]
[107.50000000 203.54154968]
[107.50000000 218.54154968]
[107.50000000 233.54154968]
[107.50000000 248.54154968]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 152]
[2 151]
[3 150]
[4 149]
[5 148]
[6 147]
[7 146]
[8 145]
[9 144]
[10 143]
[13 26]
[14 25]
[15 24]
[16 23]
[17 22]
[28 125]
[29 124]
[45 123]
[46 122]
[47 121]
[48 120]
[49 119]
[50 118]
[51 117]
[52 115]
[54 113]
[56 110]
[57 109]
[58 108]
[59 107]
[60 106]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
