%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:27 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCAUUCCCCCUCAAACCUAAGAAAUAUGUCUGAUAAAAGAGUUACUUUGAUAGAGUAAAUAAxxxxxxxxxxAGGAUUUCUCAUUACUAACAACAUUUCCCCCGCAUCCCCCUUCCAAACAACAAUCCCCCUCCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[158.59657288 154.11083984]
[147.61576843 143.89213562]
[136.63497925 133.67343140]
[125.65416718 123.45471954]
[114.67337036 113.23601532]
[99.85088348 115.53688812]
[92.48464966 128.60357666]
[85.11840820 141.67027283]
[77.75216675 154.73696899]
[70.38592529 167.80366516]
[71.09525299 184.18746948]
[57.11771393 192.76420593]
[42.83220291 184.71086121]
[42.93443298 168.31204224]
[57.31923294 160.43742371]
[64.68547058 147.37072754]
[72.05171204 134.30403137]
[79.41795349 121.23734283]
[86.78418732 108.17064667]
[76.12328339 97.61862946]
[63.13290024 105.11862946]
[61.64491272 120.56420135]
[51.33724213 132.16296387]
[36.17339325 135.45498657]
[21.98418045 129.17439270]
[14.22564220 115.73620605]
[15.88109684 100.30769348]
[26.31398773 88.82142639]
[41.51265335 85.69409943]
[55.63290024 92.12825012]
[68.62328339 84.62825012]
[74.18521881 70.69753265]
[69.93237305 56.31305313]
[64.46595001 48.91616440]
[65.74314117 41.58943176]
[61.78652954 27.12066460]
[57.82992172 12.65189743]
[53.87331009 -1.81686985]
[48.55990982 -9.32443714]
[49.98726654 -16.62339973]
[46.32855988 -31.17035294]
[37.28903961 -43.14061356]
[24.29865837 -50.64061356]
[8.47870922 -50.84000015]
[1.32521820 -63.90433502]
[-11.66516304 -71.40433502]
[-24.65554428 -78.90433502]
[-37.64592361 -86.40433502]
[-53.45210648 -83.65767670]
[-65.35843658 -94.41030121]
[-64.23139191 -110.41371155]
[-50.93554688 -119.39147186]
[-35.67033768 -114.45660400]
[-30.14592552 -99.39471436]
[-17.15554428 -91.89471436]
[-4.16516304 -84.39471436]
[8.82521820 -76.89471436]
[23.71600914 -77.23178101]
[31.79865837 -63.63099289]
[44.78903961 -56.13099289]
[51.53673172 -59.40493011]
[65.03211975 -65.95279694]
[71.77980804 -69.22673798]
[73.92839050 -84.07205963]
[76.07696533 -98.91738129]
[78.22554779 -113.76270294]
[80.37412262 -128.60803223]
[66.35683441 -134.14086914]
[53.99369431 -142.75767517]
[43.95142365 -153.99375916]
[36.77159500 -167.24316406]
[32.84140778 -181.79138184]
[32.37280655 -196.85382080]
[35.39106750 -211.61819458]
[41.73342133 -225.28828430]
[51.05782700 -237.12687683]
[62.86143112 -246.49551392]
[76.50768280 -252.88899231]
[91.26066589 -255.96249390]
[106.32475281 -255.55026245]
[120.88756561 -251.67456055]
[134.16375732 -244.54437256]
[145.43734741 -234.54421997]
[154.10037231 -222.21340942]
[159.68563843 -208.21693420]
[161.89193726 -193.30958557]
[160.60031128 -178.29531860]
[155.88038635 -163.98381042]
[147.98672485 -151.14688110]
[137.34500122 -140.47680664]
[124.52912140 -132.54901123]
[110.23023224 -127.79103088]
[95.21944427 -126.45944977]
[93.07086945 -111.61412048]
[90.92228699 -96.76879883]
[88.77371216 -81.92347717]
[86.62512970 -67.07815552]
[83.02907562 -49.29571152]
[72.84819794 -38.02769852]
[60.87551498 -34.82905960]
[64.53421783 -20.28210640]
[68.34207916 -5.77348042]
[72.29869080 8.69528770]
[76.25530243 23.16405487]
[80.21190643 37.63282394]
[84.31685638 52.06020737]
[88.56970215 66.44468689]
[124.89207458 102.25521088]
[135.87287903 112.47391510]
[146.85368347 122.69262695]
[157.83448792 132.91133118]
[168.81529236 143.13003540]
[180.54399109 133.73559570]
[193.51557922 126.14907074]
[207.45359802 120.53215027]
[222.06092834 117.00457001]
[237.02621460 115.64151764]
[252.03048706 116.47204590]
[266.75390625 119.47845459]
[280.88265991 124.59666443]
[294.11560059 131.71757507]
[306.17065430 140.68940735]
[316.79086304 151.32092285]
[325.74984741 163.38549805]
[332.85665894 176.62600708]
[337.95983887 190.76020813]
[340.95059204 205.48683167]
[341.76513672 220.49197388]
[340.38616943 235.45579529]
[336.84304810 250.05937195]
[331.21130371 263.99139404]
[323.61096191 276.95489502]
[314.20404053 288.67361450]
[303.19107056 298.89770508]
[290.80673218 307.40924072]
[277.31506348 314.02685547]
[263.00360107 318.60943604]
[248.17741394 321.05932617]
[233.15251160 321.32431030]
[218.24916077 319.39871216]
[203.78501892 315.32360840]
[190.06838989 309.18588257]
[177.39164734 301.11630249]
[166.02499390 291.28689575]
[156.21072388 279.90719604]
[148.15800476 267.21972656]
[142.03849792 253.49494934]
[137.98263550 239.02540588]
[136.07687378 224.11950684]
[136.36183167 209.09497070]
[138.83143616 194.27204895]
[143.43304443 179.96669006]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 112]
[2 111]
[3 110]
[4 109]
[5 108]
[6 19]
[7 18]
[8 17]
[9 16]
[10 15]
[20 31]
[21 30]
[32 107]
[33 106]
[35 105]
[36 104]
[37 103]
[38 102]
[40 101]
[41 100]
[42 60]
[43 59]
[45 57]
[46 56]
[47 55]
[48 54]
[63 97]
[64 96]
[65 95]
[66 94]
[67 93]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
