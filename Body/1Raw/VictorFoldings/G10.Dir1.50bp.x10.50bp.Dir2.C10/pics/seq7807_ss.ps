%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:15 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGUCGUAUAAUAAUUACAUCACAAGACGUCUUGCACUCAUGAGCUGUCCCCACAUUAGGCUUxxxxxxxxxxAUCGCUGGGUCAAUAGUACUUGCCGCAGUACUCUUAAAACUAGGCGGCUAUGGUAUAAUACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[108.01108551 281.78054810]
[108.01108551 266.78054810]
[108.01108551 251.78053284]
[108.01108551 236.78053284]
[108.01108551 221.78053284]
[108.01108551 206.78053284]
[108.01108551 191.78053284]
[108.01108551 176.78053284]
[108.01108551 161.78053284]
[108.01108551 146.78053284]
[97.40721893 147.98779297]
[86.66839600 146.79194641]
[76.33893585 143.19432068]
[65.67730713 153.74560547]
[55.01568222 164.29690552]
[56.47777939 179.86598206]
[47.54771042 192.70295715]
[32.44198608 196.74659729]
[18.29306030 190.08761597]
[11.78162766 175.87019348]
[15.98218727 160.80734253]
[28.91136169 152.01130676]
[44.46438980 153.63526917]
[55.12601852 143.08398438]
[65.78764343 132.53269958]
[62.61407852 125.73722076]
[49.02302933 132.08413696]
[42.67631912 118.49298859]
[56.26694870 112.14627075]
[53.09338379 105.35079193]
[38.15907669 106.75309753]
[23.22476959 108.15540314]
[8.29046154 109.55770111]
[-4.76242018 119.48516083]
[-19.77961540 112.89608002]
[-21.31271935 96.56875610]
[-7.78460932 87.29933167]
[6.88815737 94.62339783]
[21.82246590 93.22109222]
[36.75677109 91.81878662]
[51.69108200 90.41648865]
[65.24112701 72.24100494]
[83.84754181 63.71722794]
[80.44456482 49.10833740]
[77.04158783 34.49944305]
[63.90538025 26.12819672]
[60.66238785 11.26422596]
[68.72404480 -1.20755291]
[65.32106781 -15.81644535]
[61.91808701 -30.42533875]
[52.75196075 -18.55174828]
[37.90042877 -16.44651604]
[25.79550934 -25.30489731]
[23.30981827 -40.09750748]
[31.85461617 -52.42578506]
[46.57855988 -55.29029846]
[59.12295151 -47.06344223]
[57.56536865 -61.98235321]
[56.00778961 -76.90126801]
[54.45020676 -91.82017517]
[43.87705612 -81.18023682]
[28.87897110 -80.94051361]
[17.97117805 -91.23711395]
[17.34661865 -106.22410583]
[27.35988998 -117.39256287]
[42.32591629 -118.40154266]
[53.74839020 -108.67683411]
[54.06044388 -123.67358398]
[40.01359177 -129.42253113]
[28.99474335 -139.86041260]
[22.49410248 -153.57559204]
[21.39083099 -168.71319580]
[25.83413506 -183.22601318]
[35.22309875 -195.15126038]
[48.28793335 -202.87619019]
[63.26173782 -205.35604858]
[78.11942291 -202.25544739]
[90.85160828 -193.99372864]
[99.73636627 -181.68823242]
[103.57211304 -167.00315857]
[101.84009552 -151.92454529]
[94.77455139 -138.49165344]
[83.33103943 -128.52117920]
[69.05719757 -123.36152649]
[68.74514008 -108.36477661]
[69.36911774 -93.37776184]
[70.92670441 -78.45884705]
[72.48428345 -63.53993607]
[74.04186249 -48.62102127]
[76.52697754 -33.82831573]
[79.92996216 -19.21942329]
[83.33293915 -4.61053085]
[96.07604218 3.01501107]
[99.73525238 17.78202820]
[91.65048218 31.09646606]
[95.05345917 45.70535660]
[98.45643616 60.31425095]
[113.43184662 60.98233414]
[127.64577484 67.30818176]
[138.96603394 78.79284668]
[145.53678894 94.13938141]
[146.07373047 111.39332581]
[161.03398132 112.48464203]
[175.99421692 113.57595062]
[190.95446777 114.66725922]
[205.91471863 115.75856781]
[220.89443970 116.53841400]
[235.88713074 117.00645447]
[250.87982178 117.47450256]
[259.53646851 104.70476532]
[273.73168945 98.66333008]
[288.93588257 101.27799988]
[300.29739380 111.71443939]
[304.19085693 126.64241791]
[299.37384033 141.29847717]
[287.38348389 151.00590515]
[272.04580688 152.66712952]
[258.25506592 145.75202942]
[250.41178894 132.46719360]
[235.41908264 131.99916077]
[220.42639160 131.53111267]
[216.35307312 134.13565063]
[210.58848572 134.16430664]
[204.82341003 130.71882629]
[189.86315918 129.62750244]
[174.90290833 128.53619385]
[159.94265747 127.44488525]
[144.98242188 126.35357666]
[139.48957825 131.46031189]
[152.09523010 139.59036255]
[164.70088196 147.72039795]
[178.89767456 152.56301880]
[186.79042053 165.31858826]
[184.78857422 180.18441772]
[173.80281067 190.39778137]
[158.83071899 191.31248474]
[146.68334961 182.51240540]
[142.88668823 168.00126648]
[135.69529724 154.83753967]
[128.50392151 141.67379761]
[123.01108551 146.78053284]
[123.01108551 161.78053284]
[123.01108551 176.78053284]
[123.01108551 191.78053284]
[123.01108551 206.78053284]
[123.01108551 221.78053284]
[123.01108551 236.78053284]
[123.01108551 251.78053284]
[123.01108551 266.78054810]
[123.01108551 281.78054810]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[13 25]
[14 24]
[15 23]
[30 41]
[31 40]
[32 39]
[33 38]
[43 97]
[44 96]
[45 95]
[48 92]
[49 91]
[50 90]
[57 89]
[58 88]
[59 87]
[60 86]
[67 85]
[68 84]
[102 128]
[103 127]
[104 126]
[105 125]
[106 124]
[107 121]
[108 120]
[109 119]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
