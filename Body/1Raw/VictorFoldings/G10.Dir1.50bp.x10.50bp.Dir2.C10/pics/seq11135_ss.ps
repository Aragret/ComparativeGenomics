%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:10 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGUAAACCCCAUUAAACGCCUGGCAGCCGGAAGCCUAUUCGCAGGAUUUCUCAUUACUAACAxxxxxxxxxxCAAACUAGGAGGCGUCCUUGCCCUAUUACUAUCCAUCCUCAUCCUAGCAAUAAUCCCCAUCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[103.47254944 287.04031372]
[103.47254944 272.04031372]
[103.47254944 257.04031372]
[103.47254944 242.04031372]
[103.47254944 227.04031372]
[103.47254944 212.04031372]
[103.47254944 197.04031372]
[103.47254944 182.04031372]
[103.47254944 167.04031372]
[103.47254944 152.04031372]
[89.34774017 146.99156189]
[79.83938599 158.59291077]
[70.33102417 170.19424438]
[72.13955688 185.89471436]
[62.25115967 198.22334290]
[46.53244781 199.86578369]
[34.30905151 189.84759521]
[32.83289719 174.11239624]
[42.97975922 161.99559021]
[58.72968674 160.68588257]
[68.23804474 149.08454895]
[77.74639893 137.48320007]
[64.74784851 107.10766602]
[77.22653961 83.14612579]
[67.96159363 71.34948730]
[58.69664383 59.55284882]
[49.43169403 47.75620651]
[40.16674423 35.95956802]
[30.90179634 24.16292763]
[26.19183731 38.40428543]
[12.19618034 43.80072784]
[-0.85548341 36.40788651]
[-3.42344356 21.62933540]
[6.36927128 10.26699734]
[21.36438942 10.62552643]
[13.37447357 -2.06940365]
[1.97345304 -11.81705570]
[-11.80892849 -17.73701859]
[-25.59131050 -23.65698242]
[-39.37369156 -29.57694435]
[-55.10727692 -27.91415024]
[-63.74777985 -40.04637909]
[-77.53015900 -45.96633911]
[-91.31254578 -51.88630295]
[-105.89646912 -45.79658890]
[-120.48298645 -51.88010025]
[-126.41817474 -66.52759552]
[-120.18078613 -81.04898071]
[-105.47135925 -86.82896423]
[-91.01673126 -80.43840027]
[-85.39257812 -65.66868591]
[-71.61019897 -59.74872208]
[-57.82781982 -53.82875824]
[-43.08003998 -55.91498947]
[-33.45372772 -43.35932541]
[-19.67134666 -37.43936157]
[-5.88896513 -31.51939964]
[7.89341593 -25.59943771]
[-0.63904005 -37.93626022]
[-6.56636715 -51.71547699]
[-9.65497112 -66.39405060]
[-9.78312969 -81.39350128]
[-6.94579411 -96.12271118]
[-1.25478101 -110.00119781]
[7.06562710 -122.48200989]
[17.68752480 -133.07328796]
[30.19230652 -141.35765076]
[44.08716202 -147.00857544]
[58.82449722 -149.80339050]
[73.82351685 -149.63192749]
[88.49311066 -146.50097656]
[102.25516510 -140.53390503]
[114.56730652 -131.96586609]
[124.94432831 -121.13455200]
[132.97726440 -108.46679688]
[138.34954834 -94.46185303]
[140.84944153 -79.67163849]
[140.37844849 -64.67903137]
[136.95512390 -50.07489395]
[130.71435547 -36.43477249]
[121.90213013 -24.29621315]
[110.86570740 -14.13760090]
[98.04003906 -6.35928106]
[83.93058777 -1.26779556]
[69.09339142 0.93620139]
[54.11318207 0.16585067]
[39.58033371 -3.54848838]
[26.06940460 -10.05931950]
[34.05931854 2.63560987]
[42.69843674 14.89797783]
[51.96338654 26.69461823]
[61.22833633 38.49125671]
[70.49328613 50.28789902]
[79.75823212 62.08453751]
[89.02318573 73.88117981]
[112.55122375 69.02828979]
[135.42169189 84.90276337]
[140.48220825 116.16799927]
[155.47489929 116.63603973]
[170.46760559 117.10408020]
[185.46029663 117.57212067]
[189.38417053 103.02221680]
[196.55825806 89.76969910]
[206.59565735 78.52926636]
[218.95506287 69.90709686]
[232.96995544 64.36817169]
[247.88452148 62.21120834]
[262.89443970 63.55252457]
[277.19024658 68.31977844]
[290.00097656 76.25588226]
[300.63577271 86.93286133]
[308.52111816 99.77490234]
[313.23175049 114.08946228]
[314.51367188 129.10456848]
[312.29769897 144.01048279]
[306.70333862 158.00334167]
[298.03231812 170.32852173]
[286.75225830 180.32135010]
[273.47146606 187.44293213]
[258.90612793 191.30920410]
[243.84176636 191.71165466]
[229.09078979 188.62860107]
[215.44868469 182.22627258]
[203.65115356 172.84997559]
[194.33442688 161.00534058]
[188.00094604 147.33114624]
[184.99224854 132.56481934]
[169.99955750 132.09677124]
[155.00686646 131.62873840]
[140.01416016 131.16069031]
[134.62875366 136.38059998]
[147.56169128 143.97923279]
[162.32838440 146.61456299]
[171.55419922 158.44183350]
[170.51582336 173.40585327]
[159.74485779 183.84552002]
[144.75572205 184.41604614]
[133.22235107 174.82536316]
[131.04933167 159.98414612]
[123.85794830 146.82041931]
[118.47254944 152.04031372]
[118.47254944 167.04031372]
[118.47254944 182.04031372]
[118.47254944 197.04031372]
[118.47254944 212.04031372]
[118.47254944 227.04031372]
[118.47254944 242.04031372]
[118.47254944 257.04031372]
[118.47254944 272.04031372]
[118.47254944 287.04031372]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[11 22]
[12 21]
[13 20]
[24 95]
[25 94]
[26 93]
[27 92]
[28 91]
[29 90]
[35 89]
[36 88]
[37 58]
[38 57]
[39 56]
[40 55]
[42 53]
[43 52]
[44 51]
[98 130]
[99 129]
[100 128]
[101 127]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
