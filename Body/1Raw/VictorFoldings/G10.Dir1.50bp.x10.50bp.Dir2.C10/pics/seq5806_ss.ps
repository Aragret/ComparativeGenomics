%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:12 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGACCCACCCCAUUCCUCCCCACACUCAUCGCCCUUACCACGCUACUCCUACCUAUCUCCCCUUxxxxxxxxxxCAGCCCUAUACUCCCUCUACAUAUUUACCACAACACAAUGGGGCUCACUCACCCACCACAUUCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[92.50000000 287.84265137]
[92.50000000 272.84265137]
[92.50000000 257.84265137]
[92.50000000 242.84265137]
[92.50000000 227.84265137]
[92.50000000 212.84265137]
[92.50000000 197.84265137]
[92.50000000 182.84265137]
[92.50000000 167.84265137]
[92.50000000 152.84265137]
[71.18521118 144.92552185]
[55.10011292 128.85472107]
[47.16404724 107.54698944]
[48.81735229 84.86952209]
[59.75996399 64.93813324]
[78.00587463 51.37023926]
[73.80641174 36.97008133]
[69.60694885 22.56992531]
[65.40748596 8.16976929]
[61.20802689 -6.23038769]
[57.00856400 -20.63054466]
[52.80910492 -35.03070068]
[38.16444397 -31.76119995]
[23.34039688 -29.43670464]
[8.39787579 -28.06676865]
[-6.60171700 -27.65702248]
[-21.59674263 -28.20914841]
[-36.52558517 -29.72087860]
[-51.32689667 -32.18599701]
[-65.93985748 -35.59438324]
[-80.30442047 -39.93201828]
[-94.36154938 -45.18109131]
[-108.05348969 -51.32002258]
[-121.32396698 -58.32358932]
[-134.11846924 -66.16300964]
[-146.38439941 -74.80607605]
[-158.07136536 -84.21726990]
[-169.13133240 -94.35791016]
[-179.51887512 -105.18634033]
[-189.19128418 -116.65805054]
[-198.10881042 -128.72590637]
[-206.23484802 -141.34031677]
[-213.53596497 -154.44944763]
[-219.98216248 -167.99943542]
[-225.54698181 -181.93458557]
[-230.20751953 -196.19766235]
[-233.94464111 -210.73002625]
[-236.74299622 -225.47196960]
[-238.59107971 -240.36291504]
[-239.48129272 -255.34165955]
[-239.40998840 -270.34667969]
[-238.37744141 -285.31631470]
[-236.38792419 -300.18902588]
[-233.44956970 -314.90368652]
[-229.57449341 -329.39987183]
[-224.77859497 -343.61801147]
[-219.08158875 -357.49963379]
[-212.50688171 -370.98773193]
[-205.08151245 -384.02688599]
[-196.83595276 -396.56350708]
[-187.80412292 -408.54605103]
[-178.02311707 -419.92532349]
[-167.53312683 -430.65451050]
[-156.37727356 -440.68957520]
[-144.60139465 -449.98928833]
[-132.25386047 -458.51538086]
[-119.38543701 -466.23281860]
[-106.04898834 -473.10995483]
[-92.29931641 -479.11846924]
[-78.19293213 -484.23370361]
[-63.78779602 -488.43460083]
[-49.14310074 -491.70394897]
[-34.31902695 -494.02828979]
[-19.37649155 -495.39804077]
[-4.37689400 -495.80764771]
[10.61812687 -495.25534058]
[25.54695320 -493.74343872]
[40.34823608 -491.27816772]
[54.96115875 -487.86962891]
[69.32566833 -483.53182983]
[83.38274384 -478.28259277]
[97.07461548 -472.14352417]
[110.34501648 -465.13980103]
[123.13942719 -457.30023193]
[135.40525818 -448.65704346]
[147.09211731 -439.24569702]
[158.15199280 -429.10494995]
[168.53939819 -418.27639771]
[178.21168518 -406.80459595]
[187.12908936 -394.73663330]
[195.25497437 -382.12213135]
[202.55593872 -369.01290894]
[209.00199890 -355.46286011]
[214.56665039 -341.52764893]
[219.22703552 -327.26452637]
[222.96400452 -312.73211670]
[225.76219177 -297.99014282]
[227.61010742 -283.09918213]
[228.50016785 -268.12042236]
[228.42868042 -253.11538696]
[227.39598083 -238.14578247]
[225.40628052 -223.27310181]
[222.46777344 -208.55845642]
[218.59254456 -194.06230164]
[213.79647827 -179.84423828]
[208.09931946 -165.96266174]
[201.52447510 -152.47463989]
[194.09893799 -139.43556213]
[185.85325623 -126.89904785]
[176.82128906 -114.91659546]
[167.04016113 -103.53744507]
[156.55004883 -92.80834961]
[145.39408875 -82.77340698]
[133.61810303 -73.47385406]
[121.27047729 -64.94789886]
[108.40196228 -57.23057556]
[95.06543732 -50.35359955]
[81.31570435 -44.34523392]
[67.20925903 -39.23016357]
[71.40872192 -24.83000565]
[75.60818481 -10.42984962]
[79.80764771 3.97030711]
[84.00711060 18.37046432]
[88.20657349 32.77062225]
[92.40603638 47.17077637]
[100.76858521 46.63330460]
[109.11219025 47.41137695]
[117.23117065 49.48582458]
[124.92537689 52.80550385]
[132.00514221 57.28857803]
[138.29595947 62.82453918]
[143.64273071 69.27692413]
[147.91365051 76.48665619]
[151.00344849 84.27603149]
[152.83595276 92.45301056]
[153.36599731 100.81604004]
[152.58049011 109.15895081]
[150.49884033 117.27607727]
[147.17231750 124.96733856]
[142.68293762 132.04312134]
[137.14138794 138.32899475]
[130.68426514 143.67002869]
[123.47072601 147.93453979]
[115.67861176 151.01741028]
[107.50000000 152.84265137]
[107.50000000 167.84265137]
[107.50000000 182.84265137]
[107.50000000 197.84265137]
[107.50000000 212.84265137]
[107.50000000 227.84265137]
[107.50000000 242.84265137]
[107.50000000 257.84265137]
[107.50000000 272.84265137]
[107.50000000 287.84265137]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 154]
[2 153]
[3 152]
[4 151]
[5 150]
[6 149]
[7 148]
[8 147]
[9 146]
[10 145]
[16 125]
[17 124]
[18 123]
[19 122]
[20 121]
[21 120]
[22 119]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
