%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:54 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGGUCACCCCCCAACUAACACAUUAUUUUCCCCUCCCACUCCCAUACUACUAAUCUCAUCAAxxxxxxxxxxAGAGUAGAGUGCUUAGUUGAACAGGGCCCUGAAGCGCGUACACACCGCCCGUCACCCUCCCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[86.82022858 267.56948853]
[89.41122437 248.36177063]
[89.72328186 233.36502075]
[90.03533936 218.36827087]
[90.34739685 203.37152100]
[90.65945435 188.37475586]
[90.97151184 173.37800598]
[91.28356171 158.38125610]
[91.59561920 143.38450623]
[91.90767670 128.38774109]
[92.21973419 113.39099121]
[88.21199036 98.93630219]
[80.22207642 86.24137878]
[72.23216248 73.54644775]
[63.85001755 61.10700607]
[55.08380890 48.93516922]
[46.31760406 36.76333237]
[27.56096268 34.48569107]
[16.55872726 19.51745033]
[19.86815643 1.56069219]
[10.60320663 -10.23594761]
[1.33825707 -22.03258705]
[-7.92669201 -33.82922745]
[-17.19164085 -45.62586594]
[-26.45659065 -57.42250824]
[-35.72153854 -69.21914673]
[-45.10870361 -80.91876984]
[-54.61706161 -92.52011108]
[-64.12541962 -104.12145233]
[-78.96959686 -101.73933411]
[-93.38762665 -109.67142487]
[-100.47743225 -126.08557892]
[-115.12093353 -129.33641052]
[-129.76443481 -132.58723450]
[-137.64985657 -119.66056061]
[-149.30691528 -109.99660492]
[-163.47109985 -104.64364624]
[-178.60603333 -104.18231964]
[-193.06996155 -108.66267395]
[-205.29394531 -117.59871674]
[-213.95202637 -130.02111816]
[-218.10504150 -144.58241272]
[-217.30250549 -159.70307922]
[-211.63146973 -173.74295044]
[-201.70707703 -185.17909241]
[-188.60586548 -192.77098083]
[-173.74894714 -195.69511414]
[-158.74787903 -193.63430786]
[-145.22988892 -186.81210327]
[-134.66128540 -175.96850586]
[-128.18849182 -162.27976990]
[-126.51361084 -147.23072815]
[-111.87010956 -143.97990417]
[-97.22660828 -140.72908020]
[-86.45580292 -151.16889954]
[-89.24812317 -165.90669250]
[-92.04045105 -180.64450073]
[-94.83277130 -195.38230896]
[-97.62509918 -210.12011719]
[-112.67622375 -211.07643127]
[-127.01640320 -215.74653625]
[-139.74421692 -223.83688354]
[-150.05957031 -234.83889771]
[-157.31404114 -248.06098938]
[-161.05158997 -262.67199707]
[-161.03729248 -277.75344849]
[-157.27204895 -292.35736084]
[-149.99252319 -305.56564331]
[-139.65632629 -316.54809570]
[-126.91320038 -324.61428833]
[-112.56418610 -329.25720215]
[-97.51127625 -330.18496704]
[-82.70071411 -327.33929443]
[-69.06349182 -320.89901733]
[-57.45687103 -311.26901245]
[-48.61044312 -299.05459595]
[-43.08030319 -285.02362061]
[-41.21408463 -270.05807495]
[-43.12909698 -255.09866333]
[-48.70496368 -241.08580017]
[-57.59117508 -228.90031433]
[-69.22914124 -219.30821228]
[-82.88729095 -212.91244507]
[-80.09497070 -198.17463684]
[-77.30264282 -183.43682861]
[-74.51032257 -168.69902039]
[-71.71799469 -153.96121216]
[-49.35895920 -137.69245911]
[-52.52407837 -113.62981415]
[-43.01572037 -102.02847290]
[-33.50736237 -90.42713165]
[-26.79144669 -87.22679138]
[-23.92490005 -78.48410034]
[-14.65995121 -66.68745422]
[-5.39500141 -54.89081573]
[3.86994791 -43.09417725]
[13.13489723 -31.29753685]
[22.39984703 -19.50089645]
[31.66479492 -7.70425701]
[43.09410858 -8.82733727]
[53.74451065 -4.21901798]
[60.89726639 5.07140064]
[62.66521454 16.78392601]
[58.48944092 27.99712372]
[67.25564575 40.16896057]
[76.02185059 52.34079742]
[79.49095154 53.25339508]
[82.67490387 55.92998886]
[84.73178101 60.21036911]
[84.92709351 65.55652618]
[92.91700745 78.25145721]
[100.90692139 90.94638824]
[114.20440674 79.60724640]
[136.49504089 82.19803619]
[150.72181702 86.95185089]
[164.94859314 91.70566559]
[174.14602661 91.46231079]
[179.42008972 96.70919800]
[193.54490662 101.75794983]
[209.57235718 98.28627014]
[220.39077759 110.61079407]
[214.87109375 126.05310822]
[198.69148254 128.72749329]
[188.49613953 115.88275146]
[174.37133789 110.83399963]
[160.19477844 105.93244934]
[145.96800232 101.17863464]
[131.74122620 96.42481995]
[125.61003876 100.74437714]
[135.81611633 111.73692322]
[146.02218628 122.72946930]
[160.19477844 127.64245605]
[167.46134949 140.76484680]
[164.10501099 155.38452148]
[151.84254456 164.02351379]
[136.94622803 162.26295471]
[127.03552246 151.00338745]
[127.17961121 136.00448608]
[120.26364136 122.69398499]
[113.34767151 109.38349152]
[107.21648407 113.70304871]
[106.90443420 128.69979858]
[106.59237671 143.69656372]
[106.28031921 158.69331360]
[105.96826172 173.69006348]
[105.65620422 188.68681335]
[105.34414673 203.68357849]
[105.03209686 218.68032837]
[104.72003937 233.67707825]
[104.40798187 248.67382812]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 150]
[3 149]
[4 148]
[5 147]
[6 146]
[7 145]
[8 144]
[9 143]
[10 142]
[11 141]
[12 112]
[13 111]
[14 110]
[15 106]
[16 105]
[17 104]
[20 99]
[21 98]
[22 97]
[23 96]
[24 95]
[25 94]
[26 93]
[27 91]
[28 90]
[29 89]
[32 54]
[33 53]
[34 52]
[55 87]
[56 86]
[57 85]
[58 84]
[59 83]
[114 128]
[115 127]
[116 126]
[118 125]
[119 124]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
