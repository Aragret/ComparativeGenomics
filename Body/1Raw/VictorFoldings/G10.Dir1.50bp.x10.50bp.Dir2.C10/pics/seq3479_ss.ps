%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:01 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGACCCGCCACAUCUACCAUCACCCUCUACAUCACCGCCCCGACCUUAGCUCUCACCAUCGCxxxxxxxxxxUCCGCUACCAUAAUCAUCGCUAUCCCCACCGGCGUCAAAGUAUUUAGCUGACUCGCCACACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[94.09157562 277.60580444]
[94.09157562 262.60580444]
[94.09157562 247.60581970]
[94.09157562 232.60581970]
[94.09157562 217.60581970]
[94.09157562 202.60581970]
[94.09157562 187.60581970]
[94.09157562 172.60581970]
[94.09157562 157.60581970]
[94.09157562 142.60581970]
[73.55824280 130.66122437]
[63.57225800 110.68486023]
[66.02794647 89.91673279]
[78.58660126 75.00756073]
[71.67960358 61.69240189]
[64.77260590 48.37724686]
[57.86560440 35.06209183]
[44.11808395 41.07635880]
[30.00313568 46.16889191]
[15.58247662 50.31742477]
[0.91916704 53.50381088]
[-13.92267323 55.71411896]
[-28.87814522 56.93868637]
[-43.88185120 57.17215729]
[-58.86818314 56.41350937]
[-73.77161407 54.66606140]
[-88.52696228 51.93745041]
[-103.06971741 48.23961639]
[-117.33628082 43.58872223]
[-131.26426697 38.00510788]
[-144.79278564 31.51318932]
[-157.86267090 24.14135361]
[-170.41676331 15.92183590]
[-182.40016174 6.89057875]
[-193.76049805 -2.91292620]
[-204.44805908 -13.44581032]
[-214.41613770 -24.66201591]
[-223.62112427 -36.51249695]
[-232.02278137 -48.94543076]
[-239.58435059 -61.90645599]
[-246.27279663 -75.33889771]
[-252.05886841 -89.18401337]
[-256.91723633 -103.38126373]
[-260.82669067 -117.86856079]
[-263.77011108 -132.58256531]
[-265.73461914 -147.45893860]
[-266.71166992 -162.43261719]
[-266.69692993 -177.43814087]
[-265.69052124 -192.40986633]
[-263.69680786 -207.28234863]
[-260.72451782 -221.99055481]
[-256.78665161 -236.47015381]
[-251.90040588 -250.65785217]
[-246.08718872 -264.49157715]
[-239.37239075 -277.91085815]
[-231.78538513 -290.85702515]
[-223.35935974 -303.27343750]
[-214.13111877 -315.10583496]
[-204.14105225 -326.30245972]
[-193.43284607 -336.81436157]
[-182.05329895 -346.59555054]
[-170.05218506 -355.60327148]
[-157.48199463 -363.79812622]
[-144.39767456 -371.14428711]
[-130.85644531 -377.60964966]
[-116.91751862 -383.16592407]
[-102.64185333 -387.78881836]
[-88.09186554 -391.45809937]
[-73.33118439 -394.15774536]
[-58.42435837 -395.87594604]
[-43.43656921 -396.60516357]
[-28.43334961 -396.34225464]
[-13.48030853 -395.08834839]
[1.35716534 -392.84890747]
[16.01419258 -389.63375854]
[30.42668152 -385.45693970]
[44.53161240 -380.33670044]
[58.26729965 -374.29547119]
[71.57368469 -367.35961914]
[84.39258575 -359.55953979]
[96.66794586 -350.92929077]
[108.34608459 -341.50659180]
[119.37593079 -331.33270264]
[129.70927429 -320.45208740]
[139.30090332 -308.91232300]
[148.10888672 -296.76385498]
[156.09472656 -284.05984497]
[163.22348022 -270.85580444]
[169.46397400 -257.20950317]
[174.78892517 -243.18057251]
[179.17506409 -228.83039856]
[182.60319519 -214.22171021]
[185.05831909 -199.41841125]
[186.52972412 -184.48519897]
[187.01095581 -169.48739624]
[186.49992371 -154.49057007]
[184.99885559 -139.56031799]
[182.51431274 -124.76191711]
[179.05717468 -110.16007233]
[174.64253235 -95.81864166]
[169.28971863 -81.80033112]
[163.02210999 -68.16644287]
[155.86714172 -54.97659302]
[147.85607910 -42.28846359]
[139.02397156 -30.15752983]
[129.40942383 -18.63684273]
[119.05449677 -7.77677536]
[108.00444794 2.37518024]
[96.30760956 11.77463341]
[84.01512909 20.38048172]
[71.18076324 28.15509415]
[78.08776093 41.47024918]
[84.99475861 54.78540421]
[91.90175629 68.10056305]
[106.15652466 65.61502838]
[120.95482635 69.56381226]
[133.38592529 79.89408112]
[140.71632385 95.24445343]
[140.96960449 113.10179138]
[154.49378967 119.58995819]
[168.01797485 126.07812500]
[183.56886292 122.13482666]
[196.26004028 131.94877625]
[196.35592651 147.99154663]
[183.78295898 157.95649719]
[168.18605042 154.19937134]
[161.52981567 139.60231018]
[148.00563049 133.11415100]
[134.48143005 126.62598419]
[128.13397217 130.62094116]
[136.89196777 142.79867554]
[145.64996338 154.97642517]
[154.40797424 167.15417480]
[164.25767517 178.46714783]
[157.95123291 192.07702637]
[142.95259094 191.87597656]
[137.01318359 178.10206604]
[129.82180786 164.93833923]
[122.63042450 151.77459717]
[115.43904114 138.61085510]
[109.09157562 142.60581970]
[109.09157562 157.60581970]
[109.09157562 172.60581970]
[109.09157562 187.60581970]
[109.09157562 202.60581970]
[109.09157562 217.60581970]
[109.09157562 232.60581970]
[109.09157562 247.60581970]
[109.09157562 262.60580444]
[109.09157562 277.60580444]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[14 114]
[15 113]
[16 112]
[17 111]
[119 129]
[120 128]
[121 127]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
