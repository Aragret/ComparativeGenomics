%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:19 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGAAAACCCCCUGCCAUAACCCAAUACCAAACGCCCCUCUUCGUCUGAUCCGUCCUAAUCACxxxxxxxxxxGGGCUCACUCACCCACCACAUUAACAACAUAAAACCCUCAUUCACACGAGAAAACACCCUCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[26.13934898 251.08091736]
[18.95684052 264.24951172]
[19.14146805 280.06964111]
[6.25460052 287.53808594]
[-0.92790818 300.70666504]
[-8.11041737 313.87527466]
[-15.29292583 327.04385376]
[-22.47543526 340.21243286]
[-29.65794373 353.38101196]
[-26.52846909 369.11587524]
[-36.98895645 381.27966309]
[-53.01501083 380.54135132]
[-62.31282043 367.46731567]
[-57.74989700 352.08685303]
[-42.82652664 346.19848633]
[-35.64401627 333.02990723]
[-28.46150780 319.86132812]
[-21.27899933 306.69274902]
[-14.09649086 293.52416992]
[-6.91398191 280.35559082]
[-7.61235094 265.47735596]
[5.78825855 257.06698608]
[12.97076702 243.89840698]
[1.53871274 236.33126831]
[-9.23897171 227.85807800]
[-19.29065704 218.53514099]
[-28.54954147 208.42442322]
[-36.95409012 197.59312439]
[-44.44844437 186.11322021]
[-50.98280334 174.06101990]
[-56.51373291 161.51660156]
[-61.00447845 148.56335449]
[-64.42519379 135.28735352]
[-66.75314331 121.77683258]
[-67.97285461 108.12158203]
[-68.07623291 94.41236115]
[-67.06257629 80.74027252]
[-64.93862915 67.19618225]
[-61.71850204 53.87010574]
[-75.94528198 49.11629105]
[-90.17205811 44.36247635]
[-102.72238159 53.48765945]
[-118.23943329 53.45952606]
[-130.75659180 44.28889084]
[-135.46073914 29.50205421]
[-130.54306030 14.78485394]
[-117.89447784 5.79635477]
[-102.37864685 5.99281788]
[-89.96171570 15.29869938]
[-85.41824341 30.13569641]
[-71.19146729 34.88951111]
[-56.96468735 39.64332581]
[-33.32870865 -2.49047112]
[1.31041276 -36.16609955]
[-6.94187641 -48.69205856]
[-15.19416523 -61.21802139]
[-23.44645500 -73.74398041]
[-38.95285797 -74.31942749]
[-51.13874817 -83.92586517]
[-55.31840897 -98.86942291]
[-49.88467026 -113.40400696]
[-36.92691422 -121.94076538]
[-21.42766953 -121.19714355]
[-9.34670544 -111.45908356]
[-5.32940149 -96.47105408]
[-10.92049313 -81.99626923]
[-2.66820359 -69.47031403]
[5.58408546 -56.94434738]
[13.83637524 -44.41838837]
[26.06376076 -51.04394531]
[38.79678345 -56.63654327]
[51.94836044 -61.15793610]
[65.42855835 -64.57720184]
[79.14517975 -66.87095642]
[93.00441742 -68.02352142]
[106.91150665 -68.02700043]
[120.77132416 -66.88137054]
[134.48908997 -64.59448242]
[147.97099304 -61.18196106]
[161.12483215 -56.66714859]
[173.86065674 -51.08092117]
[181.04315186 -64.24950409]
[188.22566223 -77.41809082]
[181.45071411 -91.37801361]
[184.20823669 -106.64810944]
[195.43791199 -117.35669708]
[210.82170105 -119.38612366]
[224.44422913 -111.95602417]
[231.06735229 -97.92342377]
[228.14433289 -82.68414307]
[216.79914856 -72.09799957]
[201.39425659 -70.23558044]
[194.21174622 -57.06699753]
[187.02923584 -43.89841461]
[194.47819519 -39.12121201]
[201.66554260 -33.95879364]
[208.57138062 -28.42544365]
[215.17660522 -22.53648949]
[221.46289062 -16.30823517]
[227.41285706 -9.75792980]
[233.01002502 -2.90370703]
[238.23889160 4.23545170]
[243.08497620 11.63977909]
[247.53486633 19.28877258]
[251.57624817 27.16125298]
[255.19790649 35.23542023]
[258.38983154 43.48892212]
[261.14318848 51.89889526]
[263.45031738 60.44206238]
[265.30490112 69.09476471]
[266.70172119 77.83303833]
[267.63696289 86.63269806]
[268.10803223 95.46936798]
[268.11361694 104.31858063]
[267.65371704 113.15583801]
[266.72955322 121.95666504]
[265.34375000 130.69670105]
[263.50009155 139.35173035]
[261.20373535 147.89779663]
[258.46099854 156.31124878]
[255.27947998 164.56875610]
[251.66799927 172.64749146]
[247.63656616 180.52507019]
[243.19631958 188.17965698]
[238.35958862 195.59010315]
[233.13972473 202.73583984]
[227.55120850 209.59712219]
[221.60951233 216.15493774]
[215.33106995 222.39111328]
[208.73329163 228.28839111]
[201.83444214 233.83044434]
[194.65361023 239.00192261]
[187.21067810 243.78852844]
[179.52626038 248.17697144]
[171.62164307 252.15512085]
[163.51872253 255.71195984]
[155.23989868 258.83764648]
[146.80813599 261.52349854]
[138.24674988 263.76211548]
[129.57946777 265.54727173]
[120.83027649 266.87402344]
[112.02340698 267.73870850]
[103.18324280 268.13894653]
[94.33426666 268.07360840]
[85.50098419 267.54287720]
[76.70783997 266.54824829]
[67.97919464 265.09243774]
[59.33921814 263.17947388]
[50.81182480 260.81469727]
[42.42063522 258.00460815]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 23]
[2 22]
[4 20]
[5 19]
[6 18]
[7 17]
[8 16]
[9 15]
[39 52]
[40 51]
[41 50]
[54 69]
[55 68]
[56 67]
[57 66]
[81 94]
[82 93]
[83 92]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
