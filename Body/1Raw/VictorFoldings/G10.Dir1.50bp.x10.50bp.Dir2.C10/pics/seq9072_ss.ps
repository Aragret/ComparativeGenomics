%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:47 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGUAGAAGUCCCACUCCUAAACACAUCCGUAUUACUCGCAUCAGGAGUAUCAAUCACCUGAGxxxxxxxxxxAGCAGGCAAAUCAGCCCAAUUAGGUCUCCACCCCUGACUCCCCUCAGCCAUAGAAGGCCCCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[199.30392456 434.61111450]
[199.30392456 419.61111450]
[199.30392456 404.61111450]
[199.30392456 389.61111450]
[199.30392456 374.61111450]
[199.30392456 359.61111450]
[199.30392456 344.61111450]
[199.30392456 329.61111450]
[199.30392456 314.61111450]
[199.30392456 299.61111450]
[174.91903687 274.59194946]
[182.92791748 245.73411560]
[173.66296387 233.93748474]
[164.39802551 222.14083862]
[149.42723083 221.20521545]
[138.76559448 231.75650024]
[128.10397339 242.30780029]
[121.09902954 257.74694824]
[104.32408905 255.28971863]
[102.04151154 238.49012756]
[117.55268097 231.64616394]
[128.21430969 221.09487915]
[138.87593079 210.54359436]
[141.20704651 195.72583008]
[134.30004883 182.41067505]
[127.39304352 169.09552002]
[120.48604584 155.78036499]
[113.57904816 142.46520996]
[103.50425720 144.44552612]
[93.24361420 144.06852722]
[83.34131622 141.35423279]
[74.32255554 136.44657898]
[66.66568756 129.60588074]
[60.77680206 121.19492340]
[56.96823883 111.65984344]
[55.44200134 101.50634003]
[40.57895660 99.48400879]
[29.12646675 110.13175201]
[13.50656796 110.87525177]
[1.09449792 101.36344147]
[-2.24914432 86.08750916]
[5.05440712 72.26028442]
[19.55663872 66.41056061]
[34.41004181 71.30039215]
[42.60128784 84.62095642]
[57.46433640 86.64329529]
[59.50333405 75.99315643]
[64.27303314 65.63491058]
[71.72958374 56.27737427]
[62.22122574 44.67603302]
[52.71286774 33.07469177]
[43.20450974 21.47335052]
[33.69615173 9.87200832]
[18.71870422 13.02394009]
[3.99522233 8.84331322]
[-7.09094763 -1.70919478]
[-11.99228477 -16.20869446]
[-9.58249664 -31.32330704]
[-0.41533524 -43.57980347]
[13.40265274 -50.16173553]
[28.69619370 -49.55661774]
[41.95094681 -41.90350342]
[50.12106323 -28.96102524]
[51.32911301 -13.70326710]
[45.29749298 0.36365011]
[54.80585098 11.96499157]
[64.31420898 23.56633186]
[73.82257080 35.16767502]
[83.33092499 46.76901627]
[90.82727814 46.53499222]
[88.04488373 31.79530907]
[85.26249695 17.05562401]
[82.48010254 2.31594014]
[73.37063599 -9.60117531]
[72.97617340 -24.59598732]
[81.44647217 -36.97557068]
[95.56570435 -42.03989029]
[109.97335815 -37.86623001]
[119.19943237 -26.03916359]
[119.74115753 -11.04894924]
[111.39271545 1.41334593]
[109.53513336 16.29788208]
[107.67755127 31.18241692]
[105.81996918 46.06695175]
[113.31632233 45.83293152]
[122.08252716 33.66109467]
[130.84873962 21.48925781]
[128.06440735 5.93216705]
[137.16455078 -6.98924923]
[152.75019836 -9.60894394]
[165.57469177 -0.37269926]
[168.02944946 15.23978519]
[158.65814209 27.96589851]
[143.02056885 30.25546455]
[134.25436401 42.42729950]
[125.48815918 54.59913635]
[142.43161011 73.18312836]
[148.21313477 96.71661377]
[142.27107239 119.26506042]
[126.89420319 135.55821228]
[133.80120850 148.87336731]
[140.70820618 162.18852234]
[147.61520386 175.50367737]
[154.52220154 188.81883240]
[176.19465637 212.87590027]
[185.45960999 224.67253113]
[194.72456360 236.46917725]
[202.65367126 233.01966858]
[211.68911743 232.10069275]
[221.00389099 234.05570984]
[229.66925049 238.95373535]
[236.74647522 246.56118774]
[241.38552856 256.34432983]
[242.92071533 267.50381470]
[257.24331665 271.96063232]
[271.56591797 276.41744995]
[285.88851929 280.87426758]
[299.76126099 273.30307007]
[314.90060425 277.83905029]
[322.32470703 291.79107666]
[317.62890625 306.88162231]
[303.59918213 314.15777588]
[288.55911255 309.30270386]
[281.43170166 295.19683838]
[267.10910034 290.74002075]
[252.78649902 286.28323364]
[238.46389771 281.82641602]
[232.42390442 286.27258301]
[242.85646057 297.05041504]
[253.28900146 307.82827759]
[263.72155762 318.60610962]
[276.66561890 326.18579102]
[280.37872314 340.71893311]
[272.65682983 353.57864380]
[258.08361816 357.13134766]
[245.30981445 349.26815796]
[241.91806030 334.65612793]
[234.72668457 321.49240112]
[227.53529358 308.32867432]
[220.34391785 295.16491699]
[214.30392456 299.61111450]
[214.30392456 314.61111450]
[214.30392456 329.61111450]
[214.30392456 344.61111450]
[214.30392456 359.61111450]
[214.30392456 374.61111450]
[214.30392456 389.61111450]
[214.30392456 404.61111450]
[214.30392456 419.61111450]
[214.30392456 434.61111450]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[12 107]
[13 106]
[14 105]
[15 23]
[16 22]
[17 21]
[24 104]
[25 103]
[26 102]
[27 101]
[28 100]
[36 46]
[37 45]
[49 69]
[50 68]
[51 67]
[52 66]
[53 65]
[85 96]
[86 95]
[87 94]
[114 127]
[115 126]
[116 125]
[117 124]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
