%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:24 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGACAAACUUACUAUCCGCCAUCCCAUACAUUGGGACAGACCUAGUUCAAUGAAUCUGAGGAxxxxxxxxxxUCACACAUCAACUGCAACUCCAAAGCCACCCCUCACCCACUAGGAUACCAACAAACCUACCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[101.64632416 444.77276611]
[101.64632416 429.77276611]
[101.64632416 414.77276611]
[101.64632416 399.77276611]
[101.64632416 384.77276611]
[101.64632416 369.77276611]
[101.64632416 354.77276611]
[101.64632416 339.77276611]
[101.64632416 324.77276611]
[101.64632416 309.77276611]
[85.66184235 305.78302002]
[71.22012329 297.83334351]
[59.28409958 286.44778442]
[50.65117645 272.37963867]
[45.89993668 256.56176758]
[45.35139084 240.04455566]
[49.04727554 223.92625427]
[56.74693680 209.27992249]
[67.94299316 197.08201599]
[81.89475250 188.14729309]
[97.67726135 183.07434082]
[96.74163055 168.10354614]
[95.80599976 153.13275146]
[94.87036896 138.16195679]
[93.93474579 123.19116974]
[86.49811554 122.39023590]
[79.11086273 119.12418365]
[72.59947205 113.38768768]
[67.78679657 105.45146179]
[65.40101624 95.85631561]
[50.40831757 96.32435608]
[35.41562271 96.79240417]
[20.42292595 97.26044464]
[5.43022919 97.72848511]
[-6.55817938 108.38951874]
[-22.34284210 105.52176666]
[-29.81511497 91.32511902]
[-23.24291039 76.69004059]
[-7.66786194 72.84329987]
[4.96218729 82.73578644]
[19.95488358 82.26774597]
[34.94757843 81.79970551]
[49.94027710 81.33166504]
[64.93296814 80.86362457]
[70.12838745 66.79209900]
[59.03707123 56.69345093]
[47.94575500 46.59480286]
[36.85444260 36.49615097]
[34.56900406 51.32102203]
[21.66081238 58.96161270]
[7.56471014 53.83326721]
[2.58380795 39.68439484]
[10.35874176 26.85667419]
[25.20603371 24.72593689]
[15.22330761 13.53017139]
[5.24058151 2.33440590]
[-9.81349373 -5.46374512]
[-6.48748016 -22.08824348]
[10.40805912 -23.49433136]
[16.43634796 -7.64832067]
[26.41907310 3.54744530]
[36.40180206 14.74321079]
[46.95309067 25.40483665]
[58.04440689 35.50348663]
[69.13571930 45.60213470]
[80.22703552 55.70078659]
[95.21973419 55.23274231]
[105.65954590 44.46193695]
[96.18702698 32.80827713]
[88.15933990 20.11605263]
[81.68918610 6.56343317]
[76.86739349 -7.65931940]
[73.76165771 -22.35254097]
[72.41557312 -37.30995941]
[72.84803772 -52.32160187]
[75.05297852 -67.17671967]
[78.99944305 -81.66677856]
[84.63203430 -95.58835602]
[91.87167358 -108.74600983]
[100.61672974 -120.95503998]
[110.74443054 -132.04403687]
[122.11260986 -141.85734558]
[134.56166077 -150.25718689]
[147.91683960 -157.12564087]
[161.99063110 -162.36630249]
[176.58549500 -165.90557861]
[191.49652100 -167.69380188]
[206.51438904 -167.70584106]
[221.42825317 -165.94155884]
[236.02877808 -162.42570496]
[250.11097717 -157.20765686]
[263.47714233 -150.36062622]
[275.93966675 -141.98078918]
[287.32357788 -132.18572998]
[297.46905518 -121.11299896]
[306.23370361 -108.91802216]
[313.49444580 -95.77199554]
[319.14938354 -81.85948181]
[323.11907959 -67.37577057]
[325.34786987 -52.52421188]
[325.80441284 -37.51328659]
[324.48236084 -22.55372429]
[321.40017700 -7.85553789]
[316.60122681 6.37493420]
[310.15283203 19.93791962]
[302.14553833 32.64301300]
[292.69171143 44.31185532]
[281.92413330 54.78063583]
[269.99392700 63.90238953]
[257.06857300 71.54905701]
[243.32952881 77.61329651]
[228.96966553 82.00997162]
[214.19056702 84.67736053]
[199.19973755 85.57802582]
[184.20759583 84.69930267]
[169.42462158 82.05355072]
[155.05834961 77.67789459]
[141.31044006 71.63377380]
[128.37390137 64.00602722]
[116.43035126 54.90174866]
[105.99053955 65.67255402]
[129.25001526 96.94900513]
[108.90553284 122.25553894]
[109.84116364 137.22633362]
[110.77679443 152.19712830]
[111.71241760 167.16792297]
[112.64804840 182.13870239]
[126.07834625 184.34498596]
[138.73704529 189.32667542]
[150.05783081 196.85789490]
[159.53486633 206.59878540]
[166.74539185 218.11082458]
[171.36863708 230.87655640]
[173.19999695 244.32290649]
[172.16015625 257.84686279]
[168.29853821 270.84246826]
[161.79086304 282.72811890]
[152.93125916 292.97241211]
[142.11891174 301.11810303]
[129.84010315 306.80227661]
[116.64632416 309.77276611]
[116.64632416 324.77276611]
[116.64632416 339.77276611]
[116.64632416 354.77276611]
[116.64632416 369.77276611]
[116.64632416 384.77276611]
[116.64632416 399.77276611]
[116.64632416 414.77276611]
[116.64632416 429.77276611]
[116.64632416 444.77276611]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[21 127]
[22 126]
[23 125]
[24 124]
[25 123]
[30 44]
[31 43]
[32 42]
[33 41]
[34 40]
[45 66]
[46 65]
[47 64]
[48 63]
[54 62]
[55 61]
[56 60]
[67 121]
[68 120]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
