%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:32 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGUCAACCCCGACAUCAUUACCGGGUUUUCCUCUUGUAAAUAUAGUUUAACCAAAACAUCAGxxxxxxxxxxCGACCCAGACAAUUAUACCCUAGCCAACCCCUUAAACACCCCUCCCCACAUCAAGCCCGACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[149.88246155 251.42124939]
[161.50564575 241.82968140]
[154.87715149 228.37370300]
[148.24864197 214.91773987]
[141.62014771 201.46177673]
[134.99165344 188.00581360]
[128.36314392 174.54985046]
[121.73464966 161.09388733]
[115.10615540 147.63792419]
[108.47765350 134.18194580]
[101.84915161 120.72598267]
[94.64304352 118.64704132]
[90.48492432 133.05918884]
[76.07284546 128.90081787]
[80.23082733 114.48915863]
[73.02472687 112.41020966]
[60.24736404 120.26763916]
[47.47000885 128.12506104]
[34.69264984 135.98248291]
[35.19885635 151.33303833]
[27.94782066 164.87254333]
[14.89003372 172.95892334]
[-0.46202549 173.41702271]
[-13.97873020 166.12358093]
[-22.02415276 153.04051208]
[-22.43411827 137.68708801]
[-15.09834480 124.19330597]
[-1.99012041 116.18893433]
[13.36450863 115.82709503]
[26.83522606 123.20513153]
[39.61258316 115.34770203]
[52.38993835 107.49028015]
[65.16729736 99.63285065]
[62.06897736 84.95632935]
[47.20592880 82.93399048]
[32.34288025 80.91165924]
[17.62554741 86.71774292]
[6.05763865 77.33516693]
[-7.53135824 85.86269379]
[-22.62277031 80.41945648]
[-27.63975716 65.18103790]
[-18.73371696 51.83705139]
[-2.73660016 50.62385941]
[8.07997322 62.47212219]
[21.73420334 56.52138519]
[34.36521530 66.04861450]
[49.22826385 68.07094574]
[64.09130859 70.09328461]
[75.90113831 69.67520142]
[86.17148590 72.54937744]
[94.11438751 78.03515625]
[99.16071320 85.28150177]
[100.99385834 93.32852173]
[106.77013397 79.48529816]
[112.54640198 65.64208221]
[118.32267761 51.79886627]
[124.09895325 37.95564651]
[129.87522888 24.11243057]
[116.76576233 16.78850937]
[104.57663727 8.01793575]
[93.46675873 -2.08495164]
[83.58096313 -13.38843918]
[75.04813385 -25.74516296]
[67.97951508 -38.99402618]
[62.46726227 -52.96230698]
[58.58323669 -67.46789551]
[56.37807465 -82.32168579]
[55.88052368 -97.33001709]
[57.09707260 -112.29724121]
[60.01185989 -127.02822113]
[64.58688354 -141.33091736]
[70.76250458 -155.01884460]
[78.45820618 -167.91357422]
[87.57366180 -179.84698486]
[97.99003601 -190.66349792]
[109.57151794 -200.22210693]
[122.16712952 -208.39819336]
[135.61265564 -215.08515930]
[149.73281860 -220.19583130]
[164.34350586 -223.66357422]
[179.25427246 -225.44319153]
[194.27069092 -225.51147461]
[209.19702148 -223.86753845]
[223.83865356 -220.53282166]
[238.00469971 -215.55076599]
[251.51049805 -208.98635864]
[264.17993164 -200.92517090]
[275.84786987 -191.47229004]
[286.36218262 -180.75094604]
[295.58578491 -168.90093994]
[303.39843750 -156.07673645]
[309.69830322 -142.44552612]
[314.40322876 -128.18504333]
[317.45184326 -113.48117828]
[318.80447388 -98.52564240]
[318.44345093 -83.51339722]
[316.37347412 -68.64016724]
[312.62152100 -54.09985733]
[307.23651123 -40.08202362]
[300.28869629 -26.76942062]
[291.86859131 -14.33560562]
[282.08599854 -2.94267797]
[271.06848145 7.26083088]
[258.95962524 16.14189911]
[245.91731262 23.58474159]
[232.11157227 29.49232674]
[217.72241211 33.78763580]
[202.93740845 36.41467285]
[187.94931030 37.33918762]
[172.95352173 36.54912949]
[158.14555359 34.05479431]
[143.71844482 29.88870239]
[137.94216919 43.73192215]
[132.16589355 57.57513809]
[126.38962555 71.41835785]
[120.61334991 85.26157379]
[114.83708191 99.10478973]
[115.30512238 114.09748840]
[121.93361664 127.55345154]
[128.56211853 141.00941467]
[135.19061279 154.46537781]
[141.81912231 167.92135620]
[148.44761658 181.37731934]
[155.07611084 194.83328247]
[161.70460510 208.28924561]
[168.33311462 221.74520874]
[174.96160889 235.20117188]
[189.64979553 231.83158875]
[204.71911621 231.94076538]
[219.35693359 235.52282715]
[232.77383423 242.38456726]
[244.24626160 252.15596008]
[253.15551758 264.31005859]
[259.02114868 278.19137573]
[261.52682495 293.05133057]
[260.53741455 308.08853149]
[256.10626221 322.49206543]
[248.47236633 335.48516846]
[238.04739380 346.36709595]
[225.39353943 354.55102539]
[211.19323730 359.59564209]
[196.21226501 361.22882080]
[181.25854492 359.36254883]
[167.13850403 354.09747314]
[154.61363220 345.71746826]
[144.35935974 334.67453003]
[136.92869568 321.56414795]
[132.72236633 307.09338379]
[131.96720886 292.04257202]
[134.70396423 277.22344971]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 127]
[3 126]
[4 125]
[5 124]
[6 123]
[7 122]
[8 121]
[9 120]
[10 119]
[11 118]
[16 33]
[17 32]
[18 31]
[19 30]
[34 48]
[35 47]
[36 46]
[38 44]
[53 117]
[54 116]
[55 115]
[56 114]
[57 113]
[58 112]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
