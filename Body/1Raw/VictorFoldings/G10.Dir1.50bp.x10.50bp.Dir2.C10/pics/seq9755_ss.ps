%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:31 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGUACUACCACUGACAUGACUUUCCAAAAAACACAUAAUUUGAAUCAACACAACCACCCACAxxxxxxxxxxCGAACGCACUCACAGUCGCAUCAUAAUCCUCUCUCAAGGACUUCAAACUCUACUCCCACUCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[40.83908463 475.34860229]
[40.83908463 460.34860229]
[40.83908463 445.34860229]
[40.83908463 430.34860229]
[40.83908463 415.34860229]
[40.83908463 400.34860229]
[40.83908463 385.34860229]
[40.83908463 370.34860229]
[40.83908463 355.34860229]
[40.83908463 340.34860229]
[26.37422943 336.51226807]
[13.38536835 329.05664062]
[2.76089907 318.48474121]
[-4.77070904 305.51293945]
[-8.69085598 291.02249146]
[-8.72652245 275.99960327]
[-4.86927080 261.46826172]
[2.62376857 248.42062378]
[13.24702930 237.74906921]
[26.28061485 230.18527222]
[40.83908463 226.25003052]
[40.83908463 211.25003052]
[34.02530289 207.28135681]
[29.04594040 201.16711426]
[14.22818279 203.49821472]
[-0.58957535 205.82931519]
[-9.89435005 218.32167053]
[-24.95487022 220.47465515]
[-36.80707932 211.52699280]
[-51.62483978 213.85809326]
[-66.44259644 216.18920898]
[-77.01033783 228.25991821]
[-93.02923584 227.37979126]
[-102.21095276 214.22398376]
[-97.51206207 198.88449097]
[-82.53716278 193.12846375]
[-68.77369690 201.37144470]
[-53.95594025 199.04034424]
[-39.13818359 196.70924377]
[-30.60573769 184.55468750]
[-15.61163139 181.97953796]
[-2.92067909 191.01156616]
[11.89707851 188.68046570]
[26.71483612 186.34934998]
[31.19470787 176.06059265]
[40.29720306 169.14689636]
[51.82397842 167.53378296]
[58.73097992 154.21862793]
[65.63797760 140.90347290]
[72.54497528 127.58831024]
[79.45197296 114.27315521]
[86.35897064 100.95800018]
[87.60585022 86.00991058]
[83.00028229 71.73445129]
[68.00902557 73.17537689]
[53.05855179 71.35948181]
[38.84812927 66.37170410]
[26.04240036 58.44533157]
[15.24031162 47.95109558]
[6.94709969 35.37982941]
[1.55065072 21.31951714]
[-0.69663286 6.42778111]
[0.31035849 -8.59886360]
[4.52452564 -23.05759239]
[11.74876499 -36.27214813]
[21.64518547 -47.62445831]
[33.75091171 -56.58355331]
[47.49974060 -62.73040771]
[62.24861145 -65.77751160]
[77.30769348 -65.58235931]
[91.97264862 -62.15406418]
[105.55757141 -55.65298080]
[117.42706299 -46.38317871]
[127.02597046 -34.77822113]
[133.90533447 -21.38089371]
[137.74339294 -6.81781149]
[138.36064148 8.22988224]
[135.72819519 23.05838013]
[129.96919250 36.97412491]
[121.35298920 49.32625198]
[110.28257751 59.53703308]
[97.27574158 67.12889099]
[101.88130951 81.40435028]
[109.23529053 82.87709045]
[123.94325256 85.82257080]
[131.29722595 87.29531860]
[141.04487610 75.89429474]
[150.67341614 64.39249420]
[160.18176270 52.79114914]
[169.69012451 41.18980789]
[175.05403137 25.10674477]
[191.99343872 25.80878639]
[196.00811768 42.28054047]
[181.29147339 50.69816589]
[171.78311157 62.29950714]
[162.27474976 73.90084839]
[160.45549011 81.11444855]
[152.44590759 85.64194489]
[142.69825745 97.04296875]
[145.80094910 103.87108612]
[159.45719910 97.66567993]
[170.52760315 87.54411316]
[183.57463074 94.94512177]
[180.56742859 109.64058685]
[165.66259766 111.32192230]
[152.00636292 117.52732849]
[155.10906982 124.35544586]
[170.10826111 124.51148224]
[185.10743713 124.66751862]
[200.10662842 124.82356262]
[211.22080994 113.58742523]
[227.02510071 113.58473969]
[238.14309692 124.81708527]
[237.97868347 140.62051392]
[226.62942505 151.61914062]
[210.82861328 151.28765869]
[199.95059204 139.82275391]
[184.95140076 139.66671753]
[169.95222473 139.51068115]
[154.95303345 139.35464478]
[116.54611206 133.91024780]
[99.67412567 107.86499786]
[92.76712799 121.18015289]
[85.86013031 134.49531555]
[78.95313263 147.81047058]
[72.04613495 161.12562561]
[65.13913727 174.44078064]
[70.39205170 195.69464111]
[55.83908463 211.25003052]
[55.83908463 226.25003052]
[70.39756012 230.18527222]
[83.43114471 237.74906921]
[94.05440521 248.42062378]
[101.54743958 261.46826172]
[105.40469360 275.99960327]
[105.36902618 291.02249146]
[101.44888306 305.51293945]
[93.91727448 318.48474121]
[83.29280090 329.05664062]
[70.30393982 336.51226807]
[55.83908463 340.34860229]
[55.83908463 355.34860229]
[55.83908463 370.34860229]
[55.83908463 385.34860229]
[55.83908463 400.34860229]
[55.83908463 415.34860229]
[55.83908463 430.34860229]
[55.83908463 445.34860229]
[55.83908463 460.34860229]
[55.83908463 475.34860229]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[21 130]
[22 129]
[24 44]
[25 43]
[26 42]
[29 39]
[30 38]
[31 37]
[47 127]
[48 126]
[49 125]
[50 124]
[51 123]
[52 122]
[53 83]
[54 82]
[86 99]
[87 98]
[88 96]
[89 95]
[90 94]
[107 120]
[108 119]
[109 118]
[110 117]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
