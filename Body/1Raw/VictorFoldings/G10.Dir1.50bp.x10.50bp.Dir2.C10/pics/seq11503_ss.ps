%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:43 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCUACUCAGAAACCUGAAACAUCGGCAUUAUCCUCCUGCUUGCAACUAUAGCAACAGCCUUxxxxxxxxxxUCCGCCAUCCCAUACAUUGGGACAGACCUAGUUCAAUGAAUCUGAGGAGGCUACUCAGUACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[186.19630432 466.46621704]
[186.19630432 451.46621704]
[186.19630432 436.46621704]
[186.19630432 421.46621704]
[186.19630432 406.46621704]
[186.19630432 391.46621704]
[186.19630432 376.46621704]
[186.19630432 361.46621704]
[186.19630432 346.46621704]
[186.19630432 331.46621704]
[184.48362732 316.56430054]
[181.08064270 301.95541382]
[170.65771484 291.31530762]
[175.06248474 276.11965942]
[171.65951538 261.51074219]
[168.25653076 246.90187073]
[164.85356140 232.29296875]
[161.45057678 217.68408203]
[158.04760742 203.07518005]
[153.59078979 188.75259399]
[148.10375977 174.79220581]
[142.61671448 160.83180237]
[136.41131592 147.17556763]
[129.50431824 133.86041260]
[122.59732056 120.54525757]
[111.93833923 127.35624695]
[99.70995331 129.15315247]
[88.09938812 125.85400391]
[79.08653259 118.26761627]
[74.10653687 107.91155243]
[73.82351685 96.71334076]
[78.05064392 86.65296173]
[68.06791687 75.45719910]
[58.08519363 64.26142883]
[44.19164276 72.04162598]
[28.93100739 76.56508636]
[13.05526066 77.61200714]
[-2.65398932 75.13378906]
[-17.42398643 69.25534821]
[-30.52883530 60.26876068]
[-41.32518005 48.61879730]
[-49.28379059 34.88088226]
[-54.01549911 19.73268318]
[-55.29022217 3.92068338]
[-53.04817200 -11.77660275]
[-47.40262985 -26.58696556]
[-38.63423157 -39.78248596]
[-49.07404327 -50.55329514]
[-59.51385498 -61.32410049]
[-70.17548370 -71.87538910]
[-81.05430603 -82.20259857]
[-91.93313599 -92.52980042]
[-107.44901276 -90.58261871]
[-120.55838013 -99.10778809]
[-125.07138824 -114.07998657]
[-118.85714722 -128.42979431]
[-104.84981537 -135.38168335]
[-89.66323090 -131.65316772]
[-80.46804047 -119.00475311]
[-81.60592651 -103.40863037]
[-70.72710419 -93.08142090]
[-59.84827805 -82.75421906]
[-55.07465744 -81.98735809]
[-50.75299454 -78.17231750]
[-48.74304962 -71.76391602]
[-38.30323410 -60.99310684]
[-27.86342239 -50.22229767]
[-15.94527721 -57.81592178]
[-2.76029754 -62.91574097]
[11.17589092 -65.32012177]
[25.31785202 -64.93289948]
[39.11169052 -61.76718903]
[52.01674271 -55.94498444]
[63.52676773 -47.69244003]
[73.18981171 -37.33108521]
[80.62594604 -25.26531792]
[85.54221344 -11.96658993]
[87.74417114 2.04498553]
[87.14355469 16.22099113]
[83.76185608 30.00616837]
[77.72952271 42.86016083]
[69.28096008 54.27870560]
[79.26368713 65.47447205]
[89.24641418 76.67023468]
[99.12632751 73.11231995]
[110.08675385 73.75683594]
[120.33982086 78.87142944]
[128.07038879 87.96672821]
[138.94921875 77.63951874]
[149.82803345 67.31231689]
[160.70686340 56.98511124]
[171.58569336 46.65790558]
[173.43856812 30.72220993]
[187.12852478 22.35772514]
[202.15379333 27.98096848]
[206.98828125 43.27826691]
[197.92337036 56.51484680]
[181.91288757 57.53673172]
[171.03407288 67.86393738]
[160.15524292 78.19113922]
[149.27641296 88.51834869]
[138.39759827 98.84555054]
[135.91247559 113.63825989]
[142.81947327 126.95341492]
[149.72647095 140.26856995]
[157.00520325 127.15292358]
[171.76078796 124.45617676]
[183.20809937 134.14941406]
[182.98007202 149.14768982]
[171.24337769 158.48844910]
[156.57711792 155.34477234]
[162.06414795 169.30516052]
[167.55117798 183.26556396]
[173.90361023 169.67707825]
[187.42959595 163.19265747]
[202.00172424 166.74978638]
[211.01867676 178.73704529]
[210.39569092 193.72410583]
[200.41497803 204.92167664]
[185.59791565 207.25714111]
[172.65649414 199.67221069]
[176.05946350 214.28109741]
[179.46244812 228.88999939]
[182.86543274 243.49888611]
[186.26840210 258.10778809]
[189.67138672 272.71667480]
[200.33772278 284.40170288]
[195.68952942 298.55242920]
[199.09251404 313.16134644]
[205.15379333 299.44052124]
[216.81678772 290.00790405]
[231.50177002 286.94985962]
[245.96054077 290.94287109]
[256.99496460 301.10366821]
[262.16430664 315.18478394]
[260.32519531 330.07159424]
[251.88436890 342.47131348]
[238.70892334 349.64120483]
[223.71310425 349.99536133]
[210.21385193 343.45544434]
[201.19630432 331.46621704]
[201.19630432 346.46621704]
[201.19630432 361.46621704]
[201.19630432 376.46621704]
[201.19630432 391.46621704]
[201.19630432 406.46621704]
[201.19630432 421.46621704]
[201.19630432 436.46621704]
[201.19630432 451.46621704]
[201.19630432 466.46621704]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[11 129]
[12 128]
[14 126]
[15 125]
[16 124]
[17 123]
[18 122]
[19 121]
[20 113]
[21 112]
[22 111]
[23 105]
[24 104]
[25 103]
[32 84]
[33 83]
[34 82]
[47 67]
[48 66]
[49 65]
[50 62]
[51 61]
[52 60]
[88 102]
[89 101]
[90 100]
[91 99]
[92 98]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
