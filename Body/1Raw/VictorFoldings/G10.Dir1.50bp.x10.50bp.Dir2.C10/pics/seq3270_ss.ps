%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:59 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGUGGCCAACCUCCUACUCCUCAUUGUACCCAUUCUAAUCGCAAUGGCAUUCCUAAUGCUUACxxxxxxxxxxUCUCACCAUCGCUCUUCUACUAUGAACCCCCCUCCCCAUACCCAACCCCCUGGUCAACCUCCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[208.23956299 257.94641113]
[198.59774780 246.45573425]
[188.95593262 234.96507263]
[179.31411743 223.47441101]
[169.55484009 212.08332825]
[159.67913818 200.79304504]
[149.80342102 189.50277710]
[139.92771912 178.21249390]
[130.05201721 166.92221069]
[120.17630768 155.63192749]
[110.30060577 144.34164429]
[95.32035828 143.57199097]
[84.33956146 153.79069519]
[89.32271576 168.18124390]
[88.01542664 183.35395813]
[80.64418793 196.68003845]
[68.48609924 205.85069275]
[53.64763260 209.27703857]
[38.69964218 206.36543274]
[26.23195267 197.62033081]
[18.40467072 184.55690002]
[16.57391930 169.43841553]
[21.05688858 154.88427734]
[31.07687378 143.41607666]
[44.89785385 137.02073669]
[60.12525940 136.80628967]
[74.12084961 142.80989075]
[85.10165405 132.59118652]
[82.90150452 125.42115784]
[76.30105591 103.91106415]
[61.47857285 101.61019135]
[46.65608978 99.30931854]
[31.83360672 97.00843811]
[17.01112556 94.70756531]
[2.18864346 92.40669250]
[-6.03074789 105.22704315]
[-18.75761032 113.59046936]
[-33.78693771 116.04795074]
[-48.51480865 112.17371368]
[-60.38953018 102.63899231]
[-67.35373688 89.09574127]
[-68.20082855 73.89040375]
[-62.78405762 59.65739441]
[-52.04190063 48.86267853]
[-37.83550262 43.37649536]
[-22.62621307 44.14936447]
[-9.04912663 51.04738235]
[0.54344004 62.87542343]
[4.48951817 77.58420563]
[19.31200027 79.88508606]
[34.13448334 82.18595886]
[48.95696259 84.48683167]
[63.77944565 86.78770447]
[78.60192871 89.08858490]
[86.36706543 76.25492859]
[77.45091248 64.19249725]
[68.53475952 52.13006592]
[59.61861038 40.06763458]
[50.70246124 28.00520325]
[36.42528534 18.86197853]
[41.25887299 2.61166263]
[58.21218872 2.75781727]
[62.76489258 19.08905220]
[71.68104553 31.15148354]
[80.59719086 43.21391678]
[89.51334381 55.27634811]
[98.42949677 67.33877563]
[105.91526794 67.80048370]
[103.87364960 52.94007492]
[101.83203125 38.07966614]
[99.79040527 23.21925545]
[91.44287109 10.75656796]
[90.92494965 -4.23448849]
[98.39248657 -17.24356079]
[111.59870911 -24.35661507]
[126.57028198 -23.43354988]
[138.80270386 -14.75208759]
[144.61561584 -0.92421627]
[142.26010132 13.88967896]
[132.44377136 25.23324585]
[128.59146118 39.73012924]
[124.73913574 54.22701263]
[120.88681793 68.72389984]
[128.37258911 69.18560791]
[138.70349121 58.31029129]
[149.03439331 47.43497849]
[142.01838684 34.01654816]
[139.74194336 19.04669380]
[142.45199585 4.14923382]
[149.85459900 -9.05986691]
[161.14674377 -19.14778328]
[175.10356140 -25.02025604]
[190.21112061 -26.04027939]
[204.83065796 -22.09721184]
[217.37635803 -13.61876774]
[226.48736572 -1.52462411]
[231.17538452 12.87333679]
[230.93188477 28.01333046]
[225.78327942 42.25308609]
[216.28805542 54.04797745]
[203.47618103 62.11858749]
[188.73741150 65.58947754]
[173.67047119 64.08414459]
[159.90971375 57.76588058]
[149.57881165 68.64119720]
[139.24790955 79.51651001]
[121.59088135 134.46594238]
[131.46658325 145.75622559]
[141.34230042 157.04650879]
[151.21800232 168.33679199]
[161.09370422 179.62705994]
[170.96942139 190.91734314]
[180.84512329 202.20762634]
[188.90278625 206.64270020]
[190.80477905 213.83259583]
[200.44659424 225.32325745]
[210.08840942 236.81391907]
[219.73022461 248.30459595]
[232.71543884 240.72224426]
[246.79536438 235.44361877]
[261.56488037 232.62062073]
[276.59906006 232.33445740]
[291.46530151 234.59335327]
[305.73590088 239.33233643]
[319.00027466 246.41505432]
[330.87673950 255.63769531]
[341.02362061 266.73495483]
[349.14895630 279.38748169]
[355.01898193 293.23129272]
[358.46478271 307.86804199]
[359.38723755 322.87658691]
[357.75979614 337.82516479]
[353.62927246 352.28359985]
[347.11453247 365.83596802]
[338.40298462 378.09225464]
[327.74533081 388.69989014]
[315.44815063 397.35366821]
[301.86529541 403.80456543]
[287.38757324 407.86700439]
[272.43151855 409.42407227]
[257.42745972 408.43103027]
[242.80708313 404.91638184]
[228.99105835 398.98126221]
[216.37689209 390.79647827]
[205.32752991 380.59747314]
[196.16087341 368.67773438]
[189.14065552 355.38018799]
[184.46888733 341.08743286]
[182.27996826 326.21072388]
[182.63687134 311.17807007]
[185.52934265 296.42199707]
[190.87416077 282.36709595]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 118]
[2 117]
[3 116]
[4 115]
[5 113]
[6 112]
[7 111]
[8 110]
[9 109]
[10 108]
[11 107]
[12 28]
[13 27]
[30 54]
[31 53]
[32 52]
[33 51]
[34 50]
[35 49]
[55 67]
[56 66]
[57 65]
[58 64]
[59 63]
[84 106]
[85 105]
[86 104]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
