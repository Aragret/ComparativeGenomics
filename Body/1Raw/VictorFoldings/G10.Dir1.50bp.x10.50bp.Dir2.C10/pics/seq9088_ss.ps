%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:35 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGACAUCCGUAUUACUCGCAUCAGGAGUAUCAAUCACCUGAGCUCACCAUAGUCUAAUAGAAxxxxxxxxxxAUGAUACGCCCGAGCAGAUGCCAACACAGCAGCCAUUCAAGCAAUCCUAUACAACCGUAUCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[139.92863464 329.24829102]
[139.92863464 314.24829102]
[139.92863464 299.24829102]
[139.92863464 284.24829102]
[139.92863464 269.24829102]
[139.92863464 254.24829102]
[139.92863464 239.24829102]
[139.92863464 224.24829102]
[139.92863464 209.24829102]
[139.92863464 194.24829102]
[125.60604095 189.79147339]
[117.09494781 202.14303589]
[116.32852173 218.52426147]
[101.63654327 225.80972290]
[88.13285828 216.50474548]
[89.70890045 200.18150330]
[104.74337769 193.63195801]
[113.25446320 181.28038025]
[116.65744019 166.67149353]
[114.48060608 151.83027649]
[112.30377197 136.98907471]
[75.07472992 119.71781921]
[79.08723450 87.08131409]
[69.33958435 75.68029022]
[59.59193039 64.27927399]
[49.84428024 52.87825012]
[45.73081589 67.30320740]
[31.97175789 73.27717590]
[18.62386131 66.43367004]
[15.44335842 51.77473068]
[24.75494003 40.01486588]
[39.75199509 39.74930954]
[31.24090385 27.39773560]
[17.03941536 20.42433929]
[16.18907166 5.55402613]
[7.67798233 -6.79754639]
[-0.83310795 -19.14911842]
[-9.34419823 -31.50069046]
[-17.85528755 -43.85226440]
[-26.36637878 -56.20383453]
[-39.84914780 -49.56811905]
[-54.15443802 -44.96631241]
[-68.97731781 -42.49650192]
[-84.00185394 -42.21133423]
[-98.90778351 -44.11688614]
[-113.37738800 -48.17254257]
[-127.10224915 -54.29185486]
[-139.78982544 -62.34439087]
[-151.16967773 -72.15850830]
[-160.99923706 -83.52502441]
[-169.06898499 -96.20165253]
[-175.20692444 -109.91819763]
[-179.28222656 -124.38227844]
[-181.20800781 -139.28561401]
[-180.94323730 -154.31051636]
[-178.49356079 -169.13673401]
[-173.91117859 -183.44825745]
[-167.29377747 -196.94003296]
[-158.78239441 -209.32446289]
[-148.55845642 -220.33760071]
[-136.83990479 -229.74467468]
[-123.87648773 -237.34518433]
[-109.94454193 -242.97712708]
[-95.34102631 -246.52046204]
[-80.37721252 -247.89964294]
[-65.37206268 -247.08529663]
[-50.64539719 -244.09477234]
[-36.51112747 -238.99180603]
[-23.27052498 -231.88516235]
[-11.20581150 -222.92633057]
[-0.57414770 -212.30627441]
[8.39785099 -200.25135803]
[15.51894665 -187.01852417]
[20.63735199 -172.88984680]
[23.64396858 -158.16645813]
[24.47470856 -143.16220093]
[23.11186790 -128.19688416]
[19.58449364 -113.58950806]
[13.96777058 -99.65142059]
[6.38142157 -86.67971802]
[-3.01285052 -74.95088196]
[-14.01480579 -64.71492767]
[-5.50371552 -52.36335373]
[3.00737453 -40.01177979]
[11.51846504 -27.66020966]
[20.02955437 -15.30863667]
[28.54064560 -2.95706391]
[42.13336563 3.13286686]
[43.59247589 18.88664627]
[52.10356522 31.23821831]
[61.24530029 43.13059998]
[70.99295044 54.53162003]
[80.74060822 65.93264008]
[90.48825836 77.33366394]
[97.00824738 72.70214081]
[105.40220642 70.14337921]
[114.96150970 70.33819580]
[124.74861145 73.71630096]
[133.68664551 80.38407898]
[147.81144714 75.33531952]
[161.93624878 70.28656769]
[167.19943237 55.56131744]
[180.72250366 47.70888901]
[196.12028503 50.43696213]
[206.12240601 62.45742035]
[206.00619507 78.09457397]
[195.82649231 89.96503448]
[180.38986206 92.46393585]
[166.98500061 84.41136932]
[152.86019897 89.46012878]
[138.73539734 94.50888062]
[140.13771057 109.44319153]
[154.95545959 111.77429199]
[166.62698364 101.36710358]
[182.25897217 100.94872284]
[194.47047424 110.71669006]
[197.49559021 126.05887604]
[189.90596008 139.73117065]
[175.28517151 145.27792358]
[160.53671265 140.08013916]
[152.62435913 126.59204865]
[137.80659485 124.26094818]
[127.14497375 134.81224060]
[129.32180786 149.65344238]
[131.49864197 164.49464417]
[130.60424805 149.52133179]
[134.72412109 135.09820557]
[143.39234924 122.85640717]
[155.62863159 114.18038177]
[170.04913330 110.05132294]
[185.02301025 110.93620300]
[198.85684204 116.73493195]
[209.98611450 126.79174042]
[217.15219116 139.96926880]
[219.54467773 154.77723694]
[216.89295959 169.54098511]
[209.49696350 182.59086609]
[198.19309998 192.45101929]
[184.25973511 198.00633240]
[169.27264404 198.62857056]
[154.92863464 194.24829102]
[154.92863464 209.24829102]
[154.92863464 224.24829102]
[154.92863464 239.24829102]
[154.92863464 254.24829102]
[154.92863464 269.24829102]
[154.92863464 284.24829102]
[154.92863464 299.24829102]
[154.92863464 314.24829102]
[154.92863464 329.24829102]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[11 18]
[12 17]
[19 125]
[20 124]
[21 123]
[23 94]
[24 93]
[25 92]
[26 91]
[32 90]
[33 89]
[35 87]
[36 86]
[37 85]
[38 84]
[39 83]
[40 82]
[99 111]
[100 110]
[101 109]
[112 122]
[113 121]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
