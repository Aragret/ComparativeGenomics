%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:09 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGUAACCCCAUACCCCGAACCAACCAAACCCCAAAGACACCCCCCACAGUUUAUGUAGCUUACCxxxxxxxxxxAGGGGCCAUCAAUUUCAUCACAACAAUUAUCAAUAUAAAACCCCCUGCCAUAACCCAAUACCCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[89.46856689 123.18288422]
[76.13814545 130.06037903]
[62.80772400 136.93786621]
[49.47730255 143.81535339]
[36.14688110 150.69285583]
[22.81646156 157.57034302]
[11.43509007 167.34092712]
[2.61831141 179.47618103]
[-6.19846725 191.61143494]
[-15.01524639 203.74668884]
[-23.83202553 215.88195801]
[-32.64880371 228.01721191]
[-29.92923164 243.58575439]
[-39.08306122 256.46917725]
[-54.67948532 259.02401733]
[-67.46542358 249.73448181]
[-69.85520172 234.11190796]
[-60.43101501 221.42491150]
[-44.78405762 219.20042419]
[-35.96728134 207.06517029]
[-27.15050125 194.92991638]
[-18.33372307 182.79466248]
[-9.51694393 170.65940857]
[-0.70016479 158.52415466]
[-14.48580170 164.43652344]
[-29.29794884 166.80302429]
[-44.23951721 165.48031616]
[-58.40557480 160.54850769]
[-70.93817139 152.30628967]
[-81.07826996 141.25285339]
[-88.21173859 128.05764771]
[-91.90655518 113.51982880]
[-91.93893433 98.51985931]
[-88.30691528 83.96621704]
[-81.23047638 70.74033356]
[-71.13819885 59.64322662]
[-58.64130020 51.34698486]
[-44.49666595 46.35406494]
[-29.56094742 44.96686172]
[-14.73872185 47.26938629]
[-0.92768788 53.12219238]
[11.03569698 62.17081070]
[20.42687607 73.86721039]
[26.67708015 87.50300598]
[29.40776634 102.25235748]
[28.45355415 117.22197723]
[23.87223625 131.50523376]
[15.93896961 144.23992920]
[29.26939011 137.36242676]
[42.59981155 130.48493958]
[55.93022919 123.60744476]
[69.26065063 116.72995758]
[82.59107208 109.85246277]
[85.16252136 95.07451630]
[74.93872070 84.09845734]
[64.71492767 73.12239075]
[48.79747772 71.11879730]
[40.56291580 57.35029602]
[46.32808685 42.37891388]
[61.67044830 37.68940735]
[74.82065582 46.87916565]
[75.69098663 62.89859390]
[85.91478729 73.87465668]
[96.13858032 84.85072327]
[92.42856598 70.31677246]
[88.71854401 55.78281784]
[79.88985443 43.65622330]
[75.63655090 29.27187920]
[76.45071411 14.29399109]
[82.23815155 0.45543650]
[92.32927704 -10.64272213]
[105.55659485 -17.71647644]
[120.38976288 -19.94742203]
[135.11264038 -17.07744980]
[148.02186584 -9.43860149]
[157.62388611 2.08533931]
[162.80780029 16.16110229]
[162.97383118 31.16018486]
[158.10278320 45.34725189]
[148.75822449 57.08092880]
[136.01875305 65.00469208]
[127.12076569 77.08052063]
[118.22277832 89.15635681]
[131.82095337 82.82473755]
[145.41914368 76.49311829]
[159.01731873 70.16149902]
[172.61550903 63.82988358]
[168.59645081 49.34206009]
[167.01698303 34.39030075]
[167.92018127 19.38249779]
[171.28140259 4.72807932]
[177.00897217 -9.17317390]
[184.94662476 -21.94202423]
[194.87780762 -33.23012924]
[206.53161621 -42.72954178]
[219.59010315 -50.18111038]
[233.69702148 -55.38154984]
[248.46752930 -58.18898773]
[263.49868774 -58.52683640]
[278.38043213 -56.38587952]
[292.70675659 -51.82452393]
[306.08688354 -44.96720505]
[318.15570068 -36.00099945]
[328.58404541 -25.17050743]
[337.08740234 -12.77119446]
[343.43377686 0.85867745]
[347.45004272 15.34727478]
[349.02664185 30.29933929]
[348.12054443 45.30696487]
[344.75650024 59.96073532]
[339.02624512 73.86088562]
[331.08615112 86.62820435]
[321.15277100 97.91439819]
[309.49713135 107.41156769]
[296.43722534 114.86061859]
[282.32928467 120.05834198]
[267.55822754 122.86293030]
[252.52702332 123.19788361]
[237.64569092 121.05406189]
[223.32023621 116.48994446]
[209.94145203 109.63005066]
[197.87434387 100.66152191]
[187.44808960 89.82901764]
[178.94712830 77.42806244]
[165.34893799 83.75968170]
[151.75076294 90.09130096]
[138.15257263 96.42292023]
[124.55438995 102.75453949]
[139.39640808 100.58325958]
[154.37017822 101.46997833]
[168.85220337 105.37777710]
[182.23948669 112.14393616]
[193.97457886 121.48672485]
[203.56884766 133.01712036]
[210.62280273 146.25500488]
[214.84272766 160.64916992]
[216.05291748 175.60028076]
[214.20295715 190.48576355]
[209.36991882 204.68582153]
[201.75498962 217.60917664]
[191.67529297 228.71771240]
[179.55052185 237.54888916]
[165.88551331 243.73498535]
[151.24929810 247.01841736]
[136.25128174 247.26248169]
[121.51596832 244.45698547]
[107.65693665 238.71878052]
[95.25123596 230.28677368]
[84.81544495 219.51206970]
[76.78408051 206.84332275]
[71.49156952 192.80802917]
[69.15827942 177.99061584]
[69.88137054 163.00805664]
[73.63072968 148.48420715]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 53]
[2 52]
[3 51]
[4 50]
[5 49]
[6 48]
[7 24]
[8 23]
[9 22]
[10 21]
[11 20]
[12 19]
[54 64]
[55 63]
[56 62]
[83 128]
[84 127]
[85 126]
[86 125]
[87 124]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
