%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:20 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGUACCACCCUCGUUAACCCUAACAAAAAAAACUCAUACCCCCAUUAUGUAAAAUCCAUUGUxxxxxxxxxxAUUGGGACAGACCUAGUUCAAUGAAUCUGAGGAGGCUACUCAGUAGACAGUCCCACCCUCCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[124.57027435 359.48461914]
[124.57027435 344.48461914]
[124.57027435 329.48461914]
[124.57027435 314.48461914]
[124.57027435 299.48461914]
[124.57027435 284.48461914]
[124.57027435 269.48461914]
[124.57027435 254.48460388]
[124.57027435 239.48460388]
[124.57027435 224.48460388]
[123.69624329 216.66018677]
[124.47326660 209.29872131]
[126.68487549 202.72511292]
[130.05490112 197.19747925]
[134.26510620 192.89706421]
[138.97448730 189.92245483]
[143.83888245 188.28820801]
[138.06260681 174.44499207]
[132.28633118 160.60177612]
[126.51006317 146.75856018]
[114.46837616 137.99230957]
[116.29474640 122.27687836]
[99.44483185 126.15215302]
[84.57481384 119.31146240]
[77.41619873 105.62379456]
[79.96687317 91.32386017]
[69.08804321 80.99665070]
[58.20922089 70.66944885]
[42.87359619 66.77981567]
[38.97005844 52.40582275]
[26.98322487 43.38829422]
[14.04516888 35.79838562]
[1.10711312 28.20847702]
[-11.83094311 20.61856842]
[-23.58712006 31.15735626]
[-38.00270462 37.54896927]
[-53.66751862 39.18124008]
[-69.05319977 35.90693665]
[-82.66233063 28.05695915]
[-93.17417908 16.40694427]
[-99.57283783 2.10062838]
[-101.24545288 -13.46242142]
[-98.04084778 -28.76372910]
[-111.13400269 -36.08283615]
[-124.22714996 -43.40193939]
[-137.32031250 -50.72104645]
[-151.87402344 -45.00061035]
[-166.68331909 -50.02243423]
[-174.75570679 -63.41536713]
[-172.27963257 -78.85567474]
[-160.42425537 -89.05291748]
[-144.78729248 -89.19226837]
[-132.75204468 -79.20793152]
[-130.00120544 -63.81420135]
[-116.90805054 -56.49509430]
[-103.81489563 -49.17599106]
[-90.72174072 -41.85688400]
[-80.47872162 -51.81571960]
[-67.82596588 -58.48366928]
[-53.78948212 -61.30984497]
[-39.51036453 -60.05531311]
[-26.15202332 -54.81323624]
[-14.80540943 -46.00205231]
[-6.39990759 -34.33206177]
[-1.62721610 -20.74819374]
[-0.88443339 -6.35347557]
[-4.24103451 7.68051338]
[8.69702148 15.27042198]
[21.63507652 22.86033058]
[34.57313156 30.45023918]
[28.79511070 16.60774994]
[29.98380089 1.65492439]
[37.87627411 -11.10081387]
[50.72679138 -18.83801079]
[65.69293213 -19.84527206]
[79.46433258 -13.89979935]
[88.99487305 -2.31667590]
[92.17649841 12.34201717]
[88.30545044 26.83391190]
[78.23798370 37.95353699]
[64.20091248 43.24132919]
[49.29726410 41.52700043]
[63.85475922 44.67795944]
[68.53642273 59.79062271]
[79.41525269 70.11782837]
[90.29407501 80.44503021]
[108.85180664 76.92372131]
[125.65673828 89.82601929]
[137.91909790 81.18690491]
[150.18147278 72.54779053]
[162.44384766 63.90867233]
[148.46661377 58.46467972]
[143.80509949 44.20738983]
[151.86648560 31.55772781]
[166.75856018 29.76157188]
[177.59642029 40.13176727]
[176.45878601 55.08796692]
[189.55194092 47.76886368]
[202.64509583 40.44975662]
[213.52044678 27.44349480]
[229.02902222 34.29335022]
[226.74006653 51.09207153]
[209.96418762 53.54291153]
[196.87104797 60.86201859]
[183.77789307 68.18112183]
[171.08296204 76.17103577]
[158.82058716 84.81015778]
[146.55822754 93.44927216]
[134.29585266 102.08838654]
[130.13796997 116.50060272]
[142.59280396 126.25700378]
[140.35328674 140.98228455]
[146.12954712 154.82550049]
[151.90582275 168.66871643]
[157.68209839 182.51193237]
[168.66777039 192.72541809]
[182.89454651 197.47923279]
[197.12132263 202.23304749]
[211.34809875 206.98686218]
[228.28697205 206.27195740]
[233.66308594 222.35093689]
[219.70072937 231.96804810]
[206.59428406 221.21363831]
[192.36750793 216.45982361]
[178.14073181 211.70600891]
[163.91394043 206.95219421]
[157.82803345 211.33529663]
[168.03410339 222.32785034]
[178.24017334 233.32038879]
[188.44624329 244.31294250]
[202.35585022 249.92749023]
[209.22753906 263.26089478]
[205.72892761 277.84719849]
[193.55665588 286.61279297]
[178.61361694 285.30685425]
[168.14636230 274.56271362]
[167.23034668 259.59271240]
[160.03895569 246.42898560]
[152.84757996 233.26524353]
[145.65618896 220.10150146]
[139.57028198 224.48460388]
[139.57028198 239.48460388]
[139.57028198 254.48460388]
[139.57028198 269.48461914]
[139.57028198 284.48461914]
[139.57028198 299.48461914]
[139.57028198 314.48461914]
[139.57028198 329.48461914]
[139.57028198 344.48461914]
[139.57028198 359.48461914]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[17 115]
[18 114]
[19 113]
[20 112]
[22 110]
[26 86]
[27 85]
[28 84]
[30 82]
[31 70]
[32 69]
[33 68]
[34 67]
[43 57]
[44 56]
[45 55]
[46 54]
[88 109]
[89 108]
[90 107]
[91 106]
[97 105]
[98 104]
[99 103]
[116 126]
[117 125]
[118 124]
[119 123]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
