%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:47 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGAUCACAGCAGUCCUACUUCUCCUAUCUCUCCCAGUCCUAGCUGCUGGCAUCACUAUACUAxxxxxxxxxxGAAUUAUAUCCUUCUUGCUCAUCAGUUGAUGAUACGCCCGAGCAGAUGCCAACACAGCAGCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[109.42944336 263.92779541]
[109.42944336 248.92779541]
[109.42944336 233.92779541]
[109.42944336 218.92779541]
[109.42944336 203.92779541]
[109.42944336 188.92779541]
[109.42944336 173.92779541]
[109.42944336 158.92779541]
[109.42944336 143.92779541]
[109.42944336 128.92779541]
[103.88378906 123.87846375]
[93.78496552 134.96961975]
[82.69396210 124.87063599]
[92.79247284 113.77981567]
[87.24681091 108.73049164]
[72.31250763 110.13279724]
[57.37819672 111.53509521]
[42.44388962 112.93740082]
[27.50958252 114.33970642]
[12.57527447 115.74201202]
[-2.35903311 117.14431000]
[-10.75258064 131.79356384]
[-26.06230545 138.50875854]
[-42.20147705 134.83546448]
[-52.88082123 122.40740204]
[-67.78272247 124.12008667]
[-82.68462372 125.83277893]
[-86.48725128 140.52645874]
[-95.34424591 152.85197449]
[-108.05776978 161.14236450]
[-122.90842438 164.27645874]
[-137.88778687 161.83036804]
[-150.97000122 154.13491821]
[-160.38583374 142.23086548]
[-164.86184692 127.72811127]
[-163.79270935 112.58805084]
[-157.32299805 98.85825348]
[-146.32771301 88.39555359]
[-132.29386902 82.61495209]
[-117.11940765 82.29822540]
[-102.85656738 87.48820496]
[-91.43428040 97.48299408]
[-84.39731598 110.93087769]
[-69.49541473 109.21818542]
[-54.59350967 107.50549316]
[-49.11651230 95.29080963]
[-38.22216415 87.32685852]
[-24.70590973 85.79016876]
[-12.10244465 91.19070435]
[-3.76133657 102.21000671]
[11.17297077 100.80770111]
[26.10727882 99.40539551]
[41.04158783 98.00309753]
[55.97589493 96.60079193]
[70.91020203 95.19848633]
[85.84451294 93.79618073]
[99.23079681 87.02806854]
[109.21352386 75.83230591]
[119.19624329 64.63653564]
[129.17897034 53.44077301]
[139.16169739 42.24500656]
[130.35610962 36.22703934]
[124.51639557 24.94402885]
[124.18943024 10.04204082]
[124.50148773 -4.95471287]
[124.81354523 -19.95146561]
[125.12560272 -34.94821930]
[110.90217590 -40.14176941]
[99.13732910 -49.67419434]
[91.10722351 -62.51148987]
[87.68290710 -77.26116180]
[89.23581696 -92.32327271]
[95.59751129 -106.06399536]
[106.07791138 -116.99285126]
[119.54019928 -123.92434692]
[134.52406311 -126.10661316]
[149.40419006 -123.30293274]
[162.56648254 -115.81742096]
[172.58319092 -104.46205902]
[178.36778259 -90.46858978]
[179.29278564 -75.35491943]
[175.25787354 -60.76046371]
[166.70069885 -48.26831818]
[154.54951477 -39.23354721]
[140.12236023 -34.63616562]
[139.81030273 -19.63941002]
[139.49824524 -4.64265680]
[139.18618774 10.35409737]
[144.78407288 15.34545994]
[145.60826111 0.36812037]
[157.83178711 -8.32586384]
[172.25030518 -4.18990278]
[178.00665283 9.66161537]
[170.76626587 22.79846764]
[155.97982788 25.32818604]
[161.57771301 30.31954956]
[176.44076538 28.29721642]
[191.30381775 26.27488136]
[206.16685486 24.25254631]
[221.02990723 22.23021126]
[235.73786926 19.28472900]
[250.23345947 15.42757034]
[264.72906494 11.57041073]
[279.22467041 7.71325111]
[288.48187256 -5.38955975]
[304.50555420 -6.17757034]
[315.00372314 5.95371342]
[311.92306519 21.69820976]
[297.62680054 28.97808647]
[283.08181763 22.20884705]
[268.58621216 26.06600761]
[254.09062195 29.92316628]
[239.59503174 33.78032684]
[251.74884033 42.57149887]
[254.31645203 57.35011292]
[245.84010315 69.72554016]
[231.13224792 72.67159271]
[218.54335022 64.51563263]
[215.22080994 49.88824081]
[223.05224609 37.09325790]
[208.18919373 39.11559296]
[193.32614136 41.13792801]
[178.46310425 43.16026306]
[163.60005188 45.18259811]
[150.35746765 52.22773361]
[140.37474060 63.42349625]
[130.39201355 74.61926270]
[120.40928650 85.81503296]
[110.42655945 97.01079559]
[124.55476379 91.97155762]
[136.78259277 83.28363037]
[151.58493042 80.85649109]
[165.94697571 85.18448639]
[176.94363403 95.38612366]
[182.33522034 109.38365173]
[181.02362061 124.32620239]
[173.27598572 137.17042542]
[160.67027283 145.30035400]
[145.77384949 147.06016541]
[131.62081909 142.09152222]
[124.42944336 128.92779541]
[124.42944336 143.92779541]
[124.42944336 158.92779541]
[124.42944336 173.92779541]
[124.42944336 188.92779541]
[124.42944336 203.92779541]
[124.42944336 218.92779541]
[124.42944336 233.92779541]
[124.42944336 248.92779541]
[124.42944336 263.92779541]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[15 56]
[16 55]
[17 54]
[18 53]
[19 52]
[20 51]
[21 50]
[25 45]
[26 44]
[27 43]
[57 129]
[58 128]
[59 127]
[60 126]
[61 125]
[64 88]
[65 87]
[66 86]
[67 85]
[96 124]
[97 123]
[98 122]
[99 121]
[100 120]
[101 113]
[102 112]
[103 111]
[104 110]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
