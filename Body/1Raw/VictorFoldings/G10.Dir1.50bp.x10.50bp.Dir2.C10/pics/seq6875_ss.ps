%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:10 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGAUAUCAAUUGGCUUCCUAGGGUUUAUCGUGUGAGCACACCAUAUAUUUACAGUAGGAAUAGAxxxxxxxxxxUACGCAUCCUUUACAUAACAGACGAGGUCAACGAUCCCUCCCUUACCAUCAAAUCAAUUGGCCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[123.47953796 584.76733398]
[123.47953796 569.76733398]
[123.47953796 554.76733398]
[123.47953796 539.76733398]
[123.47953796 524.76733398]
[123.47953796 509.76733398]
[123.47953796 494.76733398]
[123.47953796 479.76733398]
[123.47953796 464.76733398]
[123.47953796 449.76733398]
[105.93756104 444.77371216]
[90.71736145 434.69467163]
[79.25291443 420.46813965]
[72.62788391 403.42343140]
[71.47317505 385.15692139]
[75.90684509 367.38250732]
[85.52215576 351.77099609]
[99.42483521 339.79278564]
[116.31625366 332.57958984]
[114.49659729 317.69036865]
[112.67694092 302.80114746]
[98.26972198 298.88180542]
[86.42860413 289.72027588]
[78.97705078 276.68804932]
[77.07759094 261.75552368]
[81.05056763 247.19430542]
[90.32060242 235.23147583]
[103.49969482 227.70903015]
[101.68003845 212.81980896]
[99.86038208 197.93060303]
[98.04072571 183.04138184]
[95.44593811 180.57266235]
[93.94706726 176.70072937]
[94.20116425 171.96833801]
[96.59144592 167.19558716]
[95.67993164 152.22329712]
[94.76841736 137.25102234]
[93.85691071 122.27873993]
[92.94539642 107.30646515]
[89.33280945 100.04353333]
[92.17025757 92.02208710]
[91.56237793 77.03440857]
[90.95449066 62.04673004]
[82.66428375 48.57145309]
[89.87944794 35.54108047]
[75.33930969 31.41292572]
[62.80401230 23.00407028]
[53.49417496 11.14846802]
[48.31164169 -2.98505259]
[47.75213623 -18.00802040]
[51.85787964 -32.44871902]
[60.21467972 -44.89636993]
[71.99368286 -54.13894653]
[86.03356171 -59.28119659]
[85.42568207 -74.26887512]
[84.81779480 -89.25655365]
[72.68343353 -80.43854523]
[58.16971970 -84.22695160]
[51.89315033 -97.85063171]
[58.44491959 -111.34413147]
[73.03253174 -114.83720398]
[84.98520660 -105.77517700]
[85.89672089 -120.74745941]
[86.50460052 -135.73513794]
[86.80860901 -150.73205566]
[87.11260986 -165.72897339]
[87.41661835 -180.72589111]
[72.96202087 -185.08105469]
[60.21907425 -193.17549133]
[50.13338089 -204.40852356]
[43.45336151 -217.94662476]
[40.67472458 -232.78514099]
[42.00365829 -247.82298279]
[47.34155273 -261.94421387]
[56.29229355 -274.10098267]
[68.19168091 -283.39114380]
[82.15670776 -289.12530518]
[97.15106201 -290.87799072]
[112.06207275 -288.51910400]
[125.78324127 -282.22369385]
[137.29637146 -272.45892334]
[145.74710083 -259.94943237]
[150.50833130 -245.62347412]
[151.22676086 -230.54412842]
[147.84906006 -215.83039856]
[140.62590027 -202.57414246]
[130.09326172 -191.75906372]
[117.03274536 -184.18768311]
[102.41353607 -180.42189026]
[102.10952759 -165.42497253]
[101.80552673 -150.42805481]
[101.50151825 -135.43113708]
[104.14627838 -131.39022827]
[104.24015045 -125.63377380]
[100.86899567 -119.83594513]
[99.95748138 -104.86366272]
[99.80547333 -89.86443329]
[100.41336060 -74.87676239]
[101.02124023 -59.88908005]
[115.43144989 -55.90073395]
[127.92026520 -47.64243317]
[137.25769043 -35.91244125]
[142.51942444 -21.85167694]
[143.17837524 -6.83274317]
[139.15747070 7.67405891]
[130.83833313 20.24467278]
[119.02519989 29.64107323]
[104.86712646 34.93319702]
[113.11385345 47.33645248]
[105.94216919 61.43884659]
[106.55004883 76.42652893]
[107.15793610 91.41419983]
[107.91767120 106.39495087]
[108.82918549 121.36723328]
[109.74069977 136.33950806]
[110.65221405 151.31178284]
[111.56372833 166.28407288]
[112.92994690 181.22172546]
[114.74960327 196.11093140]
[116.56925964 211.00015259]
[118.38891602 225.88937378]
[132.99174500 230.01649475]
[144.86993408 239.39474487]
[152.23274231 252.57058716]
[153.98536682 267.52102661]
[149.89167786 281.96426392]
[140.60543823 293.70782471]
[127.56615448 300.98147583]
[129.38581848 315.87069702]
[131.20547485 330.75991821]
[143.15484619 332.04034424]
[154.60289001 335.67608643]
[165.09043884 341.51870728]
[174.19746399 349.33126831]
[181.55970764 358.79806519]
[186.88343811 369.53726196]
[189.95703125 381.11630249]
[190.65943909 393.06945801]
[188.96493530 404.91632080]
[184.94410706 416.18142700]
[178.76080322 426.41305542]
[170.66558838 435.20147705]
[160.98548889 442.19534302]
[150.11085510 447.11575317]
[138.47953796 449.76733398]
[138.47953796 464.76733398]
[138.47953796 479.76733398]
[138.47953796 494.76733398]
[138.47953796 509.76733398]
[138.47953796 524.76733398]
[138.47953796 539.76733398]
[138.47953796 554.76733398]
[138.47953796 569.76733398]
[138.47953796 584.76733398]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 154]
[2 153]
[3 152]
[4 151]
[5 150]
[6 149]
[7 148]
[8 147]
[9 146]
[10 145]
[19 130]
[20 129]
[21 128]
[28 121]
[29 120]
[30 119]
[31 118]
[35 117]
[36 116]
[37 115]
[38 114]
[39 113]
[41 112]
[42 111]
[43 110]
[45 108]
[54 99]
[55 98]
[56 97]
[62 96]
[63 95]
[64 92]
[65 91]
[66 90]
[67 89]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
