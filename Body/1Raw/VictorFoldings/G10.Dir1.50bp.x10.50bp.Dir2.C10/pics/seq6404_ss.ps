%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:13 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCAACUGACUAGUUCCCCUAAUAAUCGGUGCCCCCGAUAUGGCGUUUCCCCGCAUAAACAAxxxxxxxxxxAUCAUUCUAUUUCCCCCUCUAUUGAUCCCCACCUCCAAAUAUCUCAUCAACAACCGACUACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[164.02140808 163.16567993]
[165.92332458 156.25694275]
[152.68072510 149.21180725]
[139.43814087 142.16667175]
[126.19556427 135.12153625]
[112.95297241 128.07640076]
[98.21517181 130.86872864]
[88.46751404 142.26976013]
[78.71986389 153.67077637]
[68.97221375 165.07179260]
[65.74446869 173.68768311]
[58.90123367 176.60588074]
[48.91851044 187.80163574]
[38.93578339 198.99740601]
[28.95305634 210.19317627]
[26.15300751 226.35150146]
[10.66825771 231.75100708]
[-1.57181001 220.83712769]
[2.02433658 204.83712769]
[17.75728989 200.21044922]
[27.74001694 189.01467896]
[37.72274399 177.81890869]
[47.70547104 166.62315369]
[57.57119370 155.32414246]
[67.31884766 143.92312622]
[77.06649780 132.52209473]
[86.81414795 121.12107849]
[79.09806061 105.43978882]
[83.97335815 91.17179108]
[74.95583344 79.18495941]
[65.93830109 67.19812775]
[56.92076874 55.21129227]
[43.82761765 47.89218521]
[28.89330864 46.48988342]
[13.95900059 45.08757782]
[-0.97530687 43.68527603]
[-15.90961456 42.28297043]
[-29.13211632 51.36840057]
[-44.43689728 46.55765152]
[-50.08343506 31.54112244]
[-41.74019241 17.83820915]
[-25.80739021 15.96061134]
[-14.50731087 27.34866333]
[0.42699674 28.75096703]
[15.36130428 30.15327072]
[30.29561234 31.55557442]
[45.22991943 32.95787811]
[54.24744797 20.97104645]
[48.76041794 7.01065588]
[43.27338791 -6.94973373]
[35.02109909 -19.47569656]
[24.35947037 -30.02698517]
[13.69784451 -40.57827759]
[-2.10293913 -40.24545288]
[-13.45314217 -51.24311066]
[-13.61888981 -67.04653168]
[-2.50184751 -78.27982330]
[13.30244160 -78.27848053]
[24.41757202 -67.04329681]
[24.24913597 -51.23990250]
[34.91076279 -40.68861389]
[45.57238770 -30.13732147]
[41.95262146 -44.69401550]
[42.50076294 -59.68399429]
[47.17403793 -73.93743134]
[55.60773087 -86.34197998]
[67.14367676 -95.92957306]
[80.88159943 -101.95198822]
[95.74938202 -103.93923187]
[110.58672333 -101.73621368]
[124.23571014 -95.51486206]
[135.63116455 -85.76070404]
[143.88375854 -73.23494720]
[148.34948730 -58.91512299]
[148.67980957 -43.91876221]
[144.84895325 -29.41618919]
[137.15589905 -16.53919983]
[126.20100403 -6.29272556]
[112.83920288 0.52359039]
[98.11325073 3.37779713]
[83.17239380 2.04715014]
[69.18260956 -3.36450624]
[57.23377609 -12.43676567]
[62.72080612 1.52362454]
[68.20783997 15.48401451]
[74.08925629 26.40534019]
[73.92962646 37.58568573]
[68.90760040 46.19376373]
[77.92513275 58.18059540]
[86.94266510 70.16742706]
[95.96018982 82.15425873]
[118.09438324 88.20696259]
[119.99810791 114.83382416]
[133.24069214 121.87895966]
[146.48327637 128.92408752]
[159.72586060 135.96922302]
[172.96846008 143.01435852]
[192.38304138 127.20173645]
[216.92257690 122.50342560]
[240.70195007 129.99398804]
[258.04306030 147.83110046]
[264.83068848 171.70826721]
[279.73257446 173.42095947]
[294.63449097 175.13365173]
[309.53637695 176.84634399]
[324.43829346 178.55903625]
[330.49942017 164.71150208]
[340.37414551 153.26681519]
[353.18444824 145.24261475]
[367.79122925 141.35241699]
[382.89566040 141.94215393]
[397.15466309 146.95935059]
[409.30032349 155.95790100]
[418.25268555 168.13766479]
[423.21569824 182.41561890]
[423.74807739 197.52217102]
[419.80242920 212.11405945]
[411.72964478 224.89379883]
[400.24755859 234.72500610]
[386.37710571 240.73350525]
[371.35165405 242.38500977]
[356.50726318 239.53269958]
[343.16390991 232.43017578]
[332.50802612 221.70898438]
[325.48715210 208.32246399]
[322.72558594 193.46093750]
[307.82369995 191.74824524]
[292.92178345 190.03555298]
[278.01989746 188.32286072]
[263.11798096 186.61016846]
[260.82250977 193.32028198]
[257.61148071 199.64730835]
[253.54685974 205.46701050]
[248.70747375 210.66488647]
[243.18737793 215.13858032]
[237.09403992 218.79975891]
[230.54626465 221.57595825]
[223.67184448 223.41198730]
[216.60513306 224.27096558]
[209.48432922 224.13517761]
[202.44886780 223.00631714]
[195.63662720 220.90557861]
[189.18121338 217.87318420]
[183.20941162 213.96763611]
[177.83863831 209.26463318]
[173.17463684 203.85549927]
[169.30943298 197.84553528]
[166.31947327 191.35186768]
[164.26414490 184.50123596]
[163.18457031 177.42747498]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 97]
[3 96]
[4 95]
[5 94]
[6 93]
[7 27]
[8 26]
[9 25]
[10 24]
[12 23]
[13 22]
[14 21]
[15 20]
[29 91]
[30 90]
[31 89]
[32 88]
[33 47]
[34 46]
[35 45]
[36 44]
[37 43]
[48 85]
[49 84]
[50 83]
[51 62]
[52 61]
[53 60]
[102 130]
[103 129]
[104 128]
[105 127]
[106 126]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
