%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:27 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGUGGUCUGAGCUAUGAUAUCAAUUGGCUUCCUAGGGUUUAUCGUGUGAGCACACCAUAUAUxxxxxxxxxxUAGCUGACUCGCCACACUCCACGGAAGCAAUAUGAAAUGAUCUGCUGCAGUGCUCUGAGCCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[132.33520508 535.66735840]
[132.33520508 520.66735840]
[132.33520508 505.66735840]
[132.33520508 490.66735840]
[132.33520508 475.66735840]
[132.33520508 460.66735840]
[132.33520508 445.66735840]
[132.33520508 430.66735840]
[132.33520508 415.66735840]
[132.33520508 400.66735840]
[114.23598480 391.89163208]
[102.94628143 375.15362549]
[101.57991791 354.93515015]
[110.58134460 336.69580078]
[127.58518982 325.39865112]
[125.71757507 310.51538086]
[123.84996033 295.63208008]
[121.82762909 280.76904297]
[119.65078735 265.92785645]
[117.47395325 251.08663940]
[105.85641479 237.97050476]
[112.70740509 220.91050720]
[110.22229004 206.11779785]
[100.48332977 194.84828186]
[105.82736206 179.95695496]
[103.34224701 165.16424561]
[93.60328674 153.89472961]
[98.94732666 139.00340271]
[96.46220398 124.21069336]
[93.97708893 109.41798401]
[91.33821869 94.65192413]
[88.54589844 79.91412354]
[85.75357056 65.17631531]
[82.96125031 50.43851089]
[78.26103210 42.52903366]
[80.26748657 35.36524963]
[77.78236389 20.57254028]
[75.29724884 5.77983332]
[72.81212616 -9.01287365]
[70.32701111 -23.80558014]
[57.73853683 -32.97990036]
[55.42900085 -48.01721191]
[64.25289154 -59.96185684]
[61.76777267 -74.75456238]
[59.12891006 -89.52062225]
[56.33658600 -104.25842285]
[41.93253708 -109.40338898]
[32.10260773 -120.99085236]
[29.41038132 -135.84407043]
[34.48036194 -149.95617676]
[45.85669327 -159.57098389]
[43.06436920 -174.30879211]
[32.89334106 -186.42741394]
[38.12615204 -200.37254333]
[35.33382797 -215.11035156]
[25.16280174 -227.22897339]
[30.39561272 -241.17411804]
[27.60328674 -255.91191101]
[24.81096268 -270.64971924]
[9.75984097 -271.60604858]
[-4.58034325 -276.27615356]
[-17.30815315 -284.36648560]
[-27.62350655 -295.36849976]
[-34.87797546 -308.59057617]
[-38.61553192 -323.20159912]
[-38.60123444 -338.28305054]
[-34.83598328 -352.88696289]
[-27.55645943 -366.09524536]
[-17.22026443 -377.07769775]
[-4.47713852 -385.14389038]
[9.87187386 -389.78680420]
[24.92478180 -390.71456909]
[39.73534775 -387.86889648]
[53.37256622 -381.42861938]
[64.97919464 -371.79861450]
[73.82562256 -359.58419800]
[79.35575867 -345.55322266]
[81.22197723 -330.58767700]
[79.30696106 -315.62826538]
[73.73110199 -301.61541748]
[64.84488678 -289.42993164]
[53.20691681 -279.83779907]
[39.54877090 -273.44204712]
[42.34109497 -258.70425415]
[45.13341904 -243.96643066]
[55.10471725 -232.90196228]
[50.07163239 -217.90267944]
[52.86395645 -203.16487122]
[62.83525848 -192.10040283]
[57.80217361 -177.10112000]
[60.59449768 -162.36331177]
[74.69948578 -157.57635498]
[84.58031464 -146.29695129]
[87.50801849 -131.48834229]
[82.59809113 -117.10816193]
[71.07439423 -107.05075073]
[73.86671448 -92.31294250]
[78.23022461 -86.28754425]
[76.56047821 -77.23968506]
[79.04560089 -62.44697571]
[91.28824615 -54.04142761]
[94.01923370 -39.07492065]
[85.11971283 -26.29069901]
[87.60483551 -11.49799252]
[90.08995056 3.29471493]
[92.57507324 18.08742142]
[95.06018829 32.88013077]
[97.69905090 47.64618301]
[100.49137878 62.38399124]
[103.28370667 77.12179565]
[106.07602692 91.85960388]
[110.57809448 98.61352539]
[108.76979065 106.93286133]
[111.25491333 121.72557068]
[113.74002838 136.51828003]
[123.65674591 148.84587097]
[118.13495636 162.67912292]
[120.62007141 177.47183228]
[130.53678894 189.79942322]
[125.01499176 203.63267517]
[127.50011444 218.42538452]
[137.56079102 226.56398010]
[139.29685974 238.98190308]
[132.31515503 248.90980530]
[134.49198914 263.75100708]
[136.66883850 278.59222412]
[141.03594971 286.69036865]
[138.73324585 293.76449585]
[140.60086060 308.64776611]
[142.46846008 323.53103638]
[152.51470947 325.61141968]
[161.66510010 330.21295166]
[169.30027771 337.01425171]
[174.90599060 345.54534912]
[178.10774231 355.22024536]
[178.69584656 365.37701416]
[176.63908386 375.32324219]
[172.08624268 384.38314819]
[165.35537720 391.94351196]
[156.91168213 397.49517822]
[147.33520508 400.66735840]
[147.33520508 415.66735840]
[147.33520508 430.66735840]
[147.33520508 445.66735840]
[147.33520508 460.66735840]
[147.33520508 475.66735840]
[147.33520508 490.66735840]
[147.33520508 505.66735840]
[147.33520508 520.66735840]
[147.33520508 535.66735840]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[15 130]
[16 129]
[17 128]
[18 126]
[19 125]
[20 124]
[22 121]
[23 120]
[25 118]
[26 117]
[28 115]
[29 114]
[30 113]
[31 111]
[32 110]
[33 109]
[34 108]
[36 107]
[37 106]
[38 105]
[39 104]
[40 103]
[43 100]
[44 99]
[45 97]
[46 96]
[51 91]
[52 90]
[54 88]
[55 87]
[57 85]
[58 84]
[59 83]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
