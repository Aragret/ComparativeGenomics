%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:39 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCUACACCCUAGUAGGCUCCCUUCCCCUACUCAUCGCACUAAUUUACACUCACAACACCCUAxxxxxxxxxxUACACCCUAGUAGGCUCCCUUCCCCUACUCAUCGCACUAAUUUACACUCACAACACCCUAGCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[142.93576050 65.69129944]
[132.60485840 76.56661987]
[122.27394867 87.44193268]
[111.94304657 98.31724548]
[101.83761597 109.40237427]
[91.96190643 120.69265747]
[82.08619690 131.98294067]
[72.21049500 143.27322388]
[62.33478928 154.56349182]
[59.07277679 170.04476929]
[44.86963654 174.53031921]
[34.99393082 185.82060242]
[25.11822510 197.11087036]
[15.24251938 208.40115356]
[16.54635048 224.15156555]
[6.26746511 236.15657043]
[-9.49585438 237.29380798]
[-21.39151192 226.88858032]
[-22.36202240 211.11412048]
[-11.83160210 199.32913208]
[3.95223904 198.52545166]
[13.82794571 187.23516846]
[23.70365143 175.94488525]
[33.57935715 164.65461731]
[36.13499069 149.98089600]
[51.04450607 144.68778992]
[60.92021179 133.39750671]
[70.79592133 122.10723114]
[80.67162323 110.81695557]
[90.54733276 99.52667236]
[91.39631653 94.28285217]
[95.15226746 89.90847015]
[101.06773376 87.98634338]
[111.39863586 77.11103058]
[121.72953796 66.23571777]
[132.06044006 55.36040115]
[122.18338013 44.73811722]
[112.97026062 33.53527069]
[104.45513153 21.79328728]
[96.66946411 9.55559444]
[89.64203644 -3.13255310]
[83.39881134 -16.22423553]
[77.96286011 -29.67104149]
[73.35426331 -43.42324829]
[69.59004974 -57.43000031]
[66.68412018 -71.63951111]
[64.64720917 -85.99923706]
[63.48681641 -100.45607758]
[63.20722580 -114.95659637]
[63.80945587 -129.44715881]
[65.29125977 -143.87420654]
[67.64714813 -158.18438721]
[70.86838531 -172.32479858]
[74.94305420 -186.24316406]
[79.85607147 -199.88801575]
[85.58926392 -213.20892334]
[92.12139893 -226.15664673]
[99.42832947 -238.68330383]
[107.48302460 -250.74258423]
[116.25567627 -262.28994751]
[125.71384430 -273.28265381]
[135.82255554 -283.68011475]
[146.54440308 -293.44387817]
[157.83975220 -302.53784180]
[169.66680908 -310.92843628]
[181.98187256 -318.58459473]
[194.73936462 -325.47808838]
[207.89212036 -331.58340454]
[221.39149475 -336.87799072]
[235.18759155 -341.34228516]
[249.22938538 -344.95980835]
[263.46496582 -347.71716309]
[277.84164429 -349.60421753]
[292.30633545 -350.61398315]
[306.80551147 -350.74276733]
[321.28558350 -349.99008179]
[335.69302368 -348.35873413]
[349.97454834 -345.85479736]
[364.07733154 -342.48751831]
[377.94927979 -338.26934814]
[391.53906250 -333.21591187]
[404.79650879 -327.34594727]
[417.67251587 -320.68112183]
[430.11956787 -313.24612427]
[442.09161377 -305.06842041]
[453.54440308 -296.17828369]
[464.43557739 -286.60861206]
[474.72491455 -276.39477539]
[484.37435913 -265.57455444]
[493.34826660 -254.18798828]
[505.67956543 -262.72845459]
[518.01086426 -271.26892090]
[530.34210205 -279.80935669]
[542.67340088 -288.34982300]
[555.00469971 -296.89028931]
[554.36926270 -312.30456543]
[562.18804932 -325.60382080]
[575.96600342 -332.54434204]
[591.30670166 -330.91143799]
[603.31500244 -321.22610474]
[608.15899658 -306.57897949]
[604.29309082 -291.64382935]
[592.95080566 -281.18646240]
[577.75152588 -278.54376221]
[563.54516602 -284.55899048]
[551.21386719 -276.01855469]
[538.88256836 -267.47808838]
[526.55133057 -258.93762207]
[514.22003174 -250.39717102]
[501.88873291 -241.85670471]
[509.91638184 -228.51878357]
[517.05664062 -214.68527222]
[523.27893066 -200.41513062]
[528.55688477 -185.76919556]
[532.86779785 -170.80989075]
[536.19342041 -155.60096741]
[538.51947021 -140.20729065]
[539.83605957 -124.69444275]
[540.13751221 -109.12857819]
[539.42248535 -93.57604980]
[537.69409180 -78.10314941]
[534.95965576 -62.77585220]
[531.23077393 -47.65949631]
[526.52331543 -32.81853104]
[520.85736084 -18.31622887]
[514.25701904 -4.21442509]
[506.75042725 9.42675591]
[498.36956787 22.54915047]
[489.15014648 35.09680557]
[479.13143921 47.01621628]
[468.35614014 58.25655365]
[456.87014771 68.76988983]
[444.72244263 78.51137543]
[431.96478271 87.43948364]
[418.65155029 95.51612091]
[404.83947754 102.70684052]
[390.58746338 108.98097229]
[375.95620728 114.31173706]
[361.00811768 118.67639923]
[345.80688477 122.05633545]
[330.41729736 124.43709564]
[314.90499878 125.80852509]
[299.33609009 126.16474152]
[283.77694702 125.50421143]
[268.29388428 123.82972717]
[252.95294189 121.14840698]
[237.81950378 117.47165680]
[222.95808411 112.81511688]
[208.43205261 107.19863892]
[194.30332947 100.64612579]
[180.63217163 93.18550110]
[167.47686768 84.84854126]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 36]
[2 35]
[3 34]
[4 33]
[5 30]
[6 29]
[7 28]
[8 27]
[9 26]
[11 24]
[12 23]
[13 22]
[14 21]
[90 110]
[91 109]
[92 108]
[93 107]
[94 106]
[95 105]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
