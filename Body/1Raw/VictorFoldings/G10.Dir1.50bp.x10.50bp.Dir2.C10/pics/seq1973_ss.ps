%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:04 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGAUUUACCCAAAUAAAGUAUAGGCGAUAGAAAUUGAAACCUGGCGCAAUAGAUAUAGUACCxxxxxxxxxxCCCAUCGUCCUAGAAUUAAUUCCCCUAAAAAUCUUUGAAAUAGGGCCCGUAUUUACCCUACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[104.83187103 291.04113770]
[104.83187103 276.04113770]
[104.83187103 261.04113770]
[104.83187103 246.04115295]
[104.83187103 231.04115295]
[104.83187103 216.04115295]
[104.83187103 201.04115295]
[104.83187103 186.04115295]
[104.83187103 171.04115295]
[104.83187103 156.04115295]
[90.70706940 150.99238586]
[81.19871521 162.59373474]
[71.69035339 174.19506836]
[62.18199539 185.79641724]
[60.05653381 202.05723572]
[44.80979919 208.09620667]
[32.12632370 197.70094299]
[35.05378342 181.56520081]
[50.58065414 176.28805542]
[60.08901215 164.68672180]
[69.59737396 153.08537292]
[79.10572815 141.48403931]
[61.24580765 107.65493774]
[75.39898682 78.67498779]
[66.63278198 66.50315094]
[52.28929520 59.82670593]
[51.12977982 44.97730255]
[36.78628922 38.30085754]
[35.62677383 23.45145416]
[26.86056709 11.27961826]
[18.09435844 -0.89221865]
[9.32815170 -13.06405544]
[0.43580234 -25.14404297]
[-8.58172703 -37.13087463]
[-17.59925652 -49.11771011]
[-26.61678696 -61.10454178]
[-39.67590332 -53.68242645]
[-53.57694626 -47.99126053]
[-68.09164429 -44.12450027]
[-82.98165894 -42.14563370]
[-98.00247192 -42.08716583]
[-112.90744019 -43.95005035]
[-127.45179749 -47.70369720]
[-141.39672852 -53.28646851]
[-154.51322937 -60.60669327]
[-166.58592224 -69.54415894]
[-177.41656494 -79.95211792]
[-186.82730103 -91.65965271]
[-194.66360474 -104.47451019]
[-200.79679871 -118.18626404]
[-205.12615967 -132.56976318]
[-207.58061218 -147.38880920]
[-208.11982727 -162.40005493]
[-206.73498535 -177.35700989]
[-203.44879150 -192.01406860]
[-198.31521606 -206.13053894]
[-191.41857910 -219.47462463]
[-182.87211609 -231.82719421]
[-172.81614685 -242.98542786]
[-161.41583252 -252.76608276]
[-148.85836792 -261.00854492]
[-135.34994507 -267.57748413]
[-121.11238861 -272.36502075]
[-106.37950134 -275.29251099]
[-91.39320374 -276.31195068]
[-76.39958954 -275.40652466]
[-61.64485931 -272.59115601]
[-47.37130356 -267.91207886]
[-33.81330872 -261.44607544]
[-21.19350624 -253.29936218]
[-9.71912670 -243.60571289]
[0.42141077 -232.52429199]
[9.06158924 -220.23707581]
[16.05953026 -206.94583130]
[21.30031967 -192.86882019]
[24.69789886 -178.23718262]
[26.19647789 -163.29118347]
[25.77145004 -148.27627563]
[23.42979050 -133.43899536]
[19.20995331 -119.02297974]
[13.18123436 -105.26496887]
[5.44262791 -92.39087677]
[-3.87879062 -80.61210632]
[-14.62995434 -70.12207031]
[-5.61242485 -58.13523865]
[3.40510511 -46.14840698]
[12.42263508 -34.16157532]
[18.99960709 -30.68463707]
[21.49998856 -21.83026314]
[30.26619530 -9.65842628]
[39.03240204 2.51341105]
[47.79861069 14.68524742]
[61.51507950 20.49108124]
[63.30161667 36.21109772]
[77.01808929 42.01692963]
[78.80461884 57.73694229]
[87.57082367 69.90878296]
[100.35707092 65.12942505]
[114.89782715 65.92685699]
[128.72372437 72.88113403]
[139.21479797 85.47526550]
[144.08436584 102.08333588]
[141.84153748 120.16883087]
[156.83422852 120.63687134]
[171.82691956 121.10491180]
[186.81962585 121.57295227]
[201.81231689 122.04099274]
[208.39953613 108.31043243]
[220.00619507 98.45114899]
[234.62135315 94.17132568]
[249.71287537 96.21247864]
[262.66601562 104.22094727]
[271.23660278 116.80922699]
[273.93972778 131.79632568]
[270.30706787 146.58563232]
[260.96795654 158.61480713]
[247.54049683 165.79972839]
[232.35105896 166.89556885]
[218.03131104 161.71244812]
[207.06222534 151.14839172]
[201.34426880 137.03369141]
[186.35157776 136.56564331]
[171.35888672 136.09761047]
[156.36618042 135.62956238]
[141.37348938 135.16152954]
[135.98808289 140.38142395]
[148.92102051 147.98005676]
[161.85395813 155.57868958]
[176.83865356 156.25621033]
[189.52986145 164.25204468]
[196.60998535 177.47595215]
[196.22817993 192.47109985]
[188.48426819 205.31756592]
[175.40258789 212.65716553]
[160.40284729 212.57124329]
[147.40609741 205.08227539]
[139.80987549 192.14791870]
[139.60005188 177.14871216]
[132.40866089 163.98498535]
[125.21727753 150.82124329]
[119.83187103 156.04115295]
[119.83187103 171.04115295]
[119.83187103 186.04115295]
[119.83187103 201.04115295]
[119.83187103 216.04115295]
[119.83187103 231.04115295]
[119.83187103 246.04115295]
[119.83187103 261.04113770]
[119.83187103 276.04113770]
[119.83187103 291.04113770]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[11 22]
[12 21]
[13 20]
[14 19]
[24 97]
[25 96]
[27 94]
[29 92]
[30 91]
[31 90]
[32 89]
[33 87]
[34 86]
[35 85]
[36 84]
[103 125]
[104 124]
[105 123]
[106 122]
[107 121]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
