%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:03 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGACCAUGAAUAUUGUACGGUACCAUAAAUACUUGACCACCUGUAGUACAUAAAAACCCAAUxxxxxxxxxxCCGCUAUGUAUUUCGUACAUUACUGCCAGCCACCAUGAAUAUUGUACGGUACCAUAAAUACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[105.56434631 305.20864868]
[105.56434631 290.20864868]
[105.56434631 275.20864868]
[105.56434631 260.20864868]
[105.56434631 245.20863342]
[105.56434631 230.20863342]
[105.56434631 215.20863342]
[105.56434631 200.20863342]
[105.56434631 185.20863342]
[105.56434631 170.20863342]
[104.00675964 155.28971863]
[100.90843964 140.61320496]
[97.81011963 125.93667603]
[82.87046051 119.59809875]
[74.58966064 105.64103699]
[76.18676758 89.49111176]
[87.04093170 77.42636108]
[83.63795471 62.81746674]
[80.23497772 48.20857239]
[76.83200073 33.59968185]
[73.42902374 18.99078941]
[67.22361755 5.33454752]
[58.45740891 -6.83728933]
[49.69120026 -19.00912666]
[40.92499161 -31.18096352]
[32.15878677 -43.35279846]
[23.39257812 -55.52463531]
[20.59449959 -40.78792191]
[9.09003639 -31.16257477]
[-5.90917730 -31.00897026]
[-17.60835075 -40.39669418]
[-20.70764351 -55.07301331]
[-13.80304527 -68.38941193]
[-0.02240713 -74.31343842]
[14.39183426 -70.16120148]
[7.48483562 -83.47635651]
[0.57783717 -96.79151154]
[-6.32916117 -110.10666656]
[-13.23616028 -123.42182922]
[-20.14315796 -136.73698425]
[-34.25146103 -131.58099365]
[-48.90327835 -128.27153015]
[-63.85801315 -126.86292267]
[-78.87010193 -127.37830353]
[-93.69302368 -129.80920410]
[-108.08337402 -134.11572266]
[-121.80485535 -140.22712708]
[-134.63214111 -148.04306030]
[-146.35461426 -157.43519592]
[-156.77975464 -168.24929810]
[-165.73638916 -180.30778503]
[-173.07743835 -193.41264343]
[-178.68235779 -207.34867859]
[-182.45909119 -221.88706970]
[-184.34565735 -236.78904724]
[-184.31103516 -251.80993652]
[-182.35583496 -266.70306396]
[-178.51213074 -281.22390747]
[-172.84304810 -295.13397217]
[-165.44168091 -308.20486450]
[-156.42958069 -320.22192383]
[-145.95469666 -330.98785400]
[-134.18908691 -340.32586670]
[-121.32590485 -348.08261108]
[-107.57640839 -354.13073730]
[-93.16635895 -358.37088013]
[-78.33238983 -360.73345947]
[-63.31808853 -361.17962646]
[-48.37000275 -359.70211792]
[-33.73359299 -356.32516479]
[-19.64920235 -351.10421753]
[-6.34810925 -344.12503052]
[5.95127058 -335.50216675]
[17.04697037 -325.37725830]
[26.75678635 -313.91656494]
[34.92127609 -301.30825806]
[41.40637589 -287.75936890]
[46.10558701 -273.49243164]
[48.94174576 -258.74169922]
[49.86828232 -243.74935913]
[48.86998367 -228.76164246]
[45.96323776 -214.02464294]
[41.19577789 -199.78036499]
[34.64589310 -186.26269531]
[26.42113304 -173.69361877]
[16.65656090 -162.27952576]
[5.51251698 -152.20785522]
[-6.82800293 -143.64398193]
[0.07899576 -130.32882690]
[6.98599434 -117.01367188]
[13.89299297 -103.69850922]
[20.79999161 -90.38335419]
[27.70698929 -77.06819916]
[35.56441498 -64.29084015]
[44.33062363 -52.11900711]
[53.09682846 -39.94717026]
[61.86303711 -27.77533340]
[70.62924194 -15.60349655]
[79.39545441 -3.43165994]
[78.27888489 -18.39004517]
[81.53960419 -33.03134537]
[88.89848328 -46.10218811]
[99.72555542 -56.48363876]
[113.09396362 -63.28699112]
[127.85930634 -65.92984009]
[142.75759888 -64.18594360]
[156.51344299 -58.20458603]
[167.94927979 -48.49780655]
[176.08615112 -35.89656067]
[180.22747803 -21.47957611]
[180.01875305 -6.48102951]
[175.47782898 7.81512690]
[166.99345398 20.18506432]
[155.29191589 29.56984901]
[141.37495422 35.16609573]
[126.43391418 36.49473190]
[111.74783325 33.44202042]
[98.57392120 26.26929092]
[88.03791809 15.58781052]
[91.44089508 30.19670296]
[94.84387207 44.80559540]
[98.24684906 59.41448975]
[101.64982605 74.02338409]
[114.24255371 78.21338654]
[123.13260651 88.06730652]
[126.00883484 101.02339935]
[122.12348175 113.71343231]
[112.48664856 122.83835602]
[115.58496857 137.51487732]
[118.68328857 152.19140625]
[125.41567230 138.78710938]
[137.87208557 130.43020630]
[152.82821655 129.28384399]
[166.41271973 135.64476013]
[175.10928345 147.86645508]
[176.66683960 162.78536987]
[170.68220520 176.53979492]
[158.70449829 185.56944275]
[143.83410645 187.53700256]
[129.92018127 181.93319702]
[120.56434631 170.20863342]
[120.56434631 185.20863342]
[120.56434631 200.20863342]
[120.56434631 215.20863342]
[120.56434631 230.20863342]
[120.56434631 245.20863342]
[120.56434631 260.20864868]
[120.56434631 275.20864868]
[120.56434631 290.20864868]
[120.56434631 305.20864868]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[11 130]
[12 129]
[13 128]
[17 123]
[18 122]
[19 121]
[20 120]
[21 119]
[22 99]
[23 98]
[24 97]
[25 96]
[26 95]
[27 94]
[35 93]
[36 92]
[37 91]
[38 90]
[39 89]
[40 88]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
