%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:22 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGACUAAUCUCAUCAAUACAACCCCCGCCCAUCCUACCCAGCACACACACACCGCUGCUAACxxxxxxxxxxAAAUAUCUCAUCAACAACCGACUAAUCACCACCCAACAAUGACUAAUCAAACUAACCUCACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[-21.93068504 226.08927917]
[-32.80950928 236.41647339]
[-43.68833542 246.74368286]
[-48.37000275 261.85635376]
[-62.92749786 265.00729370]
[-73.80632019 275.33450317]
[-84.68515015 285.66171265]
[-95.56397247 295.98892212]
[-106.44280243 306.31613159]
[-99.53842163 319.75137329]
[-96.70022583 334.58786011]
[-98.15828705 349.62286377]
[-103.79441071 363.63751221]
[-113.15171051 375.49575806]
[-125.47161102 384.23626709]
[-139.75541687 389.15051270]
[-154.84518433 389.84008789]
[-169.51766968 386.24914551]
[-182.58341980 378.66873169]
[-192.98327637 367.71337891]
[-199.87414551 354.27117920]
[-202.69743347 339.43185425]
[-201.22427368 324.39834595]
[-195.57406616 310.38934326]
[-186.20486450 298.54049683]
[-173.87619019 289.81237793]
[-159.58746338 284.91250610]
[-144.49700928 284.23806763]
[-129.82814026 287.84378052]
[-116.77000427 295.43731689]
[-105.89118195 285.11010742]
[-95.01235199 274.78289795]
[-84.13352966 264.45568848]
[-73.25469971 254.12847900]
[-69.35116577 239.75448608]
[-54.01554108 235.86485291]
[-43.13671494 225.53765869]
[-32.25788879 215.21044922]
[-48.85406113 192.77966309]
[-61.68324280 168.00093079]
[-70.42076111 141.50132751]
[-74.84551239 113.95146179]
[-74.84551239 86.04853821]
[-70.42076111 58.49867630]
[-61.68324280 31.99907112]
[-48.85406113 7.22034168]
[-32.25788879 -15.21044922]
[-43.13671494 -25.53765297]
[-54.01554108 -35.86486053]
[-64.89436340 -46.19206238]
[-79.36283112 -41.19985199]
[-94.49226379 -43.51476669]
[-106.80603790 -52.60484695]
[-113.47453308 -66.38127136]
[-112.96537781 -81.67830658]
[-105.39557648 -94.98081207]
[-92.50460815 -103.23197174]
[-77.25473022 -104.53572083]
[-63.15024567 -98.59247589]
[-53.43227005 -86.76795197]
[-50.33391190 -71.77932739]
[-54.56716156 -57.07088852]
[-43.68833542 -46.74368286]
[-32.80950928 -36.41647720]
[-21.93068504 -26.08927345]
[-15.44099617 -32.05670547]
[-8.65965557 -37.69050980]
[-1.60379755 -42.97645187]
[5.70875263 -47.90117645]
[13.25952053 -52.45224380]
[21.02943039 -56.61815262]
[28.99885178 -60.38838577]
[37.14765167 -63.75341034]
[45.45523834 -66.70472717]
[53.90063095 -69.23487854]
[62.46248627 -71.33747864]
[71.11917877 -73.00720978]
[79.84883881 -74.23985291]
[88.62940216 -75.03230286]
[97.43869781 -75.38254547]
[106.25445557 -75.28970337]
[115.05442047 -74.75400543]
[123.81635284 -73.77680969]
[132.51811218 -72.36058044]
[141.13771057 -70.50890350]
[149.65339661 -68.22644806]
[158.04362488 -65.51898956]
[166.28721619 -62.39336014]
[174.36332703 -58.85746002]
[182.25157166 -54.92021942]
[189.93202209 -50.59159088]
[197.38526917 -45.88250732]
[204.59248352 -40.80486679]
[211.53544617 -35.37149429]
[218.19662476 -29.59611893]
[224.55920410 -23.49333191]
[230.60708618 -17.07855034]
[236.32499695 -10.36798286]
[241.69850159 -3.37857962]
[246.71401978 3.87199926]
[251.35888672 11.36543655]
[255.62135315 19.08279991]
[259.49066162 27.00459290]
[262.95700073 35.11080170]
[266.01168823 43.38094711]
[268.64694214 51.79413605]
[270.85614014 60.32910919]
[272.63366699 68.96430969]
[273.97506714 77.67791748]
[274.87692261 86.44792175]
[275.33697510 95.25216675]
[275.35406494 104.06839752]
[274.92813110 112.87435913]
[274.06024170 121.64778900]
[272.75262451 130.36653137]
[271.00857544 139.00856018]
[268.83245850 147.55201721]
[266.22982788 155.97535706]
[263.20721436 164.25727844]
[259.77230835 172.37686157]
[273.15856934 179.14497375]
[286.54486084 185.91308594]
[302.87985229 184.46395874]
[312.07958984 198.03956604]
[304.68017578 212.67446899]
[288.29348755 213.31355286]
[279.77676392 199.29937744]
[266.39047241 192.53126526]
[253.00418091 185.76313782]
[245.70977783 197.64353943]
[237.49488831 208.90708923]
[228.41140747 219.48266602]
[218.51673889 229.30343628]
[207.87338257 238.30737305]
[196.54856873 246.43760681]
[184.61383057 253.64276123]
[172.14457703 259.87731934]
[159.21957397 265.10189819]
[145.92047119 269.28350830]
[132.33126831 272.39572144]
[118.53783417 274.41888428]
[104.62728882 275.34020996]
[90.68751526 275.15386963]
[76.80656433 273.86105347]
[63.07213593 271.46990967]
[49.57098389 267.99557495]
[36.38840485 263.45996094]
[23.60766983 257.89175415]
[11.30952168 251.32612610]
[-0.42835334 243.80453491]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 38]
[2 37]
[3 36]
[5 34]
[6 33]
[7 32]
[8 31]
[9 30]
[47 65]
[48 64]
[49 63]
[50 62]
[120 129]
[121 128]
[122 127]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
