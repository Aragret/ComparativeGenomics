%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:14 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGAUACUAACCCCAGGGUUGGUCAAUUUCGUGCCAGCCACCGCGGUCACACGAUUAACCCAAxxxxxxxxxxCCCAAAAAGGCAUAAUUAAACUUUACUUCCUCUCUUUCUUCUUCCCACUCAUCCUAACCCCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[97.32641602 421.92504883]
[97.32641602 406.92504883]
[97.32641602 391.92504883]
[97.32641602 376.92504883]
[97.32641602 361.92504883]
[97.32641602 346.92504883]
[97.32641602 331.92504883]
[97.32641602 316.92504883]
[97.32641602 301.92504883]
[97.32641602 286.92504883]
[81.84631348 283.55264282]
[67.48468018 276.84722900]
[54.94965363 267.13616943]
[44.86002350 254.89511108]
[37.71468735 240.72468567]
[33.86797714 225.32102966]
[33.51210785 209.44160461]
[36.66754532 193.86793518]
[43.18187714 179.36717224]
[52.73715973 166.65423584]
[64.86544037 156.35665894]
[78.97167206 148.98353577]
[94.36290741 144.90039062]
[93.73892975 129.91337585]
[93.11495209 114.92636108]
[84.73281097 102.48692322]
[71.07656860 96.28151703]
[57.42033005 90.07611084]
[43.76408768 83.87070465]
[33.23847961 93.35344696]
[19.92984009 98.08244324]
[5.86732817 97.37182617]
[-6.81835747 91.36247253]
[-16.21781158 80.99556732]
[-20.93030167 67.86536407]
[-20.27244759 53.97406387]
[-33.79663849 47.48590088]
[-47.32082748 40.99773407]
[-60.84501648 34.50957108]
[-74.36920929 28.02140427]
[-88.08926392 21.95839119]
[-101.99181366 16.32643509]
[-111.18650818 15.99562645]
[-116.12303925 10.42998791]
[-129.90542603 4.51002502]
[-146.11822510 6.97522879]
[-156.14682007 -6.00009871]
[-149.67466736 -21.06805229]
[-133.35975647 -22.72801399]
[-123.98545837 -9.27235603]
[-110.20307922 -3.35239339]
[-96.35986328 2.42387915]
[-82.45730591 8.05583572]
[-79.03520203 6.98034000]
[-74.91481781 7.54965305]
[-70.89402771 10.07664013]
[-67.88104248 14.49721527]
[-54.35684967 20.98538017]
[-40.83266068 27.47354507]
[-27.30847168 33.96171188]
[-13.78428173 40.44987488]
[-1.52763927 30.24326134]
[14.00579739 26.37442780]
[29.73151779 29.66369247]
[42.50412369 39.50477219]
[49.74644852 53.97579575]
[49.96949387 70.21446228]
[63.62573624 76.41986847]
[77.28197479 82.62527466]
[90.93821716 88.83068085]
[81.92877197 76.83777618]
[68.75927734 69.65693665]
[59.14287186 58.14499664]
[54.42084885 43.90763474]
[55.25183105 28.93066788]
[61.51992035 15.30308247]
[72.35083771 4.92564440]
[86.23389435 -0.75420535]
[101.23268890 -0.94424427]
[115.25519562 4.38203430]
[126.34556580 14.48172379]
[132.95690918 27.94612312]
[134.16709900 42.89722824]
[129.80731201 57.24965668]
[120.48304749 69.00381470]
[112.23920441 81.53533936]
[125.48178864 74.49020386]
[138.72436523 67.44506836]
[151.96696472 60.39993286]
[148.26910400 45.78523636]
[148.17692566 30.71026039]
[151.69578552 16.05143929]
[158.62110901 2.66101909]
[168.55026245 -8.68249798]
[180.90597534 -17.31961632]
[194.96990967 -22.74818230]
[209.92439270 -24.65258980]
[224.90000916 -22.92211723]
[239.02607727 -17.65737152]
[251.48133850 -9.16443825]
[261.54165649 2.06291294]
[268.62213135 15.37194061]
[272.31112671 29.98887444]
[272.39416504 45.06390381]
[268.86642456 59.72058868]
[261.93298340 73.10681152]
[251.99694824 84.44430542]
[239.63600159 93.07392883]
[225.56878662 98.49396515]
[210.61314392 100.38930511]
[195.63859558 98.64975739]
[181.51571655 93.37644958]
[169.06559753 84.87596893]
[159.01210022 73.64251709]
[145.76950073 80.68765259]
[132.52691650 87.73278809]
[119.28433990 94.77792358]
[134.18690491 93.07102203]
[146.38694763 101.79792786]
[149.58555603 116.45292664]
[142.13128662 129.46960449]
[127.87278748 134.12741089]
[114.17176056 128.02153015]
[108.10197449 114.30238342]
[108.72594452 129.28939819]
[109.34992218 144.27641296]
[123.36361694 146.59544373]
[136.64137268 151.62689209]
[148.66392517 159.17176819]
[158.96151733 168.93287659]
[167.13227844 180.52647400]
[172.85787964 193.49734497]
[175.91595459 207.33666992]
[176.18875122 221.50204468]
[173.66760254 235.43864441]
[168.45326233 248.60105896]
[160.75183105 260.47454834]
[150.86663818 270.59521484]
[139.18629456 278.56814575]
[126.16934967 284.08279419]
[112.32641602 286.92504883]
[112.32641602 301.92504883]
[112.32641602 316.92504883]
[112.32641602 331.92504883]
[112.32641602 346.92504883]
[112.32641602 361.92504883]
[112.32641602 376.92504883]
[112.32641602 391.92504883]
[112.32641602 406.92504883]
[112.32641602 421.92504883]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[23 126]
[24 125]
[25 124]
[26 70]
[27 69]
[28 68]
[29 67]
[36 61]
[37 60]
[38 59]
[39 58]
[40 57]
[41 53]
[42 52]
[44 51]
[45 50]
[86 117]
[87 116]
[88 115]
[89 114]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
