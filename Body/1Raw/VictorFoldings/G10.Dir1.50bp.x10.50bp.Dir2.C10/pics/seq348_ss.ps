%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:51 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCCACAGCACUUAAACACAUCUCUGCCAAACCCCAAAAACAAAGAACCCUAACACCAGCCUxxxxxxxxxxAUGAUGAAACUUCGGCUCACUCCUUGGCGCCUGCCUGAUCCUCCAAAUCACCACAGGACUCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[113.66824341 293.54827881]
[113.66824341 278.54827881]
[113.66824341 263.54827881]
[113.66824341 248.54826355]
[113.66824341 233.54826355]
[113.66824341 218.54826355]
[113.66824341 203.54826355]
[113.66824341 188.54826355]
[113.66824341 173.54826355]
[113.66824341 158.54826355]
[85.77862549 155.63601685]
[63.50994110 140.78651428]
[51.33033752 118.39380646]
[51.01276779 94.17948151]
[61.45502853 73.75067902]
[50.57620621 63.42346954]
[39.69738007 53.09626770]
[27.14374542 60.21145248]
[13.10719967 63.48788452]
[-1.26733208 62.66756058]
[-14.80996704 57.82626724]
[-26.42107582 49.36667252]
[-35.16057205 37.98484802]
[-40.32400894 24.61301231]
[-41.49938583 10.34316063]
[-38.59997177 -3.66209340]
[-31.87066841 -16.26424599]
[-42.53229523 -26.81553650]
[-53.19392014 -37.36682510]
[-63.85554504 -47.91811752]
[-75.58607483 -38.54201508]
[-88.32579803 -30.59117126]
[-101.90243530 -24.17311478]
[-116.13237762 -19.37464142]
[-130.82316589 -16.26064491]
[-145.77615356 -14.87323952]
[-160.78909302 -15.23118687]
[-175.65896606 -17.32964706]
[-190.18466187 -21.14023972]
[-204.16973877 -26.61143112]
[-217.42507935 -33.66923141]
[-229.77140808 -42.21818924]
[-241.04176331 -52.14269257]
[-251.08370972 -63.30852509]
[-259.76144409 -75.56467438]
[-266.95764160 -88.74539948]
[-272.57495117 -102.67243195]
[-276.53741455 -117.15744019]
[-278.79141235 -132.00453186]
[-279.30651855 -147.01289368]
[-278.07574463 -161.97958374]
[-275.11572266 -176.70217896]
[-270.46649170 -190.98156738]
[-264.19091797 -204.62466431]
[-256.37387085 -217.44692993]
[-247.12109375 -229.27496338]
[-236.55770874 -239.94882202]
[-224.82655334 -249.32414246]
[-212.08630371 -257.27413940]
[-198.50923157 -263.69128418]
[-184.27897644 -268.48880005]
[-169.58796692 -271.60183716]
[-154.63488770 -272.98822021]
[-139.62197876 -272.62927246]
[-124.75225067 -270.52984619]
[-110.22680664 -266.71826172]
[-96.24208832 -261.24615479]
[-82.98722076 -254.18745422]
[-70.64146423 -245.63768005]
[-59.37177277 -235.71241760]
[-49.33057022 -224.54592896]
[-40.65364075 -212.28918457]
[-33.45833588 -199.10798645]
[-27.84195900 -185.18057251]
[-23.88047028 -170.69529724]
[-21.62743950 -155.84806824]
[-21.11334038 -140.83966064]
[-22.34512520 -125.87306213]
[-25.30613136 -111.15066528]
[-29.95631981 -96.87157440]
[-36.23279953 -83.22891235]
[-44.05068588 -70.40716553]
[-53.30425644 -58.57974243]
[-42.64263153 -48.02845383]
[-31.98100471 -37.47716141]
[-21.31937790 -26.92587090]
[-7.50595331 -34.24631119]
[7.91088486 -36.95320129]
[23.43025970 -34.77087784]
[37.53756714 -27.90024376]
[48.85228729 -17.00034714]
[56.26308060 -3.12517548]
[59.03694153 12.37825489]
[56.89167786 28.00066376]
[50.02458572 42.21744156]
[60.90340805 52.54464722]
[71.78223419 62.87184906]
[80.99609375 55.77758789]
[92.00110626 51.01726151]
[104.19467163 49.04208755]
[116.86144257 50.14519882]
[129.21527100 54.43383789]
[140.44790649 61.81278229]
[149.78143311 71.98058319]
[156.52098083 84.43938446]
[160.10427856 98.51819611]
[175.00617981 96.80551147]
[189.90808105 95.09281921]
[202.75161743 84.89596558]
[217.90263367 91.17119598]
[219.77508545 107.46309662]
[206.44273376 117.01195526]
[191.62077332 109.99472046]
[176.71887207 111.70741272]
[161.81697083 113.42009735]
[159.64013672 128.26130676]
[173.42251587 134.18127441]
[187.20489502 140.10122681]
[200.98727417 146.02119446]
[214.86831665 138.82044983]
[230.11901855 142.27734375]
[239.53846741 154.75964355]
[238.67909241 170.37359619]
[227.94665527 181.74676514]
[212.40869141 183.50907898]
[199.40174866 174.82844543]
[195.06732178 159.80357361]
[181.28492737 153.88360596]
[167.50254822 147.96365356]
[153.72016907 142.04368591]
[147.45718384 146.16983032]
[156.71418762 157.97271729]
[165.97117615 169.77558899]
[178.43872070 178.11589050]
[178.38594055 193.11578369]
[165.86000061 201.36811829]
[152.05683899 195.49678040]
[149.31399536 180.74960327]
[142.12260437 167.58586121]
[134.93122864 154.42211914]
[128.66824341 158.54826355]
[128.66824341 173.54826355]
[128.66824341 188.54826355]
[128.66824341 203.54826355]
[128.66824341 218.54826355]
[128.66824341 233.54826355]
[128.66824341 248.54826355]
[128.66824341 263.54827881]
[128.66824341 278.54827881]
[128.66824341 293.54827881]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[15 97]
[16 96]
[17 95]
[27 86]
[28 85]
[29 84]
[30 83]
[106 115]
[107 114]
[108 113]
[116 130]
[117 129]
[118 128]
[119 127]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
