%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:06 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGAAUAAAACUAGGAAUAGCCCCCUUUCACUUCUGAGUCCCAGAGGUUACCCAAGGCACCCCxxxxxxxxxxCCAUCGCUGUAGUAUAUCCAAAGACAACCAUCAUUCCCCCUAAAUAAAUUAAAAAAACUACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[139.85314941 451.60128784]
[139.85314941 436.60128784]
[139.85314941 421.60128784]
[139.85314941 406.60128784]
[139.85314941 391.60128784]
[139.85314941 376.60128784]
[139.85314941 361.60128784]
[139.85314941 346.60128784]
[139.85314941 331.60128784]
[139.85314941 316.60128784]
[138.29556274 301.68237305]
[135.19723511 287.00582886]
[132.09892273 272.32931519]
[115.18747711 270.39138794]
[99.92053986 262.80804443]
[88.12463379 250.46791077]
[81.21732330 234.82989502]
[80.03687286 217.75057983]
[84.74054718 201.26390076]
[94.78389740 187.33886719]
[108.98371887 177.64443970]
[104.97598267 163.18974304]
[100.96823883 148.73506165]
[96.96050262 134.28036499]
[92.95275879 119.82568359]
[80.09436035 112.10160065]
[65.45085907 115.35242462]
[60.91317749 130.02569580]
[49.63589096 140.45251465]
[34.65253448 143.82809448]
[19.99355316 139.24444580]
[9.60214233 127.93453217]
[6.27353668 112.94066620]
[10.90311527 98.29612732]
[22.24554443 87.94021606]
[37.24976730 84.65863037]
[51.87972641 89.33409119]
[62.20003128 100.70892334]
[76.84353638 97.45809937]
[77.77915955 82.48730469]
[63.65435791 77.43854523]
[49.52955627 72.38979340]
[35.40475464 67.34103394]
[20.34740067 72.87779236]
[6.70576191 64.43473816]
[4.94453430 48.48865128]
[16.41478157 37.27201080]
[32.31750870 39.38926315]
[40.45351028 53.21623230]
[54.57831192 58.26498795]
[68.70311737 63.31374741]
[82.82791901 68.36250305]
[95.99649811 61.17999268]
[99.39947510 46.57110214]
[102.80245972 31.96220779]
[106.20543671 17.35331535]
[92.10694122 12.17528534]
[78.75164032 5.30391932]
[66.34201050 -3.15661335]
[55.06616211 -13.07805347]
[45.09504700 -24.30999374]
[36.57982254 -36.68216324]
[29.64957237 -50.00699615]
[24.40936089 -64.08250427]
[20.93862724 -78.69528961]
[19.28998756 -93.62384033]
[19.48843575 -108.64183807]
[21.53096008 -123.52161407]
[25.38659859 -138.03759766]
[30.99690056 -151.96971130]
[38.27681732 -165.10678101]
[47.11598206 -177.24963379]
[57.38040161 -188.21418762]
[68.91446686 -197.83421326]
[81.54331970 -205.96388245]
[95.07551575 -212.47996521]
[109.30590820 -217.28366089]
[124.01877594 -220.30215454]
[138.99105835 -221.48966980]
[153.99580383 -220.82823181]
[168.80551147 -218.32786560]
[183.19570923 -214.02644348]
[196.94821167 -207.98921204]
[209.85453796 -200.30766296]
[221.71905518 -191.09828186]
[232.36189270 -180.50064087]
[241.62168884 -168.67543030]
[249.35807800 -155.80189514]
[255.45378113 -142.07521057]
[259.81640625 -127.70345306]
[262.37976074 -112.90451050]
[263.10504150 -97.90272522]
[261.98126221 -82.92551422]
[259.02539062 -68.19994354]
[254.28230286 -53.94923401]
[247.82386780 -40.38943100]
[239.74801636 -27.72609520]
[230.17715454 -16.15119934]
[219.25637817 -5.84021521]
[207.15126038 3.05054426]
[194.04528809 10.38629723]
[180.13716125 16.05583572]
[165.63772583 19.97321129]
[150.76676941 22.07903862]
[135.74975586 22.34139061]
[120.81432343 20.75629425]
[117.41134644 35.36518478]
[114.00836945 49.97407913]
[110.60539246 64.58296967]
[125.02285767 79.90204620]
[127.14513397 98.00100708]
[119.28112030 111.28839874]
[107.40744781 115.81793976]
[111.41519165 130.27262878]
[115.42292786 144.72732544]
[119.43067169 159.18200684]
[123.43840790 173.63670349]
[136.53376770 173.85020447]
[149.10791016 177.46539307]
[160.29376221 184.22561646]
[169.32189941 193.65760803]
[175.57347107 205.10459900]
[178.62258911 217.77207947]
[178.26542664 230.78288269]
[174.53370667 243.23802185]
[167.69213867 254.27870178]
[158.21954346 263.14556885]
[146.77545166 269.23098755]
[149.87376404 283.90753174]
[152.97209167 298.58404541]
[159.70446777 285.17974854]
[172.16088867 276.82284546]
[187.11701965 275.67648315]
[200.70152283 282.03741455]
[209.39808655 294.25909424]
[210.95564270 309.17800903]
[204.97100830 322.93243408]
[192.99330139 331.96206665]
[178.12290955 333.92965698]
[164.20898438 328.32583618]
[154.85314941 316.60128784]
[154.85314941 331.60128784]
[154.85314941 346.60128784]
[154.85314941 361.60128784]
[154.85314941 376.60128784]
[154.85314941 391.60128784]
[154.85314941 406.60128784]
[154.85314941 421.60128784]
[154.85314941 436.60128784]
[154.85314941 451.60128784]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[11 130]
[12 129]
[13 128]
[21 117]
[22 116]
[23 115]
[24 114]
[25 113]
[26 39]
[27 38]
[40 52]
[41 51]
[42 50]
[43 49]
[53 109]
[54 108]
[55 107]
[56 106]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
