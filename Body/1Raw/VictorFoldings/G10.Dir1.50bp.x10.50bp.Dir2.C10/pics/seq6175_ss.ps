%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:27 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGAAUUCAAUAUGAAAAUCACCUCGGAGCUGGUAAAAAGAGGCCUAACCCCUGUCUUUAGAUxxxxxxxxxxCCAUGGAUGACCCCCCUCAGAUAGGGGUCCCUUGACCACCAUCCUCCGUGAAAUCAAUAUCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[94.84156799 259.95285034]
[94.52951813 244.95610046]
[94.21746063 229.95935059]
[93.90540314 214.96260071]
[93.59334564 199.96585083]
[93.28128815 184.96908569]
[92.96923065 169.97233582]
[92.65718079 154.97558594]
[92.34512329 139.97883606]
[78.38472748 134.49179077]
[67.94491577 145.26260376]
[63.90633774 163.19775391]
[46.89784622 167.40621948]
[36.68436432 178.39187622]
[26.47088623 189.37754822]
[16.25740623 200.36320496]
[9.90076637 216.08038330]
[-6.96186495 214.32310486]
[-9.94130707 197.63301086]
[5.27174139 190.14973450]
[15.48522091 179.16406250]
[25.69870186 168.17840576]
[35.91218185 157.19273376]
[35.79632187 145.05627441]
[44.27188110 135.81593323]
[57.17411041 134.82279968]
[67.61392212 124.05198669]
[61.83899689 96.68981171]
[75.04163361 73.68546295]
[98.84870911 65.78746033]
[93.81562805 50.78817749]
[103.78692627 39.72370911]
[106.57924652 24.98590279]
[109.37157440 10.24809742]
[112.16389465 -4.48970890]
[114.95622253 -19.22751427]
[108.46162415 -36.42635345]
[120.34951019 -49.29795074]
[122.83463287 -64.09066010]
[125.31974792 -78.88336945]
[127.80487061 -93.67607117]
[115.80657959 -105.55433655]
[113.25399780 -122.07601929]
[120.95385742 -136.72792053]
[135.71014404 -143.85234070]
[137.88697815 -158.69354248]
[140.06381226 -173.53474426]
[138.20619202 -182.54591370]
[142.44340515 -188.66079712]
[144.92852783 -203.45349121]
[143.19866943 -207.59706116]
[142.94459534 -211.65988159]
[143.95182800 -215.17660522]
[145.87380981 -217.80337524]
[148.28462219 -219.35107422]
[151.99078369 -233.88600159]
[155.69694519 -248.42094421]
[159.40310669 -262.95587158]
[163.10926819 -277.49081421]
[166.81542969 -292.02575684]
[170.52159119 -306.56066895]
[174.22775269 -321.09561157]
[177.93391418 -335.63055420]
[181.64007568 -350.16549683]
[167.93266296 -356.35241699]
[155.50796509 -364.82577515]
[144.74353027 -375.32809448]
[135.96650696 -387.54016113]
[129.44358826 -401.09091187]
[125.37300873 -415.56851196]
[123.87847900 -430.53305054]
[125.00540161 -445.52975464]
[128.71954346 -460.10290527]
[134.90803528 -473.80960083]
[143.38279724 -486.23333740]
[153.88632202 -496.99658203]
[166.09939575 -505.77224731]
[179.65087891 -512.29364014]
[194.12895203 -516.36254883]
[209.09367371 -517.85540771]
[224.09024048 -516.72674561]
[238.66296387 -513.01098633]
[252.36895752 -506.82092285]
[264.79174805 -498.34475708]
[275.55380249 -487.83999634]
[284.32806396 -475.62594604]
[290.84790039 -462.07373047]
[294.91519165 -447.59518433]
[296.40631104 -432.63027954]
[295.27600098 -417.63385010]
[291.55856323 -403.06155396]
[285.36694336 -389.35626221]
[276.88937378 -376.93441772]
[266.38342285 -366.17358398]
[254.16835022 -357.40069580]
[240.61538696 -350.88238525]
[226.13638306 -346.81674194]
[211.17132568 -345.32730103]
[196.17501831 -346.45932007]
[192.46885681 -331.92440796]
[188.76269531 -317.38946533]
[185.05653381 -302.85452271]
[181.35037231 -288.31958008]
[177.64421082 -273.78463745]
[173.93804932 -259.24972534]
[170.23188782 -244.71478271]
[166.52572632 -230.17984009]
[162.81956482 -215.64491272]
[159.72123718 -200.96838379]
[157.23611450 -186.17567444]
[154.90501404 -171.35791016]
[152.72817993 -156.51670837]
[150.55134583 -141.67550659]
[160.94689941 -133.24174500]
[165.84164429 -120.66585541]
[163.85102844 -107.20896912]
[155.39120483 -96.41802979]
[142.59757996 -91.19095612]
[140.11245728 -76.39824677]
[137.62733459 -61.60554123]
[135.14222717 -46.81283188]
[141.91587830 -36.74184418]
[139.92184448 -24.36271667]
[129.69403076 -16.43519020]
[126.90170288 -1.69738436]
[124.10938263 13.04042149]
[121.31705475 27.77822685]
[118.52473450 42.51603317]
[123.75753784 56.46117401]
[113.58651733 68.57978821]
[120.77452850 72.09712982]
[127.05544281 77.26018524]
[132.05261230 83.83560181]
[135.44931030 91.50397491]
[137.00833130 99.87522125]
[136.58758545 108.50836182]
[134.15095520 116.93473053]
[129.77325439 124.68344116]
[123.63925934 131.30761719]
[116.03646851 136.41004944]
[107.34187317 139.66677856]
[107.65393066 154.66352844]
[107.96598816 169.66027832]
[108.27804565 184.65702820]
[108.59010315 199.65379333]
[108.90215302 214.65054321]
[109.21421051 229.64729309]
[109.52626801 244.64404297]
[109.83832550 259.64080811]
[112.42932129 278.84854126]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 149]
[2 148]
[3 147]
[4 146]
[5 145]
[6 144]
[7 143]
[8 142]
[9 141]
[10 27]
[11 26]
[13 23]
[14 22]
[15 21]
[16 20]
[30 130]
[32 128]
[33 127]
[34 126]
[35 125]
[36 124]
[38 121]
[39 120]
[40 119]
[41 118]
[45 113]
[46 112]
[47 111]
[49 110]
[50 109]
[55 108]
[56 107]
[57 106]
[58 105]
[59 104]
[60 103]
[61 102]
[62 101]
[63 100]
[64 99]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
