%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:13 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGACCCCAUAAACAAAUAGGUUUGGUCCUAGCCUUUCUAUUAGCUCUUAGUAAGAUUACACAxxxxxxxxxxCAAAGGCCCCAACGUUGUAGGCCCCUACGGGCUACUACAACCCUUCGCUGACGCCAUAAACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[109.70007324 258.08343506]
[109.07609558 243.09642029]
[108.45211792 228.10940552]
[107.82814026 213.12239075]
[107.20416260 198.13537598]
[106.58018494 183.14836121]
[105.95620728 168.16134644]
[105.33222961 153.17433167]
[91.80804443 146.68617249]
[79.72805023 155.57852173]
[67.64806366 164.47087097]
[55.56807709 173.36322021]
[43.48809052 182.25556946]
[41.84635544 186.43481445]
[39.20112610 189.52897644]
[36.03027725 191.35314941]
[32.82198715 191.90164185]
[30.01372528 191.33508301]
[17.23636627 199.19250488]
[4.45900965 207.04992676]
[-8.31834793 214.90734863]
[-11.73954201 230.33689880]
[-25.11373138 238.75750732]
[-40.50624847 235.17337036]
[-48.78498077 221.71090698]
[-45.03831100 206.35714722]
[-31.48906517 198.22120667]
[-16.17577362 202.12998962]
[-3.39841604 194.27256775]
[9.37894154 186.41514587]
[22.15629959 178.55772400]
[34.59573746 170.17558289]
[46.67572784 161.28323364]
[58.75571442 152.39086914]
[70.83570099 143.49851990]
[82.91569519 134.60617065]
[68.71350098 116.27483368]
[68.43338776 95.13595581]
[79.76909637 79.76747131]
[72.31418610 66.75115967]
[64.85927582 53.73485184]
[57.40436554 40.71854019]
[49.94945526 27.70223236]
[42.49454498 14.68592358]
[27.78322601 19.44871330]
[12.41036224 21.06357574]
[-2.95832133 19.46292496]
[-17.65776253 14.71837234]
[-31.05234337 7.03752756]
[-42.56338120 -3.24508524]
[-51.69412613 -15.68259621]
[-58.05118942 -29.73521233]
[-61.36149979 -44.79363632]
[-61.48403931 -60.20550156]
[-58.41583633 -75.30361176]
[-52.29199600 -89.43484497]
[-43.37975693 -101.98838806]
[-32.06682968 -112.42216492]
[-39.79091263 -125.28056335]
[-47.51499939 -138.13896179]
[-62.11166382 -145.61354065]
[-62.66647339 -162.00331116]
[-48.60868454 -170.44786072]
[-34.39974594 -162.26019287]
[-34.65659714 -145.86305237]
[-26.93251038 -133.00465393]
[-19.20842552 -120.14624786]
[-5.48314714 -125.03874207]
[8.93985462 -127.14633179]
[23.50114059 -126.38529968]
[37.63551712 -122.78322601]
[50.79397964 -116.47801208]
[62.46503448 -107.71258545]
[72.19458008 -96.82554626]
[79.60358429 -84.23809814]
[84.40283203 -70.43773651]
[86.40423584 -55.95938110]
[85.52818298 -41.36463547]
[81.80672455 -27.22000885]
[75.38240051 -14.07491398]
[66.50276184 -2.44034171]
[55.51085663 7.23101282]
[62.96576691 20.24732208]
[70.42067719 33.26362991]
[77.87558746 46.27994156]
[85.33049774 59.29624939]
[92.78540802 72.31256104]
[116.41173553 72.59991455]
[134.28407288 91.73452759]
[132.73970032 120.43460083]
[147.60275269 118.41226959]
[160.23376465 108.88504028]
[173.88800049 114.83577728]
[188.75103760 112.81343842]
[203.48884583 110.02111816]
[218.06155396 106.46635437]
[232.63424683 102.91159058]
[247.20695496 99.35683441]
[261.77966309 95.80207062]
[276.35235596 92.24730682]
[290.84796143 88.39014435]
[305.26016235 84.23226166]
[319.67239380 80.07437134]
[334.08459473 75.91648865]
[345.06127930 63.73270035]
[361.04257202 67.41107941]
[365.58828735 83.16761017]
[354.02218628 94.79333496]
[338.24249268 90.32870483]
[323.83026123 94.48658752]
[309.41806030 98.64447784]
[295.00582886 102.80236053]
[291.92898560 106.53176117]
[286.45162964 108.32896423]
[279.90713501 106.82000732]
[265.33441162 110.37477112]
[250.76171875 113.92953491]
[236.18901062 117.48429871]
[221.61631775 121.03905487]
[207.04360962 124.59381866]
[218.06068420 134.77340698]
[217.18377686 149.74774170]
[205.05383301 158.57182312]
[190.53684998 154.79594421]
[184.24357605 141.17996216]
[190.77337646 127.67649078]
[175.91032410 129.69882202]
[164.34242249 139.08140564]
[149.62509155 133.27531433]
[134.76203918 135.29765320]
[148.77514648 140.64860535]
[163.76406860 141.22485352]
[176.17990112 149.64193726]
[182.26481628 163.35229492]
[180.17710876 178.20629883]
[170.54869080 189.70819092]
[156.29370117 194.37675476]
[141.72663879 190.79898071]
[131.25640869 180.05773926]
[128.05200195 165.40354919]
[120.31924438 152.55035400]
[120.94322205 167.53736877]
[121.56719971 182.52438354]
[122.19117737 197.51139832]
[122.81515503 212.49841309]
[123.43913269 227.48542786]
[124.06311035 242.47244263]
[124.68708801 257.45947266]
[131.38708496 273.03335571]
[118.27655029 283.78280640]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 148]
[2 147]
[3 146]
[4 145]
[5 144]
[6 143]
[7 142]
[8 141]
[9 36]
[10 35]
[11 34]
[12 33]
[13 32]
[18 31]
[19 30]
[20 29]
[21 28]
[39 87]
[40 86]
[41 85]
[42 84]
[43 83]
[44 82]
[58 67]
[59 66]
[60 65]
[90 130]
[91 129]
[93 127]
[94 126]
[95 120]
[96 119]
[97 118]
[98 117]
[99 116]
[100 115]
[101 112]
[102 111]
[103 110]
[104 109]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
