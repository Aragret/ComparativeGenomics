%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:59 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGGGUUUGAAGCUGCUUCUUCGAAUUUGCAAUUCAAUAUGAAAAUCACCUCGGAGCUGGUAAxxxxxxxxxxGUAUACAUAAAAUCUAGACAAAAAAGGAAGGAAUCGAACCCCCCAAAGCUGGUUUCAAGCCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[114.69168854 338.67965698]
[114.69168854 323.67965698]
[114.69168854 308.67965698]
[114.69168854 293.67965698]
[114.69168854 278.67965698]
[114.69168854 263.67965698]
[114.69168854 248.67965698]
[114.69168854 233.67965698]
[114.69168854 218.67965698]
[114.69168854 203.67965698]
[112.97899628 188.77775574]
[102.55606079 178.13764954]
[106.96083832 162.94198608]
[103.55786133 148.33308411]
[100.15488434 133.72419739]
[96.75190735 119.11530304]
[79.96960449 108.74273682]
[79.64804077 86.68389130]
[64.83028412 84.35278320]
[50.01252365 82.02168274]
[35.19476700 79.69057465]
[42.75809860 92.64418793]
[39.13309479 107.19957733]
[26.37785912 115.09286499]
[11.73423290 111.84260559]
[3.51619029 99.29414368]
[6.38955975 84.57192993]
[18.72447968 76.03421021]
[4.31226444 71.87631989]
[-10.09995174 67.71843719]
[-24.51216698 63.56054688]
[-39.08486938 60.00578690]
[-53.79283142 57.06030273]
[-68.50079346 54.11482239]
[-83.20875549 51.16933823]
[-98.25959015 56.04611969]
[-109.21973419 45.96026230]
[-123.92768860 43.01478195]
[-135.24420166 53.63156891]
[-150.64401245 55.53564072]
[-164.20558167 47.99485016]
[-170.71420288 33.90877533]
[-167.66719055 18.69380569]
[-156.23616028 8.20040512]
[-140.81660461 6.46350145]
[-127.33763885 14.15096855]
[-120.98220825 28.30681992]
[-106.27424622 31.25230217]
[-92.27542877 26.16483688]
[-80.26327515 36.46137619]
[-65.55531311 39.40686035]
[-50.84735107 42.35234070]
[-36.13938904 45.29782486]
[-33.70119095 43.79365158]
[-30.50151253 43.19696426]
[-26.89511490 43.80996704]
[-23.34192657 45.79639816]
[-20.35428047 49.14833069]
[-5.94206429 53.30621719]
[8.47015190 57.46410751]
[22.88236809 61.62199402]
[37.52586746 64.87281799]
[52.34362793 67.20392609]
[67.16138458 69.53502655]
[81.97914124 71.86613464]
[96.10394287 66.81737518]
[106.08666992 55.62160873]
[116.06939697 44.42584229]
[106.17166901 33.12918091]
[97.73722076 20.70180321]
[90.89392853 7.33210182]
[85.74552155 -6.77724123]
[82.37006378 -21.41233063]
[80.81871033 -36.35130692]
[81.11499023 -51.36769104]
[83.25440979 -66.23384094]
[87.20452881 -80.72439575]
[92.90547943 -94.61967468]
[100.27082062 -107.70903778]
[109.18890381 -119.79404449]
[119.52453613 -130.69149780]
[131.12103271 -140.23617554]
[143.80258179 -148.28340149]
[157.37693787 -154.71119690]
[171.63832092 -159.42207336]
[186.37054443 -162.34465027]
[201.35025024 -163.43461609]
[216.35035706 -162.67544556]
[231.14346313 -160.07862854]
[245.50532532 -155.68356323]
[259.21820068 -149.55686951]
[272.07421875 -141.79141235]
[283.87850952 -132.50491333]
[294.45205688 -121.83817291]
[303.63461304 -109.95288086]
[311.28698730 -97.02922058]
[317.29315186 -83.26311493]
[321.56204224 -68.86324310]
[324.02893066 -54.04791641]
[324.65649414 -39.04172516]
[323.43511963 -24.07215881]
[320.38339233 -9.36615276]
[315.54757690 4.85335255]
[309.00094604 18.37079430]
[300.84274292 30.98125076]
[291.19668579 42.49354935]
[280.20898438 52.73316956]
[268.04620361 61.54487991]
[254.89271545 68.79509735]
[240.94795227 74.37390900]
[226.42329407 78.19673920]
[211.53894043 80.20564270]
[196.52053833 80.37016296]
[181.59574890 78.68779755]
[166.99084473 75.18405914]
[152.92721558 69.91206360]
[139.61805725 62.95172501]
[127.26516724 54.40856934]
[117.28244019 65.60433197]
[107.29971313 76.80010223]
[117.45981598 84.89300537]
[121.57402802 96.50520325]
[119.05733490 107.88011932]
[111.36080170 115.71232605]
[114.76377869 130.32122803]
[118.16675568 144.93011475]
[121.56973267 159.53900146]
[132.23606873 171.22402954]
[127.58789062 185.37477112]
[133.64916992 171.65396118]
[145.31216431 162.22132874]
[159.99714661 159.16331482]
[174.45591736 163.15631104]
[185.49032593 173.31709290]
[190.65968323 187.39820862]
[188.82055664 202.28504944]
[180.37974548 214.68475342]
[167.20428467 221.85464478]
[152.20848083 222.20880127]
[138.70922852 215.66888428]
[129.69168091 203.67965698]
[129.69168091 218.67965698]
[129.69168091 233.67965698]
[129.69168091 248.67965698]
[129.69168091 263.67965698]
[129.69168091 278.67965698]
[129.69168091 293.67965698]
[129.69168091 308.67965698]
[129.69168091 323.67965698]
[129.69168091 338.67965698]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[11 129]
[13 127]
[14 126]
[15 125]
[16 124]
[18 65]
[19 64]
[20 63]
[21 62]
[28 61]
[29 60]
[30 59]
[31 58]
[32 53]
[33 52]
[34 51]
[35 50]
[37 48]
[38 47]
[66 120]
[67 119]
[68 118]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
