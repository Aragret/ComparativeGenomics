%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:17 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGUCAUGCCCCCAUGUCUAACAACAUGGCUUUCUCAACUUUUAAAGGAUAACAGCUAUCCAUxxxxxxxxxxCUCAGGAUACUCCUCAAUAGCCAUCGCUGUAGUAUAUCCAAAGACAACCAUCAUUCCCCCCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[92.50000000 307.26583862]
[92.50000000 292.26583862]
[92.50000000 277.26583862]
[92.50000000 262.26583862]
[92.50000000 247.26583862]
[92.50000000 232.26583862]
[92.50000000 217.26583862]
[92.50000000 202.26583862]
[92.50000000 187.26583862]
[92.50000000 172.26583862]
[74.12785339 167.89134216]
[57.50387573 158.92945862]
[47.52114868 170.12522888]
[37.53842163 181.32098389]
[27.55569649 192.51675415]
[24.75564766 208.67509460]
[9.27089787 214.07458496]
[-2.96917009 203.16070557]
[0.62697649 187.16072083]
[16.35993004 182.53402710]
[26.34265709 171.33825684]
[36.32538223 160.14250183]
[46.30810928 148.94673157]
[37.00653839 136.19979858]
[30.67651176 121.74524689]
[27.61662865 106.26491547]
[27.97122955 90.48905945]
[31.72359085 75.16184998]
[38.69670105 61.00631714]
[48.56162643 48.69020081]
[60.85301590 38.79448318]
[74.99105072 31.78596687]
[90.30882263 27.99525833]
[106.08374023 27.60117531]
[108.87606812 12.86336994]
[103.84297943 -2.13591790]
[113.81428528 -13.20038509]
[116.60660553 -27.93819046]
[119.39893341 -42.67599869]
[122.19125366 -57.41380310]
[111.53141022 -46.86071396]
[97.54125977 -41.45001221]
[82.55467987 -42.08432007]
[69.07176208 -48.65782166]
[59.34176254 -60.07391357]
[54.98786545 -74.42813110]
[56.73639679 -89.32587433]
[64.29566193 -102.28185272]
[76.40460205 -111.13473511]
[91.04318237 -114.40764618]
[105.76935577 -111.55460358]
[118.12646484 -103.05155182]
[126.05306244 -90.31699371]
[128.22691345 -75.47675323]
[134.85540771 -88.93272400]
[141.48390198 -102.38868713]
[148.11241150 -115.84465027]
[154.74090576 -129.30061340]
[160.80392456 -143.02067566]
[166.29095459 -156.98106384]
[171.77798462 -170.94145203]
[177.26501465 -184.90184021]
[182.75204468 -198.86222839]
[185.85037231 -213.53875732]
[186.47434998 -228.52577209]
[187.09832764 -243.51278687]
[187.72230530 -258.49981689]
[188.34628296 -273.48681641]
[174.32063293 -279.23635864]
[163.10939026 -289.43850708]
[156.06636047 -302.86132812]
[154.04202271 -317.88391113]
[157.28082275 -332.69219971]
[165.39166260 -345.49807739]
[177.39512634 -354.75512695]
[191.84172058 -359.34552002]
[206.98695374 -358.71493530]
[221.00196838 -352.93957520]
[232.19439697 -342.71676636]
[239.21267700 -329.28100586]
[241.20932007 -314.25473022]
[237.94323730 -299.45242310]
[229.80880737 -286.66152954]
[217.78831482 -277.42660522]
[203.33329773 -272.86285400]
[202.70932007 -257.87582397]
[202.08534241 -242.88880920]
[201.46136475 -227.90179443]
[200.83738708 -212.91477966]
[209.41021729 -225.22357178]
[221.62031555 -233.93641663]
[236.04800415 -238.04026794]
[251.01580811 -237.05796814]
[264.78341675 -231.10374451]
[275.75009155 -220.86987305]
[282.64074707 -207.54624939]
[284.65420532 -192.68200684]
[281.55636597 -178.00537109]
[273.70742798 -165.22280884]
[262.01995850 -155.82052612]
[247.85284424 -150.89172363]
[232.85330200 -151.00946045]
[218.76531982 -156.16006470]
[207.22688293 -165.74465942]
[199.57955933 -178.64884949]
[196.71243286 -193.37519836]
[191.22540283 -179.41481018]
[185.73837280 -165.45442200]
[180.25134277 -151.49403381]
[174.76431274 -137.53364563]
[175.81608582 -134.86885071]
[175.84056091 -131.61410522]
[174.60266113 -128.17179871]
[172.02212524 -125.02348328]
[168.19686890 -122.67211914]
[161.56837463 -109.21615601]
[154.93988037 -95.76018524]
[148.31137085 -82.30422211]
[141.68287659 -68.84825897]
[136.92906189 -54.62147903]
[134.13673401 -39.88367081]
[131.34440613 -25.14586639]
[128.55209351 -10.40806103]
[133.78489685 3.53708029]
[123.61386871 15.65569401]
[120.82154846 30.39349937]
[133.15174866 35.35045624]
[144.37278748 42.47037506]
[154.10925293 51.51505280]
[162.03540039 62.18188095]
[167.88604736 74.11398315]
[171.46543884 86.91214752]
[172.65383911 100.14818573]
[171.41145325 113.37927246]
[167.77989197 126.16272736]
[161.88061523 138.07086182]
[153.91102600 148.70527649]
[144.13774109 157.71015930]
[132.88774109 164.78424072]
[120.53742981 169.69085693]
[107.50000000 172.26583862]
[107.50000000 187.26583862]
[107.50000000 202.26583862]
[107.50000000 217.26583862]
[107.50000000 232.26583862]
[107.50000000 247.26583862]
[107.50000000 262.26583862]
[107.50000000 277.26583862]
[107.50000000 292.26583862]
[107.50000000 307.26583862]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[12 23]
[13 22]
[14 21]
[15 20]
[34 126]
[35 125]
[37 123]
[38 122]
[39 121]
[40 120]
[54 119]
[55 118]
[56 117]
[57 116]
[58 115]
[59 110]
[60 109]
[61 108]
[62 107]
[63 106]
[64 89]
[65 88]
[66 87]
[67 86]
[68 85]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
