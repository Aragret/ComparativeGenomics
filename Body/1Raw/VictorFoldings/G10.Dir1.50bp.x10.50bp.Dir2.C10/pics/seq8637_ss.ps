%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:46 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGUAACCGCUAACAUUACUGCAGGCCACCUACUCAUGCACCUAAUUGGAAGCGCCACCCUAGCAxxxxxxxxxxUCAGUUCUUCAAAUAUCUACUCAUCUUCCUAAUUACCAUACUAAUCUUAGUUACCGCUAACACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[120.53315735 473.16873169]
[120.22915649 458.17181396]
[119.92514801 443.17486572]
[119.62114716 428.17794800]
[119.31713867 413.18103027]
[119.01313782 398.18411255]
[118.70913696 383.18719482]
[118.40512848 368.19027710]
[118.10112762 353.19335938]
[100.75251007 347.99786377]
[86.16037750 337.23397827]
[76.04929352 322.15478516]
[71.62067413 304.52444458]
[73.41003418 286.41183472]
[81.22229004 269.94781494]
[94.15290070 257.07443237]
[110.69257355 249.31600952]
[108.87290955 234.42678833]
[107.05325317 219.53758240]
[105.23359680 204.64836121]
[96.00949097 192.95368958]
[102.01554108 178.31683350]
[100.19588470 163.42761230]
[98.37622833 148.53839111]
[96.55656433 133.64916992]
[78.49206543 126.10617828]
[67.63162231 109.81895447]
[52.66934967 110.88215637]
[37.70707321 111.94535065]
[22.74480247 113.00854492]
[9.52775574 121.70453644]
[-3.71592259 114.88880157]
[-11.02531528 128.47468567]
[-24.53051376 135.93211365]
[-39.92205811 134.88143921]
[-52.28856277 125.65792847]
[-57.68391800 111.20477295]
[-54.38648987 96.13391876]
[-43.44847488 85.25443268]
[-28.36015129 82.03790283]
[-13.93615055 87.51071930]
[-4.77911806 99.92652893]
[7.36772537 91.30657959]
[21.68160629 98.04627228]
[36.64387894 96.98307800]
[51.60615158 95.91987610]
[66.56842804 94.85668182]
[72.70663452 80.02010345]
[84.99477386 69.68553162]
[100.66399384 66.18161774]
[104.27643585 51.62310410]
[107.88887024 37.06459045]
[111.50131226 22.50607872]
[115.11374664 7.94756651]
[118.57846069 -6.64680719]
[121.89510345 -21.27554321]
[125.21173859 -35.90427780]
[128.52838135 -50.53301239]
[131.84501648 -65.16175079]
[117.74040985 -70.32782745]
[104.41225433 -77.25520325]
[92.07939911 -85.83011627]
[80.94437408 -95.91175842]
[71.19001770 -107.33457947]
[62.97650909 -119.91101074]
[56.43872452 -133.43453979]
[51.68401337 -147.68307495]
[48.79045486 -162.42266846]
[47.80556870 -177.41128540]
[48.74552155 -192.40277100]
[51.59487915 -207.15097046]
[56.30685425 -221.41371155]
[62.80407333 -234.95677185]
[70.97984314 -247.55776978]
[80.69991302 -259.00976562]
[91.80466461 -269.12475586]
[104.11175537 -277.73660278]
[117.41909027 -284.70388794]
[131.50814819 -289.91223145]
[146.14756775 -293.27609253]
[161.09698486 -294.74023438]
[176.11087036 -294.28060913]
[190.94271851 -291.90475464]
[205.34896851 -287.65170288]
[219.09304810 -281.59130859]
[231.94927979 -273.82305908]
[243.70654297 -264.47451782]
[254.17176819 -253.69921875]
[263.17312622 -241.67407227]
[270.56280518 -228.59657288]
[276.21942139 -214.68144226]
[280.05014038 -200.15718079]
[281.99200439 -185.26229858]
[282.01318359 -170.24137878]
[280.11328125 -155.34109497]
[276.32354736 -140.80609131]
[270.70614624 -126.87507629]
[263.35339355 -113.77678680]
[254.38597107 -101.72632599]
[243.95114136 -90.92156219]
[232.22027588 -81.53992462]
[219.38600159 -73.73546600]
[205.65905762 -67.63633728]
[191.26486206 -63.34270477]
[176.43975830 -60.92506409]
[161.42723083 -60.42311859]
[146.47375488 -61.84511185]
[143.15711975 -47.21637726]
[139.84046936 -32.58763885]
[136.52383423 -17.95890427]
[133.20719910 -3.33016849]
[134.80474854 3.93119717]
[129.67225647 11.56000423]
[126.05982208 26.11851692]
[122.44738770 40.67702866]
[118.83494568 55.23554230]
[115.22251129 69.79405212]
[124.25521851 76.42441559]
[130.62626648 85.64186859]
[133.63650513 96.43492889]
[132.95559692 107.61920166]
[128.65827942 117.96737671]
[121.21612549 126.34387970]
[111.44578552 131.82951355]
[113.26544189 146.71873474]
[115.08509827 161.60795593]
[116.90476227 176.49717712]
[126.25902557 189.25680542]
[120.12281799 202.82870483]
[121.94247437 217.71791077]
[123.76213074 232.60713196]
[125.58178711 247.49635315]
[137.57455444 249.14596558]
[148.87699890 253.45619202]
[158.90748596 260.20071411]
[167.15081787 269.02810669]
[173.18473816 279.48007202]
[176.70156860 291.01525879]
[177.52383423 303.03729248]
[175.61329651 314.92556763]
[171.07264709 326.06744385]
[164.14002991 335.88961792]
[155.17655945 343.88772583]
[144.64749146 349.65222168]
[133.09803772 352.88937378]
[133.40205383 367.88629150]
[133.70605469 382.88320923]
[134.01005554 397.88012695]
[134.31405640 412.87704468]
[134.61807251 427.87396240]
[134.92207336 442.87088013]
[135.22607422 457.86779785]
[135.53007507 472.86471558]
[138.11076355 492.07382202]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 153]
[2 152]
[3 151]
[4 150]
[5 149]
[6 148]
[7 147]
[8 146]
[9 145]
[17 132]
[18 131]
[19 130]
[20 129]
[22 127]
[23 126]
[24 125]
[25 124]
[27 47]
[28 46]
[29 45]
[30 44]
[32 42]
[50 117]
[51 116]
[52 115]
[53 114]
[54 113]
[55 111]
[56 110]
[57 109]
[58 108]
[59 107]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
