%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:41 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGACCUCAACACCACCUUCUUCGACCCCGCCGGAGGAGGAGACCCCAUUCUAUACCAACACCxxxxxxxxxxAGCUAUUACCUAAAACAAUUUCACAGCACCAAAUCUCCACCUCCAUCAUCACCUCAACCCCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[92.50000000 409.90164185]
[92.50000000 394.90164185]
[92.50000000 379.90164185]
[92.50000000 364.90164185]
[92.50000000 349.90164185]
[92.50000000 334.90164185]
[92.50000000 319.90164185]
[92.50000000 304.90164185]
[92.50000000 289.90164185]
[92.50000000 274.90164185]
[77.77018738 272.16799927]
[63.78981781 266.77273560]
[51.03553772 258.89822388]
[39.94248962 248.81144714]
[30.88946152 236.85481262]
[24.18593407 223.43466187]
[20.06152153 209.00735474]
[18.65810013 194.06387329]
[20.02492142 179.11297607]
[24.11689758 164.66401672]
[30.79607773 151.20945740]
[39.83630371 139.20816040]
[50.93086243 129.06976318]
[63.70289993 121.14060974]
[77.71820831 115.69200134]
[92.50000000 112.91085815]
[86.74909973 108.09658813]
[72.65966034 113.24320984]
[75.24729156 98.46806335]
[69.49639130 93.65380096]
[54.73033905 96.29266357]
[42.54785156 107.27078247]
[27.03491211 101.95281219]
[24.14990234 85.80943298]
[36.86067581 75.44756317]
[52.09147263 81.52661133]
[66.85752869 78.88774872]
[77.46778107 82.10169983]
[86.96224213 87.22112274]
[95.06764984 94.04006958]
[99.07538605 79.58538055]
[103.08312988 65.13069153]
[107.09086609 50.67600250]
[111.09860992 36.22131348]
[107.32975769 20.85556221]
[118.18627930 10.65825081]
[122.19402313 -3.79643726]
[126.20175934 -18.25112534]
[130.20950317 -32.70581436]
[134.21723938 -47.16050339]
[120.20558167 -52.54834366]
[106.77934265 -59.26337051]
[94.06388092 -67.24288177]
[82.17792511 -76.41237640]
[71.23246002 -86.68624115]
[61.32966995 -97.96853638]
[52.56202316 -110.15393829]
[45.01138306 -123.12865448]
[38.74825287 -136.77156067]
[33.83110428 -150.95524597]
[30.30585098 -165.54730225]
[28.20541000 -180.41148376]
[27.54939270 -195.40898132]
[28.34392357 -210.39979553]
[30.58158302 -225.24392700]
[34.24148178 -239.80279541]
[39.28944016 -253.94046021]
[45.67833328 -267.52493286]
[53.34850693 -280.42935181]
[62.22834015 -292.53323364]
[72.23493195 -303.72357178]
[83.27483368 -313.89587402]
[95.24498749 -322.95516968]
[108.03361511 -330.81689453]
[121.52131653 -337.40762329]
[135.58215332 -342.66580200]
[150.08483887 -346.54232788]
[164.89396667 -349.00106812]
[179.87124634 -350.01901245]
[194.87687683 -349.58666992]
[209.77070618 -347.70806885]
[224.41369629 -344.40075684]
[238.66912842 -339.69561768]
[252.40388489 -333.63659668]
[265.48974609 -326.28021240]
[277.80450439 -317.69522095]
[289.23318481 -307.96173096]
[299.66909790 -297.17065430]
[309.01477051 -285.42272949]
[317.18298340 -272.82766724]
[324.09744263 -259.50302124]
[329.69357300 -245.57325745]
[333.91915894 -231.16839600]
[336.73474121 -216.42294312]
[338.11401367 -201.47459412]
[338.04409790 -186.46292114]
[336.52566528 -171.52806091]
[333.57287598 -156.80947876]
[329.21328735 -142.44461060]
[323.48764038 -128.56755066]
[316.44940186 -115.30789948]
[308.16424561 -102.78945160]
[298.70953369 -91.12908173]
[288.17358398 -80.43566895]
[276.65472412 -70.80905151]
[264.26055908 -62.33912659]
[251.10675049 -55.10496902]
[237.31614685 -49.17412186]
[223.01751709 -44.60196304]
[208.34436035 -41.43118286]
[193.43367004 -39.69138718]
[178.42468262 -39.39882278]
[163.45751953 -40.55621338]
[148.67193604 -43.15276337]
[144.66418457 -28.69807434]
[140.65644836 -14.24338531]
[136.64871216 0.21130309]
[132.64097595 14.66599178]
[136.69648743 28.99784660]
[125.55329895 40.22905350]
[121.54555511 54.68374252]
[117.53781128 69.13842773]
[113.53007507 83.59311676]
[109.52233124 98.04780579]
[107.50000000 112.91085815]
[122.28179169 115.69200134]
[136.29710388 121.14060974]
[149.06913757 129.06976318]
[160.16369629 139.20816040]
[169.20391846 151.20945740]
[175.88310242 164.66401672]
[179.97508240 179.11297607]
[181.34190369 194.06387329]
[179.93847656 209.00735474]
[175.81407166 223.43466187]
[169.11053467 236.85481262]
[160.05751038 248.81144714]
[148.96446228 258.89822388]
[136.21018982 266.77273560]
[122.22981262 272.16799927]
[107.50000000 274.90164185]
[107.50000000 289.90164185]
[107.50000000 304.90164185]
[107.50000000 319.90164185]
[107.50000000 334.90164185]
[107.50000000 349.90164185]
[107.50000000 364.90164185]
[107.50000000 379.90164185]
[107.50000000 394.90164185]
[107.50000000 409.90164185]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[26 125]
[30 37]
[31 36]
[40 124]
[41 123]
[42 122]
[43 121]
[44 120]
[46 118]
[47 117]
[48 116]
[49 115]
[50 114]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
