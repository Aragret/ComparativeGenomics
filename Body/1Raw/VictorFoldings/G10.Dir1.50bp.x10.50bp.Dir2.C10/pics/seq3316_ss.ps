%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:48 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCUACUCCUCAUUGUACCCAUUCUAAUCGCAAUGGCAUUCCUAAUGCUUACCGAACGAAAAAxxxxxxxxxxAACUAAAUACUACCGUAUGGCCCACCAUAAUUACCCCCAUACUCCUUACACUAUUCCUCAUCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[105.25605774 602.20117188]
[105.25605774 587.20117188]
[105.25605774 572.20117188]
[105.25605774 557.20117188]
[105.25605774 542.20117188]
[105.25605774 527.20117188]
[105.25605774 512.20117188]
[105.25605774 497.20117188]
[105.25605774 482.20117188]
[105.25605774 467.20117188]
[90.71366882 463.65051270]
[77.43571472 456.71826172]
[66.19603729 446.80355835]
[57.65085220 434.47943115]
[52.30045319 420.45983887]
[50.45990372 405.55813599]
[52.24049759 390.64001465]
[57.54304886 376.57315063]
[66.06339264 364.17678833]
[77.30982208 354.17395020]
[90.63149261 347.14932251]
[105.25605774 343.51507568]
[105.25605774 328.51507568]
[105.25605774 313.51507568]
[105.25605774 298.51507568]
[90.56049347 295.61428833]
[76.70884705 289.90029907]
[64.23418427 281.59100342]
[53.61700821 271.00415039]
[45.26669312 258.54534912]
[39.50572205 244.69236755]
[36.55724716 229.97692871]
[36.53642273 214.96421814]
[39.44592667 200.23123169]
[45.17576599 186.34457397]
[53.50745392 173.83868408]
[64.12233734 163.19523621]
[76.61376953 154.82463074]
[90.50270844 149.05012512]
[105.25605774 146.09538269]
[105.25605774 131.09538269]
[105.25605774 116.09538269]
[85.70556641 124.59251404]
[60.85509872 108.02140045]
[47.56775665 101.06104279]
[34.28041458 94.10069275]
[20.99307442 87.14033508]
[7.70573378 80.17997742]
[-9.13057518 78.18622589]
[-11.87549782 61.45596313]
[3.44107103 54.18691635]
[14.66609001 66.89263916]
[27.95343208 73.85298920]
[41.24077225 80.81334686]
[54.52811432 87.77370453]
[67.81545258 94.73406219]
[74.38626862 91.11820984]
[67.15476990 77.97646332]
[80.29662323 70.74517059]
[87.52790070 83.88650513]
[94.09871674 80.27065277]
[95.32933044 65.32122040]
[80.81735229 61.35675049]
[67.28103638 54.79299927]
[55.18143082 45.85352325]
[44.93064499 34.84280014]
[36.87781143 22.13585091]
[31.29721260 8.16546917]
[28.37891960 -6.59251881]
[28.22232628 -21.63546181]
[30.83276749 -36.45100403]
[36.12133408 -50.53452682]
[43.90789795 -63.40636063]
[53.92724991 -74.62808990]
[65.83813477 -83.81750488]
[79.23487854 -90.66162872]
[93.66118622 -94.92733765]
[108.62570953 -96.46935272]
[123.61875153 -95.23514557]
[138.12966919 -91.26676941]
[151.66421509 -84.69936371]
[163.76139832 -75.75662994]
[174.00921631 -64.74314117]
[182.05862427 -52.03402328]
[187.63546753 -38.06213760]
[190.54977417 -23.30336571]
[190.70231628 -8.26038074]
[188.08787537 6.55445528]
[182.79551697 20.63655663]
[175.00547791 33.50629044]
[164.98310852 44.72531891]
[153.06974792 53.91152573]
[139.67115784 60.75202942]
[125.24369812 65.01385498]
[110.27876282 66.55183411]
[109.04814911 81.50126648]
[121.46646881 89.91468048]
[134.89392090 83.22859955]
[148.32136536 76.54252625]
[161.74880981 69.85645294]
[175.17626953 63.17037582]
[183.77859497 49.20857620]
[200.16107178 49.94791794]
[207.47079468 64.62783051]
[198.18815613 78.14688110]
[181.86233521 76.59782410]
[168.43489075 83.28390503]
[155.00744629 89.96997833]
[141.57998657 96.65605164]
[128.15254211 103.34212494]
[120.25605774 116.09538269]
[120.25605774 131.09538269]
[120.25605774 146.09538269]
[135.00941467 149.05012512]
[148.89834595 154.82463074]
[161.38978577 163.19523621]
[172.00466919 173.83868408]
[180.33634949 186.34457397]
[186.06619263 200.23123169]
[188.97569275 214.96421814]
[188.95486450 229.97692871]
[186.00639343 244.69236755]
[180.24542236 258.54534912]
[171.89511108 271.00415039]
[161.27793884 281.59100342]
[148.80326843 289.90029907]
[134.95162964 295.61428833]
[120.25605774 298.51507568]
[120.25605774 313.51507568]
[120.25605774 328.51507568]
[120.25605774 343.51507568]
[134.88063049 347.14932251]
[148.20230103 354.17395020]
[159.44873047 364.17678833]
[167.96907043 376.57315063]
[173.27162170 390.64001465]
[175.05221558 405.55813599]
[173.21166992 420.45983887]
[167.86126709 434.47943115]
[159.31608582 446.80355835]
[148.07640076 456.71826172]
[134.79844666 463.65051270]
[120.25605774 467.20117188]
[120.25605774 482.20117188]
[120.25605774 497.20117188]
[120.25605774 512.20117188]
[120.25605774 527.20117188]
[120.25605774 542.20117188]
[120.25605774 557.20117188]
[120.25605774 572.20117188]
[120.25605774 587.20117188]
[120.25605774 602.20117188]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 152]
[2 151]
[3 150]
[4 149]
[5 148]
[6 147]
[7 146]
[8 145]
[9 144]
[10 143]
[22 131]
[23 130]
[24 129]
[25 128]
[40 113]
[41 112]
[42 111]
[44 56]
[45 55]
[46 54]
[47 53]
[48 52]
[61 96]
[62 95]
[97 110]
[98 109]
[99 108]
[100 107]
[101 106]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
