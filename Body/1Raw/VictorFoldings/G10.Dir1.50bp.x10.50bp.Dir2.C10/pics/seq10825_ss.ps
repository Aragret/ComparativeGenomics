%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:07 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCGCUAAUCCAAGCCUCACCCCACUACUAGGCCUCCUCCUAGCAGCAGCAGGCAAAUCAGCCCAxxxxxxxxxxAGCAGGAAUCUUCUUACUCAUCCGCUUCCACCCCCUAGCAGAAAAUAGCCCACUAAUCCAAACCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[15.11463547 237.19845581]
[7.07060146 231.88278198]
[-2.13011765 243.72958374]
[-11.33083725 255.57638550]
[-20.53155518 267.42318726]
[-22.88550377 283.06829834]
[-36.80299377 288.37420654]
[-46.00371170 300.22100830]
[-55.20443344 312.06781006]
[-64.40515137 323.91464233]
[-73.60587311 335.76144409]
[-67.73696136 349.95480347]
[-69.76692963 365.17895508]
[-79.14971924 377.33868408]
[-93.36140442 383.16305542]
[-108.57911682 381.08538818]
[-120.70937347 371.66452026]
[-126.48918915 357.43466187]
[-124.36382294 342.22351074]
[-114.90498352 330.12286377]
[-100.65706635 324.38766479]
[-85.45267487 326.56069946]
[-76.25195312 314.71389771]
[-67.05123901 302.86709595]
[-57.85051727 291.02029419]
[-48.64979935 279.17349243]
[-46.95394516 264.37576294]
[-32.37836075 258.22247314]
[-23.17764091 246.37567139]
[-13.97692204 234.52885437]
[-4.77620268 222.68205261]
[-26.81266403 199.73709106]
[-43.91830063 172.91407776]
[-55.42799377 143.25596619]
[-60.89422226 111.91593170]
[-60.10443497 80.11257935]
[-74.88798523 77.57357025]
[-89.67153931 75.03456116]
[-104.45509338 72.49554443]
[-119.23864746 69.95653534]
[-131.99803162 79.28250122]
[-147.60168457 76.77217865]
[-156.79222107 63.91490936]
[-154.11708069 48.33867264]
[-141.16334534 39.28458023]
[-125.61627197 42.12425995]
[-116.69963837 55.17298508]
[-101.91608429 57.71199417]
[-87.13253021 60.25100327]
[-72.34897614 62.79001617]
[-57.56542587 65.32902527]
[-53.93311691 51.69332886]
[-49.12319946 38.42718506]
[-43.17245865 25.63208580]
[-36.12642670 13.40591335]
[-28.03900146 1.84220099]
[-18.97205734 -8.97058773]
[-8.99495697 -18.94973183]
[1.81597352 -28.01889229]
[13.37802887 -36.10868454]
[5.92139387 -49.12400436]
[-1.53524101 -62.13932800]
[-16.85104370 -66.03826904]
[-24.85204315 -79.66763306]
[-20.79138756 -94.94136047]
[-7.07819510 -102.79781342]
[8.15174389 -98.57590485]
[15.86277485 -84.78041077]
[11.48008060 -69.59596252]
[18.93671608 -56.58063889]
[26.39335060 -43.56531906]
[39.33726120 -49.49572372]
[52.75361252 -54.26184845]
[66.53791809 -57.82658005]
[80.58283234 -60.16214752]
[94.77896881 -61.25036621]
[109.01576996 -61.08275986]
[123.18235016 -59.66063309]
[137.16838074 -56.99506760]
[150.86495972 -53.10681152]
[164.16537476 -48.02615738]
[176.96609497 -41.79266739]
[189.16737366 -34.45489120]
[200.67422485 -26.06997490]
[210.56912231 -37.34344864]
[220.46400452 -48.61692047]
[223.79928589 -57.18219757]
[230.67143250 -60.01441956]
[240.78990173 -71.08765411]
[250.90838623 -82.16088104]
[244.77781677 -96.10132599]
[244.85383606 -111.33005524]
[251.12329102 -125.20859528]
[262.49993896 -135.33239746]
[277.01272583 -139.94747925]
[292.14721680 -138.25422668]
[305.28128052 -130.54600525]
[314.13934326 -118.15831757]
[317.18667603 -103.23740387]
[313.89535522 -88.36840820]
[304.83560181 -76.12747192]
[291.57705688 -68.63540649]
[276.41687012 -67.19025421]
[261.98162842 -72.04240417]
[251.86314392 -60.96917725]
[241.74465942 -49.89594650]
[231.73748779 -38.72203445]
[221.84259033 -27.44856071]
[211.94770813 -16.17508698]
[218.68757629 -9.28037357]
[225.00354004 -1.99536335]
[230.87306213 5.65392542]
[236.27516174 13.64017296]
[241.19055176 21.93485641]
[245.60168457 30.50835037]
[249.49279785 39.33003616]
[252.84999084 48.36840439]
[255.66127014 57.59117889]
[257.91659546 66.96541595]
[259.60794067 76.45763397]
[260.72924805 86.03393555]
[261.27648926 95.66011810]
[261.24774170 105.30180359]
[260.64306641 114.92454529]
[259.46469116 124.49399567]
[257.71676636 133.97595215]
[255.40553284 143.33657837]
[252.53929138 152.54240417]
[249.12825012 161.56059265]
[245.18458557 170.35891724]
[240.72239685 178.90594482]
[235.75761414 187.17115784]
[230.30796814 195.12504578]
[224.39292908 202.73918152]
[218.03361511 209.98638916]
[211.25274658 216.84077454]
[204.07452393 223.27786255]
[196.52461243 229.27467346]
[188.62995911 234.80975342]
[180.41874695 239.86337280]
[171.92033386 244.41746521]
[163.16505432 248.45576477]
[154.18417358 251.96386719]
[145.00978088 254.92921448]
[135.67462158 257.34121704]
[126.21205902 259.19128418]
[116.65587616 260.47280884]
[107.04021454 261.18118286]
[97.39939880 261.31390381]
[87.76787567 260.87048340]
[78.18003845 259.85250854]
[68.67013550 258.26364136]
[59.27212524 256.10949707]
[50.01957321 253.39784241]
[40.94552994 250.13830566]
[32.08240128 246.34254456]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 31]
[3 30]
[4 29]
[5 28]
[7 26]
[8 25]
[9 24]
[10 23]
[11 22]
[36 51]
[37 50]
[38 49]
[39 48]
[40 47]
[60 71]
[61 70]
[62 69]
[84 109]
[85 108]
[86 107]
[88 106]
[89 105]
[90 104]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
