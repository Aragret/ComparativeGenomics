%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:13 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGAGAAAACACCCUCAUGUUCAUACACCUAUCCCCCAUUCUCCUCCUAUCCCUCAACCCCGAxxxxxxxxxxACACCGCUAACAAUCAAUACUAAACCCCCAUAAAUAGGAGAAGGCUUAGAAGAAAACCCCCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[92.50000000 298.64373779]
[92.50000000 283.64373779]
[92.50000000 268.64373779]
[92.50000000 253.64375305]
[92.50000000 238.64375305]
[92.50000000 223.64375305]
[92.50000000 208.64375305]
[92.50000000 193.64375305]
[92.50000000 178.64375305]
[92.50000000 163.64375305]
[84.18838501 162.10289001]
[76.15189362 159.48146057]
[68.53034973 155.82507324]
[61.45637894 151.19732666]
[55.05305481 145.67875671]
[43.35343170 155.06591797]
[31.65380669 164.45307922]
[19.95418167 173.84024048]
[18.48070526 189.57569885]
[6.25901365 199.59596252]
[-9.45997906 197.95620728]
[-19.35047340 185.62925720]
[-17.54461479 169.92848206]
[-5.11378670 160.16886902]
[10.56702042 162.14062500]
[22.26664352 152.75346375]
[33.96626663 143.36628723]
[45.66589355 133.97912598]
[38.25321579 117.14968109]
[35.92516708 98.90801239]
[38.87344742 80.75626373]
[46.85527802 64.18917084]
[59.21338654 50.57096863]
[74.93012238 41.02307129]
[92.71128082 36.33170700]
[111.09262848 36.88320160]
[115.40021515 22.51501656]
[119.70780182 8.14683247]
[112.46926117 -5.64596748]
[117.04244232 -20.15598679]
[130.23637390 -26.97182465]
[134.54396057 -41.34000778]
[133.30377197 -46.54399872]
[134.14222717 -51.21833038]
[136.49528503 -54.64831543]
[139.59445190 -56.45462036]
[144.78985596 -70.52613831]
[149.98527527 -84.59765625]
[155.18069458 -98.66917419]
[160.37611389 -112.74069977]
[165.57151794 -126.81221771]
[170.76693726 -140.88372803]
[157.25163269 -147.41764832]
[144.43003845 -155.22549438]
[132.42189026 -164.23435974]
[121.33928680 -174.36013794]
[111.28571320 -185.50828552]
[102.35503387 -197.57470703]
[94.63064575 -210.44674683]
[88.18466187 -224.00421143]
[83.07727051 -238.12051392]
[79.35615540 -252.66386414]
[77.05606842 -267.49844360]
[76.19848633 -282.48577881]
[76.79140472 -297.48590088]
[78.82929230 -312.35879517]
[82.29312897 -326.96554565]
[87.15056610 -341.16979980]
[93.35624695 -354.83892822]
[100.85223389 -367.84530640]
[109.56854248 -380.06747437]
[119.42378235 -391.39132690]
[130.32592773 -401.71115112]
[142.17320251 -410.93057251]
[154.85498047 -418.96350098]
[168.25285339 -425.73495483]
[182.24172974 -431.18167114]
[196.69099426 -435.25286865]
[211.46571350 -437.91046143]
[226.42797852 -439.12966919]
[241.43804932 -438.89907837]
[256.35580444 -437.22088623]
[271.04193115 -434.11074829]
[285.35931396 -429.59768677]
[299.17431641 -423.72387695]
[312.35787964 -416.54409790]
[324.78692627 -408.12542725]
[336.34545898 -398.54647827]
[346.92547607 -387.89669800]
[356.42825317 -376.27545166]
[364.76507568 -363.79135132]
[371.85803223 -350.56088257]
[377.64093018 -336.70758057]
[382.05981445 -322.36083984]
[385.07336426 -307.65457153]
[386.65347290 -292.72613525]
[386.78540039 -277.71487427]
[385.46786499 -262.76095581]
[382.71322632 -248.00399780]
[378.54718018 -233.58180237]
[373.00863647 -219.62902832]
[366.14926147 -206.27595520]
[358.03317261 -193.64724731]
[348.73608398 -181.86082458]
[338.34484863 -171.02671814]
[326.95645142 -161.24612427]
[314.67724609 -152.61033630]
[301.62191772 -145.19998169]
[287.91229248 -139.08427429]
[273.67642212 -134.32029724]
[259.04721069 -130.95252991]
[244.16125488 -129.01243591]
[229.15756226 -128.51811218]
[214.17619324 -129.47418213]
[199.35702515 -131.87170410]
[184.83845520 -135.68832397]
[179.64303589 -121.61679840]
[174.44763184 -107.54528046]
[169.25221252 -93.47376251]
[164.05679321 -79.40224457]
[158.86137390 -65.33072662]
[153.66596985 -51.25920486]
[148.91215515 -37.03242493]
[144.60456848 -22.66423988]
[151.87258911 -9.71389961]
[147.70877075 4.91884518]
[134.07598877 12.45441723]
[129.76840210 26.82260132]
[125.46081543 41.19078445]
[137.57608032 48.08838654]
[147.91300964 57.44274902]
[155.98243713 68.81116486]
[161.40245056 81.65561676]
[163.91653442 95.36823273]
[163.40573120 109.30004883]
[159.89418030 122.79173279]
[153.54811096 135.20477295]
[144.66783142 145.95173645]
[133.67359924 154.52398682]
[121.08575439 160.51585388]
[107.50000000 163.64375305]
[107.50000000 178.64375305]
[107.50000000 193.64375305]
[107.50000000 208.64375305]
[107.50000000 223.64375305]
[107.50000000 238.64375305]
[107.50000000 253.64375305]
[107.50000000 268.64373779]
[107.50000000 283.64373779]
[107.50000000 298.64373779]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[15 28]
[16 27]
[17 26]
[18 25]
[36 129]
[37 128]
[38 127]
[41 124]
[42 123]
[46 122]
[47 121]
[48 120]
[49 119]
[50 118]
[51 117]
[52 116]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
