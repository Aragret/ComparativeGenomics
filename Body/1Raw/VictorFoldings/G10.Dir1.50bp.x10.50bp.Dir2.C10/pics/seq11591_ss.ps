%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:27 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGUAGUACAUAAAAACCCAAUCCACAUCAAAACCCCCUCCCCAUGCUUACAAGCAAGUACAGCxxxxxxxxxxACCCCUCACCCACUAGGAUACCAACAAACCUACCCACCCUUAACAGUACAUAGUACAUAAACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[96.18462372 111.12003326]
[83.19424438 118.62003326]
[70.20386505 126.12003326]
[57.21348190 133.62002563]
[44.22310257 141.12002563]
[31.23271942 148.62002563]
[18.24233818 156.12002563]
[5.25195789 163.62002563]
[-7.73842335 171.12002563]
[-20.72880363 178.62002563]
[-33.71918488 186.12002563]
[-29.06126022 200.43775940]
[-27.48233795 215.41110229]
[-29.05144119 230.38545227]
[-33.69997787 244.70623779]
[-41.22473526 257.74740601]
[-51.29675674 268.93881226]
[-63.47574234 277.79129028]
[-77.22927856 283.91778564]
[-91.95611572 287.05047607]
[-107.01246643 287.05245972]
[-121.74012756 283.92361450]
[-135.49526978 277.80072021]
[-147.67657471 268.95147705]
[-157.75154114 257.76266479]
[-165.27970886 244.72349548]
[-169.93200684 230.40393066]
[-171.50503540 215.42997742]
[-169.93003845 200.45623779]
[-165.27587891 186.13728333]
[-157.74598694 173.09909058]
[-147.66955566 161.91162109]
[-135.48709106 153.06396484]
[-121.73114777 146.94287109]
[-107.00307465 143.81596375]
[-91.94673157 143.81991577]
[-77.22029877 146.95455933]
[-63.46756744 153.08285522]
[-51.28974152 161.93690491]
[-41.21918488 173.12965393]
[-28.22880363 165.62965393]
[-15.23842335 158.12965393]
[-2.24804211 150.62965393]
[10.74233913 143.12965393]
[23.73271942 135.62965393]
[36.72310257 128.12965393]
[49.71348190 120.62965393]
[62.70386124 113.12965393]
[75.69424438 105.62965393]
[88.68462372 98.12965393]
[82.69862366 96.24530029]
[76.88758087 93.76253510]
[66.33556366 83.10162354]
[55.78354645 72.44071198]
[45.23153305 61.77980423]
[29.27905846 57.97841263]
[24.85486603 42.18732452]
[36.51018906 30.65105247]
[52.25502777 35.23712921]
[55.89244080 51.22779083]
[66.44445801 61.88869858]
[76.99647522 72.54960632]
[87.54848480 83.21051788]
[83.39933777 68.79578400]
[79.25018311 54.38105011]
[75.10102844 39.96631622]
[70.95187378 25.55158424]
[61.03622437 14.29637241]
[53.74444199 1.18798113]
[49.41094589 -13.17241001]
[48.23448563 -28.12620354]
[50.26901245 -42.98758698]
[55.42121506 -57.07498550]
[63.45480728 -69.74231720]
[74.00135040 -80.40864563]
[86.57715607 -88.58477020]
[100.60547638 -93.89572906]
[115.44293976 -96.09795380]
[130.40905762 -95.09043121]
[144.81747437 -90.91938019]
[158.00737000 -83.77609253]
[169.37384033 -73.98817444]
[178.39558411 -62.00451660]
[184.65885925 -48.37471771]
[187.87640381 -33.72386932]
[187.90066528 -18.72388840]
[184.73052979 -4.06270742]
[178.51138306 9.58728027]
[169.52844238 21.60005951]
[158.19369507 31.42469597]
[145.02288818 38.61230087]
[136.19383240 50.73862839]
[127.36477661 62.86495209]
[118.53572083 74.99127960]
[109.70666504 87.11759949]
[123.26855469 80.70862579]
[136.83045959 74.29965210]
[150.39234924 67.89067078]
[150.96907043 52.59603500]
[158.59754944 39.32709503]
[171.52482605 31.13295364]
[186.78031921 29.89657211]
[200.85841370 35.90205765]
[210.52407837 47.76939392]
[213.55619812 62.77155304]
[209.25802612 77.46115112]
[198.61724854 88.46262360]
[184.07902527 93.24791718]
[168.98416138 90.71739960]
[156.80133057 81.45256805]
[143.23942566 87.86154938]
[129.67753601 94.27052307]
[116.11563873 100.67949677]
[130.45622253 96.28091431]
[145.28828430 94.04261017]
[160.28825378 94.01342773]
[175.12892151 96.19400024]
[189.48651123 100.53675842]
[203.04782104 106.94696045]
[215.51702881 115.28476715]
[226.62208557 125.36828613]
[236.12077332 136.97755432]
[243.80584717 149.85931396]
[249.50965881 163.73254395]
[253.10778809 178.29460144]
[254.52174377 193.22781372]
[253.72067261 208.20640564]
[250.72206116 222.90362549]
[245.59130859 236.99885559]
[238.44035339 250.18460083]
[229.42518616 262.17321777]
[218.74247742 272.70315552]
[206.62527466 281.54473877]
[193.33792114 288.50506592]
[179.17027283 293.43228149]
[164.43138123 296.21893311]
[149.44281006 296.80419922]
[134.53150940 295.17535400]
[120.02278900 291.36785889]
[106.23313904 285.46484375]
[93.46339417 277.59506226]
[81.99211884 267.93017578]
[72.06957245 256.68106079]
[63.91220093 244.09306335]
[57.69796371 230.44084167]
[53.56243134 216.02218628]
[51.59580994 201.15167236]
[51.84100723 186.15367126]
[54.29267502 171.35539246]
[58.89733124 157.07963562]
[65.55451965 143.63783264]
[74.11901093 131.32324219]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 50]
[2 49]
[3 48]
[4 47]
[5 46]
[6 45]
[7 44]
[8 43]
[9 42]
[10 41]
[11 40]
[52 63]
[53 62]
[54 61]
[55 60]
[95 113]
[96 112]
[97 111]
[98 110]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
