%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:16 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGAUGAACCCCCCUCCCCAUACCCAACCCCCUGGUCAACCUCAACCUAGGCCUCCUAUUUAUxxxxxxxxxxCAUUUACCGUACAUAGCACAUUACAGUCAAAUCCCUUCUCGUCCCCAUGGAUGACCCCCCCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[-15.86908817 298.18103027]
[-23.85900497 310.87597656]
[-31.84892082 323.57089233]
[-39.83883667 336.26583862]
[-47.69626236 349.04318237]
[-55.42034912 361.90158081]
[-63.14443207 374.75997925]
[-70.86851501 387.61840820]
[-78.59260559 400.47680664]
[-86.31668854 413.33520508]
[-83.84446716 429.18661499]
[-94.80189514 440.90475464]
[-110.78336334 439.50042725]
[-119.52926636 426.05093384]
[-114.33049011 410.87356567]
[-99.17508698 405.61111450]
[-91.45100403 392.75271606]
[-83.72692108 379.89431763]
[-76.00283813 367.03591919]
[-68.27874756 354.17749023]
[-60.55466461 341.31909180]
[-59.80152512 333.91784668]
[-52.53376770 328.27590942]
[-44.54384995 315.58099365]
[-36.55393600 302.88604736]
[-28.56401825 290.19113159]
[-49.39648056 274.30450439]
[-68.28321838 256.14776611]
[-84.97826385 235.95739746]
[-99.26416779 213.99632263]
[-110.95488739 190.55058289]
[-119.89815521 165.92550659]
[-125.97749329 140.44184875]
[-129.11373901 114.43145752]
[-129.26602173 88.23312378]
[-126.43238831 62.18804169]
[-120.64972687 36.63541794]
[-111.99334717 11.90804386]
[-125.64958191 5.70263672]
[-139.30583191 -0.50277054]
[-153.02587891 -6.56578350]
[-166.80825806 -12.48574638]
[-180.59063721 -18.40571022]
[-193.85606384 -10.35535336]
[-209.31707764 -11.67324448]
[-221.02859497 -21.85262680]
[-224.48731995 -36.97932053]
[-218.36328125 -51.23680496]
[-205.01130676 -59.14278412]
[-189.56550598 -57.65724945]
[-177.96510315 -47.35141754]
[-174.67068481 -32.18809128]
[-160.88830566 -26.26812744]
[-147.10591125 -20.34816551]
[-139.67070007 -20.59975433]
[-133.10041809 -14.15901184]
[-119.44417572 -7.95360470]
[-105.78794098 -1.74819756]
[-100.34744263 -12.08154106]
[-94.38851166 -22.12484741]
[-87.92654419 -31.85212898]
[-80.97827911 -41.23821259]
[-73.56169128 -50.25880814]
[-65.69597626 -58.89057541]
[-57.40147781 -67.11117554]
[-48.69966888 -74.89933777]
[-39.61306763 -82.23490906]
[-30.16518402 -89.09890747]
[-20.38046646 -95.47356415]
[-10.28423882 -101.34239197]
[0.09737547 -106.69019318]
[10.73751068 -111.50314331]
[21.60863304 -115.76877594]
[32.68261337 -119.47605896]
[43.93078995 -122.61539459]
[55.32405853 -125.17866516]
[66.83293915 -127.15923309]
[78.42764282 -128.55197144]
[90.07817841 -129.35328674]
[101.75437927 -129.56108093]
[113.42604065 -129.17485046]
[125.06296539 -128.19557190]
[136.63502502 -126.62578583]
[148.11228943 -124.46955109]
[159.46505737 -121.73244476]
[170.66394043 -118.42156219]
[181.67996216 -114.54545593]
[192.48461914 -110.11417389]
[203.04995728 -105.13916779]
[213.34861755 -99.63331604]
[223.35397339 -93.61087036]
[233.04011536 -87.08740234]
[242.38198853 -80.07981110]
[251.35542297 -72.60622406]
[259.93716431 -64.68597412]
[268.10507202 -56.33956146]
[275.83795166 -47.58858490]
[283.11578369 -38.45568848]
[289.91979980 -28.96450615]
[296.23233032 -19.13959885]
[302.03707886 -9.00638962]
[307.31900024 1.40889812]
[312.06442261 12.07931328]
[316.26110840 22.97724342]
[319.89816284 34.07448578]
[322.96615601 45.34233093]
[325.45718384 56.75160980]
[327.36480713 68.27280426]
[328.68405151 79.87610626]
[329.41152954 91.53147888]
[329.54537964 103.20876312]
[329.08517456 114.87774658]
[328.03219604 126.50823212]
[326.38912964 138.07011414]
[324.16021729 149.53349304]
[321.35125732 160.86868286]
[317.96948242 172.04637146]
[314.02365112 183.03761292]
[309.52401733 193.81398010]
[304.48214722 204.34757996]
[298.91116333 214.61116028]
[292.82543945 224.57815552]
[286.24075317 234.22277832]
[279.17410278 243.52006531]
[271.64382935 252.44595337]
[263.66937256 260.97735596]
[255.27136230 269.09219360]
[246.47157288 276.76947021]
[237.29275513 283.98931885]
[227.75865173 290.73306274]
[217.89395142 296.98321533]
[207.72416687 302.72363281]
[197.27561951 307.93948364]
[186.57534790 312.61721802]
[175.65106201 316.74475098]
[164.53099060 320.31143188]
[153.24394226 323.30798340]
[141.81910706 325.72668457]
[130.28605652 327.56124878]
[118.67462921 328.80697632]
[107.01487732 329.46060181]
[95.33698273 329.52041626]
[83.67115021 328.98632812]
[72.04756927 327.85968018]
[60.49632263 326.14337158]
[49.04730225 323.84188843]
[37.73013306 320.96115112]
[26.57410049 317.50863647]
[15.60807419 313.49325562]
[4.86043310 308.92541504]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 26]
[2 25]
[3 24]
[4 23]
[5 21]
[6 20]
[7 19]
[8 18]
[9 17]
[10 16]
[38 58]
[39 57]
[40 56]
[41 54]
[42 53]
[43 52]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
