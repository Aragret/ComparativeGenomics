%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:00 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGUCUCCUACUCCUGCUCGCAUCUGCUAUAGUGGAGGCCGGAGCAGGAACAGGUUGAACAGUxxxxxxxxxxCGCCUGAACGCAGGCACAUACUUCCUAUUCUACACCCUAGUAGGCUCCCUUCCCCUACUCCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[92.50000000 252.19989014]
[92.50000000 237.19989014]
[92.50000000 222.19989014]
[92.50000000 207.19989014]
[92.50000000 192.19989014]
[92.50000000 177.19989014]
[92.50000000 162.19989014]
[92.50000000 147.19989014]
[92.50000000 132.19989014]
[92.50000000 117.19988251]
[79.97403717 108.94759369]
[66.19165802 114.86756134]
[52.40927505 120.78752136]
[38.62689209 126.70748138]
[24.84451294 132.62744141]
[18.14165497 138.93011475]
[10.71328831 138.52389526]
[-3.18926764 144.15585327]
[-17.09182358 149.78781128]
[-20.93219566 164.70617676]
[-32.68323898 174.38948059]
[-47.70523453 175.28598022]
[-60.22476959 167.26106262]
[-74.12732697 172.89302063]
[-77.73648834 187.98452759]
[-89.54878235 198.04679871]
[-105.02214813 199.21067810]
[-118.20675659 191.02864075]
[-124.03285217 176.64683533]
[-120.26019287 161.59536743]
[-108.33943176 151.66183472]
[-92.85435486 150.66587830]
[-79.75928497 158.99046326]
[-65.85672760 153.35850525]
[-62.45226288 138.88275146]
[-51.04171371 129.07135010]
[-35.86437225 127.84590912]
[-22.72377968 135.88525391]
[-8.82122421 130.25329590]
[5.08133173 124.62133789]
[18.92454910 118.84506226]
[32.70693207 112.92510223]
[46.48931122 107.00514221]
[60.27169418 101.08517456]
[74.05407715 95.16521454]
[82.85928345 86.86372375]
[92.73529816 84.85361481]
[100.26943207 88.00157928]
[107.72434235 74.98526764]
[115.17925262 61.96895981]
[122.63416290 48.95265198]
[130.08906555 35.93634033]
[126.00627136 -4.74538898]
[128.49139404 -19.53809547]
[130.97651672 -34.33080292]
[133.46162415 -49.12351227]
[135.94674683 -63.91621780]
[129.09574890 -80.97621918]
[140.71328735 -94.09234619]
[135.06062317 -108.86928558]
[144.56301880 -120.33896637]
[146.73985291 -135.18017578]
[137.13076782 -123.66212463]
[124.59922791 -115.41830444]
[110.21801758 -111.15441895]
[95.21823120 -111.23548889]
[80.88394928 -115.65456390]
[68.44224548 -124.03334808]
[58.95820618 -135.65457153]
[53.24371338 -149.52340698]
[51.78796005 -164.45260620]
[54.71556473 -179.16413879]
[61.77590561 -192.39862061]
[72.36458588 -203.02311707]
[85.57515717 -210.12809753]
[100.27671814 -213.10536194]
[115.21073914 -211.70002747]
[129.09878540 -206.03239441]
[140.75198364 -196.58764648]
[149.17272949 -184.17431641]
[153.64018250 -169.85502625]
[153.77142334 -154.85221863]
[161.49549866 -167.71061707]
[169.21958923 -180.56903076]
[176.94367981 -193.42742920]
[184.66775513 -206.28582764]
[184.41090393 -222.68296814]
[198.61984253 -230.87065125]
[212.67764282 -222.42608643]
[212.12283325 -206.03633118]
[197.52615356 -198.56175232]
[189.80207825 -185.70333862]
[182.07798767 -172.84494019]
[174.35391235 -159.98654175]
[166.62982178 -147.12814331]
[161.58106995 -133.00332642]
[159.40422058 -118.16212463]
[165.21260071 -104.44673157]
[155.55450439 -91.91551208]
[162.53620911 -81.98761749]
[160.80014038 -69.56968689]
[150.73945618 -61.43109894]
[148.25433350 -46.63839340]
[145.76921082 -31.84568596]
[143.28410339 -17.05297852]
[140.79898071 -2.26027060]
[145.24516296 3.77972341]
[160.15290833 2.11868691]
[154.13751221 15.85971165]
[158.58367920 21.89970589]
[173.44673157 23.92204094]
[188.30976868 25.94437408]
[203.17282104 27.96670914]
[215.59950256 18.20180702]
[231.28114319 20.16689301]
[240.91410828 32.69611359]
[238.78334045 48.35610580]
[226.15298462 57.85607529]
[210.51638794 55.55985641]
[201.15048218 42.82975769]
[186.28744507 40.80742264]
[171.42439270 38.78508759]
[156.56134033 36.76275253]
[143.10537720 43.39125061]
[135.65046692 56.40756226]
[128.19555664 69.42387390]
[120.74064636 82.44017792]
[113.28573608 95.45648956]
[124.09272766 85.05413818]
[138.26651001 80.14455414]
[153.19244385 81.63340759]
[166.11712646 89.24604797]
[174.65637207 101.57817078]
[177.23492432 116.35488129]
[173.37713623 130.85031128]
[163.79463196 142.39048767]
[150.25511169 148.84660339]
[135.25621033 149.02769470]
[121.56476593 142.90034485]
[111.70643616 131.59489441]
[107.50000000 117.19988251]
[107.50000000 132.19989014]
[107.50000000 147.19989014]
[107.50000000 162.19989014]
[107.50000000 177.19989014]
[107.50000000 192.19989014]
[107.50000000 207.19989014]
[107.50000000 222.19989014]
[107.50000000 237.19989014]
[107.50000000 252.19989014]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[11 45]
[12 44]
[13 43]
[14 42]
[15 41]
[17 40]
[18 39]
[19 38]
[23 34]
[24 33]
[48 128]
[49 127]
[50 126]
[51 125]
[52 124]
[53 106]
[54 105]
[55 104]
[56 103]
[57 102]
[59 99]
[61 97]
[62 96]
[82 95]
[83 94]
[84 93]
[85 92]
[86 91]
[110 123]
[111 122]
[112 121]
[113 120]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
