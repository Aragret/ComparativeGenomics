%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:12 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGACCUAACAAACCCACAGGUCCUAAACUACCAAACCUGCAUUAAAAAUUUCGGUUGGGGCGxxxxxxxxxxUUAUAUGAUAUGUCUCCAUACCCAUUACAAUCUCCAGCAUUCCCCCUCAAACCUAAGAAACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[92.50000000 251.17752075]
[92.50000000 236.17752075]
[92.50000000 221.17752075]
[92.50000000 206.17752075]
[92.50000000 191.17752075]
[92.50000000 176.17752075]
[92.50000000 161.17752075]
[92.50000000 146.17752075]
[92.50000000 131.17752075]
[92.50000000 116.17752075]
[81.72919464 105.73770905]
[66.73649597 106.20574951]
[51.74380112 106.67378998]
[36.36123657 116.74139404]
[21.21919060 107.92559814]
[6.23947573 108.70544434]
[2.22025633 123.97369385]
[-6.30132055 137.24188232]
[-18.48444557 147.22296143]
[-33.13384247 152.95318604]
[-48.81702805 153.88505554]
[-64.00437927 149.93965149]
[-77.21833038 141.51321411]
[-87.17711639 129.43725586]
[-92.91912079 114.89665985]
[-107.87937164 115.98796844]
[-122.83962250 117.07927704]
[-137.79986572 118.17059326]
[-152.76011658 119.26190186]
[-157.88597107 133.60224915]
[-168.40609741 144.61344910]
[-182.49784851 150.38775635]
[-197.71972656 149.92472839]
[-211.43444824 143.30459595]
[-221.26585388 131.67431641]
[-225.51060486 117.04892731]
[-223.43327332 101.96235657]
[-215.39375305 89.02845001]
[-202.78494263 80.48808289]
[-187.79141235 77.82091522]
[-173.01086426 81.48905945]
[-161.00411987 90.85699463]
[-153.85142517 104.30165100]
[-138.89117432 103.21034241]
[-123.93093109 102.11903381]
[-108.97068024 101.02771759]
[-94.01042938 99.93640900]
[-90.93573761 85.98492432]
[-84.03826141 73.45581055]
[-73.87172699 63.37356186]
[-61.25756073 56.56548309]
[-47.21854782 53.59382629]
[-32.89590454 54.70936203]
[-19.45649529 59.83024216]
[-7.99779034 68.54793549]
[0.54177231 80.15980530]
[5.45963097 93.72573090]
[20.43934441 92.94588470]
[28.80298233 84.15060425]
[41.32005310 83.41442871]
[51.27575684 91.68109894]
[66.26845551 91.21305084]
[81.26114655 90.74501038]
[93.25976562 82.54457092]
[106.05274200 84.62512207]
[116.93156433 74.29792023]
[127.81038666 63.97071075]
[138.68920898 53.64350891]
[130.57574463 40.47996902]
[125.36376190 25.92771912]
[123.27668762 10.61750603]
[124.40254974 -4.78758240]
[128.69029236 -19.62083817]
[135.95205688 -33.24078369]
[145.87142944 -45.05891800]
[158.01721191 -54.56513596]
[171.86218262 -61.34975815]
[186.80596924 -65.12117004]
[202.20111084 -65.71838379]
[217.38104248 -63.11786652]
[231.68904114 -57.43449783]
[244.50657654 -48.91647339]
[255.16819763 -59.46776581]
[259.10098267 -67.78552246]
[266.16308594 -70.12477875]
[277.04193115 -80.45198059]
[287.92074585 -90.77918243]
[292.70190430 -108.53081512]
[309.87075806 -112.02810669]
[320.53237915 -122.57939148]
[331.19400024 -133.13067627]
[341.85562134 -143.68197632]
[345.65811157 -159.63418579]
[361.44949341 -164.05731201]
[372.98495483 -152.40119934]
[368.39782715 -136.65667725]
[352.40692139 -133.02033997]
[341.74530029 -122.46905518]
[331.08364868 -111.91777039]
[320.42202759 -101.36647797]
[320.03292847 -89.23569489]
[311.18032837 -80.35591888]
[298.24795532 -79.90036011]
[287.36914062 -69.57315826]
[276.49029541 -59.24595261]
[265.71948242 -48.80613708]
[255.05786133 -38.25484848]
[263.06365967 -26.07999802]
[268.52923584 -12.56732082]
[271.24069214 1.75951660]
[271.09085083 16.34488678]
[268.08358765 30.62274742]
[262.33370972 44.03860092]
[254.06256104 56.07104492]
[243.58949280 66.25201416]
[231.31959534 74.18502045]
[217.72798157 79.56054688]
[203.34138489 82.16817474]
[188.71775818 81.90478516]
[174.42465210 78.77864075]
[161.01718140 72.90916443]
[149.01641846 64.52233124]
[138.13758850 74.84954071]
[127.25876617 85.17674255]
[116.37994385 95.50394440]
[127.70935059 85.67314911]
[141.76953125 80.44713593]
[156.76947021 80.49160767]
[170.79841614 85.80089569]
[182.06933594 95.69869995]
[189.14648438 108.92420197]
[191.12838745 123.79269409]
[187.76254272 138.41018677]
[179.47773743 150.91467285]
[167.32929993 159.71327209]
[152.86473083 163.68519592]
[137.92657471 162.32450867]
[124.41769409 155.80453491]
[114.05889893 144.95578003]
[108.16970825 131.16021729]
[107.50000000 116.17752075]
[107.50000000 131.17752075]
[107.50000000 146.17752075]
[107.50000000 161.17752075]
[107.50000000 176.17752075]
[107.50000000 191.17752075]
[107.50000000 206.17752075]
[107.50000000 221.17752075]
[107.50000000 236.17752075]
[107.50000000 251.17752075]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[11 63]
[12 62]
[13 61]
[15 58]
[16 57]
[25 47]
[26 46]
[27 45]
[28 44]
[29 43]
[65 125]
[66 124]
[67 123]
[68 122]
[82 107]
[83 106]
[85 105]
[86 104]
[87 103]
[89 100]
[90 99]
[91 98]
[92 97]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
