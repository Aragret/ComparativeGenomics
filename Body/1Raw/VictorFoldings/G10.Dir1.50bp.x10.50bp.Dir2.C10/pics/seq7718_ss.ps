%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:44 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCCUCCCUUACCAUCAAAUCAAUUGGCCACCAAUGGUACUGAACCUACGAGUACACCGACUxxxxxxxxxxAAACAUAUCAUACACAAACGCCUGAGCCCUAUCUAUUACUCUCAUCGCUACCUCCCUGACCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[53.17711258 248.47111511]
[47.98169708 262.54263306]
[42.78628159 276.61416626]
[37.59086609 290.68566895]
[32.39545059 304.75720215]
[27.20003700 318.82870483]
[30.50480461 334.89141846]
[18.06840897 345.58105469]
[2.68434715 339.90103149]
[0.17842343 323.69445801]
[13.12851715 313.63330078]
[18.32393265 299.56176758]
[23.51934814 285.49026489]
[28.71476364 271.41873169]
[33.91017914 257.34722900]
[39.10559464 243.27569580]
[28.86861420 238.47880554]
[19.00673866 232.95167542]
[9.57196999 226.72341919]
[0.61406213 219.82691956]
[-7.81974554 212.29852295]
[-15.68497849 204.17793274]
[-22.94016075 195.50796509]
[-29.54703331 186.33435059]
[-35.47075653 176.70547485]
[-40.68008804 166.67208862]
[-45.14756393 156.28712463]
[-48.84962082 145.60533142]
[-51.76673508 134.68304443]
[-53.88352585 123.57785797]
[-55.18883133 112.34834290]
[-70.18152618 112.81638336]
[-85.17422485 113.28442383]
[-100.16692352 113.75246429]
[-115.15961456 114.22051239]
[-130.80236816 120.75813293]
[-141.41484070 107.53649139]
[-131.64773560 93.67864227]
[-115.62765503 99.22781372]
[-100.63496399 98.75977325]
[-85.64226532 98.29172516]
[-70.64956665 97.82368469]
[-55.65687561 97.35564423]
[-47.65436554 50.66195297]
[-25.97856331 8.53712940]
[-37.67818832 -0.85003197]
[-49.37781143 -10.23719406]
[-61.07743454 -19.62435532]
[-72.77706146 -29.01151657]
[-87.37153625 -24.01103973]
[-102.34718323 -27.71692467]
[-112.92532349 -38.94664001]
[-115.73050690 -54.11682510]
[-109.86762238 -68.38672638]
[-97.20748138 -77.20287323]
[-81.78989410 -77.75205994]
[-68.53456116 -69.85904694]
[-61.67120361 -56.04246902]
[-63.38989639 -40.71113968]
[-51.69027328 -31.32397842]
[-39.99065018 -21.93681717]
[-28.29102516 -12.54965591]
[-16.59140205 -3.16249371]
[-9.58713913 -10.57447243]
[-2.11263776 -17.51197433]
[5.80002975 -23.94523239]
[14.11690998 -29.84663963]
[22.80231667 -35.19087601]
[31.81897736 -39.95500565]
[41.12820435 -44.11858368]
[50.69005203 -47.66375351]
[60.46348572 -50.57529449]
[70.40657043 -52.84071350]
[80.47664642 -54.45029449]
[90.63049316 -55.39712906]
[100.82454681 -55.67715073]
[111.01506042 -55.28916168]
[121.15830994 -54.23482513]
[131.21076965 -52.51866531]
[141.12930298 -50.14804459]
[150.87133789 -47.13314056]
[160.39509583 -43.48688889]
[169.65969849 -39.22492981]
[178.62539673 -34.36555481]
[187.25370789 -28.92961884]
[195.50759888 -22.94044495]
[203.35168457 -16.42373085]
[210.75227356 -9.40744209]
[217.67762756 -1.92168558]
[224.09803772 6.00141811]
[229.98593140 14.32787037]
[235.31605530 23.02194214]
[240.06553650 32.04632950]
[244.21398926 41.36230469]
[247.74362183 50.92989349]
[250.63929749 60.70804596]
[252.88856506 70.65480042]
[254.48179626 80.72747040]
[255.41213989 90.88284302]
[270.41131592 90.72680664]
[280.01452637 82.05315399]
[292.55139160 82.26800537]
[301.27365112 90.70774841]
[316.27285767 90.86378479]
[331.27203369 91.01982117]
[346.27120972 91.17585754]
[352.20193481 77.17961121]
[363.04086304 66.52191162]
[377.13510132 60.82798767]
[392.33538818 60.96611786]
[406.32382202 66.91523743]
[416.96725464 77.76815796]
[422.64263916 91.86988068]
[422.48452759 107.06999207]
[416.51699829 121.05059052]
[405.65008545 131.67973328]
[391.54092407 137.33656311]
[376.34103394 137.15843201]
[362.36828613 131.17253113]
[351.75344849 120.29164886]
[346.11517334 106.17504883]
[331.11599731 106.01901245]
[316.11682129 105.86297607]
[301.11761475 105.70693970]
[286.35540771 115.14499664]
[270.56735229 105.72599030]
[255.56817627 105.88202667]
[254.71553040 117.29630280]
[253.02653503 128.61706543]
[250.51031494 139.78314209]
[247.18049622 150.73416138]
[243.05506897 161.41093445]
[238.15632629 171.75573730]
[232.51074219 181.71264648]
[226.14886475 191.22784424]
[219.10505676 200.24989319]
[211.41740417 208.73002625]
[203.12745667 216.62239075]
[194.28004456 223.88433838]
[184.92298889 230.47659302]
[175.10685730 236.36354065]
[164.88471985 241.51335144]
[154.31184387 245.89817810]
[143.44535828 249.49433899]
[132.34403992 252.28236389]
[121.06787109 254.24720764]
[109.67781067 255.37823486]
[98.23544312 255.66932678]
[86.80261230 255.11894226]
[75.44112396 253.73001099]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 16]
[2 15]
[3 14]
[4 13]
[5 12]
[6 11]
[31 43]
[32 42]
[33 41]
[34 40]
[35 39]
[45 63]
[46 62]
[47 61]
[48 60]
[49 59]
[99 127]
[100 126]
[103 124]
[104 123]
[105 122]
[106 121]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
