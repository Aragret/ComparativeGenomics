%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:10 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGACAGACAUCAUAACAAAAAAUUUCCACCAAACCCCCCCUCCCCCGCUUCUGGCCACAGCAxxxxxxxxxxACCACUCCAGCCUAGCCCCUACCCCCCAAUUAGGAGGGCACUGGCCCCCAACAGGCAUCACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[82.53475189 131.80601501]
[68.87850952 138.01142883]
[55.22226715 144.21682739]
[41.56602478 150.42224121]
[27.90978432 156.62763977]
[14.31883335 162.97477722]
[0.79464340 169.46293640]
[-12.72954655 175.95111084]
[-26.25373650 182.43927002]
[-39.77792740 188.92742920]
[-35.79456711 203.43167114]
[-34.46526718 218.41407776]
[-35.83275223 233.39305115]
[-39.85306549 247.88708496]
[-46.39696884 261.43023682]
[-55.25410843 273.58715820]
[-66.13975525 283.96707153]
[-78.70398712 292.23629761]
[-92.54291534 298.12896729]
[-107.21167755 301.45571899]
[-122.23872375 302.10958862]
[-137.14100647 300.06958008]
[-151.43948364 295.40121460]
[-164.67449951 288.25460815]
[-176.42062378 278.85946655]
[-186.30024719 267.51785278]
[-193.99580383 254.59428406]
[-199.25988770 240.50425720]
[-201.92330933 225.70066833]
[-201.90042114 210.65942383]
[-199.19197083 195.86401367]
[-193.88504028 181.79005432]
[-186.15020752 168.88998413]
[-176.23611450 157.57846069]
[-164.46145630 148.21911621]
[-151.20475769 141.11280823]
[-136.89213562 136.48797607]
[-121.98371887 134.49330139]
[-106.95873260 135.19290161]
[-92.30016327 138.56427002]
[-78.47922516 144.49903870]
[-65.94021606 152.80644226]
[-55.08619690 163.21942139]
[-46.26609039 175.40324402]
[-32.74190140 168.91508484]
[-19.21771240 162.42691040]
[-5.69352150 155.93875122]
[7.83066845 149.45059204]
[12.53140259 143.68441772]
[21.70437813 142.97140503]
[35.36061859 136.76599121]
[49.01686096 130.56059265]
[62.67309952 124.35518646]
[76.32933807 118.14977264]
[78.70625305 111.03638458]
[64.47954559 106.28234863]
[69.23379517 92.05571747]
[83.46006775 96.80960846]
[85.83697510 89.69622040]
[78.65446472 76.52763367]
[71.47195435 63.35905075]
[57.19885254 55.28374481]
[57.32631302 38.88508987]
[71.72321320 31.03262329]
[85.57926178 39.80428696]
[84.64053345 56.17654419]
[91.82304382 69.34512329]
[99.00555420 82.51371002]
[99.01566315 67.51371002]
[99.02577209 52.51371384]
[99.03588104 37.51371765]
[92.97208405 23.79401207]
[88.90029144 9.35723591]
[86.90163422 -5.50901222]
[87.01590729 -20.50857735]
[89.24085236 -35.34264755]
[93.53213501 -49.71570587]
[99.80427551 -63.34143066]
[107.93231964 -75.94837189]
[117.75434113 -87.28537750]
[129.07467651 -97.12661743]
[141.66781616 -105.27602386]
[155.28288269 -111.57125854]
[169.64865112 -115.88690186]
[184.47892761 -118.13700104]
[199.47827148 -118.27671051]
[214.34790039 -116.30326080]
[228.79154968 -112.25595093]
[242.52151489 -106.21542358]
[255.26428223 -98.30200958]
[266.76596069 -88.67335510]
[276.79748535 -77.52127075]
[285.15893555 -65.06791687]
[291.68380737 -51.56139374]
[296.24206543 -37.27076340]
[298.74295044 -22.48071289]
[299.13662720 -7.48587990]
[297.41522217 7.41501951]
[293.61306763 21.92513847]
[287.80587769 35.75541687]
[280.10934448 48.63033676]
[270.67681885 60.29341507]
[259.69619751 70.51230621]
[247.38619995 79.08343506]
[233.99209595 85.83605194]
[219.78068542 90.63564301]
[205.03511047 93.38658905]
[190.04908752 94.03408813]
[175.12117004 92.56523895]
[160.55108643 89.01004791]
[145.78680420 91.65886688]
[131.02253723 94.30767822]
[116.25826263 96.95649719]
[130.48503113 101.71031189]
[139.68246460 101.46695709]
[144.95654297 106.71383667]
[159.08134460 111.76259613]
[173.20614624 116.81135559]
[187.33094788 121.86010742]
[203.35841370 118.38842773]
[214.17681885 130.71295166]
[208.65713501 146.15527344]
[192.47752380 148.82965088]
[182.28219604 135.98490906]
[168.15739441 130.93615723]
[154.03257751 125.88739777]
[139.90777588 120.83864594]
[125.73122406 115.93709564]
[111.50444794 111.18328094]
[121.71051788 122.17582703]
[131.91659546 133.16836548]
[145.28611755 139.96951294]
[156.44993591 149.98797607]
[164.65301514 162.54620361]
[169.34063721 176.79493713]
[170.19577026 191.77053833]
[167.16056824 206.46025085]
[160.44032288 219.87063599]
[150.48950195 231.09475708]
[137.98104858 239.37356567]
[123.76090240 244.14718628]
[108.79074097 245.09277344]
[94.08296204 242.14637756]
[80.63222504 235.50727844]
[69.34818268 225.62445068]
[60.99394989 213.16624451]
[56.13451004 198.97518921]
[55.09849930 184.01101685]
[57.95597458 169.28570557]
[64.51585388 155.79183960]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 54]
[2 53]
[3 52]
[4 51]
[5 50]
[6 48]
[7 47]
[8 46]
[9 45]
[10 44]
[59 68]
[60 67]
[61 66]
[113 129]
[114 128]
[116 127]
[117 126]
[118 125]
[119 124]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
