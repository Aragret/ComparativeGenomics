%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:59 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGUACUGAUCAUUCUAUUUCCCCCUCUAUUGAUCCCCACCUCCAAAUAUCUCAUCAACAACCGxxxxxxxxxxCCUCAAUAUUCUUUAUCUGCCUCUUCCUACACAUCGGGCGAGGCCUAUAUUACGGAUCAUUCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[-60.93694305 197.12249756]
[-74.07857513 204.35420227]
[-87.22020721 211.58590698]
[-100.36183929 218.81761169]
[-113.50347137 226.04931641]
[-121.86366272 239.48127747]
[-136.74440002 238.83854675]
[-149.88603210 246.07025146]
[-163.02766418 253.30195618]
[-176.16929626 260.53366089]
[-162.87103271 267.47311401]
[-159.79888916 282.15515137]
[-169.19924927 293.84417725]
[-184.19850159 293.99316406]
[-193.82914734 282.49313354]
[-191.04959106 267.75347900]
[-204.86317444 273.60028076]
[-218.67675781 279.44705200]
[-232.49034119 285.29385376]
[-231.16914368 300.36401367]
[-234.57151794 315.10440063]
[-242.36415100 328.07089233]
[-253.78356934 337.99319458]
[-267.71102905 343.89916992]
[-282.78207397 345.21026611]
[-297.52017212 341.79803467]
[-310.48147583 333.99670410]
[-320.39611816 322.57064819]
[-326.29275513 308.63922119]
[-327.59375000 293.56729126]
[-324.17163086 278.83148193]
[-316.36163330 265.87542725]
[-304.92892456 255.96846008]
[-290.99356079 250.08113098]
[-275.92077637 248.79023743]
[-261.18725586 252.22224426]
[-248.23645020 260.04092407]
[-238.33712769 271.48025513]
[-224.52354431 265.63348389]
[-210.70996094 259.78668213]
[-196.89637756 253.93989563]
[-183.40100098 247.39202881]
[-170.25936890 240.16032410]
[-157.11773682 232.92861938]
[-143.97610474 225.69691467]
[-136.55587769 212.78221130]
[-120.73517609 212.90768433]
[-107.59354401 205.67597961]
[-94.45191193 198.44427490]
[-81.31027985 191.21257019]
[-68.16864777 183.98086548]
[-73.69297028 171.86259460]
[-78.34536743 159.38359070]
[-82.10248566 146.60647583]
[-84.94547272 133.59541321]
[-86.86005402 120.41568756]
[-87.83661652 107.13348389]
[-87.87025452 93.81547546]
[-86.96080017 80.52851105]
[-85.11282349 67.33928680]
[-82.33560181 54.31402206]
[-78.64307404 41.51809692]
[-74.05377197 29.01574135]
[-68.59073639 16.86972046]
[-62.28139496 5.14100599]
[-55.15741730 -6.11152649]
[-47.25456238 -16.83138847]
[-38.61250687 -26.96476936]
[-29.27462959 -36.46080017]
[-19.28780746 -45.27181244]
[-8.70217037 -53.35357285]
[2.42913938 -60.66551208]
[14.05024529 -67.17092896]
[26.10281181 -72.83716583]
[38.52633286 -77.63577271]
[51.25844574 -81.54267120]
[64.23523712 -84.53823853]
[77.39156342 -86.60744476]
[90.66138458 -87.73989868]
[103.97808075 -87.92992401]
[117.27481079 -87.17655182]
[130.48481750 -85.48357391]
[143.54179382 -82.85948944]
[156.38020325 -79.31746674]
[168.93557739 -74.87528229]
[181.14491272 -69.55525208]
[192.94691467 -63.38406372]
[204.28231812 -56.39270782]
[215.09423828 -48.61627197]
[225.32839966 -40.09379959]
[234.93342590 -30.86807251]
[243.86108398 -20.98539734]
[252.06658936 -10.49538994]
[259.50872803 0.54929423]
[266.15017700 12.09321117]
[271.95751953 24.07841110]
[276.90170288 36.44472885]
[280.95782471 49.13008881]
[284.10556030 62.07081223]
[286.32910156 75.20193481]
[301.26510620 73.81790924]
[316.20114136 72.43388367]
[331.13714600 71.04985809]
[346.07315063 69.66583252]
[354.93206787 60.23590851]
[367.44238281 59.42169571]
[376.82693481 67.11536407]
[391.78820801 66.03829193]
[399.08502197 52.44563293]
[412.58328247 44.97569275]
[427.97579956 46.01209259]
[440.35086060 55.22413254]
[445.75961304 69.67227936]
[442.47616577 84.74617767]
[431.54824829 95.63581085]
[416.46289062 98.86632538]
[402.03384399 93.40688324]
[392.86529541 80.99957275]
[377.90402222 82.07664490]
[363.96545410 92.69554138]
[347.45718384 84.60184479]
[332.52117920 85.98587036]
[317.58514404 87.36989594]
[302.64913940 88.75392151]
[287.71313477 90.13794708]
[287.82962036 107.31549835]
[286.37747192 124.43195343]
[283.36880493 141.34436035]
[278.82879639 157.91149902]
[272.79531860 173.99499512]
[265.31875610 189.46054077]
[256.46157837 204.17895508]
[246.29772949 218.02734375]
[234.91209412 230.89006042]
[222.39976501 242.65965271]
[208.86524963 253.23785400]
[194.42153931 262.53631592]
[179.18930054 270.47738647]
[163.29571533 276.99472046]
[146.87353516 282.03393555]
[130.05989075 285.55291748]
[112.99521637 287.52227783]
[95.82200623 287.92556763]
[78.68369293 286.75946045]
[61.72339249 284.03363037]
[45.08275604 279.77090454]
[28.90075302 274.00683594]
[13.31252289 266.78958130]
[-1.55175149 258.17938232]
[-15.56793308 248.24821472]
[-28.61896706 237.07896423]
[-40.59586334 224.76490784]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 51]
[2 50]
[3 49]
[4 48]
[5 47]
[7 45]
[8 44]
[9 43]
[10 42]
[16 41]
[17 40]
[18 39]
[19 38]
[100 125]
[101 124]
[102 123]
[103 122]
[104 121]
[107 119]
[108 118]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
