%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:14 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGAUUAUUAUAAUAAACACCCUCACCACUACAAUCUUCCUAGGAACAACAUAUGACGCACUCUxxxxxxxxxxAACCGAAUUGGUAUAUAGUUUAAACAAAACGAAUGAUUUCGACUCAUUAAAUUAUGAUAAUCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[-1.32228684 227.22705078]
[-11.19799328 238.51733398]
[-14.46000385 253.99861145]
[-28.66314316 258.48416138]
[-38.53884888 269.77444458]
[-48.41455460 281.06472778]
[-58.29026031 292.35498047]
[-68.16596985 303.64526367]
[-71.42797852 319.12655640]
[-85.63111877 323.61209106]
[-88.89312744 339.09335327]
[-103.09626770 343.57891846]
[-112.97196960 354.86920166]
[-122.84767914 366.15948486]
[-132.72338867 377.44973755]
[-135.36950684 393.63400269]
[-150.80215454 399.18066406]
[-163.14555359 388.38378906]
[-159.70187378 372.35028076]
[-144.01367188 367.57403564]
[-134.13795471 356.28375244]
[-124.26225281 344.99349976]
[-114.38655090 333.70321655]
[-111.83090973 319.02947998]
[-96.92139435 313.73638916]
[-94.36576080 299.06268311]
[-79.45624542 293.76956177]
[-69.58054352 282.47927856]
[-59.70483398 271.18899536]
[-49.82912827 259.89871216]
[-39.95342255 248.60844421]
[-37.39778900 233.93472290]
[-22.48827362 228.64163208]
[-12.61256695 217.35134888]
[-19.13753319 210.72117615]
[-25.27276802 203.72879028]
[-30.99820518 196.39709473]
[-36.29511261 188.75004578]
[-41.14616013 180.81268311]
[-45.53548431 172.61096191]
[-49.44872284 164.17170715]
[-52.87307739 155.52253723]
[-55.79734039 146.69172668]
[-58.21195221 137.70817566]
[-60.10901260 128.60128784]
[-61.48231125 119.40081787]
[-62.32736206 110.13689423]
[-62.64139557 100.83980560]
[-62.42338943 91.53997040]
[-61.67404938 82.26781464]
[-60.39583588 73.05365753]
[-58.59292221 63.92765808]
[-56.27121353 54.91965485]
[-53.43829727 46.05912018]
[-50.10344315 37.37504196]
[-46.27756500 28.89582825]
[-41.97317123 20.64921379]
[-37.20434952 12.66217613]
[-31.98669624 4.96084309]
[-26.33727837 -2.42959213]
[-20.27457809 -9.48495293]
[-13.81842899 -16.18215942]
[-6.98995018 -22.49930573]
[0.18852115 -28.41572189]
[7.69350195 -33.91205978]
[15.50044155 -38.97033310]
[23.58380127 -43.57400131]
[31.91713715 -47.70800018]
[40.47319031 -51.35880661]
[49.22397232 -54.51448059]
[58.14085388 -57.16469574]
[67.19467163 -59.30078506]
[76.35580444 -60.91575623]
[85.59427643 -62.00433350]
[94.87987518 -62.56295395]
[104.18222809 -62.58978653]
[113.47090149 -62.08474350]
[122.71549988 -61.04948044]
[131.88578796 -59.48738098]
[140.95178223 -57.40356064]
[149.88380432 -54.80482864]
[158.65264893 -51.69969177]
[167.22961426 -48.09830475]
[174.05319214 -61.45640182]
[180.87677002 -74.81449890]
[177.32270813 -90.45893097]
[187.45024109 -102.90129852]
[203.49040222 -102.59688568]
[213.13854980 -89.77921295]
[208.99345398 -74.28089905]
[194.23486328 -67.99092865]
[187.41130066 -54.63282776]
[180.58772278 -41.27472687]
[194.41871643 -32.43124390]
[207.28778076 -22.23854065]
[219.06379700 -10.80046463]
[229.62677002 1.76645255]
[238.86911011 15.33417797]
[246.69662476 29.76448441]
[260.51022339 23.91769600]
[274.32379150 18.07090759]
[288.13739014 12.22411919]
[295.47085571 -2.04471922]
[311.22680664 -5.06626940]
[323.31860352 5.47734356]
[322.47045898 21.49796295]
[309.33300781 30.70594025]
[293.98416138 26.03770256]
[280.17059326 31.88449097]
[266.35699463 37.73127747]
[252.54341125 43.57806778]
[262.22372437 88.32143402]
[259.05221558 133.99002075]
[273.56085205 137.79786682]
[288.06945801 141.60572815]
[302.57809448 145.41358948]
[317.08673096 149.22145081]
[329.74468994 140.03939819]
[345.33959961 141.19346619]
[356.50808716 152.13874817]
[357.97668457 167.70722961]
[349.05197144 180.54791260]
[333.94793701 184.59785461]
[319.79623413 177.94477844]
[313.27886963 163.73007202]
[298.77023315 159.92221069]
[284.26159668 156.11434937]
[269.75299072 152.30650330]
[255.24435425 148.49864197]
[251.01615906 160.39080811]
[245.87852478 171.91929626]
[239.86241150 183.01467896]
[233.00402832 193.61013794]
[225.34468079 203.64187622]
[216.93051147 213.04948425]
[207.81217957 221.77629089]
[198.04458618 229.76974487]
[187.68656921 236.98173523]
[176.80049133 243.36880493]
[165.45191956 248.89250183]
[153.70918274 253.51954651]
[141.64302063 257.22210693]
[129.32608032 259.97784424]
[116.83252716 261.77020264]
[104.23760986 262.58834839]
[91.61717987 262.42739868]
[79.04722595 261.28826904]
[66.60345459 259.17788696]
[54.36079788 256.10891724]
[42.39298248 252.09983826]
[30.77207947 247.17480469]
[19.56807327 241.36347961]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 34]
[2 33]
[4 31]
[5 30]
[6 29]
[7 28]
[8 27]
[10 25]
[12 23]
[13 22]
[14 21]
[15 20]
[83 93]
[84 92]
[85 91]
[99 111]
[100 110]
[101 109]
[102 108]
[113 129]
[114 128]
[115 127]
[116 126]
[117 125]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
