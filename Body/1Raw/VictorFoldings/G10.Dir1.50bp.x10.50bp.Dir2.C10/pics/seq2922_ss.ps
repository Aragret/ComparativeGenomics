%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:45 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCUCCGAGCAGUACAUGCUAAGACUUCACCAGUCAAAGCGAACUACUAUACUCAAUUGAUCCAxxxxxxxxxxUCCUCUGAUCAGGGUGAGCAUCAAACUCAAACUACGCCCUGAUCGGCGCACUGCGAGCAGUACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[159.25872803 329.70550537]
[158.95472717 314.70858765]
[158.65071106 299.71166992]
[158.34671021 284.71472168]
[158.04270935 269.71780396]
[157.73870850 254.72090149]
[157.43470764 239.72398376]
[157.13069153 224.72706604]
[156.82669067 209.73014832]
[154.55528259 194.90312195]
[150.35581970 180.50296021]
[139.36474609 170.45080566]
[142.92907715 155.03633118]
[138.72961426 140.63618469]
[134.53015137 126.23602295]
[130.33068848 111.83586121]
[111.54011536 127.94896698]
[88.72902679 125.54083252]
[75.93804932 108.72991943]
[60.95730209 109.48966217]
[45.97655487 110.24939728]
[30.99580765 111.00913239]
[19.53906250 124.19165039]
[2.43097019 125.02290344]
[-9.76026058 113.47643280]
[-24.72253418 114.53962708]
[-39.68480682 115.60282135]
[-54.64707947 116.66602325]
[-64.98000336 128.32228088]
[-80.16902161 129.18737793]
[-91.21780396 119.26467896]
[-106.18008423 120.32787323]
[-121.14235687 121.39106750]
[-136.10462952 122.45426178]
[-147.66011047 133.58306885]
[-163.54621887 131.34455872]
[-171.57650757 117.45593262]
[-165.59080505 102.57134247]
[-150.18084717 98.10898590]
[-137.16781616 107.49198914]
[-122.20555115 106.42879486]
[-107.24327850 105.36560059]
[-92.28100586 104.30240631]
[-82.74633026 92.91708374]
[-67.58760071 91.62570953]
[-55.71027374 101.70374298]
[-40.74800110 100.64054871]
[-25.78573036 99.57735443]
[-10.82345676 98.51416016]
[-3.80057740 87.67034912]
[8.37406254 82.79568481]
[21.31940460 85.88658905]
[30.23607063 96.02838898]
[45.21681976 95.26864624]
[60.19756699 94.50891113]
[75.17831421 93.74917603]
[78.24974060 84.02091980]
[85.15888977 75.80828857]
[95.15781403 70.62278748]
[106.90936279 69.60961914]
[118.66398621 73.32240295]
[117.44921875 58.37166977]
[116.23445129 43.42094040]
[101.35180664 41.01876068]
[87.47678375 35.12408829]
[75.41605377 26.07963181]
[65.87081146 14.41122246]
[59.39600372 0.79724872]
[56.36806870 -13.97079277]
[56.96304321 -29.03430557]
[61.14634323 -43.51751709]
[68.67475128 -56.57839584]
[79.11057281 -67.45759583]
[91.84709167 -75.52261353]
[106.14382172 -80.30456543]
[121.16956329 -81.52542877]
[136.05073547 -79.11422729]
[149.92219543 -73.21114349]
[161.97743225 -64.15937805]
[171.51559448 -52.48518372]
[177.98216248 -38.86728668]
[181.00114441 -24.09741020]
[180.39703369 -9.03426075]
[176.20495605 5.44641352]
[168.66862488 18.50272369]
[158.22621155 29.37559509]
[145.48480225 37.43289185]
[131.18518066 42.20617294]
[132.39994812 57.15690231]
[133.61471558 72.10763550]
[146.26332092 80.17068481]
[160.32960510 74.96111298]
[174.39588928 69.75153351]
[188.46217346 64.54195404]
[202.52844238 59.33237457]
[216.59472656 54.12279510]
[230.25637817 47.92930603]
[243.44467163 40.78305817]
[256.63296509 33.63681030]
[269.82125854 26.49056625]
[272.77435303 11.13435364]
[284.93988037 1.30918920]
[300.57366943 1.65421462]
[312.29391479 12.00651932]
[314.56665039 27.47806168]
[306.31878662 40.76365280]
[291.44473267 45.59024048]
[276.96752930 39.67886353]
[263.77920532 46.82510757]
[250.59092712 53.97135544]
[237.40263367 61.11759949]
[251.67706299 65.72634125]
[259.79342651 78.34080505]
[258.07183838 93.24167633]
[247.29281616 103.67302704]
[232.34353638 104.90535736]
[220.00184631 96.37993622]
[215.86338806 81.96212769]
[221.80430603 68.18907928]
[207.73802185 73.39865875]
[193.67173767 78.60823059]
[179.60546875 83.81781006]
[165.53918457 89.02738953]
[151.47290039 94.23696899]
[144.73085022 107.63640594]
[148.93031311 122.03656006]
[153.12977600 136.43672180]
[157.32923889 150.83686829]
[168.62068176 161.91902161]
[164.75596619 176.30349731]
[168.95542908 190.70365906]
[173.59820557 176.44024658]
[183.55877686 165.22476196]
[197.17398071 158.92985535]
[212.17050171 158.60658264]
[226.04432678 164.30894470]
[236.47894287 175.08480835]
[241.73204041 189.13488770]
[240.92651367 204.11325073]
[234.19688416 217.51890564]
[222.66676331 227.11352539]
[208.26139832 231.29505920]
[193.38604736 229.36532593]
[180.52447510 221.64651489]
[171.82360840 209.42613220]
[172.12760925 224.42304993]
[172.43162537 239.41996765]
[172.73562622 254.41690063]
[173.03962708 269.41381836]
[173.34362793 284.41073608]
[173.64764404 299.40765381]
[173.95164490 314.40457153]
[174.25564575 329.40148926]
[176.83633423 348.61059570]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 153]
[2 152]
[3 151]
[4 150]
[5 149]
[6 148]
[7 147]
[8 146]
[9 145]
[10 131]
[11 130]
[13 128]
[14 127]
[15 126]
[16 125]
[19 56]
[20 55]
[21 54]
[22 53]
[25 49]
[26 48]
[27 47]
[28 46]
[31 43]
[32 42]
[33 41]
[34 40]
[61 90]
[62 89]
[63 88]
[91 124]
[92 123]
[93 122]
[94 121]
[95 120]
[96 119]
[97 111]
[98 110]
[99 109]
[100 108]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
