%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:01 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGAACAAACCCACAGGUCCUAAACUACCAAACCUGCAUUAAAAAUUUCGGUUGGGGCGACCUxxxxxxxxxxCCUCACUCUCUCAAUCUUAUCCAUCAUAGCAGGCAGUUGAGGUGGAUUAAACCAAACCCACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[95.36044312 281.46896362]
[95.36044312 266.46896362]
[95.36044312 251.46897888]
[95.36044312 236.46897888]
[95.36044312 221.46897888]
[95.36044312 206.46897888]
[95.36044312 191.46897888]
[95.36044312 176.46897888]
[95.36044312 161.46897888]
[95.36044312 146.46897888]
[88.53232574 143.36627197]
[86.85061646 158.27169800]
[72.15502930 161.27832031]
[64.75440979 148.23106384]
[74.87608337 137.16085815]
[68.04795837 134.05816650]
[56.74895477 143.92388916]
[45.44995117 153.78961182]
[40.65985489 169.47358704]
[24.62331963 172.90309143]
[13.83735657 160.55015564]
[19.39764023 145.12242126]
[35.58422852 142.49060059]
[46.88323212 132.62487793]
[58.18223572 122.75915527]
[56.20269394 92.62863159]
[72.24178314 69.53205872]
[97.19912720 62.08325577]
[99.06674194 47.19997787]
[100.93434906 32.31669617]
[94.97548676 17.66055489]
[104.23722076 5.99567127]
[106.10483551 -8.88760853]
[107.97244263 -23.77088928]
[109.84005737 -38.65416718]
[111.70767212 -53.53744888]
[104.15293884 -70.29769897]
[115.21481323 -83.88574219]
[116.77239227 -98.80464935]
[117.86370087 -113.76490021]
[118.48767853 -128.75192261]
[119.11165619 -143.73893738]
[119.73563385 -158.72595215]
[120.35961151 -173.71296692]
[120.82765198 -188.70565796]
[121.13970947 -203.70240784]
[120.51573181 -218.68943787]
[118.95815277 -233.60833740]
[117.40056610 -248.52725220]
[107.86712646 -257.27752686]
[106.90900421 -269.77957153]
[114.49637604 -279.25265503]
[113.24949646 -294.20074463]
[112.00262451 -309.14883423]
[106.95387268 -323.27362061]
[98.44277954 -335.62518311]
[89.93168640 -347.97677612]
[75.73020172 -354.95016479]
[74.87985992 -369.82046509]
[60.91385269 -379.43228149]
[66.28385925 -395.51330566]
[83.22299957 -394.80484009]
[87.23143005 -378.33157349]
[100.82415009 -372.24163818]
[102.28326416 -356.48785400]
[110.79434967 -344.13629150]
[119.30544281 -331.78469849]
[118.46949768 -346.76141357]
[121.04514313 -361.53860474]
[126.89870453 -375.34933472]
[135.72633362 -387.47668457]
[147.06983948 -397.29122925]
[160.34042358 -404.28347778]
[174.84925842 -408.09054565]
[189.84324646 -408.51480103]
[204.54414368 -405.53421021]
[218.18885803 -399.30352783]
[230.06916809 -390.14608765]
[239.56840515 -378.53729248]
[246.19352722 -365.07965088]
[249.60061646 -350.47174072]
[249.61285400 -335.47174072]
[246.22959900 -320.85824585]
[239.62644958 -307.38983154]
[230.14616394 -295.76553345]
[218.28080750 -286.58874512]
[204.64628601 -280.33578491]
[189.95027161 -277.33123779]
[174.95559692 -277.73101807]
[160.44058228 -281.51440430]
[147.15859985 -288.48501587]
[135.79910278 -298.28100586]
[126.95071411 -310.39569092]
[128.19758606 -295.44760132]
[129.44445801 -280.49951172]
[140.22125244 -266.68429565]
[132.31948853 -250.08483887]
[133.87705994 -235.16592407]
[135.43464661 -220.24700928]
[146.00779724 -230.88696289]
[161.00587463 -231.12667847]
[171.91368103 -220.83007812]
[172.53823853 -205.84307861]
[162.52496338 -194.67462158]
[147.55892944 -193.66564941]
[136.13645935 -203.39036560]
[135.82440186 -188.39360046]
[138.84924316 -181.59683228]
[135.34663391 -173.08898926]
[134.72265625 -158.10197449]
[134.09867859 -143.11495972]
[133.47470093 -128.12794495]
[132.85072327 -113.14092255]
[135.01528931 -110.28047943]
[135.86604309 -106.20888519]
[134.83982849 -101.57215881]
[131.69129944 -97.24707031]
[130.13372803 -82.32815552]
[137.52236938 -72.69928741]
[136.30436707 -60.21988678]
[126.59095001 -51.66983414]
[124.72333527 -36.78655624]
[122.85572815 -21.90327454]
[120.98811340 -7.01999569]
[119.12049866 7.86328459]
[125.21295166 21.45487404]
[115.81763458 34.18431091]
[113.95001984 49.06758881]
[112.08240509 63.95087051]
[119.95726013 66.70377350]
[127.19430542 71.18881226]
[133.41061401 77.25563049]
[138.25929260 84.66895294]
[141.44827271 93.11732483]
[142.75708008 102.22605896]
[142.05046082 111.57377625]
[139.28814697 120.71190643]
[134.53015137 129.18620300]
[127.93724060 136.55924988]
[119.76623535 142.43281555]
[110.36044312 146.46897888]
[110.36044312 161.46897888]
[110.36044312 176.46897888]
[110.36044312 191.46897888]
[110.36044312 206.46897888]
[110.36044312 221.46897888]
[110.36044312 236.46897888]
[110.36044312 251.46897888]
[110.36044312 266.46896362]
[110.36044312 281.46896362]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[16 25]
[17 24]
[18 23]
[28 129]
[29 128]
[30 127]
[32 125]
[33 124]
[34 123]
[35 122]
[36 121]
[38 118]
[39 117]
[40 113]
[41 112]
[42 111]
[43 110]
[44 109]
[45 107]
[46 106]
[47 99]
[48 98]
[49 97]
[52 95]
[53 94]
[54 93]
[55 67]
[56 66]
[57 65]
[59 63]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
