%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:02 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCCCUUUCACUUCUGAGUCCCAGAGGUUACCCAAGGCACCCCUCUGACAUCCGGCCUGCUUxxxxxxxxxxUGAUUUCCCCUAUUCUCAGGCUACACCCUAGACCAAACCUACGCCAAAAUCCAUUUCACUCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[184.57496643 102.06993103]
[178.91532898 94.55540466]
[173.81549072 86.64990234]
[169.30239868 78.39505768]
[155.52000427 84.31501770]
[141.73762512 90.23497772]
[127.95524597 96.15494537]
[114.17286682 102.07490540]
[105.65314484 113.16120148]
[91.74709320 111.70747375]
[77.96471405 117.62744141]
[64.18233490 123.54740143]
[63.78496552 140.65910339]
[56.00202560 155.84170532]
[42.42904663 166.08786011]
[25.80301476 169.39149475]
[9.45052052 165.14054871]
[-3.37783909 154.22955322]
[-16.90202904 160.71771240]
[-30.42621803 167.20588684]
[-43.95040894 173.69404602]
[-57.47459793 180.18220520]
[-70.99878693 186.67037964]
[-84.52297974 193.15853882]
[-91.17922211 207.75559998]
[-106.77613068 211.51272583]
[-119.34909058 201.54777527]
[-119.25320435 185.50500488]
[-106.56202698 175.69105530]
[-91.01114655 179.63435364]
[-77.48695374 173.14619446]
[-63.96276474 166.65802002]
[-50.43857574 160.16986084]
[-36.91438293 153.68168640]
[-23.39019394 147.19352722]
[-9.86600399 140.70536804]
[-10.90409946 127.68795776]
[-7.42901087 115.06685638]
[0.16311264 104.36320496]
[10.97856903 96.87477875]
[23.73126030 93.51866150]
[36.89561081 94.71894073]
[48.88907623 100.35328674]
[58.26237106 109.76502228]
[72.04475403 103.84505463]
[85.82713318 97.92509460]
[94.34685516 86.83879852]
[108.25290680 88.29252625]
[122.03528595 82.37255859]
[135.81767273 76.45259857]
[149.60005188 70.53263855]
[163.38243103 64.61267090]
[157.17602539 40.32238007]
[155.76245117 15.29543209]
[159.19309998 -9.53167820]
[167.33818054 -33.23022461]
[179.89154053 -54.91398239]
[196.38220215 -73.77236938]
[216.19206238 -89.10074615]
[238.57899475 -100.32675934]
[262.70471191 -107.03167725]
[287.66616821 -108.96606445]
[312.52926636 -106.05899048]
[316.53698730 -120.51367950]
[320.54473877 -134.96836853]
[324.55249023 -149.42304993]
[328.56021118 -163.87774658]
[315.15893555 -170.73272705]
[303.41210938 -180.14529419]
[293.80072021 -191.73004150]
[286.71838379 -205.01257324]
[282.45510864 -219.44895935]
[281.18548584 -234.44805908]
[282.96148682 -249.39566040]
[287.71038818 -263.67965698]
[295.23773193 -276.71514893]
[305.23526001 -287.96835327]
[317.29360962 -296.97839355]
[330.91897583 -303.37640381]
[345.55340576 -306.90029907]
[360.59765625 -307.40585327]
[375.43563843 -304.87234497]
[389.45977783 -299.40347290]
[402.09579468 -291.22323608]
[412.82623291 -280.66659546]
[421.21166992 -268.16583252]
[426.90878296 -254.23286438]
[429.68423462 -239.43820190]
[429.42437744 -224.38771057]
[426.13986206 -209.69769287]
[419.96520996 -195.96968079]
[411.15322876 -183.76582336]
[400.06475830 -173.58589172]
[387.15390015 -165.84672546]
[372.94934082 -160.86524963]
[358.03274536 -158.84542847]
[343.01492310 -159.87001038]
[339.00717163 -145.41531372]
[334.99942017 -130.96063232]
[330.99169922 -116.50594330]
[326.98394775 -102.05125427]
[335.75997925 -98.70446014]
[344.27041626 -94.72979736]
[352.47036743 -90.14815521]
[360.31661987 -84.98363495]
[367.76785278 -79.26341248]
[374.78475952 -73.01758575]
[381.33035278 -66.27903748]
[387.37008667 -59.08322525]
[392.87213135 -51.46804428]
[397.80749512 -43.47357941]
[402.15008545 -35.14192963]
[405.87704468 -26.51696587]
[408.96865845 -17.64411354]
[411.40859985 -8.57009983]
[413.18402100 0.65727937]
[414.28546143 9.98942089]
[414.70712280 19.37716675]
[414.44671631 28.77105904]
[413.50555420 38.12160873]
[411.88861084 47.37954712]
[409.60433960 56.49610138]
[406.66470337 65.42322540]
[403.08517456 74.11387634]
[398.88455200 82.52225494]
[394.08496094 90.60404968]
[388.71163940 98.31665039]
[382.79284668 105.61941528]
[376.35974121 112.47383118]
[369.44619751 118.84376526]
[362.08856201 124.69562531]
[354.32562256 129.99855042]
[346.19821167 134.72456360]
[337.74917603 138.84873962]
[329.02294922 142.34931946]
[320.06552124 145.20779419]
[310.92407227 147.40908813]
[301.64675903 148.94155884]
[292.28240967 149.79707336]
[282.88037109 149.97111511]
[273.49020386 149.46269226]
[264.16137695 148.27447510]
[254.94299316 146.41264343]
[245.88368225 143.88699341]
[237.03114319 140.71076965]
[228.43205261 136.90068054]
[220.13171387 132.47676086]
[212.17388916 127.46226501]
[204.60050964 121.88359070]
[197.45150757 115.77008057]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 52]
[5 51]
[6 50]
[7 49]
[8 48]
[10 46]
[11 45]
[12 44]
[18 36]
[19 35]
[20 34]
[21 33]
[22 32]
[23 31]
[24 30]
[63 101]
[64 100]
[65 99]
[66 98]
[67 97]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
