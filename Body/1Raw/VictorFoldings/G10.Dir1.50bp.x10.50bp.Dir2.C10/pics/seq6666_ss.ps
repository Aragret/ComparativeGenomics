%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:35 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGACCAAACGCCCCUCUUCGUCUGAUCCGUCCUAAUCACAGCAGUCCUACUUCUCCUAUCUCxxxxxxxxxxUGCCUGAUCCUCCAAAUCACCACAGGACUAUUCCUAGCCAUGCACUACUCACCAGACGCCCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[92.50000000 289.25357056]
[92.50000000 274.25357056]
[92.50000000 259.25357056]
[92.50000000 244.25357056]
[92.50000000 229.25357056]
[92.50000000 214.25357056]
[92.50000000 199.25357056]
[92.50000000 184.25357056]
[92.50000000 169.25357056]
[92.50000000 154.25357056]
[86.57621002 153.09898376]
[80.81541443 151.29962158]
[75.28757477 148.87734985]
[70.05981445 145.86158752]
[65.19560242 142.28892517]
[60.75400925 138.20277405]
[48.67402267 147.09512329]
[36.59403229 155.98747253]
[36.82554245 171.50282288]
[27.86563683 184.17167664]
[13.15958214 189.12258911]
[-1.63784301 184.45184326]
[-10.83672714 171.95544434]
[-10.89991093 156.43849182]
[-1.80309951 143.86758423]
[12.95579720 139.07649231]
[27.70168304 143.90748596]
[39.78167343 135.01513672]
[51.86166000 126.12278748]
[47.70388794 116.27317810]
[45.53882599 105.80348206]
[30.54613113 105.33544159]
[15.55343533 104.86740112]
[0.56073952 104.39936066]
[-8.84045219 116.74428558]
[-23.71198654 121.17340088]
[-38.33545685 115.98362732]
[-47.08783722 103.17052460]
[-46.60366058 87.66101074]
[-37.06910324 75.41879272]
[-22.15039635 71.15126038]
[-7.58408642 76.49937439]
[1.02878165 89.40666199]
[16.02147865 89.87470245]
[31.01417351 90.34274292]
[46.00687027 90.81079102]
[59.40080643 63.23853683]
[85.51203918 47.18145370]
[116.16148376 47.66926193]
[122.50861359 34.07831192]
[128.85574341 20.48736000]
[133.46130371 6.21190023]
[136.25363159 -8.52590561]
[139.04595947 -23.26371193]
[141.83828735 -38.00151825]
[144.63061523 -52.73932266]
[130.35057068 -57.39862061]
[116.78362274 -63.84580231]
[104.15253448 -71.97500610]
[92.66472626 -81.65273285]
[82.50882721 -92.72007751]
[73.85161591 -104.99530029]
[66.83524323 -118.27682495]
[61.57493591 -132.34655762]
[58.15706635 -146.97346497]
[56.63775635 -161.91735840]
[57.04196167 -176.93286133]
[59.36303711 -191.77337646]
[63.56287766 -206.19522095]
[69.57250977 -219.96157837]
[77.29325104 -232.84638977]
[86.59832001 -244.63807678]
[97.33493042 -255.14302063]
[109.32675934 -264.18869019]
[122.37689972 -271.62658691]
[136.27105713 -277.33453369]
[150.78106689 -281.21884155]
[165.66868591 -283.21566772]
[180.68942261 -283.29229736]
[195.59661865 -281.44741821]
[210.14550781 -277.71133423]
[224.09716797 -272.14541626]
[237.22250366 -264.84106445]
[249.30598450 -255.91816711]
[260.14920044 -245.52331543]
[269.57406616 -233.82716370]
[277.42584229 -221.02177429]
[283.57559204 -207.31742859]
[287.92233276 -192.93917847]
[290.39468384 -178.12310791]
[290.95205688 -163.11253357]
[289.58526611 -148.15391541]
[286.31677246 -133.49288940]
[281.20025635 -119.37023163]
[274.31976318 -106.01782227]
[265.78820801 -93.65493011]
[255.74574280 -82.48455811]
[244.35725403 -72.69014740]
[231.80973816 -64.43251801]
[218.30926514 -57.84727097]
[204.07751465 -53.04254532]
[189.34817505 -50.09723282]
[174.36311340 -49.05970764]
[159.36840820 -49.94699860]
[156.57609558 -35.20919418]
[153.78376770 -20.47138786]
[150.99143982 -5.73358107]
[148.19911194 9.00422478]
[159.05334473 -1.34883130]
[173.28718567 -6.08146191]
[188.17970276 -4.28897762]
[200.88403320 3.68596983]
[208.97163391 16.31889153]
[210.89648438 31.19487762]
[206.29060364 45.47023773]
[196.03446960 56.41609955]
[182.08865356 61.94004440]
[167.11901855 60.98612595]
[153.98715210 53.73668671]
[145.20336914 41.57753372]
[142.44670105 26.83448982]
[136.09956360 40.42544174]
[129.75244141 54.01639175]
[135.67054749 58.43906021]
[140.93957520 63.61799240]
[145.46365356 69.45895386]
[149.16044617 75.85565186]
[151.96269226 82.69168854]
[153.81941223 89.84268188]
[154.69679260 97.17849731]
[154.57888794 104.56565857]
[153.46783447 111.86974335]
[151.38385010 118.95783997]
[148.36486816 125.70096588]
[144.46580505 131.97642517]
[139.75762939 137.67002869]
[134.32600403 142.67816162]
[128.26976013 146.90971375]
[121.69910431 150.28765869]
[114.73360443 152.75054932]
[107.50000000 154.25357056]
[107.50000000 169.25357056]
[107.50000000 184.25357056]
[107.50000000 199.25357056]
[107.50000000 214.25357056]
[107.50000000 229.25357056]
[107.50000000 244.25357056]
[107.50000000 259.25357056]
[107.50000000 274.25357056]
[107.50000000 289.25357056]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[16 29]
[17 28]
[18 27]
[31 46]
[32 45]
[33 44]
[34 43]
[49 123]
[50 122]
[51 121]
[52 108]
[53 107]
[54 106]
[55 105]
[56 104]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
