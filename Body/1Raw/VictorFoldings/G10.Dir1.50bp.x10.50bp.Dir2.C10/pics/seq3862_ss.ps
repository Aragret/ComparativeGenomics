%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:02 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGAUUACUAAUAAGUGGCUCCUUUAACCUCUCCACCCUUAUCACAACACAAGAACACCUCUGAUUxxxxxxxxxxAGAGUAAUAAACUUCGCCUUAAUUUUAAUAAUCAACACCCUCCUAGCCUUACUACUAAUAAUUCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[92.50000000 310.81900024]
[92.50000000 295.81900024]
[92.50000000 280.81900024]
[92.50000000 265.81900024]
[92.50000000 250.81900024]
[92.50000000 235.81900024]
[92.50000000 220.81900024]
[92.50000000 205.81900024]
[92.50000000 190.81900024]
[92.50000000 175.81900024]
[77.04434204 172.64852905]
[62.57310104 166.36262512]
[49.70685959 157.23086548]
[38.99736786 145.64483643]
[30.90388680 132.10137939]
[25.77349472 117.18131256]
[23.82620049 101.52445221]
[25.14551163 85.80221558]
[29.67484856 70.68882751]
[37.21998215 56.83240891]
[47.45734406 44.82717133]
[59.94792557 35.18794250]
[74.15608215 28.32808495]
[89.47251892 24.54177475]
[88.87237549 9.55378532]
[88.27223206 -5.43420410]
[87.67208099 -20.42219353]
[72.67078400 -20.74582100]
[57.71786499 -21.99233055]
[42.87004089 -24.15699387]
[28.18363953 -27.23159981]
[13.71436691 -31.20448685]
[-0.48288578 -36.06058121]
[-14.35426426 -41.78146362]
[-27.84714890 -48.34543228]
[-40.91035843 -55.72758865]
[-53.49433517 -63.89992905]
[-65.55134583 -72.83145142]
[-77.03565979 -82.48828125]
[-87.90370178 -92.83377838]
[-98.11425018 -103.82869720]
[-107.62857056 -115.43134308]
[-116.41057587 -127.59768677]
[-124.42694855 -140.28158569]
[-131.64729309 -153.43493652]
[-138.04418945 -167.00781250]
[-143.59341431 -180.94876099]
[-148.27388000 -195.20487976]
[-152.06784058 -209.72209167]
[-154.96092224 -224.44532776]
[-156.94213867 -239.31874084]
[-158.00396729 -254.28591919]
[-158.14237976 -269.29006958]
[-157.35687256 -284.27426147]
[-155.65039062 -299.18170166]
[-153.02944946 -313.95581055]
[-149.50395203 -328.54055786]
[-145.08729553 -342.88058472]
[-139.79623413 -356.92153931]
[-133.65081787 -370.61013794]
[-126.67438507 -383.89443970]
[-118.89338684 -396.72409058]
[-110.33733368 -409.05038452]
[-101.03869629 -420.82659912]
[-91.03273010 -432.00802612]
[-80.35740662 -442.55227661]
[-69.05321503 -452.41931152]
[-57.16303253 -461.57177734]
[-44.73197174 -469.97488403]
[-31.80718231 -477.59680176]
[-18.43769455 -484.40856934]
[-4.67422342 -490.38439941]
[9.43102169 -495.50161743]
[23.82453346 -499.74075317]
[38.45171356 -503.08578491]
[53.25707245 -505.52401733]
[68.18444824 -507.04620361]
[83.17722321 -507.64654541]
[98.17852020 -507.32275391]
[113.13143158 -506.07611084]
[127.97923279 -503.91128540]
[142.66560364 -500.83654785]
[157.13484192 -496.86352539]
[171.33204651 -492.00726318]
[185.20336914 -486.28625488]
[198.69618225 -479.72216797]
[211.75932312 -472.33987427]
[224.34321594 -464.16741943]
[236.40014648 -455.23577881]
[247.88435364 -445.57882690]
[258.75228882 -435.23321533]
[268.96273804 -424.23818970]
[278.47695923 -412.63546753]
[287.25881958 -400.46902466]
[295.27508545 -387.78503418]
[302.49530029 -374.63162231]
[308.89205933 -361.05868530]
[314.44113159 -347.11767578]
[319.12145996 -332.86154175]
[322.91528320 -318.34426880]
[325.80822754 -303.62100220]
[327.78927612 -288.74758911]
[328.85098267 -273.78039551]
[328.98925781 -258.77624512]
[328.20358276 -243.79203796]
[326.49697876 -228.88462830]
[323.87585449 -214.11053467]
[320.35025024 -199.52583313]
[315.93344116 -185.18583679]
[310.64224243 -171.14494324]
[304.49670410 -157.45640564]
[297.52011108 -144.17216492]
[289.73898315 -131.34260559]
[281.18283081 -119.01638794]
[271.88406372 -107.24028015]
[261.87799072 -96.05894470]
[251.20256042 -85.51480865]
[239.89826965 -75.64785767]
[228.00801086 -66.49552917]
[215.57685852 -58.09253693]
[202.65199280 -50.47075653]
[189.28244019 -43.65909958]
[175.51890564 -37.68341064]
[161.41362000 -32.56635284]
[147.02006531 -28.32733536]
[132.39285278 -24.98244095]
[117.58747101 -22.54435921]
[102.66007233 -21.02233696]
[103.26021576 -6.03434849]
[103.86035919 8.95364094]
[104.46050262 23.94163132]
[118.48786926 26.08809090]
[131.87387085 30.79864311]
[144.15412903 37.90987015]
[154.90263367 47.17507553]
[163.74649048 58.27283859]
[170.37892151 70.81816864]
[174.56980896 84.37584686]
[176.17379761 98.47554779]
[175.13522339 112.62813568]
[171.49012756 126.34263611]
[165.36494446 139.14328003]
[156.97218323 150.58599854]
[146.60298157 160.27381897]
[134.61706543 167.87068176]
[121.43025208 173.11303711]
[107.50000000 175.81900024]
[107.50000000 190.81900024]
[107.50000000 205.81900024]
[107.50000000 220.81900024]
[107.50000000 235.81900024]
[107.50000000 250.81900024]
[107.50000000 265.81900024]
[107.50000000 280.81900024]
[107.50000000 295.81900024]
[107.50000000 310.81900024]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 156]
[2 155]
[3 154]
[4 153]
[5 152]
[6 151]
[7 150]
[8 149]
[9 148]
[10 147]
[24 131]
[25 130]
[26 129]
[27 128]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
