%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:28 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGAGCCACACCCCCACGGGAAACAGCAGUGAUUAACCUUUAGCAAUAAACGAAAGUUUAACUAxxxxxxxxxxACAAUAUUCAUGUGCCUAGACCAAGAAGUUAUUAUCUCGAACUGACACUGAGCCACAACCCCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[90.91072083 286.90576172]
[90.91072083 271.90576172]
[90.91072083 256.90576172]
[90.91072083 241.90576172]
[90.91072083 226.90576172]
[90.91072083 211.90576172]
[90.91072083 196.90576172]
[90.91072083 181.90576172]
[90.91072083 166.90576172]
[90.91072083 151.90576172]
[84.19699860 148.56271362]
[77.51092529 161.99017334]
[75.30120850 176.82652283]
[60.50814056 179.30944824]
[53.57558060 166.00758362]
[64.08347321 155.30409241]
[70.76954651 141.87664795]
[64.05582428 138.53359985]
[52.08556747 147.57312012]
[40.11530685 156.61264038]
[34.22491837 171.91738892]
[17.98553658 174.20091248]
[8.10284233 161.11410522]
[14.74330616 146.11956787]
[31.07578850 144.64239502]
[43.04604721 135.60287476]
[55.01630402 126.56334686]
[49.86214828 100.20815277]
[58.43649673 75.91950226]
[77.31971741 60.05763626]
[100.56256104 56.17411804]
[103.31880951 41.42951965]
[106.07505035 26.68492508]
[108.37592316 11.86244202]
[110.21924591 -3.02386546]
[112.06257629 -17.91017342]
[113.90589905 -32.79648209]
[115.13651276 -47.74591446]
[115.75233459 -62.73326874]
[116.36816406 -77.72061920]
[116.67613983 -92.71746063]
[116.67613983 -107.71746063]
[116.67613983 -122.71746063]
[116.67613983 -137.71745300]
[116.36816406 -152.71429443]
[115.75233459 -167.70164490]
[115.13651276 -182.68901062]
[113.90589905 -197.63844299]
[112.06257629 -212.52474976]
[110.21924591 -227.41105652]
[108.22319031 -242.27764893]
[106.07461548 -257.12298584]
[103.77373505 -271.94546509]
[101.32080841 -286.74353027]
[95.33251190 -300.49636841]
[86.17057800 -312.37319946]
[77.00864410 -324.25000000]
[67.84671021 -336.12683105]
[52.48228836 -341.85980225]
[50.03217316 -358.07485962]
[63.01682281 -368.09140015]
[78.07875061 -361.60522461]
[79.72353363 -345.28875732]
[88.88546753 -333.41195679]
[98.04740143 -321.53512573]
[107.20933533 -309.65829468]
[105.48607635 -324.55899048]
[107.31200409 -339.44744873]
[112.58489990 -353.49011230]
[121.00954437 -365.90078735]
[132.11428833 -375.98468018]
[145.27740479 -383.17721558]
[159.76194763 -387.07568359]
[174.75697327 -387.46182251]
[189.42297363 -384.31405640]
[202.93884277 -377.80859375]
[214.54789734 -368.30966187]
[223.60017395 -356.34902954]
[229.58886719 -342.59640503]
[232.17871094 -327.82165527]
[231.22468567 -312.85202026]
[226.78021240 -298.52560425]
[219.09413147 -285.64443970]
[208.59674072 -274.92974854]
[195.87576294 -266.98135376]
[181.64340210 -262.24429321]
[166.69645691 -260.98379517]
[151.87176514 -263.27038574]
[137.99929810 -268.97604370]
[125.85573578 -277.78137207]
[116.11888885 -289.19647217]
[118.57181549 -274.39837646]
[122.79438782 -268.27612305]
[120.91993713 -259.27154541]
[123.06851196 -244.42623901]
[127.16448975 -238.21856689]
[125.10555267 -229.25437927]
[126.94888306 -214.36807251]
[128.79220581 -199.48176575]
[130.98524475 -197.64285278]
[132.55841064 -194.79779053]
[133.11459351 -191.18705750]
[132.35435486 -187.19386292]
[130.12385559 -183.30482483]
[130.73968506 -168.31747437]
[131.35551453 -153.33012390]
[134.24516296 -149.45724487]
[134.69087219 -143.71362305]
[131.67613220 -137.71745300]
[131.67613220 -122.71746063]
[131.67613220 -107.71746063]
[131.67613220 -92.71746063]
[134.40434265 -88.72921753]
[134.61387634 -82.97213745]
[131.35551453 -77.10479736]
[130.73968506 -62.11744308]
[130.12385559 -47.13008881]
[131.98666382 -44.95730591]
[133.07341003 -41.89328384]
[133.03164673 -38.24020386]
[131.62864685 -34.42508316]
[128.79220581 -30.95315552]
[126.94888306 -16.06684875]
[125.10555267 -1.18054116]
[123.26222992 13.70576668]
[125.18385315 16.73142052]
[125.69976807 20.85494232]
[124.30271149 25.38857651]
[120.81964874 29.44116783]
[118.06340027 44.18576431]
[115.30715942 58.93035889]
[124.38080597 62.73689270]
[132.51014709 68.55204010]
[139.25013733 76.14178467]
[144.21369934 85.17356873]
[147.09347534 95.23058319]
[147.68013000 105.83095551]
[145.87594604 116.45077515]
[141.70303345 126.55003357]
[135.30563354 135.60000610]
[126.94591522 143.11088562]
[116.99379730 148.65806580]
[105.91072083 151.90576172]
[105.91072083 166.90576172]
[105.91072083 181.90576172]
[105.91072083 196.90576172]
[105.91072083 211.90576172]
[105.91072083 226.90576172]
[105.91072083 241.90576172]
[105.91072083 256.90576172]
[105.91072083 271.90576172]
[105.91072083 286.90576172]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 152]
[2 151]
[3 150]
[4 149]
[5 148]
[6 147]
[7 146]
[8 145]
[9 144]
[10 143]
[18 27]
[19 26]
[20 25]
[31 131]
[32 130]
[33 129]
[34 125]
[35 124]
[36 123]
[37 122]
[38 117]
[39 116]
[40 115]
[41 112]
[42 111]
[43 110]
[44 109]
[45 106]
[46 105]
[47 104]
[48 99]
[49 98]
[50 97]
[51 95]
[52 94]
[53 92]
[54 91]
[55 66]
[56 65]
[57 64]
[58 63]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
