%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:46 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGUAAACUAAGAGUAGAGUGCUUAGUUGAACAGGGCCCUGAAGCGCGUACACACCGCCCGUCxxxxxxxxxxUAUCUCCCUAAUUGAAAACAAAAUACUCAAAUGGGCCUGUCCUUGUAGUAUAAACUAAUACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[80.80282593 449.18795776]
[80.80282593 434.18795776]
[80.80282593 419.18795776]
[80.80282593 404.18795776]
[80.80282593 389.18795776]
[80.80282593 374.18795776]
[80.80282593 359.18795776]
[80.80282593 344.18795776]
[80.80282593 329.18795776]
[80.80282593 314.18795776]
[78.78049469 299.32489014]
[74.77275085 284.87020874]
[60.75603867 279.52868652]
[48.14491272 287.65023804]
[35.53378296 295.77178955]
[22.92265511 303.89331055]
[10.31152630 312.01486206]
[-2.29960179 320.13641357]
[-14.91072941 328.25796509]
[-14.79331303 343.68487549]
[-23.05426407 356.71408081]
[-37.05754471 363.18798828]
[-52.33475494 361.04083252]
[-64.01100159 350.95773315]
[-68.36042786 336.15618896]
[-63.99514771 321.35928345]
[-52.30811310 311.28869629]
[-37.02861023 309.15789795]
[-23.03227234 315.64682007]
[-10.42114353 307.52526855]
[2.18998432 299.40374756]
[14.80111217 291.28219604]
[27.41224098 283.16064453]
[40.02336884 275.03912354]
[52.63449860 266.91757202]
[48.24887848 244.42959595]
[58.68715286 225.32672119]
[77.86022186 217.72209167]
[80.03706360 202.88087463]
[82.21389771 188.03967285]
[84.39073181 173.19847107]
[86.56757355 158.35726929]
[80.75919342 144.64187622]
[90.41729736 132.11064148]
[92.59413910 117.26943970]
[82.10948181 127.99660492]
[67.11801147 127.49096680]
[57.37998199 116.08171844]
[59.23538971 101.19691467]
[71.47625732 92.52736664]
[86.13275909 95.71716309]
[76.15003204 84.52140045]
[66.16730499 73.32563019]
[58.06525803 68.96574402]
[56.09632874 61.79155350]
[46.34867859 50.39053345]
[30.71538162 45.43754578]
[27.45287323 29.36620331]
[39.91733932 18.70932388]
[55.28641129 24.42979240]
[57.74969864 40.64288330]
[67.49735260 52.04390335]
[77.36307526 63.34290695]
[87.34580231 74.53867340]
[97.32852936 85.73443604]
[104.81391907 85.26662445]
[119.78471375 84.33099365]
[127.27011108 83.86318207]
[135.78120422 71.51161194]
[122.10226440 77.66682434]
[107.30831909 80.14458466]
[92.37031555 78.78227234]
[78.26863098 73.66928864]
[65.92877960 65.14121246]
[56.16064072 53.75774002]
[49.60529709 40.26598740]
[46.69298172 25.55142021]
[47.61483765 10.57977486]
[52.31035995 -3.66635036]
[60.47137451 -16.25197029]
[71.56227112 -26.35107803]
[84.85514832 -33.30086517]
[99.47756958 -36.64520645]
[114.46987152 -36.16461182]
[128.84808350 -31.89062309]
[141.66856384 -24.10374641]
[152.08987427 -13.31504059]
[159.42807007 -0.23257776]
[163.20153809 14.28503036]
[163.16262817 29.28497887]
[159.31387329 43.78281021]
[151.90498352 56.83089447]
[164.99813843 49.51179123]
[178.09129333 42.19268417]
[191.18444824 34.87357712]
[190.71656799 19.57522392]
[197.42221069 5.81684637]
[209.76046753 -3.23997808]
[224.89608765 -5.51405764]
[239.35102844 -0.48282623]
[249.80364990 10.69757652]
[253.85200500 25.45797539]
[250.56582642 40.40653992]
[240.70024109 52.10820007]
[226.52229309 57.87399673]
[211.28996277 56.37899399]
[198.50355530 47.96673203]
[185.41040039 55.28583908]
[172.31724548 62.60494614]
[159.22409058 69.92404938]
[148.13276672 80.02269745]
[139.62168884 92.37427521]
[107.43534088 119.44628143]
[105.25850677 134.28749084]
[110.91117859 149.06442261]
[101.40877533 160.53410339]
[99.23194122 175.37530518]
[97.05510712 190.21650696]
[94.87826538 205.05772400]
[92.70143127 219.89892578]
[103.36788940 226.34931946]
[110.68593597 236.87034607]
[113.15550995 249.80319214]
[110.07007599 262.96359253]
[101.68643188 274.01058960]
[89.22743988 280.86245728]
[93.23518372 295.31716919]
[98.13433838 281.13977051]
[108.29341888 270.10379028]
[122.01764679 264.05023193]
[137.01751709 263.98898315]
[150.79072571 269.93026733]
[161.03958130 280.88293457]
[166.05433655 295.01983643]
[164.99844360 309.98263550]
[158.04803467 323.27517700]
[146.36257935 332.67999268]
[131.89149475 336.62811279]
[117.04887390 334.46093750]
[104.31080627 326.53997803]
[95.80282593 314.18795776]
[95.80282593 329.18795776]
[95.80282593 344.18795776]
[95.80282593 359.18795776]
[95.80282593 374.18795776]
[95.80282593 389.18795776]
[95.80282593 404.18795776]
[95.80282593 419.18795776]
[95.80282593 434.18795776]
[95.80282593 449.18795776]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[11 127]
[12 126]
[13 35]
[14 34]
[15 33]
[16 32]
[17 31]
[18 30]
[19 29]
[38 120]
[39 119]
[40 118]
[41 117]
[42 116]
[44 114]
[45 113]
[51 65]
[52 64]
[53 63]
[55 62]
[56 61]
[68 112]
[69 111]
[92 110]
[93 109]
[94 108]
[95 107]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
