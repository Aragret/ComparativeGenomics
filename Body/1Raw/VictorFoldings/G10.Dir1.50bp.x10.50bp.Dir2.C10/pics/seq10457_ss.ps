%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:14 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGUCACUCACCCACCACAUUAACAACAUAAAACCCUCAUUCACACGAGAAAACACCCUCAUGUUCAxxxxxxxxxxCUAUUCUCUGUUCUUUCAUGGGGAAGCAGAUUUGGGUACCACCCAAGUAUUGACUCACCCAUCACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[92.50000000 249.17636108]
[92.50000000 234.17636108]
[92.50000000 219.17636108]
[92.50000000 204.17636108]
[92.50000000 189.17636108]
[92.50000000 174.17636108]
[92.50000000 159.17636108]
[92.50000000 144.17636108]
[92.50000000 129.17636108]
[92.50000000 114.17635345]
[87.55580902 100.01461029]
[78.22001648 88.27395630]
[60.95146942 81.95157623]
[58.98206711 64.53627014]
[49.41614151 52.98234940]
[33.92457962 51.35470200]
[24.38796043 39.50111389]
[26.03514290 24.74230576]
[16.46921730 13.18838692]
[6.90329075 1.63446748]
[-2.66263580 -9.91945171]
[-16.17271423 -5.32482195]
[-30.40961456 -5.62585402]
[-43.65762329 -10.76580906]
[-54.32719803 -20.10603333]
[-61.14567566 -32.50524521]
[-63.30906677 -46.45896149]
[-60.57680511 -60.28202820]
[-53.29831314 -72.31215668]
[-62.63409805 -84.05281067]
[-71.96988678 -95.79347229]
[-81.30567169 -107.53413391]
[-79.21018219 -92.68122101]
[-81.12740326 -77.80425262]
[-86.92013550 -63.96791458]
[-96.17380524 -52.16242218]
[-108.22616577 -43.23266220]
[-122.21466827 -37.81769562]
[-137.13819885 -36.30506134]
[-151.92874146 -38.80300903]
[-165.52780151 -45.13277054]
[-176.96211243 -54.84134674]
[-185.41337585 -67.23392487]
[-190.27677917 -81.42362213]
[-191.20423889 -96.39492035]
[-188.12939453 -111.07638550]
[-181.27229309 -124.41730499]
[-171.12368774 -135.46293640]
[-158.40986633 -143.42276001]
[-144.04072571 -147.72712708]
[-129.04460144 -148.06799316]
[-114.49471283 -144.42095947]
[-101.43235016 -137.04704285]
[-90.79016876 -126.47112274]
[-94.60083771 -140.97900391]
[-98.41150665 -155.48689270]
[-102.22217560 -169.99478149]
[-106.03284454 -184.50267029]
[-111.94378662 -198.28892517]
[-119.82544708 -211.05134583]
[-127.70709991 -223.81378174]
[-135.58876038 -236.57620239]
[-151.02476501 -239.96810913]
[-159.47073364 -253.32630920]
[-155.91580200 -268.72558594]
[-142.46907043 -277.02984619]
[-127.10823059 -273.31231689]
[-118.94659424 -259.77853394]
[-122.82632446 -244.45785522]
[-114.94467163 -231.69543457]
[-107.06301880 -218.93299866]
[-99.18136597 -206.17057800]
[-98.99154663 -221.16937256]
[-93.48577118 -235.12237549]
[-83.38230133 -246.20930481]
[-69.99922943 -252.98377991]
[-55.08248520 -254.56198120]
[-40.57808304 -250.73806763]
[-28.37825012 -242.01086426]
[-20.07455444 -229.51892090]
[-16.75028038 -214.89192200]
[-18.83911133 -200.03807068]
[-26.06853867 -186.89518738]
[-37.49542618 -177.17787170]
[-51.62903595 -172.15382385]
[-66.62551880 -172.47846985]
[-80.52846527 -178.10946655]
[-91.52495575 -188.31333923]
[-87.71428680 -173.80545044]
[-83.90361786 -159.29756165]
[-80.09294891 -144.78967285]
[-76.28227997 -130.28178406]
[-69.56501007 -116.86991882]
[-60.22922516 -105.12925720]
[-50.89344025 -93.38859558]
[-41.55765152 -81.64794159]
[-26.41795158 -86.24588013]
[-10.63358116 -84.68897247]
[3.38389301 -77.18547821]
[13.48151302 -64.85443115]
[18.09559441 -49.55885696]
[16.49381638 -33.62432861]
[8.89128399 -19.48537827]
[18.45721054 -7.93145895]
[28.02313614 3.62246060]
[37.58906174 15.17638016]
[52.39600372 16.31219482]
[62.26180267 27.89324188]
[60.97006226 43.41642380]
[70.53598785 54.97034073]
[82.57782745 56.42905426]
[90.63950348 66.02306366]
[89.96067810 78.93816376]
[99.29646301 90.67882538]
[110.74956512 78.77372742]
[132.44003296 79.75608826]
[147.27563477 81.97078705]
[162.11123657 84.18548584]
[176.94683838 86.40018463]
[191.78244019 88.61488342]
[206.61805725 90.82958221]
[223.17631531 87.18810272]
[231.25926208 102.09119415]
[219.17616272 113.98384857]
[204.40335083 105.66518402]
[189.56774902 103.45048523]
[174.73214722 101.23578644]
[159.89654541 99.02108765]
[145.06094360 96.80638885]
[130.22534180 94.59169006]
[124.54400635 99.48786163]
[136.50169373 108.54400635]
[148.45936584 117.60015106]
[160.41705322 126.65630341]
[172.37474060 135.71244812]
[186.59695435 140.47987366]
[196.49490356 151.75067139]
[199.38540649 166.46952820]
[194.48490906 180.64645386]
[183.12185669 190.43833923]
[168.37654114 193.19078064]
[154.24617004 188.15763855]
[144.56120300 176.70332336]
[141.94686890 161.93515015]
[134.75547791 148.77140808]
[127.56410217 135.60766602]
[120.37271881 122.44393158]
[113.18133545 109.28018951]
[107.50000000 114.17635345]
[107.50000000 129.17636108]
[107.50000000 144.17636108]
[107.50000000 159.17636108]
[107.50000000 174.17636108]
[107.50000000 189.17636108]
[107.50000000 204.17636108]
[107.50000000 219.17636108]
[107.50000000 234.17636108]
[107.50000000 249.17636108]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 158]
[2 157]
[3 156]
[4 155]
[5 154]
[6 153]
[7 152]
[8 151]
[9 150]
[10 149]
[11 114]
[12 113]
[14 110]
[15 109]
[18 106]
[19 105]
[20 104]
[21 103]
[29 96]
[30 95]
[31 94]
[32 93]
[54 92]
[55 91]
[56 90]
[57 89]
[58 88]
[59 72]
[60 71]
[61 70]
[62 69]
[116 130]
[117 129]
[118 128]
[119 127]
[120 126]
[121 125]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
