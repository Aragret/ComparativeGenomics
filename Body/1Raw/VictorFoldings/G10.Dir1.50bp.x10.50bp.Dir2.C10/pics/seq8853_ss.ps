%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:54 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGAGCCCUCCUAAUGACCUCCGGCCUAGCCAUGUGAUUUCACUUCCACUCCAUAACGCUCCUxxxxxxxxxxGUGCCUAUUGCCAUACUAGUCUUUGCCGCCUGCGAAGCAGCGGUGGGCCUAGCCCUACUACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[107.86093140 331.77676392]
[107.86093140 316.77676392]
[107.86093140 301.77676392]
[107.86093140 286.77676392]
[107.86093140 271.77676392]
[107.86093140 256.77676392]
[107.86093140 241.77676392]
[107.86093140 226.77676392]
[107.86093140 211.77676392]
[107.86093140 196.77676392]
[106.30335236 181.85784912]
[103.20502472 167.18132019]
[99.95420074 152.53782654]
[96.55122375 137.92892456]
[93.14824677 123.32003784]
[86.54236603 116.61475372]
[83.75843048 108.76711273]
[84.54531097 101.54984283]
[87.93721771 96.33352661]
[92.53252411 93.83554840]
[84.54261017 81.14061737]
[70.64349365 73.58249664]
[70.41246796 58.68968201]
[62.42255402 45.99475479]
[54.43264008 33.29982376]
[36.94886017 34.40138626]
[21.37672997 26.57143402]
[11.93032169 12.02894402]
[11.11539078 -5.20443916]
[19.06527901 -20.41639328]
[10.55418873 -32.76796722]
[2.04309821 -45.11953735]
[-14.74983406 -52.60133362]
[-15.53647423 -70.10507965]
[-24.30268097 -82.27691650]
[-33.06888962 -94.44875336]
[-47.41237640 -101.12519836]
[-48.57189178 -115.97460175]
[-57.33810043 -128.14643860]
[-66.10430908 -140.31828308]
[-78.18429565 -149.21063232]
[-92.41107178 -153.96444702]
[-106.63785553 -158.71826172]
[-122.58962250 -154.91389465]
[-133.66209412 -167.01069641]
[-128.46485901 -182.56449890]
[-112.34439087 -185.57489014]
[-101.88404083 -172.94503784]
[-87.65725708 -168.19122314]
[-73.43048096 -163.43740845]
[-82.90976715 -175.06251526]
[-89.98818970 -188.28733826]
[-94.40390778 -202.62265015]
[-95.99356079 -217.53819275]
[-94.69834900 -232.48216248]
[-90.56619263 -246.90177917]
[-83.74993896 -260.26361084]
[-74.50173950 -272.07339478]
[-63.16371155 -281.89422607]
[-50.15526581 -289.36285400]
[-35.95761490 -294.20297241]
[-21.09596443 -296.23556519]
[-6.12007713 -295.38537598]
[8.41605568 -291.68392944]
[21.97471046 -285.26809692]
[34.05432510 -276.37521362]
[44.20804214 -265.33428955]
[52.06026077 -252.55374146]
[57.32050705 -238.50633240]
[59.79418945 -223.71170044]
[59.38980484 -208.71716309]
[56.12231445 -194.07736206]
[50.11258316 -180.33389282]
[41.58292770 -167.99513245]
[30.84888268 -157.51753235]
[18.30751801 -149.28866577]
[4.42276907 -143.61294556]
[-10.29173756 -140.70033264]
[-25.29167938 -140.65856934]
[-40.02217484 -143.48919678]
[-53.93247223 -149.08448792]
[-45.16626358 -136.91264343]
[-36.40005493 -124.74081421]
[-22.68358612 -118.93497467]
[-20.89705276 -103.21496582]
[-12.13084507 -91.04312897]
[-3.36463761 -78.87129211]
[8.55829525 -76.60170746]
[15.95442486 -66.47667694]
[14.39467049 -53.63062668]
[22.90576172 -41.27905655]
[31.41685104 -28.92748260]
[43.89994431 -31.28800011]
[56.39000702 -28.72064209]
[67.00770569 -21.57535934]
[74.14165497 -10.89362621]
[76.69293213 1.74323249]
[74.24420929 14.44810677]
[67.12757111 25.30990791]
[75.11748505 38.00483704]
[83.10739899 50.69976807]
[96.43502045 57.34986496]
[97.23754120 73.15070343]
[105.22745514 85.84563446]
[118.16551208 93.43553925]
[133.14521790 94.21538544]
[148.12493896 94.99523163]
[163.10466003 95.77507782]
[178.08436584 96.55492401]
[186.88240051 93.86302185]
[193.36662292 97.51001740]
[208.32687378 98.60132599]
[223.28712463 99.69263458]
[239.52416992 94.81468201]
[248.70635986 109.06683350]
[237.55307007 121.83556366]
[222.19581604 114.65288544]
[207.23556519 113.56157684]
[192.27531433 112.47026825]
[177.30451965 111.53463745]
[162.32481384 110.75479126]
[147.34509277 109.97494507]
[132.36538696 109.19509888]
[117.38566589 108.41525269]
[107.75714111 119.91706085]
[111.16011810 134.52595520]
[114.56309509 149.13484192]
[119.58826447 156.84194946]
[117.88155365 164.08300781]
[120.97987366 178.75952148]
[127.71225739 165.35523987]
[140.16867065 156.99833679]
[155.12480164 155.85197449]
[168.70930481 162.21289062]
[177.40586853 174.43457031]
[178.96342468 189.35348511]
[172.97879028 203.10791016]
[161.00108337 212.13755798]
[146.13069153 214.10513306]
[132.21676636 208.50131226]
[122.86093140 196.77676392]
[122.86093140 211.77676392]
[122.86093140 226.77676392]
[122.86093140 241.77676392]
[122.86093140 256.77676392]
[122.86093140 271.77676392]
[122.86093140 286.77676392]
[122.86093140 301.77676392]
[122.86093140 316.77676392]
[122.86093140 331.77676392]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[11 130]
[12 129]
[13 127]
[14 126]
[15 125]
[20 104]
[21 103]
[23 101]
[24 100]
[25 99]
[30 92]
[31 91]
[32 90]
[34 87]
[35 86]
[36 85]
[38 83]
[39 82]
[40 81]
[41 50]
[42 49]
[43 48]
[105 124]
[106 123]
[107 122]
[108 121]
[109 120]
[111 119]
[112 118]
[113 117]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
