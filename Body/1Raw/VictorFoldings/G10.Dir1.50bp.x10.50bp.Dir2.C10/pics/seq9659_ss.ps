%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:30 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGAUUGCCAUACUAGUCUUUGCCGCCUGCGAAGCAGCGGUGGGCCUAGCCCUACUAGUCUCAAUCUCCAxxxxxxxxxxACUCAGACCCAAACAUUAAUCAGUUCUUCAAAUAUCUACUCAUCUUCCUAAUUACCAUACUAAUCUUCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[95.03208160 233.04310608]
[94.74649811 218.04582214]
[94.46091461 203.04855347]
[94.17533875 188.05126953]
[93.88975525 173.05398560]
[93.60417175 158.05670166]
[93.31858826 143.05941772]
[93.03300476 128.06214905]
[92.74742126 113.06485748]
[82.09045410 102.50886536]
[67.09113312 102.36606598]
[52.09181595 102.22327423]
[37.09249496 102.08047485]
[22.09317589 101.93767548]
[15.35506725 111.79780579]
[4.79213238 117.10751343]
[-6.90084076 116.64241791]
[-16.80318832 110.63511658]
[-22.49789238 100.68798065]
[-37.48090363 99.97425079]
[-52.46391296 99.26052094]
[-67.44692230 98.54679108]
[-82.42993164 97.83306122]
[-97.41294098 97.11933899]
[-102.17465210 106.98039246]
[-111.25500488 114.20947266]
[-123.21012878 116.94106293]
[-135.81225586 114.09101868]
[-146.46458435 105.67139435]
[-161.38241577 107.23932648]
[-176.30024719 108.80725098]
[-191.21807861 110.37517548]
[-206.13589478 111.94310760]
[-214.38725281 115.96847534]
[-221.35227966 113.39609528]
[-236.29725647 114.67971802]
[-251.24223328 115.96334076]
[-266.50585938 123.34294128]
[-277.82241821 110.71870422]
[-268.82431030 96.34963989]
[-252.52586365 101.01837158]
[-237.58088684 99.73474121]
[-222.63591003 98.45111847]
[-207.70382690 97.02527618]
[-192.78599548 95.45735168]
[-177.86816406 93.88941956]
[-162.95034790 92.32149506]
[-148.03251648 90.75357056]
[-145.19374084 76.02463531]
[-158.46023560 69.02462769]
[-171.72673035 62.02462006]
[-184.99322510 55.02460861]
[-201.82350159 52.98058701]
[-204.51844788 36.24219894]
[-189.18023682 29.01892853]
[-177.99320984 41.75811386]
[-164.72671509 48.75812531]
[-151.46023560 55.75813675]
[-138.19374084 62.75814438]
[-110.55190277 62.31385040]
[-96.69921112 82.13632965]
[-81.71620178 82.85005188]
[-66.73319244 83.56378174]
[-51.75018311 84.27751160]
[-36.76717377 84.99124146]
[-21.78416252 85.70497131]
[-9.04922104 72.60023499]
[9.53938484 72.92514801]
[22.23597336 86.93835449]
[37.23529434 87.08115387]
[52.23461151 87.22395325]
[67.23393250 87.36674500]
[82.23325348 87.50954437]
[107.48624420 80.79135132]
[99.04911804 68.37435913]
[91.86971283 55.19016647]
[86.01718140 41.36574554]
[81.54787445 27.03423882]
[78.50483704 12.33366871]
[76.91738129 -2.59438443]
[76.80079651 -17.60615349]
[78.15619659 -32.55706024]
[80.97054291 -47.30312347]
[85.21671295 -61.70231628]
[90.85382843 -75.61596680]
[97.82758331 -88.91007996]
[106.07083130 -101.45662689]
[115.50418091 -113.13475800]
[126.03676605 -123.83201599]
[137.56716919 -133.44537354]
[149.98432922 -141.88224792]
[163.16867065 -149.06138611]
[176.99320984 -154.91365051]
[191.32479858 -159.38267517]
[206.02543640 -162.42541504]
[220.95352173 -164.01255798]
[235.96528625 -164.12884521]
[250.91616821 -162.77314758]
[265.66217041 -159.95851135]
[280.06127930 -155.71205139]
[293.97482300 -150.07466125]
[307.26879883 -143.10063171]
[319.81518555 -134.85713196]
[331.49313354 -125.42356110]
[342.19015503 -114.89075470]
[351.80328369 -103.36016083]
[360.23992920 -90.94283295]
[367.41879272 -77.75834656]
[373.27078247 -63.93369293]
[377.73950195 -49.60200882]
[380.78195190 -34.90131760]
[382.36880493 -19.97320175]
[382.48480225 -4.96142769]
[381.12881470 9.98942661]
[378.31387329 24.73537445]
[374.06713867 39.13439941]
[368.42944336 53.04782867]
[361.45516968 66.34165955]
[353.21142578 78.88787079]
[343.77758789 90.56562805]
[333.24459839 101.26246643]
[321.71380615 110.87535858]
[309.29629517 119.31173706]
[296.11166382 126.49034882]
[282.28689575 132.34205627]
[267.95513916 136.81050110]
[253.25437927 139.85266113]
[238.32623291 141.43922424]
[223.31445312 141.55490112]
[208.36361694 140.19860840]
[193.61773682 137.38337708]
[179.21879578 133.13633728]
[165.30548096 127.49839783]
[152.01177979 120.52383423]
[139.46574402 112.27983856]
[127.78816986 102.84579468]
[117.09154510 92.31256104]
[131.80737305 89.40667725]
[144.86999512 82.03321075]
[159.63084412 79.36531830]
[174.44807434 81.69973755]
[187.67361450 88.77681732]
[197.83641052 99.80938721]
[203.80607605 113.57032013]
[204.91860962 128.52900696]
[201.05027771 143.02162170]
[192.63133240 155.43618774]
[180.59820557 164.39184570]
[166.28932190 168.89248657]
[151.29621887 168.43751526]
[137.28656006 163.07752991]
[125.81861877 153.40870667]
[118.16793060 140.50648499]
[115.18540955 125.80371857]
[107.74470520 112.77928162]
[108.03028870 127.77655792]
[108.31587219 142.77383423]
[108.60145569 157.77111816]
[108.88703156 172.76840210]
[109.17261505 187.76568604]
[109.45819855 202.76296997]
[109.74378204 217.76025391]
[110.02936554 232.75752258]
[112.58644867 251.96980286]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 163]
[2 162]
[3 161]
[4 160]
[5 159]
[6 158]
[7 157]
[8 156]
[9 155]
[10 73]
[11 72]
[12 71]
[13 70]
[14 69]
[19 66]
[20 65]
[21 64]
[22 63]
[23 62]
[24 61]
[29 48]
[30 47]
[31 46]
[32 45]
[33 44]
[35 43]
[36 42]
[37 41]
[49 59]
[50 58]
[51 57]
[52 56]
[74 137]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
