%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:18 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGAAAACCCCCUGCCAUAACCCAAUACCAAACGCCCCUCUUCGUCUGAUCCGUCCUAAUCACxxxxxxxxxxUGCAGCCCUAGCAACACUCCACCUCCUAUUCUUGCACGAAACGGGAUCAAACAACCCCCUCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[-36.30539322 442.91802979]
[-43.48789978 456.08660889]
[-43.30327225 471.90673828]
[-56.19013977 479.37518311]
[-63.37265015 492.54376221]
[-70.55516052 505.71234131]
[-77.73767090 518.88092041]
[-84.92017365 532.04949951]
[-92.10268402 545.21807861]
[-88.97321320 560.95294189]
[-99.43370056 573.11676025]
[-115.45975494 572.37847900]
[-124.75756073 559.30444336]
[-120.19464111 543.92395020]
[-105.27127075 538.03558350]
[-98.08876038 524.86700439]
[-90.90625000 511.69842529]
[-83.72373962 498.52984619]
[-76.54122925 485.36126709]
[-69.35872650 472.19268799]
[-70.05709076 457.31445312]
[-56.65648270 448.90408325]
[-49.47397614 435.73550415]
[-62.82511902 425.89700317]
[-74.63533783 414.25115967]
[-84.66208649 401.03646851]
[-92.69937134 386.52355957]
[-98.58193970 371.00985718]
[-102.18868256 354.81329346]
[-103.44515991 338.26589966]
[-102.32511902 321.70697021]
[-98.85102081 305.47610474]
[-93.09362793 289.90625000]
[-85.17054749 275.31686401]
[-75.24379730 262.00735474]
[-63.51656342 250.25096130]
[-50.22897339 240.28910828]
[-35.65320969 232.32647705]
[-20.08793831 226.52677917]
[-3.85217333 223.00944519]
[12.72124958 221.84706116]
[29.29250145 223.06396484]
[45.52172470 226.63569641]
[50.71714020 212.56417847]
[55.91255569 198.49264526]
[49.46645737 185.11418152]
[54.53489304 170.76965332]
[68.61116791 164.09910583]
[73.80658722 150.02758789]
[79.00199890 135.95605469]
[84.19741821 121.88454437]
[89.39282990 107.81302643]
[65.83583069 79.68001556]
[61.82809448 65.22532654]
[57.82035065 50.77063751]
[42.78213120 51.58669662]
[27.92013931 49.15045547]
[13.92949867 43.57586288]
[1.46457911 35.12365341]
[-8.89161396 24.18915176]
[-16.65470314 11.28378391]
[-21.46159172 -2.98884249]
[-23.08745575 -17.96117210]
[-21.45625114 -32.93291855]
[-16.64426994 -47.20383072]
[-8.87657833 -60.10643005]
[1.48351419 -71.03723907]
[13.95144844 -79.48500061]
[27.94407463 -85.05459595]
[42.80693436 -87.48553467]
[57.84486389 -86.66411591]
[72.35451508 -82.62874603]
[85.65724182 -75.56818390]
[97.13084412 -65.81265259]
[106.23869324 -53.81843948]
[112.55479431 -40.14653778]
[115.78373718 -25.43640327]
[115.77448273 -10.37605762]
[112.52748108 4.33009863]
[106.19458771 17.99423218]
[97.07201385 29.97724724]
[85.58642578 39.71867752]
[72.27503967 46.76289749]
[76.28278351 61.21758652]
[80.29051971 75.67227173]
[87.08599854 78.84584045]
[88.92282867 63.95872879]
[103.64895630 61.10547256]
[110.91302490 74.22924042]
[100.67694855 85.19297028]
[107.47241974 88.36653137]
[121.12866211 82.16112518]
[134.78491211 75.95571899]
[148.44114685 69.75031281]
[146.97145081 54.67985153]
[150.47718811 39.94932175]
[158.57807922 27.15657806]
[170.39540100 17.68928337]
[184.64729309 12.57437515]
[199.78782654 12.36668396]
[214.17465210 17.08873749]
[226.24722290 26.22832298]
[234.69596863 38.79404449]
[238.60444641 53.42287064]
[237.54869080 68.52796936]
[231.64321899 82.47086334]
[221.52862549 93.73912048]
[208.30204773 101.11045074]
[193.39822388 103.78526306]
[178.43379211 101.47341919]
[165.03199768 94.42568970]
[154.64656067 83.40655518]
[140.99031067 89.61196136]
[127.33406830 95.81736755]
[113.67783356 102.02277374]
[103.46434784 113.00843811]
[98.26893616 127.07995605]
[93.07351685 141.15147400]
[87.87810516 155.22299194]
[82.68268585 169.29450989]
[89.04679871 183.51196289]
[83.57746124 197.70848083]
[69.98407745 203.68806458]
[64.78865814 217.75958252]
[59.59324265 231.83110046]
[71.64024353 238.06466675]
[82.87670135 245.66079712]
[93.14923096 254.51550293]
[102.31764221 264.50759888]
[110.25685883 275.50045776]
[116.85860443 287.34368896]
[122.03289795 299.87536621]
[125.70926666 312.92422485]
[127.83772278 326.31188965]
[128.38941956 339.85540771]
[127.35708618 353.36972046]
[124.75504303 366.67022705]
[120.61910248 379.57528687]
[115.00599670 391.90856934]
[107.99263763 403.50173950]
[99.67505646 414.19653320]
[90.16709137 423.84695435]
[79.59881592 432.32131958]
[68.11477661 439.50405884]
[55.87199783 445.29727173]
[43.03785706 449.62194824]
[29.78778076 452.41931152]
[16.30285072 453.65136719]
[2.76732516 453.30148315]
[-10.63386917 451.37472534]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 23]
[2 22]
[4 20]
[5 19]
[6 18]
[7 17]
[8 16]
[9 15]
[43 125]
[44 124]
[45 123]
[48 120]
[49 119]
[50 118]
[51 117]
[52 116]
[53 85]
[54 84]
[55 83]
[91 115]
[92 114]
[93 113]
[94 112]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
