%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:14 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCCUCAAUUACCCACAUAGGAUGAAUAAUAGCAGUUCUACCGUACAACCCUAACAUAACCAUxxxxxxxxxxAAACUCACAGCCCUCGCUGUCACUUUCCUAGGACUUCUAACAGCCCUAGACCUCAACUACCCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[80.68083191 265.41778564]
[80.68083191 250.41778564]
[80.68083191 235.41778564]
[80.68083191 220.41778564]
[80.68083191 205.41778564]
[80.68083191 190.41778564]
[80.68083191 175.41778564]
[80.68083191 160.41778564]
[80.68083191 145.41778564]
[80.68083191 130.41778564]
[66.92800140 124.42948914]
[55.94720078 134.64819336]
[44.96639633 144.86689758]
[49.94955826 159.25746155]
[48.64226913 174.43016052]
[41.27102280 187.75624084]
[29.11293602 196.92689514]
[14.27447033 200.35324097]
[-0.67352128 197.44163513]
[-13.14120865 188.69654846]
[-20.96849060 175.63310242]
[-22.79924202 160.51461792]
[-18.31627464 145.96049500]
[-8.29628849 134.49227905]
[5.52469158 128.09693909]
[20.75209808 127.88249207]
[34.74769211 133.88609314]
[45.72849274 123.66738892]
[56.70929337 113.44868469]
[67.02530670 93.28979492]
[83.23535156 85.80130005]
[96.31683350 90.39348602]
[92.36022186 75.92472076]
[88.40361023 61.45595551]
[85.09910583 58.42611694]
[83.16410065 54.85129929]
[82.59950256 51.24187088]
[83.23615265 48.05378342]
[84.76852417 45.63657761]
[82.01227570 30.89198303]
[64.94659424 16.30730820]
[69.15529633 -5.08488035]
[61.78905487 -18.15157509]
[54.42281342 -31.21826935]
[47.05657578 -44.28496552]
[32.94720840 -39.09633255]
[18.18820953 -36.23833084]
[3.16187835 -35.78498459]
[-11.74256992 -37.74803925]
[-26.13907433 -42.07664871]
[-39.65473175 -48.65868378]
[-51.93944931 -57.32366180]
[-62.67502975 -67.84713745]
[-71.58338928 -79.95652771]
[-78.43378448 -93.33816528]
[-83.04877472 -107.64543915]
[-85.30881500 -122.50775146]
[-85.15537262 -137.54013062]
[-82.59241486 -152.35322571]
[-77.68633270 -166.56330872]
[-70.56420135 -179.80232239]
[-61.41050720 -191.72732544]
[-50.46234894 -202.02946472]
[-38.00330734 -210.44186401]
[-24.35610962 -216.74664307]
[-9.87424469 -220.78047180]
[5.06717062 -222.43887329]
[20.08111763 -221.67887878]
[34.77869797 -218.52020264]
[48.77920914 -213.04463196]
[61.72000885 -205.39401245]
[73.26589203 -195.76651001]
[83.11779785 -184.41151428]
[91.02053070 -171.62312317]
[96.76940155 -157.73258972]
[100.21549988 -143.09973145]
[101.26955414 -128.10356140]
[99.90426636 -113.13252258]
[96.15499878 -98.57438660]
[90.11887360 -84.80625916]
[81.95223236 -72.18476868]
[71.86662292 -61.03682709]
[60.12327194 -51.65120316]
[67.48950958 -38.58451080]
[74.85575104 -25.51781464]
[82.22199249 -12.45111942]
[87.87188721 -12.56517696]
[93.35274506 -11.18871784]
[103.45817566 -22.27385139]
[113.56361389 -33.35898590]
[123.66904449 -44.44411850]
[133.77447510 -55.52925491]
[136.75233459 -71.65576935]
[152.29560852 -76.88438416]
[164.41473389 -65.83634949]
[160.64257812 -49.87693405]
[144.85961914 -45.42381668]
[134.75418091 -34.33868408]
[124.64874268 -23.25355148]
[114.54331207 -12.16841698]
[104.43787384 -1.08328342]
[107.17579651 9.34142971]
[104.45423126 19.99142075]
[96.75687408 28.13574028]
[99.51311493 42.88033676]
[102.87237549 57.49934387]
[106.82898712 71.96810913]
[110.78559875 86.43688202]
[121.76640320 96.65558624]
[136.48191833 99.56305695]
[151.19744873 102.47052765]
[165.91296387 105.37800598]
[180.62849426 108.28547668]
[189.74954224 96.04746246]
[203.28118896 88.98648071]
[218.53669739 88.50449371]
[232.48707581 94.69721222]
[242.36247253 106.33505249]
[246.20211792 121.10731506]
[243.24363708 136.08096313]
[234.07446289 148.28297424]
[220.51512146 155.29060364]
[205.25782776 155.71250916]
[191.33193970 149.46492004]
[181.50245667 137.78826904]
[177.72102356 123.00099945]
[163.00549316 120.09352875]
[148.28997803 117.18605042]
[133.57444763 114.27857971]
[118.85892487 111.37110901]
[113.06440735 116.13277435]
[124.58457184 125.73931885]
[136.10473633 135.34587097]
[150.33815002 140.07980347]
[158.03515625 152.95443726]
[155.46716309 167.73298645]
[143.87817383 177.25637817]
[128.88214111 176.91127014]
[117.74349976 166.86483765]
[115.85812378 151.98359680]
[108.66674042 138.81985474]
[101.47535706 125.65611267]
[95.68083191 130.41778564]
[95.68083191 145.41778564]
[95.68083191 160.41778564]
[95.68083191 175.41778564]
[95.68083191 190.41778564]
[95.68083191 205.41778564]
[95.68083191 220.41778564]
[95.68083191 235.41778564]
[95.68083191 250.41778564]
[95.68083191 265.41778564]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 152]
[2 151]
[3 150]
[4 149]
[5 148]
[6 147]
[7 146]
[8 145]
[9 144]
[10 143]
[11 29]
[12 28]
[13 27]
[32 108]
[33 107]
[34 106]
[39 105]
[40 104]
[42 86]
[43 85]
[44 84]
[45 83]
[88 101]
[89 100]
[90 99]
[91 98]
[92 97]
[109 130]
[110 129]
[111 128]
[112 127]
[113 126]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
