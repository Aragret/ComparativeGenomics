%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:28 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGAACACAUAGCCUACCCCUUCCUUGUACUAUCCCUAUGAGGCAUAAUUAUAACAAGCUCCAUxxxxxxxxxxCAUCCUCGCCUUAGCAUGAUUUAUCCUACACUCCAACUCAUGAGACCCACAACAAAUAGCCCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[92.50000000 258.46496582]
[92.50000000 243.46496582]
[92.50000000 228.46496582]
[92.50000000 213.46496582]
[92.50000000 198.46496582]
[92.50000000 183.46496582]
[92.50000000 168.46496582]
[92.50000000 153.46496582]
[92.50000000 138.46496582]
[92.50000000 123.46496582]
[86.46878052 119.00688934]
[77.55244446 131.06918335]
[65.49028778 122.15266418]
[74.40634918 110.09074402]
[68.37513733 105.63266754]
[54.03507614 110.03296661]
[39.69501495 114.43326569]
[25.35495377 118.83356476]
[11.01489162 123.23386383]
[11.72395992 138.29866028]
[8.66348362 153.06634521]
[2.02584553 166.60859680]
[-7.77170563 178.07414246]
[-20.11328888 186.74224854]
[-34.22309875 192.06803894]
[-49.21418762 193.71672058]
[-64.14419556 191.58467102]
[-78.07460785 185.80587769]
[-90.12976074 176.74363708]
[-99.55184174 164.96760559]
[-105.74858093 151.21801758]
[-108.33044434 136.35917664]
[-107.13512421 121.32514954]
[-102.23777771 107.06097412]
[-93.94623566 94.46331024]
[-82.78173065 84.32405090]
[-69.44606018 77.28056335]
[-54.77751541 73.77561188]
[-39.69818115 74.02951050]
[-25.15595055 78.02631378]
[-12.06496525 85.51476288]
[-1.24813247 96.02413940]
[6.61459160 108.89380646]
[20.95465279 104.49350739]
[35.29471588 100.09320831]
[49.63477707 95.69290161]
[63.97483826 91.29260254]
[71.20654297 78.15097046]
[67.24993134 63.68220520]
[63.29331970 49.21343613]
[59.33670807 34.74467087]
[44.38790894 36.33512115]
[29.37757111 35.50687790]
[14.69450378 32.28140259]
[0.71903151 26.74224091]
[-12.18684769 19.03286552]
[-23.68883896 9.35297203]
[-33.48901749 -2.04670858]
[-41.33352661 -14.87089634]
[-47.01918411 -28.78741455]
[-50.39871216 -43.43579102]
[-51.38457489 -58.43659973]
[-49.95123291 -73.40128326]
[-46.13581848 -87.94221497]
[-40.03715515 -101.68276215]
[-31.81321716 -114.26699829]
[-21.67702103 -125.36896515]
[-9.89111900 -134.70109558]
[3.23920417 -142.02166748]
[17.37384224 -147.14106750]
[32.14667511 -149.92666626]
[47.17504883 -150.30633545]
[62.06969452 -148.27023315]
[76.44480133 -143.87109375]
[89.92802429 -137.22286987]
[102.17011261 -128.49775696]
[112.85396576 -117.92178345]
[121.70285034 -105.76885986]
[128.48756409 -92.35379791]
[133.03234863 -78.02407074]
[135.21949768 -63.15085602]
[134.99234009 -48.11940384]
[132.35679626 -33.31906509]
[127.38109589 -19.13320351]
[120.19414520 -5.92926884]
[110.98209381 5.95072556]
[99.98355865 16.19905853]
[87.48342133 24.55027580]
[73.80547333 30.78805923]
[77.76208496 45.25682831]
[81.71869659 59.72559357]
[85.67530823 74.19435883]
[97.33649445 72.90505981]
[107.62538147 76.25830841]
[114.92509460 82.96702576]
[118.39678955 91.28292847]
[133.04951477 88.07393646]
[147.70223999 84.86493683]
[162.35496521 81.65593719]
[177.00769043 78.44694519]
[188.83309937 67.93646240]
[202.92097473 72.77184296]
[217.57369995 69.56285095]
[221.05073547 54.70105362]
[230.63841248 42.82505798]
[244.43307495 36.29285049]
[259.69580078 36.40140533]
[273.39617920 43.12916946]
[282.81396484 55.14033890]
[286.07925415 70.05008698]
[282.54370117 84.89807892]
[272.90933228 96.73622894]
[259.08905029 103.21405792]
[243.82687378 103.04540253]
[230.15310669 96.26374054]
[220.78269958 84.21557617]
[206.12997437 87.42456818]
[195.35263062 97.70552826]
[180.21669006 93.09967041]
[165.56396484 96.30866241]
[150.91123962 99.51766205]
[136.25851440 102.72666168]
[121.60578918 105.93565369]
[136.00323486 110.14438629]
[150.40068054 114.35311890]
[165.06704712 111.20700836]
[179.96510315 112.95286560]
[193.50671387 119.40456390]
[204.24838257 129.87437439]
[211.04501343 143.24620056]
[213.17210388 158.09460449]
[210.40292358 172.83677673]
[203.03262329 185.90119934]
[191.84692383 195.89518738]
[178.03817749 201.75340271]
[163.07841492 202.85136414]
[148.56233215 199.07200623]
[136.03735352 190.81823730]
[126.83862305 178.96989441]
[121.94672394 164.78999329]
[121.88276672 149.79244995]
[114.69138336 136.62870789]
[107.50000000 123.46496582]
[107.50000000 138.46496582]
[107.50000000 153.46496582]
[107.50000000 168.46496582]
[107.50000000 183.46496582]
[107.50000000 198.46496582]
[107.50000000 213.46496582]
[107.50000000 228.46496582]
[107.50000000 243.46496582]
[107.50000000 258.46496582]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 152]
[2 151]
[3 150]
[4 149]
[5 148]
[6 147]
[7 146]
[8 145]
[9 144]
[10 143]
[15 47]
[16 46]
[17 45]
[18 44]
[19 43]
[48 92]
[49 91]
[50 90]
[51 89]
[96 123]
[97 122]
[98 121]
[99 120]
[100 119]
[102 117]
[103 116]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
