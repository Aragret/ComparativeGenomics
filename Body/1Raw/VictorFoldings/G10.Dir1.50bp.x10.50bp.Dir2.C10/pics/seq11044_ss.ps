%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:08 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGAGCCUAGCAUUAGCAGGAAUACCUUUCCUCACAGGUUUCUACUCCAAAGACCACAUCAUCxxxxxxxxxxAAUAAAAUCCCCACUAUGCACAUUUUAUUUCUCCAACAUACUCGGAUUCUACCCUAGCAUCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[97.62561035 223.26570129]
[97.00163269 208.27868652]
[96.37765503 193.29167175]
[95.75367737 178.30465698]
[95.12969971 163.31764221]
[94.50572205 148.33062744]
[93.88174438 133.34361267]
[93.25776672 118.35659027]
[81.27093506 109.33905792]
[66.69823456 112.89382172]
[52.12553406 116.44858551]
[37.55282974 120.00334930]
[23.23023224 124.46015930]
[9.21351910 129.80168152]
[-4.80319405 135.14318848]
[-10.98167992 156.44429016]
[-35.41782761 164.80581665]
[-46.71683121 174.67153931]
[-51.50692749 190.35551453]
[-67.54346466 193.78503418]
[-78.32942200 181.43209839]
[-72.76914215 166.00434875]
[-56.58255386 163.37254333]
[-45.28355026 153.50682068]
[-52.19054794 140.19166565]
[-66.76325226 143.74642944]
[-81.33595276 147.30117798]
[-95.90865326 150.85594177]
[-110.48136139 154.41070557]
[-120.00914764 167.31809998]
[-136.04576111 167.77258301]
[-146.28927612 155.42552185]
[-142.88175964 139.74851990]
[-128.43714905 132.76763916]
[-114.03611755 139.83801270]
[-99.46341705 136.28324890]
[-84.89071655 132.72848511]
[-70.31801605 129.17372131]
[-55.74530792 125.61895752]
[-45.54851913 114.11469269]
[-31.91628647 109.72988892]
[-18.98097038 112.68624115]
[-10.14470673 121.12647247]
[3.87200642 115.78496552]
[17.88871956 110.44345093]
[4.88774014 102.96183777]
[0.79941201 88.52973175]
[7.94490004 75.34102631]
[22.26732445 70.88365936]
[35.63507080 77.68830872]
[40.45854950 91.89162445]
[33.99806595 105.43064117]
[48.57077026 101.87588501]
[63.14347458 98.32112122]
[77.71617889 94.76635742]
[85.99320984 85.45975494]
[96.64027405 82.83727264]
[105.48624420 86.26773071]
[115.92605591 75.49692535]
[126.36587524 64.72611237]
[127.29251862 60.33261871]
[129.38856506 56.84297180]
[132.21337891 54.51867676]
[135.28646851 53.44623566]
[138.14978027 53.53971863]
[149.44879150 43.67399216]
[160.74778748 33.80826950]
[152.95246887 20.01245117]
[148.16630554 4.91239882]
[146.59222412 -10.84415150]
[148.29545593 -26.58178711]
[153.20079041 -41.62637329]
[161.09590149 -55.33391953]
[171.64051819 -67.11816406]
[184.38111877 -76.47562408]
[198.77043152 -83.00714111]
[214.19093323 -86.43485260]
[229.98133850 -86.61408234]
[245.46498108 -83.53938293]
[259.97882080 -77.34471130]
[272.90176392 -68.29758453]
[283.78060913 -78.62478638]
[294.65942383 -88.95199585]
[305.53823853 -99.27919769]
[316.41708374 -109.60640717]
[327.29589844 -119.93360901]
[338.17471313 -130.26081848]
[349.05355835 -140.58801270]
[343.92779541 -154.92839050]
[345.08441162 -170.11332703]
[352.32299805 -183.51193237]
[364.38946533 -192.80281067]
[379.19317627 -196.37628174]
[394.16934204 -193.61320496]
[406.72320557 -184.99230957]
[414.67977905 -172.00720215]
[416.66052246 -156.90765381]
[412.32223511 -142.30972290]
[402.41659546 -130.74261475]
[388.65979004 -124.21040344]
[373.43524170 -123.84481049]
[359.38073730 -129.70919800]
[348.50192261 -119.38198853]
[337.62310791 -109.05478668]
[326.74426270 -98.72757721]
[315.86544800 -88.40037537]
[304.98663330 -78.07316589]
[294.10778809 -67.74596405]
[283.22897339 -57.41875839]
[290.88259888 -45.45388794]
[296.18453979 -32.27254486]
[298.94909668 -18.33205223]
[299.07867432 -4.11638308]
[296.56716919 9.88063145]
[291.50027466 23.17246246]
[284.05255127 35.29678726]
[274.48132324 45.83158493]
[263.11795044 54.40980911]
[250.35620117 60.73218155]
[236.63873291 64.57764435]
[222.44163513 65.81108093]
[208.25796509 64.38803864]
[194.58064270 60.35638809]
[181.88523865 53.85464859]
[170.61351013 45.10727692]
[159.31451416 54.97299957]
[148.01550293 64.83872223]
[137.13667297 75.16592407]
[126.69686890 85.93673706]
[116.25705719 96.70754242]
[128.85166931 88.56041718]
[143.81242371 87.47599030]
[157.45028687 93.72167206]
[166.40245056 105.75739288]
[168.46150208 120.61540222]
[163.11970520 134.63200378]
[151.69424438 144.35099792]
[137.00241089 147.37588501]
[122.66690063 142.96076965]
[112.22256470 132.19435120]
[108.24478912 117.73261261]
[108.86876678 132.71963501]
[109.49274445 147.70664978]
[110.11672211 162.69366455]
[110.74069977 177.68067932]
[111.36466980 192.66769409]
[111.98864746 207.65470886]
[112.61262512 222.64172363]
[119.31262207 238.21563721]
[106.20208740 248.96507263]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 148]
[2 147]
[3 146]
[4 145]
[5 144]
[6 143]
[7 142]
[8 141]
[9 55]
[10 54]
[11 53]
[12 52]
[13 45]
[14 44]
[15 43]
[17 24]
[18 23]
[25 39]
[26 38]
[27 37]
[28 36]
[29 35]
[58 130]
[59 129]
[60 128]
[65 127]
[66 126]
[67 125]
[81 109]
[82 108]
[83 107]
[84 106]
[85 105]
[86 104]
[87 103]
[88 102]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
