%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:24 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCAUAAUAAUAACAAUUGAAUGUCUGCACAGCCACUUUCCACACAGACAUCAUAACAAAAAxxxxxxxxxxCACAUCUACAACGUUAUCGUCACAGCCCAUGCAUUUGUAAUAAUCUUCUUCAUAGUAAUACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[119.52410126 437.74618530]
[119.52410126 422.74618530]
[119.52410126 407.74618530]
[119.52410126 392.74618530]
[119.52410126 377.74618530]
[119.52410126 362.74618530]
[119.52410126 347.74618530]
[119.52410126 332.74618530]
[119.52410126 317.74618530]
[119.52410126 302.74618530]
[103.70182800 299.58111572]
[88.85839844 293.24041748]
[75.62401581 283.99090576]
[64.56105042 272.22305298]
[56.14013290 258.43426514]
[50.72015762 243.20806885]
[48.53295517 227.18936157]
[49.67340469 211.05700684]
[54.09529877 195.49517822]
[61.61322784 181.16427612]
[71.91034698 168.67291260]
[84.55173492 158.55210876]
[99.00273895 151.23265076]
[114.65161896 147.02680969]
[113.71599579 132.05601501]
[112.78036499 117.08522797]
[99.37717438 119.93070221]
[87.98651123 114.12700653]
[83.16860199 103.28227997]
[68.67300415 99.42512512]
[54.17741013 95.56796265]
[39.68181229 91.71080017]
[25.18621635 87.85364532]
[10.69062042 83.99648285]
[-3.80497599 80.13932800]
[-12.22130585 92.72678375]
[-24.27026749 101.89745331]
[-38.64487839 106.65657806]
[-53.78589249 106.48791504]
[-68.05092621 101.40975952]
[-79.89260864 91.97295380]
[-88.02644348 79.20113373]
[-91.57013702 64.47969055]
[-90.13929749 49.40549088]
[-83.88912964 35.61367798]
[-73.49760437 24.60028076]
[-60.09191513 17.55995178]
[-45.12621307 15.25637341]
[-30.22386551 17.93941879]
[-17.00136566 25.31805229]
[-6.89299297 36.59189606]
[-0.99522835 50.53804398]
[0.05218343 65.64373016]
[14.54778004 69.50088501]
[29.04337692 73.35804749]
[43.53897476 77.21520233]
[58.03456879 81.07236481]
[72.53016663 84.92952728]
[87.02576447 88.78668213]
[103.50852966 81.08013153]
[120.07190704 92.76388550]
[129.08943176 80.77705383]
[131.20262146 65.09761047]
[145.03691101 59.57838821]
[154.05444336 47.59155273]
[163.07196045 35.60472107]
[172.08949280 23.61788940]
[181.10702515 11.63105679]
[168.02345276 18.96726418]
[153.50709534 22.74558640]
[138.50712585 22.71897888]
[124.00427246 18.88918495]
[110.94680023 11.50661087]
[100.18845367 1.05395675]
[92.43265533 -11.78534222]
[88.18651581 -26.17180252]
[87.72764587 -41.16478348]
[91.08607483 -55.78398132]
[98.04219055 -69.07353973]
[108.14118958 -80.16454315]
[120.72275543 -88.33180237]
[134.96426392 -93.04132080]
[149.93453979 -93.98517609]
[164.65476990 -91.10163879]
[178.16249084 -84.57926941]
[189.57452393 -74.84450531]
[198.14468384 -62.53384781]
[203.31265259 -48.45222473]
[204.74049377 -33.52033615]
[202.33488464 -18.71449280]
[196.25500488 -5.00591660]
[207.34631348 -15.10456657]
[218.43763733 -25.20321655]
[222.90040588 -40.98344803]
[238.86212158 -44.74583817]
[249.90274048 -32.61996460]
[244.66461182 -17.07988358]
[228.53628540 -14.11190033]
[217.44496155 -4.01325083]
[206.35365295 6.08539867]
[209.73770142 12.77854156]
[223.12409973 6.01064825]
[229.89176941 19.39715767]
[216.50582886 26.16482544]
[219.88987732 32.85796738]
[234.59783936 29.91248512]
[246.54930115 18.68330383]
[262.16952515 23.67739296]
[265.38973999 39.75726318]
[252.89729309 50.38132095]
[237.54331970 44.62044907]
[222.83535767 47.56592941]
[202.38099670 37.47182465]
[193.09385681 20.64858627]
[184.07632446 32.63541794]
[175.05879211 44.62224960]
[166.04127502 56.60908508]
[157.02374268 68.59591675]
[155.55555725 83.41798401]
[141.07627869 89.79458618]
[132.05874634 101.78141785]
[127.75115967 116.14960480]
[128.68678284 131.12039185]
[129.62242126 146.09118652]
[143.44531250 147.80191040]
[156.74656677 151.92158508]
[169.10990906 158.31994629]
[180.14869690 166.79537964]
[189.51791382 177.08137512]
[196.92506409 188.85481262]
[202.13925171 201.74623108]
[204.99835205 215.35131836]
[205.41409302 229.24362183]
[203.37475586 242.98794556]
[198.94554138 256.15396118]
[192.26641846 268.32965088]
[183.54777527 279.13427734]
[173.06373596 288.23019409]
[161.14355469 295.33349609]
[148.16130066 300.22280884]
[134.52410889 302.74618530]
[134.52410889 317.74618530]
[134.52410889 332.74618530]
[134.52410889 347.74618530]
[134.52410889 362.74618530]
[134.52410889 377.74618530]
[134.52410889 392.74618530]
[134.52410889 407.74618530]
[134.52410889 422.74618530]
[134.52410889 437.74618530]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[24 124]
[25 123]
[26 122]
[29 59]
[30 58]
[31 57]
[32 56]
[33 55]
[34 54]
[35 53]
[61 121]
[62 120]
[64 118]
[65 117]
[66 116]
[67 115]
[68 114]
[91 100]
[92 99]
[93 98]
[105 112]
[106 111]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
