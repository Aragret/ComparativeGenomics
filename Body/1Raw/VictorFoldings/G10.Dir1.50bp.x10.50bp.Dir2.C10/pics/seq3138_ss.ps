%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:08 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGUAUUAUACCCACACCCACCCAAGAACAGGGUUUGUUAAGAUGGCAGAGCCCGGUAAUCGCxxxxxxxxxxACCGAAACCAAAUAAUUCAAGCACUGCUUAUUACAAUUUUACUGGGUCUCUAUUUUACCCCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[84.88833618 465.69958496]
[84.88833618 450.69958496]
[84.88833618 435.69958496]
[84.88833618 420.69958496]
[84.88833618 405.69958496]
[84.88833618 390.69958496]
[84.88833618 375.69958496]
[84.88833618 360.69958496]
[84.88833618 345.69958496]
[84.88833618 330.69958496]
[69.82995605 327.35870361]
[55.87963104 320.76177979]
[43.73200226 311.23388672]
[33.99269104 299.24615479]
[27.14812660 285.39239502]
[23.54123497 270.35974121]
[23.35427475 254.89463806]
[26.59961510 239.76560974]
[33.11897659 225.72518921]
[42.59115219 213.47250366]
[54.54781342 203.61837769]
[68.39669037 196.65490723]
[83.45088959 192.93093872]
[83.13883209 177.93418884]
[82.82677460 162.93743896]
[82.51471710 147.94067383]
[82.20266724 132.94392395]
[70.70085907 123.31539917]
[55.88310242 125.64650726]
[41.06534576 127.97760773]
[33.15298462 141.46569824]
[18.40452576 146.66348267]
[3.78373671 141.11671448]
[-3.80589223 127.44442749]
[-0.78077012 112.10224915]
[11.43073273 102.33427429]
[27.06271744 102.75266266]
[38.73424149 113.15985107]
[53.55199814 110.82874298]
[68.36975861 108.49764252]
[75.17187500 83.54561615]
[96.31620789 73.43480682]
[98.49304199 58.59360504]
[100.66988373 43.75239944]
[102.84671783 28.91119385]
[104.71433258 14.02791405]
[106.27191162 -0.89099818]
[107.82949066 -15.80991077]
[105.84455109 -19.83750153]
[105.33754730 -23.87656021]
[106.12346649 -27.44926453]
[107.87786102 -30.19080925]
[110.18743896 -31.88585854]
[112.97975922 -46.62366486]
[115.77208710 -61.36147308]
[118.56440735 -76.09927368]
[113.53132629 -91.09856415]
[123.50262451 -102.16303253]
[126.29495239 -116.90084076]
[111.14002228 -131.45478821]
[110.70899200 -154.17269897]
[127.65872955 -171.77098083]
[127.65872955 -186.77098083]
[127.65872955 -201.77098083]
[119.08544159 -211.46389771]
[119.43069458 -223.99783325]
[127.96072388 -232.63183594]
[128.27278137 -247.62860107]
[128.58483887 -262.62533569]
[114.78649139 -269.06939697]
[104.80700684 -280.57284546]
[100.37538147 -295.14270020]
[102.25942993 -310.25463867]
[110.13272095 -323.29040527]
[122.63117218 -331.99145508]
[137.58934021 -334.85034180]
[152.41561890 -331.37170410]
[164.54130554 -322.15823364]
[171.86550903 -308.80624390]
[173.11929321 -293.62902832]
[168.08541870 -279.25613403]
[157.63604736 -268.17776489]
[143.58158875 -262.31329346]
[143.26953125 -247.31654358]
[142.95747375 -232.31977844]
[152.24145508 -217.46018982]
[142.65873718 -201.77098083]
[142.65873718 -186.77098083]
[142.65873718 -171.77098083]
[156.61912537 -166.28395081]
[166.83259583 -177.26960754]
[169.96820068 -193.36619568]
[185.56192017 -198.44238281]
[197.57229614 -187.27622986]
[193.64407349 -171.35450745]
[177.81826782 -167.05613708]
[167.60478210 -156.07046509]
[169.85859680 -140.43882751]
[164.67829895 -126.38964844]
[154.04051208 -117.05168152]
[141.03276062 -114.10851288]
[138.24043274 -99.37070465]
[143.47323608 -85.42556763]
[133.30221558 -73.30695343]
[130.50988770 -58.56914520]
[127.71756744 -43.83134079]
[124.92523956 -29.09353447]
[122.74840546 -14.25232983]
[121.19082642 0.66658270]
[119.63324738 15.58549500]
[121.93453217 19.83750343]
[121.54370880 25.58889961]
[117.68792725 31.08803177]
[115.51108551 45.92923737]
[113.33425140 60.77044296]
[111.15741730 75.61164856]
[120.39382172 81.30378723]
[126.86047363 90.43002319]
[129.31338501 101.68655396]
[127.10652924 113.33571625]
[120.33454895 123.47410583]
[109.85781860 130.34320068]
[97.19941711 132.63186646]
[97.51147461 147.62861633]
[97.82353210 162.62538147]
[98.13558960 177.62213135]
[98.44763947 192.61888123]
[112.78276062 195.44085693]
[126.20671082 201.19227600]
[138.12837219 209.61711121]
[148.02334595 220.34165955]
[155.45701599 232.89114380]
[160.10366821 246.71069336]
[161.76075745 261.18994141]
[160.35771179 275.68988037]
[155.95893860 289.57116699]
[148.76089478 302.22229004]
[139.08329773 313.08645630]
[127.35492706 321.68609619]
[114.09461975 327.64398193]
[99.88833618 330.69958496]
[99.88833618 345.69958496]
[99.88833618 360.69958496]
[99.88833618 375.69958496]
[99.88833618 390.69958496]
[99.88833618 405.69958496]
[99.88833618 420.69958496]
[99.88833618 435.69958496]
[99.88833618 450.69958496]
[99.88833618 465.69958496]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[23 127]
[24 126]
[25 125]
[26 124]
[27 123]
[28 40]
[29 39]
[30 38]
[42 116]
[43 115]
[44 114]
[45 113]
[46 110]
[47 109]
[48 108]
[53 107]
[54 106]
[55 105]
[56 104]
[58 102]
[59 101]
[62 89]
[63 88]
[64 87]
[67 85]
[68 84]
[69 83]
[90 97]
[91 96]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
