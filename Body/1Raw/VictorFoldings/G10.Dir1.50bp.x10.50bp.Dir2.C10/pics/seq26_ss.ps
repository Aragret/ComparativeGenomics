%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:03 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCACCCUAUUAACCACUCACGGGAGCUCUCCAUGCAUUUGGUAUUUUCGUCUGGGGGGUAUGxxxxxxxxxxACAGGUCAACCUCGCUUCCCCACCCUUACUAACAUUAACGAAAAUAACCCCACCCUACUAACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[107.08101654 242.62536621]
[106.77304077 227.62852478]
[106.46505737 212.63168335]
[106.15708160 197.63485718]
[105.84910583 182.63801575]
[105.54113007 167.64117432]
[105.23314667 152.64433289]
[104.92517090 137.64750671]
[104.61719513 122.65066528]
[91.12181091 116.10279083]
[79.15155029 125.14231110]
[72.80154419 139.63327026]
[57.98219299 141.12866211]
[46.01193619 150.16818237]
[34.04167557 159.20770264]
[37.89665604 173.91171265]
[35.82625961 188.97099304]
[28.14621162 202.08911133]
[16.02766418 211.26567078]
[1.31860733 215.10130310]
[-13.73793602 213.01110840]
[-26.84595108 205.31381226]
[-36.00656128 193.18319702]
[-39.82284164 178.46910095]
[-37.71283340 163.41532898]
[-29.99829865 150.31744385]
[-17.85564995 141.17280579]
[-3.13655305 137.37588501]
[11.91443920 139.50569153]
[25.00215721 147.23744202]
[36.97241592 138.19792175]
[48.94267273 129.15840149]
[54.43649292 115.31401825]
[70.11203003 113.17205048]
[82.08229065 104.13253021]
[80.62855530 96.77477264]
[66.43070221 91.93524933]
[77.72108459 82.05924988]
[76.26734924 74.70148468]
[61.75872040 70.89363098]
[47.25009537 67.08576965]
[33.73206711 75.27347565]
[18.40393829 71.42328644]
[10.35961151 57.81945038]
[14.37164497 42.53288269]
[28.05977058 34.63283157]
[43.30306625 38.80625916]
[51.05795288 52.57714462]
[65.56658173 56.38500214]
[80.07520294 60.19286346]
[93.88878632 54.34607315]
[101.25502777 41.27938080]
[108.62126923 28.21268463]
[115.98750305 15.14598942]
[123.35374451 2.07929444]
[130.71998596 -10.98740005]
[138.08622742 -24.05409622]
[145.45246887 -37.12078857]
[152.81871033 -50.18748474]
[142.65725708 -77.86743927]
[168.20799255 -102.68679047]
[171.56726074 -117.30580139]
[174.92651367 -131.92480469]
[178.28576660 -146.54382324]
[181.64503479 -161.16282654]
[184.09796143 -175.96090698]
[185.63525391 -190.88191223]
[187.17254639 -205.80293274]
[173.12544250 -211.33300781]
[161.09194946 -220.44877625]
[151.96499634 -232.47381592]
[146.42189026 -246.51577759]
[144.87396240 -261.53265381]
[147.43608093 -276.41009521]
[153.91810608 -290.04406738]
[163.83905029 -301.42291260]
[176.46269226 -309.70217896]
[190.85227966 -314.26748657]
[205.94001770 -314.78012085]
[220.60629272 -311.20199585]
[233.76275635 -303.79861450]
[244.43313599 -293.11941528]
[251.82560730 -279.95678711]
[255.39158630 -265.28756714]
[254.86647034 -250.20025635]
[250.28923035 -235.81445312]
[241.99951172 -223.19767761]
[230.61247253 -213.28616333]
[216.97311401 -206.81542969]
[202.09356689 -204.26564026]
[200.55627441 -189.34461975]
[199.01898193 -174.42361450]
[211.53984070 -182.68362427]
[226.27111816 -179.85704041]
[234.84555054 -167.54936218]
[232.39291382 -152.75123596]
[220.30628967 -143.86788940]
[205.45080566 -145.94502258]
[196.26403809 -157.80355835]
[192.90478516 -143.18455505]
[189.54551697 -128.56555176]
[186.18626404 -113.94654083]
[182.82699585 -99.32753754]
[188.04800415 -93.94319153]
[202.59495544 -97.60192871]
[198.49002075 -83.17451477]
[203.71101379 -77.79017639]
[218.42654419 -80.69764709]
[232.79331970 -89.69944000]
[245.42042542 -78.38607788]
[238.04472351 -63.12057877]
[221.33401489 -65.98212433]
[206.61849976 -63.07465363]
[202.43006897 -54.07938004]
[196.19853210 -47.04959869]
[188.66102600 -42.37953949]
[180.60491943 -40.21671295]
[172.79127502 -40.46684647]
[165.88539124 -42.82124710]
[158.51916504 -29.75455093]
[151.15292358 -16.68785667]
[143.78668213 -3.62116098]
[136.42044067 9.44553375]
[129.05419922 22.51222801]
[121.68795776 35.57892227]
[114.32172394 48.64561844]
[106.95548248 61.71231461]
[115.81251526 49.60640717]
[127.91577148 40.74575424]
[142.13186646 35.96008301]
[157.12956238 35.69754028]
[171.50445557 39.98271179]
[183.91041565 48.41432190]
[193.18572998 60.20281219]
[198.46183777 74.24427795]
[199.24465942 89.22383881]
[195.46089172 103.73876190]
[187.46487427 116.42984772]
[176.00534058 126.10865021]
[162.15542603 131.86883545]
[147.21205139 133.17098999]
[132.57455444 129.89318848]
[119.61402893 122.34268188]
[119.92201233 137.33952332]
[120.22998810 152.33636475]
[120.53796387 167.33319092]
[120.84593964 182.33003235]
[121.15392303 197.32687378]
[121.46189880 212.32371521]
[121.76987457 227.32055664]
[122.07785034 242.31738281]
[124.66362762 261.52581787]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 151]
[2 150]
[3 149]
[4 148]
[5 147]
[6 146]
[7 145]
[8 144]
[9 143]
[10 35]
[11 34]
[13 32]
[14 31]
[15 30]
[39 50]
[40 49]
[41 48]
[51 127]
[52 126]
[53 125]
[54 124]
[55 123]
[56 122]
[57 121]
[58 120]
[59 119]
[61 103]
[62 102]
[63 101]
[64 100]
[65 99]
[66 92]
[67 91]
[68 90]
[107 113]
[108 112]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
