%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:28 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGUCGUAACAUGGUAAGUGUACUGGAAAGUGCACUUGGACGAACCAGAGUGUAGCUUAACACAAxxxxxxxxxxAAGCUUCAAACUAGACUACUUCUCCAUAAUAUUCAUCCCUGUAGCAUUGUUCGUUACAUGGUCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[92.50000000 257.55807495]
[92.50000000 242.55807495]
[92.50000000 227.55807495]
[92.50000000 212.55807495]
[92.50000000 197.55807495]
[92.50000000 182.55807495]
[92.50000000 167.55807495]
[92.50000000 152.55807495]
[92.50000000 137.55807495]
[92.50000000 122.55807495]
[87.11669922 117.33599854]
[80.51062012 130.80299377]
[65.66139221 128.68157959]
[63.09049225 113.90353394]
[76.35009766 106.89185333]
[70.96678925 101.66977692]
[55.97372437 102.12574768]
[40.98065567 102.58171082]
[26.00837708 103.49322510]
[11.07072449 104.85944366]
[-3.86692715 106.22566223]
[-18.80457878 107.59187317]
[-33.63160324 109.86329651]
[-48.29319763 113.03151703]
[-62.95479584 116.19973755]
[-77.61638641 119.36795807]
[-92.27798462 122.53617859]
[-106.93958282 125.70439911]
[-121.60117340 128.87261963]
[-136.26277161 132.04084778]
[-150.92436218 135.20906067]
[-162.70414734 146.61822510]
[-178.39830017 141.86161804]
[-181.86204529 125.83244324]
[-169.53216553 115.02013397]
[-154.09259033 120.54746246]
[-139.43098450 117.37924194]
[-124.76939392 114.21102142]
[-110.10780334 111.04280090]
[-95.44620514 107.87458038]
[-80.78461456 104.70635986]
[-66.12301636 101.53813934]
[-51.46142197 98.36991882]
[-36.79982376 95.20169830]
[-48.54901886 85.87665558]
[-50.44922638 70.99749756]
[-41.42070770 59.01894379]
[-26.59368706 56.74749756]
[-14.39324951 65.47385406]
[-11.75198841 80.23948669]
[-20.17079544 92.65422058]
[-5.23314428 91.28800964]
[9.70450783 89.92179108]
[24.64216042 88.55557251]
[27.18861580 86.03703308]
[31.10431099 84.65654755]
[35.82679367 85.05438232]
[40.52468872 87.58864594]
[55.51775742 87.13267517]
[70.51082611 86.67671204]
[80.16557312 75.19690704]
[78.04452515 60.34762573]
[75.92348480 45.49834442]
[73.80244446 30.64906120]
[71.68139648 15.79977894]
[56.80459595 12.97852802]
[43.65115356 5.47748375]
[33.64785767 -5.88969755]
[27.87979317 -19.88998795]
[26.97263527 -35.00474167]
[31.02478409 -49.59442520]
[39.59669495 -62.07645416]
[51.75855255 -71.09687042]
[66.19112396 -75.67721558]
[81.32888031 -75.32064056]
[95.52977753 -70.06582642]
[107.25342560 -60.48277664]
[115.22811890 -47.61098480]
[118.58882904 -32.84669113]
[116.97100067 -17.79141617]
[110.55014038 -4.07823896]
[100.02272034 6.80533409]
[86.53068542 13.67873573]
[88.65172577 28.52801704]
[90.77276611 43.37730026]
[92.89381409 58.22658157]
[95.01485443 73.07586670]
[110.09507751 78.54192352]
[117.51259613 90.24446106]
[132.03375244 86.48467255]
[146.55491638 82.72489166]
[159.34503174 69.51531982]
[176.05772400 74.78543091]
[190.49969482 70.73210907]
[203.89912415 63.99006271]
[215.76077271 54.80847549]
[227.62240601 45.62688446]
[231.06745911 29.95808792]
[245.52873230 23.01180267]
[259.91278076 30.11662292]
[263.18539429 45.82233810]
[252.83610535 58.08087158]
[236.80398560 57.48852158]
[224.94235229 66.67011261]
[213.08071899 75.85169983]
[227.98078918 74.12312317]
[242.74302673 76.78325653]
[256.10247803 83.60416412]
[266.91442871 94.00137329]
[274.25241089 107.08396149]
[277.48760986 121.73091888]
[276.34286499 136.68717957]
[270.91622925 150.67115784]
[261.67272949 162.48460388]
[249.40438843 171.11524963]
[235.16249084 175.82354736]
[220.16735840 176.20603943]
[205.70393372 172.22998047]
[193.01152039 164.23605347]
[183.17773438 152.90925598]
[177.04519653 139.22012329]
[175.13940430 124.34169006]
[177.62364197 109.54883575]
[184.28506470 96.10913849]
[194.55300903 85.17408752]
[180.11103821 89.22740173]
[173.88790894 99.64329529]
[161.84333801 103.11506653]
[150.31469727 97.24604797]
[135.79354858 101.00583649]
[121.27238464 104.76561737]
[135.81843567 108.42790985]
[150.59703064 105.86019897]
[165.07493591 109.78322601]
[176.53546143 119.46085358]
[182.82807922 133.07713318]
[182.77203369 148.07702637]
[176.37782288 161.64588928]
[164.84530640 171.23760986]
[150.33848572 175.05232239]
[135.57949829 172.37423706]
[123.33777618 163.70588684]
[115.91043091 150.67382812]
[114.69138336 135.72181702]
[107.50000000 122.55807495]
[107.50000000 137.55807495]
[107.50000000 152.55807495]
[107.50000000 167.55807495]
[107.50000000 182.55807495]
[107.50000000 197.55807495]
[107.50000000 212.55807495]
[107.50000000 227.55807495]
[107.50000000 242.55807495]
[107.50000000 257.55807495]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 154]
[2 153]
[3 152]
[4 151]
[5 150]
[6 149]
[7 148]
[8 147]
[9 146]
[10 145]
[16 60]
[17 59]
[18 58]
[19 54]
[20 53]
[21 52]
[22 51]
[23 44]
[24 43]
[25 42]
[26 41]
[27 40]
[28 39]
[29 38]
[30 37]
[31 36]
[61 87]
[62 86]
[63 85]
[64 84]
[65 83]
[89 131]
[90 130]
[91 129]
[93 126]
[94 125]
[95 105]
[96 104]
[97 103]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
