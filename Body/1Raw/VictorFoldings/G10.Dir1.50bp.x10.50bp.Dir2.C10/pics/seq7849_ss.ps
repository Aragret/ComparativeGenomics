%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:07 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCACUUUCACCGCUACACGACCGGGGGUAUACUACGGUCAAUGCUCUGAAAUCUGUGGAGCxxxxxxxxxxAUUCAGCUUCCUACACUAUUAAAGUUUACCACAACCACCACCCCAUCAUACUCUUUCACCCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[172.87640381 235.88331604]
[165.15232849 223.02490234]
[157.42823792 210.16650391]
[149.70416260 197.30810547]
[136.51776123 190.38218689]
[136.04414368 174.56806946]
[128.32005310 161.70965576]
[115.13366699 154.78373718]
[114.66004181 138.96961975]
[106.93595886 126.11122131]
[96.76992035 126.82293701]
[87.06347656 123.71813202]
[79.19771576 117.23857117]
[74.29182434 108.30621338]
[59.29912949 108.77425385]
[44.30643082 109.24229431]
[29.31373596 109.71033478]
[14.32103920 110.17838287]
[3.53327632 121.41501617]
[-11.67811680 121.67610168]
[-22.32404709 111.32236481]
[-37.31674576 111.79041290]
[-42.96126556 123.02677155]
[-52.80670547 130.73181152]
[-64.92904663 133.47833252]
[-76.99259186 130.80056763]
[-86.69993591 123.27181244]
[-92.22953796 112.38309479]
[-107.22872162 112.22705841]
[-122.22791290 112.07102203]
[-137.22709656 111.91498566]
[-152.22628784 111.75894928]
[-166.10620117 119.35227203]
[-178.75230408 111.48300171]
[-193.75148010 111.32695770]
[-206.17300415 121.48006439]
[-221.82470703 117.95817566]
[-228.69995117 103.46298981]
[-221.52464294 89.11396790]
[-205.80305481 85.91844940]
[-193.59544373 96.32777405]
[-178.59626770 96.48381042]
[-165.78919983 88.87932587]
[-152.07025146 96.75975800]
[-137.07106018 96.91579437]
[-122.07187653 97.07183075]
[-107.07268524 97.22786713]
[-92.07350159 97.38390350]
[-82.27044678 82.75626373]
[-65.51822662 76.84324646]
[-48.40630722 82.16909790]
[-37.78478622 96.79771423]
[-22.79208946 96.32967377]
[-12.81270504 85.33206177]
[2.38535309 84.64382172]
[13.85299778 95.18568420]
[28.84569359 94.71764374]
[43.83839035 94.24960327]
[58.83108521 93.78155518]
[73.82378387 93.31351471]
[80.60323334 81.19391632]
[92.50744629 74.04301453]
[106.39124298 73.75013733]
[113.84615326 60.73382568]
[121.30106354 47.71751404]
[128.75598145 34.70120621]
[136.21089172 21.68489647]
[111.50080872 -11.94577312]
[113.05838776 -26.86468506]
[114.61597443 -41.78359604]
[101.09561157 -48.68029404]
[90.98254395 -59.99798965]
[85.64447784 -74.20606995]
[85.80333710 -89.38299561]
[91.43764496 -103.47622681]
[101.78540039 -114.57975769]
[115.44715118 -121.19193268]
[130.57527161 -122.41850281]
[145.12379456 -118.09359741]
[157.12516785 -108.80211639]
[164.95628357 -95.80065155]
[167.55805969 -80.84754944]
[164.57862854 -65.96509552]
[156.42092896 -53.16601944]
[144.18821716 -44.18128967]
[129.53488159 -40.22601700]
[127.97730255 -25.30710411]
[126.41972351 -10.38819218]
[132.76718140 -6.39323425]
[146.03398132 -13.39268208]
[145.46211243 1.59668219]
[151.80958557 5.59164047]
[164.58694458 -2.26578546]
[172.28923035 -16.08552361]
[187.18363953 -16.16161346]
[199.96099854 -24.01903915]
[212.73835754 -31.87646484]
[217.84288025 -47.08578491]
[232.96534729 -52.44216537]
[246.50508118 -43.83664703]
[248.07557678 -27.87064743]
[236.47207642 -16.79191589]
[220.59579468 -19.09910774]
[207.81843567 -11.24168205]
[195.04107666 -3.38425636]
[188.25270081 9.87346649]
[172.44436646 10.51157188]
[159.66700745 18.36899757]
[149.22718811 29.13980675]
[141.77227783 42.15611649]
[134.31736755 55.17242432]
[126.86246490 68.18873596]
[119.40755463 81.20504761]
[127.01526642 99.71896362]
[119.79435730 118.38713837]
[127.51844025 131.24554443]
[141.25730896 139.09118652]
[141.17845154 153.98558044]
[148.90254211 166.84397888]
[162.64141846 174.68962097]
[162.56256104 189.58401489]
[170.28663635 202.44241333]
[178.01072693 215.30082703]
[185.73481750 228.15922546]
[200.00830078 223.35487366]
[214.98091125 221.73168945]
[229.95237732 223.36555481]
[244.22242737 228.18008423]
[257.12362671 235.95007324]
[268.05261230 246.31211853]
[276.49813843 258.78155518]
[282.06524658 272.77517700]
[284.49353027 287.63848877]
[283.66943359 302.67626953]
[279.63146973 317.18518066]
[272.56854248 330.48666382]
[262.81094360 341.95852661]
[250.81510925 351.06423950]
[237.14208984 357.37789917]
[222.43138123 360.60421753]
[207.37103271 360.59228516]
[192.66545105 357.34265137]
[179.00245667 351.00732422]
[167.02107239 341.88259888]
[157.28167725 330.39529419]
[150.23983765 317.08264160]
[146.22488403 302.56732178]
[145.42462158 287.52825928]
[147.87646484 272.66882324]
[153.46574402 258.68405151]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 124]
[2 123]
[3 122]
[4 121]
[6 119]
[7 118]
[9 116]
[10 115]
[14 60]
[15 59]
[16 58]
[17 57]
[18 56]
[21 53]
[22 52]
[28 48]
[29 47]
[30 46]
[31 45]
[32 44]
[34 42]
[35 41]
[63 113]
[64 112]
[65 111]
[66 110]
[67 109]
[68 88]
[69 87]
[70 86]
[92 108]
[93 107]
[95 105]
[96 104]
[97 103]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
