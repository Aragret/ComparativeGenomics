%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:37 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCUAAAAAUCUUUGAAAUAGGGCCCGUAUUUACCCUAUAGCACCCCCUCUACCCCCUCUAGAxxxxxxxxxxGGCCCACCAUAAUUACCCCCAUACUCCUUACACUAUUCCUCAUCACCCAACUAAAAAUAUUCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[226.03967285 73.65545654]
[211.38694763 76.86444855]
[196.73422241 80.07344818]
[182.08149719 83.28244781]
[167.42877197 86.49143982]
[152.96000671 90.44805145]
[138.71330261 95.14185333]
[124.46661377 99.83565521]
[110.21992493 104.52944946]
[96.02217102 109.36927032]
[81.87485504 114.35459137]
[67.72753906 119.33991241]
[82.21568298 123.22495270]
[93.94107056 132.57992554]
[100.94668579 145.84346008]
[102.06329346 160.80183411]
[97.10452271 174.95848083]
[86.89801025 185.95062256]
[73.14723206 191.94361877]
[58.14723206 191.93727112]
[44.40154266 185.93260193]
[34.20434952 174.93180847]
[29.25758553 160.77096558]
[30.38687706 145.81353760]
[37.40374374 132.55595398]
[49.13438797 123.21227264]
[34.17310715 124.28934479]
[19.21182632 125.36640930]
[4.25054598 126.44348145]
[-10.71073532 127.52055359]
[-25.67201614 128.59762573]
[-32.30427170 142.45072937]
[-44.98359299 151.11851501]
[-60.29930878 152.26936340]
[-74.13156128 145.59371948]
[-82.75955200 132.88729858]
[-83.86239624 117.56804657]
[-77.14342499 103.75678253]
[-64.41001129 95.16866302]
[-49.08738708 94.11384583]
[-35.29725266 100.87607574]
[-26.74908447 113.63633728]
[-11.78780460 112.55927277]
[3.17347598 111.48220062]
[18.13475609 110.40512848]
[33.09603882 109.32806396]
[48.05731964 108.25099182]
[62.74221420 105.19259644]
[76.88953400 100.20727539]
[91.03684998 95.22195435]
[97.03157806 89.75339508]
[105.52612305 90.28276062]
[119.77281189 85.58895874]
[134.01950073 80.89515686]
[148.26620483 76.20135498]
[136.46948242 66.93650055]
[136.14747620 51.93995667]
[147.53562927 42.17726135]
[162.30686951 44.78694153]
[169.66041565 57.86078262]
[164.21977234 71.83871460]
[178.87249756 68.62972260]
[193.52522278 65.42072296]
[208.17794800 62.21172714]
[222.83067322 59.00273132]
[220.65051270 44.15579224]
[219.51133728 29.19293594]
[219.41870117 14.18706608]
[220.37304688 -0.78871274]
[222.36973572 -15.66143799]
[225.39903259 -30.35865211]
[229.44618225 -44.80875015]
[234.49145508 -58.94132996]
[240.51029968 -72.68754578]
[247.47335815 -85.98041534]
[255.34672546 -98.75518799]
[264.09204102 -110.94961548]
[273.66671753 -122.50429535]
[284.02407837 -133.36293030]
[295.11364746 -143.47262573]
[306.88143921 -152.78410339]
[319.27011108 -161.25202942]
[332.21929932 -168.83512878]
[345.66589355 -175.49645996]
[359.54443359 -181.20358276]
[373.78726196 -185.92866516]
[388.32501221 -189.64871216]
[403.08682251 -192.34559631]
[418.00082397 -194.00616455]
[432.99432373 -194.62234497]
[447.99429321 -194.19111633]
[462.92761230 -192.71458435]
[477.72158813 -190.19995117]
[492.30410767 -186.65946960]
[506.60412598 -182.11038208]
[520.55200195 -176.57485962]
[534.07971191 -170.07984924]
[547.12139893 -162.65702820]
[559.61358643 -154.34251404]
[571.49530029 -145.17686462]
[582.70874023 -135.20469666]
[593.19921875 -124.47461700]
[602.91564941 -113.03889465]
[611.81066895 -100.95323944]
[619.84094238 -88.27653503]
[626.96740723 -75.07054138]
[633.15533447 -61.39960098]
[638.37451172 -47.33031464]
[642.59954834 -32.93122482]
[645.80987549 -18.27248573]
[647.98980713 -3.42551398]
[649.12878418 11.53735638]
[649.22119141 26.54322815]
[648.26660156 41.51899338]
[646.26971436 56.39168930]
[643.24023438 71.08885956]
[639.19287109 85.53890228]
[634.14739990 99.67140961]
[628.12835693 113.41753387]
[621.16510010 126.71031189]
[613.29156494 139.48497009]
[604.54602051 151.67927551]
[594.97125244 163.23381042]
[584.61370850 174.09230042]
[573.52398682 184.20182800]
[561.75604248 193.51315308]
[549.36724854 201.98089600]
[536.41796875 209.56381226]
[522.97125244 216.22494507]
[509.09265137 221.93186951]
[494.84976196 226.65675354]
[480.31198120 230.37658691]
[465.55010986 233.07325745]
[450.63607788 234.73361206]
[435.64257812 235.34957886]
[420.64260864 234.91813660]
[405.70928955 233.44139099]
[390.91537476 230.92655945]
[376.33291626 227.38586426]
[362.03295898 222.83656311]
[348.08517456 217.30084229]
[334.55752563 210.80563354]
[321.51593018 203.38261414]
[309.02389526 195.06794739]
[297.14230347 185.90211487]
[285.92901611 175.92979431]
[275.43872070 165.19955444]
[265.72244263 153.76370239]
[256.82757568 141.67791748]
[248.79745483 129.00109863]
[241.67117310 115.79499817]
[235.48347473 102.12397003]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 65]
[2 64]
[3 63]
[4 62]
[5 61]
[6 55]
[7 54]
[8 53]
[9 52]
[10 50]
[11 49]
[12 48]
[26 47]
[27 46]
[28 45]
[29 44]
[30 43]
[31 42]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
