%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:24 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGGCCAUCAAGUAUUUCCUCACGCAAGCAACCGCAUCCAUAAUCCUUCUAAUAGCUAUCCUCxxxxxxxxxxACCUAACCAUCUUCUCCUUACACCUAGCAGGUGUCUCCUCUAUCUUAGGGGCCAUCAAUUCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[84.51066589 289.19003296]
[87.10166931 269.98229980]
[87.41372681 254.98554993]
[87.72577667 239.98880005]
[88.03783417 224.99203491]
[88.34989166 209.99528503]
[88.66194916 194.99853516]
[88.97400665 180.00178528]
[89.28606415 165.00502014]
[89.59811401 150.00827026]
[89.91017151 135.01152039]
[77.08825684 126.60206604]
[69.28544617 114.06294250]
[67.54684448 99.96589661]
[71.72718048 86.98307037]
[80.60166168 77.38126373]
[92.17372894 72.62687683]
[82.19100189 61.43111038]
[72.20827484 50.23534393]
[60.24858093 59.30208588]
[47.60633850 67.38996124]
[34.36146927 74.44783783]
[20.59772110 80.43109131]
[6.40210724 85.30187988]
[-8.13561916 89.02942657]
[-22.92354584 91.59015656]
[-37.86817551 92.96788025]
[-52.87502289 93.15389252]
[-67.84921265 92.14700317]
[-82.69606018 89.95359039]
[-97.32171631 86.58752441]
[-111.63368988 82.07006836]
[-125.54151154 76.42980957]
[-138.95724487 69.70238495]
[-151.79606628 61.93034363]
[-163.97682190 53.16281509]
[-175.42247009 43.45523453]
[-186.06066895 32.86897659]
[-195.82414246 21.47097015]
[-204.65118408 9.33328056]
[-212.48596191 -3.46735382]
[-219.27896118 -16.85000229]
[-224.98722839 -30.73005295]
[-229.57467651 -45.01975250]
[-233.01228333 -59.62875366]
[-235.27833557 -74.46469116]
[-236.35848999 -89.43376923]
[-236.24592590 -104.44135284]
[-234.94136047 -119.39254761]
[-232.45303345 -134.19282532]
[-228.79667664 -148.74862671]
[-223.99542236 -162.96791077]
[-218.07960510 -176.76077271]
[-211.08663940 -190.04002380]
[-203.06072998 -202.72169495]
[-194.05262756 -214.72561646]
[-184.11927795 -225.97589111]
[-173.32348633 -236.40139771]
[-161.73352051 -245.93620300]
[-149.42263794 -254.52003479]
[-136.46867371 -262.09863281]
[-122.95354462 -268.62405396]
[-108.96268463 -274.05508423]
[-94.58455658 -278.35736084]
[-79.91006470 -281.50366211]
[-65.03198242 -283.47415161]
[-50.04437256 -284.25631714]
[-35.04200363 -283.84521484]
[-20.11972046 -282.24349976]
[-5.37186813 -279.46124268]
[9.10831165 -275.51605225]
[23.22926903 -270.43286133]
[36.90172577 -264.24383545]
[50.03923798 -256.98809814]
[62.55874252 -248.71150208]
[74.38109589 -239.46640015]
[85.43154144 -229.31121826]
[95.64021301 -218.31016541]
[104.94258118 -206.53280640]
[113.27981567 -194.05360413]
[120.59922028 -180.95144653]
[126.85450745 -167.30918884]
[132.00613403 -153.21305847]
[136.02153015 -138.75218201]
[138.87530518 -124.01800537]
[140.54940796 -109.10366821]
[141.03327942 -94.10346985]
[140.32383728 -79.11224365]
[138.42556763 -64.22477722]
[135.35049438 -49.53519058]
[131.11802673 -35.13636017]
[125.75495148 -21.11931419]
[119.29516602 -7.57268238]
[111.77951050 5.41789150]
[103.25550842 17.77027702]
[93.77703857 29.40637398]
[83.40403748 40.25261688]
[93.38676453 51.44838333]
[103.36949158 62.64414978]
[117.73767853 66.95173645]
[132.23327637 63.09457397]
[146.72886658 59.23741531]
[161.22447205 55.38025284]
[175.72006226 51.52309418]
[190.21565247 47.66593552]
[203.96739197 37.74997711]
[217.30268860 48.21927643]
[210.93411255 63.93161392]
[194.07281494 62.16153336]
[179.57722473 66.01869202]
[165.08161926 69.87585449]
[150.58602905 73.73300934]
[136.09043884 77.59017181]
[121.59483337 81.44732666]
[131.17201233 90.97145844]
[136.04914856 105.29811096]
[149.83152771 111.21807098]
[163.61390686 117.13803101]
[177.39628601 123.05799866]
[191.27732849 115.85724640]
[206.52803040 119.31414032]
[215.94747925 131.79644775]
[215.08810425 147.41040039]
[204.35566711 158.78356934]
[188.81770325 160.54588318]
[175.81076050 151.86524963]
[171.47633362 136.84037781]
[157.69393921 130.92041016]
[143.91156006 125.00045013]
[130.12918091 119.08049011]
[123.82361603 123.14125824]
[133.08061218 134.94413757]
[142.33761597 146.74702454]
[154.58525085 155.40701294]
[154.26042175 170.40350342]
[141.64929199 178.52505493]
[127.86187744 172.61683655]
[125.04443359 157.88378906]
[118.12846375 144.57330322]
[111.21249390 131.26280212]
[104.90692902 135.32357788]
[104.59487152 150.32032776]
[104.28281403 165.31707764]
[103.97075653 180.31382751]
[103.65869904 195.31059265]
[103.34664917 210.30734253]
[103.03459167 225.30409241]
[102.72253418 240.30084229]
[102.41047668 255.29760742]
[102.09841919 270.29434204]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 150]
[3 149]
[4 148]
[5 147]
[6 146]
[7 145]
[8 144]
[9 143]
[10 142]
[11 141]
[17 99]
[18 98]
[19 97]
[100 114]
[101 113]
[102 112]
[103 111]
[104 110]
[105 109]
[116 130]
[117 129]
[118 128]
[119 127]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
