%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:37 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCUUCCUACACUAUUAAAGUUUACCACAACCACCACCCCAUCAUACUCUUUCACCCACAGCxxxxxxxxxxAUCAUCCGCUACCUUCACGCCAAUGGCGCCUCAAUAUUCUUUAUCUGCCUCUUCCUACACCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[152.65602112 76.42385864]
[139.87866211 84.28128815]
[127.10130310 92.13871002]
[114.32394409 99.99613953]
[107.50328827 112.20147705]
[93.53347778 112.78121948]
[80.75612640 120.63864136]
[73.05382538 134.45838928]
[58.15941620 134.53446960]
[45.38205719 142.39189148]
[49.16452026 157.72052002]
[48.03663635 173.44914246]
[42.12028503 188.04528809]
[32.00332260 200.09051514]
[18.68117905 208.41824341]
[3.45893407 212.22677612]
[-12.17653656 211.15644836]
[-26.70178986 205.32350159]
[-38.70525742 195.30769348]
[-51.31638336 203.42924500]
[-63.92751312 211.55078125]
[-68.71451569 226.86300659]
[-83.72226715 232.53283691]
[-97.43811035 224.21084595]
[-99.34041595 208.28097534]
[-87.96990204 196.96325684]
[-72.04905701 198.93965149]
[-59.43792725 190.81811523]
[-46.82679749 182.69657898]
[-50.80795288 168.97621155]
[-50.75198746 154.67410278]
[-46.65445328 140.95475769]
[-38.84034348 128.93780518]
[-27.93834686 119.60662079]
[-14.83026123 113.72779083]
[-0.57968032 111.78819275]
[13.65430737 113.95468903]
[26.71139145 120.05977631]
[37.52463150 129.61454773]
[50.30199051 121.75711823]
[57.09036636 108.49938965]
[72.89869690 107.86128998]
[85.67605591 100.00386047]
[92.49671173 87.79852295]
[106.46652222 87.21878052]
[119.24387360 79.36135864]
[132.02124023 71.50392914]
[144.79858398 63.64650345]
[137.94110107 50.67879105]
[131.92733765 37.29907608]
[126.78190613 23.56218529]
[122.52589417 9.52440548]
[119.17669678 -4.75674343]
[116.74803162 -19.22274780]
[115.24981689 -33.81433868]
[114.68817902 -48.47172546]
[115.06539917 -63.13486481]
[116.37990570 -77.74367523]
[118.62629700 -92.23831177]
[121.79534912 -106.55937958]
[125.87406158 -120.64823151]
[130.84570312 -134.44712830]
[136.68988037 -147.89955139]
[143.38262939 -160.95040894]
[150.89653015 -173.54621887]
[159.20075989 -185.63539124]
[168.26129150 -197.16841125]
[178.04098511 -208.09803772]
[188.49975586 -218.37950134]
[199.59474182 -227.97071838]
[211.28047180 -236.83236694]
[223.50906372 -244.92819214]
[236.23040771 -252.22503662]
[249.39234924 -258.69299316]
[262.94097900 -264.30563354]
[276.82077026 -269.03991699]
[290.97485352 -272.87652588]
[305.34524536 -275.79971313]
[319.87304688 -277.79754639]
[334.49874878 -278.86184692]
[349.16244507 -278.98831177]
[363.80398560 -278.17639160]
[378.36346436 -276.42947388]
[392.78121948 -273.75469971]
[406.99813843 -270.16308594]
[420.95602417 -265.66934204]
[434.59768677 -260.29190063]
[447.86721802 -254.05281067]
[460.71029663 -246.97766113]
[473.07431030 -239.09545898]
[484.90856934 -230.43849182]
[496.16467285 -221.04226685]
[506.79644775 -210.94528198]
[516.76043701 -200.18893433]
[526.01568604 -188.81730652]
[534.52447510 -176.87696838]
[542.25183105 -164.41688538]
[549.16613770 -151.48811340]
[562.82232666 -157.69352722]
[576.47857666 -163.89892578]
[590.13482666 -170.10433960]
[602.05371094 -182.16157532]
[616.93920898 -174.04627991]
[613.26177979 -157.49595642]
[596.34027100 -156.44808960]
[582.68402100 -150.24269104]
[569.02777100 -144.03727722]
[555.37152100 -137.83187866]
[560.78863525 -123.45764160]
[565.23022461 -108.75247192]
[568.67620850 -93.78250122]
[571.11114502 -78.61502838]
[572.52404785 -63.31828308]
[572.90856934 -47.96104813]
[572.26281738 -32.61239243]
[570.58984375 -17.34133911]
[567.89703369 -2.21657467]
[564.19647217 12.69387817]
[559.50488281 27.32295418]
[553.84320068 41.60485840]
[547.23699951 55.47534561]
[539.71588135 68.87203217]
[531.31365967 81.73464966]
[522.06811523 94.00534058]
[512.02081299 105.62889862]
[501.21688843 116.55304718]
[489.70492554 126.72863007]
[477.53671265 136.10986328]
[464.76693726 144.65454102]
[451.45303345 152.32420349]
[437.65481567 159.08435059]
[423.43435669 164.90455627]
[408.85562134 169.75862122]
[393.98413086 173.62467957]
[378.88677979 176.48533630]
[363.63146973 178.32768250]
[348.28677368 179.14343262]
[332.92175293 178.92886353]
[317.60543823 177.68495178]
[302.40679932 175.41723633]
[287.39410400 172.13589478]
[272.63494873 167.85566711]
[258.19564819 162.59577942]
[244.14122009 156.37986755]
[230.53482056 149.23583984]
[217.43769836 141.19583130]
[204.90875244 132.29597473]
[193.00433350 122.57626343]
[181.77799988 112.08039093]
[171.28027344 100.85555267]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 48]
[2 47]
[3 46]
[4 45]
[6 43]
[7 42]
[9 40]
[10 39]
[19 29]
[20 28]
[21 27]
[98 108]
[99 107]
[100 106]
[101 105]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
