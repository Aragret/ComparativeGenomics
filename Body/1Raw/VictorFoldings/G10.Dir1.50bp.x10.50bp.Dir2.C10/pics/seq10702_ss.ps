%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:02 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCAAUAUUCAUGUGCCUAGACCAAGAAGUUAUUAUCUCGAACUGACACUGAGCCACAACCCxxxxxxxxxxAGACGUAAAUUAUGGCUGAAUCAUCCGCUACCUUCACGCCAAUGGCGCCUCAAUAUUCUUCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[110.90557861 262.96957397]
[110.28160095 247.98255920]
[109.65762329 232.99554443]
[109.03364563 218.00852966]
[108.40966797 203.02151489]
[107.78569031 188.03450012]
[107.16171265 173.04748535]
[106.53773499 158.06047058]
[104.20663452 143.24270630]
[100.19889069 128.78802490]
[96.19115448 114.33333588]
[93.79825592 129.14123535]
[81.25163269 137.36209106]
[66.71983337 133.64366150]
[59.66384125 120.40686035]
[64.67749786 106.26956177]
[78.49619293 100.43591309]
[63.50349426 99.96786499]
[48.51079941 99.49982452]
[39.77066422 102.37417603]
[33.21197891 98.86286926]
[18.23226547 98.08302307]
[3.25255156 97.30317688]
[-7.58425045 115.67578125]
[-34.39204407 118.90635681]
[-48.51684570 123.95511627]
[-55.05131149 138.34526062]
[-69.87640381 143.82177734]
[-84.19665527 137.13554382]
[-89.51612854 122.25337219]
[-82.67885590 108.00460815]
[-67.74128723 102.84278107]
[-53.56560516 109.83031464]
[-39.44079971 104.78155518]
[-39.75278854 97.28804779]
[-40.68875504 74.80752563]
[-55.18435287 70.95036316]
[-69.67994690 67.09320831]
[-84.17554474 63.23604584]
[-95.50347900 73.70893860]
[-110.69918060 76.37244415]
[-124.91374969 70.37664795]
[-133.61137390 57.63479233]
[-134.01667786 42.21275330]
[-126.00031281 29.03164864]
[-112.12028503 22.29751968]
[-96.80566406 24.15920258]
[-84.94328308 34.02264023]
[-80.31838226 48.74044800]
[-65.82279205 52.59761047]
[-51.32719040 56.45476913]
[-36.83159637 60.31192780]
[-16.03882027 58.24978638]
[-0.82681292 67.92682648]
[4.03239679 82.32346344]
[19.01211166 83.10330963]
[33.99182510 83.88315582]
[48.97883987 84.50713348]
[63.97153854 84.97517395]
[78.96423340 85.44321442]
[103.21493530 85.53941345]
[113.42841339 74.55374908]
[123.64189911 63.56808090]
[133.85537720 52.58241653]
[119.40636444 56.61058426]
[104.42642212 57.38597870]
[89.63873291 54.87117386]
[75.75720978 49.18756866]
[63.45201492 40.60956192]
[53.31721497 29.55127144]
[45.84208298 16.54656410]
[41.38750458 2.22327113]
[40.16853333 -12.72711754]
[42.24401855 -27.58283615]
[47.51375961 -41.62668991]
[55.72334671 -54.18067932]
[66.47644806 -64.63873291]
[79.25392151 -72.49596405]
[93.43891907 -77.37303925]
[108.34661865 -79.03451538]
[123.25731659 -77.40017700]
[137.45117188 -72.54892731]
[150.24291992 -64.71497345]
[161.01504517 -54.27650833]
[169.24746704 -41.73748398]
[174.54277039 -27.70324516]
[176.64529419 -12.85132980]
[175.45353699 2.10125256]
[171.02503967 16.43263054]
[163.57359314 29.45092392]
[153.46051025 40.52625656]
[160.89593506 35.10719299]
[168.21592712 36.43513489]
[182.71151733 32.57797623]
[197.20712280 28.72081566]
[211.70271301 24.86365700]
[226.15740967 20.85591507]
[240.56962585 16.69802856]
[254.98184204 12.54014111]
[269.39404297 8.38225365]
[271.89431763 -6.67468548]
[280.68698120 -19.15074921]
[294.02621460 -26.56880569]
[309.26351929 -27.45599365]
[323.37353516 -21.63616371]
[333.55468750 -10.26484489]
[337.78549194 4.40017843]
[335.22595215 19.44715500]
[326.38424683 31.88849640]
[313.01589966 39.25396729]
[297.77520752 40.08114243]
[283.68823242 34.20579529]
[273.55194092 22.79446983]
[259.13973999 26.95235634]
[244.72750854 31.11024475]
[230.31529236 35.26813126]
[224.72421265 40.17582703]
[215.55987549 39.35925293]
[201.06428528 43.21641159]
[186.56867981 47.07357025]
[172.07308960 50.93073273]
[157.61839294 54.93847275]
[144.84103394 62.79589844]
[134.62756348 73.78156281]
[124.41408539 84.76722717]
[114.20059967 95.75289154]
[110.64584351 110.32559204]
[114.65357971 124.78028107]
[118.66132355 139.23497009]
[124.14659119 125.27388763]
[135.40710449 115.36426544]
[149.95216370 111.69802094]
[164.56452942 115.08609772]
[176.01205444 124.77907562]
[181.76269531 138.63296509]
[180.54443359 153.58340454]
[172.62673950 166.32351685]
[159.76094055 174.03527832]
[144.79283142 175.01292419]
[131.03321838 169.04022217]
[121.52474976 157.43649292]
[122.14872742 172.42350769]
[122.77270508 187.41052246]
[123.39668274 202.39753723]
[124.02066040 217.38455200]
[124.64463806 232.37156677]
[125.26861572 247.35858154]
[125.89259338 262.34561157]
[132.59259033 277.91949463]
[119.48205566 288.66894531]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 148]
[2 147]
[3 146]
[4 145]
[5 144]
[6 143]
[7 142]
[8 141]
[9 129]
[10 128]
[11 127]
[17 60]
[18 59]
[19 58]
[21 57]
[22 56]
[23 55]
[25 34]
[26 33]
[36 52]
[37 51]
[38 50]
[39 49]
[61 126]
[62 125]
[63 124]
[64 123]
[91 122]
[93 121]
[94 120]
[95 119]
[96 118]
[97 116]
[98 115]
[99 114]
[100 113]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
