%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:53 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGACCUCCCCACCCCAUCCAACAUCUCCGCAUGAUGAAACUUCGGCUCACUCCUUGGCGCCUGCxxxxxxxxxxACAUCAACUGCAACUCCAAAGCCACCCCUCACCCACUAGGAUACCAACAAACCUACCCACCCCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[108.52273560 141.16430664]
[101.51051331 154.42434692]
[94.49828339 167.68438721]
[87.48605347 180.94442749]
[87.87451172 196.76086426]
[75.08495331 204.39474487]
[68.07272339 217.65478516]
[61.06049347 230.91482544]
[54.04826355 244.17486572]
[57.38022995 259.86810303]
[47.07734680 272.16567993]
[31.04310799 271.63394165]
[21.57760811 258.68078613]
[25.94196701 243.24278259]
[40.78822327 237.16264343]
[47.80045319 223.90260315]
[54.81268311 210.64256287]
[61.82490921 197.38252258]
[60.93488693 182.51452637]
[74.22601318 173.93218994]
[81.23824310 160.67214966]
[88.25047302 147.41210938]
[95.26270294 134.15206909]
[91.16728973 127.86894989]
[78.65628052 136.14389038]
[66.03522491 144.25000000]
[57.84485626 131.68345642]
[70.35556030 123.40904999]
[82.97646332 115.30271149]
[78.88105774 109.01959229]
[63.91878128 110.08278656]
[48.95650864 111.14598083]
[33.99423599 112.20917511]
[24.96405792 124.97592926]
[9.82717133 128.90132141]
[-4.26924706 122.13189697]
[-10.66930008 107.86398315]
[-6.35107803 92.83444977]
[6.64648628 84.13977814]
[22.18634033 85.88533020]
[32.93104172 97.24690247]
[47.89331436 96.18370819]
[62.85558701 95.12051392]
[77.81786346 94.05731964]
[62.82722855 93.52730560]
[51.29769897 83.93199158]
[48.05419540 69.28687286]
[54.45407104 55.72067642]
[67.81908417 48.91064835]
[82.55618286 51.70666885]
[92.49814606 62.93865204]
[93.48408508 77.90740967]
[94.09196472 62.91973495]
[94.69985199 47.93205643]
[95.30773163 32.94437790]
[83.33540344 41.98115921]
[68.45494843 40.09120941]
[59.12180328 28.34844971]
[60.63929749 13.42540741]
[72.14515686 3.80172706]
[87.10146332 4.94582462]
[97.00968933 16.20766640]
[99.43125153 1.40442061]
[101.85280609 -13.39882469]
[104.27436066 -28.20207024]
[98.86640930 -43.07031250]
[108.55687714 -54.38155365]
[101.66220856 -65.32771301]
[104.02251434 -77.63843536]
[113.82830811 -84.78439331]
[116.54938507 -99.53552246]
[119.27046204 -114.28664398]
[105.86666870 -121.27448273]
[95.11924744 -131.90390015]
[87.98384857 -145.22970581]
[85.09493256 -160.06701660]
[86.70939636 -175.09648132]
[92.68367767 -188.98170471]
[102.48654938 -200.48802185]
[115.24633789 -208.59228516]
[129.82846069 -212.57388306]
[144.93627930 -212.07876587]
[159.22642517 -207.15097046]
[171.42822266 -198.22865295]
[180.45669556 -186.10520935]
[185.50903320 -171.85861206]
[186.13600159 -156.75569153]
[182.28182983 -142.13937378]
[174.28924561 -129.30932617]
[162.86894226 -119.40640259]
[149.03639221 -113.31115723]
[134.02159119 -111.56556702]
[131.30050659 -96.81444550]
[128.57943726 -82.06331635]
[135.34985352 -65.90010071]
[123.36012268 -51.95999527]
[128.94128418 -38.15058136]
[119.07760620 -25.78051186]
[116.65605164 -10.97726727]
[114.23449707 3.82597756]
[111.81293488 18.62922287]
[110.29541016 33.55226135]
[109.68753052 48.53993988]
[109.07964325 63.52761841]
[108.47176361 78.51529694]
[116.19070435 65.65380859]
[120.29742432 51.22692871]
[131.95460510 41.78709793]
[146.92004395 40.76957703]
[159.74768066 48.54464722]
[165.76939392 62.28287506]
[162.79380798 76.98477936]
[151.90379333 87.30017090]
[137.06391907 89.47543335]
[123.29989624 95.43795013]
[138.23754883 96.80416870]
[152.89257812 89.44467163]
[166.44303894 98.68138885]
[164.94938660 115.01237488]
[149.94816589 121.63771057]
[136.87133789 111.74182129]
[121.93367767 110.37560272]
[134.38771057 118.73606873]
[146.84172058 127.09652710]
[159.29574585 135.45698547]
[171.74977112 143.81744385]
[184.20379639 152.17790222]
[199.10769653 153.87313843]
[213.36972046 158.52014160]
[226.41146851 165.93046570]
[237.70402527 175.80355835]
[246.78941345 187.73904419]
[253.29917908 201.25285339]
[256.96929932 215.79692078]
[257.65097046 230.78143311]
[255.31649780 245.59866333]
[250.06057739 259.64770508]
[242.09637451 272.35876465]
[231.74687195 283.21636963]
[219.43179321 291.78018188]
[205.65058899 297.70291138]
[190.96215820 300.74429321]
[175.96220398 300.78106689]
[161.25904846 297.81167603]
[147.44898987 291.95657349]
[135.09210205 283.45318604]
[124.68951416 272.64642334]
[116.66311646 259.97451782]
[111.33842468 245.95141602]
[108.93137360 231.14581299]
[109.53969574 216.15740967]
[109.33630371 201.15878296]
[109.13291168 186.16017151]
[108.92951965 171.16154480]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 23]
[2 22]
[3 21]
[4 20]
[6 18]
[7 17]
[8 16]
[9 15]
[30 44]
[31 43]
[32 42]
[33 41]
[52 105]
[53 104]
[54 103]
[55 102]
[62 101]
[63 100]
[64 99]
[65 98]
[67 96]
[70 94]
[71 93]
[72 92]
[115 122]
[116 121]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
