%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:12 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGUUCCUCCCUGUACGAAAGGACAAGAGAAAUAAGGCCUACUUCACAAAGCGCCUUCCCCCGxxxxxxxxxxGCAAACAUAUCAUACACAAACGCCUGAGCCCUAUCUAUUACUCUCAUCGCUACCUCCCUGCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[81.13810730 496.34490967]
[81.13810730 481.34490967]
[81.13810730 466.34490967]
[81.13810730 451.34490967]
[81.13810730 436.34490967]
[81.13810730 421.34490967]
[81.13810730 406.34490967]
[81.13810730 391.34490967]
[81.13810730 376.34490967]
[81.13810730 361.34490967]
[67.02539825 358.08331299]
[53.99162674 351.74728394]
[42.69742584 342.65420532]
[33.71610260 331.26132202]
[27.50452614 318.14279175]
[24.37987900 303.96057129]
[24.50347328 289.43121338]
[27.87242699 275.28955078]
[34.31962967 262.25158691]
[43.52203751 250.97814941]
[55.01685333 242.04154968]
[68.22480774 235.89639282]
[82.47933197 232.85652161]
[82.79138947 217.85975647]
[83.10344696 202.86300659]
[74.93996429 193.88163757]
[75.11640167 181.34417725]
[84.08547974 172.01629639]
[82.22067261 169.84147644]
[81.13397980 166.77340698]
[81.17907715 163.11555481]
[82.58918762 159.29682922]
[85.43609619 155.82456970]
[87.30370331 140.94129944]
[89.17131805 126.05801392]
[91.03893280 111.17473602]
[85.78751373 98.21656036]
[94.07778931 86.95765686]
[95.94540405 72.07437134]
[97.81301117 57.19109344]
[99.68062592 42.30781555]
[101.08293152 27.37350655]
[102.01856232 12.40271473]
[102.95418549 -2.56807685]
[96.09274292 -16.82399368]
[104.60884094 -29.04386520]
[105.54447174 -44.01465607]
[93.35466766 -35.27345276]
[78.52413177 -37.52184677]
[69.47296143 -49.48329926]
[71.34000397 -64.36665344]
[83.06522369 -73.72181702]
[97.99159241 -72.23736572]
[107.64507294 -60.75463486]
[110.43739319 -75.49243927]
[103.81835175 -86.61188507]
[106.49082184 -98.86247253]
[116.47901154 -105.75765228]
[119.57733154 -120.43417358]
[122.67565155 -135.11070251]
[108.59736633 -140.36993408]
[95.46021271 -147.66876221]
[83.55769348 -156.84414673]
[73.15570831 -167.69110107]
[64.48664856 -179.96730042]
[57.74417114 -193.39848328]
[53.07891083 -207.68458557]
[50.59509659 -222.50648499]
[50.34821320 -237.53300476]
[52.34377670 -252.42849731]
[56.53720474 -266.86013794]
[62.83481598 -280.50558472]
[71.09592438 -293.05993652]
[81.13596344 -304.24273682]
[92.73063660 -313.80419922]
[105.62091827 -321.53063965]
[119.51883698 -327.24951172]
[134.11390686 -330.83303833]
[149.08006287 -332.20117188]
[164.08296204 -331.32330322]
[178.78744507 -328.21908569]
[192.86497498 -322.95785522]
[206.00108337 -315.65713501]
[217.90229797 -306.48004150]
[228.30273438 -295.63162231]
[236.97006226 -283.35418701]
[243.71061707 -269.92205811]
[248.37384033 -255.63526917]
[250.85554504 -240.81303406]
[251.10029602 -225.78646851]
[249.10260010 -210.89126587]
[244.90711975 -196.46020508]
[238.60755920 -182.81567383]
[230.34468079 -170.26249695]
[220.30303955 -159.08111572]
[208.70700073 -149.52131653]
[195.81561279 -141.79669189]
[181.91688538 -136.07980347]
[167.32130432 -132.49836731]
[152.35494995 -131.13238525]
[137.35217285 -132.01237488]
[134.25386047 -117.33585358]
[131.15553284 -102.65932465]
[137.51104736 -86.33120728]
[125.17520142 -72.70011139]
[122.38287354 -57.96231079]
[120.51526642 -43.07902908]
[119.57963562 -28.10823822]
[126.50800323 -14.92313290]
[117.92498016 -1.63244843]
[116.98934937 13.33834267]
[116.05371857 28.30913544]
[118.15831757 31.21398735]
[118.92418671 35.30240250]
[117.80172729 39.91677856]
[114.56390381 44.17542648]
[112.69629669 59.05870819]
[110.82868195 73.94198608]
[108.96106720 88.82526398]
[114.21248627 101.78343964]
[105.92221069 113.04234314]
[104.05459595 127.92562866]
[102.18698883 142.80889893]
[100.31937408 157.69218445]
[99.07249451 172.64027405]
[107.99427795 188.71452332]
[98.10019684 203.17506409]
[97.78813934 218.17181396]
[97.47608948 233.16856384]
[112.51589203 237.15995789]
[126.16317749 244.61698914]
[137.63322449 255.10618591]
[146.26763916 268.01977539]
[151.57212830 282.61108398]
[153.24481201 298.03756714]
[151.19338989 313.40945435]
[145.54025269 327.84118652]
[136.61512756 340.50238037]
[124.93590546 350.66549683]
[111.17858124 357.74789429]
[96.13810730 361.34490967]
[96.13810730 376.34490967]
[96.13810730 391.34490967]
[96.13810730 406.34490967]
[96.13810730 421.34490967]
[96.13810730 436.34490967]
[96.13810730 451.34490967]
[96.13810730 466.34490967]
[96.13810730 481.34490967]
[96.13810730 496.34490967]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[23 129]
[24 128]
[25 127]
[28 125]
[33 124]
[34 123]
[35 122]
[36 121]
[38 119]
[39 118]
[40 117]
[41 116]
[42 112]
[43 111]
[44 110]
[46 108]
[47 107]
[54 106]
[55 105]
[58 103]
[59 102]
[60 101]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
