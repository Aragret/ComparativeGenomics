%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:30 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGACAGCCCAUGCAUUUGUAAUAAUCUUCUUCAUAGUAAUACCCAUCAUAAUCGGAGGCUUUxxxxxxxxxxUAGCUUUUAUAGUAAAGAUACCUCUUUACGGACUCCACUUAUGACUCCCUAAAGCCCAUGCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[45.87406921 496.04290771]
[45.87406921 481.04290771]
[45.87406921 466.04290771]
[45.87406921 451.04290771]
[45.87406921 436.04290771]
[45.87406921 421.04290771]
[45.87406921 406.04290771]
[45.87406921 391.04290771]
[45.87406921 376.04290771]
[45.87406921 361.04290771]
[31.14425850 358.30923462]
[17.16388512 352.91397095]
[4.40960455 345.03948975]
[-6.68344069 334.95269775]
[-15.73647022 322.99606323]
[-22.43999672 309.57589722]
[-26.56440926 295.14859009]
[-27.96783257 280.20510864]
[-26.60100937 265.25424194]
[-22.50903320 250.80526733]
[-15.82985306 237.35069275]
[-6.78962708 225.34941101]
[4.30493212 215.21101379]
[17.07696724 207.28186035]
[31.09227562 201.83325195]
[45.87406921 199.05210876]
[45.87406921 184.05210876]
[37.99792862 196.81793213]
[27.60586357 207.63481140]
[15.16566944 216.01583862]
[1.23733330 221.58374023]
[-13.55216789 224.08786011]
[-28.53709030 223.41551208]
[-43.04290009 219.59692383]
[-56.41661835 212.80401611]
[-68.05624390 203.34255981]
[-77.43781281 191.63845825]
[-84.13903046 178.21855164]
[-87.85823822 163.68695068]
[-88.42801666 148.69778442]
[-85.82272339 133.92576599]
[-80.15962982 120.03586578]
[-71.69365692 107.65332031]
[-60.80589676 97.33553314]
[-47.98646164 89.54695129]
[-33.81240463 84.63816833]
[-18.92176628 82.83016205]
[-3.98484159 84.20430756]
[10.32599163 88.69875336]
[23.36653900 96.11118317]
[34.54978943 106.10792542]
[43.37232971 118.23899841]
[49.43701935 131.95831299]
[52.47086334 146.64830017]
[52.33702469 161.64996338]
[60.32694244 148.95504761]
[68.31685638 136.26011658]
[76.30677795 123.56517792]
[84.29669189 110.87025452]
[81.18539429 96.71871185]
[88.90339661 84.45581818]
[103.00837708 81.13983154]
[110.99829865 68.44490051]
[118.98821259 55.74997330]
[126.97812653 43.05504227]
[127.78064728 27.25420380]
[141.10826111 20.60410690]
[149.09817505 7.90917826]
[135.68544006 14.62471771]
[121.03911591 17.86279869]
[106.04543304 17.42749214]
[91.61164093 13.34513569]
[78.61110687 5.86274862]
[67.83048248 -4.56692171]
[59.92207718 -17.31278801]
[55.36442184 -31.60361862]
[54.43329620 -46.57469177]
[57.18504333 -61.32012558]
[63.45315552 -74.94770050]
[72.85836029 -86.63282776]
[84.83155823 -95.66844940]
[98.64826965 -101.50784302]
[113.47245789 -103.79766846]
[128.40715027 -102.39937592]
[142.54864502 -97.39756775]
[155.04127502 -89.09490204]
[165.12911987 -77.99375916]
[172.20178223 -64.76585388]
[175.83129883 -50.21159363]
[175.79806519 -35.21162796]
[172.10408020 -20.67359352]
[164.97401428 -7.47877407]
[177.91206360 -15.06868267]
[190.85012817 -22.65859032]
[203.78817749 -30.24849892]
[216.72624207 -37.83840561]
[229.66429138 -45.42831421]
[242.60234070 -53.01822281]
[250.22836304 -67.53634644]
[266.62301636 -67.92063141]
[274.92086792 -53.77576065]
[266.58584595 -39.65276337]
[250.19226074 -40.08016968]
[237.25419617 -32.49026108]
[224.31614685 -24.90035057]
[211.37808228 -17.31044388]
[198.44003296 -9.72053432]
[185.50196838 -2.13062644]
[172.56391907 5.45928192]
[161.79310608 15.89909458]
[153.80319214 28.59402466]
[153.57217407 43.48683929]
[139.67304993 51.04496002]
[131.68313599 63.73989105]
[123.69322205 76.43482208]
[115.70330811 89.12974548]
[118.81460571 103.28128815]
[111.09660339 115.54418182]
[96.99162292 118.86016846]
[89.00170135 131.55509949]
[81.01178741 144.25003052]
[73.02187347 156.94496155]
[65.03195953 169.63989258]
[60.87406921 184.05210876]
[60.87406921 199.05210876]
[75.65586090 201.83325195]
[89.67117310 207.28186035]
[102.44320679 215.21101379]
[113.53776550 225.34941101]
[122.57798767 237.35069275]
[129.25717163 250.80526733]
[133.34915161 265.25424194]
[134.71597290 280.20510864]
[133.31254578 295.14859009]
[129.18814087 309.57589722]
[122.48460388 322.99606323]
[113.43157959 334.95269775]
[102.33853149 345.03948975]
[89.58425140 352.91397095]
[75.60388184 358.30923462]
[60.87406921 361.04290771]
[60.87406921 376.04290771]
[60.87406921 391.04290771]
[60.87406921 406.04290771]
[60.87406921 421.04290771]
[60.87406921 436.04290771]
[60.87406921 451.04290771]
[60.87406921 466.04290771]
[60.87406921 481.04290771]
[60.87406921 496.04290771]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[26 125]
[27 124]
[55 123]
[56 122]
[57 121]
[58 120]
[59 119]
[62 116]
[63 115]
[64 114]
[65 113]
[67 111]
[68 110]
[92 109]
[93 108]
[94 107]
[95 106]
[96 105]
[97 104]
[98 103]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
