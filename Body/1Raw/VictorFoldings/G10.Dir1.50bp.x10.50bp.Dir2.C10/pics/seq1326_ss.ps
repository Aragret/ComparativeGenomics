%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:06 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGAACACACAAUAGCUAAGACCCAAACUGGGAUUAGAUACCCCACUAUGCUUAGCCCUAAACxxxxxxxxxxUAAUCCAAGCCUACGUUUUCACACUUCUAGUAAGCCUCUACCUGCACGACAACACAUAAUCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[92.50000000 259.37823486]
[92.50000000 244.37823486]
[92.50000000 229.37823486]
[92.50000000 214.37823486]
[92.50000000 199.37823486]
[92.50000000 184.37823486]
[92.50000000 169.37823486]
[92.50000000 154.37823486]
[92.50000000 139.37823486]
[92.50000000 124.37822723]
[87.16918945 119.10258484]
[79.97780609 132.26632690]
[73.25930023 145.67758179]
[58.45829773 148.11280823]
[47.79712677 137.56105042]
[50.07953262 122.73571777]
[63.41934204 115.87921906]
[76.50756073 108.55129242]
[71.17675018 103.27565002]
[56.17755890 103.43168640]
[41.17837143 103.58772278]
[26.17918205 103.74375916]
[11.24487495 105.14606476]
[-3.52118087 107.78492737]
[-18.28723717 110.42378998]
[-33.05329132 113.06265259]
[-41.08678436 123.20745087]
[-53.48598480 125.07260895]
[-63.48596573 118.19454956]
[-78.30372620 120.52565002]
[-93.12148285 122.85675812]
[-107.93923950 125.18785858]
[-122.64629364 133.62225342]
[-134.82238770 121.82482910]
[-126.85668182 106.85873413]
[-110.27034760 110.37010193]
[-95.45258331 108.03900146]
[-80.63482666 105.70789337]
[-65.81707001 103.37679291]
[-52.82250595 91.62344360]
[-35.69215775 98.29660034]
[-20.92609978 95.65773773]
[-6.16004515 93.01886749]
[8.60601044 90.38000488]
[-3.96133232 82.19087219]
[-9.46469593 68.23691559]
[-5.87069798 53.67383575]
[5.49275160 43.88241196]
[20.42708397 42.48037338]
[33.41436005 49.98574829]
[39.65604401 63.62544632]
[36.84595108 78.35987854]
[26.02314568 88.74456787]
[41.02233505 88.58853149]
[56.02152252 88.43249512]
[71.02071381 88.27645874]
[81.11936188 77.18514252]
[79.87248230 62.23705673]
[78.62561035 47.28897095]
[77.37873840 32.34088135]
[62.46288300 30.22782898]
[48.39138412 24.84817696]
[35.87005997 16.47176743]
[25.52697945 5.51875830]
[17.88094521 -7.46145344]
[13.31547832 -21.81778526]
[12.05958080 -36.83012772]
[14.17624855 -51.74547195]
[19.55930901 -65.81566620]
[27.93875313 -78.33496094]
[38.89426804 -88.67538452]
[51.87633133 -96.31827545]
[66.23377228 -100.88026428]
[81.24641418 -102.13252258]
[96.16124725 -100.01223755]
[110.23014069 -94.62577057]
[122.74739838 -86.24329376]
[133.08517456 -75.28527069]
[140.72491455 -62.30135727]
[145.28341675 -47.94281769]
[146.53204346 -32.92986679]
[144.40814209 -18.01555061]
[139.01826477 -3.94796515]
[130.63276672 8.56726456]
[119.67223358 18.90237999]
[106.68647003 26.53897858]
[92.32682037 31.09400940]
[93.57369995 46.04209518]
[94.82057190 60.99018097]
[96.06744385 75.93827057]
[104.50268555 76.53479767]
[112.05716705 79.93887329]
[117.84860992 85.62431335]
[121.24567413 92.80694580]
[136.17997742 91.40464020]
[151.11428833 90.00234222]
[136.33880615 87.41677094]
[125.47349548 77.07534790]
[122.16149902 62.44556046]
[127.51333618 48.43278503]
[139.73452759 39.73551559]
[154.72729492 39.26995850]
[167.46467590 47.19232941]
[181.96026611 43.33517075]
[196.45587158 39.47801208]
[210.20759583 29.56205368]
[223.54289246 40.03135300]
[217.17431641 55.74369049]
[200.31303406 53.97360611]
[185.81742859 57.83076477]
[171.32183838 61.68792725]
[171.32183838 69.18792725]
[171.32183838 84.18792725]
[171.32183838 91.68792725]
[185.81742859 95.54508209]
[197.77413940 85.65483856]
[213.26272583 84.71504211]
[226.32751465 93.08705902]
[231.94485474 107.55168152]
[227.95472717 122.54696655]
[215.89143372 132.30691528]
[200.39356995 133.07864380]
[187.42034912 124.56539154]
[181.96026611 110.04067993]
[167.46467590 106.18352509]
[152.51658630 104.93664551]
[137.58227539 106.33895111]
[122.64797211 107.74125671]
[136.42636108 113.67050934]
[151.39544678 112.70786285]
[165.14927673 118.69385529]
[174.64608765 130.30464172]
[177.78561401 144.97241211]
[173.87350464 159.45327759]
[163.77496338 170.54469299]
[149.72335815 175.79370117]
[134.82627869 174.03945923]
[122.37835693 165.66992188]
[115.13253021 152.53607178]
[114.69138336 137.54196167]
[107.50000000 124.37822723]
[107.50000000 139.37823486]
[107.50000000 154.37823486]
[107.50000000 169.37823486]
[107.50000000 184.37823486]
[107.50000000 199.37823486]
[107.50000000 214.37823486]
[107.50000000 229.37823486]
[107.50000000 244.37823486]
[107.50000000 259.37823486]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[19 56]
[20 55]
[21 54]
[22 53]
[23 44]
[24 43]
[25 42]
[26 41]
[29 39]
[30 38]
[31 37]
[32 36]
[57 90]
[58 89]
[59 88]
[60 87]
[94 128]
[95 127]
[96 126]
[103 111]
[104 110]
[105 109]
[114 125]
[115 124]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
