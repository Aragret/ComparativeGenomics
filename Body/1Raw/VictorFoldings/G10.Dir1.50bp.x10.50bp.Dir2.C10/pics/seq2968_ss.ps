%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:11 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGGGAACAAGUUACCCUAGGGAUAACAGCGCAAUCCUAUUCUAGAGUCCAUAUCAACAAUAGxxxxxxxxxxCUCCCUCUCUCCUACUCCUGCUCGCAUCUGCUAUAGUGGAGGCCGGAGCAGGAACAGGUUCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[89.85421753 310.62359619]
[92.44521332 291.41586304]
[92.75727081 276.41912842]
[93.06932831 261.42236328]
[93.38138580 246.42561340]
[93.69344330 231.42886353]
[94.00550079 216.43211365]
[94.31755066 201.43534851]
[94.62960815 186.43859863]
[94.94166565 171.44184875]
[95.25372314 156.44509888]
[83.26689148 147.42756653]
[68.94429016 151.88438416]
[54.62169647 156.34120178]
[54.46672440 170.08297729]
[44.82489777 183.21177673]
[26.97277069 189.32868958]
[15.47096825 198.95721436]
[12.62769985 214.74630737]
[-1.55733716 222.24058533]
[-16.20259666 215.69108582]
[-20.07349014 200.12202454]
[-10.20059776 187.47665405]
[5.84244156 187.45541382]
[17.34424591 177.82688904]
[14.52826691 170.87561035]
[6.08033180 150.02177429]
[-8.87991714 151.11308289]
[-23.84016609 152.20439148]
[-38.80041504 153.29570007]
[-53.76066208 154.38702393]
[-61.04451370 167.98661804]
[-74.53567505 175.46940613]
[-89.92916107 174.44764709]
[-102.31298065 165.24740601]
[-107.73548889 150.80441284]
[-104.46638489 135.72738647]
[-93.54883575 124.82736206]
[-78.46658325 121.58248901]
[-64.03231812 127.02819061]
[-54.85197449 139.42677307]
[-39.89172363 138.33546448]
[-24.93147659 137.24414062]
[-9.97122765 136.15283203]
[4.98902130 135.06152344]
[32.94467926 127.02311707]
[50.16487885 142.01860046]
[64.48748016 137.56178284]
[78.81007385 133.10496521]
[65.60141754 108.73724365]
[72.26192474 84.70424652]
[91.39030457 73.50280762]
[90.76632690 58.51579285]
[90.14234924 43.52877426]
[89.51837158 28.54175949]
[74.58668518 26.81227875]
[60.10940933 22.76813889]
[46.44306946 16.50893402]
[33.92420959 8.18879890]
[22.86111641 -1.98737288]
[13.52623081 -13.76898575]
[6.14943123 -26.86590576]
[0.91237801 -40.95560837]
[-2.05596137 -55.69112778]
[-2.68248892 -70.70957947]
[-0.95177597 -85.64112854]
[3.09355712 -100.11806488]
[9.35389042 -113.78388977]
[17.67505836 -126.30206299]
[27.85214233 -137.36431885]
[39.63452530 -146.69822693]
[52.73205566 -154.07394409]
[66.82218933 -159.30984497]
[81.55795288 -162.27696228]
[96.57645416 -162.90225220]
[111.50786591 -161.17030334]
[125.98446655 -157.12377930]
[139.64978027 -150.86231995]
[152.16726685 -142.54011536]
[163.22866821 -132.36212158]
[172.56161499 -120.57896423]
[179.93624878 -107.48082733]
[185.17097473 -93.39025879]
[188.13688660 -78.65425873]
[188.76094055 -63.63570023]
[187.02775574 -48.70443726]
[182.98004150 -34.22816467]
[176.71745300 -20.56337547]
[168.39421082 -8.04657555]
[158.21530151 3.01399779]
[146.43138123 12.34596729]
[133.33264160 19.71952438]
[119.24163818 24.95309067]
[104.50538635 27.91778183]
[105.12936401 42.90479660]
[105.75334167 57.89181519]
[106.37731934 72.87882996]
[131.15255737 87.45564270]
[133.00164795 121.35047913]
[147.98136902 122.13032532]
[162.96107483 122.91016388]
[177.94079590 123.69001007]
[192.92050171 124.46985626]
[207.91320801 124.93789673]
[222.91239929 125.09393311]
[236.79231262 117.50061035]
[249.43840027 125.36988831]
[264.43759155 125.52592468]
[279.43676758 125.68196106]
[294.43597412 125.83799744]
[309.43515015 125.99403381]
[323.44833374 117.47563934]
[337.70013428 125.58846283]
[337.52954102 141.98672485]
[323.11203003 149.80130005]
[309.27911377 140.99322510]
[294.27993774 140.83718872]
[279.28073120 140.68115234]
[264.28155518 140.52511597]
[249.28236389 140.36907959]
[236.47529602 147.97355652]
[222.75636292 140.09312439]
[207.75717163 139.93708801]
[203.73892212 142.62580872]
[197.97618103 142.77436829]
[192.14065552 139.44956970]
[177.16094971 138.66972351]
[162.18122864 137.88987732]
[147.20152283 137.11003113]
[132.22180176 136.33018494]
[126.72897339 141.43693542]
[139.50103760 149.30296326]
[154.20970154 152.24493408]
[163.18745422 164.26158142]
[161.83799744 179.20075989]
[150.85218811 189.41409302]
[135.85441589 189.67266846]
[124.52306366 179.84411621]
[122.65927887 164.96090698]
[115.74330902 151.65040588]
[110.25047302 156.75715637]
[109.93842316 171.75390625]
[109.62636566 186.75065613]
[109.31430817 201.74740601]
[109.00225067 216.74417114]
[108.69019318 231.74092102]
[108.37813568 246.73767090]
[108.06608582 261.73443604]
[107.75402832 276.73117065]
[107.44197083 291.72793579]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 150]
[3 149]
[4 148]
[5 147]
[6 146]
[7 145]
[8 144]
[9 143]
[10 142]
[11 141]
[12 49]
[13 48]
[14 47]
[17 25]
[18 24]
[27 45]
[28 44]
[29 43]
[30 42]
[31 41]
[52 97]
[53 96]
[54 95]
[55 94]
[99 130]
[100 129]
[101 128]
[102 127]
[103 126]
[104 123]
[105 122]
[107 120]
[108 119]
[109 118]
[110 117]
[111 116]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
