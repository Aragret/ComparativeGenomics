%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:21 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGUAUGAGAAUCGAACCCAUCCCUGAGAAUCCAAAAUUCUCCGUGCCACCUAUCACACCCCAxxxxxxxxxxGGGAGAAGCCCCGGCAGGUUUGAAGCUGCUUCUUCGAAUUUGCAAUUCAAUAUGAAAAUCCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[94.59911346 275.36663818]
[94.59911346 260.36663818]
[94.59911346 245.36663818]
[94.59911346 230.36663818]
[94.59911346 215.36663818]
[94.59911346 200.36663818]
[94.59911346 185.36663818]
[94.59911346 170.36663818]
[94.59911346 155.36663818]
[94.59911346 140.36663818]
[78.55461121 132.11380005]
[68.43333435 118.33625031]
[65.68984222 102.42153931]
[70.08193207 87.86554718]
[79.88389587 77.50846100]
[72.97689819 64.19330597]
[66.06990051 50.87814713]
[59.16290283 37.56299210]
[51.43881607 24.70458984]
[42.92772675 12.35301685]
[34.41663742 0.00144460]
[25.90554619 -12.35012817]
[17.39445496 -24.70170021]
[8.88336563 -37.05327225]
[0.37227553 -49.40484619]
[3.10959387 -34.65672302]
[-3.75359845 -21.31893539]
[-17.34516716 -14.97312927]
[-31.97726059 -18.27492142]
[-41.52658463 -29.84256554]
[-41.99690628 -44.83518982]
[-33.19139481 -56.97862625]
[-18.79376030 -61.19098282]
[-33.65680695 -63.21331787]
[-48.51985550 -65.23565674]
[-63.38290024 -67.25798798]
[-78.24594879 -69.28031921]
[-93.10899353 -71.30265808]
[-106.69799042 -62.77512741]
[-121.78940582 -68.21836853]
[-126.80638885 -83.45678711]
[-117.90035248 -96.80077362]
[-101.90323639 -98.01396179]
[-91.08666229 -86.16570282]
[-76.22360992 -84.14337158]
[-61.36056519 -82.12103271]
[-46.49752045 -80.09870148]
[-31.63447380 -78.07636261]
[-16.77142525 -76.05403137]
[-11.27859402 -81.16077423]
[-0.29292896 -91.37425232]
[5.19990349 -96.48098755]
[4.26427507 -111.45178223]
[3.32864642 -126.42257690]
[2.39301801 -141.39337158]
[-4.60246706 -128.12448120]
[-14.41974831 -116.78336334]
[-26.54925156 -107.95867920]
[-40.36138535 -102.10846710]
[-55.13922501 -99.53639984]
[-70.11570740 -100.37598419]
[-84.51347351 -104.58363342]
[-97.58519745 -111.94094849]
[-108.65237427 -122.06604004]
[-117.14056396 -134.43336487]
[-122.60917664 -148.40098572]
[-124.77435303 -163.24389648]
[-123.52371216 -178.19166565]
[-118.92217255 -192.46842957]
[-111.20858765 -205.33312988]
[-100.78331757 -216.11801147]
[-88.18750763 -224.26329041]
[-74.07495117 -229.34617615]
[-59.17816544 -231.10282898]
[-44.27038574 -229.44207764]
[-30.12540817 -224.45011902]
[-17.47743988 -216.38607788]
[-6.98298168 -205.66850281]
[0.81324303 -192.85371399]
[5.50656557 -178.60685730]
[6.85332680 -163.66545105]
[13.48182487 -177.12141418]
[20.11032295 -190.57737732]
[14.78705788 -205.45819092]
[21.62068939 -219.70869446]
[36.55694580 -224.87434387]
[50.73440933 -217.89042664]
[55.74184418 -202.90039062]
[48.60842896 -188.79756165]
[33.56628799 -183.94888306]
[26.93778992 -170.49291992]
[20.30929184 -157.03695679]
[17.36380959 -142.32899475]
[18.29943848 -127.35820007]
[19.23506737 -112.38741302]
[20.17069435 -97.41661835]
[12.72384834 -57.91593552]
[21.23493767 -45.56436157]
[29.74602890 -33.21279144]
[38.25711823 -20.86121750]
[46.76820755 -8.50964546]
[55.27930069 3.84192705]
[63.79039001 16.19349861]
[67.97785187 1.78984857]
[81.02996826 -5.60219669]
[95.53633881 -1.78577268]
[103.26092529 11.07233047]
[99.81805420 25.67187309]
[87.16242981 33.72390747]
[72.47805786 30.65599442]
[79.38505554 43.97114944]
[86.29205322 57.28630447]
[93.19905090 70.60146332]
[114.62665558 69.64844513]
[133.58029175 83.97223663]
[139.64376831 109.32775116]
[153.66047668 114.66926575]
[167.67720032 120.01077271]
[181.69390869 125.35228729]
[195.71061707 130.69380188]
[212.66456604 130.68414307]
[217.36717224 146.97283936]
[203.01684570 156.00082397]
[190.36911011 144.71051025]
[176.35240173 139.36900330]
[162.33567810 134.02749634]
[148.31896973 128.68597412]
[134.30226135 123.34446716]
[128.12646484 127.60000610]
[137.86643982 139.00759888]
[147.60639954 150.41519165]
[157.34637451 161.82276917]
[169.04804993 171.20736694]
[168.50334167 186.19746399]
[156.15136719 194.70797729]
[141.95037842 189.87767029]
[137.34904480 175.60231018]
[130.15766907 162.43858337]
[122.96628571 149.27484131]
[115.77490234 136.11109924]
[109.59911346 140.36663818]
[109.59911346 155.36663818]
[109.59911346 170.36663818]
[109.59911346 185.36663818]
[109.59911346 200.36663818]
[109.59911346 215.36663818]
[109.59911346 230.36663818]
[109.59911346 245.36663818]
[109.59911346 260.36663818]
[109.59911346 275.36663818]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[15 113]
[16 112]
[17 111]
[18 110]
[19 103]
[20 102]
[21 101]
[22 100]
[23 99]
[24 98]
[25 97]
[33 49]
[34 48]
[35 47]
[36 46]
[37 45]
[38 44]
[52 96]
[53 95]
[54 94]
[55 93]
[81 92]
[82 91]
[83 90]
[116 128]
[117 127]
[118 126]
[119 125]
[120 124]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
