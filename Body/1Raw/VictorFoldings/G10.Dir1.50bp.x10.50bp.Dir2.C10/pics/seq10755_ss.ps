%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:03 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGUAUCUACUCAUCUUCCUAAUUACCAUACUAAUCUUAGUUACCGCUAACAACCUAUUCCAAxxxxxxxxxxUUUAUCUGCCUCUUCCUACACAUCGGGCGAGGCCUAUAUUACGGAUCAUUUCUCUACUCACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[97.71949768 225.52061462]
[97.09552002 210.53359985]
[96.47154236 195.54658508]
[95.84756470 180.55957031]
[95.22358704 165.57255554]
[94.59960938 150.58552551]
[93.97563171 135.59851074]
[93.35165405 120.61150360]
[79.69541168 114.40608978]
[67.99578857 123.79325104]
[56.29616547 133.18041992]
[44.59654236 142.56758118]
[49.97125626 156.70857239]
[50.71108627 171.81842041]
[46.74354172 186.41683960]
[38.45733261 199.07362366]
[26.66424942 208.54876709]
[12.51966000 213.91400146]
[-2.59069133 214.64370728]
[-17.18644714 210.66638184]
[-29.83766365 202.37168884]
[-39.30490494 190.57226562]
[-44.66066742 176.42408752]
[-45.38024521 161.31324768]
[-41.39314270 146.72015381]
[-33.08997726 134.07450867]
[-21.28420639 124.61516571]
[-7.13243914 119.26889038]
[7.97887659 118.55944061]
[22.56928825 122.55632019]
[35.20937729 130.86795044]
[46.90900421 121.48078918]
[58.60862732 112.09362793]
[70.30825043 102.70646667]
[68.53086853 95.42012024]
[64.97610474 80.84741211]
[63.19872665 73.56106567]
[48.49076462 70.61557770]
[33.78280258 67.67009735]
[19.07484055 64.72461700]
[3.72087145 70.48548889]
[-8.77158356 59.86143112]
[-5.55135632 43.78156281]
[10.06885815 38.78747177]
[22.02032280 50.01665497]
[36.72828674 52.96213531]
[51.43624496 55.90761948]
[66.14421082 58.85310364]
[83.26387787 65.26047516]
[95.04483032 76.68412018]
[100.27455139 90.89167786]
[107.45706177 77.72309113]
[114.63957214 64.55451202]
[116.01805878 55.45771790]
[122.11094666 51.18895340]
[129.56585693 38.17264557]
[137.02076721 25.15633392]
[123.87918091 32.38811493]
[109.44178009 36.45767593]
[94.45793915 37.15377808]
[79.70541382 34.44029617]
[65.94994354 28.45807076]
[53.90551376 19.51761436]
[44.19730377 8.08298779]
[37.32922363 -5.25228357]
[33.65776443 -19.79602432]
[33.37350082 -34.79333115]
[36.49118042 -49.46575546]
[42.84898376 -63.05171585]
[52.11690521 -74.84602356]
[63.81388092 -84.23648834]
[77.33277130 -90.73567963]
[91.97187042 -94.00626373]
[106.97132874 -93.87847900]
[121.55258179 -90.35895538]
[134.95878601 -83.63037109]
[146.49406433 -74.04198456]
[155.55969238 -62.09148407]
[161.68510437 -48.39916992]
[164.55233765 -33.67575836]
[164.01260376 -18.68547249]
[160.09388733 -4.20639563]
[152.99845886 9.01156330]
[165.93652344 1.42165470]
[178.87457275 -6.16825342]
[182.96472168 -21.19850349]
[196.19387817 -28.71144104]
[210.49771118 -24.71947670]
[223.43577576 -32.30938339]
[236.37382507 -39.89929199]
[249.31188965 -47.48920059]
[262.24993896 -55.07910919]
[266.27239990 -67.37844086]
[277.25808716 -73.42275238]
[289.02139282 -70.43404388]
[302.11453247 -77.75314331]
[302.95959473 -93.15734863]
[312.01718140 -105.64590454]
[326.39700317 -111.23376465]
[341.51052856 -108.13786316]
[352.53509521 -97.34609222]
[355.95281982 -82.30206299]
[350.67306519 -67.80626678]
[338.38064575 -58.48427200]
[322.99798584 -57.31068420]
[309.43365479 -64.65998840]
[296.34048462 -57.34088516]
[288.22116089 -41.81424332]
[269.83984375 -42.14105225]
[256.90179443 -34.55114746]
[243.96374512 -26.96123695]
[231.02568054 -19.37132835]
[218.08763123 -11.78142071]
[214.59269714 2.65191126]
[201.57978821 10.53346539]
[186.46447754 6.76980257]
[173.52642822 14.35971069]
[160.58836365 21.94961929]
[150.03707886 32.61124420]
[142.58216858 45.62755585]
[135.12725830 58.64386368]
[127.80815125 71.73701477]
[120.62564087 84.90560150]
[113.44313812 98.07418060]
[122.57758331 86.17620850]
[135.15252686 77.99874878]
[149.73278809 74.47509003]
[164.65431213 76.00740051]
[178.21412659 82.42079163]
[188.86462402 92.98329926]
[195.39030457 106.48943329]
[197.04635620 121.39773560]
[193.64379883 136.00672913]
[185.57095337 148.64907837]
[173.74917603 157.88192749]
[159.52767944 162.65153503]
[144.52955627 162.41352844]
[130.46656799 157.19508362]
[118.94369507 147.59178162]
[111.27604675 134.69964600]
[108.33866882 119.98752594]
[108.96264648 134.97453308]
[109.58662415 149.96154785]
[110.21060181 164.94857788]
[110.83457947 179.93559265]
[111.45855713 194.92260742]
[112.08253479 209.90962219]
[112.70651245 224.89663696]
[119.40650177 240.47053528]
[106.29597473 251.21997070]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 148]
[2 147]
[3 146]
[4 145]
[5 144]
[6 143]
[7 142]
[8 141]
[9 34]
[10 33]
[11 32]
[12 31]
[37 48]
[38 47]
[39 46]
[40 45]
[51 124]
[52 123]
[53 122]
[55 121]
[56 120]
[57 119]
[83 118]
[84 117]
[85 116]
[88 113]
[89 112]
[90 111]
[91 110]
[92 109]
[95 107]
[96 106]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
