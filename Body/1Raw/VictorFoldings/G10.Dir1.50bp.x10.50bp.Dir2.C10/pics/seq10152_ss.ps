%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:48 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGACUCCACUUAUGACUCCCUAAAGCCCAUGUCGAAGCCCCCAUCGCUGGGUCAAUAGUACUxxxxxxxxxxCACCCCUGACUCCCCUCAGCCAUAGAAGGCCCCACCCCAGUCUCAGCCCUACUCCACUCACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[192.00376892 486.50698853]
[192.00376892 471.50698853]
[192.00376892 456.50698853]
[192.00376892 441.50698853]
[192.00376892 426.50698853]
[192.00376892 411.50698853]
[192.00376892 396.50698853]
[192.00376892 381.50698853]
[192.00376892 366.50698853]
[192.00376892 351.50698853]
[189.05828857 336.79904175]
[183.28201294 322.95581055]
[177.50573730 309.11260986]
[162.60745239 310.37826538]
[148.02764893 306.97244263]
[135.19706726 299.21640015]
[125.37871552 287.85897827]
[119.54369354 274.00418091]
[118.27501678 259.00399780]
[121.70948029 244.32637024]
[129.52297974 231.41159058]
[140.96110535 221.53096008]
[128.91941833 212.76470947]
[130.74578857 197.04927063]
[124.96951294 183.20605469]
[113.87234497 178.29075623]
[108.96607208 166.75180054]
[113.39948273 154.59454346]
[107.91245270 140.63415527]
[102.42542267 126.67376709]
[72.35972595 117.99516296]
[65.75332642 80.96718597]
[51.25772858 77.11003113]
[36.76213074 73.25286865]
[25.19058990 79.04538727]
[13.16690350 75.48871613]
[7.01667976 65.02535248]
[-7.39553642 60.86746597]
[-21.80775261 56.70957565]
[-32.81747055 67.41853333]
[-47.71057129 71.17234039]
[-62.48088837 66.96124268]
[-73.15528107 55.91801453]
[-76.86238861 41.01322174]
[-72.60501862 26.25617599]
[-61.52838135 15.61645126]
[-46.61204147 11.95608139]
[-31.86841202 16.25968742]
[-21.26346207 27.36961746]
[-17.64986420 42.29735947]
[-3.23764873 46.45524979]
[11.17456722 50.61313629]
[27.92180252 45.46240234]
[40.61929321 58.75727463]
[55.11488724 62.61443329]
[69.61048126 66.47159576]
[80.59614563 56.25811386]
[77.80382538 41.52030563]
[75.01149750 26.78250122]
[72.21917725 12.04469490]
[57.17740631 10.76104450]
[43.04015732 5.46569395]
[30.85650253 -3.44840527]
[21.53055382 -15.31976795]
[15.75435734 -29.26745987]
[13.95654488 -44.25647354]
[16.27052689 -59.17451859]
[22.52458763 -72.91458130]
[32.25463867 -84.45705414]
[44.73864365 -92.94541168]
[59.05020523 -97.74975586]
[74.12731171 -98.51358795]
[88.85114288 -95.18020630]
[102.12908936 -87.99698639]
[112.97584534 -77.49696350]
[120.58650208 -64.45930481]
[124.39630127 -49.85149765]
[124.12252808 -34.75753784]
[119.78550720 -20.29749680]
[111.70706940 -7.54440403]
[100.48668671 2.55537534]
[86.95698547 9.25237083]
[89.74930573 23.99017715]
[92.54163361 38.72798157]
[95.33395386 53.46578979]
[109.82955170 57.32294846]
[119.57720184 45.92192841]
[129.32485962 34.52090454]
[139.07250977 23.11988449]
[137.59100342 7.38518858]
[147.73373413 -4.73505926]
[163.48321533 -6.05013037]
[175.49554443 4.22018337]
[176.64404297 19.98268700]
[166.24729919 31.88576698]
[150.47352600 32.86753845]
[140.72587585 44.26855850]
[130.97822571 55.66957855]
[121.23057556 67.07060242]
[131.30323792 82.05703735]
[132.95173645 98.58801270]
[127.10202026 112.58839417]
[116.38581085 121.18673706]
[121.87284088 135.14712524]
[127.35987091 149.10751343]
[142.01759338 160.20396423]
[138.81272888 177.42977905]
[144.58900452 191.27299500]
[157.04385376 201.02940369]
[154.80432129 215.75468445]
[169.87301636 214.57498169]
[184.54869080 218.10585022]
[197.39706421 225.98924255]
[207.16639709 237.44241333]
[212.90956116 251.33552551]
[214.07572937 266.30319214]
[210.56323242 280.87860107]
[202.72830200 293.63726807]
[191.34895325 303.33633423]
[197.12522888 317.17953491]
[202.90150452 331.02276611]
[205.20758057 316.20108032]
[211.70489502 302.68127441]
[221.83721924 291.62072754]
[234.73716736 283.96624756]
[249.30046082 280.37310791]
[264.28039551 281.14892578]
[278.39459229 286.22723389]
[290.43481445 295.17337036]
[299.37033081 307.22143555]
[304.43624878 321.34008789]
[305.19888306 336.32070923]
[301.59295654 350.88082886]
[293.92715454 363.77404785]
[282.85766602 373.89663696]
[269.33215332 380.38204956]
[254.50846863 382.67510986]
[239.65557861 380.57949829]
[226.04498291 374.27462769]
[214.84179688 364.30023193]
[207.00376892 351.50698853]
[207.00376892 366.50698853]
[207.00376892 381.50698853]
[207.00376892 396.50698853]
[207.00376892 411.50698853]
[207.00376892 426.50698853]
[207.00376892 441.50698853]
[207.00376892 456.50698853]
[207.00376892 471.50698853]
[207.00376892 486.50698853]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[11 121]
[12 120]
[13 119]
[22 110]
[24 108]
[25 107]
[28 105]
[29 104]
[30 103]
[32 56]
[33 55]
[34 54]
[37 52]
[38 51]
[39 50]
[57 85]
[58 84]
[59 83]
[60 82]
[86 99]
[87 98]
[88 97]
[89 96]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
