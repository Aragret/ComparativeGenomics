%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:33:59 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGAACUAACACAUUAUUUUCCCCUCCCACUCCCAUACUACUAAUCUCAUCAAUACAACCCCCxxxxxxxxxxGCCAUGUGAUUUCACUUCCACUCCAUAACGCUCCUCAUACUAGGCCUACUAACCAACACACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[-59.23774719 268.14166260]
[-63.60399628 283.34844971]
[-78.09278870 286.80160522]
[-88.75441742 297.35287476]
[-99.41604614 307.90417480]
[-110.07766724 318.45547485]
[-120.73929596 329.00674438]
[-131.40092468 339.55804443]
[-142.06254578 350.10934448]
[-152.72418213 360.66061401]
[-163.38580322 371.21191406]
[-174.04742432 381.76321411]
[-178.45825195 399.61044312]
[-195.55061340 403.46417236]
[-205.99043274 414.23498535]
[-216.43023682 425.00576782]
[-219.90002441 441.03366089]
[-235.59599304 445.78433228]
[-247.37145996 434.37072754]
[-243.11285400 418.53417969]
[-227.20104980 414.56597900]
[-216.76123047 403.79516602]
[-206.32142639 393.02435303]
[-206.18476868 380.88809204]
[-197.51881409 371.82608032]
[-184.59872437 371.10156250]
[-173.93708801 360.55029297]
[-163.27546692 349.99899292]
[-152.61384583 339.44769287]
[-141.95220947 328.89642334]
[-131.29058838 318.34512329]
[-120.62895966 307.79382324]
[-109.96733856 297.24255371]
[-99.30570984 286.69125366]
[-88.64408112 276.13995361]
[-85.04042053 261.68786621]
[-69.78903961 257.48004150]
[-78.83769989 247.12362671]
[-87.25564575 236.24832153]
[-95.01318359 224.89251709]
[-102.08296204 213.09623718]
[-108.44004059 200.90109253]
[-114.06200409 188.35009766]
[-118.92902374 175.48751831]
[-123.02392578 162.35871887]
[-126.33228302 149.00997925]
[-128.84242249 135.48840332]
[-130.54548645 121.84165955]
[-131.43548584 108.11789703]
[-131.50924683 94.36549377]
[-130.76655579 80.63297272]
[-129.20999146 66.96875000]
[-126.84505463 53.42101669]
[-123.68009949 40.03755951]
[-119.72628021 26.86557388]
[-114.99753571 13.95151711]
[-109.51055145 1.34093225]
[-103.28466797 -10.92170620]
[-96.34185791 -22.79315186]
[-88.70658875 -34.23153305]
[-80.40579987 -45.19651794]
[-71.46876526 -55.64942551]
[-61.92700577 -65.55339813]
[-51.81416321 -74.87350464]
[-41.16591263 -83.57686615]
[-30.01980400 -91.63280487]
[-18.41514587 -99.01290131]
[-6.39286709 -105.69112396]
[6.00463390 -111.64392853]
[18.73363304 -116.85031891]
[31.74923897 -121.29192352]
[45.00555038 -124.95308685]
[58.45581055 -127.82089996]
[72.05258942 -129.88523865]
[85.74793243 -131.13883972]
[99.49353790 -131.57725525]
[113.24092865 -131.19895935]
[126.94161987 -130.00527954]
[140.54730225 -128.00044250]
[154.00997925 -125.19148254]
[167.28218079 -121.58833313]
[180.31707764 -117.20370483]
[193.06874084 -112.05303955]
[205.49215698 -106.15452576]
[217.54353333 -99.52894592]
[229.18035889 -92.19968414]
[237.94656372 -104.37152100]
[246.71276855 -116.54335785]
[247.81982422 -132.90509033]
[262.66018677 -139.88331604]
[275.96737671 -130.29942322]
[274.05209351 -114.01251221]
[258.88461304 -107.77714539]
[250.11840820 -95.60530853]
[241.35218811 -83.43347168]
[252.29417419 -74.45562744]
[262.66726685 -64.82609558]
[272.43270874 -54.58085632]
[281.55404663 -43.75817871]
[289.99716187 -32.39849472]
[297.73056030 -20.54423332]
[304.72531128 -8.23967838]
[310.95532227 4.46920729]
[316.39730835 17.53494835]
[321.03094482 30.90873909]
[324.83892822 44.54061890]
[327.80700684 58.37966919]
[329.92410278 72.37419128]
[331.18234253 86.47190857]
[331.57696533 100.62016296]
[331.10656738 114.76609802]
[329.77285767 128.85687256]
[327.58081055 142.83985901]
[342.22430420 146.09068298]
[356.86782837 149.34150696]
[370.06320190 140.64337158]
[385.52722168 143.90519714]
[394.08535767 157.19178772]
[390.66021729 172.62046814]
[377.28390503 181.03765869]
[361.89230347 177.44960022]
[353.61700439 163.98501587]
[338.97348022 160.73419189]
[324.32998657 157.48336792]
[319.44992065 173.95956421]
[313.36154175 190.02854919]
[306.09835815 205.60183716]
[297.70040894 220.59365845]
[288.21389771 234.92149353]
[277.69107056 248.50643921]
[266.18988037 261.27371216]
[253.77362061 273.15298462]
[240.51068115 284.07885742]
[226.47409058 293.99121094]
[211.74111938 302.83541870]
[196.39288330 310.56280518]
[180.51391602 317.13082886]
[164.19163513 322.50329590]
[147.51589966 326.65066528]
[130.57855225 329.55007935]
[113.47282410 331.18557739]
[96.29292297 331.54812622]
[79.13343048 330.63580322]
[62.08882904 328.45355225]
[45.25296783 325.01342773]
[28.71854973 320.33438110]
[12.57661057 314.44213867]
[-3.08396912 307.36917114]
[-18.17696190 299.15441895]
[-32.61926651 289.84313965]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 37]
[3 35]
[4 34]
[5 33]
[6 32]
[7 31]
[8 30]
[9 29]
[10 28]
[11 27]
[12 26]
[14 23]
[15 22]
[16 21]
[86 95]
[87 94]
[88 93]
[113 124]
[114 123]
[115 122]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
