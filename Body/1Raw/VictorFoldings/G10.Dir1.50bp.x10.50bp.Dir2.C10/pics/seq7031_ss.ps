%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:41 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCCCACUUCCACUAUGUCCUAUCAAUAGGAGCUGUAUUUGCCAUCAUAGGAGGCUUCAUUCxxxxxxxxxxCGGAAGCCUAUUCGCAGGAUUUCUCAUUACUAACAACAUUUCCCCCGCAUCCCCCUUCCACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[92.78618622 256.44464111]
[92.78618622 241.44462585]
[92.78618622 226.44462585]
[92.78618622 211.44462585]
[92.78618622 196.44462585]
[92.78618622 181.44462585]
[92.78618622 166.44462585]
[92.78618622 151.44462585]
[92.78618622 136.44462585]
[92.78618622 121.44462585]
[85.59481049 134.60836792]
[83.22566223 149.42008972]
[73.36756897 160.72575378]
[59.01637268 165.08958435]
[44.53335953 161.18545532]
[34.31987762 150.19978333]
[31.47977829 135.47111511]
[36.87615967 121.47543335]
[48.86907578 112.46598816]
[63.81391525 111.18074036]
[77.46597290 104.96613312]
[62.50572205 103.87481689]
[47.54547119 102.78350830]
[32.58522415 101.69219971]
[17.62497520 100.60088348]
[2.66472673 101.69219971]
[-11.97877502 104.94302368]
[-26.62227631 108.19384766]
[-41.26577759 111.44467163]
[-55.90927887 114.69550323]
[-67.62454987 126.17089081]
[-83.34527588 121.50283813]
[-86.89933014 105.49344635]
[-74.63059998 94.61179352]
[-59.16010284 100.05200195]
[-44.51660156 96.80117035]
[-29.87310219 93.55034637]
[-15.22960091 90.29952240]
[-0.58609915 87.04869843]
[0.03787826 72.06168365]
[-14.28471947 67.60486603]
[-27.34300041 76.20807648]
[-42.87021637 74.35348511]
[-53.53489304 62.91675568]
[-54.30149460 47.29797363]
[-44.80805588 34.87184906]
[-29.53708839 31.50561333]
[-15.69907475 38.78870392]
[-9.82790375 53.28226852]
[4.49469376 57.73908234]
[12.73589230 63.64713669]
[17.84743309 71.07790375]
[19.73086548 78.79164886]
[18.71628571 85.64064026]
[33.67653275 86.73194885]
[48.63678360 87.82325745]
[63.59703064 88.91457367]
[78.55728149 90.00588226]
[85.59148407 83.43106842]
[94.07362366 80.62852478]
[93.44964600 65.64151001]
[92.82566833 50.65449142]
[92.20169067 35.66747665]
[91.57771301 20.68045998]
[90.95373535 5.69344282]
[90.32975769 -9.29357338]
[75.87472534 -13.85733891]
[63.85423660 -23.09224892]
[55.71981049 -35.88314056]
[52.45372772 -50.68545532]
[54.45037842 -65.71173859]
[61.46865845 -79.14749908]
[72.66107941 -89.37029266]
[86.67609406 -95.14567566]
[101.82133484 -95.77623749]
[116.26792908 -91.18584442]
[128.27137756 -81.92879486]
[136.38221741 -69.12293243]
[139.62101746 -54.31462479]
[137.59667969 -39.29204559]
[130.55364990 -25.86924744]
[119.34240723 -15.66709614]
[105.31677246 -9.91755104]
[105.94075012 5.06946564]
[106.56472778 20.05648232]
[107.18870544 35.04349899]
[107.81268311 50.03051376]
[108.43666077 65.01753235]
[109.06063843 80.00454712]
[120.56243896 89.63307190]
[135.42549133 87.61074066]
[148.05650330 78.08351135]
[161.71072388 84.03424835]
[176.57377625 82.01190948]
[186.13642883 69.71583557]
[201.23847961 67.87663269]
[212.90197754 77.06893158]
[227.76502991 75.04659271]
[242.62806702 73.02426147]
[244.69200134 58.06957245]
[250.71517944 44.22674179]
[260.25064087 32.52300644]
[272.59082031 23.82686043]
[286.81994629 18.78361130]
[301.88214111 17.76750374]
[316.65972900 20.85393906]
[330.05606079 27.81388474]
[341.07705688 38.13086700]
[348.90490723 51.03929520]
[352.95867920 65.58127594]
[352.93762207 80.67770386]
[348.84326172 95.20832062]
[340.97946167 108.09485626]
[329.92971802 118.38105011]
[316.51400757 125.30359650]
[301.72787476 128.34878540]
[286.66857910 127.29065704]
[272.45355225 122.20772552]
[260.13772583 113.47718048]
[250.63493347 101.74688721]
[244.65040588 87.88730621]
[229.78735352 89.90964508]
[214.92431641 91.93197632]
[206.14085388 103.90638733]
[191.09642029 106.16905212]
[178.59611511 96.87496185]
[163.73306274 98.89729309]
[152.16516113 108.27986908]
[137.44781494 102.47378540]
[122.58477783 104.49611664]
[136.59788513 109.84707642]
[151.56272888 110.87354279]
[163.74018860 119.63193512]
[169.47421265 133.49270630]
[167.04327393 148.29441833]
[157.17721558 159.59312439]
[142.83813477 163.99659729]
[128.33106995 160.18280029]
[118.01150513 149.29672241]
[114.97756958 134.60836792]
[107.78618622 121.44462585]
[107.78618622 136.44462585]
[107.78618622 151.44462585]
[107.78618622 166.44462585]
[107.78618622 181.44462585]
[107.78618622 196.44462585]
[107.78618622 211.44462585]
[107.78618622 226.44462585]
[107.78618622 241.44462585]
[107.78618622 256.44464111]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[21 58]
[22 57]
[23 56]
[24 55]
[25 54]
[26 39]
[27 38]
[28 37]
[29 36]
[30 35]
[40 50]
[41 49]
[60 89]
[61 88]
[62 87]
[63 86]
[64 85]
[65 84]
[66 83]
[90 130]
[91 129]
[93 127]
[94 126]
[97 123]
[98 122]
[99 121]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
