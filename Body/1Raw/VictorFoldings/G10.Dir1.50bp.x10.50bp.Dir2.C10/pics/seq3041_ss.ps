%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:05 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGACGAUUAAAGUCCUACGUGAUCUGAGUUCAGACCGGAGUAAUCCAGGUCGGUUUCUAUCUAxxxxxxxxxxUCCCGAAUCAACCCUGACCCCUCUCCUUCAUAAAUUAUUCAGCUUCCUACACUAUUAAAGUCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[110.89848328 254.12042236]
[110.89848328 239.12042236]
[110.89848328 224.12042236]
[110.89848328 209.12042236]
[110.89848328 194.12042236]
[110.89848328 179.12042236]
[110.89848328 164.12042236]
[110.89848328 149.12042236]
[110.89848328 134.12042236]
[110.89848328 119.12042236]
[97.08489990 113.27363586]
[86.31622314 123.71564484]
[75.54753876 134.15765381]
[80.41503906 148.62382507]
[78.51533508 163.76826477]
[70.22563171 176.58401489]
[57.19185257 184.52651978]
[42.00185776 186.01876831]
[27.67163658 180.76448059]
[17.04646111 169.80691528]
[12.23597145 155.32168579]
[14.19529247 140.18484497]
[22.53540039 127.40183258]
[35.60035706 119.51072693]
[50.79611206 118.07830048]
[65.10552979 123.38897705]
[75.87421417 112.94696808]
[86.64289093 102.50495911]
[92.91229248 88.87797546]
[93.83570862 73.90642548]
[85.23748016 57.65523911]
[95.42210388 43.39627838]
[96.03792572 28.40892601]
[96.65375519 13.42157173]
[97.26957703 -1.56578112]
[97.42357635 -16.56499100]
[97.11559296 -31.56182861]
[96.80761719 -46.55866623]
[83.97678375 -58.40589905]
[83.65922546 -75.52987671]
[95.56435394 -87.36926270]
[94.94853210 -102.35662079]
[85.98558044 -111.68770599]
[85.81435394 -124.22333527]
[93.97941589 -133.20075989]
[93.67144012 -148.19758606]
[93.36345673 -163.19442749]
[93.05548096 -178.19126892]
[78.22368622 -184.80998230]
[67.78894043 -197.18023682]
[63.79326630 -212.80284119]
[66.98442078 -228.55017090]
[76.67657471 -241.29229736]
[90.89689636 -248.51908875]
[90.28107452 -263.50643921]
[89.66524506 -278.49377441]
[89.04942322 -293.48114014]
[87.51213074 -308.40216064]
[85.05920410 -323.20022583]
[82.60627747 -337.99832153]
[80.15334320 -352.79638672]
[65.13553619 -354.25506592]
[51.00730896 -359.55181885]
[38.73196411 -368.32556152]
[29.14644814 -379.97802734]
[22.90431786 -393.71478271]
[20.43117142 -408.59921265]
[21.89563560 -423.61645508]
[27.19785690 -437.74261475]
[35.97632217 -450.01458740]
[47.63250351 -459.59561157]
[61.37165833 -465.83242798]
[76.25703430 -468.29983521]
[91.27371216 -466.82955933]
[105.39784241 -461.52188110]
[117.66641235 -452.73867798]
[127.24292755 -441.07879639]
[133.47444153 -427.33724976]
[135.93609619 -412.45092773]
[134.46003723 -397.43481445]
[129.14691162 -383.31271362]
[120.35897064 -371.04754639]
[108.69539642 -361.47552490]
[94.95142365 -355.24932861]
[97.40435028 -340.45123291]
[99.85728455 -325.65316772]
[102.31021118 -310.85507202]
[112.20886993 -322.12524414]
[127.16400909 -323.28451538]
[138.68121338 -313.67440796]
[140.21879578 -298.75341797]
[130.90342712 -286.99655151]
[116.02616119 -285.08163452]
[104.03677368 -294.09695435]
[104.65260315 -279.10961914]
[105.26842499 -264.12225342]
[105.88425446 -249.13490295]
[118.90354919 -244.25065613]
[129.10231018 -234.73477173]
[134.91172791 -222.00569153]
[135.42092896 -207.97941589]
[130.51957703 -194.78123474]
[120.91967773 -184.42358398]
[108.05232239 -178.49925232]
[108.36029816 -163.50241089]
[108.66827393 -148.50556946]
[108.97625732 -133.50872803]
[118.86596680 -119.04367065]
[109.93588257 -102.97244263]
[110.55170441 -87.98509216]
[121.18206787 -80.64017487]
[125.69026947 -68.32332611]
[122.21145630 -55.47501755]
[111.80445862 -46.86664581]
[112.11243439 -31.86980629]
[112.42041016 -16.87296867]
[114.75560760 -14.15376568]
[115.85684967 -10.14666271]
[115.12359619 -5.45966578]
[112.25692749 -0.94995576]
[111.64110565 14.03739738]
[111.02527618 29.02475166]
[110.40945435 44.01210403]
[118.38846588 53.15527344]
[117.95989990 65.68474579]
[108.80725861 74.82984161]
[107.88384247 89.80139160]
[115.87195587 77.10533142]
[124.26714325 64.67468262]
[136.37522888 55.82062149]
[150.76596069 51.58900833]
[165.73950195 52.47969437]
[179.52711487 58.38746643]
[190.50016785 68.61447906]
[197.36251831 81.95270538]
[199.30355835 96.82658386]
[196.09399414 111.47918701]
[188.11297607 124.17971039]
[176.30320740 133.42793274]
[162.05972290 138.13142395]
[147.06497192 137.73460388]
[133.08985901 132.28416443]
[125.89848328 119.12042236]
[125.89848328 134.12042236]
[125.89848328 149.12042236]
[125.89848328 164.12042236]
[125.89848328 179.12042236]
[125.89848328 194.12042236]
[125.89848328 209.12042236]
[125.89848328 224.12042236]
[125.89848328 239.12042236]
[125.89848328 254.12042236]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 152]
[2 151]
[3 150]
[4 149]
[5 148]
[6 147]
[7 146]
[8 145]
[9 144]
[10 143]
[11 28]
[12 27]
[13 26]
[29 127]
[30 126]
[32 123]
[33 122]
[34 121]
[35 120]
[36 116]
[37 115]
[38 114]
[41 110]
[42 109]
[45 107]
[46 106]
[47 105]
[48 104]
[54 97]
[55 96]
[56 95]
[57 94]
[58 87]
[59 86]
[60 85]
[61 84]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
