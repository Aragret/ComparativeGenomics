%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:21 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCCCCCUUAUUUCUAGGACUAUGAGAAUCGAACCCAUCCCUGAGAAUCCAAAAUUCUCCGUxxxxxxxxxxCCUACCAUGAGCCCUACAAACAACUAACCUGCCACUAAUAGUUAUGUCAUCCCUCUUAUUCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[51.19708633 289.04586792]
[39.46089172 285.62081909]
[34.26547623 299.69232178]
[29.07005882 313.76385498]
[23.87464333 327.83535767]
[18.67922783 341.90689087]
[21.98399544 357.96960449]
[9.54759979 368.65921021]
[-5.83646154 362.97918701]
[-8.34238529 346.77264404]
[4.60770845 336.71148682]
[9.80312443 322.63995361]
[14.99853992 308.56845093]
[20.19395447 294.49691772]
[25.38936996 280.42538452]
[-0.21827720 267.56002808]
[-23.66679573 251.08471680]
[-44.45100403 231.35440063]
[-62.12311935 208.79414368]
[-76.30241394 183.88998413]
[-90.08479309 189.80995178]
[-103.86717224 195.72990417]
[-117.64955902 201.64987183]
[-120.08960724 216.88305664]
[-130.39500427 228.36357117]
[-145.27732849 232.42803955]
[-159.98768616 227.77951050]
[-169.83206177 215.90129089]
[-171.66914368 200.58369446]
[-164.91271973 186.71450806]
[-151.71875000 178.71934509]
[-136.29737854 179.14941406]
[-123.56951904 187.86749268]
[-109.78713989 181.94752502]
[-96.00475311 176.02757263]
[-82.22237396 170.10760498]
[-87.29036713 155.15783691]
[-91.13410187 139.84753418]
[-93.72843933 124.27674866]
[-95.05643463 108.54727936]
[-95.10940552 92.76194000]
[-93.88700104 77.02390289]
[-91.39720917 61.43606567]
[-87.65631866 46.10030365]
[-82.68876648 31.11686897]
[-76.52703094 16.58370399]
[-69.21138763 2.59580708]
[-60.78965759 -10.75538635]
[-51.31689453 -23.38260460]
[-40.85501862 -35.20330429]
[-29.47241211 -46.14022064]
[-38.98077011 -57.74156189]
[-48.48912811 -69.34290314]
[-57.99748611 -80.94424438]
[-67.50584412 -92.54558563]
[-77.01420593 -104.14692688]
[-92.77286530 -107.15428925]
[-100.11917877 -121.41651917]
[-93.41769409 -135.99285889]
[-77.80920410 -139.70158386]
[-65.26721191 -129.69767761]
[-65.41286469 -113.65528870]
[-55.90450287 -102.05394745]
[-46.39614487 -90.45260620]
[-36.88778687 -78.85126495]
[-27.37942886 -67.24992371]
[-17.87107086 -55.64858246]
[-8.09666920 -62.58898926]
[2.08524251 -68.91645813]
[12.63628197 -74.60713196]
[23.51667213 -79.63955688]
[34.68539429 -83.99475861]
[46.10034943 -87.65632629]
[57.71849442 -90.61045074]
[69.49604034 -92.84599304]
[81.38858032 -94.35453033]
[93.35128021 -95.13037872]
[105.33905029 -95.17060089]
[117.30668640 -94.47505951]
[129.20909119 -93.04636383]
[141.00137329 -90.88990784]
[152.63908386 -88.01382446]
[164.07833862 -84.42894745]
[175.27604675 -80.14878845]
[186.18995667 -75.18949890]
[196.77896118 -69.56976318]
[207.00309753 -63.31076431]
[216.82385254 -56.43610764]
[226.20420837 -48.97170639]
[235.10877991 -40.94569397]
[243.50399780 -32.38833618]
[251.35823059 -23.33189201]
[258.64187622 -13.81049824]
[265.32742310 -3.86005259]
[271.38973999 6.48193312]
[276.80590820 17.17647171]
[281.55557251 28.18324471]
[285.62075806 39.46075821]
[288.98620605 50.96649551]
[291.63919067 62.65708542]
[293.56970215 74.48845673]
[294.77050781 86.41600037]
[309.76318359 85.94795990]
[324.75588989 85.47991180]
[339.74859619 85.01187134]
[354.74127197 84.54383087]
[360.88424683 70.57147980]
[372.48684692 60.65468979]
[387.24533081 56.76245117]
[402.22943115 59.66756439]
[414.46401978 68.79322052]
[421.51992798 82.32751465]
[421.99618530 97.58319855]
[415.79821777 111.53125000]
[404.15667725 121.40226746]
[389.38296509 125.23635864]
[374.41043091 122.27226257]
[362.21185303 113.09850311]
[355.20932007 99.53652954]
[340.21661377 100.00457001]
[325.22393799 100.47261047]
[310.23123169 100.94065094]
[295.23852539 101.40869904]
[294.76760864 113.62538910]
[293.53298950 125.78865814]
[291.53952026 137.85081482]
[288.79501343 149.76454163]
[285.31027222 161.48315430]
[281.09887695 172.96069336]
[276.17742920 184.15214539]
[270.56518555 195.01362610]
[264.28414917 205.50257874]
[257.35891724 215.57783508]
[249.81672668 225.19992065]
[241.68707275 234.33108521]
[233.00187683 242.93554688]
[223.79516602 250.97955322]
[214.10307312 258.43154907]
[203.96356201 265.26235962]
[193.41641235 271.44515991]
[182.50297546 276.95571899]
[171.26603699 281.77243042]
[159.74967957 285.87643433]
[147.99903870 289.25158691]
[136.06018066 291.88467407]
[123.97993469 293.76541138]
[111.80566406 294.88635254]
[99.58510590 295.24316406]
[87.36617279 294.83444214]
[75.19677734 293.66174316]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 15]
[3 14]
[4 13]
[5 12]
[6 11]
[20 36]
[21 35]
[22 34]
[23 33]
[51 67]
[52 66]
[53 65]
[54 64]
[55 63]
[56 62]
[102 123]
[103 122]
[104 121]
[105 120]
[106 119]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
