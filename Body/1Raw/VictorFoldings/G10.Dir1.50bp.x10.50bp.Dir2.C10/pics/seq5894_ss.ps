%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:17 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCUACUCCUACCUAUCUCCCCUUUUAUACUAAUAAUCUUAUAGAAAUUUAGGUUAAAUACAGACxxxxxxxxxxCACCAAUGGUACUGAACCUACGAGUACACCGACUACGGCGGACUAAUCUUCAACUCCUACAUACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[95.96018982 286.48440552]
[95.96018982 271.48440552]
[95.96018982 256.48440552]
[95.96018982 241.48442078]
[95.96018982 226.48442078]
[95.96018982 211.48442078]
[95.96018982 196.48442078]
[95.96018982 181.48442078]
[95.96018982 166.48442078]
[95.96018982 151.48442078]
[65.81172180 117.47253418]
[78.53041077 86.90871429]
[68.63552856 75.63523865]
[58.74063873 64.36177063]
[48.84574890 53.08829498]
[38.95086288 41.81481934]
[32.39940262 44.23417664]
[25.50089455 45.14910889]
[18.59504509 44.52564621]
[12.01949978 42.40531158]
[6.09331942 38.90254593]
[1.10150266 34.19856644]
[-2.71871185 28.53204155]
[-5.18911219 22.18697929]
[-20.18235588 22.63713837]
[-35.17559814 23.08729935]
[-40.62109756 37.25141907]
[-51.04649353 48.22201920]
[-64.84055328 54.34881210]
[-79.88864136 54.72662354]
[-93.89687347 49.32901764]
[-104.74182129 39.00755692]
[-110.79235077 25.35763550]
[-125.78559113 25.80779648]
[-140.77883911 26.25795555]
[-155.77207947 26.70811653]
[-169.42961121 35.78578186]
[-183.99758911 28.25545502]
[-184.48974609 11.86369419]
[-170.39978027 3.47293615]
[-156.22224426 11.71487331]
[-141.22900391 11.26471233]
[-126.23575592 10.81455231]
[-111.24250793 10.36439133]
[-106.02179718 -3.62394214]
[-95.81562042 -14.57744503]
[-82.15644073 -20.80574608]
[-67.11279297 -21.33141327]
[-52.97600937 -16.04322433]
[-41.91121674 -5.71784973]
[-35.62575912 8.09405613]
[-20.63251686 7.64389563]
[-5.63927269 7.19373512]
[-3.24500108 0.32779732]
[0.69706577 -5.78233719]
[5.96572590 -10.79380989]
[12.26533794 -14.42541122]
[19.24241066 -16.47336006]
[20.44173813 -31.42533684]
[21.64106560 -46.37731552]
[22.84039116 -61.32929230]
[24.03971863 -76.28126526]
[25.23904610 -91.23324585]
[12.14003944 -83.92461395]
[-1.81762493 -89.41857910]
[-6.42043972 -103.69492340]
[1.69970107 -116.30695343]
[16.60089111 -118.02582550]
[27.37910652 -107.59400940]
[30.06589699 -122.35141754]
[32.75268936 -137.10882568]
[19.04912186 -143.40669250]
[7.34281158 -152.91526794]
[-1.63037229 -165.03686523]
[-7.30636930 -179.00947571]
[-9.32838058 -193.95477295]
[-7.56930161 -208.93331909]
[-2.13970947 -223.00350952]
[6.61908770 -235.28089905]
[18.15650368 -244.99371338]
[31.74728775 -251.53140259]
[46.53710938 -254.48300171]
[61.59627151 -253.66297913]
[75.97814178 -249.12286377]
[88.77866364 -241.14805603]
[99.19318390 -230.23986816]
[106.56703186 -217.08398438]
[110.43669891 -202.50741577]
[110.55891418 -187.42643738]
[106.92600250 -172.78906250]
[99.76634216 -159.51539612]
[89.52997589 -148.43984985]
[76.86038971 -140.25863647]
[62.55399323 -135.48602295]
[47.51009750 -134.42204285]
[44.82330704 -119.66462708]
[42.13651657 -104.90721893]
[40.19102478 -90.03392029]
[38.99169540 -75.08193970]
[37.79236984 -60.12996292]
[36.59304047 -45.17798615]
[35.39371490 -30.22600937]
[34.19438553 -15.27403259]
[53.93857574 4.10058451]
[50.22433472 31.91993332]
[60.11922455 43.19340515]
[70.01411438 54.46688080]
[79.90899658 65.74035645]
[89.80388641 77.01382446]
[102.94604492 66.14968872]
[123.85806274 64.45384216]
[145.91694641 76.36528015]
[160.89817810 75.61521149]
[175.87940979 74.86514282]
[189.35256958 65.51602936]
[204.06831360 72.75335693]
[204.88833618 89.13198853]
[190.96908569 97.80299377]
[176.62947083 89.84638214]
[161.64823914 90.59645081]
[146.66700745 91.34651184]
[145.39750671 98.73828888]
[142.85848999 113.52184296]
[141.58898926 120.91362000]
[155.46148682 126.61919403]
[171.63412476 123.90292358]
[181.86268616 136.72120667]
[175.62492371 151.88769531]
[159.33770752 153.80039978]
[149.75592041 140.49169922]
[135.88342285 134.78613281]
[129.65260315 138.96069336]
[139.09149170 150.61863708]
[148.53036499 162.27658081]
[157.96923828 173.93452454]
[167.40811157 185.59246826]
[180.21917725 193.39480591]
[183.52296448 208.02645874]
[175.30740356 220.57653809]
[160.57589722 223.40188599]
[148.30012512 214.78181458]
[145.95652771 199.96479797]
[138.76515198 186.80105591]
[131.57376099 173.63732910]
[124.38237762 160.47358704]
[117.19099426 147.30984497]
[110.96018982 151.48442078]
[110.96018982 166.48442078]
[110.96018982 181.48442078]
[110.96018982 196.48442078]
[110.96018982 211.48442078]
[110.96018982 226.48442078]
[110.96018982 241.48442078]
[110.96018982 256.48440552]
[110.96018982 271.48440552]
[110.96018982 286.48440552]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 156]
[2 155]
[3 154]
[4 153]
[5 152]
[6 151]
[7 150]
[8 149]
[9 148]
[10 147]
[12 109]
[13 108]
[14 107]
[15 106]
[16 105]
[24 53]
[25 52]
[26 51]
[33 44]
[34 43]
[35 42]
[36 41]
[58 103]
[59 102]
[60 101]
[61 100]
[62 99]
[63 98]
[69 97]
[70 96]
[71 95]
[112 121]
[113 120]
[114 119]
[124 131]
[125 130]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
