%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:20 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCUCCUAGCAGCAGCAGGCAAAUCAGCCCAAUUAGGUCUCCACCCCUGACUCCCCUCAGCCAUAxxxxxxxxxxCCAAACAACAAAGCAUAAUAUUUCGCCCACUAAGCCAAUCACUUUAUUGACUCCUAGCCGCAGCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[188.00421143 65.79445648]
[174.49899292 72.32202148]
[160.99377441 78.84959412]
[147.48855591 85.37715912]
[139.39663696 97.88195801]
[123.60462952 96.92113495]
[110.09941101 103.44869995]
[97.31373596 111.29257202]
[85.37547302 120.37430573]
[73.43721008 129.45603943]
[61.49894333 138.53776550]
[49.56068039 147.61950684]
[38.18877411 157.40110779]
[27.42419243 167.84733582]
[16.65961266 178.29357910]
[12.65017509 186.56475830]
[5.57357883 188.83843994]
[-5.39786386 199.06719971]
[-9.67421818 214.89897156]
[-25.59045410 218.84934998]
[-36.77331161 206.85452271]
[-31.71882629 191.25375366]
[-15.62661934 188.09576416]
[-4.65517712 177.86700439]
[6.21337891 167.52899170]
[16.97796059 157.08276367]
[27.74254036 146.63652039]
[12.83661556 144.95921326]
[3.33866000 133.34934998]
[4.64779758 118.40658569]
[16.01984787 108.62514496]
[30.99035454 109.56530762]
[41.04931641 120.69262695]
[40.47894669 135.68124390]
[52.41721344 126.59951019]
[64.35547638 117.51777649]
[76.29373932 108.43604279]
[88.23200226 99.35430908]
[73.23429108 99.09238434]
[60.30910110 91.48058319]
[52.80641937 78.49175262]
[52.67080688 63.49236679]
[59.93741608 50.37000275]
[72.72286224 42.52574921]
[87.71338654 41.99270248]
[101.02371216 48.90901184]
[109.20402527 61.48209763]
[110.13414001 76.45323181]
[103.57184601 89.94348145]
[117.07706451 83.41591644]
[126.13497162 70.44422150]
[140.96099854 71.87194061]
[154.46620178 65.34437561]
[167.97142029 58.81680679]
[181.47663879 52.28924179]
[176.71804810 40.53673172]
[172.67112732 28.52070427]
[169.35035706 16.28420830]
[166.76760864 3.87108397]
[164.93214417 -8.67419815]
[163.85049438 -21.30669403]
[163.52653503 -33.98114777]
[163.96141052 -46.65216064]
[165.15354919 -59.27433395]
[167.09867859 -71.80245209]
[169.78977966 -84.19165039]
[173.21722412 -96.39752960]
[177.36872864 -108.37638855]
[182.22937012 -120.08530426]
[187.78176880 -131.48234558]
[194.00598145 -142.52668762]
[200.87973022 -153.17877197]
[208.37834167 -163.40046692]
[216.47497559 -173.15512085]
[225.14059448 -182.40785217]
[234.34416199 -191.12547302]
[244.05268860 -199.27680969]
[254.23136902 -206.83264160]
[264.84375000 -213.76593018]
[275.85183716 -220.05183411]
[287.21612549 -225.66786194]
[298.89593506 -230.59391785]
[310.84939575 -234.81234741]
[323.03369141 -238.30805969]
[335.40521240 -241.06854248]
[347.91958618 -243.08393860]
[360.53198242 -244.34703064]
[373.19723511 -244.85330200]
[385.86996460 -244.60096741]
[398.50476074 -243.59092712]
[411.05639648 -241.82684326]
[423.47988892 -239.31501770]
[435.73074341 -236.06448364]
[447.76504517 -232.08689880]
[459.53973389 -227.39653015]
[471.01260376 -222.01017761]
[482.14257812 -215.94715881]
[492.88980103 -209.22920227]
[503.21575928 -201.88040161]
[513.08343506 -193.92707825]
[522.45758057 -185.39773560]
[531.30456543 -176.32295227]
[539.59271240 -166.73524475]
[547.29235840 -156.66896057]
[554.37591553 -146.16017151]
[560.81805420 -135.24653625]
[566.59564209 -123.96714783]
[571.68798828 -112.36243439]
[576.07696533 -100.47396088]
[579.74682617 -88.34432983]
[582.68438721 -76.01699829]
[584.87921143 -63.53612518]
[586.32336426 -50.94642639]
[587.01177979 -38.29300308]
[586.94195557 -25.62118149]
[586.11413574 -12.97636223]
[584.53131104 -0.40383786]
[582.19921875 12.05135345]
[579.12622070 24.34459496]
[593.41052246 28.92271996]
[607.69476318 33.50084686]
[621.97906494 38.07897186]
[635.91552734 30.62572861]
[651.01586914 35.28993988]
[658.32135010 49.30441284]
[653.49774170 64.35460663]
[639.40679932 71.51151276]
[624.40844727 66.52906036]
[617.40093994 52.36325455]
[603.11663818 47.78512955]
[588.83233643 43.20700455]
[574.54809570 38.62887955]
[567.40234375 56.02518082]
[558.74078369 72.71911621]
[548.63171387 88.57891846]
[537.15478516 103.47938538]
[524.40051270 117.30289459]
[510.46945190 129.94032288]
[495.47152710 141.29187012]
[479.52502441 151.26789856]
[462.75570679 159.78964233]
[445.29592896 166.78976440]
[427.28335571 172.21296692]
[408.86013794 176.01635742]
[390.17163086 178.16987610]
[371.36529541 178.65641785]
[352.58953857 177.47207642]
[333.99252319 174.62612915]
[315.72097778 170.14093018]
[297.91912842 164.05180359]
[280.72747803 156.40673828]
[264.28170776 147.26596069]
[248.71162415 136.70153809]
[234.14015198 124.79677582]
[220.68229675 111.64555359]
[208.44433594 97.35157013]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 55]
[2 54]
[3 53]
[4 52]
[6 50]
[7 49]
[8 38]
[9 37]
[10 36]
[11 35]
[12 34]
[13 27]
[14 26]
[15 25]
[17 24]
[18 23]
[119 132]
[120 131]
[121 130]
[122 129]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
