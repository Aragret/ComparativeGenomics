%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:19 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGACCCCUGUCUUUAGAUUUACAGUCCAAUGCUUCACUCAGCCAUUUUACCUCACCCCCACUxxxxxxxxxxCAGCCCAAUUAGGUCUCCACCCCUGACUCCCCUCAGCCAUAGAAGGCCCCACCCCAGUCUCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[-55.00425339 131.97723389]
[-69.82201385 134.30834961]
[-84.63977051 136.63945007]
[-99.45752716 138.97055054]
[-114.27528381 141.30165100]
[-126.70536041 151.08959961]
[-140.48043823 145.42420959]
[-155.29818726 147.75531006]
[-170.11595154 150.08641052]
[-184.93371582 152.41751099]
[-187.40075684 167.36892700]
[-196.59233093 180.47967529]
[-211.29844666 188.74700928]
[-228.99049377 189.90792847]
[-246.25042725 183.00256348]
[-258.68988037 191.38470459]
[-271.12930298 199.76684570]
[-283.56875610 208.14898682]
[-282.42443848 223.46519470]
[-289.10595703 237.29460144]
[-301.81607056 245.91719055]
[-317.13577271 247.01350403]
[-330.94418335 240.28865051]
[-339.52688599 227.55157471]
[-340.57516479 212.22850037]
[-333.80706787 198.44125366]
[-321.04315186 189.89851379]
[-305.71685791 188.89826965]
[-291.95089722 195.70954895]
[-279.51144409 187.32740784]
[-267.07202148 178.94526672]
[-254.63256836 170.56312561]
[-255.72099304 163.14251709]
[-269.66238403 157.60740662]
[-257.89782715 148.30131531]
[-258.98623657 140.88070679]
[-273.30883789 136.42388916]
[-287.63143921 131.96708679]
[-301.95404053 127.51026154]
[-316.32223511 123.20268250]
[-330.73443604 119.04479218]
[-344.44665527 126.90293121]
[-359.67712402 122.68289185]
[-367.38986206 108.88834381]
[-363.00903320 93.70336151]
[-349.13369751 86.13690948]
[-333.99588013 90.67803955]
[-326.57653809 104.63257599]
[-312.16433716 108.79046631]
[-304.81829834 107.61508942]
[-297.49722290 113.18766785]
[-283.17462158 117.64448547]
[-268.85202026 122.10129547]
[-254.52943420 126.55811310]
[-235.96636963 113.34350586]
[-214.55200195 111.92655945]
[-196.75935364 121.35674286]
[-187.26481628 137.59976196]
[-172.44705200 135.26866150]
[-157.62930298 132.93754578]
[-142.81153870 130.60644531]
[-131.44132996 120.98524475]
[-116.60639191 126.48389435]
[-101.78862762 124.15279388]
[-86.97087097 121.82169342]
[-72.15311432 119.49058533]
[-57.33535767 117.15948486]
[-58.26274109 101.32942963]
[-57.60141754 85.48603058]
[-55.35802841 69.78833008]
[-51.55509186 54.39390564]
[-46.23078537 39.45729065]
[-39.43855667 25.12843323]
[-31.24658394 11.55116367]
[-21.73710442 -1.13821995]
[-11.00557995 -12.81233692]
[0.84026325 -23.35399818]
[13.68151283 -32.65738297]
[27.38926125 -40.62909698]
[41.82590485 -47.18912125]
[56.84652710 -52.27159882]
[72.30033875 -55.82551575]
[88.03221130 -57.81518936]
[103.88422394 -58.22065353]
[119.69724274 -57.03783417]
[135.31253052 -54.27860260]
[150.57333374 -49.97066116]
[165.32647705 -44.15725708]
[179.42382812 -36.89673996]
[192.72390747 -28.26199913]
[205.09317017 -18.33971214]
[216.40747070 -7.22948265]
[227.90927124 -16.85800934]
[239.41108704 -26.48653603]
[244.52642822 -42.06746292]
[260.63082886 -45.16261292]
[271.15747070 -32.58796310]
[265.27743530 -17.27923203]
[249.03961182 -14.98473167]
[237.53781128 -5.35620546]
[226.03599548 4.27232075]
[231.81546021 12.40121078]
[237.07141113 20.87799835]
[241.78298950 29.66901588]
[245.93147278 38.73935318]
[249.50039673 48.05298233]
[252.47558594 57.57292175]
[254.84523010 67.26135254]
[256.59988403 77.07981110]
[257.73263550 86.98929596]
[258.23895264 96.95044708]
[258.11682129 106.92371368]
[257.36669922 116.86948395]
[255.99163818 126.74826050]
[253.99705505 136.52079773]
[251.39086914 146.14830017]
[265.51568604 151.19705200]
[279.64047241 156.24581909]
[293.81616211 149.25828552]
[308.75372314 154.42010498]
[315.59100342 168.66886902]
[310.27154541 183.55104065]
[295.95129395 190.23727417]
[281.12619019 184.76075745]
[274.59173584 170.37062073]
[260.46691895 165.32185364]
[246.34211731 160.27310181]
[239.45191956 174.84666443]
[231.11502075 188.64375305]
[221.41789246 201.52122498]
[210.46113586 213.34548950]
[198.35844421 223.99386597]
[185.23533630 233.35591125]
[171.22798157 241.33448792]
[156.48168945 247.84681702]
[141.14944458 252.82534790]
[125.39030457 256.21841431]
[109.36775970 257.99084473]
[93.24802399 258.12423706]
[77.19834137 256.61718750]
[61.38520813 253.48536682]
[45.97267151 248.76124573]
[31.12063217 242.49383545]
[16.98316383 234.74816895]
[3.70693517 225.60456848]
[-8.57032394 215.15792847]
[-19.72124672 203.51660156]
[-29.63014793 190.80136108]
[-38.19423294 177.14413452]
[-45.32465363 162.68658447]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 67]
[2 66]
[3 65]
[4 64]
[5 63]
[7 61]
[8 60]
[9 59]
[10 58]
[15 32]
[16 31]
[17 30]
[18 29]
[36 54]
[37 53]
[38 52]
[39 51]
[40 49]
[41 48]
[92 101]
[93 100]
[94 99]
[116 127]
[117 126]
[118 125]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
