%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:19 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGAGCCUCCUUAUUCGAGCCGAGCUGGGCCAGCCAGGCAACCUUCUAGGUAACGACCACAUCxxxxxxxxxxACAGGUUGAACAGUCUACCCUCCCUUAGCAGGGAACUACUCCCACCCUGGAGCCUCCGUACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[92.50000000 275.34393311]
[92.50000000 260.34393311]
[92.50000000 245.34394836]
[92.50000000 230.34394836]
[92.50000000 215.34394836]
[92.50000000 200.34394836]
[92.50000000 185.34394836]
[92.50000000 170.34394836]
[92.50000000 155.34394836]
[92.50000000 140.34394836]
[79.97729492 135.81863403]
[69.56278229 127.52198029]
[56.78542328 135.37940979]
[44.00806427 143.23683167]
[31.23070717 151.09425354]
[46.04398727 153.45365906]
[57.32835770 163.33612061]
[61.62078857 177.70883179]
[57.60399246 192.16101074]
[46.51066589 202.25744629]
[31.74521446 204.89968872]
[17.83896446 199.27685547]
[9.05956745 187.11453247]
[8.10130882 172.14517212]
[15.25882816 158.96211243]
[1.24211550 164.30361938]
[-12.77459717 169.64514160]
[-25.42232895 180.93545532]
[-39.77265549 171.90747070]
[-35.07005310 155.61877441]
[-18.11610985 155.62843323]
[-4.09939718 150.28691101]
[9.91731548 144.94540405]
[23.37328148 138.31689453]
[36.15063858 130.45947266]
[48.92799759 122.60205078]
[61.70535278 114.74462128]
[59.59247208 92.85048676]
[69.08956909 73.01056671]
[87.46793365 60.92531204]
[109.44702911 60.06708908]
[115.51004791 46.34703445]
[121.57305908 32.62697983]
[127.63607025 18.90692711]
[133.69908142 5.18687296]
[117.01186371 -25.47303391]
[111.81644440 -39.54455185]
[106.62103271 -53.61607361]
[101.42561340 -67.68759155]
[96.23020172 -81.75910950]
[91.03478241 -95.83062744]
[76.18913269 -93.38048553]
[61.14807892 -93.78444672]
[46.45534515 -97.02790070]
[32.64206314 -102.99361420]
[20.20757294 -111.46591949]
[9.60137653 -122.13855743]
[1.20688093 -134.62570190]
[-4.67245913 -148.47596741]
[-7.82410860 -163.18867493]
[-8.13413811 -178.23196411]
[-5.59133911 -193.06201172]
[-0.28763315 -207.14276123]
[7.58525467 -219.96516418]
[17.74272346 -231.06571960]
[29.81758881 -240.04313660]
[43.37335205 -246.57290649]
[57.91997528 -250.41896057]
[72.93161774 -251.44229126]
[87.86560822 -249.60586548]
[102.18209839 -244.97612000]
[115.36354828 -237.72036743]
[126.93346405 -228.10093689]
[136.47360229 -216.46554565]
[143.63908386 -203.23481750]
[148.17089844 -188.88702393]
[149.90519714 -173.94082642]
[148.77931213 -158.93653870]
[144.83392334 -144.41653442]
[138.21166992 -130.90571594]
[129.15193176 -118.89248657]
[117.98221588 -108.81111908]
[105.10630035 -101.02604675]
[110.30171967 -86.95452881]
[115.49713135 -72.88300323]
[120.69255066 -58.81148911]
[125.88796234 -44.73996735]
[131.08337402 -30.66844940]
[137.91149902 -27.56574440]
[150.11347961 -36.28994751]
[151.56774902 -21.36033821]
[158.39585876 -18.25763512]
[172.41258240 -23.59914780]
[186.42929077 -28.94066048]
[173.42831421 -36.42227173]
[169.33998108 -50.85437393]
[176.48547363 -64.04308319]
[190.80789185 -68.50045013]
[204.17564392 -61.69579697]
[208.99911499 -47.49248505]
[202.53863525 -33.95346451]
[217.11134338 -37.50822830]
[231.68403625 -41.06298828]
[246.25674438 -44.61775208]
[260.82943726 -48.17251205]
[272.30343628 -59.88913727]
[288.11788940 -55.54914856]
[292.00424194 -39.61715698]
[279.96453857 -28.48262596]
[264.38421631 -33.59981155]
[249.81150818 -30.04504776]
[235.23880005 -26.49028587]
[220.66610718 -22.93552399]
[206.09339905 -19.38076210]
[191.77079773 -14.92394638]
[177.75408936 -9.58243370]
[163.73738098 -4.24092150]
[178.73722839 -4.30794382]
[191.18296814 4.06484032]
[196.77369690 17.98402786]
[193.57740784 32.63953018]
[182.69865417 42.96680832]
[167.89683533 45.39704514]
[154.28704834 39.09041214]
[146.57244873 26.22630882]
[147.41914368 11.24988556]
[141.35612488 24.96994019]
[135.29310608 38.68999481]
[129.23010254 52.41004562]
[123.16708374 66.13010406]
[129.84152222 71.83322906]
[135.15008545 78.82559204]
[138.84976196 86.78713226]
[140.77124023 95.35345459]
[140.82653809 104.13244629]
[139.01316833 112.72229767]
[135.41409302 120.72982788]
[130.19407654 127.78852081]
[123.59201813 133.57530212]
[115.91012573 137.82528687]
[107.50000000 140.34394836]
[107.50000000 155.34394836]
[107.50000000 170.34394836]
[107.50000000 185.34394836]
[107.50000000 200.34394836]
[107.50000000 215.34394836]
[107.50000000 230.34394836]
[107.50000000 245.34394836]
[107.50000000 260.34393311]
[107.50000000 275.34393311]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[12 37]
[13 36]
[14 35]
[15 34]
[25 33]
[26 32]
[27 31]
[41 130]
[42 129]
[43 128]
[44 127]
[45 126]
[46 88]
[47 87]
[48 86]
[49 85]
[50 84]
[51 83]
[92 117]
[93 116]
[94 115]
[101 114]
[102 113]
[103 112]
[104 111]
[105 110]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
