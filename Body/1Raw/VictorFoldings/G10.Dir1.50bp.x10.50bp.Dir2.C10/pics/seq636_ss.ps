%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:05 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGUACUAAUCUCAUCAAUACAACCCCCGCCCAUCCUACCCAGCACACACACACCGCUGCUAACxxxxxxxxxxCCCAAACAUUAAUCAGUUCUUCAAAUAUCUACUCAUCUUCCUAAUUACCAUACUAAUCUUACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[-31.20152664 240.83248901]
[-38.46186066 233.70094299]
[-49.65015793 243.69204712]
[-60.83845139 253.68313599]
[-65.97820282 268.64620972]
[-80.62491608 271.35235596]
[-91.81320953 281.34344482]
[-103.00151062 291.33456421]
[-114.18980408 301.32565308]
[-125.37809753 311.31674194]
[-136.56639099 321.30783081]
[-130.45341492 335.14572144]
[-128.91777039 350.19552612]
[-132.10992432 364.98287964]
[-139.71713257 378.05902100]
[-150.99411011 388.14291382]
[-164.83607483 394.24661255]
[-179.88691711 395.77215576]
[-194.67211914 392.57009888]
[-207.74316406 384.95413208]
[-217.81948853 373.67041016]
[-223.91392517 359.82434082]
[-225.42939758 344.77249146]
[-222.21742249 329.98944092]
[-214.59271240 316.92349243]
[-203.30221558 306.85473633]
[-189.45208740 300.76959229]
[-174.39921570 299.26419067]
[-159.61831665 302.48608398]
[-146.55749512 310.11953735]
[-135.36920166 300.12844849]
[-124.18090057 290.13735962]
[-112.99260712 280.14627075]
[-101.80430603 270.15515137]
[-90.61601257 260.16406250]
[-86.27651978 245.91561890]
[-70.82955170 242.49484253]
[-59.64125443 232.50375366]
[-48.45295715 222.51264954]
[-65.86930084 197.64735413]
[-79.15941620 170.35292053]
[-87.99268341 141.30838013]
[-92.14936066 111.23622131]
[-91.52605438 80.88455200]
[-86.13826752 51.00840378]
[-76.12001801 22.35099411]
[-61.72054291 -4.37478876]
[-43.29803467 -28.50410080]
[-54.06671143 -38.94610977]
[-64.83538818 -49.38811874]
[-75.60407257 -59.83012772]
[-90.12467194 -54.99165726]
[-105.22869873 -57.46690750]
[-117.44536591 -66.68708038]
[-123.96736908 -80.53345490]
[-123.29599762 -95.82423401]
[-115.58552551 -109.04570770]
[-102.60777283 -117.15966797]
[-87.34492493 -118.30160522]
[-73.30426788 -112.20909882]
[-63.71225357 -100.28215790]
[-60.77304840 -85.26152039]
[-65.16206360 -70.59880829]
[-54.39338303 -60.15679550]
[-43.62470245 -49.71478653]
[-32.85602570 -39.27277756]
[-25.30902863 -46.10023117]
[-17.41171455 -52.51924133]
[-9.18616199 -58.51186752]
[-0.65536606 -64.06135559]
[8.15682411 -69.15218353]
[17.22577477 -73.77012634]
[26.52612877 -77.90227509]
[36.03189087 -81.53707886]
[45.71648026 -84.66436768]
[55.55282974 -87.27541351]
[65.51343536 -89.36289978]
[75.57044983 -90.92099762]
[85.69576263 -91.94535065]
[95.86106873 -92.43310547]
[106.03794098 -92.38288116]
[116.19792938 -91.79483032]
[126.31264496 -90.67059326]
[136.35379028 -89.01331329]
[146.29330444 -86.82762146]
[156.10340881 -84.11962891]
[165.75666809 -80.89690399]
[175.22608948 -77.16846466]
[184.48521423 -72.94473267]
[193.50813293 -68.23750305]
[202.26965332 -63.05994797]
[210.74526978 -57.42654037]
[218.91127014 -51.35302734]
[226.74485779 -44.85638428]
[234.22410583 -37.95478058]
[241.32810974 -30.66750526]
[248.03700256 -23.01493454]
[254.33206177 -15.01845837]
[260.19564819 -6.70043468]
[265.61138916 1.91588342]
[270.56414795 10.80640793]
[275.04010010 19.94628525]
[279.02667236 29.30996132]
[282.51275635 38.87126160]
[285.48861694 48.60345459]
[287.94589233 58.47933197]
[289.87777710 68.47128296]
[291.27880859 78.55138397]
[292.14511108 88.69143677]
[292.47424316 98.86311340]
[292.26528931 109.03796387]
[291.51885986 119.18754578]
[290.23696899 129.28349304]
[288.42327881 139.29757690]
[286.08282471 149.20178223]
[283.22213745 158.96846008]
[279.84924316 168.57026672]
[275.97354126 177.98037720]
[271.60589600 187.17250061]
[266.75851440 196.12091064]
[261.44491577 204.80059814]
[255.68000793 213.18731689]
[249.47985840 221.25759888]
[242.86181641 228.98887634]
[235.84439087 236.35957336]
[228.44718933 243.34904480]
[220.69090271 249.93777466]
[212.59721375 256.10733032]
[204.18875122 261.84045410]
[195.48899841 267.12115479]
[186.52230835 271.93463135]
[177.31372070 276.26745605]
[167.88900757 280.10751343]
[158.27449036 283.44403076]
[148.49707031 286.26773071]
[138.58406067 288.57067871]
[128.56320190 290.34646606]
[118.46247101 291.59008789]
[108.31013489 292.29812622]
[98.13456726 292.46856689]
[87.96421051 292.10092163]
[77.82749939 291.19625854]
[67.75278473 289.75708008]
[57.76821136 287.78738403]
[47.90170670 285.29272461]
[38.18084717 282.28005981]
[28.63281250 278.75781250]
[19.28429222 274.73580933]
[10.16142464 270.22531128]
[1.28971100 265.23895264]
[-7.30604601 259.79061890]
[-15.60181522 253.89558411]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 39]
[3 38]
[4 37]
[6 35]
[7 34]
[8 33]
[9 32]
[10 31]
[11 30]
[48 66]
[49 65]
[50 64]
[51 63]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
