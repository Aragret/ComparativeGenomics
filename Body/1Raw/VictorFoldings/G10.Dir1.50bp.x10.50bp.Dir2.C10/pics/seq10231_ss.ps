%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:33:58 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGACUAUCCCUAUGAGGCAUAAUUAUAACAAGCUCCAUCUGCCUACGACAAACAGACCUAAAxxxxxxxxxxAACUUCGGCUCACUCCUUGGCGCCUGCCUGAUCCUCCAAAUCACCACAGGACUAUUCCUACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[84.60980225 265.32223511]
[84.60980225 250.32225037]
[84.60980225 235.32225037]
[84.60980225 220.32225037]
[84.60980225 205.32225037]
[84.60980225 190.32225037]
[84.60980225 175.32225037]
[84.60980225 160.32225037]
[84.60980225 145.32225037]
[84.60980225 130.32225037]
[79.27898407 125.04660797]
[72.08760071 138.21034241]
[64.89621735 151.37408447]
[60.15649033 165.60556030]
[47.55084991 173.73561096]
[32.63137436 172.18341064]
[21.96926117 161.63261414]
[20.26057053 146.73025513]
[28.25788307 134.03999329]
[42.44092560 129.15116882]
[55.52914429 121.82324219]
[68.61736298 114.49531555]
[63.28654861 109.21967316]
[48.28736115 109.37570953]
[33.28816986 109.53174591]
[18.28898239 109.68778229]
[3.28979421 109.84381866]
[-0.80164456 124.38468170]
[-8.82515621 137.18312073]
[-20.13031006 147.20161438]
[-33.80064774 153.62800598]
[-48.72797775 155.94134521]
[-63.70220566 153.95408630]
[-77.50943756 147.82734680]
[-89.03038788 138.05778503]
[-97.33110046 125.43737030]
[-101.73867798 110.98918915]
[-101.89581299 95.88449097]
[-97.78976440 81.34774017]
[-89.75340271 68.55737305]
[-78.43818665 58.55023956]
[-64.76139832 52.13758469]
[-49.83175659 49.83924103]
[-34.85953140 51.84153366]
[-21.05846024 57.98214340]
[-9.54732990 67.76327515]
[-1.25930023 80.39202881]
[3.13375759 94.84462738]
[18.13294601 94.68859100]
[33.13213348 94.53255463]
[48.13132095 94.37651825]
[63.13051224 94.22048187]
[82.16846466 79.10002136]
[100.04627991 82.37353516]
[101.60386658 67.45462036]
[95.34138489 52.92562103]
[104.35843658 41.07058334]
[105.91602325 26.15167046]
[107.47360229 11.23275852]
[97.79399109 -0.97145838]
[99.58612823 -16.07916832]
[111.28063202 -25.23198700]
[112.83821869 -40.15089798]
[98.48644257 -44.69089127]
[85.34251404 -52.02724075]
[73.94466400 -61.85952759]
[64.75962830 -73.78513336]
[58.16353226 -87.31570435]
[54.42647552 -101.89717102]
[53.70148849 -116.93244171]
[56.01826096 -131.80581665]
[61.28192520 -145.90826416]
[69.27693176 -158.66226196]
[79.67589569 -169.54557800]
[92.05298615 -178.11253357]
[105.90135956 -184.01229858]
[120.65394592 -187.00331116]
[135.70663452 -186.96307373]
[150.44300842 -183.89323425]
[164.25964355 -177.91950989]
[176.59075928 -169.28651428]
[186.93139648 -158.34777832]
[194.85810852 -145.55120850]
[200.04629517 -131.42082214]
[202.28352356 -116.53527069]
[201.47816467 -101.50409698]
[197.66320801 -86.94281006]
[190.99487305 -73.44770050]
[181.74621582 -61.57136917]
[170.29595947 -51.80015182]
[157.11300659 -44.53417587]
[142.73716736 -40.07097626]
[127.75712585 -38.59331894]
[126.19954681 -23.67440605]
[135.75131226 -12.30341148]
[134.38421631 2.84867573]
[122.39251709 12.79033947]
[120.83493042 27.70925140]
[119.27735138 42.62816238]
[125.65124512 56.09006500]
[116.52277374 69.01220703]
[114.96519470 83.93111420]
[124.23014069 95.72776031]
[139.09318542 97.75009155]
[153.95623779 99.77242279]
[168.81929016 101.79476166]
[182.51199341 90.95746613]
[199.47685242 93.29788208]
[209.32815552 106.89236450]
[224.23005676 108.60504913]
[239.13195801 110.31774139]
[254.03385925 112.03043365]
[265.26235962 101.14673615]
[280.86340332 100.07844543]
[293.47067261 109.32997894]
[297.13137817 124.53304291]
[290.11706543 138.50921631]
[275.73968506 144.65937805]
[260.78775024 140.07960510]
[252.32116699 126.93233490]
[237.41926575 125.21964264]
[222.51736450 123.50695801]
[207.61546326 121.79426575]
[198.71136475 131.15983582]
[185.84297180 133.70513916]
[173.68777466 128.27565002]
[166.79695129 116.65780640]
[151.93389893 114.63547516]
[137.07086182 112.61313629]
[122.20780945 110.59080505]
[116.55830383 115.52366638]
[128.63229370 124.42415619]
[143.33702087 127.38580322]
[152.17855835 139.50302124]
[150.51211548 154.41017151]
[139.21313477 164.27592468]
[124.21742249 163.91741943]
[113.40281677 153.52297974]
[112.45068359 138.55313110]
[105.25930023 125.38938904]
[99.60980225 130.32225037]
[99.60980225 145.32225037]
[99.60980225 160.32225037]
[99.60980225 175.32225037]
[99.60980225 190.32225037]
[99.60980225 205.32225037]
[99.60980225 220.32225037]
[99.60980225 235.32225037]
[99.60980225 250.32225037]
[99.60980225 265.32223511]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[23 52]
[24 51]
[25 50]
[26 49]
[27 48]
[54 102]
[55 101]
[57 99]
[58 98]
[59 97]
[62 94]
[63 93]
[103 130]
[104 129]
[105 128]
[106 127]
[109 123]
[110 122]
[111 121]
[112 120]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
