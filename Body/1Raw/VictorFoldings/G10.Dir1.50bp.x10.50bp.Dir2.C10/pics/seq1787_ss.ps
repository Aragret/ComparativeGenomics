%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:27 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCUUAACACAAAGCACCCAACUUACACUUAGGAGAUUUCAACUUAACUUGACCGCUCUGAGxxxxxxxxxxACAGUGAUUAUAGGCUUUCGCUCUAAGAUUAAAAAUGCCCUAGCCCACUUCUUACCACAACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[92.12330627 383.76513672]
[92.12330627 368.76513672]
[92.12330627 353.76513672]
[92.12330627 338.76513672]
[92.12330627 323.76513672]
[92.12330627 308.76513672]
[92.12330627 293.76513672]
[92.12330627 278.76513672]
[92.12330627 263.76513672]
[92.12330627 248.76515198]
[77.14723206 244.51765442]
[63.95526123 236.22625732]
[53.61425400 224.55191040]
[46.96320343 210.42948914]
[44.54518127 194.99301147]
[46.56298447 179.48451233]
[52.86216736 165.15417480]
[62.94282532 153.15948486]
[75.99925232 144.47177124]
[90.98435211 139.79757690]
[90.67229462 124.80081940]
[90.36023712 109.80406189]
[83.87207031 96.27987671]
[72.37026978 86.65134430]
[60.86846542 77.02281952]
[48.62823868 86.97895813]
[34.69976044 94.38193512]
[19.60817719 98.95460510]
[3.92210054 100.52647400]
[-11.76780701 99.04010773]
[-26.87107468 94.55317688]
[-40.81964111 87.23625183]
[-53.08923340 77.36629486]
[-63.21905136 65.31621552]
[-70.82909393 51.54073334]
[-75.63439941 36.55926132]
[-77.45572662 20.93629074]
[-76.22622681 5.26013613]
[-71.99391937 -9.87922001]
[-64.91979218 -23.91233444]
[-76.81217194 -33.05406952]
[-88.70455170 -42.19580460]
[-100.59693146 -51.33753586]
[-115.40778351 -47.10139847]
[-129.70594788 -52.33741760]
[-138.08024597 -64.84082031]
[-137.49327087 -79.69994354]
[-149.38565063 -88.84167480]
[-161.27803040 -97.98341370]
[-173.17041016 -107.12514496]
[-188.80679321 -104.82759857]
[-201.43797302 -114.32649231]
[-203.57008362 -129.98629761]
[-193.93817139 -142.51634216]
[-178.25669861 -144.48275757]
[-165.82919312 -134.71891785]
[-164.02867126 -119.01752472]
[-152.13629150 -109.87579346]
[-140.24391174 -100.73405457]
[-128.35153198 -91.59232330]
[-114.14301300 -95.98049164]
[-99.90666199 -91.10297394]
[-91.17002106 -78.63202667]
[-91.45520020 -63.22991562]
[-79.56282043 -54.08818436]
[-67.67044067 -44.94644928]
[-55.77805710 -35.80471420]
[-45.20397568 -45.38124084]
[-33.11069107 -52.95593262]
[-19.87269783 -58.29273987]
[-5.90019798 -61.22492981]
[8.37360573 -61.66031265]
[22.50594330 -59.58411407]
[36.05821609 -55.05950165]
[48.60959625 -48.22564697]
[59.77011108 -39.29343796]
[69.19274139 -28.53899765]
[76.58423615 -16.29512024]
[81.71421051 -2.94098878]
[84.42234802 11.10956955]
[84.62339020 25.42091370]
[82.30985260 39.54908752]
[77.55224609 53.05559540]
[70.49699402 65.52101898]
[81.99879456 75.14954376]
[93.50060272 84.77806854]
[88.01898956 70.81555176]
[93.31527710 56.78168488]
[106.65496063 49.92218781]
[121.15074921 53.77863693]
[129.31842041 66.35993195]
[126.94100189 81.17033386]
[115.24399567 90.56381226]
[130.01005554 87.92494202]
[144.77610779 85.28607941]
[159.54216003 82.64721680]
[166.38117981 68.84381104]
[179.87893677 61.79656219]
[194.76216125 64.02226257]
[205.35412598 74.46009064]
[220.12019348 71.82122803]
[222.99888611 56.91896057]
[231.06982422 44.06499863]
[243.24148560 34.99773407]
[257.86773682 30.94343567]
[272.97048950 32.45042038]
[286.50723267 39.31487656]
[296.64724731 50.60844421]
[302.01916504 64.80375671]
[301.89648438 79.98102570]
[296.29577637 94.08763885]
[285.97451782 105.21579742]
[272.32855225 111.86051178]
[257.20339966 113.12313080]
[242.64460754 108.83290100]
[230.62112427 99.57004547]
[222.75904846 86.58728027]
[207.99299622 89.22614288]
[201.67190552 102.68652344]
[188.48083496 109.92942810]
[173.37767029 107.99349976]
[162.18103027 97.41326904]
[147.41496277 100.05213928]
[132.64891052 102.69100189]
[117.88285828 105.32986450]
[113.74105072 108.33866882]
[109.38426208 109.68586731]
[105.35699463 109.49200439]
[105.66905212 124.48876190]
[105.98110199 139.48551941]
[120.01859283 143.06469727]
[132.63470459 150.15997314]
[142.96716309 160.27915955]
[150.31163025 172.72363281]
[154.16976929 186.63656616]
[154.28300476 201.06193542]
[150.64988708 215.01019287]
[143.52574158 227.52616882]
[133.40472412 237.75447083]
[120.98555756 244.99792480]
[107.12330627 248.76515198]
[107.12330627 263.76513672]
[107.12330627 278.76513672]
[107.12330627 293.76513672]
[107.12330627 308.76513672]
[107.12330627 323.76513672]
[107.12330627 338.76513672]
[107.12330627 353.76513672]
[107.12330627 368.76513672]
[107.12330627 383.76513672]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[20 130]
[21 129]
[22 128]
[23 86]
[24 85]
[25 84]
[40 67]
[41 66]
[42 65]
[43 64]
[47 60]
[48 59]
[49 58]
[50 57]
[93 125]
[94 124]
[95 123]
[96 122]
[100 118]
[101 117]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
