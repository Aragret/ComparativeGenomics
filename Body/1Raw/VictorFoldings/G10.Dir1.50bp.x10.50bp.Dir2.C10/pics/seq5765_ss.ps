%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:54 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGAUAAAAUGACAGUUUGAACAUACAAAACCCACCCCAUUCCUCCCCACACUCAUCGCCCUUAxxxxxxxxxxCUAUGCUUAGGCGCUAUCACCACUCUGUUCGCAGCAGUCUGCGCCCUUACACAAAAUGACACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[-20.79330444 207.51274109]
[-28.52589035 198.13819885]
[-40.85717392 206.67866516]
[-53.18845749 215.21913147]
[-65.51974487 223.75958252]
[-72.45932770 237.97763062]
[-87.32756805 238.86335754]
[-99.65885162 247.40380859]
[-111.99013519 255.94427490]
[-108.84637451 270.78988647]
[-111.61843109 285.66802979]
[-119.85327911 298.31716919]
[-132.26994324 306.82681274]
[-146.95874023 309.92587280]
[-161.67488098 307.17257690]
[-174.18159485 299.01712036]
[-186.51287842 307.55758667]
[-198.84416199 316.09805298]
[-206.28768921 332.90948486]
[-223.79095459 333.73446655]
[-235.94427490 342.52630615]
[-245.23359680 356.70886230]
[-261.43344116 351.70870972]
[-261.11325073 334.75778198]
[-244.73612976 330.37298584]
[-232.58279419 321.58114624]
[-230.33920288 309.65518188]
[-220.23237610 302.23739624]
[-207.38461304 303.76675415]
[-195.05332947 295.22628784]
[-182.72204590 286.68585205]
[-185.95866394 272.11004639]
[-183.36117554 257.36560059]
[-175.29473877 244.70474243]
[-162.96228027 236.07351685]
[-148.22523499 232.81268311]
[-133.32255554 235.44955444]
[-120.53059387 243.61299133]
[-108.19931030 235.07252502]
[-95.86802673 226.53207397]
[-89.81046295 212.92489624]
[-74.06020355 211.42829895]
[-61.72891617 202.88783264]
[-49.39763260 194.34738159]
[-37.06634903 185.80691528]
[-46.01218796 169.50146484]
[-53.02666855 152.27667236]
[-58.01700592 134.36041260]
[-60.91719437 115.98964691]
[-61.68886948 97.40737915]
[-60.32182312 78.85941315]
[-56.83414078 60.59107208]
[-51.27195740 42.84401321]
[-43.70883942 25.85297394]
[-34.24483109 9.84270859]
[-23.00511551 -4.97501326]
[-10.13836479 -18.40419006]
[4.18522739 -30.26719093]
[19.77619743 -40.40710068]
[36.42831802 -48.68978882]
[53.92132568 -55.00570297]
[72.02383423 -59.27129745]
[90.49639130 -61.43014908]
[109.09465790 -61.45370483]
[110.63195038 -76.37472534]
[112.16924286 -91.29573822]
[113.70653534 -106.21675110]
[99.55690002 -111.43581390]
[87.15019226 -120.01045990]
[77.26631927 -131.40167236]
[70.52658081 -144.89340210]
[67.35464478 -159.63754272]
[67.94989777 -174.70726013]
[72.27492523 -189.15527344]
[80.05786133 -202.07334900]
[90.80944824 -212.64945984]
[103.85384369 -220.21878052]
[118.37106323 -224.30549622]
[133.44853210 -224.65270996]
[148.13848877 -221.23858643]
[161.51748657 -214.27777100]
[172.74453735 -204.20779419]
[181.11387634 -191.66168213]
[186.09939575 -177.42808533]
[187.38772583 -162.40173340]
[184.89787292 -147.52722168]
[178.78633118 -133.73954773]
[169.43730164 -121.90541840]
[157.43847656 -112.76874542]
[143.54408264 -106.90386963]
[128.62754822 -104.67945862]
[127.09026337 -89.75844574]
[125.55297089 -74.83743286]
[124.01567841 -59.91641235]
[137.90576172 -57.20421219]
[151.50552368 -53.28794098]
[164.71078491 -48.19758987]
[177.42041016 -41.97215271]
[189.53704834 -34.65930557]
[200.96789551 -26.31506729]
[211.62539673 -17.00334167]
[221.42793274 -6.79545498]
[230.30041504 4.23041010]
[238.17488098 15.98980236]
[244.99102783 28.39265442]
[250.69665527 41.34396744]
[255.24804688 54.74454498]
[258.61035156 68.49174500]
[260.75781250 82.48027802]
[261.67398071 96.60299683]
[261.35183716 110.75173950]
[276.25628662 112.44213867]
[291.16073608 114.13253021]
[306.06515503 115.82292938]
[320.96960449 117.51332855]
[335.78106689 110.47393036]
[349.12768555 120.00283051]
[347.27960205 136.29751587]
[332.13800049 142.59541321]
[319.27920532 132.41777039]
[304.37478638 130.72737122]
[289.47033691 129.03698730]
[274.56588745 127.34658051]
[259.66143799 125.65618896]
[257.28396606 137.57350159]
[254.01826477 149.27864075]
[249.88281250 160.70547485]
[244.90092468 171.78950500]
[239.10075378 182.46812439]
[232.51506042 192.68101501]
[225.18101501 202.37052917]
[217.14004517 211.48193359]
[208.43756104 219.96377563]
[199.12271118 227.76814270]
[189.24809265 234.85099792]
[178.86946106 241.17230225]
[168.04545593 246.69638062]
[156.83717346 251.39202881]
[145.30790710 255.23274231]
[133.52279663 258.19680786]
[121.54836273 260.26751709]
[109.45223999 261.43316650]
[97.30274200 261.68716431]
[85.16847992 261.02807617]
[73.11797333 259.45962524]
[61.21926880 256.99066162]
[49.53957367 253.63514709]
[38.14483643 249.41201782]
[27.09941101 244.34512329]
[16.46567154 238.46308899]
[6.30366707 231.79911804]
[-3.32921362 224.39085388]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 45]
[3 44]
[4 43]
[5 42]
[7 40]
[8 39]
[9 38]
[16 31]
[17 30]
[18 29]
[20 26]
[21 25]
[64 94]
[65 93]
[66 92]
[67 91]
[111 124]
[112 123]
[113 122]
[114 121]
[115 120]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
