%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:49 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGACCACCCAACUAUCUAUAAACCUAGCCAUGGCCAUCCCCUUAUGAGCGGGCACAGUGAUUAUAxxxxxxxxxxAUUCUAAUUUAAACUAUUCUCUGUUCUUUCAUGGGGAAGCAGAUUUGGGUACCACCCAAGUAUCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[120.69213867 486.39929199]
[120.69213867 471.39929199]
[120.69213867 456.39929199]
[120.69213867 441.39929199]
[120.69213867 426.39929199]
[120.69213867 411.39929199]
[120.69213867 396.39929199]
[120.69213867 381.39929199]
[120.69213867 366.39929199]
[120.69213867 351.39929199]
[100.69380188 340.09588623]
[91.22407532 319.03744507]
[96.08815765 296.34527588]
[113.53355408 280.86169434]
[110.55202484 266.16098022]
[107.57049561 251.46029663]
[104.58895874 236.75959778]
[101.60742950 222.05889893]
[98.62590027 207.35820007]
[95.16415405 203.99443054]
[93.81401062 198.40142822]
[95.83158875 192.01023865]
[93.44061279 177.20202637]
[91.04963684 162.39381409]
[88.65866089 147.58558655]
[82.70293427 161.35255432]
[72.24581909 172.10656738]
[58.65094376 178.44528198]
[43.69110107 179.54212952]
[29.31707764 175.25407410]
[17.40326881 166.14027405]
[9.50325680 153.38920593]
[6.64721489 138.66362000]
[9.20757484 123.88375092]
[16.85046387 110.97692108]
[28.57923317 101.62619781]
[42.86443710 97.05094147]
[57.84325790 97.84776306]
[71.56243134 103.91275787]
[82.23296356 114.45504761]
[88.46371460 128.10116577]
[90.55791473 113.24807739]
[84.11353302 103.50493622]
[85.86008453 91.95468140]
[94.89705658 84.55252838]
[97.28803253 69.74431610]
[99.67900848 54.93609619]
[102.06998444 40.12788391]
[104.46095276 25.31966591]
[102.44338226 18.92847633]
[103.79351807 13.33547878]
[107.25526428 9.97170067]
[110.23680115 -4.72899628]
[113.21833038 -19.42969322]
[116.19985962 -34.13039017]
[119.18138885 -48.83108521]
[117.42114258 -55.29788208]
[118.99397278 -60.83238220]
[122.58753204 -64.05496216]
[126.15484619 -78.62459564]
[121.92150116 -93.86891937]
[132.46362305 -104.39094543]
[136.03092957 -118.96057892]
[139.59825134 -133.53021240]
[143.16555786 -148.09985352]
[138.93222046 -163.34417725]
[149.47433472 -173.86619568]
[153.04165649 -188.43583679]
[139.33415222 -194.63412476]
[126.99910736 -203.24583435]
[116.45666504 -213.97763062]
[108.06587982 -226.46400452]
[102.11255646 -240.27966309]
[98.79944611 -254.95407104]
[98.23940277 -269.98739624]
[100.45149994 -284.86761475]
[105.36038971 -299.08795166]
[112.79888916 -312.16400146]
[122.51362610 -323.65045166]
[134.17373657 -333.15606689]
[147.38206482 -340.35705566]
[161.68876648 -345.00820923]
[176.60653687 -346.95108032]
[191.62728882 -346.11947632]
[206.23944092 -342.54174805]
[219.94526672 -336.33975220]
[232.27798462 -327.72473145]
[242.81753540 -316.99008179]
[251.20495605 -304.50146484]
[257.15457153 -290.68420410]
[260.46371460 -276.00891113]
[261.01968384 -260.97543335]
[258.80358887 -246.09579468]
[253.89086914 -231.87680054]
[246.44885254 -218.80273438]
[236.73101807 -207.31890869]
[225.06834412 -197.81645203]
[211.85806274 -190.61900330]
[197.55010986 -185.97172546]
[182.63182068 -184.03288269]
[167.61128235 -184.86851501]
[164.04397583 -170.29888916]
[168.53247070 -156.09667969]
[157.73519897 -144.53253174]
[154.16787720 -129.96290588]
[150.60057068 -115.39326477]
[147.03326416 -100.82363129]
[151.52175903 -86.62142944]
[140.72447205 -75.05728912]
[137.15716553 -60.48765182]
[133.88208008 -45.84955215]
[130.90055847 -31.14885712]
[127.91902161 -16.44816017]
[124.93749237 -1.74746478]
[121.95596313 12.95323181]
[119.26917267 27.71064186]
[116.87819672 42.51885605]
[114.48722076 57.32707214]
[112.09624481 72.13528442]
[109.70526886 86.94350433]
[116.08564758 102.43235779]
[105.41101074 115.34227753]
[103.31680298 130.19537354]
[103.46688080 145.19461060]
[105.85785675 160.00283813]
[108.24883270 174.81105042]
[110.63980103 189.61926270]
[113.32659149 204.37667847]
[116.30812836 219.07736206]
[119.28965759 233.77806091]
[122.27118683 248.47875977]
[125.25272369 263.17944336]
[128.23425293 277.88015747]
[136.03141785 278.76342773]
[143.46327209 281.24652100]
[150.20584106 285.21627808]
[155.96624756 290.49472046]
[160.49536133 296.84722900]
[163.59867859 303.99288940]
[165.14462280 311.61685181]
[165.07008362 319.38430786]
[163.38305664 326.95513916]
[160.16200256 333.99874878]
[155.55229187 340.20867920]
[149.75958252 345.31573486]
[143.04067993 349.09982300]
[135.69213867 351.39929199]
[135.69213867 366.39929199]
[135.69213867 381.39929199]
[135.69213867 396.39929199]
[135.69213867 411.39929199]
[135.69213867 426.39929199]
[135.69213867 441.39929199]
[135.69213867 456.39929199]
[135.69213867 471.39929199]
[135.69213867 486.39929199]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 156]
[2 155]
[3 154]
[4 153]
[5 152]
[6 151]
[7 150]
[8 149]
[9 148]
[10 147]
[14 133]
[15 132]
[16 131]
[17 130]
[18 129]
[19 128]
[22 127]
[23 126]
[24 125]
[25 124]
[41 123]
[42 122]
[45 120]
[46 119]
[47 118]
[48 117]
[49 116]
[52 115]
[53 114]
[54 113]
[55 112]
[56 111]
[59 110]
[60 109]
[62 107]
[63 106]
[64 105]
[65 104]
[67 102]
[68 101]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
