%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:48 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGUCUAGAGGAGCCUGUUCUGUAAUCGAUAAACCCCGAUCAACCUCACCACCUCUUGCUCAGxxxxxxxxxxCUCCUCAAGUAUACUUCAAAGGACAUUUAACUAAAACCCCUACGCAUUUAUAUAGAGGAGCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[92.50000000 248.62106323]
[92.50000000 233.62106323]
[92.50000000 218.62106323]
[92.50000000 203.62106323]
[92.50000000 188.62106323]
[92.50000000 173.62106323]
[92.50000000 158.62106323]
[92.50000000 143.62106323]
[92.50000000 128.62106323]
[92.50000000 113.62105560]
[82.81616211 125.07633209]
[68.26158142 121.44807434]
[65.08802795 106.78763580]
[76.84027863 97.46484375]
[61.84758377 96.99680328]
[46.85488892 96.52876282]
[31.86219215 96.06071472]
[16.86949730 95.59267426]
[12.12999249 109.92505646]
[3.55257487 122.32868958]
[-8.16059113 131.80322266]
[-22.05486679 137.58746338]
[-37.00093842 139.22052002]
[-51.78661346 136.57856750]
[-65.21512604 129.88410950]
[-76.20200348 119.68733215]
[-83.86267090 106.82087708]
[-87.58362579 92.33185577]
[-102.57631683 91.86381531]
[-108.66800690 94.69203186]
[-114.39846039 94.06495667]
[-118.17929840 91.05152130]
[-133.13955688 89.96021271]
[-148.09979248 88.86890411]
[-163.06004333 87.77758789]
[-172.96662903 99.72075653]
[-188.00953674 103.52740479]
[-202.40446472 97.73381042]
[-210.61625671 84.56771851]
[-209.48733521 69.09175873]
[-199.45176697 57.25676727]
[-184.36845398 53.61352539]
[-170.03723145 59.56294250]
[-161.96873474 72.81734467]
[-147.00848389 73.90865326]
[-132.04823303 74.99996185]
[-117.08798981 76.09127045]
[-102.10827637 76.87111664]
[-87.11557770 77.33915710]
[-82.49811554 63.11044312]
[-74.04981995 50.74688339]
[-62.44830704 41.25527573]
[-48.62837601 35.41145706]
[-33.70669937 33.69689941]
[-18.89159393 36.25904846]
[-5.38516855 42.89868164]
[5.71421337 53.08538055]
[13.50124931 65.99987793]
[17.33753967 80.59997559]
[32.33023453 81.06802368]
[47.32292938 81.53606415]
[62.31562805 82.00410461]
[77.30832672 82.47214508]
[106.05274200 82.06865692]
[116.93156433 71.74145508]
[127.81038666 61.41424942]
[118.68870544 49.48835373]
[110.88636017 36.66043472]
[104.49176788 23.07583618]
[99.57738495 8.88848686]
[96.19888306 -5.74086189]
[94.39455414 -20.64644814]
[94.18484497 -35.65937805]
[95.57212067 -50.60955048]
[98.54067230 -65.32756042]
[103.05685425 -79.64664459]
[109.06950378 -93.40455627]
[116.51049042 -106.44540405]
[125.29550171 -118.62143707]
[135.32499695 -129.79467773]
[146.48533630 -139.83853149]
[158.65005493 -148.63920593]
[171.68132019 -156.09695435]
[185.43148804 -162.12728882]
[199.74475098 -166.66189575]
[214.45893860 -169.64936829]
[229.40730286 -171.05587769]
[244.42048645 -170.86546326]
[259.32839966 -169.08030701]
[273.96206665 -165.72064209]
[288.15573120 -160.82449341]
[301.74853516 -154.44738770]
[314.58648682 -146.66154480]
[326.52410889 -137.55520630]
[337.42611694 -127.23155212]
[347.16903687 -115.80754089]
[355.64242554 -103.41263580]
[362.75030518 -90.18727112]
[368.41210938 -76.28129578]
[372.56369019 -61.85228348]
[375.15802002 -47.06372452]
[376.16571045 -32.08318329]
[375.57531738 -17.08039665]
[373.39355469 -2.22536421]
[369.64514160 12.31359863]
[364.37252808 26.37175179]
[357.63546753 39.78981018]
[349.51031494 52.41572952]
[340.08911133 64.10645294]
[329.47860718 74.72952271]
[317.79904175 84.16455841]
[305.18276978 92.30465698]
[291.77270508 99.05759430]
[277.72079468 104.34683990]
[263.18627930 108.11247253]
[248.33383179 110.31182098]
[233.33175659 110.91997528]
[218.35003662 109.93002319]
[203.55841064 107.35320282]
[189.12449646 103.21869659]
[175.21183777 97.57335663]
[161.97805786 90.48115540]
[149.57312012 82.02244568]
[138.13758850 72.29307556]
[127.25876617 82.62027740]
[116.37994385 92.94748688]
[127.97526550 83.43178558]
[142.27539062 78.90336609]
[157.23451233 80.01004791]
[170.71255493 86.59352875]
[180.78135681 97.71195221]
[186.00044250 111.77470398]
[185.62316895 126.76995850]
[179.70352173 140.55247498]
[169.08834839 151.15049744]
[155.29629517 157.04788208]
[140.30044556 157.40092468]
[126.24613953 152.15911865]
[115.14399719 142.07237244]
[108.58230591 128.58370972]
[107.50000000 113.62105560]
[107.50000000 128.62106323]
[107.50000000 143.62106323]
[107.50000000 158.62106323]
[107.50000000 173.62106323]
[107.50000000 188.62106323]
[107.50000000 203.62106323]
[107.50000000 218.62106323]
[107.50000000 233.62106323]
[107.50000000 248.62106323]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[14 63]
[15 62]
[16 61]
[17 60]
[18 59]
[28 49]
[29 48]
[32 47]
[33 46]
[34 45]
[35 44]
[64 126]
[65 125]
[66 124]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
