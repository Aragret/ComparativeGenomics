%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:02 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGUACCCCUUCCUUGUACUAUCCCUAUGAGGCAUAAUUAUAACAAGCUCCAUCUGCCUACGAxxxxxxxxxxCCGGAAGCCUAUUCGCAGGAUUUCUCAUUACUAACAACAUUUCCCCCGCAUCCCCCUUCCCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[111.39627075 274.24841309]
[111.39627075 259.24841309]
[111.39627075 244.24842834]
[111.39627075 229.24842834]
[111.39627075 214.24842834]
[111.39627075 199.24842834]
[111.39627075 184.24842834]
[111.39627075 169.24842834]
[111.39627075 154.24842834]
[111.39627075 139.24842834]
[96.59505463 139.72061157]
[82.96938324 134.93278503]
[72.27440643 125.78110504]
[65.78569794 113.70404816]
[64.14940643 100.46117401]
[67.32559204 87.87844086]
[54.71446609 79.75689697]
[42.10334015 71.63535309]
[29.49221039 63.51381302]
[16.88108253 55.39226913]
[6.65134144 65.86650085]
[-5.42914629 74.12925720]
[-18.89046288 79.86148071]
[-33.20943832 82.84252930]
[-47.82999039 82.95861816]
[-62.18471146 80.20719910]
[-75.71690369 74.69696808]
[-87.90213776 66.64356995]
[-98.26861572 56.36116409]
[-106.41541290 44.25017929]
[-112.02799988 30.78170776]
[-114.89035797 16.47917557]
[-114.89331818 1.89801800]
[-112.03873444 -12.39590645]
[-106.43928528 -25.84826469]
[-118.87872314 -34.23040771]
[-131.40469360 -42.48269653]
[-144.01582336 -50.60423660]
[-156.62693787 -58.72578049]
[-169.23806763 -66.84732056]
[-181.84919739 -74.96886444]
[-193.26550293 -65.07722473]
[-207.00674438 -58.80386734]
[-221.95898438 -56.65734100]
[-236.91007996 -58.81166077]
[-250.64805603 -65.09218597]
[-262.05920410 -74.98977661]
[-270.21847534 -87.70208740]
[-274.46444702 -102.19857788]
[-274.45294189 -117.30409241]
[-270.18484497 -131.79409790]
[-262.00616455 -144.49392700]
[-250.57992554 -154.37409973]
[-236.83238220 -160.63365173]
[-221.87800598 -162.76515198]
[-206.92907715 -160.59580994]
[-193.19743347 -154.30149841]
[-181.79623413 -144.39244080]
[-173.64971924 -131.67193604]
[-169.41830444 -117.17118835]
[-169.44500732 -102.06569672]
[-173.72766113 -87.57999420]
[-161.11653137 -79.45845032]
[-148.50540161 -71.33690643]
[-135.89427185 -63.21536636]
[-123.28314209 -55.09382629]
[-115.90900421 -54.11011124]
[-110.49658203 -46.66984558]
[-98.05714417 -38.28770447]
[-87.04932404 -49.04288483]
[-74.04940796 -57.29041672]
[-59.61891174 -62.67129517]
[-44.38170624 -64.95040894]
[-28.99705505 -64.02677155]
[-14.13109589 -59.93805695]
[-0.42798698 -52.85900116]
[11.51799965 -43.09398270]
[21.18825150 -31.06392097]
[28.16232872 -17.28812981]
[32.13624573 -2.36190033]
[32.93571854 13.06921577]
[30.52381134 28.33733559]
[25.00262451 42.78114319]
[37.61375427 50.90268326]
[50.22488022 59.02422714]
[62.83600998 67.14576721]
[75.44713593 75.26731110]
[85.48195648 67.37411499]
[97.96765137 63.48639679]
[111.32814789 64.32539368]
[123.79379272 70.00051880]
[133.63571167 79.96652985]
[139.40473938 93.06925201]
[140.14193726 107.67714691]
[155.07624817 106.27484131]
[165.14212036 94.38719940]
[180.30760193 93.17781067]
[191.57862854 102.84733582]
[206.51292419 101.44503021]
[221.44723511 100.04273224]
[224.13146973 85.18683624]
[230.72528076 71.60655212]
[240.73934937 60.30960464]
[253.43057251 52.13431549]
[267.85717773 47.68734360]
[282.94863892 47.29867935]
[297.58502197 50.99716949]
[310.68023682 58.50835800]
[321.26251221 69.27486420]
[328.54660034 82.49774933]
[331.99197388 97.19577789]
[331.34295654 112.27825928]
[326.64767456 126.62597656]
[318.25460815 139.17424011]
[306.78652954 148.99186707]
[293.09448242 155.35035706]
[278.19448853 157.77783203]
[263.19223022 156.09417725]
[249.20095825 150.42431641]
[237.25894165 141.18901062]
[228.25234985 129.07356262]
[222.84953308 114.97703552]
[207.91523743 116.37934113]
[192.98092651 117.78164673]
[183.70695496 129.38031006]
[168.58142090 131.01518250]
[156.47854614 121.20915222]
[141.54423523 122.61145020]
[155.32263184 128.54071045]
[170.29170227 127.57805634]
[184.04554749 133.56405640]
[193.54235840 145.17483521]
[196.68188477 159.84260559]
[192.76977539 174.32347107]
[182.67123413 185.41488647]
[168.61961365 190.66389465]
[153.72254944 188.90965271]
[141.27462769 180.54011536]
[134.02879333 167.40626526]
[133.58764648 152.41217041]
[126.39627075 139.24842834]
[126.39627075 154.24842834]
[126.39627075 169.24842834]
[126.39627075 184.24842834]
[126.39627075 199.24842834]
[126.39627075 214.24842834]
[126.39627075 229.24842834]
[126.39627075 244.24842834]
[126.39627075 259.24841309]
[126.39627075 274.24841309]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[16 87]
[17 86]
[18 85]
[19 84]
[20 83]
[35 69]
[36 68]
[37 66]
[38 65]
[39 64]
[40 63]
[41 62]
[94 128]
[95 127]
[98 124]
[99 123]
[100 122]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
