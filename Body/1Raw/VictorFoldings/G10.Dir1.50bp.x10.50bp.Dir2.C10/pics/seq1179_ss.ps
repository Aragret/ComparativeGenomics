%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:20 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGUGCCAGCCACCGCGGUCACACGAUUAACCCAAGUCAAUAGAAGCCGGCGUAAAGAGUGUUUxxxxxxxxxxCCCAAGUAUUGACUCACCCAUCAACAACCGCUAUGUAUUUCGUACAUUACUGCCAGCCACCCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[97.56267548 223.36439514]
[96.94684601 208.37704468]
[96.33102417 193.38969421]
[95.71519470 178.40234375]
[95.09937286 163.41499329]
[94.48354340 148.42762756]
[93.86772156 133.44027710]
[93.25189972 118.45292664]
[78.86741638 114.20008087]
[70.20080566 126.44303131]
[61.53419876 138.68598938]
[52.86759186 150.92893982]
[54.14412689 166.92112732]
[42.33879471 177.78453064]
[26.50763512 175.18569946]
[18.79496193 161.11820984]
[25.11727524 146.37344360]
[40.62463760 142.26232910]
[49.29124451 130.01937866]
[57.95785522 117.77642822]
[66.62445831 105.53347015]
[68.31485748 90.62902832]
[62.61019516 76.75614166]
[56.90553284 62.88326263]
[51.20087051 49.01038361]
[45.49620438 35.13750458]
[31.92081833 37.79104996]
[18.09319687 37.86811447]
[4.49785519 35.36766052]
[-8.38914776 30.37893677]
[-20.11686897 23.07829094]
[-30.27526474 13.72294235]
[-38.50952530 2.64191055]
[-44.53247070 -9.77554607]
[-48.13455582 -23.09361076]
[-49.19118500 -36.84520340]
[-47.66698456 -50.54835892]
[-43.61701965 -63.72312164]
[-37.18478394 -75.90835571]
[-28.59712219 -86.67787933]
[-18.15624046 -95.65538788]
[-6.22905493 -102.52758026]
[-11.06887150 -116.72533417]
[-15.90868759 -130.92308044]
[-20.74850464 -145.12083435]
[-25.58831978 -159.31858826]
[-30.42813683 -173.51634216]
[-35.26795197 -187.71409607]
[-40.10776901 -201.91184998]
[-54.91849136 -199.34494019]
[-69.94842529 -199.12666321]
[-84.82743835 -201.26239014]
[-99.18913269 -205.69953918]
[-112.67983246 -212.32882690]
[-124.96731567 -220.98701477]
[-135.74899292 -231.46089172]
[-144.75936890 -243.49250793]
[-151.77651978 -256.78558350]
[-156.62768555 -271.01275635]
[-159.19337463 -285.82369995]
[-159.41041565 -300.85363770]
[-157.27345276 -315.73248291]
[-152.83511353 -330.09381104]
[-146.20471191 -343.58395386]
[-137.54551697 -355.87072754]
[-127.07075500 -366.65155029]
[-115.03839874 -375.66091919]
[-101.74474335 -382.67700195]
[-87.51715851 -387.52697754]
[-72.70601654 -390.09143066]
[-57.67604446 -390.30725098]
[-42.79738235 -388.16906738]
[-28.43642235 -383.72952271]
[-14.94681644 -377.09802246]
[-2.66076112 -368.43780518]
[8.11919022 -357.96215820]
[17.12757111 -345.92904663]
[24.14254189 -332.63482666]
[28.99135399 -318.40682983]
[31.55459976 -303.59548950]
[31.76915550 -288.56549072]
[29.62974167 -273.68701172]
[25.18903923 -259.32641602]
[18.55640602 -245.83735657]
[9.89517689 -233.55201721]
[-0.58135772 -222.77291870]
[-12.61520386 -213.76553345]
[-25.91001701 -206.75166321]
[-21.07019997 -192.55390930]
[-16.23038483 -178.35615540]
[-11.39056778 -164.15840149]
[-6.55075169 -149.96064758]
[-1.71093512 -135.76289368]
[3.12888122 -121.56514740]
[7.96869755 -107.36739349]
[24.09401512 -109.27130890]
[40.25053024 -107.58955383]
[55.65032196 -102.40128326]
[69.54175568 -93.95673370]
[81.24616241 -82.66513824]
[90.19096375 -69.07490540]
[95.93775177 -53.84699249]
[98.20369720 -37.72274780]
[96.87553406 -21.48781967]
[92.01516724 -5.93388557]
[83.85681915 8.17996025]
[72.79575348 20.16425514]
[59.36908722 29.43284035]
[65.07374573 43.30572128]
[70.77841187 57.17860031]
[76.48307800 71.05148315]
[82.18773651 84.92436218]
[104.48415375 69.33115387]
[135.41952515 84.52075958]
[149.92814636 88.32862091]
[164.43678284 92.13648224]
[178.94540405 95.94433594]
[193.45402527 99.75219727]
[207.97592163 92.93354797]
[222.29684448 100.16478729]
[225.43099976 115.89871979]
[214.97413635 128.06561279]
[198.94786072 127.33208466]
[189.64616394 114.26082611]
[175.13754272 110.45296478]
[160.62892151 106.64510345]
[146.12028503 102.83724976]
[131.61166382 99.02938843]
[125.76856232 103.73131561]
[136.67549133 114.02883148]
[147.58242798 124.32634735]
[158.48936462 134.62387085]
[172.57217407 139.78858948]
[179.96179199 152.84208679]
[177.14300537 167.57484436]
[165.45669556 176.97859192]
[150.46199036 176.57998657]
[139.29179382 166.56864929]
[137.25962830 151.70736694]
[129.53387451 138.84997559]
[121.80811310 125.99256897]
[114.08235168 113.13516998]
[108.23925018 117.83710480]
[108.85507202 132.82444763]
[109.47090149 147.81181335]
[110.08672333 162.79916382]
[110.70255280 177.78651428]
[111.31837463 192.77386475]
[111.93420410 207.76121521]
[112.55002594 222.74858093]
[119.24154663 238.32612610]
[106.12517548 249.06842041]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 21]
[10 20]
[11 19]
[12 18]
[22 112]
[23 111]
[24 110]
[25 109]
[26 108]
[42 95]
[43 94]
[44 93]
[45 92]
[46 91]
[47 90]
[48 89]
[49 88]
[114 128]
[115 127]
[116 126]
[117 125]
[118 124]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
