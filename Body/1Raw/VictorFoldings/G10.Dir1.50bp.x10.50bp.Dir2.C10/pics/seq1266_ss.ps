%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:32 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCUAAAACUCACCUGAGUUGUAAAAAACUCCAGUUGACACAAAAUAGACUACGAAAGUGGCUxxxxxxxxxxCCCUCAUAAUCAUUUUCCUUAUCUGCUUCCUAGUCCUGUAUGCCCUUUUCCUAACACUCACCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[92.50000000 255.86012268]
[92.50000000 240.86012268]
[92.50000000 225.86012268]
[92.50000000 210.86012268]
[92.50000000 195.86012268]
[92.50000000 180.86012268]
[92.50000000 165.86012268]
[92.50000000 150.86012268]
[92.50000000 135.86012268]
[92.50000000 120.86012268]
[80.91094971 111.33678436]
[66.19542694 114.24426270]
[51.47990799 117.15173340]
[46.17756653 134.76176453]
[32.77166748 147.22814941]
[14.98826599 151.20240784]
[-2.28831863 145.68034363]
[-14.35698509 132.25407410]
[-28.86561012 136.06193542]
[-43.37423706 139.86979675]
[-54.75816727 150.85690308]
[-69.03268433 146.60397339]
[-83.54131317 150.41183472]
[-98.04993439 154.21969604]
[-112.51870728 158.17630005]
[-126.94609070 162.28125000]
[-141.37347412 166.38619995]
[-155.80085754 170.49113464]
[-163.27137756 184.41835022]
[-178.42576599 188.90386963]
[-192.27320862 181.28652954]
[-196.59825134 166.08555603]
[-188.83493042 152.31941223]
[-173.58908081 148.15531921]
[-159.90580750 156.06375122]
[-145.47842407 151.95881653]
[-131.05104065 147.85386658]
[-116.62364960 143.74891663]
[-111.01624298 138.86331177]
[-101.85779572 139.71107483]
[-87.34916687 135.90321350]
[-72.84054565 132.09535217]
[-62.49436569 121.38059998]
[-47.18209457 125.36116791]
[-32.67346954 121.55330658]
[-18.16484451 117.74545288]
[-16.65331078 105.96450806]
[-11.21834373 95.36435699]
[-2.48376918 87.21337128]
[8.53021908 82.49584198]
[20.52619171 81.79313660]
[32.08230591 85.21218109]
[41.82083893 92.36994171]
[48.57243347 102.43621063]
[63.28795624 99.52873993]
[78.00347900 96.62126160]
[81.05854797 91.38882446]
[85.20512390 87.51395416]
[89.95201111 85.17175293]
[94.80094147 84.37794495]
[99.29454041 84.99961090]
[103.05762482 86.77951813]
[105.82817078 89.37107086]
[116.59685516 78.92906189]
[127.36553192 68.48705292]
[138.13421631 58.04504395]
[142.14999390 49.77042770]
[149.23281860 47.50201797]
[160.21362305 37.28330994]
[171.19442749 27.06460381]
[162.30865479 14.95842934]
[154.88842773 1.90251708]
[149.03411865 -11.92656517]
[144.82487488 -26.34179497]
[142.31764221 -41.14822388]
[141.54632568 -56.14560699]
[142.52134705 -71.13112640]
[145.22952271 -85.90212250]
[149.63423157 -100.25883484]
[155.67590332 -114.00709534]
[163.27282715 -126.96098328]
[172.32228088 -138.94531250]
[182.70185852 -149.79800415]
[194.27119446 -159.37228394]
[206.87384033 -167.53868103]
[220.33934021 -174.18675232]
[234.48559570 -179.22657776]
[249.12129211 -182.59001160]
[264.04852295 -184.23156738]
[279.06536865 -184.12904358]
[293.96878052 -182.28382874]
[308.55718994 -178.72087097]
[322.63333130 -173.48835754]
[336.00680542 -166.65705872]
[348.49676514 -158.31935120]
[359.93429565 -148.58799744]
[370.16473389 -137.59458923]
[379.04968262 -125.48782349]
[386.46905518 -112.43141937]
[392.32244873 -98.60194397]
[396.53070068 -84.18643188]
[399.03695679 -69.37983704]
[399.80728149 -54.38240051]
[398.83126831 -39.39694595]
[396.12210083 -24.62613106]
[391.71643066 -10.26971626]
[385.67382812 3.47814250]
[378.07604980 16.43152237]
[369.02578735 28.41524506]
[358.64550781 39.26724243]
[347.07550049 48.84075546]
[334.47232056 57.00630951]
[321.00637817 63.65348053]
[306.85980225 68.69236755]
[292.22387695 72.05482483]
[277.29653931 73.69538879]
[262.27969360 73.59186554]
[247.37640381 71.74565125]
[232.78822327 68.18171692]
[218.71244812 62.94826508]
[205.33943176 56.11606979]
[192.85002136 47.77752686]
[181.41313171 38.04540634]
[170.43234253 48.26411438]
[159.45153809 58.48282242]
[148.57621765 68.81372070]
[137.80754089 79.25572968]
[127.03886414 89.69773865]
[116.27017975 100.13974762]
[128.10691833 90.92609406]
[142.61651611 87.12188721]
[157.45120239 89.34268951]
[170.21066284 97.22914886]
[178.83032227 109.50519562]
[181.91548157 124.18449402]
[178.96694946 138.89184570]
[170.46180725 151.24751282]
[157.77622986 159.25227356]
[142.96282959 161.61091614]
[128.41850281 157.94180298]
[116.49659729 148.83859253]
[109.12615967 135.77427673]
[107.50000000 120.86012268]
[107.50000000 135.86012268]
[107.50000000 150.86012268]
[107.50000000 165.86012268]
[107.50000000 180.86012268]
[107.50000000 195.86012268]
[107.50000000 210.86012268]
[107.50000000 225.86012268]
[107.50000000 240.86012268]
[107.50000000 255.86012268]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 152]
[2 151]
[3 150]
[4 149]
[5 148]
[6 147]
[7 146]
[8 145]
[9 144]
[10 143]
[11 56]
[12 55]
[13 54]
[18 46]
[19 45]
[20 44]
[22 42]
[23 41]
[24 40]
[25 38]
[26 37]
[27 36]
[28 35]
[63 129]
[64 128]
[65 127]
[66 126]
[68 125]
[69 124]
[70 123]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
