%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:06 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCCGUAGACCUAACCAUCUUCUCCUUACACCUAGCAGGUGUCUCCUCUAUCUUAGGGGCCAxxxxxxxxxxACAAAGCAUAAUAUUUCGCCCACUAAGCCAAUCACUUUAUUGACUCCUAGCCGCAGACCUCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[92.50000000 303.33279419]
[92.50000000 288.33279419]
[92.50000000 273.33279419]
[92.50000000 258.33279419]
[92.50000000 243.33277893]
[92.50000000 228.33277893]
[92.50000000 213.33277893]
[92.50000000 198.33277893]
[92.50000000 183.33277893]
[92.50000000 168.33277893]
[82.52685547 166.48539734]
[72.93410492 163.19062805]
[63.93057251 158.52021790]
[55.71227264 152.57580566]
[48.45811081 145.48684692]
[36.19574356 154.12596130]
[23.93337440 162.76507568]
[25.98728180 177.93214417]
[20.74654198 192.31245422]
[9.41543484 202.60150146]
[-5.40223122 206.43495178]
[-20.30146599 202.93190002]
[-31.85853577 192.89732361]
[-37.41770935 178.63710022]
[-35.70153046 163.42810059]
[-27.10436058 150.76527405]
[-13.60177135 143.55842590]
[1.70344377 143.46363831]
[15.29425716 150.50270081]
[27.55662537 141.86358643]
[39.81899261 133.22447205]
[36.20466232 125.60807800]
[33.54980469 117.60654449]
[31.89435005 109.34020996]
[31.26319885 100.93340302]
[31.66584206 92.51255035]
[17.02234077 89.26172638]
[2.37883925 86.01090240]
[-12.26466179 82.76007843]
[-26.90816307 79.50924683]
[-41.55166626 76.25842285]
[-58.32472992 78.72837830]
[-65.34140015 63.29456329]
[-52.45315552 52.27959824]
[-38.30083847 61.61492157]
[-23.65733719 64.86574554]
[-9.01383591 68.11657715]
[5.62966490 71.36740112]
[20.27316666 74.61822510]
[34.91666794 77.86904907]
[44.78306580 59.05236435]
[59.92404556 44.14718628]
[78.89327240 34.57733536]
[99.87870789 31.25696945]
[120.87574005 34.50326157]
[139.87861633 44.00611496]
[149.86134338 32.81034851]
[159.84407043 21.61458397]
[160.15513611 -3.37771225]
[181.61125183 -15.02080727]
[186.51280212 -29.19736481]
[191.41436768 -43.37392426]
[196.31591797 -57.55047989]
[201.21746826 -71.72704315]
[205.97128296 -85.95381927]
[210.57684326 -100.22927856]
[215.18240356 -114.50473785]
[219.78796387 -128.78019714]
[206.68345642 -136.18670654]
[195.33833313 -146.07980347]
[186.21717834 -158.05433655]
[179.69351196 -171.61997986]
[176.03445435 -186.22122192]
[175.38986206 -201.26014709]
[177.78611755 -216.12092590]
[183.12510681 -230.19502258]
[191.18817139 -242.90611267]
[201.64517212 -253.73367310]
[214.06788635 -262.23431396]
[227.94760132 -268.05996704]
[242.71597290 -270.97207642]
[257.76821899 -270.85137939]
[272.48797607 -267.70278931]
[286.27249146 -261.65530396]
[298.55728149 -252.95649719]
[308.83926392 -241.96263123]
[316.69744873 -229.12385559]
[321.81002808 -214.96595764]
[323.96765137 -200.06864929]
[323.08193970 -185.04199219]
[319.18920898 -170.50131226]
[312.44882202 -157.04203796]
[303.13677979 -145.21533203]
[291.63446045 -135.50546265]
[278.41284180 -128.31007385]
[264.01336670 -123.92378235]
[249.02563477 -122.52622986]
[234.06343079 -124.17463684]
[229.45787048 -109.89917755]
[224.85229492 -95.62371826]
[220.24673462 -81.34825134]
[221.19232178 -73.96912384]
[215.39401245 -66.82548523]
[210.49246216 -52.64892960]
[205.59091187 -38.47237396]
[200.68936157 -24.29581451]
[195.78781128 -10.11925602]
[201.34672546 -4.09193802]
[204.53440857 3.46244383]
[219.46871948 4.86474752]
[234.40301514 6.26705122]
[249.33732605 7.66935444]
[261.34704590 -2.60402536]
[277.09686279 -1.29297447]
[287.24267578 10.82468414]
[285.76519775 26.55975723]
[273.54095459 36.57690811]
[257.82235718 34.93313599]
[247.93502808 22.60366249]
[233.00071716 21.20135880]
[218.06640625 19.79905510]
[203.13209534 18.39675140]
[200.03390503 23.86950111]
[195.58113098 28.38161278]
[190.06282043 31.60282326]
[183.84709167 33.28785706]
[177.35659790 33.29492950]
[171.03984070 31.59731102]
[161.05711365 42.79307556]
[151.07438660 53.98884201]
[159.18067932 65.02477264]
[164.93879700 77.44845581]
[168.12025452 90.76694489]
[168.59883118 104.45178223]
[166.35554504 117.95998383]
[161.47938538 130.75556946]
[154.16383362 142.33082581]
[144.69915771 152.22647095]
[133.46090698 160.04986572]
[120.89498901 165.49060059]
[107.50000000 168.33277893]
[107.50000000 183.33277893]
[107.50000000 198.33277893]
[107.50000000 213.33277893]
[107.50000000 228.33277893]
[107.50000000 243.33277893]
[107.50000000 258.33279419]
[107.50000000 273.33279419]
[107.50000000 288.33279419]
[107.50000000 303.33279419]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[15 31]
[16 30]
[17 29]
[36 50]
[37 49]
[38 48]
[39 47]
[40 46]
[41 45]
[56 130]
[57 129]
[58 128]
[60 107]
[61 106]
[62 105]
[63 104]
[64 103]
[65 101]
[66 100]
[67 99]
[68 98]
[109 122]
[110 121]
[111 120]
[112 119]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
