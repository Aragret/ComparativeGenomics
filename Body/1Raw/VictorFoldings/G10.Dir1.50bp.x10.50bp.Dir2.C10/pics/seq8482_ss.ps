%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:30 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCAACCACCCAACUAUCUAUAAACCUAGCCAUGGCCAUCCCCUUAUGAGCGGGCACAGUGAxxxxxxxxxxUUCUUCGAAACCACACUUAUCCCCACCUUGGCUAUCAUCACCCGAUGAGGCAACCAGCCACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[86.27886200 368.60958862]
[86.27886200 353.60958862]
[86.27886200 338.60958862]
[86.27886200 323.60958862]
[86.27886200 308.60958862]
[86.27886200 293.60958862]
[86.27886200 278.60958862]
[86.27886200 263.60958862]
[86.27886200 248.60958862]
[86.27886200 233.60958862]
[70.13240051 228.22032166]
[56.76107025 217.64703369]
[47.76845551 203.13652039]
[44.24021149 186.40899658]
[46.61303329 169.45417786]
[54.62067413 154.29458618]
[67.32372284 142.74435425]
[83.21975708 136.19203186]
[82.28412628 121.22123718]
[71.33620453 131.47515869]
[57.59683228 137.49426270]
[42.63693237 138.59036255]
[28.16697693 134.63809204]
[15.84141541 126.08937836]
[7.06951809 113.92164612]
[2.85423732 99.52610779]
[3.67753601 84.54872131]
[9.44528103 70.70195007]
[19.49800491 59.56899261]
[32.68630981 52.42276001]
[47.50228119 50.08032990]
[62.25190735 52.80953598]
[75.24875641 60.29832077]
[85.00680542 71.69043732]
[90.41114044 85.68726349]
[89.78716278 70.70024872]
[89.16318512 55.71323013]
[88.53920746 40.72621536]
[87.91522980 25.73919868]
[87.29125977 10.75218201]
[78.98658752 -2.71418524]
[86.18775177 -15.75230026]
[85.56377411 -30.73931694]
[71.20060730 -42.15684509]
[68.71823883 -59.90618896]
[55.78018188 -67.49610138]
[42.84212494 -75.08600616]
[27.61346436 -70.85948944]
[13.89789391 -78.71179199]
[9.83261681 -93.98428345]
[17.82949066 -107.61606598]
[33.14411163 -111.51964569]
[46.69058609 -103.37909698]
[50.43203354 -88.02406311]
[63.37009048 -80.43415070]
[76.30814362 -72.84424591]
[79.42213440 -75.15967560]
[82.87007904 -76.94007874]
[86.56089020 -78.13842010]
[90.39707947 -78.72304535]
[94.10324097 -93.25798035]
[97.80940247 -107.79292297]
[88.07181549 -119.72965240]
[87.23983002 -134.93363953]
[95.42324829 -147.56280518]
[109.30783844 -152.88783264]
[113.01399994 -167.42277527]
[116.72016144 -181.95771790]
[120.42632294 -196.49264526]
[107.13035583 -203.59762573]
[95.92153931 -213.67858887]
[87.45155334 -226.14945984]
[82.21282196 -240.28520203]
[80.50992584 -255.26397705]
[82.44185638 -270.21493530]
[87.89630890 -284.26882935]
[96.55615997 -296.60864258]
[107.91793823 -306.51687622]
[121.32108307 -313.41754150]
[135.98635864 -316.90942383]
[151.06114197 -316.78948975]
[165.66900635 -313.06472778]
[178.96066284 -305.95169067]
[190.16336060 -295.86392212]
[198.62577820 -283.38793945]
[203.85594177 -269.24902344]
[205.54975891 -254.26921082]
[203.60876465 -239.31942749]
[198.14579773 -225.26882935]
[189.47846985 -212.93429565]
[178.11068726 -203.03292847]
[164.70335388 -196.14039612]
[150.03596497 -192.65742493]
[134.96125793 -192.78648376]
[131.25509644 -178.25155640]
[127.54893494 -163.71661377]
[123.84277344 -149.18167114]
[133.48233032 -137.85838318]
[134.61932373 -122.85267639]
[126.60873413 -109.90339661]
[112.34433746 -104.08676147]
[108.63817596 -89.55182648]
[104.93202209 -75.01688385]
[115.51092529 -61.12968063]
[113.89103699 -43.46819687]
[100.55079651 -31.36329460]
[101.17477417 -16.37627792]
[109.43480682 -3.98188281]
[102.27827454 10.12820435]
[102.90225220 25.11522102]
[103.52622986 40.10223770]
[104.15020752 55.08925247]
[104.77418518 70.07627106]
[105.39816284 85.06328583]
[114.29051208 97.14327240]
[128.41531372 102.19203186]
[142.54011536 107.24078369]
[156.66491699 112.28954315]
[170.78971863 117.33829498]
[186.81718445 113.86661530]
[197.63558960 126.19113922]
[192.11590576 141.63345337]
[175.93629456 144.30783081]
[165.74096680 131.46310425]
[151.61616516 126.41434479]
[137.49136353 121.36558533]
[123.36655426 116.31683350]
[109.24175262 111.26807404]
[97.25492096 120.28560638]
[98.19055176 135.25639343]
[110.95939636 138.17019653]
[122.51564789 144.30468750]
[132.06393433 153.22961426]
[138.94915771 164.32301331]
[142.70146179 176.81443787]
[143.06831360 189.83854675]
[140.03140259 202.49502563]
[133.80749512 213.91075134]
[124.83295441 223.30017090]
[113.73313904 230.01922607]
[101.27886200 233.60958862]
[101.27886200 248.60958862]
[101.27886200 263.60958862]
[101.27886200 278.60958862]
[101.27886200 293.60958862]
[101.27886200 308.60958862]
[101.27886200 323.60958862]
[101.27886200 338.60958862]
[101.27886200 353.60958862]
[101.27886200 368.60958862]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[18 130]
[19 129]
[35 114]
[36 113]
[37 112]
[38 111]
[39 110]
[40 109]
[42 107]
[43 106]
[45 56]
[46 55]
[47 54]
[60 103]
[61 102]
[62 101]
[66 97]
[67 96]
[68 95]
[69 94]
[115 128]
[116 127]
[117 126]
[118 125]
[119 124]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
