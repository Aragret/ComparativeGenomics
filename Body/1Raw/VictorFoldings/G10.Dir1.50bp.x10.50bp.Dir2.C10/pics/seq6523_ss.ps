%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:10 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGUCUACCCUCCCUUAGCAGGGAACUACUCCCACCCUGGAGCCUCCGUAGACCUAACCAUCUxxxxxxxxxxGAAACCAAAUAAUUCAAGCACUGCUUAUUACAAUUUUACUGGGUCUCUAUUUUACCCUCCCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[90.16117096 411.35299683]
[90.16117096 396.35299683]
[90.16117096 381.35299683]
[90.16117096 366.35299683]
[90.16117096 351.35299683]
[90.16117096 336.35299683]
[90.16117096 321.35299683]
[90.16117096 306.35299683]
[90.16117096 291.35299683]
[90.16117096 276.35299683]
[76.04846191 273.09140015]
[63.01469040 266.75537109]
[51.72048950 257.66229248]
[42.73917007 246.26942444]
[36.52759171 233.15087891]
[33.40294266 218.96865845]
[33.52653885 204.43930054]
[36.89549255 190.29765320]
[43.34269333 177.25967407]
[52.54510117 165.98625183]
[64.03991699 157.04965210]
[77.24787140 150.90447998]
[91.50239563 147.86460876]
[91.81445312 132.86784363]
[92.12651062 117.87109375]
[83.82204437 113.89774323]
[77.67222595 106.02685547]
[75.48767853 95.47766876]
[60.66992188 97.80876923]
[45.85216141 100.13987732]
[31.03440475 102.47097778]
[20.46665955 114.54170227]
[4.44776726 113.66156769]
[-4.73395109 100.50575256]
[-0.03506586 85.16625977]
[14.93983936 79.41024017]
[28.70330048 87.65322113]
[43.52105713 85.32211304]
[58.33881760 82.99101257]
[73.15657806 80.65990448]
[84.45558167 70.79418182]
[88.76316071 56.42599869]
[93.07074738 42.05781555]
[97.37833405 27.68963242]
[87.41970825 16.75767899]
[87.06120300 -0.05676147]
[73.96804810 -7.37586689]
[60.87489319 -14.69497299]
[44.09902573 -17.14581490]
[41.81006622 -33.94453430]
[57.31863785 -40.79439163]
[68.19400024 -27.78812790]
[81.28715515 -20.46902084]
[94.38031006 -13.14991570]
[108.74848938 -17.45750046]
[115.65548706 -30.77265549]
[122.56249237 -44.08781052]
[109.63758850 -36.47552109]
[95.46365356 -31.56639481]
[80.59927368 -29.55390167]
[65.63024139 -30.51735306]
[51.14649963 -34.41878128]
[37.71883392 -41.10442734]
[25.87643623 -50.31081390]
[16.08600616 -61.67512131]
[8.73338509 -74.74948120]
[4.10833645 -89.01864624]
[2.39313293 -103.92025757]
[3.65537024 -118.86705780]
[7.84530401 -133.26998901]
[14.79780960 -146.56143188]
[24.23889160 -158.21759033]
[35.79647827 -167.77909851]
[49.01508713 -174.86911011]
[63.37377548 -179.20823669]
[78.30667877 -180.62547302]
[93.22528076 -179.06494141]
[107.54165649 -174.58818054]
[120.69158936 -167.37158203]
[132.15684509 -157.69958496]
[141.48559570 -145.95332336]
[148.31018066 -132.59574890]
[152.36166382 -118.15325165]
[153.48034668 -103.19502258]
[151.62217712 -88.31056213]
[146.86035156 -74.08646393]
[139.38380432 -61.08502579]
[152.62638855 -68.13015747]
[165.86897278 -75.17529297]
[179.11155701 -82.22042847]
[192.12786865 -89.67533875]
[204.90522766 -97.53276825]
[217.68258667 -105.39019012]
[221.21357727 -111.10329437]
[226.34387207 -113.73226929]
[231.15895081 -113.29589844]
[244.25210571 -120.61500549]
[257.34527588 -127.93410492]
[270.43841553 -135.25321960]
[281.31378174 -148.25947571]
[296.82235718 -141.40962219]
[294.53338623 -124.61090088]
[277.75753784 -122.16005707]
[264.66436768 -114.84095764]
[251.57121277 -107.52185059]
[238.47805786 -100.20274353]
[225.54000854 -92.61283112]
[212.76264954 -84.75540924]
[199.98529053 -76.89797974]
[198.82272339 -73.50447083]
[195.92156982 -70.52369690]
[191.50289917 -68.78368378]
[186.15669250 -68.97784424]
[172.91410828 -61.93270874]
[159.67152405 -54.88757324]
[146.42893982 -47.84243774]
[135.87763977 -37.18081284]
[128.97064209 -23.86565781]
[122.06364441 -10.55050182]
[132.24223328 16.75767899]
[111.74651337 31.99721718]
[107.43893433 46.36540222]
[103.13134766 60.73358536]
[98.82376099 75.10176849]
[117.98969269 85.46646881]
[120.61669922 105.46124268]
[107.12326050 118.18315125]
[106.81121063 133.17990112]
[106.49915314 148.17666626]
[121.53895569 152.16804504]
[135.18624878 159.62507629]
[146.65629578 170.11427307]
[155.29069519 183.02787781]
[160.59518433 197.61918640]
[162.26786804 213.04563904]
[160.21646118 228.41754150]
[154.56330872 242.84927368]
[145.63818359 255.51045227]
[133.95896912 265.67358398]
[120.20165253 272.75598145]
[105.16117096 276.35299683]
[105.16117096 291.35299683]
[105.16117096 306.35299683]
[105.16117096 321.35299683]
[105.16117096 336.35299683]
[105.16117096 351.35299683]
[105.16117096 366.35299683]
[105.16117096 381.35299683]
[105.16117096 396.35299683]
[105.16117096 411.35299683]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[23 129]
[24 128]
[25 127]
[28 40]
[29 39]
[30 38]
[31 37]
[41 124]
[42 123]
[43 122]
[44 121]
[46 54]
[47 53]
[48 52]
[55 119]
[56 118]
[57 117]
[87 116]
[88 115]
[89 114]
[90 113]
[91 109]
[92 108]
[93 107]
[96 106]
[97 105]
[98 104]
[99 103]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
