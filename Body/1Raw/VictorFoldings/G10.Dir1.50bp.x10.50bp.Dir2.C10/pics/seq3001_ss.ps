%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:23 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCUAUUCUAGAGUCCAUAUCAACAAUAGGGUUUACGACCUCGAUGUUGGAUCAGGACAUCCxxxxxxxxxxCAUUAACCUUCCCUCUACACUUAUCAUCUUCACAAUUCUAAUUCUACUGACUAUCCUAGACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[113.39275360 278.03167725]
[113.39275360 263.03167725]
[113.39275360 248.03166199]
[113.39275360 233.03166199]
[113.39275360 218.03166199]
[113.39275360 203.03166199]
[113.39275360 188.03166199]
[113.39275360 173.03166199]
[113.39275360 158.03166199]
[113.39275360 143.03166199]
[99.11729431 138.42610168]
[90.35108185 150.59794617]
[81.58487701 162.76977539]
[77.23460388 179.15609741]
[60.28439713 179.51202393]
[55.25009537 163.32276917]
[69.41304016 154.00357056]
[78.17924500 141.83174133]
[86.94545746 129.65989685]
[78.05084229 116.08056641]
[78.11620331 102.38173676]
[63.54349899 98.82697296]
[48.97079849 95.27220917]
[34.39809418 91.71744537]
[21.00027657 99.66328430]
[6.27212334 95.85065460]
[-1.22044683 83.02891541]
[-15.79314995 79.47415161]
[-30.36585236 75.91938782]
[-44.97474670 72.51641083]
[-59.61824799 69.26558685]
[-74.26174927 66.01476288]
[-88.90525055 62.76393509]
[-99.31733704 73.96820831]
[-113.84371185 78.42704010]
[-128.55375671 75.03868866]
[-139.51936340 64.81072235]
[-143.86387634 50.56323624]
[-158.50738525 47.31241226]
[-173.15087891 44.06158447]
[-187.40170288 51.43001556]
[-201.98841858 44.75114059]
[-205.72134399 29.14842415]
[-195.73690796 16.59093475]
[-179.69430542 16.71170044]
[-169.90005493 29.41808510]
[-155.25656128 32.66891098]
[-140.61305237 35.91973495]
[-130.64794922 24.84895515]
[-116.38452148 20.22178078]
[-101.62253571 23.37615776]
[-90.34743500 33.56286240]
[-85.65442657 48.12043381]
[-71.01092529 51.37125778]
[-56.36742020 54.62208557]
[-41.72391891 57.87290955]
[-34.46550751 56.24161911]
[-26.81109047 61.34668732]
[-12.23838806 64.90145111]
[2.33431506 68.45621490]
[14.88927937 60.52472687]
[29.71871185 63.92216492]
[37.95285797 77.14474487]
[52.52555847 80.69950867]
[67.09825897 84.25427246]
[81.67096710 87.80902863]
[112.13266754 75.64536285]
[130.57830811 110.72834778]
[143.01774597 102.34620667]
[135.95214844 89.09927368]
[130.28607178 75.19605255]
[126.07958984 60.78392029]
[123.37729645 46.01565552]
[122.20783997 31.04780960]
[122.58360291 16.03905106]
[124.50062561 1.14848042]
[127.93856812 -13.46605301]
[132.86099243 -27.64962769]
[139.21571350 -41.25188828]
[146.93536377 -54.12864685]
[155.93812561 -66.14340210]
[166.12857056 -77.16878510]
[177.39865112 -87.08792114]
[189.62890625 -95.79566956]
[202.68968201 -103.19972229]
[216.44255066 -109.22158813]
[230.74169922 -113.79743195]
[245.43556213 -116.87874603]
[260.36837769 -118.43286896]
[275.38183594 -118.44332123]
[290.31677246 -116.91000366]
[305.01492310 -113.84915924]
[319.32043457 -109.29324341]
[333.08166504 -103.29054260]
[346.15274048 -95.90469360]
[358.39511108 -87.21399689]
[369.67901611 -77.31056213]
[379.88479614 -66.29938507]
[388.90429688 -54.29718781]
[396.64187622 -41.43119431]
[403.01553345 -27.83779907]
[407.95773315 -13.66109657]
[411.41601562 0.94863355]
[413.35375977 15.83651829]
[413.75045776 30.84473991]
[412.60183716 45.81419754]
[409.92013550 60.58621216]
[405.73373413 75.00418854]
[400.08703613 88.91529846]
[393.03988647 102.17205811]
[384.66699219 114.63394928]
[375.05712891 126.16886902]
[364.31213379 136.65454102]
[352.54592896 145.97981262]
[339.88323975 154.04582214]
[326.45831299 160.76705933]
[312.41345215 166.07229614]
[297.89752197 169.90528870]
[283.06439209 172.22540283]
[268.07135010 173.00804138]
[253.07730103 172.24490356]
[238.24118042 169.94409180]
[223.72029114 166.12997437]
[209.66851807 160.84301758]
[196.23486328 154.13923645]
[183.56169128 146.08969116]
[171.78338623 136.77973938]
[161.02476501 126.30805969]
[151.39990234 114.78564453]
[138.96044922 123.16779327]
[152.47145081 116.65218353]
[167.45080566 117.43891907]
[180.20491028 125.33402252]
[187.58888245 138.39070129]
[187.78196716 153.38946533]
[180.73657227 166.63189697]
[168.18992615 174.85272217]
[153.23579407 176.02481079]
[139.56155396 169.85917664]
[130.53898621 157.87612915]
[128.39274597 143.03166199]
[128.39274597 158.03166199]
[128.39274597 173.03166199]
[128.39274597 188.03166199]
[128.39274597 203.03166199]
[128.39274597 218.03166199]
[128.39274597 233.03166199]
[128.39274597 248.03166199]
[128.39274597 263.03167725]
[128.39274597 278.03167725]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[11 19]
[12 18]
[13 17]
[21 66]
[22 65]
[23 64]
[24 63]
[27 60]
[28 59]
[29 58]
[30 56]
[31 55]
[32 54]
[33 53]
[38 48]
[39 47]
[40 46]
[68 130]
[69 129]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
