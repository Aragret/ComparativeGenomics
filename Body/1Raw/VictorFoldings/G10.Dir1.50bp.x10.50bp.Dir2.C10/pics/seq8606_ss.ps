%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:34 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCCUACUCAUUCAACCAAUAGCCCUGGCCGUACGCCUAACCGCUAACAUUACUGCAGGCCACCxxxxxxxxxxCAACCAAUAGCCCUGGCCGUACGCCUAACCGCUAACAUUACUGCAGGCCACCUACUCAUGCACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[216.10353088 661.30230713]
[215.49565125 646.31463623]
[214.88775635 631.32696533]
[214.27987671 616.33929443]
[213.67199707 601.35162354]
[213.06411743 586.36395264]
[212.45622253 571.37628174]
[211.84834290 556.38854980]
[209.27690125 541.61065674]
[204.78645325 527.29852295]
[200.29600525 512.98645020]
[195.80555725 498.67437744]
[191.31510925 484.36227417]
[178.24426270 485.57049561]
[165.18783569 484.16152954]
[152.66488647 480.18911743]
[141.17373657 473.80899048]
[131.17205811 465.27270508]
[123.05876923 454.91775513]
[117.15802765 443.15420532]
[113.70631409 430.44854736]
[112.84294891 417.30502319]
[114.60448456 404.24578857]
[118.92314148 391.79010010]
[125.62944031 380.43356323]
[134.45883179 370.62866211]
[145.06211853 362.76647949]
[157.01931763 357.16125488]
[153.70266724 342.53253174]
[150.38603210 327.90377808]
[147.06939697 313.27505493]
[130.56794739 307.11593628]
[120.94499969 292.17712402]
[122.18177032 274.29342651]
[133.97357178 260.58416748]
[130.06681824 246.10186768]
[126.16007233 231.61955261]
[121.35326385 225.94731140]
[122.32408142 216.80407715]
[118.71163940 202.24557495]
[115.09920502 187.68705750]
[111.48676300 173.12854004]
[107.87432861 158.57003784]
[104.11454010 144.04887390]
[100.20778656 129.56655884]
[90.14312744 127.87592316]
[81.25282288 122.86412048]
[74.59606171 115.12828064]
[70.96595001 105.59004974]
[70.79496002 95.38581085]
[74.10348511 85.73131561]
[63.23159409 75.39681244]
[48.52442932 79.82342529]
[33.57803345 76.28778839]
[22.41290474 65.74096680]
[18.03240967 51.01999664]
[21.61487961 36.08475494]
[32.19664764 24.95273972]
[46.93127441 20.61841011]
[61.85521317 24.24767876]
[72.95400238 34.86428833]
[77.24212646 49.61242676]
[73.56610107 64.52491760]
[84.43798828 74.85942078]
[89.73112488 72.27320862]
[95.43192291 70.78771973]
[96.94944763 55.86467743]
[98.46697235 40.94163513]
[84.31043243 35.74132538]
[71.89237976 27.18312645]
[61.99341965 15.80501461]
[55.23581314 2.32222676]
[52.04434586 -12.41769695]
[52.61964035 -27.48819351]
[56.92552567 -41.94191742]
[64.69133759 -54.87029648]
[75.42890930 -65.46063995]
[88.46326447 -73.04723358]
[102.97505188 -77.15317535]
[118.05205536 -77.52036285]
[132.74652100 -74.12571716]
[146.13473511 -67.18261719]
[157.37510681 -57.12752914]
[165.76104736 -44.59251022]
[170.76542664 -30.36553001]
[172.07366943 -15.34090614]
[169.60351562 -0.46309835]
[163.51025391 13.33266068]
[154.17691040 25.17915916]
[142.19018555 34.33171463]
[128.30357361 40.21499252]
[113.39000702 42.45915985]
[111.87248230 57.38220215]
[110.35495758 72.30524445]
[126.51507568 86.91658783]
[128.27941895 108.63127899]
[114.69009399 125.65981293]
[118.59684753 140.14212036]
[123.88290405 147.66534424]
[122.43283844 154.95759583]
[126.04528046 169.51609802]
[129.65771484 184.07461548]
[133.27015686 198.63313293]
[136.88258362 213.19165039]
[140.64237976 227.71279907]
[144.54913330 242.19511414]
[148.45588684 256.67742920]
[160.68350220 259.58154297]
[170.44473267 267.38232422]
[175.90995789 278.53851318]
[176.08871460 290.88778687]
[171.00859070 302.06567383]
[161.69813538 309.95840454]
[165.01477051 324.58715820]
[168.33140564 339.21588135]
[171.64804077 353.84463501]
[188.65699768 354.21044922]
[205.00225830 358.89367676]
[219.60707092 367.58056641]
[231.51066589 379.69372559]
[239.93150330 394.43063354]
[244.31852722 410.81668091]
[244.38725281 427.76977539]
[240.13821411 444.17163086]
[231.85659790 458.94165039]
[220.09306335 471.10803223]
[205.62719727 479.87182617]
[210.11764526 494.18392944]
[214.60809326 508.49600220]
[219.09854126 522.80810547]
[223.58898926 537.12017822]
[227.94172668 522.76562500]
[237.67294312 511.35055542]
[251.15779114 504.78100586]
[266.14468384 504.15386963]
[280.13122559 509.57388306]
[290.78207397 520.13604736]
[296.31884766 534.07678223]
[295.81704712 549.06835938]
[289.36050415 562.60766602]
[278.02719116 572.43402100]
[263.70953369 576.90667725]
[248.79812622 575.27880859]
[235.78276062 567.82220459]
[226.83601379 555.78070068]
[227.44390869 570.76837158]
[228.05178833 585.75604248]
[228.65966797 600.74371338]
[229.26754761 615.73138428]
[229.87544250 630.71905518]
[230.48332214 645.70678711]
[231.09120178 660.69445801]
[237.77447510 676.27551270]
[224.65240479 687.01086426]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 152]
[2 151]
[3 150]
[4 149]
[5 148]
[6 147]
[7 146]
[8 145]
[9 131]
[10 130]
[11 129]
[12 128]
[13 127]
[28 116]
[29 115]
[30 114]
[31 113]
[35 107]
[36 106]
[37 105]
[39 104]
[40 103]
[41 102]
[42 101]
[43 100]
[44 98]
[45 97]
[51 64]
[52 63]
[66 94]
[67 93]
[68 92]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
