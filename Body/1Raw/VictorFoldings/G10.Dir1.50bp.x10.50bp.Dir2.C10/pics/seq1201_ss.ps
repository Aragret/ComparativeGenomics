%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:53 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGAAUAGAAGCCGGCGUAAAGAGUGUUUUAGAUCACCCCCUCCCCAAUAAAGCUAAAACUCACxxxxxxxxxxCUAACACUCACAACAAAACUAACUAAUACUAACAUCUCAGACGCUCAGGAAAUAGAAACCGCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[100.57523346 384.65380859]
[100.57523346 369.65380859]
[100.57523346 354.65380859]
[100.57523346 339.65380859]
[100.57523346 324.65380859]
[100.57523346 309.65380859]
[100.57523346 294.65380859]
[100.57523346 279.65380859]
[100.57523346 264.65380859]
[100.57523346 249.65380859]
[83.95783997 244.76350403]
[69.61251068 235.02392578]
[58.91483307 221.35635376]
[52.89446259 205.05929565]
[52.13605118 187.68516541]
[56.72247696 170.89239502]
[66.22593689 156.28712463]
[79.74781799 145.26954651]
[96.00366974 138.89976501]
[94.77305603 123.95032501]
[93.38903046 109.01431274]
[91.69863129 94.10987091]
[89.85530853 79.22355652]
[88.01198578 64.33724976]
[86.16866302 49.45094299]
[74.63592529 42.42201996]
[69.35260773 30.20450401]
[72.05007935 17.36891365]
[81.51874542 8.57706261]
[79.98145294 -6.34395409]
[78.44416046 -21.26497078]
[76.75376129 -36.16941833]
[74.91043854 -51.05572510]
[73.06711578 -65.94203186]
[71.22378540 -80.82833862]
[68.77085876 -95.62641907]
[65.71246338 -110.31131744]
[62.65406799 -124.99621582]
[59.59567261 -139.68110657]
[44.67518997 -138.03067017]
[29.66538620 -137.80598450]
[14.70219040 -139.00912476]
[-0.07888379 -141.62916565]
[-14.54397297 -145.64237976]
[-28.56207466 -151.01243591]
[-42.00623703 -157.69070435]
[-54.75470734 -165.61669922]
[-66.69202423 -174.71862793]
[-77.71009064 -184.91406250]
[-87.70911407 -196.11068726]
[-96.59853363 -208.20709229]
[-104.29785919 -221.09371948]
[-110.73735046 -234.65386963]
[-115.85869598 -248.76473999]
[-119.61550903 -263.29852295]
[-121.97377014 -278.12362671]
[-122.91212463 -293.10574341]
[-122.42206573 -308.10925293]
[-120.50804138 -322.99819946]
[-117.18738556 -337.63781738]
[-112.49015808 -351.89547729]
[-106.45891571 -365.64205933]
[-99.14826965 -378.75308228]
[-90.62442780 -391.10983276]
[-80.96459198 -402.60037231]
[-70.25624084 -413.12063599]
[-58.59635162 -422.57534790]
[-46.09051895 -430.87890625]
[-32.85200500 -437.95608521]
[-19.00070190 -443.74279785]
[-4.66204977 -448.18664551]
[10.03409386 -451.24737549]
[24.95463562 -452.89727783]
[39.96445084 -453.12142944]
[54.92760086 -451.91775513]
[69.70858002 -449.29714966]
[84.17352295 -445.28341675]
[98.19142914 -439.91284180]
[111.63535309 -433.23410034]
[124.38352966 -425.30764771]
[136.32051086 -416.20526123]
[147.33821106 -406.00942993]
[157.33682251 -394.81243896]
[166.22579956 -382.71569824]
[173.92465210 -369.82879639]
[180.36364746 -356.26843262]
[185.48448181 -342.15734863]
[189.24076843 -327.62344360]
[191.59849548 -312.79824829]
[192.53630066 -297.81610107]
[192.04570007 -282.81262207]
[190.13113403 -267.92373657]
[186.80993652 -253.28424072]
[182.11219788 -239.02676392]
[176.08044434 -225.28038025]
[168.76931763 -212.16961670]
[160.24502563 -199.81318665]
[150.58477783 -188.32301331]
[139.87603760 -177.80314636]
[128.21580505 -168.34884644]
[115.70967102 -160.04574585]
[102.47090149 -152.96905518]
[88.61938477 -147.18283081]
[74.28057098 -142.73950195]
[77.33896637 -128.05461121]
[80.39736176 -113.36971283]
[83.45575714 -98.68481445]
[85.79226685 -97.03202057]
[87.59354401 -94.32561493]
[88.44407654 -90.77268219]
[88.01401520 -86.73057556]
[86.11009216 -82.67166901]
[87.95342255 -67.78535461]
[89.79674530 -52.89905167]
[91.64006805 -38.01274109]
[95.60772705 -31.72228241]
[93.36517334 -22.80226326]
[94.90246582 -7.88124657]
[96.43975830 7.03977013]
[109.91798401 17.05179596]
[112.05651093 34.04468155]
[101.05496979 47.60762024]
[102.89829254 62.49392700]
[104.74161530 77.38023376]
[106.58494568 92.26654053]
[110.64442444 99.29238892]
[108.31005096 107.47702026]
[112.32421875 115.75241852]
[109.72248840 122.71971893]
[110.95310211 137.66914368]
[123.59741974 139.80860901]
[135.42575073 144.74044800]
[145.83049011 152.20706177]
[154.27812195 161.82075500]
[160.33659363 173.08386230]
[163.69735718 185.41448975]
[164.19116211 198.17665100]
[161.79649353 210.71296692]
[156.64053345 222.37861633]
[148.99240112 232.57443237]
[139.24909973 240.77774048]
[127.91488647 246.56912231]
[115.57523346 249.65380859]
[115.57523346 264.65380859]
[115.57523346 279.65380859]
[115.57523346 294.65380859]
[115.57523346 309.65380859]
[115.57523346 324.65380859]
[115.57523346 339.65380859]
[115.57523346 354.65380859]
[115.57523346 369.65380859]
[115.57523346 384.65380859]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 152]
[2 151]
[3 150]
[4 149]
[5 148]
[6 147]
[7 146]
[8 145]
[9 144]
[10 143]
[19 130]
[20 129]
[21 127]
[22 125]
[23 124]
[24 123]
[25 122]
[29 119]
[30 118]
[31 117]
[32 115]
[33 114]
[34 113]
[35 112]
[36 107]
[37 106]
[38 105]
[39 104]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
