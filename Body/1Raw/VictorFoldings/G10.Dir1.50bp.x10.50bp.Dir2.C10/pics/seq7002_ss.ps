%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:43 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGGCAAACUCAUCACUAGACAUCGUACUACACGACACGUACUACGUUGUAGCCCACUUCCACxxxxxxxxxxGACAACAGAGGCUUACGACCCCUUAUUUACCGAGAAAGCUCACAAGAACUGCUAACUCAUCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[212.74139404 532.69018555]
[212.74139404 517.69018555]
[212.74139404 502.69021606]
[212.74139404 487.69021606]
[212.74139404 472.69021606]
[212.74139404 457.69021606]
[212.74139404 442.69021606]
[212.74139404 427.69021606]
[212.74139404 412.69021606]
[212.74139404 397.69021606]
[209.49055481 383.04669189]
[203.14343262 369.45574951]
[188.51025391 366.80847168]
[178.11889648 355.92346191]
[176.10604858 340.83035278]
[183.45133972 327.28955078]
[177.10421753 313.69860840]
[170.75708008 300.10766602]
[155.17367554 303.37136841]
[139.25251770 302.84365845]
[123.90328217 298.55072021]
[110.00385284 290.73394775]
[98.35020447 279.83642578]
[89.61077881 266.47778320]
[84.28815460 251.41893005]
[82.69014740 235.51882935]
[84.91200256 219.68537903]
[90.83072662 204.82362366]
[100.11191559 191.78404236]
[112.22861481 181.31381226]
[105.32161713 167.99865723]
[98.41461945 154.68350220]
[91.50762177 141.36834717]
[84.60061646 128.05319214]
[73.50930786 117.95454407]
[59.60675049 112.32258606]
[45.70419312 106.69062805]
[31.80163574 101.05867767]
[17.89908028 95.42671967]
[13.47910213 96.21746063]
[9.45777798 95.58499908]
[6.24292278 93.83955383]
[4.09511185 91.39396667]
[3.10668135 88.70503998]
[-10.27960396 81.93692780]
[-23.66588783 75.16880798]
[-37.05217361 68.40069580]
[-53.91547012 66.64982605]
[-56.90125275 49.96086502]
[-41.69104767 42.47180557]
[-30.28405762 55.01441193]
[-16.89777374 61.78252411]
[-3.51148891 68.55064392]
[9.87479591 75.31875610]
[23.53103638 81.52416229]
[37.43359375 87.15612030]
[51.33615112 92.78807831]
[65.23870850 98.42002869]
[79.14125824 104.05198669]
[82.94907379 91.29627991]
[92.81991577 84.54754639]
[93.13197327 69.55078888]
[85.68344116 55.59263992]
[93.68383789 43.02908707]
[93.99589539 28.03233337]
[79.54364777 23.66941452]
[66.80504608 15.56814194]
[56.72538376 4.32968330]
[50.05263519 -9.21199322]
[47.28196335 -24.05200577]
[48.61897278 -39.08912659]
[53.96444702 -53.20750046]
[62.92171478 -65.35945129]
[74.82609558 -74.64322662]
[88.79418945 -80.36989594]
[103.78948212 -82.11452484]
[118.69922638 -79.74762726]
[132.41700745 -73.44485474]
[143.92489624 -63.67391586]
[152.36891174 -51.15987396]
[157.12245178 -36.83135986]
[157.83277893 -21.75163651]
[154.44718933 -7.03972530]
[147.21690369 6.21265364]
[136.67845154 17.02208519]
[123.61388397 24.58643913]
[108.99265289 28.34438896]
[108.68059540 43.34114456]
[116.15144348 56.22662735]
[108.12872314 69.86284637]
[107.81666565 84.85960388]
[118.16661072 96.82307434]
[114.54831696 113.49776459]
[97.91577911 121.14619446]
[104.82277679 134.46134949]
[111.72977448 147.77650452]
[118.63677216 161.09165955]
[125.54376984 174.40681458]
[139.20527649 170.79289246]
[153.31455994 170.12490845]
[167.24386597 172.42991638]
[180.37405396 177.60275269]
[192.12199402 185.41085815]
[201.96662903 195.50468445]
[209.47192383 207.43336487]
[214.30628967 220.66490173]
[216.25718689 234.60978699]
[215.24044800 248.64735413]
[211.30397034 262.15338135]
[204.62539673 274.52783203]
[195.50416565 285.22155762]
[184.34803772 293.76052856]
[190.69515991 307.35147095]
[197.04229736 320.94244385]
[212.14015198 324.00201416]
[222.42127991 335.23373413]
[224.09754944 350.18881226]
[216.73439026 363.10861206]
[223.08151245 376.69958496]
[224.70344543 361.78750610]
[230.21737671 347.83773804]
[239.22937012 335.84674072]
[251.09567261 326.67117310]
[264.96853638 320.96649170]
[279.85696411 319.14022827]
[294.69729614 321.32287598]
[308.42944336 327.35848999]
[320.07235718 336.81588745]
[328.79431152 349.01947021]
[333.97222900 363.09744263]
[335.23623657 378.04409790]
[332.49597168 392.79165649]
[325.94726562 406.28665161]
[316.05789185 417.56494141]
[303.53436279 425.82092285]
[289.27130127 430.46472168]
[274.28762817 431.16467285]
[259.65377808 427.87069702]
[246.41513062 420.81817627]
[235.51742554 410.51089478]
[227.74139404 397.69021606]
[227.74139404 412.69021606]
[227.74139404 427.69021606]
[227.74139404 442.69021606]
[227.74139404 457.69021606]
[227.74139404 472.69021606]
[227.74139404 487.69021606]
[227.74139404 502.69021606]
[227.74139404 517.69018555]
[227.74139404 532.69018555]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[11 119]
[12 118]
[16 114]
[17 113]
[18 112]
[30 98]
[31 97]
[32 96]
[33 95]
[34 94]
[35 59]
[36 58]
[37 57]
[38 56]
[39 55]
[44 54]
[45 53]
[46 52]
[47 51]
[61 91]
[62 90]
[64 88]
[65 87]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
