%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:34 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGUAACUAGAAAUAACUUUGCAAGGAGAGCCAAAGCUAAGACCCCCGAAACCAGACGAGCUAxxxxxxxxxxUAGGCCUUCUUACGAGCCAAAACCUGCCCCUACUCCUCCUAGACCUAACCUGACUAGAAACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[141.40382385 442.79537964]
[140.77984619 427.80834961]
[140.15586853 412.82135010]
[139.53189087 397.83432007]
[138.90791321 382.84732056]
[138.28393555 367.86029053]
[137.65995789 352.87329102]
[137.03598022 337.88626099]
[134.09049988 323.17831421]
[128.89508057 309.10678101]
[123.69966888 295.03524780]
[119.75630188 292.23788452]
[117.56536102 286.90579224]
[118.59417725 280.26885986]
[113.98861694 265.99337769]
[109.38304901 251.71792603]
[104.77748871 237.44247437]
[90.50202179 232.83691406]
[78.42203522 241.72926331]
[66.34204865 250.62161255]
[60.26480103 265.85311890]
[43.99868774 267.93774414]
[34.27688980 254.73095703]
[41.10036087 239.81881714]
[57.44969940 238.54161072]
[69.52968597 229.64926147]
[81.60967255 220.75691223]
[79.85269928 209.34407043]
[82.76416779 198.85997009]
[89.31076050 191.01814270]
[97.91458893 186.87176514]
[96.97895813 171.90097046]
[96.04332733 156.93017578]
[95.10769653 141.95938110]
[94.17207336 126.98859406]
[73.90505219 109.02233887]
[78.74680328 82.37471771]
[70.23571777 70.02314758]
[61.72462463 57.67157364]
[47.52313614 50.69817352]
[46.67279434 35.82786179]
[36.80707169 24.52885628]
[25.71575546 14.43020725]
[14.62444019 4.33155823]
[3.53312469 -5.76709127]
[4.69972658 9.18747425]
[-3.00930643 22.05490685]
[-16.74563980 28.08094597]
[-31.43397331 25.03908920]
[-41.64725876 14.05324268]
[-43.61188889 -0.81754148]
[-36.60197449 -14.07880497]
[-23.20754051 -20.83077621]
[-8.37834549 -18.57912254]
[-17.64329529 -30.37576294]
[-33.14386368 -29.66024208]
[-46.08611679 -38.22048187]
[-51.49349594 -52.76489258]
[-47.28674698 -67.70085144]
[-35.08345795 -77.28517914]
[-19.57603836 -77.83250427]
[-6.72740889 -69.13237000]
[-1.47812939 -54.53015900]
[-5.84665489 -39.64071274]
[3.41829443 -27.84407234]
[13.63177395 -16.85840607]
[24.72308922 -6.75975752]
[35.81440353 3.33889222]
[46.90571976 13.43754196]
[44.11153412 -1.29991102]
[48.36316681 -15.68475056]
[58.72019958 -26.53518295]
[72.89174652 -31.45119286]
[87.74320221 -29.34540367]
[99.98955536 -20.68359756]
[106.92201996 -7.38168430]
[107.00720978 7.61807394]
[100.22627258 20.99786949]
[88.07909393 29.79821396]
[73.25251770 32.07255173]
[59.02436829 27.31677246]
[72.61708832 33.40670395]
[74.07619476 49.16048050]
[82.58728790 61.51205444]
[91.09838104 73.86362457]
[95.39179230 70.14175415]
[100.72200775 67.19509888]
[106.93634796 65.27199554]
[116.20129395 53.47535706]
[117.98801422 37.17383194]
[133.10581970 30.81898499]
[146.00280762 40.94813538]
[143.41166687 57.14128494]
[127.99793243 62.74030685]
[118.73298645 74.53694916]
[128.36151123 86.03874969]
[141.60409546 78.99361420]
[143.62666321 63.60891724]
[154.33024597 52.37446976]
[169.59912109 49.61014557]
[183.56205750 56.37887955]
[190.85005188 70.07795715]
[188.66070557 85.43980408]
[177.83587646 96.55747986]
[162.53793335 99.15600586]
[148.64923096 92.23619843]
[135.40664673 99.28133392]
[133.50825500 106.39691925]
[130.25363159 112.70435333]
[125.89206696 117.96179962]
[120.71186829 121.99474335]
[115.02361298 124.70120239]
[109.14286041 126.05296326]
[110.07849121 141.02375793]
[111.01412201 155.99455261]
[111.94974518 170.96533203]
[112.88537598 185.93612671]
[131.90951538 205.02693176]
[119.05294800 232.83691406]
[123.65850830 247.11236572]
[128.26406860 261.38781738]
[132.86964417 275.66329956]
[137.77119446 289.83984375]
[142.96659851 303.91137695]
[148.16201782 317.98287964]
[151.47285461 303.35284424]
[159.76095581 290.85055542]
[171.94703674 282.10412598]
[186.44412231 278.25259399]
[201.36434937 279.79748535]
[214.76472473 286.53765869]
[224.90019226 297.59536743]
[230.45085144 311.53057861]
[230.69384766 326.52859497]
[225.59756470 340.63632202]
[215.82566833 352.01657104]
[202.65068054 359.18731689]
[187.78833008 361.21478271]
[173.17407227 357.83493042]
[160.71104431 349.48788452]
[152.02299500 337.26229858]
[152.64697266 352.24929810]
[153.27095032 367.23632812]
[153.89492798 382.22332764]
[154.51890564 397.21035767]
[155.14288330 412.19735718]
[155.76686096 427.18438721]
[156.39083862 442.17138672]
[163.09083557 457.74530029]
[149.98030090 468.49475098]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 148]
[2 147]
[3 146]
[4 145]
[5 144]
[6 143]
[7 142]
[8 141]
[9 125]
[10 124]
[11 123]
[14 122]
[15 121]
[16 120]
[17 119]
[18 27]
[19 26]
[20 25]
[31 117]
[32 116]
[33 115]
[34 114]
[35 113]
[37 85]
[38 84]
[39 83]
[41 81]
[42 69]
[43 68]
[44 67]
[45 66]
[54 65]
[55 64]
[88 95]
[89 94]
[96 107]
[97 106]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
