%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:08 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGUGCCUAUCAUAUAGUAAAACCCAGCCCAUGACCCCUAACAGGGGCCCUCUCAGCCCUCCUxxxxxxxxxxAGAACUAAUCAUAUUUUAUAUCUUCUUCGAAACCACACUUAUCCCCACCUUGGCUAUCAUCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[141.92262268 92.63512421]
[127.90591431 97.97663879]
[113.88920593 103.31814575]
[101.56898499 143.47105408]
[90.26998138 153.33677673]
[78.97097778 163.20249939]
[73.45551300 180.73986816]
[56.15605545 183.51992798]
[45.06473923 193.61857605]
[33.97342682 203.71723938]
[22.88211060 213.81588745]
[22.76098442 232.70991516]
[9.14686108 245.34925842]
[-9.07033062 244.11177063]
[-19.73195648 254.66305542]
[-30.39358330 265.21435547]
[-41.05521011 275.76562500]
[-48.06015778 291.20477295]
[-64.83509064 288.74755859]
[-67.11767578 271.94796753]
[-51.60649872 265.10400391]
[-40.94487381 254.55271912]
[-30.28324699 244.00143433]
[-19.62162018 233.45013428]
[-22.04234695 222.22380066]
[-18.68022156 211.11688232]
[-10.26725674 202.95013428]
[1.16680717 199.85641479]
[12.78346062 202.72456360]
[23.87477493 192.62591553]
[34.96609116 182.52726746]
[46.05740738 172.42861938]
[46.95079041 160.32452393]
[56.16511917 151.82069397]
[69.10525513 151.90348816]
[80.40425873 142.03776550]
[91.70326233 132.17204285]
[90.61484528 124.75144196]
[75.77360535 126.92804718]
[73.59722900 112.08677673]
[88.43800354 109.91024017]
[87.34958649 102.48963165]
[73.69334412 96.28422546]
[60.03710556 90.07881927]
[46.38086319 83.87341309]
[32.72462082 77.66800690]
[15.80308914 76.62014008]
[12.12565708 60.06982803]
[27.01116180 51.95452881]
[38.93003082 64.01176453]
[52.58626938 70.21717072]
[66.24251556 76.42257690]
[79.89875031 82.62798309]
[93.55499268 88.83338928]
[108.54769135 89.30143738]
[122.56440735 83.95992279]
[136.58111572 78.61840820]
[132.16601562 64.27723694]
[128.69833374 49.67801285]
[126.19292450 34.88324356]
[124.66049194 19.95629120]
[124.10762024 4.96107244]
[124.53667450 -10.03819942]
[125.94580841 -24.97729683]
[128.32899475 -39.79224396]
[131.67602539 -54.41960526]
[135.97256470 -68.79673767]
[141.20021057 -82.86208344]
[147.33659363 -96.55540466]
[154.35543823 -109.81806183]
[162.22666931 -122.59327698]
[170.91658020 -134.82632446]
[180.38796997 -146.46484375]
[190.60029602 -157.45896912]
[201.50979614 -167.76164246]
[213.06976318 -177.32873535]
[225.23071289 -186.11927795]
[237.94053650 -194.09564209]
[251.14485168 -201.22366333]
[264.78707886 -207.47280884]
[278.80880737 -212.81632996]
[293.14999390 -217.23133850]
[307.74926758 -220.69892883]
[322.54403687 -223.20426941]
[337.47100830 -224.73660278]
[352.46621704 -225.28938293]
[367.46548462 -224.86024475]
[382.40457153 -223.45103455]
[397.21951294 -221.06776428]
[411.84686279 -217.72064209]
[426.22396851 -213.42401123]
[440.28927612 -208.19627380]
[453.98254395 -202.05981445]
[467.24517822 -195.04089355]
[480.02035522 -187.16960144]
[492.25335693 -178.47959900]
[503.89178467 -169.00814819]
[514.88586426 -158.79576111]
[525.18847656 -147.88619995]
[534.75549316 -136.32617188]
[543.54595947 -124.16517639]
[551.52227783 -111.45529938]
[558.65020752 -98.25095367]
[564.89929199 -84.60868835]
[570.24273682 -70.58692169]
[574.65765381 -56.24569702]
[578.12512207 -41.64642715]
[580.63037109 -26.85163116]
[582.16265869 -11.92465973]
[582.71533203 3.07056522]
[582.28613281 18.06983185]
[580.87677002 33.00891113]
[578.49340820 47.82383347]
[575.14624023 62.45115280]
[570.84954834 76.82823181]
[565.62170410 90.89351654]
[559.48516846 104.58676910]
[552.46618652 117.84934235]
[544.59478760 130.62446594]
[535.90472412 142.85740662]
[526.43316650 154.49581909]
[516.22076416 165.48982239]
[505.31112671 175.79235840]
[493.75103760 185.35932922]
[481.58999634 194.14973450]
[468.88006592 202.12594604]
[455.67568970 209.25379944]
[442.03338623 215.50279236]
[428.01156616 220.84614563]
[413.67031860 225.26098633]
[399.07104492 228.72840881]
[384.27621460 231.23356628]
[369.34924316 232.76573181]
[354.35403442 233.31832886]
[339.35476685 232.88902283]
[324.41567993 231.47961426]
[309.60076904 229.09617615]
[294.97348022 225.74888611]
[280.59643555 221.45208740]
[266.53115845 216.22418213]
[252.83795166 210.08755493]
[239.57542419 203.06849670]
[226.80035400 195.19703674]
[214.56744385 186.50689697]
[202.92910767 177.03529358]
[191.93515015 166.82278442]
[181.63267517 155.91310120]
[172.06579590 144.35296631]
[163.27545166 132.19186401]
[155.29931641 119.48188782]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 57]
[2 56]
[3 55]
[4 37]
[5 36]
[6 35]
[8 32]
[9 31]
[10 30]
[11 29]
[14 24]
[15 23]
[16 22]
[17 21]
[42 54]
[43 53]
[44 52]
[45 51]
[46 50]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
