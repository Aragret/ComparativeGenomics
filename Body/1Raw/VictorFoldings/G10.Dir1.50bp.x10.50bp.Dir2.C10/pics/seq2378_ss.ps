%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:13 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGUCAACACCCACUACCUAAAAAAUCCCAAACAUAUAACUGAACUCCUCACACCCAAUUGGACxxxxxxxxxxUUUUGACAACAUUCAAAAAAGAGUAAUAAACUUCGCCUUAAUUUUAAUAAUCAACACCCUCCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[92.50000000 488.34338379]
[92.50000000 473.34338379]
[92.50000000 458.34338379]
[92.50000000 443.34338379]
[92.50000000 428.34338379]
[92.50000000 413.34338379]
[92.50000000 398.34338379]
[92.50000000 383.34338379]
[92.50000000 368.34338379]
[92.50000000 353.34338379]
[77.77018738 350.60974121]
[63.78981781 345.21447754]
[51.03553772 337.33996582]
[39.94248962 327.25320435]
[30.88946152 315.29656982]
[24.18593407 301.87640381]
[20.06152153 287.44909668]
[18.65810013 272.50561523]
[20.02492142 257.55471802]
[24.11689758 243.10575867]
[30.79607773 229.65118408]
[39.83630371 217.64990234]
[50.93086243 207.51150513]
[63.70289993 199.58235168]
[77.71820831 194.13374329]
[92.50000000 191.35260010]
[92.50000000 176.35260010]
[92.50000000 161.35260010]
[92.50000000 146.35260010]
[92.50000000 131.35260010]
[76.93056488 125.49213409]
[65.49969482 111.99086761]
[61.86472321 93.60094452]
[67.93459320 74.75235748]
[83.15156555 60.48617935]
[70.48004913 52.45918274]
[57.80853271 44.43218613]
[45.13701630 36.40518951]
[34.68399429 45.23489380]
[22.17642403 50.74205017]
[8.63884449 52.48596954]
[-4.82278109 50.33379745]
[-17.11140633 44.47058105]
[-27.22831154 35.38340378]
[-34.35427094 23.82092857]
[-37.91588211 10.73172760]
[-37.63169861 -2.81353664]
[-33.53444672 -15.70968914]
[-45.86573410 -24.25014687]
[-58.19701767 -32.79060745]
[-74.17525482 -31.34995651]
[-85.15928650 -43.04314041]
[-82.72311401 -58.90014267]
[-68.73554993 -66.75683594]
[-53.92665863 -60.58623123]
[-49.65655899 -45.12189102]
[-37.32527161 -36.58143234]
[-24.99398994 -28.04097176]
[-11.79980850 -37.79043198]
[3.95291948 -42.46260071]
[20.38014030 -41.48049164]
[35.51091766 -34.94447327]
[47.52390671 -23.62231827]
[54.96659851 -8.85905838]
[56.93091965 7.58279896]
[53.16401291 23.73367119]
[65.83553314 31.76066971]
[78.50704193 39.78766632]
[91.17855835 47.81466293]
[83.90660858 34.69526291]
[76.63465118 21.57586098]
[66.31109619 10.69357586]
[62.88420486 -3.90972662]
[67.28929901 -18.24831581]
[78.32408142 -28.40871048]
[92.97678375 -31.61779976]
[107.24819946 -26.99971581]
[117.24317932 -15.81488705]
[120.23375702 -1.11602855]
[115.40350342 13.08535194]
[114.28057861 28.04326057]
[113.15764618 43.00116730]
[121.31431580 30.41272926]
[129.47097778 17.82429123]
[137.62763977 5.23585081]
[145.78431702 -7.35258818]
[153.94097900 -19.94102859]
[150.39453125 -35.34226990]
[158.84783936 -48.69581223]
[174.28570557 -52.07923508]
[187.54913330 -43.48521423]
[190.76914978 -28.01243019]
[182.03538513 -14.84061050]
[166.52941895 -11.78436184]
[158.37275696 0.80407739]
[150.21607971 13.39251709]
[142.05941772 25.98095512]
[133.90275574 38.56939697]
[125.74608612 51.15783310]
[134.15950012 63.57614899]
[148.87501526 60.66867828]
[163.59054565 57.76120377]
[178.17428589 54.25203705]
[192.60168457 50.14709091]
[207.02906799 46.04214859]
[216.06042480 32.78265762]
[232.06825256 31.72023010]
[242.77272034 43.66986847]
[239.96228027 59.46483231]
[225.79284668 66.98857880]
[211.13400269 60.46953201]
[196.70661926 64.57447815]
[182.27923584 68.67942047]
[180.79847717 71.12857819]
[178.22839355 73.11954498]
[174.74571228 74.22299194]
[170.68316650 74.08428192]
[166.49801636 72.47673035]
[151.78248596 75.38420105]
[137.06697083 78.29167175]
[139.21598816 103.62321472]
[127.06196594 123.45233917]
[107.50000000 131.35260010]
[107.50000000 146.35260010]
[107.50000000 161.35260010]
[107.50000000 176.35260010]
[107.50000000 191.35260010]
[122.28179169 194.13374329]
[136.29710388 199.58235168]
[149.06913757 207.51150513]
[160.16369629 217.64990234]
[169.20391846 229.65118408]
[175.88310242 243.10575867]
[179.97508240 257.55471802]
[181.34190369 272.50561523]
[179.93847656 287.44909668]
[175.81407166 301.87640381]
[169.11053467 315.29656982]
[160.05751038 327.25320435]
[148.96446228 337.33996582]
[136.21018982 345.21447754]
[122.22981262 350.60974121]
[107.50000000 353.34338379]
[107.50000000 368.34338379]
[107.50000000 383.34338379]
[107.50000000 398.34338379]
[107.50000000 413.34338379]
[107.50000000 428.34338379]
[107.50000000 443.34338379]
[107.50000000 458.34338379]
[107.50000000 473.34338379]
[107.50000000 488.34338379]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 152]
[2 151]
[3 150]
[4 149]
[5 148]
[6 147]
[7 146]
[8 145]
[9 144]
[10 143]
[26 127]
[27 126]
[28 125]
[29 124]
[30 123]
[35 69]
[36 68]
[37 67]
[38 66]
[48 58]
[49 57]
[50 56]
[82 99]
[83 98]
[84 97]
[85 96]
[86 95]
[87 94]
[100 120]
[101 119]
[102 118]
[103 113]
[104 112]
[105 111]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
