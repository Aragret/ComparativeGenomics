%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:14 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCCUAGACCAAACCUACGCCAAAAUCCAUUUCACUAUCAUAUUCAUCGGCGUAAAUCUAACUUUCxxxxxxxxxxACAAUCCCCUAUCUAGGCCUUCUUACGAGCCAAAACCUGCCCCUACUCCUCCUAGACCUAACCUCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[97.19310760 218.84852600]
[96.60050964 203.86024475]
[96.00791168 188.87194824]
[95.41531372 173.88366699]
[94.82271576 158.89537048]
[94.23011780 143.90708923]
[93.63751984 128.91879272]
[93.04491425 113.93050385]
[86.06398010 100.65396881]
[74.05182648 91.67019653]
[62.03966904 82.68642426]
[50.02751541 73.70265198]
[38.01536179 64.71887970]
[26.00320816 55.73510742]
[13.99105358 46.75133514]
[1.97889996 37.76756287]
[-10.71849537 46.01386642]
[-25.44345284 49.41204834]
[-40.41442108 47.57078171]
[-53.82686234 40.73144531]
[-64.07074738 29.73670578]
[-69.92382812 15.92671108]
[-70.69744110 0.97577006]
[-66.31748962 -13.31063461]
[-80.21783447 -18.94804764]
[-95.09429932 -20.86920547]
[-109.97076416 -22.79036140]
[-124.84722137 -24.71151924]
[-139.72369385 -26.63267517]
[-154.71710205 -26.18817520]
[-169.45362854 -23.38910103]
[-184.19015503 -20.59002876]
[-194.37043762 -8.19077587]
[-210.40916443 -8.56329632]
[-220.00279236 -21.42182350]
[-215.79191589 -36.90239334]
[-201.00675964 -43.12964249]
[-186.98922729 -35.32655334]
[-172.25270081 -38.12562561]
[-157.51617432 -40.92470169]
[-171.51107788 -46.32310867]
[-182.87541199 -56.11350632]
[-190.28538513 -69.15544891]
[-192.87782288 -83.92972565]
[-190.35076904 -98.71532440]
[-182.99856567 -111.78992462]
[-171.67767334 -121.63050842]
[-157.70678711 -127.09078217]
[-142.71336365 -127.53469086]
[-128.44390869 -122.91053009]
[-116.56064606 -113.75695038]
[-108.44780731 -101.14022064]
[-105.05043030 -86.53002930]
[-106.76425934 -71.62825775]
[-113.38966370 -58.17076874]
[-124.15487671 -47.72517776]
[-137.80253601 -41.50914001]
[-122.92606354 -39.58798218]
[-108.04960632 -37.66682434]
[-93.17314148 -35.74566650]
[-78.29667664 -33.82451248]
[-90.12747192 -43.04581070]
[-99.65649414 -54.63018417]
[-106.42288208 -68.01734161]
[-110.09937286 -82.55980682]
[-110.50814819 -97.55423737]
[-107.62944794 -112.27541351]
[-101.60248566 -126.01134491]
[-92.71876526 -138.09768677]
[-81.40795898 -147.94987488]
[-68.21710968 -155.09140015]
[-53.78419495 -159.17686462]
[-38.80727768 -160.00868225]
[-24.01071548 -157.54661560]
[-10.11015415 -151.90972900]
[2.22210121 -143.37068176]
[12.38959694 -132.34243774]
[19.90057755 -119.35840607]
[24.39177132 -105.04654694]
[25.64595985 -90.09907532]
[23.60248375 -75.23892212]
[18.36017799 -61.18480301]
[10.17258739 -48.61645508]
[-0.56429154 -38.14175034]
[-13.33116627 -30.26730156]
[-27.51056099 -25.37396240]
[-42.41668320 -23.69839859]
[-57.33371735 -25.32278824]
[-44.86738205 -33.56146240]
[-30.30723000 -37.04442978]
[-15.40608978 -35.33255386]
[-1.96463811 -28.61326218]
[8.38619900 -17.68027496]
[14.38312531 -3.83985877]
[15.28464031 11.24520874]
[10.96267128 25.75540924]
[22.97482491 34.73918152]
[34.98698044 43.72295380]
[46.99913406 52.70672607]
[59.01128769 61.69049835]
[71.02344513 70.67427063]
[83.03559875 79.65804291]
[95.04775238 88.64181519]
[84.64792633 77.83238983]
[81.92548370 63.08151627]
[87.78159332 49.27188110]
[100.27781677 40.97462463]
[115.27777100 40.93622589]
[127.81630707 49.16939926]
[133.74304199 62.94886780]
[131.09574890 77.71429443]
[146.03649902 79.04623413]
[160.97724915 80.37817383]
[167.38356018 66.64009094]
[178.10441589 55.92379761]
[191.84523010 49.52334213]
[206.94673157 48.21160889]
[221.58532715 52.14699173]
[233.99334717 60.85428238]
[242.67245483 73.28202820]
[246.57461548 87.92951965]
[245.22862244 103.02799988]
[238.79699707 116.75424957]
[228.05639648 127.45076752]
[214.30381775 133.82589722]
[199.19993591 135.10978699]
[184.56860352 131.14743042]
[172.17665100 122.41729736]
[163.52046204 109.97357941]
[159.64530945 95.31892395]
[144.70455933 93.98698425]
[129.76380920 92.65504456]
[124.33116150 97.82575989]
[136.80433655 106.15762329]
[149.27751160 114.48948669]
[161.75068665 122.82134247]
[176.48046875 125.65564728]
[187.57980347 135.74548340]
[191.80158997 150.13911438]
[187.91076660 164.62571716]
[177.04557800 174.96726990]
[162.38461304 178.13839722]
[148.21688843 173.21138000]
[138.68713379 161.62760925]
[136.58332825 146.77525330]
[128.87750244 133.90589905]
[121.17168427 121.03654480]
[113.46585846 108.16719055]
[108.03320312 113.33790588]
[108.62580872 128.32620239]
[109.21840668 143.31448364]
[109.81100464 158.30278015]
[110.40360260 173.29106140]
[110.99620056 188.27935791]
[111.58879852 203.26763916]
[112.18140411 218.25593567]
[118.84877014 233.84382629]
[105.71576691 244.56579590]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 156]
[2 155]
[3 154]
[4 153]
[5 152]
[6 151]
[7 150]
[8 149]
[9 103]
[10 102]
[11 101]
[12 100]
[13 99]
[14 98]
[15 97]
[16 96]
[24 88]
[25 61]
[26 60]
[27 59]
[28 58]
[29 57]
[30 40]
[31 39]
[32 38]
[111 132]
[112 131]
[113 130]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
