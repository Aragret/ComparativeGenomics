%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:49 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGGGGGGUAUGCACGCGAUAGCAUUGCGAGACGCUGGAGCCGGAGCACCCUAUGUCGCAGUAxxxxxxxxxxGAUGCAAUUCCCGGACGUCUAAACCAAACCACUUUCACCGCUACACGACCGGGGGUAUACCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[223.26834106 541.53686523]
[225.85934448 522.32916260]
[226.17140198 507.33239746]
[226.48345947 492.33563232]
[226.79551697 477.33889771]
[227.10757446 462.34213257]
[227.41963196 447.34536743]
[227.73167419 432.34863281]
[228.04373169 417.35186768]
[228.35578918 402.35510254]
[228.66784668 387.35836792]
[224.66011047 372.90368652]
[211.33248901 366.25357056]
[210.52996826 350.45272827]
[202.54005432 337.75781250]
[194.55014038 325.06286621]
[181.22251892 318.41278076]
[180.41999817 302.61193848]
[172.43008423 289.91702271]
[157.92451477 291.43072510]
[143.96540833 284.45449829]
[135.40399170 270.20101929]
[121.38728333 275.54254150]
[107.37057495 280.88406372]
[93.35385895 286.22555542]
[79.33714294 291.56707764]
[65.32043457 296.90859985]
[52.67270279 308.19891357]
[38.32237625 299.17092896]
[43.02497482 282.88223267]
[59.97891998 282.89187622]
[73.99563599 277.55035400]
[88.01234436 272.20886230]
[102.02906036 266.86734009]
[116.04576874 261.52581787]
[130.06248474 256.18432617]
[136.69097900 242.72834778]
[132.38339233 228.36016846]
[128.07582092 213.99198914]
[123.76822662 199.62379456]
[119.46064758 185.25561523]
[115.00382996 170.93301392]
[110.39826202 156.65756226]
[105.79270172 142.38209534]
[101.18713379 128.10662842]
[72.20874023 128.06135559]
[49.17016983 98.34539795]
[36.23211288 90.75548553]
[19.83853531 91.18289185]
[11.50349236 77.05989075]
[19.80136108 62.91501999]
[36.19600296 63.29930496]
[43.82202148 77.81742859]
[56.76007462 85.40734100]
[66.50772858 74.00631714]
[56.99937057 62.40497589]
[41.24071121 59.39761734]
[33.89439392 45.13538742]
[40.59588242 30.55905151]
[56.20436859 26.85032463]
[68.74636078 36.85422516]
[68.60070801 52.89661789]
[78.10906982 64.49796295]
[92.18121338 59.30230713]
[106.25210571 54.10712814]
[105.94005585 39.11037445]
[105.62799835 24.11362076]
[91.35415649 18.95397758]
[79.91064453 8.98349953]
[72.84510040 -4.44939041]
[71.11308289 -19.52800179]
[74.94882965 -34.21307755]
[83.83358765 -46.51858521]
[96.56577301 -54.78030014]
[111.42345428 -57.88089371]
[126.39726257 -55.40103912]
[139.46209717 -47.67611694]
[148.85105896 -35.75085449]
[153.29435730 -21.23805237]
[152.19108582 -6.10044193]
[145.69044495 7.61473608]
[134.67160034 18.05261803]
[120.62474823 23.80156517]
[120.93680573 38.79831696]
[121.24886322 53.79507065]
[133.29667664 66.73071289]
[139.33766174 81.94848633]
[139.38185120 97.02291870]
[134.32287598 109.84426880]
[125.71459961 118.91018677]
[115.46259308 123.50106812]
[120.06816101 137.77653503]
[124.67372894 152.05198669]
[129.27929688 166.32745361]
[134.92771912 173.59016418]
[133.82882690 180.94802856]
[138.13641357 195.31620789]
[142.44400024 209.68440247]
[146.75158691 224.05258179]
[151.05917358 238.42076111]
[167.52497864 235.77267456]
[182.32737732 242.01612854]
[191.21609497 254.65699768]
[192.01469421 269.47677612]
[185.12501526 281.92709351]
[193.11492920 294.62203979]
[207.01405334 302.18014526]
[207.24507141 317.07296753]
[215.23498535 329.76788330]
[223.22489929 342.46282959]
[237.12400818 350.02093506]
[237.35504150 364.91375732]
[237.27162170 349.91400146]
[240.25038147 335.21273804]
[246.16601562 321.42849731]
[254.76962280 309.14117432]
[265.69924927 298.86776733]
[278.49508667 291.04043579]
[292.61874390 285.98852539]
[307.47607422 283.92459106]
[322.44198608 284.93539429]
[336.88681030 288.97848511]
[350.20288086 295.88372803]
[361.82995605 305.36062622]
[371.27883911 317.01043701]
[378.15203857 330.34307861]
[382.16036987 344.79760742]
[383.13519287 359.76589966]
[381.03549194 374.61822510]
[375.94964600 388.72970581]
[368.09155273 401.50665283]
[357.79190063 412.41156006]
[345.48391724 420.98556519]
[331.68548584 426.86804199]
[316.97711182 429.81143188]
[301.97760010 429.69192505]
[287.31796265 426.51455688]
[273.61502075 420.41299438]
[261.44522095 411.64395142]
[251.32060242 400.57635498]
[243.66459656 387.67041016]
[243.35255432 402.66717529]
[243.04049683 417.66394043]
[242.72843933 432.66067505]
[242.41638184 447.65744019]
[242.10432434 462.65417480]
[241.79226685 477.65093994]
[241.48020935 492.64770508]
[241.16815186 507.64443970]
[240.85609436 522.64117432]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 150]
[3 149]
[4 148]
[5 147]
[6 146]
[7 145]
[8 144]
[9 143]
[10 142]
[11 141]
[12 112]
[14 110]
[15 109]
[16 108]
[18 106]
[19 105]
[22 36]
[23 35]
[24 34]
[25 33]
[26 32]
[27 31]
[37 100]
[38 99]
[39 98]
[40 97]
[41 96]
[42 94]
[43 93]
[44 92]
[45 91]
[47 54]
[48 53]
[55 63]
[56 62]
[65 85]
[66 84]
[67 83]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
