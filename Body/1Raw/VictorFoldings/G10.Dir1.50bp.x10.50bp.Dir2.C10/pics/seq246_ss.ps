%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:20 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGUCAUAACAAAAAAUUUCCACCAAACCCCCCCUCCCCCGCUUCUGGCCACAGCACUUAAACAxxxxxxxxxxAAUCAUUUUCCUUAUCUGCUUCCUAGUCCUGUAUGCCCUUUUCCUAACACUCACAACAAAACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[32.44393539 158.12745667]
[20.29060364 166.91929626]
[8.13726997 175.71113586]
[-3.92516160 184.62728882]
[-15.89542007 193.66680908]
[-27.86567879 202.70632935]
[-39.83593750 211.74584961]
[-51.80619431 220.78536987]
[-63.77645493 229.82489014]
[-75.74671173 238.86441040]
[-87.71697235 247.90393066]
[-82.04046631 261.88391113]
[-80.17663574 276.85681152]
[-82.25254822 291.80181885]
[-88.12667084 305.69992065]
[-97.39849854 317.60351562]
[-109.43585968 326.70101929]
[-123.41802216 332.37213135]
[-138.39167786 334.23016357]
[-153.33586121 332.14849854]
[-167.23168945 326.26898193]
[-179.13171387 316.99258423]
[-188.22454834 304.95169067]
[-193.89025879 290.96734619]
[-195.74253845 275.99298096]
[-193.65507507 261.04959106]
[-187.77021790 247.15603638]
[-178.48921204 235.25959778]
[-166.44482422 226.17140198]
[-152.45828247 220.51110840]
[-137.48320007 218.66461182]
[-122.54061890 220.75784302]
[-108.64933777 226.64805603]
[-96.75649261 235.93367004]
[-84.78623199 226.89414978]
[-72.81597137 217.85462952]
[-60.84571457 208.81510925]
[-48.87545776 199.77558899]
[-36.90519714 190.73606873]
[-24.93494034 181.69654846]
[-12.96468067 172.65702820]
[-9.50081253 166.07569885]
[-0.65457261 163.55780029]
[11.49876022 154.76596069]
[23.65209389 145.97412109]
[14.18553829 124.05204010]
[10.87952137 100.40328217]
[13.97137833 76.72557831]
[23.23914719 54.71872330]
[38.01750565 35.96257019]
[57.24552536 21.80359840]
[79.54284668 13.25827217]
[103.30877686 10.94005203]
[126.83716583 15.01535988]
[132.54182434 1.14247930]
[138.24649048 -12.73040104]
[135.35163879 -30.88668060]
[149.59226990 -41.09691238]
[155.01089478 -55.08399582]
[160.42951965 -69.07108307]
[165.84814453 -83.05816650]
[163.61853027 -98.72147369]
[175.43096924 -107.79427338]
[180.84959412 -121.78135681]
[186.26821899 -135.76843262]
[173.21914673 -143.22360229]
[161.42703247 -152.54045105]
[151.15530396 -163.51083374]
[142.63342285 -175.88966370]
[136.05180359 -189.40039062]
[131.55744934 -203.74118042]
[129.25079346 -218.59167480]
[129.18333435 -233.62008667]
[131.35661316 -248.49067688]
[135.72204590 -262.87124634]
[142.18214417 -276.44049072]
[150.59254456 -288.89532471]
[160.76539612 -299.95745850]
[172.47340393 -309.37979126]
[185.45503235 -316.95178223]
[199.42024231 -322.50430298]
[214.05705261 -325.91329956]
[229.03848267 -327.10263062]
[244.02983093 -326.04568481]
[258.69619751 -322.76614380]
[272.70989990 -317.33718872]
[285.75790405 -309.88015747]
[297.54870605 -300.56164551]
[307.81887817 -289.58978271]
[316.33898926 -277.20974731]
[322.91867065 -263.69808960]
[327.41098022 -249.35664368]
[329.71554565 -234.50582886]
[329.78085327 -219.47741699]
[327.60546875 -204.60713196]
[323.23797607 -190.22718811]
[316.77593994 -176.65884399]
[308.36376953 -164.20521545]
[298.18933105 -153.14453125]
[286.47998047 -143.72387695]
[273.49728394 -136.15373230]
[259.53128052 -130.60319519]
[244.89398193 -127.19627380]
[229.91238403 -126.00908661]
[214.92118835 -127.06815338]
[200.25529480 -130.34980774]
[194.83666992 -116.36272430]
[189.41804504 -102.37564087]
[192.03524780 -87.71278381]
[179.83523560 -77.63954163]
[174.41661072 -63.65245438]
[168.99798584 -49.66537094]
[163.57936096 -35.67828751]
[168.18154907 -24.44966125]
[163.73320007 -12.72858429]
[152.11936951 -7.02573776]
[146.41470337 6.84714270]
[140.71003723 20.72002411]
[148.27064514 25.08292770]
[155.36814880 30.16455078]
[161.93449402 35.91613770]
[167.90666199 42.28251648]
[173.22737122 49.20260620]
[177.84556580 56.61002350]
[181.71694946 64.43370056]
[184.80439758 72.59857941]
[187.07826233 81.02633667]
[188.51673889 89.63612366]
[189.10603333 98.34532928]
[188.84048462 107.07041168]
[187.72264099 115.72766113]
[185.76324463 124.23403168]
[182.98107910 132.50790405]
[179.40281677 140.46992493]
[175.06282043 148.04368591]
[170.00270081 155.15655518]
[164.27101135 161.74026489]
[157.92272949 167.73167419]
[151.01878357 173.07330322]
[143.62536621 177.71389771]
[135.81344604 181.60894775]
[127.65794373 184.72106934]
[119.23710632 187.02043152]
[110.63172150 188.48497009]
[101.92433929 189.10061646]
[93.19849396 188.86148071]
[84.53789520 187.76985168]
[76.02563477 185.83619690]
[67.74337769 183.07907104]
[59.77056885 179.52493286]
[52.18370056 175.20787048]
[45.05556107 170.16929626]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 45]
[2 44]
[3 43]
[4 41]
[5 40]
[6 39]
[7 38]
[8 37]
[9 36]
[10 35]
[11 34]
[54 118]
[55 117]
[56 116]
[58 113]
[59 112]
[60 111]
[61 110]
[63 108]
[64 107]
[65 106]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
