%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:36 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCCUCUCUCCUACUCCUGCUCGCAUCUGCUAUAGUGGAGGCCGGAGCAGGAACAGGUUGAAxxxxxxxxxxUAAUCAUACAAAGCCCCCGCACCAAUAGGAUCCUCCCGAAUCAACCCUGACCCCUCUCCUCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[48.43569565 74.29792786]
[35.99625397 65.91578674]
[20.22814941 64.62062836]
[13.99715042 51.09199524]
[-1.77095437 49.79684067]
[-8.00195312 36.26820755]
[-20.44139290 27.88606262]
[-32.88083267 19.50391960]
[-45.32027435 11.12177753]
[-57.75971603 2.73963404]
[-70.19915771 -5.64250946]
[-78.33615112 -0.35893950]
[-88.07237244 1.70344353]
[-98.14740753 0.09474754]
[-107.19097900 -5.14745331]
[-113.90917206 -13.47999477]
[-117.26847839 -23.90616989]
[-116.65155029 -35.09366226]
[-131.46929932 -37.42476654]
[-146.28706360 -39.75587082]
[-158.97801208 -30.72384644]
[-173.97212219 -33.29899979]
[-182.50456238 -45.45354462]
[-197.32232666 -47.78464890]
[-212.14009094 -50.11575317]
[-226.95783997 -52.44685745]
[-241.77560425 -54.77796173]
[-256.59335327 -57.10906601]
[-271.41110229 -59.44017029]
[-286.22888184 -61.77127457]
[-301.09191895 -63.79360962]
[-315.99383545 -65.50629425]
[-330.58718872 -59.39529037]
[-342.34777832 -68.53517914]
[-357.24969482 -70.24787140]
[-372.15158081 -71.96056366]
[-387.05349731 -73.67324829]
[-401.95538330 -75.38594055]
[-416.77734375 -68.36870575]
[-430.10971069 -77.91756439]
[-428.23724365 -94.20946503]
[-413.08624268 -100.48469543]
[-400.24270630 -90.28784180]
[-385.34078979 -88.57515717]
[-370.43890381 -86.86246490]
[-355.53698730 -85.14977264]
[-340.63510132 -83.43708801]
[-327.10760498 -89.67059326]
[-314.28112793 -80.40820312]
[-299.37924194 -78.69551086]
[-295.10351562 -80.95244598]
[-289.35650635 -80.50180817]
[-283.89776611 -76.58903503]
[-269.08001709 -74.25792694]
[-254.26225281 -71.92682648]
[-239.44450378 -69.59571838]
[-224.62673950 -67.26461792]
[-209.80897522 -64.93350983]
[-194.99122620 -62.60240936]
[-180.17346191 -60.27130508]
[-168.32125854 -69.21897125]
[-153.26072693 -67.06598663]
[-143.95596313 -54.57363129]
[-129.13819885 -52.24252701]
[-114.32044220 -49.91142273]
[-102.33361053 -58.92895126]
[-100.46599579 -73.81223297]
[-98.59838104 -88.69551086]
[-112.45487213 -94.71002960]
[-124.05471039 -104.38579559]
[-132.45753479 -116.93844604]
[-136.98219299 -131.35038757]
[-137.26187134 -146.45332336]
[-133.27391052 -161.02290344]
[-125.34158325 -173.87805176]
[-114.10793304 -183.97666931]
[-100.48362732 -190.50007629]
[-85.57312012 -192.91946411]
[-70.58514404 -191.03872681]
[-56.73470306 -185.01028442]
[-45.14459610 -175.32287598]
[-36.75437546 -162.76177979]
[-32.24420166 -148.34529114]
[-31.97969437 -133.24209595]
[-35.98229599 -118.67652893]
[-43.92753220 -105.82935333]
[-55.17132187 -95.74203491]
[-68.80217743 -89.23231506]
[-83.71510315 -86.82789612]
[-85.58271790 -71.94461823]
[-87.45033264 -57.06133652]
[-63.91874313 -43.14004898]
[-61.81701279 -18.08194923]
[-49.37757111 -9.69980621]
[-36.93812943 -1.31766319]
[-24.49868965 7.06447983]
[-12.05924988 15.44662285]
[0.38019016 23.82876587]
[15.25854301 24.52437592]
[22.37929344 38.65255737]
[37.25764847 39.34816360]
[44.37839890 53.47634506]
[56.81783676 61.85848618]
[76.34516144 45.91734695]
[101.37055969 39.57136917]
[127.33265686 44.50730133]
[149.27359009 60.30560303]
[162.78524780 84.42548370]
[177.76495361 83.64563751]
[192.74467468 82.86579132]
[208.24803162 76.00415802]
[219.13327026 89.00215912]
[209.65657043 103.06019592]
[193.52452087 97.84550476]
[178.54479980 98.62535095]
[163.56509399 99.40519714]
[161.86360168 106.70964050]
[176.47244263 110.11284637]
[173.06901550 124.72163391]
[158.46061707 121.31853485]
[156.75914001 128.62298584]
[169.85229492 135.94209290]
[182.94544983 143.26119995]
[199.32658386 142.49282837]
[207.95362854 156.43937683]
[199.95182800 170.75381470]
[183.55273438 170.71067810]
[175.62634277 156.35435486]
[162.53318787 149.03524780]
[149.44003296 141.71614075]
[143.30496216 147.62078857]
[136.47949219 152.64048767]
[129.08924866 156.69665527]
[121.26847076 159.72834778]
[113.15757751 161.69306946]
[104.90064240 162.56742859]
[96.64283752 162.34721375]
[88.52789307 161.04745483]
[80.69558716 158.70181274]
[73.27931976 155.36186218]
[66.40387726 151.09605408]
[60.18331146 145.98823547]
[54.71905136 140.13615417]
[50.09827423 133.64949036]
[46.39250183 126.64786530]
[43.65653610 119.25864410]
[41.92765427 111.61460114]
[41.22514343 103.85157013]
[41.55015945 96.10598755]
[42.88589478 88.51254272]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 103]
[2 102]
[4 100]
[6 98]
[7 97]
[8 96]
[9 95]
[10 94]
[11 93]
[18 65]
[19 64]
[20 63]
[23 60]
[24 59]
[25 58]
[26 57]
[27 56]
[28 55]
[29 54]
[30 53]
[31 50]
[32 49]
[34 47]
[35 46]
[36 45]
[37 44]
[38 43]
[66 91]
[67 90]
[68 89]
[108 116]
[109 115]
[110 114]
[121 130]
[122 129]
[123 128]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
