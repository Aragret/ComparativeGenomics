%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:41 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCCAAAGCCCAUAAAAAUAAAAAAUUAUAACAAACCCUGAGAACCAAAAUGAACGAAAAUCUxxxxxxxxxxAAUAGCUUUUAUAGUAAAGAUACCUCUUUACGGACUCCACUUAUGACUCCCUAAAGCCCAUCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[110.14765167 285.86453247]
[110.14765167 270.86453247]
[110.14765167 255.86453247]
[110.14765167 240.86453247]
[110.14765167 225.86453247]
[110.14765167 210.86453247]
[110.14765167 195.86453247]
[110.14765167 180.86453247]
[110.14765167 165.86453247]
[110.14765167 150.86453247]
[105.89480591 136.48004150]
[97.73814392 123.89160919]
[77.35095215 99.74864197]
[64.51729584 91.98350525]
[51.68364334 84.21836853]
[38.84999084 76.45323181]
[26.01633644 68.68810272]
[17.12637520 80.78251648]
[7.18805838 92.03134155]
[-3.71859550 102.34400940]
[-15.50577164 111.63748932]
[-28.07856369 119.83694458]
[-41.33574295 126.87637329]
[-55.17056274 132.69908142]
[-69.47164154 137.25819397]
[-84.12381744 140.51699829]
[-99.00913239 142.44926453]
[-114.00773621 143.03941345]
[-128.99885559 142.28273010]
[-143.86178589 140.18527222]
[-158.47688293 136.76394653]
[-172.72644043 132.04631042]
[-186.49574280 126.07031250]
[-199.67393494 118.88410187]
[-212.15489197 110.54551697]
[-223.83813477 101.12171173]
[-234.62959290 90.68855286]
[-244.44236755 79.33005524]
[-253.19746399 67.13765717]
[-260.82440186 54.20954132]
[-267.26171875 40.64978790]
[-272.45767212 26.56757927]
[-276.37033081 12.07629967]
[-278.96826172 -2.70737457]
[-280.23052979 -17.66441154]
[-280.14694214 -32.67438507]
[-278.71820068 -47.61643600]
[-275.95581055 -62.37026215]
[-271.88198853 -76.81707764]
[-266.52957153 -90.84054565]
[-259.94161987 -104.32777405]
[-252.17121887 -117.17015839]
[-243.28088379 -129.26429749]
[-233.34222412 -140.51281738]
[-222.43525696 -150.82516479]
[-210.64779663 -160.11827087]
[-198.07475281 -168.31735229]
[-184.81736755 -175.35636902]
[-170.98236084 -181.17864990]
[-156.68115234 -185.73733521]
[-142.02886963 -188.99569702]
[-127.14349365 -190.92750549]
[-112.14487457 -191.51719666]
[-97.15377808 -190.76005554]
[-82.29090118 -188.66215515]
[-67.67591858 -185.24038696]
[-53.42650223 -180.52229309]
[-39.65737915 -174.54588318]
[-26.47941399 -167.35926819]
[-13.99870968 -159.02030945]
[-2.31575656 -149.59614563]
[8.47537994 -139.16265869]
[18.28781509 -127.80385590]
[27.04254150 -115.61119080]
[34.66907120 -102.68283844]
[41.10599899 -89.12289429]
[46.30149460 -75.04052734]
[50.21372986 -60.54912567]
[52.81120300 -45.76537323]
[54.07300186 -30.80829620]
[53.98896790 -15.79832745]
[52.55977249 -0.85631752]
[49.79692841 13.89742565]
[45.72267914 28.34411049]
[40.36982727 42.36742020]
[33.78147125 55.85444641]
[46.61512375 63.61957932]
[59.44878006 71.38471985]
[72.28243256 79.14984894]
[85.11608887 86.91498566]
[80.76440430 72.56009674]
[89.94642639 60.69880295]
[104.93378448 61.31459045]
[113.11180878 73.88916016]
[107.59711456 87.83872223]
[121.02456665 81.15264893]
[134.45201111 74.46657562]
[147.87947083 67.78050232]
[161.30691528 61.09442520]
[174.73435974 54.40834808]
[188.16181946 47.72227478]
[196.76414490 33.76047134]
[213.14662170 34.49981308]
[220.45634460 49.17972946]
[211.17370605 62.69878006]
[194.84788513 61.14972305]
[181.42044067 67.83580017]
[167.99299622 74.52187347]
[154.56553650 81.20794678]
[141.13809204 87.89402771]
[127.71063995 94.58010101]
[114.28319550 101.26617432]
[110.32658386 115.73493958]
[118.48324585 128.32337952]
[118.13451385 113.32743835]
[120.85352325 98.57592773]
[126.52583313 84.68978882]
[134.91267395 72.25351715]
[145.66102600 61.79058838]
[158.31848145 53.74141693]
[172.35221863 48.44480896]
[187.17155457 46.12371445]
[202.15267944 46.87583542]
[216.66502380 50.66950989]
[230.09770203 57.34505463]
[241.88533020 66.62147522]
[251.53170776 78.10831451]
[258.63079834 91.32204437]
[262.88381958 105.70648193]
[264.11169434 120.65614319]
[262.26275635 135.54176331]
[257.41485596 149.73675537]
[249.77204895 162.64361572]
[239.65602112 173.71908569]
[227.49258423 182.49694824]
[213.79373169 188.60774231]
[199.13610840 191.79421997]
[184.13664246 191.92227173]
[169.42674255 188.98651123]
[155.62556458 183.11048889]
[143.31404114 174.54158020]
[133.01039124 163.64044189]
[125.14765167 150.86453247]
[125.14765167 165.86453247]
[125.14765167 180.86453247]
[125.14765167 195.86453247]
[125.14765167 210.86453247]
[125.14765167 225.86453247]
[125.14765167 240.86453247]
[125.14765167 255.86453247]
[125.14765167 270.86453247]
[125.14765167 285.86453247]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 152]
[2 151]
[3 150]
[4 149]
[5 148]
[6 147]
[7 146]
[8 145]
[9 144]
[10 143]
[11 114]
[12 113]
[13 90]
[14 89]
[15 88]
[16 87]
[17 86]
[95 112]
[96 111]
[97 110]
[98 109]
[99 108]
[100 107]
[101 106]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
