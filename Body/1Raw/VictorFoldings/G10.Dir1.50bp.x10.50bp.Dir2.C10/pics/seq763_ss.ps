%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:33:58 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGAACCAACCAAACCCCAAAGACACCCCCCACAGUUUAUGUAGCUUACCUCCUCAAAGCAAUxxxxxxxxxxCCUGCGUCAGAUUAAAACACUGAACUGACAAUUAACAGCCCAAUAUCUACAAUCAACCAACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[96.65681458 128.55097961]
[85.77799225 138.87818909]
[74.89916229 149.20539856]
[64.02033997 159.53259277]
[53.14151382 169.85980225]
[42.26269150 180.18701172]
[32.16403961 191.27832031]
[22.89909172 203.07496643]
[13.63414192 214.87159729]
[4.36919212 226.66824341]
[10.69215107 240.60662842]
[9.80178165 255.88621521]
[1.90268457 268.99588013]
[-11.18998528 276.92306519]
[-26.46762848 277.84622192]
[-40.41955566 271.55319214]
[-49.83971405 259.49005127]
[-52.56341934 244.42884827]
[-47.96478653 229.83052063]
[-37.10054779 219.04965210]
[-22.46722603 214.56362915]
[-7.42744780 217.40328979]
[1.83750153 205.60665894]
[11.10245132 193.81001282]
[20.36739922 182.01336670]
[5.43254614 183.40985107]
[-7.00457764 175.02426147]
[-11.30983162 160.65538025]
[-5.53289461 146.81243896]
[7.70922518 139.76643372]
[22.41771698 142.70925903]
[31.92949104 154.30780029]
[31.93548393 169.30818176]
[42.81430817 158.98097229]
[53.69313431 148.65377808]
[64.57196045 138.32656860]
[75.45078278 127.99935913]
[86.32961273 117.67215729]
[82.62345123 103.13722229]
[68.12785339 99.28005981]
[53.63225555 95.42289734]
[39.08725739 102.19213867]
[24.79100227 94.91226196]
[21.71035194 79.16777039]
[32.20851898 67.03648376]
[48.23220825 67.82449341]
[57.48941422 80.92730713]
[71.98501587 84.78446198]
[86.48060608 88.64162445]
[90.54138184 82.33605957]
[102.72369385 63.41936874]
[93.21533203 51.81802750]
[83.70697784 40.21668625]
[74.19861603 28.61534309]
[58.88599777 30.49342728]
[44.99876785 23.77416801]
[36.96829987 10.60165596]
[37.35707855 -4.82080841]
[46.04104996 -17.57197189]
[60.24919128 -23.58298492]
[75.44773102 -20.93575478]
[86.78688049 -10.47500420]
[90.64834595 4.46128035]
[85.79995728 19.10698509]
[95.30831909 30.70832634]
[104.81667328 42.30966568]
[114.32503510 53.91100693]
[111.54264069 39.17132568]
[108.76025391 24.43163872]
[105.97786713 9.69195461]
[97.53994751 -2.70972419]
[94.31060028 -17.35797691]
[96.75162506 -32.15802383]
[104.51393890 -44.99338150]
[116.48750305 -54.02852631]
[130.96002197 -57.97138214]
[145.86186218 -56.25809860]
[159.06196594 -49.13368988]
[168.67265320 -37.61698151]
[173.31954956 -23.35492134]
[172.33811951 -8.38706207]
[165.86872864 5.14611340]
[154.83918762 15.30763149]
[148.78541565 29.03176880]
[142.73165894 42.75590515]
[136.67788696 56.48004150]
[148.57026672 47.33831024]
[160.46264648 38.19657516]
[172.35502625 29.05484009]
[184.24740601 19.91310692]
[180.26660156 5.24267149]
[182.20791626 -9.83379269]
[189.77529907 -23.01723289]
[201.81478882 -32.29727173]
[216.49044800 -36.25877380]
[231.56434631 -34.29763031]
[244.73782349 -26.71291161]
[254.00201416 -14.66122437]
[257.94421387 0.01963291]
[255.96324158 15.09093666]
[248.36119080 28.25442314]
[236.29733276 37.50275421]
[221.61129761 41.42563248]
[206.54261780 39.42483902]
[193.38914490 31.80548668]
[181.49676514 40.94721985]
[169.60438538 50.08895493]
[157.71200562 59.23069000]
[145.81962585 68.37242126]
[159.14414978 61.48350906]
[173.24998474 56.38199997]
[187.89855957 53.15416718]
[202.84216309 51.85460281]
[217.82804871 52.50528717]
[232.60276794 55.09521103]
[246.91644287 59.58057785]
[260.52700806 65.88552856]
[273.20428467 73.90343475]
[284.73385620 83.49868774]
[294.92074585 94.50901794]
[303.59265137 106.74821472]
[310.60293579 120.00928497]
[315.83300781 134.06796265]
[319.19445801 148.68646240]
[320.63040161 163.61756897]
[320.11657715 178.60876465]
[317.66165161 193.40652466]
[313.30715942 207.76055908]
[307.12673950 221.42811584]
[299.22491455 234.17807007]
[289.73532104 245.79476929]
[278.81845093 256.08175659]
[266.65893555 264.86505127]
[253.46243286 271.99612427]
[239.45208740 277.35433960]
[224.86488342 280.84909058]
[209.94750977 282.42132568]
[194.95223999 282.04437256]
[180.13270569 279.72463989]
[165.73950195 275.50140381]
[152.01608276 269.44601440]
[139.19451904 261.66091919]
[127.49166870 252.27778625]
[117.10543823 241.45530701]
[108.21149445 229.37649536]
[100.96024323 216.24563599]
[95.47432709 202.28480530]
[91.84651947 187.73011780]
[90.13818359 172.82771301]
[90.37819672 157.82963562]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 38]
[2 37]
[3 36]
[4 35]
[5 34]
[6 33]
[7 25]
[8 24]
[9 23]
[10 22]
[39 49]
[40 48]
[41 47]
[51 67]
[52 66]
[53 65]
[54 64]
[86 109]
[87 108]
[88 107]
[89 106]
[90 105]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
