%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:24 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCUGCUUCUUCGAAUUUGCAAUUCAAUAUGAAAAUCACCUCGGAGCUGGUAAAAAGAGGCCxxxxxxxxxxGGCUGAAUCAUCCGCUACCUUCACGCCAAUGGCGCCUCAAUAUUCUUUAUCUGCCUCUUCCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[15.65707779 323.41192627]
[15.65707779 308.41192627]
[15.65707779 293.41192627]
[15.65707779 278.41192627]
[15.65707779 263.41192627]
[15.65707779 248.41191101]
[15.65707779 233.41191101]
[15.65707779 218.41191101]
[15.65707779 203.41191101]
[15.65707779 188.41191101]
[4.25605631 178.66426086]
[-8.17402077 188.45219421]
[-21.94909286 182.78680420]
[-36.76685333 185.11791992]
[-51.58460999 187.44902039]
[-55.74015427 190.81814575]
[-60.31726074 192.08403015]
[-64.42758179 191.44610596]
[-67.39669037 189.43318176]
[-82.33100128 190.83547974]
[-97.26530457 192.23779297]
[-112.19961548 193.64009094]
[-127.06266022 195.66242981]
[-141.82872009 198.30128479]
[-156.59477234 200.94015503]
[-171.36082458 203.57901001]
[-183.58459473 213.62342834]
[-197.47453308 208.24583435]
[-212.24060059 210.88470459]
[-218.88914490 224.90527344]
[-232.52511597 232.31066895]
[-247.90521240 230.25335693]
[-259.11544800 219.52441406]
[-261.84527588 204.24934387]
[-255.04502869 190.30172729]
[-241.32951355 183.04469299]
[-225.97265625 185.26873779]
[-214.87945557 196.11865234]
[-200.11340332 193.47978210]
[-188.94581604 183.62411499]
[-173.99969482 188.81295776]
[-159.23364258 186.17410278]
[-144.46757507 183.53523254]
[-129.70152283 180.89636230]
[-127.98254395 178.60455322]
[-125.22289276 176.87876892]
[-121.64220428 176.13005066]
[-117.60864258 176.67904663]
[-113.60191345 178.70578003]
[-98.66761017 177.30348206]
[-83.73329926 175.90116882]
[-68.79899597 174.49887085]
[-53.91571426 172.63125610]
[-39.09795380 170.30015564]
[-24.28019714 167.96905518]
[-12.90998554 158.34785461]
[1.92495251 163.84649658]
[6.04162550 159.50093079]
[11.24060345 156.42582703]
[17.13700676 154.88356018]
[23.28465652 155.02169800]
[29.20981789 156.85951233]
[40.08864212 146.53230286]
[50.96746826 136.20510864]
[61.84629440 125.87789917]
[72.72512054 115.55069733]
[65.85111237 82.20558167]
[95.81486511 54.57496643]
[95.81486511 39.57496643]
[95.81486511 24.57496643]
[82.47373962 16.96511269]
[74.73876953 3.69613242]
[74.69062805 -11.66268444]
[82.34226227 -24.97989464]
[95.63542175 -32.67323303]
[110.99430847 -32.67323303]
[124.28746796 -24.97989464]
[131.93910217 -11.66268444]
[131.89096069 3.69613242]
[124.15599060 16.96511269]
[110.81486511 24.57496643]
[110.81486511 39.57496643]
[110.81486511 54.57496643]
[124.77525330 60.06199646]
[134.98873901 49.07633209]
[145.20220947 38.09066772]
[155.41569519 27.10500336]
[149.80558777 12.91030598]
[150.91845703 -2.31218600]
[158.53337097 -15.54003525]
[171.13835144 -24.14684296]
[186.23068237 -26.42372131]
[200.81378174 -21.91859436]
[211.99214172 -11.52595806]
[217.54631042 2.69072175]
[216.37348938 17.90871239]
[208.70655823 31.10647202]
[196.06777954 39.66357422]
[180.96659851 41.88100433]
[166.40135193 37.31848145]
[156.18788147 48.30414581]
[145.97439575 59.28981400]
[135.76092529 70.27547455]
[142.94343567 83.44406128]
[157.70948792 80.80519867]
[172.47554016 78.16632843]
[187.24159241 75.52746582]
[201.77000427 66.78894043]
[214.18888855 78.33050537]
[206.53625488 93.45907593]
[189.88046265 90.29352570]
[175.11441040 92.93238831]
[160.34834290 95.57125092]
[145.58229065 98.21011353]
[143.49095154 107.85906982]
[139.44985962 116.53054047]
[133.77873230 123.85195160]
[126.86315155 129.54151917]
[119.13085938 133.41853333]
[111.02668762 135.40765381]
[102.98782349 135.53742981]
[95.42052460 133.93310547]
[88.67971802 130.80444336]
[83.05232239 126.42951965]
[72.17350006 136.75672913]
[61.29467392 147.08392334]
[50.41584778 157.41113281]
[39.53702164 167.73834229]
[51.73922348 159.01445007]
[66.47544098 156.21377563]
[81.02729797 159.85295105]
[92.71039581 169.26066589]
[99.36957550 182.70147705]
[99.77639771 197.69595337]
[93.85583496 211.47807312]
[82.70004272 221.50544739]
[68.36692810 225.92832947]
[53.50052261 223.93083191]
[40.84323120 215.88142395]
[32.72994232 203.26498413]
[30.65707779 188.41191101]
[30.65707779 203.41191101]
[30.65707779 218.41191101]
[30.65707779 233.41191101]
[30.65707779 248.41191101]
[30.65707779 263.41192627]
[30.65707779 278.41192627]
[30.65707779 293.41192627]
[30.65707779 308.41192627]
[30.65707779 323.41192627]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[11 57]
[13 55]
[14 54]
[15 53]
[19 52]
[20 51]
[21 50]
[22 49]
[23 44]
[24 43]
[25 42]
[26 41]
[28 39]
[29 38]
[62 128]
[63 127]
[64 126]
[65 125]
[66 124]
[68 83]
[69 82]
[70 81]
[84 103]
[85 102]
[86 101]
[87 100]
[104 114]
[105 113]
[106 112]
[107 111]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
