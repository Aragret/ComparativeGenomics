%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:35 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGAUCGAACCCAUCCCUGAGAAUCCAAAAUUCUCCGUGCCACCUAUCACACCCCAUCCUAAAGUxxxxxxxxxxACUUCUUACCACAAGGCACACCUACACCCCUUAUCCCCAUACUAGUUAUUAUCGAAACCAUCCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[162.39152527 122.76006317]
[157.20924377 110.04224396]
[152.86650085 97.01365662]
[138.34533691 100.77344513]
[123.82418060 104.53323364]
[109.30302429 108.29302216]
[96.82043457 116.61077118]
[87.75952148 128.56484985]
[78.69860840 140.51892090]
[69.63769531 152.47299194]
[60.57678604 164.42706299]
[51.51587296 176.38113403]
[55.16683197 191.58654785]
[48.14355469 205.55821228]
[33.76221466 211.69915771]
[18.81324196 207.10978699]
[10.35508537 193.95709229]
[12.38142681 178.45135498]
[23.93548965 167.91390991]
[39.56179810 167.32022095]
[48.62271118 155.36614990]
[57.68362427 143.41207886]
[66.74453735 131.45800781]
[75.80545044 119.50392914]
[84.86636353 107.54985809]
[76.93190002 94.82019806]
[62.20910645 97.69062042]
[47.48631287 100.56104279]
[32.76351929 103.43146515]
[18.04072571 106.30189514]
[3.31793189 109.17231750]
[-6.80216742 121.62073517]
[-22.84251022 121.32591248]
[-32.49832153 108.51400757]
[-28.36248589 93.01322174]
[-13.60766411 86.71442413]
[0.44750741 94.44952393]
[15.17030144 91.57910156]
[29.89309502 88.70867157]
[44.61589050 85.83824921]
[59.33868408 82.96782684]
[74.06147766 80.09740448]
[75.12200165 72.67276001]
[78.30356598 50.39883804]
[64.97314453 43.52134705]
[51.64272308 36.64385223]
[37.84243774 43.73834610]
[22.51292038 41.33304214]
[11.54868031 30.35282898]
[9.16569138 15.01982594]
[16.28026199 1.22988367]
[30.15669441 -5.71448374]
[45.45921707 -3.14302492]
[56.30369949 7.95548153]
[58.52021408 23.31343269]
[71.85063171 30.19092560]
[85.18105316 37.06841660]
[108.95862579 64.62138367]
[105.54323578 93.77186584]
[120.06439209 90.01207733]
[134.58555603 86.25228882]
[149.10670471 82.49250031]
[146.16096497 66.12069702]
[144.51611328 49.56781769]
[144.18234253 32.93708038]
[145.16171265 16.33215714]
[147.44802856 -0.14342894]
[151.02702332 -16.38697433]
[155.87632751 -32.29721832]
[161.96565247 -47.77499008]
[169.25700378 -62.72381210]
[177.70486450 -77.05050659]
[187.25654602 -90.66579437]
[197.85243225 -103.48480225]
[209.42645264 -115.42765808]
[221.90641785 -126.41993713]
[235.21446228 -136.39314270]
[249.26762390 -145.28514099]
[263.97824097 -153.04054260]
[279.25457764 -159.61102295]
[295.00140381 -164.95568848]
[311.12051392 -169.04124451]
[327.51141357 -171.84228516]
[344.07189941 -173.34140015]
[360.69873047 -173.52926636]
[377.28823853 -172.40476990]
[393.73699951 -169.97499084]
[409.94250488 -166.25509644]
[425.80371094 -161.26835632]
[441.22174072 -155.04588318]
[456.10049438 -147.62651062]
[470.34725952 -139.05656433]
[483.87322998 -129.38948059]
[496.59411621 -118.68560028]
[508.43060303 -107.01166534]
[519.30895996 -94.44050598]
[531.35424805 -103.37981415]
[543.39953613 -112.31911469]
[549.41748047 -127.57417297]
[565.67535400 -129.72207642]
[575.44848633 -116.55326080]
[568.68310547 -101.61465454]
[552.33886719 -100.27383423]
[540.29357910 -91.33452606]
[528.24829102 -82.39522552]
[535.65930176 -70.84336090]
[542.30206299 -58.83306503]
[548.14831543 -46.41535568]
[553.17315674 -33.64298248]
[557.35522461 -20.57021904]
[560.67675781 -7.25260162]
[563.12359619 6.25328445]
[564.68536377 19.89005280]
[565.35534668 33.59976196]
[565.13067627 47.32416153]
[564.01232910 61.00492477]
[562.00506592 74.58392334]
[559.11724854 88.00346375]
[555.36132812 101.20649719]
[550.75305176 114.13694000]
[545.31213379 126.73982239]
[539.06158447 138.96159363]
[532.02795410 150.75030518]
[524.24114990 162.05586243]
[515.73419189 172.83021545]
[506.54324341 183.02755737]
[496.70733643 192.60453796]
[486.26828003 201.52047729]
[475.27035522 209.73744202]
[463.76031494 217.22052002]
[451.78707886 223.93788147]
[439.40148926 229.86097717]
[426.65612793 234.96459961]
[413.60522461 239.22708130]
[400.30416870 242.63024902]
[386.80947876 245.15963745]
[373.17852783 246.80448914]
[359.46917725 247.55776978]
[345.73974609 247.41629028]
[332.04852295 246.38058472]
[318.45370483 244.45507812]
[305.01303101 241.64790344]
[291.78369141 237.97097778]
[278.82183838 233.43989563]
[266.18255615 228.07391357]
[253.91960144 221.89578247]
[242.08508301 214.93174744]
[230.72926331 207.21139526]
[219.90045166 198.76748657]
[209.64463806 189.63591003]
[200.00543213 179.85543823]
[191.02381897 169.46762085]
[182.73794556 158.51657104]
[175.18307495 147.04881287]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 62]
[4 61]
[5 60]
[6 59]
[7 25]
[8 24]
[9 23]
[10 22]
[11 21]
[12 20]
[26 42]
[27 41]
[28 40]
[29 39]
[30 38]
[31 37]
[44 57]
[45 56]
[46 55]
[96 105]
[97 104]
[98 103]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
