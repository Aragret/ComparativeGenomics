%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:58 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGUAAGCCUUCUCCUCACUCUCUCAAUCUUAUCCAUCAUAGCAGGCAGUUGAGGUGGAUUAAxxxxxxxxxxCAACAUACUCGGAUUCUACCCUAGCAUCACACACCGCACAAUCCCCUAUCUAGGCCUUCUCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[92.50000000 290.58740234]
[92.50000000 275.58740234]
[92.50000000 260.58740234]
[92.50000000 245.58738708]
[92.50000000 230.58738708]
[92.50000000 215.58738708]
[92.50000000 200.58738708]
[92.50000000 185.58738708]
[92.50000000 170.58738708]
[92.50000000 155.58738708]
[77.09009552 151.19906616]
[63.54958344 142.63302612]
[52.98332977 130.58824158]
[46.25351715 116.04754639]
[31.43575859 118.37864685]
[16.61800003 120.70975494]
[1.80024278 123.04085541]
[-10.62983513 132.82879639]
[-24.40490723 127.16340637]
[-39.22266388 129.49450684]
[-40.12899780 144.52755737]
[-44.24623871 159.01419067]
[-51.38181305 172.27682495]
[-61.20198441 183.69515991]
[-73.24743652 192.73513794]
[-86.95478821 198.97392273]
[-101.68292236 202.11973572]
[-116.74298096 202.02543640]
[-131.43055725 198.69543457]
[-145.05871582 192.28549194]
[-156.99002075 183.09538269]
[-166.66644287 171.55497742]
[-173.63537598 158.20402527]
[-177.57087708 143.66696167]
[-178.28889465 128.62374878]
[-175.75581360 113.77794647]
[-170.09013367 99.82394409]
[-161.55685425 87.41439056]
[-150.55506897 77.12969971]
[-137.59936523 69.45090485]
[-123.29571533 64.73715973]
[-108.31310272 63.20893097]
[-93.35231018 64.93769836]
[-79.11306763 69.84260559]
[-66.26138306 77.69424438]
[-55.39834213 88.12537384]
[-47.03203583 100.64810944]
[-41.55376816 114.67675018]
[-26.73601151 112.34564972]
[-15.36579895 102.72444153]
[-0.53086108 108.22309875]
[14.28689671 105.89199066]
[29.10465431 103.56089020]
[43.92241287 101.22978973]
[47.23319244 80.97705841]
[57.60704803 63.27064133]
[73.65538788 50.48061371]
[93.23007965 44.31897736]
[113.71094513 45.61049652]
[132.35655212 54.18229675]
[142.57002258 43.19663239]
[152.78350830 32.21096802]
[156.36686707 23.73680878]
[163.32556152 21.10581017]
[173.76538086 10.33500099]
[184.20520020 -0.43580735]
[194.64500427 -11.20661545]
[205.08482361 -21.97742462]
[195.61230469 -33.63108063]
[187.58460999 -46.32330704]
[181.11445618 -59.87592697]
[176.29266357 -74.09867859]
[173.18693542 -88.79190063]
[171.84085083 -103.74932098]
[172.27331543 -118.76096344]
[174.47825623 -133.61607361]
[178.42471313 -148.10614014]
[184.05731201 -162.02770996]
[191.29695129 -175.18537903]
[200.04199219 -187.39440918]
[210.16970825 -198.48339844]
[221.53788757 -208.29670715]
[233.98693848 -216.69654846]
[247.34211731 -223.56500244]
[261.41592407 -228.80566406]
[276.01077271 -232.34494019]
[290.92178345 -234.13314819]
[305.93966675 -234.14520264]
[320.85354614 -232.38092041]
[335.45404053 -228.86506653]
[349.53625488 -223.64700317]
[362.90243530 -216.79998779]
[375.36495972 -208.42013550]
[386.74884033 -198.62509155]
[396.89434814 -187.55236816]
[405.65896606 -175.35737610]
[412.91973877 -162.21136475]
[418.57464600 -148.29884338]
[422.54437256 -133.81513977]
[424.77313232 -118.96356964]
[425.22970581 -103.95264435]
[423.90762329 -88.99308777]
[420.82546997 -74.29489899]
[416.02651978 -60.06442642]
[409.57812500 -46.50144196]
[401.57080078 -33.79634857]
[392.11700439 -22.12750244]
[381.34939575 -11.65872288]
[369.41918945 -2.53697014]
[356.49383545 5.10969925]
[342.75479126 11.17393780]
[328.39492798 15.57061386]
[313.61584473 18.23800278]
[298.62500000 19.13866234]
[283.63287354 18.25994492]
[268.84988403 15.61418915]
[254.48361206 11.23853588]
[240.73571777 5.19441271]
[227.79917908 -2.43333054]
[215.85562134 -11.53761196]
[205.41581726 -0.76680338]
[194.97599792 10.00400543]
[184.53619385 20.77481270]
[174.09637451 31.54562187]
[163.76916504 42.42444611]
[153.55569458 53.41011047]
[143.34220886 64.39577484]
[148.22610474 71.35648346]
[152.00169373 78.97545624]
[154.58222961 87.07759857]
[155.90838623 95.47672272]
[155.94970703 103.97978973]
[154.70523071 112.39139557]
[152.20355225 120.51823425]
[148.50216675 128.17353821]
[143.68614197 135.18136597]
[137.86616516 141.38069153]
[131.17596436 146.62904358]
[123.76930237 150.80578613]
[115.81639099 153.81495667]
[107.50000000 155.58738708]
[107.50000000 170.58738708]
[107.50000000 185.58738708]
[107.50000000 200.58738708]
[107.50000000 215.58738708]
[107.50000000 230.58738708]
[107.50000000 245.58738708]
[107.50000000 260.58740234]
[107.50000000 275.58740234]
[107.50000000 290.58740234]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[14 54]
[15 53]
[16 52]
[17 51]
[19 49]
[20 48]
[60 127]
[61 126]
[62 125]
[64 124]
[65 123]
[66 122]
[67 121]
[68 120]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
