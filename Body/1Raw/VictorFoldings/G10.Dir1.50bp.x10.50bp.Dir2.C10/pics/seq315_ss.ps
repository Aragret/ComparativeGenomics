%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:30 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCCCCCCCUCCCCCGCUUCUGGCCACAGCACUUAAACACAUCUCUGCCAAACCCCAAAAACAAxxxxxxxxxxCACACGAUUAACCCAAGUCAAUAGAAGCCGGCGUAAAGAGUGUUUUAGAUCACCCCCUCCCCCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[100.20574951 115.65433502]
[93.19351959 128.91436768]
[86.18128967 142.17440796]
[79.16905975 155.43444824]
[72.15682983 168.69448853]
[65.14459991 181.95452881]
[58.13237381 195.21456909]
[51.12014389 208.47460938]
[44.10791397 221.73464966]
[37.09568405 234.99468994]
[35.03615570 251.82307434]
[18.29529381 254.50259399]
[11.08615780 239.15774536]
[23.83564568 227.98245239]
[30.84787560 214.72241211]
[37.86010361 201.46238708]
[44.87233353 188.20234680]
[51.88456345 174.94230652]
[58.89679337 161.68226624]
[65.90901947 148.42222595]
[72.92124939 135.16218567]
[79.93347931 121.90214539]
[86.94570923 108.64210510]
[82.29504395 102.75811768]
[70.52690887 112.05924225]
[61.22597885 100.29095459]
[72.99372101 90.99013519]
[68.34306335 85.10614014]
[53.82190323 88.86592865]
[39.30074692 92.62571716]
[27.99301147 104.50289154]
[12.11897564 100.38620758]
[8.00848770 84.51057434]
[19.89006424 73.20746613]
[35.54095840 78.10456085]
[50.06211472 74.34477234]
[64.58327484 70.58498383]
[76.39410400 75.01648712]
[86.50669098 81.74015045]
[94.55667114 90.39847565]
[99.04711914 76.08638763]
[95.79592133 60.60284042]
[106.98845673 50.77551270]
[111.47890472 36.46342468]
[115.96935272 22.15133667]
[120.45980072 7.83924770]
[124.95024872 -6.47284126]
[129.44068909 -20.78492928]
[129.02728271 -29.97026062]
[134.16989136 -35.33991623]
[138.94947815 -49.55805969]
[143.72906494 -63.77619934]
[148.07424927 -78.13306427]
[147.28894043 -87.29409027]
[152.20971680 -92.86774445]
[156.40917969 -107.26790619]
[160.60864258 -121.66806030]
[146.75413513 -127.45879364]
[133.63510132 -134.76435852]
[121.41655731 -143.49287415]
[110.25213623 -153.53457642]
[100.28225708 -164.76316833]
[91.63229370 -177.03746033]
[84.41103363 -190.20307922]
[78.70928955 -204.09443665]
[74.59876251 -218.53686523]
[72.13115692 -233.34872437]
[71.33750153 -248.34371948]
[72.22777557 -263.33331299]
[74.79077911 -278.12893677]
[78.99428558 -292.54458618]
[84.78543091 -306.39892578]
[92.09138489 -319.51773071]
[100.82026672 -331.73599243]
[110.86230469 -342.90011597]
[122.09120178 -352.86965942]
[134.36575317 -361.51925659]
[147.53158569 -368.74014282]
[161.42312622 -374.44146729]
[175.86566162 -378.55154419]
[190.67759705 -381.01870728]
[205.67262268 -381.81192017]
[220.66217041 -380.92120361]
[235.45773315 -378.35775757]
[249.87324524 -374.15380859]
[263.72741699 -368.36224365]
[276.84600830 -361.05590820]
[289.06402588 -352.32666016]
[300.22784424 -342.28430176]
[310.19705200 -331.05508423]
[318.84628296 -318.78030396]
[326.06674194 -305.61425781]
[331.76766968 -291.72253418]
[335.87731934 -277.27987671]
[338.34405518 -262.46786499]
[339.13681030 -247.47280884]
[338.24563599 -232.48329163]
[335.68173218 -217.68780518]
[331.47738647 -203.27241516]
[325.68539429 -189.41842651]
[318.37866211 -176.30006409]
[309.64904785 -164.08229065]
[299.60635376 -152.91877747]
[288.37686157 -142.94990540]
[276.10177612 -134.30104065]
[262.93551636 -127.08096313]
[249.04364014 -121.38046265]
[234.60084534 -117.27123260]
[219.78877258 -114.80495453]
[204.79370117 -114.01264191]
[189.80421448 -114.90426636]
[175.00878906 -117.46859741]
[170.80934143 -103.06844330]
[166.60987854 -88.66828156]
[162.55656433 -74.22631073]
[164.03393555 -70.96366119]
[163.96853638 -66.81226349]
[161.95532227 -62.52191162]
[157.94720459 -58.99661255]
[153.16761780 -44.77847290]
[148.38803101 -30.56033134]
[143.75277710 -16.29448318]
[139.26232910 -1.98239434]
[134.77189636 12.32969475]
[130.28144836 26.64178276]
[125.79099274 40.95387268]
[121.30054474 55.26596069]
[124.87293243 69.72581482]
[113.35920715 80.57683563]
[108.86875916 94.88892365]
[118.31536102 83.23724365]
[130.15522766 74.02758789]
[143.77313232 67.73851013]
[158.46150208 64.69679260]
[173.45709229 65.06047821]
[187.98072815 68.81067657]
[201.27774048 75.75252533]
[212.65722656 85.52532196]
[221.52786255 97.62125397]
[227.42875671 111.41181183]
[230.05328369 126.18041992]
[229.26506042 141.15969849]
[225.10505676 155.57130432]
[217.78941345 168.66639709]
[207.69827271 179.76454163]
[195.35597229 188.28906250]
[181.40382385 193.79704285]
[166.56680298 196.00225830]
[151.61585999 194.79013062]
[137.32785034 190.22364807]
[124.44519806 182.54008484]
[113.63729095 172.13868713]
[105.46571350 159.55992126]
[100.35507965 145.45738220]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 23]
[2 22]
[3 21]
[4 20]
[5 19]
[6 18]
[7 17]
[8 16]
[9 15]
[10 14]
[28 37]
[29 36]
[30 35]
[40 130]
[41 129]
[43 127]
[44 126]
[45 125]
[46 124]
[47 123]
[48 122]
[50 121]
[51 120]
[52 119]
[53 115]
[55 114]
[56 113]
[57 112]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
