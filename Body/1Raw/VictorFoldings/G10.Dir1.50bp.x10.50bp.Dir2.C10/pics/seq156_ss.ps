%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:18 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGUAAAGUGUGUUAAUUAAUUAAUGCUUGUAGGACAUAAUAAUAACAAUUGAAUGUCUGCACAxxxxxxxxxxGUGCCAGCCACCGCGGUCACACGAUUAACCCAAGUCAAUAGAAGCCGGCGUAAAGAGUGUUCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[86.91804504 257.41326904]
[86.91804504 242.41326904]
[86.91804504 227.41326904]
[86.91804504 212.41326904]
[86.91804504 197.41326904]
[86.91804504 182.41326904]
[86.91804504 167.41326904]
[86.91804504 152.41326904]
[86.91804504 137.41326904]
[86.91804504 122.41326904]
[84.58083344 116.23352051]
[84.24975586 110.31388092]
[85.65292358 105.21140289]
[88.37833405 101.36678314]
[91.91382599 99.07185364]
[79.76049042 90.28001404]
[67.60716248 81.48816681]
[64.63299561 88.92010498]
[58.11726761 95.37425232]
[45.12688446 102.87425232]
[32.13650513 110.37425232]
[19.14612389 117.87425232]
[6.15574217 125.37425232]
[-1.57077372 139.83914185]
[-17.96768951 140.10971069]
[-26.16726303 125.90763855]
[-17.73447609 111.84278107]
[-1.34425783 112.38386536]
[11.64612293 104.88386536]
[24.63650513 97.38386536]
[37.62688446 89.88386536]
[50.61726761 82.38386536]
[53.67566299 67.69896698]
[44.75951004 55.63653946]
[35.84336090 43.57410812]
[24.46008301 46.09862900]
[12.55790329 43.18064499]
[2.71812916 34.91652298]
[-2.69654751 22.60984039]
[-2.09501982 8.58187962]
[-14.42630386 0.04142114]
[-26.75758743 -8.49903774]
[-39.08887100 -17.03949738]
[-51.42015457 -25.57995605]
[-63.75143814 -34.12041473]
[-76.59918976 -32.59106445]
[-86.70602417 -40.00883102]
[-88.94961548 -51.93479156]
[-101.10294342 -60.72663116]
[-113.25627899 -69.51847839]
[-125.40961456 -78.31031799]
[-141.76898193 -79.45185089]
[-148.71591187 -94.30689240]
[-139.10398865 -107.59384918]
[-122.82115173 -105.64423370]
[-116.61776733 -90.46365356]
[-104.46443939 -81.67180634]
[-92.31110382 -72.87996674]
[-80.15776825 -64.08812714]
[-62.65451431 -63.26313782]
[-55.21097946 -46.45169830]
[-42.87969589 -37.91123962]
[-30.54841232 -29.37078094]
[-18.21712875 -20.83032227]
[-5.88584471 -12.28986263]
[6.44543934 -3.74940372]
[19.66062164 -10.84580708]
[19.35264397 -25.84264565]
[19.04466629 -40.83948135]
[18.73668861 -55.83632278]
[5.01279593 -62.61225891]
[-3.98079133 -74.99668121]
[-6.17741251 -90.14374542]
[-1.07229984 -104.57275391]
[10.16142941 -114.96804047]
[24.94234467 -118.94083405]
[39.87390137 -115.57822418]
[51.52494049 -105.65290070]
[57.21813202 -91.44564819]
[55.64522552 -76.22117615]
[47.16766357 -63.47795868]
[33.73352814 -56.14429855]
[34.04150391 -41.14746094]
[34.34948349 -26.15062332]
[34.65745926 -11.15378475]
[54.26677322 9.86054420]
[47.90579224 34.65795517]
[56.82194138 46.72038651]
[65.73809052 58.78281784]
[76.39900208 69.33483124]
[88.55233765 78.12667847]
[100.70566559 86.91851807]
[115.21429443 90.72637939]
[130.11874390 89.03598022]
[145.02319336 87.34558105]
[159.90950012 85.50225830]
[174.77609253 83.50620270]
[182.92395020 79.23908997]
[189.96806335 81.62503052]
[197.11502075 70.16506958]
[209.38612366 65.00746155]
[222.19334412 67.83655548]
[230.88752747 77.39498901]
[243.91491699 68.41737366]
[257.30181885 74.94734192]
[272.23782349 73.56331635]
[287.17382812 72.17929077]
[300.20123291 63.20167923]
[313.58813477 69.73165131]
[328.52413940 68.34762573]
[341.58914185 58.43614960]
[356.59826660 65.04360199]
[358.11138916 81.37278748]
[344.57196045 90.62565613]
[329.90817261 83.28363800]
[314.97213745 84.66766357]
[303.01306152 93.54627991]
[288.55786133 87.11530304]
[273.62185669 88.49932861]
[258.68585205 89.88335419]
[246.72676086 98.76197052]
[232.27156067 92.33100128]
[222.12168884 105.70571899]
[205.10774231 107.66968536]
[191.65846252 96.52947998]
[176.77215576 98.37280273]
[161.90554810 100.36885834]
[155.65615845 104.40088654]
[146.71359253 102.25003052]
[131.80914307 103.94042969]
[116.90469360 105.63082886]
[130.79499817 111.29293823]
[145.79487610 111.23194885]
[158.90147400 118.52693176]
[166.75399780 131.30731201]
[167.33888245 146.29589844]
[160.50613403 159.64930725]
[148.00784302 167.94345093]
[133.04882812 169.05149841]
[119.46489716 162.68934631]
[110.73928070 150.48837280]
[109.10942841 135.57701111]
[101.91804504 122.41326904]
[101.91804504 137.41326904]
[101.91804504 152.41326904]
[101.91804504 167.41326904]
[101.91804504 182.41326904]
[101.91804504 197.41326904]
[101.91804504 212.41326904]
[101.91804504 227.41326904]
[101.91804504 242.41326904]
[101.91804504 257.41326904]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 152]
[2 151]
[3 150]
[4 149]
[5 148]
[6 147]
[7 146]
[8 145]
[9 144]
[10 143]
[15 92]
[16 91]
[17 90]
[19 32]
[20 31]
[21 30]
[22 29]
[23 28]
[33 89]
[34 88]
[35 87]
[40 66]
[41 65]
[42 64]
[43 63]
[44 62]
[45 61]
[48 59]
[49 58]
[50 57]
[51 56]
[67 85]
[68 84]
[69 83]
[70 82]
[93 131]
[94 130]
[95 129]
[96 127]
[97 126]
[99 125]
[103 122]
[105 120]
[106 119]
[107 118]
[109 116]
[110 115]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
