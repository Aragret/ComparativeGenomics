%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:41 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGACUAACCCCAGGGUUGGUCAAUUUCGUGCCAGCCACCGCGGUCACACGAUUAACCCAAGUxxxxxxxxxxAAAUAUCUCAUCAACAACCGACUAAUCACCACCCAACAAUGACUAAUCAAACUAACCUCACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[73.11022186 274.03408813]
[72.79816437 259.03732300]
[72.48611450 244.04057312]
[72.17405701 229.04382324]
[71.86199951 214.04707336]
[71.54994202 199.05030823]
[71.23788452 184.05355835]
[70.92582703 169.05680847]
[70.61377716 154.06005859]
[56.77055740 148.28378296]
[45.89173126 158.61097717]
[35.01290512 168.93818665]
[24.13408089 179.26539612]
[13.25525475 189.59260559]
[2.37643003 199.91979980]
[-8.50239563 210.24700928]
[-19.38121986 220.57421875]
[-23.51473999 236.44387817]
[-39.39473343 240.53750610]
[-50.68522263 228.64395142]
[-45.77152252 212.99826050]
[-29.70842552 209.69538879]
[-18.82959938 199.36817932]
[-7.95077515 189.04098511]
[2.92805028 178.71377563]
[13.80687523 168.38656616]
[24.68570137 158.05935669]
[35.56452560 147.73216248]
[46.44335175 137.40495300]
[44.81793976 130.08320618]
[33.76176834 140.22032166]
[19.45465660 135.71403503]
[16.20355988 121.07060242]
[27.25954247 110.93328094]
[41.56711197 115.43970490]
[39.94169998 108.11795044]
[25.71492004 103.36413574]
[11.48814106 98.61032104]
[-2.78731918 94.00475311]
[-17.10991669 89.54794312]
[-26.30028915 89.98258972]
[-31.68237686 84.84655762]
[-45.90915680 80.09274292]
[-61.86092377 83.89710236]
[-72.93339539 71.80030823]
[-67.73616028 56.24650574]
[-51.61568832 53.23611450]
[-41.15534210 65.86596680]
[-26.92856216 70.61978149]
[-12.65310097 75.22534180]
[1.66949642 79.68215942]
[9.03838825 78.65986633]
[16.24195671 84.38354492]
[30.46873474 89.13735962]
[44.69551468 93.89117432]
[63.63136292 64.01296234]
[94.38504791 53.65192795]
[122.04651642 64.00505829]
[132.02923584 52.80929565]
[142.01196289 41.61352921]
[151.99468994 30.41776276]
[161.97741699 19.22199821]
[151.82226562 8.16526031]
[142.81848145 -3.84767246]
[135.05557251 -16.69740677]
[128.61065674 -30.25623512]
[123.54782867 -44.38939667]
[119.91737366 -58.95643234]
[117.75539398 -73.81255341]
[117.08336639 -88.81011963]
[117.90797424 -103.80007172]
[120.22102356 -118.63343048]
[123.99951935 -133.16276550]
[129.20591736 -147.24366760]
[135.78846741 -160.73622131]
[143.68173218 -173.50628662]
[152.80729675 -185.42697144]
[163.07444763 -196.37980652]
[174.38113403 -206.25590515]
[186.61497498 -214.95713806]
[199.65441895 -222.39701843]
[213.36984253 -228.50158691]
[227.62492371 -233.21020508]
[242.27801514 -236.47604370]
[257.18344116 -238.26666260]
[272.19311523 -238.56427002]
[287.15783691 -237.36589050]
[301.92886353 -234.68344116]
[316.35937500 -230.54357910]
[330.30599976 -224.98745728]
[343.63009644 -218.07029724]
[356.19924927 -209.86083984]
[367.88851929 -200.44067383]
[378.58172607 -189.90342712]
[388.17263794 -178.35383606]
[396.56591797 -165.90667725]
[403.67810059 -152.68566895]
[409.43856812 -138.82218933]
[413.79000854 -124.45404816]
[416.68920898 -109.72403717]
[418.10736084 -94.77855682]
[418.03033447 -79.76613617]
[416.45892334 -64.83599091]
[413.40875244 -50.13650131]
[408.91012573 -35.81376266]
[403.00772095 -22.01012421]
[395.76025391 -8.86277580]
[387.23971558 3.49761343]
[377.53082275 14.94819736]
[366.73004150 25.37517166]
[354.94473267 34.67490768]
[342.29202271 42.75497437]
[328.89767456 49.53506851]
[314.89477539 54.94780731]
[300.42254639 58.93938828]
[285.62475586 61.47014618]
[270.64855957 62.51492691]
[255.64273071 62.06334686]
[240.75643921 60.11989212]
[226.13763428 56.70388031]
[211.93161011 51.84926224]
[198.27954102 45.60428238]
[185.31712341 38.03101349]
[173.17318726 29.20472336]
[163.19046021 40.40048981]
[153.20773315 51.59625626]
[143.22500610 62.79202271]
[133.24227905 73.98778534]
[138.51589966 80.34050751]
[142.55288696 87.76718140]
[145.13452148 96.02256012]
[146.09155273 104.81697845]
[145.31318665 113.82653046]
[142.75396729 122.70497894]
[138.43806458 131.09704590]
[132.46110535 138.65251160]
[124.98882294 145.04066467]
[116.25308990 149.96437073]
[106.54486084 153.17329407]
[96.20462799 154.47564697]
[85.61052704 153.74800110]
[85.92258453 168.74475098]
[86.23464203 183.74150085]
[86.54669952 198.73825073]
[86.85874939 213.73501587]
[87.17080688 228.73176575]
[87.48286438 243.72851562]
[87.79492188 258.72528076]
[88.10697937 273.72201538]
[90.69797516 292.92974854]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 149]
[2 148]
[3 147]
[4 146]
[5 145]
[6 144]
[7 143]
[8 142]
[9 141]
[10 29]
[11 28]
[12 27]
[13 26]
[14 25]
[15 24]
[16 23]
[17 22]
[36 55]
[37 54]
[38 53]
[39 51]
[40 50]
[42 49]
[43 48]
[58 128]
[59 127]
[60 126]
[61 125]
[62 124]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
