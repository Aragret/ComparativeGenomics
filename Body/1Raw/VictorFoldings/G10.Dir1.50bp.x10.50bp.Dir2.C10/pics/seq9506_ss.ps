%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:14 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGUCCUAGCCCUAAGUCUGGCCUAUGAGUGACUACAAAAAGGAUUAGACUGAACCGAAUUGGxxxxxxxxxxCGGCUCACUCCUUGGCGCCUGCCUGAUCCUCCAAAUCACCACAGGACUAUUCCUAGCCAUCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[120.94242859 314.66055298]
[120.63037109 299.66381836]
[120.31831360 284.66705322]
[120.00626373 269.67028809]
[119.69420624 254.67355347]
[119.38214874 239.67678833]
[119.07009125 224.68003845]
[118.75803375 209.68328857]
[118.44597626 194.68653870]
[116.11487579 179.86877441]
[111.80728912 165.50059509]
[107.49971008 151.13240051]
[103.19212341 136.76422119]
[98.88453674 122.39603424]
[92.89342499 121.26789856]
[87.42759705 118.56774902]
[75.34760284 127.46009827]
[63.26761627 136.35244751]
[63.49912643 151.86779785]
[54.53922272 164.53665161]
[39.83316803 169.48756409]
[25.03574181 164.81681824]
[15.83685780 152.32041931]
[15.77367401 136.80346680]
[24.87048531 124.23256683]
[39.62938309 119.44147491]
[54.37526703 124.27246094]
[66.45525360 115.38011169]
[78.53524780 106.48776245]
[77.69481659 97.69660950]
[80.31402588 89.26272583]
[85.98661041 82.49423981]
[93.83274078 78.44097137]
[94.76837158 63.47018051]
[92.16813660 54.64461517]
[95.88238525 48.19868469]
[97.12925720 33.25059891]
[98.37612915 18.30251122]
[99.62300873 3.35442495]
[88.25285339 -1.91943240]
[79.08439636 -10.42933369]
[73.00312042 -21.33270645]
[70.58996582 -33.55685043]
[72.06583405 -45.90446854]
[77.27147675 -57.17092896]
[85.68450928 -66.26179504]
[96.47180939 -72.29914093]
[108.57199097 -74.70631409]
[110.74883270 -89.54752350]
[112.92566681 -104.38872528]
[115.10250092 -119.22993469]
[117.27934265 -134.07113647]
[119.45617676 -148.91233826]
[119.30014038 -163.91152954]
[116.81502533 -178.70423889]
[112.84567261 -184.12196350]
[112.33528137 -189.86398315]
[114.54761505 -194.16294861]
[112.68000031 -209.04623413]
[110.81238556 -223.92950439]
[101.41706848 -236.65895081]
[107.50952148 -250.25053406]
[105.64190674 -265.13381958]
[103.77429199 -280.01708984]
[88.98992920 -283.36349487]
[76.24338531 -291.56723022]
[67.07387543 -303.63769531]
[62.58864975 -318.11727905]
[63.32933044 -333.25753784]
[69.20647430 -347.23019409]
[79.51039124 -358.34796143]
[92.99682617 -365.26837158]
[108.03723145 -367.15570068]
[122.81540680 -363.78204346]
[135.54681396 -355.55484009]
[144.69406128 -343.46749878]
[149.15258789 -328.97967529]
[148.38401794 -313.84082031]
[142.48112488 -299.87902832]
[132.15673828 -288.78024292]
[118.65756989 -281.88470459]
[120.52518463 -267.00143433]
[122.39279938 -252.11814880]
[131.65454102 -240.45326233]
[125.69566345 -225.79711914]
[127.56327820 -210.91384888]
[129.43089294 -196.03056335]
[131.60772705 -181.18936157]
[134.09284973 -166.39665222]
[141.01445007 -163.50851440]
[146.79095459 -177.35163879]
[160.63398743 -171.57490540]
[154.85768127 -157.73223877]
[161.77928162 -154.84410095]
[174.04165649 -163.48321533]
[186.30401611 -172.12234497]
[192.69682312 -187.22413635]
[209.00279236 -188.96989441]
[218.44772339 -175.56373596]
[211.31550598 -160.79675293]
[194.94313049 -159.85997009]
[182.68077087 -151.22085571]
[170.41839600 -142.58174133]
[149.72288513 -139.01307678]
[134.29737854 -146.73550415]
[132.12054443 -131.89430237]
[129.94371033 -117.05309296]
[127.76687622 -102.21189117]
[125.59003448 -87.37068939]
[123.41320038 -72.52947998]
[138.38421631 -63.23746109]
[147.85137939 -48.31428146]
[149.89115906 -30.70664787]
[144.05201721 -13.91498184]
[131.45330811 -1.29751730]
[114.57109070 4.60129929]
[113.32421875 19.54938698]
[112.07734680 34.49747467]
[110.83046722 49.44556046]
[109.73915863 64.40580750]
[108.80353546 79.37660217]
[122.27715302 97.43966675]
[113.25272369 118.08845520]
[117.56030273 132.45663452]
[121.86788940 146.82482910]
[126.17547607 161.19300842]
[130.48306274 175.56118774]
[135.08621216 161.28495789]
[145.01350403 150.03999329]
[158.60882568 143.70223999]
[173.60418701 143.32894897]
[187.49800110 148.98242188]
[197.97250366 159.71949768]
[203.28027344 173.74902344]
[202.53588867 188.73054504]
[195.86351013 202.16481018]
[184.37625122 211.81066895]
[169.99043274 216.05900574]
[155.10594177 214.20108032]
[142.20584106 206.54682922]
[133.44273376 194.37448120]
[133.75479126 209.37123108]
[134.06684875 224.36798096]
[134.37890625 239.36473083]
[134.69096375 254.36149597]
[135.00302124 269.35824585]
[135.31506348 284.35501099]
[135.62712097 299.35174561]
[135.93917847 314.34851074]
[138.53018188 333.55624390]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 149]
[2 148]
[3 147]
[4 146]
[5 145]
[6 144]
[7 143]
[8 142]
[9 141]
[10 127]
[11 126]
[12 125]
[13 124]
[14 123]
[16 29]
[17 28]
[18 27]
[33 121]
[34 120]
[36 119]
[37 118]
[38 117]
[39 116]
[48 110]
[49 109]
[50 108]
[51 107]
[52 106]
[53 105]
[54 89]
[55 88]
[58 87]
[59 86]
[60 85]
[62 83]
[63 82]
[64 81]
[94 103]
[95 102]
[96 101]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
