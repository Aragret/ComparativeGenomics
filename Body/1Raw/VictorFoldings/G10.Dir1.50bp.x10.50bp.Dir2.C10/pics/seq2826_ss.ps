%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:10 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGAAACAGUACCUAACAAACCCACAGGUCCUAAACUACCAAACCUGCAUUAAAAAUUUCGGUxxxxxxxxxxCUAUUUCUGUAUGUCUCCAUCUAUUGAUGAGGGUCUUACUCUUUUAGUAUAAAUAGUACCCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[147.09927368 396.96713257]
[147.09927368 381.96713257]
[147.09927368 366.96713257]
[147.09927368 351.96713257]
[147.09927368 336.96713257]
[147.09927368 321.96713257]
[147.09927368 306.96713257]
[147.09927368 291.96713257]
[147.09927368 276.96713257]
[147.09927368 261.96713257]
[144.76817322 247.14936829]
[140.16261292 232.87390137]
[135.55703735 218.59844971]
[121.92704773 207.58830261]
[125.85694885 189.62902832]
[120.95539856 175.45246887]
[116.05384827 161.27590942]
[110.71234131 147.25920105]
[104.93606567 133.41598511]
[99.15979004 119.57276154]
[88.02767944 113.78246307]
[83.36145782 103.08338928]
[86.24011230 92.67668915]
[76.49246216 81.27566528]
[66.74481201 69.87464142]
[51.89598083 64.41360474]
[49.50612259 49.71198273]
[39.75846863 38.31095886]
[24.70652771 43.54687119]
[7.84252882 40.08775330]
[-5.84292269 27.64621735]
[-11.66342068 8.74468327]
[-26.30692101 5.49385738]
[-40.95042419 2.24303150]
[-55.59392548 -1.00779414]
[-70.23742676 -4.25861979]
[-79.26551819 8.00569534]
[-92.50464630 15.53200436]
[-107.66105652 17.01633072]
[-122.10880280 12.20150280]
[-133.34472656 1.92172158]
[-139.42213440 -12.04197979]
[-139.28808594 -27.27030563]
[-132.96580505 -41.12485886]
[-121.55065155 -51.20524979]
[-107.02038574 -55.76499176]
[-91.89245605 -54.01408386]
[-78.78787231 -46.25587845]
[-69.97708130 -33.83453369]
[-66.98660278 -18.90212059]
[-52.34309769 -15.65129566]
[-37.69959641 -12.40046978]
[-23.05609512 -9.14964390]
[-8.41259480 -5.89881849]
[-2.76309204 -10.83167934]
[-16.95659065 -15.68395615]
[-19.85123634 -30.40200806]
[-8.55241394 -40.26794052]
[5.64117432 -35.41592407]
[8.53591251 -20.69740295]
[14.18541527 -25.63026428]
[12.93854046 -40.57835007]
[11.69166565 -55.52643967]
[10.44479179 -70.47452545]
[-4.28571844 -73.91941833]
[-17.22968674 -81.74941254]
[-27.11899757 -93.19741058]
[-32.98479462 -107.14186096]
[-34.25240707 -122.21662140]
[-30.79764748 -136.94482422]
[-22.95897865 -149.88352966]
[-11.50435352 -159.76516724]
[2.44402170 -165.62162781]
[17.51962662 -166.87913513]
[32.24550629 -163.41450500]
[45.17897034 -155.56716919]
[55.05292892 -144.10592651]
[60.90003204 -130.15362549]
[62.14744186 -115.07718658]
[58.67294693 -100.35363007]
[50.81694794 -87.42543030]
[39.34909058 -77.55915070]
[25.39287758 -71.72139740]
[26.63975334 -56.77331161]
[27.88662720 -41.82522583]
[29.13350105 -26.87713814]
[51.73310471 -13.85174751]
[59.41242981 8.67995358]
[51.15949249 28.56330872]
[60.90714264 39.96432877]
[75.05875397 44.60988617]
[78.14582825 60.12699127]
[87.89347839 71.52801514]
[97.64113617 82.92903137]
[112.28463745 86.17986298]
[125.94087982 79.97445679]
[139.59712219 73.76904297]
[146.16740417 67.32830048]
[153.60261536 67.57989502]
[167.38499451 61.65993118]
[181.16737366 55.73996735]
[190.54167175 42.28430939]
[206.85658264 43.94427109]
[213.32875061 59.01222610]
[203.30014038 71.98754883]
[187.08734131 69.52234650]
[173.30496216 75.44231415]
[159.52258301 81.36227417]
[145.80252075 87.42528534]
[132.14628601 93.63069153]
[118.49004364 99.83609772]
[113.00301361 113.79649353]
[118.77928162 127.63970947]
[124.55555725 141.48292542]
[128.81350708 144.72166443]
[131.12803650 148.86839294]
[131.48236084 153.01280212]
[130.23040771 156.37435913]
[135.13195801 170.55091858]
[140.03350830 184.72747803]
[151.30351257 191.08679199]
[155.07293701 203.04548645]
[149.83250427 213.99287415]
[154.43806458 228.26834106]
[159.04364014 242.54379272]
[162.96018982 228.06413269]
[171.76119995 215.91744995]
[184.30055237 207.68551636]
[198.94531250 204.44036865]
[213.78836060 206.60459900]
[226.89675903 213.89637756]
[236.56347656 225.36610413]
[241.52963257 239.52015686]
[241.14852905 254.51531982]
[235.46980286 268.39883423]
[225.23295593 279.36273193]
[211.77108765 285.97921753]
[196.83726501 287.38668823]
[182.37625122 283.40182495]
[170.27122498 274.54354858]
[162.09927368 261.96713257]
[162.09927368 276.96713257]
[162.09927368 291.96713257]
[162.09927368 306.96713257]
[162.09927368 321.96713257]
[162.09927368 336.96713257]
[162.09927368 351.96713257]
[162.09927368 366.96713257]
[162.09927368 381.96713257]
[162.09927368 396.96713257]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[11 125]
[12 124]
[13 123]
[15 120]
[16 119]
[17 118]
[18 114]
[19 113]
[20 112]
[23 94]
[24 93]
[25 92]
[27 90]
[28 89]
[32 54]
[33 53]
[34 52]
[35 51]
[36 50]
[61 86]
[62 85]
[63 84]
[64 83]
[95 111]
[96 110]
[97 109]
[99 108]
[100 107]
[101 106]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
