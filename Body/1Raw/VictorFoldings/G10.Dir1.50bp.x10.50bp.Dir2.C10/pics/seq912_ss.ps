%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:48 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGACCCCAUAAACAAAUAGGUUUGGUCCUAGCCUUUCUAUUAGCUCUUAGUAAGAUUACACAUxxxxxxxxxxGCUAACAAUCAAUACUAAACCCCCAUAAAUAGGAGAAGGCUUAGAAGAAAACCCCACAAACCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[121.08562469 261.84548950]
[121.08562469 246.84548950]
[121.08562469 231.84548950]
[121.08562469 216.84548950]
[121.08562469 201.84548950]
[121.08562469 186.84548950]
[121.08562469 171.84548950]
[121.08562469 156.84548950]
[121.08562469 141.84548950]
[121.08562469 126.84548950]
[114.44195557 123.36531067]
[101.77060699 131.39256287]
[101.15460968 116.40495300]
[94.51094055 112.92477417]
[82.17965698 121.46523285]
[69.84837341 130.00569153]
[64.53351593 137.51222229]
[57.17507553 138.59185791]
[44.67103958 146.87733459]
[37.44099808 160.94989014]
[22.55769920 161.53016663]
[17.97098732 176.90356445]
[3.03852534 182.76881409]
[-10.78477859 174.62658691]
[-12.89486980 158.72291565]
[-1.67306614 147.25772095]
[14.27222443 149.02612305]
[20.60789490 135.54618835]
[36.38556671 134.37329102]
[48.88960266 126.08782196]
[61.30791473 117.67440796]
[73.63919830 109.13394928]
[85.97048187 100.59349060]
[93.86696625 87.84023285]
[96.01554108 72.99491119]
[86.82802582 60.41606903]
[89.21846771 45.39140701]
[101.26708984 36.71003342]
[103.41567230 21.86471176]
[105.56425476 7.01938820]
[107.71282959 -7.82593441]
[109.86141205 -22.67125702]
[112.00998688 -37.51657867]
[113.85330963 -52.40288925]
[115.39060211 -67.32390594]
[116.92789459 -82.24491882]
[118.46518707 -97.16593933]
[120.00247955 -112.08695221]
[121.53977203 -127.00797272]
[105.37021637 -136.13475037]
[94.79685974 -151.33627319]
[91.88163757 -169.57138062]
[97.15971375 -187.21504211]
[109.54189301 -200.77911377]
[126.53904724 -207.60182190]
[126.84702301 -222.59866333]
[127.15499878 -237.59550476]
[127.46298218 -252.59234619]
[127.77095795 -267.58917236]
[128.07893372 -282.58602905]
[118.82076263 -298.47048950]
[128.41139221 -313.13555908]
[128.41139221 -328.13555908]
[128.41139221 -343.13555908]
[128.41139221 -358.13555908]
[113.83427429 -362.03045654]
[100.76241302 -369.56628418]
[90.08705902 -380.22927856]
[82.53609467 -393.29238892]
[78.62434387 -407.86499023]
[78.61851501 -422.95346069]
[82.51901245 -437.52908325]
[90.05989075 -450.59805298]
[100.72700500 -461.26928711]
[113.79304504 -468.81518555]
[128.36715698 -472.72131348]
[143.45564270 -472.72131348]
[158.02973938 -468.81518555]
[171.09577942 -461.26928711]
[181.76289368 -450.59805298]
[189.30377197 -437.52908325]
[193.20426941 -422.95346069]
[193.19845581 -407.86499023]
[189.28669739 -393.29238892]
[181.73573303 -380.22927856]
[171.06037903 -369.56628418]
[157.98851013 -362.03045654]
[143.41139221 -358.13555908]
[143.41139221 -343.13555908]
[143.41139221 -328.13555908]
[143.41139221 -313.13555908]
[151.75904846 -304.32769775]
[151.84524536 -291.79119873]
[143.07577515 -282.27804565]
[142.76779175 -267.28118896]
[142.45982361 -252.28436279]
[142.15184021 -237.28752136]
[141.84385681 -222.29069519]
[141.53588867 -207.29385376]
[152.57095337 -203.37242126]
[162.06750488 -196.48622131]
[169.24789429 -187.18566895]
[173.52038574 -176.21936035]
[174.52780151 -164.47393799]
[172.17745972 -152.90229797]
[166.64955139 -142.44638062]
[158.38331604 -133.96040344]
[148.04223633 -128.14112854]
[136.46078491 -125.47068024]
[134.92349243 -110.54965973]
[133.38619995 -95.62864685]
[131.84890747 -80.70762634]
[130.31161499 -65.78661346]
[128.77432251 -50.86559677]
[131.07943726 -46.61874771]
[130.69783020 -40.87051010]
[126.85530853 -35.36800003]
[124.70673370 -20.52267838]
[122.55815125 -5.67735529]
[120.40957642 9.16796780]
[118.26099396 24.01329041]
[116.11241913 38.85861206]
[125.20526123 50.59981537]
[123.23777008 65.68569183]
[110.86087036 75.14349365]
[108.71228790 89.98881531]
[117.71507263 77.99089813]
[125.48524475 65.16029358]
[136.84979248 55.37015533]
[150.68925476 49.58486176]
[165.64031982 48.37431335]
[180.23023987 51.85775375]
[193.02178955 59.69204330]
[202.75494385 71.10544586]
[208.47090149 84.97367859]
[209.60661316 99.93062592]
[206.05020142 114.50292206]
[198.15199280 127.25511169]
[186.69001770 136.93101501]
[172.79336548 142.57749939]
[157.83091736 143.63835144]
[143.27700806 140.00923157]
[136.08561707 126.84548950]
[136.08561707 141.84548950]
[136.08561707 156.84548950]
[136.08561707 171.84548950]
[136.08561707 186.84548950]
[136.08561707 201.84548950]
[136.08561707 216.84548950]
[136.08561707 231.84548950]
[136.08561707 246.84548950]
[136.08561707 261.84548950]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 152]
[2 151]
[3 150]
[4 149]
[5 148]
[6 147]
[7 146]
[8 145]
[9 144]
[10 143]
[14 33]
[15 32]
[16 31]
[18 30]
[19 29]
[21 27]
[34 126]
[35 125]
[38 122]
[39 121]
[40 120]
[41 119]
[42 118]
[43 117]
[44 114]
[45 113]
[46 112]
[47 111]
[48 110]
[49 109]
[55 99]
[56 98]
[57 97]
[58 96]
[59 95]
[60 94]
[62 91]
[63 90]
[64 89]
[65 88]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
