%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:05 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGUCCCCACCUUGGCUAUCAUCACCCGAUGAGGCAACCAGCCAGAACGCCUGAACGCAGGCAxxxxxxxxxxCGCCUAUAGCACUCGAAUAAUUCUUCUCACCCUAACAGGUCAACCUCGCUUCCCCACCCUCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[114.16707611 129.13905334]
[108.39080048 142.98226929]
[110.21717072 158.69770813]
[98.17548370 167.46394348]
[92.39921570 181.30717468]
[86.62294006 195.15039062]
[80.84666443 208.99360657]
[83.48039246 225.17988586]
[70.61008453 235.34291077]
[55.47562408 229.02786255]
[53.64603806 212.73109436]
[67.00344849 203.21733093]
[72.77972412 189.37411499]
[78.55599213 175.53089905]
[84.33226776 161.68768311]
[82.09273529 146.96240234]
[94.54758453 137.20599365]
[100.32385254 123.36278534]
[79.03489685 132.29853821]
[50.70189667 121.16007996]
[35.76758957 122.56237793]
[20.83328056 123.96468353]
[5.89897299 125.36698914]
[-9.03533459 126.76929474]
[-10.06978798 141.97839355]
[-25.40843010 155.18635559]
[-40.05192947 158.43717957]
[-54.69543076 161.68800354]
[-69.33893585 164.93884277]
[-83.98243713 168.18966675]
[-95.69770813 179.66505432]
[-111.41843414 174.99699402]
[-114.97248840 158.98760986]
[-102.70375824 148.10595703]
[-87.23326111 153.54615784]
[-72.58975983 150.29533386]
[-57.94625854 147.04450989]
[-43.30275726 143.79368591]
[-28.65925598 140.54286194]
[-28.65925598 125.54285431]
[-43.30275726 122.29203033]
[-60.07582092 124.76198578]
[-67.09249115 109.32817078]
[-54.20424652 98.31320953]
[-40.05192947 107.64852905]
[-25.40843010 110.89935303]
[-10.43763828 111.83498383]
[4.49666929 110.43267822]
[19.43097687 109.03038025]
[34.36528397 107.62807465]
[49.29959106 106.22576904]
[52.68365097 99.53263092]
[39.29747009 92.76430511]
[46.06599808 79.37822723]
[59.45176315 86.14633942]
[62.83582306 79.45320129]
[55.11173630 66.59479523]
[47.38765335 53.73639679]
[39.66356659 40.87799454]
[31.93948174 28.01959038]
[17.34281540 20.54501152]
[16.78800583 4.15525198]
[30.84579468 -4.28930855]
[45.05473328 3.89837027]
[44.79788589 20.29550552]
[52.52196884 33.15390778]
[60.24605560 46.01231003]
[67.97013855 58.87071228]
[75.69422150 71.72911835]
[83.18408203 71.33919525]
[82.40423584 56.35947800]
[81.62438965 41.37976456]
[80.84454346 26.40004921]
[80.06469727 11.42033577]
[79.28508759 -3.55939054]
[94.26482391 -4.33877277]
[95.04441833 10.64049053]
[95.82425690 25.62020493]
[96.60410309 40.59991837]
[97.38394928 55.57963181]
[98.16379547 70.55934906]
[105.65365601 70.16942596]
[112.00078583 56.57847595]
[107.89593506 41.06945038]
[117.57733154 28.27687073]
[133.61824036 28.01410675]
[143.71343994 40.48273087]
[140.11875916 56.11787796]
[125.59173584 62.92560577]
[119.24460602 76.51655579]
[123.03955841 82.98558044]
[135.12553406 74.10137939]
[147.21151733 65.21717072]
[159.29750061 56.33296585]
[171.38346863 47.44876099]
[183.46945190 38.56455612]
[195.55543518 29.68034935]
[204.25898743 17.46363449]
[218.64222717 13.20659542]
[232.59289551 18.71829033]
[240.18257141 31.65648460]
[238.18595886 46.52301025]
[227.45153809 57.00023270]
[212.54179382 58.63597870]
[198.88973999 64.85058594]
[185.23768616 71.06520081]
[171.58563232 77.27980804]
[157.93357849 83.49441528]
[144.28152466 89.70903015]
[130.62947083 95.92363739]
[134.42442322 102.39266968]
[149.38467407 103.48397827]
[164.34492493 104.57528687]
[180.58197021 99.69733429]
[189.76416016 113.94948578]
[178.61087036 126.71821594]
[163.25360107 119.53553772]
[148.29336548 118.44422913]
[133.33311462 117.35291290]
[145.93876648 125.48295593]
[158.54441833 133.61299133]
[171.15007019 141.74304199]
[183.75572205 149.87307739]
[198.69047546 151.27050781]
[213.01438904 155.72309875]
[226.10948181 163.03872681]
[237.41081238 172.90179443]
[246.43080139 184.88677979]
[252.78030396 198.47662354]
[256.18539429 213.08502197]
[256.49914551 228.08174133]
[253.70806885 242.81977844]
[247.93252563 256.66329956]
[239.42172241 269.01507568]
[228.54283142 279.34219360]
[215.76518250 287.19915771]
[201.64002991 292.24694824]
[186.77679443 294.26782227]
[171.81668091 293.17462158]
[157.40512085 289.01443481]
[144.16386414 281.96679688]
[132.66416931 272.33575439]
[123.40216064 260.53680420]
[116.77742767 247.07899475]
[113.07576752 232.54290771]
[112.45688629 217.55569458]
[114.94747925 202.76390076]
[120.43762207 188.81048584]
[118.86997986 173.89262390]
[117.30234528 158.97477722]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 18]
[2 17]
[4 15]
[5 14]
[6 13]
[7 12]
[20 51]
[21 50]
[22 49]
[23 48]
[24 47]
[26 39]
[27 38]
[28 37]
[29 36]
[30 35]
[40 46]
[41 45]
[56 69]
[57 68]
[58 67]
[59 66]
[60 65]
[82 90]
[83 89]
[111 119]
[112 118]
[113 117]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
