%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:41 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGACGAUUAACCCAAGUCAAUAGAAGCCGGCGUAAAGAGUGUUUUAGAUCACCCCCUCCCCAxxxxxxxxxxCAGGCCACCUACUCAUGCACCUAAUUGGAAGCGCCACCCUAGCAAUAUCAACCAUUAACCCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[-36.66470718 123.25637817]
[-51.56660843 124.96906281]
[-66.46851349 126.68175507]
[-81.37041473 128.39443970]
[-96.27231598 130.10713196]
[-111.17421722 131.81982422]
[-126.07611847 133.53251648]
[-140.97802734 135.24520874]
[-155.87992859 136.95788574]
[-170.78182983 138.67057800]
[-179.43246460 148.29452515]
[-191.92385864 149.38265991]
[-201.47534180 141.89424133]
[-216.40965271 143.29653931]
[-231.34396362 144.69885254]
[-246.27827454 146.10115051]
[-261.16156006 147.96876526]
[-275.97930908 150.29986572]
[-290.79705811 152.63096619]
[-294.95260620 156.00010681]
[-299.52972412 157.26599121]
[-303.64004517 156.62806702]
[-306.60913086 154.61512756]
[-319.62554932 163.60868835]
[-333.02041626 157.09510803]
[-347.95471191 158.49740601]
[-351.24618530 173.26295471]
[-358.94110107 186.28767395]
[-370.28561401 196.29553223]
[-384.16830444 202.30607605]
[-399.22906494 203.73042297]
[-413.99240112 200.42906189]
[-427.01196289 192.72541809]
[-437.01220703 181.37420654]
[-443.01345825 167.48750305]
[-444.42770386 152.42579651]
[-441.11645508 137.66467285]
[-433.40408325 124.65027618]
[-422.04617310 114.65763092]
[-408.15545654 108.66570282]
[-393.09280396 107.26152802]
[-378.33389282 110.58267212]
[-365.32467651 118.30376434]
[-355.33963013 129.66836548]
[-349.35702515 143.56309509]
[-334.42272949 142.16079712]
[-322.47451782 133.26754761]
[-308.01144409 139.68083191]
[-293.12817383 137.81321716]
[-278.31039429 135.48211670]
[-263.49264526 133.15100098]
[-261.11294556 130.46688843]
[-257.28768921 128.83317566]
[-252.53971863 128.92890930]
[-247.68057251 131.16683960]
[-232.74626160 129.76454163]
[-217.81195068 128.36222839]
[-202.87765503 126.95993042]
[-189.17526245 116.04000854]
[-172.49452209 123.76867676]
[-157.59262085 122.05599213]
[-142.69070435 120.34329987]
[-127.78881073 118.63060760]
[-112.88690948 116.91792297]
[-97.98500824 115.20523071]
[-83.08309937 113.49253845]
[-68.18119812 111.77985382]
[-53.27929688 110.06716156]
[-38.37739563 108.35446930]
[-38.00935364 86.90348816]
[-34.33594131 65.76616669]
[-27.44513512 45.44875336]
[-17.50197220 26.43786812]
[-4.74459553 9.18881989]
[10.52145195 -5.88526869]
[27.93054199 -18.42336655]
[47.06571960 -28.12518501]
[67.46869659 -34.75835800]
[88.65080261 -38.16402054]
[110.10472870 -38.26060486]
[131.31665039 -35.04580307]
[151.77851868 -28.59660149]
[158.12564087 -42.18755341]
[164.47277832 -55.77850342]
[165.69660950 -72.68822479]
[182.28428650 -76.19329071]
[190.24429321 -61.22417068]
[178.06372070 -49.43137360]
[171.71659851 -35.84042358]
[165.36946106 -22.24947166]
[176.61383057 -15.53536510]
[187.17445374 -7.79014492]
[196.95706177 0.91706657]
[205.87437439 10.50856018]
[213.84678650 20.89873314]
[220.80314636 31.99485970]
[226.68139648 43.69791031]
[240.69810486 38.35639572]
[251.94642639 23.81490326]
[269.13796997 27.19878197]
[283.04052734 21.56682396]
[290.59429932 7.41337919]
[306.39520264 4.63642979]
[318.32211304 15.36621571]
[317.22573853 31.37176132]
[303.94714355 40.37498474]
[288.67248535 35.46937943]
[274.76992798 41.10133743]
[269.73947144 52.14677429]
[258.15008545 56.93274307]
[246.03961182 52.37310791]
[232.02290344 57.71462250]
[235.04516602 68.68058777]
[237.15821838 79.85740662]
[238.34785461 91.16984558]
[238.60606384 102.54172516]
[237.93110657 113.89649963]
[236.32751465 125.15770721]
[233.80609131 136.24954224]
[230.38381958 147.09733582]
[226.08374023 157.62803650]
[220.93479919 167.77075195]
[214.97166443 177.45719910]
[208.23446655 186.62217712]
[200.76858521 195.20394897]
[192.62426758 203.14477539]
[183.85636902 210.39117432]
[174.52389526 216.89434814]
[164.68969727 222.61053467]
[154.41996765 227.50125122]
[143.78384399 231.53355408]
[132.85296631 234.68029785]
[121.70088959 236.92031860]
[110.40270996 238.23851013]
[99.03450012 238.62600708]
[87.67279053 238.08020020]
[76.39406586 236.60476685]
[65.27427673 234.20962524]
[54.38827896 230.91093445]
[43.80936432 226.73086548]
[33.60875320 221.69758606]
[23.85512161 215.84497070]
[14.61413765 209.21243286]
[5.94801760 201.84461975]
[-2.08489537 193.79112244]
[-9.43051910 185.10618591]
[-16.03939819 175.84826660]
[-21.86703873 166.07969666]
[-26.87420845 155.86624146]
[-31.02719116 145.27665710]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 69]
[2 68]
[3 67]
[4 66]
[5 65]
[6 64]
[7 63]
[8 62]
[9 61]
[10 60]
[13 58]
[14 57]
[15 56]
[16 55]
[17 51]
[18 50]
[19 49]
[23 48]
[25 46]
[26 45]
[82 90]
[83 89]
[84 88]
[97 112]
[98 111]
[100 108]
[101 107]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
