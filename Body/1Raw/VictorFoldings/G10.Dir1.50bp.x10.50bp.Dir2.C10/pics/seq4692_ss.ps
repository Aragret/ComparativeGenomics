%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:00 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGACACUCAUCACAGCGCUAAGCUCGCACUGAUUUUUUACCUGAGUAGGCCUAGAAAUAAACxxxxxxxxxxACCUAAUUGGAAGCGCCACCCUAGCAAUAUCAACCAUUAACCUUCCCUCUACACUUAUCACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[107.99599457 267.36572266]
[107.99599457 252.36572266]
[107.99599457 237.36572266]
[107.99599457 222.36572266]
[107.99599457 207.36572266]
[107.99599457 192.36572266]
[107.99599457 177.36572266]
[107.99599457 162.36572266]
[107.99599457 147.36572266]
[107.99599457 132.36572266]
[88.75262451 130.95587158]
[73.74291992 119.20818329]
[67.89691162 101.31299591]
[53.13085556 103.95185852]
[38.36479950 106.59072876]
[23.59874535 109.22959137]
[8.83268929 111.86845398]
[-5.62199879 115.87619781]
[-19.63871193 121.21770477]
[-33.65542603 126.55921936]
[-40.17918777 140.70411682]
[-54.47021866 145.92150879]
[-67.91501617 139.61492920]
[-81.93173218 144.95643616]
[-95.94844055 150.29794312]
[-100.90414429 165.12950134]
[-114.26092529 173.26156616]
[-129.71212769 170.85441589]
[-139.96215820 159.04463196]
[-140.17127991 143.40844727]
[-130.24073792 131.32878113]
[-114.85943604 128.50929260]
[-101.28995514 136.28123474]
[-87.27324677 130.93972778]
[-73.25653076 125.59821320]
[-67.41866302 111.94335938]
[-53.27981949 106.32663727]
[-38.99693680 112.54251099]
[-24.98022461 107.20099640]
[-10.96351147 101.85948181]
[-25.07864761 96.78376007]
[-34.32610321 84.97340393]
[-35.86795044 70.05285645]
[-29.23102188 56.60104752]
[-16.45210075 48.74616623]
[-1.45287669 48.89877319]
[11.16357899 57.01203537]
[17.52543831 70.59609985]
[15.68032551 85.48218536]
[6.19382524 97.10240173]
[20.95988083 94.46353149]
[35.72593689 91.82466888]
[50.49199295 89.18580627]
[65.25804901 86.54694366]
[73.37959290 73.93581390]
[69.67343140 59.40087891]
[65.96726990 44.86594009]
[50.89255905 44.99501038]
[36.22517395 41.51202774]
[22.81784439 34.61949539]
[11.45006180 24.71813393]
[2.78273320 12.38359642]
[-2.68023539 -1.66700554]
[-4.62123394 -16.61678696]
[-2.92741489 -31.59658623]
[2.30274487 -45.73550034]
[10.76517105 -58.21150970]
[21.96786880 -68.29927063]
[35.25952911 -75.41230774]
[49.86738968 -79.13706207]
[64.94216919 -79.25698853]
[79.60744476 -75.76511383]
[93.01058960 -68.86445618]
[104.37236786 -58.95620346]
[113.03221893 -46.61641312]
[118.48667145 -32.56250381]
[120.41860199 -17.61154747]
[118.71570587 -2.63277721]
[113.47697449 11.50296211]
[105.00698090 23.97383881]
[93.79817200 34.05480957]
[80.50220490 41.15978241]
[84.20836639 55.69471741]
[87.91452789 70.22965240]
[100.20208740 67.62892914]
[112.64368439 69.93713379]
[123.33860779 76.87475586]
[130.62515259 87.44957733]
[133.33865356 100.09805298]
[147.91136169 96.54328918]
[162.48405457 92.98853302]
[177.05676270 89.43376923]
[191.62947083 85.87900543]
[191.17501831 70.82951355]
[193.85984802 56.01447678]
[199.56658936 42.08154297]
[208.04577637 29.63979530]
[218.92674255 19.23313713]
[231.73379517 11.31650448]
[245.90707397 6.23597574]
[260.82699585 4.21365166]
[275.84130859 5.33793926]
[290.29364014 9.55968857]
[303.55224609 16.69434357]
[315.03747559 26.43000793]
[324.24725342 38.34107971]
[330.77899170 51.90686035]
[334.34710693 66.53430939]
[334.79562378 81.58397675]
[332.10498047 96.39795685]
[326.39273071 110.32864380]
[317.90866089 122.76705933]
[307.02362061 133.16943359]
[294.21343994 141.08102417]
[280.03817749 146.15597534]
[265.11746216 148.17243958]
[250.10357666 147.04223633]
[235.65289307 142.81480408]
[222.39710999 135.67492676]
[210.91569519 125.93475342]
[201.71060181 114.02005768]
[195.18423462 100.45171356]
[180.61152649 104.00646973]
[166.03881836 107.56123352]
[151.46612549 111.11599731]
[136.89341736 114.67076111]
[151.38641357 118.53768921]
[166.03359985 115.30351257]
[180.75894165 118.16084290]
[193.13357544 126.63835907]
[201.11639404 139.33775330]
[203.39065552 154.16435242]
[199.58125305 168.67256165]
[190.31651306 180.46937561]
[177.12460327 187.60894775]
[162.18145752 188.91366577]
[147.95184326 184.16831970]
[136.78286743 174.15563965]
[130.51678467 160.52713013]
[130.18737793 145.52944946]
[122.99599457 132.36572266]
[122.99599457 147.36572266]
[122.99599457 162.36572266]
[122.99599457 177.36572266]
[122.99599457 192.36572266]
[122.99599457 207.36572266]
[122.99599457 222.36572266]
[122.99599457 237.36572266]
[122.99599457 252.36572266]
[122.99599457 267.36572266]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[13 54]
[14 53]
[15 52]
[16 51]
[17 50]
[18 40]
[19 39]
[20 38]
[23 35]
[24 34]
[25 33]
[55 84]
[56 83]
[57 82]
[89 126]
[90 125]
[91 124]
[92 123]
[93 122]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
