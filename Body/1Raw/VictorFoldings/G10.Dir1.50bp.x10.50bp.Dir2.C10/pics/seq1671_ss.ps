%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:29 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGUAAACUAAGAGUAGAGUGCUUAGUUGAACAGGGCCCUGAAGCGCGUACACACCGCCCGUCxxxxxxxxxxUGUAGCAUUGUUCGUUACAUGGUCCAUCAUAGAAUUCUCACUGUGAUAUAUAAACUCAGACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[84.59680939 250.47236633]
[84.28475952 235.47560120]
[83.97270203 220.47885132]
[83.66064453 205.48210144]
[83.34858704 190.48535156]
[83.03652954 175.48858643]
[82.72447205 160.49183655]
[82.41242218 145.49508667]
[82.10036469 130.49833679]
[68.93177795 123.31582642]
[56.15442276 131.17324829]
[47.80968475 147.55448914]
[30.28871155 147.43005371]
[17.67758369 155.55160522]
[5.06645632 163.67314148]
[-7.54467201 171.79467773]
[-20.15579987 179.91622925]
[-32.76692963 188.03776550]
[-45.37805557 196.15931702]
[-45.26063919 211.58622742]
[-53.52159119 224.61543274]
[-67.52487183 231.08935547]
[-82.80208588 228.94219971]
[-94.47832489 218.85910034]
[-98.82775116 204.05754089]
[-94.46247864 189.26065063]
[-82.77544403 179.19006348]
[-67.49593353 177.05926514]
[-53.49959946 183.54818726]
[-40.88846970 175.42663574]
[-28.27734184 167.30509949]
[-15.66621399 159.18354797]
[-3.05508590 151.06201172]
[9.55604172 142.94047546]
[22.16716957 134.81892395]
[25.05355072 123.03011322]
[35.54940796 116.17038727]
[48.29699707 118.39588928]
[61.07435608 110.53846741]
[76.23182678 86.46183777]
[96.15225983 86.14454651]
[94.59467316 71.22563934]
[93.03709412 56.30672455]
[91.47951508 41.38780975]
[89.92193604 26.46889877]
[80.79346466 13.54675961]
[87.16735840 0.08485838]
[85.60977936 -14.83405399]
[69.72840881 -23.71429634]
[62.67021561 -40.24905777]
[67.13391113 -57.43993378]
[57.15118408 -68.63569641]
[47.16846085 -79.83146667]
[39.06641006 -84.19136047]
[37.09748077 -91.36554718]
[27.34982872 -102.76656342]
[11.71653271 -107.71955109]
[8.45402431 -123.79089355]
[20.91849327 -134.44776917]
[36.28755951 -128.72731018]
[38.75085068 -112.51421356]
[48.49850082 -101.11319733]
[58.36422348 -89.81419373]
[68.34695435 -78.61842346]
[78.32968140 -67.42266083]
[83.19937134 -69.22893524]
[88.32276917 -70.08174133]
[91.42108917 -84.75826263]
[77.84107208 -91.30399323]
[66.22261047 -100.90997314]
[57.24118423 -113.01771545]
[51.41896439 -126.92329407]
[49.09444427 -141.81825256]
[50.40276718 -156.83663940]
[55.26787567 -171.10528564]
[63.40691376 -183.79463196]
[74.34668732 -194.16693115]
[87.45117188 -201.61917114]
[101.95849609 -205.71807861]
[117.02522278 -206.22534180]
[131.77537537 -203.11148071]
[145.35142517 -196.55751038]
[156.96406555 -186.94448853]
[165.93814087 -174.83131409]
[171.75193787 -160.92219543]
[174.06742859 -146.02583313]
[172.75000000 -131.00823975]
[167.87623596 -116.74255371]
[159.72950745 -104.05814362]
[148.78344727 -93.69246674]
[135.67445374 -86.24817657]
[121.16464233 -82.15807343]
[106.09761810 -81.65994263]
[102.99929810 -66.98342133]
[114.26011658 -56.37121201]
[118.03140259 -41.21788406]
[112.96694183 -26.29613113]
[100.52868652 -16.39163399]
[102.08627319 -1.47272253]
[111.10332489 10.38231659]
[104.84084320 24.91131783]
[106.39842987 39.83023071]
[107.95600891 54.74914169]
[109.51358795 69.66805267]
[111.07116699 84.58696747]
[121.51097870 95.35777283]
[136.37402344 97.38011169]
[151.23707581 99.40244293]
[166.10012817 101.42478180]
[180.96316528 103.44711304]
[195.82621765 105.46944427]
[210.68927002 107.49178314]
[221.32151794 96.18979645]
[236.57257080 93.32886505]
[250.57809448 100.00907135]
[257.95266724 113.66173553]
[255.86061096 129.03713989]
[245.10638428 140.22311401]
[229.82518005 142.91844177]
[215.89295959 136.08670044]
[208.66693115 122.35482788]
[193.80387878 120.33249664]
[178.94084167 118.31015778]
[164.07778931 116.28782654]
[149.21473694 114.26548767]
[134.35169983 112.24315643]
[119.48864746 110.22082520]
[113.89076233 115.21218872]
[125.96475983 124.11267853]
[138.03874207 133.01316833]
[152.75816345 135.90087891]
[162.90435791 146.94871521]
[164.53150940 161.86019897]
[157.00683594 174.83630371]
[143.25663757 180.83064270]
[128.62834167 177.51203918]
[118.81085968 166.17109680]
[117.62236023 151.21746826]
[110.15868378 138.20619202]
[102.69499969 125.19491577]
[97.09711456 130.18627930]
[97.40917206 145.18302917]
[97.72122955 160.17977905]
[98.03328705 175.17652893]
[98.34534454 190.17329407]
[98.65739441 205.17004395]
[98.96945190 220.16679382]
[99.28150940 235.16354370]
[99.59356689 250.16030884]
[102.18456268 269.36804199]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 149]
[2 148]
[3 147]
[4 146]
[5 145]
[6 144]
[7 143]
[8 142]
[9 141]
[10 39]
[11 38]
[13 35]
[14 34]
[15 33]
[16 32]
[17 31]
[18 30]
[19 29]
[41 105]
[42 104]
[43 103]
[44 102]
[45 101]
[47 99]
[48 98]
[51 65]
[52 64]
[53 63]
[55 62]
[56 61]
[67 94]
[68 93]
[106 127]
[107 126]
[108 125]
[109 124]
[110 123]
[111 122]
[112 121]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
