%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:03 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCACCCAACAAUGACUAAUCAAACUAACCUCAAAACAAAUGAUAACCAUACACAACACUAAxxxxxxxxxxCUCUGUUCUUUCAUGGGGAAGCAGAUUUGGGUACCACCCAAGUAUUGACUCACCCAUCAACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[102.75370026 452.06661987]
[102.75370026 437.06661987]
[102.75370026 422.06661987]
[102.75370026 407.06661987]
[102.75370026 392.06661987]
[102.75370026 377.06661987]
[102.75370026 362.06661987]
[102.75370026 347.06661987]
[102.75370026 332.06661987]
[102.75370026 317.06661987]
[85.04388428 311.46841431]
[70.22763824 300.23135376]
[60.03702164 284.65060425]
[55.66954803 266.53018188]
[57.64749146 247.97402954]
[65.75545502 231.14184570]
[79.06375122 217.99763489]
[96.03495026 210.08056641]
[94.16734314 195.19728088]
[92.29972839 180.31399536]
[90.43211365 165.43072510]
[86.45293427 159.14488220]
[88.68379211 150.21879578]
[87.12621307 135.29988098]
[85.56862640 120.38096619]
[84.94630432 89.69293976]
[79.45927429 75.73254395]
[73.97224426 61.77215958]
[68.48521423 47.81176758]
[55.56531143 43.87047577]
[47.40989304 33.34825516]
[46.83309174 20.24323273]
[53.82173538 9.37328911]
[48.62631989 -4.69823027]
[37.22645950 -10.82171345]
[33.20906830 -22.69940567]
[38.22061539 -33.75344086]
[33.31906509 -47.93000031]
[22.54825592 -58.36981201]
[8.22565842 -62.82662964]
[-6.09693909 -67.28344727]
[-19.15522003 -58.68022919]
[-34.68243790 -60.53482437]
[-45.34711456 -71.97154999]
[-46.11371613 -87.59033203]
[-36.62027740 -100.01645660]
[-21.34930801 -103.38269806]
[-7.51129484 -96.09960175]
[-1.64012349 -81.60604095]
[12.68247414 -77.14922333]
[27.00507164 -72.69241333]
[33.04506683 -77.13858795]
[31.38402939 -92.04633331]
[45.12505341 -86.03093719]
[51.16504669 -90.47711182]
[51.16504669 -105.47711182]
[51.16504669 -120.47711182]
[51.16504669 -135.47711182]
[36.78287888 -143.57228088]
[28.47673607 -157.72514343]
[28.42268944 -174.04161072]
[36.54114914 -188.08699036]
[50.54410553 -196.09129333]
[50.23205185 -211.08804321]
[49.91999435 -226.08480835]
[49.60793686 -241.08155823]
[35.18078232 -245.67893982]
[23.02958679 -254.71371460]
[14.47241974 -267.20584106]
[10.43750000 -281.80032349]
[11.36250496 -296.91397095]
[17.14709663 -310.90744019]
[27.16380692 -322.26281738]
[40.32609940 -329.74832153]
[55.20622253 -332.55200195]
[70.19009399 -330.36975098]
[83.65237427 -323.43823242]
[94.13278198 -312.50939941]
[100.49447632 -298.76867676]
[102.04738617 -283.70654297]
[98.62306213 -268.95687866]
[90.59295654 -256.11959839]
[78.82811737 -246.58715820]
[64.60469055 -241.39361572]
[64.91674805 -226.39685059]
[65.22880554 -211.40010071]
[65.54086304 -196.40335083]
[77.94411469 -190.60517883]
[86.67031860 -179.96881104]
[89.96469116 -166.54290771]
[87.12586212 -152.94563293]
[78.65426636 -141.85404968]
[66.16504669 -135.47711182]
[66.16504669 -120.47711182]
[66.16504669 -105.47711182]
[66.16504669 -90.47711182]
[47.49562073 -52.83155060]
[52.39717102 -38.65499115]
[66.25327301 -27.93079567]
[62.69783783 -9.89364624]
[67.89324951 4.17787361]
[83.43507385 10.52686214]
[89.72922516 26.45381355]
[82.44560242 42.32473755]
[87.93263245 56.28512573]
[93.41966248 70.24551392]
[98.90669250 84.20590973]
[111.16906738 92.84502411]
[126.16175842 93.31306458]
[141.15444946 93.78110504]
[156.14715576 94.24914551]
[171.13984680 94.71719360]
[187.15992737 89.16802216]
[196.92703247 103.02587128]
[186.31455994 116.24750519]
[170.67179871 109.70988464]
[155.67910767 109.24184418]
[140.68641663 108.77380371]
[125.69371796 108.30576324]
[110.70101929 107.83771515]
[100.48754120 118.82337952]
[102.04512024 133.74229431]
[103.60270691 148.66120911]
[105.31539154 163.56311035]
[107.18300629 178.44639587]
[109.05062103 193.32966614]
[110.91823578 208.21295166]
[122.54471588 209.63897705]
[133.59704590 213.49530029]
[143.57365417 219.60340881]
[152.02258301 227.68266296]
[158.56184387 237.36325073]
[162.89680481 248.20301819]
[164.83340454 259.70776367]
[164.28684998 271.35372925]
[161.28529358 282.61138916]
[155.96847534 292.96963501]
[148.58114624 301.95889282]
[139.46183777 309.17248535]
[129.02734375 314.28488159]
[117.75370026 317.06661987]
[117.75370026 332.06661987]
[117.75370026 347.06661987]
[117.75370026 362.06661987]
[117.75370026 377.06661987]
[117.75370026 392.06661987]
[117.75370026 407.06661987]
[117.75370026 422.06661987]
[117.75370026 437.06661987]
[117.75370026 452.06661987]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[18 127]
[19 126]
[20 125]
[21 124]
[23 123]
[24 122]
[25 121]
[26 107]
[27 106]
[28 105]
[29 104]
[33 101]
[34 100]
[37 98]
[38 97]
[39 51]
[40 50]
[41 49]
[55 96]
[56 95]
[57 94]
[58 93]
[63 87]
[64 86]
[65 85]
[66 84]
[108 120]
[109 119]
[110 118]
[111 117]
[112 116]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
