%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:39 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGUUGACAACAUUCAAAAAAGAGUAAUAAACUUCGCCUUAAUUUUAAUAAUCAACACCCUCCxxxxxxxxxxCUCCCUCUACAUAUUUACCACAACACAAUGGGGCUCACUCACCCACCACAUUAACAACAUCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[289.53536987 129.89392090]
[285.59088135 114.08839417]
[283.21240234 97.97210693]
[268.23269653 98.75195312]
[253.25297546 99.53179169]
[238.27325439 100.31163788]
[223.29353333 101.09148407]
[208.31382751 101.87133026]
[196.00602722 110.25985718]
[181.82225037 103.25048065]
[166.84254456 104.03032684]
[151.86282349 104.81017303]
[136.88311768 105.59001923]
[121.90339661 106.36986542]
[116.12577057 116.13362122]
[106.35920715 121.90649414]
[95.01959991 122.26049805]
[84.91197205 117.10804749]
[78.53657532 107.72368622]
[63.53738403 107.87972260]
[48.53819656 108.03576660]
[34.81925583 115.91619873]
[22.01218796 108.31171417]
[7.01299858 108.46775055]
[-7.98618984 108.62378693]
[-23.57486534 118.36920166]
[-38.53023529 109.24029541]
[-53.52293015 109.70833588]
[-68.51562500 110.17637634]
[-83.47587585 111.26769257]
[-98.37777710 112.98037720]
[-113.27967834 114.69306946]
[-124.34040070 126.31374359]
[-140.30882263 124.76801300]
[-148.93531799 111.24163818]
[-143.60240173 96.11088562]
[-128.40101624 90.98278046]
[-114.99237061 99.79116821]
[-100.09046936 98.07847595]
[-85.18856812 96.36579132]
[-83.32997894 94.18565369]
[-80.46805573 92.63536835]
[-76.84764099 92.11145782]
[-72.85617065 92.91097260]
[-68.98366547 95.18368530]
[-53.99097443 94.71564484]
[-38.99827576 94.24759674]
[-30.45347404 85.62821960]
[-17.92379951 85.15260315]
[-8.14222622 93.62459564]
[6.85696220 93.46855927]
[21.85614967 93.31252289]
[34.50224686 85.44324493]
[48.38216019 93.03657532]
[63.38134766 92.88053894]
[78.38053894 92.72450256]
[90.36251831 79.32505798]
[108.32910919 78.76418304]
[121.12355804 91.39015198]
[136.10327148 90.61030579]
[151.08297729 89.83045959]
[166.06269836 89.05061340]
[181.04241943 88.27076721]
[194.42166138 79.82646942]
[207.53398132 86.89161682]
[222.51370239 86.11177063]
[237.49340820 85.33192444]
[252.47312927 84.55207825]
[267.45285034 83.77223206]
[282.43255615 82.99239349]
[282.92156982 69.11286926]
[284.56744385 55.32297134]
[287.35861206 41.71894836]
[291.27554321 28.39574432]
[296.29083252 15.44634819]
[302.36941528 2.96112609]
[309.46878052 -8.97279739]
[317.53936768 -20.27215004]
[326.52478027 -30.85809517]
[336.36221313 -40.65677643]
[346.98300171 -49.59984207]
[358.31295776 -57.62491226]
[370.27294922 -64.67601776]
[382.77947998 -70.70398712]
[395.74517822 -75.66680145]
[409.07955933 -79.52988434]
[422.68951416 -82.26631165]
[436.48004150 -83.85705566]
[450.35485840 -84.29106140]
[464.21713257 -83.56536865]
[477.97006226 -81.68509674]
[491.51770020 -78.66343689]
[504.76547241 -74.52153778]
[517.62091064 -69.28837585]
[529.99432373 -63.00051880]
[541.79937744 -55.70192337]
[552.95367432 -47.44358826]
[563.37939453 -38.28320694]
[573.00384521 -28.28476715]
[581.75982666 -17.51810074]
[589.58624268 -6.05840349]
[596.42864990 6.01429939]
[602.23919678 18.61570740]
[606.97741699 31.65783119]
[610.61035156 45.04961395]
[613.11267090 58.69755554]
[614.46691895 72.50638580]
[614.66375732 86.37970734]
[613.70178223 100.22067261]
[628.51959229 102.55178070]
[643.33734131 104.88288116]
[658.15509033 107.21398926]
[668.33428955 95.62143707]
[683.17126465 91.39442444]
[697.93157959 95.88178253]
[707.90527344 107.65160370]
[709.90979004 122.94818878]
[703.30548096 136.89045715]
[690.19976807 145.02946472]
[674.77459717 144.76809692]
[661.95214844 136.18974304]
[655.82397461 122.03174591]
[641.00622559 119.70063782]
[626.18847656 117.36953735]
[611.37072754 115.03842926]
[607.34613037 130.80780029]
[601.79705811 146.10803223]
[594.77673340 160.79212952]
[586.35247803 174.71900940]
[576.60510254 187.75486755]
[565.62811279 199.77441406]
[553.52691650 210.66212463]
[540.41760254 220.31336975]
[526.42602539 228.63534546]
[511.68652344 235.54803467]
[496.34060669 240.98492432]
[480.53564453 244.89370728]
[464.42340088 247.23674011]
[448.15863037 247.99137878]
[431.89752197 247.15028381]
[415.79626465 244.72142029]
[400.00955200 240.72801208]
[384.68896484 235.20828247]
[369.98178101 228.21516418]
[356.02923584 219.81571960]
[342.96539307 210.09051514]
[330.91586304 199.13287354]
[319.99639893 187.04794312]
[310.31195068 173.95175171]
[301.95565796 159.96998596]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 70]
[4 69]
[5 68]
[6 67]
[7 66]
[8 65]
[10 63]
[11 62]
[12 61]
[13 60]
[14 59]
[19 56]
[20 55]
[21 54]
[23 52]
[24 51]
[25 50]
[27 47]
[28 46]
[29 45]
[30 40]
[31 39]
[32 38]
[109 125]
[110 124]
[111 123]
[112 122]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
