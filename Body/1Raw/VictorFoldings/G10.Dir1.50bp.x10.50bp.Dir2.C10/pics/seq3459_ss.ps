%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:49 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCAAAGAGCCCCUAAAACCCGCCACAUCUACCAUCACCCUCUACAUCACCGCCCCGACCUUxxxxxxxxxxUCCUCGCCUUAGCAUGAUUUAUCCUACACUCCAACUCAUGAGACCCACAACAAAUAGCCCCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[-35.75764084 277.47235107]
[-45.26599884 289.07369995]
[-48.02959442 304.65167236]
[-62.08149719 309.59060669]
[-71.58985138 321.19195557]
[-81.09821320 332.79330444]
[-89.99056244 344.87329102]
[-98.24285126 357.39926147]
[-106.49514008 369.92520142]
[-114.74742889 382.45117188]
[-122.99971771 394.97714233]
[-121.18903351 410.91769409]
[-132.62443542 422.16986084]
[-148.53366089 420.10192871]
[-156.71250916 406.30026245]
[-150.88687134 391.35232544]
[-135.52568054 386.72485352]
[-127.27339172 374.19888306]
[-119.02110291 361.67291260]
[-110.76881409 349.14697266]
[-102.51652527 336.62100220]
[-117.51645660 336.66720581]
[-127.07023621 325.10324097]
[-124.19483185 310.38143921]
[-110.99192810 303.26220703]
[-97.11177826 308.94915771]
[-92.69955444 323.28494263]
[-83.19119263 311.68359375]
[-73.68283844 300.08227539]
[-71.59934235 285.33410645]
[-56.86734009 279.56533813]
[-47.35898209 267.96398926]
[-57.21195221 258.77963257]
[-66.49361420 249.01828003]
[-75.17023468 238.71539307]
[-83.21028900 227.90841675]
[-90.58455658 216.63661194]
[-97.26623535 204.94096375]
[-103.23104858 192.86395264]
[-108.45732117 180.44946289]
[-112.92606354 167.74263000]
[-116.62102509 154.78961182]
[-119.52879333 141.63749695]
[-121.63878632 128.33407593]
[-122.94335175 114.92768097]
[-123.43772888 101.46703339]
[-123.12014008 88.00106812]
[-121.99172974 74.57869720]
[-120.05660248 61.24871063]
[-117.32179260 48.05954361]
[-113.79723358 35.05913162]
[-109.49572754 22.29471207]
[-104.43292236 9.81267548]
[-98.62719727 -2.34162021]
[-92.09967041 -14.12400627]
[-84.87404633 -25.49166489]
[-76.97659302 -36.40328979]
[-68.43600464 -46.81922150]
[-59.28332520 -56.70161057]
[-49.55180359 -66.01454926]
[-39.27681351 -74.72418976]
[-28.49568748 -82.79888153]
[-17.24761009 -90.20928192]
[-5.57345438 -96.92845917]
[6.48435545 -102.93199921]
[18.88200188 -108.19808197]
[31.57443047 -112.70758057]
[44.51551819 -116.44409180]
[57.65823746 -119.39404297]
[70.95482635 -121.54672241]
[84.35696411 -122.89429474]
[97.81594849 -123.43187714]
[111.28287506 -123.15750122]
[124.70879364 -122.07216644]
[138.04492188 -120.17982483]
[151.24279785 -117.48735046]
[164.25445557 -114.00452423]
[177.03260803 -109.74401093]
[189.53082275 -104.72128296]
[201.70368958 -98.95459747]
[213.50695801 -92.46491241]
[224.89775085 -85.27580261]
[235.83465576 -77.41340637]
[246.27793884 -68.90628815]
[256.18966675 -59.78536606]
[265.53378296 -50.08378220]
[274.27633667 -39.83679199]
[282.38558960 -29.08163452]
[289.83206177 -17.85739517]
[296.58865356 -6.20486259]
[302.63085938 5.83361959]
[307.93670654 18.21430206]
[312.48690796 30.89219475]
[326.89910889 26.73430824]
[341.31134033 22.57641983]
[355.72354126 18.41853333]
[370.13577271 14.26064587]
[381.25045776 3.00123167]
[395.62371826 6.90743685]
[410.03591919 2.74954963]
[412.53619385 -12.30738926]
[421.32885742 -24.78345299]
[434.66809082 -32.20151138]
[449.90539551 -33.08869934]
[464.01541138 -27.26886749]
[474.19656372 -15.89754868]
[478.42736816 -1.23252547]
[475.86782837 13.81445122]
[467.02612305 26.25579262]
[453.65777588 33.62126160]
[438.41708374 34.44844055]
[424.33010864 28.57308960]
[414.19381714 17.16176605]
[399.78161621 21.31965256]
[389.69778442 32.28166580]
[374.29364014 28.67286110]
[359.88143921 32.83074951]
[345.46920776 36.98863602]
[331.05700684 41.14652252]
[316.64477539 45.30441284]
[320.21865845 62.18048096]
[322.47998047 79.28196716]
[323.41525269 96.50693512]
[323.01892090 113.75272369]
[321.29333496 130.91653442]
[318.24880981 147.89608765]
[313.90344238 164.59016418]
[308.28317261 180.89926147]
[301.42147827 196.72619629]
[293.35928345 211.97660828]
[284.14462280 226.55960083]
[273.83239746 240.38829041]
[262.48410034 253.38021851]
[250.16734314 265.45797729]
[236.95556641 276.54956055]
[222.92750549 286.58886719]
[208.16676331 295.51605225]
[192.76132202 303.27792358]
[176.80299377 309.82818604]
[160.38690186 315.12786865]
[143.61090088 319.14529419]
[126.57495880 321.85659790]
[109.38063049 323.24554443]
[92.13038635 323.30392456]
[74.92704773 322.03134155]
[57.87315369 319.43542480]
[41.07034302 315.53158569]
[24.61876678 310.34313965]
[8.61648178 303.90103149]
[-6.84113646 296.24359131]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 32]
[2 31]
[4 29]
[5 28]
[6 27]
[7 21]
[8 20]
[9 19]
[10 18]
[11 17]
[93 120]
[94 119]
[95 118]
[96 117]
[97 116]
[99 114]
[100 113]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
