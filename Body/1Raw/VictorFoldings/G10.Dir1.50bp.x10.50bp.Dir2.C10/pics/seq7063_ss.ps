%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:19 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGUAGGAGGCUUCAUUCACUGAUUUCCCCUAUUCUCAGGCUACACCCUAGACCAAACCUACGCxxxxxxxxxxAUGAUAUUUCCUAUUCGCCUACACAAUUCUCCGAUCCGUCCCUAACAAACUAGGAGGCGUCCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[92.50000000 242.69163513]
[92.50000000 227.69163513]
[92.50000000 212.69163513]
[92.50000000 197.69163513]
[92.50000000 182.69163513]
[92.50000000 167.69163513]
[92.50000000 152.69163513]
[92.50000000 137.69163513]
[92.50000000 122.69162750]
[92.50000000 107.69162750]
[89.89527893 92.91950989]
[84.76497650 78.82412720]
[79.63467407 64.72873688]
[74.50437164 50.63334656]
[66.60788727 37.88008881]
[56.27698517 27.00477409]
[45.94608307 16.12946129]
[35.61518097 5.25414658]
[23.96627808 14.71624947]
[11.61915970 23.24719238]
[-1.35191715 30.79566765]
[-14.86894226 37.31627655]
[-28.85062218 42.76980591]
[-43.21286392 47.12345123]
[-57.86929703 50.35103607]
[-72.73177338 52.43314362]
[-87.71089935 53.35725403]
[-102.71659851 53.11781311]
[-117.65862274 51.71625137]
[-132.44709778 49.16100693]
[-146.99308777 45.46744537]
[-161.20912170 40.65777588]
[-175.00967407 34.76093292]
[-188.31178284 27.81237221]
[-201.03541565 19.85388947]
[-213.10406494 10.93334866]
[-224.44514465 1.10439754]
[-234.99043274 -9.57385063]
[-244.67654419 -21.03717232]
[-253.44519043 -33.21662903]
[-261.24365234 -46.03896713]
[-268.02499390 -59.42707443]
[-273.74850464 -73.30043030]
[-278.37969971 -87.57559204]
[-281.89074707 -102.16671753]
[-284.26049805 -116.98604584]
[-285.47476196 -131.94445801]
[-285.52621460 -146.95196533]
[-284.41452026 -161.91835022]
[-282.14636230 -176.75357056]
[-278.73541260 -191.36842346]
[-274.20217896 -205.67500305]
[-268.57394409 -219.58724976]
[-261.88449097 -233.02153015]
[-254.17410278 -245.89701843]
[-245.48915100 -258.13629150]
[-235.88185120 -269.66574097]
[-225.41000366 -280.41601562]
[-214.13656616 -290.32247925]
[-202.12934875 -299.32553101]
[-189.46055603 -307.37106323]
[-176.20640564 -314.41064453]
[-162.44657898 -320.40194702]
[-148.26385498 -325.30892944]
[-133.74353027 -329.10211182]
[-118.97291565 -331.75866699]
[-104.04085541 -333.26260376]
[-89.03714752 -333.60491943]
[-74.05204010 -332.78350830]
[-59.17564011 -330.80331421]
[-44.49742889 -327.67626953]
[-30.10567856 -323.42117310]
[-16.08694649 -318.06359863]
[-2.52554226 -311.63580322]
[10.49697208 -304.17642212]
[22.90227699 -295.73031616]
[34.61576462 -286.34829712]
[45.56698608 -276.08676147]
[55.69008255 -265.00744629]
[64.92416382 -253.17697144]
[73.21370697 -240.66648865]
[80.50885010 -227.55126953]
[86.76571655 -213.91015625]
[91.94667816 -199.82519531]
[96.02057648 -185.38111877]
[98.96290588 -170.66476440]
[100.75598145 -155.76464844]
[101.38900757 -140.77040100]
[100.85818481 -125.77218628]
[99.16670227 -110.86019897]
[96.32472992 -96.12413788]
[92.34936523 -81.65262604]
[87.26451874 -67.53268433]
[81.10076141 -53.84924698]
[73.89517975 -40.68460464]
[65.69109344 -28.11793327]
[56.53784561 -16.22480583]
[46.49049377 -5.07675600]
[56.82139587 5.79855776]
[67.15229797 16.67387199]
[77.48320007 27.54918480]
[74.26464844 12.89855671]
[75.22534943 -2.07064724]
[80.29029083 -16.18965530]
[89.06401062 -28.35607910]
[100.86147308 -37.61998367]
[114.76154327 -43.25806046]
[129.67893982 -44.83009720]
[144.44892883 -42.21335220]
[157.91830444 -35.61213303]
[169.03538513 -25.54185867]
[176.93217468 -12.78879452]
[180.99211121 1.65132070]
[180.89819336 16.65102577]
[176.65776062 31.03917122]
[168.60189819 43.69235229]
[157.35958862 53.62263107]
[143.80860901 60.05466843]
[129.00700378 62.48625946]
[114.11046600 60.72755051]
[100.28208160 54.91585922]
[88.59976196 45.50304413]
[93.73006439 59.59843063]
[98.86036682 73.69382477]
[103.99066925 87.78920746]
[107.07826233 73.11042786]
[114.68709564 60.18349075]
[126.02210999 50.35916138]
[139.89889526 44.66399765]
[154.86743164 43.69309616]
[169.36366272 47.54791260]
[181.87281799 55.82564163]
[191.08782959 67.66133881]
[196.04577637 81.81826782]
[196.22862244 96.81715393]
[191.61723328 111.09073639]
[182.69349670 123.14755249]
[170.38983154 131.72775269]
[155.99188232 135.93479919]
[141.00411987 135.32907104]
[126.99263000 129.97387695]
[115.42150116 120.42877960]
[107.50000000 107.69162750]
[107.50000000 122.69162750]
[107.50000000 137.69163513]
[107.50000000 152.69163513]
[107.50000000 167.69163513]
[107.50000000 182.69163513]
[107.50000000 197.69163513]
[107.50000000 212.69163513]
[107.50000000 227.69163513]
[107.50000000 242.69163513]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 152]
[2 151]
[3 150]
[4 149]
[5 148]
[6 147]
[7 146]
[8 145]
[9 144]
[10 143]
[11 125]
[12 124]
[13 123]
[14 122]
[15 101]
[16 100]
[17 99]
[18 98]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
