%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:43 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGUUCCCCCUCAAACCUAAGAAAUAUGUCUGAUAAAAGAGUUACUUUGAUAGAGUAAAUAAUxxxxxxxxxxUCACCUCAACCCAAAAAGGCAUAAUUAAACUUUACUUCCUCUCUUUCUUCUUCCCACUCACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[97.44915009 219.02734375]
[96.82517242 204.04032898]
[96.20119476 189.05329895]
[95.57721710 174.06628418]
[94.95323944 159.07926941]
[94.32926178 144.09225464]
[93.70528412 129.10523987]
[93.08130646 114.11822510]
[78.85453033 109.36441040]
[69.34616852 120.96575165]
[59.83781052 132.56709290]
[50.32945251 144.16844177]
[54.38727570 159.14553833]
[48.83535385 173.63539124]
[35.80850983 182.06634521]
[20.31583214 181.19651794]
[8.31457233 171.36039734]
[4.41946030 156.34014893]
[10.12824535 141.91137695]
[23.24578285 133.62223816]
[38.72811127 134.66007996]
[48.23646927 123.05873108]
[57.74483109 111.45738983]
[67.25318909 99.85604858]
[80.41384888 89.09423065]
[93.58831787 89.75224304]
[94.83519745 74.80415344]
[96.08206940 59.85606766]
[97.32894897 44.90798187]
[98.57582092 29.95989609]
[99.82269287 15.01180840]
[97.95507812 0.12852834]
[93.05352783 -14.04802990]
[88.15197754 -28.22458839]
[83.25042725 -42.40114594]
[78.34887695 -56.57770538]
[73.44732666 -70.75426483]
[68.54577637 -84.93081665]
[51.96412277 -84.97405243]
[36.41503525 -90.66020966]
[23.75642014 -101.29131317]
[15.49446583 -115.57966614]
[12.60445786 -131.80378723]
[15.41566849 -148.01580811]
[23.57394409 -162.27536011]
[36.08621979 -172.88179016]
[30.59918976 -186.84217834]
[25.11215782 -200.80256653]
[16.99061584 -213.41369629]
[6.55080271 -224.18450928]
[-3.88900971 -234.95532227]
[-14.32882214 -245.72612000]
[-24.76863480 -256.49694824]
[-35.20844650 -267.26773071]
[-51.16255569 -268.95474243]
[-59.66899490 -282.55697632]
[-54.20235825 -297.63992310]
[-38.95617676 -302.63327026]
[-25.62601662 -293.70654297]
[-24.43763924 -277.70755005]
[-13.99782562 -266.93673706]
[-3.55801368 -256.16592407]
[6.88179874 -245.39512634]
[17.32161140 -234.62431335]
[27.76142311 -223.85351562]
[24.48587990 -238.49150085]
[25.58730125 -253.45100403]
[30.97140121 -267.45141602]
[40.17727280 -279.29421997]
[52.41684341 -287.96560669]
[66.64234161 -292.72326660]
[81.63597870 -293.15991211]
[96.11423492 -289.23815918]
[108.83768463 -281.29373169]
[118.71713257 -270.00671387]
[124.90685272 -256.34335327]
[126.87696075 -241.47329712]
[124.45880890 -226.66949463]
[117.85940552 -213.19923401]
[107.64369202 -202.21565247]
[94.68619537 -194.65898132]
[80.09613800 -191.17613220]
[65.12251282 -192.06524658]
[51.04713821 -197.25021362]
[39.07254791 -206.28959656]
[44.55957794 -192.32920837]
[50.04661179 -178.36882019]
[63.54157639 -179.40136719]
[76.79418945 -176.57197571]
[88.72054291 -170.10229492]
[98.34245300 -160.51211548]
[104.86768341 -148.57759094]
[107.75514984 -135.26846313]
[106.75981140 -121.66921234]
[101.95339966 -108.89075470]
[93.71938324 -97.97963715]
[82.72233582 -89.83237457]
[87.62388611 -75.65581512]
[92.52543640 -61.47925568]
[97.42698669 -47.30269623]
[102.32853699 -33.12613678]
[107.23008728 -18.94958115]
[112.13163757 -4.77302265]
[115.31707764 -19.43088722]
[122.43286896 -32.63563919]
[132.92369080 -43.35677338]
[145.97082520 -50.75760269]
[160.55606079 -54.26055527]
[175.54116821 -53.59226227]
[189.75668335 -48.80487442]
[202.09323120 -40.27200699]
[211.58802795 -28.65957069]
[217.50012207 -14.87381077]
[219.36810303 0.00942240]
[217.04621887 14.82862663]
[210.71565247 28.42729950]
[200.87045288 39.74419022]
[188.27893066 47.89611435]
[173.92376709 52.24689484]
[158.92524719 52.45698547]
[144.45384216 48.50999832]
[131.63894653 40.71395874]
[121.48062134 29.67727089]
[114.77078247 16.25868225]
[113.52391052 31.20676994]
[112.27703094 46.15485764]
[111.03015900 61.10294342]
[109.78327942 76.05103302]
[108.53640747 90.99911499]
[117.07962799 78.66974640]
[130.24313354 71.47793579]
[145.23382568 70.94968414]
[158.87091064 77.19707489]
[168.26080322 88.89450836]
[171.41111755 103.55996704]
[167.65338135 118.08165741]
[157.78495789 129.37829590]
[143.89976501 135.05291748]
[128.94401550 133.90144348]
[116.09112549 126.16819763]
[108.06832123 113.49424744]
[108.69229889 128.48126221]
[109.31627655 143.46827698]
[109.94025421 158.45529175]
[110.56423187 173.44230652]
[111.18820953 188.42932129]
[111.81218719 203.41635132]
[112.43616486 218.40336609]
[119.13615417 233.97726440]
[106.02562714 244.72669983]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 148]
[2 147]
[3 146]
[4 145]
[5 144]
[6 143]
[7 142]
[8 141]
[9 24]
[10 23]
[11 22]
[12 21]
[26 129]
[27 128]
[28 127]
[29 126]
[30 125]
[31 124]
[32 103]
[33 102]
[34 101]
[35 100]
[36 99]
[37 98]
[38 97]
[46 87]
[47 86]
[48 85]
[49 65]
[50 64]
[51 63]
[52 62]
[53 61]
[54 60]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
