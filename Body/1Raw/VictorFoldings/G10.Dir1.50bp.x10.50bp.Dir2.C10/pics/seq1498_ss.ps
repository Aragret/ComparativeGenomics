%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:44 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGUAAAACUCAAAGGACCUGGCGGUGCUUCAUAUCCCUCUAGAGGAGCCUGUUCUGUAAUCGAxxxxxxxxxxUAGCCACCUCUAGCCUAGCCGUUUACUCAAUCCUCUGAUCAGGGUGAGCAUCAAACUCAAACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[119.71302795 389.03280640]
[119.71302795 374.03280640]
[119.71302795 359.03280640]
[119.71302795 344.03280640]
[119.71302795 329.03280640]
[119.71302795 314.03280640]
[119.71302795 299.03280640]
[119.71302795 284.03280640]
[119.71302795 269.03280640]
[119.71302795 254.03280640]
[100.67572784 246.46836853]
[86.68418121 231.44584656]
[80.46350861 211.83601379]
[83.24888611 191.40827942]
[94.54055023 174.10626221]
[112.19293213 163.28636169]
[109.73999786 148.48828125]
[107.28707123 133.69020081]
[104.83414459 118.89212036]
[91.69251251 111.66041565]
[77.87892914 117.50720215]
[64.06534576 123.35398865]
[54.37258148 135.85842896]
[39.63607788 133.69401550]
[25.82249451 139.54080200]
[12.00891209 145.38758850]
[2.56339383 158.79335022]
[-13.74249172 157.04689026]
[-20.13464737 141.94482422]
[-10.03737164 129.02285767]
[6.16212416 131.57400513]
[19.97570610 125.72721863]
[33.78929138 119.88043213]
[42.49401474 107.79419708]
[58.21855927 109.54040527]
[72.03214264 103.69361877]
[85.84572601 97.84683228]
[71.25328064 94.37400818]
[63.97505569 81.25808716]
[68.74958038 67.03824615]
[82.46836853 60.97237396]
[96.19974518 67.00969696]
[101.00387573 81.21913147]
[105.55117035 66.92500305]
[110.09845734 52.63087082]
[114.64574432 38.33674240]
[115.10767365 23.34385681]
[111.44896698 8.79690266]
[107.79026031 -5.75005150]
[104.13155365 -20.29700661]
[100.47284698 -34.84395981]
[96.81414032 -49.39091492]
[93.15544128 -63.93786621]
[80.03523254 -76.81772614]
[85.41794586 -93.49318695]
[81.46133423 -107.96195984]
[66.42031860 -107.19907379]
[51.56703568 -109.68784332]
[37.59619141 -115.31185913]
[25.16123390 -123.80809021]
[14.84376526 -134.77914429]
[7.12635231 -147.71186829]
[2.36995387 -162.00140381]
[0.79703444 -176.97938538]
[2.48116255 -191.94528198]
[7.34356880 -206.19908142]
[15.15682888 -219.07414246]
[25.55550385 -229.96824646]
[38.05322647 -238.37187195]
[52.06545639 -243.89196777]
[66.93682098 -246.27035522]
[81.97174835 -245.39576721]
[96.46704102 -241.30912781]
[109.74472046 -234.20156860]
[121.18376923 -224.40553284]
[130.24916077 -212.37919617]
[136.51687622 -198.68504333]
[139.69378662 -183.96359253]
[139.63128662 -168.90336609]
[136.33230591 -154.20878601]
[129.95115662 -140.56712341]
[120.78626251 -128.61643982]
[109.26631165 -118.91567993]
[95.93009949 -111.91856384]
[99.88671112 -97.44979858]
[110.26202393 -91.15574646]
[113.65196991 -79.08596802]
[107.70239258 -67.59657288]
[111.36109924 -53.04961777]
[115.01980591 -38.50266647]
[118.67851257 -23.95571136]
[122.33721924 -9.40875721]
[125.99591827 5.13819647]
[129.65463257 19.68515015]
[134.11669922 5.36419010]
[141.50032043 -7.69268990]
[151.47296143 -18.89744377]
[163.58546448 -27.74544144]
[177.29234314 -33.83819199]
[191.97625732 -36.90129852]
[206.97589111 -36.79680634]
[221.61570740 -33.52942276]
[235.23637390 -27.24629784]
[247.22444153 -18.23040771]
[257.04000854 -6.88780403]
[264.24099731 6.27067709]
[268.50311279 20.65241241]
[269.63439941 35.60969162]
[267.58392334 50.46887970]
[262.44396973 64.56076050]
[254.44610596 77.25067902]
[243.95048523 87.96710968]
[231.42980957 96.22742462]
[217.44798279 101.65959167]
[202.63470459 104.01897430]
[187.65710449 103.19929504]
[173.18977356 99.23748779]
[159.88423157 92.31197357]
[148.33975220 82.73465729]
[139.07626343 70.93687439]
[132.51095581 57.44996643]
[128.93988037 42.88403320]
[124.39258575 57.17816162]
[119.84529877 71.47229004]
[115.29800415 85.76642609]
[119.63222504 116.43919373]
[122.08515167 131.23727417]
[124.53807831 146.03535461]
[126.99100494 160.83341980]
[136.97431946 161.89698792]
[146.49792480 165.04589844]
[155.13182068 170.13394165]
[162.48699951 176.92736816]
[168.23306274 185.11576843]
[172.11296082 194.32615662]
[173.95457458 204.13998413]
[173.67832947 214.11216736]
[171.30055237 223.79127502]
[166.93267822 232.73997498]
[160.77595520 240.55474854]
[153.11216736 246.88412476]
[144.29078674 251.44450378]
[134.71302795 254.03280640]
[134.71302795 269.03280640]
[134.71302795 284.03280640]
[134.71302795 299.03280640]
[134.71302795 314.03280640]
[134.71302795 329.03280640]
[134.71302795 344.03280640]
[134.71302795 359.03280640]
[134.71302795 374.03280640]
[134.71302795 389.03280640]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 152]
[2 151]
[3 150]
[4 149]
[5 148]
[6 147]
[7 146]
[8 145]
[9 144]
[10 143]
[16 129]
[17 128]
[18 127]
[19 126]
[20 37]
[21 36]
[22 35]
[24 33]
[25 32]
[26 31]
[43 125]
[44 124]
[45 123]
[46 122]
[47 94]
[48 93]
[49 92]
[50 91]
[51 90]
[52 89]
[53 88]
[55 85]
[56 84]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
