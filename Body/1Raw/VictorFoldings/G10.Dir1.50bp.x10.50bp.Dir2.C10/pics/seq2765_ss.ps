%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:33 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGUAGCAUAAUCACUUGUUCCUUAAAUAGGGACCUGUAUGAAUGGCUCCACGAGGGUUCAGCxxxxxxxxxxUCCAAAAAACACAUAAUUUGAAUCAACACAACCACCCACAGCCUAAUUAUUAGCAUCAUCCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[113.58769989 263.83724976]
[113.58769989 248.83726501]
[113.58769989 233.83726501]
[113.58769989 218.83726501]
[113.58769989 203.83726501]
[113.58769989 188.83726501]
[113.58769989 173.83726501]
[113.58769989 158.83726501]
[113.58769989 143.83726501]
[113.58769989 128.83726501]
[107.59428406 124.32849884]
[93.79158020 130.20092773]
[95.60745239 115.31096649]
[89.61402893 110.80220032]
[75.20181274 114.96009064]
[60.78960037 119.11798096]
[57.80195618 122.46990967]
[54.24876785 124.45634460]
[50.64236832 125.06934357]
[47.44268799 124.47265625]
[45.00449371 122.96848297]
[30.29653168 125.91397095]
[21.51947403 138.78257751]
[6.56154966 141.56019592]
[-5.65260935 133.11331177]
[-20.36057091 136.05879211]
[-35.06853104 139.00427246]
[-49.77649307 141.94975281]
[-64.48445892 144.89523315]
[-79.19242096 147.84071350]
[-89.24888611 160.34059143]
[-105.29052734 160.12759399]
[-115.01155853 147.36509705]
[-110.95484161 131.84341431]
[-96.23234558 125.46945190]
[-82.13790131 133.13275146]
[-67.42993927 130.18727112]
[-52.72197723 127.24179077]
[-38.01401520 124.29631042]
[-23.30605316 121.35082245]
[-8.59809208 118.40534210]
[-0.57864243 105.90637970]
[14.29536247 102.70972443]
[27.35104752 111.20600891]
[42.05900955 108.26052094]
[56.63171387 104.70576477]
[71.04393005 100.54787445]
[85.45614624 96.38998413]
[97.34852600 87.24825287]
[105.07260895 74.38984680]
[112.79669189 61.53144836]
[120.25160217 48.51513672]
[127.43411255 35.34655762]
[134.61662292 22.17797279]
[141.79913330 9.00939083]
[141.51823425 4.52803183]
[142.60569763 0.60522085]
[144.70680237 -2.38931584]
[147.38163757 -4.24384546]
[150.16583252 -4.91879177]
[151.29689026 -20.69951630]
[164.75997925 -27.07090950]
[173.01226807 -39.59687042]
[181.26455688 -52.12283325]
[189.51684570 -64.64879608]
[179.65794373 -74.04438782]
[171.51960754 -84.96015167]
[165.33230591 -97.08511353]
[161.27096558 -110.07410431]
[159.44999695 -123.55755615]
[159.92004395 -137.15202332]
[162.66667175 -150.47109985]
[167.61071777 -163.13636780]
[174.61061096 -174.78820801]
[183.46643066 -185.09594727]
[193.92561340 -193.76727295]
[205.69009399 -200.55654907]
[218.42492676 -205.27172852]
[231.76770020 -207.77976990]
[245.33891296 -208.01049805]
[258.75277710 -205.95841980]
[271.62811279 -201.68296814]
[283.59927368 -195.30671692]
[292.86422729 -207.10336304]
[302.12915039 -218.90000916]
[311.39410400 -230.69664001]
[305.60241699 -244.92167664]
[307.71505737 -260.13458252]
[317.16378784 -272.24313354]
[331.40689087 -277.99023438]
[346.61309814 -275.82989502]
[358.69198608 -266.34329224]
[364.39440918 -252.08221436]
[362.18643188 -236.88285828]
[352.66198730 -224.83377075]
[338.38311768 -219.17608643]
[323.19076538 -221.43168640]
[313.92581177 -209.63505554]
[304.66085815 -197.83840942]
[295.39590454 -186.04177856]
[306.14187622 -173.55433655]
[314.12121582 -159.13520813]
[318.99743652 -143.38810730]
[320.56405640 -126.97278595]
[318.75332642 -110.57746124]
[313.63912964 -94.88993073]
[305.43389893 -80.56872559]
[294.48001099 -68.21547699]
[281.23522949 -58.34960938]
[266.25378418 -51.38653946]
[250.16308594 -47.62016678]
[233.63742065 -47.21046829]
[217.36981201 -50.17669678]
[202.04281616 -56.39650726]
[193.79052734 -43.87054443]
[185.53823853 -31.34458160]
[177.28593445 -18.81862068]
[176.74514771 -3.93383551]
[162.69180298 3.33349752]
[154.96771240 16.19190025]
[147.78520203 29.36048317]
[140.60269165 42.52906418]
[133.42018127 55.69764709]
[133.90661621 60.50793839]
[131.33116150 65.66529083]
[125.65509796 69.25553131]
[117.93101501 82.11393738]
[110.20692444 94.97233582]
[123.15009308 87.39115143]
[134.42910767 77.50258636]
[148.72717285 72.96768188]
[163.64372253 74.54782867]
[176.67431641 81.97773743]
[185.63119507 94.00994873]
[189.01055908 108.62432098]
[186.24501038 123.36717987]
[177.79887390 135.76325989]
[165.09020996 143.73132324]
[150.25276184 145.93357849]
[135.77908325 142.00100708]
[128.58769226 128.83726501]
[128.58769226 143.83726501]
[128.58769226 158.83726501]
[128.58769226 173.83726501]
[128.58769226 188.83726501]
[128.58769226 203.83726501]
[128.58769226 218.83726501]
[128.58769226 233.83726501]
[128.58769226 248.83726501]
[128.58769226 263.83724976]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[14 48]
[15 47]
[16 46]
[21 45]
[22 44]
[25 41]
[26 40]
[27 39]
[28 38]
[29 37]
[30 36]
[49 128]
[50 127]
[51 126]
[52 123]
[53 122]
[54 121]
[55 120]
[60 119]
[62 117]
[63 116]
[64 115]
[65 114]
[83 100]
[84 99]
[85 98]
[86 97]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
