%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:39 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGAUCACAACACAAGAACACCUCUGAUUACUCCUGCCAUCAUGACCCUUGGCCAUAAUAUGAxxxxxxxxxxGACAAUCGAGUAGUACUCCCGAUUGAAGCCCCCAUUCGUAUAAUAAUUACAUCACAAGACCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[92.50000000 255.79379272]
[92.50000000 240.79379272]
[92.50000000 225.79379272]
[92.50000000 210.79379272]
[92.50000000 195.79379272]
[92.50000000 180.79379272]
[92.50000000 165.79379272]
[92.50000000 150.79379272]
[92.50000000 135.79379272]
[92.50000000 120.79380035]
[79.18484497 113.88680267]
[66.92247772 122.52591705]
[54.66010666 131.16503906]
[42.39773941 139.80415344]
[46.64718246 154.33758545]
[45.94488525 169.46325684]
[40.36702728 183.54040527]
[30.51865387 195.04206848]
[17.46804428 202.72062683]
[2.63082957 205.74317932]
[-12.38356018 203.78184509]
[-25.94647598 197.04937744]
[-36.58671570 186.27607727]
[-43.15010071 172.63053894]
[-44.92469025 157.59294128]
[-41.71798706 142.79443359]
[-33.87783051 129.84025574]
[-22.25466347 120.13558197]
[-8.10927868 114.73310089]
[7.02393818 114.21882629]
[21.50344849 118.64855957]
[33.75862503 127.54177856]
[46.02099228 118.90266418]
[58.28335953 110.26354980]
[70.54573059 101.62443542]
[70.38970184 94.12605286]
[55.48664856 95.82870483]
[40.97013855 99.60639954]
[32.22614288 87.41859436]
[40.45548630 74.87754822]
[55.11666489 78.04807281]
[70.07764435 79.12930298]
[69.92161560 71.63092804]
[57.31048584 63.50938416]
[44.69935989 55.38784027]
[32.08823013 47.26630020]
[18.46693993 54.36249542]
[3.12316084 53.68130112]
[-9.81570625 45.40596008]
[-16.86916924 31.76249123]
[-16.13988495 16.42092323]
[-7.82402611 3.50805926]
[5.84148359 -3.50260472]
[21.18069077 -2.72523546]
[34.06742477 5.63105869]
[41.03522110 19.31847572]
[40.20977402 34.65517044]
[52.82089996 42.77671432]
[65.43202972 50.89825439]
[78.04315948 59.01979828]
[98.67572784 71.24029541]
[104.31650543 89.78600311]
[114.29923248 78.59024048]
[117.70845032 63.14071655]
[131.95364380 58.79056931]
[141.93637085 47.59480286]
[151.91909790 36.39903641]
[161.90182495 25.20326996]
[171.88455200 14.00750446]
[181.86727905 2.81173873]
[173.86340332 -8.73183632]
[168.65545654 -21.76917839]
[166.50552368 -35.63466644]
[167.51965332 -49.62125015]
[171.64266968 -63.01651382]
[178.66108704 -75.13893890]
[188.21426392 -85.37261963]
[199.81280518 -93.19850922]
[212.86375427 -98.22076416]
[226.70083618 -100.18678284]
[240.61849976 -98.99988556]
[253.90788269 -94.72406769]
[265.89291382 -87.58056641]
[276.33273315 -98.35137939]
[286.77252197 -109.12218475]
[297.21234131 -119.89299011]
[307.65216064 -130.66380310]
[318.09197998 -141.43461609]
[328.30545044 -152.42027283]
[338.28817749 -163.61604309]
[348.27090454 -174.81181335]
[354.29919434 -190.65782166]
[371.19473267 -189.25172424]
[374.52075195 -172.62722778]
[359.46667480 -164.82908630]
[349.48394775 -153.63331604]
[339.50122070 -142.43754578]
[338.88366699 -137.64231873]
[335.20535278 -133.20373535]
[328.86279297 -130.99479675]
[318.42297363 -120.22399139]
[307.98315430 -109.45317841]
[297.54333496 -98.68237305]
[287.10354614 -87.91156006]
[276.66372681 -77.14075470]
[285.06048584 -63.50639343]
[289.67639160 -48.16244125]
[290.19644165 -32.13698196]
[286.58026123 -16.50523186]
[279.06518555 -2.31739926]
[268.15063477 9.47186756]
[254.56500244 18.06771851]
[239.21707153 22.88868904]
[223.13508606 23.60603523]
[207.39801025 20.16613388]
[193.06304932 12.79446507]
[183.08032227 23.99023056]
[173.09759521 35.18599701]
[163.11486816 46.38176346]
[153.13214111 57.57752991]
[143.14941406 68.77329254]
[140.45422363 83.42201996]
[125.49499512 88.57296753]
[115.51226807 99.76873016]
[126.16742706 89.21091461]
[139.73005676 82.80349731]
[154.65226746 81.27775574]
[169.23097229 84.80783081]
[181.80230713 92.99082947]
[190.93151855 104.89282990]
[195.57667542 119.15544891]
[195.20764160 134.15090942]
[189.86653137 148.16777039]
[180.16291809 159.60630798]
[167.20428467 167.16101074]
[152.46957397 169.96969604]
[137.64048767 167.71179199]
[124.40945435 160.64498901]
[114.28652954 149.57582092]
[108.42704010 135.76762390]
[107.50000000 120.79380035]
[107.50000000 135.79379272]
[107.50000000 150.79379272]
[107.50000000 165.79379272]
[107.50000000 180.79379272]
[107.50000000 195.79379272]
[107.50000000 210.79379272]
[107.50000000 225.79379272]
[107.50000000 240.79379272]
[107.50000000 255.79379272]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[11 35]
[12 34]
[13 33]
[14 32]
[43 60]
[44 59]
[45 58]
[46 57]
[62 124]
[63 123]
[65 121]
[66 120]
[67 119]
[68 118]
[69 117]
[70 116]
[83 105]
[84 104]
[85 103]
[86 102]
[87 101]
[88 100]
[89 97]
[90 96]
[91 95]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
