%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:13 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCGCUACCUCCCUGACAAGCGCCUAUAGCACUCGAAUAAUUCUUCUCACCCUAACAGGUCAxxxxxxxxxxUUUCAUCAAUCGCCCACAUCACUCGAGACGUAAAUUAUGGCUGAAUCAUCCGCUACCUUCCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[78.15798187 238.52856445]
[77.53400421 223.54154968]
[76.91002655 208.55453491]
[76.28604889 193.56752014]
[75.66207123 178.58049011]
[75.03809357 163.59347534]
[74.41411591 148.60646057]
[73.79013824 133.61944580]
[60.00775909 127.69948578]
[48.70875549 137.56520081]
[37.40975189 147.43092346]
[26.11074638 157.29666138]
[14.81174088 167.16238403]
[3.51273656 177.02810669]
[7.61855841 191.72860718]
[4.93101168 206.75325012]
[-4.01629019 219.11886597]
[-17.44685364 226.37026978]
[-32.69403076 227.06767273]
[-46.73048019 221.07260132]
[-56.76926041 209.57540894]
[-60.81716156 194.85884094]
[-58.07046890 179.84489441]
[-49.07453918 167.51460266]
[-35.61552429 160.31616211]
[-20.36572075 159.67880249]
[-6.35298634 165.72909546]
[4.94601822 155.86337280]
[16.24502373 145.99765015]
[27.54402733 136.13192749]
[38.84303284 126.26620483]
[50.14203644 116.40048218]
[58.65064621 92.26148224]
[75.54732513 79.90802002]
[92.12203217 80.28628540]
[101.32235718 89.27050781]
[103.49919891 74.42930603]
[105.67603302 59.58809662]
[86.32913971 39.19329071]
[98.60900879 18.66716003]
[97.36212921 3.71907282]
[96.11525726 -11.22901440]
[94.86838531 -26.17710114]
[93.62150574 -41.12518692]
[78.61104584 -41.44723892]
[63.71648026 -43.33657074]
[49.10100174 -46.77248001]
[34.92474365 -51.71732712]
[21.34303665 -58.11692810]
[8.50468254 -65.90116882]
[-3.44965219 -74.98475647]
[-14.38898945 -85.26817322]
[-24.19347191 -96.63874054]
[-32.75567627 -108.97187805]
[-39.98178864 -122.13246918]
[-45.79264069 -135.97630310]
[-50.12456131 -150.35169983]
[-52.93008804 -165.10116577]
[-54.17848206 -180.06309509]
[-53.85606766 -195.07354736]
[-51.96637344 -209.96806335]
[-48.53010941 -224.58346558]
[-43.58491898 -238.75959778]
[-37.18498611 -252.34115601]
[-29.40043640 -265.17932129]
[-20.31655693 -277.13342285]
[-10.03287601 -288.07250977]
[1.33793116 -297.87673950]
[13.67127991 -306.43862915]
[26.83204079 -313.66442871]
[40.67601395 -319.47494507]
[55.05152130 -323.80651855]
[69.80105591 -326.61166382]
[84.76300812 -327.85971069]
[99.77346039 -327.53692627]
[114.66793060 -325.64688110]
[129.28324890 -322.21026611]
[143.45925903 -317.26470947]
[157.04066467 -310.86447144]
[169.87863159 -303.07958984]
[181.83253479 -293.99542236]
[192.77136230 -283.71148682]
[202.57530212 -272.34042358]
[211.13690186 -260.00686646]
[218.36238098 -246.84594727]
[224.17254639 -233.00183105]
[228.50376892 -218.62622070]
[231.30857849 -203.87661743]
[232.55625916 -188.91462708]
[232.23310852 -173.90419006]
[230.34269714 -159.00975037]
[226.90571594 -144.39453125]
[221.95983887 -130.21862793]
[215.55924988 -116.63739014]
[207.77407837 -103.79960632]
[198.68960571 -91.84593201]
[188.40539551 -80.90734100]
[177.03411865 -71.10369110]
[164.70034790 -62.54238510]
[151.53924561 -55.31723022]
[137.69497681 -49.50738907]
[123.31926727 -45.17651367]
[108.56959534 -42.37206268]
[109.81646729 -27.42397499]
[111.06334686 -12.47588921]
[112.31021881 2.47219825]
[113.55709076 17.42028427]
[125.78690338 22.96944237]
[132.48709106 37.14371109]
[147.47978210 37.61175537]
[162.47247314 38.07979584]
[177.46517944 38.54784012]
[193.48526001 32.99866867]
[203.25236511 46.85651779]
[192.63989258 60.07815552]
[176.99713135 53.54053497]
[162.00444031 53.07249451]
[147.01173401 52.60445023]
[132.01904297 52.13640976]
[120.51724243 61.76493454]
[118.34040070 76.60614014]
[116.16356659 91.44734955]
[122.51069641 105.03829956]
[135.28805542 112.89572144]
[151.68696594 112.80945587]
[159.72639465 127.10279846]
[151.13606262 141.07199097]
[134.75296021 140.34671021]
[127.43062592 125.67308044]
[114.65326691 117.81565094]
[108.18424225 121.61061096]
[115.77414703 134.54866028]
[123.36405945 147.48672485]
[130.95396423 160.42477417]
[138.54365540 173.36296082]
[125.60535431 180.95243835]
[118.01590729 168.01467896]
[110.42600250 155.07662964]
[102.83609772 142.13856506]
[95.24618530 129.20051575]
[88.77716064 132.99546814]
[89.40113831 147.98248291]
[90.02511597 162.96949768]
[90.64909363 177.95651245]
[91.27306366 192.94354248]
[91.89704132 207.93055725]
[92.52101898 222.91757202]
[93.14499664 237.90458679]
[99.84498596 253.47848511]
[86.73445892 264.22793579]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 148]
[2 147]
[3 146]
[4 145]
[5 144]
[6 143]
[7 142]
[8 141]
[9 32]
[10 31]
[11 30]
[12 29]
[13 28]
[14 27]
[36 122]
[37 121]
[38 120]
[40 107]
[41 106]
[42 105]
[43 104]
[44 103]
[109 119]
[110 118]
[111 117]
[112 116]
[123 130]
[124 129]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
