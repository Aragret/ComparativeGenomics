%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:39 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGAUAUACCAAAUCUCUCCCUCACUAAACGUAAGCCUUCUCCUCACUCUCUCAAUCUUAUCCAxxxxxxxxxxAUAGUUUAAACAAAACGAAUGAUUUCGACUCAUUAAAUUAUGAUAAUCAUAUUUACCAAAUCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[95.23096466 233.06025696]
[94.92298889 218.06341553]
[94.61501312 203.06658936]
[94.30703735 188.06974792]
[93.99905396 173.07290649]
[93.69107819 158.07606506]
[93.38310242 143.07922363]
[93.07512665 128.08239746]
[92.76714325 113.08555603]
[81.78634644 102.86684418]
[66.80609894 103.63650513]
[51.82586288 104.40616608]
[50.74854660 119.38678741]
[47.83840942 134.12145996]
[43.13956451 148.38682556]
[36.72324753 161.96661377]
[28.68672562 174.65495300]
[19.15183258 186.25949097]
[8.26311493 196.60432434]
[-3.81435728 205.53260803]
[-16.89749336 212.90899658]
[-30.78795624 218.62167358]
[-45.27516937 222.58403015]
[-60.13951111 224.73599243]
[-75.15563965 225.04495239]
[-90.09591675 223.50622559]
[-104.73385620 220.14311218]
[-118.84754181 215.00662231]
[-132.22300720 208.17462158]
[-144.65751648 199.75067139]
[-155.96252441 189.86247253]
[-165.96667480 178.65995789]
[-174.51829529 166.31291199]
[-181.48776245 153.00854492]
[-186.76939392 138.94853210]
[-190.28315735 124.34603119]
[-191.97575378 109.42240143]
[-191.82153320 94.40388489]
[-189.82283020 79.51815796]
[-186.00996399 64.99088287]
[-180.44070435 51.04229736]
[-173.19950867 37.88385391]
[-164.39614868 25.71502686]
[-154.16406250 14.72029591]
[-142.65838623 5.06633902]
[-130.05352783 -3.10049319]
[-116.54057312 -9.65639305]
[-102.32438660 -14.50197506]
[-87.62047577 -17.56378174]
[-72.65174866 -18.79539680]
[-57.64513397 -18.17814827]
[-42.82811737 -15.72139454]
[-28.42532349 -11.46237946]
[-14.65509987 -5.46566820]
[-1.72619689 2.17783070]
[10.16538715 11.35224342]
[20.83937836 21.91848755]
[30.13396072 33.71638489]
[37.90823364 46.56707764]
[44.04433823 60.27575684]
[48.44925308 74.63459778]
[51.05620193 89.42592621]
[66.03644562 88.65626526]
[81.01668549 87.88660431]
[105.87896729 81.19957733]
[116.64765167 70.75756836]
[127.41632843 60.31555939]
[138.18501282 49.87355042]
[148.95368958 39.43154144]
[134.12318420 41.68019104]
[119.75124359 37.38518524]
[108.58637238 27.36791420]
[102.76378632 13.54411411]
[103.39700317 -1.44251442]
[110.36494446 -14.72588253]
[122.33502197 -23.76564026]
[137.01805115 -26.83299828]
[151.60600281 -23.34134483]
[163.30903625 -13.95843410]
[169.88902283 -0.47868243]
[170.08760071 14.52000332]
[163.86595154 28.17031860]
[176.85633850 20.67031860]
[189.84671021 13.17031860]
[202.83709717 5.67031908]
[215.82748413 -1.82968104]
[228.81785583 -9.32968140]
[241.80824280 -16.82968140]
[254.79861450 -24.32968140]
[267.78900146 -31.82968140]
[266.19659424 -45.90557861]
[270.08874512 -59.48093796]
[278.84350586 -70.50679779]
[291.10763550 -77.33219910]
[305.00576782 -78.95133209]
[318.42697144 -75.15164948]
[329.34561157 -66.54109955]
[342.48724365 -73.77279663]
[355.62887573 -81.00450134]
[368.77050781 -88.23620605]
[376.79235840 -102.53940582]
[393.19137573 -102.47326660]
[401.09762573 -88.10582733]
[392.37783813 -74.21707916]
[376.00219727 -75.09457397]
[362.86056519 -67.86286926]
[349.71893311 -60.63116837]
[336.57730103 -53.39946365]
[337.75576782 -37.49175644]
[331.87127686 -22.60308456]
[320.05020142 -11.72079277]
[304.61538696 -7.05195856]
[288.62988281 -9.57590961]
[275.28900146 -18.83930016]
[262.29861450 -11.33930016]
[249.30824280 -3.83929992]
[236.31785583 3.66070008]
[223.32748413 11.16069984]
[210.33709717 18.66069984]
[197.34671021 26.16069984]
[184.35633850 33.66070175]
[171.36595154 41.16070175]
[159.39569092 50.20021820]
[148.62701416 60.64222717]
[137.85833740 71.08423615]
[127.08966064 81.52624512]
[116.32097626 91.96825409]
[127.49594879 81.96225739]
[141.47306824 76.51796722]
[156.47187805 76.32889557]
[170.58178711 81.41912842]
[182.00543213 91.14024353]
[189.28764343 104.25395966]
[191.50079346 119.08979034]
[188.36294556 133.75791931]
[180.27383423 146.38986206]
[168.26385498 155.37654114]
[153.86288452 159.57321167]
[138.90534973 158.44525146]
[125.29659271 152.13638306]
[114.77014160 141.45024109]
[108.66688538 127.74803925]
[107.76398468 112.77758026]
[108.07196045 127.77441406]
[108.37993622 142.77125549]
[108.68791962 157.76809692]
[108.99589539 172.76492310]
[109.30387115 187.76176453]
[109.61184692 202.75860596]
[109.91983032 217.75544739]
[110.22780609 232.75227356]
[112.81358337 251.96070862]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 151]
[2 150]
[3 149]
[4 148]
[5 147]
[6 146]
[7 145]
[8 144]
[9 143]
[10 64]
[11 63]
[12 62]
[65 127]
[66 126]
[67 125]
[68 124]
[69 123]
[82 122]
[83 121]
[84 120]
[85 119]
[86 118]
[87 117]
[88 116]
[89 115]
[90 114]
[97 108]
[98 107]
[99 106]
[100 105]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
