%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:06 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGAACAUCACCUCUAGCAUCACCAGUAUUAGAGGCACCGCCUGCCCAGUGACACAUGUUUAACxxxxxxxxxxGAAGCCCCGGCAGGUUUGAAGCUGCUUCUUCGAAUUUGCAAUUCAAUAUGAAAAUCACCUCCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[114.85708618 263.67831421]
[114.85708618 248.67831421]
[114.85708618 233.67831421]
[114.85708618 218.67831421]
[114.85708618 203.67831421]
[114.85708618 188.67831421]
[114.85708618 173.67831421]
[114.85708618 158.67831421]
[114.85708618 143.67831421]
[114.85708618 128.67831421]
[108.73561096 124.34501648]
[101.54422760 137.50875854]
[95.67647552 151.31344604]
[80.67978668 150.99819946]
[75.39733124 136.95912170]
[86.46730804 126.83602142]
[96.49266052 115.67840576]
[90.37118530 111.34510040]
[76.22386932 116.33042145]
[62.07654953 121.31575012]
[47.92923355 126.30107117]
[33.78191757 131.28639221]
[19.63459969 136.27171326]
[18.45844269 151.45513916]
[11.20260429 164.84442139]
[-0.87579787 174.11976624]
[-15.68410778 177.67417908]
[-30.65669632 174.89183044]
[-43.19947433 166.25477600]
[-51.13932419 153.25944519]
[-53.10062408 138.15734863]
[-48.74356461 123.56502533]
[-38.82303238 112.01068115]
[-25.05782127 105.49617004]
[-9.83283520 105.15017700]
[4.21410322 111.03263855]
[14.64927769 122.12439728]
[28.79659462 117.13907623]
[42.94390869 112.15375519]
[57.09122849 107.16842651]
[71.23854065 102.18310547]
[85.38585663 97.19778442]
[96.47099304 87.09235382]
[102.74040222 73.46537018]
[93.67992401 57.09889603]
[99.22895813 37.94586945]
[117.79347992 27.76122475]
[114.73508453 13.07632732]
[111.67668915 -1.60857058]
[108.61829376 -16.29346848]
[105.55989838 -30.97836494]
[102.50150299 -45.66326141]
[99.44310760 -60.34815979]
[84.42028046 -59.74439240]
[69.50299072 -61.62168884]
[55.09818649 -65.92883301]
[41.59884644 -72.54831696]
[29.37323761 -81.29956818]
[18.75488663 -91.94384003]
[10.03347015 -104.19075012]
[3.44691443 -117.70618439]
[-0.82509464 -132.12144470]
[-2.66601348 -147.04327393]
[-2.02562046 -162.06459045]
[1.07861400 -176.77558899]
[6.56200409 -190.77496338]
[14.27495861 -203.68077087]
[24.00706291 -215.14097595]
[35.49281693 -224.84289551]
[48.41888428 -232.52186584]
[62.43262863 -237.96841431]
[77.15174866 -241.03393555]
[92.17469025 -241.63481140]
[107.09162140 -239.75463867]
[121.49559784 -235.44471741]
[134.99366760 -228.82263184]
[147.21759033 -220.06903076]
[157.83387756 -209.42271423]
[166.55293274 -197.17411804]
[173.13688660 -183.65740967]
[177.40612793 -169.24131775]
[179.24417114 -154.31913757]
[178.60087585 -139.29795837]
[175.49380493 -124.58755493]
[170.00772095 -110.58924103]
[162.29228210 -97.68490601]
[152.55796814 -86.22659302]
[141.07034302 -76.52688599]
[128.14280701 -68.85039520]
[114.12800598 -63.40655518]
[117.18640137 -48.72166061]
[120.24479675 -34.03676224]
[123.30319214 -19.35186386]
[126.36158752 -4.66696596]
[129.41998291 10.01793194]
[132.47837830 24.70282936]
[144.63171387 33.49467087]
[159.53616333 31.80427361]
[174.44061279 30.11387634]
[189.34506226 28.42347908]
[204.24951172 26.73308182]
[212.91291809 17.12325287]
[225.40390015 16.05235481]
[234.94444275 23.55171776]
[249.88044739 22.16769218]
[264.81646729 20.78366661]
[279.70275879 18.94034195]
[294.52523804 16.63946724]
[309.34774780 14.33859253]
[324.07196045 5.93421793]
[336.22396851 17.75645256]
[328.22775269 32.70626831]
[311.64862061 29.16107559]
[296.82614136 31.46195030]
[282.00363159 33.76282501]
[279.61938477 36.43910217]
[275.79443359 38.06377411]
[271.05154419 37.96073914]
[266.20050049 35.71968079]
[251.26448059 37.10370636]
[236.32846069 38.48773193]
[222.61087036 49.39057541]
[205.93989563 41.63752747]
[191.03546143 43.32792664]
[176.13101196 45.01832581]
[161.22656250 46.70872116]
[146.32211304 48.39912033]
[143.94252014 66.05651093]
[131.99964905 77.84542084]
[116.36737823 79.73477936]
[110.09797668 93.36175537]
[122.13301849 84.40866852]
[134.41529846 75.79788971]
[149.16491699 73.06864166]
[163.71513367 76.71437073]
[175.43524170 86.07592773]
[182.20626831 99.46073914]
[182.80400085 114.44882965]
[177.12034607 128.33033752]
[166.18293762 138.59547424]
[151.96925354 143.38830566]
[137.04847717 141.84205627]
[129.85708618 128.67831421]
[129.85708618 143.67831421]
[129.85708618 158.67831421]
[129.85708618 173.67831421]
[129.85708618 188.67831421]
[129.85708618 203.67831421]
[129.85708618 218.67831421]
[129.85708618 233.67831421]
[129.85708618 248.67831421]
[129.85708618 263.67831421]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 152]
[2 151]
[3 150]
[4 149]
[5 148]
[6 147]
[7 146]
[8 145]
[9 144]
[10 143]
[18 42]
[19 41]
[20 40]
[21 39]
[22 38]
[23 37]
[43 131]
[44 130]
[47 96]
[48 95]
[49 94]
[50 93]
[51 92]
[52 91]
[53 90]
[97 127]
[98 126]
[99 125]
[100 124]
[101 123]
[104 121]
[105 120]
[106 119]
[107 115]
[108 114]
[109 113]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
