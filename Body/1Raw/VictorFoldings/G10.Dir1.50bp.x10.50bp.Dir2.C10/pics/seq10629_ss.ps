%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:18 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCCCCCCAUCCUUACCACCCUCGUUAACCCUAACAAAAAAAACUCAUACCCCCAUUAUGUAxxxxxxxxxxCUGGCAGCCGGAAGCCUAUUCGCAGGAUUUCUCAUUACUAACAACAUUUCCCCCGCAUCCCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[13.65927982 355.50317383]
[8.46386433 369.57467651]
[3.26844859 383.64620972]
[-1.92696702 397.71771240]
[-7.12238264 411.78924561]
[-12.31779766 425.86074829]
[-9.01303005 441.92346191]
[-21.44942665 452.61309814]
[-36.83348846 446.93307495]
[-39.33941269 430.72650146]
[-26.38931656 420.66534424]
[-21.19390106 406.59384155]
[-15.99848652 392.52230835]
[-10.80307102 378.45077515]
[-5.60765505 364.37927246]
[-0.41223970 350.30773926]
[-18.14472389 342.44259644]
[-35.26599121 333.32315063]
[-51.68745804 322.99664307]
[-67.32417297 311.51644897]
[-82.09523773 298.94198608]
[-95.92424011 285.33828735]
[-108.73962402 270.77575684]
[-120.47510529 255.32969666]
[-131.06994629 239.08006287]
[-140.46937561 222.11090088]
[-148.62472534 204.50997925]
[-155.49380493 186.36839294]
[-161.04110718 167.77998352]
[-165.23791504 148.84091187]
[-168.06251526 129.64915466]
[-169.50030518 110.30401611]
[-184.49949646 110.46005249]
[-199.49868774 110.61608887]
[-214.49786377 110.77212524]
[-228.33079529 119.58020020]
[-242.74830627 111.76562500]
[-242.91889954 95.36737061]
[-228.66708374 87.25454712]
[-214.65390015 95.77294159]
[-199.65472412 95.61690521]
[-184.65553284 95.46086884]
[-169.65634155 95.30483246]
[-169.03459167 81.10622406]
[-167.66574097 66.96008301]
[-165.55360413 52.90569687]
[-162.70402527 38.98208618]
[-159.12492371 25.22792053]
[-154.82623291 11.68139648]
[-149.81991577 -1.61987090]
[-144.11984253 -14.63894367]
[-137.74186707 -27.33966827]
[-130.70368958 -39.68677521]
[-123.02485657 -51.64597321]
[-114.72668457 -63.18405914]
[-105.83222961 -74.26898956]
[-96.36618805 -84.86997986]
[-86.35483551 -94.95758820]
[-75.82598877 -104.50381470]
[-64.80887604 -113.48213196]
[-53.33409882 -121.86762238]
[-41.43351364 -129.63699341]
[-29.14017677 -136.76866150]
[-16.48821831 -143.24284363]
[-3.51277804 -149.04154968]
[9.75011444 -154.14866638]
[23.26362801 -158.55003357]
[36.99023438 -162.23339844]
[50.89181900 -165.18856812]
[64.92977142 -167.40730286]
[79.06511688 -168.88346863]
[93.25859833 -169.61294556]
[107.47079468 -169.59371948]
[121.66224670 -168.82585144]
[135.79354858 -167.31144714]
[149.82545471 -165.05473328]
[163.71899414 -162.06198120]
[177.43557739 -158.34147644]
[190.93713379 -153.90357971]
[204.18615723 -148.76058960]
[217.14587402 -142.92680359]
[229.78025818 -136.41842651]
[242.05426025 -129.25350952]
[250.30654907 -141.77947998]
[258.55883789 -154.30543518]
[252.96774292 -168.78022766]
[256.98504639 -183.76824951]
[269.06600952 -193.50631714]
[284.56527710 -194.24993896]
[297.52301025 -185.71318054]
[302.95675659 -171.17858887]
[298.77709961 -156.23503113]
[286.59121704 -146.62858582]
[271.08480835 -146.05314636]
[262.83251953 -133.52719116]
[254.58023071 -121.00122833]
[265.64962769 -112.83042145]
[276.28793335 -104.10572815]
[286.46746826 -94.84986115]
[296.16171265 -85.08690643]
[305.34548950 -74.84227753]
[313.99484253 -64.14262390]
[322.08728027 -53.01579285]
[329.60174561 -41.49074554]
[336.51867676 -29.59747696]
[342.82006836 -17.36693764]
[348.48956299 -4.83095312]
[353.51235962 7.97784805]
[357.87539673 21.02613258]
[361.56732178 34.27994537]
[364.57852173 47.70478821]
[366.90118408 61.26573181]
[368.52923584 74.92747498]
[369.45846558 88.65447235]
[369.68643188 102.41099548]
[369.21255493 116.16123962]
[368.03805542 129.86943054]
[366.16601562 143.49987793]
[363.60128784 157.01713562]
[360.35052490 170.38598633]
[356.42224121 183.57168579]
[351.82659912 196.53987122]
[346.57562256 209.25683594]
[340.68292236 221.68945312]
[334.16384888 233.80537415]
[327.03540039 245.57307434]
[319.31607056 256.96194458]
[311.02600098 267.94229126]
[302.18673706 278.48559570]
[292.82128906 288.56442261]
[282.95404053 298.15249634]
[272.61065674 307.22488403]
[261.81805420 315.75796509]
[250.60433960 323.72958374]
[238.99867249 331.11892700]
[227.03128052 337.90679932]
[214.73329163 344.07553101]
[202.13670349 349.60906982]
[189.27432251 354.49298096]
[176.17959595 358.71463013]
[162.88662720 362.26296997]
[149.42999268 365.12875366]
[135.84471130 367.30459595]
[122.16615295 368.78475952]
[108.42990875 369.56542969]
[94.67173004 369.64456177]
[80.92741394 369.02197266]
[67.23273468 367.69924927]
[53.62332535 365.67987061]
[40.13461304 362.96905518]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 16]
[2 15]
[3 14]
[4 13]
[5 12]
[6 11]
[32 43]
[33 42]
[34 41]
[35 40]
[83 96]
[84 95]
[85 94]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
