%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:48 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCAGCUGUCUCUUACUUUUAACCAGUGAAAUUGACCUGCCCGUGAAGAGGCGGGCAUAACAxxxxxxxxxxCUCCCACCCUGGAGCCUCCGUAGACCUAACCAUCUUCUCCUUACACCUAGCAGGUGUCUCCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[109.18260956 209.41827393]
[108.24697876 194.44747925]
[107.31135559 179.47668457]
[106.37572479 164.50590515]
[105.44009399 149.53511047]
[104.50446320 134.56431580]
[103.56884003 119.59352875]
[90.95771027 111.47198486]
[76.94099426 116.81349945]
[62.92428207 122.15500641]
[48.90756989 127.49652100]
[34.89085770 132.83802795]
[20.87414551 138.17955017]
[16.34134102 143.13546753]
[10.81133652 144.76345825]
[6.16164446 143.43836975]
[-8.06513500 148.19218445]
[-22.29191399 152.94599915]
[-29.39843559 166.80728149]
[-43.89413071 171.42565918]
[-57.06494904 164.56524658]
[-71.29173279 169.31906128]
[-85.41653442 174.36782837]
[-99.43324280 179.70933533]
[-113.44995880 185.05085754]
[-118.40565491 199.88240051]
[-131.76243591 208.01446533]
[-147.21363831 205.60731506]
[-157.46368408 193.79754639]
[-157.67279053 178.16136169]
[-147.74224854 166.08168030]
[-132.36094666 163.26219177]
[-118.79147339 171.03413391]
[-104.77475739 165.69262695]
[-90.75804138 160.35110474]
[-88.00183105 156.37886047]
[-82.69283295 154.13256836]
[-76.04554749 155.09228516]
[-61.81876373 150.33847046]
[-55.41793060 136.93829346]
[-41.05767441 131.91458130]
[-27.04572868 138.71922302]
[-12.81894970 133.96540833]
[1.40782940 129.21159363]
[15.53263283 124.16283417]
[29.54934502 118.82131958]
[43.56605911 113.47980499]
[57.58277130 108.13829803]
[71.59948730 102.79678345]
[85.61619568 97.45526886]
[97.11800385 87.82674408]
[104.84208679 74.96834564]
[112.56616974 62.10993958]
[102.88555908 40.60789490]
[110.01696014 18.34755898]
[130.03408813 6.68111134]
[130.96972656 -8.28968048]
[131.90534973 -23.26047134]
[132.84097290 -38.23126221]
[133.77661133 -53.20205307]
[134.08866882 -68.19880676]
[133.77661133 -83.19556427]
[133.46455383 -98.19231415]
[118.77986145 -101.62899780]
[105.41157532 -108.61037445]
[94.20001984 -118.69759369]
[85.84997559 -131.25654602]
[80.88632202 -145.49778748]
[79.62108612 -160.52610779]
[82.13380432 -175.39677429]
[88.26651764 -189.17504883]
[97.63372040 -200.99479675]
[109.64658356 -210.11300659]
[123.54997253 -215.95652771]
[138.46989441 -218.15800476]
[153.46849060 -216.57907104]
[167.60292053 -211.31898499]
[179.98469543 -202.70837402]
[189.83547974 -191.28851318]
[196.53602600 -177.77728271]
[199.66517639 -163.02400208]
[199.02618408 -147.95608521]
[194.65924072 -133.52067566]
[186.83886719 -120.62524414]
[176.05662537 -110.08037567]
[162.99032593 -102.54894257]
[148.46130371 -98.50437164]
[148.77336121 -83.50762177]
[149.08541870 -68.51086426]
[151.08224487 -66.45660400]
[152.35820007 -63.46228409]
[152.54135132 -59.80874634]
[151.37217712 -55.90950394]
[148.74740601 -52.26642609]
[147.81176758 -37.29563522]
[146.87614441 -22.32484245]
[145.94052124 -7.35405159]
[145.00488281 7.61673975]
[151.65046692 10.50879669]
[157.48036194 14.81460667]
[162.19891357 20.31579208]
[165.56680298 26.73335075]
[180.42984009 24.71101570]
[195.29289246 22.68868256]
[200.45361328 8.27946472]
[211.72735596 -2.07241774]
[226.52348328 -5.98817825]
[241.44195557 -2.56800437]
[253.05462646 7.40217352]
[258.69299316 21.63128090]
[257.06137085 36.84957504]
[248.53472900 49.56000137]
[235.07241821 56.84179688]
[219.76795959 57.02165604]
[206.13822937 50.05825424]
[197.31523132 37.55172729]
[182.45217896 39.57406235]
[167.58912659 41.59639740]
[165.37803650 50.88656616]
[160.52178955 59.15864182]
[153.42466736 65.67472839]
[144.69210815 69.84516144]
[135.07901001 71.28179169]
[125.42457581 69.83402252]
[117.70048523 82.69242859]
[109.97640228 95.55082703]
[122.91957092 87.96964264]
[132.71380615 76.60861206]
[146.09965515 69.83966064]
[161.05517578 68.68526459]
[175.32125854 73.31979370]
[186.74296570 83.04319763]
[193.59501648 96.38671875]
[194.84237671 111.33476257]
[190.29663086 125.62938690]
[180.64442444 137.11132812]
[167.34376526 144.04620361]
[152.40376282 145.38647461]
[138.08116150 140.92968750]
[126.53810120 131.34744263]
[118.53962708 118.65789795]
[119.47525787 133.62869263]
[120.41088867 148.59948730]
[121.34651184 163.57026672]
[122.28214264 178.54106140]
[123.21777344 193.51185608]
[124.15339661 208.48265076]
[133.66873169 221.83894348]
[126.61428833 236.64321899]
[110.24707031 237.66612244]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 147]
[2 146]
[3 145]
[4 144]
[5 143]
[6 142]
[7 141]
[8 50]
[9 49]
[10 48]
[11 47]
[12 46]
[13 45]
[16 44]
[17 43]
[18 42]
[21 39]
[22 38]
[23 35]
[24 34]
[25 33]
[51 126]
[52 125]
[53 124]
[56 98]
[57 97]
[58 96]
[59 95]
[60 94]
[61 89]
[62 88]
[63 87]
[102 118]
[103 117]
[104 116]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
