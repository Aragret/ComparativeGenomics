%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:24 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGAUCCCCACCUUGGCUAUCAUCACCCGAUGAGGCAACCAGCCAGAACGCCUGAACGCAGGCxxxxxxxxxxACCUAACCUGACUAGAAAAGCUAUUACCUAAAACAAUUUCACAGCACCAAAUCUCCACCUCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[124.94638062 153.69389343]
[120.98389435 139.22404480]
[114.63676453 152.81498718]
[115.80781555 168.59280396]
[103.41188812 176.85054016]
[97.06475830 190.44148254]
[90.71762848 204.03244019]
[84.37049866 217.62338257]
[86.32862091 233.90521240]
[73.04669189 243.52406311]
[58.18802261 236.58489990]
[57.03794098 220.22613525]
[70.77954865 211.27626038]
[77.12667847 197.68530273]
[83.47380829 184.09436035]
[89.82093811 170.50340271]
[88.19589996 155.69770813]
[101.04581451 146.46786499]
[107.39294434 132.87690735]
[103.20187378 126.65718842]
[90.62865448 107.99803162]
[75.64894104 108.77787781]
[60.66922760 109.55771637]
[45.68951416 110.33756256]
[30.70979881 111.11740875]
[29.04356575 126.27030945]
[13.16876984 138.82878113]
[-1.59728611 141.46765137]
[-16.36334229 144.10650635]
[-31.12939644 146.74537659]
[-45.89545441 149.38424683]
[-58.07794189 160.36235046]
[-73.59088135 155.04438782]
[-76.47588348 138.90100098]
[-63.76511765 128.53913879]
[-48.53431702 134.61817932]
[-33.76826096 131.97932434]
[-19.00220680 129.34045410]
[-4.23615026 126.70159149]
[10.52990532 124.06272888]
[11.15388298 109.07571411]
[-3.34171414 105.21855164]
[-20.20300484 106.98863220]
[-26.57158279 91.27629852]
[-13.23628616 80.80699921]
[0.51544535 90.72295380]
[15.01104164 94.58011627]
[29.92995453 96.13769531]
[44.90966797 95.35784912]
[59.88938141 94.57800293]
[74.86909485 93.79815674]
[89.84880829 93.01831818]
[93.50836182 86.47174072]
[80.41532898 79.15241241]
[87.73487091 66.05950165]
[100.82746887 73.37858582]
[104.48702240 66.83200836]
[97.30451202 53.66342545]
[90.12200165 40.49484253]
[82.93949890 27.32625771]
[75.75698853 14.15767574]
[61.48388672 6.08236742]
[61.61134720 -10.31628418]
[76.00824738 -18.16875267]
[89.86429596 -9.39709091]
[88.92556763 6.97516727]
[96.10807800 20.14374924]
[103.29058838 33.31233215]
[110.47309875 46.48091507]
[117.65560150 59.64949799]
[120.39537048 44.90182877]
[124.17623901 30.38614845]
[128.97909546 16.17585182]
[134.77966309 2.34279585]
[141.54859924 -11.04307175]
[149.25169373 -23.91406441]
[157.84997559 -36.20510101]
[167.29997253 -47.85402679]
[177.55390930 -58.80194473]
[188.55992126 -68.99349213]
[200.26237488 -78.37712860]
[212.60206604 -86.90541840]
[225.51663208 -94.53523254]
[238.94076538 -101.22798920]
[252.80656433 -106.94984436]
[267.04391479 -111.67185974]
[281.58084106 -115.37017822]
[296.34387207 -118.02607727]
[311.25827026 -119.62613678]
[326.24868774 -120.16226959]
[341.23931885 -119.63175964]
[356.15432739 -118.03728485]
[370.91830444 -115.38691711]
[385.45663452 -111.69405365]
[399.69577026 -106.97737122]
[413.56372070 -101.26071167]
[426.99032593 -94.57299042]
[439.90777588 -86.94802094]
[452.25067139 -78.42435455]
[463.95663452 -69.04510498]
[474.96646118 -58.85768127]
[485.22448730 -47.91360855]
[494.67886353 -36.26822662]
[503.28173828 -23.98041344]
[510.98965454 -11.11230946]
[517.76361084 2.27102041]
[523.56933594 16.10190010]
[528.37756348 30.31039619]
[532.16387939 44.82466125]
[534.90917969 59.57130051]
[536.59954834 74.47574615]
[537.22650146 89.46263885]
[536.78680420 104.45619202]
[535.28271484 119.38059235]
[532.72180176 134.16036987]
[529.11712646 148.72079468]
[524.48675537 162.98825073]
[518.85424805 176.89056396]
[512.24798584 190.35746765]
[504.70138550 203.32084656]
[496.25265503 215.71514893]
[486.94448853 227.47772217]
[476.82397461 238.54907227]
[465.94223022 248.87322998]
[454.35433960 258.39794922]
[442.11886597 267.07513428]
[429.29769897 274.86087036]
[415.95565796 281.71575928]
[402.16021729 287.60519409]
[387.98110962 292.49938965]
[373.49005127 296.37356567]
[358.76031494 299.20812988]
[343.86636353 300.98876953]
[328.88354492 301.70648193]
[313.88760376 301.35766602]
[298.95437622 299.94400024]
[284.15933228 297.47271729]
[269.57736206 293.95626831]
[255.28211975 289.41244507]
[241.34593201 283.86425781]
[227.83924866 277.33969116]
[214.83039856 269.87179565]
[202.38513184 261.49829102]
[190.56637573 252.26156616]
[179.43392944 242.20828247]
[169.04403687 231.38931274]
[159.44927979 219.85932922]
[150.69813538 207.67665100]
[142.83488464 194.90287781]
[135.89926147 181.60260010]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 19]
[3 18]
[5 16]
[6 15]
[7 14]
[8 13]
[21 52]
[22 51]
[23 50]
[24 49]
[25 48]
[27 40]
[28 39]
[29 38]
[30 37]
[31 36]
[41 47]
[42 46]
[57 70]
[58 69]
[59 68]
[60 67]
[61 66]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
