%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:29 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGUCCUAAUCACAGCAGUCCUACUUCUCCUAUCUCUCCCAGUCCUAGCUGCUGGCAUCACUAxxxxxxxxxxAAAUACUACCGUAUGGCCCACCAUAAUUACCCCCAUACUCCUUACACUAUUCCUCAUCACCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[215.41021729 282.47677612]
[213.85263062 267.55786133]
[212.29505920 252.63896179]
[210.73747253 237.72004700]
[209.17988586 222.80113220]
[203.69285583 208.84074402]
[194.67532349 196.85391235]
[185.65780640 184.86708069]
[176.64027405 172.88024902]
[167.62274170 160.89341736]
[158.60520935 148.90658569]
[155.11787415 148.06634521]
[151.87893677 145.45657349]
[149.73345947 141.21990967]
[149.42697144 135.87896729]
[141.17468262 123.35301208]
[132.92239380 110.82704926]
[111.52115631 129.16848755]
[86.52684784 124.62038422]
[75.69058228 104.75547028]
[60.78867722 103.04277802]
[45.88677597 101.33008575]
[30.98487282 99.61740112]
[16.08297157 97.90470886]
[1.18106890 96.19201660]
[-13.72083378 94.47933197]
[-24.95924759 107.07894135]
[-41.32587433 110.48702240]
[-56.35827255 103.55933380]
[-64.24023438 89.19339752]
[-79.17454529 87.79109955]
[-94.10884857 86.38879395]
[-100.86452484 99.98016357]
[-112.07641602 110.21041107]
[-126.22819519 115.69599152]
[-141.40596008 115.69501495]
[-155.55703735 110.20761871]
[-166.76760864 99.97592926]
[-173.52153015 86.38369751]
[-174.90541077 71.26915741]
[-170.73207092 56.67642593]
[-161.56593323 44.57905960]
[-148.64663696 36.61311722]
[-133.72142029 33.85593033]
[-118.80877686 36.68038940]
[-105.92552948 44.70450592]
[-96.81404114 56.84308624]
[-92.70655060 71.45448303]
[-77.77223969 72.85678864]
[-62.83793259 74.25909424]
[-54.95604706 63.43911743]
[-42.65163803 57.89718246]
[-29.10945320 59.18548203]
[-17.89328575 67.07286072]
[-12.00814342 79.57742310]
[2.89375854 81.29011536]
[17.79566002 83.00280762]
[32.69756317 84.71549225]
[47.59946442 86.42818451]
[62.50136948 88.14087677]
[77.40326691 89.85356140]
[88.30089569 72.68647003]
[111.53761292 67.31985474]
[97.05826569 63.17707062]
[83.80822754 56.01811600]
[72.40723419 46.17782593]
[63.38851547 34.11644745]
[57.17390823 20.39811516]
[54.05406952 5.66445637]
[54.17492676 -9.39540672]
[57.53082275 -24.07709694]
[63.96480179 -37.69392395]
[73.17593384 -49.60900497]
[84.73339081 -59.26505280]
[98.09661102 -66.21043396]
[112.64057922 -70.12030029]
[127.68504333 -70.81177521]
[142.52635193 -68.25253296]
[156.47033691 -62.56225586]
[168.86482239 -54.00709534]
[179.13009644 -42.98719788]
[186.78604126 -30.01797485]
[191.47454834 -15.70602512]
[192.97636414 -0.72074354]
[191.22120667 14.23698044]
[186.29119873 28.46754837]
[178.41690063 41.30537033]
[167.96664429 52.14999771]
[155.42916870 60.49420547]
[141.39088440 65.94772339]
[126.50839996 68.25547791]
[139.60156250 75.57458496]
[151.86392212 66.93547058]
[164.12629700 58.29635239]
[176.38865662 49.65723801]
[188.65103149 41.01811981]
[195.04383850 25.91633034]
[211.34979248 24.17057037]
[220.79473877 37.57672882]
[213.66252136 52.34370041]
[197.29014587 53.28049088]
[185.02777100 61.91960526]
[172.76541138 70.55872345]
[160.50303650 79.19783783]
[148.24067688 87.83695221]
[145.44834900 102.57476044]
[153.70063782 115.10072327]
[161.95292664 127.62668610]
[170.59204102 139.88905334]
[179.60957336 151.87588501]
[188.62710571 163.86271667]
[197.64463806 175.84954834]
[206.66215515 187.83638000]
[215.67968750 199.82321167]
[214.25628662 184.89089966]
[216.12831116 170.00817871]
[221.20541382 155.89353943]
[229.24247742 143.22839355]
[239.85147095 132.62420654]
[252.52024841 124.59288788]
[266.63720703 119.52218628]
[281.52075195 117.65689850]
[296.45242310 119.08707428]
[310.71133423 123.74366760]
[323.60906982 131.40187073]
[334.52301025 141.69197083]
[342.92620850 154.11718750]
[348.41302490 168.07766724]
[350.71856689 182.89942932]
[349.73150635 197.86691284]
[345.49951172 212.25753784]
[338.22686768 225.37657166]
[328.26470947 236.59063721]
[316.09396362 245.35836792]
[302.30221558 251.25648499]
[287.55529785 254.00022888]
[272.56512451 253.45715332]
[258.05541992 249.65345764]
[244.72662354 242.77278137]
[233.22225952 233.14732361]
[224.09880066 221.24356079]
[225.65638733 236.16246033]
[227.21395874 251.08137512]
[228.77154541 266.00030518]
[230.32913208 280.91918945]
[242.76078796 290.67776489]
[244.56797791 306.37838745]
[234.67852783 318.70617676]
[218.95968628 320.34725952]
[206.73713684 310.32803345]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 145]
[2 144]
[3 143]
[4 142]
[5 141]
[6 114]
[7 113]
[8 112]
[9 111]
[10 110]
[11 109]
[15 108]
[16 107]
[17 106]
[20 61]
[21 60]
[22 59]
[23 58]
[24 57]
[25 56]
[26 55]
[30 50]
[31 49]
[32 48]
[63 91]
[92 105]
[93 104]
[94 103]
[95 102]
[96 101]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
