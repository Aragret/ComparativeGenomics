%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:33 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCUACGCAAAAUCUUAGCAUACUCCUCAAUUACCCACAUAGGAUGAAUAAUAGCAGUUCUAxxxxxxxxxxCCAUCAUCCACAACCUUAACAAUGAACAAGAUAUUCGAAAAAUAGGAGGACUACUCAAAACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[95.29220581 234.26551819]
[94.98014832 219.26876831]
[94.66809845 204.27200317]
[94.35604095 189.27525330]
[94.04398346 174.27850342]
[93.73192596 159.28175354]
[93.41986847 144.28498840]
[93.10781097 129.28823853]
[92.79576111 114.29148865]
[78.83536530 108.80445862]
[68.39555359 119.57526398]
[57.95574188 130.34606934]
[47.51593018 141.11688232]
[51.79921722 155.86642456]
[48.11829758 170.77770996]
[37.46332169 181.83967590]
[22.70042419 186.07670593]
[7.80075121 182.34906006]
[-3.22776127 171.65946960]
[-7.41849852 156.88336182]
[-3.64417291 141.99545288]
[7.07994080 131.00050354]
[21.86911011 126.85609436]
[36.74512100 130.67706299]
[47.18493271 119.90625763]
[57.62474823 109.13545227]
[68.06455994 98.36464691]
[81.56675720 87.83905029]
[94.63677216 89.05393982]
[89.29273224 74.16260529]
[99.03169250 62.89309311]
[101.51680756 48.10038376]
[104.00193024 33.30767822]
[106.48704529 18.51497078]
[108.97216797 3.72226334]
[106.99106598 -2.69511628]
[108.38500977 -8.28870392]
[111.88067627 -11.62874603]
[114.97899628 -26.30527115]
[118.07731628 -40.98179626]
[109.06204987 -48.53908157]
[103.83464050 -58.93064880]
[103.15643311 -70.41142273]
[89.25387573 -76.04337311]
[73.97924042 -71.13777161]
[60.70062637 -80.14099121]
[59.60425568 -96.14653778]
[71.53116608 -106.87632751]
[87.33205414 -104.09938049]
[94.88583374 -89.94593048]
[108.78839111 -84.31397247]
[120.36387634 -93.23246002]
[134.84533691 -95.18659210]
[140.62161255 -109.02980804]
[146.39787292 -122.87303162]
[152.17414856 -136.71624756]
[157.95042419 -150.55946350]
[163.72669983 -164.40267944]
[154.90887451 -173.93533325]
[150.38912964 -186.05894470]
[150.81153870 -198.94384766]
[156.07720947 -210.65988159]
[165.36437988 -219.46549988]
[177.25650024 -224.06666565]
[189.95816040 -223.80690002]
[196.30528259 -237.39784241]
[202.65240479 -250.98880005]
[208.99954224 -264.57974243]
[196.64476013 -273.15106201]
[185.91636658 -283.68716431]
[177.12303162 -295.88491821]
[170.51777649 -309.39337158]
[166.29061890 -323.82388306]
[164.56321716 -338.76123047]
[165.38523865 -353.77563477]
[168.73306274 -368.43508911]
[174.51034546 -382.31784058]
[182.55087280 -395.02447510]
[192.62329102 -406.18933105]
[204.43780518 -415.49124146]
[217.65447998 -422.66250610]
[231.89306641 -427.49685669]
[246.74386597 -429.85516357]
[261.77960205 -429.66955566]
[276.56768799 -426.94543457]
[290.68261719 -421.76110840]
[303.71826172 -414.26580811]
[315.29959106 -404.67514038]
[325.09335327 -393.26504517]
[332.81781006 -380.36386108]
[338.25067139 -366.34271240]
[341.23562622 -351.60507202]
[341.68682861 -336.57495117]
[339.59124756 -321.68481445]
[335.00921631 -307.36303711]
[328.07254028 -294.02172852]
[318.98080444 -282.04473877]
[307.99563599 -271.77664185]
[295.43304443 -263.51287842]
[281.65451050 -257.49124146]
[267.05648804 -253.88497925]
[252.05894470 -252.79782104]
[237.09341431 -254.26106262]
[222.59049988 -258.23260498]
[216.24336243 -244.64166260]
[209.89624023 -231.05072021]
[203.54910278 -217.45976257]
[213.90936279 -203.77513123]
[215.96083069 -186.64489746]
[209.05429077 -170.73834229]
[194.99456787 -160.43669128]
[177.56991577 -158.62640381]
[171.79364014 -144.78318787]
[166.01736450 -130.93997192]
[160.24110413 -117.09675598]
[154.46482849 -103.25354004]
[148.68855286 -89.41032410]
[158.52180481 -75.56611633]
[158.70552063 -58.44016266]
[149.00769043 -44.14665604]
[132.75384521 -37.88347626]
[129.65551758 -23.20694923]
[126.55719757 -8.53042412]
[123.76487732 6.20738220]
[121.27975464 21.00008965]
[118.79463959 35.79279709]
[116.30951691 50.58550262]
[113.82440186 65.37821198]
[119.34619141 79.21147156]
[109.42947388 91.53905487]
[119.15396118 80.11827087]
[133.17312622 74.78321075]
[148.03015137 76.84939575]
[160.06156921 85.80735016]
[166.30068970 99.44821930]
[165.20907593 114.40844727]
[157.05589294 126.99914551]
[143.85156250 134.11570740]
[128.85197449 134.00332642]
[115.75575256 126.68971252]
[107.79251099 113.97943115]
[108.10456848 128.97618103]
[108.41662598 143.97294617]
[108.72868347 158.96969604]
[109.04073334 173.96644592]
[109.35279083 188.96319580]
[109.66484833 203.95996094]
[109.97690582 218.95671082]
[110.28896332 233.95346069]
[112.87995911 253.16117859]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 149]
[2 148]
[3 147]
[4 146]
[5 145]
[6 144]
[7 143]
[8 142]
[9 141]
[10 27]
[11 26]
[12 25]
[13 24]
[29 130]
[31 128]
[32 127]
[33 126]
[34 125]
[35 124]
[38 123]
[39 122]
[40 121]
[43 51]
[44 50]
[53 117]
[54 116]
[55 115]
[56 114]
[57 113]
[58 112]
[65 107]
[66 106]
[67 105]
[68 104]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
