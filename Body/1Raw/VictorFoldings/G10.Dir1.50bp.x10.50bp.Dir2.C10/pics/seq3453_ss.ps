%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:30 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCUCUUCACCAAAGAGCCCCUAAAACCCGCCACAUCUACCAUCACCCUCUACAUCACCGCCxxxxxxxxxxUACUGGGUCUCUAUUUUACCCUCCUACAAGCCUCAGAGUACUUCGAGUCUCCCUUCACCACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[-42.66810989 234.52725220]
[-53.96711349 244.39297485]
[-59.27339172 259.29779053]
[-73.94936371 261.84045410]
[-85.24836731 271.70617676]
[-96.54737091 281.57192993]
[-107.31817627 292.01171875]
[-117.53166199 302.99740601]
[-127.74514008 313.98306274]
[-137.95861816 324.96871948]
[-148.17210388 335.95437622]
[-158.38557434 346.94006348]
[-168.59906006 357.92572021]
[-178.81254578 368.91137695]
[-189.02601624 379.89703369]
[-189.88130188 395.91729736]
[-203.02285767 405.11938477]
[-218.36962891 400.44430542]
[-224.14886475 385.47833252]
[-215.92724609 371.70211792]
[-200.01168823 369.68356323]
[-189.79820251 358.69790649]
[-179.58471680 347.71224976]
[-169.37124634 336.72656250]
[-159.15776062 325.74090576]
[-148.94429016 314.75524902]
[-138.73080444 303.76956177]
[-128.51731873 292.78390503]
[-118.30384064 281.79824829]
[-133.10414124 279.35870361]
[-140.61003113 266.37173462]
[-135.33534241 252.32975769]
[-121.13541412 247.49630737]
[-108.38926697 255.40425110]
[-106.41309357 270.27291870]
[-95.11408997 260.40719604]
[-83.81508636 250.54145813]
[-79.31698608 236.34230042]
[-63.83283615 233.09396362]
[-52.53383255 223.22824097]
[-60.25421524 213.00601196]
[-67.29068756 202.30149841]
[-73.61322784 191.16040039]
[-79.19483948 179.63026428]
[-84.01171875 167.76029968]
[-88.04329681 155.60115051]
[-91.27237701 143.20471191]
[-93.68517303 130.62390137]
[-95.27139282 117.91239166]
[-96.02426147 105.12444305]
[-95.94056702 92.31462860]
[-95.02066803 79.53760529]
[-93.26849365 66.84790802]
[-90.69151306 54.29969406]
[-87.30072784 41.94651413]
[-83.11061096 29.84108353]
[-78.13904572 18.03506851]
[-72.40724945 6.57884884]
[-65.93967438 -4.47868156]
[-58.76393127 -15.09033489]
[-50.91063690 -25.21082306]
[-42.41331100 -34.79695511]
[-33.30821609 -43.80782318]
[-23.63420868 -52.20497131]
[-13.43257523 -59.95256042]
[-2.74685168 -67.01753235]
[8.37735939 -73.36972809]
[19.89258385 -78.98204803]
[31.74967766 -83.83052826]
[43.89803696 -87.89449310]
[56.28582382 -91.15658569]
[68.86016846 -93.60289764]
[81.56739807 -95.22297668]
[94.35330200 -96.00991058]
[107.16329956 -95.96035004]
[119.94272614 -95.07449341]
[132.63703918 -93.35613251]
[145.19207764 -90.81259918]
[157.55424500 -87.45473480]
[169.67080688 -83.29689026]
[181.49002075 -78.35679626]
[192.96147156 -72.65554047]
[204.03619385 -66.21745300]
[214.66693115 -59.07000351]
[224.80830383 -51.24370575]
[234.79103088 -62.43947220]
[244.77375793 -73.63523865]
[254.75648499 -84.83100128]
[250.52153015 -99.66571808]
[255.00097656 -114.42844391]
[266.76547241 -124.40844727]
[282.06097412 -126.42115021]
[296.00677490 -119.82430267]
[304.15280151 -106.72293091]
[303.89968872 -91.29764557]
[295.32821655 -78.47058868]
[281.17349243 -72.33483887]
[265.95223999 -74.84827423]
[255.96952820 -63.65251160]
[245.98680115 -52.45674515]
[236.00407410 -41.26097870]
[248.57150269 -27.97764587]
[259.84692383 -13.58138180]
[269.73226929 1.80261683]
[278.14157104 18.04056740]
[285.00170898 34.99126053]
[290.25302124 52.50728989]
[293.84985352 70.43632507]
[295.76089478 88.62245941]
[295.96954346 106.90753174]
[294.47396851 125.13253784]
[291.28720093 143.13897705]
[305.78280640 146.99613953]
[320.27841187 150.85330200]
[329.44274902 150.03672791]
[335.03381348 154.94442749]
[349.44604492 159.10231018]
[364.12872314 152.63713074]
[378.27041626 160.21284485]
[381.02285767 176.01802063]
[370.27459717 187.92828369]
[354.27078247 186.80708313]
[345.28814697 173.51452637]
[330.87594604 169.35664368]
[316.42123413 165.34889221]
[301.92565918 161.49174500]
[287.43005371 157.63458252]
[281.97091675 173.06405640]
[275.24407959 187.98454285]
[267.29644775 202.29208374]
[258.18334961 215.88702393]
[247.96826172 228.67463684]
[236.72238159 240.56585693]
[224.52403259 251.47782898]
[211.45820618 261.33456421]
[197.61590576 270.06735229]
[183.09358215 277.61538696]
[167.99238586 283.92608643]
[152.41752625 288.95547485]
[136.47750854 292.66851807]
[120.28337097 295.03936768]
[103.94793701 296.05148315]
[87.58499146 295.69781494]
[71.30854034 293.98086548]
[55.23196411 290.91253662]
[39.46725845 286.51422119]
[24.12425041 280.81658936]
[9.30982399 273.85931396]
[-4.87281752 265.69085693]
[-18.32487106 256.36813354]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 40]
[2 39]
[4 37]
[5 36]
[6 35]
[7 29]
[8 28]
[9 27]
[10 26]
[11 25]
[12 24]
[13 23]
[14 22]
[15 21]
[85 101]
[86 100]
[87 99]
[88 98]
[112 127]
[113 126]
[114 125]
[116 124]
[117 123]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
