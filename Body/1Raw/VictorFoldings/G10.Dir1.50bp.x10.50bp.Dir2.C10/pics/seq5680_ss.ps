%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:31 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCCUAAUCUACUCCACCUCAAUCACACUACUCCCCAUAUCUAACAACGUAAAAAUAAAAUGAxxxxxxxxxxCUAGACCAAUGGGACUUAAACCCACAAACACUUAGUUAACAGCUAAGCACCCUAAUCAACUCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[128.79975891 286.04913330]
[128.79975891 271.04913330]
[128.79975891 256.04913330]
[128.79975891 241.04914856]
[128.79975891 226.04914856]
[128.79975891 211.04914856]
[128.79975891 196.04914856]
[128.79975891 181.04914856]
[128.79975891 166.04914856]
[128.79975891 151.04914856]
[106.03612518 155.78625488]
[84.25498199 151.24687195]
[66.91967010 138.96093750]
[56.46448517 121.62276459]
[53.96127319 102.53993225]
[59.04713821 85.01610565]
[46.05675888 77.51610565]
[33.06637573 70.01610565]
[20.07599449 62.51610947]
[11.35082245 74.73195648]
[1.48736858 86.04866028]
[-9.42226982 96.36055756]
[-21.27623177 105.57137299]
[-33.96383667 113.59510040]
[-47.36661911 120.35682678]
[-61.35943985 125.79341125]
[-75.81164551 129.85409546]
[-90.58830261 132.50097656]
[-105.55143738 133.70932007]
[-120.56134796 133.46786499]
[-135.47787476 131.77883911]
[-150.16174316 128.65803528]
[-164.47586060 124.13459015]
[-178.28657532 118.25073242]
[-191.46492004 111.06140137]
[-203.88787842 102.63372803]
[-215.43943787 93.04638672]
[-226.01174927 82.38890839]
[-235.50608826 70.76079559]
[-243.83381653 58.27062607]
[-250.91717529 45.03501129]
[-256.69003296 31.17753601]
[-261.09848022 16.82758522]
[-264.10137939 2.11914611]
[-265.67065430 -12.81045151]
[-265.79168701 -27.82180977]
[-264.46331787 -42.77476883]
[-261.69796753 -57.52971268]
[-257.52145386 -71.94887543]
[-251.97276306 -85.89762115]
[-245.10371399 -99.24571991]
[-236.97843933 -111.86853790]
[-227.67280579 -123.64821625]
[-217.27371216 -134.47476196]
[-205.87823486 -144.24710083]
[-193.59277344 -152.87397766]
[-180.53204346 -160.27484131]
[-166.81799316 -166.38061523]
[-152.57867432 -171.13426208]
[-137.94702148 -174.49139404]
[-123.05966949 -176.42070007]
[-108.05560303 -176.90412903]
[-93.07493591 -175.93719482]
[-78.25752258 -173.52890015]
[-63.74172211 -169.70175171]
[-49.66306686 -164.49148560]
[-36.15300751 -157.94673157]
[-23.33768463 -150.12860107]
[-11.33675861 -141.11010742]
[-0.26227966 -130.97544861]
[9.78235054 -119.81923676]
[18.70334435 -107.74565887]
[26.41740990 -94.86743164]
[32.85251617 -81.30480194]
[37.94858551 -67.18440247]
[41.65803146 -52.63808060]
[43.94622040 -37.80165100]
[44.79178619 -22.81363678]
[44.18683624 -7.81398439]
[42.13701630 7.05725479]
[38.66146851 21.66123009]
[33.79264069 35.86158371]
[27.57599449 49.52572632]
[40.56637573 57.02572632]
[53.55675888 64.52572632]
[66.54714203 72.02572632]
[79.03312683 58.37333679]
[97.08278656 50.47601700]
[117.98672485 50.55942917]
[138.17793274 59.56354904]
[153.83950806 76.83215332]
[165.42855835 67.30881500]
[177.01760864 57.78548050]
[188.60664368 48.26214218]
[188.58625793 32.62457275]
[198.66186523 20.66563606]
[214.07608032 18.03197670]
[227.55076599 25.96712875]
[232.72361755 40.72435760]
[227.15214539 55.33574677]
[213.46704102 62.90224838]
[198.12998962 59.85119247]
[186.54093933 69.37452698]
[174.95188904 78.89786530]
[163.36283875 88.42120361]
[165.11743164 95.71308136]
[179.70117188 92.20391083]
[194.28497314 88.69496918]
[197.79370117 103.27883148]
[183.21034241 106.78765869]
[168.62658691 110.29682922]
[170.38117981 117.58870697]
[185.03390503 120.79769897]
[199.68663025 124.00669861]
[214.33935547 127.21569061]
[228.99208069 130.42468262]
[243.64480591 133.63368225]
[257.87451172 126.22458649]
[272.48025513 132.86178589]
[276.25772095 148.45378113]
[266.30917358 161.03973389]
[250.26629639 160.96476746]
[240.43580627 148.28640747]
[225.78308105 145.07740784]
[211.13035583 141.86842346]
[196.47763062 138.65942383]
[181.82490540 135.45042419]
[167.17218018 132.24142456]
[161.32907104 136.94335938]
[172.64958191 146.78440857]
[183.97007751 156.62545776]
[195.29057312 166.46650696]
[208.97866821 172.60133362]
[215.75286865 185.98454285]
[212.59213257 200.64775085]
[200.90603638 210.05174255]
[185.90612793 210.00271606]
[174.28175354 200.52252197]
[171.21701050 185.83842468]
[164.02563477 172.67469788]
[156.83424377 159.51095581]
[149.64286804 146.34721375]
[143.79975891 151.04914856]
[143.79975891 166.04914856]
[143.79975891 181.04914856]
[143.79975891 196.04914856]
[143.79975891 211.04914856]
[143.79975891 226.04914856]
[143.79975891 241.04914856]
[143.79975891 256.04913330]
[143.79975891 271.04913330]
[143.79975891 286.04913330]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 152]
[2 151]
[3 150]
[4 149]
[5 148]
[6 147]
[7 146]
[8 145]
[9 144]
[10 143]
[16 86]
[17 85]
[18 84]
[19 83]
[91 105]
[92 104]
[93 103]
[94 102]
[112 128]
[113 127]
[114 126]
[115 125]
[116 124]
[117 123]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
