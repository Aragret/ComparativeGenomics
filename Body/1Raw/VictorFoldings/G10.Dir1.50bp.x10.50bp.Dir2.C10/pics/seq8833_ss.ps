%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:26 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCCCCUAACAGGGGCCCUCUCAGCCCUCCUAAUGACCUCCGGCCUAGCCAUGUGAUUUCACxxxxxxxxxxACUCAAGCACUAUAGUUGUAGCAGGAAUCUUCUUACUCAUCCGCUUCCACCCCCUAGCAGCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[-29.54679871 233.31919861]
[-40.42562485 243.64640808]
[-51.30445099 253.97361755]
[-62.18327332 264.30081177]
[-73.06210327 274.62802124]
[-83.94092560 284.95523071]
[-94.26812744 295.83404541]
[-104.01578522 307.23507690]
[-113.76343536 318.63610840]
[-123.51108551 330.03710938]
[-133.25874329 341.43814087]
[-143.00639343 352.83917236]
[-152.75404358 364.24017334]
[-162.50169373 375.64120483]
[-172.24934387 387.04223633]
[-177.94667053 403.01022339]
[-194.86781311 401.95593262]
[-198.53895569 385.40420532]
[-183.65037537 377.29458618]
[-173.90270996 365.89355469]
[-164.15505981 354.49252319]
[-154.40740967 343.09152222]
[-144.65975952 331.69049072]
[-134.91210938 320.28945923]
[-125.16445160 308.88845825]
[-115.41680145 297.48742676]
[-105.66915131 286.08639526]
[-120.55811310 284.26464844]
[-128.59774780 271.60116577]
[-123.91174316 257.35189819]
[-109.92517853 251.93194580]
[-96.86110687 259.30282593]
[-94.26812744 274.07641602]
[-83.38930511 263.74920654]
[-72.51048279 253.42199707]
[-61.63165283 243.09478760]
[-50.75283051 232.76759338]
[-39.87400436 222.44038391]
[-52.77810669 205.90200806]
[-63.73676682 188.01509094]
[-72.61043549 169.00740051]
[-79.28611755 149.12100220]
[-83.67880249 128.60910034]
[-85.73256683 107.73288727]
[-85.42124939 86.75821686]
[-82.74880981 65.95215607]
[-77.74929047 45.57965851]
[-70.48634338 25.90013695]
[-61.05246353 7.16418791]
[-49.56777191 -10.38960838]
[-61.26739502 -19.77676964]
[-72.96701813 -29.16393280]
[-89.10501099 -34.36023712]
[-88.57921600 -51.30603027]
[-72.15011597 -55.49184799]
[-63.57985687 -40.86355591]
[-51.88023376 -31.47639465]
[-40.18061066 -22.08923149]
[-33.12280273 -29.74861526]
[-25.64710045 -37.00069427]
[-17.77696800 -43.82270432]
[-9.53711224 -50.19322586]
[-0.95339966 -56.09226608]
[7.94722414 -61.50130081]
[17.13681793 -66.40335846]
[26.58653450 -70.78304291]
[36.26670837 -74.62660980]
[46.14695358 -77.92198944]
[56.19625473 -80.65883636]
[66.38306427 -82.82856750]
[76.67539978 -84.42436981]
[87.04095459 -85.44122314]
[97.44719696 -85.87594604]
[107.86145020 -85.72717285]
[118.25102234 -84.99536133]
[128.58329773 -83.68282318]
[138.82585144 -81.79366302]
[148.94651794 -79.33382416]
[158.91354370 -76.31102753]
[168.69561768 -72.73475647]
[178.26205444 -68.61623383]
[187.58280945 -63.96839905]
[196.62861633 -58.80583954]
[205.37109375 -53.14475632]
[213.78279114 -47.00292206]
[221.83731079 -40.39962387]
[229.50935364 -33.35558319]
[236.77484131 -25.89291382]
[243.61097717 -18.03504562]
[249.99627686 -9.80664253]
[255.91072083 -1.23353648]
[261.33572388 7.65735960]
[266.25430298 16.83813667]
[270.65093994 26.27997208]
[274.51187134 35.95323181]
[277.82498169 45.82754135]
[280.57989502 55.87191010]
[282.76791382 66.05480957]
[284.38217163 76.34426117]
[285.41766357 86.70797729]
[300.41033936 86.23993683]
[315.40304565 85.77188873]
[323.94686890 82.35797119]
[330.71179199 85.45334625]
[345.71099854 85.29730988]
[360.71017456 85.14127350]
[366.72052002 71.14857483]
[377.90701294 60.81500626]
[392.33148193 55.93091965]
[407.49484253 57.34251785]
[420.76992798 64.80522156]
[429.85675049 77.02608490]
[433.18096924 91.88776398]
[430.16665649 106.81537628]
[421.33602905 119.22263336]
[408.21908569 126.95989990]
[393.08837891 128.68664551]
[378.56539917 124.10369873]
[367.16638184 114.00508881]
[360.86621094 100.14045715]
[345.86703491 100.29649353]
[330.86782837 100.45252991]
[315.87109375 100.76458740]
[300.87838745 101.23262787]
[285.88568115 101.70067596]
[285.04562378 117.73416138]
[282.82516479 133.63536072]
[279.24093628 149.28565979]
[274.31958008 164.56829834]
[268.09790039 179.36927795]
[260.62225342 193.57818604]
[251.94841003 207.08903503]
[242.14109802 219.80105591]
[231.27346802 231.61938477]
[219.42657471 242.45588684]
[206.68879700 252.22970581]
[193.15516663 260.86795044]
[178.92662048 268.30618286]
[164.10932922 274.48889160]
[148.81378174 279.36999512]
[133.15411377 282.91305542]
[117.24713135 285.09164429]
[101.21148682 285.88952637]
[85.16680145 285.30072021]
[69.23276520 283.32965088]
[53.52824783 279.99099731]
[38.17039108 275.30969238]
[23.27376175 269.32061768]
[8.94948292 262.06845093]
[-4.69559097 253.60734558]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 38]
[2 37]
[3 36]
[4 35]
[5 34]
[6 33]
[7 27]
[8 26]
[9 25]
[10 24]
[11 23]
[12 22]
[13 21]
[14 20]
[15 19]
[50 58]
[51 57]
[52 56]
[100 125]
[101 124]
[102 123]
[104 122]
[105 121]
[106 120]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
