%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:58 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGAGAGCCCACUGUAAAGCUAACUUAGCAUUAACCUUUUAAGUUAAAGAUUAAGAGAACCAAxxxxxxxxxxAGUUGUAGCAGGAAUCUUCUUACUCAUCCGCUUCCACCCCCUAGCAGAAAAUAGCCCACUCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[92.50000000 472.25247192]
[92.50000000 457.25247192]
[92.50000000 442.25247192]
[92.50000000 427.25247192]
[92.50000000 412.25247192]
[92.50000000 397.25247192]
[92.50000000 382.25247192]
[92.50000000 367.25247192]
[92.50000000 352.25247192]
[92.50000000 337.25247192]
[77.77018738 334.51882935]
[63.78981781 329.12356567]
[51.03553772 321.24905396]
[39.94248962 311.16229248]
[30.88946152 299.20565796]
[24.18593407 285.78549194]
[20.06152153 271.35818481]
[18.65810013 256.41470337]
[20.02492142 241.46380615]
[24.11689758 227.01484680]
[30.79607773 213.56027222]
[39.83630371 201.55899048]
[50.93086243 191.42059326]
[63.70289993 183.49143982]
[77.71820831 178.04283142]
[92.50000000 175.26168823]
[92.50000000 160.26168823]
[92.50000000 145.26168823]
[92.50000000 130.26168823]
[74.32748413 117.69014740]
[69.05128479 96.23214722]
[55.03457642 90.89063263]
[41.01786423 85.54911804]
[27.00115013 80.20761108]
[8.92799091 83.57521820]
[-1.65148938 69.60831451]
[-17.25071907 72.24925232]
[-26.63115120 60.67960739]
[-40.75595474 55.63084793]
[-54.88075638 50.58209229]
[-69.00556183 45.53333664]
[-83.13036346 40.48458099]
[-96.53522491 48.53714371]
[-111.97184753 46.03824234]
[-122.15154266 34.16778183]
[-122.26776886 18.53063202]
[-112.26563263 6.51017332]
[-96.86785126 3.78210187]
[-83.34478760 11.63452816]
[-78.08160400 26.35977745]
[-63.95680237 31.40853500]
[-49.83200073 36.45729065]
[-35.70719910 41.50604630]
[-21.58239365 46.55480194]
[-6.99346447 43.55273819]
[3.39726710 55.48350906]
[14.50283813 50.58722687]
[26.33809662 54.72795105]
[32.34266281 66.19089508]
[46.35937500 71.53240967]
[60.37608719 76.87391663]
[74.39279938 82.21543121]
[79.52964020 73.88480377]
[87.41165924 67.14228058]
[97.51299286 62.89197540]
[96.88901520 47.90496063]
[96.26503754 32.91794205]
[81.97937775 27.72290802]
[70.77258301 17.45274925]
[64.35359955 3.67359304]
[63.70128632 -11.51334000]
[68.91510773 -25.79215240]
[79.20000458 -36.98542786]
[92.98758698 -43.38627625]
[108.17536926 -44.01861191]
[122.44731140 -38.78601074]
[133.62704468 -28.48640251]
[140.00975037 -14.69040680]
[140.62210083 0.49818942]
[135.37074280 14.76323509]
[125.05643463 25.92941475]
[111.25205231 32.29396439]
[111.87602997 47.28098297]
[112.50000763 62.26799774]
[125.59316254 69.58710480]
[138.68630981 62.26799774]
[151.54472351 54.54391479]
[164.15583801 46.42237091]
[176.76696777 38.30083084]
[182.33300781 30.97477341]
[189.72601318 30.14468384]
[202.50337219 22.28725815]
[215.28073120 14.42983246]
[213.22758484 -0.66004705]
[217.49577332 -15.27861118]
[227.34582520 -26.89310646]
[241.07113647 -33.49125290]
[256.29373169 -33.92987823]
[270.37622070 -28.13298798]
[280.87866211 -17.10493279]
[285.98153687 -2.75638556]
[284.80065918 12.42667866]
[277.54067993 25.81370354]
[265.45938110 35.08530426]
[250.64997864 38.63512421]
[235.67825317 35.84812927]
[223.13815308 27.20718956]
[210.36080933 35.06461716]
[197.58345032 42.92204285]
[184.88851929 50.91195679]
[172.27738953 59.03350067]
[159.66625977 67.15504456]
[158.57453918 70.57200623]
[155.73603821 73.61248779]
[151.35450745 75.44405365]
[146.00541687 75.36115265]
[132.91226196 82.68025970]
[135.72113037 95.62157440]
[133.78456116 108.28520966]
[127.66116333 119.04383850]
[118.42711639 126.62532806]
[107.50000000 130.26168823]
[107.50000000 145.26168823]
[107.50000000 160.26168823]
[107.50000000 175.26168823]
[122.28179169 178.04283142]
[136.29710388 183.49143982]
[149.06913757 191.42059326]
[160.16369629 201.55899048]
[169.20391846 213.56027222]
[175.88310242 227.01484680]
[179.97508240 241.46380615]
[181.34190369 256.41470337]
[179.93847656 271.35818481]
[175.81407166 285.78549194]
[169.11053467 299.20565796]
[160.05751038 311.16229248]
[148.96446228 321.24905396]
[136.21018982 329.12356567]
[122.22981262 334.51882935]
[107.50000000 337.25247192]
[107.50000000 352.25247192]
[107.50000000 367.25247192]
[107.50000000 382.25247192]
[107.50000000 397.25247192]
[107.50000000 412.25247192]
[107.50000000 427.25247192]
[107.50000000 442.25247192]
[107.50000000 457.25247192]
[107.50000000 472.25247192]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[26 125]
[27 124]
[28 123]
[29 122]
[31 62]
[32 61]
[33 60]
[34 59]
[36 56]
[38 54]
[39 53]
[40 52]
[41 51]
[42 50]
[65 84]
[66 83]
[67 82]
[85 117]
[86 116]
[87 112]
[88 111]
[89 110]
[91 109]
[92 108]
[93 107]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
