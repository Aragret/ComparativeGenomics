%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:18 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCAAGGACUUCAAACUCUACUCCCACUAAUAGCUUUUUGAUGACUUCUAGCAAGCCUCGCUAACCxxxxxxxxxxAAACAACAAUCCCCCUCUACCUAAAACUCACAGCCCUCGCUGUCACUUUCCUAGGACUUCUAACCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[97.08248138 269.45169067]
[97.08248138 254.45169067]
[97.08248138 239.45169067]
[97.08248138 224.45169067]
[97.08248138 209.45169067]
[97.08248138 194.45169067]
[97.08248138 179.45169067]
[97.08248138 164.45169067]
[97.08248138 149.45169067]
[97.08248138 134.45169067]
[79.54973602 122.89431763]
[73.69862366 105.25318909]
[79.31497192 90.07292175]
[68.65611267 79.51883698]
[57.99724579 68.96475983]
[46.72086334 78.86566162]
[34.78129196 87.95584869]
[22.23670578 96.19101715]
[9.14821720 103.53105927]
[-4.42040491 109.94020844]
[-18.40305710 115.38724518]
[-32.73161316 119.84562683]
[-47.33626938 123.29363251]
[-62.14587021 125.71446228]
[-77.08826447 127.09632874]
[-92.09066010 127.43249512]
[-107.07995605 126.72132111]
[-121.98312378 124.96627808]
[-136.72756958 122.17591095]
[-151.24143982 118.36381531]
[-165.45405579 113.54856873]
[-179.29612732 107.75362396]
[-192.70025635 101.00720978]
[-205.60113525 93.34220886]
[-217.93589783 84.79595184]
[-229.64443970 75.41007996]
[-240.66973877 65.23032379]
[-250.95808411 54.30627823]
[-260.45932007 42.69115448]
[-269.12719727 30.44155312]
[-276.91946411 17.61714745]
[-283.79815674 4.28041935]
[-289.72976685 -9.50365734]
[-294.68539429 -23.66792488]
[-298.64086914 -38.14337921]
[-301.57699585 -52.85949326]
[-303.47940063 -67.74457550]
[-304.33880615 -82.72609711]
[-304.15109253 -97.73107910]
[-302.91711426 -112.68641663]
[-300.64294434 -127.51924133]
[-297.33956909 -142.15730286]
[-293.02316284 -156.52926636]
[-287.71475220 -170.56512451]
[-281.44015503 -184.19648743]
[-274.22994995 -197.35694885]
[-266.11929321 -209.98239136]
[-257.14767456 -222.01132202]
[-247.35882568 -233.38510132]
[-236.80041504 -244.04833984]
[-225.52388000 -253.94908142]
[-213.58418274 -263.03909302]
[-201.03947449 -271.27407837]
[-187.95088196 -278.61395264]
[-174.38217163 -285.02288818]
[-160.39944458 -290.46972656]
[-146.07081604 -294.92791748]
[-131.46611023 -298.37570190]
[-116.65647888 -300.79632568]
[-101.71406555 -302.17797852]
[-86.71166992 -302.51391602]
[-71.72238159 -301.80255127]
[-56.81923676 -300.04727173]
[-42.07483673 -297.25671387]
[-27.56101227 -293.44439697]
[-13.34847736 -288.62893677]
[0.49352482 -282.83380127]
[13.89755821 -276.08718872]
[26.79831886 -268.42202759]
[39.13295364 -259.87557983]
[50.84136963 -250.48954773]
[61.86652374 -240.30963135]
[72.15470886 -229.38543701]
[81.65578461 -217.77017212]
[90.32347870 -205.52044678]
[98.11556244 -192.69593811]
[104.99405670 -179.35910034]
[110.92546844 -165.57493591]
[115.88088989 -151.41059875]
[119.83618164 -136.93508911]
[122.77207184 -122.21893311]
[124.67426300 -107.33383179]
[125.53347778 -92.35228729]
[125.34554291 -77.34731293]
[124.11135864 -62.39199448]
[121.83695221 -47.55920029]
[118.53339386 -32.92119217]
[114.21678162 -18.54928970]
[108.90814972 -4.51350927]
[102.63335419 9.11776733]
[95.42297363 22.27812958]
[87.31213379 34.90346146]
[78.34034729 46.93225098]
[68.55132294 58.30589294]
[79.21018982 68.85997772]
[89.86905670 79.41405487]
[114.76623535 75.32083893]
[134.55372620 98.78712463]
[149.53543091 99.52777100]
[164.51713562 100.26840973]
[174.27818298 88.35086060]
[189.01278687 84.51095581]
[203.01747131 90.01848602]
[210.99815369 102.56626129]
[225.97985840 103.30690002]
[240.96156311 104.04753876]
[255.94326782 104.78817749]
[270.92498779 105.52882385]
[285.25958252 97.56318665]
[299.18429565 106.22542572]
[298.37457275 122.60457611]
[283.66336060 129.85116577]
[270.18432617 120.51052856]
[255.20263672 119.76988220]
[240.22093201 119.02924347]
[225.23922729 118.28860474]
[210.25752258 117.54796600]
[201.07814026 129.24740601]
[186.59852600 133.34677124]
[172.31449890 128.07229614]
[163.77648926 115.25011444]
[148.79478455 114.50946808]
[133.81307983 113.76882935]
[128.38043213 118.93954468]
[141.17303467 126.77213287]
[153.96563721 134.60472107]
[166.75823975 142.43730164]
[180.86260986 147.54286194]
[189.85014343 159.55220032]
[190.77114868 174.52389526]
[183.32337952 187.54428101]
[169.95114136 194.34011841]
[155.04318237 192.68103027]
[143.49223328 183.11151123]
[139.08927917 168.77218628]
[131.89790344 155.60845947]
[124.70651245 142.44471741]
[117.51512909 129.28097534]
[112.08248138 134.45169067]
[112.08248138 149.45169067]
[112.08248138 164.45169067]
[112.08248138 179.45169067]
[112.08248138 194.45169067]
[112.08248138 209.45169067]
[112.08248138 224.45169067]
[112.08248138 239.45169067]
[112.08248138 254.45169067]
[112.08248138 269.45169067]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 158]
[2 157]
[3 156]
[4 155]
[5 154]
[6 153]
[7 152]
[8 151]
[9 150]
[10 149]
[13 106]
[14 105]
[15 104]
[108 133]
[109 132]
[110 131]
[114 127]
[115 126]
[116 125]
[117 124]
[118 123]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
