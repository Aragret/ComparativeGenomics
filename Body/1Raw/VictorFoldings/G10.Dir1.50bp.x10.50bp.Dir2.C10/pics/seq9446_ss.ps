%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:50 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGAGCCCUACAAACAACUAACCUGCCACUAAUAGUUAUGUCAUCCCUCUUAUUAAUCAUCAUxxxxxxxxxxGUGCCUAUUGCCAUACUAGUCUUUGCCGCCUGCGAAGCAGCGGUGGGCCUAGCCCUACUACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[111.17422485 326.32550049]
[111.17422485 311.32550049]
[111.17422485 296.32550049]
[111.17422485 281.32550049]
[111.17422485 266.32550049]
[111.17422485 251.32548523]
[111.17422485 236.32548523]
[111.17422485 221.32548523]
[111.17422485 206.32548523]
[111.17422485 191.32548523]
[109.61664581 176.40657043]
[106.51831818 161.73004150]
[103.26749420 147.08654785]
[99.86451721 132.47766113]
[96.46154022 117.86875916]
[82.04631805 108.48252106]
[81.05772400 89.83449554]
[96.67190552 77.10205078]
[88.41961670 64.57608795]
[80.16732788 52.05012512]
[71.91503906 39.52416229]
[59.42320633 36.14657211]
[52.81593323 25.48998451]
[55.18903351 13.58722210]
[47.19911575 0.89229292]
[39.20919800 -11.80263710]
[31.21928406 -24.49756622]
[14.73525715 -23.68792534]
[0.16685008 -31.24153900]
[-8.57003880 -45.02184296]
[-9.18057919 -61.23323822]
[-1.59305406 -75.46633911]
[-9.84534359 -87.99229431]
[-13.93359566 -89.84909058]
[-16.88604546 -92.65160370]
[-18.54290199 -95.91300201]
[-18.92385101 -99.14546967]
[-18.21204948 -101.92047882]
[-25.39455795 -115.08906555]
[-32.57706833 -128.25764465]
[-39.75957489 -141.42622375]
[-46.94208527 -154.59481812]
[-61.02255630 -149.34875488]
[-75.70631409 -146.16003418]
[-90.69442749 -145.09358215]
[-105.68174744 -146.17109680]
[-120.36315155 -149.37063599]
[-134.43974304 -154.62707520]
[-147.62495422 -161.83338928]
[-159.65034485 -170.84288025]
[-170.27108765 -181.47212219]
[-179.27095032 -193.50469971]
[-186.46673584 -206.69566345]
[-191.71191406 -220.77645874]
[-194.89971924 -235.46041870]
[-195.96525574 -250.44859314]
[-194.88681030 -265.43585205]
[-191.68635559 -280.11706543]
[-186.42904663 -294.19332886]
[-179.22190857 -307.37808228]
[-170.21168518 -319.40292358]
[-159.58178711 -330.02301025]
[-147.54864502 -339.02212524]
[-134.35723877 -346.21710205]
[-120.27612305 -351.46139526]
[-105.59196472 -354.64831543]
[-90.60372162 -355.71289062]
[-75.61653900 -354.63354492]
[-60.93552780 -351.43218994]
[-46.85958099 -346.17398071]
[-33.67526245 -338.96603394]
[-21.65099335 -329.95507812]
[-11.03156853 -319.32452393]
[-2.03318667 -307.29083252]
[5.16095686 -294.09896851]
[10.40439796 -280.01751709]
[13.59038830 -265.33316040]
[14.65406322 -250.34486389]
[13.57376862 -235.35774231]
[10.37149811 -220.67692566]
[5.11244583 -206.60130310]
[-2.09632087 -193.41743469]
[-11.10804081 -181.39372253]
[-21.73924637 -170.77496338]
[-33.77350235 -161.77731323]
[-26.59099197 -148.60873413]
[-19.40848351 -135.44015503]
[-12.22597504 -122.27156830]
[-5.04346609 -109.10298920]
[2.68061876 -96.24459076]
[10.93290806 -83.71862793]
[24.51859283 -85.41819763]
[37.56941605 -81.06444550]
[47.50899124 -71.45650482]
[52.34914398 -58.43660355]
[51.08744812 -44.53699112]
[43.91421509 -32.48748398]
[51.90412903 -19.79255295]
[59.89404678 -7.09762335]
[67.88396454 5.59730625]
[83.81172943 12.89841652]
[84.44099426 31.27187347]
[92.69328308 43.79783630]
[100.94557953 56.32379532]
[109.19786835 68.84976196]
[122.21417236 76.30467224]
[137.19389343 77.08451080]
[152.17359924 77.86435699]
[167.15332031 78.64420319]
[175.95135498 75.95230103]
[182.43557739 79.59929657]
[197.39582825 80.69060516]
[212.35607910 81.78192139]
[228.59312439 76.90396118]
[237.77531433 91.15611267]
[226.62202454 103.92484283]
[211.26475525 96.74216461]
[196.30451965 95.65085602]
[181.34426880 94.55954742]
[166.37347412 93.62391663]
[151.39375305 92.84407043]
[136.41404724 92.06423187]
[121.43432617 91.28438568]
[119.95160675 105.42935944]
[111.07043457 114.46578217]
[114.47341156 129.07467651]
[117.87638855 143.68356323]
[122.90155792 151.39067078]
[121.19484711 158.63172913]
[124.29316711 173.30825806]
[131.02555847 159.90396118]
[143.48196411 151.54705811]
[158.43809509 150.40069580]
[172.02259827 156.76161194]
[180.71916199 168.98330688]
[182.27671814 183.90222168]
[176.29208374 197.65664673]
[164.31437683 206.68627930]
[149.44398499 208.65385437]
[135.53005981 203.05004883]
[126.17422485 191.32548523]
[126.17422485 206.32548523]
[126.17422485 221.32548523]
[126.17422485 236.32548523]
[126.17422485 251.32548523]
[126.17422485 266.32550049]
[126.17422485 281.32550049]
[126.17422485 296.32550049]
[126.17422485 311.32550049]
[126.17422485 326.32550049]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[11 130]
[12 129]
[13 127]
[14 126]
[15 125]
[18 105]
[19 104]
[20 103]
[21 102]
[24 100]
[25 99]
[26 98]
[27 97]
[32 91]
[33 90]
[38 89]
[39 88]
[40 87]
[41 86]
[42 85]
[106 123]
[107 122]
[108 121]
[109 120]
[111 119]
[112 118]
[113 117]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
