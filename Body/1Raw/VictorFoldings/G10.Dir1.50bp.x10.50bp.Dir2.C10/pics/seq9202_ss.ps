%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:02 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGAUCCGCCAACUAAUAUUUCACUUUACAUCCAAACAUCACUUUGGCUUCGAAGCCGCCGCCxxxxxxxxxxCCGUGAGGCCAAAUAUCAUUCUGAGGGGCCACAGUAAUUACAAACUUACUAUCCGCCAUCCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[251.38198853 481.41162109]
[251.38198853 466.41162109]
[251.38198853 451.41162109]
[251.38198853 436.41162109]
[251.38198853 421.41162109]
[251.38198853 406.41162109]
[251.38198853 391.41162109]
[251.38198853 376.41162109]
[251.38198853 361.41162109]
[251.38198853 346.41162109]
[228.81843567 331.11050415]
[222.61148071 306.86822510]
[233.04490662 286.60769653]
[224.27870178 274.43585205]
[210.56224060 268.63000488]
[208.77569580 252.91000366]
[199.88334656 240.83001709]
[190.86582947 228.84317017]
[174.90933228 231.19737244]
[159.84931946 225.16595459]
[149.81373596 212.30061340]
[147.60433960 196.03979492]
[153.91499329 180.79006958]
[144.65005493 168.99342346]
[135.38510132 157.19677734]
[126.12015533 145.40014648]
[116.85520172 133.60350037]
[107.59025574 121.80686188]
[92.92562866 121.97963715]
[81.11490631 113.28550720]
[76.92271423 99.23180389]
[62.90600204 93.89028931]
[48.88928604 88.54877472]
[37.77673340 98.95418549]
[23.30732346 103.48443604]
[8.36698246 101.29209137]
[-4.08873892 92.86499023]
[-11.61933041 79.91896820]
[-12.77743721 65.04872131]
[-26.79414940 59.70720673]
[-40.81086349 54.36569214]
[-54.82757568 49.02418137]
[-68.84429169 43.68266678]
[-83.16226959 50.37377930]
[-97.98922729 44.90231323]
[-104.52858734 30.51439095]
[-98.90066528 15.74611282]
[-84.44440460 9.35923576]
[-69.73645782 15.14298058]
[-63.50277710 29.66595459]
[-49.48606491 35.00746536]
[-35.46934891 40.34897995]
[-21.45263672 45.69049072]
[-7.43592405 51.03200531]
[3.32484293 40.70382309]
[17.56133461 36.05282974]
[32.46645355 38.05244446]
[45.07672882 46.35913849]
[52.86151886 59.37005615]
[54.23080063 74.53206635]
[68.24751282 79.87357330]
[82.26422882 85.21508789]
[85.60007477 81.95024872]
[89.52437592 79.42301178]
[93.87676239 77.73664093]
[94.81238556 62.76585007]
[95.74801636 47.79505539]
[88.88657379 33.53914261]
[97.40267181 21.31926727]
[83.60712433 14.99096966]
[73.03201294 4.10375547]
[67.10752869 -9.86996746]
[66.63491821 -25.04036903]
[71.67808533 -39.35577774]
[81.55499268 -50.88014603]
[94.92987061 -58.05490494]
[109.99386597 -59.90972519]
[124.70970917 -56.19375992]
[137.08720398 -47.40955353]
[145.45237732 -34.74510956]
[148.67393494 -19.91318321]
[146.31616211 -4.91967201]
[138.69795227 8.20767403]
[126.84957886 17.69348907]
[112.37346649 22.25489616]
[119.30182648 35.44000244]
[110.71881104 48.73068619]
[109.78318024 63.70147705]
[108.84754944 78.67227173]
[122.04731750 93.13945770]
[119.38689423 112.54191589]
[128.65184021 124.33855438]
[137.91679382 136.13519287]
[147.18174744 147.93183899]
[156.44668579 159.72846985]
[165.71163940 171.52511597]
[179.47250366 168.82608032]
[192.98577881 172.31637573]
[203.61689758 181.25642395]
[209.31875610 193.84992981]
[209.02578735 207.60469055]
[202.85266113 219.82565308]
[211.87017822 231.81248474]
[219.58177185 236.83076477]
[220.94754028 244.14379883]
[235.29103088 250.82023621]
[236.45054626 265.66964722]
[245.21675110 277.84146118]
[258.33264160 273.79867554]
[272.73468018 275.85147095]
[285.58096313 284.29211426]
[294.05239868 298.09515381]
[295.95547485 315.00860596]
[310.08029175 320.05734253]
[324.20507812 325.10610962]
[338.32989502 330.15484619]
[352.45471191 335.20361328]
[365.19213867 326.34149170]
[380.70526123 326.69244385]
[393.02890015 336.12149048]
[397.42443848 351.00299072]
[392.20162964 365.61471558]
[379.36880493 374.33813477]
[363.86041260 373.81890869]
[351.63977051 364.25671387]
[347.40594482 349.32843018]
[333.28112793 344.27966309]
[319.15634155 339.23089600]
[305.03152466 334.18215942]
[290.90673828 329.13339233]
[284.77554321 333.45294189]
[294.75073242 344.65545654]
[304.72589111 355.85794067]
[317.06665039 364.38470459]
[317.13494873 379.38455200]
[304.87234497 388.02334595]
[290.77093506 382.90960693]
[286.89593506 368.41955566]
[279.70455933 355.25579834]
[272.51318359 342.09207153]
[266.38198853 346.41162109]
[266.38198853 361.41162109]
[266.38198853 376.41162109]
[266.38198853 391.41162109]
[266.38198853 406.41162109]
[266.38198853 421.41162109]
[266.38198853 436.41162109]
[266.38198853 451.41162109]
[266.38198853 466.41162109]
[266.38198853 481.41162109]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[13 108]
[14 107]
[16 105]
[17 103]
[18 102]
[23 96]
[24 95]
[25 94]
[26 93]
[27 92]
[28 91]
[31 62]
[32 61]
[33 60]
[39 54]
[40 53]
[41 52]
[42 51]
[43 50]
[65 89]
[66 88]
[67 87]
[69 85]
[113 130]
[114 129]
[115 128]
[116 127]
[117 126]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
