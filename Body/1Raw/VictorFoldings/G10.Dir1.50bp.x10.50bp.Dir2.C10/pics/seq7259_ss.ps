%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:05 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGUCUAACAGCAGUAAUAUUAAUAAUUUUCAUGAUUUGAGAAGCCUUCGCUUCGAAGCGAAAxxxxxxxxxxCCCUUAUUUACCGAGAAAGCUCACAAGAACUGCUAACUCAUGCCCCCAUGUCUAACAACACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[97.42675018 283.84310913]
[97.42675018 268.84310913]
[97.42675018 253.84309387]
[97.42675018 238.84309387]
[97.42675018 223.84309387]
[97.42675018 208.84309387]
[97.42675018 193.84309387]
[97.42675018 178.84309387]
[97.42675018 163.84309387]
[97.42675018 148.84309387]
[81.09700775 143.76701355]
[67.91451263 133.57168579]
[59.35611725 119.78205872]
[56.24429703 104.29738617]
[58.67512131 89.13198853]
[66.04271698 76.15364075]
[77.15262604 66.85357666]
[71.08961487 53.13352203]
[65.02659607 39.41346741]
[58.96358490 25.69341278]
[52.90057373 11.97336006]
[46.83755875 -1.74669361]
[41.65267563 -6.01571131]
[39.73938370 -11.45359802]
[40.82094955 -16.16589355]
[28.57176971 -26.17929077]
[31.11715508 -40.85478973]
[25.63012505 -54.81518173]
[17.90603828 -67.67358398]
[8.15838718 -79.07460022]
[-1.58926499 -90.47562408]
[-11.33691692 -101.87664795]
[-21.08456993 -113.27766418]
[-34.10087967 -120.73257446]
[-48.86693573 -123.37144470]
[-63.63298798 -126.01030731]
[-78.39904785 -128.64916992]
[-93.16510010 -131.28804016]
[-107.93115234 -133.92689514]
[-121.86312103 -125.97203064]
[-136.71504211 -132.03834534]
[-141.09379578 -147.47227478]
[-131.64036560 -160.43423462]
[-115.60663605 -160.98091125]
[-105.29228973 -148.69294739]
[-90.52623749 -146.05409241]
[-75.76017761 -143.41522217]
[-60.99412537 -140.77636719]
[-46.22806931 -138.13749695]
[-31.46201515 -135.49862671]
[-27.33586884 -141.76161194]
[-34.05755234 -155.17127991]
[-19.08358002 -154.28758240]
[-14.95743561 -160.55055237]
[-23.20972443 -173.07652283]
[-31.46201515 -185.60247803]
[-39.71430206 -198.12844849]
[-47.96659088 -210.65440369]
[-56.21888351 -223.18035889]
[-71.11384583 -230.04127502]
[-72.34996796 -246.39376831]
[-58.65562439 -255.41580200]
[-44.11838913 -247.82627869]
[-43.69292068 -231.43266296]
[-35.44063187 -218.90669250]
[-27.18834114 -206.38073730]
[-18.93605232 -193.85476685]
[-10.68376350 -181.32881165]
[-2.43147397 -168.80284119]
[-3.66827297 -183.75177002]
[8.36192703 -192.71136475]
[22.72808647 -197.02569580]
[37.70402145 -196.17637634]
[51.49028015 -190.26544189]
[62.43035889 -180.00314331]
[69.20973969 -166.62255859]
[71.01382446 -151.73144531]
[67.62586212 -137.11906433]
[59.45292282 -124.54119110]
[47.47703934 -115.50911713]
[33.13719177 -111.10812378]
[18.15640259 -111.86700439]
[4.33676195 -117.69325256]
[-9.68354797 -123.02532196]
[0.06410393 -111.62429810]
[9.81175613 -100.22327423]
[19.55940819 -88.82225800]
[29.30706024 -77.42123413]
[25.86717796 -92.02148438]
[35.77730560 -103.28156281]
[50.69622040 -101.72401428]
[58.06687927 -88.65981293]
[51.68542862 -75.08486176]
[63.57780838 -84.22660065]
[75.47018433 -93.36833191]
[81.22924805 -108.72298431]
[97.44847107 -111.14553070]
[107.44291687 -98.14387512]
[100.93115234 -83.09299469]
[84.61192322 -81.47595215]
[72.71954346 -72.33422089]
[60.82716370 -63.19248199]
[53.52581024 -60.17891693]
[46.28894806 -59.25695419]
[39.59051514 -60.30221176]
[45.07754517 -46.34182358]
[56.93425751 -37.32696533]
[54.78134155 -21.65292358]
[60.55761337 -7.80970669]
[66.62062836 5.91034698]
[72.68363953 19.63039970]
[78.74665070 33.35045242]
[84.80966187 47.07050705]
[90.87268066 60.79056168]
[108.92887115 58.97196579]
[126.71099091 65.38969421]
[140.51086426 79.39570618]
[147.16236877 98.70198822]
[144.74957275 119.74195862]
[158.13586426 126.51007080]
[171.52214050 133.27818298]
[184.90843201 140.04631042]
[201.24342346 138.59718323]
[210.44316101 152.17277527]
[203.04374695 166.80769348]
[186.65705872 167.44676208]
[178.14031982 153.43258667]
[164.75402832 146.66447449]
[151.36775208 139.89636230]
[137.98146057 133.12825012]
[131.59278870 137.05696106]
[140.09555054 149.41426086]
[148.59831238 161.77157593]
[161.19403076 169.91699219]
[161.02388000 184.91603088]
[148.24662781 192.77360535]
[134.78425598 186.15811157]
[133.19819641 171.24186707]
[126.00681305 158.07812500]
[118.81542969 144.91438293]
[112.42675018 148.84309387]
[112.42675018 163.84309387]
[112.42675018 178.84309387]
[112.42675018 193.84309387]
[112.42675018 208.84309387]
[112.42675018 223.84309387]
[112.42675018 238.84309387]
[112.42675018 253.84309387]
[112.42675018 268.84310913]
[112.42675018 283.84310913]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[17 114]
[18 113]
[19 112]
[20 111]
[21 110]
[22 109]
[25 108]
[27 106]
[28 105]
[29 88]
[30 87]
[31 86]
[32 85]
[33 84]
[34 50]
[35 49]
[36 48]
[37 47]
[38 46]
[39 45]
[54 69]
[55 68]
[56 67]
[57 66]
[58 65]
[59 64]
[93 102]
[94 101]
[95 100]
[119 130]
[120 129]
[121 128]
[122 127]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
