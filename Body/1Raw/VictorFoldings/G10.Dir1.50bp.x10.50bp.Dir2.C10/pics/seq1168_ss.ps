%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:17 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGACUAACCCCAGGGUUGGUCAAUUUCGUGCCAGCCACCGCGGUCACACGAUUAACCCAAGUxxxxxxxxxxUCACCCUAACAGGUCAACCUCGCUUCCCCACCCUUACUAACAUUAACGAAAAUAACCCCACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[106.60136414 279.54229736]
[106.60136414 264.54229736]
[106.60136414 249.54229736]
[106.60136414 234.54229736]
[106.60136414 219.54229736]
[106.60136414 204.54229736]
[106.60136414 189.54229736]
[106.60136414 174.54229736]
[106.60136414 159.54229736]
[106.60136414 144.54229736]
[87.38996124 141.52029419]
[71.94118500 130.92500305]
[62.92158127 115.32646942]
[61.56282806 98.07559967]
[67.52150726 82.59229279]
[56.01969910 72.96376801]
[44.51789856 63.33523941]
[25.78003883 65.76255798]
[11.42060566 53.97679901]
[10.19071770 35.75909042]
[-1.70166159 26.61735725]
[-13.59404087 17.47562218]
[-25.48642159 8.33388901]
[-37.37879944 -0.80784559]
[-50.54738235 -7.99035454]
[-64.67218781 -13.03911114]
[-78.79698944 -18.08786774]
[-88.49791718 -7.76299667]
[-101.36740112 -1.94409311]
[-115.44031525 -1.48330104]
[-128.58161926 -6.41736078]
[-138.81028748 -15.96706009]
[-144.59791565 -28.66009712]
[-145.09706116 -42.55799866]
[-159.11376953 -47.89951324]
[-173.13047791 -53.24102402]
[-187.14720154 -58.58253860]
[-201.16390991 -63.92404938]
[-215.34046936 -68.82559967]
[-229.66307068 -73.28241730]
[-238.85343933 -72.84777069]
[-244.23551941 -77.98380280]
[-258.46231079 -82.73761749]
[-274.41406250 -78.93325043]
[-285.48654175 -91.03004456]
[-280.28930664 -106.58385468]
[-264.16885376 -109.59424591]
[-253.70849609 -96.96439362]
[-239.48170471 -92.21057892]
[-225.20625305 -87.60501099]
[-210.88365173 -83.14820099]
[-207.56278992 -84.50443268]
[-203.40934753 -84.27960205]
[-199.19241333 -82.09558105]
[-195.82240295 -77.94076538]
[-181.80567932 -72.59925079]
[-167.78897095 -67.25773621]
[-153.77226257 -61.91622543]
[-139.75553894 -56.57471466]
[-128.38973999 -67.76483917]
[-113.23166656 -72.91149902]
[-97.28694916 -70.94081879]
[-83.74050903 -62.19551849]
[-75.32034302 -48.37659454]
[-73.74822998 -32.21266937]
[-59.62342834 -27.16391373]
[-45.49862671 -22.11515808]
[-54.59152985 -34.04491425]
[-58.85796738 -48.42536926]
[-57.74234772 -63.38382721]
[-51.38994598 -76.97231293]
[-40.62800980 -87.42127228]
[-26.85801315 -93.36997986]
[-11.87315369 -94.04377747]
[2.37516117 -89.35490417]
[14.03144169 -79.91397095]
[21.57774925 -66.95043945]
[24.03136063 -52.15247345]
[21.07275772 -37.44714355]
[13.08722305 -24.74945831]
[1.11467528 -15.71297169]
[-13.28575993 -11.51446247]
[-28.23706627 -12.70022488]
[-16.34468651 -3.55849099]
[-4.45230722 5.58324289]
[7.44007254 14.72497749]
[19.33245277 23.86671066]
[30.12991905 19.95452690]
[41.58872604 21.78849411]
[50.81517029 29.02358627]
[55.42220688 39.93615341]
[54.14642334 51.83343506]
[65.64822388 61.46195984]
[77.15003204 71.09048462]
[90.08800507 63.09525299]
[105.68222809 60.83414841]
[121.41729736 65.11000824]
[134.58102417 75.63522339]
[142.73052979 91.01195526]
[144.13885498 108.90818024]
[159.11857605 109.68801880]
[174.09828186 110.46786499]
[178.45405579 96.03559113]
[186.13774109 83.06545258]
[196.70260620 72.31151581]
[209.53442383 64.39900970]
[223.88717651 59.78794861]
[238.92642212 58.74641800]
[253.77777100 61.33496857]
[267.57781982 67.40310669]
[279.52423096 76.59804535]
[288.92245483 88.38518524]
[295.22610474 102.07925415]
[298.06866455 116.88409424]
[297.28491211 131.93896484]
[292.92037964 146.36860657]
[285.22885132 159.33407593]
[274.65747070 170.08160400]
[261.82083130 177.98632812]
[247.46530151 182.58869934]
[232.42543030 183.62110901]
[217.57565308 181.02354431]
[203.77928162 174.94705200]
[191.83845520 165.74487305]
[182.44738770 153.95202637]
[176.15203857 140.25413513]
[173.31845093 125.44757843]
[158.33872986 124.66773987]
[143.35900879 123.88789368]
[137.91960144 129.05149841]
[150.69166565 136.91752625]
[165.64363098 138.11692810]
[176.74287415 148.20686340]
[179.35804749 162.97712708]
[172.39793396 176.26458740]
[158.76673889 182.52484131]
[144.15232849 179.14566040]
[134.65278625 167.53709412]
[134.23216248 152.54243469]
[127.04077911 139.37869263]
[121.60136414 144.54229736]
[121.60136414 159.54229736]
[121.60136414 174.54229736]
[121.60136414 189.54229736]
[121.60136414 204.54229736]
[121.60136414 219.54229736]
[121.60136414 234.54229736]
[121.60136414 249.54229736]
[121.60136414 264.54229736]
[121.60136414 279.54229736]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[15 94]
[16 93]
[17 92]
[20 87]
[21 86]
[22 85]
[23 84]
[24 83]
[25 67]
[26 66]
[27 65]
[34 59]
[35 58]
[36 57]
[37 56]
[38 55]
[39 51]
[40 50]
[42 49]
[43 48]
[100 129]
[101 128]
[102 127]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
