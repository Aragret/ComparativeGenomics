%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:44 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGUAUUAAUAAUUUUCAUGAUUUGAGAAGCCUUCGCUUCGAAGCGAAAAGUCCUAAUAGUAGxxxxxxxxxxAUGAGCCCUACAAACAACUAACCUGCCACUAAUAGUUAUGUCAUCCCUCUUAUUAAUCAUCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[98.30307770 455.01989746]
[98.30307770 440.01989746]
[98.30307770 425.01989746]
[98.30307770 410.01989746]
[98.30307770 395.01989746]
[98.30307770 380.01989746]
[98.30307770 365.01989746]
[98.30307770 350.01989746]
[98.30307770 335.01989746]
[98.30307770 320.01989746]
[82.86595154 317.07598877]
[68.28370667 311.20480347]
[55.10594177 302.62576294]
[43.82966232 291.66036987]
[34.88055801 278.72015381]
[28.59694099 264.29125977]
[25.21693993 248.91618347]
[24.86948013 233.17330933]
[27.56937408 217.65522766]
[33.21669006 202.94642639]
[41.60046005 189.60121155]
[52.40654373 178.12286377]
[65.22941589 168.94468689]
[79.58737946 162.41357422]
[94.94065094 158.77696228]
[94.31667328 143.78994751]
[93.69269562 128.80293274]
[93.06871796 113.81591797]
[88.46315765 99.54045105]
[80.21086884 87.01448822]
[71.95858002 74.48853302]
[63.70629120 61.96256638]
[55.32414627 49.52312851]
[46.81305695 37.17155457]
[34.25366592 34.05457306]
[27.42612457 23.53774643]
[29.55108643 11.58819294]
[21.29879761 -0.93776941]
[12.91665459 -13.37720966]
[1.31531370 -22.88556862]
[-12.46706772 -28.80553055]
[-26.24944878 -34.72549438]
[-40.03182983 -40.64545822]
[-53.81421280 -46.56542206]
[-67.59659576 -52.48538208]
[-83.80938721 -50.02017975]
[-93.83799744 -62.99550629]
[-87.36583710 -78.06346130]
[-71.05091858 -79.72341919]
[-61.67663193 -66.26776886]
[-47.89424896 -60.34780121]
[-34.11186600 -54.42783737]
[-20.32948685 -48.50787735]
[-6.54710436 -42.58791351]
[7.23527670 -36.66794968]
[-1.38586164 -48.94296265]
[-7.22331476 -62.76049423]
[-10.01431274 -77.49855042]
[-9.63322067 -92.49370575]
[-6.09719181 -107.07096863]
[0.43459979 -120.57414246]
[9.66812992 -132.39538574]
[21.18775558 -142.00259399]
[34.47492599 -148.96327209]
[48.93152618 -152.96411133]
[63.90680313 -153.82499695]
[78.72664642 -151.50720215]
[92.72395325 -146.11503601]
[105.26863861 -137.89123535]
[115.79601288 -127.20599365]
[123.83219147 -114.54029846]
[129.01542664 -100.46428680]
[131.11241150 -85.61158752]
[130.02871704 -70.65078735]
[125.81316376 -56.25533295]
[118.65549469 -43.07323456]
[108.87791443 -31.69787216]
[96.92054749 -22.64130592]
[83.32165527 -16.31121063]
[68.69338226 -12.99253368]
[53.69421005 -12.83466339]
[38.99932480 -15.84470463]
[25.26822662 -21.88829994]
[31.69487190 -18.14078140]
[33.82476044 -9.19005871]
[42.07704926 3.33590341]
[58.15325928 10.30407619]
[59.16462708 28.66046524]
[67.67572021 41.01203537]
[74.10236359 44.75955582]
[76.23225403 53.71027756]
[84.48454285 66.23624420]
[92.73683167 78.76219940]
[100.98912048 91.28816223]
[107.00151825 84.15160370]
[117.04715729 80.52196503]
[131.45938110 76.36407471]
[145.87159729 72.20619202]
[160.28381348 68.04830170]
[174.69602966 63.89041519]
[177.19628906 48.83347702]
[185.98893738 36.35741425]
[199.32817078 28.93935585]
[214.56549072 28.05216789]
[228.67549133 33.87199783]
[238.85664368 45.24331665]
[243.08746338 59.90834045]
[240.52792358 74.95531464]
[231.68621826 87.39665985]
[218.31787109 94.76213074]
[203.07717896 95.58930969]
[188.99020386 89.71395874]
[178.85391235 78.30263519]
[164.44169617 82.46051788]
[150.02947998 86.61840820]
[135.61726379 90.77629089]
[121.20504761 94.93418121]
[134.18528748 102.45172882]
[133.17411804 117.41760254]
[119.30063629 123.12079620]
[108.05574036 113.19194031]
[108.67971802 128.17895508]
[109.30369568 143.16596985]
[109.92767334 158.15298462]
[124.11038971 160.15643311]
[137.71820068 164.61601257]
[150.32936096 171.39218140]
[161.55323792 180.27360535]
[171.04240417 190.98377991]
[178.50343323 203.18962097]
[183.70596313 216.51181030]
[186.48973083 230.53659058]
[186.76965332 244.82865906]
[184.53828430 258.94458008]
[179.86608887 272.44668579]
[172.89921570 284.91650391]
[163.85487366 295.96780396]
[153.01463318 305.25851440]
[140.71560669 312.50143433]
[127.33995056 317.47290039]
[113.30307770 320.01989746]
[113.30307770 335.01989746]
[113.30307770 350.01989746]
[113.30307770 365.01989746]
[113.30307770 380.01989746]
[113.30307770 395.01989746]
[113.30307770 410.01989746]
[113.30307770 425.01989746]
[113.30307770 440.01989746]
[113.30307770 455.01989746]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[25 124]
[26 123]
[27 122]
[28 121]
[29 94]
[30 93]
[31 92]
[32 91]
[33 89]
[34 88]
[37 86]
[38 85]
[39 83]
[40 55]
[41 54]
[42 53]
[43 52]
[44 51]
[45 50]
[96 117]
[97 116]
[98 115]
[99 114]
[100 113]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
