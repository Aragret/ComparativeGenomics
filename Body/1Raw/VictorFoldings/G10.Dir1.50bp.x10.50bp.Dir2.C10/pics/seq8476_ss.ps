%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:45 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCACCAACCACCCAACUAUCUAUAAACCUAGCCAUGGCCAUCCCCUUAUGAGCGGGCACAGxxxxxxxxxxACAGCCCUAUACUCCCUCUACAUAUUUACCACAACACAAUGGGGCUCACUCACCCACCACCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[92.50000000 304.08883667]
[92.50000000 289.08883667]
[92.50000000 274.08883667]
[92.50000000 259.08883667]
[92.50000000 244.08885193]
[92.50000000 229.08885193]
[92.50000000 214.08885193]
[92.50000000 199.08885193]
[92.50000000 184.08885193]
[92.50000000 169.08885193]
[70.07201385 162.72029114]
[51.01248932 149.29241943]
[37.46661758 130.31658936]
[23.34181404 135.36534119]
[9.21701145 140.41409302]
[11.23172760 155.33503723]
[10.09978390 170.34878540]
[5.87066555 184.79898071]
[-1.27074957 198.05393982]
[-11.01226902 209.53421021]
[-22.92803574 218.73791504]
[-36.49714279 225.26271057]
[-51.12640762 228.82336426]
[-66.17630768 229.26422119]
[-80.98891449 226.56600952]
[-94.91668701 220.84667969]
[-107.35076904 212.35626221]
[-117.74759674 201.46591187]
[-125.65265656 188.65170288]
[-130.72038269 174.47384644]
[-132.72921753 159.55210876]
[-131.59136963 144.53881836]
[-127.35656738 130.09027100]
[-120.20993805 116.83813477]
[-110.46390533 105.36170197]
[-98.54451752 96.16268158]
[-84.97284698 89.64321899]
[-70.34217834 86.08831787]
[-55.29211426 85.65338135]
[-40.48056793 88.35742188]
[-26.55504417 94.08223724]
[-14.12430286 102.57754517]
[-3.73176432 113.47198486]
[4.16825485 126.28929901]
[18.29305840 121.24053955]
[32.41786194 116.19178009]
[30.54306412 102.29203033]
[31.49741554 88.29891968]
[35.24204254 74.78242493]
[41.62441635 62.29309845]
[50.38456726 51.33966446]
[61.16567230 42.36828613]
[73.52859497 35.74438477]
[86.96976471 31.73776817]
[100.94168091 30.51163673]
[114.87524414 32.11593246]
[128.20291138 36.48531342]
[140.38179016 43.44179535]
[150.36451721 32.24603271]
[160.34724426 21.05026436]
[170.32997131 9.85449886]
[180.31269836 -1.34126663]
[185.50811768 -15.41278553]
[185.19606018 -30.40954018]
[184.88400269 -45.40629196]
[184.57194519 -60.40304565]
[170.14479065 -65.00042725]
[157.99359131 -74.03520203]
[149.43643188 -86.52734375]
[145.40150452 -101.12180328]
[146.32650757 -116.23547363]
[152.11109924 -130.22894287]
[162.12780762 -141.58430481]
[175.29010010 -149.06980896]
[190.17022705 -151.87348938]
[205.15409851 -149.69123840]
[218.61637878 -142.75973511]
[229.09678650 -131.83088684]
[235.45848083 -118.09015656]
[237.01139832 -103.02804565]
[233.58706665 -88.27837372]
[225.55696106 -75.44107819]
[213.79211426 -65.90865326]
[199.56869507 -60.71510315]
[199.88075256 -45.71834946]
[200.19281006 -30.72159576]
[200.50486755 -15.72484207]
[206.35467529 -11.03126144]
[208.63449097 -25.85699654]
[222.61390686 -31.29538345]
[234.31332397 -21.90796852]
[232.03318787 -7.08228159]
[218.05430603 -1.64409947]
[223.90411377 3.04948139]
[238.61207581 0.10399891]
[253.32003784 -2.84148359]
[253.97486877 -17.90251350]
[258.21569824 -32.36898804]
[265.79595947 -45.39984131]
[276.27493286 -56.23748398]
[289.04339600 -64.25182343]
[303.35900879 -68.97691345]
[318.38949585 -70.13805389]
[333.26095581 -67.66773224]
[347.10885620 -61.70956802]
[359.12802124 -52.60996246]
[368.61972046 -40.89795685]
[375.03210449 -27.25446701]
[377.99237061 -12.47271156]
[377.32839966 2.58791924]
[373.07879639 17.05181885]
[365.49066162 30.07807541]
[355.00509644 40.90936279]
[342.23178101 48.91595840]
[327.91329956 53.63237381]
[312.88211060 54.78439713]
[298.01214600 52.30506134]
[284.16787720 46.33850098]
[272.15423584 37.23161316]
[262.66961670 25.51385117]
[256.26553345 11.86647797]
[241.55755615 14.81196022]
[226.84959412 17.75744247]
[191.50846863 8.64145947]
[181.52574158 19.83722496]
[171.54301453 31.03299141]
[161.56028748 42.22875595]
[151.57756042 53.42452240]
[158.67700195 62.76388550]
[164.10435486 73.16436005]
[167.70492554 84.32956696]
[169.37612915 95.94132996]
[169.07032776 107.66874695]
[166.79623413 119.17763519]
[162.61868286 130.14001465]
[156.65667725 140.24351501]
[149.08015442 149.20019531]
[140.10498047 156.75482178]
[129.98696899 162.69210815]
[119.01440430 166.84289551]
[107.50000000 169.08885193]
[107.50000000 184.08885193]
[107.50000000 199.08885193]
[107.50000000 214.08885193]
[107.50000000 229.08885193]
[107.50000000 244.08885193]
[107.50000000 259.08883667]
[107.50000000 274.08883667]
[107.50000000 289.08883667]
[107.50000000 304.08883667]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[13 46]
[14 45]
[15 44]
[58 128]
[59 127]
[60 126]
[61 125]
[62 124]
[63 87]
[64 86]
[65 85]
[66 84]
[94 123]
[95 122]
[96 121]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
