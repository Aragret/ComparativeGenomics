%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:15 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGAUAAGGCCUACUUCACAAAGCGCCUUCCCCCGUAAAUGAUAUCAUCUCAACUUAGUAUUAxxxxxxxxxxGGGGUAGCUAAAGUGAACUGUAUCCGACAUCUGGUUCCUACUUCAGGGUCAUAAAGCCUACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[105.50897980 265.41244507]
[105.50897980 250.41244507]
[105.50897980 235.41244507]
[105.50897980 220.41244507]
[105.50897980 205.41244507]
[105.50897980 190.41244507]
[105.50897980 175.41244507]
[105.50897980 160.41244507]
[105.50897980 145.41244507]
[105.50897980 130.41244507]
[92.60385895 129.56013489]
[81.35916138 123.55084991]
[73.70298004 113.58634949]
[60.92562103 121.44377899]
[48.14826202 129.30120850]
[35.37090683 137.15863037]
[22.59354782 145.01605225]
[9.89861870 153.00596619]
[-2.71250916 161.12751770]
[-2.59509182 176.55442810]
[-10.85604286 189.58363342]
[-24.85932159 196.05755615]
[-40.13653564 193.91040039]
[-51.81277847 183.82730103]
[-56.16220474 169.02574158]
[-51.79692841 154.22885132]
[-40.10989380 144.15826416]
[-24.83038902 142.02746582]
[-10.83405113 148.51638794]
[1.77707696 140.39483643]
[5.72330093 134.08825684]
[14.73612309 132.23869324]
[27.51348114 124.38127136]
[40.29083633 116.52384949]
[53.06819534 108.66641998]
[65.84555054 100.80899811]
[68.79103851 86.10103607]
[60.02482605 73.92919922]
[51.25862122 61.75735855]
[42.49241257 49.58552170]
[29.12551689 56.45456696]
[14.88410759 61.25455856]
[0.08634345 63.87826538]
[-14.93718719 64.26707458]
[-29.85085487 62.41229630]
[-44.32147980 58.35536957]
[-58.02578735 52.18693161]
[-70.65761566 44.04478073]
[-81.93476105 34.11081696]
[-91.60529327 22.60697174]
[-99.45317078 9.79024410]
[-105.30306244 -4.05303669]
[-109.02428436 -18.61360550]
[-110.53369904 -33.56617355]
[-109.79759216 -48.57669830]
[-106.83240509 -63.30983353]
[-101.70437622 -77.43643951]
[-94.52807617 -90.64092255]
[-85.46382141 -102.62828827]
[-74.71410370 -113.13073730]
[-62.51909256 -121.91363525]
[-49.15121841 -128.78077698]
[-34.90912628 -133.57873535]
[-20.11098862 -136.20033264]
[-5.08740282 -136.58700562]
[9.82599926 -134.73010254]
[24.29604721 -130.67111206]
[37.99947357 -124.50072479]
[50.63014221 -116.35677338]
[61.90587234 -106.42120361]
[71.57476807 -94.91598511]
[79.42081451 -82.09813690]
[85.26873779 -68.25402069]
[88.98788452 -53.69292450]
[90.49517059 -38.74014282]
[89.75692749 -23.72972298]
[86.78964233 -8.99700928]
[81.65959930 5.12886620]
[74.48142242 18.33232689]
[65.41545868 30.31840134]
[54.66424942 40.81931686]
[63.43045807 52.99115372]
[72.19666290 65.16298676]
[80.96287537 77.33482361]
[111.94982147 72.20668793]
[130.85163879 98.14478302]
[142.42507935 87.35746765]
[156.62341309 91.85820007]
[171.19612122 88.30343628]
[184.16743469 75.27559662]
[200.80389404 80.77362061]
[215.29949951 76.91646576]
[229.79508972 73.05930328]
[244.29067993 69.20214081]
[258.70291138 65.04425812]
[273.02551270 60.58744049]
[287.34808350 56.13062668]
[301.67068481 51.67380905]
[315.79550171 46.62505341]
[329.69805908 40.99309540]
[343.60061646 35.36114120]
[351.15438843 21.20769310]
[366.95526123 18.43074417]
[378.88220215 29.16053009]
[377.78582764 45.16607666]
[364.50720215 54.16930008]
[349.23257446 49.26369476]
[335.33001709 54.89565277]
[321.42745972 60.52760696]
[320.21893311 63.12506866]
[317.87527466 65.38365173]
[314.52642822 66.85582733]
[310.46646118 67.15182495]
[306.12750244 65.99640656]
[291.80490112 70.45322418]
[277.48233032 74.91003418]
[263.15972900 79.36685181]
[260.16110229 83.15945435]
[254.72232056 85.07022095]
[248.14784241 83.69773865]
[233.65225220 87.55490112]
[219.15664673 91.41205597]
[204.66105652 95.26921844]
[198.29447937 105.60237122]
[186.19940186 108.90813446]
[174.75088501 102.87613678]
[160.17817688 106.43090057]
[149.64707947 116.96395874]
[134.40640259 112.71748352]
[148.89939880 116.58441162]
[163.88638306 115.95954132]
[177.29629517 122.68070221]
[185.76469421 135.06159973]
[187.16687012 149.99591064]
[181.15104675 163.73672485]
[169.22654724 172.83653259]
[154.38517761 175.01223755]
[140.35055542 169.71798706]
[130.64387512 158.28205872]
[127.70036316 143.57618713]
[120.50897980 130.41244507]
[120.50897980 145.41244507]
[120.50897980 160.41244507]
[120.50897980 175.41244507]
[120.50897980 190.41244507]
[120.50897980 205.41244507]
[120.50897980 220.41244507]
[120.50897980 235.41244507]
[120.50897980 250.41244507]
[120.50897980 265.41244507]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[13 36]
[14 35]
[15 34]
[16 33]
[17 32]
[18 30]
[19 29]
[37 84]
[38 83]
[39 82]
[40 81]
[86 129]
[88 127]
[89 126]
[91 123]
[92 122]
[93 121]
[94 120]
[95 117]
[96 116]
[97 115]
[98 114]
[99 109]
[100 108]
[101 107]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
