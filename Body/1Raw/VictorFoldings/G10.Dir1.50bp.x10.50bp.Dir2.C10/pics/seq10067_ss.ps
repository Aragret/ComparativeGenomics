%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:59 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGUUCCUAUUCUACACCCUAGUAGGCUCCCUUCCCCUACUCAUCGCACUAAUUUACACUCACxxxxxxxxxxGCUUCACCGGCGCAGUCAUUCUCAUAAUCGCCCACGGGCUUACAUCCUCAUUACUAUUCUCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[-43.37695694 229.26335144]
[-53.37302780 217.22918701]
[-65.63539886 225.86830139]
[-77.89776611 234.50741577]
[-90.16013336 243.14653015]
[-102.42250061 251.78564453]
[-114.68486786 260.42477417]
[-126.94723511 269.06387329]
[-139.20960999 277.70300293]
[-151.47196960 286.34210205]
[-154.29858398 301.66033936]
[-166.85743713 310.24694824]
[-181.44360352 307.45779419]
[-193.70597839 316.09692383]
[-205.96833801 324.73602295]
[-218.23071289 333.37515259]
[-221.39848328 339.29736328]
[-226.35478210 342.24124146]
[-231.18772888 342.10604858]
[-243.79884338 350.22760010]
[-256.40997314 358.34915161]
[-261.19699097 373.66137695]
[-276.20474243 379.33117676]
[-289.92056274 371.00921631]
[-291.82287598 355.07934570]
[-280.45236206 343.76159668]
[-264.53152466 345.73800659]
[-251.92039490 337.61645508]
[-239.30926514 329.49493408]
[-226.86982727 321.11279297]
[-214.60745239 312.47366333]
[-202.34509277 303.83456421]
[-190.08271790 295.19543457]
[-187.79965210 280.52154541]
[-175.48693848 271.58557129]
[-160.11108398 274.07974243]
[-147.84872437 265.44061279]
[-135.58634949 256.80151367]
[-123.32398224 248.16239929]
[-111.06161499 239.52328491]
[-98.79924774 230.88415527]
[-86.53688049 222.24504089]
[-74.27451324 213.60592651]
[-62.01214218 204.96681213]
[-69.38848114 192.59324646]
[-75.82157898 179.70407104]
[-81.27561188 166.37106323]
[-85.72021484 152.66847229]
[-89.13063049 138.67259216]
[-91.48787689 124.46137238]
[-92.77882385 110.11393738]
[-92.99627686 95.71018219]
[-92.13903809 81.33030701]
[-90.21186829 67.05439758]
[-87.22550201 52.96195221]
[-83.19657135 39.13143158]
[-78.14751434 25.63986015]
[-72.10643768 12.56236267]
[-65.10698700 -0.02823872]
[-57.18814468 -12.06183243]
[-48.39399338 -23.47141075]
[-38.77351379 -34.19343948]
[-28.38027191 -44.16820908]
[-17.27214432 -53.34017944]
[-5.51098824 -61.65827560]
[6.83770609 -69.07617950]
[19.70517540 -75.55258179]
[33.01976395 -81.05141449]
[46.70733643 -85.54206848]
[60.69166565 -88.99952698]
[74.89488220 -91.40454102]
[89.23789978 -92.74372864]
[103.64084625 -93.00961304]
[118.02351379 -92.20072937]
[132.30581665 -90.32157135]
[146.40823364 -87.38260651]
[160.25222778 -83.40020752]
[173.76069641 -78.39654541]
[186.85842896 -72.39947510]
[199.47250366 -65.44240570]
[211.53265381 -57.56406403]
[222.97174072 -48.80833054]
[233.72605896 -39.22395325]
[243.73571777 -28.86431313]
[252.94497681 -17.78709030]
[261.30258179 -6.05396938]
[268.76196289 6.26971245]
[282.14825439 -0.49840221]
[295.53454590 -7.26651716]
[308.70312500 -14.44902611]
[321.64117432 -22.03893471]
[334.57922363 -29.62884331]
[321.10290527 -36.21585083]
[317.64266968 -50.81128693]
[326.72766113 -62.74706650]
[341.71749878 -63.29910278]
[351.65582275 -52.06389999]
[349.27886963 -37.25402451]
[362.93511963 -43.45943451]
[376.59136963 -49.66484070]
[383.54983521 -64.12026215]
[399.22152710 -67.55210114]
[411.58447266 -57.32774353]
[411.15484619 -41.29044342]
[398.26226807 -31.74264336]
[382.79678345 -36.00859833]
[369.14053345 -29.80319214]
[355.48428345 -23.59778595]
[342.16912842 -16.69078636]
[329.23107910 -9.10087776]
[316.29302979 -1.51096988]
[315.06011963 1.85762024]
[312.09756470 4.77739763]
[307.64364624 6.42510843]
[302.30264282 6.11976767]
[288.91635132 12.88788223]
[275.53009033 19.65599823]
[281.45941162 34.13307571]
[286.19699097 49.04273224]
[289.71176147 64.28704834]
[291.98059082 79.76590729]
[292.98861694 95.37765503]
[292.72915649 111.01976013]
[291.20397949 126.58948517]
[288.42309570 141.98458862]
[284.40472412 157.10397339]
[279.17529297 171.84831238]
[272.76913452 186.12080383]
[265.22833252 199.82768250]
[256.60238647 212.87896729]
[246.94795227 225.18891907]
[236.32846069 236.67668152]
[224.81362915 247.26684570]
[212.47909546 256.88983154]
[199.40585327 265.48245239]
[185.67977905 272.98828125]
[171.39099121 279.35800171]
[156.63336182 284.54980469]
[141.50378418 288.52957153]
[126.10163116 291.27120972]
[110.52806091 292.75665283]
[94.88534546 292.97619629]
[79.27622223 291.92834473]
[63.80319977 289.62002563]
[48.56789780 286.06640625]
[33.67037582 281.29077148]
[19.20847321 275.32455444]
[5.27716255 268.20687866]
[-8.03205872 259.98449707]
[-20.63178444 250.71144104]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 44]
[3 43]
[4 42]
[5 41]
[6 40]
[7 39]
[8 38]
[9 37]
[10 36]
[13 33]
[14 32]
[15 31]
[16 30]
[19 29]
[20 28]
[21 27]
[87 117]
[88 116]
[89 115]
[90 111]
[91 110]
[92 109]
[98 108]
[99 107]
[100 106]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
