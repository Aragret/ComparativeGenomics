%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:33 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCUUAAACUCCAGCACCACGACCCUACUACUAUCUCGCACCUGAAACAAGCUAACAUGACUxxxxxxxxxxGGCCACCAAUGGUACUGAACCUACGAGUACACCGACUACGGCGGACUAAUCUUCAACUCCCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[101.68689728 279.02340698]
[101.68689728 264.02340698]
[101.68689728 249.02340698]
[101.68689728 234.02340698]
[101.68689728 219.02340698]
[101.68689728 204.02340698]
[101.68689728 189.02340698]
[101.68689728 174.02340698]
[101.68689728 159.02340698]
[101.68689728 144.02340698]
[84.91791534 139.80456543]
[71.62194824 129.69787598]
[63.65679932 115.69368744]
[61.90372467 100.27217865]
[66.18799591 85.96907806]
[75.37810516 74.95928955]
[67.38819122 62.26435852]
[59.39827347 49.56942749]
[51.40835953 36.87450027]
[42.51601028 24.79451180]
[32.76835632 13.39348984]
[23.02070427 1.99246895]
[8.17187786 -3.46856713]
[5.78201866 -18.17019463]
[-3.96563339 -29.57121468]
[-13.71328545 -40.97223663]
[-23.46093750 -52.37325668]
[-35.77218628 -43.78256607]
[-48.86619568 -36.43997574]
[-62.61686325 -30.41619301]
[-76.89176178 -25.76923752]
[-91.55339813 -22.54385948]
[-106.46058655 -20.77112389]
[-121.46974945 -20.46810150]
[-136.43634033 -21.63771439]
[-151.21621704 -24.26869392]
[-165.66703796 -28.33570671]
[-179.64962769 -33.79957962]
[-193.02932739 -40.60769272]
[-205.67727661 -48.69447708]
[-217.47166443 -57.98205566]
[-228.29891968 -68.38097382]
[-238.05473328 -79.79109192]
[-246.64518738 -92.10250854]
[-253.98751831 -105.19667053]
[-260.01101685 -118.94745636]
[-264.65768433 -133.22244263]
[-267.88278198 -147.88415527]
[-269.65521240 -162.79136658]
[-269.95794678 -177.80053711]
[-268.78802490 -192.76710510]
[-266.15673828 -207.54693604]
[-262.08944702 -221.99766541]
[-256.62530518 -235.98014832]
[-249.81690979 -249.35971069]
[-241.72987366 -262.00750732]
[-232.44206238 -273.80172729]
[-222.04292297 -284.62875366]
[-210.63261414 -294.38433838]
[-198.32101440 -302.97454834]
[-185.22671509 -310.31661987]
[-171.47581482 -316.33984375]
[-157.20072937 -320.98623657]
[-142.53895569 -324.21102905]
[-127.63170624 -325.98315430]
[-112.62252808 -326.28558350]
[-97.65598297 -325.11535645]
[-82.87621307 -322.48379517]
[-68.42556000 -318.41619873]
[-54.44318390 -312.95178223]
[-41.06375504 -306.14312744]
[-28.41612625 -298.05584717]
[-16.62210464 -288.76779175]
[-5.79527521 -278.36843872]
[3.96009064 -266.95791626]
[12.55004120 -254.64616394]
[19.89184952 -241.55171204]
[25.91480446 -227.80068970]
[30.56090546 -213.52551270]
[33.78540421 -198.86367798]
[35.55724335 -183.95639038]
[35.85936737 -168.94720459]
[34.68885422 -153.98068237]
[32.05698776 -139.20095825]
[27.98911095 -124.75038910]
[22.52439880 -110.76812744]
[15.71548271 -97.38883209]
[7.62793827 -84.74136353]
[-1.66034627 -72.94753265]
[-12.05991650 -62.12091064]
[-2.31226468 -50.71988678]
[7.43538761 -39.31886673]
[17.18303871 -27.91784668]
[31.33464813 -23.27228737]
[34.42172623 -7.75518322]
[44.16937637 3.64583778]
[53.91703033 15.04685879]
[55.48043823 0.12855594]
[66.14498138 -10.41978741]
[81.07951355 -11.81966972]
[93.51854706 -3.43692875]
[97.82708740 10.93097019]
[92.05330658 24.77522850]
[78.81279755 31.82426262]
[64.10328674 28.88458252]
[72.09320831 41.57951355]
[80.08312225 54.27444077]
[88.07303619 66.96937561]
[107.12026215 63.33248520]
[126.40262604 70.50388336]
[139.92404175 87.54644012]
[142.83505249 110.29872894]
[157.54301453 113.24421692]
[172.25097656 116.18969727]
[187.30181885 111.31291199]
[198.26196289 121.39877319]
[214.98001099 118.58040619]
[222.31623840 133.86491394]
[209.65994263 145.14561462]
[195.31648254 136.10673523]
[181.31765747 141.19419861]
[169.30549622 130.89765930]
[154.59753418 127.95217133]
[139.88957214 125.00669098]
[134.08891296 129.76086426]
[145.58421326 139.39715576]
[157.07952881 149.03343201]
[168.57484436 158.66970825]
[183.22503662 161.89025879]
[193.93034363 172.39720154]
[197.42430115 186.98460388]
[192.64080811 201.20143127]
[181.03941345 210.70973206]
[166.16004944 212.60826111]
[152.54280090 206.31773376]
[144.34269714 193.75755310]
[144.06172180 178.76045227]
[136.87033081 165.59671021]
[129.67895508 152.43296814]
[122.48756409 139.26922607]
[116.68689728 144.02340698]
[116.68689728 159.02340698]
[116.68689728 174.02340698]
[116.68689728 189.02340698]
[116.68689728 204.02340698]
[116.68689728 219.02340698]
[116.68689728 234.02340698]
[116.68689728 249.02340698]
[116.68689728 264.02340698]
[116.68689728 279.02340698]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[16 108]
[17 107]
[18 106]
[19 105]
[20 97]
[21 96]
[22 95]
[24 93]
[25 92]
[26 91]
[27 90]
[112 124]
[113 123]
[114 122]
[116 120]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
