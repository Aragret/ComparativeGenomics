%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:35 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCUACUUCUCCCGCCGCCGGGAAAAAAGGCGGGAGAAGCCCCGGCAGGUUUGAAGCUGCUUxxxxxxxxxxCACACCGCACAAUCCCCUAUCUAGGCCUUCUUACGAGCCAAAACCUGCCCCUACUCCUCCCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[92.50000000 284.79315186]
[92.50000000 269.79315186]
[92.50000000 254.79313660]
[92.50000000 239.79313660]
[92.50000000 224.79313660]
[92.50000000 209.79313660]
[92.50000000 194.79313660]
[92.50000000 179.79313660]
[92.50000000 164.79313660]
[92.50000000 149.79313660]
[80.76119232 146.53466797]
[70.14849854 140.55236816]
[61.28310394 132.19641113]
[54.68393707 121.95588684]
[40.36133957 126.41270447]
[26.03874397 130.86952209]
[11.71614647 135.32633972]
[-2.60645127 139.78315735]
[-16.92904854 144.23995972]
[-31.25164604 148.69677734]
[-45.57424164 153.15359497]
[-59.89683914 157.61041260]
[-74.21943665 162.06723022]
[-88.54203796 166.52404785]
[-90.72852325 181.62974548]
[-99.25971222 194.28602600]
[-112.44174194 201.97998047]
[-127.65729523 203.18397522]
[-141.88533020 197.65893555]
[-152.30084229 186.50189209]
[-156.83583069 171.92805481]
[-154.58987427 156.83108521]
[-146.00891113 144.20849609]
[-132.79669189 136.56651306]
[-117.57650757 135.42245483]
[-103.37034607 141.00346375]
[-92.99884796 152.20144653]
[-78.67625427 147.74462891]
[-64.35365295 143.28781128]
[-50.03105927 138.83099365]
[-35.70846176 134.37419128]
[-21.38586426 129.91737366]
[-7.06326675 125.46055603]
[7.25933027 121.00373840]
[21.58192825 116.54692078]
[35.90452576 112.09010315]
[50.22712326 107.63329315]
[51.70981979 85.72887421]
[62.37215805 66.53730774]
[80.18729401 53.70676804]
[101.76869202 49.67626572]
[123.01387787 55.21196747]
[131.78009033 43.04013062]
[140.54629517 30.86829376]
[149.31250000 18.69645691]
[158.07870483 6.52462006]
[166.84490967 -5.64721680]
[175.61111450 -17.81905365]
[184.37733459 -29.99089050]
[193.14353943 -42.16272736]
[189.46183777 -55.15898895]
[193.89268494 -67.71269989]
[204.59831238 -75.29317474]
[217.52104187 -75.30290985]
[226.53857422 -87.28974152]
[235.55609131 -99.27657318]
[221.60499573 -93.76598358]
[206.65606689 -92.52920532]
[191.98902893 -95.67213440]
[178.85945129 -102.92570496]
[168.39131165 -113.66897583]
[161.48071289 -126.98226929]
[158.71926880 -141.72589111]
[160.34335327 -156.63771057]
[166.21394348 -170.44119263]
[175.82847595 -181.95469666]
[188.36390686 -190.19258118]
[202.74714661 -194.44967651]
[217.74688721 -194.36151123]
[232.07907104 -189.93565369]
[244.51681519 -181.55099487]
[253.99536133 -169.92527771]
[259.70327759 -156.05374146]
[261.15197754 -141.12385559]
[258.21740723 -126.41371155]
[251.14878845 -113.17982483]
[264.08685303 -120.76973724]
[260.88632202 -135.54180908]
[262.40634155 -150.55952454]
[268.48550415 -164.35343933]
[278.51696777 -175.57772827]
[291.50894165 -183.14157104]
[306.18273926 -186.31506348]
[321.09863281 -184.79971313]
[334.79714966 -178.75648499]
[345.94180298 -168.78868103]
[358.87988281 -176.37858582]
[371.81793213 -183.96849060]
[379.44393921 -198.48661804]
[395.83859253 -198.87089539]
[404.13644409 -184.72602844]
[395.80142212 -170.60302734]
[379.40783691 -171.03044128]
[366.46978760 -163.44052124]
[353.53173828 -155.85061646]
[356.79446411 -141.25898743]
[355.38540649 -126.35312653]
[349.43002319 -112.59399414]
[339.50003052 -101.33406830]
[326.55844116 -93.68437958]
[311.86624146 -90.40493011]
[296.85958862 -91.82916260]
[283.00927734 -97.83012390]
[271.67675781 -107.83168030]
[258.73870850 -100.24176788]
[247.54292297 -90.25904083]
[238.52540588 -78.27220917]
[229.50787354 -66.28537750]
[232.58491516 -49.78114700]
[222.60234070 -35.86596298]
[205.31536865 -33.39651871]
[196.54916382 -21.22468376]
[187.78295898 -9.05284595]
[179.01675415 3.11899066]
[170.25054932 15.29082775]
[161.48434448 27.46266365]
[152.71812439 39.63450241]
[143.95191956 51.80633926]
[135.18571472 63.97817612]
[141.20764160 71.05976105]
[145.82521057 79.12762451]
[148.88108826 87.90680695]
[150.27111816 97.09811401]
[149.94793701 106.38832092]
[147.92253113 115.46082306]
[144.26396179 124.00641632]
[139.09689331 131.73388672]
[132.59741211 138.37988281]
[124.98703003 143.71789551]
[116.52510071 147.56604004]
[107.50000000 149.79313660]
[107.50000000 164.79313660]
[107.50000000 179.79313660]
[107.50000000 194.79313660]
[107.50000000 209.79313660]
[107.50000000 224.79313660]
[107.50000000 239.79313660]
[107.50000000 254.79313660]
[107.50000000 269.79315186]
[107.50000000 284.79315186]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[14 47]
[15 46]
[16 45]
[17 44]
[18 43]
[19 42]
[20 41]
[21 40]
[22 39]
[23 38]
[24 37]
[52 129]
[53 128]
[54 127]
[55 126]
[56 125]
[57 124]
[58 123]
[59 122]
[60 121]
[64 118]
[65 117]
[66 116]
[86 115]
[87 114]
[96 105]
[97 104]
[98 103]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
