%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:57 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCCUAGCAGCAGCAGGCAAAUCAGCCCAAUUAGGUCUCCACCCCUGACUCCCCUCAGCCAUxxxxxxxxxxUAAAAUCCCCACUAUGCACAUUUUAUUUCUCCAACAUACUCGGAUUCUACCCUAGCAUCACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[280.97106934 23.17322540]
[267.44686890 29.66139030]
[253.92268372 36.14955521]
[240.39849854 42.63772202]
[232.27015686 55.11887741]
[216.48101807 54.11201859]
[202.95683289 60.60018158]
[189.43264771 67.08834839]
[175.90844727 73.57651520]
[162.38426208 80.06467438]
[148.86007690 86.55284119]
[135.33587646 93.04100800]
[121.81169128 99.52917480]
[108.28749847 106.01733398]
[96.11566162 114.78354645]
[85.67584991 125.55435181]
[82.20606232 141.58222961]
[66.51010895 146.33290100]
[54.73463440 134.91929626]
[58.99324417 119.08275604]
[74.90504456 115.11454010]
[85.34485626 104.34373474]
[81.28408813 98.03816986]
[69.10176849 79.12147522]
[54.97696686 84.17023468]
[40.85216522 89.21898651]
[34.31770325 103.60913849]
[19.49261093 109.08564758]
[5.17235374 102.39940643]
[-0.14711331 87.51724243]
[6.69015503 73.26847839]
[21.62772751 68.10665131]
[35.80340958 75.09418488]
[49.92821121 70.04543304]
[64.05301666 64.99667358]
[76.74317932 65.40818787]
[87.53079987 69.23905182]
[95.61842346 75.69046783]
[100.46134949 83.79620361]
[101.79933929 92.49314880]
[115.32352448 86.00498199]
[128.84771729 79.51681519]
[142.37190247 73.02865601]
[155.89610291 66.54048920]
[169.42028809 60.05232239]
[182.94447327 53.56415558]
[196.46865845 47.07599258]
[209.99285889 40.58782578]
[219.08854675 27.64259338]
[233.91033936 29.11353111]
[247.43452454 22.62536621]
[260.95870972 16.13720131]
[274.48291016 9.64903545]
[269.69696045 -3.75748277]
[266.29080200 -17.57846642]
[264.29922485 -31.67231178]
[263.74249268 -45.89462662]
[264.62612915 -60.09972763]
[266.94100952 -74.14210510]
[270.66326904 -87.87794495]
[275.75466919 -101.16657257]
[282.16290283 -113.87191772]
[289.82220459 -125.86389923]
[298.65405273 -137.01974487]
[308.56784058 -147.22525024]
[319.46191406 -156.37597656]
[331.22460938 -164.37831116]
[343.73538208 -171.15036011]
[356.86596680 -176.62287903]
[370.48184204 -180.73994446]
[384.44351196 -183.45948792]
[398.60791016 -184.75381470]
[412.82995605 -184.60977173]
[426.96392822 -183.02896118]
[440.86508179 -180.02774048]
[454.39105225 -175.63694763]
[467.40332031 -169.90168762]
[479.76867676 -162.88085938]
[491.36050415 -154.64646912]
[502.06011963 -145.28297424]
[511.75802612 -134.88641357]
[520.35498047 -123.56333160]
[527.76300049 -111.42983246]
[533.90637207 -98.61025238]
[548.03118896 -103.65901184]
[562.15600586 -108.70777130]
[576.28076172 -113.75652313]
[590.40557861 -118.80528259]
[593.30041504 -132.31893921]
[602.43475342 -142.54522705]
[615.33160400 -146.87217712]
[628.57244873 -144.26618958]
[638.70349121 -135.51644897]
[652.93029785 -140.27027893]
[667.15704346 -145.02409363]
[681.38385010 -149.77790833]
[681.23968506 -164.90518188]
[685.77911377 -179.33599854]
[694.55743408 -191.65660095]
[706.71453857 -200.65991211]
[721.05944824 -205.46388245]
[736.18682861 -205.59788513]
[750.61462402 -201.04879761]
[762.92932129 -192.26225281]
[771.92449951 -180.09910583]
[776.71887207 -165.75096130]
[776.84271240 -150.62351990]
[772.28393555 -136.19877625]
[763.48919678 -123.88996887]
[751.32000732 -114.90295410]
[736.96862793 -110.11820221]
[721.84112549 -110.00447083]
[707.41943359 -114.57289886]
[695.11651611 -123.37593079]
[686.13763428 -135.55111694]
[671.91088867 -130.79730225]
[657.68408203 -126.04349518]
[643.45733643 -121.28968048]
[639.03997803 -105.51017761]
[625.97119141 -95.35278320]
[609.25817871 -94.95899200]
[595.45434570 -104.68048096]
[581.32952881 -99.63172150]
[567.20477295 -94.58296204]
[553.07995605 -89.53421021]
[538.95513916 -84.48545074]
[542.62414551 -69.09233856]
[544.53845215 -53.38335037]
[544.67364502 -37.55786514]
[543.02770996 -21.81674576]
[539.62145996 -6.35981894]
[534.49786377 8.61667824]
[527.72180176 22.92258644]
[519.37908936 36.37623978]
[509.57543945 48.80676270]
[498.43518066 60.05625916]
[486.09957886 69.98179626]
[472.72503662 78.45724487]
[458.48123169 85.37485504]
[443.54891968 90.64665222]
[428.11752319 94.20552826]
[412.38287354 96.00613403]
[396.54467773 96.02540588]
[380.80395508 94.26290894]
[365.36056519 90.74082184]
[350.41055298 85.50366974]
[336.14370728 78.61772156]
[322.74124146 70.17022705]
[310.37338257 60.26823425]
[299.19723511 49.03728104]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 53]
[2 52]
[3 51]
[4 50]
[6 48]
[7 47]
[8 46]
[9 45]
[10 44]
[11 43]
[12 42]
[13 41]
[14 40]
[15 22]
[16 21]
[24 35]
[25 34]
[26 33]
[84 126]
[85 125]
[86 124]
[87 123]
[88 122]
[93 118]
[94 117]
[95 116]
[96 115]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
