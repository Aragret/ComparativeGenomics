%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:45 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGAUAUCAACAAUAGGGUUUACGACCUCGAUGUUGGAUCAGGACAUCCCGAUGGUGCAGCCGxxxxxxxxxxCAACUAUCACACAUCAACUGCAACUCCAAAGCCACCCCUCACCCACUAGGAUACCAACAACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[95.36125946 278.79306030]
[95.36125946 263.79306030]
[95.36125946 248.79306030]
[95.36125946 233.79306030]
[95.36125946 218.79306030]
[95.36125946 203.79306030]
[95.36125946 188.79306030]
[95.36125946 173.79306030]
[95.36125946 158.79306030]
[95.36125946 143.79306030]
[88.29946136 140.43292236]
[82.25505829 136.01098633]
[77.37174225 130.77598572]
[73.73835754 124.99250793]
[71.38803864 118.92962646]
[57.37132645 124.27114105]
[43.35461044 129.61265564]
[29.33789825 134.95416260]
[15.32118607 140.29568481]
[12.79048634 155.38020325]
[3.11306882 167.09533691]
[-11.03487301 172.35861206]
[-25.81880569 169.85037231]
[-37.28504181 160.34294128]
[-51.30175400 165.68446350]
[-65.31846619 171.02597046]
[-73.16505432 185.01921082]
[-89.02029419 187.46684265]
[-100.72140503 176.49125671]
[-99.29229736 160.51197815]
[-85.82925415 151.78694153]
[-70.65998077 157.00926208]
[-56.64326477 151.66773987]
[-42.62655258 146.32623291]
[-40.39566803 131.59909058]
[-31.03044701 119.88804626]
[-16.96785164 114.40080261]
[-1.94817877 116.70433044]
[9.97967339 126.27896118]
[23.99638557 120.93745422]
[38.01309967 115.59593964]
[52.02981186 110.25442505]
[66.04652405 104.91291809]
[64.67494965 93.53710175]
[67.17820740 81.82972717]
[73.60627747 71.12528229]
[61.34391403 62.48616409]
[52.46400833 60.07802582]
[48.91884232 53.53757858]
[36.83885574 44.64522934]
[20.82572937 45.62471771]
[10.18330383 33.61978912]
[13.07553577 17.83959579]
[27.28375053 10.38934994]
[41.90862274 16.98424530]
[45.73120499 32.56523895]
[57.81119156 41.45759201]
[69.98303223 50.22379684]
[82.24539948 58.86291504]
[96.81809998 55.30815125]
[103.72509766 41.99299622]
[110.63209534 28.67783928]
[97.16653442 -14.31804848]
[101.47412109 -28.68623352]
[105.78170776 -43.05441666]
[110.08929443 -57.42259979]
[114.39687347 -71.79078674]
[101.09930420 -78.83782959]
[89.43225098 -88.34393311]
[79.84415436 -99.94370270]
[72.70355988 -113.19127655]
[68.28494263 -127.57745361]
[66.75812531 -142.54925537]
[68.18180847 -157.53123474]
[72.50125885 -171.94749451]
[79.55046082 -185.24391174]
[89.05845642 -196.90943909]
[100.65977478 -206.49565125]
[113.90850067 -213.63409424]
[128.29539490 -218.05039978]
[143.26744080 -219.57478333]
[158.24919128 -218.14868164]
[172.66474915 -213.82688904]
[185.96003723 -206.77554321]
[197.62400818 -197.26565552]
[207.20835876 -185.66278076]
[214.34465027 -172.41290283]
[218.75862122 -158.02529907]
[220.28059387 -143.05299377]
[218.85205078 -128.07148743]
[214.52793884 -113.65663147]
[207.47442627 -100.36248016]
[197.96266174 -88.70004272]
[186.35824585 -79.11758423]
[173.10720825 -71.98342133]
[158.71888733 -67.57178497]
[143.74633789 -66.05224609]
[128.76506042 -67.48320007]
[124.45747375 -53.11501694]
[120.14988708 -38.74683380]
[115.84230804 -24.37864876]
[111.53472137 -10.01046371]
[121.86238861 0.86883974]
[132.18913269 11.74718666]
[146.76184082 8.19242477]
[158.23583984 -3.52419996]
[174.05027771 0.81578851]
[177.93661499 16.74778175]
[165.89691162 27.88231087]
[150.31658936 22.76512718]
[135.74389648 26.31988907]
[123.94725037 35.58483887]
[117.04025269 48.89999390]
[110.13325500 62.21514893]
[129.38821411 71.75713348]
[141.35563660 90.65323639]
[141.78892517 113.89373016]
[155.44515991 120.09913635]
[169.10140991 126.30454254]
[182.53143311 118.53189850]
[197.96166992 120.17115021]
[209.45889282 130.59197998]
[212.60217285 145.78735352]
[206.18286133 159.91435242]
[192.66929626 167.54084778]
[177.25775146 165.73429871]
[165.87425232 155.18936157]
[162.89599609 139.96078491]
[149.23976135 133.75537109]
[135.58351135 127.54997253]
[129.27795410 131.61074829]
[138.28739929 143.60365295]
[147.29684448 155.59655762]
[159.80691528 163.87292480]
[159.71444702 178.87263489]
[147.10327148 186.99412537]
[133.40908813 180.87289429]
[131.04959106 166.05975342]
[123.85820770 152.89602661]
[116.66682434 139.73228455]
[110.36125946 143.79306030]
[110.36125946 158.79306030]
[110.36125946 173.79306030]
[110.36125946 188.79306030]
[110.36125946 203.79306030]
[110.36125946 218.79306030]
[110.36125946 233.79306030]
[110.36125946 248.79306030]
[110.36125946 263.79306030]
[110.36125946 278.79306030]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[15 43]
[16 42]
[17 41]
[18 40]
[19 39]
[24 34]
[25 33]
[26 32]
[46 59]
[47 58]
[49 57]
[50 56]
[60 114]
[61 113]
[62 112]
[63 102]
[64 101]
[65 100]
[66 99]
[67 98]
[104 111]
[105 110]
[117 130]
[118 129]
[119 128]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
