%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:27 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGAACCAACACCUCUUUACAGUGAAAUGCCCCAACUAAAUACUACCGUAUGGCCCACCAUAAxxxxxxxxxxAGUUUUGACAACAUUCAAAAAAGAGUAAUAAACUUCGCCUUAAUUUUAAUAAUCAACACCCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[104.01669312 282.67022705]
[104.01669312 267.67022705]
[104.01669312 252.67022705]
[104.01669312 237.67022705]
[104.01669312 222.67022705]
[104.01669312 207.67022705]
[104.01669312 192.67022705]
[104.01669312 177.67022705]
[104.01669312 162.67022705]
[104.01669312 147.67022705]
[92.25741577 146.38298035]
[81.37412262 142.29035950]
[72.01196289 135.74163818]
[64.69913483 127.22807312]
[59.81738663 117.34721375]
[57.58272171 106.76158142]
[58.03740692 96.15444183]
[61.05330276 86.18582916]
[66.34596252 77.45143127]
[73.49832153 70.44708252]
[65.77423096 57.58867645]
[58.05014801 44.73027420]
[50.32606506 31.87187195]
[42.60197830 19.01346970]
[34.87789536 6.15506744]
[22.92689323 5.56642914]
[12.86287403 -0.68052191]
[7.14953804 -10.91925240]
[7.11862946 -22.52385139]
[12.66128445 -32.58215332]
[5.47877598 -45.75073624]
[-1.70373309 -58.91931915]
[-8.88624191 -72.08790588]
[-17.26951218 -65.15545654]
[-27.47930908 -62.12579346]
[-37.83291245 -63.31201553]
[-46.69532776 -68.34709167]
[-52.73745346 -76.27060699]
[-55.13470078 -85.70681763]
[-53.67647934 -95.10186005]
[-48.77256012 -102.97928619]
[-56.49664688 -115.83768463]
[-64.22073364 -128.69609070]
[-71.94481659 -141.55448914]
[-86.35279846 -137.13909912]
[-101.38974762 -136.30094910]
[-116.18134308 -139.08442688]
[-129.86857605 -145.32347107]
[-141.65763855 -154.65147400]
[-150.86593628 -166.52278137]
[-156.96163940 -180.24468994]
[-159.59437561 -195.01779175]
[-158.61537170 -209.98260498]
[-154.08589172 -224.26950073]
[-146.27336121 -237.04934692]
[-135.63560486 -247.58151245]
[-143.35968018 -260.43991089]
[-151.08377075 -273.29830933]
[-158.80786133 -286.15670776]
[-166.53193665 -299.01513672]
[-181.12860107 -306.48971558]
[-181.68341064 -322.87945557]
[-167.62562561 -331.32403564]
[-153.41668701 -323.13635254]
[-153.67353821 -306.73919678]
[-145.94944763 -293.88079834]
[-138.22537231 -281.02239990]
[-130.50128174 -268.16400146]
[-122.77719879 -255.30560303]
[-108.48269653 -259.75033569]
[-93.53079224 -260.64514160]
[-78.79036713 -257.93374634]
[-65.11904144 -251.76943970]
[-53.31329727 -242.50659180]
[-44.06206512 -230.68022156]
[-37.90651703 -216.97511292]
[-35.20843506 -202.18614197]
[-36.12892532 -187.17218018]
[-40.61881256 -172.80624390]
[-48.42125320 -159.92469788]
[-59.08641434 -149.27857971]
[-51.36232758 -136.42018127]
[-43.63824463 -123.56177521]
[-35.91415787 -110.70336914]
[-21.13220215 -111.40824127]
[-7.61964417 -102.50971985]
[0.63264513 -115.03567505]
[1.05811441 -131.42930603]
[15.59534931 -139.01882935]
[29.28969002 -129.99679565]
[28.05357170 -113.64430237]
[13.15860748 -106.78338623]
[4.90631771 -94.25743103]
[4.28234053 -79.27040863]
[11.46484947 -66.10182953]
[18.64735794 -52.93324661]
[25.82986641 -39.76466370]
[43.63510513 -35.71856308]
[53.04611969 -19.70199966]
[47.73629761 -1.56901753]
[55.46038055 11.28938484]
[63.18446732 24.14778709]
[70.90855408 37.00619125]
[78.63263702 49.86459351]
[86.35671997 62.72299576]
[108.50276184 59.14416504]
[130.19113159 68.31303406]
[144.33905029 88.51173401]
[145.66676331 114.25239563]
[160.31025696 117.50322723]
[174.95376587 120.75405121]
[189.59725952 124.00487518]
[204.74629211 119.44226074]
[215.49424744 129.75395203]
[230.13774109 133.00477600]
[243.33311462 124.30663300]
[258.79714966 127.56845856]
[267.35528564 140.85505676]
[263.93014526 156.28373718]
[250.55381775 164.70092773]
[235.16221619 161.11285400]
[226.88691711 147.64826965]
[212.24342346 144.39744568]
[198.14178467 149.19258118]
[186.34643555 138.64837646]
[171.70294189 135.39755249]
[157.05943298 132.14672852]
[142.41593933 128.89590454]
[136.56613159 133.58947754]
[147.85847473 143.46281433]
[159.15083313 153.33615112]
[173.39213562 158.04624939]
[181.05329895 170.94224548]
[178.37837219 185.70181274]
[166.67877197 195.08900452]
[151.69027710 194.50169373]
[140.76106262 184.22782898]
[139.24926758 169.30412292]
[132.05789185 156.14038086]
[124.86650085 142.97663879]
[119.01669312 147.67022705]
[119.01669312 162.67022705]
[119.01669312 177.67022705]
[119.01669312 192.67022705]
[119.01669312 207.67022705]
[119.01669312 222.67022705]
[119.01669312 237.67022705]
[119.01669312 252.67022705]
[119.01669312 267.67022705]
[119.01669312 282.67022705]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[20 105]
[21 104]
[22 103]
[23 102]
[24 101]
[25 100]
[30 97]
[31 96]
[32 95]
[33 94]
[41 84]
[42 83]
[43 82]
[44 81]
[56 69]
[57 68]
[58 67]
[59 66]
[60 65]
[86 93]
[87 92]
[109 128]
[110 127]
[111 126]
[112 125]
[114 123]
[115 122]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
