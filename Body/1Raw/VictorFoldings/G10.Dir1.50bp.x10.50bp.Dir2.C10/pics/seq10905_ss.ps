%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:53 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCCCUACUCCACUCAAGCACUAUAGUUGUAGCAGGAAUCUUCUUACUCAUCCGCUUCCACCCxxxxxxxxxxCACACACCGCACAAUCCCCUAUCUAGGCCUUCUUACGAGCCAAAACCUGCCCCUACUCCUCCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[81.69883728 436.53091431]
[81.69883728 421.53091431]
[81.69883728 406.53091431]
[81.69883728 391.53091431]
[81.69883728 376.53091431]
[81.69883728 361.53091431]
[81.69883728 346.53091431]
[81.69883728 331.53091431]
[81.69883728 316.53091431]
[81.69883728 301.53091431]
[68.66548157 298.90902710]
[56.34867859 293.89276123]
[45.18422318 286.65777588]
[35.56750107 277.45816040]
[27.83946228 266.61767578]
[22.27455711 254.51832581]
[19.07097626 241.58682251]
[18.34358978 228.27961731]
[20.11983681 215.06674194]
[24.33869362 202.41525269]
[30.85276413 190.77262878]
[39.43342972 180.55108643]
[49.77888107 172.11285400]
[61.52472305 165.75738525]
[74.25680542 161.71076965]
[87.52584839 160.11761475]
[88.75646210 145.16818237]
[89.98707581 130.21875000]
[72.36730957 115.80715179]
[68.87566376 93.31362152]
[81.29736328 74.23872375]
[75.59270477 60.36584473]
[69.88803864 46.49296570]
[64.18338013 32.62008286]
[57.91397095 18.99310493]
[51.09039688 5.63500595]
[44.26682281 -7.72309351]
[37.44324493 -21.08119392]
[27.22453880 -32.06199646]
[14.39088440 -39.82712936]
[1.55723071 -47.59226608]
[-7.46575880 -49.37592697]
[-11.45788765 -55.65088654]
[-24.12940407 -63.67788315]
[-36.80091858 -71.70487976]
[-49.45505142 -63.23181534]
[-64.46258545 -60.64458084]
[-79.22338104 -64.39143372]
[-91.18003082 -73.82320404]
[-98.26098633 -87.30578613]
[-99.23941803 -102.50323486]
[-93.94580841 -116.78250885]
[-83.29731750 -127.66963196]
[-69.13884735 -133.27835083]
[-53.92344666 -132.63690186]
[-40.28727341 -125.85644531]
[-30.59287453 -114.11171722]
[-26.51986694 -99.43757629]
[-28.77392197 -84.37639618]
[-16.10240746 -76.34940338]
[-3.43089080 -68.32240295]
[9.32236576 -60.42591858]
[22.15601921 -52.66078568]
[34.98967361 -44.89564896]
[28.08665657 -58.21287155]
[24.14930725 -72.68688965]
[23.35494995 -87.66584015]
[25.73936081 -102.47511292]
[31.19515610 -116.44774628]
[39.47661591 -128.95443726]
[50.21077347 -139.43193054]
[62.91419220 -147.40834045]
[77.01473999 -152.52444458]
[91.87737274 -154.54983521]
[106.83271790 -153.39326477]
[121.20722961 -149.10684204]
[134.35351562 -141.88362122]
[145.67951965 -132.04888916]
[154.67514038 -120.04560852]
[160.93522644 -106.41434479]
[164.17787170 -91.76902771]
[164.25700378 -76.76924133]
[161.16908264 -62.09052277]
[155.05317688 -48.39396667]
[146.18472290 -36.29642487]
[134.96311951 -26.34274101]
[121.89378357 -18.98119736]
[107.56529999 -14.54333591]
[92.62299347 -13.22902775]
[77.73981476 -15.09746552]
[63.58606720 -20.06449890]
[50.80134583 -27.90476799]
[57.62491989 -14.54666901]
[64.44849396 -1.18856966]
[71.27207184 12.16952991]
[73.96179962 13.14748096]
[76.41316223 15.28290749]
[78.17074585 18.48566437]
[78.82211304 22.49805450]
[78.05625916 26.91542053]
[83.76091766 40.78830338]
[89.46558380 54.66118240]
[95.17024994 68.53406525]
[106.83682251 68.90837097]
[117.58422852 73.46273041]
[125.96755981 81.58485413]
[130.85972595 92.18276978]
[145.85893250 92.02877045]
[160.85813904 91.87477112]
[168.33062744 78.45622253]
[181.51950073 70.58543396]
[196.87701416 70.37961578]
[210.27207947 77.89412689]
[218.10148621 91.10759735]
[218.25917053 106.46568298]
[210.70269775 119.83712769]
[197.46475220 127.62507629]
[182.10624695 127.73461914]
[168.75856018 120.13628387]
[161.01214600 106.87398529]
[146.01292419 107.02797699]
[131.01371765 107.18197632]
[129.35592651 112.31509399]
[126.85527039 117.09461975]
[123.58356476 121.38333893]
[119.63473511 125.05811310]
[115.12216187 128.01342773]
[110.17541504 130.16442871]
[104.93650818 131.44937134]
[103.70589447 146.39880371]
[102.47528076 161.34823608]
[118.51284027 166.45707703]
[132.89332581 175.18872070]
[144.81269836 187.05065918]
[153.60549927 201.37547302]
[158.78208923 217.35839844]
[160.05581665 234.10252380]
[157.35897827 250.66912842]
[150.84634399 266.13031006]
[140.88632202 279.62100220]
[128.04008484 290.38723755]
[113.02995300 297.82846069]
[96.69883728 301.53091431]
[96.69883728 316.53091431]
[96.69883728 331.53091431]
[96.69883728 346.53091431]
[96.69883728 361.53091431]
[96.69883728 376.53091431]
[96.69883728 391.53091431]
[96.69883728 406.53091431]
[96.69883728 421.53091431]
[96.69883728 436.53091431]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 152]
[2 151]
[3 150]
[4 149]
[5 148]
[6 147]
[7 146]
[8 145]
[9 144]
[10 143]
[26 131]
[27 130]
[28 129]
[31 103]
[32 102]
[33 101]
[34 100]
[35 95]
[36 94]
[37 93]
[38 92]
[39 64]
[40 63]
[41 62]
[43 61]
[44 60]
[45 59]
[107 122]
[108 121]
[109 120]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
