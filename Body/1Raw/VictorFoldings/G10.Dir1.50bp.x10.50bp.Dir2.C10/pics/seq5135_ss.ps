%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:29 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGUCCCUCACUAAACGUAAGCCUUCUCCUCACUCUCUCAAUCUUAUCCAUCAUAGCAGGCAGxxxxxxxxxxUUUUUGUAGCCACAGGCUUCCACGGACUUCACGUCAUUAUUGGCUCAACUUUCCUCACUACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[123.67325592 351.17163086]
[123.67325592 336.17163086]
[123.67325592 321.17163086]
[123.67325592 306.17163086]
[123.67325592 291.17163086]
[123.67325592 276.17163086]
[123.67325592 261.17163086]
[123.67325592 246.17163086]
[123.67325592 231.17163086]
[123.67325592 216.17163086]
[121.03439331 201.40557861]
[118.47590637 200.11659241]
[116.29154968 197.70359802]
[114.92458344 194.31047058]
[114.75541687 190.24322510]
[116.04565430 185.94244385]
[112.03791809 171.48774719]
[101.18139648 161.29043579]
[104.95024109 145.92468262]
[100.94250488 131.47000122]
[96.93476105 117.01531219]
[79.59917450 101.02787781]
[93.51242065 77.34645844]
[86.32991028 64.17787933]
[79.14739990 51.00929642]
[71.69248962 37.99298477]
[63.96840668 25.13458252]
[56.24432373 12.27618122]
[48.52023697 -0.58222145]
[40.79615021 -13.44062424]
[33.07206726 -26.29902649]
[19.50769424 -19.86671638]
[5.37815619 -14.79493999]
[-9.18047047 -11.13253975]
[-24.02797508 -8.91478825]
[-39.02136230 -8.16304493]
[-54.01623535 -8.88454914]
[-68.86817932 -11.07235241]
[-83.43416595 -14.70538425]
[-97.57390594 -19.74865532]
[-111.15122223 -26.15359688]
[-124.03535461 -33.85852051]
[-136.10221863 -42.78922653]
[-147.23561096 -52.85969925]
[-157.32829285 -63.97295761]
[-166.28308105 -76.02197266]
[-174.01371765 -88.89069366]
[-180.44575500 -102.45519257]
[-185.51724243 -116.58483887]
[-189.17935181 -131.14353943]
[-191.39680481 -145.99108887]
[-192.14825439 -160.98448181]
[-191.42645264 -175.97933960]
[-189.23834229 -190.83125305]
[-185.60502625 -205.39715576]
[-180.56147766 -219.53678894]
[-174.15626526 -233.11398315]
[-166.45108032 -245.99797058]
[-157.52012634 -258.06466675]
[-147.44943237 -269.19784546]
[-136.33596802 -279.29031372]
[-124.28678131 -288.24484253]
[-111.41790771 -295.97521973]
[-97.85327148 -302.40698242]
[-83.72353363 -307.47821045]
[-69.16475677 -311.14001465]
[-54.31716537 -313.35717773]
[-39.32374954 -314.10830688]
[-24.32890511 -313.38623047]
[-9.47704601 -311.19781494]
[5.08879185 -307.56420898]
[19.22832870 -302.52035522]
[32.80538940 -296.11489868]
[45.68921661 -288.40945435]
[57.75572586 -279.47827148]
[68.88871002 -269.40734863]
[78.98094940 -258.29367065]
[87.93524933 -246.24430847]
[95.66537476 -233.37527466]
[102.09687042 -219.81051636]
[107.16780090 -205.68066406]
[110.82932281 -191.12182617]
[113.04618835 -176.27418518]
[113.79702759 -161.28076172]
[113.07462311 -146.28591919]
[110.88593292 -131.43411255]
[107.25202179 -116.86834717]
[102.20790863 -102.72891235]
[95.80214691 -89.15197754]
[88.09645081 -76.26830292]
[79.16502380 -64.20197296]
[69.09387970 -53.06918716]
[57.98001862 -42.97716904]
[45.93046951 -34.02310944]
[53.65455627 -21.16470909]
[61.37863922 -8.30630684]
[69.10272217 4.55209589]
[76.82681274 17.41049767]
[84.55089569 30.26889992]
[88.94608307 32.28330994]
[92.09132385 37.11433411]
[92.31598663 43.82678604]
[99.49849701 56.99536896]
[106.68099976 70.16394806]
[120.06728363 76.93206787]
[134.93032837 74.90972900]
[149.79338074 72.88739777]
[160.60995483 61.03913498]
[176.60707092 62.25232697]
[185.51310730 75.59631348]
[180.49612427 90.83473206]
[165.40470886 96.27796936]
[151.81571960 87.75044250]
[136.95266724 89.77278137]
[122.08962250 91.79511261]
[119.80179596 105.01388550]
[111.38945007 113.00757599]
[115.39719391 127.46225739]
[119.40493011 141.91694641]
[130.54811096 153.14816284]
[126.49260712 167.48001099]
[130.50035095 181.93470764]
[135.10591125 196.21015930]
[138.16920471 181.52629089]
[145.75558472 168.58616638]
[157.07272339 158.74124146]
[170.93865967 153.01972961]
[185.90525818 152.01916504]
[200.40939331 155.84405518]
[212.93629456 164.09494019]
[222.17762756 175.91007996]
[227.16825867 190.05552673]
[227.38694763 205.05393982]
[222.81086731 219.33886719]
[213.91793823 231.41844177]
[201.63693237 240.03103638]
[187.25047302 244.27719116]
[172.26107788 243.71342468]
[158.23422241 238.39862061]
[146.63485718 228.88784790]
[138.67324829 216.17163086]
[138.67324829 231.17163086]
[138.67324829 246.17163086]
[138.67324829 261.17163086]
[138.67324829 276.17163086]
[138.67324829 291.17163086]
[138.67324829 306.17163086]
[138.67324829 321.17163086]
[138.67324829 336.17163086]
[138.67324829 351.17163086]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[11 123]
[16 122]
[17 121]
[19 119]
[20 118]
[21 117]
[23 104]
[24 103]
[25 102]
[26 99]
[27 98]
[28 97]
[29 96]
[30 95]
[31 94]
[105 115]
[106 114]
[107 113]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
