%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:30 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGUCCCACUCCCAUACUACUAAUCUCAUCAAUACAACCCCCGCCCAUCCUACCCAGCACACACxxxxxxxxxxAGGAGGGCACUGGCCCCCAACAGGCAUCACCCCGCUAAAUCCCCUAGAAGUCCCACUCCUACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[-58.73039627 197.13168335]
[-64.90870667 186.22657776]
[-78.47060394 192.63554382]
[-92.03250122 199.04452515]
[-101.20372009 211.93635559]
[-116.01666260 210.37876892]
[-129.57855225 216.78775024]
[-143.14045715 223.19673157]
[-156.70234680 229.60569763]
[-170.26425171 236.01467896]
[-183.82614136 242.42366028]
[-180.00347900 256.97363281]
[-178.91970825 271.97830200]
[-180.61170959 286.92660522]
[-185.02188110 301.30941772]
[-192.00001526 314.63684082]
[-201.30841064 326.45495605]
[-212.63006592 336.36126709]
[-225.57933044 344.01837158]
[-239.71519470 349.16543579]
[-254.55616760 351.62716675]
[-269.59677124 351.31970215]
[-284.32476807 348.25357056]
[-298.23846436 342.53314209]
[-310.86401367 334.35327148]
[-321.77139282 323.99258423]
[-330.58908081 311.80395508]
[-337.01675415 298.20248413]
[-340.83547974 283.65145874]
[-341.91522217 268.64651489]
[-340.21917725 253.69866943]
[-335.80514526 239.31704712]
[-328.82342529 225.99150085]
[-319.51181030 214.17588806]
[-308.18750000 204.27262878]
[-295.23617554 196.61903381]
[-281.09893799 191.47578430]
[-266.25729370 189.01805115]
[-251.21676636 189.32954407]
[-236.48960876 192.39967346]
[-222.57743835 198.12384033]
[-209.95408630 206.30709839]
[-199.04951477 216.67073059]
[-190.23512268 228.86175537]
[-176.67321777 222.45278931]
[-163.11132812 216.04380798]
[-149.54942322 209.63482666]
[-135.98753357 203.22586060]
[-122.42563629 196.81687927]
[-114.22444916 184.38346863]
[-98.44147491 185.48263550]
[-84.87957764 179.07365417]
[-71.31768036 172.66467285]
[-76.82401276 157.99285889]
[-81.07637787 142.90977478]
[-84.04461670 127.52238464]
[-85.70768738 111.93981934]
[-86.05377960 96.27258301]
[-85.08045959 80.63177490]
[-82.79460907 65.12832642]
[-79.21245575 49.87217331]
[-74.35939026 34.97150421]
[-68.26984406 20.53199387]
[-60.98698425 6.65604115]
[-52.56246567 -6.55795240]
[-43.05603409 -19.01627731]
[-32.53510284 -30.63058472]
[-21.07428551 -41.31850815]
[-8.75485325 -51.00425720]
[4.33582640 -59.61913681]
[18.10491943 -67.10206604]
[32.45478439 -73.39996338]
[47.28364944 -78.46817780]
[62.48636246 -82.27075958]
[77.95510864 -84.78075409]
[93.58018494 -85.98034668]
[109.25079346 -85.86103821]
[124.85578918 -84.42367554]
[140.28453064 -81.67845154]
[155.42758179 -77.64483643]
[170.17755127 -72.35142517]
[184.42987061 -65.83576202]
[198.08343506 -58.14406204]
[206.49684143 -70.56237793]
[208.74113464 -79.48195648]
[215.21266174 -83.14685822]
[223.87927246 -95.38980865]
[232.54586792 -107.63276672]
[241.21247864 -119.87571716]
[242.18600464 -136.24594116]
[256.96893311 -143.34501648]
[270.35388184 -133.87001038]
[268.57153320 -117.56801605]
[253.45542908 -111.20911407]
[244.78883362 -98.96615601]
[236.12222290 -86.72320557]
[227.45561218 -74.48024750]
[218.91516113 -62.14896393]
[210.50173950 -49.73065186]
[228.10499573 -34.97782898]
[243.75680542 -18.16887856]
[257.21875000 0.44014686]
[268.28579712 20.56577682]
[276.78930664 41.90143204]
[291.21670532 37.79648972]
[300.24804688 24.53699875]
[316.25588989 23.47457123]
[326.96035767 35.42420959]
[324.14990234 51.21917725]
[309.98046875 58.74291992]
[295.32162476 52.22387314]
[280.89425659 56.32881927]
[283.42364502 68.60461426]
[285.12097168 81.02283478]
[285.97851562 93.52713776]
[285.99240112 106.06079865]
[285.16256714 118.56697845]
[283.49276733 130.98892212]
[280.99057007 143.27029419]
[277.66735840 155.35537720]
[273.53817749 167.18934631]
[268.62176514 178.71852112]
[262.94042969 189.89060974]
[256.51992798 200.65492249]
[249.38941956 210.96261597]
[241.58123779 220.76695251]
[233.13076782 230.02345276]
[224.07638550 238.69012451]
[214.45915222 246.72766113]
[204.32269287 254.09957886]
[193.71299744 260.77243042]
[182.67817688 266.71600342]
[171.26831055 271.90325928]
[159.53514099 276.31072998]
[147.53189087 279.91836548]
[135.31303406 282.70986938]
[122.93397522 284.67251587]
[110.45088196 285.79742432]
[97.92037964 286.07949829]
[85.39931488 285.51745605]
[72.94448090 284.11383057]
[60.61238480 281.87500000]
[48.45896149 278.81115723]
[36.53934479 274.93612671]
[24.90760612 270.26754761]
[13.61651421 264.82656860]
[2.71728611 258.63787842]
[-7.74063444 251.72955322]
[-17.70980644 244.13293457]
[-27.14500809 235.88249207]
[-36.00343323 227.01562500]
[-44.24490356 217.57257080]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 53]
[3 52]
[4 51]
[6 49]
[7 48]
[8 47]
[9 46]
[10 45]
[11 44]
[83 99]
[84 98]
[86 97]
[87 96]
[88 95]
[89 94]
[104 112]
[105 111]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
