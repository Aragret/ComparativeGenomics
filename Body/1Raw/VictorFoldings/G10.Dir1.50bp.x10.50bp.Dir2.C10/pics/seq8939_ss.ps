%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:32 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCAUAUACCAAUGAUGGCGCGAUGUAACACGAGAAAGCACAUACCAAGGCCACCACACACCxxxxxxxxxxACCAACACACUAACCAUAUACCAAUGAUGGCGCGAUGUAACACGAGAAAGCACAUACCAACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[142.79673767 295.16461182]
[142.79673767 280.16461182]
[142.79673767 265.16461182]
[142.79673767 250.16462708]
[142.79673767 235.16462708]
[142.79673767 220.16462708]
[142.79673767 205.16462708]
[142.79673767 190.16462708]
[142.79673767 175.16462708]
[142.79673767 160.16462708]
[139.24197388 145.59191895]
[132.33497620 132.27676392]
[125.42797852 118.96160889]
[118.08971405 117.41245270]
[108.06824493 128.57354736]
[103.41318512 114.31412506]
[96.07492828 112.76496887]
[84.37530518 122.15213013]
[72.67568207 131.53929138]
[67.23729706 147.01042175]
[51.07198334 149.76988220]
[40.80921936 136.97895813]
[47.00646210 121.79586029]
[63.28851700 119.83966827]
[74.98814392 110.45250702]
[86.68776703 101.06534576]
[91.73651886 86.94053650]
[88.63819885 72.26401520]
[85.53987885 57.58749008]
[82.44155884 42.91096497]
[71.45588684 32.69748306]
[56.59284210 30.67514992]
[41.72979736 28.65281487]
[26.86674881 26.63047981]
[18.88937187 39.60280991]
[6.32168579 48.20357513]
[-8.65888214 50.94263840]
[-23.45685768 47.34544373]
[-35.50840378 38.03522491]
[-42.72551346 24.62503433]
[-43.85778046 9.43826771]
[-38.70903397 -4.89387417]
[-28.17132378 -15.88826275]
[-14.07037449 -21.64005280]
[1.15074241 -21.15271187]
[14.85487461 -14.51067543]
[24.66769981 -2.86471605]
[28.88908386 11.76743317]
[43.75213242 13.78976822]
[58.61517715 15.81210232]
[73.47822571 17.83443642]
[78.66726685 18.70961571]
[82.89520264 21.10972595]
[86.60136414 6.57479048]
[90.30752563 -7.96014547]
[76.28471375 -13.33390713]
[62.98059464 -20.29931641]
[50.57508469 -28.76217079]
[39.23596191 -38.60802460]
[29.11657143 -49.70371628]
[20.35376549 -61.89920044]
[13.06605244 -75.02953339]
[7.35198927 -88.91716003]
[3.28885245 -103.37424469]
[0.93159175 -118.20529175]
[0.31208605 -133.20971680]
[1.43871355 -148.18460083]
[4.29623795 -162.92742920]
[8.84601402 -177.23883057]
[15.02651215 -190.92524719]
[22.75414658 -203.80158997]
[31.92441177 -215.69371033]
[42.41329193 -226.44081116]
[54.07892990 -235.89752197]
[66.76356506 -243.93595886]
[80.29566193 -250.44740295]
[94.49219513 -255.34381104]
[109.16118622 -258.55895996]
[124.10425568 -260.04937744]
[139.11930847 -259.79489136]
[154.00328064 -257.79895020]
[168.55488586 -254.08851624]
[182.57734680 -248.71382141]
[195.88099670 -241.74752808]
[208.28593445 -233.28384399]
[219.62440491 -223.43724060]
[229.74305725 -212.34086609]
[238.50505066 -200.14480591]
[245.79188538 -187.01397705]
[251.50502014 -173.12597656]
[255.56719971 -158.66860962]
[257.92346191 -143.83741760]
[258.54196167 -128.83294678]
[257.41433716 -113.85813904]
[254.55583191 -99.11549377]
[250.00509644 -84.80440521]
[243.82368469 -71.11840057]
[236.09519958 -58.24257660]
[226.92413330 -46.35105515]
[216.43453979 -35.60466766]
[204.76826477 -26.14873505]
[192.08309937 -18.11114311]
[178.55056763 -11.60059261]
[164.35371399 -6.70512915]
[149.68449402 -3.49095821]
[134.74133301 -2.00154853]
[119.72630310 -2.25704217]
[104.84246063 -4.25398445]
[101.13629913 10.28095150]
[97.43013763 24.81588745]
[97.11808014 39.81264114]
[100.21640015 54.48916626]
[103.31472778 69.16569519]
[106.41304779 83.84221649]
[138.74313354 112.05461121]
[145.65013123 125.36976624]
[152.55712891 138.68492126]
[153.55149841 123.71791840]
[158.16947937 109.44647217]
[166.13165283 96.73412323]
[176.95625305 86.35009003]
[189.98828125 78.92269135]
[204.43919373 74.90135193]
[219.43457031 74.52938843]
[234.06709290 77.82931519]
[247.45133972 84.60145569]
[258.77746582 94.43604279]
[267.36010742 106.73799133]
[272.67999268 120.76292419]
[274.41519165 135.66223145]
[272.46072388 150.53434753]
[266.93481445 164.47940063]
[258.17187500 176.65359497]
[246.70213318 186.32026672]
[233.21957397 192.89453125]
[218.54003906 195.97856140]
[203.55175781 195.38575745]
[189.16165161 191.15197754]
[176.24044800 183.53341675]
[165.56999207 172.99107361]
[157.79673767 160.16462708]
[157.79673767 175.16462708]
[157.79673767 190.16462708]
[157.79673767 205.16462708]
[157.79673767 220.16462708]
[157.79673767 235.16462708]
[157.79673767 250.16462708]
[157.79673767 265.16461182]
[157.79673767 280.16461182]
[157.79673767 295.16461182]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[11 117]
[12 116]
[13 115]
[17 26]
[18 25]
[19 24]
[27 114]
[28 113]
[29 112]
[30 111]
[31 51]
[32 50]
[33 49]
[34 48]
[53 110]
[54 109]
[55 108]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
