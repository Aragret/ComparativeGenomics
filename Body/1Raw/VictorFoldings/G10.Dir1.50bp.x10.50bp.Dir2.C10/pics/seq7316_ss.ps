%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:16 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGGAGUGACUAUAUGGAUGCCCCCCACCCUACCACACAUUCGAAGAACCCGUAUACAUAAAAUxxxxxxxxxxUUAUGUCAUCCCUCUUAUUAAUCAUCAUCCUAGCCCUAAGUCUGGCCUAUGAGUGACUACACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[-32.59437561 244.62417603]
[-43.14639282 255.28509521]
[-53.69840622 265.94601440]
[-57.90727234 281.19711304]
[-72.35960388 284.79977417]
[-82.91162109 295.46069336]
[-93.46363831 306.12158203]
[-104.01565552 316.78250122]
[-114.56766510 327.44342041]
[-125.11968231 338.10430908]
[-129.32855225 353.35540771]
[-143.78088379 356.95809937]
[-138.21112061 371.13192749]
[-138.89439392 386.34552002]
[-145.71231079 399.96298218]
[-157.48365784 409.62506104]
[-172.16894531 413.65771484]
[-187.22386169 411.36224365]
[-200.04006958 403.13638306]
[-208.39707947 390.40530396]
[-210.84696960 375.37475586]
[-206.96530151 360.64883423]
[-197.42459106 348.77893066]
[-183.87782288 341.82156372]
[-168.67205811 340.98211670]
[-154.44178772 346.40609741]
[-150.98767090 331.91751099]
[-135.78059387 327.55230713]
[-125.22857666 316.89138794]
[-114.67655945 306.23049927]
[-104.12454987 295.56958008]
[-93.57253265 284.90866089]
[-83.02051544 274.24777222]
[-79.56639862 259.75921631]
[-64.35931396 255.39398193]
[-53.80730057 244.73307800]
[-43.25528717 234.07217407]
[-54.18241119 221.34747314]
[-63.98284531 207.73602295]
[-72.58497620 193.33729553]
[-79.92594147 178.25650024]
[-85.95209503 162.60385132]
[-90.61940765 146.49371338]
[-93.89376068 130.04383850]
[-95.75124359 113.37440491]
[-96.17826843 96.60723877]
[-95.17172241 79.86486816]
[-92.73895264 63.26964188]
[-88.89774323 46.94281769]
[-83.67617035 31.00370598]
[-77.11237335 15.56878853]
[-69.25433350 0.75085193]
[-60.15946579 -13.34182167]
[-49.89423370 -26.60624886]
[-38.53364563 -38.94549942]
[-26.16072464 -50.26940918]
[-12.86588287 -60.49522018]
[1.25372672 -69.54821777]
[16.09492493 -77.36223602]
[31.54925919 -83.88018036]
[47.50379944 -89.05441284]
[63.84195328 -92.84713745]
[80.44433594 -95.23062897]
[79.52091980 -110.20217896]
[78.59751129 -125.17372894]
[77.67409515 -140.14527893]
[76.75067902 -155.11683655]
[75.82727051 -170.08837891]
[61.54532623 -175.37478638]
[50.65283203 -186.01777649]
[45.03697586 -200.17341614]
[45.67073822 -215.38914490]
[52.44431686 -229.02873230]
[64.18415070 -238.72906494]
[78.85623932 -242.80946350]
[93.91854858 -240.56301880]
[106.76145935 -232.37890625]
[115.15984344 -219.67507935]
[117.65863800 -204.65257263]
[113.82490540 -189.91410828]
[104.32286835 -178.01321411]
[90.79882050 -171.01179504]
[91.72222900 -156.04023743]
[92.64564514 -141.06869507]
[93.56906128 -126.09714508]
[94.49246979 -111.12559509]
[95.41588593 -96.15404510]
[108.43567657 -96.02617645]
[121.41832733 -95.03507233]
[134.30665588 -93.18508148]
[147.04389954 -90.48436737]
[159.57397461 -86.94481659]
[171.84172058 -82.58200836]
[183.79307556 -77.41516876]
[195.37544250 -71.46704102]
[206.53781128 -64.76382446]
[217.23100281 -57.33503723]
[227.40795898 -49.21339417]
[237.02383423 -40.43465424]
[246.03630066 -31.03748322]
[254.40567017 -21.06326103]
[262.09506226 -10.55591202]
[269.07067871 0.43829271]
[275.30172729 11.87093830]
[280.76080322 23.69167900]
[285.42385864 35.84845734]
[289.27035522 48.28774261]
[292.28335571 60.95475388]
[294.44961548 73.79370880]
[295.75958252 86.74806213]
[296.20745850 99.76078033]
[295.79129028 112.77455139]
[294.51293945 125.73206329]
[292.37799072 138.57626343]
[306.96176147 142.08543396]
[321.54550171 145.59460449]
[333.26208496 135.42105103]
[348.72375488 134.11087036]
[361.98516846 142.16784668]
[367.94702148 156.49389648]
[364.31689453 171.58036804]
[352.49063110 181.62622070]
[337.01565552 182.76858521]
[323.84243774 174.56823730]
[318.03634644 160.17834473]
[303.45257568 156.66917419]
[288.86883545 153.16001892]
[284.32110596 167.25434875]
[278.72326660 180.96553040]
[272.10717773 194.21540833]
[264.51052856 206.92851257]
[255.97662354 219.03242493]
[246.55406189 230.45816040]
[236.29652405 241.14064026]
[225.26248169 251.01898193]
[213.51477051 260.03692627]
[201.12033081 268.14309692]
[188.14976501 275.29129028]
[174.67698669 281.44082642]
[160.77876282 286.55661011]
[146.53425598 290.60952759]
[132.02462769 293.57647705]
[117.33253479 295.44055176]
[102.54170227 296.19113159]
[87.73638916 295.82397461]
[73.00094604 294.34112549]
[58.41932297 291.75106812]
[44.07460022 288.06854248]
[30.04850197 283.31451416]
[16.42093849 277.51608276]
[3.26955247 270.70629883]
[-9.33072948 262.92395020]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 37]
[2 36]
[3 35]
[5 33]
[6 32]
[7 31]
[8 30]
[9 29]
[10 28]
[12 26]
[63 87]
[64 86]
[65 85]
[66 84]
[67 83]
[68 82]
[114 127]
[115 126]
[116 125]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
