%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:24 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGUCACACCUCAUAUCCUCCCUACUAUGCCUAGAAGGAAUAAUACUAUCGCUGUUCAUUAUAxxxxxxxxxxAAACCCCCUCCCCAUGCUUACAAGCAAGUACAGCAAUCAACCCUCAACUAUCACACAUCACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[243.36303711 166.16871643]
[229.46047974 160.53677368]
[215.55792236 154.90481567]
[201.65536499 149.27285767]
[187.75280762 143.64089966]
[173.85025024 138.00894165]
[159.94769287 132.37698364]
[146.04513550 126.74502563]
[132.14257812 121.11306763]
[118.24002838 115.48111725]
[104.33747101 109.84915924]
[89.54476166 107.36403656]
[74.56504822 108.14388275]
[72.38133240 123.03089905]
[67.33671570 137.20126343]
[59.62685013 150.11099243]
[49.54965973 161.26487732]
[37.49384308 170.23547363]
[23.92386246 176.67951965]
[9.36206627 180.35105896]
[-5.63142252 181.11076355]
[-20.48025513 178.93132019]
[-34.61400604 173.89836121]
[-47.49009705 166.20706177]
[-58.61460495 156.15464783]
[-67.56123352 144.12886047]
[-73.98764038 130.59301758]
[-77.64852142 116.06813049]
[-92.62823486 116.84797668]
[-107.60794830 117.62782288]
[-120.98719788 126.07212830]
[-134.09951782 119.00698090]
[-149.07922363 119.78681946]
[-164.05894470 120.56666565]
[-177.51348877 129.94255066]
[-192.24359131 122.73448181]
[-193.09617615 106.35751343]
[-179.19418335 97.65885925]
[-164.83879089 105.58695221]
[-149.85906982 104.80710602]
[-134.87936401 104.02725983]
[-122.57156372 95.63874054]
[-108.38779449 102.64810944]
[-93.40808105 101.86826324]
[-78.42835999 101.08841705]
[-76.29552460 86.26191711]
[-71.30940247 72.13193512]
[-63.65987778 59.24214554]
[-53.63933563 48.08892059]
[-41.63150787 39.10216522]
[-28.09677696 32.62877655]
[-13.55452538 28.91923904]
[1.43679810 28.11793709]
[16.30112076 30.25753975]
[30.46688652 35.25766754]
[43.38903046 42.92791367]
[54.56994629 52.97509384]
[63.57866287 65.01445007]
[70.06744385 78.58438873]
[73.78520966 93.16416931]
[88.76492310 92.38432312]
[75.55285645 85.28211975]
[64.69394684 74.93396759]
[56.96393967 62.07912827]
[52.91504288 47.63591385]
[52.83649826 32.63611984]
[56.73392487 18.15129662]
[64.32888794 5.21620989]
[75.07883453 -5.24508762]
[88.21579742 -12.48526382]
[102.80130768 -15.98709583]
[117.79341125 -15.50042152]
[132.12110901 -11.06000614]
[144.76084900 -2.98306513]
[154.80967712 8.15340424]
[161.54974365 21.55383492]
[164.49952698 36.26093292]
[163.44833374 51.22405243]
[158.47122192 65.37426758]
[149.92378235 77.70070648]
[138.41659546 87.32280731]
[124.77173615 93.55317688]
[109.96942902 95.94660187]
[123.87198639 101.57855988]
[137.77453613 107.21051788]
[151.67709351 112.84246826]
[165.57965088 118.47442627]
[179.48220825 124.10638428]
[193.38476562 129.73834229]
[207.28732300 135.37030029]
[221.18988037 141.00225830]
[235.09243774 146.63421631]
[248.99499512 152.26617432]
[255.19129944 150.93072510]
[260.80941772 152.51200867]
[274.93420410 147.46324158]
[289.05902100 142.41448975]
[303.18380737 137.36573792]
[317.25534058 132.17031860]
[331.27203369 126.82881165]
[345.28875732 121.48729706]
[351.52243042 106.96432495]
[366.23040771 101.18058014]
[380.68664551 107.56745148]
[386.31457520 122.33573151]
[379.77520752 136.72364807]
[364.94824219 142.19511414]
[350.63027954 135.50401306]
[336.61355591 140.84552002]
[322.59686279 146.18702698]
[317.43307495 151.54249573]
[308.23257446 151.49053955]
[294.10775757 156.53929138]
[279.98297119 161.58805847]
[265.85815430 166.63681030]
[280.48019409 169.98286438]
[294.36434937 175.66004944]
[307.14166260 183.51751709]
[318.47268677 193.34648132]
[328.05627441 204.88575745]
[335.63778687 217.82873535]
[341.01577759 231.83149719]
[344.04733276 246.52195740]
[344.65191650 261.50976562]
[342.81344604 276.39666748]
[338.58078003 290.78710938]
[332.06640625 304.29867554]
[323.44338989 316.57238770]
[312.94088745 327.28207397]
[300.83795166 336.14315796]
[287.45617676 342.92019653]
[273.15115356 347.43313599]
[258.30300903 349.56201172]
[243.30624390 349.25027466]
[228.55937195 346.50622559]
[214.45423889 341.40274048]
[201.36564636 334.07546997]
[189.64138794 324.71911621]
[179.59300232 313.58224487]
[171.48747253 300.96081543]
[165.54017639 287.19021606]
[161.90916443 272.63632202]
[160.69091797 257.68588257]
[161.91780090 242.73612976]
[165.55720520 228.18432617]
[171.51242065 214.41714478]
[179.62522888 201.80039978]
[189.68005371 190.66934204]
[201.40971375 181.31973267]
[214.50251770 174.00001526]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 93]
[2 92]
[3 91]
[4 90]
[5 89]
[6 88]
[7 87]
[8 86]
[9 85]
[10 84]
[11 83]
[12 61]
[13 60]
[28 45]
[29 44]
[30 43]
[32 41]
[33 40]
[34 39]
[95 115]
[96 114]
[97 113]
[98 112]
[99 110]
[100 109]
[101 108]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
