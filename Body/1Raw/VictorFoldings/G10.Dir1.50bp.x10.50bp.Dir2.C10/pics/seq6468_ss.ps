%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:26 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGACCUCCCUCUCUCCUACUCCUGCUCGCAUCUGCUAUAGUGGAGGCCGGAGCAGGAACAGGUxxxxxxxxxxAAGAUAUUCGAAAAAUAGGAGGACUACUCAAAACCAUACCUCUCACUUCAACCUCCCUCACCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[165.76409912 319.95892334]
[165.45613098 304.96206665]
[165.14814758 289.96524048]
[164.84017944 274.96838379]
[164.53219604 259.97155762]
[164.22421265 244.97471619]
[163.91624451 229.97789001]
[163.60826111 214.98104858]
[163.30027771 199.98420715]
[161.15170288 185.13888550]
[157.19509888 170.67012024]
[149.69509888 157.67973328]
[139.14308167 147.01882935]
[128.59106445 136.35792542]
[118.03904724 125.69701385]
[107.48703766 115.03610229]
[98.20269012 117.14147949]
[89.01181793 113.84289551]
[82.88502502 105.92730713]
[81.95085144 95.71541595]
[69.44681549 87.42993927]
[56.94277954 79.14446259]
[43.51533127 72.45838928]
[29.36801338 67.47306824]
[15.22069740 62.48774719]
[1.09958410 69.06284332]
[-13.17678928 63.80548477]
[-19.35811615 50.30264282]
[-33.50543213 45.31731796]
[-47.65274811 40.33199692]
[-61.80006790 35.34667587]
[-75.94738007 30.36135292]
[-90.09469604 25.37603188]
[-104.24201965 20.39070892]
[-118.38933563 15.40538788]
[-132.63603210 10.71158695]
[-146.97608948 6.31128645]
[-162.43887329 9.65985012]
[-172.33642578 -1.47062814]
[-186.67649841 -5.87092829]
[-201.01655579 -10.27122879]
[-215.35661316 -14.67152882]
[-229.69667053 -19.07182884]
[-245.54940796 -14.87388897]
[-256.91784668 -26.69297600]
[-252.10710144 -42.37062836]
[-236.06605530 -45.77901840]
[-225.29637146 -33.41189194]
[-210.95631409 -29.01159096]
[-196.61625671 -24.61128998]
[-182.27619934 -20.21098900]
[-167.93612671 -15.81068897]
[-153.49903870 -19.47399139]
[-142.57579041 -8.02877426]
[-128.23571777 -3.62847447]
[-123.62261963 -5.06669188]
[-118.05735779 -3.57813883]
[-113.40400696 1.25807095]
[-99.25669098 6.24339294]
[-85.10937500 11.22871494]
[-70.96205902 16.21403694]
[-56.81474304 21.19935989]
[-42.66742706 26.18468094]
[-28.52011108 31.17000389]
[-14.37279510 36.15532684]
[-1.09178853 29.51074409]
[13.32662010 34.36503601]
[20.20601845 48.34042740]
[34.35333633 53.32575226]
[48.50065231 58.31107330]
[39.87722397 46.03766632]
[37.31582642 31.25797653]
[41.30630493 16.79851341]
[51.08551407 5.42454910]
[64.78324890 -0.68872726]
[79.77990723 -0.37219423]
[93.20748901 6.31361341]
[102.49806213 18.09008217]
[105.87487030 32.70504761]
[102.69213104 47.36349487]
[93.55850220 59.26210403]
[80.22074127 66.12535095]
[65.22825623 66.64042664]
[77.73229218 74.92590332]
[90.23632812 83.21138000]
[105.00844574 80.60665894]
[113.92459106 68.54422760]
[122.84074402 56.48179245]
[131.75689697 44.41936111]
[130.80897522 28.40433693]
[142.83486938 17.78560257]
[158.60932922 20.70894241]
[166.03153992 34.93181992]
[159.40782166 49.54366302]
[143.81932068 53.33551025]
[134.90316772 65.39794159]
[125.98702240 77.46037292]
[117.07087708 89.52280426]
[118.14794159 104.48408508]
[128.69995117 115.14499664]
[139.25196838 125.80590820]
[149.80398560 136.46681213]
[160.35600281 147.12771606]
[156.83773804 132.54617310]
[156.71212769 117.54669189]
[159.98568726 102.90825653]
[166.48843384 89.39106750]
[175.88264465 77.69711304]
[187.68046570 68.43367004]
[201.26922607 62.08182526]
[215.94319153 58.97143936]
[230.94033813 59.26404190]
[245.48182678 62.94443512]
[258.81246948 69.82149506]
[270.23999023 79.53807068]
[279.17089844 91.58956146]
[285.14144897 105.35011292]
[287.84152222 120.10509491]
[287.13095093 135.08825684]
[283.04660034 149.52148438]
[275.80056763 162.65521240]
[265.76916504 173.80740356]
[253.47338867 182.39888000]
[239.55172729 187.98347473]
[224.72720337 190.27116394]
[209.76968384 189.14314270]
[195.45593262 184.65798950]
[182.52931213 177.04862976]
[171.66386414 166.71350098]
[175.62046814 181.18228149]
[180.80039978 167.10504150]
[191.49220276 156.58433533]
[205.65115356 151.63215637]
[220.56944275 153.19557190]
[233.39407349 160.97560120]
[241.67242432 173.48435974]
[243.82128906 188.32965088]
[239.42974854 202.67239380]
[229.33763123 213.76965332]
[215.47499084 219.49914551]
[200.49296570 218.76516724]
[187.25674438 211.70806885]
[178.29711914 199.67622375]
[178.60510254 214.67306519]
[178.91307068 229.66990662]
[179.22105408 244.66674805]
[179.52903748 259.66357422]
[179.83700562 274.66043091]
[180.14498901 289.65725708]
[180.45297241 304.65408325]
[180.76094055 319.65093994]
[183.34672546 338.85937500]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 151]
[2 150]
[3 149]
[4 148]
[5 147]
[6 146]
[7 145]
[8 144]
[9 143]
[10 130]
[11 129]
[12 103]
[13 102]
[14 101]
[15 100]
[16 99]
[20 85]
[21 84]
[22 83]
[23 70]
[24 69]
[25 68]
[28 65]
[29 64]
[30 63]
[31 62]
[32 61]
[33 60]
[34 59]
[35 58]
[36 55]
[37 54]
[39 52]
[40 51]
[41 50]
[42 49]
[43 48]
[86 98]
[87 97]
[88 96]
[89 95]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
