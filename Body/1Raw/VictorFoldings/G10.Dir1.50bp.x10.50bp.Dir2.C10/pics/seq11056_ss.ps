%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:23 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGUCCAAAGACCACAUCAUCGAAACCGCAAACAUAUCAUACACAAACGCCUGAGCCCUAUCUAUxxxxxxxxxxCCUGACCCCCAUGCCUCAGGAUACUCCUCAAUAGCCAUCGCUGUAGUAUAUCCAAAGACAACCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[121.13562012 291.66659546]
[121.13562012 276.66659546]
[121.13562012 261.66659546]
[121.13562012 246.66658020]
[121.13562012 231.66658020]
[121.13562012 216.66658020]
[121.13562012 201.66658020]
[121.13562012 186.66658020]
[121.13562012 171.66658020]
[121.13562012 156.66658020]
[114.30479431 153.56983948]
[108.11130524 167.23149109]
[101.91760254 180.89303589]
[88.25614166 174.69912720]
[94.44965363 161.03799438]
[100.64314270 147.37634277]
[93.81231689 144.27960205]
[82.53054810 154.16502380]
[80.04401398 170.01422119]
[66.03157043 177.82644653]
[51.24235535 171.60884094]
[47.02138901 156.13101196]
[56.60663986 143.26623535]
[72.64511871 142.88325500]
[83.92689514 132.99783325]
[81.75430298 125.81940460]
[77.40912628 111.46253967]
[75.23654175 104.28411102]
[60.36652374 102.31365967]
[55.00212479 116.39627075]
[46.53414917 128.86183167]
[35.41926575 139.03808594]
[22.25688553 146.37623596]
[7.75684118 150.48054504]
[-7.29889965 151.12969971]
[-22.09840012 148.28865051]
[-35.84354019 142.11064148]
[-47.79306412 132.92883301]
[-57.30254745 121.23838806]
[-63.85915756 107.66976166]
[-67.10929871 92.95469666]
[-66.87770844 77.88674164]
[-63.17685699 63.27851105]
[-56.20634460 49.91780090]
[-46.34207153 38.52513504]
[-34.11600876 29.71490669]
[-20.18749046 23.96224213]
[-5.30766773 21.57737541]
[9.72101116 22.68891716]
[24.08806801 27.23692513]
[37.01870728 34.97613144]
[47.81559372 45.48917007]
[55.89646530 58.20908356]
[60.82553482 72.44990540]
[62.33697510 87.44364929]
[77.20699310 89.41410065]
[88.88010406 79.99399567]
[90.09487152 65.04326630]
[91.30964661 50.09253311]
[92.52441406 35.14180374]
[93.73918152 20.19107246]
[94.95394897 5.24034262]
[80.40276337 1.44112194]
[66.73244476 -4.82733917]
[54.35842896 -13.37454987]
[43.65674210 -23.94076920]
[34.95259476 -36.20490265]
[28.51050186 -49.79425812]
[24.52622604 -64.29586792]
[23.12084770 -79.26904297]
[24.33707428 -94.25877380]
[28.13794518 -108.80952454]
[34.40795517 -122.47913361]
[42.95656967 -134.85217285]
[53.52400208 -145.55267334]
[65.78912354 -154.25541687]
[79.37921143 -160.69598389]
[93.88127136 -164.67860413]
[108.85460663 -166.08229065]
[123.84419250 -164.86436462]
[138.39451599 -161.06184387]
[152.06341553 -154.79028320]
[164.43548584 -146.24026489]
[175.13478088 -135.67161560]
[183.83615112 -123.40550995]
[190.27516174 -109.81468964]
[194.25614929 -95.31217957]
[195.65812683 -80.33868408]
[194.43850708 -65.34923553]
[190.63432312 -50.79933929]
[184.36122131 -37.13116074]
[175.80979919 -24.76004982]
[165.23994446 -14.06195831]
[152.97283936 -5.36198521]
[139.38130188 1.07548547]
[124.87833405 5.05482674]
[109.90467834 6.45511150]
[108.68991089 21.40584183]
[107.47514343 36.35657120]
[106.26037598 51.30730057]
[105.04560852 66.25803375]
[103.83083344 81.20876312]
[113.83008575 92.38977814]
[128.82315063 92.84574127]
[143.81622314 93.30171204]
[158.80928040 93.75768280]
[173.80235291 94.21364594]
[165.86660767 81.48478699]
[170.67420959 67.27610016]
[184.70851135 61.98095703]
[197.70367432 69.47265625]
[200.15400696 84.27117157]
[190.26756287 95.55146790]
[205.13758850 97.52191925]
[220.00759888 99.49237061]
[234.87760925 101.46282196]
[249.74761963 103.43327332]
[264.68887329 96.67372894]
[277.85388184 106.45199585]
[275.69961548 122.70903015]
[260.44223022 128.72099304]
[247.77717590 118.30329132]
[232.90716553 116.33283997]
[218.03713989 114.36238861]
[203.16712952 112.39193726]
[188.29711914 110.42148590]
[173.34638977 109.20671844]
[158.35331726 108.75074768]
[143.36024475 108.29477692]
[128.36718750 107.83881378]
[113.37411499 107.38284302]
[116.51877594 114.19174194]
[129.45782471 121.77995300]
[142.39688110 129.36816406]
[155.33593750 136.95637512]
[170.16564941 139.21015930]
[181.39608765 149.15386963]
[185.42900085 163.60154724]
[180.97224426 177.92417908]
[169.45378113 187.53276062]
[154.56510925 189.34890747]
[147.37371826 176.18516541]
[140.18234253 163.02142334]
[132.99095154 149.85768127]
[136.13562012 156.66658020]
[136.13562012 171.66658020]
[136.13562012 186.66658020]
[136.13562012 201.66658020]
[136.13562012 216.66658020]
[136.13562012 231.66658020]
[136.13562012 246.66658020]
[136.13562012 261.66659546]
[136.13562012 276.66659546]
[136.13562012 291.66659546]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 154]
[2 153]
[3 152]
[4 151]
[5 150]
[6 149]
[7 148]
[8 147]
[9 146]
[10 145]
[17 25]
[18 24]
[28 56]
[29 55]
[57 102]
[58 101]
[59 100]
[60 99]
[61 98]
[62 97]
[103 131]
[104 130]
[105 129]
[106 128]
[107 127]
[113 126]
[114 125]
[115 124]
[116 123]
[117 122]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
