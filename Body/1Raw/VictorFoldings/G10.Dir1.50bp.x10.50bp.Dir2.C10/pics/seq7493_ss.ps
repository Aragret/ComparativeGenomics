%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:40 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGGCCCUCAUAAUCAUUUUCCUUAUCUGCUUCCUAGUCCUGUAUGCCCUUUUCCUAACACUCAxxxxxxxxxxCCUAUCAUAUAGUAAAACCCAGCCCAUGACCCCUAACAGGGGCCCUCUCAGCCCUCCUAAUCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[97.40171814 219.44723511]
[96.78589630 204.45986938]
[96.17006683 189.47251892]
[95.55424500 174.48516846]
[94.93841553 159.49781799]
[94.32259369 144.51046753]
[93.70676422 129.52310181]
[93.09094238 114.53575897]
[87.10264587 100.78292847]
[76.55062866 90.12201691]
[65.99861145 79.46110535]
[55.44659805 68.80020142]
[44.08611679 78.60408783]
[32.08307648 87.60984802]
[19.49343872 95.77549744]
[6.37590647 103.06295776]
[-7.20836210 109.43824768]
[-21.19602966 114.87165833]
[-35.52187729 119.33783722]
[-50.11911392 122.81597900]
[-64.91967773 125.28984833]
[-79.85456085 126.74792480]
[-94.85413361 127.18340302]
[-109.84845734 126.59425354]
[-124.76761627 124.98323059]
[-139.54205322 122.35783386]
[-154.10289001 118.73031616]
[-168.38221741 114.11757660]
[-182.31347656 108.54113007]
[-195.83171082 102.02698517]
[-208.87388611 94.60549927]
[-221.37919617 86.31127930]
[-233.28933716 77.18300629]
[-244.54876709 67.26322937]
[-255.10499573 56.59820557]
[-264.90881348 45.23765945]
[-273.91448975 33.23455811]
[-282.08004761 20.64486694]
[-289.36743164 7.52728415]
[-295.74261475 -6.05702686]
[-301.17593384 -20.04473114]
[-305.64202881 -34.37060928]
[-309.12005615 -48.96786880]
[-311.59384155 -63.76845169]
[-313.05181885 -78.70334625]
[-313.48718262 -93.70291901]
[-312.89794922 -108.69723511]
[-311.28680420 -123.61638641]
[-308.66131592 -138.39080811]
[-305.03369141 -152.95161438]
[-300.42086792 -167.23091125]
[-294.84432983 -181.16213989]
[-288.33007812 -194.68032837]
[-280.90850830 -207.72245789]
[-272.61422729 -220.22770691]
[-263.48587036 -232.13777161]
[-253.56600952 -243.39714050]
[-242.90090942 -253.95330811]
[-231.54029846 -263.75704956]
[-219.53713989 -272.76263428]
[-206.94738770 -280.92810059]
[-193.82975769 -288.21539307]
[-180.24540710 -294.59051514]
[-166.25767517 -300.02374268]
[-151.93176270 -304.48971558]
[-137.33447266 -307.96765137]
[-122.53388214 -310.44134521]
[-107.59897614 -311.89920044]
[-92.59940338 -312.33450317]
[-77.60508728 -311.74514771]
[-62.68595123 -310.13391113]
[-47.91154480 -307.50833130]
[-33.35076141 -303.88061523]
[-19.07148933 -299.26766968]
[-5.14030313 -293.69104004]
[8.37784195 -287.17672729]
[21.41991615 -279.75506592]
[33.92511368 -271.46066284]
[45.83512497 -262.33224487]
[57.09442520 -252.41230774]
[67.65051270 -241.74714661]
[77.45417023 -230.38645935]
[86.45968628 -218.38323975]
[94.62508392 -205.79344177]
[101.91227722 -192.67576599]
[108.28730011 -179.09136963]
[113.72042847 -165.10359192]
[118.18631744 -150.77764893]
[121.66416168 -136.18034363]
[124.13774109 -121.37973022]
[125.59551239 -106.44481659]
[126.03069305 -91.44523621]
[125.44123840 -76.45092773]
[123.82991791 -61.53179932]
[121.20422363 -46.75741577]
[117.57640839 -32.19665527]
[112.96338654 -17.91741371]
[107.38666534 -3.98626518]
[100.87223816 9.53183556]
[93.45049286 22.57386017]
[85.15602875 35.07900238]
[76.02751160 46.98895264]
[66.10750580 58.24818420]
[76.65952301 68.90909576]
[87.21154022 79.56999969]
[97.76354980 90.23091125]
[109.67165375 77.25645447]
[133.76791382 79.68585968]
[148.48342896 82.59333038]
[163.19895935 85.50080109]
[178.04428101 87.64938354]
[192.98030090 89.03340912]
[207.91630554 90.41743469]
[222.85232544 91.80146027]
[237.78833008 93.18548584]
[254.11778259 88.62638855]
[263.01916504 103.05559540]
[251.61798096 115.60349274]
[236.40431213 108.12149811]
[221.46829224 106.73747253]
[206.53228760 105.35344696]
[191.59626770 103.96942139]
[176.66026306 102.58539581]
[183.77742004 115.78941345]
[178.08573914 129.66761780]
[163.74699402 134.07221985]
[151.24574280 125.78255463]
[149.72294617 110.86005402]
[160.29148865 100.21632385]
[145.57595825 97.30885315]
[130.86044312 94.40138245]
[125.16490173 99.28102112]
[136.68507385 108.88756561]
[148.20524597 118.49411011]
[161.95578003 124.48766327]
[167.11192322 138.57362366]
[160.48031616 152.02804565]
[146.16810608 156.51815796]
[133.03938293 149.26306152]
[129.22534180 134.75508118]
[121.49958801 121.89768982]
[113.77383423 109.04029083]
[108.07829285 113.91992950]
[108.69412231 128.90728760]
[109.30994415 143.89463806]
[109.92577362 158.88198853]
[110.54159546 173.86933899]
[111.15742493 188.85668945]
[111.77324677 203.84405518]
[112.38906860 218.83140564]
[119.08058929 234.40895081]
[105.96421814 245.15126038]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 106]
[10 105]
[11 104]
[12 103]
[108 131]
[109 130]
[110 129]
[111 123]
[112 122]
[113 121]
[114 120]
[115 119]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
