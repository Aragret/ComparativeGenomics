%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:30 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGAUAUCUACAAUCAACCAACAAGUCAUUAUUACCCUCACUGUCAACCCAACACAGGCAUGCxxxxxxxxxxCCUUAUUCGAGCCGAGCUGGGCCAGCCAGGCAACCUUCUAGGUAACGACCACAUCUACAACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[92.50000000 247.53562927]
[92.50000000 232.53562927]
[92.50000000 217.53562927]
[92.50000000 202.53562927]
[92.50000000 187.53562927]
[92.50000000 172.53562927]
[92.50000000 157.53562927]
[92.50000000 142.53562927]
[92.50000000 127.53562927]
[92.50000000 112.53562927]
[84.51008606 99.84069824]
[70.98589325 93.35253906]
[57.46170425 86.86437225]
[49.81495667 99.78012085]
[41.07161713 111.98026276]
[31.29822731 123.37193298]
[20.56917000 133.86843872]
[8.96610165 143.38989258]
[-3.42267013 151.86384583]
[-16.50285721 159.22576904]
[-30.17490959 165.41967773]
[-44.33477402 170.39839172]
[-58.87467957 174.12403870]
[-73.68397522 176.56825256]
[-88.64994049 177.71244812]
[-103.65868378 177.54791260]
[-118.59597015 176.07588196]
[-133.34811401 173.30757141]
[-147.80284119 169.26405334]
[-161.85015869 163.97610474]
[-175.38313293 157.48396301]
[-188.29878235 149.83703613]
[-200.49879456 141.09352112]
[-211.89033508 131.31997681]
[-222.38668823 120.59076691]
[-231.90798950 108.98756409]
[-240.38174438 96.59867859]
[-247.74349976 83.51838684]
[-253.93721008 69.84624481]
[-258.91571045 55.68631363]
[-262.64117432 41.14635086]
[-265.08517456 26.33702469]
[-266.22915649 11.37104130]
[-266.06442261 -3.63769650]
[-264.59216309 -18.57496262]
[-261.82366943 -33.32706833]
[-257.77993774 -47.78174591]
[-252.49179077 -61.82898331]
[-245.99945068 -75.36186981]
[-238.35235596 -88.27740479]
[-229.60867310 -100.47729492]
[-219.83496094 -111.86869812]
[-209.10560608 -122.36489868]
[-197.50227356 -131.88603210]
[-185.11326599 -140.35963440]
[-172.03286743 -147.72119141]
[-158.36064148 -153.91470337]
[-144.20063782 -158.89303589]
[-129.66062927 -162.61827087]
[-114.85126495 -165.06207275]
[-99.88526154 -166.20584106]
[-84.87652588 -166.04087830]
[-69.93928528 -164.56843567]
[-55.18721390 -161.79972839]
[-40.73259354 -157.75579834]
[-26.68543243 -152.46745300]
[-13.15264034 -145.97492981]
[-0.23721111 -138.32763672]
[11.96255875 -129.58378601]
[23.35382080 -119.80991364]
[33.84987640 -109.08041382]
[43.37084961 -97.47694397]
[51.84426880 -85.08781433]
[59.20565414 -72.00732422]
[65.39897156 -58.33500671]
[70.37709808 -44.17493439]
[74.10212708 -29.63487053]
[76.54573059 -14.82547379]
[77.68929291 0.14054140]
[77.52411652 15.14927483]
[76.05146790 30.08649826]
[73.28253937 44.83852768]
[69.23841095 59.29309464]
[63.94986725 73.34017944]
[77.47406006 79.82834625]
[90.99824524 86.31651306]
[117.84265900 80.26796722]
[132.41535950 76.71320343]
[146.98806763 73.15844727]
[154.39527893 51.10165024]
[182.97560120 43.97062302]
[196.06874084 36.65151596]
[209.16189575 29.33241272]
[213.56385803 14.39050674]
[226.94644165 7.15440989]
[241.16413879 11.44308376]
[254.25729370 4.12397814]
[267.35043335 -3.19512749]
[280.44360352 -10.51423359]
[291.31896973 -23.52049637]
[306.82754517 -16.67064095]
[304.53857422 0.12807970]
[287.76269531 2.57892132]
[274.66955566 9.89802647]
[261.57638550 17.21713257]
[248.48324585 24.53623772]
[244.68881226 38.89373779]
[231.51475525 46.50286865]
[216.48100281 42.42556763]
[203.38784790 49.74467087]
[190.29469299 57.06377792]
[191.46025085 64.47265625]
[194.95690918 86.69929504]
[209.66487122 89.64477539]
[224.37283325 92.59025574]
[239.08079529 95.53574371]
[255.79884338 92.71737671]
[263.13507080 108.00187683]
[250.47877502 119.28258514]
[236.13531494 110.24370575]
[221.42735291 107.29821777]
[206.71939087 104.35273743]
[192.01142883 101.40725708]
[173.39959717 105.75603485]
[158.03854370 99.58632660]
[150.54283142 87.73114777]
[135.97012329 91.28591156]
[121.39742279 94.84066772]
[135.89041138 98.70759583]
[150.80046082 97.06735992]
[164.84072876 102.34665680]
[174.97622681 113.40430450]
[179.01605225 127.85005951]
[176.08694458 142.56129456]
[166.82206726 154.35798645]
[153.22413635 160.69013977]
[138.23251343 160.18898010]
[125.08781433 152.96284485]
[116.63144684 140.57374573]
[114.69138336 125.69937134]
[107.50000000 112.53562927]
[107.50000000 127.53562927]
[107.50000000 142.53562927]
[107.50000000 157.53562927]
[107.50000000 172.53562927]
[107.50000000 187.53562927]
[107.50000000 202.53562927]
[107.50000000 217.53562927]
[107.50000000 232.53562927]
[107.50000000 247.53562927]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[11 86]
[12 85]
[13 84]
[87 128]
[88 127]
[89 126]
[91 111]
[92 110]
[93 109]
[96 106]
[97 105]
[98 104]
[99 103]
[113 123]
[114 122]
[115 121]
[116 120]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
