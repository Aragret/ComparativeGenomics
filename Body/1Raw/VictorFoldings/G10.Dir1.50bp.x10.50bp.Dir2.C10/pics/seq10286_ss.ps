%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:17 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCAUCCAAACCCCCUGAAGCUUCACCGGCGCAGUCAUUCUCAUAAUCGCCCACGGGCUUACAUCCxxxxxxxxxxUACGGUACCAUAAAUACUUGACCACCUGUAGUACAUAAAAACCCAAUCCACAUCAAAACCCCCUCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[101.22939301 115.70379639]
[94.37995911 129.04864502]
[87.53051758 142.39350891]
[80.68107605 155.73835754]
[73.83164215 169.08322144]
[79.49800110 185.60658264]
[71.63942719 200.82859802]
[55.53381348 205.58685303]
[48.94936752 219.06442261]
[50.62171555 235.37808228]
[37.17317963 244.76258850]
[22.43845940 237.56396484]
[21.57537460 221.18754578]
[35.47179031 212.47998047]
[42.05623627 199.00241089]
[36.19797897 187.49125671]
[38.08389282 174.51658630]
[47.24516678 164.86677551]
[60.48678589 162.23377991]
[67.33621979 148.88893127]
[74.18566132 135.54406738]
[81.03510284 122.19921112]
[87.88453674 108.85435486]
[86.37980652 107.02886963]
[85.15506744 104.94763184]
[84.25365448 102.65443420]
[69.86505890 98.41551971]
[55.47646713 94.17660522]
[41.08787155 89.93769073]
[36.79184341 91.14954376]
[32.74997330 90.92112732]
[29.39222336 89.51664734]
[27.01503944 87.31482697]
[25.75520706 84.75406647]
[11.74619675 79.39237976]
[-2.26281309 74.03070068]
[-16.42455482 69.08650208]
[-30.72659111 64.56414032]
[-45.02862930 60.04177856]
[-40.82893753 74.44187164]
[-49.30247879 86.81922913]
[-64.24653625 88.11351776]
[-74.72191620 77.37729645]
[-73.06053162 62.46958542]
[-60.47850418 54.30297089]
[-74.26475525 48.39202499]
[-88.05101013 42.48107910]
[-103.42139435 47.07791138]
[-116.51589966 37.80895615]
[-117.28953552 21.78456879]
[-105.14884186 11.29728413]
[-89.40711975 14.39205074]
[-82.14006042 28.69482994]
[-68.35381317 34.60577393]
[-54.56755829 40.51671982]
[-40.50626373 45.73974228]
[-26.20422935 50.26210785]
[-11.90219307 54.78446960]
[-8.58336258 53.45218658]
[-4.44573164 53.69403076]
[-0.25157708 55.88077927]
[3.09886885 60.02169037]
[17.10787964 65.38336945]
[31.11688995 70.74505615]
[45.32678604 75.54910278]
[59.71537781 79.78800964]
[74.10397339 84.02692413]
[88.49256134 88.26583862]
[77.89762878 77.64758301]
[63.56253815 73.23111725]
[50.37206650 66.08889008]
[38.83857727 56.49833679]
[29.41008377 44.83199692]
[22.45282364 31.54303360]
[18.23704529 17.14764595]
[16.92650604 2.20500588]
[18.57211304 -12.70445347]
[23.10994530 -27.00158882]
[30.36373138 -40.13104248]
[40.05170822 -51.58281708]
[51.79755783 -60.91207123]
[65.14501953 -67.75643158]
[79.57563019 -71.85002136]
[94.52884674 -73.03384399]
[109.42382050 -71.26190948]
[123.68196869 -66.60303497]
[136.74946594 -59.23820877]
[148.11869812 -49.45350266]
[157.34805298 -37.62899017]
[164.07901001 -24.22398567]
[168.05012512 -9.75919151]
[169.10714722 5.20351887]
[167.20899963 20.08293533]
[162.42942810 34.30108261]
[154.95408630 47.30567169]
[145.07334900 58.59154892]
[133.17103577 67.72032928]
[119.71376038 74.33580017]
[110.92233276 86.48942566]
[124.46429443 80.03845215]
[138.00627136 73.58747101]
[151.54823303 67.13649750]
[155.65661621 61.84696198]
[161.02160645 59.77782059]
[165.75503540 60.71004105]
[179.54129028 54.79909897]
[186.80834961 40.49631882]
[202.55007935 37.40155411]
[214.69076538 47.88883591]
[213.91712952 63.91322708]
[200.82261658 73.18218231]
[185.45223999 68.58535004]
[171.66598511 74.49629211]
[157.99920654 80.67845917]
[144.45724487 87.12944031]
[130.91526794 93.58042145]
[117.37330627 100.03139496]
[132.35026550 100.86249542]
[147.32722473 101.69359589]
[161.21463013 96.02439880]
[175.77615356 92.42409515]
[190.70535278 90.96842957]
[205.68807983 91.68804169]
[220.40905762 94.56778717]
[234.55850220 99.54707336]
[247.83866882 106.52111053]
[259.97009277 115.34314728]
[270.69750977 125.82754517]
[279.79516602 137.75367737]
[287.07162476 150.87057495]
[292.37377930 164.90222168]
[295.59002686 179.55335999]
[296.65274048 194.51567078]
[295.53948975 209.47430420]
[292.27374268 224.11448669]
[286.92419434 238.12812805]
[279.60345459 251.22036743]
[270.46554565 263.11569214]
[259.70275879 273.56378174]
[247.54156494 282.34475708]
[234.23791504 289.27386475]
[220.07171631 294.20532227]
[205.34109497 297.03527832]
[190.35601807 297.70425415]
[175.43182373 296.19815063]
[160.88256836 292.54867554]
[147.01438904 286.83258057]
[134.11912537 279.17016602]
[122.46815491 269.72268677]
[112.30662537 258.68896484]
[103.84837341 246.30114746]
[97.27139282 232.81991577]
[92.71407318 218.52899170]
[90.27232361 203.72906494]
[89.99752808 188.73158264]
[91.89545441 173.85212708]
[95.92617798 159.40383911]
[102.00322723 145.69381714]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 23]
[2 22]
[3 21]
[4 20]
[5 19]
[8 15]
[9 14]
[26 68]
[27 67]
[28 66]
[29 65]
[34 64]
[35 63]
[36 62]
[37 58]
[38 57]
[39 56]
[45 55]
[46 54]
[47 53]
[99 117]
[100 116]
[101 115]
[102 114]
[105 113]
[106 112]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
