%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:05 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCCAUUUACCCAAAUAAAGUAUAGGCGAUAGAAAUUGAAACCUGGCGCAAUAGAUAUAGUAxxxxxxxxxxUUCUUCUUAGUAGCUAUUACCUUCUUAUUAUUUGAUCUAGAAAUUGCCCUCCUUUUACCCCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[207.70845032 515.11230469]
[206.77282715 500.14151001]
[205.83718872 485.17071533]
[204.90156555 470.19992065]
[203.96594238 455.22915649]
[203.03030396 440.25836182]
[202.09468079 425.28756714]
[199.45581055 410.52151489]
[195.14823914 396.15332031]
[190.84065247 381.78512573]
[186.53306580 367.41696167]
[175.46675110 357.44769287]
[178.91511536 342.00686646]
[174.60752869 327.63870239]
[170.29994202 313.27050781]
[165.99235535 298.90231323]
[148.07492065 293.82064819]
[136.68928528 278.89440918]
[136.52194214 259.97329712]
[147.81816101 244.60813904]
[142.62274170 230.53662109]
[137.42732239 216.46510315]
[132.23191833 202.39358521]
[127.03649902 188.32206726]
[121.84107971 174.25053406]
[116.64566803 160.17901611]
[111.15863800 146.21862793]
[105.38236237 132.37541199]
[93.21709442 132.99707031]
[81.34715271 129.08723450]
[71.44334412 120.95706940]
[64.98397064 109.52619171]
[63.03661728 96.22202301]
[66.08826447 82.80241394]
[51.86148453 78.04859924]
[37.63470459 73.29478455]
[22.09379196 76.25968170]
[12.47469902 64.88768005]
[-1.75208056 60.13386536]
[-15.97885990 55.38005066]
[-27.42452431 65.62174988]
[-42.46088791 68.75277710]
[-57.04324341 63.93090820]
[-67.24901581 52.45319748]
[-70.33289337 37.40709305]
[-65.46533966 22.83992195]
[-53.95569611 12.67017841]
[-38.89999771 9.63347435]
[-24.34815788 14.54666710]
[-14.21454144 26.08813095]
[-11.22504520 41.15327454]
[3.00173426 45.90708923]
[17.22851372 50.66090393]
[31.75183296 47.35598373]
[42.38851929 59.06800842]
[56.61529922 63.82182312]
[70.84207916 68.57563782]
[83.45320892 60.45409393]
[85.01078796 45.53518295]
[86.56836700 30.61627007]
[88.12594604 15.69735718]
[89.68353271 0.77844518]
[83.42105103 -13.75055695]
[92.43810272 -25.60559654]
[93.99568939 -40.52450943]
[95.55326843 -55.44342041]
[81.41074371 -60.68171692]
[69.01570892 -69.27322388]
[59.14732742 -80.67786407]
[52.42594147 -94.17874908]
[49.27405548 -108.92718506]
[49.88980484 -123.99607849]
[54.23447800 -138.43820190]
[62.03496933 -151.34567261]
[72.80093384 -161.90716553]
[85.85560608 -169.45874023]
[100.37836456 -173.52571106]
[115.45629883 -173.85241699]
[130.14160156 -170.41833496]
[143.51112366 -163.43931580]
[154.72445679 -153.35409546]
[163.07672119 -140.79660034]
[168.04289246 -126.55624390]
[169.31079102 -111.52816010]
[166.80070496 -96.65703583]
[160.67044067 -82.87768555]
[151.30532837 -71.05628204]
[139.29406738 -61.93593979]
[125.39171600 -56.08996582]
[110.47218323 -53.88583755]
[108.91459656 -38.96692657]
[107.35701752 -24.04801559]
[113.73091125 -10.58611298]
[104.60243988 2.33602619]
[103.04486084 17.25493813]
[101.48728180 32.17385101]
[99.92970276 47.09276199]
[98.37211609 62.01167679]
[113.90605927 65.54443359]
[126.28414154 74.97971344]
[133.46006775 88.37652588]
[134.40783691 103.17742920]
[129.25910950 116.69487762]
[119.22557831 126.59914398]
[125.00185394 140.44235229]
[130.09680176 144.81831360]
[131.89654541 150.29483032]
[130.71717834 154.98361206]
[135.91259766 169.05513000]
[141.10801697 183.12664795]
[146.30343628 197.19816589]
[151.49884033 211.26968384]
[156.69425964 225.34120178]
[161.88967896 239.41271973]
[173.40480042 240.57225037]
[183.59518433 245.94891357]
[190.98588562 254.72073364]
[194.52371216 265.57760620]
[193.72712708 276.91687012]
[188.75149536 287.07989502]
[180.36054993 294.59472656]
[184.66813660 308.96292114]
[188.97570801 323.33111572]
[193.28329468 337.69927979]
[204.65773010 348.69622803]
[200.90124512 363.10937500]
[205.20883179 377.47753906]
[209.51641846 391.84573364]
[213.82400513 406.21392822]
[219.01763916 392.14175415]
[230.06956482 382.00000000]
[244.53520203 378.03195190]
[259.21487427 381.11532593]
[270.86160278 390.56805420]
[276.89920044 404.29928589]
[275.99221802 419.27185059]
[268.34127808 432.17391968]
[255.63870239 440.15167236]
[240.69416809 441.44049072]
[226.81329346 435.75534058]
[217.06547546 424.35192871]
[218.00109863 439.32272339]
[218.93672180 454.29351807]
[219.87236023 469.26431274]
[220.80798340 484.23510742]
[221.74362183 499.20590210]
[222.67924500 514.17669678]
[232.19458008 527.53295898]
[225.14013672 542.33728027]
[208.77291870 543.36016846]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 147]
[2 146]
[3 145]
[4 144]
[5 143]
[6 142]
[7 141]
[8 129]
[9 128]
[10 127]
[11 126]
[13 124]
[14 123]
[15 122]
[16 121]
[20 114]
[21 113]
[22 112]
[23 111]
[24 110]
[25 109]
[26 108]
[27 105]
[28 104]
[34 57]
[35 56]
[36 55]
[38 53]
[39 52]
[40 51]
[58 98]
[59 97]
[60 96]
[61 95]
[62 94]
[64 92]
[65 91]
[66 90]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
