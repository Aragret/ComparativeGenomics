%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:26 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGUUAUCCCCAUACUAGUUAUUAUCGAAACCAUCAGCCUACUCAUUCAACCAAUAGCCCUGGCCGxxxxxxxxxxCAAACUAGGAGGCGUCCUUGCCCUAUUACUAUCCAUCCUCAUCCUAGCAAUAAUCCCCAUCCUCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[109.52439880 417.04061890]
[109.52439880 402.04061890]
[109.52439880 387.04061890]
[109.52439880 372.04061890]
[109.52439880 357.04061890]
[109.52439880 342.04061890]
[109.52439880 327.04061890]
[109.52439880 312.04061890]
[109.52439880 297.04061890]
[109.52439880 282.04061890]
[94.44209290 279.11541748]
[80.21054840 273.31555176]
[67.37217712 264.86016846]
[56.41665649 254.06956482]
[47.76227951 241.35325623]
[41.73997116 227.19425964]
[38.58062363 212.13084412]
[38.40626144 196.73602295]
[41.22532654 181.59579468]
[46.93227386 167.28680420]
[55.31154251 154.35440063]
[66.04568481 143.29182434]
[78.72738647 134.52145386]
[92.87494659 128.37860107]
[107.95054626 125.09874725]
[93.76673126 124.13877106]
[82.91978455 116.18891144]
[78.30151367 104.37901306]
[80.59326935 92.68772888]
[69.41935730 82.68054199]
[57.25216675 91.54272461]
[43.51356125 97.67897034]
[28.80505562 100.82328033]
[13.77007580 100.84058380]
[-0.93418598 97.73255920]
[-14.66549873 91.63745117]
[-26.82464409 82.82389069]
[-36.88156509 71.67910004]
[-44.39847183 58.69185257]
[-49.04890060 44.43104935]
[-50.63189316 29.52079582]
[-49.08066940 14.61308289]
[-44.46545410 0.35928535]
[-36.99029922 -12.61830139]
[-48.16421127 -22.62548447]
[-59.33812332 -32.63266754]
[-71.96457672 -24.37221527]
[-86.29906464 -19.66212273]
[-101.36422729 -18.82352829]
[-116.13290405 -21.91361046]
[-129.59814453 -28.72168159]
[-140.84185791 -38.78355789]
[-149.09742737 -51.41320038]
[-153.80198669 -65.74950409]
[-154.63476562 -80.81498718]
[-151.53897095 -95.58247375]
[-144.72570801 -109.04507446]
[-134.65948486 -120.28490448]
[-122.02666473 -128.53559875]
[-107.68854523 -133.23461914]
[-92.62273407 -134.06158447]
[-77.85645294 -130.96009827]
[-64.39647675 -124.14163208]
[-53.16053772 -114.07107544]
[-44.91471863 -101.43505859]
[-40.22123337 -87.09513092]
[-39.40008926 -72.02900696]
[-42.50727463 -57.26391983]
[-49.33094025 -43.80657959]
[-38.15702820 -33.79939651]
[-26.98311806 -23.79221344]
[-14.90506935 -32.64752197]
[-1.24441409 -38.80036163]
[13.40273094 -41.97956848]
[28.39664459 -42.04380417]
[43.08194351 -38.98782730]
[56.81622696 -32.94283676]
[68.99817657 -24.17083549]
[79.09390259 -13.05327892]
[86.66030121 -0.07449000]
[91.36454010 14.19944477]
[92.99868774 29.14536285]
[91.48889923 44.11023331]
[86.89874268 58.43968582]
[79.42653656 71.50662994]
[90.60044861 81.51381683]
[111.66239929 79.55976868]
[126.27497864 98.33148193]
[140.36465454 93.18551636]
[154.45433044 88.03955078]
[168.54400635 82.89357758]
[182.63368225 77.74761200]
[196.72335815 72.60163879]
[209.58688354 64.88607788]
[220.76078796 54.87889481]
[231.93470764 44.87171555]
[243.10861206 34.86453247]
[247.70089722 19.12150002]
[263.69299316 15.49037647]
[274.63360596 27.70655060]
[269.26797485 43.20307159]
[253.11579895 46.03844452]
[241.94189453 56.04562378]
[230.76797485 66.05281067]
[219.59407043 76.05998993]
[234.32347107 73.22366333]
[249.24301147 74.77513885]
[263.07366943 80.58139801]
[274.62979126 90.14468384]
[282.92065430 102.64514923]
[287.23550415 117.01115417]
[287.20443726 132.01112366]
[282.83010864 146.35913086]
[274.48754883 158.82514954]
[262.89190674 168.34048462]
[249.03732300 174.08940125]
[234.11146545 175.57905579]
[219.39395142 172.68173218]
[206.14645386 165.64582825]
[195.50466919 155.07452393]
[188.38092041 141.87406921]
[185.38587952 127.17611694]
[186.77633667 112.24069977]
[192.43309021 98.34821320]
[201.86933899 86.69132233]
[187.77966309 91.83728790]
[173.68997192 96.98325348]
[159.60029602 102.12922668]
[145.51062012 107.27519226]
[131.42094421 112.42116547]
[122.94754028 124.79862213]
[137.40170288 127.26973724]
[151.14721680 132.36570740]
[163.71195984 139.90985107]
[174.66465759 149.64144897]
[183.62969971 161.22474670]
[190.30003357 174.26048279]
[194.44763184 188.29972839]
[195.93135071 202.85928345]
[194.70167542 217.43833923]
[190.80241394 231.53570557]
[184.36911011 244.66705322]
[175.62437439 256.38146973]
[164.87011719 266.27713013]
[152.47715759 274.01480103]
[138.87245178 279.32974243]
[124.52439880 282.04061890]
[124.52439880 297.04061890]
[124.52439880 312.04061890]
[124.52439880 327.04061890]
[124.52439880 342.04061890]
[124.52439880 357.04061890]
[124.52439880 372.04061890]
[124.52439880 387.04061890]
[124.52439880 402.04061890]
[124.52439880 417.04061890]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 156]
[2 155]
[3 154]
[4 153]
[5 152]
[6 151]
[7 150]
[8 149]
[9 148]
[10 147]
[25 131]
[29 86]
[30 85]
[44 71]
[45 70]
[46 69]
[88 130]
[89 129]
[90 128]
[91 127]
[92 126]
[93 125]
[94 105]
[95 104]
[96 103]
[97 102]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
