%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:58 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGAAUACCCAUCAUAAUCGGAGGCUUUGGCAACUGACUAGUUCCCCUAAUAAUCGGUGCCCCxxxxxxxxxxACACUCACCAAGACCUCAACCCCUGACCCCCAUGCCUCAGGAUACUCCUCAAUAGCCAUCCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[118.67641449 606.19830322]
[118.67641449 591.19830322]
[118.67641449 576.19830322]
[118.67641449 561.19830322]
[118.67641449 546.19830322]
[118.67641449 531.19830322]
[118.67641449 516.19830322]
[118.67641449 501.19830322]
[118.67641449 486.19830322]
[118.67641449 471.19830322]
[102.51227570 468.01504517]
[87.33083344 461.60375977]
[73.76956177 452.23141479]
[62.39835739 440.28936768]
[53.69559860 426.27694702]
[48.02802658 410.78076172]
[45.63526535 394.44989014]
[46.61972809 377.96893311]
[50.94219971 362.02920532]
[58.42341232 347.29965210]
[68.75148773 334.39898682]
[81.49491119 323.86947632]
[96.12059021 316.15432739]
[112.01614380 311.57894897]
[110.76927185 296.63085938]
[109.52239227 281.68276978]
[98.74559784 267.86752319]
[106.64737701 251.26808167]
[105.08979034 236.34916687]
[103.53221130 221.43025208]
[101.97463226 206.51133728]
[100.41705322 191.59243774]
[91.19884491 183.69737244]
[89.81290436 171.23550415]
[97.55079651 160.86347961]
[96.30392456 145.91539001]
[95.05705261 130.96730042]
[62.55409622 115.15339661]
[60.45276642 70.34247589]
[46.04055023 66.18458557]
[31.62833405 62.02670288]
[17.21611786 57.86881638]
[1.43641460 62.33345032]
[-10.12968063 50.70772552]
[-5.58396006 34.95119095]
[10.39732838 31.27281380]
[21.37400627 43.45660019]
[35.78622055 47.61448669]
[50.19843674 51.77237320]
[64.61065674 55.93025970]
[70.65065002 51.48408508]
[59.99613571 40.92561340]
[49.34162521 30.36713791]
[35.18569946 25.40630722]
[27.85779381 12.31807709]
[31.02760315 -2.34317493]
[43.10773849 -11.23532581]
[58.04865646 -9.90532684]
[68.36818695 0.98077863]
[68.89869690 15.97074223]
[75.81466675 29.28123856]
[82.73063660 42.59173584]
[88.77062988 38.14556122]
[89.08268738 23.14880753]
[89.39474487 8.15205383]
[89.70680237 -6.84469986]
[75.35327911 -11.58471775]
[63.03554916 -20.34628105]
[53.84890366 -32.35031891]
[48.61020660 -46.52944183]
[47.78528214 -61.62284851]
[51.44748306 -76.28844452]
[59.27116394 -89.22217560]
[70.56065369 -99.27397919]
[84.31209564 -105.55006409]
[99.30272675 -107.49236298]
[114.19957733 -104.92816162]
[127.67804718 -98.08546448]
[138.53962708 -87.57273865]
[145.81851196 -74.32474518]
[148.86747742 -59.51950455]
[147.41540527 -44.47347641]
[141.59140015 -30.52455139]
[131.91336060 -18.91305542]
[119.24182892 -10.67147350]
[104.70355225 -6.53264332]
[104.39149475 8.46411037]
[104.07943726 23.46086311]
[103.76738739 38.45761871]
[110.19658661 42.31966019]
[117.66027069 29.30837822]
[125.64156342 16.60802841]
[138.50004578 24.33199501]
[131.03634644 37.34343338]
[123.05498505 50.04374313]
[129.48419189 53.90578842]
[142.57734680 46.58668137]
[155.67050171 39.26757812]
[161.40328979 24.28376198]
[176.73547363 19.56109047]
[189.90551758 28.72239304]
[190.81048584 44.73990250]
[178.75616455 55.32635498]
[162.98960876 52.36072922]
[149.89645386 59.67983627]
[136.80329895 66.99893951]
[143.66152954 89.46701813]
[139.06349182 110.28909302]
[126.20695496 124.50296021]
[110.00513458 129.72042847]
[111.25201416 144.66851807]
[112.49888611 159.61660767]
[123.35260773 174.45495605]
[115.33596039 190.03485107]
[116.89354706 204.95376587]
[118.45112610 219.87268066]
[120.00870514 234.79159546]
[121.56628418 249.71049500]
[131.09973145 258.46078491]
[132.05784607 270.96282959]
[124.47048187 280.43588257]
[125.71735382 295.38397217]
[126.96423340 310.33206177]
[140.52101135 311.63168335]
[153.66360474 315.18954468]
[166.01870728 320.90347290]
[177.23553467 328.61001587]
[186.99586487 338.08923340]
[195.02301025 349.07083130]
[201.08964539 361.24200439]
[205.02430725 374.25628662]
[206.71620178 387.74337769]
[206.11831665 401.31973267]
[203.24874878 414.59948730]
[198.19013977 427.20535278]
[191.08731079 438.77938843]
[182.14311218 448.99316406]
[171.61264038 457.55706787]
[159.79591370 464.22845459]
[147.02941895 468.81869507]
[133.67640686 471.19830322]
[133.67640686 486.19830322]
[133.67640686 501.19830322]
[133.67640686 516.19830322]
[133.67640686 531.19830322]
[133.67640686 546.19830322]
[133.67640686 561.19830322]
[133.67640686 576.19830322]
[133.67640686 591.19830322]
[133.67640686 606.19830322]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[24 123]
[25 122]
[26 121]
[28 118]
[29 117]
[30 116]
[31 115]
[32 114]
[35 112]
[36 111]
[37 110]
[39 50]
[40 49]
[41 48]
[42 47]
[63 89]
[64 88]
[65 87]
[66 86]
[96 106]
[97 105]
[98 104]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
