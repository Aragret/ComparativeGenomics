%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:26 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCUGUCUCUUACUUUUAACCAGUGAAAUUGACCUGCCCGUGAAGAGGCGGGCAUAACACAGCxxxxxxxxxxAUAAUCGGUGCCCCCGAUAUGGCGUUUCCCCGCAUAAACAACAUAAGCUUCUGACUCUUACCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[103.87550354 303.92926025]
[103.56752777 288.93240356]
[103.25954437 273.93557739]
[102.95156860 258.93875122]
[102.64359283 243.94190979]
[102.33561707 228.94506836]
[102.02764130 213.94822693]
[101.71965790 198.95138550]
[101.41168213 183.95454407]
[99.11080933 169.13206482]
[94.85796356 154.74758911]
[90.60511780 140.36311340]
[76.85228729 134.37481689]
[63.42483521 141.06088257]
[49.99738693 147.74696350]
[44.88754272 162.46182251]
[31.17495346 169.05117798]
[17.17806816 164.08903503]
[3.75061941 170.77511597]
[-9.53672218 177.73547363]
[-22.67835426 184.96717834]
[-35.81998444 192.19888306]
[-38.67333984 207.57392883]
[-50.77483749 217.47785950]
[-66.41052246 217.23432922]
[-78.19770813 206.95831299]
[-80.57083130 191.50184631]
[-72.40939331 178.16299438]
[-57.56696320 173.23995972]
[-43.05168915 179.05725098]
[-29.91005516 171.82554626]
[-16.76842499 164.59384155]
[-14.58959866 160.28083801]
[-9.64678383 157.32171631]
[-2.93545580 157.34767151]
[10.49199390 150.66159058]
[14.96712875 136.50148010]
[28.48922539 129.52957153]
[43.31130981 134.31951904]
[56.73876190 127.63343811]
[70.16620636 120.94736481]
[58.29938889 92.76586151]
[72.19033813 60.63962173]
[59.68629837 52.35414886]
[47.18226242 44.06867218]
[34.67822647 35.78319931]
[22.17419243 27.49772453]
[9.67015648 19.21224976]
[-2.83387899 10.92677498]
[-18.27071762 14.31492519]
[-31.53676987 5.72496605]
[-34.76152420 -9.74683094]
[-26.03178787 -22.92132378]
[-10.52676105 -25.98231888]
[2.55469966 -17.11378288]
[5.45159531 -1.57726049]
[17.95563126 6.70821428]
[30.45966721 14.99368858]
[42.96370316 23.27916336]
[55.46773911 31.56463814]
[67.97177124 39.85011292]
[80.47580719 48.13558578]
[93.22906494 40.23910522]
[91.38574219 25.35279655]
[76.52931976 22.49941063]
[63.28274155 15.19301510]
[52.94377899 4.14941740]
[46.52533722 -9.54944324]
[44.65622711 -24.56149292]
[47.51956940 -39.41600418]
[54.83483887 -52.65768051]
[65.88536072 -62.98923874]
[79.58852386 -69.39849854]
[94.60182190 -71.25755310]
[109.45440674 -68.38425446]
[122.69117737 -61.06011581]
[133.01533508 -50.00267029]
[139.41540527 -36.29522324]
[141.26440430 -21.28068161]
[138.38114929 -6.43002224]
[131.04814148 6.80183935]
[119.98378754 17.11858177]
[106.27204895 23.50947189]
[108.11537170 38.39577866]
[122.62400055 42.20363998]
[131.54014587 30.14120674]
[140.45629883 18.07877541]
[149.37245178 6.01634455]
[158.28860474 -6.04608679]
[157.34068298 -22.06111145]
[169.36657715 -32.67984772]
[185.14103699 -29.75650597]
[192.56326294 -15.53362751]
[185.93954468 -0.92178631]
[170.35102844 2.87006426]
[161.43489075 14.93249607]
[152.51873779 26.99492645]
[143.60258484 39.05735779]
[134.68643188 51.11978912]
[142.05267334 64.18648529]
[156.98867798 62.80245972]
[171.92469788 61.41843414]
[182.00511169 49.54312134]
[197.17205811 48.35229111]
[208.43124390 58.03560638]
[223.36724854 56.65158081]
[238.30326843 55.26755524]
[253.23927307 53.88352966]
[261.04669189 40.47368622]
[275.25869751 34.24480438]
[290.41043091 37.59201050]
[300.67581177 49.22824097]
[302.10754395 64.67912292]
[294.15512085 78.00347900]
[279.87640381 84.07781982]
[264.76184082 80.56644440]
[254.62330627 68.81954193]
[239.68728638 70.20356750]
[224.75128174 71.58759308]
[209.81526184 72.97161865]
[200.52709961 84.55892181]
[185.39958191 86.17529297]
[173.30871582 76.35444641]
[158.37271118 77.73847198]
[143.43669128 79.12249756]
[137.28897095 120.02014923]
[104.98959351 136.11026001]
[109.24243927 150.49473572]
[113.49528503 164.87922668]
[118.11860657 150.60949707]
[128.06289673 139.37957764]
[141.66841125 133.06375122]
[156.66438293 132.71614075]
[170.54794312 138.39476013]
[181.00189209 149.15184021]
[186.28144836 163.19201660]
[185.50544739 178.17192078]
[178.80337524 191.59140015]
[167.29386902 201.21070862]
[152.89785767 205.42436218]
[138.01806641 203.52908325]
[125.13798523 195.84120178]
[116.40852356 183.64657593]
[116.71649933 198.64341736]
[117.02447510 213.64024353]
[117.33245087 228.63708496]
[117.64043427 243.63392639]
[117.94841003 258.63076782]
[118.25638580 273.62759399]
[118.56436157 288.62445068]
[118.87234497 303.62127686]
[121.45811462 322.82971191]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 151]
[2 150]
[3 149]
[4 148]
[5 147]
[6 146]
[7 145]
[8 144]
[9 143]
[10 129]
[11 128]
[12 127]
[13 41]
[14 40]
[15 39]
[18 36]
[19 35]
[20 32]
[21 31]
[22 30]
[43 62]
[44 61]
[45 60]
[46 59]
[47 58]
[48 57]
[49 56]
[63 84]
[64 83]
[85 99]
[86 98]
[87 97]
[88 96]
[89 95]
[100 125]
[101 124]
[102 123]
[105 120]
[106 119]
[107 118]
[108 117]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
