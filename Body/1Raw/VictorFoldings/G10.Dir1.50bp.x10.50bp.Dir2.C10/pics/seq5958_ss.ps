%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:41 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGAUAAUCUUAUAGAAAUUUAGGUUAAAUACAGACCAAGAGCCUUCAAAGCCCUCAGUAAGUxxxxxxxxxxCAUACCAAGGCCACCACACACCACCUGUCCAAAAAGGCCUUCGAUACGGGAUAAUCCUAUCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[92.50000000 248.67015076]
[92.50000000 233.67015076]
[92.50000000 218.67015076]
[92.50000000 203.67015076]
[92.50000000 188.67015076]
[92.50000000 173.67015076]
[92.50000000 158.67015076]
[92.50000000 143.67015076]
[92.50000000 128.67015076]
[92.50000000 113.67015076]
[87.11459351 108.45024109]
[80.51393890 121.91989136]
[65.66385651 119.80445862]
[63.08700943 105.02745056]
[76.34378815 98.01042938]
[70.95838165 92.79052734]
[55.96568680 93.25856781]
[40.97299194 93.72660828]
[37.79685211 108.45745087]
[31.19131851 121.99182892]
[21.54426384 133.54490662]
[9.41978645 142.44789124]
[-4.47476196 148.18678284]
[-19.33005524 150.43200684]
[-34.28192902 149.05732727]
[-48.46165085 144.14698792]
[-61.04639435 135.99050903]
[-71.30699158 125.06566620]
[-78.65016174 112.01048279]
[-82.65285492 97.58596039]
[-97.64555359 98.05400848]
[-112.63825226 98.52204895]
[-120.48152161 111.80687714]
[-134.27227783 118.72197723]
[-149.60993958 117.06076050]
[-161.60031128 107.35332489]
[-166.41732788 92.69726562]
[-162.52386475 77.76928711]
[-151.16233826 67.33284760]
[-135.95816040 64.71818542]
[-121.76293182 70.75961304]
[-113.10629272 83.52935028]
[-98.11359406 83.06130981]
[-83.12090302 82.59326935]
[-80.02573395 67.94716644]
[-73.51117706 54.45936966]
[-63.95200348 42.91579819]
[-51.90052795 33.99023056]
[-38.05469894 28.20498466]
[-23.21768570 25.90035439]
[-8.25127316 27.21459770]
[5.97418499 32.07564163]
[18.63037872 40.20503235]
[28.97927475 51.13387299]
[36.41615295 64.22986603]
[40.50494766 78.73391724]
[55.49764633 78.26586914]
[70.49034119 77.79782867]
[105.61312103 82.24369812]
[116.27474213 71.69240570]
[126.93637085 61.14111710]
[137.26358032 50.26229095]
[147.24630737 39.06652832]
[146.74435425 22.59652328]
[158.04980469 11.37629318]
[157.73774719 -3.62046027]
[157.42568970 -18.61721420]
[143.15185547 -23.77685738]
[131.70834351 -33.74733734]
[124.64279175 -47.18022537]
[122.91077423 -62.25883865]
[126.74652100 -76.94391632]
[135.63128662 -89.24942017]
[148.36346436 -97.51113129]
[163.22116089 -100.61172485]
[178.19496155 -98.13187408]
[191.25979614 -90.40695190]
[200.64875793 -78.48168945]
[205.09205627 -63.96888733]
[203.98878479 -48.83127594]
[197.48814392 -35.11610031]
[186.46929932 -24.67821693]
[172.42243958 -18.92926979]
[172.73449707 -3.93251657]
[173.04655457 11.06423759]
[176.74050903 12.97143078]
[179.95075989 15.61282444]
[193.85331726 9.98086739]
[207.75587463 4.34891129]
[221.65841675 -1.28304553]
[235.56097412 -6.91500235]
[249.46353149 -12.54695892]
[250.21679688 -29.64668846]
[258.31390381 -44.66409302]
[272.09710693 -54.62565613]
[288.78826904 -57.58270264]
[305.04879761 -52.99247360]
[317.64739990 -41.81696320]
[331.30361938 -48.02237320]
[344.95986938 -54.22777939]
[351.91833496 -68.68319702]
[367.59005737 -72.11503601]
[379.95297241 -61.89068222]
[379.52334595 -45.85338211]
[366.63076782 -36.30558395]
[351.16528320 -40.57153702]
[337.50903320 -34.36613083]
[323.85278320 -28.16072273]
[324.61984253 -15.12453747]
[320.88296509 -2.57846141]
[313.06979370 7.96492815]
[302.10089111 15.22672749]
[289.28115845 18.31681824]
[276.14462280 16.84293175]
[264.27096558 10.96029186]
[255.09548950 1.35559714]
[241.19293213 6.98755360]
[227.29037476 12.61951065]
[213.38781738 18.25146675]
[199.48527527 23.88342476]
[185.58271790 29.51538086]
[177.42008972 46.17712021]
[158.44206238 49.04925156]
[148.45933533 60.24501801]
[148.32026672 63.82944870]
[146.39730835 67.51779938]
[142.66442871 70.45344543]
[137.48765564 71.80274200]
[126.82603455 82.35403442]
[116.16440582 92.90532684]
[129.00709534 85.15515137]
[143.99440002 84.53807068]
[157.43075562 91.20625305]
[166.00300598 103.51544952]
[167.59744263 118.43046570]
[161.82089233 132.27355957]
[150.09773254 141.63131714]
[135.31866455 144.19630432]
[121.12790680 139.33602905]
[111.02459717 128.24896240]
[107.50000000 113.67015076]
[107.50000000 128.67015076]
[107.50000000 143.67015076]
[107.50000000 158.67015076]
[107.50000000 173.67015076]
[107.50000000 188.67015076]
[107.50000000 203.67015076]
[107.50000000 218.67015076]
[107.50000000 233.67015076]
[107.50000000 248.67015076]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[16 58]
[17 57]
[18 56]
[30 44]
[31 43]
[32 42]
[59 130]
[60 129]
[61 128]
[62 124]
[63 123]
[65 85]
[66 84]
[67 83]
[87 121]
[88 120]
[89 119]
[90 118]
[91 117]
[92 116]
[98 108]
[99 107]
[100 106]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
