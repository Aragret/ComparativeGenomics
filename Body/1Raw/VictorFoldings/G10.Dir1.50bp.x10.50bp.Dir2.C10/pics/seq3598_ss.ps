%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:02 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCCCUCCCCAUACCCAACCCCCUGGUCAACCUCAACCUAGGCCUCCUAUUUAUUCUAGCCAxxxxxxxxxxUCCCCAUAUCUAACAACGUAAAAAUAAAAUGACAGUUUGAACAUACAAAACCCACCCCAUCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[91.52278900 133.51974487]
[94.30518341 118.78005981]
[84.79682159 130.38139343]
[75.28846741 141.98274231]
[65.78010559 153.58407593]
[56.27174759 165.18542480]
[47.76065826 177.53700256]
[40.30574799 190.55329895]
[32.85083771 203.56961060]
[25.39592743 216.58592224]
[25.99384117 232.97416687]
[11.95831203 241.45567322]
[-2.27211308 233.30538940]
[-2.05839205 216.90763855]
[12.37961674 209.13101196]
[19.83452797 196.11470032]
[27.28943825 183.09838867]
[34.74434662 170.08209229]
[20.39802933 174.46194458]
[6.16569662 169.72477722]
[-2.69408536 157.62088013]
[-2.90780401 142.62240601]
[5.60350561 130.27098083]
[19.69508362 125.13022614]
[34.16037369 129.09953308]
[43.65473557 140.71232605]
[44.67040634 155.67706299]
[54.17876434 144.07572937]
[63.68712234 132.47438049]
[73.19548035 120.87303925]
[82.70384216 109.27169800]
[79.74385834 102.38050842]
[70.86391449 81.70693970]
[55.90366364 80.61562347]
[40.94341660 79.52431488]
[31.03683281 91.46748352]
[15.99392509 95.27413177]
[1.59900177 89.48052979]
[-6.61279726 76.31443787]
[-5.48386765 60.83848572]
[4.55169487 49.00349045]
[19.63501167 45.36025238]
[33.96623993 51.30966949]
[42.03472900 64.56406403]
[56.99497604 65.65538025]
[71.95522308 66.74668884]
[75.40872192 60.08911133]
[82.31571960 46.77395630]
[85.76921844 40.11637878]
[76.26086426 28.51503563]
[66.75250244 16.91369438]
[52.34002686 21.67235947]
[37.18196106 20.89938736]
[23.32831192 14.69931602]
[12.65267372 3.91065669]
[6.59883738 -10.00751495]
[5.98553419 -25.17288017]
[10.89570904 -39.53444672]
[20.66530228 -51.14993286]
[33.97305298 -58.44843674]
[49.01919937 -60.44289780]
[63.76887512 -56.86358261]
[76.22731018 -48.19456100]
[84.70959473 -35.60824966]
[88.06857300 -20.80684090]
[85.84997559 -5.79210520]
[78.35384369 7.40533638]
[87.86220551 19.00667763]
[97.37055969 30.60801888]
[94.58817291 15.86833382]
[91.80578613 1.12864947]
[89.02339172 -13.61103535]
[89.37532806 -28.60690498]
[91.59049225 -43.44244003]
[95.63446045 -57.88703537]
[101.44436646 -71.71617126]
[108.92990112 -84.71488953]
[117.97472382 -96.68114471]
[128.43823242 -107.42893982]
[140.15779114 -116.79119873]
[152.95121765 -124.62242126]
[166.61968994 -130.80085754]
[180.95071411 -135.23048401]
[195.72155762 -137.84245300]
[210.70260620 -138.59616089]
[225.66101074 -137.47987366]
[240.36425781 -134.51097107]
[254.58381653 -129.73558044]
[268.09863281 -123.22794342]
[280.69866943 -115.08920288]
[292.18807983 -105.44586182]
[302.38821411 -94.44783020]
[311.14059448 -82.26604462]
[318.30914307 -69.08985901]
[323.78244019 -55.12407684]
[327.47543335 -40.58578491]
[329.33065796 -25.70095825]
[329.31933594 -10.70096207]
[327.44161987 4.18104696]
[323.72671509 18.71374702]
[318.23233032 32.67124557]
[311.04388428 45.83659363]
[302.27313232 58.00514984]
[292.05636597 68.98777008]
[280.55242920 78.61374664]
[267.94012451 86.73345184]
[254.41548157 93.22068024]
[240.18873596 97.97458649]
[225.48101807 100.92129517]
[210.52095032 102.01498413]
[195.54104614 101.23866272]
[180.77416992 98.60440063]
[166.44177246 94.15006256]
[151.54103088 95.87279510]
[136.64028931 97.59552765]
[121.73954010 99.31826019]
[135.64210510 104.95021820]
[149.54464722 110.58217621]
[163.44720459 116.21413422]
[177.90129089 109.82233429]
[192.61120605 115.60107422]
[198.84983826 130.12191772]
[192.91589355 144.76992798]
[178.32989502 150.85467529]
[163.74545288 144.76620483]
[157.81524658 130.11668396]
[143.91270447 124.48473358]
[130.01014709 118.85277557]
[116.10758209 113.22081757]
[125.60812378 124.82856750]
[135.10865784 136.43630981]
[144.60919189 148.04405212]
[157.81266785 155.16223145]
[168.51322937 165.67402649]
[175.86523438 178.74873352]
[179.28767395 193.35308838]
[178.51008606 208.33291626]
[173.59390259 222.50440979]
[164.92765808 234.74760437]
[153.19621277 244.09497070]
[139.32669067 249.80780029]
[124.41516113 251.43460083]
[109.64006805 248.84681702]
[96.16904449 242.24897766]
[85.06668854 232.16246033]
[77.21038818 219.38441467]
[73.22102356 204.92463684]
[73.41384888 189.92588806]
[77.77363586 175.57345581]
[85.95800781 162.99911499]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 31]
[3 30]
[4 29]
[5 28]
[6 27]
[7 18]
[8 17]
[9 16]
[10 15]
[33 46]
[34 45]
[35 44]
[49 69]
[50 68]
[51 67]
[116 129]
[117 128]
[118 127]
[119 126]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
