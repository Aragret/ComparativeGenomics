%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:33 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCACGUACUACGUUGUAGCCCACUUCCACUAUGUCCUAUCAAUAGGAGCUGUAUUUGCCAUxxxxxxxxxxCAUUACUAAACCCACACUCAACAGAAACAAAGCAUACAUCAUUAUUCUCGCACGGACUACCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[92.50000000 252.61326599]
[92.50000000 237.61326599]
[92.50000000 222.61326599]
[92.50000000 207.61326599]
[92.50000000 192.61326599]
[92.50000000 177.61326599]
[92.50000000 162.61326599]
[92.50000000 147.61326599]
[92.50000000 132.61326599]
[92.50000000 117.61327362]
[78.42784882 112.41763306]
[64.35696411 107.22244263]
[54.60931015 118.62345886]
[44.86165619 130.02447510]
[35.11400604 141.42550659]
[29.41667747 157.39349365]
[12.49554348 156.33920288]
[8.82439804 139.78749084]
[23.71298409 131.67785645]
[33.46063614 120.27683258]
[43.20829010 108.87580872]
[52.95594025 97.47478485]
[44.57379532 85.03534698]
[30.34701729 89.78916168]
[18.50352478 103.85015869]
[1.46762192 99.75406647]
[-12.65718079 104.80281830]
[-22.85251808 117.64755249]
[-39.03212738 114.97317505]
[-44.55181503 99.53086090]
[-33.73339844 87.20633698]
[-17.70593834 90.67801666]
[-3.58113432 85.62925720]
[1.90445817 74.80264282]
[13.68288422 70.50292206]
[25.59320259 75.56238556]
[39.81998062 70.80857086]
[62.17714691 70.93852997]
[81.36978149 78.41841888]
[95.46014404 91.85743713]
[98.86312103 77.24854279]
[102.26609802 62.63965225]
[96.06069183 48.98341370]
[82.81810760 41.93827820]
[69.57552338 34.89314270]
[56.33293533 27.84800720]
[43.09034729 20.80287361]
[26.72874069 21.91185570]
[17.81341743 8.14780807]
[25.51569748 -6.32999992]
[41.91213608 -6.62803936]
[50.13548279 7.56028700]
[63.37806702 14.60542202]
[76.62065125 21.65055656]
[89.86324310 28.69569206]
[103.10582733 35.74082565]
[110.45327759 27.54382324]
[119.85463715 23.98938370]
[128.88601685 25.08689690]
[136.61010742 12.22849464]
[144.33419800 -0.62990767]
[152.05827332 -13.48830986]
[152.56198120 -20.18560791]
[155.90545654 -24.88161087]
[160.38063049 -26.71144485]
[168.63291931 -39.23740768]
[176.88520813 -51.76336670]
[165.58068848 -61.65890121]
[155.72895813 -73.00161743]
[147.51354980 -85.58020020]
[141.08749390 -99.16031647]
[136.57052612 -113.48898315]
[134.04678345 -128.29927063]
[133.56329346 -143.31526184]
[135.12904358 -158.25721741]
[138.71487427 -172.84678650]
[144.25399780 -186.81217957]
[151.64318848 -199.89320374]
[160.74482727 -211.84619141]
[171.38934326 -222.44847107]
[183.37843323 -231.50250244]
[196.48873901 -238.83963013]
[210.47604370 -244.32316589]
[225.07975769 -247.85095215]
[240.02783203 -249.35728455]
[255.04177856 -248.81407166]
[269.84191895 -246.23146057]
[284.15249634 -241.65754700]
[297.70697021 -235.17755127]
[310.25277710 -226.91218567]
[321.55621338 -217.01542664]
[331.40673828 -205.67164612]
[339.62078857 -193.09217834]
[346.04534912 -179.51136780]
[350.56079102 -165.18220520]
[353.08291626 -150.37164307]
[353.56478882 -135.35560608]
[351.99740601 -120.41381836]
[348.41000366 -105.82463837]
[342.86938477 -91.85984802]
[335.47875977 -78.77961731]
[326.37582397 -66.82761383]
[315.73016357 -56.22649765]
[303.74011230 -47.17375946]
[290.62899780 -39.83804703]
[276.64111328 -34.35602570]
[262.03701782 -30.82981300]
[247.08877563 -29.32510757]
[232.07487488 -29.86993790]
[217.27502441 -32.45415115]
[202.96493530 -37.02961349]
[189.41117859 -43.51107788]
[181.15888977 -30.98511696]
[172.90660095 -18.45915413]
[164.91668701 -5.76422501]
[157.19259644 7.09417725]
[149.46850586 19.95257950]
[141.74443054 32.81098175]
[143.39077759 56.93820953]
[116.87499237 66.04263306]
[113.47201538 80.65152740]
[110.06903076 95.26041412]
[117.24143219 82.08632660]
[128.05329895 71.68903351]
[141.49760437 65.03693390]
[156.32218933 62.74959946]
[171.14627075 65.04006958]
[184.58918762 71.69501495]
[195.39884949 82.09458923]
[202.56845093 95.27020264]
[205.43025208 109.99467468]
[203.71766663 124.89659119]
[197.59024048 138.58799744]
[187.61865234 149.79368591]
[174.73165894 157.46997070]
[160.12954712 160.90190125]
[145.17233276 159.76980591]
[131.25311279 154.17915344]
[119.66831970 144.65063477]
[111.49695587 132.07173157]
[107.50000000 117.61327362]
[107.50000000 132.61326599]
[107.50000000 147.61326599]
[107.50000000 162.61326599]
[107.50000000 177.61326599]
[107.50000000 192.61326599]
[107.50000000 207.61326599]
[107.50000000 222.61326599]
[107.50000000 237.61326599]
[107.50000000 252.61326599]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[12 22]
[13 21]
[14 20]
[15 19]
[23 37]
[24 36]
[26 33]
[27 32]
[40 122]
[41 121]
[42 120]
[43 56]
[44 55]
[45 54]
[46 53]
[47 52]
[59 118]
[60 117]
[61 116]
[62 115]
[65 114]
[66 113]
[67 112]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
