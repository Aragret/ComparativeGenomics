%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:46 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCCAAACCCCCUGAAGCUUCACCGGCGCAGUCAUUCUCAUAAUCGCCCACGGGCUUACAUCxxxxxxxxxxCCCAAAAUUCAGAAUAAUAACACACCCGACCACACCGCUAACAAUCAAUACUAAACCCCCCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[113.26596832 485.81784058]
[113.26596832 470.81784058]
[113.26596832 455.81784058]
[113.26596832 440.81784058]
[113.26596832 425.81784058]
[113.26596832 410.81784058]
[113.26596832 395.81784058]
[113.26596832 380.81784058]
[113.26596832 365.81784058]
[113.26596832 350.81784058]
[97.28148651 346.82812500]
[82.83976746 338.87844849]
[70.90374756 327.49285889]
[62.27082062 313.42471313]
[57.51958466 297.60684204]
[56.97103500 281.08963013]
[60.66691971 264.97134399]
[68.36657715 250.32499695]
[79.56263733 238.12710571]
[93.51440430 229.19236755]
[109.29690552 224.11941528]
[108.36127472 209.14862061]
[107.42564392 194.17782593]
[105.71295929 179.27592468]
[103.22783661 164.48321533]
[100.74272156 149.69052124]
[88.66698456 148.38658142]
[77.26821136 144.19235229]
[67.22727966 137.35836792]
[59.14398193 128.29283142]
[53.50115204 117.53727722]
[50.63586044 105.73415375]
[50.71925735 93.58850861]
[36.30704117 89.43061829]
[21.89482307 85.27273560]
[7.48260736 81.11484528]
[11.98353195 95.42364502]
[3.78042865 107.98187256]
[-11.13089657 109.61048126]
[-21.85147285 99.11909485]
[-20.54542542 84.17606354]
[-8.16802025 75.70363617]
[-22.07057571 70.07167816]
[-35.97313309 64.43972015]
[-51.24777222 69.34532928]
[-64.52638245 60.34210587]
[-65.62275696 44.33655930]
[-53.69583893 33.60677338]
[-37.89495087 36.38372040]
[-30.34117508 50.53716660]
[-16.43861961 56.16912460]
[-2.53606319 61.80107880]
[11.64049530 66.70262909]
[26.05271149 70.86051941]
[40.46492767 75.01840973]
[54.87714386 79.17629242]
[68.04233551 61.94205856]
[87.29370117 51.95576096]
[108.96491241 51.11923218]
[113.86646271 36.94267654]
[118.76801300 22.76611710]
[123.66956329 8.58955860]
[110.31093597 1.71003449]
[98.06739044 -7.00066566]
[87.18817902 -17.36520386]
[77.89480591 -29.17256927]
[70.37645721 -42.18238068]
[64.78620148 -56.12977600]
[61.23785400 -70.73080444]
[59.80364990 -85.68820190]
[60.51278305 -100.69746399]
[63.35082626 -115.45301819]
[68.25999451 -129.65444946]
[75.14035034 -143.01264954]
[83.85180664 -155.25566101]
[94.21701813 -166.13423157]
[106.02495575 -175.42686462]
[119.03523254 -182.94441223]
[132.98297119 -188.53379822]
[147.58422852 -192.08125305]
[162.54171753 -193.51452637]
[177.55093384 -192.80445862]
[192.30630493 -189.96551514]
[206.50743103 -185.05546570]
[219.86520386 -178.17428589]
[232.10768127 -169.46206665]
[242.98559570 -159.09619141]
[252.27751160 -147.28767395]
[259.79425049 -134.27693176]
[265.38278198 -120.32884216]
[268.92932129 -105.72737122]
[270.36169434 -90.76979828]
[269.65069580 -75.76062012]
[266.81082153 -61.00542450]
[261.89990234 -46.80459595]
[255.01788330 -33.44724655]
[246.30491638 -21.20531464]
[235.93835449 -10.32803345]
[224.12925720 -1.03684843]
[211.11805725 6.47908354]
[197.16961670 12.06674767]
[182.56793213 15.61238670]
[167.61027527 17.04381561]
[152.60115051 16.33189201]
[137.84611511 13.49110985]
[132.94456482 27.66766739]
[128.04301453 41.84422684]
[123.14146423 56.02078247]
[133.66693115 63.44543457]
[141.93070984 73.32576752]
[147.37763977 84.99803925]
[149.64179993 97.67811584]
[148.57109070 110.51417542]
[144.23745728 122.64391327]
[136.93200684 133.25245667]
[127.14551544 141.62715149]
[115.53542328 147.20539856]
[118.02054596 161.99810791]
[120.50566101 176.79081726]
[131.45980835 166.54353333]
[146.33067322 168.50756836]
[154.24885559 181.24736023]
[149.42680359 195.45115662]
[135.38905334 200.73713684]
[122.39643860 193.24220276]
[123.33206940 208.21299744]
[124.26769257 223.18379211]
[137.69799805 225.39007568]
[150.35668945 230.37176514]
[161.67747498 237.90298462]
[171.15451050 247.64385986]
[178.36503601 259.15588379]
[182.98828125 271.92163086]
[184.81964111 285.36798096]
[183.77981567 298.89193726]
[179.91818237 311.88754272]
[173.41050720 323.77319336]
[164.55090332 334.01748657]
[153.73855591 342.16317749]
[141.45974731 347.84735107]
[128.26597595 350.81784058]
[128.26597595 365.81784058]
[128.26597595 380.81784058]
[128.26597595 395.81784058]
[128.26597595 410.81784058]
[128.26597595 425.81784058]
[128.26597595 440.81784058]
[128.26597595 455.81784058]
[128.26597595 470.81784058]
[128.26597595 485.81784058]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[21 127]
[22 126]
[23 125]
[24 119]
[25 118]
[26 117]
[33 56]
[34 55]
[35 54]
[36 53]
[42 52]
[43 51]
[44 50]
[59 108]
[60 107]
[61 106]
[62 105]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
