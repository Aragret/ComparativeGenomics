%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:40 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGGCAAGGACUAACCCCUAUACCUUCUGCAUAAUGAAUUAACUAGAAAUAACUUUGCAAGGAxxxxxxxxxxCCAUUACUAAACCCACACUCAACAGAAACAAAGCAUACAUCAUUAUUCUCGCACGGACUACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[107.15361786 254.97683716]
[107.15361786 239.97683716]
[107.15361786 224.97683716]
[107.15361786 209.97683716]
[107.15361786 194.97683716]
[107.15361786 179.97683716]
[107.15361786 164.97683716]
[107.15361786 149.97683716]
[107.15361786 134.97683716]
[107.15361786 119.97682953]
[93.98503113 112.79431915]
[81.37390137 120.91586304]
[68.76277924 129.03739929]
[56.32333374 137.41955566]
[44.06096649 146.05867004]
[31.79859924 154.69778442]
[34.78898621 169.63020325]
[31.44094467 184.48654175]
[22.33453560 196.69281006]
[9.04750443 204.13423157]
[-6.11809254 205.52151489]
[-20.53472328 200.61431885]
[-31.70462036 190.26283264]
[-37.69252777 176.26051331]
[-37.46100998 161.03335571]
[-31.05017662 147.21955872]
[-19.57074165 137.21243286]
[-5.01158762 132.74578857]
[10.10482407 134.59349060]
[23.15948296 142.43540955]
[35.42185211 133.79629517]
[47.68421936 125.15718079]
[49.37352371 120.62708282]
[53.96291351 117.13870239]
[60.64123154 116.42627716]
[73.25236511 108.30473328]
[85.86348724 100.18318939]
[94.75583649 88.10320282]
[98.76358032 73.64851379]
[102.77131653 59.19382858]
[106.77906036 44.73913956]
[110.78679657 30.28445053]
[114.79454041 15.82976246]
[118.80228424 1.37507367]
[113.31524658 -12.58531666]
[100.53789520 -20.44274139]
[87.76053619 -28.30016708]
[72.98145294 -23.19009590]
[58.39387894 -28.82361603]
[50.88560867 -42.54075623]
[54.00182343 -57.86470032]
[66.27114105 -67.55994415]
[81.90036011 -67.04870605]
[93.50984955 -56.57236099]
[95.61795807 -41.07752609]
[108.39531708 -33.22010040]
[121.17267609 -25.36267281]
[129.10430908 -37.77330399]
[141.37902832 -44.31434631]
[154.46485901 -44.00406647]
[161.09335327 -57.46002960]
[167.72184753 -70.91600037]
[174.35035706 -84.37196350]
[180.97885132 -97.82792664]
[168.53022766 -106.23896790]
[157.34289551 -116.26679993]
[147.62528992 -127.72462463]
[139.55841064 -140.39898682]
[133.29255676 -154.05375671]
[128.94447327 -168.43457031]
[126.59513092 -183.27351379]
[126.28831482 -198.29415894]
[128.02973938 -213.21665955]
[131.78694153 -227.76304626]
[137.48997498 -241.66229248]
[145.03254700 -254.65550232]
[154.27416992 -266.50057983]
[165.04266357 -276.97689819]
[177.13743591 -285.88928223]
[190.33316040 -293.07165527]
[204.38398743 -298.39028931]
[219.02819824 -301.74603271]
[233.99295044 -303.07641602]
[248.99946594 -302.35659790]
[263.76818848 -299.60006714]
[278.02398682 -294.85812378]
[291.50128174 -288.21911621]
[303.94900513 -279.80673218]
[315.13522339 -269.77767944]
[324.85162354 -258.31881714]
[332.91711426 -245.64358521]
[339.18148804 -231.98812866]
[343.52801514 -217.60684204]
[345.87576294 -202.76765442]
[346.18093872 -187.74697876]
[344.43792725 -172.82466125]
[340.67910767 -158.27868652]
[334.97460938 -144.38005066]
[327.43060303 -131.38766479]
[318.18771362 -119.54357147]
[307.41809082 -109.06842041]
[295.32235718 -100.15736389]
[282.12585449 -92.97639465]
[268.07443237 -87.65930176]
[253.42987061 -84.30513763]
[238.46496582 -82.97638702]
[223.45852661 -83.69779968]
[208.69009399 -86.45594025]
[194.43481445 -91.19943237]
[187.80632019 -77.74346161]
[181.17782593 -64.28749847]
[174.54931641 -50.83153152]
[167.92082214 -37.37556839]
[174.56475830 -28.80917358]
[177.10491943 -17.96243858]
[174.83781433 -6.74979830]
[167.93174744 2.74273038]
[157.43983459 8.64528084]
[145.14472961 9.66983414]
[133.25697327 5.38281393]
[129.24922180 19.83750153]
[125.24148560 34.29219055]
[121.23374939 48.74687958]
[117.22600555 63.20156860]
[113.21826935 77.65625763]
[109.21052551 92.11094666]
[119.65760040 81.34717560]
[129.47377014 70.00509644]
[142.75431824 63.03178787]
[157.66427612 61.39074707]
[172.14356995 65.30871582]
[184.19157410 74.24434662]
[192.14364624 86.96301270]
[194.90104675 101.70739746]
[192.08279419 116.44026184]
[184.07829285 129.12600708]
[171.99349976 138.01182556]
[157.49816895 141.86997986]
[142.59510803 140.16740417]
[129.34500122 133.14056396]
[122.15361786 119.97682953]
[122.15361786 134.97683716]
[122.15361786 149.97683716]
[122.15361786 164.97683716]
[122.15361786 179.97683716]
[122.15361786 194.97683716]
[122.15361786 209.97683716]
[122.15361786 224.97683716]
[122.15361786 239.97683716]
[122.15361786 254.97683716]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[11 37]
[12 36]
[13 35]
[14 32]
[15 31]
[16 30]
[38 126]
[39 125]
[40 124]
[41 123]
[42 122]
[43 121]
[44 120]
[45 57]
[46 56]
[47 55]
[60 113]
[61 112]
[62 111]
[63 110]
[64 109]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
