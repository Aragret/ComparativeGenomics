%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:39 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGUCUAUCACCCUAUUAACCACUCACGGGAGCUCUCCAUGCAUUUGGUAUUUUCGUCUGGGGxxxxxxxxxxUUCAGCUUCCUACACUAUUAAAGUUUACCACAACCACCACCCCAUCAUACUCUUUCACCCCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[95.09568787 418.87902832]
[95.09568787 403.87902832]
[95.09568787 388.87902832]
[95.09568787 373.87902832]
[95.09568787 358.87902832]
[95.09568787 343.87902832]
[95.09568787 328.87902832]
[95.09568787 313.87902832]
[95.09568787 298.87902832]
[95.09568787 283.87902832]
[80.08138275 279.98358154]
[66.57007599 272.34204102]
[55.47881317 261.46646118]
[47.56209946 248.08869934]
[43.36054993 233.11097717]
[43.16397476 217.54524231]
[46.99141693 202.44467163]
[54.58944321 188.83241272]
[65.44894409 177.63237000]
[78.83923340 169.60635376]
[93.85720825 165.30236816]
[93.54515076 150.30561829]
[93.23309326 135.30885315]
[78.96900940 129.15824890]
[68.63113403 117.56418610]
[64.14941406 102.69110870]
[49.28636932 100.66877747]
[34.42332077 98.64644623]
[19.56027603 96.62410736]
[4.56027555 96.62410736]
[-10.30277157 98.64644623]
[-25.16581917 100.66877747]
[-37.79443359 111.13061523]
[-53.07272720 105.17193604]
[-55.28369522 88.92252350]
[-42.15288925 79.09836578]
[-27.18815231 85.80573273]
[-12.32510567 83.78339386]
[2.53794098 81.76106262]
[-10.84948540 74.99520874]
[-20.41505051 63.44098663]
[-24.56300163 49.02590942]
[-22.60136795 34.15472794]
[-14.85739517 21.30829239]
[-2.62295055 12.62967682]
[12.06098557 9.56666851]
[26.74480247 12.63024521]
[38.97891235 21.30933380]
[46.72238922 34.15606689]
[48.68344498 49.02732468]
[44.53493881 63.44224167]
[34.96892548 74.99609375]
[21.58260918 81.76106262]
[36.44565582 83.78339386]
[51.30870438 85.80573273]
[66.17175293 87.82806396]
[68.94559479 81.88563538]
[72.75273132 76.54594421]
[77.46649170 71.98665619]
[82.93003082 68.35947418]
[88.96155548 65.78510284]
[95.36036682 64.34918976]
[101.91355896 64.09951782]
[108.40307617 65.04438782]
[114.61299896 67.15236664]
[120.33668518 70.35331726]
[131.21549988 60.02611160]
[142.09432983 49.69890594]
[152.97315979 39.37170410]
[163.85198975 29.04449654]
[155.59088135 16.01902771]
[150.01712036 1.64200079]
[147.34106445 -13.53896141]
[147.66276550 -28.94598770]
[150.96818542 -43.99296188]
[157.12980652 -58.10780334]
[165.91156006 -70.75424194]
[176.97787476 -81.45217133]
[189.90647888 -89.79587555]
[204.20454407 -95.46944427]
[219.32740784 -98.25868988]
[234.69943237 -98.05927277]
[249.73577881 -94.88057709]
[263.86480713 -88.84529114]
[276.54965210 -80.18468475]
[287.21127319 -90.73596954]
[297.87289429 -101.28726196]
[308.53451538 -111.83855438]
[303.51974487 -126.25433350]
[305.26489258 -141.41735840]
[313.42346191 -154.31698608]
[326.37557983 -162.39199829]
[341.54956055 -164.03909302]
[355.93261719 -158.93122864]
[366.66900635 -148.08258057]
[371.62695312 -133.64715576]
[369.82211304 -118.49112701]
[361.61279297 -105.62372589]
[348.62899780 -97.59978485]
[333.44863892 -96.01246643]
[319.08581543 -101.17692566]
[308.42419434 -90.62563324]
[297.76257324 -80.07434845]
[287.10092163 -69.52305603]
[295.26879883 -57.41434097]
[301.06152344 -44.00164032]
[304.27835083 -29.74580956]
[304.80715942 -15.13698196]
[302.62820435 -0.67771280]
[297.81494141 13.13430309]
[290.53155518 25.82336617]
[281.02728271 36.95215225]
[269.62799072 46.13678741]
[256.72485352 53.06008911]
[242.76110840 57.48252106]
[228.21672058 59.25047302]
[213.59188843 58.30160141]
[199.38987732 54.66703415]
[186.09967041 48.47033691]
[174.17918396 39.92332077]
[163.30036926 50.25052643]
[152.42153931 60.57773209]
[141.54270935 70.90493774]
[130.66387939 81.23213959]
[135.83514404 102.88936615]
[127.26082611 123.43829346]
[108.22984314 134.99679565]
[108.54190063 149.99356079]
[108.85395813 164.99031067]
[123.01107788 168.28010559]
[135.95494080 174.87010193]
[146.92958069 184.37028503]
[155.29525757 196.22088623]
[160.56579590 209.72525024]
[162.43676758 224.09086609]
[160.80311584 238.47587585]
[155.76502991 252.03834534]
[147.62184143 263.98559570]
[136.85420227 273.62057495]
[124.09571075 280.38235474]
[110.09568787 283.87902832]
[110.09568787 298.87902832]
[110.09568787 313.87902832]
[110.09568787 328.87902832]
[110.09568787 343.87902832]
[110.09568787 358.87902832]
[110.09568787 373.87902832]
[110.09568787 388.87902832]
[110.09568787 403.87902832]
[110.09568787 418.87902832]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[21 129]
[22 128]
[23 127]
[26 56]
[27 55]
[28 54]
[29 53]
[30 39]
[31 38]
[32 37]
[66 124]
[67 123]
[68 122]
[69 121]
[70 120]
[85 104]
[86 103]
[87 102]
[88 101]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
