%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:03 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGUCGGCGCACUGCGAGCAGUAGCCCAAACAAUCUCAUAUGAAGUCACCCUAGCCAUCAUUCxxxxxxxxxxCUCAUUCAUCGACCUCCCCACCCCAUCCAACAUCUCCGCAUGAUGAAACUUCGGCUCACUCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[258.28573608 214.93873596]
[246.02337646 206.29962158]
[233.76101685 197.66049194]
[221.49864197 189.02137756]
[209.14706421 180.51029968]
[196.70762634 172.12814331]
[184.26818848 163.74600220]
[171.82875061 155.36386108]
[159.30278015 147.11157227]
[146.69166565 138.99003601]
[134.08053589 130.86848450]
[121.46940613 122.74694824]
[108.85827637 114.62540436]
[93.97499847 116.49301910]
[83.76151276 127.47868347]
[82.90623474 143.49891663]
[69.76467133 152.70103455]
[54.41790771 148.02593994]
[48.63866806 133.05998230]
[56.86029053 119.28375244]
[72.77584839 117.26520538]
[82.98933411 106.27954102]
[75.80682373 93.11095428]
[61.04076767 95.74981689]
[46.27471161 98.38868713]
[43.70147324 113.32703400]
[36.17150879 126.48284912]
[24.59410286 136.26750183]
[10.36727715 141.49945068]
[-4.79100609 141.54690552]
[-19.05031204 136.40414429]
[-30.68875885 126.69216919]
[-38.30094910 113.58376312]
[-40.96767044 98.66181946]
[-38.36690903 83.72824097]
[-30.81271362 70.58631897]
[-19.21729469 60.82302094]
[-4.98085165 55.61730194]
[10.17749310 55.59777832]
[24.42729759 60.76681137]
[36.04782486 70.50021362]
[43.63584518 83.62262726]
[58.40190125 80.98376465]
[73.16795349 78.34490204]
[79.99253082 83.77310181]
[86.79079437 89.23398590]
[93.56262207 94.72746277]
[88.95706177 80.45200348]
[84.35149384 66.17653656]
[79.74592590 51.90108109]
[75.14036560 37.62561798]
[60.23151779 39.61711502]
[45.20667648 38.91431427]
[30.54882812 35.53981781]
[16.72916031 29.60209084]
[4.19192028 21.29201317]
[-6.65987253 10.87671852]
[-15.47737789 -1.30898499]
[-21.97714996 -14.87337780]
[-25.95024681 -29.38041878]
[-27.26895142 -44.36376953]
[-25.89087105 -59.34177780]
[-21.86030769 -73.83295441]
[-15.30682468 -87.37148285]
[-6.44109011 -99.52214050]
[4.45189810 -109.89434052]
[17.02197647 -118.15466309]
[30.86506844 -124.03756714]
[45.53617859 -127.35395050]
[60.56368637 -127.99719238]
[75.46452332 -125.94661713]
[89.75968933 -121.26815033]
[102.98964691 -114.11218262]
[114.72911835 -104.70874786]
[124.60072327 -93.36013031]
[132.28713989 -80.43113708]
[137.54125977 -66.33737946]
[140.19419861 -51.53191757]
[140.16067505 -36.49068451]
[137.44177246 -21.69719505]
[132.12487793 -7.62699842]
[124.38091278 5.26760721]
[114.45882416 16.57211494]
[102.67755127 25.92312813]
[89.41582489 33.02005386]
[94.02139282 47.29551697]
[98.62695312 61.57097626]
[103.23252106 75.84643555]
[107.83808136 90.12189484]
[116.97982025 102.01427460]
[129.59094238 110.13581848]
[142.20207214 118.25736237]
[154.81320190 126.37890625]
[167.42433167 134.50044250]
[176.39672852 136.53710938]
[180.21089172 142.92442322]
[192.65032959 151.30656433]
[205.08976746 159.68870544]
[217.52922058 168.07084656]
[226.45729065 170.29373169]
[230.13775635 176.75901794]
[242.40013123 185.39813232]
[254.66249084 194.03724670]
[266.92486572 202.67636108]
[285.70440674 187.98150635]
[308.41683960 180.78851318]
[332.18930054 181.99156189]
[354.02035522 191.42382812]
[371.15887451 207.88038635]
[381.45080566 229.27221680]
[383.60983276 252.89128113]
[398.31781006 255.83676147]
[413.02575684 258.78225708]
[427.73373413 261.72772217]
[439.82806396 251.81506348]
[455.46392822 252.04730225]
[467.25851440 262.31478882]
[469.64282227 277.76956177]
[461.49099731 291.11428833]
[446.65213013 296.04803467]
[432.13265991 290.24124146]
[424.78823853 276.43569946]
[410.08026123 273.49020386]
[395.37231445 270.54470825]
[380.66436768 267.59924316]
[377.68676758 275.27273560]
[373.78604126 282.52285767]
[369.02114868 289.23907471]
[363.46426392 295.31887817]
[357.19952393 300.66943359]
[350.32205200 305.20889282]
[342.93621826 308.86782837]
[335.15423584 311.59008789]
[327.09439087 313.33383179]
[318.87927246 314.07202148]
[310.63385010 313.79293823]
[302.48361206 312.50042725]
[294.55273438 310.21362305]
[286.96203613 306.96688843]
[279.82720947 302.80923462]
[273.25711060 297.80349731]
[267.35202026 292.02554321]
[262.20211792 285.56289673]
[257.88619995 278.51370239]
[254.47032166 270.98492432]
[252.00691223 263.09103394]
[250.53392029 254.95196533]
[250.07423401 246.69155884]
[250.63531494 238.43548584]
[252.20910645 230.30944824]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 104]
[2 103]
[3 102]
[4 101]
[5 99]
[6 98]
[7 97]
[8 96]
[9 94]
[10 93]
[11 92]
[12 91]
[13 90]
[14 22]
[15 21]
[23 44]
[24 43]
[25 42]
[47 89]
[48 88]
[49 87]
[50 86]
[51 85]
[111 125]
[112 124]
[113 123]
[114 122]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
