%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:32 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGAGGGAUAACAGCGCAAUCCUAUUCUAGAGUCCAUAUCAACAAUAGGGUUUACGACCUCGAUGxxxxxxxxxxACUGCUAACUCAUGCCCCCAUGUCUAACAACAUGGCUUUCUCAACUUUUAAAGGAUAACAGCCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[106.47073364 287.19772339]
[106.47073364 272.19772339]
[106.47073364 257.19772339]
[106.47073364 242.19772339]
[106.47073364 227.19772339]
[106.47073364 212.19772339]
[106.47073364 197.19772339]
[106.47073364 182.19772339]
[106.47073364 167.19772339]
[106.47073364 152.19772339]
[102.71094513 137.67657471]
[95.43141174 124.56137085]
[79.13665771 99.05835724]
[66.40699768 91.12390137]
[50.60280228 90.39031982]
[43.89463043 77.09183502]
[31.16496658 69.15737152]
[15.36077690 68.42379761]
[8.65260410 55.12531281]
[-4.07706022 47.19084930]
[-16.80672455 39.25638962]
[-30.87300682 34.04681396]
[-45.70003128 31.77539635]
[-62.66289139 38.87057114]
[-75.94284821 27.43681717]
[-90.81285858 25.46636581]
[-105.68287659 23.49591446]
[-120.55288696 21.52546310]
[-135.42289734 19.55501175]
[-150.29292297 17.58456039]
[-165.16293335 15.61410809]
[-180.03294373 13.64365673]
[-194.90295410 11.67320538]
[-201.63928223 25.23420525]
[-212.41560364 35.87137604]
[-226.06301880 42.43088150]
[-241.10112000 44.20119095]
[-255.89871216 40.99028015]
[-268.85064697 33.14643860]
[-278.55203247 21.52050972]
[-283.95046997 7.37358761]
[-284.46044922 -7.75977468]
[-280.02658081 -22.23802376]
[-271.12988281 -34.49066925]
[-258.73535156 -43.18863297]
[-244.18750000 -47.38842392]
[-229.06433105 -46.63448715]
[-215.00630188 -41.00859451]
[-203.53833008 -31.12100983]
[-195.90437317 -18.04425812]
[-192.93251038 -3.19680905]
[-178.06248474 -1.22635770]
[-163.19247437 0.74409389]
[-148.32246399 2.71454549]
[-133.45245361 4.68499708]
[-118.58243561 6.65544844]
[-103.71242523 8.62590027]
[-88.84240723 10.59635162]
[-73.97239685 12.56680298]
[-64.14602661 5.44916344]
[-51.70845795 7.00860500]
[-43.42861557 16.94836998]
[-28.60158920 19.21978760]
[-40.14939499 9.64648342]
[-48.59677505 -2.74874926]
[-53.28385925 -16.99765205]
[-53.84450912 -31.98717117]
[-50.23493958 -46.54639435]
[-42.73710251 -59.53802490]
[-31.93670082 -69.94721985]
[-18.67740822 -76.96086121]
[-3.99497724 -80.03107452]
[10.96367073 -78.91802979]
[25.03003502 -73.70867920]
[37.10531998 -64.80994415]
[46.24626160 -52.91695404]
[51.73881531 -38.95873642]
[53.15392303 -24.02563667]
[50.38104630 -9.28415871]
[43.63679123 4.11416292]
[33.44798660 15.12271404]
[20.61052704 22.88156128]
[6.12722206 26.78461838]
[-8.87226391 26.52672768]
[3.85740018 34.46118546]
[16.58706474 42.39564896]
[31.48074341 42.56169891]
[39.09942627 56.42771149]
[51.82909012 64.36216736]
[66.72277069 64.52822113]
[74.34145355 78.39423370]
[87.07112122 86.32869720]
[78.43824768 74.06192780]
[79.12058258 59.07745361]
[88.83257294 47.64603424]
[103.50990295 44.55153275]
[117.01035309 51.08895111]
[123.68420410 64.52247620]
[120.73855591 79.23040771]
[109.40494537 89.05818176]
[123.67079163 84.42292786]
[137.93664551 79.78767395]
[152.20248413 75.15241241]
[166.46833801 70.51715851]
[180.73419189 65.88190460]
[187.68496704 51.68816757]
[202.66326904 46.64573288]
[216.78271484 53.74618912]
[221.66651917 68.77696228]
[214.41717529 82.82055664]
[199.33560181 87.54516602]
[185.36944580 80.14775085]
[171.10359192 84.78301239]
[156.83773804 89.41826630]
[142.57189941 94.05352020]
[128.30604553 98.68877411]
[114.04019928 103.32402802]
[108.54661560 117.28183746]
[115.82614136 130.39703369]
[116.31821442 115.40511322]
[120.19246674 100.91407776]
[127.24761200 87.67681885]
[137.11708069 76.38108826]
[149.28811646 67.61376953]
[163.12835693 61.83036423]
[177.91873169 59.33135986]
[192.89077759 60.24659348]
[207.26663208 64.52851105]
[220.29939270 71.95463562]
[231.31190491 82.13915253]
[239.73204041 94.55290985]
[245.12229919 108.55094910]
[247.20265198 123.40598297]
[245.86499023 138.34622192]
[241.17883301 152.59542847]
[233.38763428 165.41328430]
[222.89620972 176.13380432]
[210.24961853 184.20004272]
[196.10494995 189.19287109]
[181.19709778 190.85290527]
[166.30059814 189.09388733]
[152.18939209 184.00721741]
[139.59667969 175.85716248]
[129.17668152 165.06718445]
[121.47073364 152.19772339]
[121.47073364 167.19772339]
[121.47073364 182.19772339]
[121.47073364 197.19772339]
[121.47073364 212.19772339]
[121.47073364 227.19772339]
[121.47073364 242.19772339]
[121.47073364 257.19772339]
[121.47073364 272.19772339]
[121.47073364 287.19772339]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 154]
[2 153]
[3 152]
[4 151]
[5 150]
[6 149]
[7 148]
[8 147]
[9 146]
[10 145]
[11 119]
[12 118]
[13 92]
[14 91]
[16 89]
[17 88]
[19 86]
[20 85]
[21 84]
[22 63]
[23 62]
[25 59]
[26 58]
[27 57]
[28 56]
[29 55]
[30 54]
[31 53]
[32 52]
[33 51]
[100 117]
[101 116]
[102 115]
[103 114]
[104 113]
[105 112]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
