%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:16 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCUAACACCAGCCUAACCAGAUUUCAAAUUUUAUCUUUUGGCGGUAUGCACUUUUAACAGUxxxxxxxxxxAACAGCAGUGAUUAACCUUUAGCAAUAAACGAAAGUUUAACUAAGCUAUACUAACCCCAGCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[164.18536377 299.50009155]
[163.87330627 284.50332642]
[163.56124878 269.50656128]
[163.24919128 254.50981140]
[162.93713379 239.51306152]
[162.62509155 224.51631165]
[162.31303406 209.51956177]
[162.00097656 194.52279663]
[161.68891907 179.52604675]
[155.76895142 165.74366760]
[145.10733032 155.19238281]
[134.44569397 144.64108276]
[123.78407288 134.08979797]
[113.12244415 123.53850555]
[91.19380188 125.46980286]
[75.14107513 110.40643311]
[60.23917389 112.11911774]
[45.33727264 113.83181000]
[37.10679626 117.94412231]
[30.10797310 115.42179871]
[15.17366505 116.82410431]
[0.23935764 118.22640228]
[-12.77704048 127.21995544]
[-26.17190933 120.70637512]
[-41.10621643 122.10867310]
[-46.79837418 125.67334747]
[-52.56230927 125.76463318]
[-56.68892288 123.24539185]
[-71.66864014 124.02523804]
[-86.64835358 124.80508423]
[-101.62806702 125.58493042]
[-108.53402710 139.30364990]
[-121.38292694 147.71800232]
[-136.71847534 148.56459045]
[-150.41548157 141.61566162]
[-158.78952026 128.74044800]
[-159.58801270 113.40232849]
[-152.59619141 99.72717285]
[-139.69479370 91.39352417]
[-124.35424805 90.64310455]
[-110.70107269 97.67776489]
[-102.40791321 110.60521698]
[-87.42819977 109.82537079]
[-72.44848633 109.04552460]
[-57.46876907 108.26567841]
[-42.50852203 107.17436981]
[-27.57421303 105.77206421]
[-15.62601662 96.87881470]
[-1.16294599 103.29209900]
[13.77136135 101.88979340]
[28.70566940 100.48748779]
[43.62458038 98.92990875]
[58.52648544 97.21721649]
[73.42838287 95.50453186]
[75.94361115 81.07974243]
[86.48500061 68.51680756]
[83.99988556 53.72410202]
[81.51477051 38.93139267]
[66.47488403 38.06553268]
[52.00490189 33.87419128]
[38.83062744 26.56760788]
[27.61287308 16.51227379]
[18.91432190 4.21256065]
[13.17128468 -9.71458149]
[10.67183399 -24.57057190]
[11.54133797 -39.61024475]
[15.73618507 -54.07920837]
[23.04596329 -67.25171661]
[33.10401535 -78.46703339]
[45.40583420 -87.16260529]
[59.33436584 -92.90226746]
[74.19096375 -95.39811707]
[89.23042297 -94.52497101]
[103.69837189 -90.32661438]
[116.86911011 -83.01364899]
[128.08198547 -72.95288086]
[136.77458191 -60.64895248]
[142.51086426 -46.71902847]
[145.00311279 -31.86182785]
[144.12632751 -16.82258034]
[139.92446899 -2.35564733]
[132.60830688 10.81331444]
[122.54482269 22.02375603]
[110.23878479 30.71336555]
[96.30747223 36.44627380]
[98.79259491 51.23898315]
[101.27770996 66.03169250]
[115.77330780 69.88884735]
[125.28166962 58.28750992]
[125.13601685 42.24511719]
[137.67800903 32.24121475]
[153.28649902 35.94994354]
[159.98799133 50.52627945]
[152.64166260 64.78850555]
[136.88301086 67.79586792]
[127.37464905 79.39720917]
[130.72094727 91.69382477]
[129.18551636 103.43200684]
[123.67373657 112.87687683]
[134.33535767 123.42816925]
[144.99699402 133.97946167]
[155.65861511 144.53074646]
[166.32023621 155.08204651]
[172.40124512 149.77478027]
[181.24113464 146.97734070]
[191.70843506 147.90306091]
[206.70112610 147.43501282]
[221.69383240 146.96697998]
[236.68652344 146.49893188]
[251.67921448 146.03088379]
[265.32589722 136.93695068]
[279.90286255 144.44989014]
[280.41458130 160.84104919]
[266.33462524 169.24861145]
[252.14726257 161.02359009]
[237.15457153 161.49162292]
[222.16186523 161.95967102]
[207.16917419 162.42771912]
[192.17648315 162.89575195]
[205.55819702 169.67289734]
[218.93991089 176.45002747]
[232.32164001 183.22715759]
[245.70335388 190.00430298]
[260.66067505 191.13514709]
[274.34265137 197.28358459]
[285.11944580 207.71722412]
[291.70730591 221.19313049]
[293.32141113 236.10603333]
[289.76953125 250.67944336]
[281.47476196 263.17730713]
[269.42520142 272.11083984]
[255.05624390 276.41586304]
[240.07957458 275.57952881]
[226.27928162 269.70147705]
[215.29928589 259.48187256]
[208.44758606 246.13819885]
[206.54039001 231.25912476]
[199.07672119 218.24783325]
[191.61303711 205.23655701]
[184.14935303 192.22528076]
[176.68566895 179.21398926]
[176.99772644 194.21073914]
[177.30978394 209.20750427]
[177.62184143 224.20425415]
[177.93389893 239.20100403]
[178.24595642 254.19775391]
[178.55801392 269.19451904]
[178.87005615 284.19125366]
[179.18211365 299.18801880]
[181.77311707 318.39575195]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 149]
[2 148]
[3 147]
[4 146]
[5 145]
[6 144]
[7 143]
[8 142]
[9 141]
[10 103]
[11 102]
[12 101]
[13 100]
[14 99]
[16 54]
[17 53]
[18 52]
[20 51]
[21 50]
[22 49]
[24 47]
[25 46]
[28 45]
[29 44]
[30 43]
[31 42]
[56 87]
[57 86]
[58 85]
[88 96]
[89 95]
[106 119]
[107 118]
[108 117]
[109 116]
[110 115]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
