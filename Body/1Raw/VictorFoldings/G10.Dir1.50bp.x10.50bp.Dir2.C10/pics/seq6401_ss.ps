%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:00 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGAUCGGAGGCUUUGGCAACUGACUAGUUCCCCUAAUAAUCGGUGCCCCCGAUAUGGCGUUUCxxxxxxxxxxUUGUAGCCCACUUCCACUAUGUCCUAUCAAUAGGAGCUGUAUUUGCCAUCAUAGGAGGCUUCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[92.50000000 247.81016541]
[92.50000000 232.81016541]
[92.50000000 217.81016541]
[92.50000000 202.81016541]
[92.50000000 187.81016541]
[92.50000000 172.81016541]
[92.50000000 157.81016541]
[92.50000000 142.81016541]
[92.50000000 127.81017303]
[92.50000000 112.81017303]
[81.41486359 102.70473480]
[66.47885132 104.08876038]
[51.54283905 105.47278595]
[36.60682678 106.85681152]
[21.67081642 108.24083710]
[8.64342022 117.21845245]
[-4.74346733 110.68848419]
[-19.67947960 112.07250977]
[-34.61549377 113.45653534]
[-49.38760757 116.06125641]
[-63.89623260 119.86911774]
[-75.28016663 130.85623169]
[-89.55468750 126.60329437]
[-104.06330872 130.41116333]
[-116.80779266 143.66290283]
[-133.53764343 138.45167542]
[-147.96502686 142.55661011]
[-162.39241028 146.66156006]
[-176.81979370 150.76651001]
[-187.84112549 162.90991211]
[-203.80880737 159.17288208]
[-208.29664612 143.39976501]
[-196.68794250 131.81657410]
[-180.92472839 136.33912659]
[-166.49734497 132.23417664]
[-152.06996155 128.12922668]
[-137.64257812 124.02428436]
[-131.45538330 113.58489990]
[-119.42103577 110.07122040]
[-107.87117004 115.90253448]
[-93.36254120 112.09467316]
[-83.01636505 101.37992096]
[-67.70409393 105.36048889]
[-53.19546890 101.55262756]
[-66.38749695 94.41328430]
[-73.00619507 80.95249176]
[-70.60501862 66.14592743]
[-60.07153702 55.46670532]
[-45.29936600 52.86230850]
[-31.74890518 59.29542542]
[-24.42896652 72.38811493]
[-26.04530334 87.30077362]
[-35.99951935 98.52052307]
[-21.06350517 97.13649750]
[-6.12749243 95.75247192]
[5.83157921 86.87384796]
[20.28679085 93.30482483]
[35.22280121 91.92079926]
[50.15881729 90.53677368]
[65.09482574 89.15274811]
[80.03083801 87.76872253]
[105.82817078 81.32112122]
[116.59685516 70.87911224]
[127.36553192 60.43709946]
[138.13421631 49.99509048]
[148.90289307 39.55308151]
[159.67156982 29.11107254]
[170.00247192 18.23575783]
[155.65368652 22.60753250]
[140.65995789 22.17361832]
[126.58802032 16.97935295]
[114.90825653 7.56749582]
[106.84110260 -5.07849407]
[103.22951508 -19.63721848]
[104.45086670 -34.58740997]
[110.37754822 -48.36690521]
[120.39026642 -59.53586197]
[133.44276428 -66.92721558]
[148.17118835 -69.76863098]
[163.03652954 -67.76321411]
[176.48547363 -61.12049866]
[187.11274719 -50.53460693]
[193.80787659 -37.11166382]
[195.87126160 -22.25426292]
[193.08732605 -7.51487160]
[185.74725342 5.56597614]
[198.88888550 -1.66572654]
[212.03051758 -8.89742947]
[197.08166504 -10.13515949]
[183.69644165 -16.90537453]
[173.84118652 -28.21350479]
[168.96365356 -42.39834595]
[169.78039551 -57.37609482]
[176.17140198 -70.94646454]
[187.19783020 -81.11592102]
[201.23985291 -86.39054108]
[216.23464966 -85.99545288]
[229.97943115 -79.98870087]
[240.45503235 -69.25270081]
[246.12255859 -55.36460876]
[246.14942932 -40.36463165]
[240.53169250 -26.45632362]
[230.09519958 -15.68326378]
[244.74792480 -18.89225960]
[259.40066528 -22.10125732]
[274.05337524 -25.31025314]
[288.70611572 -28.51924896]
[300.45410156 -39.96113586]
[316.16143799 -35.24821091]
[319.66973877 -19.22873306]
[307.36999512 -8.38216305]
[291.91510010 -13.86652374]
[277.26235962 -10.65752792]
[262.60964966 -7.44853163]
[247.95692444 -4.23953533]
[233.30419922 -1.03053916]
[219.26222229 4.24420261]
[206.12059021 11.47590542]
[192.97895813 18.70760727]
[181.29275513 28.11146545]
[181.38185120 30.97207451]
[180.30760193 34.04050064]
[177.98486328 36.86035538]
[174.50003052 38.95307159]
[170.11357117 39.87974930]
[159.34489441 50.32176208]
[148.57621765 60.76377106]
[137.80754089 71.20578003]
[127.03886414 81.64778900]
[116.27017975 92.08979797]
[128.42594910 83.30131531]
[143.14710999 80.42253113]
[157.71804810 83.98448181]
[169.45088196 93.33010864]
[176.18124390 106.73541260]
[176.66758728 121.72752380]
[170.82019043 135.54084778]
[159.71772766 145.62724304]
[145.40827942 150.12608337]
[130.53149414 148.20744324]
[117.83168793 140.22526550]
[109.65160370 127.65203857]
[107.50000000 112.81017303]
[107.50000000 127.81017303]
[107.50000000 142.81016541]
[107.50000000 157.81016541]
[107.50000000 172.81016541]
[107.50000000 187.81016541]
[107.50000000 202.81016541]
[107.50000000 217.81016541]
[107.50000000 232.81016541]
[107.50000000 247.81016541]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 152]
[2 151]
[3 150]
[4 149]
[5 148]
[6 147]
[7 146]
[8 145]
[9 144]
[10 143]
[11 61]
[12 60]
[13 59]
[14 58]
[15 57]
[17 55]
[18 54]
[19 53]
[20 44]
[21 43]
[23 41]
[24 40]
[26 37]
[27 36]
[28 35]
[29 34]
[62 130]
[63 129]
[64 128]
[65 127]
[66 126]
[67 125]
[68 120]
[86 119]
[87 118]
[88 117]
[103 116]
[104 115]
[105 114]
[106 113]
[107 112]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
