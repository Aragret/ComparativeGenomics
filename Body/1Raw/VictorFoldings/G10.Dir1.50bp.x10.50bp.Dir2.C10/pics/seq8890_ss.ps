%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:10 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCUCCUCAUACUAGGCCUACUAACCAACACACUAACCAUAUACCAAUGAUGGCGCGAUGUAACxxxxxxxxxxUAAUAUUUCGCCCACUAAGCCAAUCACUUUAUUGACUCCUAGCCGCAGACCUCCUCAUUCUACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[116.73883057 469.26629639]
[116.73883057 454.26629639]
[116.73883057 439.26629639]
[116.73883057 424.26629639]
[116.73883057 409.26629639]
[116.73883057 394.26629639]
[116.73883057 379.26629639]
[116.73883057 364.26629639]
[116.73883057 349.26629639]
[116.73883057 334.26629639]
[97.64253235 329.65161133]
[80.47161102 320.08432007]
[66.48426056 306.25900269]
[56.70713425 289.18261719]
[51.85995865 270.10092163]
[52.30257416 250.40771484]
[58.00820541 231.54306030]
[68.56503296 214.88789368]
[83.20589447 201.66297913]
[100.86405945 192.83944702]
[97.54741669 178.21070862]
[94.23078156 163.58198547]
[90.91413879 148.95324707]
[87.59750366 134.32450867]
[82.89855957 148.56950378]
[75.20070648 161.44363403]
[64.87593079 172.32475281]
[52.42315674 180.68708801]
[38.44414902 186.12651062]
[23.61441612 188.38017273]
[8.65058041 187.33918762]
[-5.72425461 183.05386353]
[-18.81545067 175.73124695]
[-29.99039650 165.72521973]
[-38.70908356 153.51930237]
[-44.55019379 139.70330811]
[-47.23146820 124.94490051]
[-46.62333298 109.95723724]
[-42.75518417 95.46456909]
[-35.81393433 82.16723633]
[-26.13501549 70.70780182]
[-14.18613911 61.64003754]
[-0.54471809 55.40212250]
[14.13004971 52.29548645]
[29.12903214 52.47026062]
[43.72742844 55.91799164]
[57.21979141 62.47208405]
[68.95413208 71.81581116]
[78.36340332 83.49765778]
[84.99291992 96.95312500]
[88.52203369 111.52974701]
[84.42859650 95.28723145]
[96.84178162 84.04053497]
[101.04124451 69.64038086]
[105.24070740 55.24022675]
[108.70542145 40.64585114]
[111.42649841 25.89472389]
[114.14757538 11.14359760]
[116.86865234 -3.60752940]
[119.44010162 -18.38547325]
[121.86165619 -33.18872070]
[124.28321075 -47.99196243]
[125.64942932 -62.92961502]
[125.95343781 -77.92653656]
[126.25743866 -92.92345428]
[126.56143951 -107.92037201]
[112.03025818 -111.95713806]
[98.95991516 -119.48155975]
[88.17201996 -130.02062988]
[80.34471130 -142.91188049]
[75.97001648 -157.34492493]
[75.32294464 -172.41250610]
[78.44416046 -187.16746521]
[85.13746643 -200.68229675]
[94.98210907 -212.10743713]
[107.35925293 -220.72468567]
[121.49085999 -225.99237061]
[136.48860168 -227.57936096]
[151.40971375 -225.38587952]
[165.31623840 -219.54983521]
[177.33399963 -210.43806458]
[186.70753479 -198.62335205]
[192.84765625 -184.84838867]
[195.36834717 -169.97904968]
[194.11119080 -154.95007324]
[189.15518188 -140.70616150]
[180.81187439 -128.14271545]
[169.60574341 -118.04949188]
[156.24119568 -111.06093597]
[141.55836487 -107.61637115]
[141.25436401 -92.61945343]
[140.95034790 -77.62252808]
[140.64634705 -62.62561035]
[151.70664978 -72.75821686]
[166.68406677 -73.58117676]
[178.78793335 -64.72135925]
[182.53045654 -50.19574738]
[176.21481323 -36.59013748]
[162.70446777 -30.07320786]
[148.12489319 -33.59968948]
[139.08645630 -45.57040787]
[136.66490173 -30.76716232]
[134.24334717 -15.96391678]
[136.27920532 -8.81305027]
[131.61978149 -0.88645303]
[128.89869690 13.86467361]
[126.17762756 28.61580086]
[123.45655060 43.36692810]
[137.24031067 37.45019150]
[150.55714417 44.35395050]
[153.66604614 59.02824020]
[144.29290771 70.73910522]
[129.29400635 70.92026520]
[119.64086151 59.43968582]
[115.44139862 73.83984375]
[111.24193573 88.23999786]
[116.22517395 98.80728149]
[112.84076691 109.98966980]
[102.83412170 116.02018738]
[102.22623444 131.00787354]
[105.54287720 145.63659668]
[108.85951233 160.26533508]
[112.17615509 174.89407349]
[115.49279022 189.52281189]
[126.45268250 189.04911804]
[137.35708618 190.22253418]
[147.95991516 193.01576233]
[158.02204895 197.36494446]
[167.31663513 203.17112732]
[175.63429260 210.30253601]
[182.78781128 218.59756470]
[188.61628723 227.86839294]
[192.98889160 237.90528870]
[195.80763245 248.48136902]
[197.00968933 259.35763550]
[196.56874084 270.28845215]
[194.49559021 281.02713013]
[190.83784485 291.33139038]
[185.67884827 300.96887207]
[179.13578796 309.72241211]
[171.35705566 317.39486694]
[162.51882935 323.81369019]
[152.82112122 328.83456421]
[142.48324585 332.34490967]
[131.73883057 334.26629639]
[131.73883057 349.26629639]
[131.73883057 364.26629639]
[131.73883057 379.26629639]
[131.73883057 394.26629639]
[131.73883057 409.26629639]
[131.73883057 424.26629639]
[131.73883057 439.26629639]
[131.73883057 454.26629639]
[131.73883057 469.26629639]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 154]
[2 153]
[3 152]
[4 151]
[5 150]
[6 149]
[7 148]
[8 147]
[9 146]
[10 145]
[20 124]
[21 123]
[22 122]
[23 121]
[24 120]
[51 119]
[53 116]
[54 115]
[55 114]
[56 108]
[57 107]
[58 106]
[59 105]
[60 103]
[61 102]
[62 101]
[63 93]
[64 92]
[65 91]
[66 90]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
