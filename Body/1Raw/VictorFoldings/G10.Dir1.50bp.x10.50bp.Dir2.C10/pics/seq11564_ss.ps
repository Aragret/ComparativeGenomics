%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:53 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGUCCUCAUCCUAGCAAUAAUCCCCAUCCUCCAUAUAUCCAAACAACAAAGCAUAAUAUUUCGxxxxxxxxxxAAUAUUUCGCCCACUAAGCCAAUCACUUUAUUGACUCCUAGCCGCAGACCUCCUCAUUCUACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[120.44239044 298.74444580]
[119.82656860 283.75711060]
[119.21073914 268.76974487]
[118.59491730 253.78239441]
[117.97908783 238.79504395]
[117.36326599 223.80769348]
[116.74743652 208.82032776]
[116.13161469 193.83297729]
[113.83074188 179.01049805]
[109.87413025 164.54173279]
[105.91751862 150.07296753]
[101.96090698 135.60420227]
[88.23744202 133.66223145]
[76.29111481 126.63442230]
[67.92683411 115.58255768]
[64.40832520 102.17640686]
[66.26717377 88.44142914]
[73.22254181 76.45278168]
[84.22357178 68.02175140]
[80.56486511 53.47480011]
[76.90615845 38.92784500]
[73.24745178 24.38089180]
[68.99460602 9.99641132]
[64.15479279 -4.20134115]
[59.31497192 -18.39909363]
[54.47515869 -32.59684753]
[49.63534164 -46.79459763]
[44.79552460 -60.99235153]
[30.26182747 -57.25144577]
[15.48440933 -54.63406372]
[0.54999268 -53.15557098]
[-14.45378113 -52.82464218]
[-29.43886375 -53.64321899]
[-44.31731415 -55.60649490]
[-59.00181961 -58.70295334]
[-73.40620422 -62.91442108]
[-87.44593811 -68.21618652]
[-101.03862000 -74.57712555]
[-114.10449982 -81.95992279]
[-126.56688690 -90.32124329]
[-138.35264587 -99.61202240]
[-149.39262390 -109.77773285]
[-159.62202454 -120.75872803]
[-168.98080444 -132.49055481]
[-177.41406250 -144.90437317]
[-184.87231445 -157.92732239]
[-191.31176758 -171.48300171]
[-196.69464111 -185.49183655]
[-200.98934937 -199.87161255]
[-204.17068481 -214.53796387]
[-206.21998596 -229.40481567]
[-207.12521362 -244.38490295]
[-206.88107300 -259.39035034]
[-205.48898315 -274.33306885]
[-202.95712280 -289.12536621]
[-199.30033875 -303.68045044]
[-194.54008484 -317.91293335]
[-188.70433044 -331.73922729]
[-181.82728577 -345.07821655]
[-173.94932556 -357.85165405]
[-165.11668396 -369.98455811]
[-155.38117981 -381.40570068]
[-144.79995728 -392.04809570]
[-133.43511963 -401.84927368]
[-121.35334778 -410.75170898]
[-108.62554169 -418.70318604]
[-95.32640839 -425.65701294]
[-81.53397369 -431.57238770]
[-67.32920074 -436.41461182]
[-52.79542923 -440.15524292]
[-38.01796341 -442.77233887]
[-23.08351707 -444.25054932]
[-8.07973766 -444.58117676]
[6.90532923 -443.76232910]
[21.78374290 -441.79876709]
[36.46818924 -438.70202637]
[50.87249374 -434.49029541]
[64.91212463 -429.18826294]
[78.50469208 -422.82705688]
[91.57042694 -415.44403076]
[104.03265381 -407.08245850]
[115.81823730 -397.79147339]
[126.85802460 -387.62554932]
[137.08720398 -376.64434814]
[146.44577026 -364.91235352]
[154.87879944 -352.49835205]
[162.33679199 -339.47528076]
[168.77600098 -325.91946411]
[174.15859985 -311.91055298]
[178.45304871 -297.53067017]
[181.63410950 -282.86425781]
[183.68312073 -267.99737549]
[184.58807373 -253.01727295]
[184.34364319 -238.01184082]
[182.95126343 -223.06913757]
[180.41911316 -208.27688599]
[176.76205444 -193.72186279]
[172.00154114 -179.48948669]
[166.16551208 -165.66329956]
[159.28822327 -152.32443237]
[151.41001892 -139.55114746]
[142.57714844 -127.41841888]
[132.84143066 -115.99745178]
[122.26000977 -105.35525513]
[110.89498138 -95.55429077]
[98.81304169 -86.65207672]
[86.08509064 -78.70085144]
[72.78582001 -71.74728394]
[58.99327850 -65.83216858]
[63.83309174 -51.63441467]
[68.67291260 -37.43666458]
[73.51272583 -23.23891068]
[78.35253906 -9.04115772]
[83.19235992 5.15659475]
[85.71427155 6.50973463]
[87.83448029 8.97427082]
[89.11518097 12.39575577]
[89.18510437 16.46007156]
[87.79441071 20.72218704]
[91.45310974 35.26914215]
[95.11181641 49.81609344]
[98.77052307 64.36305237]
[114.37872314 67.36940002]
[127.12979889 76.85960388]
[134.49005127 90.94792175]
[134.99696350 106.83493042]
[128.54981995 121.36380005]
[116.42967224 131.64758301]
[120.38628387 146.11634827]
[124.34289551 160.58511353]
[128.29949951 175.05389404]
[133.80474854 161.10066223]
[145.08050537 151.20838928]
[159.63157654 147.56610107]
[174.23796082 150.97981262]
[185.66743469 160.69409180]
[191.39074707 174.55929565]
[190.14140320 189.50717163]
[182.19587708 202.22993469]
[169.31240845 209.91215515]
[154.34201050 210.85383606]
[140.59742737 204.84661865]
[131.11897278 193.21714783]
[131.73478699 208.20451355]
[132.35061646 223.19186401]
[132.96644592 238.17921448]
[133.58227539 253.16656494]
[134.19808960 268.15393066]
[134.81391907 283.14126587]
[135.42974854 298.12863159]
[142.12126160 313.70617676]
[129.00489807 324.44848633]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 131]
[10 130]
[11 129]
[12 128]
[19 122]
[20 121]
[21 120]
[22 119]
[23 114]
[24 113]
[25 112]
[26 111]
[27 110]
[28 109]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
