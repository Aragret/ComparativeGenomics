%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:36 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGAAACAACCGAAACCAAAUAAUUCAAGCACUGCUUAUUACAAUUUUACUGGGUCUCUAUUUxxxxxxxxxxGUGCCUAGACCAAGAAGUUAUUAUCUCGAACUGACACUGAGCCACAACCCAAACAACCCACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[194.63354492 437.13894653]
[194.63354492 422.13894653]
[194.63354492 407.13894653]
[194.63354492 392.13894653]
[194.63354492 377.13894653]
[194.63354492 362.13894653]
[194.63354492 347.13894653]
[194.63354492 332.13894653]
[194.63354492 317.13894653]
[194.63354492 302.13894653]
[173.22306824 291.23931885]
[162.07322693 271.42660522]
[163.68759155 250.04278564]
[176.10932922 234.16996765]
[168.92683411 221.00137329]
[152.62815857 216.97506714]
[144.08927917 202.13014221]
[148.99256897 185.37022400]
[141.53765869 172.35391235]
[134.08274841 159.33760071]
[125.83045959 146.81164551]
[116.81292725 134.82481384]
[107.79539490 122.83797455]
[88.44490051 121.18539429]
[76.57844543 105.81138611]
[61.61819839 104.72007751]
[46.65794754 103.62876892]
[31.69770050 102.53745270]
[16.71068382 101.91348267]
[1.71149552 101.75744629]
[-13.28769302 101.60140228]
[-19.31922913 104.55574036]
[-25.06148529 104.04801178]
[-28.90419769 101.11389160]
[-43.88391113 100.33404541]
[-58.86362457 99.55419922]
[-73.84333801 98.77435303]
[-89.97540283 103.98904419]
[-99.45209503 89.93100739]
[-88.56685638 76.93300629]
[-73.06349182 83.79463959]
[-58.08378220 84.57448578]
[-43.10406494 85.35433197]
[-28.12435150 86.13417816]
[-13.13165665 86.60221863]
[1.86753213 86.75825500]
[16.86672020 86.91429138]
[19.65822792 84.66152191]
[23.70129585 83.68413544]
[28.36778831 84.56517029]
[32.78900909 87.57720947]
[47.74925995 88.66851807]
[62.70950699 89.75982666]
[77.66975403 90.85114288]
[81.19773865 84.87332153]
[86.28134918 80.14704132]
[92.50000000 77.06331635]
[92.50000000 62.06331635]
[84.76270294 48.26314545]
[92.50000000 35.53587341]
[92.50000000 20.53587341]
[92.50000000 5.53587294]
[92.50000000 -9.46412659]
[92.50000000 -24.46412659]
[77.92288208 -28.35899734]
[64.85101318 -35.89482880]
[54.17566681 -46.55781937]
[46.62469864 -59.62094498]
[42.71294785 -74.19354248]
[42.70711899 -89.28202820]
[46.60762024 -103.85764313]
[54.14849854 -116.92659760]
[64.81560516 -127.59782410]
[77.88165283 -135.14375305]
[92.45575714 -139.04988098]
[107.54424286 -139.04988098]
[122.11834717 -135.14375305]
[135.18438721 -127.59782410]
[145.85150146 -116.92659760]
[153.39237976 -103.85764313]
[157.29287720 -89.28202820]
[157.28704834 -74.19354248]
[153.37530518 -59.62094498]
[145.82432556 -46.55781937]
[135.14898682 -35.89482880]
[122.07711792 -28.35899734]
[107.50000000 -24.46412659]
[107.50000000 -9.46412659]
[107.50000000 5.53587294]
[107.50000000 20.53587341]
[107.50000000 35.53587341]
[115.23729706 48.26314545]
[107.50000000 62.06331635]
[107.50000000 77.06331635]
[119.45290375 85.71973419]
[124.13009644 99.71720123]
[119.78223419 113.82044983]
[128.79975891 125.80728149]
[137.81729126 137.79411316]
[141.40196228 123.22873688]
[154.13526917 115.30014038]
[168.78785706 118.50981903]
[177.04063416 131.03546143]
[174.20805359 145.76557922]
[161.89834595 154.33709717]
[147.09906006 151.88269043]
[154.55397034 164.89900208]
[162.00888062 177.91531372]
[175.36396790 179.93991089]
[184.96006775 189.16720581]
[187.43260193 202.04978943]
[182.09541321 213.81886292]
[189.27792358 226.98745728]
[203.73825073 224.30015564]
[218.73472595 228.07038879]
[231.38882446 238.21565247]
[239.01565552 253.38087463]
[239.67820740 271.10006714]
[253.69491577 276.44158936]
[268.86419678 271.21926880]
[282.32723999 279.94430542]
[283.75634766 295.92358398]
[272.05523682 306.89916992]
[256.19998169 304.45153809]
[248.35340881 290.45828247]
[234.33668518 285.11679077]
[228.16090393 289.37231445]
[237.90087891 300.77990723]
[247.64083862 312.18750000]
[257.38079834 323.59509277]
[271.37496948 328.99536133]
[278.29086304 342.30590820]
[274.66513062 356.86111450]
[262.31347656 365.37210083]
[247.42129517 363.57672119]
[237.44627380 352.37411499]
[237.38348389 337.37463379]
[230.19209290 324.21087646]
[223.00071716 311.04714966]
[215.80932617 297.88342285]
[209.63354492 302.13894653]
[209.63354492 317.13894653]
[209.63354492 332.13894653]
[209.63354492 347.13894653]
[209.63354492 362.13894653]
[209.63354492 377.13894653]
[209.63354492 392.13894653]
[209.63354492 407.13894653]
[209.63354492 422.13894653]
[209.63354492 437.13894653]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[14 113]
[15 112]
[18 108]
[19 107]
[20 106]
[21 99]
[22 98]
[23 97]
[25 54]
[26 53]
[27 52]
[28 51]
[29 47]
[30 46]
[31 45]
[34 44]
[35 43]
[36 42]
[37 41]
[57 94]
[58 93]
[60 91]
[61 90]
[62 89]
[63 88]
[64 87]
[118 126]
[119 125]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
