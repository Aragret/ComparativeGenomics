%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:37 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGAGCACACCCGUCUAUGUAGCAAAAUAGUGGGAAGAUUUAUAGGUAGAGGCGACAAACCUAxxxxxxxxxxAUUAAAAAAACUAUUAAACCCAUAUAACCUCCCCCAAAAUUCAGAAUAAUAACACACCCGCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[92.50000000 250.06349182]
[92.50000000 235.06349182]
[92.50000000 220.06349182]
[92.50000000 205.06349182]
[92.50000000 190.06349182]
[92.50000000 175.06349182]
[92.50000000 160.06349182]
[92.50000000 145.06349182]
[92.50000000 130.06349182]
[92.50000000 115.06349182]
[85.70452118 111.88992310]
[65.31809998 102.36923218]
[53.81629562 111.99775696]
[42.41527557 121.74540710]
[31.11626816 131.61112976]
[19.81726456 141.47685242]
[21.33768463 156.91926575]
[13.46188641 170.28906250]
[-0.78172785 176.44528198]
[-15.91619682 173.02073669]
[-26.12200737 161.33224487]
[-27.47481918 145.87425232]
[-19.45444679 132.59068298]
[-5.14488697 126.58933258]
[9.95154095 130.17785645]
[21.25054550 120.31212616]
[32.54954910 110.44640350]
[35.53877258 103.63390350]
[44.18776703 100.49595642]
[55.68957138 90.86742401]
[69.35697937 85.86255646]
[82.43809509 86.33456421]
[93.23126984 91.63881683]
[94.16690063 76.66802979]
[95.10253143 61.69723511]
[84.92362213 49.90623856]
[86.08574677 34.73705673]
[97.38938904 25.10568619]
[98.32501984 10.13489437]
[99.26064301 -4.83589697]
[100.19627380 -19.80668831]
[91.61082458 -36.06307220]
[101.80360413 -50.31464386]
[102.42757416 -65.30165863]
[94.26492310 -75.34281921]
[95.13127136 -87.85155487]
[104.01306915 -96.12324524]
[104.94869995 -111.09403992]
[105.88433075 -126.06482697]
[106.81995392 -141.03561401]
[107.75558472 -156.00640869]
[108.37956238 -170.99342346]
[108.69161987 -185.99018860]
[109.00367737 -200.98693848]
[97.35865021 -199.00598145]
[84.08383179 -204.07240295]
[72.92958069 -216.73094177]
[65.47467041 -229.74725342]
[58.01976013 -242.76356506]
[42.59824753 -245.35412598]
[32.48925400 -257.28485107]
[32.46593475 -272.92242432]
[42.53930283 -284.88323975]
[57.95301819 -287.51977539]
[71.42919922 -279.58715820]
[76.60480499 -264.83090210]
[71.03607178 -250.21847534]
[78.49098206 -237.20216370]
[85.94589233 -224.18585205]
[93.44223785 -223.95182800]
[93.14028931 -238.94879150]
[92.83834076 -253.94575500]
[92.53639221 -268.94271851]
[87.03324127 -282.89675903]
[95.66522980 -295.16415405]
[110.65792847 -294.69622803]
[118.50813293 -281.91442871]
[112.14533234 -268.33056641]
[110.90853119 -253.38163757]
[109.67173004 -238.43270874]
[108.43493652 -223.48377991]
[115.93128204 -223.24977112]
[124.18357086 -235.77572632]
[132.43586731 -248.30169678]
[140.68815613 -260.82763672]
[135.09706116 -275.30242920]
[139.11436462 -290.29046631]
[151.19532776 -300.02853394]
[166.69458008 -300.77215576]
[179.65232849 -292.23538208]
[185.08605957 -277.70080566]
[180.90640259 -262.75723267]
[168.72052002 -253.15080261]
[153.21411133 -252.57536316]
[144.96182251 -240.04939270]
[136.70953369 -227.52343750]
[128.45724487 -214.99748230]
[124.00042725 -200.67488098]
[123.68836975 -185.67813110]
[123.37631989 -170.68136597]
[126.02309418 -166.63537598]
[126.11170197 -160.87139893]
[122.72637939 -155.07078552]
[121.79074860 -140.09999084]
[120.85511780 -125.12920380]
[119.91949463 -110.15840912]
[118.98386383 -95.18761444]
[127.64167023 -79.95468140]
[117.41459656 -64.67768097]
[116.79061890 -49.69066620]
[124.76548004 -40.54141235]
[124.32825470 -28.01033974]
[115.16706848 -18.87105942]
[114.23143768 -3.90026832]
[113.29580688 11.07052326]
[112.36017609 26.04131508]
[122.37668610 37.00512695]
[121.64109039 52.20096588]
[110.07331848 62.63286209]
[109.13769531 77.60365295]
[108.20206451 92.57444763]
[114.00717163 78.74329376]
[123.54978180 67.17011261]
[136.02120972 58.83563614]
[150.36459351 54.44617462]
[165.36441040 54.37369537]
[179.74954224 58.62434006]
[192.30093384 66.83790588]
[201.95494080 78.31832886]
[207.89344788 92.09273529]
[209.61318970 106.99382782]
[206.96844482 121.75882721]
[200.18334961 135.13650513]
[189.83287048 145.99319458]
[176.79415894 153.40885925]
[162.17216492 156.75506592]
[147.20599365 155.74824524]
[133.16392517 150.47372437]
[121.23596191 141.37847900]
[112.43289185 129.23326111]
[107.50000000 115.06349182]
[107.50000000 130.06349182]
[107.50000000 145.06349182]
[107.50000000 160.06349182]
[107.50000000 175.06349182]
[107.50000000 190.06349182]
[107.50000000 205.06349182]
[107.50000000 220.06349182]
[107.50000000 235.06349182]
[107.50000000 250.06349182]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[12 30]
[13 29]
[14 27]
[15 26]
[16 25]
[33 121]
[34 120]
[35 119]
[38 116]
[39 115]
[40 114]
[41 113]
[43 110]
[44 109]
[47 107]
[48 106]
[49 105]
[50 104]
[51 103]
[52 100]
[53 99]
[54 98]
[57 69]
[58 68]
[59 67]
[82 97]
[83 96]
[84 95]
[85 94]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
