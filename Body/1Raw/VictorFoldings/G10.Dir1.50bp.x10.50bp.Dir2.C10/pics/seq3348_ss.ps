%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:48 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGUUCUAAUCGCAAUGGCAUUCCUAAUGCUUACCGAACGAAAAAUUCUAGGCUAUAUACAACxxxxxxxxxxAGAAGCUGCCAUCAAGUAUUUCCUCACGCAAGCAACCGCAUCCAUAAUCCUUCUAAUAGCCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[111.07070160 588.89990234]
[111.07070160 573.89990234]
[111.07070160 558.89990234]
[111.07070160 543.89990234]
[111.07070160 528.89990234]
[111.07070160 513.89990234]
[111.07070160 498.89990234]
[111.07070160 483.89990234]
[111.07070160 468.89990234]
[111.07070160 453.89990234]
[94.74423218 450.19940186]
[79.73749542 442.76254272]
[66.89257050 432.00247192]
[56.93116760 418.51901245]
[50.41412735 403.06509399]
[47.70981598 386.50476074]
[48.97330856 369.76486206]
[54.13751221 353.78317261]
[62.91670609 339.45587158]
[74.82236481 327.58724976]
[89.19030762 318.84460449]
[105.21779633 313.72067261]
[103.97092438 298.77258301]
[102.72405243 283.82449341]
[101.47717285 268.87640381]
[88.25411224 265.99008179]
[76.37224579 259.47409058]
[66.80615234 249.85198975]
[60.34355545 237.90261841]
[57.52044296 224.59693909]
[58.57661438 211.01919556]
[63.43535614 198.27859497]
[71.70893097 187.41864014]
[82.72949219 179.33169556]
[95.60300446 174.68565369]
[94.97902679 159.69863892]
[94.35504913 144.71160889]
[93.73107147 129.72459412]
[93.10709381 114.73758698]
[85.00545502 106.31444550]
[84.64079285 94.63314056]
[92.20125580 85.72106171]
[91.88919830 70.72430420]
[77.88943481 61.28720856]
[72.30588531 45.52949905]
[77.14362335 29.70034409]
[90.31572723 19.95349503]
[89.69174957 4.96647930]
[89.06777191 -10.02053738]
[88.44379425 -25.00755310]
[73.26026154 -29.73428154]
[60.62741089 -39.34895325]
[52.05523300 -52.67933655]
[48.56047821 -68.11047363]
[50.54609299 -83.78032684]
[57.75483704 -97.80443573]
[69.30245972 -108.50258636]
[83.78611755 -114.60006714]
[82.85049438 -129.57086182]
[81.91486359 -144.54165649]
[67.03237915 -146.84941101]
[52.99410248 -152.30293274]
[40.45663071 -160.64714050]
[30.00635910 -171.49176025]
[22.13207054 -184.32958984]
[17.20205879 -198.56015015]
[15.44690895 -213.51788330]
[16.94871140 -228.50315857]
[21.63722610 -242.81510925]
[29.29316330 -255.78433228]
[39.55843735 -266.80422974]
[51.95292664 -275.35937500]
[65.89691162 -281.04965210]
[80.73822021 -283.60891724]
[95.78268433 -282.91741943]
[110.32665253 -279.00756836]
[123.68988037 -272.06219482]
[135.24732971 -262.40612793]
[144.45846558 -250.49105835]
[150.89244080 -236.87422180]
[154.24833679 -222.19253540]
[154.36920166 -207.13267517]
[151.24935913 -192.39901733]
[145.03474426 -178.68067932]
[136.01603699 -166.61930847]
[124.61503601 -156.77902222]
[111.36499786 -149.62005615]
[96.88565826 -145.47727966]
[97.82128143 -130.50648499]
[98.75691223 -115.53569794]
[112.48132324 -111.93409729]
[124.43550873 -104.25041199]
[133.43861389 -93.22784424]
[138.59638977 -79.94017029]
[139.39007568 -65.68716431]
[135.72845459 -51.86744690]
[127.95816803 -39.84123611]
[116.83092499 -30.79648399]
[103.43080902 -25.63153076]
[104.05478668 -10.64451408]
[104.67876434 4.34250164]
[105.30274200 19.32951736]
[117.08657837 25.68066788]
[124.23682404 37.12555695]
[124.78607941 50.71779251]
[118.48290253 62.89494705]
[106.88595581 70.41224670]
[107.19801331 85.40900421]
[116.26194000 99.49233246]
[108.09410858 114.11360931]
[108.71808624 129.10061646]
[109.34206390 144.08764648]
[109.96604156 159.07466125]
[110.59001923 174.06167603]
[126.46082306 178.86488342]
[139.72206116 188.77679443]
[148.79452515 202.59530640]
[152.60525513 218.65441895]
[150.71441650 235.02508545]
[143.36596680 249.74694824]
[131.45637512 261.06304932]
[116.42526245 267.62954712]
[117.67213440 282.57763672]
[118.91901398 297.52572632]
[120.16588593 312.47381592]
[133.44248962 314.05355835]
[146.18421936 318.08929443]
[157.94114685 324.43670654]
[168.29838562 332.86984253]
[176.89089966 343.08914185]
[183.41619873 354.73223877]
[187.64514160 367.38659668]
[189.42982483 380.60430908]
[188.70890808 393.91775513]
[185.50962830 406.85641479]
[179.94676208 418.96319580]
[172.21858215 429.81082153]
[162.59974670 439.01678467]
[151.43154907 446.25683594]
[139.10975647 451.27648926]
[126.07070160 453.89990234]
[126.07070160 468.89990234]
[126.07070160 483.89990234]
[126.07070160 498.89990234]
[126.07070160 513.89990234]
[126.07070160 528.89990234]
[126.07070160 543.89990234]
[126.07070160 558.89990234]
[126.07070160 573.89990234]
[126.07070160 588.89990234]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[22 125]
[23 124]
[24 123]
[25 122]
[35 114]
[36 113]
[37 112]
[38 111]
[39 110]
[42 108]
[43 107]
[47 102]
[48 101]
[49 100]
[50 99]
[58 90]
[59 89]
[60 88]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
