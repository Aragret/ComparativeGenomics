%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:56 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGGUACCUAACAAACCCACAGGUCCUAAACUACCAAACCUGCAUUAAAAAUUUCGGUUGGGGCGAxxxxxxxxxxACAUCAAGCCCGAAUGAUAUUUCCUAUUCGCCUACACAAUUCUCCGAUCCGUCCCUAACAAACCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[85.65640259 426.68078613]
[88.23212433 407.47100830]
[88.53225708 392.47402954]
[88.83238983 377.47702026]
[89.13252258 362.48001099]
[89.43265533 347.48303223]
[89.73278809 332.48602295]
[90.03292084 317.48904419]
[90.33305359 302.49203491]
[90.63317871 287.49502563]
[90.93331146 272.49804688]
[75.91255951 269.27163696]
[61.79991531 263.18820190]
[49.13329315 254.47760010]
[38.39587402 243.46997070]
[29.99766922 230.58303833]
[24.25987053 216.30638123]
[21.40255737 201.18275452]
[21.53626251 185.78753662]
[24.65769958 170.70674133]
[30.64981270 156.51480103]
[39.28616714 143.75265503]
[50.23950577 132.90707397]
[63.09415436 124.39220428]
[77.36179352 118.53365326]
[92.50000000 115.55610657]
[81.63144684 105.21809387]
[66.65020752 105.96816254]
[51.66897583 106.71822357]
[36.68774033 107.46829224]
[21.70650482 108.21836090]
[16.25515556 122.43816376]
[5.48679590 133.20674133]
[-8.73289204 138.65838623]
[-23.94025993 137.84854126]
[-37.50054169 130.91755676]
[-47.06433487 119.06623840]
[-50.97465515 104.34790802]
[-48.55401230 89.31259918]
[-40.22180557 76.56527710]
[-27.42163086 68.31449127]
[-12.37120247 65.98973846]
[2.32190514 69.99379730]
[14.11202145 79.63294220]
[20.95643806 93.23712921]
[35.93767166 92.48706055]
[50.91890717 91.73699188]
[65.90013885 90.98692322]
[80.88137817 90.23685455]
[83.02707672 83.05034637]
[89.46417236 61.49080276]
[77.34658051 52.64975739]
[65.22899628 43.80871582]
[48.86979294 39.35755539]
[48.61832428 22.40547180]
[64.83829498 17.47102547]
[74.07003784 31.69112587]
[86.18762970 40.53216934]
[98.30521393 49.37321472]
[101.04842377 70.65885162]
[100.84440613 91.97972870]
[110.28032684 80.31938934]
[119.71623993 68.65905762]
[129.15216064 56.99871826]
[138.11399841 44.97018814]
[146.58740234 32.59273529]
[155.06080627 20.21527863]
[163.15893555 7.58910370]
[170.87449646 -5.27441359]
[178.59005737 -18.13793182]
[186.30563354 -31.00144768]
[194.02119446 -43.86496735]
[201.73675537 -56.72848511]
[191.06454468 -67.36753845]
[183.25357056 -80.24391174]
[178.75416565 -94.60687256]
[177.82373047 -109.62021637]
[180.51200867 -124.41097260]
[186.65847778 -138.12016296]
[195.90187073 -149.95265198]
[207.70147705 -159.22331238]
[221.36871338 -165.39668274]
[236.10733032 -168.11785889]
[251.05982971 -167.23294067]
[265.35726929 -162.79768372]
[273.07284546 -175.66119385]
[280.78839111 -188.52471924]
[273.85678101 -202.30717468]
[275.49960327 -217.64682007]
[285.19268799 -229.64881897]
[299.84295654 -234.48338318]
[314.77560425 -230.60781860]
[325.22564697 -219.25880432]
[327.85852051 -204.05776978]
[321.83410645 -189.85530090]
[309.07473755 -181.18338013]
[293.65191650 -180.80915833]
[285.93634033 -167.94563293]
[278.22079468 -155.08212280]
[288.86550903 -144.55700684]
[296.68652344 -131.78234863]
[301.22546387 -117.49844360]
[302.21438599 -102.53428650]
[299.59143066 -87.75943756]
[293.50482178 -74.03349304]
[284.30441284 -62.15608597]
[272.52151489 -52.82028198]
[258.83843994 -46.57217026]
[244.04867554 -43.77888870]
[229.01116943 -44.60707092]
[214.60026550 -49.01292038]
[206.88470459 -36.14940262]
[199.16914368 -23.28588486]
[191.45358276 -10.42236710]
[183.73802185 2.44114995]
[176.02246094 15.30466747]
[176.55039978 18.84437943]
[175.35440063 22.81648254]
[172.25010681 26.39128876]
[167.43826294 28.68868256]
[158.96485901 41.06613922]
[150.49145508 53.44359589]
[150.91357422 56.26875687]
[150.21009827 59.43527985]
[148.24363708 62.50324631]
[145.04293823 64.99082947]
[140.81250000 66.43463898]
[131.37658691 78.09497070]
[121.94066620 89.75531006]
[112.50474548 101.41564941]
[107.50000000 115.55610657]
[121.90181732 118.31594086]
[135.54261780 123.68591309]
[147.95388794 131.47994995]
[158.70968628 141.42877197]
[167.44116211 153.18911743]
[173.84933472 166.35571289]
[177.71519470 180.47512817]
[178.90728760 195.06144714]
[177.38615417 209.61299133]
[173.20559692 223.62951660]
[166.51084900 236.62950134]
[157.53347778 248.16662598]
[146.58335876 257.84509277]
[134.03805542 265.33325195]
[120.32974243 270.37493896]
[105.93031311 272.79818726]
[105.63018036 287.79516602]
[105.33004761 302.79217529]
[105.02991486 317.78915405]
[104.72978210 332.78616333]
[104.42964935 347.78317261]
[104.12951660 362.78015137]
[103.82938385 377.77716064]
[103.52925110 392.77413940]
[103.22912598 407.77114868]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 156]
[3 155]
[4 154]
[5 153]
[6 152]
[7 151]
[8 150]
[9 149]
[10 148]
[11 147]
[26 131]
[27 49]
[28 48]
[29 47]
[30 46]
[31 45]
[51 59]
[52 58]
[53 57]
[61 130]
[62 129]
[63 128]
[64 127]
[65 122]
[66 121]
[67 120]
[68 116]
[69 115]
[70 114]
[71 113]
[72 112]
[73 111]
[85 99]
[86 98]
[87 97]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
