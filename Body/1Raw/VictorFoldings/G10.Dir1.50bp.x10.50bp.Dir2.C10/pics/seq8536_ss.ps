%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:25 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGGCCCUAGCCCACUUCUUACCACAAGGCACACCUACACCCCUUAUCCCCAUACUAGUUAUUxxxxxxxxxxUCUACCUAAAACUCACAGCCCUCGCUGUCACUUUCCUAGGACUUCUAACAGCCCUAGACCCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[206.49464417 67.46448517]
[192.36984253 72.51323700]
[178.24504089 77.56199646]
[164.12023926 82.61075592]
[150.21768188 88.24270630]
[136.56143188 94.44812012]
[122.90519714 100.65352631]
[109.24895477 106.85893250]
[97.74714661 116.48745728]
[89.23606110 128.83903503]
[80.72496796 141.19059753]
[72.21388245 153.54217529]
[71.44745636 169.92340088]
[56.75547409 177.20884705]
[43.25178909 167.90388489]
[44.82783508 151.58064270]
[59.86230850 145.03108215]
[68.37339783 132.67951965]
[76.88449097 120.32794189]
[85.39557648 107.97636414]
[82.01152039 101.28322601]
[68.62523651 108.05133820]
[55.23895264 114.81945801]
[41.85266495 121.58757019]
[28.46638107 128.35568237]
[17.82671356 138.92912292]
[4.48295450 132.07754517]
[6.87576771 117.26962280]
[21.69826698 114.96939850]
[35.08455276 108.20128632]
[48.47083664 101.43316650]
[61.85712051 94.66505432]
[75.24340820 87.89694214]
[71.85935211 81.20379639]
[56.86665344 80.73575592]
[41.87395477 80.26771545]
[27.68660164 88.49273682]
[13.60664940 80.08518219]
[14.11834908 63.69401550]
[28.69530678 56.18107224]
[42.34199905 65.27501678]
[57.33469391 65.74305725]
[72.32739258 66.21109772]
[86.21972656 68.24318695]
[96.62023926 74.66337585]
[102.37149048 83.66694641]
[103.04354858 93.20269012]
[116.69979095 86.99728394]
[130.35603333 80.79187775]
[144.01226807 74.58647156]
[146.48184204 70.83644104]
[149.70915222 68.35540009]
[153.18840027 67.22550964]
[156.44079590 67.35153961]
[159.07147217 68.48594666]
[173.19627380 63.43719482]
[187.32107544 58.38843918]
[201.44589233 53.33967972]
[197.73782349 37.98169708]
[195.71754456 22.31289673]
[195.40870667 6.51818657]
[196.81480408 -9.21606064]
[199.91906738 -24.70420456]
[204.68469238 -39.76353073]
[211.05529785 -54.21639252]
[218.95555115 -67.89232635]
[228.29211426 -80.63004303]
[238.95465088 -92.27935028]
[250.81723022 -102.70291138]
[263.73977661 -111.77784729]
[277.56973267 -119.39723206]
[292.14379883 -125.47129059]
[307.28994751 -129.92852783]
[322.82943726 -132.71650696]
[338.57888794 -133.80249023]
[354.35241699 -133.17382812]
[369.96392822 -130.83811951]
[385.22924805 -126.82309723]
[399.96829224 -121.17628479]
[414.00717163 -113.96447754]
[427.18038940 -105.27291107]
[439.33255005 -95.20429230]
[450.32037354 -83.87755585]
[460.01434326 -71.42646027]
[468.30020142 -57.99803162]
[481.82440186 -64.48619843]
[495.34860229 -70.97436523]
[508.87277222 -77.46252441]
[522.25909424 -84.23064423]
[535.50164795 -91.27577972]
[548.74426270 -98.32090759]
[551.01477051 -113.55741119]
[561.69677734 -124.40858459]
[576.54443359 -126.86009216]
[589.82958984 -120.17858124]
[603.07220459 -127.22370911]
[616.31475830 -134.26884460]
[629.55737305 -141.31398010]
[642.79992676 -148.35911560]
[651.02331543 -162.54743958]
[667.41973877 -162.24940491]
[675.12200928 -147.77159119]
[666.20672607 -134.00755310]
[649.84509277 -135.11653137]
[636.60247803 -128.07139587]
[623.35992432 -121.02626038]
[610.11730957 -113.98112488]
[596.87475586 -106.93598938]
[594.99182129 -92.18496704]
[584.66174316 -81.24176788]
[569.69372559 -78.44694519]
[555.78936768 -85.07832336]
[542.54681396 -78.03318787]
[529.30419922 -70.98805237]
[527.06402588 -66.70354462]
[522.07598877 -63.81372070]
[515.36096191 -63.93833542]
[501.83676147 -57.45017242]
[488.31256104 -50.96200562]
[474.78839111 -44.47384262]
[479.63723755 -31.06484032]
[483.14822388 -17.24447441]
[485.28741455 -3.14587998]
[486.03408813 11.09511471]
[485.38095093 25.34129906]
[483.33413696 39.45540237]
[479.91326904 53.30140686]
[475.15121460 66.74588013]
[469.09371948 79.65924835]
[461.79904175 91.91701508]
[453.33740234 103.40103149]
[443.79022217 114.00057220]
[433.24942017 123.61342621]
[421.81643677 132.14688110]
[409.60140991 139.51863098]
[396.72195435 145.65754700]
[383.30212402 150.50434875]
[369.47116089 154.01226807]
[355.36233521 156.14735413]
[341.11157227 156.88893127]
[326.85617065 156.22973633]
[312.73345947 154.17602539]
[298.87957764 150.74745178]
[285.42803955 145.97692871]
[272.50845337 139.91033936]
[260.24539185 132.60600281]
[248.75703430 124.13422394]
[238.15419006 114.57653046]
[228.53907776 104.02491760]
[220.00444031 92.58098602]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 58]
[2 57]
[3 56]
[4 55]
[5 50]
[6 49]
[7 48]
[8 47]
[9 20]
[10 19]
[11 18]
[12 17]
[34 43]
[35 42]
[36 41]
[85 120]
[86 119]
[87 118]
[88 117]
[89 114]
[90 113]
[91 112]
[95 108]
[96 107]
[97 106]
[98 105]
[99 104]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
