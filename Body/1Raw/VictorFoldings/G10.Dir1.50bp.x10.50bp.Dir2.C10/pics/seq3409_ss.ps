%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:24 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGGUAGGCCCCUACGGGCUACUACAACCCUUCGCUGACGCCAUAAAACUCUUCACCAAAGAGCCCxxxxxxxxxxUUGCCGAAGGGGAGUCCGAACUAGUCUCAGGCUUCAACAUCGAAUACGCCGCAGGCCCCUUCGCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[97.89284515 288.74957275]
[97.89284515 273.74957275]
[97.89284515 258.74957275]
[97.89284515 243.74958801]
[97.89284515 228.74958801]
[97.89284515 213.74958801]
[97.89284515 198.74958801]
[97.89284515 183.74958801]
[97.89284515 168.74958801]
[97.89284515 153.74958801]
[84.25972748 147.49354553]
[72.88781738 157.27514648]
[61.51591110 167.05674744]
[50.14400482 176.83834839]
[38.97009277 186.84553528]
[27.99865150 197.07429504]
[17.02720833 207.30305481]
[6.05576515 217.53179932]
[1.77941144 233.36357117]
[-14.13682365 237.31394958]
[-25.31968307 225.31912231]
[-20.26519775 209.71835327]
[-4.17299032 206.56036377]
[6.79845238 196.33160400]
[17.76989555 186.10284424]
[28.74133682 175.87409973]
[29.79831696 171.16436768]
[33.85964584 167.08882141]
[40.36240387 165.46644592]
[51.73431015 155.68484497]
[63.10621643 145.90324402]
[74.47811890 136.12164307]
[60.17554474 109.35995483]
[66.90336609 82.17607117]
[88.18542480 67.82849121]
[80.21401978 55.12192917]
[72.24261475 42.41536713]
[64.27121735 29.70880508]
[56.29981232 17.00224113]
[48.32840729 4.29567862]
[40.35700607 -8.41088390]
[32.25887680 -21.03705788]
[17.51727867 -15.20411396]
[1.89563131 -12.53402901]
[-13.93555355 -13.13913345]
[-29.29723740 -16.99122429]
[-43.53098679 -23.92287827]
[-56.02718353 -33.63472748]
[-66.25115204 -45.70837784]
[-73.76600647 -59.62445068]
[-78.25136566 -74.78490448]
[-79.51696777 -90.53875732]
[-77.51074982 -106.21002960]
[-72.32100677 -121.12672424]
[-64.17248535 -134.64970398]
[-53.41666412 -146.20001221]
[-62.13603210 -158.40544128]
[-70.85540009 -170.61088562]
[-79.57476044 -182.81631470]
[-88.29412842 -195.02174377]
[-103.81909180 -199.06590271]
[-110.20497894 -213.78323364]
[-102.55309296 -227.88388062]
[-86.73329926 -230.55102539]
[-74.88119507 -219.73866272]
[-76.08869171 -203.74111938]
[-67.36932373 -191.53567505]
[-58.64995956 -179.33024597]
[-49.93059540 -167.12481689]
[-41.21122742 -154.91937256]
[-28.30871391 -160.83755493]
[-14.52823162 -164.26097107]
[-0.34761599 -165.06929016]
[13.74112320 -163.23284912]
[27.24886894 -158.81382751]
[39.70637512 -151.96406555]
[50.68056870 -142.91984558]
[59.78960800 -131.99382019]
[66.71616364 -119.56412506]
[71.21849060 -106.06130981]
[73.13882446 -91.95347595]
[72.40895081 -77.72996521]
[69.05261993 -63.88446045]
[63.18474579 -50.89780045]
[55.00751495 -39.22130966]
[44.80339432 -29.26110840]
[51.13622665 -25.36968803]
[53.06356812 -16.38228607]
[61.03497314 -3.67572379]
[69.00637817 9.03083897]
[76.97777557 21.73740196]
[84.94918060 34.44396591]
[92.92058563 47.15052795]
[100.89198303 59.85709000]
[115.56211853 62.98555374]
[128.02372742 54.63640594]
[140.48533630 46.28726196]
[138.78771973 31.07619286]
[144.36428833 16.82275391]
[155.93359375 6.80228472]
[170.83708191 3.31741428]
[185.65007019 7.16894007]
[196.96861267 17.47180939]
[202.19180298 31.85849953]
[200.11938477 47.02305222]
[191.22760010 59.48077011]
[177.55969238 66.36894989]
[162.25646973 66.10475159]
[148.83448792 58.74887466]
[136.37287903 67.09802246]
[123.91126251 75.44716644]
[138.73593140 93.66660309]
[139.34197998 120.20761871]
[154.01211548 123.33608246]
[168.68223572 126.46453857]
[183.43965149 129.15133667]
[198.27104187 131.39402771]
[213.10244751 133.63673401]
[225.67266846 124.05733490]
[241.32342529 126.25494385]
[250.76939392 138.92575073]
[248.40643311 154.55239868]
[235.63647461 163.86386108]
[220.03567505 161.33583069]
[210.85974121 148.46812439]
[196.02835083 146.22543335]
[181.19694519 143.98272705]
[178.12413025 145.81739807]
[173.99566650 146.22216797]
[169.50877380 144.71095276]
[165.55378723 141.13467407]
[150.88365173 138.00621033]
[136.21351624 134.87774658]
[130.38334656 139.59570312]
[141.75773621 149.37442017]
[153.13212585 159.15313721]
[167.79116821 162.33312988]
[177.62525940 173.65968323]
[178.71620178 188.61996460]
[170.62933350 201.25335693]
[156.58670044 206.52635193]
[142.18330383 202.33802795]
[133.15786743 190.35714722]
[133.10577393 175.35910034]
[125.91439819 162.19535828]
[118.72301483 149.03163147]
[112.89284515 153.74958801]
[112.89284515 168.74958801]
[112.89284515 183.74958801]
[112.89284515 198.74958801]
[112.89284515 213.74958801]
[112.89284515 228.74958801]
[112.89284515 243.74958801]
[112.89284515 258.74957275]
[112.89284515 273.74957275]
[112.89284515 288.74957275]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 156]
[2 155]
[3 154]
[4 153]
[5 152]
[6 151]
[7 150]
[8 149]
[9 148]
[10 147]
[11 32]
[12 31]
[13 30]
[14 29]
[15 26]
[16 25]
[17 24]
[18 23]
[35 94]
[36 93]
[37 92]
[38 91]
[39 90]
[40 89]
[41 88]
[42 86]
[56 70]
[57 69]
[58 68]
[59 67]
[60 66]
[95 111]
[96 110]
[97 109]
[113 133]
[114 132]
[115 131]
[116 127]
[117 126]
[118 125]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
