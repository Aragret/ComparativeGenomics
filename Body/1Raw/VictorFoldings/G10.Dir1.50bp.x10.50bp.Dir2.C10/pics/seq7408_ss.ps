%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:54 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCUUUUUCAAAAAGGUAUUAGAAAAACCAUUUCAUAACUUUGUCAAAGUUAAAUUAUAGGCxxxxxxxxxxUCCUUGUAGUAUAAACUAAUACACCAGUCUUGUAAACCGGAGAUGAAAACCUUUUUCCAACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[92.50000000 256.45678711]
[92.50000000 241.45677185]
[92.50000000 226.45677185]
[92.50000000 211.45677185]
[92.50000000 196.45677185]
[92.50000000 181.45677185]
[92.50000000 166.45677185]
[92.50000000 151.45677185]
[92.50000000 136.45677185]
[92.50000000 121.45677948]
[78.42848206 116.26136017]
[68.68083191 127.66238403]
[58.93317795 139.06340027]
[49.18552399 150.46443176]
[39.43787384 161.86544800]
[33.74054337 177.83343506]
[16.81941032 176.77914429]
[13.14826488 160.22743225]
[28.03685188 152.11779785]
[37.78450394 140.71676636]
[47.53215408 129.31575012]
[57.27980804 117.91473389]
[67.02745819 106.51371002]
[68.42976379 91.57939911]
[60.97485352 78.56309509]
[53.51994324 65.54678345]
[46.06503296 52.53047562]
[38.61012268 39.51416397]
[31.15521240 26.49785423]
[23.70030212 13.48154545]
[7.00905561 18.29860497]
[-12.45764923 10.83383560]
[-27.43736458 11.61368084]
[-42.41707993 12.39352512]
[-55.87162781 21.76940536]
[-70.60173035 14.56134129]
[-71.45431519 -1.81562781]
[-57.55231857 -10.51428127]
[-43.19692230 -2.58618879]
[-28.21720886 -3.36603379]
[-13.23749447 -4.14587879]
[-11.23362446 -11.37322330]
[-7.22588444 -25.82791138]
[-5.22201395 -33.05525589]
[-17.66145515 -41.43740082]
[-30.10089493 -49.81954193]
[-42.54033661 -58.20168686]
[-54.97977448 -66.58383179]
[-67.41921234 -74.96597290]
[-79.85865784 -83.34811401]
[-96.37273407 -87.18496704]
[-97.25738525 -104.11582184]
[-81.23309326 -109.65281677]
[-71.47650909 -95.78755188]
[-59.03707123 -87.40541077]
[-46.59763336 -79.02326965]
[-34.15819168 -70.64112854]
[-21.71875191 -62.25898361]
[-9.27931118 -53.87683868]
[3.16012907 -45.49469757]
[7.27108669 -42.15592194]
[10.80465126 -38.42432785]
[13.72711945 -34.36698532]
[15.59473228 -49.25026703]
[17.46234512 -64.13354492]
[19.32995796 -79.01682281]
[20.26558685 -93.98761749]
[20.26558685 -108.98761749]
[20.26558685 -123.98761749]
[6.49171829 -130.56358337]
[-3.05820823 -142.46995544]
[-6.48804760 -157.34271240]
[-3.11680317 -172.22886658]
[6.38616228 -184.17274475]
[20.13402748 -190.80290222]
[35.39714432 -190.80290222]
[49.14501190 -184.17274475]
[58.64797592 -172.22886658]
[62.01922226 -157.34271240]
[58.58938217 -142.46995544]
[49.03945541 -130.56358337]
[35.26558685 -123.98761749]
[35.26558685 -108.98761749]
[35.26558685 -93.98761749]
[46.88642120 -103.47214508]
[61.82831955 -102.15318298]
[71.60796356 -90.77959442]
[70.67291260 -75.80876160]
[59.55405426 -65.74044800]
[44.56415939 -66.29097748]
[34.21323776 -77.14921570]
[32.34562683 -62.26593399]
[30.47801208 -47.38265228]
[28.61039925 -32.49937439]
[42.34769821 -15.57124615]
[36.71660995 6.02663517]
[44.17152023 19.04294395]
[51.62643051 32.05925369]
[59.08134079 45.07556534]
[66.53625488 58.09187317]
[73.99116516 71.10818481]
[81.44607544 84.12448883]
[94.69473267 73.04195404]
[113.94710541 72.84038544]
[130.56263733 86.06957245]
[145.52288818 87.16088104]
[154.37503052 84.65259552]
[160.78196716 88.43369293]
[175.71627808 89.83599854]
[190.65058899 91.23830414]
[199.47433472 78.66702271]
[213.40832520 72.20640564]
[228.70437622 73.59432220]
[241.24792480 82.45742798]
[247.66484070 96.41159821]
[246.22898865 111.70322418]
[237.32659912 124.21894073]
[223.35238647 130.59208679]
[208.06533813 129.10830688]
[195.57759094 120.16673279]
[189.24827576 106.17260742]
[174.31398010 104.77030945]
[159.37966919 103.36800385]
[144.43157959 102.12113190]
[129.47132874 101.02981567]
[123.97850037 106.13655853]
[136.58415222 114.26660156]
[149.18980408 122.39663696]
[161.79545593 130.52667236]
[175.92793274 135.55390930]
[184.92294312 147.55764771]
[185.77952576 162.53317261]
[178.21191406 175.48428345]
[164.74484253 182.09017944]
[149.87123108 180.14698792]
[138.55329895 170.30299377]
[134.56698608 155.84124756]
[127.37559509 142.67752075]
[120.18421173 129.51377869]
[112.99283600 116.35003662]
[107.50000000 121.45677948]
[107.50000000 136.45677185]
[107.50000000 151.45677185]
[107.50000000 166.45677185]
[107.50000000 181.45677185]
[107.50000000 196.45677185]
[107.50000000 211.45677185]
[107.50000000 226.45677185]
[107.50000000 241.45677185]
[107.50000000 256.45678711]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[11 23]
[12 22]
[13 21]
[14 20]
[15 19]
[24 102]
[25 101]
[26 100]
[27 99]
[28 98]
[29 97]
[30 96]
[32 41]
[33 40]
[34 39]
[44 60]
[45 59]
[46 58]
[47 57]
[48 56]
[49 55]
[50 54]
[63 94]
[64 93]
[65 92]
[66 91]
[67 84]
[68 83]
[69 82]
[105 125]
[106 124]
[108 123]
[109 122]
[110 121]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
