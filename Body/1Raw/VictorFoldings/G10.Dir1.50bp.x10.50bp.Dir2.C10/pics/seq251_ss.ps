%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:45 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCAUAACAAAAAAUUUCCACCAAACCCCCCCUCCCCCGCUUCUGGCCACAGCACUUAAACACAxxxxxxxxxxCCCUAACCCUGACUUCCCUAAUUCCCCCCAUCCUUACCACCCUCGUUAACCCUAACAAAAAACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[-30.88492393 202.28485107]
[-43.10890579 210.97819519]
[-55.33288574 219.67155457]
[-67.55686951 228.36489868]
[-79.78084564 237.05824280]
[-91.91609955 245.87501526]
[-103.96138763 254.81433105]
[-116.00666809 263.75363159]
[-128.05195618 272.69293213]
[-140.09722900 281.63223267]
[-134.14227295 295.47546387]
[-131.54087830 310.31896973]
[-132.43336487 325.36224365]
[-136.77159119 339.79403687]
[-144.32159424 352.83605957]
[-154.67622375 363.78494263]
[-167.27706909 372.05026245]
[-181.44456482 377.18627930]
[-196.41470337 378.91598511]
[-211.38014221 377.14611816]
[-225.53381348 371.97213745]
[-238.11244202 363.67306519]
[-248.43766785 352.69641113]
[-255.95266724 339.63421631]
[-260.25216675 325.19082642]
[-261.10430908 310.14523315]
[-258.46310425 295.30874634]
[-252.47103882 281.48153687]
[-243.45121765 269.40927124]
[-231.89009094 259.74298096]
[-218.41111755 253.00398254]
[-203.74122620 249.55567932]
[-188.67152405 249.58404541]
[-174.01470947 253.08753967]
[-160.56120300 259.87722778]
[-149.03654480 269.58694458]
[-136.99125671 260.64764404]
[-124.94596863 251.70834351]
[-112.90068817 242.76904297]
[-100.85540771 233.82974243]
[-97.33771515 227.27951050]
[-88.47419739 224.83425903]
[-76.25021362 216.14091492]
[-64.02622986 207.44757080]
[-51.80225372 198.75422668]
[-39.57826996 190.06086731]
[-57.05954361 154.08654785]
[-65.43506622 114.97647095]
[-64.21924591 74.99811554]
[-53.48258209 36.46928406]
[-33.84754181 1.62373364]
[-45.52066040 -7.79636955]
[-57.19377899 -17.21647263]
[-73.47025299 -19.21855545]
[-79.62467194 -34.41905594]
[-69.32589722 -47.18099976]
[-53.16842270 -44.37599564]
[-47.77367401 -28.88958931]
[-36.10055542 -19.46948624]
[-24.42744064 -10.04938316]
[-18.65595818 -16.24894905]
[-12.57596111 -22.14625549]
[-6.20325422 -27.72596931]
[0.44559115 -32.97358322]
[7.35328770 -37.87545395]
[14.50187397 -42.41883850]
[21.87276459 -46.59191513]
[29.44679260 -50.38384247]
[37.20426559 -53.78475571]
[45.12501526 -56.78581238]
[53.18844604 -59.37921143]
[61.37358856 -61.55820847]
[69.65916443 -63.31713867]
[78.02362823 -64.65142822]
[86.44523621 -65.55760956]
[94.90208435 -66.03332520]
[103.37218475 -66.07733917]
[111.83352661 -65.68953705]
[120.26409149 -64.87092590]
[128.64196777 -63.62363052]
[136.94537354 -61.95089722]
[145.15272522 -59.85707855]
[153.24267578 -57.34761810]
[161.19418335 -54.42903519]
[168.98657227 -51.10892487]
[176.59960938 -47.39591599]
[184.01345825 -43.29965973]
[191.20887756 -38.83081436]
[198.16714478 -34.00099564]
[204.87016296 -28.82275963]
[211.30050659 -23.30957222]
[217.44146729 -17.47576904]
[223.27706909 -11.33651638]
[228.79212952 -4.90777874]
[233.97232056 1.79372931]
[238.80416870 8.75058365]
[243.27511597 15.94469452]
[247.37353516 23.35735703]
[251.08877563 30.96929932]
[254.41116333 38.76072693]
[257.33206177 46.71138382]
[259.84390259 54.80059433]
[261.94009399 63.00732803]
[263.61526489 71.31024933]
[264.86499023 79.68775940]
[265.68606567 88.11808777]
[266.07635498 96.57931519]
[266.03482056 105.04943085]
[265.56155396 113.50641632]
[264.65783691 121.92829132]
[263.32598877 130.29313660]
[261.56948853 138.57923889]
[259.39288330 146.76501465]
[256.80181885 154.82919312]
[253.80308533 162.75082397]
[250.40443420 170.50929260]
[246.61473083 178.08442688]
[242.44380188 185.45652771]
[237.90251160 192.60644531]
[233.00265503 199.51557922]
[227.75697327 206.16595459]
[222.17912292 212.54028320]
[216.28359985 218.62200928]
[210.08570862 224.39529419]
[203.60160828 229.84515381]
[196.84811401 234.95739746]
[189.84281921 239.71873474]
[182.60391235 244.11679077]
[175.15023804 248.14012146]
[167.50115967 251.77828979]
[159.67655945 255.02180481]
[151.69680786 257.86227417]
[143.58264160 260.29226685]
[135.35516357 262.30548096]
[127.03574371 263.89669800]
[118.64603424 265.06173706]
[110.20783997 265.79763794]
[101.74311066 266.10241699]
[93.27384186 265.97534180]
[84.82206726 265.41668701]
[76.40975189 264.42794800]
[68.05877686 263.01168823]
[59.79085159 261.17156982]
[51.62747192 258.91241455]
[43.58987045 256.24005127]
[35.69893646 253.16143799]
[27.97519302 249.68460083]
[20.43872070 245.81857300]
[13.10911560 241.57341003]
[6.00543499 236.96012878]
[-0.85385084 231.99073792]
[-7.45090675 226.67816162]
[-13.76857948 221.03620911]
[-19.79044342 215.07955933]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 46]
[2 45]
[3 44]
[4 43]
[5 42]
[6 40]
[7 39]
[8 38]
[9 37]
[10 36]
[51 60]
[52 59]
[53 58]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
