%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:47 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCUGAGCCCUAGGAUUCAUCUUUCUUUUCACCGUAGGUGGCCUGACUGGCAUUGUAUUAGCxxxxxxxxxxUACUCCAAAGACCACAUCAUCGAAACCGCAAACAUAUCAUACACAAACGCCUGAGCCCUACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[116.57128906 259.49664307]
[116.57128906 244.49664307]
[116.57128906 229.49664307]
[116.57128906 214.49664307]
[116.57128906 199.49664307]
[116.57128906 184.49664307]
[116.57128906 169.49664307]
[116.57128906 154.49664307]
[116.57128906 139.49664307]
[116.57128906 124.49664307]
[100.67850494 138.13198853]
[75.22574615 139.58793640]
[64.34692383 149.91514587]
[53.46809769 160.24235535]
[48.68693542 177.99397278]
[31.51810074 181.49127197]
[20.85647392 192.04255676]
[13.85152626 207.48168945]
[-2.92340875 205.02449036]
[-5.20598841 188.22489929]
[10.30518436 181.38093567]
[20.96681023 170.82963562]
[21.35590935 158.69885254]
[30.20851707 149.81909180]
[43.14089203 149.36352539]
[54.01971817 139.03631592]
[64.89854431 128.70912170]
[62.89467239 121.48177338]
[48.43998337 125.48950958]
[33.98529434 129.49725342]
[19.53060722 133.50498962]
[5.07585621 137.51251221]
[1.06856251 123.05769348]
[15.52286625 119.05030060]
[29.97755432 115.04256439]
[44.43224335 111.03482056]
[58.88693237 107.02708435]
[56.88306046 99.79973602]
[42.23955917 96.54891205]
[27.59605789 93.29808807]
[12.95255756 90.04725647]
[-3.82050610 92.51721191]
[-10.83718014 77.08340454]
[2.05106568 66.06843567]
[16.20338249 75.40375519]
[30.84688377 78.65458679]
[45.49038696 81.90541077]
[60.13388824 85.15623474]
[66.62205505 71.63204956]
[54.92242813 62.24488449]
[43.22280502 52.85772324]
[27.18279648 53.17024231]
[17.04896927 40.73299789]
[20.59512901 25.08677292]
[35.10096741 18.23401642]
[49.43884277 25.43157578]
[52.60996628 41.15810013]
[64.30959320 50.54526138]
[76.00921631 59.93242264]
[114.92613983 64.90414429]
[128.81617737 93.34257507]
[139.02964783 82.35691071]
[149.24313354 71.37124634]
[159.45660400 60.38558197]
[149.58905029 49.06970978]
[140.95838928 36.78437424]
[133.65921021 23.66417885]
[127.77145386 9.85287380]
[123.35966492 -4.49821615]
[120.47216034 -19.23185158]
[119.14057922 -34.18660355]
[119.37951660 -49.19861984]
[121.18634796 -64.10341644]
[124.54129028 -78.73770142]
[129.40756226 -92.94111633]
[135.73187256 -106.55804443]
[143.44491577 -119.43930054]
[152.46217346 -131.44374084]
[162.68486023 -142.43984985]
[174.00097656 -152.30714417]
[186.28651428 -160.93750000]
[199.40689087 -168.23637390]
[213.21833801 -174.12377930]
[227.56953430 -178.53523254]
[242.30323792 -181.42237854]
[257.25802612 -182.75358582]
[272.27005005 -182.51428223]
[287.17480469 -180.70709229]
[301.80899048 -177.35179138]
[316.01229858 -172.48516846]
[329.62905884 -166.16053772]
[342.51013184 -158.44718933]
[354.51437378 -149.42962646]
[365.51022339 -139.20668030]
[375.37722778 -127.89032745]
[384.00729370 -115.60456848]
[391.30584717 -102.48401642]
[397.19293213 -88.67242432]
[401.60400391 -74.32112122]
[404.49081421 -59.58734512]
[405.82165527 -44.63253021]
[405.58200073 -29.62052536]
[403.77444458 -14.71581364]
[400.41879272 -0.08169830]
[395.55181885 14.12148094]
[389.22683716 27.73810768]
[381.51318359 40.61898804]
[372.49533081 52.62299347]
[362.27212524 63.61860275]
[350.95553589 73.48534393]
[338.66955566 82.11510468]
[325.54882812 89.41333771]
[311.73709106 95.30007172]
[297.38568115 99.71082306]
[282.65182495 102.59725189]
[267.69699097 103.92774200]
[252.68499756 103.68771362]
[237.78031921 101.87979126]
[223.14628601 98.52378845]
[208.94322205 93.65647125]
[195.32675171 87.33117676]
[182.44606018 79.61720276]
[170.44227600 70.59906006]
[160.22879028 81.58472443]
[150.01531982 92.57038879]
[139.80183411 103.55605316]
[151.09460449 93.68318939]
[165.24644470 88.71076202]
[180.23281860 89.35014343]
[193.90972900 95.50986481]
[204.32055664 106.30869293]
[209.97589111 120.20175171]
[210.06669617 135.20147705]
[204.57998657 149.16198730]
[194.30067444 160.08609009]
[180.69934082 166.41094971]
[165.72181702 167.23171997]
[151.51080322 162.43101501]
[140.09931946 152.69558716]
[133.11994934 139.41822815]
[131.57128906 124.49664307]
[131.57128906 139.49664307]
[131.57128906 154.49664307]
[131.57128906 169.49664307]
[131.57128906 184.49664307]
[131.57128906 199.49664307]
[131.57128906 214.49664307]
[131.57128906 229.49664307]
[131.57128906 244.49664307]
[131.57128906 259.49664307]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[12 27]
[13 26]
[14 25]
[16 22]
[17 21]
[38 48]
[39 47]
[40 46]
[41 45]
[49 59]
[50 58]
[51 57]
[61 126]
[62 125]
[63 124]
[64 123]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
