%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:50 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCAACCAGCCAGAACGCCUGAACGCAGGCACAUACUUCCUAUUCUACACCCUAGUAGGCUCxxxxxxxxxxCUCCAUCUGCCUACGACAAACAGACCUAAAAUCGCUCAUUGCAUACUCUUCAAUCAGCCACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[164.29559326 400.94311523]
[163.98353577 385.94635010]
[163.67147827 370.94961548]
[163.35942078 355.95285034]
[163.04736328 340.95611572]
[162.73530579 325.95935059]
[162.42324829 310.96258545]
[162.11119080 295.96585083]
[161.79914856 280.96908569]
[158.70082092 266.29257202]
[152.92454529 252.44934082]
[147.14826965 238.60612488]
[141.37200928 224.76290894]
[127.54164124 219.35395813]
[121.48648071 205.39724731]
[127.25366211 190.92736816]
[121.47738647 177.08415222]
[115.70111847 163.24093628]
[111.64479065 160.61001587]
[109.23394012 155.37368774]
[109.98577881 148.69969177]
[104.79036713 134.62817383]
[87.78532410 138.07736206]
[69.04098511 132.68431091]
[53.24053574 117.84746552]
[38.74493790 121.70462036]
[24.24934196 125.56178284]
[9.75374413 129.41894531]
[-4.74185228 133.27610779]
[-15.96962166 145.22889709]
[-31.87092781 141.21884155]
[-36.08787155 125.37114716]
[-24.28241920 113.98855591]
[-8.59901142 118.78050232]
[5.89658499 114.92334747]
[20.39218140 111.06618500]
[34.88777924 107.20902252]
[49.38337326 103.35186768]
[49.69536209 95.85836029]
[50.31933975 80.87134552]
[50.63132858 73.37783813]
[36.50652695 68.32907867]
[22.38172340 63.28032303]
[7.32437181 68.81707764]
[-6.31726694 60.37402344]
[-8.07849503 44.42793655]
[3.39175177 33.21129608]
[19.29448128 35.32854843]
[27.43048096 49.15551758]
[41.55528259 54.20427322]
[55.68008423 59.25303268]
[68.37501526 51.26311493]
[69.93259430 36.34420395]
[71.49018097 21.42529106]
[58.43832016 15.43455791]
[47.89691162 5.71335602]
[40.89188766 -6.77411127]
[38.09940338 -20.79531670]
[39.78057861 -34.97106171]
[45.75714493 -47.91114044]
[55.43024826 -58.35067368]
[67.84042358 -65.27375031]
[81.76277161 -68.01227570]
[83.63037872 -82.89555359]
[85.49799347 -97.77883911]
[87.36560822 -112.66211700]
[89.23322296 -127.54539490]
[91.10083008 -142.42868042]
[77.24434662 -148.44319153]
[65.64450836 -158.11895752]
[57.24167633 -170.67161560]
[52.71702194 -185.08355713]
[52.43734360 -200.18649292]
[56.42530823 -214.75607300]
[64.35763550 -227.61122131]
[75.59128571 -237.70982361]
[89.21559143 -244.23324585]
[104.12609863 -246.65263367]
[119.11407471 -244.77188110]
[132.96450806 -238.74345398]
[144.55462646 -229.05603027]
[152.94483948 -216.49494934]
[157.45501709 -202.07846069]
[157.71952820 -186.97526550]
[153.71691895 -172.40968323]
[145.77168274 -159.56251526]
[134.52789307 -149.47520447]
[120.89704132 -142.96548462]
[105.98411560 -140.56106567]
[104.11650085 -125.67778015]
[102.24888611 -110.79450226]
[100.38127136 -95.91122437]
[98.51366425 -81.02794647]
[96.64604950 -66.14466095]
[110.72116852 -59.15562820]
[121.57901001 -47.75802612]
[127.89896393 -33.31158066]
[128.90328979 -17.54838943]
[124.45282745 -2.36528444]
[115.06585693 10.40445137]
[101.85788727 19.21242332]
[86.40908813 22.98287201]
[84.85150909 37.90178299]
[83.29393005 52.82069778]
[101.14037323 51.85020828]
[117.49453735 57.15744400]
[130.31266785 67.57094574]
[138.17736816 81.31668854]
[140.44888306 96.30417633]
[137.29777527 110.43831635]
[129.62120056 121.91108704]
[118.86188507 129.43275452]
[124.05730438 143.50427246]
[129.54432678 157.46466064]
[135.32060242 171.30787659]
[141.09687805 185.15110779]
[155.43844604 191.23033142]
[161.09921265 205.35160828]
[155.21522522 218.98663330]
[160.99148560 232.82984924]
[166.76776123 246.67306519]
[172.54403687 260.51629639]
[174.91078186 245.70417786]
[181.66110229 232.30891418]
[192.15826416 221.59399414]
[205.41213989 214.57009888]
[220.17253113 211.89976501]
[235.04718018 213.83486938]
[248.63305664 220.19288635]
[259.64865112 230.37408447]
[267.05490112 243.41813660]
[270.15325928 258.09463501]
[268.65142822 273.01928711]
[262.69110107 286.78424072]
[252.83448792 298.09118652]
[240.01127625 305.87356567]
[225.43104553 309.39730835]
[210.46905518 308.33004761]
[196.53660583 302.77246094]
[184.94787598 293.24871826]
[176.79589844 280.65704346]
[177.10795593 295.65377808]
[177.42001343 310.65054321]
[177.73207092 325.64727783]
[178.04411316 340.64404297]
[178.35617065 355.64080811]
[178.66822815 370.63754272]
[178.98028564 385.63430786]
[179.29234314 400.63107300]
[181.88334656 419.83877563]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 149]
[2 148]
[3 147]
[4 146]
[5 145]
[6 144]
[7 143]
[8 142]
[9 141]
[10 122]
[11 121]
[12 120]
[13 119]
[16 116]
[17 115]
[18 114]
[21 113]
[22 112]
[25 38]
[26 37]
[27 36]
[28 35]
[29 34]
[41 51]
[42 50]
[43 49]
[52 104]
[53 103]
[54 102]
[63 94]
[64 93]
[65 92]
[66 91]
[67 90]
[68 89]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
