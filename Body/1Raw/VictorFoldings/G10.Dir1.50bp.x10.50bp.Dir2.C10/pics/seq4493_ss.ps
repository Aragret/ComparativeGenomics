%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:30 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGAAUAGGAGCUUAAACCCCCUUAUUUCUAGGACUAUGAGAAUCGAACCCAUCCCUGAGAAUxxxxxxxxxxGUACUACACGACACGUACUACGUUGUAGCCCACUUCCACUAUGUCCUAUCAAUAGGAGCUCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[87.99945068 275.35729980]
[87.99945068 260.35729980]
[87.99945068 245.35728455]
[87.99945068 230.35728455]
[87.99945068 215.35728455]
[87.99945068 200.35728455]
[87.99945068 185.35728455]
[87.99945068 170.35728455]
[87.99945068 155.35728455]
[87.99945068 140.35728455]
[74.61316681 133.58917236]
[62.53317642 142.48152161]
[50.45318985 151.37387085]
[38.37319946 160.26622009]
[26.38636780 169.28375244]
[14.49398804 178.42549133]
[17.17704582 193.49398804]
[12.53904057 208.07986450]
[1.64575124 218.83135986]
[-12.99962330 223.27789307]
[-28.03168488 220.39765930]
[-39.99617386 210.85252380]
[-46.14373779 196.83589172]
[-45.06171417 181.56867981]
[-36.99874115 168.55917358]
[-23.80763435 160.79687500]
[-8.51961040 160.06550598]
[5.35225344 166.53311157]
[17.24463272 157.39137268]
[20.65296555 150.77859497]
[29.48085022 148.18623352]
[41.56083679 139.29388428]
[53.64082718 130.40153503]
[65.72081757 121.50918579]
[62.05141830 93.31354523]
[77.51490784 71.12419891]
[102.53414154 65.43051910]
[106.84172058 51.06233597]
[111.14930725 36.69415283]
[115.45689392 22.32596779]
[119.76447296 7.95778322]
[124.07205963 -6.41040087]
[128.22994995 -20.82261658]
[132.23768616 -35.27730560]
[136.09484863 -49.77290344]
[139.80101013 -64.30783844]
[138.88914490 -73.46318054]
[143.73841858 -79.10501099]
[147.74615479 -93.55970001]
[151.75389099 -108.01438904]
[140.63734436 -97.94353485]
[127.79840851 -90.18713379]
[113.71204376 -85.03210449]
[98.89933014 -82.66914368]
[83.90822601 -83.18566895]
[69.29328156 -86.56256866]
[55.59513855 -92.67492676]
[43.32052231 -101.29663086]
[32.92349625 -112.10874176]
[24.78866577 -124.71130371]
[19.21696091 -138.63812256]
[16.41448975 -153.37399292]
[16.48492050 -168.37384033]
[19.42564964 -183.08274841]
[25.12789345 -196.95661926]
[33.38071060 -209.48223877]
[43.87881470 -220.19624329]
[56.23385239 -228.70228577]
[69.98879242 -234.68574524]
[84.63480377 -237.92524719]
[99.63009644 -238.30097961]
[114.41996765 -235.79902649]
[128.45729065 -230.51193237]
[141.22282410 -222.63529968]
[152.24432373 -212.46049500]
[161.11407471 -200.36392212]
[167.50398254 -186.79301453]
[171.17765808 -172.24984741]
[171.99920654 -157.27235413]
[169.93823242 -142.41461182]
[165.07371521 -128.23223877]
[176.77333069 -137.61940002]
[183.15180969 -156.69721985]
[202.31739807 -158.95773315]
[213.61640930 -168.82345581]
[224.91540527 -178.68917847]
[236.21441650 -188.55490112]
[247.51341248 -198.42062378]
[248.80206299 -202.72189331]
[251.18093872 -206.02522278]
[254.18917847 -208.10665894]
[257.34078979 -208.91993713]
[260.18640137 -208.58877563]
[272.26641846 -217.48112488]
[284.34640503 -226.37347412]
[296.42639160 -235.26582336]
[305.59774780 -249.52493286]
[321.83850098 -244.65931702]
[321.65890503 -227.70632935]
[305.31872559 -223.18582153]
[293.23873901 -214.29347229]
[281.15875244 -205.40112305]
[269.07876587 -196.50877380]
[257.37915039 -187.12161255]
[246.08013916 -177.25588989]
[234.78112793 -167.39016724]
[223.48213196 -157.52444458]
[212.18312073 -147.65872192]
[212.40327454 -137.36390686]
[206.77328491 -128.48008728]
[196.96739197 -124.10420227]
[186.16049194 -125.91977692]
[174.46087646 -116.53261566]
[166.20858765 -104.00665283]
[162.20085144 -89.55196381]
[158.19309998 -75.09727478]
[154.33595276 -60.60167694]
[150.62979126 -46.06674194]
[152.03379822 -38.76096344]
[146.69238281 -31.26956558]
[142.68463135 -16.81487656]
[143.93635559 -9.48147106]
[138.44024658 -2.10281634]
[134.13265991 12.26536751]
[129.82507324 26.63355255]
[125.51749420 41.00173569]
[121.20990753 55.36991882]
[116.90232086 69.73810577]
[122.78231812 73.28672028]
[127.91593170 77.97963715]
[132.08029175 83.65953827]
[135.08581543 90.12570953]
[136.78453064 97.14108276]
[137.07708740 104.44091034]
[135.91792297 111.74274445]
[133.31825256 118.75737000]
[129.34700012 125.20024872]
[124.12935638 130.80303955]
[117.84296417 135.32469177]
[110.71205902 138.56175232]
[102.99945068 140.35728455]
[102.99945068 155.35728455]
[102.99945068 170.35728455]
[102.99945068 185.35728455]
[102.99945068 200.35728455]
[102.99945068 215.35728455]
[102.99945068 230.35728455]
[102.99945068 245.35728455]
[102.99945068 260.35729980]
[102.99945068 275.35729980]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[11 34]
[12 33]
[13 32]
[14 31]
[15 29]
[16 28]
[37 128]
[38 127]
[39 126]
[40 125]
[41 124]
[42 123]
[43 121]
[44 120]
[45 118]
[46 117]
[48 116]
[49 115]
[50 114]
[81 113]
[82 112]
[84 108]
[85 107]
[86 106]
[87 105]
[88 104]
[93 103]
[94 102]
[95 101]
[96 100]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
