%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:58 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGAGUCCUACGUGAUCUGAGUUCAGACCGGAGUAAUCCAGGUCGGUUUCUAUCUACXUUCAAxxxxxxxxxxAUAACCCAAUACCAAACGCCCCUCUUCGUCUGAUCCGUCCUAAUCACAGCAGUCCUACUUCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[200.20138550 502.81326294]
[199.88932800 487.81652832]
[199.57727051 472.81976318]
[199.26521301 457.82302856]
[198.95315552 442.82626343]
[198.64109802 427.82949829]
[198.32905579 412.83276367]
[198.01699829 397.83599854]
[197.70494080 382.83923340]
[195.06607056 368.07318115]
[190.16452026 353.89663696]
[178.69308472 344.39636230]
[181.49613953 328.82543945]
[167.21696472 324.67300415]
[158.01206970 312.76779175]
[157.57734680 297.54727173]
[166.28898621 284.84240723]
[161.38743591 270.66583252]
[156.48588562 256.48928833]
[151.29415894 251.16091919]
[151.63317871 241.96652222]
[147.02760315 227.69105530]
[142.42204285 213.41560364]
[137.81648254 199.14013672]
[126.54515839 189.40325928]
[129.67155457 173.89404297]
[125.06599426 159.61857605]
[118.86058044 145.96234131]
[111.13649750 133.10392761]
[103.41241455 120.24552917]
[90.37602997 121.04850006]
[77.98892975 113.37777710]
[71.66425323 98.59015656]
[56.89820099 95.95128632]
[42.13214493 93.31242371]
[27.36609077 90.67356110]
[12.57338333 88.18844604]
[-2.24437475 85.85733795]
[-17.06213379 83.52623749]
[-32.16316986 89.92082214]
[-45.08675385 79.82563019]
[-42.53821182 63.62572098]
[-27.13926506 57.98617935]
[-14.73102856 68.70847321]
[0.08672909 71.03958130]
[14.90448761 73.37068176]
[22.04701233 71.28982544]
[30.00495529 75.90750885]
[44.77101135 78.54637146]
[59.53706741 81.18523407]
[74.30312347 83.82409668]
[85.18194580 73.49689484]
[83.31433105 58.61361313]
[81.44672394 43.73033524]
[66.42399597 43.12409210]
[51.70597076 40.05331421]
[37.69417191 34.60176468]
[24.77085114 26.91817284]
[13.28856182 17.21214676]
[3.56055212 5.74847984]
[-4.14779186 -7.16009474]
[-9.62618065 -21.16142082]
[-12.72515965 -35.87353134]
[-13.36018658 -50.89506912]
[-11.51393700 -65.81623840]
[-7.23677826 -80.22997284]
[-0.64539492 -93.74305725]
[8.08039570 -105.98684692]
[18.70254898 -116.62732697]
[30.93128204 -125.37420654]
[44.43298721 -131.98887634]
[58.83932877 -136.29086304]
[73.75729370 -138.16284180]
[88.77989960 -137.55369568]
[103.49732971 -134.48008728]
[117.50807953 -129.02583313]
[130.42991638 -121.33975220]
[141.91033936 -111.63151550]
[151.63613892 -100.16597748]
[159.34199524 -87.25592041]
[164.81768799 -73.25354004]
[167.91383362 -58.54082870]
[168.54595947 -43.51916885]
[166.69683838 -28.59835815]
[162.41690063 -14.18544769]
[155.82292175 -0.67363036]
[147.09477234 11.56848049]
[136.47056580 22.20691109]
[124.24015045 30.95143509]
[110.73716736 37.56349945]
[96.33000183 41.86272049]
[98.19761658 56.74599838]
[100.06522369 71.62928009]
[121.94938660 89.22627258]
[116.27081299 112.52144623]
[123.99490356 125.37984467]
[131.71897888 138.23825073]
[133.27468872 123.31913757]
[141.47816467 110.76115417]
[154.51489258 103.34201050]
[169.50125122 102.70274353]
[183.12242126 108.98476410]
[192.36552429 120.79853821]
[195.18603516 135.53097534]
[190.96012878 149.92338562]
[180.62251282 160.79231262]
[166.45976257 165.73364258]
[151.60456848 163.65440369]
[139.34144592 155.01301575]
[143.94702148 169.28846741]
[155.54776001 180.04641724]
[152.09193420 194.53457642]
[156.69750977 208.81002808]
[161.30307007 223.08549500]
[165.90863037 237.36094666]
[170.66244507 251.58773804]
[175.56399536 265.76428223]
[180.46554565 279.94085693]
[195.16407776 284.55163574]
[204.22335815 296.79022217]
[204.33764648 311.83850098]
[195.67269897 323.92388916]
[207.49473572 334.43817139]
[204.34107971 348.99508667]
[209.24263000 363.17163086]
[212.85710144 348.61364746]
[221.40351868 336.28646851]
[233.76890564 327.79547119]
[248.34298706 324.24636841]
[263.22784424 326.10131836]
[276.48510742 333.11880493]
[286.38833618 344.38494873]
[291.64788818 358.43264771]
[291.57882690 373.43246460]
[286.19015503 387.43112183]
[276.18359375 398.60562134]
[262.86227417 405.50073242]
[247.96098328 407.21856689]
[233.42019653 403.53540039]
[221.13351440 394.93090820]
[212.70169067 382.52719116]
[213.01374817 397.52395630]
[213.32580566 412.52069092]
[213.63786316 427.51745605]
[213.94992065 442.51419067]
[214.26197815 457.51095581]
[214.57402039 472.50772095]
[214.88607788 487.50445557]
[215.19813538 502.50122070]
[217.78913879 521.70892334]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 149]
[2 148]
[3 147]
[4 146]
[5 145]
[6 144]
[7 143]
[8 142]
[9 141]
[10 125]
[11 124]
[13 122]
[17 118]
[18 117]
[19 116]
[21 115]
[22 114]
[23 113]
[24 112]
[26 110]
[27 109]
[28 97]
[29 96]
[30 95]
[33 51]
[34 50]
[35 49]
[36 48]
[37 46]
[38 45]
[39 44]
[52 93]
[53 92]
[54 91]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
