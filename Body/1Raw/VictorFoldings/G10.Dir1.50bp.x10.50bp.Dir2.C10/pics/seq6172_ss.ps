%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:35 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCUUCUUCGAAUUUGCAAUUCAAUAUGAAAAUCACCUCGGAGCUGGUAAAAAGAGGCCUAAxxxxxxxxxxAUCGGCAUCAACCAACCACACCUAGCAUUCCUGCACAUCUGUACCCACGCCUUCUUCAAACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[109.07876587 294.66574097]
[109.07876587 279.66574097]
[109.07876587 264.66574097]
[109.07876587 249.66574097]
[109.07876587 234.66574097]
[109.07876587 219.66574097]
[109.07876587 204.66574097]
[109.07876587 189.66574097]
[109.07876587 174.66574097]
[109.07876587 159.66574097]
[90.13426208 154.60739136]
[75.35061646 144.22491455]
[65.97261810 130.60992432]
[62.36633301 116.03718567]
[47.72283173 119.28800964]
[33.07933044 122.53883362]
[18.43582726 125.78965759]
[3.79232597 129.04048157]
[-10.85117531 132.29130554]
[-25.34677124 136.14846802]
[-39.66936874 140.60528564]
[-53.99196625 145.06210327]
[-68.31456757 149.51892090]
[-79.19260406 161.00712585]
[-93.64402771 157.40077209]
[-107.96662140 161.85758972]
[-112.81777191 176.59686279]
[-125.42561340 185.64241028]
[-140.94216919 185.51603699]
[-153.40101624 176.26635742]
[-158.01147461 161.45002747]
[-153.00071716 146.76425171]
[-140.29548645 137.85601807]
[-124.78120422 138.15069580]
[-112.42343903 147.53500366]
[-98.10083771 143.07818604]
[-88.24724579 131.90875244]
[-72.77137756 135.19631958]
[-58.44878387 130.73950195]
[-44.12618637 126.28269196]
[-29.80358696 121.82587433]
[-28.38332939 119.33786011]
[-25.86002922 117.28191376]
[-22.40042496 116.09320068]
[-18.32989120 116.13571167]
[-14.10200119 117.64781189]
[0.54150027 114.39698029]
[15.18500137 111.14615631]
[29.82850266 107.89533234]
[44.47200394 104.64450836]
[59.11550522 101.39368439]
[68.09259796 74.39917755]
[92.50000000 59.78514862]
[92.50000000 44.78514862]
[92.50000000 29.78514862]
[92.50000000 14.78514957]
[78.81950378 8.10642529]
[69.43365479 -3.80125284]
[66.16201019 -18.54291344]
[69.60120392 -33.18302917]
[79.01693726 -44.83006287]
[92.50000000 -51.20756149]
[92.50000000 -66.20755768]
[84.76270294 -80.00772858]
[92.50000000 -92.73500061]
[92.50000000 -107.73500061]
[92.50000000 -122.73500061]
[78.24732971 -127.89612579]
[66.62139893 -137.62307739]
[59.02610016 -150.74127197]
[56.37859344 -165.66664124]
[58.99858856 -180.59686279]
[66.56970215 -193.72903442]
[78.17768860 -203.47740173]
[92.42082214 -208.66477966]
[107.57917786 -208.66477966]
[121.82231140 -203.47740173]
[133.43029785 -193.72903442]
[141.00140381 -180.59686279]
[143.62139893 -165.66664124]
[140.97390747 -150.74127197]
[133.37860107 -137.62307739]
[121.75267029 -127.89612579]
[107.50000000 -122.73500061]
[107.50000000 -107.73500061]
[107.50000000 -92.73500061]
[115.23729706 -80.00772858]
[107.50000000 -66.20755768]
[107.50000000 -51.20756149]
[120.98306274 -44.83006287]
[130.39880371 -33.18302917]
[133.83798218 -18.54291344]
[130.56634521 -3.80125284]
[121.18049622 8.10642529]
[107.50000000 14.78514957]
[107.50000000 29.78514862]
[107.50000000 44.78514862]
[107.50000000 59.78514862]
[114.94975281 58.95160294]
[122.85080719 59.54359818]
[130.92597961 61.68148422]
[138.87187195 65.43151855]
[146.36929321 70.80067444]
[153.09478760 77.73353577]
[158.73269653 86.11133575]
[173.55046082 83.78023529]
[188.36822510 81.44912720]
[200.77645874 70.72682953]
[216.17539978 76.36637115]
[218.72393799 92.56627655]
[205.80035400 102.66147614]
[190.69932556 96.26688385]
[175.88156128 98.59799194]
[161.06381226 100.92909241]
[159.89825439 108.33797455]
[174.71601868 110.66907501]
[186.38320923 120.09651184]
[172.38490295 125.48683167]
[157.56715393 123.15573120]
[156.40159607 130.56460571]
[169.78788757 137.33271790]
[183.17416382 144.10084534]
[199.50917053 142.65171814]
[208.70890808 156.22731018]
[201.30947876 170.86222839]
[184.92279053 171.50129700]
[176.40605164 157.48712158]
[163.01977539 150.71900940]
[149.63348389 143.95089722]
[143.24481201 147.87960815]
[151.74757385 160.23690796]
[160.25033569 172.59422302]
[168.75309753 184.95152283]
[178.78546143 196.10284424]
[172.45838928 209.70314026]
[157.46641541 209.21276855]
[152.04159546 195.22825623]
[144.85021973 182.06451416]
[137.65882874 168.90077209]
[130.46745300 155.73703003]
[124.07876587 159.66574097]
[124.07876587 174.66574097]
[124.07876587 189.66574097]
[124.07876587 204.66574097]
[124.07876587 219.66574097]
[124.07876587 234.66574097]
[124.07876587 249.66574097]
[124.07876587 264.66574097]
[124.07876587 279.66574097]
[124.07876587 294.66574097]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[14 51]
[15 50]
[16 49]
[17 48]
[18 47]
[19 46]
[20 41]
[21 40]
[22 39]
[23 38]
[25 36]
[26 35]
[53 98]
[54 97]
[55 96]
[56 95]
[62 89]
[63 88]
[65 86]
[66 85]
[67 84]
[105 114]
[106 113]
[107 112]
[120 129]
[121 128]
[122 127]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
