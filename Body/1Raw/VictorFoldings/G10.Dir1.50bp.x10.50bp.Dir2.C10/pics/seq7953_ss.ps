%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:42 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGUUAAAGAUUAAGAGAACCAACACCUCUUUACAGUGAAAUGCCCCAACUAAAUACUACCGUxxxxxxxxxxGAAUCAACCCUGACCCCUCUCCUUCAUAAAUUAUUCAGCUUCCUACACUAUUAAAGUUUACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[113.89112091 252.59707642]
[113.89112091 237.59707642]
[113.89112091 222.59707642]
[113.89112091 207.59707642]
[113.89112091 192.59707642]
[113.89112091 177.59707642]
[113.89112091 162.59707642]
[113.89112091 147.59707642]
[113.89112091 132.59707642]
[113.89112091 117.59707642]
[100.36502838 119.81939697]
[89.83155823 113.90499115]
[76.58897400 120.95012665]
[63.34638596 127.99526215]
[50.10380173 135.04039001]
[36.86121368 142.08552551]
[23.61862946 149.13066101]
[26.02548218 164.08010864]
[23.44539070 179.00062561]
[16.15822411 192.27375793]
[4.95444155 202.45971680]
[-8.95065594 208.45362854]
[-24.04874611 209.60531616]
[-38.70210266 205.78984070]
[-51.32123947 197.42108154]
[-60.53732300 185.40681458]
[-65.35066986 171.05027771]
[-65.23915100 155.90873718]
[-60.21487808 141.62463379]
[-50.82283401 129.74742126]
[-38.08180618 121.56542969]
[-23.37384224 117.96619415]
[-8.29435158 119.34012604]
[5.52095461 125.53820038]
[16.57349396 135.88807678]
[29.81608009 128.84294128]
[43.05866623 121.79781342]
[56.30125046 114.75267792]
[69.54383850 107.70754242]
[82.78642273 100.66240692]
[94.85693359 80.85605621]
[119.81855011 89.51927948]
[125.88156128 75.79922485]
[131.94458008 62.07917023]
[138.00758362 48.35911560]
[124.78524017 41.26036835]
[112.14509583 33.17028046]
[100.16133118 24.13633156]
[88.90428162 14.21153736]
[78.44000244 3.45414019]
[68.82990265 -8.07272911]
[60.13037872 -20.30142593]
[52.39248276 -33.16018677]
[45.66162872 -46.57355499]
[39.97731400 -60.46280289]
[35.37289810 -74.74643707]
[31.87539673 -89.34062195]
[29.50534058 -104.15971375]
[28.27663612 -119.11675262]
[28.19649315 -134.12396240]
[29.26538467 -149.09327698]
[31.47703552 -163.93682861]
[34.81846619 -178.56753540]
[39.27006912 -192.89953613]
[44.80572128 -206.84870911]
[51.39293289 -220.33319092]
[58.99305344 -233.27386475]
[67.56147766 -245.59477234]
[77.04792023 -257.22363281]
[87.39671326 -268.09216309]
[98.54711914 -278.13662720]
[110.43371582 -287.29803467]
[122.98673248 -295.52267456]
[136.13250732 -302.76223755]
[149.79389954 -308.97424316]
[163.89073181 -314.12225342]
[178.34028625 -318.17605591]
[193.05775452 -321.11184692]
[207.95677185 -322.91241455]
[222.94990540 -323.56716919]
[237.94917297 -323.07229614]
[252.86653137 -321.43066406]
[267.61447144 -318.65194702]
[282.10641479 -314.75244141]
[296.25732422 -309.75500488]
[309.98416138 -303.68899536]
[323.20639038 -296.58999634]
[335.84637451 -288.49966431]
[347.82995605 -279.46548462]
[359.08682251 -269.54049683]
[369.55090332 -258.78289795]
[379.16079712 -247.25582886]
[387.86007690 -235.02697754]
[395.59771729 -222.16806030]
[402.32833862 -208.75457764]
[408.01239014 -194.86521912]
[412.61651611 -180.58149719]
[416.11373901 -165.98724365]
[418.48352051 -151.16810608]
[419.71194458 -136.21104431]
[419.79180908 -121.20383453]
[418.72262573 -106.23454285]
[416.51071167 -91.39102173]
[413.16900635 -76.76037598]
[408.71710205 -62.42847061]
[403.18121338 -48.47940826]
[396.59371948 -34.99504471]
[388.99337769 -22.05451965]
[380.42471313 -9.73376846]
[370.93804932 1.89490116]
[360.58905029 12.76324844]
[349.43844604 22.80749321]
[337.55169678 31.96868896]
[324.99850464 40.19307709]
[311.85260010 47.43238831]
[298.19107056 53.64414597]
[284.09414673 58.79188919]
[269.64453125 62.84540939]
[254.92700195 65.78092194]
[240.02795410 67.58119965]
[225.03480530 68.23567963]
[210.03555298 67.74051666]
[195.11820984 66.09861755]
[180.37033081 63.31961823]
[165.87846375 59.41982651]
[151.72764587 54.42213058]
[145.66462708 68.14218140]
[139.60160828 81.86223602]
[133.53860474 95.58229065]
[144.22766113 85.05879211]
[158.49986267 80.44314575]
[173.32687378 82.71472168]
[185.56260681 91.39152527]
[192.61082458 104.63246155]
[192.97601318 119.62801361]
[186.58068848 133.19635010]
[174.78182983 142.45848083]
[160.08297729 145.44911194]
[145.60301208 141.53367615]
[134.41436768 131.54296875]
[128.89111328 117.59707642]
[128.89111328 132.59707642]
[128.89111328 147.59707642]
[128.89111328 162.59707642]
[128.89111328 177.59707642]
[128.89111328 192.59707642]
[128.89111328 207.59707642]
[128.89111328 222.59707642]
[128.89111328 237.59707642]
[128.89111328 252.59707642]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[12 40]
[13 39]
[14 38]
[15 37]
[16 36]
[17 35]
[42 129]
[43 128]
[44 127]
[45 126]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
