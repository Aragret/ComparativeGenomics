%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:51 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGAACCUUGUAGAGAGAGUAAAAAAUUUAACACCCAUAGUAGGCCUAAAAGCAGCCACCAAUxxxxxxxxxxUGCUUACCGAACGAAAAAUUCUAGGCUAUAUACAACUACGCAAAGGCCCCAACGUUGUAGCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[134.33955383 387.90945435]
[134.33955383 372.90945435]
[134.33955383 357.90945435]
[134.33955383 342.90945435]
[134.33955383 327.90945435]
[134.33955383 312.90945435]
[134.33955383 297.90945435]
[134.33955383 282.90945435]
[134.33955383 267.90945435]
[134.33955383 252.90943909]
[130.36769104 248.21986389]
[129.24227905 241.41925049]
[132.00320435 234.29067993]
[128.29704285 219.75575256]
[124.59088135 205.22080994]
[120.88471985 190.68588257]
[116.72683716 176.27366638]
[112.12126923 161.99819946]
[107.51570129 147.72273254]
[102.91014099 133.44728088]
[93.12380981 132.86193848]
[83.92380524 129.47448730]
[76.09460449 123.57374573]
[70.30381775 115.66288757]
[63.14141464 126.44036102]
[50.94016647 129.32974243]
[40.40305328 123.30673981]
[25.83035278 126.86150360]
[11.25764942 130.41625977]
[-3.31505322 133.97102356]
[-17.27009773 143.59875488]
[-30.38470840 132.85429382]
[-23.69063377 117.27783966]
[-6.86981535 119.39832306]
[7.70288754 115.84355927]
[22.27559090 112.28879547]
[36.84829330 108.73403168]
[48.82088852 95.94119263]
[66.44665527 101.16728973]
[66.86144257 94.61246490]
[68.54444885 88.26382446]
[71.43126678 82.36432648]
[75.41141510 77.13975525]
[80.33257294 72.79004669]
[86.00640869 69.48166656]
[92.21578217 67.34123230]
[98.72306061 66.45065308]
[101.51538086 51.71284485]
[104.30770874 36.97504044]
[106.63880920 22.15728188]
[108.50642395 7.27400160]
[110.37403870 -7.60927820]
[112.24164581 -22.49255753]
[114.10926056 -37.37583923]
[115.97687531 -52.25911713]
[96.49518585 -56.75247955]
[84.01233673 -81.07541656]
[81.22001648 -95.81322479]
[78.42768860 -110.55103302]
[75.63536835 -125.28883362]
[72.84304047 -140.02664185]
[57.81997681 -141.69966125]
[43.95813751 -147.72799683]
[32.49010849 -157.57562256]
[24.43562126 -170.36688232]
[20.51086998 -184.96441650]
[21.06484604 -200.07019043]
[26.04828835 -214.34101868]
[35.01807022 -226.50796509]
[47.17660904 -235.48913574]
[61.44277573 -240.48593140]
[76.54802704 -241.05403137]
[91.14921570 -237.14294434]
[103.94802094 -229.10043335]
[113.80637360 -217.64163208]
[119.84767914 -203.78543091]
[121.53475189 -188.76394653]
[118.71757507 -173.91285706]
[111.64664459 -160.55271912]
[100.95071411 -149.87149048]
[87.58084869 -142.81896973]
[90.37316895 -128.08116150]
[93.16549683 -113.34335327]
[95.95781708 -98.60555267]
[98.75014496 -83.86774445]
[105.88787842 -81.56496429]
[117.01412201 -91.62511444]
[120.16333771 -76.95939636]
[127.30106354 -74.65661621]
[138.17988586 -84.98381805]
[149.05871582 -95.31102753]
[147.92083740 -110.90715027]
[157.11602783 -123.55557251]
[172.30259705 -127.28408051]
[186.30993652 -120.33219910]
[192.52418518 -105.98238373]
[188.01116943 -91.01018524]
[174.90179443 -82.48501587]
[159.38592529 -84.43219757]
[148.50709534 -74.10499573]
[137.62826538 -63.77779007]
[130.86015320 -50.39150620]
[128.99253845 -35.50822449]
[127.12493134 -20.62494469]
[125.25731659 -5.74166489]
[123.38970184 9.14161491]
[121.52208710 24.02489471]
[123.44139099 27.05536652]
[123.95075989 31.18358994]
[122.54266357 35.71896744]
[119.04550934 39.76736450]
[116.25318909 54.50516891]
[113.46086121 69.24297333]
[130.54943848 86.07445526]
[132.04556274 110.01354980]
[117.18560028 128.84172058]
[121.79116821 143.11717224]
[126.39672852 157.39263916]
[131.00228882 171.66809082]
[134.97628784 175.24957275]
[136.93811035 179.57434082]
[136.94671631 183.73385620]
[135.41966248 186.97972107]
[139.12582397 201.51464844]
[142.83198547 216.04959106]
[146.53814697 230.58451843]
[151.72465515 216.50971985]
[161.76768494 205.36801147]
[175.23045349 198.75335693]
[190.18696594 197.61203003]
[204.49752808 202.10733032]
[216.11485291 211.59616089]
[223.37695312 224.72100830]
[225.24490356 239.60424805]
[221.45146179 254.11665344]
[212.53933716 266.18206787]
[199.78350830 274.07437134]
[185.00883484 276.66452026]
[170.32897949 273.58193970]
[157.84410095 265.26763916]
[149.33955383 252.90943909]
[149.33955383 267.90945435]
[149.33955383 282.90945435]
[149.33955383 297.90945435]
[149.33955383 312.90945435]
[149.33955383 327.90945435]
[149.33955383 342.90945435]
[149.33955383 357.90945435]
[149.33955383 372.90945435]
[149.33955383 387.90945435]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[13 126]
[14 125]
[15 124]
[16 123]
[17 119]
[18 118]
[19 117]
[20 116]
[24 39]
[27 37]
[28 36]
[29 35]
[30 34]
[47 113]
[48 112]
[49 111]
[50 107]
[51 106]
[52 105]
[53 104]
[54 103]
[55 102]
[57 85]
[58 84]
[59 83]
[60 82]
[61 81]
[89 101]
[90 100]
[91 99]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
