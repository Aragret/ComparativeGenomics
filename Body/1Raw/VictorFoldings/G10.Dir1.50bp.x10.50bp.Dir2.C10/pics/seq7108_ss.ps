%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:48 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCCCUAGACCAAACCUACGCCAAAAUCCAUUUCACUAUCAUAUUCAUCGGCGUAAAUCUAAxxxxxxxxxxCUUAUGAGCGGGCACAGUGAUUAUAGGCUUUCGCUCUAAGAUUAAAAAUGCCCUAGCCCACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[96.21157837 375.77114868]
[96.21157837 360.77114868]
[96.21157837 345.77114868]
[96.21157837 330.77114868]
[96.21157837 315.77114868]
[96.21157837 300.77114868]
[96.21157837 285.77114868]
[96.21157837 270.77114868]
[96.21157837 255.77114868]
[96.21157837 240.77114868]
[80.67501831 236.01750183]
[67.33763885 226.70623779]
[57.49829865 213.73023987]
[52.11948013 198.33992004]
[51.73313141 182.02276611]
[56.38809204 166.35955811]
[65.64425659 152.87124634]
[78.61415863 142.87121582]
[94.04803467 137.33749390]
[93.42405701 122.35047150]
[84.68089294 118.73975372]
[77.80062103 111.73675537]
[74.08116913 102.26550293]
[74.37532806 91.73603821]
[78.91451263 81.83515930]
[64.41891479 77.97799683]
[49.92331696 74.12084198]
[35.42771912 70.26367950]
[20.93212318 66.40651703]
[6.43652678 62.54936218]
[-8.49778080 61.14705658]
[-23.45802879 62.23836899]
[-38.41827774 63.32967758]
[-49.95282745 74.48017883]
[-65.84311676 72.27153015]
[-73.89948273 58.39801025]
[-67.94176483 43.50220108]
[-52.54021835 39.01089096]
[-39.50959015 48.36943054]
[-24.54934120 47.27811813]
[-9.58909130 46.18680954]
[-22.79623032 39.07544708]
[-32.84622955 27.94002914]
[-38.57058334 14.07526207]
[-39.30372620 -0.90681046]
[-34.96041489 -15.26423550]
[-26.04564476 -27.32768631]
[-13.59592628 -35.69455719]
[0.94122022 -39.39203644]
[15.87557411 -37.99022675]
[29.47072983 -31.65210724]
[40.14599228 -21.11461258]
[46.66015244 -7.60292482]
[48.25581741 7.31196165]
[44.74746323 21.89590645]
[36.54299927 34.45324707]
[24.59635544 43.52394867]
[10.29368591 48.05376434]
[24.78928185 51.91092300]
[39.28487778 55.76808167]
[53.78047562 59.62524414]
[68.27606964 63.48240280]
[82.77166748 67.33956146]
[97.18388367 63.18167496]
[107.39736176 52.19601059]
[117.61084747 41.21034622]
[127.82432556 30.22467995]
[138.03781128 19.23901558]
[123.44517517 22.71107674]
[108.61808777 20.44006729]
[95.73367310 12.75945091]
[86.68381500 0.79700989]
[82.79734039 -13.69075394]
[84.64492035 -28.57653427]
[91.95526886 -41.67457962]
[103.65496826 -51.06164169]
[118.02610779 -55.35937500]
[132.95849609 -53.93672180]
[146.25952148 -47.00257492]
[155.97616577 -35.57511139]
[160.68167114 -21.33227921]
[159.68508911 -6.36542130]
[153.13317871 7.12727690]
[166.07124329 -0.46263123]
[171.93721008 -7.55080700]
[179.35835266 -8.07264042]
[192.45150757 -15.39174557]
[205.54466248 -22.71085167]
[218.63781738 -30.02995682]
[231.73097229 -37.34906387]
[244.66902161 -44.93897247]
[257.44638062 -52.79639816]
[270.22375488 -60.65382385]
[268.17059326 -75.74369812]
[272.43878174 -90.36226654]
[282.28881836 -101.97676086]
[296.01412964 -108.57490540]
[311.23675537 -109.01353455]
[325.31921387 -103.21664429]
[335.82168579 -92.18858337]
[340.92453003 -77.84004211]
[339.74368286 -62.65697479]
[332.48367310 -49.26995087]
[320.40240479 -39.99834824]
[305.59298706 -36.44853210]
[290.62127686 -39.23552322]
[278.08117676 -47.87646484]
[265.30380249 -40.01903915]
[252.52645874 -32.16161346]
[250.55787659 -27.74570847]
[245.75982666 -24.55038643]
[239.05007935 -24.25590897]
[225.95692444 -16.93680191]
[212.86376953 -9.61769676]
[199.77061462 -2.29859114]
[186.67745972 5.02051449]
[173.66114807 12.47542477]
[160.72309875 20.06533241]
[149.02346802 29.45249557]
[138.80998230 40.43815994]
[128.59651184 51.42382431]
[118.38302612 62.40948868]
[108.16954803 73.39515686]
[117.65507507 79.47258759]
[123.72135162 88.59680176]
[125.54804230 99.08708954]
[123.06964111 109.12520599]
[116.94607544 117.07020569]
[108.41107178 121.72649384]
[109.03504944 136.71351624]
[122.48018646 139.95137024]
[134.60807800 146.57070923]
[144.58605957 156.10946655]
[151.73101807 167.90539551]
[155.55622864 181.14207458]
[155.80444336 194.90534973]
[152.46522522 208.24650574]
[145.77517700 220.24768066]
[136.20120239 230.08497620]
[124.40793610 237.08503723]
[111.21157837 240.77114868]
[111.21157837 255.77114868]
[111.21157837 270.77114868]
[111.21157837 285.77114868]
[111.21157837 300.77114868]
[111.21157837 315.77114868]
[111.21157837 330.77114868]
[111.21157837 345.77114868]
[111.21157837 360.77114868]
[111.21157837 375.77114868]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[19 130]
[20 129]
[25 63]
[26 62]
[27 61]
[28 60]
[29 59]
[30 58]
[31 41]
[32 40]
[33 39]
[64 123]
[65 122]
[66 121]
[67 120]
[68 119]
[83 118]
[84 117]
[86 116]
[87 115]
[88 114]
[89 113]
[90 112]
[91 109]
[92 108]
[93 107]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
