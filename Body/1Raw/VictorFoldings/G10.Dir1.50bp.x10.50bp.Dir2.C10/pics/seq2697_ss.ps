%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:19 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGUUUACCAAAAACAUCACCUCUAGCAUCACCAGUAUUAGAGGCACCGCCUGCCCAGUGACAxxxxxxxxxxUAUCCCUCAACCCCGACAUCAUUACCGGGUUUUCCUCUUGUAAAUAUAGUUUAACCAAAACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[159.37249756 416.41720581]
[159.37249756 401.41720581]
[159.37249756 386.41720581]
[159.37249756 371.41720581]
[159.37249756 356.41720581]
[159.37249756 341.41720581]
[159.37249756 326.41720581]
[159.37249756 311.41720581]
[159.37249756 296.41720581]
[159.37249756 281.41720581]
[156.88739014 266.62451172]
[151.98583984 252.44793701]
[147.08428955 238.27137756]
[142.18273926 224.09481812]
[137.28118896 209.91825867]
[125.80973816 200.41798401]
[128.61280823 184.84707642]
[123.12577820 170.88668823]
[117.06276703 157.16662598]
[110.99974823 143.44657898]
[104.93673706 129.72651672]
[98.87372589 116.00646973]
[94.90251923 130.47123718]
[80.81066132 135.61122131]
[68.45906830 127.10015869]
[68.24391174 112.10170746]
[80.34636688 103.23983765]
[65.36665344 102.45999146]
[50.38693619 101.68014526]
[35.40722275 100.90029907]
[20.42750931 100.12045288]
[5.44779396 99.34060669]
[-1.42365015 112.93115997]
[-13.23290348 122.54685211]
[-27.93394089 126.52169037]
[-42.97971725 124.16703033]
[-55.76346588 115.89081573]
[-64.07032013 103.12696075]
[-66.46106720 88.08686829]
[-62.52149963 73.37634277]
[-52.93416977 61.54405594]
[-39.36013794 54.64003372]
[-24.15118980 53.86043167]
[-9.94236660 59.34032440]
[0.80456680 70.13028717]
[6.22763920 84.36089325]
[21.20735359 85.14073944]
[36.18706894 85.92058563]
[51.16678238 86.70043182]
[66.14649963 87.48027802]
[81.12621307 88.26012421]
[87.13973999 87.63697052]
[92.45088959 88.86723328]
[96.58258057 91.60617065]
[99.98555756 76.99727631]
[103.38853455 62.38838577]
[89.29003906 57.21035767]
[75.93474579 50.33898926]
[63.52511215 41.87845612]
[52.24926758 31.95701790]
[42.27815247 20.72507668]
[33.76292419 8.35290909]
[26.83267593 -4.97192669]
[21.59246445 -19.04743004]
[18.12173080 -33.66022110]
[16.47309113 -48.58877182]
[16.67153931 -63.60676575]
[18.71406364 -78.48654175]
[22.56970215 -93.00252533]
[28.18000412 -106.93464661]
[35.45991898 -120.07170868]
[44.29908752 -132.21455383]
[54.56350327 -143.17910767]
[66.09756470 -152.79914856]
[78.72642517 -160.92881775]
[92.25862122 -167.44490051]
[106.48901367 -172.24858093]
[121.20187378 -175.26707458]
[136.17416382 -176.45460510]
[151.17889404 -175.79316711]
[165.98861694 -173.29278564]
[180.37879944 -168.99137878]
[194.13130188 -162.95413208]
[207.03764343 -155.27259827]
[218.90216064 -146.06320190]
[229.54498291 -135.46557617]
[238.80479431 -123.64035034]
[246.54118347 -110.76682281]
[252.63688660 -97.04013062]
[256.99951172 -82.66838074]
[259.56286621 -67.86943817]
[260.28814697 -52.86765289]
[259.16436768 -37.89044571]
[256.20849609 -23.16487122]
[251.46540833 -8.91416454]
[245.00697327 4.64563942]
[236.93112183 17.30897522]
[227.36026001 28.88387299]
[216.43948364 39.19485474]
[204.33436584 48.08561325]
[191.22839355 55.42136765]
[177.32026672 61.09090805]
[162.82083130 65.00828552]
[147.94987488 67.11410522]
[132.93286133 67.37646484]
[117.99742889 65.79136658]
[114.59445190 80.40026093]
[111.19147491 95.00914764]
[112.59378052 109.94345856]
[118.65679169 123.66351318]
[124.71980286 137.38356018]
[130.78282166 151.10362244]
[136.84582520 164.82366943]
[140.56996155 167.33212280]
[143.01730347 170.58505249]
[144.11093140 174.07588196]
[143.95108032 177.32679749]
[142.78936768 179.94552612]
[154.61140442 190.45980835]
[151.45774841 205.01670837]
[156.35929871 219.19326782]
[161.26084900 233.36982727]
[166.16239929 247.54638672]
[171.06394958 261.72296143]
[174.54003906 247.13127136]
[182.71670532 234.55583191]
[194.64326477 225.45872498]
[208.93301392 220.89768982]
[223.92449951 221.40301514]
[237.87467957 226.91596985]
[249.16156006 236.79554749]
[256.47283936 249.89306641]
[258.95846558 264.68569946]
[256.32937622 279.45349121]
[248.89129639 292.47943115]
[237.50904846 302.24899292]
[223.50602722 307.62628174]
[208.51033020 307.98608398]
[194.26553345 303.28656006]
[182.42784119 294.07409668]
[174.37249756 281.41720581]
[174.37249756 296.41720581]
[174.37249756 311.41720581]
[174.37249756 326.41720581]
[174.37249756 341.41720581]
[174.37249756 356.41720581]
[174.37249756 371.41720581]
[174.37249756 386.41720581]
[174.37249756 401.41720581]
[174.37249756 416.41720581]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[11 124]
[12 123]
[13 122]
[14 121]
[15 120]
[17 118]
[18 113]
[19 112]
[20 111]
[21 110]
[22 109]
[27 51]
[28 50]
[29 49]
[30 48]
[31 47]
[32 46]
[54 108]
[55 107]
[56 106]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
