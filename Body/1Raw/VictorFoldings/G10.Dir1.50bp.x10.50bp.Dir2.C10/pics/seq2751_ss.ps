%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:24 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGGCCGCGGUACCCUAACCGUGCAAAGGUAGCAUAAUCACUUGUUCCUUAAAUAGGGACCUGxxxxxxxxxxACGAAAAUCUGUUCGCUUCAUUCAUUGCCCCCACAAUCCUAGGCCUACCCGCCGCAGUACCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[129.03784180 295.22705078]
[128.72578430 280.23028564]
[128.41372681 265.23355103]
[128.10168457 250.23678589]
[127.78961945 235.24003601]
[127.47756195 220.24328613]
[127.16551208 205.24652100]
[126.85345459 190.24977112]
[126.54139709 175.25302124]
[123.90253448 160.48696899]
[119.00098419 146.31040955]
[114.09943390 132.13385010]
[109.19787598 117.95729065]
[94.78565979 113.79940033]
[83.08603668 123.18656158]
[71.38641357 132.57373047]
[59.68679428 141.96089172]
[47.98716736 151.34805298]
[46.51369095 167.08349609]
[34.29199982 177.10377502]
[18.57300758 175.46400452]
[8.68251228 163.13705444]
[10.48837185 147.43627930]
[22.91919899 137.67666626]
[38.60000610 139.64842224]
[50.29962921 130.26126099]
[61.99925613 120.87409973]
[73.69887543 111.48693848]
[85.39849854 102.09977722]
[90.00406647 87.82431793]
[85.99632263 73.36962891]
[81.98858643 58.91493988]
[77.98084259 44.46025467]
[45.27130508 29.85094261]
[32.66017914 21.72939873]
[20.04904938 13.60785770]
[7.43792152 5.48631525]
[-1.80412507 16.56691170]
[-20.50254822 18.97917175]
[-34.72932816 14.22535610]
[-48.95610809 9.47154140]
[-61.50643158 18.59672546]
[-77.02348328 18.56859016]
[-89.54063416 9.39795685]
[-94.24478912 -5.38888073]
[-89.32710266 -20.10608101]
[-76.67852783 -29.09457970]
[-61.16269302 -28.89811707]
[-48.74576187 -19.59223557]
[-44.20229340 -4.75523806]
[-29.97551346 -0.00142303]
[-15.74873352 4.75239182]
[-7.23764372 -7.59918070]
[-16.74600220 -19.20052147]
[-26.25436020 -30.80186272]
[-35.76271820 -42.40320587]
[-51.52137756 -45.41056442]
[-58.86769485 -59.67279053]
[-52.16620636 -74.24913025]
[-36.55772018 -77.95785522]
[-24.01572800 -67.95395660]
[-24.16137695 -51.91156387]
[-14.65301895 -40.31022263]
[-5.14466095 -28.70888138]
[4.36369753 -17.10754013]
[15.55946350 -7.12481260]
[28.17059135 0.99672937]
[40.78171921 9.11827183]
[53.39284897 17.23981285]
[60.69729614 15.53832436]
[53.52366257 2.36490393]
[46.35003281 -10.80851650]
[36.69883728 -22.29130554]
[36.41916656 -37.28869629]
[45.63554001 -49.12332916]
[60.24450302 -52.52600098]
[73.74163055 -45.98173141]
[80.11753082 -32.40425110]
[76.53393555 -17.83951950]
[75.92005920 -2.85208654]
[75.30619049 12.13534641]
[82.61063385 10.43385792]
[90.33471680 -2.42454457]
[98.05879974 -15.28294659]
[105.78289032 -28.14134979]
[101.71501160 -43.41315079]
[109.70956421 -57.04629517]
[125.02352142 -60.95248413]
[138.57138062 -52.81423950]
[142.31544495 -37.45983887]
[134.03440857 -23.99877930]
[118.64128876 -20.41726494]
[110.91720581 -7.55886221]
[103.19312286 5.29954052]
[95.46903229 18.15794182]
[106.47238159 7.96351767]
[121.16718292 4.95303297]
[135.29286194 9.99933910]
[144.75386047 21.63932610]
[146.80711365 36.49813461]
[140.85728455 50.26765060]
[128.62945557 58.95558167]
[113.66892242 60.04298401]
[100.31329346 53.21457291]
[92.43553162 40.45251465]
[96.44327545 54.90719986]
[100.45101166 69.36189270]
[104.45875549 83.81658173]
[105.59177399 68.85942841]
[112.23705292 55.41174316]
[123.42987823 45.42572021]
[137.54539490 40.35104370]
[152.53442383 40.92440414]
[166.22102356 47.06256866]
[176.61828613 57.87445450]
[182.21684265 71.79049683]
[182.20394897 86.79048920]
[176.58146667 100.69687653]
[166.16561890 111.49086761]
[152.46849060 117.60548401]
[137.47848511 118.15306091]
[123.37443542 113.05574036]
[128.27598572 127.23229980]
[133.17753601 141.40885925]
[138.07908630 155.58541870]
[141.69357300 141.02740479]
[150.23997498 128.70024109]
[162.60536194 120.20924377]
[177.17944336 116.66013336]
[192.06430054 118.51509857]
[205.32156372 125.53258514]
[215.22479248 136.79873657]
[220.48432922 150.84640503]
[220.41528320 165.84625244]
[215.02659607 179.84489441]
[205.02006531 191.01937866]
[191.69874573 197.91450500]
[176.79743958 199.63233948]
[162.25665283 195.94917297]
[149.96997070 187.34466553]
[141.53814697 174.94096375]
[141.85020447 189.93771362]
[142.16226196 204.93447876]
[142.47431946 219.93122864]
[142.78637695 234.92797852]
[143.09843445 249.92472839]
[143.41049194 264.92147827]
[143.72254944 279.91824341]
[144.03460693 294.91500854]
[146.62559509 314.12271118]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 149]
[2 148]
[3 147]
[4 146]
[5 145]
[6 144]
[7 143]
[8 142]
[9 141]
[10 125]
[11 124]
[12 123]
[13 122]
[14 29]
[15 28]
[16 27]
[17 26]
[18 25]
[30 108]
[31 107]
[32 106]
[33 105]
[34 69]
[35 68]
[36 67]
[37 66]
[39 52]
[40 51]
[41 50]
[53 65]
[54 64]
[55 63]
[56 62]
[82 95]
[83 94]
[84 93]
[85 92]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
