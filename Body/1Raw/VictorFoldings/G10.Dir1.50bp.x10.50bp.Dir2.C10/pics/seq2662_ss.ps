%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:42 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGAACACAGGCAUGCUCAUAAGGAAAGGUUAAAAAAAGUAAAAGGAACUCGGCAAAUCUUACxxxxxxxxxxUCCCCACCUUGGCUAUCAUCACCCGAUGAGGCAACCAGCCAGAACGCCUGAACGCAGGCACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[108.77523041 402.58352661]
[108.77523041 387.58352661]
[108.77523041 372.58352661]
[108.77523041 357.58352661]
[108.77523041 342.58352661]
[108.77523041 327.58352661]
[108.77523041 312.58352661]
[108.77523041 297.58352661]
[108.77523041 282.58352661]
[108.77523041 267.58352661]
[90.67601013 258.80780029]
[79.38630676 242.06979370]
[78.01994324 221.85131836]
[87.02136993 203.61198425]
[104.02521515 192.31483459]
[102.15760040 177.43154907]
[100.28998566 162.54826355]
[98.42237091 147.66499329]
[96.55476379 132.78170776]
[76.56595612 123.18093109]
[67.18280792 103.08904266]
[72.65190887 81.59912872]
[62.43843079 70.61346436]
[52.22495270 59.62779999]
[47.10878754 58.06432343]
[43.50125885 54.97593689]
[41.73340607 51.21078491]
[41.74355316 47.62367249]
[32.23519516 36.02233124]
[22.72683525 24.42098999]
[13.21847630 12.81964874]
[-2.16723132 13.58527088]
[-14.90471554 5.24201775]
[-20.22407532 -8.83521271]
[-16.28138733 -23.17373466]
[-25.78974724 -34.77507401]
[-39.17131805 -27.88215256]
[-53.68799973 -23.92378235]
[-68.70462036 -23.07064629]
[-83.56465912 -25.35760498]
[-97.61894226 -30.68229103]
[-110.25400543 -38.80968475]
[-120.91887665 -49.38248444]
[-129.14910889 -61.93682098]
[-134.58697510 -75.92259979]
[-136.99705505 -90.72762299]
[-136.27639771 -105.70434570]
[-132.45893860 -120.19824219]
[-125.71389771 -133.57641602]
[-116.33826447 -145.25515747]
[-125.84662628 -156.85650635]
[-135.35498047 -168.45783997]
[-150.03027344 -164.38899231]
[-165.09082031 -166.64730835]
[-177.92727661 -174.84152222]
[-186.31565857 -187.55194092]
[-188.80262756 -202.57643127]
[-184.95729065 -217.31187439]
[-175.44589233 -229.20527649]
[-161.91633606 -236.19604492]
[-146.71269226 -237.07296753]
[-132.46907043 -231.68414307]
[-121.65330505 -220.96318054]
[-116.13925171 -206.76757812]
[-116.88227844 -191.55679321]
[-123.75364685 -177.96620178]
[-114.24528503 -166.36486816]
[-104.73692322 -154.76351929]
[-91.44449615 -161.66331482]
[-77.00230408 -165.65002441]
[-62.04096603 -166.54705811]
[-47.21431732 -164.31277466]
[-33.17079926 -159.04241943]
[-20.52512169 -150.96409607]
[-9.83134079 -140.42886353]
[-1.55859721 -127.89550018]
[3.92947125 -113.91049194]
[6.39071369 -99.08425140]
[5.71514845 -84.06444550]
[1.92987549 -69.50771332]
[-4.80200243 -56.05094147]
[-14.18840504 -44.28343582]
[-4.68004704 -32.68209457]
[10.15352345 -33.73242950]
[22.91214180 -25.75234985]
[28.59175682 -11.62452793]
[24.81981850 3.31129050]
[34.32817459 14.91263199]
[43.83653641 26.51397324]
[53.34489441 38.11531448]
[63.21061707 49.41431808]
[73.42409515 60.39998245]
[83.63757324 71.38565063]
[97.14409637 64.93218994]
[113.06931305 64.95190430]
[128.29148865 72.25279236]
[141.81568909 65.76462555]
[155.33987427 59.27646255]
[168.86405945 52.78829575]
[182.38825989 46.30012894]
[191.19470215 32.46616364]
[207.56454468 33.44601440]
[214.65789795 48.23169327]
[205.17773438 61.61296082]
[188.87641907 59.82432175]
[175.35223389 66.31248474]
[161.82803345 72.80065155]
[148.30384827 79.28881836]
[134.77966309 85.77697754]
[137.57199097 100.51478577]
[152.53222656 101.60609436]
[167.49247742 102.69741058]
[180.52311707 93.33886719]
[195.92465210 97.83017731]
[201.88237000 112.72599030]
[193.82601929 126.59951019]
[177.93571472 128.80816650]
[166.40116882 117.65765381]
[151.44091797 116.56634521]
[136.48066711 115.47503662]
[133.09385681 119.70555115]
[129.25099182 123.31427002]
[125.05652618 126.25791931]
[120.61790466 128.50981140]
[116.04309082 130.05984497]
[111.43804169 130.91409302]
[113.30565643 145.79737854]
[115.17327118 160.68064880]
[117.04087830 175.56393433]
[118.90849304 190.44721985]
[128.95472717 192.52760315]
[138.10513306 197.12913513]
[145.74031067 203.93041992]
[151.34600830 212.46153259]
[154.54777527 222.13641357]
[155.13587952 232.29318237]
[153.07911682 242.23941040]
[148.52626038 251.29931641]
[141.79541016 258.85968018]
[133.35169983 264.41134644]
[123.77523041 267.58352661]
[123.77523041 282.58352661]
[123.77523041 297.58352661]
[123.77523041 312.58352661]
[123.77523041 327.58352661]
[123.77523041 342.58352661]
[123.77523041 357.58352661]
[123.77523041 372.58352661]
[123.77523041 387.58352661]
[123.77523041 402.58352661]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[15 130]
[16 129]
[17 128]
[18 127]
[19 126]
[22 93]
[23 92]
[24 91]
[28 90]
[29 89]
[30 88]
[31 87]
[35 83]
[36 82]
[50 68]
[51 67]
[52 66]
[96 109]
[97 108]
[98 107]
[99 106]
[100 105]
[110 120]
[111 119]
[112 118]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
