%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:32 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGUCCUACUCCUGCUCGCAUCUGCUAUAGUGGAGGCCGGAGCAGGAACAGGUUGAACAGUCUxxxxxxxxxxAACCCAAUACCAAACGCCCCUCUUCGUCUGAUCCGUCCUAAUCACAGCAGUCCUACUUCUCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[56.46070480 637.75366211]
[56.46070480 622.75366211]
[56.46070480 607.75366211]
[56.46070480 592.75366211]
[56.46070480 577.75366211]
[56.46070480 562.75366211]
[56.46070480 547.75366211]
[56.46070480 532.75366211]
[56.46070480 517.75366211]
[56.46070480 502.75369263]
[40.92414093 498.00003052]
[27.58675957 488.68878174]
[17.74742126 475.71276855]
[12.36860180 460.32244873]
[11.98225307 444.00531006]
[16.63721657 428.34210205]
[25.89338303 414.85379028]
[38.86328125 404.85375977]
[54.29715347 399.32003784]
[53.67317581 384.33300781]
[53.04919815 369.34597778]
[52.42522049 354.35897827]
[51.80124283 339.37194824]
[43.81346893 352.06823730]
[31.41559792 360.51174927]
[16.67587090 363.29391479]
[2.05320525 359.95059204]
[-10.01300812 351.03958130]
[-17.50985527 338.04736328]
[-19.18669510 323.14138794]
[-14.76379013 308.80828857]
[-4.97898197 297.43914795]
[8.53540325 290.93057251]
[23.52486420 290.36837769]
[37.48882294 295.84631348]
[48.09777451 306.45056152]
[53.58167267 320.41070557]
[56.98464966 305.80178833]
[60.38762665 291.19290161]
[63.79060745 276.58401489]
[66.88893127 261.90750122]
[69.68125153 247.16969299]
[72.47357941 232.43188477]
[67.24076843 218.48674011]
[77.41178894 206.36811829]
[80.20411682 191.63032532]
[82.99643707 176.89251709]
[85.78876495 162.15470886]
[80.55595398 148.20956421]
[90.72698212 136.09095764]
[93.51930237 121.35314941]
[96.31163025 106.61534119]
[90.34535217 109.05525970]
[82.93779755 108.12800598]
[75.66413116 103.32444000]
[70.22686768 94.79609680]
[68.19889069 83.36952209]
[70.77445984 70.46620178]
[70.15048218 55.47918320]
[69.52650452 40.49216843]
[68.59088135 25.52137756]
[67.34400177 10.57328987]
[52.49357224 7.90362263]
[38.84053421 1.48046899]
[27.31577110 -8.25822926]
[18.70506287 -20.64847183]
[13.59550095 -34.84547043]
[12.33546543 -49.88125229]
[15.01086712 -64.73065186]
[21.43929100 -78.38121033]
[31.18243980 -89.90221405]
[43.57600784 -98.50814056]
[57.77497864 -103.61221313]
[72.81124115 -104.86644745]
[87.65960693 -102.18531036]
[101.30768585 -95.75161743]
[112.82492065 -86.00402069]
[121.42606354 -73.60713196]
[126.52465820 -59.40619278]
[127.77307892 -44.36944199]
[125.08621216 -29.52211380]
[118.64724731 -15.87652206]
[108.89521027 -4.36304760]
[96.49500275 4.23330307]
[82.29209137 9.32641602]
[83.53896332 24.27450180]
[86.59156799 28.02379036]
[87.27822113 33.74740982]
[84.51352692 39.86819077]
[85.13750458 54.85520935]
[85.76147461 69.84222412]
[92.34577179 73.43347931]
[105.51435089 80.61598969]
[112.09864044 84.20724487]
[125.03669739 76.61733246]
[137.97476196 69.02742767]
[139.35559082 53.57191086]
[149.58258057 41.90193558]
[164.72323608 38.50483704]
[178.95565796 44.68687820]
[186.80720520 58.07093048]
[185.25878906 73.51055145]
[174.90580750 85.06890106]
[159.72918701 88.30155182]
[145.56466675 81.96547699]
[132.62660217 89.55538940]
[119.68855286 97.14529419]
[111.04943848 109.40766907]
[108.25711060 124.14546967]
[105.46479034 138.88327026]
[110.49787140 153.88256836]
[100.52657318 164.94703674]
[97.73424530 179.68484497]
[94.94192505 194.42263794]
[92.14959717 209.16044617]
[97.18268585 224.15974426]
[87.21138000 235.22421265]
[84.41905975 249.96200562]
[81.62673187 264.69982910]
[83.47389984 271.15701294]
[81.96389008 276.72039795]
[78.39949799 279.98699951]
[74.99652100 294.59588623]
[71.59354401 309.20477295]
[68.19056702 323.81365967]
[66.78826141 338.74798584]
[67.41223907 353.73498535]
[68.03621674 368.72201538]
[68.66019440 383.70901489]
[69.28417206 398.69604492]
[82.72930908 401.93389893]
[94.85720062 408.55325317]
[104.83518219 418.09201050]
[111.98014069 429.88793945]
[115.80535126 443.12460327]
[116.05356598 456.88787842]
[112.71434784 470.22903442]
[106.02429962 482.23022461]
[96.45032501 492.06750488]
[84.65705872 499.06756592]
[71.46070862 502.75369263]
[71.46070862 517.75366211]
[71.46070862 532.75366211]
[71.46070862 547.75366211]
[71.46070862 562.75366211]
[71.46070862 577.75366211]
[71.46070862 592.75366211]
[71.46070862 607.75366211]
[71.46070862 622.75366211]
[71.46070862 637.75366211]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[19 130]
[20 129]
[21 128]
[22 127]
[23 126]
[37 125]
[38 124]
[39 123]
[40 122]
[41 119]
[42 118]
[43 117]
[45 115]
[46 114]
[47 113]
[48 112]
[50 110]
[51 109]
[52 108]
[58 91]
[59 90]
[60 89]
[61 86]
[62 85]
[94 107]
[95 106]
[96 105]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
