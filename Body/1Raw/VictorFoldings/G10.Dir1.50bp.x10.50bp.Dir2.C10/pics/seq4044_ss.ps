%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:41 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGAAUACGCCGCAGGCCCCUUCGCCCUAUUCUUCAUAGCCGAAUACACAAACAUUAUUAUAAUxxxxxxxxxxGGGUCAAUAGUACUUGCCGCAGUACUCUUAAAACUAGGCGGCUAUGGUAUAAUACGCCUCACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[92.50000000 259.63290405]
[92.50000000 244.63290405]
[92.50000000 229.63290405]
[92.50000000 214.63290405]
[92.50000000 199.63290405]
[92.50000000 184.63290405]
[92.50000000 169.63290405]
[92.50000000 154.63290405]
[92.50000000 139.63290405]
[92.50000000 124.63290405]
[85.62358856 121.63875580]
[84.17820740 136.56895447]
[69.53209686 139.80798340]
[61.92572021 126.87960815]
[71.87075806 115.65045929]
[64.99433899 112.65631104]
[54.01353836 122.87502289]
[43.03273773 133.09373474]
[35.55669785 148.31033325]
[18.86518478 145.33883667]
[17.09988594 128.47705078]
[32.81402969 122.11292267]
[43.79483414 111.89421844]
[54.77563477 101.67551422]
[54.15980911 86.68815613]
[42.37767410 77.40476990]
[30.59553528 68.12139130]
[16.55355835 62.84664536]
[1.57331777 62.07698441]
[-13.40692329 61.30732727]
[-28.38716507 60.53766632]
[-38.50544357 68.60141754]
[-51.00339890 67.61526489]
[-59.18914413 58.65670776]
[-74.15042114 57.57963562]
[-89.11170197 56.50256729]
[-104.07298279 55.42549896]
[-117.09470367 64.79643250]
[-132.50051880 60.31978989]
[-138.47241211 45.42965698]
[-130.42926025 31.54847527]
[-114.54107666 29.32469749]
[-102.99591827 40.46421814]
[-88.03463745 41.54128647]
[-73.07335663 42.61835480]
[-58.11207199 43.69542694]
[-42.79620743 35.18256760]
[-27.61750412 45.55742645]
[-12.63726330 46.32708359]
[2.34297800 47.09674454]
[17.32321930 47.86640549]
[5.03535509 39.26359177]
[-5.37783575 28.46704292]
[-13.53097820 15.87632179]
[-19.12233925 1.95738924]
[-21.94499207 -12.77463818]
[-21.89447594 -27.77455330]
[-18.97265816 -42.48723221]
[-13.28767014 -56.36819077]
[-5.04990578 -68.90370941]
[5.43577003 -79.62987518]
[17.78129959 -88.14972687]
[31.52979660 -94.14795685]
[46.17245483 -97.40259552]
[61.16736603 -97.79317474]
[75.95960236 -95.30525208]
[90.00172424 -90.03089905]
[102.77405548 -82.16530609]
[113.80391693 -71.99957275]
[122.68311310 -59.90991211]
[129.08303833 -46.34373856]
[132.76683044 -31.80311966]
[133.59817505 -16.82617569]
[131.54629517 -1.96717727]
[126.68714142 12.22396660]
[119.20052338 25.22206688]
[109.36352539 36.54608536]
[97.54018402 45.77693939]
[84.16807556 52.57301331]
[69.74206543 56.68278885]
[54.79604340 57.95417786]
[39.87892151 56.33924866]
[51.66105652 65.62263489]
[63.44319534 74.90602112]
[84.00965118 65.27809906]
[103.40031433 68.06739807]
[115.60458374 79.20432281]
[118.39678955 92.45086670]
[133.04951477 89.24187469]
[147.70223999 86.03287506]
[159.52764893 75.52239227]
[173.61552429 80.35778046]
[188.26824951 77.14878082]
[194.20307922 65.01670074]
[205.88099670 58.62862778]
[218.91073608 60.13026810]
[228.53872681 68.74733734]
[243.25425720 65.83985901]
[257.96978760 62.93238831]
[272.68530273 60.02491760]
[287.40081787 57.11744690]
[302.05355835 53.90844727]
[316.63729858 50.39928055]
[331.22103882 46.89011383]
[336.19683838 32.28719711]
[348.29183960 22.71045685]
[363.64663696 21.21579361]
[377.36154175 28.28015137]
[385.06018066 41.64931870]
[384.28591919 57.05723953]
[375.28588867 69.58731079]
[360.93188477 75.24121857]
[345.80429077 72.21483612]
[334.73022461 61.47386551]
[320.14645386 64.98303223]
[305.56271362 68.49219513]
[302.32339478 72.07772827]
[296.77508545 73.62827301]
[290.30828857 71.83296967]
[275.59277344 74.74044037]
[260.87725830 77.64791107]
[246.16172791 80.55538177]
[231.44621277 83.46286011]
[222.72050476 97.80738068]
[205.99742126 101.50469208]
[191.47724915 91.80150604]
[176.82452393 95.01050568]
[166.04718018 105.29145813]
[150.91123962 100.68560028]
[136.25851440 103.89459991]
[121.60578918 107.10359192]
[136.00323486 111.31232452]
[150.99427795 110.79386902]
[164.34901428 117.62401581]
[172.70326233 130.08219910]
[173.95252991 145.03009033]
[167.78210449 158.70216370]
[155.74636841 167.65432739]
[140.87722778 169.63140869]
[126.92037201 164.13540649]
[117.39165497 152.55078125]
[114.69138336 137.79664612]
[107.50000000 124.63290405]
[107.50000000 139.63290405]
[107.50000000 154.63290405]
[107.50000000 169.63290405]
[107.50000000 184.63290405]
[107.50000000 199.63290405]
[107.50000000 214.63290405]
[107.50000000 229.63290405]
[107.50000000 244.63290405]
[107.50000000 259.63290405]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 152]
[2 151]
[3 150]
[4 149]
[5 148]
[6 147]
[7 146]
[8 145]
[9 144]
[10 143]
[16 24]
[17 23]
[18 22]
[25 84]
[26 83]
[27 82]
[28 51]
[29 50]
[30 49]
[31 48]
[34 46]
[35 45]
[36 44]
[37 43]
[88 131]
[89 130]
[90 129]
[92 127]
[93 126]
[97 123]
[98 122]
[99 121]
[100 120]
[101 119]
[102 116]
[103 115]
[104 114]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
