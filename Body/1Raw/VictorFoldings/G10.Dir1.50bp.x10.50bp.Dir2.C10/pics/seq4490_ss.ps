%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:47 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGAUAAUAGGAGCUUAAACCCCCUUAUUUCUAGGACUAUGAGAAUCGAACCCAUCCCUGAGAxxxxxxxxxxUCGUCACAGCCCAUGCAUUUGUAAUAAUCUUCUUCAUAGUAAUACCCAUCAUAAUCGGAGCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[82.13795471 285.72186279]
[82.13795471 270.72186279]
[82.13795471 255.72187805]
[82.13795471 240.72187805]
[82.13795471 225.72187805]
[82.13795471 210.72187805]
[82.13795471 195.72187805]
[82.13795471 180.72187805]
[82.13795471 165.72187805]
[82.13795471 150.72187805]
[68.82279968 143.81488037]
[56.56043243 152.45399475]
[44.29806137 161.09310913]
[32.03569412 169.73222351]
[29.20908356 185.05044556]
[16.65023041 193.63705444]
[2.06406355 190.84791565]
[-10.19830418 199.48703003]
[-9.43925285 214.89570618]
[-17.15105820 228.25727844]
[-30.87290955 235.30812073]
[-46.22621918 233.79832458]
[-58.31179428 224.20967102]
[-63.27318192 209.60185242]
[-59.52721024 194.63618469]
[-48.26921463 184.08815002]
[-33.09157181 181.32359314]
[-18.83742142 187.22467041]
[-6.57505274 178.58555603]
[-4.29199171 163.91165161]
[8.02072620 154.97567749]
[23.39657784 157.46986389]
[35.65894699 148.83073425]
[47.92131424 140.19161987]
[60.18368149 131.55250549]
[51.68532944 113.10030365]
[51.17051315 93.09080505]
[58.48711395 74.78151703]
[72.22712708 61.06030655]
[89.99086761 53.99026871]
[108.80388641 54.50141907]
[113.99929810 40.42990112]
[118.45611572 26.10730362]
[122.16227722 11.57236671]
[125.86843872 -2.96256924]
[129.57460022 -17.49750519]
[133.28076172 -32.03244019]
[136.98692322 -46.56737900]
[140.69308472 -61.10231400]
[144.24784851 -75.67501831]
[147.65081787 -90.28391266]
[151.05380249 -104.89279938]
[137.25679016 -128.14764404]
[149.87648010 -151.48332214]
[145.56889343 -165.85151672]
[141.26130676 -180.21969604]
[126.20501709 -179.46365356]
[111.40543365 -182.33348083]
[97.72299194 -188.66232300]
[85.95317078 -198.08222961]
[76.78024292 -210.04554749]
[70.73752594 -223.85673523]
[68.17631531 -238.71282959]
[69.24552917 -253.75012207]
[73.88300323 -268.09436035]
[81.81912231 -280.91159058]
[92.59249115 -291.45663452]
[105.57675171 -299.11642456]
[120.01702881 -303.44561768]
[135.07377625 -304.19253540]
[149.87161255 -301.31375122]
[163.55020142 -294.97662354]
[175.31431580 -285.54956055]
[184.47999573 -273.58068848]
[190.51434326 -259.76583862]
[193.06654358 -244.90820312]
[191.98820496 -229.87155151]
[187.34204102 -215.53012085]
[179.39814758 -202.71771240]
[168.61839294 -192.17919922]
[155.62948608 -184.52728271]
[159.93707275 -170.15908813]
[164.24465942 -155.79090881]
[168.58375549 -155.46147156]
[172.81137085 -154.43022156]
[176.81477356 -152.72463989]
[187.25457764 -163.49545288]
[197.69439697 -174.26626587]
[207.79304504 -185.35757446]
[217.54069519 -196.75860596]
[220.00398254 -212.97169495]
[235.37304688 -218.69215393]
[247.83752441 -208.03527832]
[244.57501221 -191.96392822]
[228.94171143 -187.01094055]
[219.19406128 -175.60992432]
[219.12957764 -172.02337646]
[217.28378296 -168.29582214]
[213.61277771 -165.28315735]
[208.46519470 -163.82644653]
[198.02539062 -153.05564880]
[187.58557129 -142.28483582]
[190.27658081 -136.04251099]
[191.30949402 -129.29048157]
[190.60098267 -122.46364594]
[188.18043518 -116.00597382]
[184.18905640 -110.34162903]
[178.87187195 -105.84711456]
[172.56256104 -102.82629395]
[165.66268921 -101.48982239]
[162.25971985 -86.88092804]
[158.85673523 -72.27204132]
[160.41244507 -64.99704742]
[155.22801208 -57.39615250]
[151.52185059 -42.86121750]
[147.81570435 -28.32628059]
[144.10954285 -13.79134464]
[140.40338135 0.74359190]
[136.69721985 15.27852821]
[132.99105835 29.81346512]
[147.15243530 24.86825752]
[159.96051025 32.67551422]
[162.05360413 47.52876282]
[151.90184021 58.57147598]
[136.92532349 57.73233032]
[128.07081604 45.62531662]
[122.87540436 59.69683456]
[130.33712769 64.54698944]
[136.78129578 70.77287292]
[141.95547485 78.16284180]
[145.65093994 86.45921326]
[147.71099854 95.36720276]
[148.03750610 104.56538391]
[146.59535217 113.71733093]
[143.41447449 122.48385620]
[138.58973694 130.53564453]
[132.27812195 137.56556702]
[124.69377136 143.30039978]
[116.10075378 147.51141357]
[106.80389404 150.02339172]
[97.13795471 150.72187805]
[97.13795471 165.72187805]
[97.13795471 180.72187805]
[97.13795471 195.72187805]
[97.13795471 210.72187805]
[97.13795471 225.72187805]
[97.13795471 240.72187805]
[97.13795471 255.72187805]
[97.13795471 270.72186279]
[97.13795471 285.72186279]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[11 35]
[12 34]
[13 33]
[14 32]
[17 29]
[18 28]
[41 127]
[42 126]
[43 120]
[44 119]
[45 118]
[46 117]
[47 116]
[48 115]
[49 114]
[50 112]
[51 111]
[52 110]
[54 83]
[55 82]
[56 81]
[86 102]
[87 101]
[88 100]
[89 96]
[90 95]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
