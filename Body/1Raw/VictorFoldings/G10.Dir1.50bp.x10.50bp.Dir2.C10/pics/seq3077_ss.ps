%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:34 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGAUAAGGCCUACUUCACAAAGCGCCUUCCCCCGUAAAUGAUAUCAUCUCAACUUAGUAUUAxxxxxxxxxxGCCUGCGAAGCAGCGGUGGGCCUAGCCCUACUAGUCUCAAUCUCCAACACAUAUGGCCUACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[109.59590912 285.12237549]
[109.59590912 270.12237549]
[109.59590912 255.12237549]
[109.59590912 240.12237549]
[109.59590912 225.12237549]
[109.59590912 210.12237549]
[109.59590912 195.12237549]
[109.59590912 180.12237549]
[109.59590912 165.12237549]
[109.59590912 150.12237549]
[106.65042877 135.41441345]
[100.87415314 121.57119751]
[86.59869385 116.96563721]
[73.82133484 124.82305908]
[61.04397964 132.68048096]
[48.26662445 140.53791809]
[35.48926544 148.39533997]
[22.79433632 156.38525391]
[10.18320847 164.50680542]
[10.30062580 179.93371582]
[2.03967500 192.96292114]
[-11.96360493 199.43684387]
[-27.24081802 197.28968811]
[-38.91706085 187.20658875]
[-43.26648712 172.40502930]
[-38.90121078 157.60813904]
[-27.21417618 147.53755188]
[-11.93467140 145.40675354]
[2.06166625 151.89567566]
[14.67279434 143.77412415]
[18.61901855 137.46754456]
[27.63183975 135.61798096]
[40.40919876 127.76055908]
[53.18655396 119.90312958]
[65.96391296 112.04570770]
[78.74127197 104.18827820]
[84.08277893 90.17156982]
[79.77519989 75.80338287]
[75.46761322 61.43519974]
[71.01079559 47.11260223]
[66.40523529 32.83713913]
[61.79966736 18.56167984]
[12.71449566 8.65322971]
[0.82211590 -0.48850411]
[-11.07026386 -9.63023853]
[-29.34924698 -11.59458256]
[-35.47219849 -28.01132393]
[-47.55218887 -36.90367508]
[-59.63217545 -45.79602432]
[-74.78488159 -41.93214798]
[-88.85369110 -48.75876236]
[-95.19573212 -63.05255508]
[-90.81650543 -78.06443024]
[-77.78372955 -86.70623779]
[-62.25109482 -84.89758301]
[-51.55263138 -73.49245453]
[-50.73982620 -57.87601089]
[-38.65983963 -48.98366165]
[-26.57984924 -40.09131241]
[-14.53597927 -41.59214783]
[-4.38833666 -34.22707367]
[-1.92852962 -21.52261734]
[9.96385002 -12.38088417]
[21.85622978 -3.23914957]
[35.02481079 -10.42165852]
[33.77793884 -25.36974525]
[19.28853989 -29.96602249]
[7.66422033 -39.76110458]
[0.67760497 -53.26131439]
[-0.60589826 -68.40796661]
[4.00943518 -82.89130402]
[13.81980133 -94.50273132]
[27.32918930 -101.47158051]
[42.47751617 -102.73516083]
[56.95477295 -98.10077667]
[68.55328369 -88.27514648]
[75.50435638 -74.75659943]
[76.74800110 -59.60662460]
[72.09458160 -45.13547897]
[62.25370026 -33.54990387]
[48.72602463 -26.61661911]
[49.97290039 -11.66853333]
[64.61640167 -8.41770744]
[72.07131195 -21.43401718]
[79.52622223 -34.45032501]
[86.98113251 -47.46663666]
[89.60635376 -64.21610260]
[106.42797089 -66.33019257]
[113.11612701 -50.75120163]
[99.99744415 -40.01172638]
[92.54253387 -26.99541664]
[85.08762360 -13.97910690]
[77.63271332 -0.96279699]
[76.07512665 13.95611477]
[80.68069458 28.23157501]
[85.28625488 42.50703812]
[90.36602020 47.94226074]
[89.83580017 57.12761307]
[94.14337921 71.49579620]
[98.45096588 85.86398315]
[108.26559448 76.34594727]
[125.28054810 74.52111816]
[139.92404175 71.27028656]
[154.56755066 68.01946259]
[169.21104431 64.76863861]
[179.00529480 52.06225586]
[195.04789734 51.94148636]
[205.03233337 64.49897766]
[201.29940796 80.10169983]
[186.71269226 86.78057098]
[172.46186829 79.41213989]
[157.81837463 82.66296387]
[143.17486572 85.91379547]
[128.53137207 89.16461945]
[125.07787323 95.82219696]
[139.87571716 98.27655792]
[142.11424255 113.10858154]
[128.69987488 119.82086945]
[118.17087555 109.13735199]
[114.71737671 115.79492950]
[120.49364471 129.63815308]
[122.79972839 114.81647491]
[129.29702759 101.29666901]
[139.42935181 90.23610687]
[152.32931519 82.58162689]
[166.89260864 78.98849487]
[181.87252808 79.76429749]
[195.98672485 84.84262848]
[208.02694702 93.78874969]
[216.96247864 105.83683014]
[222.02839661 119.95548248]
[222.79103088 134.93608093]
[219.18510437 149.49621582]
[211.51928711 162.38943481]
[200.44981384 172.51202393]
[186.92431641 178.99745178]
[172.10061646 181.29049683]
[157.24772644 179.19488525]
[143.63711548 172.89001465]
[132.43394470 162.91560364]
[124.59590912 150.12237549]
[124.59590912 165.12237549]
[124.59590912 180.12237549]
[124.59590912 195.12237549]
[124.59590912 210.12237549]
[124.59590912 225.12237549]
[124.59590912 240.12237549]
[124.59590912 255.12237549]
[124.59590912 270.12237549]
[124.59590912 285.12237549]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[11 121]
[12 120]
[13 36]
[14 35]
[15 34]
[16 33]
[17 32]
[18 30]
[19 29]
[37 100]
[38 99]
[39 98]
[40 96]
[41 95]
[42 94]
[43 64]
[44 63]
[45 62]
[47 59]
[48 58]
[49 57]
[65 82]
[66 81]
[83 93]
[84 92]
[85 91]
[86 90]
[102 114]
[103 113]
[104 112]
[105 111]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
