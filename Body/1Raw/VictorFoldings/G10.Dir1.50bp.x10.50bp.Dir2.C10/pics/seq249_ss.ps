%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:20 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCAUAACAAAAAAUUUCCACCAAACCCCCCCUCCCCCGCUUCUGGCCACAGCACUUAAACACxxxxxxxxxxCCCAGAGGUUACCCAAGGCACCCCUCUGACAUCCGGCCUGCUUCUUCUCACAUGACAAAAACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[-12.84146786 187.27542114]
[-25.17275238 195.81587219]
[-37.50403595 204.35633850]
[-49.83531952 212.89678955]
[-62.16660309 221.43725586]
[-74.40955353 230.10385132]
[-86.56288910 238.89570618]
[-98.71622467 247.68754578]
[-110.86955261 256.47940063]
[-123.02288818 265.27124023]
[-117.23707581 279.18600464]
[-114.81678009 294.06011963]
[-115.89253235 309.09140015]
[-120.40631866 323.46923828]
[-128.11471558 336.41827393]
[-138.60200500 347.24017334]
[-151.30264282 355.35128784]
[-165.53169250 360.31427002]
[-180.52178955 361.86138916]
[-195.46455383 359.90927124]
[-209.55412292 354.56320190]
[-222.03067017 346.11141968]
[-232.22135925 335.00976562]
[-239.57659912 321.85693359]
[-243.69975281 307.36224365]
[-244.36846924 292.30734253]
[-241.54666138 277.50418091]
[-235.38650513 263.75100708]
[-226.22023010 251.78956604]
[-214.54216003 242.26490784]
[-200.98207092 235.69067383]
[-186.27122498 232.42140198]
[-171.20298767 232.63342285]
[-156.58996582 236.31529236]
[-143.22019958 243.26843262]
[-131.81472778 253.11788940]
[-119.66139984 244.32604980]
[-107.50806427 235.53421021]
[-95.35473633 226.74237061]
[-83.20140076 217.95053101]
[-79.60313416 211.44171143]
[-70.70706177 209.10597229]
[-58.37577820 200.56550598]
[-46.04449463 192.02505493]
[-33.71321106 183.48458862]
[-21.38192749 174.94413757]
[-35.79557800 143.70075989]
[-42.30912781 109.91502380]
[-40.54363632 75.55246735]
[-30.60181427 42.61218643]
[-13.06204510 13.01052380]
[-24.45311928 3.25124955]
[-35.84419250 -6.50802517]
[-52.05475998 -8.98784733]
[-57.75955200 -24.36274338]
[-47.08996582 -36.81633377]
[-31.02195930 -33.53743744]
[-26.08491898 -17.89909935]
[-14.69384480 -8.13982391]
[-3.30277085 1.61945033]
[3.38662648 -4.95737743]
[10.49382019 -11.08032608]
[17.98807526 -16.72291756]
[25.83698463 -21.86075020]
[34.00660706 -26.47160530]
[42.46160889 -30.53554535]
[51.16543579 -34.03499603]
[60.08044052 -36.95482254]
[69.16807556 -39.28240204]
[78.38903809 -41.00766373]
[87.70345306 -42.12314987]
[97.07104492 -42.62403870]
[106.45130920 -42.50815964]
[115.80367279 -41.77601624]
[125.08769226 -40.43077469]
[134.26321411 -38.47825241]
[143.29058838 -35.92689514]
[152.13073730 -32.78773117]
[160.74545288 -29.07433701]
[169.09748840 -24.80277252]
[177.15071106 -19.99150848]
[184.87031555 -14.66135120]
[192.22288513 -8.83535099]
[199.17665100 -2.53870201]
[210.15745544 -12.75740910]
[221.13825989 -22.97611618]
[232.11906433 -33.19482422]
[243.09986877 -43.41353226]
[254.08067322 -53.63223648]
[248.73902893 -67.86373138]
[249.25515747 -83.05590057]
[255.55033875 -96.89205170]
[266.66461182 -107.26227570]
[280.90310669 -112.58518982]
[296.09460449 -112.04907990]
[309.92245483 -105.73570251]
[320.27804565 -94.60780334]
[325.58221436 -80.36230469]
[325.02612305 -65.17154694]
[318.69458008 -51.35200500]
[307.55307007 -41.01105499]
[293.30059814 -35.72562790]
[278.11059570 -36.30170059]
[264.29937744 -42.65143585]
[253.31857300 -32.43272781]
[242.33776855 -22.21402168]
[231.35696411 -11.99531364]
[220.37617493 -1.77660668]
[209.39537048 8.44210052]
[215.58728027 16.39511681]
[221.20216370 24.76549721]
[226.21199036 33.51145554]
[230.59176636 42.58933258]
[234.31961060 51.95380783]
[237.37692261 61.55813217]
[239.74842834 71.35437012]
[241.42230225 81.29360199]
[242.39016724 91.32621765]
[242.64721680 101.40213776]
[242.19215393 111.47106171]
[241.02725220 121.48271179]
[239.15834045 131.38713074]
[236.59472656 141.13484192]
[233.34921265 150.67721558]
[229.43801880 159.96661377]
[224.88064575 168.95663452]
[219.69985962 177.60243225]
[213.92152405 185.86082458]
[207.57447815 193.69058228]
[200.69041443 201.05264282]
[193.30368042 207.91023254]
[185.45117188 214.22911072]
[177.17208862 219.97776794]
[168.50775146 225.12747192]
[159.50141907 229.65252686]
[150.19804382 233.53033447]
[140.64407349 236.74156189]
[130.88720703 239.27015686]
[120.97615051 241.10350037]
[110.96038055 242.23243713]
[100.88988495 242.65133667]
[90.81495667 242.35810852]
[80.78588104 241.35420227]
[70.85271454 239.64465332]
[61.06506348 237.23799133]
[51.47177887 234.14620972]
[42.12075043 230.38476562]
[33.05865860 225.97242737]
[24.33074760 220.93121338]
[15.98058510 215.28630066]
[8.04985523 209.06587219]
[0.57814944 202.30097961]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 46]
[2 45]
[3 44]
[4 43]
[5 42]
[6 40]
[7 39]
[8 38]
[9 37]
[10 36]
[51 60]
[52 59]
[53 58]
[84 109]
[85 108]
[86 107]
[87 106]
[88 105]
[89 104]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
