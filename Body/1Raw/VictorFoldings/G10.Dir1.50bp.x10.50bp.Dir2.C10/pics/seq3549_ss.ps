%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:28 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGAUCGCUCUUCUACUAUGAACCCCCCUCCCCAUACCCAACCCCCUGGUCAACCUCAACCUAxxxxxxxxxxUAUCGCUCACACCUCAUAUCCUCCCUACUAUGCCUAGAAGGAAUAAUACUAUCGCUGUUCCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[-30.49488449 223.89820862]
[-41.79388809 233.76393127]
[-53.09289551 243.62965393]
[-64.39189911 253.49537659]
[-75.58766174 263.47808838]
[-86.67897797 273.57675171]
[-97.77029419 283.67538452]
[-108.86161041 293.77404785]
[-119.95292664 303.87271118]
[-131.04423523 313.97134399]
[-136.03929138 328.98333740]
[-150.65919495 331.83078003]
[-161.75050354 341.92941284]
[-156.92419434 356.37332153]
[-158.39645386 371.53091431]
[-165.91223145 384.77603149]
[-178.16935730 393.81387329]
[-193.04421997 397.07858276]
[-207.95965576 394.00454712]
[-220.33146667 385.12435913]
[-228.01617432 371.97653198]
[-229.68235779 356.83905029]
[-225.04133606 342.33453369]
[-214.89718628 330.97601318]
[-201.00744629 324.73138428]
[-185.77861023 324.68261719]
[-171.84915161 330.83810425]
[-160.75784302 320.73944092]
[-156.55612183 306.44976807]
[-141.14289856 302.88003540]
[-130.05157471 292.78137207]
[-118.96025848 282.68273926]
[-107.86894226 272.58407593]
[-96.77762604 262.48544312]
[-85.68631744 252.38677979]
[-82.83946228 245.51356506]
[-74.25762177 242.19636536]
[-62.95861816 232.33064270]
[-51.65961075 222.46492004]
[-40.36060715 212.59919739]
[-56.15217972 189.42134094]
[-68.15040588 164.07121277]
[-76.06382751 137.16462708]
[-79.70019531 109.35520935]
[-78.97117615 81.31852722]
[-73.89448547 53.73567200]
[-64.59344482 27.27669907]
[-51.29399490 2.58436298]
[-63.55636597 -6.05475330]
[-75.81873322 -14.69386959]
[-92.19110107 -15.63065910]
[-99.32332611 -30.39762878]
[-89.87837982 -43.80378723]
[-73.57241821 -42.05802917]
[-67.17961884 -26.95623779]
[-54.91724777 -18.31712151]
[-42.65488052 -9.67800522]
[-36.83786011 -16.85495186]
[-30.66016197 -23.72389412]
[-24.13807106 -30.26672363]
[-17.28877640 -36.46619797]
[-10.13033199 -42.30597305]
[-2.68160629 -47.77065659]
[5.03776741 -52.84585190]
[13.00744152 -57.51817322]
[21.20641136 -61.77530670]
[29.61306572 -65.60603333]
[38.20524597 -69.00025940]
[46.96030045 -71.94903564]
[55.85516357 -74.44458771]
[64.86637878 -76.48033142]
[73.97019958 -78.05091858]
[83.14263153 -79.15219116]
[92.35949707 -79.78126526]
[101.59649658 -79.93646240]
[110.82929230 -79.61738586]
[120.03353882 -78.82487488]
[129.18498230 -77.56101990]
[138.25950623 -75.82914734]
[147.23318481 -73.63382721]
[156.08236694 -70.98084259]
[164.78372192 -67.87718201]
[173.31431580 -64.33103943]
[181.65168762 -60.35174561]
[189.77381897 -55.94980240]
[197.65933228 -51.13680267]
[205.28744507 -45.92544174]
[212.63803101 -40.32944489]
[219.69172668 -34.36357117]
[226.42994690 -28.04354286]
[232.83491516 -21.38601685]
[238.88975525 -14.40854168]
[244.57852173 -7.12950897]
[249.88619995 0.43189570]
[254.79881287 8.25574207]
[259.30340576 16.32140732]
[263.38809204 24.60763359]
[267.04214478 33.09257889]
[270.25588989 41.75387573]
[273.02087402 50.56869888]
[275.32983398 59.51381683]
[277.17663574 68.56564331]
[278.55645752 77.70032501]
[279.46560669 86.89378357]
[294.45831299 86.42574310]
[309.45101929 85.95770264]
[323.00302124 77.79356384]
[335.96554565 85.12997437]
[350.95822144 84.66192627]
[365.95092773 84.19388580]
[379.59762573 75.09994507]
[394.17456055 82.61288452]
[394.68627930 99.00405121]
[380.60632324 107.41160583]
[366.41897583 99.18658447]
[351.42626953 99.65462494]
[336.43356323 100.12266541]
[323.95391846 108.25332642]
[309.91903687 100.95040131]
[294.92636108 101.41844177]
[279.93365479 101.88648224]
[279.26315308 115.63325500]
[277.54397583 129.28857422]
[274.78613281 142.77253723]
[271.00576782 156.00630188]
[266.22503662 168.91241455]
[260.47186279 181.41537476]
[253.77990723 193.44206238]
[246.18833923 204.92210388]
[237.74156189 215.78834534]
[228.48898315 225.97721863]
[218.48474121 235.42912292]
[207.78735352 244.08874512]
[196.45939636 251.90544128]
[184.56715393 258.83349609]
[172.18019104 264.83233643]
[159.37095642 269.86691284]
[146.21441650 273.90774536]
[132.78750610 276.93121338]
[119.16878510 278.91964722]
[105.43792725 279.86135864]
[91.67525482 279.75088501]
[77.96128845 278.58883667]
[64.37624359 276.38204956]
[50.99960709 273.14340210]
[37.90962219 268.89187622]
[25.18287277 263.65231323]
[12.89380646 257.45535278]
[1.11431706 250.33729553]
[-10.08668423 242.33973694]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 40]
[2 39]
[3 38]
[4 37]
[5 35]
[6 34]
[7 33]
[8 32]
[9 31]
[10 30]
[12 28]
[13 27]
[48 57]
[49 56]
[50 55]
[104 121]
[105 120]
[106 119]
[108 117]
[109 116]
[110 115]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
