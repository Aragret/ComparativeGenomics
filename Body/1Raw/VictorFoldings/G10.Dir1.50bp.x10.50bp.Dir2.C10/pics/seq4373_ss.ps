%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:26 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGACCACUCACCCUAGCAUUACUUAUAUGAUAUGUCUCCAUACCCAUUACAAUCUCCAGCAUxxxxxxxxxxUGGCGCCUGCCUGAUCCUCCAAAUCACCACAGGACUAUUCCUAGCCAUGCACUACUCACCCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[81.92173004 467.68502808]
[81.92173004 452.68502808]
[81.92173004 437.68502808]
[81.92173004 422.68502808]
[81.92173004 407.68502808]
[81.92173004 392.68502808]
[81.92173004 377.68502808]
[81.92173004 362.68502808]
[81.92173004 347.68502808]
[81.92173004 332.68502808]
[68.72794342 329.71453857]
[56.44913483 324.03036499]
[45.63679123 315.88470459]
[36.77718735 305.64038086]
[30.26951599 293.75473022]
[26.40789032 280.75912476]
[25.36806107 267.23516846]
[27.19942093 253.78883362]
[31.82265663 241.02308655]
[39.03319168 229.51106262]
[48.51022339 219.77017212]
[59.83100510 212.23895264]
[72.48970795 207.25726318]
[85.92000580 205.05097961]
[86.85562897 190.08018494]
[87.79125977 175.10939026]
[88.72689056 160.13861084]
[77.25726318 156.80230713]
[66.65442657 151.30114746]
[57.32246780 143.84475708]
[49.61705780 134.71734619]
[43.83186722 124.26676178]
[40.18738556 112.89131165]
[38.82250977 101.02454376]
[39.78926468 89.11872101]
[25.46666718 84.66191101]
[11.14407063 80.20509338]
[-6.68383932 84.69346619]
[-18.11390877 71.41365051]
[-32.52612305 67.25576019]
[-46.93833923 63.09787750]
[-61.35055542 58.93998718]
[-77.13026428 63.40462494]
[-88.69635773 51.77890015]
[-84.15063477 36.02236176]
[-68.16934967 32.34398651]
[-57.19266891 44.52777100]
[-42.78045273 48.68566132]
[-28.36823654 52.84354782]
[-13.95602131 57.00143433]
[-3.17748189 51.42197037]
[8.89300919 54.81641006]
[15.60088634 65.88249207]
[29.92348289 70.33930969]
[44.24608231 74.79612732]
[47.17796326 69.12011719]
[50.68569183 63.78075409]
[54.73102951 58.83623886]
[59.26987839 54.34047699]
[64.25275421 50.34248352]
[69.62532806 46.88583755]
[75.32904053 44.00822830]
[81.30171204 41.74102020]
[87.47821808 40.10893250]
[86.23134613 25.16084671]
[84.98447418 10.21275997]
[70.49507141 5.61648226]
[58.87075424 -4.17860031]
[51.88414001 -17.67881012]
[50.60063553 -32.82546234]
[55.21596909 -47.30879974]
[65.02633667 -58.92022324]
[78.53572083 -65.88907623]
[93.68405151 -67.15264893]
[108.16130829 -62.51827240]
[119.75981140 -52.69263840]
[126.71088409 -39.17409515]
[127.95453644 -24.02411842]
[123.30111694 -9.55297184]
[113.46023560 2.03260136]
[99.93255615 8.96588516]
[101.17943573 23.91397285]
[102.42630768 38.86206055]
[119.15212250 41.88863373]
[134.39991760 49.39979935]
[146.99299622 60.81590652]
[159.60412598 52.69436646]
[172.21525574 44.57282257]
[184.82638550 36.45128250]
[188.19122314 19.31608009]
[202.60658264 10.07044983]
[218.92852783 14.00138283]
[231.36796570 5.61923933]
[243.80740356 -2.76290393]
[256.24685669 -11.14504719]
[257.70855713 -26.71416283]
[268.87219238 -37.66437531]
[284.46664429 -38.82532883]
[297.12863159 -29.64885902]
[300.87960815 -14.46780968]
[293.94845581 -0.45021161]
[279.60784912 5.78525496]
[264.62899780 1.29439318]
[252.18954468 9.67653656]
[239.75010681 18.05867958]
[227.31066895 26.44082260]
[226.62908936 39.34556198]
[218.50228882 49.64261627]
[205.73519897 53.41479492]
[192.94792175 49.06240845]
[180.33679199 57.18395233]
[167.72566223 65.30549622]
[155.11453247 73.42704010]
[160.44268799 90.49126434]
[160.61126709 108.36717987]
[175.10685730 112.22434235]
[189.60244751 116.08150482]
[205.28585815 111.28955078]
[217.09130859 122.67214203]
[212.87437439 138.51983643]
[196.97306824 142.52989197]
[185.74530029 130.57710266]
[171.24969482 126.71994019]
[156.75410461 122.86277771]
[144.40281677 142.09661865]
[125.85443878 155.45523071]
[103.69767761 161.07423401]
[102.76205444 176.04502869]
[101.82642365 191.01582336]
[100.89079285 205.98660278]
[116.67329407 211.05955505]
[130.62506104 219.99429321]
[141.82112122 232.19219971]
[149.52078247 246.83853149]
[153.21665955 262.95684814]
[152.66812134 279.47406006]
[147.91687012 295.29193115]
[139.28395081 309.36004639]
[127.34793091 320.74563599]
[112.90621185 328.69531250]
[96.92173004 332.68502808]
[96.92173004 347.68502808]
[96.92173004 362.68502808]
[96.92173004 377.68502808]
[96.92173004 392.68502808]
[96.92173004 407.68502808]
[96.92173004 422.68502808]
[96.92173004 437.68502808]
[96.92173004 452.68502808]
[96.92173004 467.68502808]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[24 130]
[25 129]
[26 128]
[27 127]
[35 55]
[36 54]
[37 53]
[39 50]
[40 49]
[41 48]
[42 47]
[64 83]
[65 82]
[66 81]
[86 113]
[87 112]
[88 111]
[89 110]
[92 106]
[93 105]
[94 104]
[95 103]
[115 124]
[116 123]
[117 122]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
