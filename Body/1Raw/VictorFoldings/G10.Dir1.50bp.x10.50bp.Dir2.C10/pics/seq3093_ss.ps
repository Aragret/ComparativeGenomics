%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:02 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGUACUUCACAAAGCGCCUUCCCCCGUAAAUGAUAUCAUCUCAACUUAGUAUUAUACCCACAxxxxxxxxxxACAACCCCCUAGGAAUCACCUCCCAUUCCGAUAAAAUCACCUUCCACCCUUACUACACAACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[-48.43691635 301.35443115]
[-60.80867767 291.61862183]
[-70.79140472 302.81439209]
[-80.77413177 314.01016235]
[-90.75685883 325.20593262]
[-100.73958588 336.40167236]
[-110.72231293 347.59744263]
[-120.70503998 358.79321289]
[-130.68775940 369.98898315]
[-140.67048645 381.18475342]
[-150.65321350 392.38052368]
[-154.06243896 407.83004761]
[-168.30763245 412.18017578]
[-178.29035950 423.37594604]
[-188.27308655 434.57171631]
[-191.07313538 450.73004150]
[-206.55787659 456.12954712]
[-218.79794312 445.21566772]
[-215.20179749 429.21566772]
[-199.46884155 424.58898926]
[-189.48612976 413.39321899]
[-179.50340271 402.19744873]
[-176.80819702 387.54873657]
[-161.84898376 382.39779663]
[-151.86625671 371.20202637]
[-141.88352966 360.00625610]
[-131.90080261 348.81048584]
[-121.91807556 337.61471558]
[-111.93534851 326.41894531]
[-101.95262146 315.22320557]
[-91.96989441 304.02743530]
[-81.98716736 292.83166504]
[-72.00444031 281.63589478]
[-82.16197205 271.44720459]
[-91.71696472 260.69140625]
[-100.63782501 249.40411377]
[-108.89504242 237.62263489]
[-116.46129608 225.38594055]
[-123.31156921 212.73451233]
[-129.42320251 199.71020508]
[-134.77597046 186.35607910]
[-139.35218811 172.71630859]
[-143.13668823 158.83601379]
[-146.11698914 144.76112366]
[-148.28320312 130.53817749]
[-149.62817383 116.21421051]
[-150.14746094 101.83661652]
[-149.83934021 87.45294952]
[-148.70483398 73.11077881]
[-146.74769592 58.85755157]
[-143.97439575 44.74040985]
[-140.39410400 30.80605125]
[-136.01866150 17.10056305]
[-130.86254883 3.66927910]
[-124.94282532 -9.44337463]
[-118.27906036 -22.19402504]
[-110.89329529 -34.54049683]
[-102.80996704 -46.44195175]
[-94.05580902 -57.85902405]
[-84.65977478 -68.75395203]
[-74.65294647 -79.09069061]
[-64.06842041 -88.83506012]
[-52.94121170 -97.95482635]
[-41.30812454 -106.41982269]
[-29.20763206 -114.20204163]
[-16.67976570 -121.27575684]
[-3.76595902 -127.61756134]
[9.49107170 -133.20648193]
[23.04747581 -138.02403259]
[36.85841370 -142.05426025]
[50.87820435 -145.28387451]
[65.06047821 -147.70214844]
[79.35831451 -149.30111694]
[93.72442627 -150.07548523]
[108.11129761 -150.02267456]
[122.47134399 -149.14286804]
[136.75704956 -147.43898010]
[150.92118835 -144.91664124]
[164.91688538 -141.58419800]
[178.69787598 -137.45266724]
[192.21853638 -132.53573608]
[205.43418884 -126.84963989]
[218.30108643 -120.41320038]
[230.77668762 -113.24771118]
[242.81971741 -105.37686157]
[254.39035034 -96.82669830]
[265.45031738 -87.62548828]
[275.96301270 -77.80367279]
[285.89367676 -67.39374542]
[295.20947266 -56.43013763]
[303.87957764 -44.94910431]
[311.87533569 -32.98862457]
[324.81338501 -40.57853317]
[337.75143433 -48.16844177]
[350.68948364 -55.75835037]
[363.62756348 -63.34825897]
[365.00839233 -78.80377197]
[375.23538208 -90.47374725]
[390.37603760 -93.87084198]
[404.60845947 -87.68880463]
[412.45999146 -74.30475616]
[410.91159058 -58.86512756]
[400.55859375 -47.30678177]
[385.38198853 -44.07413483]
[371.21746826 -50.41020203]
[358.27938843 -42.82029343]
[345.34133911 -35.23038483]
[332.40328979 -27.64047813]
[319.46524048 -20.05056953]
[326.58212280 -6.00790119]
[332.80157471 8.45462799]
[338.09899902 23.27973747]
[342.45336914 38.40871048]
[345.84750366 53.78162384]
[348.26788330 69.33759308]
[349.70498657 85.01500702]
[350.15307617 100.75177002]
[349.61041260 116.48554993]
[348.07910156 132.15403748]
[345.56524658 147.69519043]
[342.07879639 163.04742432]
[337.63357544 178.14994812]
[332.24713135 192.94294739]
[325.94085693 207.36782837]
[318.73971558 221.36747742]
[310.67221069 234.88641357]
[301.77032471 247.87112427]
[292.06927490 260.27017212]
[281.60748291 272.03442383]
[270.42645264 283.11730957]
[258.57040405 293.47494507]
[246.08630371 303.06628418]
[233.02360535 311.85336304]
[219.43405151 319.80136108]
[205.37145996 326.87878418]
[190.89152527 333.05761719]
[176.05160522 338.31341553]
[160.91047668 342.62530518]
[145.52809143 345.97625732]
[129.96539307 348.35296631]
[114.28400421 349.74606323]
[98.54605103 350.14999390]
[82.81385040 349.56314087]
[67.14971924 347.98788452]
[51.61569595 345.43041992]
[36.27330780 341.90087891]
[21.18331718 337.41326904]
[6.40549374 331.98532104]
[-8.00163460 325.63858032]
[-21.98100471 318.39816284]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 33]
[3 32]
[4 31]
[5 30]
[6 29]
[7 28]
[8 27]
[9 26]
[10 25]
[11 24]
[13 22]
[14 21]
[15 20]
[92 109]
[93 108]
[94 107]
[95 106]
[96 105]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
