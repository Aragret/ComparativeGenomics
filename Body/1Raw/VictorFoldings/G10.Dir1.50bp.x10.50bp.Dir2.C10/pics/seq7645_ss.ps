%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:45 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCCAUCAUCCUAGUCCUCAUCGCCCUCCCAUCCCUACGCAUCCUUUACAUAACAGACGAGGUCxxxxxxxxxxAUACUACGGUCAAUGCUCUGAAAUCUGUGGAGCAAACCACAGUUUCAUGCCCAUCGUCCUAGCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[86.38426971 273.41650391]
[86.08026886 258.41958618]
[85.77626801 243.42265320]
[85.47225952 228.42573547]
[85.16825867 213.42881775]
[84.86425018 198.43190002]
[84.56024933 183.43498230]
[84.25624084 168.43806458]
[83.95223999 153.44114685]
[81.83119965 138.59185791]
[77.92444611 124.10955048]
[69.48062134 111.71189880]
[57.43534088 102.77259064]
[45.39006042 93.83329010]
[30.65296745 98.31929779]
[16.26829910 93.32583618]
[7.68374443 80.96584320]
[8.01933956 66.09892273]
[-4.02594328 57.15961838]
[-16.16119766 48.34283829]
[-28.38517952 39.64949036]
[-40.60916138 30.95614433]
[-52.83314133 22.26279640]
[-66.16355896 15.38530445]
[-80.33253479 10.46187687]
[-94.50151062 5.53844881]
[-108.67048645 0.61502057]
[-124.24571228 3.39405131]
[-133.72827148 -8.09204388]
[-147.89724731 -13.01547146]
[-155.28875732 0.08434905]
[-164.90071106 11.65370941]
[-176.42411804 21.32070160]
[-189.48855591 28.77457237]
[-203.67405701 33.77571106]
[-218.52461243 36.16334915]
[-233.56283569 35.86073685]
[-248.30531311 32.87760162]
[-262.27813721 27.30983543]
[-275.03213501 19.33642387]
[-286.15731812 9.21367645]
[-295.29608154 -2.73300147]
[-302.15460205 -16.11957359]
[-306.51245117 -30.51571846]
[-308.22952271 -45.45866013]
[-307.25061035 -60.46804047]
[-303.60720825 -75.06137085]
[-297.41641235 -88.76954651]
[-288.87725830 -101.15189362]
[-278.26422119 -111.81037140]
[-265.91848755 -120.40235901]
[-252.23687744 -126.65165710]
[-237.65924072 -130.35739136]
[-222.65419006 -131.40040588]
[-207.70404053 -129.74719238]
[-193.28941345 -125.45090485]
[-179.87365723 -118.64963531]
[-167.88804626 -109.56201172]
[-157.71784973 -98.48017883]
[-149.69001770 -85.76036835]
[-144.06260681 -71.81146240]
[-141.01651001 -57.08186340]
[-140.64964294 -42.04506683]
[-142.97381592 -27.18444633]
[-128.80484009 -22.26101875]
[-114.24307251 -25.39220619]
[-103.74705505 -13.55395412]
[-89.57808685 -8.63052654]
[-75.40911102 -3.70709825]
[-61.24013138 1.21632981]
[-70.35575104 -10.69607925]
[-74.31935120 -25.16293335]
[-72.54839325 -40.05802536]
[-65.30316925 -53.19220352]
[-53.64849854 -62.63512421]
[-39.29729843 -66.99894714]
[-24.35877037 -65.64232635]
[-11.02845287 -58.76463699]
[-1.26551485 -47.37670135]
[3.49517298 -33.15222168]
[2.55392694 -18.18178177]
[-3.95091701 -4.66560555]
[-15.06333447 5.40981865]
[-29.15012169 10.56369495]
[-44.13979340 10.03881550]
[-31.91581345 18.73216248]
[-19.69183159 27.42551041]
[-7.46785069 36.11885834]
[-0.15118924 37.44025421]
[4.91336155 45.11433411]
[16.95864487 54.05363846]
[31.09091759 49.42580414]
[45.40772247 54.06186676]
[54.35401917 66.38327789]
[54.32936478 81.78800201]
[66.37464905 90.72731018]
[78.41992950 99.66661072]
[83.91279602 87.13434601]
[95.39310455 80.93309021]
[107.63249969 83.00302124]
[115.57520294 91.70047760]
[130.55595398 90.94074249]
[145.53669739 90.18099976]
[160.51744080 89.42126465]
[175.49819946 88.66152954]
[183.96818542 85.08374023]
[190.78964233 88.04132080]
[205.78271484 87.58535767]
[220.77577209 87.12938690]
[235.76884460 86.67342377]
[250.76191711 86.21745300]
[265.75497437 85.76148224]
[276.40155029 74.08131409]
[292.19256592 73.43391418]
[303.75952148 84.20336914]
[304.23992920 100.00035095]
[293.34878540 111.45279694]
[277.54760742 111.76617432]
[266.21093750 100.75455475]
[251.21788025 101.21051788]
[236.22480774 101.66648865]
[221.23175049 102.12245178]
[206.23867798 102.57842255]
[191.24560547 103.03439331]
[176.25793457 103.64227295]
[161.27717590 104.40200806]
[146.29643250 105.16175079]
[131.31568909 105.92148590]
[116.33493805 106.68122101]
[107.84616089 117.97798920]
[92.40675354 120.20280457]
[96.31350708 134.68510437]
[101.51114655 120.61441040]
[112.21731567 110.10832214]
[126.38354492 105.17700958]
[141.29936218 106.76402283]
[154.11083984 114.56568909]
[162.36669922 127.08930206]
[164.48730469 141.93864441]
[160.06692505 156.27252197]
[149.95133972 167.34838867]
[136.07597351 173.04702759]
[121.09569550 172.27809143]
[107.87673950 165.18872070]
[98.94915771 153.13714600]
[99.25316620 168.13406372]
[99.55716705 183.13098145]
[99.86116791 198.12789917]
[100.16517639 213.12481689]
[100.46917725 228.12173462]
[100.77318573 243.11865234]
[101.07718658 258.11557007]
[101.38119507 273.11248779]
[103.96187592 292.32159424]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 153]
[2 152]
[3 151]
[4 150]
[5 149]
[6 148]
[7 147]
[8 146]
[9 145]
[10 132]
[11 131]
[12 97]
[13 96]
[14 95]
[18 91]
[19 90]
[20 88]
[21 87]
[22 86]
[23 85]
[24 70]
[25 69]
[26 68]
[27 67]
[29 65]
[30 64]
[101 129]
[102 128]
[103 127]
[104 126]
[105 125]
[107 124]
[108 123]
[109 122]
[110 121]
[111 120]
[112 119]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
