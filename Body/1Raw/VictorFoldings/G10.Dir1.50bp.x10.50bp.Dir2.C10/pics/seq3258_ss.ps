%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:11 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGUACCCAUGGCCAACCUCCUACUCCUCAUUGUACCCAUUCUAAUCGCAAUGGCAUUCCUAAxxxxxxxxxxAUAGCAAUAAAACUAGGAAUAGCCCCCUUUCACUUCUGAGUCCCAGAGGUUACCCAAGGCCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[87.56066895 516.04199219]
[87.56066895 501.04196167]
[87.56066895 486.04196167]
[87.56066895 471.04196167]
[87.56066895 456.04196167]
[87.56066895 441.04196167]
[87.56066895 426.04196167]
[87.56066895 411.04196167]
[87.56066895 396.04196167]
[87.56066895 381.04196167]
[73.98298645 377.82995605]
[61.46457672 371.65100098]
[50.64487457 362.81671143]
[42.07742691 351.77456665]
[36.20156860 339.08502197]
[33.31990814 325.39318848]
[33.58273697 311.39596558]
[36.98018646 297.80667114]
[43.34257889 285.31857300]
[52.34886169 274.56964111]
[63.54283524 266.10980225]
[76.35624695 260.37295532]
[90.13764954 257.65463257]
[90.76162720 242.66761780]
[91.38560486 227.68060303]
[92.00958252 212.69358826]
[92.63356018 197.70657349]
[79.45392609 185.06953430]
[79.63410187 166.49360657]
[93.52320099 153.68376160]
[93.52320099 138.68376160]
[93.52320099 123.68376160]
[93.52320099 108.68376160]
[89.63605499 109.15687561]
[85.37560272 108.32156372]
[81.12826538 106.06623840]
[77.30565643 102.38481903]
[63.64941788 96.17941284]
[49.99317932 89.97400665]
[36.33693695 83.76860046]
[22.68069458 77.56319427]
[11.31403923 87.69823456]
[-3.19418383 92.32762909]
[-18.33033752 90.64931488]
[-31.47199249 82.95407104]
[-40.34227371 70.57514191]
[-43.40435791 55.65724564]
[-40.12771606 40.78500748]
[-31.08004570 28.53512764]
[-17.82891083 21.02997398]
[-2.67015314 19.56985664]
[11.76988316 24.40775299]
[22.98937416 34.70546722]
[29.04447556 48.67885971]
[28.88610268 63.90695190]
[42.54234314 70.11235809]
[56.19858551 76.31776428]
[69.85482788 82.52317047]
[83.51107025 88.72857666]
[97.10202026 82.38144684]
[101.10975647 67.92675781]
[105.11750031 53.47207260]
[108.97465515 38.97647476]
[112.68081665 24.44153976]
[116.38697815 9.90660381]
[120.09313965 -4.62833214]
[123.79930115 -19.16326904]
[127.50546265 -33.69820404]
[131.21162415 -48.23313904]
[117.91565704 -55.33811188]
[106.70684052 -65.41908264]
[98.23685455 -77.88996124]
[92.99812317 -92.02569580]
[91.29522705 -107.00447083]
[93.22715759 -121.95542145]
[98.68161011 -136.00933838]
[107.34146118 -148.34912109]
[118.70323181 -158.25738525]
[132.10638428 -165.15803528]
[146.77165222 -168.64991760]
[161.84643555 -168.52998352]
[176.45429993 -164.80522156]
[189.74595642 -157.69219971]
[200.94865417 -147.60443115]
[209.41108704 -135.12841797]
[214.64125061 -120.98950958]
[216.33506775 -106.00970459]
[214.39405823 -91.05992889]
[208.93109131 -77.00932312]
[200.26376343 -64.67478943]
[188.89598083 -54.77342606]
[175.48866272 -47.88089371]
[160.82127380 -44.39791107]
[145.74656677 -44.52698135]
[142.04040527 -29.99204254]
[138.33424377 -15.45710754]
[134.62808228 -0.92217106]
[130.92192078 13.61276531]
[127.21575165 28.14770126]
[123.50959778 42.68263626]
[124.91361237 49.98841476]
[119.57218933 57.47981262]
[115.56444550 71.93450165]
[111.55670929 86.38919067]
[120.56513977 74.39551544]
[133.57063293 66.92176819]
[148.46885681 65.17724609]
[162.84915161 69.44422150]
[174.38471985 79.03227234]
[181.20903015 92.38999176]
[182.21788025 107.35602570]
[177.24803162 121.50878143]
[167.10362244 132.55825806]
[153.42608643 138.71659851]
[138.42852783 138.98731995]
[124.53764343 133.32664490]
[114.00105286 122.65048218]
[108.52320099 108.68376160]
[108.52320099 123.68376160]
[108.52320099 138.68376160]
[108.52320099 153.68376160]
[118.46481323 160.34239197]
[123.87516022 170.87980652]
[123.50046539 182.59873962]
[117.55130005 192.56242371]
[107.62057495 198.33055115]
[106.99659729 213.31756592]
[106.37261963 228.30458069]
[105.74864197 243.29159546]
[105.12466431 258.27859497]
[120.54853058 262.96231079]
[134.24273682 271.44509888]
[145.29119873 283.15304565]
[152.95651245 297.29672241]
[156.72911072 312.92443848]
[156.36116028 328.98614502]
[151.88284302 344.40417480]
[143.59994507 358.14544678]
[132.07299805 369.29061890]
[118.07933807 377.09579468]
[102.56066895 381.04196167]
[102.56066895 396.04196167]
[102.56066895 411.04196167]
[102.56066895 426.04196167]
[102.56066895 441.04196167]
[102.56066895 456.04196167]
[102.56066895 471.04196167]
[102.56066895 486.04196167]
[102.56066895 501.04196167]
[102.56066895 516.04199219]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[23 130]
[24 129]
[25 128]
[26 127]
[27 126]
[30 121]
[31 120]
[32 119]
[33 118]
[37 59]
[38 58]
[39 57]
[40 56]
[41 55]
[60 104]
[61 103]
[62 102]
[63 100]
[64 99]
[65 98]
[66 97]
[67 96]
[68 95]
[69 94]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
