%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:03 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGUAGACUACGAAAGUGGCUUUAACAUAUCUGAACACACAAUAGCUAAGACCCAAACUGGGAUxxxxxxxxxxAGCAGCGGUGGGCCUAGCCCUACUAGUCUCAAUCUCCAACACAUAUGGCCUAGACUACGUACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[93.06707764 272.35772705]
[93.06707764 257.35772705]
[93.06707764 242.35774231]
[93.06707764 227.35774231]
[93.06707764 212.35774231]
[93.06707764 197.35774231]
[93.06707764 182.35774231]
[93.06707764 167.35774231]
[93.06707764 152.35774231]
[93.06707764 137.35774231]
[69.94200134 111.66077423]
[78.86985779 84.03112793]
[69.95371246 71.96869659]
[61.03755951 59.90626526]
[52.12140656 47.84383392]
[43.20525742 35.78140259]
[34.28910446 23.71897125]
[26.62246132 18.63779449]
[25.31674004 11.31609440]
[12.72073269 8.35902309]
[5.76044130 -2.06813741]
[7.73107815 -14.04222584]
[-0.68233198 -26.46054077]
[-8.13390446 -31.85218620]
[-9.13793182 -39.22132111]
[-17.29459763 -51.80976105]
[-25.45126343 -64.39820099]
[-33.60792923 -76.98664093]
[-33.21063232 -61.99190140]
[-35.98649597 -47.25098419]
[-41.81050110 -33.42778015]
[-50.42035294 -21.14484787]
[-61.42828751 -10.95537186]
[-74.33853149 -3.31825924]
[-88.56965637 1.42253613]
[-103.48072815 3.05350208]
[-118.40018463 1.50118470]
[-132.65611267 -3.16450405]
[-145.60644531 -10.73343468]
[-156.66795349 -20.86472511]
[-165.34245300 -33.10208893]
[-171.23927307 -46.89439011]
[-174.09281921 -61.62046432]
[-173.77459717 -76.61708832]
[-170.29893494 -91.20885468]
[-163.82235718 -104.73860168]
[-154.63655090 -116.59697723]
[-143.15522766 -126.24991608]
[-129.89547729 -133.26268005]
[-115.45446777 -137.31942749]
[-100.48258209 -138.23745728]
[-85.65412140 -135.97543335]
[-71.63691711 -130.63522339]
[-59.06225586 -122.45732880]
[-48.49647141 -111.81006622]
[-40.41662598 -99.17538452]
[-40.72460556 -114.17222595]
[-48.74361801 -127.81063080]
[-41.26926422 -140.69407654]
[-41.57723999 -155.69091797]
[-41.88521957 -170.68775940]
[-42.19319534 -185.68458557]
[-55.02402878 -197.53182983]
[-55.34158707 -214.65580750]
[-43.43645859 -226.49519348]
[-44.05228424 -241.48254395]
[-44.66810989 -256.46990967]
[-59.12065506 -261.04153442]
[-71.13612366 -270.28295898]
[-79.26358795 -283.07827759]
[-82.52162170 -297.88238525]
[-80.51679993 -312.90756226]
[-73.49121094 -326.33950806]
[-62.29323196 -336.55621338]
[-48.27507401 -342.32397461]
[-33.12949371 -342.94628906]
[-18.68540001 -338.34805298]
[-6.68698359 -329.08447266]
[1.41688800 -316.27420044]
[4.64763308 -301.46414185]
[2.61512303 -286.44265747]
[-4.43520641 -273.02368164]
[-15.65199375 -262.82763672]
[-29.68075752 -257.08572388]
[-29.06493187 -242.09837341]
[-28.44910622 -227.11102295]
[-17.81874657 -219.76609802]
[-13.31054497 -207.44924927]
[-16.78936195 -194.60093689]
[-27.19635773 -185.99256897]
[-26.88838005 -170.99572754]
[-26.58040237 -155.99888611]
[-26.27242470 -141.00205994]
[-18.27544022 -128.43632507]
[-25.72776794 -114.48020172]
[-25.41979027 -99.48336792]
[-21.01948929 -85.14330292]
[-12.86282349 -72.55486298]
[-4.70615816 -59.96642685]
[3.45050764 -47.37798691]
[11.73598194 -34.87395096]
[20.14939308 -22.45563507]
[36.31491089 -15.69393539]
[37.55969238 2.64948726]
[46.35153580 14.80282021]
[55.26768875 26.86525154]
[64.18383789 38.92768478]
[73.09999084 50.99011612]
[82.01614380 63.05254745]
[90.93228912 75.11497498]
[98.51187134 71.90949249]
[107.18083191 71.10471344]
[116.15559387 73.05344391]
[124.54449463 77.84794617]
[131.43510437 85.28902435]
[135.98954773 94.88423920]
[137.53831482 105.87721252]
[151.68562317 110.86253357]
[165.83294678 115.84785461]
[179.20152283 107.73522186]
[194.64921570 110.16482544]
[204.88208008 121.98948669]
[205.06846619 137.62596130]
[195.12037659 149.69117737]
[179.73500061 152.48831177]
[166.17681885 144.69665527]
[160.84762573 129.99516296]
[146.70030212 125.00984955]
[132.55299377 120.02452850]
[126.43151093 124.35782623]
[136.45686340 135.51544189]
[146.48220825 146.67306519]
[156.50755310 157.83067322]
[169.57955933 165.18748474]
[173.33409119 179.71000671]
[165.46566772 192.48059082]
[150.80592346 195.65737915]
[138.35678101 187.28967285]
[135.76271057 172.51565552]
[128.57131958 159.35191345]
[121.37993622 146.18817139]
[114.18855286 133.02444458]
[108.06707764 137.35774231]
[108.06707764 152.35774231]
[108.06707764 167.35774231]
[108.06707764 182.35774231]
[108.06707764 197.35774231]
[108.06707764 212.35774231]
[108.06707764 227.35774231]
[108.06707764 242.35774231]
[108.06707764 257.35772705]
[108.06707764 272.35772705]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 152]
[2 151]
[3 150]
[4 149]
[5 148]
[6 147]
[7 146]
[8 145]
[9 144]
[10 143]
[12 110]
[13 109]
[14 108]
[15 107]
[16 106]
[17 105]
[19 104]
[22 102]
[23 101]
[25 100]
[26 99]
[27 98]
[28 97]
[56 96]
[57 95]
[59 93]
[60 92]
[61 91]
[62 90]
[65 86]
[66 85]
[67 84]
[117 129]
[118 128]
[119 127]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
