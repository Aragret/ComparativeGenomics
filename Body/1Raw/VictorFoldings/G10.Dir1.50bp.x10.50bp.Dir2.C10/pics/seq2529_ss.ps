%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:11 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCAUUCUCCUCCGCAUAAGCCUGCGUCAGAUUAAAACACUGAACUGACAAUUAACAGCCCAAxxxxxxxxxxCGAGGCCUAUAUUACGGAUCAUUUCUCUACUCAGAAACCUGAAACAUCGGCAUUAUCCUCCCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[112.53871155 291.78668213]
[112.53871155 276.78668213]
[112.53871155 261.78668213]
[112.53871155 246.78668213]
[112.53871155 231.78668213]
[112.53871155 216.78668213]
[112.53871155 201.78668213]
[112.53871155 186.78668213]
[112.53871155 171.78668213]
[112.53871155 156.78668213]
[96.76289368 156.53627014]
[82.05526733 152.09944153]
[69.47346497 144.03053284]
[59.85737610 133.13569641]
[53.77388763 120.39738464]
[51.48593140 106.88836670]
[52.94720459 93.68243408]
[57.82193756 81.76937103]
[65.52698517 71.98073578]
[55.65127945 60.69045639]
[45.77557373 49.40017700]
[35.89986420 38.10989761]
[29.68296432 35.58150864]
[26.23694992 30.96492386]
[25.86212349 26.14738083]
[16.45826530 14.46117210]
[7.05440903 2.77496386]
[-2.93668795 -8.41333294]
[-13.48870277 -19.07424164]
[-24.04071808 -29.73515129]
[-34.59273148 -40.39606094]
[-42.90814209 -44.32667923]
[-45.24914932 -51.38584900]
[-55.58005142 -62.26116562]
[-68.72167969 -69.49286652]
[-83.43720245 -72.40033722]
[-98.15272522 -75.30780792]
[-112.86824799 -78.21528625]
[-123.49201202 -67.02871704]
[-138.48262024 -63.38382339]
[-153.05662537 -68.44366455]
[-162.56350708 -80.59367371]
[-163.96966553 -95.95681763]
[-156.82640076 -109.63078308]
[-143.41308594 -117.25225067]
[-128.00988770 -116.38923645]
[-115.53188324 -107.31713104]
[-109.96077728 -92.93080902]
[-95.24525452 -90.02333069]
[-80.52973175 -87.11585999]
[-65.81420898 -84.20838928]
[-76.74311066 -94.48258972]
[-85.50243378 -106.65937805]
[-91.76802826 -120.28810883]
[-95.30800629 -134.86441040]
[-95.99135590 -149.84883118]
[-93.79279327 -164.68684387]
[-88.79367828 -178.82928467]
[-81.17902374 -191.75279236]
[-71.23063660 -202.97908020]
[-59.31668854 -212.09269714]
[-45.87808990 -218.75633240]
[-31.41218567 -222.72340393]
[-16.45433426 -223.84707642]
[-1.55809844 -222.08578491]
[12.72523594 -217.50469971]
[25.86706734 -210.27334595]
[37.38103867 -200.65937805]
[46.84103394 -189.01856995]
[53.89696121 -175.78173828]
[58.28768921 -161.43873596]
[59.85071945 -146.52040100]
[58.52821732 -131.57881165]
[54.36911774 -117.16693878]
[47.52734375 -103.81815338]
[38.25609970 -92.02645874]
[26.89850044 -82.22824860]
[13.87486744 -74.78614044]
[-0.33281463 -69.97555542]
[-15.19874382 -67.97451782]
[-30.17275620 -68.85708618]
[-44.70473480 -72.59206390]
[-34.37383270 -61.71675491]
[-23.93182373 -50.94807434]
[-13.37980938 -40.28716660]
[-2.82779431 -29.62625694]
[7.72422075 -18.96534729]
[10.75953770 -33.65503311]
[24.04035950 -40.62781906]
[37.85569763 -34.78517532]
[42.10371780 -20.39926910]
[33.67825317 -7.98913193]
[18.74061775 -6.62889338]
[28.14447403 5.05731535]
[37.54833221 16.74352455]
[47.19014740 28.23418999]
[57.06585312 39.52447128]
[66.94155884 50.81475067]
[76.81726837 62.10503006]
[98.49582672 52.16722107]
[123.96365356 54.65336609]
[146.15704346 70.60606384]
[158.08335876 97.12430573]
[172.85548401 94.51957703]
[187.62759399 91.91485596]
[202.39971924 89.31013489]
[217.17182922 86.70541382]
[226.03034973 73.61716461]
[241.56465149 70.70838165]
[254.55850220 79.70478058]
[257.30288696 95.26896667]
[248.16961670 108.16698456]
[232.57728577 110.74666595]
[219.77655029 101.47753143]
[205.00444031 104.08225250]
[190.23231506 106.68697357]
[175.46020508 109.29169464]
[160.68807983 111.89641571]
[158.84475708 126.78273010]
[172.53538513 132.91189575]
[181.70918274 133.57322693]
[186.44216919 139.31002808]
[200.00405884 145.71900940]
[216.29463196 143.83508301]
[225.85289001 157.16069031]
[218.84611511 171.98759460]
[202.48226929 173.06314087]
[193.59509277 159.28091431]
[180.03318787 152.87193298]
[166.40621948 146.60252380]
[152.71559143 140.47335815]
[146.42137146 144.55168152]
[155.49754333 156.49417114]
[164.57371521 168.43667603]
[178.24543762 174.60789490]
[182.53067017 188.98275757]
[174.46966553 201.63267517]
[159.63006592 203.82044983]
[148.26145935 194.03500366]
[148.21569824 179.03582764]
[141.02430725 165.87208557]
[133.83293152 152.70834351]
[127.53871155 156.78668213]
[127.53871155 171.78668213]
[127.53871155 186.78668213]
[127.53871155 201.78668213]
[127.53871155 216.78668213]
[127.53871155 231.78668213]
[127.53871155 246.78668213]
[127.53871155 261.78668213]
[127.53871155 276.78668213]
[127.53871155 291.78668213]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 152]
[2 151]
[3 150]
[4 149]
[5 148]
[6 147]
[7 146]
[8 145]
[9 144]
[10 143]
[19 99]
[20 98]
[21 97]
[22 96]
[25 95]
[26 94]
[27 93]
[28 87]
[29 86]
[30 85]
[31 84]
[33 83]
[34 82]
[35 51]
[36 50]
[37 49]
[38 48]
[103 118]
[104 117]
[105 116]
[106 115]
[107 114]
[119 131]
[120 130]
[122 129]
[123 128]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
