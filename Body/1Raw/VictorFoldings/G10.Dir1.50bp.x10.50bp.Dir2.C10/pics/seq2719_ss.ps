%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:08 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGAACAUCACCUCUAGCAUCACCAGUAUUAGAGGCACCGCCUGCCCAGUGACACAUGUUUAAxxxxxxxxxxUGCACGAAACGGGAUCAAACAACCCCCUAGGAAUCACCUCCCAUUCCGAUAAAAUCACCUCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[108.59555817 288.37707520]
[108.59555817 273.37707520]
[108.59555817 258.37707520]
[108.59555817 243.37707520]
[108.59555817 228.37707520]
[108.59555817 213.37707520]
[108.59555817 198.37707520]
[108.59555817 183.37707520]
[108.59555817 168.37707520]
[108.59555817 153.37707520]
[92.22816467 152.07745361]
[77.43665314 146.00874329]
[65.53348541 135.99159241]
[57.48744965 123.18239594]
[53.84675980 108.94446564]
[38.85406113 109.41250610]
[23.86136627 109.88054657]
[8.86867046 110.34859467]
[-5.39453077 128.07441711]
[-31.76066780 124.41326141]
[-45.98744583 129.16706848]
[-60.21422577 133.92088318]
[-74.44100189 138.67469788]
[-75.86475372 153.83691406]
[-83.33810425 167.10601807]
[-95.56624603 176.18304443]
[-110.43058014 179.49536133]
[-125.35577393 176.46907043]
[-137.75595093 167.62850952]
[-145.48269653 154.50534058]
[-147.19731140 139.37326050]
[-142.60272217 124.85397339]
[-132.49497986 113.46304321]
[-118.62530518 107.17400360]
[-103.39670563 107.07648468]
[-89.44761658 113.18737793]
[-79.19481659 124.44792175]
[-64.96804047 119.69410706]
[-50.74126053 114.94029236]
[-36.51448059 110.18647766]
[-36.04644012 95.19378662]
[-49.94899750 89.56182861]
[-63.85155106 83.92987061]
[-77.75410461 78.29791260]
[-93.02874756 83.20352173]
[-106.30735779 74.20029449]
[-107.40373230 58.19474792]
[-95.47681427 47.46496201]
[-79.67592621 50.24191284]
[-72.12215424 64.39535522]
[-58.21959686 70.02731323]
[-44.31703949 75.65927124]
[-30.41448402 81.29122925]
[-13.42261505 76.93074799]
[1.24484277 83.04234314]
[8.40062809 95.35589600]
[23.39332390 94.88785553]
[38.38602066 94.41981506]
[53.37871552 93.95176697]
[55.70617676 82.11380005]
[61.03606796 71.07682037]
[69.10883331 61.60079575]
[79.47315979 54.36467743]
[91.51060486 49.91826630]
[104.47224426 48.64135361]
[105.71911621 33.69326401]
[106.96598816 18.74517822]
[108.21286774 3.79709101]
[94.25665283 -2.04066253]
[82.78879547 -11.90693951]
[74.93279266 -24.83514214]
[71.45829773 -39.55869675]
[72.70571136 -54.63513947]
[78.55281830 -68.58744049]
[88.42677307 -80.04868317]
[101.36023712 -87.89601898]
[116.08612061 -91.36064911]
[131.16172791 -90.10313416]
[145.11009216 -84.24668121]
[156.56472778 -74.36504364]
[164.40339661 -61.42632675]
[167.85815430 -46.69812775]
[166.59053040 -31.62336922]
[160.72474670 -17.67892265]
[150.83543396 -6.23092127]
[137.89146423 1.59907603]
[123.16094971 5.04396534]
[121.91407776 19.99205208]
[120.66720581 34.94013977]
[119.42032623 49.88822556]
[132.51348877 57.20733261]
[144.59347534 48.31498337]
[156.67346191 39.42263412]
[155.59400940 24.03307915]
[163.02618408 10.51396465]
[176.59837341 3.17918849]
[191.97976685 4.36925125]
[204.26222229 13.70440769]
[209.52642822 28.20584488]
[206.09260559 43.24620438]
[195.05648804 54.02616501]
[179.93963623 57.10588074]
[165.56581116 51.50262070]
[153.48582458 60.39496994]
[141.40583801 69.28732300]
[147.20886230 78.06639862]
[151.15356445 87.93250275]
[153.03863525 98.49287415]
[152.74565125 109.31803131]
[150.24563599 119.95924377]
[164.88912964 123.21006775]
[179.53263855 126.46089172]
[194.17613220 129.71171570]
[208.81964111 132.96253967]
[220.35456848 122.58348083]
[235.79066467 121.00019073]
[249.19241333 128.82148743]
[255.40658569 143.03991699]
[252.04370117 158.18820190]
[240.39685059 168.44152832]
[224.94448853 169.85726929]
[211.62837219 161.89105225]
[205.56881714 147.60604858]
[190.92530823 144.35522461]
[176.28181458 141.10440063]
[161.63830566 137.85357666]
[146.99481201 134.60273743]
[141.14498901 139.29632568]
[152.43734741 149.16966248]
[163.72970581 159.04299927]
[175.02204895 168.91633606]
[187.67288208 176.97589111]
[191.30059814 191.53060913]
[183.91229248 204.58483887]
[169.56674194 208.96722412]
[156.14469910 202.27029419]
[151.01951599 188.17469788]
[143.82814026 175.01097107]
[136.63674927 161.84722900]
[129.44537354 148.68348694]
[123.59555817 153.37707520]
[123.59555817 168.37707520]
[123.59555817 183.37707520]
[123.59555817 198.37707520]
[123.59555817 213.37707520]
[123.59555817 228.37707520]
[123.59555817 243.37707520]
[123.59555817 258.37707520]
[123.59555817 273.37707520]
[123.59555817 288.37707520]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[15 59]
[16 58]
[17 57]
[18 56]
[20 40]
[21 39]
[22 38]
[23 37]
[41 53]
[42 52]
[43 51]
[44 50]
[65 90]
[66 89]
[67 88]
[68 87]
[91 105]
[92 104]
[93 103]
[110 127]
[111 126]
[112 125]
[113 124]
[114 123]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
