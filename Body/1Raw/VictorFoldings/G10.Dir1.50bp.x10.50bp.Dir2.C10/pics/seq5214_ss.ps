%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:46 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGUAAACCAAACCCAGCUACGCAAAAUCUUAGCAUACUCCUCAAUUACCCACAUAGGAUGAAxxxxxxxxxxAGGAAUCUUCUUACUCAUCCGCUUCCACCCCCUAGCAGAAAAUAGCCCACUAAUCCAAACCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[163.81266785 177.76205444]
[153.15104675 167.21076965]
[142.48941040 156.65948486]
[131.82778931 146.10818481]
[121.16616058 135.55690002]
[110.39535522 125.11708832]
[99.51652527 114.78988647]
[85.10430908 110.63199615]
[70.39634705 113.57747650]
[55.68838882 116.52296448]
[40.98042679 119.46844482]
[26.27246666 122.41392517]
[11.56450462 125.35940552]
[10.61752796 140.95323181]
[5.68422937 155.76467896]
[-2.89614391 168.79338074]
[-14.53821659 179.16090393]
[-28.45042038 186.16999817]
[-43.68881226 189.35153198]
[-59.22112274 188.49583435]
[-73.99667358 183.66653442]
[-87.01747894 175.19583130]
[-97.40560150 163.66172791]
[-104.46240234 149.84849548]
[-119.10590363 153.09931946]
[-133.74940491 156.35014343]
[-148.39289856 159.60098267]
[-152.93058777 174.27424622]
[-164.20787048 184.70106506]
[-179.19122314 188.07664490]
[-193.85020447 183.49299622]
[-204.24162292 172.18309021]
[-207.57022095 157.18922424]
[-202.94064331 142.54467773]
[-191.59822083 132.18876648]
[-176.59399414 128.90718079]
[-161.96403503 133.58264160]
[-151.64372253 144.95747375]
[-137.00022888 141.70664978]
[-122.35672760 138.45582581]
[-107.71322632 135.20500183]
[-107.33377838 120.77990723]
[-103.49772644 106.85921478]
[-96.42533875 94.25936890]
[-86.52682495 83.72048950]
[-74.37854767 75.86286926]
[-60.68947601 71.15049744]
[-46.25979614 69.86365509]
[-31.93414688 72.08224487]
[-18.55217743 77.68082428]
[-6.89933157 86.33573151]
[2.33925223 97.54376221]
[8.61902237 110.65144348]
[23.32698441 107.70596313]
[38.03494644 104.76048279]
[52.74290848 101.81500244]
[67.45086670 98.86951447]
[82.15882874 95.92403412]
[67.90270996 91.25895691]
[61.73156738 77.58719635]
[67.66316223 63.80981445]
[81.83569336 58.89664078]
[95.02207184 66.04641724]
[98.63732910 80.60381317]
[102.64506531 66.14912415]
[106.65280914 51.69443893]
[110.66054535 37.23974991]
[114.66828918 22.78506088]
[118.67602539 8.33037281]
[105.47048950 1.07016957]
[94.29563904 -9.04018784]
[85.75410461 -21.45545959]
[80.30653381 -35.50610733]
[78.24670410 -50.43439484]
[79.68569946 -65.43526459]
[84.54592133 -79.69972992]
[92.56524658 -92.45853424]
[103.31122589 -103.02360535]
[116.20433044 -110.82518005]
[130.54924011 -115.44254303]
[145.57238770 -116.62667084]
[160.46354675 -114.31371307]
[174.41969299 -108.62839508]
[186.68817139 -99.87733459]
[196.60736084 -88.53244781]
[203.64234924 -75.20556641]
[207.41371155 -60.61538315]
[207.71809387 -45.54872894]
[204.53907776 -30.81813049]
[198.04808044 -17.21798897]
[188.59518433 -5.48174620]
[176.69015503 3.75767946]
[162.97502136 10.00201702]
[148.18942261 12.91451740]
[133.13072205 12.33811283]
[129.12297058 26.79280090]
[125.11523438 41.24748993]
[121.10749817 55.70217896]
[117.09975433 70.15686798]
[113.09201813 84.61155701]
[114.91040039 89.42166901]
[115.26266479 94.11109161]
[114.33413696 98.27990723]
[112.41001129 101.61463165]
[109.84373474 103.91105652]
[120.72255707 114.23826599]
[129.15898132 117.90958405]
[131.71745300 124.89527130]
[142.37907410 135.44656372]
[153.04071045 145.99784851]
[163.70233154 156.54914856]
[174.36395264 167.10043335]
[186.44187927 158.15480042]
[199.74383545 151.15779114]
[213.95803833 146.27343750]
[228.75126648 143.61621094]
[243.77674866 143.24841309]
[258.68228149 145.17866516]
[273.11840820 149.36172485]
[286.74679565 155.69953918]
[299.24792480 164.04351807]
[310.32876587 174.19808960]
[319.72958374 185.92520142]
[327.22998047 198.94996643]
[332.65417480 212.96705627]
[335.87496948 227.64788818]
[336.81689453 242.64833069]
[335.45785522 257.61672974]
[331.82971191 272.20223999]
[326.01751709 286.06295776]
[318.15753174 298.87393188]
[308.43399048 310.33483887]
[297.07482910 320.17709351]
[284.34631348 328.16992188]
[270.54681396 334.12597656]
[255.99984741 337.90563965]
[241.04637146 339.42031860]
[226.03694153 338.63449097]
[211.32341003 335.56658936]
[197.25065613 330.28851318]
[184.14857483 322.92401123]
[172.32429504 313.64569092]
[162.05500793 302.67108154]
[153.58143616 290.25741577]
[147.10220337 276.69570923]
[142.76919556 262.30386353]
[140.68399048 247.41921997]
[140.89546204 232.39071655]
[143.39866638 217.57064819]
[148.13490295 203.30641174]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 112]
[2 111]
[3 110]
[4 109]
[5 108]
[6 106]
[7 105]
[8 58]
[9 57]
[10 56]
[11 55]
[12 54]
[13 53]
[24 41]
[25 40]
[26 39]
[27 38]
[64 100]
[65 99]
[66 98]
[67 97]
[68 96]
[69 95]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
