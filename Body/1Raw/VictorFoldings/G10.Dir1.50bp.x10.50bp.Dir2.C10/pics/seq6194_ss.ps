%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:29 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGAGGCCUAACCCCUGUCUUUAGAUUUACAGUCCAAUGCUUCACUCAGCCAUUUUACCUCACxxxxxxxxxxACAGUCUACCCUCCCUUAGCAGGGAACUACUCCCACCCUGGAGCCUCCGUAGACCUAACCCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[145.66134644 316.35510254]
[145.03736877 301.36810303]
[144.41339111 286.38107300]
[143.78941345 271.39404297]
[143.16543579 256.40704346]
[142.54145813 241.42002869]
[141.91748047 226.43301392]
[141.29350281 211.44599915]
[138.80839539 196.65328979]
[134.50080872 182.28509521]
[130.19322205 167.91691589]
[125.88563538 153.54873657]
[121.57804871 139.18054199]
[117.27046967 124.81236267]
[110.64917755 121.28979492]
[113.39785767 136.03579712]
[103.58287048 147.37890625]
[88.59491730 146.77772522]
[79.71997070 134.68495178]
[83.64086914 120.20646667]
[97.40658569 114.24465942]
[90.78529358 110.72209167]
[76.46269989 115.17890930]
[62.14010239 119.63572693]
[47.81750488 124.09254456]
[44.51524353 139.09222412]
[34.14371490 150.42037964]
[19.49280930 155.02976990]
[4.50354576 151.68051147]
[-6.79203844 141.27352905]
[-11.35548878 126.60824585]
[-7.95925951 111.62955475]
[2.48308110 100.36664581]
[17.16259575 95.84918976]
[32.13056564 99.29235077]
[43.36068726 109.76994324]
[57.68328476 105.31312561]
[72.00588226 100.85631561]
[86.32848358 96.39949799]
[96.54196167 85.41383362]
[99.94493866 70.80493927]
[103.34791565 56.19604874]
[106.75089264 41.58715439]
[94.40525818 17.21819496]
[115.77204895 -4.80173492]
[114.21446991 -19.72064781]
[112.65688324 -34.63956070]
[111.09930420 -49.55847168]
[96.08273315 -49.84528351]
[81.21523285 -51.97532654]
[66.72219849 -55.91630936]
[52.82332230 -61.60849380]
[39.72932053 -68.96558380]
[27.63869286 -77.87604523]
[16.73472977 -88.20480347]
[7.18273306 -99.79527283]
[-0.87249249 -112.47174072]
[-7.30883121 -126.04204559]
[-12.02871037 -140.30046082]
[-14.96057701 -155.03082275]
[-16.05998611 -170.00984192]
[-15.31026840 -185.01043701]
[-12.72279167 -199.80517578]
[-8.33678055 -214.16979980]
[-2.21872616 -227.88655090]
[5.53862381 -240.74746704]
[14.81766891 -252.55758667]
[25.47774315 -263.13787842]
[37.35723877 -272.32794189]
[50.27607346 -279.98843384]
[64.03839111 -286.00326538]
[78.43556213 -290.28125000]
[93.24933624 -292.75750732]
[108.25512695 -293.39450073]
[123.22546387 -292.18258667]
[137.93339539 -289.14013672]
[152.15594482 -284.31326294]
[165.67750549 -277.77517700]
[178.29310608 -269.62493896]
[189.81149292 -259.98611450]
[200.05802917 -249.00486755]
[208.87741089 -236.84764099]
[216.13592529 -223.69874573]
[221.72352600 -209.75749207]
[225.55551147 -195.23526001]
[227.57380676 -180.35217285]
[227.74778748 -165.33387756]
[226.07484436 -150.40803528]
[222.58030701 -135.80091858]
[217.31718445 -121.73396301]
[210.36523438 -108.42043304]
[201.82987976 -96.06214905]
[191.84048462 -84.84645844]
[180.54849243 -74.94339752]
[168.12509155 -66.50308990]
[154.75862122 -59.65348434]
[140.65171814 -54.49842072]
[126.01821899 -51.11605072]
[127.57579803 -36.19713974]
[129.13337708 -21.27822876]
[130.69096375 -6.35931587]
[142.86279297 2.40689135]
[157.50630188 -0.84393436]
[172.14979553 -4.09475994]
[186.79330444 -7.34558582]
[196.58755493 -20.05196953]
[212.63015747 -20.17273712]
[222.61459351 -7.61524582]
[218.88165283 7.98747158]
[204.29493713 14.66634560]
[190.04412842 7.29791546]
[175.40061951 10.54874134]
[160.75712585 13.79956722]
[146.11361694 17.05039215]
[145.39698792 26.19521523]
[141.83389282 34.22760773]
[136.06198120 40.33301926]
[128.92559814 43.98564148]
[121.35978699 44.99013138]
[117.95681000 59.59902573]
[114.55383301 74.20791626]
[111.15085602 88.81681061]
[131.63865662 120.50477600]
[135.94624329 134.87297058]
[140.25381470 149.24114990]
[144.56140137 163.60932922]
[148.86898804 177.97750854]
[153.17657471 192.34570312]
[158.04438782 178.15751648]
[168.50022888 167.40226746]
[182.54534912 162.13591003]
[197.49488831 163.36515808]
[210.49110413 170.85504150]
[219.04963684 183.17379761]
[221.53443909 197.96655273]
[217.47050476 212.40554810]
[207.63471985 223.73062134]
[193.90725708 229.77685547]
[178.91229248 229.38847351]
[165.51623535 222.63972473]
[156.28053284 210.82202148]
[156.90449524 225.80903625]
[157.52847290 240.79605103]
[158.15245056 255.78306580]
[158.77642822 270.77008057]
[159.40040588 285.75708008]
[160.02438354 300.74411011]
[160.64836121 315.73114014]
[167.34835815 331.30502319]
[154.23782349 342.05447388]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 148]
[2 147]
[3 146]
[4 145]
[5 144]
[6 143]
[7 142]
[8 141]
[9 128]
[10 127]
[11 126]
[12 125]
[13 124]
[14 123]
[22 39]
[23 38]
[24 37]
[25 36]
[40 122]
[41 121]
[42 120]
[43 119]
[45 101]
[46 100]
[47 99]
[48 98]
[102 114]
[103 113]
[104 112]
[105 111]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
