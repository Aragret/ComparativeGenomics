%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:36 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCCUCCUCUCCCUAGGAGGCCUGCCCCCGCUAACCGGCUUUUUGCCCAAAUGGGCCAUUAUCGxxxxxxxxxxUCAUUCACACGAGAAAACACCCUCAUGUUCAUACACCUAUCCCCCAUUCUCCUCCUAUCCCUCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[-34.48922729 262.38299561]
[-44.47223282 253.56875610]
[-55.13244247 264.12149048]
[-65.79264832 274.67419434]
[-76.45285797 285.22692871]
[-87.11307526 295.77963257]
[-91.47727966 310.98703003]
[-105.96561432 314.44207764]
[-116.62582397 324.99481201]
[-127.28603363 335.54754639]
[-137.94624329 346.10025024]
[-148.60644531 356.65298462]
[-159.26666260 367.20568848]
[-169.92687988 377.75842285]
[-180.58708191 388.31112671]
[-191.24729919 398.86386108]
[-191.07673645 414.66723633]
[-202.19035339 425.90390015]
[-217.99464417 425.90737915]
[-229.11318970 414.67556763]
[-228.94956970 398.87213135]
[-217.60084534 387.87295532]
[-201.80001831 388.20364380]
[-191.13980103 377.65093994]
[-180.47959900 367.09820557]
[-169.81938171 356.54550171]
[-159.15917969 345.99276733]
[-148.49896240 335.44003296]
[-137.83876038 324.88732910]
[-127.17854309 314.33459473]
[-116.51833344 303.78189087]
[-112.91661072 289.32931519]
[-97.66579437 285.11944580]
[-87.00558472 274.56671143]
[-76.34537506 264.01397705]
[-65.68516541 253.46127319]
[-55.02495193 242.90855408]
[-67.80026245 227.66621399]
[-79.08258820 211.28797913]
[-88.77156067 193.91958618]
[-96.78096008 175.71554565]
[-103.03952789 156.83784485]
[-107.49157715 137.45443726]
[-110.09750366 117.73777008]
[-110.83411407 97.86329651]
[-109.69486237 78.00783539]
[-106.68987274 58.34804153]
[-101.84589386 39.05884171]
[-95.20601654 20.31185532]
[-86.82932281 2.27388573]
[-76.79034424 -14.89458084]
[-65.17839050 -31.04078865]
[-52.09679031 -46.02108002]
[-62.54093933 -56.78768158]
[-72.98509216 -67.55428314]
[-83.42923737 -78.32089233]
[-99.34263611 -82.28269196]
[-103.60762024 -98.11753082]
[-91.83674622 -109.53587341]
[-76.13887787 -104.79151154]
[-72.66263580 -88.76503754]
[-62.21848679 -77.99843597]
[-51.77433777 -67.23183441]
[-41.33018875 -56.46522903]
[-31.09437370 -65.13586426]
[-20.32790184 -73.13805389]
[-9.07435608 -80.43939209]
[2.62071276 -87.01033020]
[14.70996380 -92.82427216]
[27.14446068 -97.85767365]
[39.87386703 -102.09017181]
[52.84666061 -105.50463104]
[66.01033020 -108.08721924]
[79.31157684 -109.82749939]
[92.69657898 -110.71841431]
[106.11113739 -110.75636292]
[119.50096130 -109.94118500]
[132.81184387 -108.27619171]
[145.98991394 -105.76811218]
[158.98181152 -102.42710876]
[171.73497009 -98.26670074]
[184.19773865 -93.30372620]
[196.31968689 -87.55827332]
[208.05174255 -81.05361176]
[219.34642029 -73.81605530]
[230.15798950 -65.87490845]
[240.44270325 -57.26232147]
[250.15890503 -48.01314926]
[259.26727295 -38.16483307]
[270.94039917 -47.58493423]
[282.61352539 -57.00503922]
[288.49383545 -71.69287109]
[303.25738525 -73.66445923]
[314.93051147 -83.08455658]
[326.60360718 -92.50466156]
[325.68322754 -107.99441528]
[334.07159424 -121.04871368]
[348.54324341 -126.64791107]
[363.53353882 -122.63899994]
[373.27835083 -110.56349182]
[374.03067017 -95.06466675]
[365.50115967 -82.10213470]
[350.96963501 -76.66025543]
[336.02371216 -80.83154297]
[324.35061646 -71.41144562]
[312.67749023 -61.99134064]
[307.63211060 -47.97729874]
[292.03363037 -45.33192062]
[280.36050415 -35.91181946]
[268.68737793 -26.49171638]
[276.33636475 -15.59013557]
[283.28182983 -4.22741890]
[289.49615479 7.55110216]
[294.95446777 19.69843864]
[299.63507080 32.16613007]
[303.51919556 44.90443802]
[306.59143066 57.86254501]
[308.83950806 70.98875427]
[310.25442505 84.23070526]
[310.83053589 97.53556061]
[310.56558228 110.85025024]
[309.46057129 124.12165070]
[307.51995850 137.29682922]
[304.75146484 150.32321167]
[301.16613770 163.14881897]
[296.77825928 175.72251892]
[291.60537720 187.99412537]
[285.66809082 199.91468811]
[278.99011230 211.43666077]
[271.59805298 222.51405334]
[263.52145386 233.10269165]
[254.79246521 243.16033936]
[245.44596863 252.64685059]
[235.51921082 261.52438354]
[225.05183411 269.75756836]
[214.08555603 277.31347656]
[202.66415405 284.16204834]
[190.83319092 290.27590942]
[178.63984680 295.63067627]
[166.13278198 300.20501709]
[153.36189270 303.98062134]
[140.37811279 306.94250488]
[127.23324585 309.07879639]
[113.97973633 310.38098145]
[100.67045593 310.84387207]
[87.35850525 310.46563721]
[74.09698486 309.24774170]
[60.93880463 307.19509888]
[47.93645096 304.31588745]
[35.14179993 300.62155151]
[22.60589600 296.12686157]
[10.37874794 290.84973145]
[-1.49086511 284.81124878]
[-12.95559120 278.03546143]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 37]
[3 36]
[4 35]
[5 34]
[6 33]
[8 31]
[9 30]
[10 29]
[11 28]
[12 27]
[13 26]
[14 25]
[15 24]
[16 23]
[53 64]
[54 63]
[55 62]
[56 61]
[89 110]
[90 109]
[91 108]
[93 106]
[94 105]
[95 104]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
