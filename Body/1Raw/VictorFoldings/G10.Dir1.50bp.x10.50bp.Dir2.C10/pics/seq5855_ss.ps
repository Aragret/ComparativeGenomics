%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:35 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCACACUCAUCGCCCUUACCACGCUACUCCUACCUAUCUCCCCUUUUAUACUAAUAAUCUUxxxxxxxxxxAGGAUUCAUCUUUCUUUUCACCGUAGGUGGCCUGACUGGCAUUGUAUUAGCAAACUCAUCCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[71.42790222 450.44033813]
[71.42790222 435.44033813]
[71.42790222 420.44033813]
[71.42790222 405.44033813]
[71.42790222 390.44033813]
[71.42790222 375.44033813]
[71.42790222 360.44033813]
[71.42790222 345.44033813]
[71.42790222 330.44033813]
[71.42790222 315.44033813]
[57.07588196 312.72836304]
[43.46776962 307.41091919]
[31.07229614 299.66955566]
[20.31673813 289.76928711]
[11.57216835 278.04959106]
[5.14066362 264.91281128]
[1.24486959 250.81024170]
[0.02029085 236.22663879]
[1.51057935 221.66363525]
[5.66598034 207.62243652]
[12.34499168 194.58653259]
[21.31918335 183.00512695]
[32.28100586 173.27761841]
[44.85433578 165.73980713]
[58.60737228 160.65234375]
[73.06748199 158.19168091]
[73.37953949 143.19493103]
[73.69159698 128.19818115]
[85.90625763 87.85207367]
[81.89852142 73.39738464]
[77.89077759 58.94269562]
[72.54935455 51.45129395]
[73.95336914 44.14551926]
[70.24720764 29.61058235]
[66.54105377 15.07564545]
[62.83488846 0.54070967]
[56.48775864 -13.05024147]
[47.72155380 -25.22207832]
[38.95534515 -37.39391327]
[30.18913841 -49.56575012]
[16.49065590 -43.34132767]
[1.84569776 -39.91019821]
[-13.18244934 -39.40241241]
[-28.01613617 -41.83561707]
[-42.08555222 -47.11444092]
[-54.85061646 -55.03424835]
[-65.82170868 -65.28906250]
[-74.57844543 -77.48338318]
[-80.78578949 -91.14743805]
[-84.20689392 -105.75531006]
[-84.71207428 -120.74511719]
[-82.28380585 -135.54069519]
[-77.01725006 -149.57369995]
[-69.11658478 -162.30545044]
[-58.88703918 -173.24760437]
[-67.65324402 -185.41943359]
[-76.41945648 -197.59127808]
[-85.18566132 -209.76310730]
[-100.35313416 -215.99847412]
[-102.26842499 -232.28538513]
[-88.96124268 -241.86927795]
[-74.12087250 -234.89105225]
[-73.01382446 -218.52931213]
[-64.24761963 -206.35748291]
[-55.48141098 -194.18563843]
[-46.71520233 -182.01380920]
[-33.09514618 -188.24824524]
[-18.51580811 -191.70668030]
[-3.53709650 -192.25440979]
[11.26537132 -189.86846924]
[25.32238388 -184.63874817]
[38.09302521 -176.76445007]
[49.08549118 -166.54666138]
[57.87602234 -154.37667847]
[64.12525177 -140.72116089]
[67.59129333 -126.10415649]
[68.13910675 -111.08702087]
[65.74578094 -96.24684906]
[60.50143433 -82.15430450]
[52.60587692 -69.35166168]
[42.36097336 -58.33195877]
[51.12718201 -46.16012192]
[59.89339066 -33.98828506]
[68.65959930 -21.81644821]
[67.60428619 -36.77927780]
[71.13967896 -51.35669327]
[78.93229675 -64.17367554]
[90.24710846 -74.02127075]
[104.01683807 -79.97060394]
[118.94265747 -81.46049500]
[133.61669922 -78.35042572]
[146.65483093 -70.93373871]
[156.82722473 -59.91002274]
[163.17437744 -46.31908417]
[165.09759521 -31.44288635]
[162.41548157 -16.68462753]
[155.38099670 -3.43637753]
[144.65769958 7.05222321]
[131.25703430 13.79183960]
[116.44304657 16.14675522]
[101.61304474 13.89484692]
[88.16587830 7.24852276]
[77.36982727 -3.16545153]
[81.07598877 11.36948490]
[84.78215027 25.90442085]
[88.48831177 40.43935776]
[92.34546661 54.93495178]
[96.35321045 69.38964081]
[100.36094666 83.84432983]
[111.96228790 93.35269165]
[126.92253876 94.44400024]
[141.88278198 95.53530884]
[154.91342163 86.17677307]
[170.31497192 90.66808319]
[176.27268982 105.56388855]
[168.21632385 119.43740845]
[152.32601929 121.64606476]
[140.79147339 110.49555969]
[125.83123016 109.40425110]
[110.87097931 108.31293488]
[105.32532501 113.36225891]
[108.52538300 128.01693726]
[94.23400879 123.46091461]
[88.68834686 128.51023865]
[88.37628937 143.50698853]
[88.06423950 158.50373840]
[103.13343811 161.79432678]
[117.27296448 167.94570923]
[129.94560242 176.72222900]
[140.67024231 187.78848267]
[149.04016113 200.72222900]
[154.73843384 215.03041077]
[157.54994202 230.16801453]
[157.36950684 245.55879211]
[154.20578003 260.61724854]
[148.18087769 274.77084351]
[139.52568054 287.48181152]
[128.57096863 298.26760864]
[115.73476410 306.71911621]
[101.50640869 312.51632690]
[86.42790222 315.44033813]
[86.42790222 330.44033813]
[86.42790222 345.44033813]
[86.42790222 360.44033813]
[86.42790222 375.44033813]
[86.42790222 390.44033813]
[86.42790222 405.44033813]
[86.42790222 420.44033813]
[86.42790222 435.44033813]
[86.42790222 450.44033813]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[26 126]
[27 125]
[28 124]
[29 109]
[30 108]
[31 107]
[33 106]
[34 105]
[35 104]
[36 103]
[37 84]
[38 83]
[39 82]
[40 81]
[55 66]
[56 65]
[57 64]
[58 63]
[110 120]
[111 119]
[112 118]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
