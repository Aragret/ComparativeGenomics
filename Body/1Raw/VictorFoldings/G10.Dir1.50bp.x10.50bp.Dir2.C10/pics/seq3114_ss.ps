%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:10 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGUAAAUGAUAUCAUCUCAACUUAGUAUUAUACCCACACCCACCCAAGAACAGGGUUUGUUAxxxxxxxxxxCUCAUACACCUCCUAUGAAAAAACUUCCUACCACUCACCCUAGCAUUACUUAUAUGAUAUCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[1.82785094 155.41604614]
[-11.69633865 161.90420532]
[-25.22052956 168.39237976]
[-34.31621170 181.33761597]
[-49.13800812 179.86666870]
[-62.66219711 186.35484314]
[-76.18638611 192.84300232]
[-89.50154114 199.75000000]
[-102.59469604 207.06910706]
[-115.68785095 214.38821411]
[-128.78100586 221.70732117]
[-141.87416077 229.02642822]
[-154.89047241 236.48133850]
[-167.82852173 244.07124329]
[-180.76658630 251.66114807]
[-193.70463562 259.25106812]
[-201.69277954 272.90756226]
[-216.58554077 272.67376709]
[-229.52360535 280.26370239]
[-228.73756409 295.54901123]
[-235.15553284 309.44390869]
[-247.30268860 318.75546265]
[-262.38772583 321.34390259]
[-276.94421387 316.61450195]
[-287.62716675 305.65396118]
[-291.98171997 290.98098755]
[-289.00723267 275.96728516]
[-279.38720703 264.06292725]
[-265.33227539 258.00341797]
[-250.07215881 259.18121338]
[-237.11351013 267.32562256]
[-224.17544556 259.73571777]
[-217.11273193 246.62210083]
[-201.29454041 246.31300354]
[-188.35649109 238.72309875]
[-175.41844177 231.13317871]
[-162.48037720 223.54327393]
[-158.27522278 217.40631104]
[-149.19326782 215.93327332]
[-136.10011292 208.61416626]
[-123.00695801 201.29505920]
[-109.91380310 193.97595215]
[-96.82064819 186.65684509]
[-95.51792145 183.31463623]
[-92.49529266 180.45712280]
[-88.00804901 178.90242004]
[-82.67455292 179.31881714]
[-69.15036011 172.83064270]
[-55.62617493 166.34248352]
[-47.49782944 153.86132812]
[-31.70869446 154.86817932]
[-18.18450356 148.38002014]
[-4.66031408 141.89186096]
[-12.64484406 104.45509338]
[-7.64187098 66.50467682]
[9.77178288 32.41614151]
[37.58839417 6.11975670]
[30.13348198 -6.89655304]
[22.67857170 -19.91286278]
[15.22366142 -32.92917252]
[0.18102241 -38.50577927]
[-4.70088482 -53.78800964]
[4.32292175 -67.05264282]
[20.33014870 -68.12418365]
[31.04142380 -56.18064499]
[28.23997116 -40.38408279]
[35.69488144 -27.36777306]
[43.14979172 -14.35146332]
[50.60470200 -1.33515370]
[58.46010590 -4.80050659]
[66.55646515 -7.65797043]
[74.84680176 -9.89097118]
[83.28304291 -11.48655701]
[91.81625366 -12.43547058]
[100.39692688 -12.73221016]
[108.97530365 -12.37505436]
[117.50161743 -11.36607265]
[125.92641449 -9.71111965]
[134.20082092 -7.41979456]
[142.27685547 -4.50538731]
[150.10766602 -0.98480344]
[157.64782715 3.12153649]
[166.15892029 -9.23003578]
[174.67001343 -21.58160782]
[183.18110657 -33.93318176]
[191.69218445 -46.28475189]
[187.35739136 -61.30951691]
[193.74169922 -75.58448029]
[207.83062744 -82.36944580]
[222.97184753 -78.46076202]
[232.01609802 -65.70398712]
[230.69299316 -50.12247467]
[219.62724304 -39.07334900]
[204.04376221 -37.77366257]
[195.53266907 -25.42209053]
[187.02157593 -13.07051849]
[178.51049805 -0.71894580]
[169.99940491 11.63262653]
[175.62016296 16.39199257]
[180.91816711 21.50822067]
[185.87077332 26.95947647]
[190.45686340 32.72248840]
[194.65686035 38.77266312]
[198.45283508 45.08417511]
[201.82858276 51.63008499]
[204.76969910 58.38245010]
[207.26361084 65.31245422]
[209.29969788 72.39051056]
[210.86926270 79.58641815]
[211.96560669 86.86945343]
[212.58404541 94.20853424]
[212.72193909 101.57233429]
[212.37870789 108.92942047]
[211.55580139 116.24839783]
[210.25675964 123.49801636]
[208.48709106 130.64733887]
[206.25437927 137.66586304]
[203.56813049 144.52360535]
[200.43981934 151.19131470]
[196.88281250 157.64051819]
[192.91227722 163.84368896]
[188.54516602 169.77436829]
[183.80010986 175.40722656]
[178.69738770 180.71821594]
[173.25874329 185.68467712]
[167.50741577 190.28541565]
[161.46794128 194.50079346]
[155.16610718 198.31280518]
[148.62881470 201.70520020]
[141.88395691 204.66348267]
[134.96031189 207.17501831]
[127.88745880 209.22911072]
[120.69557190 210.81697083]
[113.41535187 211.93183899]
[106.07786560 212.56895447]
[98.71443939 212.72558594]
[91.35650635 212.40106201]
[84.03545380 211.59678650]
[76.78255463 210.31617737]
[69.62874603 208.56471252]
[62.60457611 206.34985352]
[55.74002075 203.68106079]
[49.06437683 200.56973267]
[42.60614395 197.02914429]
[36.39288712 193.07440186]
[30.45112038 188.72238159]
[24.80621147 183.99168396]
[19.48225212 178.90248108]
[14.50196552 173.47648621]
[9.88661003 167.73689270]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 53]
[2 52]
[3 51]
[5 49]
[6 48]
[7 47]
[8 43]
[9 42]
[10 41]
[11 40]
[12 39]
[13 37]
[14 36]
[15 35]
[16 34]
[18 32]
[19 31]
[57 69]
[58 68]
[59 67]
[60 66]
[82 98]
[83 97]
[84 96]
[85 95]
[86 94]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
