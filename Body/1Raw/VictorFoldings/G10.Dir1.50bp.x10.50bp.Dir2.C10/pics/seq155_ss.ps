%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:35 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGUACUAAAGUGUGUUAAUUAAUUAAUGCUUGUAGGACAUAAUAAUAACAAUUGAAUGUCUGxxxxxxxxxxAGCUAAAACUCACCUGAGUUGUAAAAAACUCCAGUUGACACAAAAUAGACUACGAAAGUGCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[141.32138062 460.61245728]
[141.00932312 445.61569214]
[140.69726562 430.61892700]
[140.38520813 415.62219238]
[140.07315063 400.62542725]
[139.76109314 385.62866211]
[139.44903564 370.63192749]
[139.13697815 355.63516235]
[138.82492065 340.63842773]
[136.95730591 325.75512695]
[133.55433655 311.14624023]
[128.94395447 305.30758667]
[130.23587036 296.19808960]
[127.13755035 281.52154541]
[124.03923035 266.84503174]
[110.38816833 260.94702148]
[102.73719025 247.98837280]
[104.20092010 232.83216858]
[114.42662811 221.31083679]
[111.32830811 206.63430786]
[108.22998810 191.95777893]
[105.13166046 177.28125000]
[102.03334045 162.60472107]
[98.93502045 147.92820740]
[95.83670044 133.25167847]
[92.73837280 118.57514954]
[76.21484375 94.57508850]
[65.55322266 84.02380371]
[54.89159393 73.47251129]
[41.98762894 81.99275970]
[27.60509300 87.65628052]
[12.36745739 90.22006989]
[-3.06525993 89.57543182]
[-18.02508354 85.75261688]
[-31.86498451 78.91937256]
[-43.98687363 69.37359619]
[-53.86744690 57.53034592]
[-61.08076859 43.90381241]
[-65.31663513 29.08497429]
[-66.39392853 13.71597099]
[-64.26833344 -1.53771639]
[-59.03417969 -16.01608658]
[-50.92024612 -29.09316826]
[-61.79907227 -39.42037201]
[-72.67789459 -49.74757767]
[-83.55672455 -60.07478333]
[-94.43554688 -70.40198517]
[-105.31437683 -80.72919464]
[-118.24674988 -81.18475342]
[-127.09935760 -90.06452179]
[-127.48845673 -102.19530487]
[-138.15008545 -112.74659729]
[-148.81170654 -123.29788971]
[-159.47332764 -133.84918213]
[-175.46424866 -137.48550415]
[-180.05139160 -153.23004150]
[-168.51591492 -164.88613892]
[-152.72451782 -160.46302795]
[-148.92204285 -144.51080322]
[-138.26042175 -133.95951843]
[-127.59879303 -123.40822601]
[-116.93716431 -112.85693359]
[-99.76832581 -109.35964966]
[-94.98716736 -91.60801697]
[-84.10834503 -81.28081512]
[-73.22951508 -70.95360565]
[-62.35069275 -60.62640381]
[-51.47186661 -50.29919815]
[-40.59304428 -39.97199249]
[-28.67392349 -48.35377884]
[-15.33836746 -54.23832703]
[-1.10311079 -57.39548492]
[13.47983360 -57.70082474]
[27.84457588 -55.14054489]
[41.43331146 -49.81208038]
[53.71797562 -41.92039490]
[64.22077942 -31.77010918]
[72.53277588 -19.75372314]
[78.32978058 -6.33645535]
[81.38504028 7.96177578]
[81.57807922 22.58649635]
[78.89944458 36.97018051]
[73.45117188 50.55427551]
[65.44288635 62.81088257]
[76.10450745 73.36217499]
[86.76613617 83.91346741]
[79.09008026 71.02633667]
[80.90876007 56.13699341]
[91.46109009 45.47639465]
[106.33108521 43.50582504]
[119.29589844 51.04993057]
[124.92996979 64.95162964]
[120.87552643 79.39328766]
[108.82807922 88.33168793]
[122.73063660 82.69972992]
[136.63319397 77.06777191]
[150.47640991 71.29150391]
[164.25878906 65.37153625]
[178.04116821 59.45157623]
[191.82354736 53.53161240]
[197.44770813 38.76189804]
[211.90232849 32.37133026]
[226.61175537 38.15132141]
[232.84913635 52.67270279]
[226.91395569 67.32019806]
[212.32743835 73.40370941]
[197.74351501 67.31399536]
[183.96113586 73.23395538]
[170.17875671 79.15392303]
[156.39637756 85.07388306]
[151.45983887 90.63951874]
[142.26515198 90.97032928]
[128.36259460 96.60228729]
[114.46003723 102.23424530]
[107.41490173 115.47682953]
[110.51322174 130.15335083]
[113.61154175 144.82987976]
[116.70986938 159.50640869]
[119.80818939 174.18293762]
[122.90650940 188.85945129]
[126.00482941 203.53598022]
[129.10314941 218.21250916]
[143.11323547 224.61749268]
[150.57821655 237.88879395]
[148.81799316 252.83421326]
[138.71575928 263.74670410]
[141.81407166 278.42324829]
[144.91239929 293.09976196]
[148.16322327 307.74325562]
[151.56620789 322.35214233]
[158.01826477 308.81069946]
[170.29812622 300.19647217]
[185.22717285 298.73922729]
[198.94107056 304.81613159]
[207.89001465 316.85427856]
[209.75759888 331.73754883]
[204.06040955 345.61349487]
[192.27314758 354.89038086]
[177.44689941 357.16687012]
[163.41940308 351.85372925]
[153.82167053 340.32635498]
[154.13372803 355.32312012]
[154.44578552 370.31985474]
[154.75784302 385.31661987]
[155.06990051 400.31338501]
[155.38195801 415.31011963]
[155.69401550 430.30688477]
[156.00607300 445.30361938]
[156.31813049 460.30038452]
[158.90913391 479.50811768]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 149]
[2 148]
[3 147]
[4 146]
[5 145]
[6 144]
[7 143]
[8 142]
[9 141]
[10 130]
[11 129]
[13 128]
[14 127]
[15 126]
[19 122]
[20 121]
[21 120]
[22 119]
[23 118]
[24 117]
[25 116]
[26 115]
[27 86]
[28 85]
[29 84]
[43 69]
[44 68]
[45 67]
[46 66]
[47 65]
[48 64]
[51 62]
[52 61]
[53 60]
[54 59]
[94 114]
[95 113]
[96 112]
[97 110]
[98 109]
[99 108]
[100 107]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
