%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:53 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGUCAACUUUAAAUUUGCCCACAGAACCCUCUAAAUCCCCUUGUAAAUUUAACUGUUAGUCCAxxxxxxxxxxGCUCACAAGAACUGCUAACUCAUGCCCCCAUGUCUAACAACAUGGCUUUCUCAACUUUUAACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[94.06095886 290.75036621]
[94.06095886 275.75036621]
[94.06095886 260.75036621]
[94.06095886 245.75038147]
[94.06095886 230.75038147]
[94.06095886 215.75038147]
[94.06095886 200.75038147]
[94.06095886 185.75038147]
[94.06095886 170.75038147]
[94.06095886 155.75038147]
[71.44081879 134.64170837]
[67.75998688 109.90311432]
[78.35470581 93.65132141]
[63.36182404 93.18939972]
[48.36893845 92.72747040]
[32.39023972 101.82208252]
[17.82440567 92.08139801]
[2.82519627 91.92739868]
[-12.17401314 91.77339935]
[-27.17322350 91.61940765]
[-42.17243195 91.46540833]
[-57.17164230 91.31140900]
[-72.17085266 91.15741730]
[-87.17005920 91.00341797]
[-90.98855591 93.35262299]
[-94.95644379 94.23545837]
[-98.58259583 93.79074097]
[-101.47475433 92.30593109]
[-103.38033295 90.17056274]
[-118.31634521 88.78653717]
[-133.25234985 87.40251160]
[-139.21795654 101.30455017]
[-149.18908691 112.68136597]
[-162.18884277 120.41837311]
[-176.94367981 123.75757599]
[-192.00804138 122.37184143]
[-205.90606689 116.39691925]
[-217.27619934 106.41817474]
[-225.00450134 93.41323090]
[-228.33381653 78.65616608]
[-226.93798828 63.59274292]
[-220.95375061 49.69870758]
[-210.96739197 38.33526611]
[-197.95727539 30.61568642]
[-183.19798279 27.29625893]
[-168.13549805 28.70218468]
[-154.24548340 34.69572449]
[-142.88873291 44.68969345]
[-135.17787170 57.70498657]
[-131.86833191 72.46649933]
[-116.93231964 73.85052490]
[-101.99630737 75.23455048]
[-87.01606750 76.00420380]
[-72.01685333 76.15820312]
[-57.01764297 76.31220245]
[-42.01843643 76.46620178]
[-27.01922607 76.62019348]
[-12.02001667 76.77419281]
[2.97919321 76.92819214]
[17.97840309 77.08218384]
[26.87152100 68.82539368]
[39.40824890 68.86791229]
[48.83086395 77.73458862]
[63.82374954 78.19651031]
[78.81663513 78.65843964]
[90.30730438 69.01662445]
[92.45587921 54.17130280]
[94.60446167 39.32598114]
[80.68102264 33.53040695]
[68.63681030 24.45363617]
[59.22893143 12.66624165]
[53.04877853 -1.09081101]
[50.48483658 -15.95274258]
[51.69827652 -30.98531914]
[56.61282730 -45.24358368]
[64.91954803 -57.83124161]
[76.09627533 -67.95703125]
[89.44042969 -74.98442841]
[104.11318970 -78.47169495]
[119.19220734 -78.19960785]
[133.72959900 -74.18527985]
[146.81155396 -66.68104553]
[157.61570740 -56.15863800]
[165.46290588 -43.27949524]
[169.85986328 -28.85321808]
[170.53019714 -13.78665066]
[167.43177795 0.97310954]
[160.75933838 14.49825096]
[150.93234253 25.93857193]
[138.56851196 34.57492447]
[124.44506073 39.86442184]
[109.44978333 41.47455978]
[107.30120087 56.31988144]
[105.15262604 71.16520691]
[117.82414246 79.19219971]
[130.32817078 70.90673065]
[130.86250305 55.39885330]
[140.43658447 43.18753052]
[155.36901855 38.96826172]
[169.91795349 44.36344147]
[178.48904419 57.29851151]
[177.78652954 72.79967499]
[168.08052063 84.90641785]
[153.10321045 88.96345520]
[138.61364746 83.41075897]
[126.10961151 91.69623566]
[127.86419678 98.98811340]
[131.37336731 113.57186127]
[133.12794495 120.86373901]
[148.03239441 122.55413055]
[162.93684387 124.24452972]
[177.84129333 125.93492889]
[192.74574280 127.62532806]
[207.65019226 129.31571960]
[219.85601807 119.27614594]
[235.57759094 120.89105225]
[245.48756409 133.20234680]
[243.70652771 148.90596008]
[231.29113770 158.68521118]
[215.60723877 156.73825073]
[205.95979309 144.22016907]
[191.05534363 142.52976990]
[176.15089417 140.83937073]
[161.24644470 139.14897156]
[146.34199524 137.45858765]
[131.43754578 135.76818848]
[125.84340668 140.76373291]
[138.11286926 149.39276123]
[150.38232422 158.02180481]
[162.65179443 166.65083313]
[177.24830627 170.10655212]
[187.93809509 180.62930298]
[191.62327576 195.16957092]
[187.23587036 209.51358032]
[176.04733276 219.50442505]
[161.30014038 222.24673462]
[147.26803589 216.94578552]
[138.01753235 205.13780212]
[136.22924805 190.24604797]
[129.03787231 177.08230591]
[121.84648895 163.91856384]
[114.65510559 150.75482178]
[109.06095886 155.75038147]
[109.06095886 170.75038147]
[109.06095886 185.75038147]
[109.06095886 200.75038147]
[109.06095886 215.75038147]
[109.06095886 230.75038147]
[109.06095886 245.75038147]
[109.06095886 260.75036621]
[109.06095886 275.75036621]
[109.06095886 290.75036621]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 152]
[2 151]
[3 150]
[4 149]
[5 148]
[6 147]
[7 146]
[8 145]
[9 144]
[10 143]
[13 65]
[14 64]
[15 63]
[17 60]
[18 59]
[19 58]
[20 57]
[21 56]
[22 55]
[23 54]
[24 53]
[29 52]
[30 51]
[31 50]
[66 94]
[67 93]
[68 92]
[95 106]
[96 105]
[109 126]
[110 125]
[111 124]
[112 123]
[113 122]
[114 121]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
