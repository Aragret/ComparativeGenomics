%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:34 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCAACAAUAGGGUUUACGACCUCGAUGUUGGAUCAGGACAUCCCGAUGGUGCAGCCGCUAUxxxxxxxxxxUCAACCAGUAACUACUACUAAUCAACGCCCAUAAUCAUACAAAGCCCCCGCACCAAUAGGCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[101.69803619 257.78988647]
[101.69803619 242.78987122]
[101.69803619 227.78987122]
[101.69803619 212.78987122]
[101.69803619 197.78987122]
[101.69803619 182.78987122]
[101.69803619 167.78987122]
[101.69803619 152.78987122]
[101.69803619 137.78987122]
[101.69803619 122.78987885]
[88.68173218 115.33496857]
[75.74367523 122.92487335]
[62.80561829 130.51478577]
[49.86756134 138.10469055]
[36.92950439 145.69459534]
[36.93289948 160.98992920]
[29.33012199 174.14646912]
[16.24968910 181.68096924]
[1.25450993 181.65670776]
[-11.62840462 174.18034363]
[-24.56645966 181.77024841]
[-37.50451660 189.36015320]
[-42.92434311 204.45999146]
[-58.15496063 209.50061035]
[-71.51274872 200.61526489]
[-72.75074768 184.62005615]
[-60.91927719 173.78512573]
[-45.09442520 176.42210388]
[-32.15636826 168.83218384]
[-19.21831322 161.24227905]
[-19.45816994 146.34906006]
[-12.16259480 133.24827576]
[0.79656601 125.50704956]
[15.99030972 125.29036713]
[29.33959770 132.75654602]
[42.27765274 125.16663361]
[55.21570969 117.57672882]
[68.15376282 109.98681641]
[81.09181976 102.39691162]
[80.77983093 94.90340424]
[79.84386444 72.42287445]
[66.31967926 65.93470764]
[52.79548645 59.44654465]
[43.63933182 58.54286194]
[39.05957031 52.68014145]
[25.67328644 45.91202927]
[10.04373264 49.53094864]
[-2.44053102 39.45510101]
[-2.20264626 23.41381264]
[10.57490253 13.71258640]
[26.09027290 17.79337311]
[32.44140244 32.52574158]
[45.82768631 39.29385757]
[59.28365326 45.92235565]
[72.80783844 52.41052246]
[86.33203125 58.89868546]
[101.03999329 55.95320511]
[111.02272034 44.75743866]
[114.31172943 26.66980934]
[131.13043213 21.75746918]
[140.87808228 10.35644722]
[130.47851562 -0.47017378]
[121.19023132 -12.26400948]
[113.10268402 -24.91147614]
[106.29376984 -38.29076767]
[100.82905579 -52.27303314]
[96.76117706 -66.72360992]
[94.12931061 -81.50332642]
[92.95880127 -96.46984863]
[93.26092529 -111.47902679]
[95.03276825 -126.38632202]
[98.25726318 -141.04815674]
[102.90336609 -155.32333374]
[108.92632294 -169.07435608]
[116.26812744 -182.16880798]
[124.85807800 -194.48057556]
[134.61344910 -205.89108276]
[145.44027710 -216.29043579]
[157.23429871 -225.57847595]
[169.88192749 -233.66577148]
[183.26135254 -240.47442627]
[197.24372864 -245.93885803]
[211.69438171 -250.00643921]
[226.47415161 -252.63801575]
[241.44070435 -253.80822754]
[256.44985962 -253.50579834]
[271.35711670 -251.73365784]
[286.01889038 -248.50886536]
[300.29397583 -243.86248779]
[314.04489136 -237.83924866]
[327.13919067 -230.49717712]
[339.45077515 -221.90698242]
[350.86108398 -212.15139771]
[361.26022339 -201.32435608]
[370.54803467 -189.53015137]
[378.63507080 -176.88235474]
[385.44345093 -163.50279236]
[390.90762329 -149.52030945]
[394.97491455 -135.06956482]
[397.60620117 -120.28974915]
[398.77609253 -105.32318115]
[398.47338867 -90.31401062]
[396.70095825 -75.40679169]
[393.47586060 -60.74508667]
[388.82919312 -46.47010040]
[382.80569458 -32.71931076]
[375.46334839 -19.62515450]
[366.87289429 -7.31373405]
[357.11709595 4.09638119]
[346.28985596 14.49530220]
[334.49545288 23.78287888]
[321.84750366 31.86966515]
[308.46780396 38.67777634]
[294.48519897 44.14165115]
[280.03439331 48.20866013]
[265.25451660 50.83964157]
[250.28791809 52.00925446]
[235.27874756 51.70623398]
[220.37156677 49.93349838]
[205.70993042 46.70811844]
[191.43502808 42.06116486]
[177.68437195 36.03738022]
[164.59036255 28.69478798]
[152.27911377 20.10409927]
[142.53144836 31.50512123]
[143.15206909 43.62626648]
[135.06823730 53.21117783]
[122.21848297 54.74016571]
[112.23575592 65.93592834]
[124.30457306 57.02841949]
[138.84251404 53.33407593]
[153.69967651 55.39923477]
[166.67890930 62.91849136]
[175.86083984 74.77987671]
[179.88757324 89.22928619]
[178.16363525 104.12989044]
[170.94398499 117.27814484]
[159.29626465 126.72963715]
[144.94299316 131.08663940]
[130.00677490 129.70484924]
[116.69803619 122.78987885]
[116.69803619 137.78987122]
[116.69803619 152.78987122]
[116.69803619 167.78987122]
[116.69803619 182.78987122]
[116.69803619 197.78987122]
[116.69803619 212.78987122]
[116.69803619 227.78987122]
[116.69803619 242.78987122]
[116.69803619 257.78988647]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[11 39]
[12 38]
[13 37]
[14 36]
[15 35]
[20 30]
[21 29]
[22 28]
[41 56]
[42 55]
[43 54]
[45 53]
[46 52]
[57 129]
[58 128]
[60 125]
[61 124]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
