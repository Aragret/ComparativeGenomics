%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:41 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGUAACAAACCCACAGGUCCUAAACUACCAAACCUGCAUUAAAAAUUUCGGUUGGGGCGACCxxxxxxxxxxAAUUAAAAAAACUAUUAAACCCAUAUAACCUCCCCCAAAAUUCAGAAUAAUAACACACCCCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[92.50000000 251.43235779]
[92.50000000 236.43235779]
[92.50000000 221.43235779]
[92.50000000 206.43235779]
[92.50000000 191.43235779]
[92.50000000 176.43235779]
[92.50000000 161.43235779]
[92.50000000 146.43235779]
[92.50000000 131.43235779]
[92.50000000 116.43235779]
[86.69933319 111.67817688]
[79.50794983 124.84191895]
[72.31656647 138.00566101]
[68.46389771 152.50244141]
[55.38747406 159.85140991]
[41.00109863 155.60496521]
[34.01134872 142.33306885]
[38.64839554 128.06781006]
[52.10736465 121.44237518]
[63.60267639 111.80609894]
[75.09799194 102.16982269]
[69.29731750 97.41564178]
[54.58935547 100.36112213]
[39.88139343 103.30661011]
[25.17343330 106.25209045]
[10.46547127 109.19757080]
[7.16498995 124.06453705]
[-1.90230715 136.29989624]
[-15.16545582 143.78379822]
[-30.32653618 145.21960449]
[-44.75879669 140.35856628]
[-55.96176529 130.04287720]
[-61.99445724 116.05980682]
[-61.81167221 100.83198547]
[-55.44507599 86.99774170]
[-43.99772644 76.95393372]
[-29.45294380 72.44071198]
[-14.33069611 74.24002838]
[-1.25100684 82.04013062]
[7.51998901 94.48960876]
[22.22795105 91.54412842]
[36.93591309 88.59864807]
[51.64387512 85.65316010]
[66.35183716 82.70767975]
[86.51258850 78.84665680]
[99.51699066 87.66630554]
[106.42398834 74.35115051]
[113.33098602 61.03599548]
[106.55532074 47.20137787]
[109.19429016 32.20507050]
[120.02944183 21.76173019]
[134.76008606 19.72546959]
[141.66708374 6.41031361]
[148.57408142 -6.90484238]
[155.48107910 -20.21999741]
[162.38807678 -33.53515244]
[162.01400757 -38.00969696]
[163.01963806 -41.95428467]
[165.05798340 -44.99188232]
[167.69364929 -46.90165710]
[170.46321106 -47.63438034]
[178.45312500 -60.32931137]
[186.44303894 -73.02423859]
[194.43295288 -85.71916962]
[202.42288208 -98.41410065]
[204.36608887 -107.40719604]
[210.71337891 -111.28759766]
[218.96566772 -123.81356049]
[208.94946289 -133.88514709]
[201.11558533 -145.72763062]
[195.76914978 -158.87611389]
[193.11763000 -172.81489563]
[193.26287842 -186.99769592]
[196.19715881 -200.86909485]
[201.80355835 -213.88627625]
[209.86064148 -225.54026794]
[220.05119324 -235.37582397]
[231.97470093 -243.00920105]
[245.16310120 -248.14318848]
[259.09915161 -250.57862854]
[273.23672485 -250.22215271]
[287.02224731 -247.08976746]
[299.91622925 -241.30612183]
[308.68243408 -253.47795105]
[317.44863892 -265.64978027]
[326.21484375 -277.82162476]
[321.23071289 -292.51644897]
[325.86801147 -307.32440186]
[338.34362793 -316.55148315]
[353.86038208 -316.64971924]
[366.45181274 -307.58132935]
[371.27621460 -292.83328247]
[366.47854614 -278.07653809]
[353.90359497 -268.98532104]
[338.38665771 -269.05541992]
[329.62045288 -256.88357544]
[320.85424805 -244.71174622]
[312.08804321 -232.53991699]
[322.67858887 -220.75657654]
[330.41369629 -206.92228699]
[334.91003418 -191.71655273]
[335.94348145 -175.88696289]
[333.46020508 -160.21244812]
[327.57952881 -145.46498108]
[318.58813477 -132.37156677]
[306.92617798 -121.57830048]
[293.16564941 -113.61862946]
[277.98233032 -108.88688660]
[262.12271118 -107.61878967]
[246.36718750 -109.87970734]
[231.49163818 -115.56127167]
[223.23934937 -103.03530884]
[215.11779785 -90.42418671]
[207.12788391 -77.72925568]
[199.13796997 -65.03432465]
[191.14805603 -52.33939362]
[183.15814209 -39.64446259]
[175.70323181 -26.62815475]
[168.79623413 -13.31299973]
[161.88923645 0.00215639]
[154.98223877 13.31731224]
[148.07524109 26.63246727]
[154.89459229 39.84740067]
[152.59765625 54.71979523]
[141.85820007 65.51411438]
[126.64614105 67.94299316]
[119.73914337 81.25814819]
[112.83214569 94.57330322]
[123.42038727 83.94837952]
[137.48896790 78.74498749]
[152.44262695 79.92300415]
[165.52290344 87.26511383]
[174.31684875 99.41692352]
[177.20225525 114.13678741]
[173.64685059 128.70933533]
[164.30651855 140.44636536]
[150.90423584 147.18275452]
[135.91233826 147.67584229]
[122.09638214 141.83467102]
[112.00499725 130.73674011]
[107.50000000 116.43235779]
[107.50000000 131.43235779]
[107.50000000 146.43235779]
[107.50000000 161.43235779]
[107.50000000 176.43235779]
[107.50000000 191.43235779]
[107.50000000 206.43235779]
[107.50000000 221.43235779]
[107.50000000 236.43235779]
[107.50000000 251.43235779]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[22 44]
[23 43]
[24 42]
[25 41]
[26 40]
[46 128]
[47 127]
[48 126]
[52 122]
[53 121]
[54 120]
[55 119]
[56 118]
[61 117]
[62 116]
[63 115]
[64 114]
[65 113]
[67 112]
[68 111]
[83 98]
[84 97]
[85 96]
[86 95]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
