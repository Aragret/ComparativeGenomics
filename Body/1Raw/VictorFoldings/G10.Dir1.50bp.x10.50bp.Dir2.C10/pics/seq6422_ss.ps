%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:34 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCCCCUAAUAAUCGGUGCCCCCGAUAUGGCGUUUCCCCGCAUAAACAACAUAAGCUUCUGAxxxxxxxxxxGUUGUAUUUCAACUACAAGAACACCAAUGACCCCAAUACGCAAAACUAACCCCCUAAUAACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[109.30107117 239.87467957]
[108.98902130 224.87792969]
[108.67696381 209.88117981]
[108.36490631 194.88442993]
[108.05284882 179.88766479]
[107.74079132 164.89091492]
[107.42873383 149.89416504]
[107.11668396 134.89741516]
[106.80462646 119.90065765]
[93.63603973 112.71814728]
[80.85868835 120.57557678]
[68.08132935 128.43299866]
[66.09787750 132.46131897]
[63.20459747 135.32489014]
[59.89308929 136.87918091]
[56.65031052 137.15907288]
[53.89886093 136.36103821]
[40.51257706 143.12915039]
[27.12629128 149.89726257]
[20.82961655 156.60574341]
[13.39037704 156.66366577]
[-0.13381293 163.15182495]
[-13.65800285 169.63999939]
[-27.18219376 176.12815857]
[-33.83843613 190.72521973]
[-49.43534470 194.48234558]
[-62.00830460 184.51739502]
[-61.91241837 168.47462463]
[-49.22124100 158.66067505]
[-33.67035675 162.60397339]
[-20.14616776 156.11579895]
[-6.62197781 149.62763977]
[6.90221214 143.13948059]
[20.35817719 136.51097107]
[33.74446106 129.74285889]
[47.13074875 122.97474670]
[60.22389984 115.65563965]
[73.00125885 107.79821777]
[85.77861786 99.94078827]
[95.04356384 88.14414978]
[99.64913177 73.86869049]
[104.25469208 59.59323120]
[108.86026001 45.31776810]
[101.36605835 34.07968140]
[101.72840881 20.77191353]
[109.58945465 10.27056122]
[121.88497925 6.29353476]
[126.78652954 -7.88302326]
[114.50961304 -16.66694260]
[105.21466064 -28.54238319]
[99.64822388 -42.54166412]
[98.25348663 -57.52708817]
[101.13496399 -72.28340912]
[108.05075073 -85.61637878]
[118.43277740 -96.44939423]
[131.43350220 -103.91043091]
[145.99504089 -107.40224457]
[160.93531799 -106.65016174]
[165.83686829 -120.82672119]
[170.73841858 -135.00328064]
[164.07989502 -149.08525085]
[169.25271606 -163.39247131]
[182.71876526 -169.65356445]
[178.78884888 -187.61283875]
[192.41885376 -198.62298584]
[197.02441406 -212.89843750]
[201.62998962 -227.17390442]
[206.23554993 -241.44935608]
[194.48287964 -232.12870789]
[180.08763123 -227.91241455]
[165.16354370 -229.41960144]
[151.90199280 -236.42895508]
[142.25021362 -247.91125488]
[137.62544250 -262.18051147]
[138.70675659 -277.14147949]
[145.33535767 -290.59738159]
[156.53796387 -300.57244873]
[170.66964722 -305.60195923]
[185.65534973 -304.94738770]
[199.29467773 -298.70492554]
[209.58489990 -287.79110718]
[215.01506042 -273.80847168]
[214.78793335 -258.81085205]
[223.29902649 -271.16241455]
[231.81011963 -283.51400757]
[240.32121277 -295.86557007]
[235.98640442 -310.89031982]
[242.37071228 -325.16531372]
[256.45965576 -331.95025635]
[271.60086060 -328.04156494]
[280.64511108 -315.28479004]
[279.32202148 -299.70330811]
[268.25625610 -288.65417480]
[252.67277527 -287.35449219]
[244.16168213 -275.00289917]
[235.65060425 -262.65133667]
[227.13951111 -250.29975891]
[220.51100159 -236.84379578]
[215.90544128 -222.56834412]
[211.29988098 -208.29287720]
[206.69432068 -194.01741028]
[211.93473816 -183.07003784]
[208.16532898 -171.11132812]
[196.89532471 -164.75201416]
[203.61834717 -151.51054382]
[198.84942627 -137.06367493]
[184.91497803 -130.10173035]
[180.01341248 -115.92517090]
[175.11186218 -101.74861145]
[187.32606506 -93.11202240]
[196.62112427 -81.37178040]
[202.23703003 -67.47403717]
[203.71075439 -52.54189301]
[200.91433716 -37.78465271]
[194.06600952 -24.39986801]
[183.71318054 -13.47616959]
[170.68865967 -5.90471983]
[156.04368591 -2.30651808]
[140.96308899 -2.98147225]
[136.06153870 11.19508553]
[144.05737305 25.95735359]
[138.82946777 42.26541901]
[123.13571930 49.92333221]
[118.53015137 64.19879150]
[113.92459106 78.47425842]
[109.31902313 92.74971771]
[120.20481110 82.42984772]
[129.87350464 70.96179199]
[143.08547974 63.85941696]
[157.98435974 62.12065506]
[172.47676086 65.98982239]
[184.52639771 74.92326355]
[192.44020081 87.66577148]
[195.10624695 102.42694855]
[192.14993286 117.13273621]
[183.98663330 129.71687317]
[171.76335144 138.41120911]
[157.19755554 141.99412537]
[142.33581543 139.96220398]
[129.26506042 132.59988403]
[121.80137634 119.58860016]
[122.11343384 134.58535767]
[122.42549133 149.58210754]
[122.73754883 164.57885742]
[123.04960632 179.57562256]
[123.36165619 194.57237244]
[123.67371368 209.56912231]
[123.98577118 224.56587219]
[124.29782867 239.56263733]
[126.88882446 258.77035522]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 149]
[2 148]
[3 147]
[4 146]
[5 145]
[6 144]
[7 143]
[8 142]
[9 141]
[10 39]
[11 38]
[12 37]
[17 36]
[18 35]
[19 34]
[21 33]
[22 32]
[23 31]
[24 30]
[40 126]
[41 125]
[42 124]
[43 123]
[47 120]
[48 119]
[58 109]
[59 108]
[60 107]
[63 104]
[65 101]
[66 100]
[67 99]
[68 98]
[83 97]
[84 96]
[85 95]
[86 94]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
