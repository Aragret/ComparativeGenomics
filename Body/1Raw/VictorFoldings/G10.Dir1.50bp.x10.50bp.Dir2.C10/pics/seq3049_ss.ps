%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:34 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCGGAGUAAUCCAGGUCGGUUUCUAUCUACXUUCAAAUUCCUCCCUGUACGAAAGGACAAGxxxxxxxxxxAAAUCAAUUGGCCACCAAUGGUACUGAACCUACGAGUACACCGACUACGGCGGACUAAUCCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[175.02767944 454.12908936]
[175.02767944 439.12908936]
[175.02767944 424.12908936]
[175.02767944 409.12908936]
[175.02767944 394.12908936]
[175.02767944 379.12908936]
[175.02767944 364.12908936]
[175.02767944 349.12908936]
[175.02767944 334.12908936]
[175.02767944 319.12908936]
[172.38882446 304.36303711]
[167.19340515 290.29150391]
[161.99798584 276.22000122]
[150.33139038 266.96041870]
[152.80992126 251.33456421]
[147.61450195 237.26304626]
[142.41908264 223.19151306]
[130.75248718 213.93194580]
[133.23101807 198.30609131]
[128.03559875 184.23457336]
[113.95938873 173.80094910]
[117.13881683 155.69374084]
[111.65178680 141.73335266]
[106.16475677 127.77296448]
[100.67771912 113.81256866]
[93.50120544 113.54701996]
[86.86598206 109.51966095]
[82.73176575 102.27277374]
[82.61604309 93.34812164]
[71.73722076 83.02091980]
[60.85839462 72.69371033]
[49.28005981 81.12612152]
[36.40510178 87.39476776]
[22.63348198 91.30632782]
[8.39277840 92.74066162]
[-5.87510490 91.65451813]
[-19.72763824 88.08285522]
[-32.73540115 82.13770294]
[-44.49538040 74.00462341]
[-54.64347076 63.93696976]
[-62.86574173 52.24795914]
[-68.90814972 39.30093384]
[-72.58439636 25.49807739]
[-73.78163147 11.26791096]
[-72.46398926 -2.94800568]
[-68.67358398 -16.70877838]
[-62.52923584 -29.58784676]
[-54.22267914 -41.18621826]
[-64.66249084 -51.95702744]
[-75.10230255 -62.72783279]
[-85.54211426 -73.49864197]
[-100.20572662 -69.11261749]
[-115.22576904 -72.05489349]
[-127.15074921 -81.64933777]
[-133.24038696 -95.69123077]
[-132.09533691 -110.95384979]
[-123.97872925 -123.92994690]
[-110.75568390 -131.63772583]
[-95.46477509 -132.30596924]
[-81.61972809 -125.78115082]
[-72.40204620 -113.56259918]
[-69.92987823 -98.45806885]
[-74.77130890 -83.93845367]
[-64.33149719 -73.16764832]
[-53.89168549 -62.39683914]
[-43.45187378 -51.62602997]
[-30.31825066 -60.25618744]
[-15.76114559 -66.18942261]
[-0.32789347 -69.20076752]
[15.40086460 -69.17517090]
[30.83302689 -66.11186218]
[45.38732529 -60.12446594]
[58.51521683 -51.43676376]
[69.72155762 -40.37435913]
[78.58326721 -27.35245514]
[84.76533508 -12.86027622]
[88.03344727 2.55730891]
[88.26287842 18.32027626]
[85.44326782 33.83526611]
[79.67904663 48.51792145]
[71.18560028 61.81488419]
[82.06442261 72.14208984]
[92.94325256 82.46929932]
[107.94243622 82.62533569]
[119.03375244 72.52667999]
[130.12507629 62.42803192]
[140.67636108 51.76640701]
[150.65908813 40.57064056]
[160.64181519 29.37487602]
[170.62454224 18.17910957]
[180.60726929 6.98334360]
[186.63555908 -8.86266804]
[203.53109741 -7.45657969]
[206.85710144 9.16791916]
[191.80303955 16.96607018]
[181.82031250 28.16183662]
[171.83758545 39.35760117]
[161.85485840 50.55336761]
[151.87213135 61.74913406]
[166.71997070 63.88023376]
[174.49441528 76.70824432]
[169.51298523 90.85693359]
[155.41668701 95.98474884]
[142.50878906 88.34367371]
[140.22372437 73.51934814]
[129.13240051 83.61799622]
[118.04109192 93.71664429]
[114.63811493 108.32553864]
[120.12514496 122.28592682]
[125.61217499 136.24632263]
[131.09921265 150.20671082]
[142.62399292 156.09170532]
[146.88760376 167.88325500]
[142.10711670 179.03915405]
[147.30253601 193.11067200]
[159.34074402 203.37673950]
[156.49060059 217.99610901]
[161.68601990 232.06762695]
[166.88143921 246.13914490]
[178.91964722 256.40521240]
[176.06950378 271.02456665]
[181.26492310 285.09609985]
[186.46034241 299.16760254]
[189.52363586 284.48373413]
[197.11001587 271.54360962]
[208.42715454 261.69869995]
[222.29309082 255.97717285]
[237.25968933 254.97660828]
[251.76382446 258.80151367]
[264.29071045 267.05239868]
[273.53204346 278.86752319]
[278.52267456 293.01296997]
[278.74136353 308.01138306]
[274.16528320 322.29632568]
[265.27236938 334.37588501]
[252.99136353 342.98849487]
[238.60490417 347.23464966]
[223.61550903 346.67086792]
[209.58863831 341.35607910]
[197.98928833 331.84530640]
[190.02767944 319.12908936]
[190.02767944 334.12908936]
[190.02767944 349.12908936]
[190.02767944 364.12908936]
[190.02767944 379.12908936]
[190.02767944 394.12908936]
[190.02767944 409.12908936]
[190.02767944 424.12908936]
[190.02767944 439.12908936]
[190.02767944 454.12908936]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[11 123]
[12 122]
[13 121]
[15 119]
[16 118]
[17 117]
[19 115]
[20 114]
[22 111]
[23 110]
[24 109]
[25 108]
[29 83]
[30 82]
[31 81]
[48 66]
[49 65]
[50 64]
[51 63]
[84 107]
[85 106]
[86 105]
[87 99]
[88 98]
[89 97]
[90 96]
[91 95]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
