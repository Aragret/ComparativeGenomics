%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:06 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCACUACGAGCCACAGCUUAAAACUCAAAGGACCUGGCGGUGCUUCAUAUCCCUCUAGAGGxxxxxxxxxxAAUCCUCUGAUCAGGGUGAGCAUCAAACUCAAACUACGCCCUGAUCGGCGCACUGCGAGCCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[105.20040894 389.25650024]
[105.20040894 374.25650024]
[105.20040894 359.25650024]
[105.20040894 344.25650024]
[105.20040894 329.25650024]
[105.20040894 314.25650024]
[105.20040894 299.25650024]
[105.20040894 284.25650024]
[105.20040894 269.25650024]
[105.20040894 254.25650024]
[89.10230255 249.43058777]
[75.24244690 239.89422607]
[64.96026611 226.55580139]
[59.25347900 210.69168091]
[58.68130875 193.82423401]
[63.30970383 177.57562256]
[72.70394135 163.51182556]
[85.96943665 152.99177551]
[101.83690643 147.03598022]
[100.90127563 132.06518555]
[99.96564484 117.09439850]
[90.98030090 116.68294525]
[82.58908844 111.44511414]
[77.38117981 101.99325562]
[62.96895981 97.83537292]
[55.84187317 109.82466888]
[46.04275131 119.73620605]
[34.15250015 126.98921967]
[20.87435722 131.16035461]
[6.99229193 132.00836182]
[-6.67527485 129.48805237]
[-19.32372856 123.75264740]
[-30.20962143 115.14454651]
[-38.69437790 104.17481232]
[-44.28174210 91.49285889]
[-46.64682007 77.84802246]
[-45.65494156 64.04527283]
[-59.88172150 59.29145432]
[-74.10849762 54.53763962]
[-89.64941406 57.50253296]
[-99.26850891 46.13053513]
[-113.49528503 41.37672043]
[-127.72206116 36.62290573]
[-143.67382812 40.42726517]
[-154.74630737 28.33047295]
[-149.54907227 12.77667046]
[-133.42860413 9.76627636]
[-122.96824646 22.39612770]
[-108.74147034 27.14994240]
[-94.51469421 31.90375710]
[-79.99137115 28.59883881]
[-69.35468292 40.31085968]
[-55.12790680 45.06467438]
[-40.90112686 49.81848907]
[-31.88836479 36.45386505]
[-19.48415947 26.13752174]
[-4.67531347 19.70028687]
[11.35722637 17.66398621]
[27.33255577 20.19915199]
[41.97214508 27.11076736]
[54.10215759 37.85324478]
[62.74757767 51.57349396]
[67.21058655 67.17865753]
[67.12684631 83.42315674]
[81.53906250 87.58103943]
[93.80142975 78.94192505]
[94.73706055 63.97113419]
[95.67269135 49.00034332]
[96.60831451 34.02955246]
[97.54394531 19.05876160]
[84.02560425 12.04631329]
[74.53328705 0.13767265]
[70.71158600 -14.60391712]
[73.22263336 -29.62438774]
[81.63137817 -42.32135010]
[94.48095703 -50.49497986]
[109.54510498 -52.72914505]
[124.21385193 -48.63676453]
[135.94577026 -38.92686844]
[142.70822144 -25.28175163]
[143.32955933 -10.06551647]
[137.70216370 4.08553314]
[126.80098724 14.71964359]
[112.51473999 19.99438858]
[111.57910919 34.96517944]
[110.64347839 49.93597412]
[109.70785522 64.90676117]
[108.77222443 79.87755585]
[120.27402496 89.50608063]
[134.84672546 85.95131683]
[149.41943359 82.39656067]
[163.99214172 78.84179688]
[178.56483459 75.28703308]
[193.13754272 71.73226929]
[207.71025085 68.17751312]
[222.28294373 64.62274933]
[236.55841064 60.01718521]
[250.46096802 54.38522720]
[264.36352539 48.75326920]
[278.26608276 43.12131500]
[282.91213989 28.18987083]
[296.09686279 19.78170204]
[311.59478760 21.86688614]
[322.08831787 33.46086502]
[322.62268066 49.08931732]
[312.94558716 61.37296295]
[297.62625122 64.51184082]
[283.89804077 57.02386856]
[269.99548340 62.65582657]
[256.09292603 68.28778076]
[242.19036865 73.91973877]
[255.84417725 80.13047791]
[262.46896362 93.58827209]
[259.06362915 108.19661713]
[247.17079163 117.33777618]
[232.17807007 116.87072754]
[220.87728882 107.00704193]
[218.38781738 92.21506500]
[225.83770752 79.19544983]
[211.26499939 82.75021362]
[196.69230652 86.30497742]
[182.11959839 89.85973358]
[167.54689026 93.41449738]
[152.97419739 96.96926117]
[138.40148926 100.52402496]
[123.82878876 104.07878113]
[114.93643951 116.15877533]
[115.87207031 131.12956238]
[116.80769348 146.10035706]
[129.84153748 148.74768066]
[141.84053040 154.46037292]
[152.09625244 162.89555359]
[160.00456238 173.54977417]
[165.10121155 185.78906250]
[167.08900452 198.88664246]
[165.85527039 212.06610107]
[161.47808838 224.54742432]
[154.22146606 235.59312439]
[144.51937866 244.55183411]
[132.94982910 250.89672852]
[120.20040894 254.25650024]
[120.20040894 269.25650024]
[120.20040894 284.25650024]
[120.20040894 299.25650024]
[120.20040894 314.25650024]
[120.20040894 329.25650024]
[120.20040894 344.25650024]
[120.20040894 359.25650024]
[120.20040894 374.25650024]
[120.20040894 389.25650024]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[19 129]
[20 128]
[21 127]
[24 65]
[25 64]
[37 54]
[38 53]
[39 52]
[41 50]
[42 49]
[43 48]
[66 88]
[67 87]
[68 86]
[69 85]
[70 84]
[89 126]
[90 125]
[91 124]
[92 123]
[93 122]
[94 121]
[95 120]
[96 119]
[97 111]
[98 110]
[99 109]
[100 108]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
