%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:59 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGAGCACCCUAUGUCGCAGUAUCUGUCUUUGAUUCCUGCCUCAUCCUAUUAUUUAUCGCACCxxxxxxxxxxAAAAAUCCCAAACAUAUAACUGAACUCCUCACACCCAAUUGGACCAAUCUAUCACCCUAUCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[100.80067444 282.64349365]
[100.80067444 267.64349365]
[100.80067444 252.64349365]
[100.80067444 237.64349365]
[100.80067444 222.64349365]
[100.80067444 207.64349365]
[100.80067444 192.64349365]
[100.80067444 177.64349365]
[100.80067444 162.64349365]
[100.80067444 147.64349365]
[99.24309540 132.72457886]
[96.14477539 118.04804993]
[96.13894653 133.04804993]
[86.07611847 144.17187500]
[71.15174866 145.67626953]
[59.07132339 136.78451538]
[56.07199478 122.08744049]
[63.70231628 109.17317963]
[78.02478790 104.70952606]
[63.09048462 106.11183167]
[48.15617752 107.51413727]
[38.09030533 119.40177917]
[22.92481804 120.61116791]
[11.65380192 110.94164276]
[-3.28050590 112.34394073]
[-18.21481323 113.74624634]
[-33.14912033 115.14855194]
[-47.87376022 126.15604401]
[-63.53620911 118.30190277]
[-78.43811035 120.01458740]
[-93.34001160 121.72727966]
[-101.80661011 134.87455750]
[-116.75852203 139.45431519]
[-131.13592529 133.30416870]
[-138.15023804 119.32798767]
[-134.48951721 104.12492371]
[-121.88224792 94.87339020]
[-106.28120422 95.94168091]
[-95.05270386 106.82537842]
[-80.15080261 105.11268616]
[-65.24890137 103.39999390]
[-57.45015717 94.10016632]
[-45.00337982 92.58466339]
[-34.55142593 100.21424103]
[-19.61711693 98.81194305]
[-4.68280935 97.40963745]
[10.25149822 96.00733185]
[19.52547264 84.40866852]
[34.65100861 82.77378845]
[46.75387192 92.57982635]
[61.68817902 91.17752838]
[76.62248993 89.77522278]
[84.63395691 84.92975616]
[92.66461182 84.07888794]
[99.07521057 86.49498749]
[102.77471924 90.86866760]
[112.28308105 79.26732635]
[121.79143524 67.66598511]
[125.94932556 53.25377274]
[124.08171082 38.37049103]
[122.21409607 23.48721123]
[120.34648895 8.60393143]
[105.43355560 6.19951677]
[91.80270386 -0.31020555]
[80.55891418 -10.39752102]
[72.61367798 -23.24469566]
[68.61107635 -37.81026459]
[68.87557983 -52.91346741]
[73.38575745 -67.32995605]
[81.77597809 -79.89103699]
[93.36608124 -89.57845306]
[107.21652222 -95.60688782]
[122.20449829 -97.48764038]
[137.11500549 -95.06824493]
[150.73931885 -88.54483032]
[161.97296143 -78.44622803]
[169.90528870 -65.59107971]
[173.89324951 -51.02149200]
[173.61357117 -35.91856384]
[169.08892822 -21.50661850]
[160.68608093 -8.95396709]
[149.08625793 0.72180247]
[135.22976685 6.73631859]
[137.09738159 21.61959839]
[138.96499634 36.50288010]
[140.83261108 51.38615799]
[156.46995544 48.75237656]
[168.39900208 56.64870453]
[182.52381897 51.59994888]
[196.64862061 46.55118942]
[210.77342224 41.50243378]
[210.24601746 27.82636642]
[213.60346985 14.57574463]
[220.56243896 2.82996941]
[230.54663086 -6.45692778]
[242.73442078 -12.53377438]
[256.12661743 -14.91301155]
[269.62820435 -13.40979767]
[282.13803101 -8.15633488]
[292.63851929 0.40970305]
[300.27844238 11.58161259]
[314.60104370 7.12479734]
[328.92364502 2.66798139]
[337.62777710 -10.80857372]
[353.60482788 -12.26246357]
[364.59854126 -0.57838845]
[362.17550659 15.28062916]
[348.19445801 23.14890862]
[333.38046265 16.99057961]
[319.05786133 21.44739532]
[304.73526001 25.90421104]
[304.29284668 42.30109024]
[298.27627563 57.58812332]
[287.39059448 69.92646027]
[272.92758179 77.82554626]
[256.61260986 80.32323456]
[240.39871216 77.10289764]
[226.23287964 68.53345490]
[215.82217407 55.62723923]
[201.69737244 60.67599487]
[187.57257080 65.72474670]
[173.44776917 70.77350616]
[169.26347351 82.86517334]
[157.75636292 89.95951080]
[143.63917542 88.08142853]
[133.39277649 77.17434692]
[123.88442230 88.77568817]
[114.37606049 100.37702942]
[110.82129669 114.94972992]
[113.91962433 129.62625122]
[120.65200806 116.22196960]
[133.10841370 107.86505890]
[148.06454468 106.71869659]
[161.64904785 113.07961273]
[170.34561157 125.30130768]
[171.90316772 140.22021484]
[165.91854858 153.97463989]
[153.94082642 163.00428772]
[139.07043457 164.97186279]
[125.15650940 159.36804199]
[115.80067444 147.64349365]
[115.80067444 162.64349365]
[115.80067444 177.64349365]
[115.80067444 192.64349365]
[115.80067444 207.64349365]
[115.80067444 222.64349365]
[115.80067444 237.64349365]
[115.80067444 252.64349365]
[115.80067444 267.64349365]
[115.80067444 282.64349365]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[11 130]
[12 129]
[19 52]
[20 51]
[21 50]
[24 47]
[25 46]
[26 45]
[27 44]
[29 41]
[30 40]
[31 39]
[56 128]
[57 127]
[58 126]
[59 86]
[60 85]
[61 84]
[62 83]
[88 122]
[89 121]
[90 120]
[91 119]
[101 111]
[102 110]
[103 109]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
