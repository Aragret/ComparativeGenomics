%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:09 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCCACACUCCACGGAAGCAAUAUGAAAUGAUCUGCUGCAGUGCUCUGAGCCCUAGGAUUCAUxxxxxxxxxxAUAAAUAGGAGAAGGCUUAGAAGAAAACCCCACAAACCCCAUUACUAAACCCACACUCAACCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[87.32729340 263.84722900]
[87.32729340 248.84722900]
[87.32729340 233.84722900]
[87.32729340 218.84722900]
[87.32729340 203.84722900]
[87.32729340 188.84722900]
[87.32729340 173.84722900]
[87.32729340 158.84722900]
[87.32729340 143.84722900]
[87.32729340 128.84722900]
[81.68215179 123.90937805]
[74.49076843 137.07312012]
[69.22416687 151.11814880]
[54.67824936 154.78097534]
[43.38809586 144.90513611]
[45.08309937 130.00120544]
[58.30216217 122.91280365]
[70.39186859 114.03366852]
[64.74672699 109.09581757]
[49.88013077 111.09187317]
[35.01353073 113.08792877]
[22.36569595 122.59281921]
[8.72200775 116.61795044]
[-3.92582774 126.12283325]
[-17.56951714 120.14797211]
[-32.43611526 122.14402771]
[-47.30271530 124.14008331]
[-62.16931152 126.13613892]
[-65.61193848 129.00807190]
[-69.41245270 130.45016479]
[-73.06491089 130.52943420]
[-76.13993073 129.47421265]
[-78.33172607 127.63381195]
[-93.31196594 128.40347290]
[-105.08340454 139.30360413]
[-120.92257690 136.75407410]
[-128.67903137 122.71067810]
[-122.40267181 107.94629669]
[-106.90818787 103.78690338]
[-94.08162689 113.42322540]
[-79.10137939 112.65357208]
[-64.16536713 111.26954651]
[-49.29877090 109.27348328]
[-34.43217087 107.27742767]
[-19.56557465 105.28137207]
[-7.98109674 95.91925812]
[6.72595072 101.75135040]
[18.31042671 92.38923645]
[33.01747513 98.22133636]
[47.88407516 96.22527313]
[62.75067139 94.22921753]
[80.76640320 79.30732727]
[98.48484802 81.25285339]
[99.10067749 66.26549530]
[99.71649933 51.27814484]
[100.33232880 36.29079056]
[100.94815063 21.30343819]
[101.56397247 6.31608534]
[102.17980194 -8.67126751]
[102.79562378 -23.65862083]
[90.80699921 -14.64347839]
[75.92965698 -16.55782318]
[66.61382294 -28.31432152]
[68.15082550 -43.23536682]
[79.66764832 -52.84591675]
[94.62283325 -51.68725204]
[104.52219391 -40.41674042]
[106.97512054 -55.21482086]
[109.42804718 -70.01290131]
[95.68408203 -76.23911285]
[84.02050781 -85.81112671]
[75.23256683 -98.07630157]
[69.91943359 -112.19837952]
[68.44337463 -127.21449280]
[70.90502930 -142.10081482]
[77.13655090 -155.84237671]
[86.71306610 -167.50225830]
[98.98162842 -176.28546143]
[113.10575867 -181.59313965]
[128.12243652 -183.06340027]
[143.00781250 -180.59600830]
[156.74697876 -174.35917664]
[168.40315247 -164.77815247]
[177.18162537 -152.50619507]
[182.48384094 -138.38002014]
[183.94830322 -123.36277771]
[181.47515869 -108.47835541]
[175.23303223 -94.74160767]
[165.64750671 -83.08912659]
[153.37216187 -74.31539917]
[139.24394226 -69.01863098]
[124.22612762 -67.55996704]
[121.77320099 -52.76189041]
[119.32027435 -37.96381378]
[117.78298187 -23.04279518]
[117.16715240 -8.05544281]
[116.55133057 6.93191099]
[115.93550110 21.91926384]
[115.31967926 36.90661621]
[114.70384979 51.89397049]
[114.08802795 66.88132477]
[113.47219849 81.86867523]
[123.80310822 92.74398804]
[138.80230713 92.89798737]
[152.68119812 85.30277252]
[165.32835388 93.17033386]
[180.32757568 93.32432556]
[185.92816162 79.21767426]
[196.24934387 68.08943176]
[209.89526367 61.44461823]
[225.02040100 60.18188095]
[239.57922363 64.47200012]
[251.60276794 73.73476410]
[259.46493530 86.71746826]
[262.10244751 101.66430664]
[259.15859985 116.55384064]
[251.03153992 129.37237549]
[238.82034302 138.38633728]
[224.17649841 142.37661743]
[209.08047485 140.80360413]
[195.57386780 133.88002014]
[185.48335266 122.54221344]
[180.17356873 108.32353973]
[165.17436218 108.16954041]
[152.36833191 115.77577209]
[138.64831543 107.89719391]
[123.64910889 107.74320221]
[118.31865692 113.01921082]
[131.40786743 120.34535980]
[144.49708557 127.67150879]
[159.48286438 128.32441711]
[172.20283508 136.27439880]
[179.35652161 149.45866394]
[179.08773804 164.45625305]
[171.46621704 177.37571716]
[158.46954346 184.86480713]
[143.47000122 184.98033142]
[130.35952759 177.69229126]
[122.53993225 164.89173889]
[122.04051208 149.89869690]
[114.84912872 136.73495483]
[107.65774536 123.57122040]
[102.32729340 128.84722900]
[102.32729340 143.84722900]
[102.32729340 158.84722900]
[102.32729340 173.84722900]
[102.32729340 188.84722900]
[102.32729340 203.84722900]
[102.32729340 218.84722900]
[102.32729340 233.84722900]
[102.32729340 248.84722900]
[102.32729340 263.84722900]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 152]
[2 151]
[3 150]
[4 149]
[5 148]
[6 147]
[7 146]
[8 145]
[9 144]
[10 143]
[19 51]
[20 50]
[21 49]
[23 47]
[25 45]
[26 44]
[27 43]
[28 42]
[33 41]
[34 40]
[53 102]
[54 101]
[55 100]
[56 99]
[57 98]
[58 97]
[59 96]
[60 95]
[67 94]
[68 93]
[69 92]
[103 127]
[104 126]
[106 124]
[107 123]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
