%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:35 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGAGCCUUCUCCUCACUCUCUCAAUCUUAUCCAUCAUAGCAGGCAGUUGAGGUGGAUUAAACCAxxxxxxxxxxCUGUUCGCAGCAGUCUGCGCCCUUACACAAAAUGACAUCAAAAAAAUCGUAGCCUUCUCCACCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[115.32684326 253.76229858]
[115.32684326 238.76229858]
[115.32684326 223.76229858]
[115.32684326 208.76229858]
[115.32684326 193.76229858]
[115.32684326 178.76229858]
[115.32684326 163.76229858]
[115.32684326 148.76229858]
[115.32684326 133.76229858]
[115.32684326 118.76229095]
[97.70110321 121.61452484]
[84.96141052 112.01055908]
[70.51943207 116.06387329]
[56.07745743 120.11718750]
[41.63548279 124.17050171]
[30.43948174 135.34906006]
[16.09490395 131.33877563]
[1.65292990 135.39208984]
[2.51642036 150.42765808]
[0.12707192 165.29727173]
[-5.40336084 179.30541992]
[-13.81620979 191.79693604]
[-24.71799088 202.18757629]
[-37.59880829 209.99133301]
[-51.85620117 214.84321594]
[-66.82332611 216.51629639]
[-81.80014801 214.93232727]
[-96.08616638 210.16539001]
[-109.01319885 202.43843079]
[-119.97663116 192.11286926]
[-128.46368408 179.67164612]
[-134.07739258 165.69665527]
[-136.55520630 150.84153748]
[-135.78121948 135.80108643]
[-131.79164124 121.27878571]
[-124.77307129 107.95385742]
[-115.05377960 96.44953918]
[-103.08835602 87.30389404]
[-89.43643951 80.94470215]
[-74.73656464 77.66938019]
[-59.67626953 77.63112640]
[-44.95994186 80.83172607]
[-31.27589989 87.12148285]
[-19.26416969 96.20621490]
[-9.48655891 107.66101837]
[-2.40038538 120.95011902]
[12.04158974 116.89680481]
[22.20460510 106.00816345]
[37.58216858 109.72853088]
[52.02414322 105.67520905]
[66.46611786 101.62189484]
[80.90808868 97.56858063]
[88.55963135 82.50164795]
[106.36738586 78.35040283]
[122.12448120 90.12868500]
[128.86653137 76.72924805]
[135.60858154 63.32981873]
[142.35063171 49.93038559]
[141.64169312 34.12507248]
[154.27391052 26.23353958]
[161.01596069 12.83410740]
[157.71437073 0.32594046]
[163.65179443 -10.71361732]
[175.14712524 -14.59636307]
[182.15936279 -27.85640335]
[189.17158508 -41.11644363]
[177.98843384 -49.80009842]
[174.21284485 -67.43277740]
[174.21284485 -82.43277740]
[174.21284485 -97.43277740]
[160.15565491 -103.21757507]
[149.38577271 -113.94503021]
[143.54554749 -127.97927856]
[143.52555847 -143.18020630]
[149.32884216 -157.22976685]
[160.07044983 -167.98551941]
[174.11236572 -173.80728149]
[189.31330872 -173.80728149]
[203.35522461 -167.98551941]
[214.09683228 -157.22976685]
[219.90013123 -143.18020630]
[219.88012695 -127.97927856]
[214.03990173 -113.94503021]
[203.27001953 -103.21757507]
[189.21284485 -97.43277740]
[189.21284485 -82.43277740]
[189.21284485 -67.43277740]
[203.33119202 -62.36601257]
[212.86911011 -73.94306946]
[222.40702820 -85.52011871]
[231.94493103 -97.09717560]
[241.48284912 -108.67423248]
[243.64978027 -124.92958069]
[258.91186523 -130.92964172]
[271.56878662 -120.50206757]
[268.60018921 -104.37384796]
[253.05990601 -99.13631439]
[243.52198792 -87.55926514]
[233.98406982 -75.98220825]
[224.44616699 -64.40515137]
[214.90824890 -52.82809830]
[228.73660278 -58.63985062]
[243.70300293 -57.63643265]
[256.63180542 -50.03076553]
[264.77969360 -37.43664932]
[266.41784668 -22.52636719]
[261.19863892 -8.46365547]
[250.22950745 1.76758993]
[235.83796692 5.99645424]
[221.07765198 3.32563639]
[209.08049011 -5.67815685]
[202.39210510 -19.10445595]
[202.43162537 -34.10421371]
[195.41940308 -20.84417343]
[188.40716553 -7.58413410]
[190.02841187 9.86463356]
[174.41539001 19.57615662]
[167.67333984 32.97558975]
[168.86451721 47.82248688]
[155.75006104 56.67243576]
[149.00801086 70.07186890]
[142.26596069 83.47129822]
[135.52391052 96.87072754]
[143.59284973 84.22588348]
[154.71517944 74.16139221]
[168.10087585 67.39212799]
[182.79919434 64.39890289]
[197.76612854 65.39431763]
[211.93859863 70.30767822]
[224.30996704 78.78998566]
[234.00148010 90.23875427]
[240.32479858 103.84079742]
[242.83078003 118.62998962]
[241.34141541 133.55586243]
[235.96249390 147.55827332]
[227.07608032 159.64262390]
[215.31336975 168.95060730]
[201.50982666 174.82107544]
[186.64591980 176.83705139]
[171.77738953 174.85536194]
[157.96035767 169.01675415]
[146.17619324 159.73594666]
[137.26191711 147.67211914]
[131.85072327 133.68215942]
[130.32684326 118.76229095]
[130.32684326 133.76229858]
[130.32684326 148.76229858]
[130.32684326 163.76229858]
[130.32684326 178.76229858]
[130.32684326 193.76229858]
[130.32684326 208.76229858]
[130.32684326 223.76229858]
[130.32684326 238.76229858]
[130.32684326 253.76229858]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 154]
[2 153]
[3 152]
[4 151]
[5 150]
[6 149]
[7 148]
[8 147]
[9 146]
[10 145]
[12 52]
[13 51]
[14 50]
[15 49]
[17 47]
[18 46]
[55 123]
[56 122]
[57 121]
[58 120]
[60 118]
[61 117]
[64 115]
[65 114]
[66 113]
[68 87]
[69 86]
[70 85]
[88 101]
[89 100]
[90 99]
[91 98]
[92 97]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
