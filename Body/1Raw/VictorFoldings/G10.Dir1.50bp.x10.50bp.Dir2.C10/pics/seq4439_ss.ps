%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:27 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGAUUACAAUCUCCAGCAUUCCCCCUCAAACCUAAGAAAUAUGUCUGAUAAAAGAGUUACUUxxxxxxxxxxACCAUAGUCUAAUAGAAAACAACCGAAACCAAAUAAUUCAAGCACUGCUUAUUACAAUUUCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[86.03232574 305.43435669]
[88.62332916 286.22662354]
[88.93537903 271.22985840]
[89.24743652 256.23312378]
[89.55949402 241.23635864]
[89.87155151 226.23960876]
[90.18360901 211.24285889]
[90.49566650 196.24609375]
[90.80771637 181.24934387]
[91.11977386 166.25259399]
[76.60211182 162.61631775]
[63.25733948 155.84121704]
[51.75440216 146.26690674]
[42.66991806 134.37332153]
[36.45927048 120.75669098]
[33.43379593 106.09955597]
[33.74514771 91.13666534]
[37.37771988 76.61808014]
[44.14942169 63.27157974]
[53.72079468 51.76620102]
[65.61205292 42.67868423]
[79.22711182 36.46456528]
[93.88346863 33.43535233]
[94.19552612 18.43859863]
[94.50758362 3.44184542]
[94.81964111 -11.55490875]
[79.86641693 -12.79895973]
[65.01946259 -14.97024441]
[50.33621597 -18.06036186]
[35.87348938 -22.05735588]
[21.68722725 -26.94576454]
[7.83232117 -32.70667648]
[-5.63762951 -39.31779861]
[-18.67051125 -46.75355530]
[-31.21590233 -54.98518372]
[-43.22526550 -63.98083115]
[-54.65214157 -73.70570374]
[-65.45231628 -84.12216187]
[-75.58401489 -95.18991852]
[-85.00802612 -106.86615753]
[-93.68790436 -119.10569000]
[-101.59005737 -131.86117554]
[-108.68392181 -145.08326721]
[-114.94204712 -158.72080994]
[-120.34022522 -172.72102356]
[-124.85756683 -187.02976990]
[-128.47659302 -201.59167480]
[-131.18331909 -216.35040283]
[-132.96725464 -231.24887085]
[-133.82150269 -246.22941589]
[-133.74276733 -261.23410034]
[-132.73133850 -276.20483398]
[-130.79113770 -291.08377075]
[-127.92967224 -305.81326294]
[-124.15800476 -320.33639526]
[-119.49073792 -334.59695435]
[-113.94592285 -348.53973389]
[-107.54501343 -362.11083984]
[-100.31277466 -375.25775146]
[-92.27718353 -387.92959595]
[-83.46932983 -400.07736206]
[-73.92328644 -411.65405273]
[-63.67599487 -422.61486816]
[-52.76708984 -432.91741943]
[-41.23878098 -442.52182007]
[-29.13566589 -451.39093018]
[-16.50457382 -459.49041748]
[-3.39436936 -466.78900146]
[10.14422417 -473.25839233]
[24.05883026 -478.87356567]
[38.29561234 -483.61282349]
[52.79949570 -487.45779419]
[67.51436615 -490.39364624]
[82.38328552 -492.40899658]
[97.34874725 -493.49603271]
[112.35282898 -493.65057373]
[127.33750153 -492.87200928]
[142.24478149 -491.16339111]
[157.01699829 -488.53125000]
[171.59700012 -484.98583984]
[185.92839050 -480.54083252]
[199.95570374 -475.21347046]
[213.62467957 -469.02432251]
[226.88244629 -461.99734497]
[239.67768860 -454.15972900]
[251.96092224 -445.54177856]
[263.68460083 -436.17687988]
[274.80340576 -426.10122681]
[285.27432251 -415.35382080]
[295.05679321 -403.97622681]
[304.11297607 -392.01245117]
[312.40789795 -379.50881958]
[319.90939331 -366.51367188]
[326.58847046 -353.07727051]
[332.41931152 -339.25164795]
[337.37933350 -325.09027100]
[341.44934082 -310.64791870]
[344.61358643 -295.98046875]
[346.85986328 -281.14468384]
[348.17944336 -266.19793701]
[348.56723022 -251.19805908]
[348.02172852 -236.20309448]
[346.54504395 -221.27105713]
[344.14291382 -206.45970154]
[340.82458496 -191.82633972]
[336.60293579 -177.42758179]
[331.49429321 -163.31913757]
[325.51840210 -149.55558777]
[318.69839478 -136.19018555]
[311.06063843 -123.27464294]
[302.63470459 -110.85890961]
[293.45321655 -98.99103546]
[283.55163574 -87.71693420]
[272.96832275 -77.08022308]
[261.74417114 -67.12204742]
[249.92265320 -57.88093567]
[237.54946899 -49.39264679]
[224.67251587 -41.69001389]
[211.34159851 -34.80283737]
[197.60829163 -28.75776863]
[183.52574158 -23.57818794]
[169.14840698 -19.28413773]
[154.53192139 -15.89223194]
[139.73284912 -13.41559029]
[124.80842590 -11.86379528]
[109.81639099 -11.24285221]
[109.50433350 3.75390172]
[109.19228363 18.75065613]
[108.88022614 33.74740982]
[123.39788818 37.38368225]
[136.74266052 44.15878677]
[148.24560547 53.73309708]
[157.33007812 65.62667084]
[163.54072571 79.24330902]
[166.56620789 93.90044403]
[166.25485229 108.86333466]
[162.62228394 123.38191986]
[155.85058594 136.72842407]
[146.27920532 148.23379517]
[134.38793945 157.32131958]
[120.77288818 163.53543091]
[106.11653137 166.56465149]
[105.80447388 181.56140137]
[105.49241638 196.55815125]
[105.18035889 211.55490112]
[104.86830139 226.55166626]
[104.55625153 241.54841614]
[104.24419403 256.54516602]
[103.93213654 271.54193115]
[103.62007904 286.53866577]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 150]
[3 149]
[4 148]
[5 147]
[6 146]
[7 145]
[8 144]
[9 143]
[10 142]
[23 129]
[24 128]
[25 127]
[26 126]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
