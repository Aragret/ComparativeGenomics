%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:47 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCAACCUCCUACUCCUCAUUGUACCCAUUCUAAUCGCAAUGGCAUUCCUAAUGCUUACCGAxxxxxxxxxxGCAGCCCUAGCAACACUCCACCUCCUAUUCUUGCACGAAACGGGAUCAAACAACCCCCUACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[51.60059738 591.68273926]
[51.60059738 576.68273926]
[51.60059738 561.68273926]
[51.60059738 546.68273926]
[51.60059738 531.68273926]
[51.60059738 516.68273926]
[51.60059738 501.68270874]
[51.60059738 486.68270874]
[51.60059738 471.68270874]
[51.60059738 456.68270874]
[39.13145065 454.35867310]
[27.23322868 449.95373535]
[16.25059509 443.59426880]
[6.50190592 435.46316528]
[-1.73001468 425.79479980]
[-8.20607948 414.86810303]
[-12.73788357 402.99859619]
[-15.19318581 390.52926636]
[-15.49976540 377.82061768]
[-13.64754772 365.24038696]
[-9.68892956 353.15264893]
[-3.73729706 341.90753174]
[4.03621912 331.83093262]
[13.40766811 323.21517944]
[24.10672569 316.31036377]
[35.82449722 311.31732178]
[48.22243500 308.38162231]
[60.94210815 307.58932495]
[62.80972290 292.70605469]
[64.67733765 277.82278442]
[55.36420441 266.25552368]
[57.04621124 251.13516235]
[69.24214935 241.44511414]
[71.10976410 226.56184387]
[72.97737122 211.67855835]
[66.88492584 198.08697510]
[76.28024292 185.35752869]
[78.14785767 170.47425842]
[76.47028351 168.15196228]
[75.64238739 165.00416565]
[75.99138641 161.36273193]
[77.71404266 157.67443848]
[80.83972931 154.45083618]
[83.93804932 139.77430725]
[87.03636932 125.09778595]
[77.98567200 117.70096588]
[72.70433807 107.27333069]
[72.09663391 95.60033417]
[76.26663208 84.68066406]
[84.50032806 76.38401031]
[79.89476013 62.10855103]
[75.28919983 47.83309174]
[68.86919403 61.38977051]
[55.78461075 68.72418976]
[40.86994934 67.12643433]
[29.63587570 57.18683624]
[26.23315620 42.57788467]
[31.91902924 28.69729233]
[44.59267807 20.67366409]
[59.57144165 21.47156906]
[71.32048035 30.79547119]
[69.14363861 15.95426559]
[66.96680450 1.11306012]
[52.07950211 -1.65225828]
[38.89796066 -9.10381413]
[28.85201263 -20.43331909]
[23.03137016 -34.41183090]
[22.06741142 -49.52307129]
[26.06469917 -64.12787628]
[34.58963776 -76.64203644]
[46.71750641 -85.70809937]
[61.13276291 -90.34265137]
[76.27175140 -90.04297638]
[90.49230194 -84.84156799]
[102.25187683 -75.30265045]
[110.27489471 -62.46092224]
[113.69107056 -47.70936203]
[112.12983704 -32.64811325]
[105.76055908 -18.91090012]
[95.27411652 -7.98783779]
[81.80800629 -1.06377685]
[83.98484802 13.77742863]
[86.16168213 28.61863327]
[89.56465912 43.22752762]
[94.17022705 57.50298691]
[98.77578735 71.77845001]
[104.94532013 72.18815613]
[110.87791443 73.93036652]
[116.28932953 76.92160034]
[120.92031097 81.01855469]
[134.30659485 74.25043488]
[147.69288635 67.48232269]
[161.07916260 60.71420670]
[158.98384094 45.71792984]
[161.87377930 30.85431862]
[169.43548584 17.73566246]
[180.84875488 7.78497887]
[194.87553406 2.08164167]
[209.99432373 1.24430680]
[224.56513977 5.36380243]
[237.00743103 13.99327564]
[245.97158813 26.19666672]
[250.48521423 40.65024185]
[250.05873108 55.78618622]
[244.73837280 69.96266937]
[235.10127258 81.64192200]
[222.19277954 89.55707550]
[207.41313171 92.84955597]
[192.36547852 91.16220856]
[178.68211365 84.67807007]
[167.84727478 74.10049438]
[154.46099854 80.86860657]
[141.07470703 87.63672638]
[127.68842316 94.40483856]
[122.39580536 117.21576691]
[101.71289825 128.19610596]
[98.61457825 142.87263489]
[95.51625061 157.54916382]
[93.03113556 172.34187317]
[91.16352081 187.22514343]
[97.12239075 201.88128662]
[87.86065674 213.54617310]
[85.99304199 228.42945862]
[84.12542725 243.31272888]
[93.54904938 255.71568298]
[91.44300842 270.78283691]
[79.56061554 279.69039917]
[77.69300079 294.57366943]
[75.82538605 309.45693970]
[92.33599091 315.37518311]
[107.01200867 324.96594238]
[119.05097961 337.70068359]
[127.79556274 352.87915039]
[132.76945496 369.66775513]
[133.70332336 387.14535522]
[130.54940796 404.35394287]
[123.48389435 420.35095215]
[112.89717102 434.26101685]
[99.37216187 445.32388306]
[83.65229034 452.93579102]
[66.60059357 456.68270874]
[66.60059357 471.68270874]
[66.60059357 486.68270874]
[66.60059357 501.68270874]
[66.60059357 516.68273926]
[66.60059357 531.68273926]
[66.60059357 546.68273926]
[66.60059357 561.68273926]
[66.60059357 576.68273926]
[66.60059357 591.68273926]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[28 129]
[29 128]
[30 127]
[33 124]
[34 123]
[35 122]
[37 120]
[38 119]
[43 118]
[44 117]
[45 116]
[50 86]
[51 85]
[52 84]
[61 83]
[62 82]
[63 81]
[90 114]
[91 113]
[92 112]
[93 111]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
