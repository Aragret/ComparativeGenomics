%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:32 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGGCAUCACCCCGCUAAAUCCCCUAGAAGUCCCACUCCUAAACACAUCCGUAUUACUCGCAUCAGGxxxxxxxxxxCUCCAACUCAUGAGACCCACAACAAAUAGCCCUUCUAAACGCUAAUCCAAGCCUCACCCCACUACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[92.35328674 107.35035706]
[92.64964294 92.35328674]
[92.94599915 77.35621643]
[93.24235535 62.35914230]
[93.53871155 47.36206818]
[93.83507538 32.36499786]
[94.13143158 17.36792374]
[94.42778778 2.37085199]
[94.72414398 -12.62621975]
[95.02050018 -27.62329292]
[95.31685638 -42.62036514]
[80.34592438 -43.59420776]
[65.43429565 -45.24355316]
[50.61242294 -47.56503296]
[35.91059113 -50.55390549]
[21.35883904 -54.20405960]
[6.98689032 -58.50804520]
[-7.17589092 -63.45706177]
[-21.10057259 -69.04100800]
[-34.75870514 -75.24846649]
[-48.12238693 -82.06675720]
[-61.16431808 -89.48196411]
[-73.85785675 -97.47891998]
[-86.17706299 -106.04129791]
[-98.09677124 -115.15160370]
[-109.59263611 -124.79122162]
[-120.64116669 -134.94046021]
[-131.21978760 -145.57859802]
[-141.30690002 -156.68388367]
[-150.88189697 -168.23362732]
[-159.92520142 -180.20425415]
[-168.41835022 -192.57128906]
[-176.34397888 -205.30947876]
[-183.68591309 -218.39279175]
[-190.42913818 -231.79450989]
[-196.55990601 -245.48724365]
[-202.06565857 -259.44302368]
[-206.93515015 -273.63333130]
[-211.15846252 -288.02920532]
[-214.72694397 -302.60119629]
[-217.63330078 -317.31958008]
[-219.87161255 -332.15423584]
[-221.43728638 -347.07489014]
[-222.32714844 -362.05102539]
[-222.53936768 -377.05212402]
[-222.07350159 -392.04745483]
[-220.93051147 -407.00640869]
[-219.11273193 -421.89846802]
[-216.62388611 -436.69314575]
[-213.46903992 -451.36026001]
[-209.65463257 -465.86981201]
[-205.18849182 -480.19219971]
[-200.07971191 -494.29815674]
[-194.33874512 -508.15881348]
[-187.97731018 -521.74591064]
[-181.00840759 -535.03167725]
[-173.44627380 -547.98895264]
[-165.30636597 -560.59130859]
[-156.60530090 -572.81298828]
[-147.36085510 -584.62896729]
[-137.59191895 -596.01513672]
[-127.31845093 -606.94824219]
[-116.56143951 -617.40594482]
[-105.34285736 -627.36688232]
[-93.68562317 -636.81072998]
[-81.61354828 -645.71820068]
[-69.15130615 -654.07098389]
[-56.32435608 -661.85217285]
[-43.15889359 -669.04577637]
[-29.68181801 -675.63708496]
[-15.92066479 -681.61267090]
[-1.90354645 -686.96032715]
[12.34090137 -691.66912842]
[26.78357887 -695.72949219]
[41.39497757 -699.13305664]
[56.14524841 -701.87286377]
[71.00425720 -703.94335938]
[85.94165039 -705.34027100]
[100.92691040 -706.06085205]
[115.92942047 -706.10345459]
[130.91853333 -705.46813965]
[145.86363220 -704.15618896]
[160.73417664 -702.17022705]
[175.49978638 -699.51428223]
[190.13031006 -696.19384766]
[204.59582520 -692.21575928]
[218.86682129 -687.58801270]
[232.91412354 -682.32012939]
[246.70903015 -676.42285156]
[260.22335815 -669.90826416]
[273.42950439 -662.78961182]
[286.30050659 -655.08154297]
[298.81002808 -646.79968262]
[310.93255615 -637.96105957]
[322.64331055 -628.58367920]
[333.91833496 -618.68664551]
[344.73464966 -608.29028320]
[355.07009888 -597.41577148]
[364.90362549 -586.08532715]
[374.21511841 -574.32208252]
[382.98553467 -562.15008545]
[391.19696045 -549.59423828]
[398.83264160 -536.68017578]
[405.87698364 -523.43426514]
[412.31555176 -509.88351440]
[418.13525391 -496.05572510]
[423.32415771 -481.97906494]
[427.87167358 -467.68228149]
[431.76849365 -453.19464111]
[435.00668335 -438.54571533]
[437.57962036 -423.76541138]
[439.48205566 -408.88394165]
[440.71005249 -393.93173218]
[441.26116943 -378.93927002]
[441.13427734 -363.93725586]
[440.32958984 -348.95626831]
[438.84875488 -334.02694702]
[436.69482422 -319.17980957]
[433.87219238 -304.44515991]
[430.38662720 -289.85311890]
[426.24526978 -275.43347168]
[421.45651245 -261.21569824]
[416.03021240 -247.22882080]
[409.97741699 -233.50144958]
[403.31048584 -220.06161499]
[396.04306030 -206.93676758]
[388.18997192 -194.15371704]
[379.76730347 -181.73858643]
[370.79220581 -169.71673584]
[361.28302002 -158.11273193]
[351.25921631 -146.95027161]
[340.74127197 -136.25216675]
[329.75061035 -126.04026794]
[318.30975342 -116.33543396]
[306.44201660 -107.15750122]
[294.17169189 -98.52522278]
[281.52383423 -90.45621490]
[268.52429199 -82.96697998]
[255.19958496 -76.07280731]
[241.57696533 -69.78778839]
[227.68426514 -64.12476349]
[213.54985046 -59.09529877]
[199.20260620 -54.70966721]
[184.67184448 -50.97682953]
[169.98724365 -47.90441132]
[155.17881775 -45.49869537]
[140.27679443 -43.76458740]
[125.31164551 -42.70563889]
[110.31393433 -42.32400513]
[110.01757050 -27.32693481]
[109.72121429 -12.32986259]
[109.42485809 2.66720939]
[109.12850189 17.66428185]
[108.83214569 32.66135406]
[108.53578949 47.65842438]
[108.23943329 62.65549850]
[107.94306946 77.65257263]
[107.64671326 92.64964294]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 158]
[3 157]
[4 156]
[5 155]
[6 154]
[7 153]
[8 152]
[9 151]
[10 150]
[11 149]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
