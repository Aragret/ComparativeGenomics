%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:19 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGACUCCACCUUACUACCAGACAACCUUAGCCAAACCAUUUACCCAAAUAAAGUAUAGGCGAxxxxxxxxxxACCGGAGAUGAAAACCUUUUUCCAAGGACAAAUCAGAGAAAAAGUCUUUAACUCCACCAUCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[104.28280640 266.77172852]
[104.28280640 251.77172852]
[104.28280640 236.77172852]
[104.28280640 221.77172852]
[104.28280640 206.77172852]
[104.28280640 191.77172852]
[104.28280640 176.77172852]
[104.28280640 161.77172852]
[104.28280640 146.77172852]
[104.28280640 131.77172852]
[79.75527954 119.47441864]
[76.23632050 95.85289764]
[62.99373245 88.80776215]
[49.75114822 81.76262665]
[36.50856018 74.71749115]
[28.29952240 87.28403473]
[18.99706650 99.06412506]
[8.67608929 109.96292114]
[-2.58030701 119.89266205]
[-14.68149185 128.77340698]
[-27.53003120 136.53364563]
[-41.02247238 143.11088562]
[-55.05018234 148.45219421]
[-69.50022125 152.51455688]
[-84.25623322 155.26525879]
[-99.19940948 156.68215942]
[-114.20944214 156.75382996]
[-129.16548157 155.47972107]
[-143.94708252 152.87008667]
[-158.43525696 148.94592285]
[-172.51335144 143.73883057]
[-186.06799316 137.29075623]
[-198.99006653 129.65357971]
[-211.17552185 120.88882446]
[-222.52624512 111.06704712]
[-232.95083618 100.26732635]
[-242.36538696 88.57661438]
[-250.69406128 76.08905792]
[-257.86984253 62.90517807]
[-263.83489990 49.13114166]
[-268.54125977 34.87784576]
[-271.95101929 20.26004982]
[-274.03668213 5.39545393]
[-274.78149414 -9.59626102]
[-274.17944336 -24.59438705]
[-272.23538208 -39.47816467]
[-268.96496582 -54.12775803]
[-264.39453125 -68.42521667]
[-258.56085205 -82.25541687]
[-251.51092529 -95.50701141]
[-243.30149841 -108.07330322]
[-233.99868774 -119.85311127]
[-223.67736816 -130.75158691]
[-212.42066956 -140.68098450]
[-200.31921387 -149.56135559]
[-187.47044373 -157.32121277]
[-173.97779846 -163.89804077]
[-159.94992065 -169.23892212]
[-145.49977112 -173.30084229]
[-130.74366760 -176.05108643]
[-115.80044556 -177.46752930]
[-100.79041290 -177.53875732]
[-85.83441925 -176.26419067]
[-71.05288696 -173.65409851]
[-56.56483078 -169.72949219]
[-42.48690414 -164.52197266]
[-28.93245506 -158.07347107]
[-16.01061630 -150.43591309]
[-3.82543254 -141.67077637]
[7.52498913 -131.84866333]
[17.94925880 -121.04861450]
[27.36344528 -109.35762787]
[35.69174957 -96.86980438]
[42.86711884 -83.68571472]
[48.83177185 -69.91149139]
[53.53769302 -55.65805054]
[56.94698715 -41.04015350]
[59.03220367 -26.17549324]
[59.77655411 -11.18375587]
[59.17404938 3.81435132]
[57.22953415 18.69807053]
[53.95867157 33.34756470]
[49.38779068 47.64488220]
[43.55369568 61.47490692]
[56.79627991 68.52004242]
[70.03886414 75.56517792]
[83.28145599 82.61031342]
[95.27718353 74.32384491]
[110.98866272 74.14750671]
[125.07287598 83.39103699]
[132.05905151 99.96016693]
[146.92210388 97.93783569]
[161.78515625 95.91549683]
[171.34779358 83.61942291]
[186.44985962 81.78022003]
[198.11335754 90.97251892]
[212.97639465 88.95018005]
[227.83944702 86.92784882]
[242.70249939 84.90551758]
[257.56555176 82.88317871]
[272.42858887 80.86084747]
[287.29162598 78.83850861]
[290.78775024 64.06889343]
[299.38641357 51.56179810]
[311.92471313 43.00870514]
[326.70697021 39.56634521]
[341.73394775 41.70027924]
[354.97344971 49.12189865]
[364.63488770 60.82749939]
[369.41165161 75.23399353]
[368.65771484 90.39302063]
[362.47503662 104.25444031]
[351.69979858 114.94361877]
[337.78921509 121.01492310]
[322.62463379 121.64727020]
[308.25692749 116.75513458]
[296.62918091 107.00013733]
[289.31396484 93.70156097]
[274.45092773 95.72389221]
[259.58786011 97.74622345]
[244.72482300 99.76856232]
[229.86178589 101.79089355]
[214.99873352 103.81323242]
[200.13568115 105.83556366]
[191.35223389 117.80997467]
[176.30778503 120.07263947]
[163.80747986 110.77854919]
[148.94444275 112.80088043]
[134.08139038 114.82321167]
[148.09449768 120.17417145]
[163.09364319 120.01432037]
[176.25540161 127.20935059]
[184.21792603 139.92147827]
[184.94741821 154.90373230]
[178.25753784 168.32928467]
[165.85704041 176.76893616]
[150.91331482 178.06701660]
[137.24333191 171.89193726]
[128.33872986 159.82098389]
[126.47418976 144.93545532]
[119.28280640 131.77172852]
[119.28280640 146.77172852]
[119.28280640 161.77172852]
[119.28280640 176.77172852]
[119.28280640 191.77172852]
[119.28280640 206.77172852]
[119.28280640 221.77172852]
[119.28280640 236.77172852]
[119.28280640 251.77172852]
[119.28280640 266.77172852]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[12 87]
[13 86]
[14 85]
[15 84]
[91 129]
[92 128]
[93 127]
[96 124]
[97 123]
[98 122]
[99 121]
[100 120]
[101 119]
[102 118]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
