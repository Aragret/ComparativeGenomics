%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:14 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCCCCCACAAUCCUAGGCCUACCCGCCGCAGUACUGAUCAUUCUAUUUCCCCCUCUAUUGAxxxxxxxxxxACUAAUAGCUUUUUGAUGACUUCUAGCAAGCCUCGCUAACCUCGCCUUACCCCCCACUAUCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[124.31870270 85.68632507]
[113.87889099 96.45713806]
[110.28536224 109.96928406]
[96.89192200 113.98267365]
[86.45211029 124.75348663]
[76.01229858 135.52429199]
[71.96334839 150.81861877]
[57.54952621 154.57243347]
[47.10971451 165.34323120]
[36.66990280 176.11404419]
[26.23008919 186.88485718]
[15.79027748 197.65565491]
[21.10386848 211.96400452]
[19.67454529 227.16004944]
[11.78610134 240.22660828]
[-0.99520838 248.56932068]
[-16.13164520 250.53173828]
[-30.61785698 245.72419739]
[-41.57759857 235.10125732]
[-46.83480453 220.77210999]
[-45.34564972 205.58181763]
[-37.40581131 192.54640198]
[-24.59174728 184.25408936]
[-9.44770050 182.35130310]
[5.01946831 187.21585083]
[15.45928097 176.44503784]
[25.89909363 165.67424011]
[36.33890533 154.90342712]
[46.77871704 144.13261414]
[50.08094025 129.60868835]
[65.24148560 125.08448029]
[75.68129730 114.31367493]
[86.12110901 103.54286194]
[89.71463776 90.03071594]
[103.10807800 86.01732635]
[113.54788971 75.24651337]
[104.30858612 65.17754364]
[95.64424896 54.60987091]
[87.58175659 43.57628632]
[80.14610291 32.11101532]
[73.36035919 20.24963570]
[67.24555206 8.02894497]
[61.82064056 -4.51314211]
[57.10245514 -17.33771706]
[53.10560989 -30.40499306]
[49.84250259 -43.67443085]
[47.32323837 -57.10486603]
[45.55562210 -70.65464020]
[44.54513168 -84.28170776]
[44.29488754 -97.94380951]
[44.80565643 -111.59855652]
[46.07584381 -125.20359802]
[48.10150146 -138.71672058]
[50.87632751 -152.09602356]
[54.39171219 -165.30000305]
[58.63673782 -178.28768921]
[63.59822464 -191.01879883]
[69.26077271 -203.45385742]
[75.60681152 -215.55427551]
[82.61663818 -227.28254700]
[90.26850891 -238.60227966]
[98.53866577 -249.47836304]
[107.40145874 -259.87707520]
[116.82937622 -269.76617432]
[126.79317474 -279.11495972]
[137.26193237 -287.89443970]
[148.20317078 -296.07742310]
[159.58294678 -303.63851929]
[171.36595154 -310.55429077]
[183.51562500 -316.80328369]
[195.99427795 -322.36608887]
[208.76319885 -327.22552490]
[221.78276062 -331.36645508]
[235.01258850 -334.77612305]
[248.41162109 -337.44390869]
[261.93832397 -339.36154175]
[275.55072021 -340.52313232]
[289.20657349 -340.92504883]
[302.86349487 -340.56607056]
[316.47918701 -339.44729614]
[330.01138306 -337.57223511]
[343.41812134 -334.94671631]
[356.65777588 -331.57885742]
[369.68930054 -327.47915649]
[382.47229004 -322.66033936]
[394.96707153 -317.13732910]
[407.13488770 -310.92727661]
[418.93804932 -304.04949951]
[430.33987427 -296.52529907]
[441.30505371 -288.37802124]
[451.79956055 -279.63296509]
[461.79083252 -270.31729126]
[471.24789429 -260.45983887]
[480.14144897 -250.09124756]
[488.44384766 -239.24366760]
[496.12942505 -227.95077515]
[503.17428589 -216.24757385]
[509.55661011 -204.17037964]
[515.25659180 -191.75668335]
[520.25659180 -179.04498291]
[524.54113770 -166.07472229]
[528.09680176 -152.88612366]
[530.91271973 -139.52011108]
[532.98016357 -126.01815796]
[547.91442871 -127.42045593]
[562.84875488 -128.82276917]
[577.78308105 -130.22506714]
[586.52136230 -143.19335938]
[601.56530762 -147.46107483]
[615.81164551 -141.01315308]
[622.53369141 -126.89407349]
[618.55749512 -111.77045441]
[605.76043701 -102.78320312]
[590.18499756 -104.17581940]
[579.18536377 -115.29075623]
[564.25103760 -113.88845825]
[549.31677246 -112.48615265]
[534.38244629 -111.08384705]
[534.86730957 -93.97685242]
[534.15802002 -76.87746429]
[532.25787354 -59.86893463]
[529.17614746 -43.03410339]
[524.92785645 -26.45494652]
[519.53356934 -10.21220589]
[513.01965332 5.61501598]
[505.41763306 20.94963455]
[496.76461792 35.71696472]
[487.10269165 49.84508133]
[476.47882080 63.26516724]
[464.94479370 75.91185760]
[452.55667114 87.72354126]
[439.37481689 98.64268494]
[425.46337891 108.61608887]
[410.89007568 117.59516144]
[395.72583008 125.53614807]
[380.04452515 132.40036011]
[363.92245483 138.15432739]
[347.43811035 142.77001953]
[330.67181396 146.22491455]
[313.70513916 148.50216675]
[296.62075806 149.59063721]
[279.50180054 149.48501587]
[262.43167114 148.18577576]
[245.49345398 145.69920349]
[228.76966858 142.03736877]
[212.34176636 137.21809387]
[196.28971863 131.26480103]
[180.69171143 124.20645905]
[165.62371826 116.07738495]
[151.15913391 106.91716003]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 36]
[2 35]
[4 33]
[5 32]
[6 31]
[8 29]
[9 28]
[10 27]
[11 26]
[12 25]
[104 118]
[105 117]
[106 116]
[107 115]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
