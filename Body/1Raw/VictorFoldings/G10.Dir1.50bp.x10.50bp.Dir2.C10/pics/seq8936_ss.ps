%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:16 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCACUAACCAUAUACCAAUGAUGGCGCGAUGUAACACGAGAAAGCACAUACCAAGGCCACCxxxxxxxxxxCUCCCUUCCCCUACUCAUCGCACUAAUUUACACUCACAACACCCUAGGCUCACUAAACAUCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[100.63669586 293.77999878]
[100.63669586 278.77999878]
[100.63669586 263.77999878]
[100.63669586 248.78001404]
[100.63669586 233.78001404]
[100.63669586 218.78001404]
[100.63669586 203.78001404]
[100.63669586 188.78001404]
[100.63669586 173.78001404]
[100.63669586 158.78001404]
[94.12854004 155.05255127]
[86.93715668 168.21629333]
[79.22180176 181.07994080]
[66.20542908 173.62515259]
[73.39682007 160.46125793]
[81.11223602 147.59764099]
[74.60408020 143.87019348]
[61.66602325 151.46009827]
[48.72796631 159.05000305]
[35.78990936 166.63990784]
[35.26549149 182.05836487]
[26.46969414 194.73265076]
[12.20922947 200.61845398]
[-2.96544051 197.83764648]
[-14.21213531 187.27755737]
[-17.94207382 172.30787659]
[-12.96504784 157.70539856]
[-0.86920768 148.12968445]
[14.48570824 146.63633728]
[28.20000267 153.70185852]
[41.13805771 146.11195374]
[54.07611465 138.52204895]
[67.01416779 130.93212891]
[63.96767044 95.88787842]
[84.79874420 77.30897522]
[80.19317627 63.03351593]
[75.58761597 48.75805664]
[70.98204803 34.48259735]
[66.37648010 20.20713615]
[61.77091980 5.93167448]
[47.06049728 8.94276714]
[32.10810852 10.31728745]
[17.09526634 10.03854942]
[2.20420647 8.10993767]
[-12.38430405 4.55486250]
[-26.49317360 -0.58351922]
[-39.95113754 -7.24283314]
[-52.59482193 -15.34224129]
[-64.27074432 -24.78342438]
[-74.83718109 -35.45177460]
[-84.16585541 -47.21778488]
[-92.14352417 -59.93863297]
[-98.67334747 -73.45989990]
[-103.67606354 -87.61743927]
[-107.09094238 -102.23940277]
[-108.87652588 -117.14829254]
[-109.01114655 -132.16311646]
[-107.49316406 -147.10162354]
[-104.34101105 -161.78247070]
[-99.59294128 -176.02743530]
[-93.30660248 -189.66360474]
[-85.55829620 -202.52543640]
[-76.44209290 -214.45683289]
[-66.06864166 -225.31291199]
[-54.56387329 -234.96192932]
[-42.06744003 -243.28674316]
[-28.73104477 -250.18627930]
[-14.71657372 -255.57681274]
[-0.19415091 -259.39288330]
[14.65993500 -261.58819580]
[29.66536713 -262.13604736]
[44.63999557 -261.02984619]
[59.40204239 -258.28302002]
[73.77230835 -253.92884827]
[87.57635498 -248.02024841]
[100.64660645 -240.62892151]
[112.82440948 -231.84460449]
[123.96192932 -221.77391052]
[133.92396545 -210.53910828]
[142.58961487 -198.27656555]
[149.85363770 -185.13514709]
[155.62789917 -171.27436829]
[159.84228516 -156.86248779]
[162.44563293 -142.07446289]
[163.40634155 -127.08979034]
[162.71275330 -112.09038544]
[160.37329102 -97.25832367]
[156.41635132 -82.77365112]
[150.88996887 -68.81219482]
[143.86122131 -55.54343796]
[135.41543579 -43.12844849]
[125.65514374 -31.71793556]
[114.69881439 -21.45041084]
[102.67945099 -12.45051479]
[89.74295807 -4.82749510]
[76.04637909 1.32611024]
[80.65194702 15.60157108]
[85.25750732 29.87703133]
[89.86307526 44.15249252]
[94.46863556 58.42795181]
[99.07420349 72.70341492]
[131.28161621 81.65064240]
[138.69934082 123.39279938]
[153.65959167 124.48411560]
[168.61982727 125.57542419]
[174.09967041 111.48774719]
[183.48979187 99.64218903]
[195.95520020 91.09204865]
[210.38751221 86.59760284]
[225.50338745 86.55849457]
[239.95875549 90.97820282]
[252.46824646 99.46372986]
[261.91952515 111.26054382]
[267.47216797 125.31967926]
[268.63247681 140.39100647]
[265.29727173 155.13441467]
[257.76309204 168.23889160]
[246.69989014 178.53923035]
[233.09140015 185.11952209]
[218.14765930 187.39463806]
[203.19747925 185.16229248]
[189.57020569 178.62097168]
[178.47756958 168.35234070]
[170.90591431 155.26947021]
[167.52851868 140.53567505]
[152.56826782 139.44436646]
[137.60803223 138.35305786]
[132.11518860 143.45979309]
[144.72084045 151.58982849]
[157.32649231 159.71987915]
[171.98027039 162.92404175]
[182.02157593 174.06730652]
[183.68803406 188.97445679]
[176.35528564 202.05996704]
[162.77078247 208.42089844]
[148.02447510 205.67390442]
[137.64157104 194.84822083]
[135.51229858 180.00074768]
[128.32090759 166.83700562]
[121.12953186 153.67327881]
[115.63669586 158.78001404]
[115.63669586 173.78001404]
[115.63669586 188.78001404]
[115.63669586 203.78001404]
[115.63669586 218.78001404]
[115.63669586 233.78001404]
[115.63669586 248.78001404]
[115.63669586 263.77999878]
[115.63669586 278.77999878]
[115.63669586 293.77999878]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[17 33]
[18 32]
[19 31]
[20 30]
[35 101]
[36 100]
[37 99]
[38 98]
[39 97]
[40 96]
[103 127]
[104 126]
[105 125]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
