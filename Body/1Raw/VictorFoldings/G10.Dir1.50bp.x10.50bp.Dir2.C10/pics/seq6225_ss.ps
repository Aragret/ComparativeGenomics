%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:23 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCUUCACUCAGCCAUUUUACCUCACCCCCACUGAUGUUCGCCGACCGUUGACUAUUCUCUACAAxxxxxxxxxxAAGCUCCAUCUGCCUACGACAAACAGACCUAAAAUCGCUCAUUGCAUACUCUUCAAUCAGCCACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[92.50000000 92.50000000]
[92.50000000 77.50000000]
[92.50000000 62.50000000]
[92.50000000 47.50000000]
[92.50000000 32.50000000]
[92.50000000 17.50000000]
[92.50000000 2.49999952]
[92.50000000 -12.50000000]
[92.50000000 -27.50000000]
[92.50000000 -42.50000000]
[77.51293182 -43.18278122]
[62.57247925 -44.54698181]
[47.70959854 -46.58978271]
[32.95509338 -49.30694199]
[18.33955383 -52.69283295]
[3.89326811 -56.74043655]
[-10.35382175 -61.44136429]
[-24.37218666 -66.78586578]
[-38.13277054 -72.76287842]
[-51.60705185 -79.36000061]
[-64.76710510 -86.56356049]
[-77.58564758 -94.35863495]
[-90.03611755 -102.72906494]
[-102.09271240 -111.65749359]
[-113.73043823 -121.12542725]
[-124.92517090 -131.11323547]
[-135.65370178 -141.60020447]
[-145.89381409 -152.56462097]
[-155.62428284 -163.98374939]
[-164.82490540 -175.83392334]
[-173.47665405 -188.09057617]
[-181.56156921 -200.72831726]
[-189.06291199 -213.72093201]
[-195.96511841 -227.04151917]
[-202.25390625 -240.66244507]
[-207.91619873 -254.55548096]
[-212.94030762 -268.69183350]
[-217.31579590 -283.04223633]
[-221.03358459 -297.57687378]
[-224.08599854 -312.26568604]
[-226.46667480 -327.07821655]
[-228.17071533 -341.98373413]
[-229.19454956 -356.95135498]
[-229.53608704 -371.95007324]
[-229.19461060 -386.94879150]
[-228.17082214 -401.91644287]
[-226.46685791 -416.82196045]
[-224.08622742 -431.63449097]
[-221.03388977 -446.32330322]
[-217.31614685 -460.85800171]
[-212.94071960 -475.20837402]
[-207.91667175 -489.34475708]
[-202.25442505 -503.23782349]
[-195.96569824 -516.85876465]
[-189.06353760 -530.17938232]
[-181.56225586 -543.17205811]
[-173.47738647 -555.80981445]
[-164.82568359 -568.06646729]
[-155.62509155 -579.91668701]
[-145.89468384 -591.33587646]
[-135.65461731 -602.30035400]
[-124.92612457 -612.78735352]
[-113.73143005 -622.77520752]
[-102.09374237 -632.24316406]
[-90.03718567 -641.17163086]
[-77.58674622 -649.54211426]
[-64.76823425 -657.33721924]
[-51.60821152 -664.54089355]
[-38.13395309 -671.13806152]
[-24.37339592 -677.11511230]
[-10.35505199 -682.45965576]
[3.89201975 -687.16064453]
[18.33829117 -691.20831299]
[32.95381927 -694.59423828]
[47.70830917 -697.31146240]
[62.57118225 -699.35430908]
[77.51163483 -700.71856689]
[92.49869537 -701.40142822]
[107.50130463 -701.40142822]
[122.48836517 -700.71856689]
[137.42881775 -699.35430908]
[152.29168701 -697.31146240]
[167.04618835 -694.59423828]
[181.66171265 -691.20831299]
[196.10798645 -687.16064453]
[210.35505676 -682.45965576]
[224.37339783 -677.11511230]
[238.13395691 -671.13806152]
[251.60821533 -664.54089355]
[264.76821899 -657.33721924]
[277.58676147 -649.54211426]
[290.03720093 -641.17163086]
[302.09375000 -632.24316406]
[313.73141479 -622.77520752]
[324.92611694 -612.78735352]
[335.65463257 -602.30035400]
[345.89468384 -591.33587646]
[355.62509155 -579.91668701]
[364.82568359 -568.06646729]
[373.47738647 -555.80981445]
[381.56225586 -543.17205811]
[389.06353760 -530.17938232]
[395.96569824 -516.85876465]
[402.25442505 -503.23782349]
[407.91665649 -489.34475708]
[412.94070435 -475.20837402]
[417.31613159 -460.85800171]
[421.03387451 -446.32330322]
[424.08624268 -431.63449097]
[426.46685791 -416.82196045]
[428.17083740 -401.91644287]
[429.19461060 -386.94879150]
[429.53610229 -371.95007324]
[429.19454956 -356.95135498]
[428.17071533 -341.98373413]
[426.46667480 -327.07821655]
[424.08599854 -312.26568604]
[421.03359985 -297.57687378]
[417.31579590 -283.04223633]
[412.94030762 -268.69183350]
[407.91619873 -254.55548096]
[402.25390625 -240.66244507]
[395.96511841 -227.04151917]
[389.06292725 -213.72093201]
[381.56158447 -200.72831726]
[373.47665405 -188.09057617]
[364.82492065 -175.83392334]
[355.62426758 -163.98374939]
[345.89382935 -152.56462097]
[335.65371704 -141.60020447]
[324.92517090 -131.11323547]
[313.73043823 -121.12542725]
[302.09271240 -111.65749359]
[290.03613281 -102.72906494]
[277.58566284 -94.35863495]
[264.76708984 -86.56356049]
[251.60705566 -79.36000061]
[238.13276672 -72.76287842]
[224.37219238 -66.78586578]
[210.35382080 -61.44136429]
[196.10673523 -56.74043655]
[181.66044617 -52.69283295]
[167.04490662 -49.30694199]
[152.29040527 -46.58978271]
[137.42752075 -44.54698181]
[122.48706818 -43.18278122]
[107.50000000 -42.50000000]
[107.50000000 -27.50000000]
[107.50000000 -12.50000000]
[107.50000000 2.49999952]
[107.50000000 17.50000000]
[107.50000000 32.50000000]
[107.50000000 47.50000000]
[107.50000000 62.50000000]
[107.50000000 77.50000000]
[107.50000000 92.50000000]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 156]
[2 155]
[3 154]
[4 153]
[5 152]
[6 151]
[7 150]
[8 149]
[9 148]
[10 147]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
