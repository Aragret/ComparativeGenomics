%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:44 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCCAACACACUAACCAUAUACCAAUGAUGGCGCGAUGUAACACGAGAAAGCACAUACCAAGxxxxxxxxxxCCUAACCAACAAACUUAAAAUAAAAUCCCCACUAUGCACAUUUUAUUUCUCCAACAUACUCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[104.48566437 280.84313965]
[104.17360687 265.84637451]
[103.86154938 250.84963989]
[103.54949188 235.85287476]
[103.23743439 220.85612488]
[102.92537689 205.85937500]
[102.61332703 190.86262512]
[102.30126953 175.86585999]
[101.98921204 160.86911011]
[88.89605713 153.55000305]
[75.95800018 161.13992310]
[63.01994324 168.72982788]
[50.08189011 176.31973267]
[42.09375381 189.97624207]
[27.20098495 189.74246216]
[14.26292896 197.33236694]
[17.28957176 212.16874695]
[15.33238411 227.18367004]
[8.60366821 240.74844360]
[-2.16669536 251.39166260]
[-15.81041908 257.95883179]
[-30.84753227 259.73754883]
[-45.64692307 256.53494263]
[-58.60326385 248.69836426]
[-68.31114960 237.07788086]
[-73.71753693 222.93399048]
[-74.23598480 207.80091858]
[-69.81024933 193.32017517]
[-60.92041397 181.06254578]
[-48.53077316 172.35763550]
[-33.98526001 168.14968872]
[-18.86166954 168.89514160]
[-4.80049229 174.51315308]
[6.67302036 184.39430237]
[19.61107635 176.80439758]
[26.67379379 163.69076538]
[42.49198151 163.38168335]
[55.43003464 155.79176331]
[68.36809540 148.20185852]
[81.30614471 140.61195374]
[65.21762848 118.06930542]
[66.86740112 93.93110657]
[53.08502197 88.01114655]
[39.81960297 96.06150055]
[24.35859299 94.74361420]
[12.64706898 84.56423187]
[9.18835068 69.43753815]
[15.31238461 55.18004990]
[28.66435623 47.27407455]
[44.11015701 48.75960922]
[55.71056366 59.06544113]
[59.00498581 74.22876740]
[72.78736877 80.14872742]
[77.01152802 75.38027954]
[82.05793762 71.49240875]
[87.74607849 68.62418365]
[93.87251282 66.87818909]
[94.49649048 51.89117432]
[95.12046814 36.90415573]
[80.43071747 33.68197632]
[66.52374268 27.95772552]
[53.82214737 19.90535736]
[42.71192551 9.76957321]
[33.53070450 -2.14161015]
[26.55749130 -15.46622658]
[22.00419044 -29.79935455]
[20.00917625 -44.70542908]
[20.63306999 -59.73146820]
[23.85691643 -74.42085266]
[29.58274460 -88.32717896]
[37.63655472 -101.02786255]
[47.77359772 -112.13693237]
[59.68582153 -121.31680298]
[73.01123047 -128.28851318]
[87.34487152 -132.84017944]
[102.25117493 -134.83351135]
[117.27714539 -134.20790100]
[131.96615601 -130.98239136]
[145.87184143 -125.25498962]
[158.57160950 -117.19973755]
[169.67953491 -107.06143951]
[178.85804749 -95.14817047]
[185.82824707 -81.82197571]
[190.37829590 -67.48780823]
[192.36991882 -52.58128738]
[191.74261475 -37.55538940]
[188.51544189 -22.86673737]
[182.78645325 -8.96170616]
[174.72976685 3.73714662]
[164.59020996 14.84391880]
[152.67590332 24.02108765]
[139.34890747 30.98976707]
[125.01423645 35.53819275]
[110.10748291 37.52813339]
[109.48350525 52.51515198]
[108.85952759 67.50216675]
[136.56066895 85.87091827]
[137.70954895 124.01625061]
[152.70874023 123.86021423]
[167.70793152 123.70417786]
[182.70712280 123.54814148]
[197.70631409 123.39210510]
[212.70549011 123.23606873]
[227.70468140 123.08003235]
[242.70387268 122.92399597]
[257.70306396 122.76795959]
[263.71340942 108.77526093]
[274.89990234 98.44169617]
[289.32437134 93.55760956]
[304.48773193 94.96920776]
[317.76281738 102.43191528]
[326.84963989 114.65277863]
[330.17385864 129.51445007]
[327.15951538 144.44206238]
[318.32891846 156.84931946]
[305.21194458 164.58659363]
[290.08123779 166.31333923]
[275.55828857 161.73039246]
[264.15924072 151.63177490]
[257.85910034 137.76715088]
[242.85990906 137.92318726]
[227.86071777 138.07922363]
[212.86152649 138.23526001]
[197.86235046 138.39129639]
[182.86315918 138.54733276]
[167.86396790 138.70336914]
[152.86477661 138.85940552]
[137.86558533 139.01544189]
[132.64567566 144.40084839]
[145.88351440 151.45491028]
[159.12135315 158.50895691]
[173.40136719 163.10038757]
[181.66210938 175.62078857]
[180.26519775 190.55558777]
[169.82588196 201.32688904]
[154.94209290 203.19050598]
[142.16932678 195.32563782]
[137.13323975 181.19421387]
[129.66955566 168.18293762]
[122.20587158 155.17164612]
[116.98596191 160.55705261]
[117.29801941 175.55381775]
[117.61007690 190.55056763]
[117.92213440 205.54731750]
[118.23419189 220.54406738]
[118.54624939 235.54083252]
[118.85829926 250.53758240]
[119.17035675 265.53433228]
[119.48241425 280.53109741]
[122.07341003 299.73880005]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 149]
[2 148]
[3 147]
[4 146]
[5 145]
[6 144]
[7 143]
[8 142]
[9 141]
[10 40]
[11 39]
[12 38]
[13 37]
[15 35]
[16 34]
[42 53]
[43 52]
[57 96]
[58 95]
[59 94]
[98 128]
[99 127]
[100 126]
[101 125]
[102 124]
[103 123]
[104 122]
[105 121]
[106 120]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
