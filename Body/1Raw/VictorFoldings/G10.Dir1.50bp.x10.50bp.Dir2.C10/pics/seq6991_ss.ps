%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:39 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGACUGGCAUUGUAUUAGCAAACUCAUCACUAGACAUCGUACUACACGACACGUACUACGUUGxxxxxxxxxxAUUUCACUUUACAUCCAAACAUCACUUUGGCUUCGAAGCCGCCGCCUGAUACUGGCAUUUUCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[118.30955505 347.36187744]
[118.30955505 332.36187744]
[118.30955505 317.36187744]
[118.30955505 302.36187744]
[118.30955505 287.36187744]
[118.30955505 272.36187744]
[118.30955505 257.36187744]
[118.30955505 242.36187744]
[118.30955505 227.36187744]
[118.30955505 212.36187744]
[116.61915588 197.45742798]
[113.10998535 182.87367249]
[102.50202179 172.41804504]
[106.63957977 157.14744568]
[102.98087311 142.60047913]
[99.32216644 128.05352783]
[81.93631744 121.47471619]
[72.47706604 105.47249603]
[75.09526062 87.06887054]
[64.11446381 76.85015869]
[53.13365936 66.63145447]
[42.15285492 56.41274643]
[29.21852493 56.08603287]
[20.27842140 47.29706573]
[19.76622772 35.17271805]
[8.99754906 24.73070717]
[-8.93784904 20.68692780]
[-13.13987255 3.67553282]
[-24.12067413 -6.54317427]
[-35.10147858 -16.76188087]
[-47.20784378 -8.64852428]
[-60.81394958 -3.44802761]
[-75.23059845 -1.42020857]
[-89.72836304 -2.66427183]
[-103.57444763 -7.11395884]
[-116.06975555 -14.54106998]
[-126.58419037 -24.56716347]
[-134.58840942 -36.68283463]
[-139.68051147 -50.27360916]
[-141.60614014 -64.65109253]
[-140.27127075 -79.08784485]
[-135.74674988 -92.85418701]
[-128.26455688 -105.25507355]
[-139.03323364 -115.69708252]
[-179.64167786 -96.88193512]
[-192.63206482 -104.38193512]
[-205.62243652 -111.88193512]
[-218.61282349 -119.38193512]
[-234.41900635 -116.63527679]
[-246.32533264 -127.38790131]
[-245.19828796 -143.39131165]
[-231.90245056 -152.36906433]
[-216.63723755 -147.43420410]
[-211.11282349 -132.37231445]
[-198.12243652 -124.87231445]
[-185.13206482 -117.37231445]
[-172.14167786 -109.87231445]
[-161.48030090 -120.42480469]
[-150.81985474 -130.97634888]
[-158.18609619 -144.04304504]
[-165.55233765 -157.10974121]
[-172.91857910 -170.17643738]
[-185.96394348 -181.00485229]
[-179.17001343 -196.53800964]
[-162.36315918 -194.30960083]
[-159.85188293 -177.54266357]
[-152.48564148 -164.47598267]
[-145.11940002 -151.40928650]
[-137.75315857 -138.34259033]
[-128.59123230 -126.46575928]
[-117.82254791 -116.02375031]
[-104.76876831 -124.31804657]
[-90.10585022 -129.26423645]
[-74.67788696 -130.57321167]
[-59.37403870 -128.16535950]
[-45.07733154 -122.17539978]
[-32.61366653 -112.94487762]
[-22.70413208 -101.00264740]
[-15.92327118 -87.03460693]
[-12.66578293 -71.84429932]
[-13.12354374 -56.30666733]
[-17.27431297 -41.31768799]
[-24.88277054 -27.74268341]
[-13.90196705 -17.52397728]
[-2.92116499 -7.30526972]
[9.21349525 -7.41586018]
[18.44960403 1.06149960]
[19.43955803 13.96202946]
[30.20823669 24.40403748]
[47.41283035 27.72766113]
[52.37156296 45.43194199]
[63.35236359 55.65065002]
[74.33316803 65.86935425]
[85.31397247 76.08806610]
[101.01451874 65.70110321]
[123.23614502 66.74811554]
[136.66358948 60.06204224]
[150.09104919 53.37596893]
[163.51849365 46.68989182]
[176.94593811 40.00381851]
[181.73013306 24.94104767]
[195.80229187 17.74728966]
[210.81362915 22.69046974]
[217.85821533 36.83789062]
[212.75660706 51.79613495]
[198.53549194 58.69074249]
[183.63201904 53.43126678]
[170.20457458 60.11734009]
[156.77711487 66.80342102]
[143.34967041 73.48949432]
[129.92222595 80.17556763]
[131.07266235 87.58680725]
[145.05975342 93.00540924]
[133.37353516 102.40929413]
[134.52397156 109.82053375]
[149.34645081 112.12140656]
[164.43441772 105.69602966]
[177.37857056 115.76484680]
[174.86306763 131.96990967]
[159.47566223 137.64085388]
[147.04557800 126.94388580]
[132.22309875 124.64301300]
[125.70796967 125.76647949]
[119.52067566 125.64577484]
[113.86912537 124.39482880]
[117.52783203 138.94178772]
[121.18653107 153.48873901]
[132.05619812 164.98486328]
[127.65694427 179.21496582]
[132.81507874 186.83004761]
[131.23815918 194.09815979]
[137.31161499 180.38272095]
[148.98399353 170.96171570]
[163.67233276 167.91989136]
[178.12625122 171.93038940]
[189.14726257 182.10572815]
[194.29650879 196.19419861]
[192.43453979 211.07818604]
[183.97337341 223.46401978]
[170.78538513 230.61082458]
[155.78894043 230.93710327]
[142.30258179 224.37066650]
[133.30955505 212.36187744]
[133.30955505 227.36187744]
[133.30955505 242.36187744]
[133.30955505 257.36187744]
[133.30955505 272.36187744]
[133.30955505 287.36187744]
[133.30955505 302.36187744]
[133.30955505 317.36187744]
[133.30955505 332.36187744]
[133.30955505 347.36187744]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 152]
[2 151]
[3 150]
[4 149]
[5 148]
[6 147]
[7 146]
[8 145]
[9 144]
[10 143]
[11 131]
[12 129]
[14 127]
[15 126]
[16 125]
[19 94]
[20 93]
[21 92]
[22 91]
[25 89]
[26 88]
[28 85]
[29 84]
[30 83]
[43 71]
[44 70]
[45 57]
[46 56]
[47 55]
[48 54]
[59 69]
[60 68]
[61 67]
[62 66]
[96 111]
[97 110]
[98 109]
[99 108]
[100 107]
[115 122]
[116 121]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
