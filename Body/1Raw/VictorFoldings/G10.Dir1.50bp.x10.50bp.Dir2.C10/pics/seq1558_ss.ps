%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:32 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGACCUCACCACCUCUUGCUCAGCCUAUAUACCGCCAUCUUCAGCAAACCCUGAUGAAGGCUAxxxxxxxxxxCCUAACCCCUGUCUUUAGAUUUACAGUCCAAUGCUUCACUCAGCCAUUUUACCUCACCCCCCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[92.50000000 253.66113281]
[92.50000000 238.66113281]
[92.50000000 223.66113281]
[92.50000000 208.66113281]
[92.50000000 193.66113281]
[92.50000000 178.66113281]
[92.50000000 163.66113281]
[92.50000000 148.66113281]
[92.50000000 133.66113281]
[92.50000000 118.66113281]
[85.30861664 131.82487488]
[78.11723328 144.98861694]
[75.18095398 159.69841003]
[65.71950531 171.33804321]
[51.91969299 177.21725464]
[36.97103882 175.97720337]
[24.32859612 167.90451050]
[16.91438293 154.86497498]
[16.44203568 139.87240601]
[23.02072334 126.39202118]
[35.12992859 117.53949738]
[49.97285843 115.36110687]
[63.48825455 108.85463715]
[77.00364685 102.34816742]
[62.02340317 101.57850647]
[47.04316330 100.80884552]
[32.06292343 100.03918457]
[17.08268166 99.26952362]
[0.92062449 108.03414154]
[-13.44214535 97.99644470]
[-28.43503189 97.53452301]
[-34.32408142 111.52321625]
[-44.87157059 122.43719482]
[-58.65103531 128.80043030]
[-73.79891205 129.75234985]
[-88.26658630 125.16422272]
[-100.09741211 115.65654755]
[-107.69137573 102.51515198]
[-110.02144623 87.51731110]
[-106.77251434 72.69136047]
[-98.38395691 60.04238510]
[-85.99027252 51.28105164]
[-71.26759338 47.59226608]
[-56.20704269 49.47490311]
[-42.84543991 56.67434692]
[-32.98983002 68.21694183]
[-27.97310638 82.54163361]
[-12.98021984 83.00356293]
[-3.91944957 74.93109894]
[8.61376286 75.23101044]
[17.85234261 84.28928375]
[32.83258438 85.05894470]
[47.81282425 85.82860565]
[62.79306412 86.59826660]
[77.77330780 87.36792755]
[85.01894379 83.77631378]
[92.12474823 83.14987183]
[98.05816650 85.00854492]
[102.07798004 88.55333710]
[110.74459076 76.31037903]
[119.41119385 64.06742859]
[128.07780457 51.82447052]
[136.61825562 39.49318695]
[145.03167725 27.07487488]
[153.44508362 14.65655994]
[161.85848999 2.23824549]
[170.27189636 -10.18006897]
[159.59416199 -20.77356339]
[151.04716492 -33.14550400]
[144.92076111 -46.87370682]
[141.42228699 -61.49003601]
[140.66944885 -76.49636078]
[142.68641663 -91.38153839]
[147.40306091 -105.63882446]
[154.65734863 -118.78311920]
[164.20094299 -130.36747742]
[175.70767212 -139.99830627]
[188.78472900 -147.34872437]
[202.98602295 -152.16967773]
[217.82743835 -154.29838562]
[232.80329895 -153.66377258]
[247.40365601 -150.28894043]
[261.13156128 -144.29025269]
[269.54498291 -156.70855713]
[277.95840454 -169.12687683]
[286.37179565 -181.54519653]
[280.21102905 -195.68904114]
[282.69754028 -210.91470337]
[293.03793335 -222.36372375]
[307.93258667 -226.38276672]
[322.62869263 -221.68936157]
[332.43676758 -209.78117371]
[334.22711182 -194.45803833]
[327.42840576 -180.60954285]
[314.21011353 -172.65466309]
[298.79013062 -173.13177490]
[290.37670898 -160.71347046]
[281.96328735 -148.29515076]
[273.54989624 -135.87683105]
[284.21121216 -125.35180664]
[292.75921631 -113.04362488]
[298.90158081 -99.37063599]
[302.42776489 -84.79788971]
[303.21624756 -69.82135010]
[301.23873901 -54.95099258]
[296.56109619 -40.69345474]
[289.34124756 -27.53475380]
[279.82382202 -15.92374229]
[268.33178711 -6.25678587]
[255.25558472 1.13576829]
[241.03984070 6.00087643]
[226.16822815 8.17146111]
[211.14700317 7.57214832]
[196.48780823 4.22188473]
[182.69021606 -1.76665866]
[174.27680969 10.65165520]
[165.86340332 23.06996918]
[157.44998169 35.48828506]
[149.03657532 47.90659714]
[147.88145447 55.25356293]
[140.32075500 60.49108124]
[131.65414429 72.73403168]
[122.98754120 84.97698975]
[114.32093811 97.21994019]
[123.89360046 85.67160034]
[136.50360107 77.54830170]
[150.97644043 73.60664368]
[165.96415710 74.21373749]
[180.07078552 79.31304932]
[191.98245239 88.42963409]
[200.58972168 100.71437073]
[205.09092712 115.02308655]
[205.06680298 130.02307129]
[200.51963806 144.31723022]
[191.87290955 156.57423401]
[179.93199158 165.65248108]
[165.80903625 170.70640564]
[150.81945801 171.26531982]
[136.35934448 167.27714539]
[123.77553558 159.11334229]
[114.24005127 147.53428650]
[108.64102173 133.61843872]
[107.50000000 118.66113281]
[107.50000000 133.66113281]
[107.50000000 148.66113281]
[107.50000000 163.66113281]
[107.50000000 178.66113281]
[107.50000000 193.66113281]
[107.50000000 208.66113281]
[107.50000000 223.66113281]
[107.50000000 238.66113281]
[107.50000000 253.66113281]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 152]
[2 151]
[3 150]
[4 149]
[5 148]
[6 147]
[7 146]
[8 145]
[9 144]
[10 143]
[24 55]
[25 54]
[26 53]
[27 52]
[28 51]
[30 48]
[31 47]
[59 124]
[60 123]
[61 122]
[62 121]
[63 119]
[64 118]
[65 117]
[66 116]
[67 115]
[83 99]
[84 98]
[85 97]
[86 96]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
