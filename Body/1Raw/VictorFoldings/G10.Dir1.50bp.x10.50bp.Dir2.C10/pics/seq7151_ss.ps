%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:24 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCAUUUCACUAUCAUAUUCAUCGGCGUAAAUCUAACUUUCUUCCCACAACACUUUCUCGGCxxxxxxxxxxAUUCUUUAUCUGCCUCUUCCUACACAUCGGGCGAGGCCUAUAUUACGGAUCAUUUCUCUACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[77.38118744 463.33145142]
[77.38118744 448.33145142]
[77.38118744 433.33145142]
[77.38118744 418.33145142]
[77.38118744 403.33145142]
[77.38118744 388.33145142]
[77.38118744 373.33145142]
[77.38118744 358.33145142]
[77.38118744 343.33145142]
[77.38118744 328.33145142]
[62.40512085 324.08395386]
[49.21314621 315.79257202]
[38.87213898 304.11822510]
[32.22108841 289.99578857]
[29.80306435 274.55932617]
[31.82086945 259.05081177]
[38.12005234 244.72048950]
[48.20071030 232.72579956]
[61.25713730 224.03808594]
[76.24223328 219.36389160]
[75.93018341 204.36712646]
[75.61812592 189.37037659]
[66.85345459 201.54331970]
[53.49361038 208.36347961]
[38.49366760 208.32229614]
[25.17147446 201.42889404]
[16.47377586 189.20800781]
[14.32442284 174.36279297]
[19.19883347 160.17687988]
[30.01883316 149.78805542]
[44.39113617 145.49424744]
[59.13672256 148.24517822]
[70.99400330 157.43238831]
[77.34065247 171.02569580]
[80.43898010 156.34916687]
[83.53730011 141.67263794]
[86.63562012 126.99611664]
[89.73394012 112.31958771]
[87.71160889 97.45654297]
[80.80461121 84.14138794]
[66.69630432 89.29737091]
[52.04449081 92.60683441]
[37.08975220 94.01544189]
[22.07766724 93.50006104]
[7.25474548 91.06916046]
[-7.13560772 86.76264954]
[-20.85709000 80.65124512]
[-33.68437958 72.83530426]
[-45.40684509 63.44316864]
[-55.83198929 52.62907028]
[-64.78862000 40.57058716]
[-72.12966919 27.46572685]
[-77.73458862 13.52968597]
[-81.51132965 -1.00869572]
[-83.39788818 -15.91068363]
[-83.36327362 -30.93157387]
[-81.40806580 -45.82470703]
[-77.56436157 -60.34553146]
[-71.89527893 -74.25559235]
[-64.49391937 -87.32648468]
[-55.48180771 -99.34355927]
[-45.00693512 -110.10949707]
[-33.24131393 -119.44750977]
[-20.37813759 -127.20425415]
[-6.62863779 -133.25236511]
[7.78140879 -137.49250793]
[22.61537743 -139.85507202]
[37.62967682 -140.30126953]
[52.57776260 -138.82376099]
[67.21417236 -135.44680786]
[81.29856873 -130.22586060]
[94.59965515 -123.24665833]
[106.89904022 -114.62380219]
[117.99473572 -104.49889374]
[127.70455170 -93.03819275]
[135.86904907 -80.42987823]
[142.35414124 -66.88101196]
[147.05335999 -52.61406708]
[149.88951111 -37.86331940]
[150.81605530 -22.87099457]
[149.81774902 -7.88327503]
[146.91101074 6.85372448]
[142.14353943 21.09800911]
[135.59365845 34.61567688]
[127.36890411 47.18475342]
[117.60433197 58.59884262]
[106.46028137 68.67051697]
[94.11976624 77.23439026]
[101.02676392 90.54954529]
[104.06651306 87.35684967]
[108.38809967 85.14919281]
[113.69043732 84.29966736]
[127.70714569 78.95815277]
[141.72386169 73.61663818]
[155.74057007 68.27513123]
[169.75727844 62.93361664]
[175.76185608 51.47067261]
[187.59710693 47.32994461]
[198.70268250 52.22623062]
[212.82748413 47.17747498]
[216.21295166 32.12615967]
[227.21438599 21.31079674]
[242.32125854 18.18252754]
[256.71301270 23.73957443]
[265.79730225 36.20870209]
[266.67538452 51.61105728]
[259.06701660 65.03180695]
[245.40003967 72.18843079]
[230.03553772 70.79728699]
[217.87623596 61.30227661]
[203.75143433 66.35103607]
[193.17195129 80.31793976]
[175.09880066 76.95033264]
[161.08209229 82.29183960]
[147.06536865 87.63335419]
[133.04866028 92.97486877]
[119.03194427 98.31638336]
[133.72749329 101.32319641]
[141.41931152 114.20092773]
[137.09959412 128.56547546]
[123.58073425 135.06472778]
[109.66423035 129.46731567]
[104.41046906 115.41790771]
[101.31214905 130.09443665]
[98.21382141 144.77096558]
[95.11550140 159.44749451]
[92.01718140 174.12400818]
[90.61487579 189.05831909]
[90.92693329 204.05506897]
[91.23899078 219.05183411]
[105.27647400 222.63101196]
[117.89259338 229.72628784]
[128.22505188 239.84547424]
[135.56951904 252.28994751]
[139.42765808 266.20288086]
[139.54089355 280.62826538]
[135.90777588 294.57650757]
[128.78363037 307.09249878]
[118.66260529 317.32077026]
[106.24343872 324.56423950]
[92.38118744 328.33145142]
[92.38118744 343.33145142]
[92.38118744 358.33145142]
[92.38118744 373.33145142]
[92.38118744 388.33145142]
[92.38118744 403.33145142]
[92.38118744 418.33145142]
[92.38118744 433.33145142]
[92.38118744 448.33145142]
[92.38118744 463.33145142]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[20 130]
[21 129]
[22 128]
[34 127]
[35 126]
[36 125]
[37 124]
[38 123]
[39 89]
[40 88]
[92 117]
[93 116]
[94 115]
[95 114]
[96 113]
[99 111]
[100 110]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
