%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:11 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGAACUUUAAAUUUGCCCACAGAACCCUCUAAAUCCCCUUGUAAAUUUAACUGUUAGUCCAAxxxxxxxxxxCACUUUCCUAGGACUUCUAACAGCCCUAGACCUCAACUACCUAACCAACAAACUUAAAAUCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[141.95695496 283.81121826]
[141.33297729 268.82418823]
[140.70899963 253.83717346]
[140.08502197 238.85015869]
[139.46104431 223.86314392]
[138.83706665 208.87612915]
[138.21308899 193.88911438]
[137.58911133 178.90209961]
[132.68756104 164.72554016]
[123.92135620 152.55369568]
[111.99842072 150.28411865]
[104.60228729 140.15908813]
[106.16204834 127.31303406]
[97.65095520 114.96146393]
[84.19499207 108.33296967]
[69.21527100 109.11280823]
[54.23556137 109.89265442]
[39.25584412 110.67250061]
[24.27613258 111.45234680]
[9.29641724 112.23219299]
[-5.68329716 113.01203918]
[-20.66301155 113.79188538]
[-24.33319473 116.37862396]
[-28.24439049 117.50716400]
[-31.89582443 117.28601837]
[-34.87670898 115.97899628]
[-36.91008759 113.96089935]
[-51.90278244 113.49285889]
[-66.89547729 113.02481842]
[-71.99975586 127.26565552]
[-81.25648499 139.23095703]
[-93.75877380 147.74845886]
[-108.28177643 151.98373413]
[-123.40268707 151.52182007]
[-137.64010620 146.40800476]
[-149.59918213 137.14326477]
[-158.10832214 124.63526917]
[-162.33384705 110.10942841]
[-161.86181641 94.98883820]
[-156.73846436 80.75485229]
[-147.46571350 68.80197144]
[-134.95201111 60.30122757]
[-120.42334747 56.08542633]
[-105.30307770 56.56759262]
[-91.07252502 61.70048904]
[-79.12586212 70.98124695]
[-70.63349915 83.50063324]
[-66.42743683 98.03211975]
[-51.43474197 98.50016022]
[-36.44204330 98.96820831]
[-21.44285583 98.81217194]
[-6.46314192 98.03232574]
[8.51657200 97.25247955]
[23.49628639 96.47263336]
[38.47600174 95.69278717]
[53.45571518 94.91294098]
[68.43543243 94.13309479]
[83.41514587 93.35324860]
[94.91694641 83.72472382]
[98.31992340 69.11583710]
[101.72290039 54.50694275]
[105.12588501 39.89804840]
[108.52886200 25.28915596]
[111.47434235 10.58119488]
[113.95945740 -4.21151257]
[116.44458008 -19.00421906]
[118.92969513 -33.79692841]
[121.41481781 -48.58963394]
[107.68442535 -54.84573746]
[96.04170227 -64.44309998]
[87.28047180 -76.72737122]
[81.99807739 -90.86097717]
[80.55469513 -105.88026428]
[83.04872894 -120.76119995]
[89.31013489 -134.48916626]
[98.91199493 -146.12818909]
[111.19963837 -154.88467407]
[125.33528137 -160.16160583]
[140.35513306 -161.59919739]
[155.23509216 -159.09941101]
[168.96064758 -152.83271790]
[180.59596252 -143.22636414]
[189.34770203 -130.93533325]
[194.61918640 -116.79765320]
[196.05096436 -101.77725220]
[193.54544067 -86.89824677]
[187.27343750 -73.17510986]
[177.66259766 -61.54351807]
[165.36819458 -52.79651642]
[151.22846985 -47.53050232]
[136.20751953 -46.10451508]
[133.72241211 -31.31180763]
[131.23728943 -16.51910210]
[128.75216675 -1.72639418]
[126.26705170 13.06631279]
[128.05862427 16.17400169]
[128.39582825 20.31984138]
[126.80028534 24.79271889]
[123.13774872 28.69213486]
[119.73477173 43.30102539]
[116.33179474 57.90991974]
[112.92881775 72.51881409]
[109.52584076 87.12770081]
[112.25337219 91.02049255]
[113.58846283 95.32860565]
[113.54064941 99.59602356]
[112.25835419 103.41199493]
[110.00252533 106.45037842]
[118.51361847 118.80194855]
[135.30654907 126.28374481]
[136.09318542 143.78749084]
[144.85939026 155.95933533]
[143.84053040 140.99397278]
[145.89649963 126.13554382]
[150.94081116 112.00914764]
[158.76124573 99.20912170]
[169.02877808 88.27396393]
[181.31146240 79.66374969]
[195.09251404 73.74070740]
[209.79217529 70.75403595]
[224.79199219 70.82939148]
[239.46089172 73.96360779]
[253.18174744 80.02481079]
[265.37728882 88.75800323]
[275.53445435 99.79576111]
[283.22589111 112.67372131]
[288.12799072 126.85008240]
[290.03457642 141.72842407]
[288.86538696 156.68278503]
[284.66964722 171.08401489]
[277.62384033 184.32624817]
[268.02441406 195.85235596]
[256.27523804 205.17739868]
[242.87057495 211.90908813]
[228.37443542 215.76419067]
[213.39666748 216.58052063]
[198.56741333 214.32373047]
[184.51054382 209.08877563]
[171.81747437 201.09590149]
[161.02223206 190.68138123]
[152.57612610 178.27812195]
[153.20010376 193.26513672]
[153.82408142 208.25215149]
[154.44805908 223.23916626]
[155.07203674 238.22618103]
[155.69601440 253.21319580]
[156.31999207 268.20022583]
[156.94396973 283.18722534]
[163.64395142 298.76113892]
[150.53343201 309.51055908]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 148]
[2 147]
[3 146]
[4 145]
[5 144]
[6 143]
[7 142]
[8 141]
[9 112]
[10 111]
[13 109]
[14 108]
[15 58]
[16 57]
[17 56]
[18 55]
[19 54]
[20 53]
[21 52]
[22 51]
[27 50]
[28 49]
[29 48]
[59 103]
[60 102]
[61 101]
[62 100]
[63 99]
[64 95]
[65 94]
[66 93]
[67 92]
[68 91]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
