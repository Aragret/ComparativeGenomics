%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:45 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCCCAAGGCACCCCUCUGACAUCCGGCCUGCUUCUUCUCACAUGACAAAAACUAGCCCCCAUCUCxxxxxxxxxxGAUUAUAGGCUUUCGCUCUAAGAUUAAAAAUGCCCUAGCCCACUUCUUACCACAAGGCACACCUCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[171.08174133 94.73120117]
[156.34521484 97.53027344]
[141.60868835 100.32934570]
[126.87216187 103.12841797]
[112.13563538 105.92749786]
[99.69454956 114.30719757]
[91.56228638 126.91141510]
[83.43002319 139.51562500]
[75.29776001 152.11984253]
[67.29040527 164.80378723]
[59.40875244 177.56620789]
[51.52709579 190.32864380]
[48.34892273 206.98202515]
[31.46654510 208.53817749]
[25.29770279 192.74635315]
[38.76467133 182.44697571]
[46.64632416 169.68455505]
[54.52798080 156.92213440]
[55.37136841 149.53933716]
[62.69354248 143.98757935]
[70.82580566 131.38336182]
[78.95806885 118.77914429]
[87.09033966 106.17493439]
[83.66561890 99.50250244]
[76.81617737 86.15764618]
[73.39145660 79.48522186]
[58.40975571 78.74457550]
[44.24438095 85.79104614]
[31.91466904 77.43476105]
[16.93296432 76.69411469]
[1.95126081 75.95347595]
[-3.19714379 90.16563416]
[-12.30725384 102.22785950]
[-24.56900406 111.06758881]
[-38.89208984 115.89881134]
[-54.00290680 116.29192352]
[-68.55782318 112.21197510]
[-81.26261139 104.02175140]
[-90.98757935 92.44952393]
[-96.86798096 78.52428436]
[-98.38094330 63.48426437]
[-95.39193726 48.66679764]
[-88.16673279 35.38945389]
[-77.34780121 24.83284378]
[-63.89714432 17.93564987]
[-49.01079178 15.31117058]
[-34.01242447 17.19277000]
[-20.23568916 23.41313934]
[-8.90560436 33.41916656]
[-1.02963233 46.32112122]
[2.69190121 60.97177505]
[17.67360497 61.71241379]
[32.65530777 62.45305252]
[45.74909592 55.35361481]
[59.15039825 63.76287460]
[74.13210297 64.50351715]
[76.72710419 49.72968674]
[86.22023010 38.11587906]
[100.18251038 32.63366318]
[115.04148102 34.68575287]
[126.99523163 43.74708939]
[132.98521423 57.49918747]
[131.47877502 72.42334747]
[122.86139679 84.70099640]
[109.33656311 91.19097137]
[124.07308960 88.39189911]
[138.80961609 85.59281921]
[153.54614258 82.79374695]
[168.28266907 79.99467468]
[166.65461731 61.19836807]
[167.14529419 42.33896637]
[169.74830627 23.65452576]
[174.43060303 5.38087654]
[181.13287354 -12.25136280]
[189.77033997 -29.01968765]
[200.23377991 -44.71252441]
[212.39094543 -59.13188934]
[226.08824158 -72.09589386]
[241.15258789 -83.44104004]
[257.39373779 -93.02427673]
[274.60656738 -100.72480774]
[292.57373047 -106.44561005]
[311.06829834 -110.11466217]
[329.85687256 -111.68585205]
[348.70217896 -111.13953400]
[367.36639404 -108.48281097]
[385.61389160 -103.74942017]
[403.21444702 -96.99930573]
[419.94589233 -88.31786346]
[435.59716797 -77.81486511]
[445.16308594 -89.36878204]
[454.72903442 -100.92269897]
[464.18032837 -112.57055664]
[473.51611328 -124.31121826]
[475.40093994 -140.60169983]
[490.55670166 -146.86543274]
[503.39248657 -136.65882874]
[500.70391846 -120.48157501]
[485.25677490 -114.97543335]
[475.92098999 -103.23477173]
[474.21035767 -96.00354767]
[466.28292847 -91.35677338]
[456.71701050 -79.80285645]
[447.15109253 -68.24893188]
[455.17880249 -60.47114944]
[462.67074585 -52.17605591]
[469.59368896 -43.40047455]
[475.91687012 -34.18336105]
[481.61227417 -24.56564140]
[486.65454102 -14.59000587]
[491.02136230 -4.30074024]
[494.69326782 6.25647736]
[497.65405273 17.03478050]
[499.89050293 27.98632050]
[501.39270020 39.06247711]
[502.15402222 50.21408844]
[517.15325928 50.36227417]
[531.16198730 41.83654785]
[545.41802979 49.94190979]
[545.25604248 66.34025574]
[530.84265137 74.16237640]
[517.00512695 65.36154175]
[502.00582886 65.21335602]
[500.80636597 78.09757996]
[498.61740112 90.85137177]
[495.45181274 103.39884186]
[491.32846069 115.66533661]
[486.27178955 127.57785797]
[480.31182861 139.06550598]
[473.48403931 150.05992126]
[465.82891846 160.49565125]
[457.39202881 170.31057739]
[448.22348022 179.44628906]
[438.37780762 187.84838867]
[427.91357422 195.46684265]
[416.89294434 202.25627136]
[405.38153076 208.17626953]
[393.44772339 213.19152832]
[381.16253662 217.27218628]
[368.59902954 220.39390564]
[355.83197021 222.53807068]
[342.93725586 223.69186401]
[329.99163818 223.84837341]
[317.07211304 223.00659180]
[304.25555420 221.17150879]
[291.61822510 218.35395813]
[279.23532104 214.57066345]
[267.18051147 209.84408569]
[255.52554321 204.20230103]
[244.33978271 197.67880249]
[233.68981934 190.31236267]
[223.63903809 182.14677429]
[214.24726868 173.23057556]
[205.57040405 163.61677551]
[197.66014099 153.36250305]
[190.56355286 142.52877808]
[184.32292175 131.17999268]
[178.97541809 119.38365936]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 69]
[2 68]
[3 67]
[4 66]
[5 65]
[6 23]
[7 22]
[8 21]
[9 20]
[10 18]
[11 17]
[12 16]
[26 56]
[27 55]
[29 53]
[30 52]
[31 51]
[90 104]
[91 103]
[92 102]
[93 100]
[94 99]
[116 123]
[117 122]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
