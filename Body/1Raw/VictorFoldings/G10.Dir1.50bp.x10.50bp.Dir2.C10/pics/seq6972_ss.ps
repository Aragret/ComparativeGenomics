%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:38 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGUCUGAGCCCUAGGAUUCAUCUUUCUUUUCACCGUAGGUGGCCUGACUGGCAUUGUAUUAGxxxxxxxxxxCCAAACUCUAACACUAUGCUUAGGCGCUAUCACCACUCUGUUCGCAGCAGUCUGCGCCCUCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[147.95739746 364.45202637]
[147.95739746 349.45202637]
[147.95739746 334.45202637]
[147.95739746 319.45202637]
[147.95739746 304.45202637]
[147.95739746 289.45202637]
[147.95739746 274.45202637]
[147.95739746 259.45202637]
[147.95739746 244.45202637]
[147.95739746 229.45202637]
[125.16157532 212.34542847]
[120.26438904 186.60980225]
[132.81115723 166.27149963]
[125.08707428 153.41308594]
[117.36299133 140.55468750]
[109.37307739 127.85976410]
[101.12078857 115.33380127]
[87.21823120 109.70184326]
[72.57472992 112.95266724]
[57.93122864 116.20349121]
[43.28772736 119.45431519]
[28.67883492 122.85729980]
[14.10613155 126.41205597]
[12.74469185 141.49267578]
[6.55807161 155.31312561]
[-3.78265142 166.37422180]
[-17.15579224 173.47618103]
[-32.11073303 175.84863281]
[-47.02527237 173.23420715]
[-60.28159714 165.91650391]
[-70.44174957 154.68931580]
[-76.40364838 140.77046204]
[-77.52057648 125.66976166]
[-73.67138672 111.02522278]
[-65.27360535 98.42537689]
[-53.23816681 89.23696899]
[-38.87058258 84.45668030]
[-23.72933578 84.60304260]
[-9.45684147 89.66017914]
[2.39872789 99.07952881]
[10.55136967 111.83935547]
[25.12407303 108.28459167]
[30.91446686 103.61373138]
[40.03689957 104.81081390]
[54.68040085 101.55998993]
[69.32390594 98.30916595]
[83.96740723 95.05834198]
[87.60337830 92.41934967]
[91.42972565 91.19877625]
[94.99250031 91.29969788]
[96.23937225 76.35160828]
[97.48625183 61.40352631]
[98.73312378 46.45543671]
[99.97999573 31.50735092]
[97.69164276 26.67175293]
[97.54651642 21.92503548]
[99.14035034 18.08298302]
[101.79956818 15.67548561]
[103.97640991 0.83428031]
[106.15324402 -14.00692558]
[108.33007812 -28.84813118]
[110.50691986 -43.68933487]
[104.85424042 -58.46627045]
[114.35664368 -69.93595123]
[116.53348541 -84.77716064]
[110.88080597 -99.55409241]
[120.38320923 -111.02377319]
[122.56005096 -125.86498260]
[124.73688507 -140.70619202]
[126.91371918 -155.54739380]
[113.44760895 -162.47145081]
[102.96117401 -173.39451599]
[96.59188843 -187.13172913]
[95.03066254 -202.19297791]
[98.44683838 -216.94453430]
[106.46984863 -229.78627014]
[118.22943115 -239.32518005]
[132.44998169 -244.52659607]
[147.58897400 -244.82626343]
[162.00422668 -240.19171143]
[174.13209534 -231.12565613]
[182.65702820 -218.61149597]
[186.65431213 -204.00668335]
[185.69035339 -188.89544678]
[179.86972046 -174.91693115]
[169.82377625 -163.58743286]
[156.64222717 -156.13587952]
[141.75492859 -153.37055969]
[139.57809448 -138.52934265]
[137.40126038 -123.68814087]
[135.22441101 -108.84693909]
[141.03279114 -95.13154602]
[131.37469482 -82.60031891]
[129.19784546 -67.75911713]
[135.00622559 -54.04372406]
[125.34812164 -41.51250076]
[123.17128754 -26.67129326]
[120.99445343 -11.83008862]
[118.81761169 3.01111722]
[116.64077759 17.85232353]
[114.92808533 32.75422668]
[113.68121338 47.70231247]
[112.43433380 62.65039825]
[111.18746185 77.59848785]
[109.94058990 92.54656982]
[113.64675140 107.08151245]
[121.89904022 119.60746765]
[127.71953583 122.95848846]
[130.50730896 128.00424194]
[130.22138977 132.83061218]
[137.94548035 145.68901062]
[145.66957092 158.54740906]
[156.92424011 155.55308533]
[169.07687378 156.82536316]
[180.49333191 162.59680176]
[189.50079346 172.47195435]
[194.62841797 185.43486023]
[194.83541870 199.94801331]
[208.35960388 206.43617249]
[221.88380432 212.92433167]
[235.40798950 219.41250610]
[250.95887756 215.46920776]
[263.65005493 225.28315735]
[263.74594116 241.32592773]
[251.17297363 251.29087830]
[235.57606506 247.53375244]
[228.91981506 232.93669128]
[215.39562988 226.44853210]
[201.87144470 219.96035767]
[188.34725952 213.47219849]
[181.99978638 217.46714783]
[190.75778198 229.64489746]
[199.51579285 241.82264709]
[212.06857300 250.03407288]
[211.93692017 265.03350830]
[199.24192810 273.02334595]
[185.66140747 266.65393066]
[183.68762207 251.78454590]
[176.49624634 238.62080383]
[169.30485535 225.45707703]
[162.95739746 229.45202637]
[162.95739746 244.45202637]
[162.95739746 259.45202637]
[162.95739746 274.45202637]
[162.95739746 289.45202637]
[162.95739746 304.45202637]
[162.95739746 319.45202637]
[162.95739746 334.45202637]
[162.95739746 349.45202637]
[162.95739746 364.45202637]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[13 112]
[14 111]
[15 110]
[16 107]
[17 106]
[18 47]
[19 46]
[20 45]
[21 44]
[22 42]
[23 41]
[50 105]
[51 104]
[52 103]
[53 102]
[54 101]
[58 100]
[59 99]
[60 98]
[61 97]
[62 96]
[64 94]
[65 93]
[67 91]
[68 90]
[69 89]
[70 88]
[118 130]
[119 129]
[120 128]
[121 127]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
