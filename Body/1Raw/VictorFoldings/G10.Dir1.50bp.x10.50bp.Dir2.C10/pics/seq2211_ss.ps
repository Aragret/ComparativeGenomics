%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:21 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGUUAGUUCAACUUUAAAUUUGCCCACAGAACCCUCUAAAUCCCCUUGUAAAUUUAACUGUUxxxxxxxxxxUCGAUGUUGGAUCAGGACAUCCCGAUGGUGCAGCCGCUAUUAAAGGUUCGUUUGUUCAACCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[92.50000000 311.11358643]
[92.50000000 296.11358643]
[92.50000000 281.11358643]
[92.50000000 266.11358643]
[92.50000000 251.11358643]
[92.50000000 236.11358643]
[92.50000000 221.11358643]
[92.50000000 206.11358643]
[92.50000000 191.11358643]
[92.50000000 176.11358643]
[77.21371460 173.00900269]
[62.87521362 166.86763000]
[50.08090591 157.94491577]
[39.36296463 146.61199951]
[31.16720200 133.34028625]
[25.83451271 118.68179321]
[23.58671188 103.24623108]
[24.51729202 87.67565155]
[10.02169609 83.81848907]
[-4.47390032 79.96132660]
[-22.09966850 85.18743134]
[-34.07226562 72.39458466]
[-48.64496613 68.83982086]
[-63.21767044 65.28506470]
[-77.79037476 61.73030090]
[-92.36307526 58.17553711]
[-106.93577576 54.62077713]
[-121.50848389 51.06601334]
[-136.08119202 47.51125336]
[-140.33961487 48.93506241]
[-144.41015625 48.89288330]
[-147.84428406 47.63246155]
[-150.32426453 45.52445984]
[-151.69245911 43.00744247]
[-165.91923523 38.25362778]
[-180.14601135 33.49981308]
[-189.12486267 45.67500305]
[-201.42779541 54.47803116]
[-215.84945679 59.04646301]
[-230.97698975 58.93273163]
[-245.32835388 54.14797974]
[-257.49752808 45.16096878]
[-266.29229736 32.85214996]
[-270.85107422 18.42741966]
[-270.72720337 3.29996705]
[-265.93283081 -11.04817677]
[-256.93768311 -23.21132469]
[-244.62295532 -31.99785805]
[-230.19517517 -36.54695892]
[-215.06781006 -36.41295624]
[-200.72288513 -31.60897446]
[-188.56576538 -22.60565948]
[-179.78749084 -10.28506756]
[-175.24806213 4.14575815]
[-175.39219666 19.27303123]
[-161.16542053 24.02684784]
[-146.93864441 28.78066254]
[-132.52642822 32.93854904]
[-117.95372009 36.49331284]
[-103.38101959 40.04807281]
[-88.80831146 43.60283661]
[-74.23561096 47.15759659]
[-59.66290665 50.71236038]
[-45.09020615 54.26712036]
[-30.51750374 57.82188416]
[-19.98039055 51.79887772]
[-7.77914381 54.68826294]
[-0.61674106 65.46572876]
[13.87885571 69.32289124]
[28.37445259 73.18005371]
[32.76404572 63.54653549]
[38.44183350 54.61144638]
[45.29903412 46.54597092]
[53.20427322 39.50463867]
[62.00608444 33.62236023]
[71.53583527 29.01183128]
[81.61094666 25.76138878]
[92.03836823 23.93331146]
[102.61833954 23.56262016]
[113.14813995 24.65641975]
[123.42603302 27.19375229]
[133.25509644 31.12600517]
[142.44702148 36.37783813]
[151.95536804 24.77649689]
[161.46372986 13.17515564]
[170.97209167 1.57381403]
[180.48045349 -10.02752686]
[175.63206482 -24.67323112]
[179.49353027 -39.60951614]
[190.83267212 -50.07026672]
[206.03121948 -52.71749878]
[220.23936462 -46.70648575]
[228.92332458 -33.95531845]
[229.31211853 -18.53285599]
[221.28164673 -5.36034393]
[207.39440918 1.35891557]
[192.08178711 -0.51916867]
[182.57344055 11.08217239]
[173.06507874 22.68351364]
[163.55671692 34.28485489]
[154.04835510 45.88619614]
[171.18142700 72.02264404]
[176.42982483 102.83028412]
[191.29287720 104.85262299]
[206.15591431 106.87495422]
[221.15267944 107.18701172]
[236.08697510 105.78470612]
[251.02128601 104.38240051]
[262.32138062 92.99435425]
[278.25418091 94.87194824]
[286.59741211 108.57485962]
[280.95086670 123.59139252]
[265.64608765 128.40214539]
[252.42359924 119.31671143]
[237.48928833 120.71901703]
[222.55497742 122.12131500]
[235.33332825 129.97712708]
[243.10739136 142.80537415]
[244.15763855 157.76855469]
[238.25172424 171.55697632]
[226.69602966 181.12074280]
[212.04652405 184.34445190]
[197.54357910 180.51504517]
[186.39509583 170.47953796]
[181.06700134 156.45771790]
[182.73785400 141.55107117]
[191.03805542 129.05679321]
[204.13359070 121.73799896]
[189.27053833 119.71566772]
[174.40748596 117.69333649]
[171.94699097 125.94529724]
[168.57449341 133.86837769]
[164.33274841 141.36213684]
[159.27551270 148.33158875]
[153.46690369 154.68838501]
[146.98052979 160.35194397]
[139.89865112 165.25048828]
[132.31100464 169.32191467]
[124.31377411 172.51461792]
[116.00834656 174.78811646]
[107.50000000 176.11358643]
[107.50000000 191.11358643]
[107.50000000 206.11358643]
[107.50000000 221.11358643]
[107.50000000 236.11358643]
[107.50000000 251.11358643]
[107.50000000 266.11358643]
[107.50000000 281.11358643]
[107.50000000 296.11358643]
[107.50000000 311.11358643]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[18 70]
[19 69]
[20 68]
[22 65]
[23 64]
[24 63]
[25 62]
[26 61]
[27 60]
[28 59]
[29 58]
[34 57]
[35 56]
[36 55]
[83 101]
[84 100]
[85 99]
[86 98]
[87 97]
[103 130]
[104 129]
[105 128]
[106 116]
[107 115]
[108 114]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
