%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:39 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGGCUAACCCCAUACCCCGAACCAACCAAACCCCAAAGACACCCCCCACAGUUUAUGUAGCUUxxxxxxxxxxAAAAUCUAGACAAAAAAGGAAGGAAUCGAACCCCCCAAAGCUGGUUUCAAGCCAACCCCAUCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[78.68696594 499.04119873]
[81.27273560 479.83276367]
[81.58071899 464.83593750]
[81.88869476 449.83908081]
[82.19667053 434.84225464]
[82.50464630 419.84542847]
[82.81262970 404.84857178]
[83.12060547 389.85174561]
[83.42858124 374.85491943]
[83.73655701 359.85806274]
[84.04454041 344.86123657]
[69.75257111 341.85556030]
[56.25765228 336.26071167]
[44.02457428 328.26773071]
[33.47496033 318.15032959]
[24.97276688 306.25537109]
[18.81168938 292.99114990]
[15.20504665 278.81329346]
[14.27837944 264.20916748]
[16.06508636 249.68095398]
[20.50522232 235.72865295]
[27.44750595 222.83262634]
[36.65447998 211.43721008]
[47.81062317 201.93534851]
[60.53317642 194.65504456]
[74.38526154 189.84806824]
[88.89087677 187.68121338]
[89.50670624 172.69384766]
[90.12252808 157.70649719]
[90.73835754 142.71914673]
[91.35417938 127.73179626]
[91.97000885 112.74443817]
[84.33703613 99.83174133]
[70.90958405 93.14566803]
[52.59231186 94.72933960]
[43.43097687 79.79232788]
[29.86907959 73.38334656]
[16.30718422 66.97437286]
[2.74528718 60.56539917]
[-7.44294643 71.73192596]
[-20.47078133 79.39788055]
[-35.17979050 82.88162231]
[-50.26205826 81.87337494]
[-64.37648010 76.46278381]
[-76.26801300 67.13096619]
[-84.87927246 54.70769501]
[-89.44454193 40.29764175]
[-89.55789185 25.18213272]
[-85.20922852 10.70523453]
[-76.78524780 -1.84577858]
[-65.03499603 -11.35487938]
[-51.00329971 -16.97652435]
[-35.93784714 -18.21084023]
[-21.17824745 -14.94807529]
[-8.03691673 -7.47834921]
[2.31763005 3.53413391]
[8.96467113 17.11015129]
[11.31315804 32.04253387]
[9.15426254 47.00350189]
[22.71615982 53.41247559]
[36.27805710 59.82145309]
[49.83995056 66.23043060]
[61.37005234 62.44638824]
[72.74146271 67.72486877]
[77.59566498 79.71821594]
[91.02310944 86.40429688]
[97.24949646 86.65688324]
[101.92883301 89.21578217]
[112.25973511 78.34046936]
[122.59063721 67.46515656]
[132.92153931 56.58983994]
[123.44239807 44.93762589]
[115.53116608 32.16888046]
[109.31777954 18.49327850]
[104.90424347 4.13538694]
[102.36304474 -10.66902637]
[101.73591614 -25.67685890]
[103.03314209 -40.64166641]
[106.23343658 -55.31771851]
[111.28423309 -69.46401978]
[118.10260773 -82.84826660]
[126.57658386 -95.25068665]
[136.56701660 -106.46762085]
[147.90985107 -116.31487274]
[160.41883850 -124.63074493]
[173.88854980 -131.27867126]
[188.09782410 -136.14952087]
[202.81330872 -139.16326904]
[217.79338074 -140.27044678]
[232.79203796 -139.45286560]
[247.56300354 -136.72396851]
[261.86370850 -132.12854004]
[275.45935059 -125.74206543]
[288.12664795 -117.66940308]
[299.65762329 -108.04312134]
[309.86288452 -97.02128601]
[318.57485962 -84.78488159]
[325.65054321 -71.53485870]
[330.97369385 -57.48877335]
[334.45690918 -42.87728500]
[336.04299927 -27.94033051]
[335.70590210 -12.92318344]
[333.45120239 1.92755926]
[329.31585693 16.36803627]
[323.36782837 30.16111946]
[315.70474243 43.08031845]
[306.45248413 54.91348267]
[295.76293945 65.46630096]
[283.81164551 74.56549072]
[270.79489136 82.06163788]
[256.92639160 87.83164215]
[242.43388367 91.78075409]
[227.55534363 93.84413147]
[212.53509521 93.98788452]
[197.61979675 92.20966339]
[183.05435181 88.53865814]
[169.07795715 83.03514862]
[155.92010498 75.78952026]
[143.79685974 66.92073822]
[133.46595764 77.79605865]
[123.13504791 88.67137146]
[112.80414581 99.54668427]
[106.95735931 113.36026764]
[106.34153748 128.34762573]
[105.72570801 143.33497620]
[105.10988617 158.32232666]
[104.49405670 173.30967712]
[103.87823486 188.29702759]
[118.87895966 191.89270020]
[132.89201355 198.33023071]
[145.38491821 207.36305237]
[155.88336182 218.64598083]
[163.98916626 231.74845886]
[169.39543152 246.17095947]
[171.89811707 261.36404419]
[171.40376282 276.74929810]
[167.93298340 291.74136353]
[161.61959839 305.77014160]
[152.70550537 318.30255127]
[141.53132629 328.86276245]
[128.52354431 337.05026245]
[114.17804718 342.55499268]
[99.04137421 345.16921997]
[98.73339844 360.16604614]
[98.42542267 375.16287231]
[98.11743927 390.15972900]
[97.80946350 405.15655518]
[97.50148773 420.15338135]
[97.19351196 435.15023804]
[96.88552856 450.14706421]
[96.57755280 465.14392090]
[96.26957703 480.14074707]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 152]
[3 151]
[4 150]
[5 149]
[6 148]
[7 147]
[8 146]
[9 145]
[10 144]
[11 143]
[27 128]
[28 127]
[29 126]
[30 125]
[31 124]
[32 123]
[33 66]
[34 65]
[36 62]
[37 61]
[38 60]
[39 59]
[68 122]
[69 121]
[70 120]
[71 119]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
