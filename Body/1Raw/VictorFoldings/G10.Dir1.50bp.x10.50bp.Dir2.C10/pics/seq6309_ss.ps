%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:50 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCCUCCUUAUUCGAGCCGAGCUGGGCCAGCCAGGCAACCUUCUAGGUAACGACCACAUCUACxxxxxxxxxxAUAAUAUUUCGCCCACUAAGCCAAUCACUUUAUUGACUCCUAGCCGCAGACCUCCUCAUUCCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[78.40380859 537.61212158]
[78.40380859 522.61212158]
[78.40380859 507.61215210]
[78.40380859 492.61215210]
[78.40380859 477.61215210]
[78.40380859 462.61215210]
[78.40380859 447.61215210]
[78.40380859 432.61215210]
[78.40380859 417.61215210]
[78.40380859 402.61215210]
[63.67399597 399.87847900]
[49.69362259 394.48321533]
[36.93934250 386.60873413]
[25.84629631 376.52194214]
[16.79326630 364.56530762]
[10.08973885 351.14514160]
[5.96532726 336.71783447]
[4.56190443 321.77435303]
[5.92872620 306.82345581]
[10.02070236 292.37451172]
[16.69988251 278.91992188]
[25.74010849 266.91864014]
[36.83466721 256.78024292]
[49.60670471 248.85108948]
[63.62201309 243.40248108]
[78.40380859 240.62133789]
[78.40380859 225.62133789]
[75.23924255 218.89097595]
[78.56096649 210.31414795]
[78.86894226 195.31730652]
[79.17691803 180.32048035]
[79.33091736 165.32125854]
[79.33091736 150.32125854]
[68.88890839 139.55258179]
[53.89602280 139.09066772]
[38.90313721 138.62873840]
[26.27712250 148.52638245]
[10.70050621 144.68598938]
[4.12233305 130.05358887]
[11.58881378 115.85389709]
[27.37230492 112.97970581]
[39.36506271 123.63584900]
[54.35794830 124.09777832]
[69.35083008 124.55970001]
[73.45595551 110.13167572]
[77.56072235 95.70493317]
[64.57034302 88.20493317]
[51.57995987 80.70493317]
[38.58958054 73.20493317]
[21.84931946 70.52165222]
[19.79357147 53.69279861]
[35.39565659 47.05870056]
[46.08958054 60.21455002]
[59.07995987 67.71455383]
[72.07034302 75.21455383]
[85.06072235 82.71455383]
[91.47754669 78.83198547]
[104.31120300 71.06684875]
[110.72802734 67.18428040]
[110.11220551 52.19692612]
[109.49637604 37.20957184]
[94.65202332 34.69190216]
[80.65563965 29.14256668]
[68.11911011 20.80415726]
[57.59046936 10.04119396]
[49.52997971 -2.67581129]
[44.29001999 -16.79092598]
[42.09965134 -31.68709946]
[43.05463028 -46.71313477]
[47.11320877 -61.21215439]
[54.09796143 -74.55033112]
[63.70355225 -86.14456940]
[75.51005554 -95.48802185]
[89.00135040 -102.17223358]
[103.58764648 -105.90499878]
[118.63130951 -106.52313995]
[133.47467041 -103.99962616]
[147.46887207 -98.44478607]
[160.00212097 -90.10144806]
[170.52651978 -79.33434296]
[178.58201599 -66.61416626]
[183.81642151 -52.49699020]
[186.00093079 -37.59995651]
[185.04003906 -22.57429886]
[180.97575378 -8.07687473]
[173.98574829 5.25855017]
[164.37559509 16.84900856]
[152.56542969 26.18781662]
[139.07150269 32.86672211]
[124.48373413 36.59374619]
[125.09955597 51.58110046]
[125.71538544 66.56845093]
[131.65379333 71.14942169]
[131.41165161 56.15137482]
[142.98652649 46.61081696]
[157.66249084 49.71182632]
[164.38845825 63.11933136]
[158.09977722 76.73741913]
[143.53062439 80.31135559]
[149.46902466 84.89232635]
[164.12174988 81.68332672]
[175.94717407 71.17284393]
[190.03504944 76.00823212]
[204.68777466 72.79923248]
[219.34049988 69.59024048]
[233.99322510 66.38124084]
[242.30693054 52.94034576]
[257.70870972 49.39624786]
[271.06097412 57.85160446]
[274.44201660 73.29000092]
[265.84597778 86.55210114]
[250.37269592 89.76975250]
[237.20220947 81.03396606]
[222.54948425 84.24296570]
[207.89675903 87.45195770]
[193.24403381 90.66095734]
[182.46669006 100.94190979]
[167.33074951 96.33605194]
[152.67802429 99.54505157]
[94.33091736 150.32125854]
[94.33091736 165.32125854]
[97.47583771 173.96449280]
[94.17375946 180.62844849]
[93.86577606 195.62528992]
[93.55780029 210.62213135]
[93.40380859 225.62133789]
[93.40380859 240.62133789]
[108.18560028 243.40248108]
[122.20090485 248.85108948]
[134.97294617 256.78024292]
[146.06750488 266.91864014]
[155.10772705 278.91992188]
[161.78691101 292.37451172]
[165.87889099 306.82345581]
[167.24571228 321.77435303]
[165.84228516 336.71783447]
[161.71786499 351.14514160]
[155.01434326 364.56530762]
[145.96131897 376.52194214]
[134.86827087 386.60873413]
[122.11399078 394.48321533]
[108.13361359 399.87847900]
[93.40380859 402.61215210]
[93.40380859 417.61215210]
[93.40380859 432.61215210]
[93.40380859 447.61215210]
[93.40380859 462.61215210]
[93.40380859 477.61215210]
[93.40380859 492.61215210]
[93.40380859 507.61215210]
[93.40380859 522.61212158]
[93.40380859 537.61212158]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 152]
[2 151]
[3 150]
[4 149]
[5 148]
[6 147]
[7 146]
[8 145]
[9 144]
[10 143]
[26 127]
[27 126]
[29 125]
[30 124]
[31 123]
[32 121]
[33 120]
[34 44]
[35 43]
[36 42]
[46 56]
[47 55]
[48 54]
[49 53]
[59 92]
[60 91]
[61 90]
[100 119]
[101 118]
[103 116]
[104 115]
[105 114]
[106 113]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
