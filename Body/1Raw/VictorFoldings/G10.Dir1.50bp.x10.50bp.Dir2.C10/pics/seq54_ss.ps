%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:25 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGAGCUCUCCAUGCAUUUGGUAUUUUCGUCUGGGGGGUAUGCACGCGAUAGCAUUGCGAGACxxxxxxxxxxCCAAGAAGUUAUUAUCUCGAACUGACACUGAGCCACAACCCAAACAACCCAGCUCUCCCUCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[70.18020630 513.07720947]
[72.77120209 493.86947632]
[73.08325958 478.87271118]
[73.39531708 463.87594604]
[73.70737457 448.87921143]
[74.01942444 433.88244629]
[74.33148193 418.88568115]
[74.64353943 403.88894653]
[74.95559692 388.89218140]
[75.26765442 373.89544678]
[60.63561630 370.68954468]
[46.90583420 364.68862915]
[34.60674286 356.12161255]
[24.21210861 345.31616211]
[16.12278748 332.68634033]
[10.65125942 318.71652222]
[8.00955868 303.94290161]
[8.30105972 288.93301392]
[11.51643181 274.26376343]
[17.53392601 260.49929810]
[26.12398338 248.16944885]
[36.95799255 237.74914551]
[49.62086487 229.64021301]
[63.62692261 224.15589905]
[78.43855286 221.50872803]
[78.75061035 206.51196289]
[79.06266785 191.51521301]
[71.59181213 178.62973022]
[79.61453247 164.99351501]
[69.61044312 176.17019653]
[55.19208527 180.30671692]
[40.78425980 176.13363647]
[30.80855179 164.93161011]
[28.32637787 150.13841248]
[34.09948349 136.29386902]
[46.35617828 127.64671326]
[61.33504105 126.85062408]
[74.43924713 134.14993286]
[81.64745331 147.30534363]
[84.74577332 132.62881470]
[87.84410095 117.95229340]
[90.94242096 103.27576447]
[92.50000000 88.35685730]
[84.76270294 74.55667877]
[92.50000000 61.82941055]
[92.50000000 46.82941055]
[86.15287018 33.23845673]
[74.65106964 23.60993195]
[63.14926529 13.98140621]
[51.64746094 4.35288000]
[36.62895203 8.25468540]
[22.19764137 2.55233192]
[13.90265656 -10.56151009]
[14.93359089 -26.04430008]
[24.89402771 -37.94258881]
[39.95397949 -41.68124390]
[54.32258224 -35.82267380]
[62.47481918 -22.61961937]
[61.27598572 -7.14892387]
[72.77778625 2.47960258]
[84.27959442 12.10812855]
[95.78139496 21.73665428]
[100.86888885 12.70848560]
[108.83462524 7.07598639]
[117.84902191 5.50834608]
[121.85676575 -8.94634247]
[125.86450195 -23.40103149]
[129.87223816 -37.85572052]
[133.87998962 -52.31040955]
[120.67444611 -59.57061005]
[109.49959564 -69.68096924]
[100.95806122 -82.09623718]
[95.51049042 -96.14688873]
[93.45066071 -111.07518005]
[94.88965607 -126.07604218]
[99.74987793 -140.34051514]
[107.76920319 -153.09931946]
[118.51518250 -163.66438293]
[131.40827942 -171.46595764]
[145.75320435 -176.08332825]
[160.77633667 -177.26745605]
[175.66751099 -174.95448303]
[189.62365723 -169.26918030]
[201.89213562 -160.51811218]
[211.81132507 -149.17323303]
[218.84629822 -135.84634399]
[222.61767578 -121.25616455]
[222.92205811 -106.18950653]
[219.74302673 -91.45890808]
[213.25204468 -77.85877228]
[203.79914856 -66.12252808]
[191.89411926 -56.88310242]
[178.17897034 -50.63876343]
[163.39337158 -47.72626114]
[148.33467102 -48.30266953]
[144.32693481 -33.84798050]
[140.31919861 -19.39329147]
[136.31144714 -4.93860245]
[132.30371094 9.51608658]
[139.24688721 17.17601776]
[141.67909241 27.58893204]
[138.65470886 38.21497345]
[130.60360718 46.29009628]
[119.30485535 49.54381180]
[107.50000000 46.82941055]
[107.50000000 61.82941055]
[115.23729706 74.55667877]
[107.50000000 88.35685730]
[118.16162872 98.90814209]
[133.16081238 98.75210571]
[145.36842346 88.34278870]
[161.08999634 91.53829956]
[168.26531982 105.88732147]
[161.39007568 120.38251495]
[145.73837280 123.90440369]
[133.31684875 113.75129700]
[118.31766510 113.90733337]
[111.53520203 110.72100067]
[105.61894226 106.37408447]
[102.52062225 121.05061340]
[99.42230225 135.72714233]
[96.32398224 150.40367126]
[94.61128998 165.30557251]
[102.05982208 179.26371765]
[94.05941772 191.82727051]
[93.74736023 206.82402039]
[93.43531036 221.82077026]
[108.12399292 225.08180237]
[121.88979340 231.14399719]
[134.20439148 239.77267456]
[144.59555054 250.63464355]
[152.66526794 263.31115723]
[158.10496521 277.31399536]
[160.70733643 292.10433960]
[160.37420654 307.11337280]
[157.12022400 321.76428223]
[151.07231140 335.49441528]
[142.46461487 347.77679443]
[131.62948608 358.14047241]
[118.98466492 366.18847656]
[105.01713562 371.61306763]
[90.26440430 374.20748901]
[89.95234680 389.20425415]
[89.64029694 404.20098877]
[89.32823944 419.19775391]
[89.01618195 434.19448853]
[88.70412445 449.19125366]
[88.39206696 464.18801880]
[88.08000946 479.18475342]
[87.76795959 494.18151855]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 150]
[3 149]
[4 148]
[5 147]
[6 146]
[7 145]
[8 144]
[9 143]
[10 142]
[25 127]
[26 126]
[27 125]
[29 123]
[39 122]
[40 121]
[41 120]
[42 119]
[43 108]
[45 106]
[46 105]
[47 62]
[48 61]
[49 60]
[50 59]
[65 99]
[66 98]
[67 97]
[68 96]
[69 95]
[109 117]
[110 116]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
