%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:18 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCCCUCUAAAUCACCACGAUCAAAAGGAACAAGCAUCAAGCACGCAGCAAUGCAGCUCAAAAxxxxxxxxxxCUAGCCCCUACCCCCCAAUUAGGAGGGCACUGGCCCCCAACAGGCAUCACCCCGCUAAAUCCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[245.08421326 173.55172729]
[231.52232361 167.14274597]
[217.96041870 160.73376465]
[204.39852905 154.32479858]
[190.83663940 147.91581726]
[177.27473450 141.50685120]
[163.58410645 135.37767029]
[149.77052307 129.53088379]
[135.95693970 123.68409729]
[122.14336395 117.83730316]
[108.32978058 111.99051666]
[93.39376831 113.37454224]
[80.88973236 121.66001892]
[68.38569641 129.94549561]
[69.22478485 145.21778870]
[62.35220337 158.77008057]
[49.70297623 167.00801086]
[34.72887039 167.80308533]
[21.45670891 161.04176331]
[8.95267391 169.32723999]
[-3.55136180 177.61271667]
[-8.13807392 192.98612976]
[-23.07053566 198.85137939]
[-36.89384079 190.70915222]
[-39.00392914 174.80546570]
[-27.78212738 163.34027100]
[-11.83683681 165.10867310]
[0.66719943 156.82321167]
[13.17123508 148.53773499]
[12.11800766 133.67985535]
[18.68688965 120.20003510]
[31.20373154 111.76231384]
[46.36294174 110.71580505]
[60.10021973 117.44145966]
[72.60425568 109.15598297]
[85.10829163 100.87050629]
[85.26228333 93.37208557]
[70.26544952 93.06388092]
[70.57389069 78.06705475]
[85.57025909 78.37525177]
[85.72425079 70.87683105]
[73.57091522 62.08498764]
[61.41758347 53.29314804]
[46.01173019 55.59477615]
[33.81176758 46.50547028]
[31.71245384 31.80416107]
[19.55912209 23.01231766]
[1.22944474 21.57927704]
[-5.36593676 5.34519339]
[-17.69721985 -3.19526553]
[-33.67545700 -1.75461650]
[-44.65949631 -13.44779873]
[-42.22331619 -29.30480194]
[-28.23575211 -37.16149139]
[-13.42686272 -30.99088860]
[-9.15676117 -15.52654934]
[3.17452240 -6.98609066]
[15.16821098 -8.83369255]
[25.52336502 -1.76671708]
[28.35096359 10.85898495]
[40.50429535 19.65082741]
[55.12421417 17.04437637]
[67.57466888 25.78742599]
[70.20942688 41.13981247]
[82.36275482 49.93165588]
[94.51609039 58.72349930]
[88.06557465 45.18131256]
[90.40068817 30.36418724]
[96.86261749 16.82744026]
[106.91515350 5.69431400]
[119.72417450 -2.11139393]
[134.22680664 -5.94198751]
[149.21968079 -5.47961473]
[163.45872498 -0.76264143]
[175.76240540 7.81753016]
[185.10981750 19.54894066]
[190.72531128 33.45814896]
[192.14295959 48.39101028]
[189.24511719 63.10842896]
[182.27223206 76.38919830]
[171.80290222 87.13131714]
[158.70584106 94.44343567]
[144.06781006 97.71880341]
[129.10223389 96.68538666]
[114.17656708 98.17693329]
[127.99015045 104.02371979]
[141.80374146 109.87051392]
[155.61730957 115.71730042]
[169.43089294 121.56408691]
[176.12789917 121.12503052]
[181.24349976 123.77426147]
[183.68371582 127.94494629]
[197.24560547 134.35392761]
[210.80751038 140.76289368]
[224.36940002 147.17187500]
[237.93130493 153.58085632]
[251.49319458 159.98982239]
[246.18348694 145.96102905]
[252.95968628 132.57884216]
[267.41012573 128.55578613]
[280.12677002 136.51109314]
[282.83038330 151.26542664]
[273.76116943 163.21269226]
[288.58364868 160.91181946]
[296.64218140 156.47831726]
[303.73379517 158.71913147]
[318.60040283 156.72306824]
[333.46701050 154.72700500]
[348.33358765 152.73095703]
[360.98068237 142.29145813]
[376.24841309 148.27713013]
[378.43066406 164.53044128]
[365.28250122 174.33135986]
[350.32965088 167.59754944]
[335.46304321 169.59361267]
[320.59646606 171.58966064]
[305.72985840 173.58572388]
[290.88452148 175.73429871]
[276.06204224 178.03517151]
[289.84347534 183.95738220]
[302.42935181 192.11798096]
[313.45950317 202.28343201]
[322.61816406 214.16275024]
[329.64328003 227.41598511]
[334.33374023 241.66377258]
[336.55529785 256.49835205]
[336.24438477 271.49511719]
[333.40988159 286.22488403]
[328.13293457 300.26602173]
[320.56457520 313.21670532]
[310.92141724 324.70623779]
[299.47943115 334.40579224]
[286.56613159 342.03775024]
[272.55111694 347.38366699]
[257.83547974 350.29055786]
[242.84040833 350.67520142]
[227.99508667 348.52661133]
[213.72439575 343.90628052]
[200.43678284 336.94644165]
[188.51255798 327.84628296]
[178.29299927 316.86627197]
[170.07061768 304.32067871]
[164.08071899 290.56854248]
[160.49475098 276.00347900]
[159.41534424 261.04235840]
[160.87341309 246.11340332]
[164.82720947 231.64385986]
[171.16357422 218.04788208]
[179.70115662 205.71459961]
[190.19558716 194.99700928]
[202.34652710 186.20185852]
[215.80618286 179.58087158]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 97]
[2 96]
[3 95]
[4 94]
[5 93]
[6 92]
[7 89]
[8 88]
[9 87]
[10 86]
[11 85]
[12 36]
[13 35]
[14 34]
[19 29]
[20 28]
[21 27]
[41 66]
[42 65]
[43 64]
[46 61]
[47 60]
[49 57]
[50 56]
[103 119]
[104 118]
[106 117]
[107 116]
[108 115]
[109 114]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
