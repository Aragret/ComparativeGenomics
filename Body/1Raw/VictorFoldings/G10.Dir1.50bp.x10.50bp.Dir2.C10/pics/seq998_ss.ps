%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:17 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCCCUCUAAAUCACCACGAUCAAAAGGAACAAGCAUCAAGCACGCAGCAAUGCAGCUCAAAxxxxxxxxxxGAUACUCCUCAAUAGCCAUCGCUGUAGUAUAUCCAAAGACAACCAUCAUUCCCCCUAAAUCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[111.13882446 590.55670166]
[111.13882446 575.55670166]
[111.13882446 560.55670166]
[111.13882446 545.55670166]
[111.13882446 530.55670166]
[111.13882446 515.55670166]
[111.13882446 500.55667114]
[111.13882446 485.55667114]
[111.13882446 470.55667114]
[111.13882446 455.55667114]
[94.99236298 450.16741943]
[81.62103271 439.59414673]
[72.62841797 425.08361816]
[69.10017395 408.35610962]
[71.47299957 391.40127563]
[79.48063660 376.24169922]
[92.18368530 364.69146729]
[108.07971954 358.13912964]
[107.14409637 343.16833496]
[106.20846558 328.19754028]
[91.77201843 326.22045898]
[77.99858093 321.45001221]
[65.42328644 314.06948853]
[54.53516006 304.36358643]
[45.75803757 292.70758057]
[39.43409729 279.55258179]
[35.81051636 265.40826416]
[35.02981567 250.82307434]
[37.12423706 236.36291504]
[42.01443863 222.58923340]
[49.51248169 210.03721619]
[59.32905960 199.19496155]
[71.08466339 190.48454285]
[84.32424164 184.24557495]
[98.53484344 180.72193909]
[97.91086578 165.73492432]
[97.28688812 150.74790955]
[96.19557953 135.78765869]
[94.63800049 120.86875153]
[86.33161926 116.65626526]
[80.57902527 109.33174896]
[78.45501709 100.26369476]
[64.33021545 95.21493530]
[49.27286148 100.75169373]
[35.63122177 92.30863953]
[33.86999512 76.36255646]
[45.34024048 65.14591217]
[61.24296951 67.26316833]
[69.37896729 81.09013367]
[83.50377655 86.13889313]
[86.93824768 82.86388397]
[91.00635529 80.42015839]
[95.51074982 78.92626190]
[97.68758392 64.08505249]
[99.86442566 49.24385071]
[102.04125977 34.40264511]
[104.21809387 19.56143951]
[98.56542206 4.78450394]
[108.06782532 -6.68517685]
[110.24465942 -21.52638245]
[112.42150116 -36.36758804]
[110.30732727 -42.74236298]
[111.58460236 -48.36373901]
[115.01001740 -51.77578354]
[117.80233765 -66.51358795]
[120.59466553 -81.25139618]
[106.74379730 -87.16472626]
[94.48820496 -95.91770172]
[84.40111542 -107.10093689]
[76.95430756 -120.19135284]
[72.49609375 -134.57670593]
[71.23498535 -149.58416748]
[73.22996521 -164.51179504]
[78.38773346 -178.66140747]
[86.46704102 -191.37120056]
[97.09001160 -202.04670715]
[109.75978851 -210.18862915]
[123.88378143 -215.41613770]
[138.80139160 -217.48475647]
[153.81488037 -216.29769897]
[168.22206116 -211.91050720]
[181.34906006 -204.52838135]
[192.58192444 -194.49658203]
[201.39526367 -182.28433228]
[207.37684631 -168.46279907]
[210.24693298 -153.67846680]
[209.87127686 -138.62280273]
[206.26744080 -124.00000000]
[199.60397339 -110.49398804]
[190.19255066 -98.73647308]
[178.47335815 -89.27736664]
[164.99452209 -82.55909729]
[150.38648987 -78.89588928]
[135.33247375 -78.45906830]
[132.54014587 -63.72126389]
[129.74781799 -48.98345947]
[127.26270294 -34.19075012]
[125.08586884 -19.34954643]
[122.90902710 -4.50833988]
[128.71740723 9.20705318]
[119.05930328 21.73827744]
[116.88246155 36.57948303]
[114.70562744 51.42068863]
[112.52879333 66.26189423]
[110.35195160 81.10309601]
[121.54193115 100.44824982]
[109.55690765 119.31117249]
[111.11449432 134.23008728]
[114.26301575 138.55516052]
[115.28923035 143.19189453]
[114.43847656 147.26348877]
[112.27390289 150.12393188]
[112.89788055 165.11094666]
[113.52185822 180.09796143]
[128.77386475 182.64421082]
[143.16358948 188.28942871]
[156.06896973 196.78706360]
[166.93263245 207.76728821]
[175.28591919 220.75315857]
[180.76919556 235.18124390]
[183.14729309 250.42613220]
[182.31954956 265.82754517]
[178.32414246 280.71884155]
[171.33627319 294.45602417]
[161.66052246 306.44546509]
[149.71755981 316.16961670]
[136.02587891 323.20932007]
[121.17925262 327.26193237]
[122.11488342 342.23269653]
[123.05051422 357.20349121]
[135.81936646 360.11730957]
[147.37561035 366.25177002]
[156.92388916 375.17672729]
[163.80911255 386.27011108]
[167.56143188 398.76153564]
[167.92828369 411.78564453]
[164.89137268 424.44210815]
[158.66746521 435.85784912]
[149.69291687 445.24728394]
[138.59310913 451.96633911]
[126.13882446 455.55667114]
[126.13882446 470.55667114]
[126.13882446 485.55667114]
[126.13882446 500.55667114]
[126.13882446 515.55670166]
[126.13882446 530.55670166]
[126.13882446 545.55670166]
[126.13882446 560.55670166]
[126.13882446 575.55670166]
[126.13882446 590.55670166]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[18 130]
[19 129]
[20 128]
[35 114]
[36 113]
[37 112]
[38 108]
[39 107]
[42 50]
[43 49]
[53 105]
[54 104]
[55 103]
[56 102]
[57 101]
[59 99]
[60 98]
[61 97]
[64 96]
[65 95]
[66 94]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
