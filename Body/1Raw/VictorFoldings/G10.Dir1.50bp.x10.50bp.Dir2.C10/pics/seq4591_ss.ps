%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:46 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCACACCCCAUCCUAAAGUAAGGUCAGCUAAAUAAGCUAUCGGGCCCAUACCCCGAAAAUGxxxxxxxxxxAAUCAAUACUAAACCCCCAUAAAUAGGAGAAGGCUUAGAAGAAAACCCCACAAACCCCAUCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[31.42304802 270.88314819]
[23.15605545 267.32858276]
[15.07260323 263.37435913]
[7.61769247 276.39068604]
[0.16278239 289.40698242]
[0.01825227 305.22753906]
[-13.02119923 312.42626953]
[-20.47610855 325.44259644]
[-27.93101883 338.45889282]
[-35.38592911 351.47521973]
[-34.78801346 367.86346436]
[-48.82354355 376.34497070]
[-63.05397034 368.19467163]
[-62.84024811 351.79693604]
[-48.40224075 344.02029419]
[-40.94733047 331.00399780]
[-33.49242020 317.98767090]
[-26.03750801 304.97137451]
[-26.42620277 290.08184814]
[-12.85352707 281.95208740]
[-5.39861679 268.93576050]
[2.05629349 255.91946411]
[-10.82065296 247.04635620]
[-22.89825249 237.11260986]
[-34.08938980 226.18986511]
[-44.31334305 214.35693359]
[-53.49636841 201.69912720]
[-61.57222366 188.30778503]
[-68.48266602 174.27946472]
[-74.17784119 159.71537781]
[-78.61668396 144.72056580]
[-81.76715851 129.40318298]
[-83.60655975 113.87371063]
[-84.12160492 98.24417114]
[-83.30858612 82.62729645]
[-98.17163086 80.60496521]
[-113.03467560 78.58263397]
[-127.89772797 76.56029510]
[-141.48672485 85.08782196]
[-156.57814026 79.64458466]
[-161.59512329 64.40616608]
[-152.68908691 51.06217957]
[-136.69197083 49.84898758]
[-125.87538910 61.69725037]
[-111.01234436 63.71958160]
[-96.14929962 65.74192047]
[-81.28624725 67.76425171]
[-64.32108307 16.91914558]
[-33.43121338 -26.88561630]
[-43.87102509 -37.65642548]
[-54.31083679 -48.42723465]
[-64.75064850 -59.19804001]
[-75.19046021 -69.96884918]
[-90.77391052 -68.66878510]
[-103.51729584 -77.73191071]
[-107.40357971 -92.87888336]
[-100.59778595 -106.95777130]
[-86.31338501 -113.32095337]
[-71.29505157 -108.96393585]
[-62.63397598 -95.94395447]
[-64.41965485 -80.40866089]
[-53.97983932 -69.63785553]
[-43.54002762 -58.86704636]
[-33.10021591 -48.09623718]
[-22.66040421 -37.32542801]
[-15.80456924 -43.15428543]
[-8.67214012 -48.64122391]
[-1.28015149 -53.77313995]
[6.35374069 -58.53777313]
[14.21130371 -62.92374802]
[22.27376938 -66.92058563]
[30.52188110 -70.51873779]
[38.93593979 -73.70960999]
[47.49584579 -76.48558807]
[56.18115616 -78.84003448]
[64.97113037 -80.76732635]
[73.84476471 -82.26286316]
[82.78086853 -83.32307434]
[91.75810242 -83.94542694]
[100.75502014 -84.12842560]
[109.75013733 -83.87165070]
[118.72196960 -83.17569733]
[127.64907837 -82.04223633]
[136.51014709 -80.47397614]
[145.28402710 -78.47466278]
[153.94973755 -76.04906464]
[162.48658752 -73.20298767]
[170.87419128 -69.94321442]
[179.09251404 -66.27754211]
[187.12193298 -62.21472168]
[194.94326782 -57.76445770]
[202.53782654 -52.93738174]
[209.88748169 -47.74501801]
[216.97467041 -42.19976807]
[223.78247070 -36.31488419]
[230.29461670 -30.10441589]
[236.49557495 -23.58319664]
[242.37049866 -16.76680565]
[247.90539551 -9.67152119]
[253.08702087 -2.31428957]
[257.90298462 5.28731537]
[262.34182739 13.11513805]
[266.39291382 21.15048218]
[270.04656982 29.37415504]
[273.29409790 37.76651382]
[276.12768555 46.30751801]
[278.54061890 54.97676086]
[280.52713013 63.75354004]
[282.08242798 72.61689758]
[283.20285034 81.54565430]
[283.88568115 90.51848602]
[284.12933350 99.51396942]
[283.93319702 108.51061249]
[283.29772949 117.48693085]
[282.22445679 126.42147827]
[280.71597290 135.29292297]
[278.77581787 144.08006287]
[276.40869141 152.76193237]
[273.62020874 161.31776428]
[270.41705322 169.72715759]
[266.80685425 177.97000122]
[262.79824829 186.02662659]
[258.40078735 193.87776184]
[253.62501526 201.50468445]
[248.48231506 208.88917542]
[242.98495483 216.01358032]
[237.14608765 222.86088562]
[230.97966003 229.41474915]
[224.50038147 235.65951538]
[217.72373962 241.58026123]
[210.66592407 247.16284180]
[203.34378052 252.39393616]
[195.77481079 257.26104736]
[187.97708130 261.75253296]
[179.96922302 265.85769653]
[171.77037048 269.56668091]
[163.40008545 272.87069702]
[154.87837219 275.76181030]
[146.22558594 278.23312378]
[137.46240234 280.27871704]
[128.60972595 281.89373779]
[119.68872070 283.07431030]
[110.72069550 283.81762695]
[101.72705841 284.12188721]
[92.72930145 283.98635864]
[83.74890900 283.41140747]
[74.80732727 282.39840698]
[65.92591858 280.94973755]
[57.12589645 279.06887817]
[48.42827606 276.76031494]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 22]
[4 21]
[5 20]
[7 18]
[8 17]
[9 16]
[10 15]
[35 47]
[36 46]
[37 45]
[38 44]
[49 65]
[50 64]
[51 63]
[52 62]
[53 61]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
