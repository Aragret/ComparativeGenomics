%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:17 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCAUAAUAGCUAUAGCAAUAAAACUAGGAAUAGCCCCCUUUCACUUCUGAGUCCCAGAGGUxxxxxxxxxxGCCCAAGAACUAUCAAACUCCUGAGCCAACAACUUAAUAUGACUAGCUUACACAAUAGCUCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[157.65110779 380.43438721]
[157.65110779 365.43438721]
[157.65110779 350.43438721]
[157.65110779 335.43438721]
[157.65110779 320.43438721]
[157.65110779 305.43438721]
[157.65110779 290.43438721]
[157.65110779 275.43438721]
[157.65110779 260.43438721]
[157.65110779 245.43440247]
[154.70562744 230.72644043]
[148.92935181 216.88322449]
[143.15307617 203.03999329]
[137.37680054 189.19677734]
[125.33511353 180.43054199]
[127.16149139 164.71510315]
[121.38521576 150.87188721]
[114.47821808 137.55673218]
[106.48830414 124.86180115]
[98.49838257 112.16687012]
[97.87693787 127.15399170]
[91.31500244 140.64254761]
[79.90726471 150.38233948]
[65.55678558 154.74855042]
[50.65755463 153.01280212]
[37.69509125 145.46466064]
[28.83182335 133.36331177]
[25.54634857 118.72754669]
[28.38675499 103.99893188]
[36.87919998 91.63452911]
[49.60695267 83.69700623]
[64.44673920 81.51051331]
[78.92295074 85.43980408]
[90.61972046 94.82830048]
[86.31214142 80.46011353]
[82.00455475 66.09192657]
[77.69696808 51.72374725]
[73.38938141 37.35556030]
[68.34062958 23.23075867]
[62.56435776 9.38754082]
[56.78808212 -4.45567656]
[51.01181030 -18.29889488]
[43.93950653 -5.07079792]
[29.64200020 -0.53413844]
[16.23675537 -7.26462221]
[11.33465576 -21.44099045]
[17.71888733 -35.01455307]
[31.76477623 -40.27886581]
[45.49879074 -34.24398422]
[41.49105072 -48.69867325]
[37.48331070 -63.15336227]
[31.13617897 -76.74430847]
[22.62508965 -89.09588623]
[14.11399937 -101.44745636]
[5.60290909 -113.79902649]
[-2.90818119 -126.15060425]
[-11.41927147 -138.50218201]
[-19.93036079 -150.85374451]
[-35.38449478 -155.16062927]
[-41.51984024 -169.98416138]
[-33.62988663 -183.95300293]
[-17.76713181 -186.35144043]
[-6.10012054 -175.33959961]
[-7.57878876 -159.36483765]
[0.93230128 -147.01325989]
[9.44339180 -134.66169739]
[17.95448112 -122.31011963]
[26.46557236 -109.95854950]
[34.97666168 -97.60697174]
[43.48775101 -85.25540161]
[42.93883133 -100.24535370]
[47.45830536 -114.54830170]
[56.52069473 -126.50125885]
[69.07231903 -134.71446228]
[83.65382385 -138.23295593]
[98.56981659 -136.64767456]
[112.08602905 -130.14291382]
[122.63095093 -119.47499084]
[128.97853088 -105.88424683]
[130.39073181 -90.95087433]
[126.70336914 -76.41115570]
[118.34516144 -63.95561981]
[106.28791809 -55.03245926]
[91.93351746 -50.67915726]
[76.95094299 -51.40187454]
[63.08219528 -57.11657715]
[51.93799591 -67.16110229]
[55.94573975 -52.70641327]
[59.95347977 -38.25172424]
[64.85502625 -24.07516670]
[70.63130188 -10.23194885]
[76.40757751 3.61126876]
[82.18384552 17.45448685]
[90.52762604 4.98927879]
[105.45631409 3.52841854]
[116.05825806 14.13967609]
[114.58428955 29.06708145]
[102.11176300 37.39990997]
[87.75756836 33.04797745]
[92.06515503 47.41616058]
[96.37274170 61.78434372]
[100.68032074 76.15252686]
[104.98790741 90.52071381]
[111.19331360 104.17695618]
[119.18322754 116.87188721]
[127.17314911 129.56681824]
[130.04455566 114.84421539]
[140.91128540 104.50428772]
[155.75830078 102.36742401]
[169.09992981 109.22316742]
[176.00668335 122.53844452]
[173.92668152 137.39353943]
[163.62843323 148.29977417]
[148.91693115 151.22750854]
[135.22843933 145.09561157]
[141.00469971 158.93882751]
[153.45954895 168.69523621]
[151.22001648 183.42051697]
[156.99629211 197.26373291]
[162.77256775 211.10694885]
[168.54884338 224.95016479]
[170.85491943 210.12849426]
[177.35223389 196.60868835]
[187.48454285 185.54812622]
[200.38450623 177.89364624]
[214.94779968 174.30050659]
[229.92771912 175.07630920]
[244.04191589 180.15464783]
[256.08212280 189.10076904]
[265.01766968 201.14884949]
[270.08358765 215.26750183]
[270.84622192 230.24810791]
[267.24029541 244.80822754]
[259.57446289 257.70144653]
[248.50500488 267.82403564]
[234.97950745 274.30947876]
[220.15580750 276.60250854]
[205.30291748 274.50689697]
[191.69230652 268.20202637]
[180.48913574 258.22763062]
[172.65110779 245.43440247]
[172.65110779 260.43438721]
[172.65110779 275.43438721]
[172.65110779 290.43438721]
[172.65110779 305.43438721]
[172.65110779 320.43438721]
[172.65110779 335.43438721]
[172.65110779 350.43438721]
[172.65110779 365.43438721]
[172.65110779 380.43438721]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[11 121]
[12 120]
[13 119]
[14 118]
[16 116]
[17 115]
[18 106]
[19 105]
[20 104]
[34 103]
[35 102]
[36 101]
[37 100]
[38 99]
[39 93]
[40 92]
[41 91]
[42 90]
[49 89]
[50 88]
[51 87]
[52 70]
[53 69]
[54 68]
[55 67]
[56 66]
[57 65]
[58 64]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
