%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:04 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCUAACCAUCUUCUCCUUACACCUAGCAGGUGUCUCCUCUAUCUUAGGGGCCAUCAAUUUCxxxxxxxxxxUUCACUUCCACUCCAUAACGCUCCUCAUACUAGGCCUACUAACCAACACACUAACCAUAUCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[91.74378204 426.89276123]
[91.74378204 411.89276123]
[91.74378204 396.89276123]
[91.74378204 381.89276123]
[91.74378204 366.89276123]
[91.74378204 351.89276123]
[91.74378204 336.89276123]
[91.74378204 321.89276123]
[91.74378204 306.89276123]
[91.74378204 291.89276123]
[77.39176178 289.18078613]
[63.78364563 283.86334229]
[51.38817596 276.12194824]
[40.63261795 266.22167969]
[31.88804626 254.50201416]
[25.45654106 241.36523438]
[21.56074715 227.26264954]
[20.33616829 212.67904663]
[21.82645798 198.11605835]
[25.98185921 184.07484436]
[32.66086960 171.03894043]
[41.63506317 159.45753479]
[52.59688568 149.73002625]
[65.17021179 142.19221497]
[78.92325592 137.10475159]
[93.38336182 134.64410400]
[93.69541931 119.64734650]
[82.60410309 109.54869843]
[67.70220184 111.26139069]
[52.80029678 112.97407532]
[37.89839554 114.68676758]
[22.99649239 116.39945984]
[8.09459019 118.11214447]
[-6.95059013 125.92744446]
[-18.62538528 113.63372803]
[-10.04401398 99.01194763]
[6.38190031 103.21024323]
[21.28380203 101.49755859]
[36.18570328 99.78486633]
[51.08760834 98.07217407]
[65.98950958 96.35948944]
[80.89141083 94.64679718]
[65.90316010 94.05324554]
[53.04831314 86.32324219]
[45.49662018 73.36284637]
[45.11016846 58.36782455]
[51.98425293 45.03564835]
[64.42385864 36.65375519]
[79.36164093 35.28895187]
[93.11424255 41.27777481]
[102.29055023 53.14349365]
[104.62787628 67.96027374]
[99.55057526 82.07357788]
[106.73307800 68.90499878]
[113.91558838 55.73641586]
[121.09809875 42.56783295]
[120.19789886 24.20565796]
[135.46363831 15.60582066]
[142.37063599 2.29066515]
[149.27763367 -11.02449036]
[156.18463135 -24.33964539]
[143.76449585 -32.78219223]
[132.43008423 -42.63447952]
[122.34053040 -53.75820160]
[113.63745880 -65.99719238]
[106.44304657 -79.17963409]
[100.85830688 -93.12047577]
[96.96162415 -107.62400055]
[94.80771637 -122.48660278]
[94.42681122 -137.49963379]
[95.82425690 -152.45234680]
[98.98043823 -167.13481140]
[103.85104370 -181.34092712]
[110.36770630 -194.87124634]
[118.43893433 -207.53582764]
[127.95142365 -219.15687561]
[138.77162170 -229.57127380]
[150.74765015 -238.63278198]
[163.71138000 -246.21423340]
[177.48080444 -252.20915222]
[191.86264038 -256.53341675]
[206.65498352 -259.12628174]
[221.65017700 -259.95138550]
[236.63769531 -258.99713135]
[251.40715027 -256.27691650]
[265.75119019 -251.82893372]
[279.46847534 -245.71560669]
[292.36639404 -238.02278137]
[304.26391602 -228.85842896]
[314.99401855 -218.35121155]
[324.40603638 -206.64863586]
[332.36785889 -193.91499329]
[338.76773071 -180.32904053]
[343.51574707 -166.08149719]
[346.54534912 -151.37239075]
[347.81393433 -136.40818787]
[347.30371094 -121.39899445]
[345.02182007 -106.55549622]
[341.00036621 -92.08607483]
[335.29571533 -78.19386292]
[327.98800659 -65.07389069]
[319.17984009 -52.91032791]
[308.99481201 -41.87393951]
[297.57595825 -32.11965942]
[285.08355713 -23.78442192]
[271.69296265 -16.98524094]
[257.59222412 -11.81756592]
[242.97921753 -8.35394287]
[228.05912781 -6.64299631]
[213.04139709 -6.70874453]
[198.13687134 -8.55026531]
[183.55476379 -12.14170551]
[169.49978638 -17.43264771]
[162.59278870 -4.11749172]
[155.68579102 9.19766426]
[148.77879333 22.51281929]
[152.13308716 34.17712402]
[146.43450928 45.34606171]
[134.26667786 49.75034332]
[127.08417511 62.91892624]
[119.90166473 76.08750916]
[112.71915436 89.25608826]
[118.29631805 98.51628876]
[117.21271515 110.30792999]
[108.69216919 119.95940399]
[108.38011169 134.95616150]
[123.44931793 138.24673462]
[137.58883667 144.39811707]
[150.26147461 153.17463684]
[160.98611450 164.24089050]
[169.35603333 177.17463684]
[175.05430603 191.48281860]
[177.86582947 206.62042236]
[177.68537903 222.01121521]
[174.52165222 237.06967163]
[168.49674988 251.22326660]
[159.84155273 263.93423462]
[148.88684082 274.72000122]
[136.05064392 283.17150879]
[121.82228851 288.96871948]
[106.74378204 291.89276123]
[106.74378204 306.89276123]
[106.74378204 321.89276123]
[106.74378204 336.89276123]
[106.74378204 351.89276123]
[106.74378204 366.89276123]
[106.74378204 381.89276123]
[106.74378204 396.89276123]
[106.74378204 411.89276123]
[106.74378204 426.89276123]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[26 126]
[27 125]
[28 42]
[29 41]
[30 40]
[31 39]
[32 38]
[33 37]
[53 122]
[54 121]
[55 120]
[56 119]
[58 116]
[59 115]
[60 114]
[61 113]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
