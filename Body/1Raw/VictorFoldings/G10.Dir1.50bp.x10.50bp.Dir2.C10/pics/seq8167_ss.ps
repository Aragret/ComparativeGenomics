%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:25 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGAAUUAUAACAAACCCUGAGAACCAAAAUGAACGAAAAUCUGUUCGCUUCAUUCAUUGCCCxxxxxxxxxxUCACGAAAAAAACUCUACCUCUCUAUACUAAUCUCCCUACAAAUCUCCUUAAUUAUAACACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[83.22797394 461.34973145]
[83.22797394 446.34973145]
[83.22797394 431.34973145]
[83.22797394 416.34973145]
[83.22797394 401.34973145]
[83.22797394 386.34973145]
[83.22797394 371.34973145]
[83.22797394 356.34973145]
[83.22797394 341.34973145]
[83.22797394 326.34973145]
[69.59076691 323.82635498]
[56.60852051 318.93704224]
[44.68833923 311.83374023]
[34.20429611 302.73782349]
[25.48565102 291.93319702]
[18.80653572 279.75750732]
[14.37731838 266.59149170]
[12.33798885 252.84715271]
[12.75372601 238.95484924]
[15.61282253 225.34977722]
[20.82700539 212.45835876]
[28.23416328 200.68490601]
[37.60338593 190.39892578]
[48.64216232 181.92349243]
[61.00550842 175.52513123]
[74.30676270 171.40544128]
[88.12966156 169.69473267]
[89.06529236 154.72393799]
[90.00091553 139.75314331]
[90.93654633 124.78234863]
[85.45154572 122.01484680]
[80.75515747 118.05400848]
[77.10195923 113.11453247]
[74.68997955 107.46417236]
[73.64994812 101.40920258]
[74.03825378 95.27784729]
[60.65196609 88.50973511]
[47.26568222 81.74161530]
[33.87939835 74.97350311]
[20.49311256 68.20539093]
[7.10682726 61.43727112]
[-6.34913826 54.80877304]
[-19.87332726 48.32061005]
[-33.39751816 41.83244324]
[-46.92170715 35.34428024]
[-61.74633408 40.82205200]
[-76.06716156 34.13703156]
[-81.38789368 19.25531960]
[-74.55183411 5.00597334]
[-59.61470413 -0.15712413]
[-45.43842697 6.82920218]
[-40.43354416 21.82008934]
[-26.90935326 28.30825424]
[-13.38516331 34.79641724]
[0.13902698 41.28458405]
[7.57826710 41.34250641]
[13.87494183 48.05098724]
[27.26122665 54.81910324]
[40.64751053 61.58721542]
[54.03379822 68.35533142]
[67.42008209 75.12344360]
[80.80636597 81.89156342]
[89.98258209 75.58766174]
[100.94187164 73.62910461]
[111.73351288 76.36452484]
[121.94699860 65.37886047]
[132.16047668 54.39319611]
[122.42291260 42.96094131]
[114.07842255 30.47550774]
[107.23986816 17.10574341]
[101.99971771 3.03245807]
[98.42884064 -11.55402088]
[96.57553864 -26.45643044]
[96.46485901 -41.47322845]
[98.09832001 -56.40133667]
[101.45381165 -71.03886414]
[106.48596954 -85.18785095]
[113.12672424 -98.65695953]
[121.28628540 -111.26403046]
[130.85429382 -122.83856201]
[141.70133972 -133.22402954]
[153.68075562 -142.27996826]
[166.63052368 -149.88392639]
[180.37550354 -155.93305969]
[194.72981262 -160.34556580]
[209.49934387 -163.06175232]
[224.48432922 -164.04490662]
[239.48213196 -163.28172302]
[254.28991699 -160.78253174]
[268.70742798 -156.58111572]
[282.53967285 -150.73429871]
[295.59960938 -143.32116699]
[307.71063232 -134.44197083]
[318.70889282 -124.21676636]
[328.44567871 -112.78386688]
[336.78933716 -100.29787445]
[343.62701416 -86.92765045]
[348.86621094 -72.85401917]
[352.43612671 -58.26729965]
[354.28842163 -43.36476898]
[354.39810181 -28.34796143]
[352.76364136 -13.41996479]
[349.40716553 1.21733737]
[344.37408447 15.36599255]
[337.73242188 28.83465576]
[329.57202148 41.44117737]
[320.00323486 53.01507568]
[309.15548706 63.39981461]
[297.17547607 72.45496368]
[284.22521973 80.05805969]
[270.47982788 86.10626984]
[256.12521362 90.51781464]
[241.35551453 93.23302460]
[226.37045288 94.21517181]
[211.37269592 93.45098877]
[196.56507874 90.95080566]
[182.14785767 86.74842834]
[168.31597900 80.90069580]
[155.25654602 73.48668671]
[143.14613342 64.60667419]
[132.93266296 75.59233856]
[122.71917725 86.57800293]
[124.24569702 110.41428375]
[105.90734100 125.71797943]
[104.97171021 140.68876648]
[104.03607941 155.65956116]
[103.10045624 170.63035583]
[118.74933624 174.83618164]
[133.20034790 182.15563965]
[145.84172058 192.27645874]
[156.13883972 204.76780701]
[163.65678406 219.09872437]
[168.07867432 234.66055298]
[169.21911621 250.79289246]
[167.03192139 266.81161499]
[161.61193848 282.03778076]
[153.19102478 295.82656860]
[142.12806702 307.59445190]
[128.89367676 316.84396362]
[114.05024719 323.18466187]
[98.22797394 326.34973145]
[98.22797394 341.34973145]
[98.22797394 356.34973145]
[98.22797394 371.34973145]
[98.22797394 386.34973145]
[98.22797394 401.34973145]
[98.22797394 416.34973145]
[98.22797394 431.34973145]
[98.22797394 446.34973145]
[98.22797394 461.34973145]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[27 127]
[28 126]
[29 125]
[30 124]
[36 62]
[37 61]
[38 60]
[39 59]
[40 58]
[41 57]
[42 55]
[43 54]
[44 53]
[45 52]
[65 122]
[66 121]
[67 120]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
