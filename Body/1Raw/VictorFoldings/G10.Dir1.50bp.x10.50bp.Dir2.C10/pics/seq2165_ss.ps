%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:16 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGUACCUAAGAACAGCUAAAAGAGCACACCCGUCUAUGUAGCAAAAUAGUGGGAAGAUUUAUxxxxxxxxxxCACACACCACCUGUCCAAAAAGGCCUUCGAUACGGGAUAAUCCUAUUUAUUACCUCAGAACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[95.50195312 244.34558105]
[95.18989563 229.34881592]
[94.87784576 214.35206604]
[94.56578827 199.35531616]
[94.25373077 184.35856628]
[93.94167328 169.36180115]
[93.62961578 154.36505127]
[93.31755829 139.36830139]
[93.00550842 124.37154388]
[78.73004150 119.76598358]
[69.71251678 131.75280762]
[67.59933472 147.43226624]
[53.76504898 152.95147705]
[52.31785202 169.28665161]
[37.33552551 175.95463562]
[24.23060226 166.09597778]
[26.48430443 149.85243225]
[41.77821350 143.93395996]
[43.24640274 129.11189270]
[57.72568130 122.73528290]
[66.74320984 110.74845123]
[62.11073685 104.85013580]
[48.21331406 87.15517426]
[34.43093109 93.07513428]
[20.64855194 98.99510193]
[13.39085484 113.30262756]
[-2.34884381 116.40769196]
[-14.49639511 105.92835236]
[-13.73323822 89.90346527]
[-0.64480048 80.62594604]
[14.72858810 85.21271515]
[28.51096916 79.29275513]
[42.29335022 73.37279510]
[66.06535339 57.94581985]
[90.30918121 56.54493713]
[108.32517242 65.99737549]
[116.41514587 80.49733734]
[117.03912354 65.51032257]
[117.66310120 50.52330399]
[118.28707886 35.53628922]
[118.91105652 20.54927254]
[111.45614624 7.53296232]
[98.21356201 0.48782763]
[84.97097778 -6.55730724]
[71.72839355 -13.60244179]
[57.83969498 -6.68263435]
[42.54174423 -9.28116035]
[31.71691322 -20.39883423]
[29.52757072 -35.76068497]
[36.81556320 -49.45976257]
[50.77851105 -56.22849655]
[66.04737091 -53.46417236]
[76.75096130 -42.22972488]
[78.77352905 -26.84502792]
[92.01611328 -19.79989243]
[105.25869751 -12.75475788]
[118.50128174 -5.70962286]
[122.41170502 -14.42965221]
[128.92625427 -20.78178596]
[136.90022278 -24.11200333]
[145.08349609 -24.25643921]
[150.57052612 -38.21683121]
[156.05755615 -52.17721939]
[161.54458618 -66.13761139]
[148.53218079 -73.65657043]
[136.78581238 -83.03102875]
[126.56790161 -94.05155945]
[118.10673523 -106.47196198]
[111.59132385 -120.01474762]
[107.16722870 -134.37738037]
[104.93328857 -149.23896790]
[104.93940735 -164.26753235]
[107.18545532 -179.12730408]
[111.62123871 -193.48632812]
[118.14767456 -207.02380371]
[126.61895752 -219.43730164]
[136.84584045 -230.44950867]
[148.59983826 -239.81440735]
[161.61836243 -247.32276917]
[175.61059570 -252.80685425]
[190.26391602 -256.14416504]
[205.25099182 -257.26013184]
[220.23698425 -256.12982178]
[234.88711548 -252.77850342]
[248.87408447 -247.28102112]
[261.88543701 -239.76020813]
[273.63046265 -230.38407898]
[283.84680176 -219.36209106]
[292.30618286 -206.94049072]
[298.81967163 -193.39677429]
[303.24172974 -179.03350830]
[305.47354126 -164.17160034]
[305.46527100 -149.14303589]
[303.21713257 -134.28358459]
[298.77929688 -119.92519379]
[292.25091553 -106.38864899]
[283.77789307 -93.97634888]
[273.54943848 -82.96560669]
[261.79409790 -73.60238647]
[248.77450562 -66.09587860]
[234.78149414 -60.61377716]
[220.12768555 -57.27855682]
[205.14045715 -56.16472244]
[190.15463257 -57.29716492]
[175.50497437 -60.65057755]
[170.01794434 -46.69018936]
[164.53091431 -32.72979736]
[159.04388428 -18.76940918]
[167.17958069 -5.81576300]
[164.74250793 10.16432667]
[151.80000305 21.23799515]
[133.89807129 21.17325020]
[133.27409363 36.16026688]
[132.65011597 51.14728165]
[132.02613831 66.13430023]
[131.40216064 81.12131500]
[139.25959778 93.89867401]
[152.91583252 100.10408020]
[166.57206726 106.30948639]
[180.22831726 112.51489258]
[194.93577576 106.72989655]
[209.39257812 113.11553955]
[215.02174377 127.88334656]
[208.48361206 142.27182007]
[193.65711975 147.74455261]
[179.33857727 141.05465698]
[174.02290344 126.17113495]
[160.36666870 119.96572876]
[146.71041870 113.76032257]
[133.05418396 107.55490875]
[126.79119873 111.68106079]
[135.80064392 123.67396545]
[144.81010437 135.66687012]
[157.53099060 143.61538696]
[157.71141052 158.61430359]
[145.18539429 166.86650085]
[131.47529602 160.78102112]
[129.19259644 145.95591736]
[121.72891998 132.94462585]
[114.26524353 119.93334961]
[108.00225830 124.05949402]
[108.31431580 139.05624390]
[108.62637329 154.05299377]
[108.93843079 169.04975891]
[109.25048065 184.04650879]
[109.56253815 199.04325867]
[109.87459564 214.04000854]
[110.18665314 229.03677368]
[110.49871063 244.03352356]
[113.08970642 263.24124146]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 149]
[2 148]
[3 147]
[4 146]
[5 145]
[6 144]
[7 143]
[8 142]
[9 141]
[10 21]
[11 20]
[13 18]
[23 33]
[24 32]
[25 31]
[37 116]
[38 115]
[39 114]
[40 113]
[41 112]
[42 57]
[43 56]
[44 55]
[45 54]
[61 108]
[62 107]
[63 106]
[64 105]
[117 130]
[118 129]
[119 128]
[120 127]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
