%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:43 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCUUCUCCUCACUCUCUCAAUCUUAUCCAUCAUAGCAGGCAGUUGAGGUGGAUUAAACCAAAxxxxxxxxxxCCCUUAGCAGGGAACUACUCCCACCCUGGAGCCUCCGUAGACCUAACCAUCUUCUCCUUACCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[108.90205383 263.89697266]
[108.90205383 248.89698792]
[108.90205383 233.89698792]
[108.90205383 218.89698792]
[108.90205383 203.89698792]
[108.90205383 188.89698792]
[108.90205383 173.89698792]
[108.90205383 158.89698792]
[108.90205383 143.89698792]
[108.90205383 128.89698792]
[103.41165161 123.78763580]
[97.08616638 137.38867188]
[82.19615173 135.57554626]
[79.31945038 120.85398102]
[92.43084717 113.56892395]
[86.94044495 108.45957184]
[71.97916412 109.53664398]
[57.01788330 110.61371613]
[42.05660248 111.69078064]
[27.09532356 112.76785278]
[12.14588928 113.99846649]
[-2.79012346 115.38249207]
[-17.69457054 117.07289124]
[-32.56116867 119.06894684]
[-47.40649414 121.21752167]
[-62.22897339 123.51840210]
[-65.14277649 138.39407349]
[-72.97129059 151.37445068]
[-84.76918793 160.89207458]
[-99.11181641 165.79768372]
[-114.26722717 165.49885559]
[-128.40533447 160.03172302]
[-139.81889343 150.05642700]
[-147.12966919 136.77755737]
[-149.45483398 121.79858398]
[-146.51362610 106.92830658]
[-138.66119385 93.96238708]
[-126.84577942 84.46650696]
[-112.49413300 79.58734894]
[-97.33930206 79.91409302]
[-83.21128845 85.40727997]
[-71.81613159 95.40359497]
[-64.52984619 108.69591522]
[-49.70736694 106.39504242]
[-43.54207611 102.23554993]
[-34.55722809 104.20234680]
[-19.69062805 102.20629120]
[-16.10089874 98.97162628]
[-10.42290020 97.99786377]
[-4.17414904 100.44647980]
[10.76186371 99.06245422]
[17.17152405 95.29039001]
[26.01825333 97.80657196]
[40.97953415 96.72949982]
[55.94081497 95.65243530]
[70.90209961 94.57536316]
[85.86338043 93.49829102]
[99.29082489 86.81221771]
[109.16653442 75.52193451]
[119.04223633 64.23165894]
[104.75817108 68.81046295]
[89.79815674 69.90501404]
[74.99975586 67.45403290]
[61.19147491 61.59473801]
[49.14638138 52.65517426]
[39.53884506 41.13583374]
[32.90674973 27.68164253]
[29.62140083 13.04584789]
[29.86673737 -1.95214593]
[33.62902069 -16.47265625]
[40.69762039 -29.70273399]
[50.67678452 -40.90167618]
[63.00781631 -49.44249344]
[77.00035858 -54.84701920]
[91.87100220 -56.81267548]
[106.78720856 -55.22941208]
[120.91387939 -50.18586731]
[133.46009827 -41.96440887]
[143.72346497 -31.02533340]
[151.12934875 -17.98107338]
[155.26315308 -3.56193018]
[155.89341736 11.42482281]
[152.98487854 26.14013290]
[146.70034790 39.76014328]
[137.38906860 51.52492905]
[151.43103027 46.25018692]
[165.47300720 40.97544479]
[179.51498413 35.70070267]
[192.65661621 28.46899986]
[204.62687683 19.42948151]
[216.59713745 10.38996124]
[228.56739807 1.35044181]
[240.53765869 -7.68907785]
[237.98377991 -22.78001213]
[242.74656677 -37.32561111]
[253.73156738 -47.98340225]
[268.41448975 -52.30429840]
[283.42132568 -49.29539490]
[295.30361938 -39.64811325]
[301.33087158 -25.57933044]
[300.11810303 -10.32194614]
[291.94396973 2.61800241]
[278.68685913 10.26700974]
[263.39312744 10.86738968]
[249.57717896 4.28118086]
[237.60691833 13.32070065]
[225.63665771 22.36021996]
[213.66639709 31.39974022]
[201.69613647 40.43925858]
[216.66813660 39.52297592]
[230.88508606 44.30609512]
[242.25848389 54.08596420]
[249.11752319 67.42588043]
[250.45460510 82.36617279]
[246.07330322 96.71204376]
[236.61723328 108.35604858]
[223.47554016 115.58763123]
[208.57878113 117.34445190]
[194.11532593 113.36843109]
[182.20994568 104.24364471]
[174.61154175 91.31057739]
[172.43637085 76.46912384]
[176.00396729 61.89955902]
[184.78973389 49.74267960]
[170.74775696 55.01742172]
[156.70578003 60.29216385]
[142.66380310 65.56690216]
[130.33251953 74.10736084]
[120.45681000 85.39764404]
[110.58110809 96.68791962]
[124.66070557 91.51443481]
[136.28431702 82.03332520]
[150.78579712 78.19830322]
[165.57673645 80.69390106]
[178.01710510 89.07466888]
[185.88639832 101.84471893]
[187.78002930 116.72470856]
[183.36000061 131.05870056]
[173.41523743 142.28820801]
[159.72079468 148.40885925]
[144.72100830 148.32817078]
[131.09342957 142.06072998]
[123.90205383 128.89698792]
[123.90205383 143.89698792]
[123.90205383 158.89698792]
[123.90205383 173.89698792]
[123.90205383 188.89698792]
[123.90205383 203.89698792]
[123.90205383 218.89698792]
[123.90205383 233.89698792]
[123.90205383 248.89698792]
[123.90205383 263.89697266]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 152]
[2 151]
[3 150]
[4 149]
[5 148]
[6 147]
[7 146]
[8 145]
[9 144]
[10 143]
[16 57]
[17 56]
[18 55]
[19 54]
[20 53]
[21 51]
[22 50]
[23 47]
[24 46]
[25 44]
[26 43]
[58 130]
[59 129]
[60 128]
[85 127]
[86 126]
[87 125]
[88 124]
[89 109]
[90 108]
[91 107]
[92 106]
[93 105]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
