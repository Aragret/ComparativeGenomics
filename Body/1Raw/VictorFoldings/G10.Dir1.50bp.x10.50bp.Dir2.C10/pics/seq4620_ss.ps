%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:33 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCAGCUAAAUAAGCUAUCGGGCCCAUACCCCGAAAAUGUUGGUUAUACCCUUCCCGUACUAxxxxxxxxxxUUUUAAGUUAAAGAUUAAGAGAACCAACACCUCUUUACAGUGAAAUGCCCCAACUAAAUACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[90.84831238 270.52191162]
[90.84831238 255.52191162]
[90.84831238 240.52191162]
[90.84831238 225.52191162]
[90.84831238 210.52191162]
[90.84831238 195.52191162]
[90.84831238 180.52191162]
[90.84831238 165.52191162]
[90.84831238 150.52191162]
[90.84831238 135.52191162]
[89.70984650 128.72552490]
[89.72320557 122.06861877]
[79.50972748 133.05429077]
[69.29624939 144.03994751]
[59.08276749 155.02561951]
[58.22748566 171.04585266]
[45.08592224 180.24797058]
[29.73915863 175.57287598]
[23.95992088 160.60691833]
[32.18154526 146.83068848]
[48.09710312 144.81213379]
[58.31058121 133.82646179]
[68.52406311 122.84080505]
[78.73754120 111.85514069]
[73.50413513 104.10043335]
[71.31425476 94.13877106]
[56.49649811 96.46987152]
[41.67874146 98.80097198]
[26.86098289 101.13208008]
[12.04322433 103.46318054]
[4.13086557 116.95127106]
[-10.61759472 122.14905548]
[-25.23838425 116.60229492]
[-32.82801056 102.93000793]
[-29.80289078 87.58782196]
[-17.59138680 77.81985474]
[-1.95940197 78.23823547]
[9.71212006 88.64542389]
[24.52987862 86.31432343]
[39.34763718 83.98321533]
[54.16539383 81.65211487]
[68.98315430 79.32100677]
[79.64477539 68.76972198]
[82.12989807 53.97701263]
[84.61501312 39.18430328]
[86.48262787 24.30102539]
[87.72950745 9.35293770]
[88.97637939 -5.59514904]
[90.22325134 -20.54323578]
[91.47013092 -35.49132156]
[92.71700287 -50.43941116]
[93.96387482 -65.38749695]
[95.21075439 -80.33558655]
[80.51689911 -83.44909668]
[66.32915497 -88.37973785]
[52.87128448 -95.04973602]
[40.35553360 -103.35390472]
[28.97929192 -113.16127014]
[18.92198181 -124.31715393]
[10.34222126 -136.64561462]
[3.37532544 -149.95220947]
[-1.86882758 -164.02708435]
[-5.30752993 -178.64825439]
[-6.88654900 -193.58511353]
[-6.58098078 -208.60211182]
[-4.39564419 -223.46237183]
[-0.36500594 -237.93154907]
[5.44736528 -251.78144836]
[12.94980049 -264.79360962]
[22.02397537 -276.76284790]
[32.52677536 -287.50039673]
[44.29256058 -296.83685303]
[57.13576126 -304.62500000]
[70.85382843 -310.74203491]
[85.23040009 -315.09143066]
[100.03874207 -317.60464478]
[115.04531097 -318.24197388]
[130.01342773 -316.99343872]
[144.70701599 -313.87869263]
[158.89433289 -308.94683838]
[172.35165405 -302.27572632]
[184.86669922 -293.97048950]
[196.24212646 -284.16217041]
[206.29849243 -273.00546265]
[214.87721252 -260.67626953]
[221.84298706 -247.36907959]
[227.08595276 -233.29376221]
[230.52342224 -218.67230225]
[232.10119629 -203.73530579]
[231.79435730 -188.71835327]
[229.60777283 -173.85826111]
[225.57591248 -159.38941956]
[219.76237488 -145.54002380]
[212.25885010 -132.52847290]
[203.18367004 -120.56000519]
[192.67996216 -109.82336426]
[180.91339111 -100.48789215]
[168.06953430 -92.70081329]
[154.35095215 -86.58494568]
[139.97401428 -82.23674774]
[125.16545868 -79.72480011]
[110.15883636 -79.08870697]
[108.91196442 -64.14062500]
[107.66509247 -49.19253540]
[106.41821289 -34.24444962]
[105.17134094 -19.29636192]
[103.92446899 -4.34827471]
[102.67758942 10.59981251]
[101.43071747 25.54789925]
[103.20344543 27.79840660]
[104.16156769 30.90902901]
[103.96434784 34.56183624]
[102.39660645 38.31859589]
[99.40772247 41.66942215]
[96.92260742 56.46213150]
[94.43748474 71.25483704]
[122.62963867 76.00856018]
[136.35914612 104.85506439]
[150.26170349 110.48702240]
[164.71578979 104.09522247]
[179.42570496 109.87396240]
[185.66432190 124.39481354]
[179.73039246 139.04281616]
[165.14439392 145.12756348]
[150.55995178 139.03909302]
[144.62974548 124.38957977]
[130.72718811 118.75762177]
[124.50746918 122.94869232]
[134.00801086 134.55644226]
[143.50854492 146.16418457]
[153.00907898 157.77192688]
[166.23767090 164.84332275]
[170.04750061 179.35142517]
[161.99996948 192.00991821]
[147.24613953 194.71633911]
[135.22964478 185.73837280]
[133.64218140 170.82205200]
[126.45079803 157.65830994]
[119.25941467 144.49456787]
[112.06803131 131.33084106]
[105.84831238 135.52191162]
[105.84831238 150.52191162]
[105.84831238 165.52191162]
[105.84831238 180.52191162]
[105.84831238 195.52191162]
[105.84831238 210.52191162]
[105.84831238 225.52191162]
[105.84831238 240.52191162]
[105.84831238 255.52191162]
[105.84831238 270.52191162]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[12 24]
[13 23]
[14 22]
[15 21]
[26 42]
[27 41]
[28 40]
[29 39]
[30 38]
[43 116]
[44 115]
[45 114]
[46 109]
[47 108]
[48 107]
[49 106]
[50 105]
[51 104]
[52 103]
[53 102]
[118 127]
[119 126]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
