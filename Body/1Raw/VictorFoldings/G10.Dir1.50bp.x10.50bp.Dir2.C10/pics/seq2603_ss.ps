%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:11 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCAAUCAACCAACAAGUCAUUAUUACCCUCACUGUCAACCCAACACAGGCAUGCUCAUAAGGxxxxxxxxxxCCUACACCCCUUAUCCCCAUACUAGUUAUUAUCGAAACCAUCAGCCUACUCAUUCAACCAACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[42.77361679 465.08334351]
[42.77361679 450.08334351]
[42.77361679 435.08334351]
[42.77361679 420.08334351]
[42.77361679 405.08334351]
[42.77361679 390.08334351]
[42.77361679 375.08334351]
[42.77361679 360.08334351]
[42.77361679 345.08334351]
[42.77361679 330.08334351]
[29.05501366 327.06796265]
[16.26795197 321.24029541]
[4.98211670 312.85705566]
[-4.29906940 302.28884888]
[-11.16091347 290.00387573]
[-15.29597664 276.54705811]
[-16.51784706 262.51605225]
[-14.76954651 248.53445435]
[-10.12617302 235.22433472]
[-2.79168749 223.17840576]
[6.91004658 212.93368530]
[18.54956627 204.94755554]
[31.61081314 199.57728577]
[45.51402283 197.06416321]
[46.12984848 182.07681274]
[46.74567413 167.08944702]
[38.32015228 179.49955750]
[27.60866165 190.00021362]
[15.03354740 198.17741394]
[1.09063995 203.70872498]
[-13.67030239 206.37603760]
[-28.66726494 206.07420349]
[-43.30892944 202.81510925]
[-57.01798248 196.72726440]
[-69.25388336 188.05070496]
[-79.53418732 177.12753296]
[-87.45353699 164.38847351]
[-92.69968414 150.33578491]
[-95.06578064 135.52357483]
[-94.45852661 120.53587341]
[-90.90187073 105.96363068]
[-84.53604126 92.38143158]
[-75.61204529 80.32479858]
[-64.48175049 70.26913452]
[-51.58401489 62.61090851]
[-37.42738724 57.65208817]
[-22.57005310 55.58819962]
[-7.59782887 56.50061798]
[6.89894104 60.35336304]
[20.34865952 66.99452972]
[32.22101212 76.16226196]
[42.04787827 87.49507141]
[49.44179535 100.54612732]
[54.11122513 114.80082703]
[55.87205124 129.69711304]
[54.65591812 144.64181519]
[63.57206726 132.57937622]
[72.48822021 120.51695251]
[81.40437317 108.45452118]
[76.44732666 66.97076416]
[78.90025330 52.17268372]
[81.35317993 37.37460709]
[70.63295746 26.31191826]
[68.50721741 11.23429966]
[75.58362579 -2.04682922]
[88.96343994 -8.53671837]
[91.41636658 -23.33479691]
[93.86929321 -38.13287735]
[96.32221985 -52.93095398]
[98.77514648 -67.72903442]
[101.22808075 -82.52711487]
[87.79028320 -89.47555542]
[77.15880585 -100.23784637]
[70.37521362 -113.75960541]
[68.10409546 -128.71611023]
[70.56794739 -143.64208984]
[77.52538300 -157.07522583]
[88.29479980 -167.69949341]
[101.82110596 -174.47401428]
[116.77912903 -176.73512268]
[131.70344543 -174.26126099]
[145.13192749 -167.29481506]
[155.74896240 -156.51829529]
[162.51443481 -142.98745728]
[164.76550293 -128.02790833]
[162.28164673 -113.10525513]
[155.30621338 -99.68144989]
[144.52256775 -89.07163239]
[130.98719788 -82.31523895]
[116.02615356 -80.07418823]
[113.57322693 -65.27610779]
[111.12030029 -50.47802734]
[108.66737366 -35.67994690]
[106.21444702 -20.88187027]
[103.76151276 -6.08379078]
[114.33174133 4.37605381]
[116.74446869 19.23010254]
[109.86755371 32.81544113]
[96.15126038 39.82753372]
[93.69833374 54.62561417]
[91.24540710 69.42369080]
[96.35475922 74.91409302]
[107.33573151 64.69556427]
[117.55406952 75.67671204]
[106.57346344 85.89489746]
[111.68281555 91.38529968]
[126.61882782 90.00127411]
[141.55484009 88.61724854]
[149.36225891 75.20740509]
[163.57424927 68.97852325]
[178.72601318 72.32572937]
[188.99137878 83.96195984]
[190.42311096 99.41284180]
[182.47068787 112.73719788]
[168.19195557 118.81153870]
[153.07740784 115.30016327]
[142.93887329 103.55326080]
[128.00285339 104.93728638]
[113.06684113 106.32131195]
[125.83973694 114.18599701]
[128.64820862 128.92073059]
[119.66378784 140.93240356]
[104.73583221 142.40075684]
[93.58324432 132.36981201]
[93.46680450 117.37066650]
[84.55065155 129.43310547]
[75.63449860 141.49552917]
[66.71834564 153.55796814]
[61.73302460 167.70527649]
[61.11720276 182.69262695]
[60.50137711 197.67999268]
[75.91507721 202.03230286]
[89.84806824 209.91444397]
[101.50608063 220.87246704]
[110.22561646 234.27729797]
[115.51171875 249.36068726]
[117.06605530 265.25933838]
[114.80376434 281.06433105]
[108.85807037 295.87298584]
[99.57244110 308.84054565]
[87.48077393 319.22824097]
[73.27664948 326.44546509]
[57.77361679 330.08334351]
[57.77361679 345.08334351]
[57.77361679 360.08334351]
[57.77361679 375.08334351]
[57.77361679 390.08334351]
[57.77361679 405.08334351]
[57.77361679 420.08334351]
[57.77361679 435.08334351]
[57.77361679 450.08334351]
[57.77361679 465.08334351]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 152]
[2 151]
[3 150]
[4 149]
[5 148]
[6 147]
[7 146]
[8 145]
[9 144]
[10 143]
[24 131]
[25 130]
[26 129]
[56 128]
[57 127]
[58 126]
[59 125]
[60 101]
[61 100]
[62 99]
[66 95]
[67 94]
[68 93]
[69 92]
[70 91]
[71 90]
[106 119]
[107 118]
[108 117]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
