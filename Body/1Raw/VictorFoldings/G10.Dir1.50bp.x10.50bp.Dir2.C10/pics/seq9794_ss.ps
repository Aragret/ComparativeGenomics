%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:30 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGAGCCUAAUUAUUAGCAUCAUCCCUCUACUAUUUUUUAACCAAAUCAACAACAACCUAUUUxxxxxxxxxxUAGCUAAAGUGAACUGUAUCCGACAUCUGGUUCCUACUUCAGGGUCAUAAAGCCUAAAUACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[126.33244324 325.37310791]
[126.02038574 310.37637329]
[125.70832825 295.37960815]
[125.39627075 280.38287354]
[125.08421326 265.38610840]
[124.77216339 250.38935852]
[124.46010590 235.39259338]
[124.14804840 220.39584351]
[123.83599091 205.39909363]
[121.35087585 190.60638428]
[116.74530792 176.33091736]
[105.47399139 166.59405518]
[108.60038757 151.08482361]
[103.99481964 136.80935669]
[99.38925934 122.53390503]
[89.48960876 120.82971191]
[80.99370575 114.85081482]
[75.70784760 105.51029968]
[74.90522766 94.46328735]
[79.03251648 83.81533051]
[87.56874847 75.72111511]
[75.86912537 66.33395386]
[64.16950226 56.94679260]
[52.46987534 47.55963135]
[40.77025223 38.17246628]
[30.18305016 48.81874847]
[18.52418137 58.27934265]
[5.92574739 66.44705963]
[-7.46950006 73.22934723]
[-21.50978279 78.54936218]
[-36.03601456 82.34681702]
[-50.88360214 84.57869720]
[-65.88430786 85.21969604]
[-80.86816406 84.26256561]
[-95.66539764 81.71814728]
[-110.10833740 77.61527252]
[-124.03333282 72.00041962]
[-137.28260803 64.93721771]
[-149.70603943 56.50569916]
[-161.16285706 46.80139542]
[-171.52323914 35.93426895]
[-180.66979980 24.02744675]
[-188.49891663 11.21584511]
[-194.92185974 -2.35537004]
[-199.86585999 -16.53242683]
[-203.27490234 -31.15468979]
[-205.11035156 -46.05647659]
[-205.35140991 -61.06893539]
[-203.99534607 -76.02197266]
[-201.05754089 -90.74614716]
[-196.57125854 -105.07463074]
[-190.58735657 -118.84506226]
[-183.17361450 -131.90142822]
[-174.41404724 -144.09577942]
[-164.40789795 -155.28993225]
[-153.26856995 -165.35707092]
[-141.12225342 -174.18312073]
[-128.10658264 -181.66806030]
[-114.36903381 -187.72709656]
[-100.06526947 -192.29158020]
[-85.35736084 -195.30976868]
[-70.41195679 -196.74748230]
[-55.39840317 -196.58843994]
[-40.48681641 -194.83441162]
[-25.84614944 -191.50529480]
[-11.64229774 -186.63880920]
[1.96379864 -180.29008484]
[14.81797314 -172.53108215]
[26.77457809 -163.44967651]
[37.69813538 -153.14880371]
[47.46487427 -141.74517822]
[55.96413040 -129.36798096]
[63.09959412 -116.15749359]
[68.79042816 -102.26337433]
[72.97213745 -87.84305573]
[75.59734344 -73.05995178]
[76.63630676 -58.08154297]
[76.07724762 -43.07755661]
[73.92650604 -28.21800041]
[70.20845032 -13.67124367]
[64.96520996 0.39788961]
[58.25619125 13.82998371]
[50.15741348 26.47284508]
[61.85703659 35.86000443]
[73.55666351 45.24716949]
[85.25628662 54.63433075]
[96.95590973 64.02149200]
[111.83918762 65.88910675]
[125.49542999 59.68369675]
[139.15167236 53.47829056]
[152.67585754 46.99012375]
[166.06214905 40.22201157]
[179.44842529 33.45389557]
[192.83471680 26.68578148]
[205.92787170 19.36667442]
[218.70523071 11.50924969]
[231.48258972 3.65182376]
[236.58709717 -11.55749702]
[251.70956421 -16.91387558]
[265.24929810 -8.30835629]
[266.81979370 7.65764189]
[255.21629333 18.73637199]
[239.34001160 16.42918205]
[226.56265259 24.28660774]
[213.78529358 32.14403152]
[213.02380371 34.90581894]
[211.08671570 37.52147675]
[208.02807617 39.52811813]
[204.07324219 40.49266434]
[199.60282898 40.07206726]
[186.21655273 46.84017944]
[172.83026123 53.60829544]
[159.44396973 60.37641144]
[157.11514282 64.61339569]
[152.06808472 67.39881897]
[145.35707092 67.13452911]
[131.70083618 73.33993530]
[118.04459381 79.54534912]
[124.84273529 93.42417145]
[122.81572723 107.82487488]
[113.66471863 117.92833710]
[118.27027893 132.20379639]
[122.87584686 146.47926331]
[134.47659302 157.23719788]
[131.02076721 171.72535706]
[135.62632751 186.00082397]
[139.71598816 171.56909180]
[148.93302917 159.73498535]
[161.92408752 152.23616028]
[176.78161621 150.17370605]
[191.32402039 153.85044861]
[203.41596985 162.72653198]
[211.28193665 175.49864197]
[213.76692200 190.29136658]
[210.50605774 204.93263245]
[201.97814941 217.27259827]
[189.43537903 225.49931335]
[174.71946716 228.40483093]
[159.99122620 225.56250000]
[147.41326904 217.38967896]
[138.83274841 205.08703613]
[139.14480591 220.08378601]
[139.45686340 235.08053589]
[139.76892090 250.07730103]
[140.08096313 265.07403564]
[140.39302063 280.07080078]
[140.70507812 295.06756592]
[141.01713562 310.06430054]
[141.32919312 325.06106567]
[143.92019653 344.26879883]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 149]
[2 148]
[3 147]
[4 146]
[5 145]
[6 144]
[7 143]
[8 142]
[9 141]
[10 126]
[11 125]
[13 123]
[14 122]
[15 121]
[21 87]
[22 86]
[23 85]
[24 84]
[25 83]
[88 118]
[89 117]
[90 116]
[91 113]
[92 112]
[93 111]
[94 110]
[95 105]
[96 104]
[97 103]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
