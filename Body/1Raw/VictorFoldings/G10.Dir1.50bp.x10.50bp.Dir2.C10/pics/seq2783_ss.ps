%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:46 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGGCUGUCUCUUACUUUUAACCAGUGAAAUUGACCUGCCCGUGAAGAGGCGGGCAUAACACAxxxxxxxxxxCAUCCCCCUUCCAAACAACAAUCCCCCUCUACCUAAAACUCACAGCCCUCGCUGUCACUUCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[128.78813171 295.50115967]
[128.16415405 280.51412964]
[127.54017639 265.52709961]
[126.91619873 250.54010010]
[126.29222107 235.55308533]
[125.66824341 220.56607056]
[125.04426575 205.57905579]
[124.42028809 190.59202576]
[121.93517303 175.79933167]
[117.62758636 161.43113708]
[113.31999969 147.06295776]
[109.01242065 132.69477844]
[104.70483398 118.32659149]
[91.11388397 111.97946167]
[77.33149719 117.89942169]
[63.54911804 123.81938934]
[57.61941147 138.22341919]
[43.55778503 144.03077698]
[29.86227798 138.28894043]
[16.07989693 144.20889282]
[2.42365599 150.41430664]
[-11.10053444 156.90246582]
[-24.62472343 163.39064026]
[-28.33040047 178.58280945]
[-40.96498108 187.79699707]
[-56.56280136 186.68255615]
[-67.75904846 175.76570129]
[-69.26719666 160.20100403]
[-60.37514877 147.33767700]
[-45.28145218 143.24935913]
[-31.11288834 149.86643982]
[-17.58869934 143.37828064]
[-4.06450939 136.89012146]
[-1.64802909 132.70249939]
[3.45587420 130.02267456]
[10.15993404 130.42651367]
[23.94231606 124.50655365]
[29.20710564 110.62068176]
[43.10006714 104.42066193]
[57.62915802 110.03700256]
[71.41153717 104.11704254]
[85.19391632 98.19708252]
[70.40217590 95.70621490]
[61.09923553 83.93951416]
[62.08821487 68.97215271]
[72.85851288 58.53181076]
[87.84939575 58.00886154]
[99.32103729 67.67330170]
[101.35012817 82.53736115]
[107.69725800 68.94641113]
[114.04438782 55.35545731]
[120.39151764 41.76450729]
[125.44027710 27.63970375]
[129.14643860 13.10476780]
[132.85260010 -1.43016791]
[136.55876160 -15.96510410]
[140.26492310 -30.50004005]
[139.35305786 -39.65538788]
[144.20233154 -45.29721451]
[148.21006775 -59.75190353]
[152.21780396 -74.20659637]
[138.47502136 -80.28553009]
[125.76381683 -88.30072784]
[114.35516357 -98.08134460]
[104.49223328 -109.41890717]
[96.38523865 -122.07175446]
[90.20700073 -135.77018738]
[86.08919525 -150.22222900]
[84.11959839 -165.11984253]
[84.34019470 -180.14546204]
[86.74626923 -194.97882080]
[91.28655243 -209.30375671]
[97.86426544 -222.81491089]
[106.33919525 -235.22431946]
[116.53070831 -246.26747131]
[128.22155762 -255.70895386]
[141.16256714 -263.34756470]
[155.07789612 -269.02044678]
[169.67092896 -272.60668945]
[184.63063049 -274.02984619]
[199.63810730 -273.25961304]
[214.37350464 -270.31240845]
[228.52272034 -265.25100708]
[241.78414917 -258.18334961]
[253.87515259 -249.26002502]
[264.53799438 -238.67127991]
[273.54541016 -226.64277649]
[280.70538330 -213.43093872]
[285.86529541 -199.31736755]
[288.91519165 -184.60289001]
[289.79003906 -169.60113525]
[288.47119141 -154.63188171]
[284.98678589 -140.01419067]
[279.41107178 -126.05965424]
[271.86288452 -113.06569672]
[262.50314331 -101.30929565]
[251.53132629 -91.04103851]
[239.18130493 -82.47978973]
[225.71633911 -75.80802917]
[211.42341614 -71.16797638]
[196.60717773 -68.65853119]
[181.58346558 -68.33317566]
[166.67250061 -70.19885254]
[162.66476440 -55.74416351]
[158.65701294 -41.28947449]
[154.79985046 -26.79387856]
[151.09370422 -12.25894260]
[147.38754272 2.27599335]
[143.68138123 16.81093025]
[139.97521973 31.34586525]
[152.25405884 22.73018265]
[167.23490906 21.97253990]
[180.32034302 29.30544662]
[187.49459839 42.47852707]
[186.55598450 57.44913483]
[177.79255676 69.62297821]
[163.89370728 75.26405334]
[149.12480164 72.64119720]
[138.01823425 62.55932617]
[133.98246765 48.11163712]
[127.63534546 61.70258713]
[121.28821564 75.29354095]
[114.94108582 88.88449097]
[119.07302094 114.01900482]
[123.38059998 128.38719177]
[127.68818665 142.75537109]
[131.99577332 157.12355042]
[136.30335999 171.49174500]
[141.17117310 157.30355835]
[151.62699890 146.54830933]
[165.67211914 141.28195190]
[180.62167358 142.51119995]
[193.61788940 150.00108337]
[202.17642212 162.31983948]
[204.66122437 177.11259460]
[200.59729004 191.55158997]
[190.76148987 202.87666321]
[177.03404236 208.92289734]
[162.03907776 208.53451538]
[148.64302063 201.78576660]
[139.40730286 189.96806335]
[140.03128052 204.95507812]
[140.65525818 219.94209290]
[141.27923584 234.92910767]
[141.90321350 249.91612244]
[142.52719116 264.90313721]
[143.15116882 279.89016724]
[143.77514648 294.87716675]
[150.47514343 310.45108032]
[137.36460876 321.20050049]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 148]
[2 147]
[3 146]
[4 145]
[5 144]
[6 143]
[7 142]
[8 141]
[9 128]
[10 127]
[11 126]
[12 125]
[13 124]
[14 42]
[15 41]
[16 40]
[19 37]
[20 36]
[21 33]
[22 32]
[23 31]
[49 123]
[50 122]
[51 121]
[52 120]
[53 110]
[54 109]
[55 108]
[56 107]
[57 106]
[59 105]
[60 104]
[61 103]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
