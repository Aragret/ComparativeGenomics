%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:43 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCGACAAACCUACCGAGCCUGGUGAUAGCUGGUUGUCCAAGAUAGAAUCUUAGUUCAACUUUAAAUxxxxxxxxxxUAUCACACAUCAACUGCAACUCCAAAGCCACCCCUCACCCACUAGGAUACCAACAAACCUACCCACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[113.08607483 253.19540405]
[113.08607483 238.19540405]
[113.08607483 223.19540405]
[113.08607483 208.19540405]
[113.08607483 193.19540405]
[113.08607483 178.19540405]
[113.08607483 163.19540405]
[113.08607483 148.19540405]
[113.08607483 133.19540405]
[113.08607483 118.19540405]
[98.95216370 113.17220306]
[89.48583984 124.80787659]
[95.03221893 139.13035583]
[92.65843201 154.30468750]
[83.00300598 166.24908447]
[68.66322327 171.75053406]
[53.49639130 169.32919312]
[41.58232498 159.63638306]
[36.12584686 145.27941895]
[38.59471512 130.12025452]
[48.32482529 118.23663330]
[62.69882202 112.82518005]
[77.85017395 115.34156036]
[87.31649017 103.70588684]
[91.92389679 89.43102264]
[83.39246368 76.10716248]
[90.37189484 62.94901657]
[89.49431610 47.97471237]
[88.61672974 33.00040436]
[87.15557861 18.07174110]
[85.11307526 3.21145105]
[83.07057953 -11.64883804]
[81.02807617 -26.50912666]
[78.98558044 -41.36941528]
[76.36484528 -56.13870239]
[65.86567688 -67.97415924]
[70.71453094 -82.05740356]
[67.51955414 -96.71319580]
[64.32457733 -111.36898041]
[60.56021881 -125.88895416]
[56.23221207 -140.25100708]
[51.90420914 -154.61305237]
[47.57620239 -168.97509766]
[43.24819946 -183.33714294]
[38.92019653 -197.69918823]
[32.49171448 -194.52853394]
[24.31744576 -193.93278503]
[15.38762093 -196.55978394]
[2.49590111 -204.22811890]
[-10.39581871 -211.89646912]
[-23.28753853 -219.56481934]
[-36.17925644 -227.23316956]
[-52.88319778 -230.13398743]
[-54.71985626 -246.98815918]
[-39.03279114 -253.41873169]
[-28.51091003 -240.12489319]
[-15.61919022 -232.45654297]
[-2.72747040 -224.78819275]
[10.16424942 -217.11984253]
[23.05596924 -209.45149231]
[36.09485626 -216.86685181]
[36.09485626 -231.86685181]
[36.09485626 -246.86685181]
[36.09485626 -261.86685181]
[21.30654716 -264.62738037]
[7.27736902 -270.05847168]
[-5.51484919 -277.97515869]
[-16.63440895 -288.10778809]
[-25.70258331 -300.11123657]
[-32.41051102 -313.57669067]
[-36.52972412 -328.04550171]
[-37.91992569 -343.02487183]
[-36.53376389 -358.00463867]
[-32.41844940 -372.47457886]
[-25.71415138 -385.94183350]
[-16.64921188 -397.94772339]
[-5.53238440 -408.08334351]
[7.25769949 -416.00347900]
[21.28541374 -421.43835449]
[36.07297897 -424.20285034]
[51.11673737 -424.20285034]
[65.90430450 -421.43835449]
[79.93201447 -416.00347900]
[92.72209930 -408.08334351]
[103.83892822 -397.94772339]
[112.90386200 -385.94183350]
[119.60816193 -372.47457886]
[123.72348022 -358.00463867]
[125.10964203 -343.02487183]
[123.71943665 -328.04550171]
[119.60022736 -313.57669067]
[112.89229584 -300.11123657]
[103.82412720 -288.10778809]
[92.70456696 -277.97515869]
[79.91234589 -270.05847168]
[65.88317108 -264.62738037]
[51.09485626 -261.86685181]
[51.09485626 -246.86685181]
[51.09485626 -231.86685181]
[51.09485626 -216.86685181]
[53.28224182 -202.02719116]
[57.61024475 -187.66514587]
[61.93825150 -173.30310059]
[66.26625824 -158.94105530]
[70.59426117 -144.57901001]
[74.92226410 -130.21696472]
[77.38155365 -128.77406311]
[79.40215302 -126.24541473]
[80.55828094 -122.79882812]
[80.49493408 -118.75625610]
[78.98036194 -114.56395721]
[82.17533875 -99.90817261]
[85.37032318 -85.25238800]
[95.64096069 -74.46520996]
[91.02062988 -59.33367920]
[93.35992432 -57.70341110]
[95.17720795 -55.02492142]
[96.06108093 -51.49867630]
[95.68270874 -47.47335052]
[93.84586334 -43.41191483]
[95.88836670 -28.55162621]
[97.93086243 -13.69133759]
[99.97336578 1.16895127]
[102.01586151 16.02923965]
[104.22092438 17.83694649]
[105.82382202 20.64898109]
[106.43005371 24.23340607]
[105.73896790 28.21697617]
[103.59103394 32.12282181]
[104.46862030 47.09712601]
[105.34620667 62.07143402]
[113.81486511 74.32422638]
[106.89820862 88.55343628]
[113.30712128 74.99151611]
[119.86418915 61.50059509]
[130.21334839 50.64265442]
[143.37431335 43.44618607]
[158.10041809 40.59285355]
[172.99681091 42.35293198]
[186.65242004 48.55970383]
[197.77378845 58.62524796]
[205.30746460 71.59613037]
[208.53984070 86.24371338]
[207.16471863 101.18054962]
[201.31237793 114.99178314]
[191.53715515 126.36917877]
[178.76498413 134.23503113]
[164.20568848 137.84428406]
[149.23834229 136.85505676]
[135.27745056 131.35914612]
[128.08607483 118.19540405]
[128.08607483 133.19540405]
[128.08607483 148.19540405]
[128.08607483 163.19540405]
[128.08607483 178.19540405]
[128.08607483 193.19540405]
[128.08607483 208.19540405]
[128.08607483 223.19540405]
[128.08607483 238.19540405]
[128.08607483 253.19540405]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 160]
[2 159]
[3 158]
[4 157]
[5 156]
[6 155]
[7 154]
[8 153]
[9 152]
[10 151]
[11 24]
[12 23]
[25 133]
[27 131]
[28 130]
[29 129]
[30 124]
[31 123]
[32 122]
[33 121]
[34 120]
[35 115]
[37 113]
[38 112]
[39 111]
[40 106]
[41 105]
[42 104]
[43 103]
[44 102]
[45 101]
[48 60]
[49 59]
[50 58]
[51 57]
[52 56]
[61 100]
[62 99]
[63 98]
[64 97]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
