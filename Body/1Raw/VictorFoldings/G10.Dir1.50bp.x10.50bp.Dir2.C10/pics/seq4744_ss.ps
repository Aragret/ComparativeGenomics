%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:08 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCCUAGAAAUAAACAUGCUAGCUUUUAUUCCAGUUCUAACCAAAAAAAUAAACCCUCGUUCCxxxxxxxxxxGUCCCUAACAAACUAGGAGGCGUCCUUGCCCUAUUACUAUCCAUCCUCAUCCUAGCAAUAACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[92.54679871 256.77487183]
[92.54679871 241.77488708]
[92.54679871 226.77488708]
[92.54679871 211.77488708]
[92.54679871 196.77488708]
[92.54679871 181.77488708]
[92.54679871 166.77488708]
[92.54679871 151.77488708]
[92.54679871 136.77488708]
[92.54679871 121.77487946]
[86.21104431 117.76138306]
[85.59530640 132.74873352]
[72.30805206 139.70925903]
[59.63638687 131.68249512]
[60.25184631 116.69512939]
[73.53952789 109.73439026]
[67.20376587 105.72088623]
[53.64187241 112.12986755]
[40.07997513 118.53884125]
[26.51807785 124.94781494]
[12.95618248 131.35679626]
[-0.60571426 137.76576233]
[-1.78578627 153.07925415]
[-10.47773933 165.74201965]
[-24.34348106 172.34782410]
[-39.65319824 171.11976624]
[-52.28865433 162.38816833]
[-58.85097122 148.50178528]
[-57.57492065 133.19598389]
[-48.80375671 120.58796692]
[-34.89687347 114.06920624]
[-19.59515762 115.39322662]
[-7.01468992 124.20387268]
[6.54720640 117.79489136]
[20.10910225 111.38591766]
[33.67099762 104.97694397]
[47.23289490 98.56797028]
[60.79479218 92.15898895]
[72.62177277 84.76708984]
[84.49554443 83.44770050]
[93.99440002 87.32180786]
[88.86409760 73.22641754]
[83.73379517 59.13103104]
[78.60349274 45.03564072]
[63.94763947 48.32718658]
[48.99119186 49.71750641]
[33.97974777 49.18376923]
[19.15981102 46.73473740]
[4.77473402 42.41062927]
[-8.93926334 36.28244781]
[-21.75698662 28.45082474]
[-33.46795654 19.04436302]
[-43.87986755 8.21752453]
[-52.82174683 -3.85190368]
[-60.14676285 -16.96573067]
[-65.73462677 -30.90861702]
[-69.49359131 -45.45160675]
[-71.36192322 -60.35588837]
[-71.30893707 -75.37672424]
[-69.33551788 -90.26745605]
[-65.47406006 -104.78356934]
[-59.78797150 -118.68669128]
[-52.37062836 -131.74851990]
[-43.34382629 -143.75456238]
[-32.85580063 -154.50769043]
[-21.07876396 -163.83129883]
[-8.20611286 -171.57231140]
[5.55077314 -177.60359192]
[19.96599579 -181.82611084]
[34.80284119 -184.17054749]
[49.81767654 -184.59837341]
[64.76394653 -183.10258484]
[79.39621735 -179.70773315]
[93.47421265 -174.46955872]
[106.76675415 -167.47410583]
[119.05558014 -158.83621216]
[130.13888550 -148.69773865]
[139.83468628 -137.22517395]
[147.98374939 -124.60688782]
[154.45227051 -111.05009460]
[159.13403320 -96.77741241]
[161.95214844 -82.02320862]
[162.86035156 -67.02976227]
[161.84371948 -52.04327393]
[158.91896057 -37.30984116]
[154.13407898 -23.07139587]
[147.56767273 -9.56174946]
[139.32754517 2.99725866]
[129.54902649 14.39939785]
[118.39266968 24.45743561]
[106.04168701 33.00621033]
[92.69888306 39.90533829]
[97.82918549 54.00072861]
[102.95948792 68.09611511]
[108.08979034 82.19150543]
[120.84304810 90.08798981]
[135.74749756 88.39759064]
[150.65194702 86.70719147]
[165.55639648 85.01679993]
[180.10334778 81.35809326]
[194.03405762 75.79615784]
[207.96478271 70.23421478]
[221.89549255 64.67227936]
[231.61425781 51.46328735]
[247.88085938 53.54416656]
[253.96159363 68.77429199]
[243.60113525 81.48621368]
[227.45742798 78.60299683]
[213.52671814 84.16493225]
[199.59599304 89.72686768]
[185.66528320 95.28881073]
[200.30072021 98.57575989]
[212.40028381 107.44145966]
[219.94453430 120.40618896]
[221.67431641 135.30612183]
[217.30091858 149.65441895]
[207.55429077 161.05630493]
[194.06115723 167.60879517]
[179.07354736 168.21827698]
[165.09291077 162.78300476]
[154.45268250 152.21012878]
[148.92871094 138.26431274]
[149.44297791 123.27313995]
[155.90963745 109.73864746]
[167.24678040 99.92124176]
[152.34234619 101.61164093]
[137.43789673 103.30204010]
[122.53344727 104.99243927]
[136.42375183 110.65454865]
[150.31405640 116.31665802]
[165.28393555 117.26670837]
[178.37040710 124.59774017]
[186.99899292 136.86752319]
[189.47216797 151.66223145]
[185.30340576 166.07130432]
[175.31282043 177.26005554]
[161.46585083 183.02731323]
[146.48660278 182.23851013]
[133.32194519 175.04879761]
[124.56175232 162.87263489]
[121.92956543 148.10235596]
[114.73818207 134.93861389]
[107.54679871 121.77487946]
[107.54679871 136.77488708]
[107.54679871 151.77488708]
[107.54679871 166.77488708]
[107.54679871 181.77488708]
[107.54679871 196.77488708]
[107.54679871 211.77488708]
[107.54679871 226.77488708]
[107.54679871 241.77488708]
[107.54679871 256.77487183]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 152]
[2 151]
[3 150]
[4 149]
[5 148]
[6 147]
[7 146]
[8 145]
[9 144]
[10 143]
[17 38]
[18 37]
[19 36]
[20 35]
[21 34]
[22 33]
[41 95]
[42 94]
[43 93]
[44 92]
[96 128]
[97 127]
[98 126]
[99 125]
[100 111]
[101 110]
[102 109]
[103 108]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
