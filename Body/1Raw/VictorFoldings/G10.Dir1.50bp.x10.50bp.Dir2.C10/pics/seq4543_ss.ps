%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:31 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGUGAGAAUCGAACCCAUCCCUGAGAAUCCAAAAUUCUCCGUGCCACCUAUCACACCCCAUCCxxxxxxxxxxAGGAGCUUAAACCCCCUUAUUUCUAGGACUAUGAGAAUCGAACCCAUCCCUGAGAAUCCAACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[176.81393433 502.21282959]
[176.81393433 487.21282959]
[176.81393433 472.21282959]
[176.81393433 457.21282959]
[176.81393433 442.21282959]
[176.81393433 427.21282959]
[176.81393433 412.21282959]
[176.81393433 397.21282959]
[176.81393433 382.21282959]
[176.81393433 367.21282959]
[174.51306152 352.39035034]
[169.96575928 338.09622192]
[164.90979004 332.64193726]
[165.47511292 323.46173096]
[152.30722046 316.59570312]
[147.78932190 302.06838989]
[155.08032227 288.30322266]
[150.82746887 273.91876221]
[146.57463074 259.53427124]
[142.32177734 245.14979553]
[129.15390015 238.28376770]
[124.63598633 223.75643921]
[131.92698669 209.99130249]
[127.52668762 195.65124512]
[122.97940063 181.35711670]
[117.99407959 167.20979309]
[112.57545471 153.22271729]
[107.15682983 139.23562622]
[86.30454254 137.45782471]
[69.22322845 125.36621857]
[60.61613846 106.29015350]
[45.62325287 105.82823181]
[30.63036537 105.36630249]
[15.63747978 104.90438080]
[0.64459378 104.44245148]
[-14.34829235 103.98052216]
[-26.97430420 113.87817383]
[-42.55092239 110.03778076]
[-49.12909317 95.40538025]
[-41.66261292 81.20568848]
[-25.87912369 78.33149719]
[-13.88636589 88.98764038]
[1.10651970 89.44956207]
[16.09940529 89.91149139]
[31.09229088 90.37342072]
[46.08517838 90.83534241]
[61.07806396 91.29727173]
[63.80423355 83.25122833]
[68.17266846 75.96511841]
[73.98516083 69.76950073]
[80.97799683 64.94549561]
[76.43070984 50.65136719]
[65.32388306 44.01493835]
[61.85215378 31.96842766]
[67.36003113 21.15521812]
[63.10718536 6.77073765]
[58.85433960 -7.61374331]
[43.79528046 -6.91503429]
[29.00673676 -9.84118748]
[15.34849072 -16.22207832]
[3.61461854 -25.68673325]
[-5.51268959 -37.68488693]
[-11.50278378 -51.51898193]
[-14.00740719 -66.38472748]
[-12.88094521 -81.41783905]
[-8.18888855 -95.74431610]
[-0.20402630 -108.53124237]
[10.60941124 -119.03519440]
[23.62274551 -126.64548492]
[38.07939529 -130.91967773]
[53.13887405 -131.60925293]
[67.92564392 -128.67413330]
[81.58001709 -122.28496552]
[93.30815125 -112.81319427]
[102.42818451 -100.80950928]
[108.40988922 -86.97178650]
[110.90550232 -72.10453033]
[109.76992035 -57.07210159]
[105.06918335 -42.74846649]
[97.07656860 -29.96638870]
[86.25676727 -19.46899414]
[73.23882294 -11.86658955]
[77.49166870 2.51789117]
[81.74451447 16.90237236]
[95.09948730 28.24650002]
[90.72483826 46.10407639]
[95.27212524 60.39820862]
[105.22963715 60.46134186]
[114.86114502 62.98917770]
[123.56626129 67.82414246]
[134.54707336 57.60543442]
[145.52786255 47.38672638]
[143.51901245 32.00023270]
[150.96733093 18.38765526]
[165.00877380 11.78330612]
[180.24412537 14.72669125]
[190.81509399 26.08602142]
[192.65692139 41.49340057]
[185.06137085 55.02437592]
[170.94911194 61.47601700]
[155.74658203 58.36753082]
[144.76577759 68.58623505]
[133.78497314 78.80494690]
[139.32675171 93.36214447]
[138.87001038 108.93182373]
[132.48439026 123.13912964]
[121.14391327 133.81700134]
[126.56253815 147.80409241]
[131.98115540 161.79116821]
[136.14958191 165.13475037]
[138.35591125 169.33447266]
[138.60647583 173.48258972]
[137.27352905 176.80981445]
[141.82081604 191.10395813]
[147.43795776 198.38705444]
[146.31147766 205.73844910]
[159.91546631 213.32588196]
[164.02354431 227.97436523]
[156.70626831 240.89694214]
[160.95910645 255.28143311]
[165.21195984 269.66589355]
[169.46479797 284.05038452]
[183.06880188 291.63781738]
[187.17687988 306.28631592]
[179.85958862 319.20889282]
[184.25988770 333.54895020]
[188.80718994 347.84307861]
[192.74385071 333.36886597]
[201.56274414 321.23513794]
[214.11491394 313.02276611]
[228.76498413 309.80169678]
[243.60427856 311.99154663]
[256.69946289 319.30703735]
[266.34439087 330.79507446]
[271.28253174 344.95892334]
[270.87048340 359.95324707]
[265.16195679 373.82455444]
[254.90065002 384.76556396]
[241.42349243 391.35083008]
[226.48632812 392.72244263]
[212.03526306 388.70166016]
[199.95304871 379.81231689]
[191.81393433 367.21282959]
[191.81393433 382.21282959]
[191.81393433 397.21282959]
[191.81393433 412.21282959]
[191.81393433 427.21282959]
[191.81393433 442.21282959]
[191.81393433 457.21282959]
[191.81393433 472.21282959]
[191.81393433 487.21282959]
[191.81393433 502.21282959]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 152]
[2 151]
[3 150]
[4 149]
[5 148]
[6 147]
[7 146]
[8 145]
[9 144]
[10 143]
[11 127]
[12 126]
[14 125]
[17 122]
[18 121]
[19 120]
[20 119]
[23 116]
[24 114]
[25 113]
[26 109]
[27 108]
[28 107]
[31 47]
[32 46]
[33 45]
[34 44]
[35 43]
[36 42]
[51 87]
[52 86]
[55 84]
[56 83]
[57 82]
[90 103]
[91 102]
[92 101]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
