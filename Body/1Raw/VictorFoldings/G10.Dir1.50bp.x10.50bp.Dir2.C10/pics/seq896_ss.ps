%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:08 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCAUCACCCCAUAAACAAAUAGGUUUGGUCCUAGCCUUUCUAUUAGCUCUUAGUAAGAUUACxxxxxxxxxxAUCAUAUUUUAUAUCUUCUUCGAAACCACACUUAUCCCCACCUUGGCUAUCAUCACCCGAUCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[132.81750488 624.11578369]
[132.81750488 609.11578369]
[132.81750488 594.11578369]
[132.81750488 579.11578369]
[132.81750488 564.11578369]
[132.81750488 549.11578369]
[132.81750488 534.11578369]
[132.81750488 519.11578369]
[132.81750488 504.11581421]
[132.81750488 489.11581421]
[117.37783813 486.17108154]
[102.79346466 480.29809570]
[89.61426544 471.71640015]
[78.33749390 460.74771118]
[69.38899994 447.80386353]
[63.10721588 433.37127686]
[59.73027420 417.99279785]
[59.38704300 402.24719238]
[62.09217453 386.72732544]
[67.74550629 372.01797485]
[76.13576508 358.67370605]
[86.94845581 347.19793701]
[99.77764130 338.02398682]
[114.14121246 331.49880981]
[129.49897766 327.86962891]
[128.88316345 312.88229370]
[128.26733398 297.89492798]
[126.57693481 282.99047852]
[123.82069397 268.24588013]
[121.06445312 253.50129700]
[118.30820465 238.75669861]
[115.55196381 224.01210022]
[112.79572296 209.26750183]
[102.85153198 198.17866516]
[107.92131805 183.19174194]
[105.16507721 168.44714355]
[102.40882874 153.70254517]
[99.65258789 138.95794678]
[82.47893524 134.79733276]
[68.90965271 123.47834015]
[61.73616028 107.32946777]
[62.43417358 89.67279816]
[49.00672531 82.98672485]
[35.57927322 76.30065155]
[22.82056046 84.85113525]
[7.49488401 85.86070251]
[-6.27522421 79.05778503]
[-14.78567410 66.27233124]
[-15.74719810 50.94356537]
[-8.90115070 37.19484711]
[3.91091537 28.72451591]
[19.24261856 27.81104469]
[32.96981049 34.70015335]
[41.39994049 47.53870773]
[42.26535034 62.87319946]
[55.69279861 69.55927277]
[69.12024689 76.24535370]
[75.09063721 70.04393005]
[82.27713013 65.30500793]
[90.32888031 62.25994492]
[98.85278320 61.05739594]
[101.30570984 46.25931931]
[99.61653900 37.21816254]
[103.96392059 31.18388748]
[106.72016144 16.43929100]
[109.47640228 1.69469392]
[112.23264313 -13.04990292]
[114.98889160 -27.79449844]
[101.21057129 -33.89815903]
[89.21161652 -43.01527405]
[79.63910675 -54.65416718]
[73.00928497 -68.18717194]
[69.67968750 -82.88446808]
[69.82987213 -97.95344543]
[73.45174408 -112.58145905]
[80.34997559 -125.97963715]
[90.15254974 -137.42543030]
[102.33083344 -146.30158997]
[116.22806549 -152.12942505]
[131.09478760 -154.59463501]
[146.12925720 -153.56431580]
[160.52067566 -149.09399414]
[173.49293518 -141.42475891]
[184.34646606 -130.97019958]
[192.49594116 -118.29413605]
[197.50187683 -104.08015442]
[199.09429932 -89.09479523]
[197.18734741 -74.14620972]
[191.88385010 -60.04055023]
[183.46981812 -47.53852081]
[172.39900208 -37.31433868]
[159.26844788 -29.91938019]
[144.78628540 -25.75244713]
[129.73348999 -25.03825569]
[126.97724152 -10.29366016]
[124.22100067 4.45093679]
[121.46475983 19.19553375]
[118.70851135 33.94012833]
[116.10379028 48.71224594]
[113.65086365 63.51032639]
[126.80702972 71.72942352]
[135.71322632 84.43053436]
[138.95744324 99.60002136]
[136.02536011 114.83292389]
[127.38182831 127.71421814]
[114.39718628 136.20170593]
[117.15342712 150.94630432]
[119.90966797 165.69090271]
[122.66591644 180.43550110]
[132.80725098 192.57896423]
[127.54032135 206.51126099]
[130.29655457 221.25585938]
[133.05281067 236.00045776]
[135.80905151 250.74505615]
[138.56529236 265.48965454]
[141.32153320 280.23425293]
[150.10440063 268.07443237]
[164.60543823 264.23779297]
[178.25257874 270.46319580]
[184.86073303 283.92916870]
[181.43498230 298.53274536]
[169.52792358 307.65533447]
[154.53602600 307.16250610]
[143.25468445 297.27911377]
[143.87051392 312.26644897]
[144.48634338 327.25381470]
[158.66517639 329.26437378]
[172.26808167 333.72985840]
[184.87358093 340.51052856]
[196.09138489 349.39505005]
[205.57437134 360.10690308]
[213.02943420 372.31307983]
[218.22642517 385.63436890]
[221.00538635 399.65722656]
[221.28135681 413.94653320]
[219.04704285 428.05911255]
[214.37297058 441.55758667]
[207.40528870 454.02368164]
[198.36116028 465.07150269]
[187.52203369 474.35916138]
[175.22486877 481.59967041]
[161.85163879 486.56951904]
[147.81750488 489.11581421]
[147.81750488 504.11581421]
[147.81750488 519.11578369]
[147.81750488 534.11578369]
[147.81750488 549.11578369]
[147.81750488 564.11578369]
[147.81750488 579.11578369]
[147.81750488 594.11578369]
[147.81750488 609.11578369]
[147.81750488 624.11578369]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 152]
[2 151]
[3 150]
[4 149]
[5 148]
[6 147]
[7 146]
[8 145]
[9 144]
[10 143]
[25 126]
[26 125]
[27 124]
[28 116]
[29 115]
[30 114]
[31 113]
[32 112]
[33 111]
[35 109]
[36 108]
[37 107]
[38 106]
[42 57]
[43 56]
[44 55]
[61 100]
[62 99]
[64 98]
[65 97]
[66 96]
[67 95]
[68 94]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
