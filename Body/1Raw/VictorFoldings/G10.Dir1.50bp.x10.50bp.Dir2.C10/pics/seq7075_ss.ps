%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:31 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGAUUUCCCCUAUUCUCAGGCUACACCCUAGACCAAACCUACGCCAAAAUCCAUUUCACUAUxxxxxxxxxxUCUGAAAUCUGUGGAGCAAACCACAGUUUCAUGCCCAUCGUCCUAGAAUUAAUUCCCCUACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[72.59955597 525.20355225]
[72.59955597 510.20358276]
[72.59955597 495.20358276]
[72.59955597 480.20358276]
[72.59955597 465.20358276]
[72.59955597 450.20358276]
[72.59955597 435.20358276]
[72.59955597 420.20358276]
[72.59955597 405.20358276]
[72.59955597 390.20358276]
[57.06752014 385.89093018]
[43.35181046 377.39559937]
[32.55316925 365.39022827]
[25.54078865 350.82946777]
[22.88235474 334.87420654]
[24.79809570 318.79882812]
[31.14256477 303.88955688]
[41.41564560 291.34155273]
[54.80197144 282.16302490]
[70.23563385 277.09420776]
[69.61165619 262.10720825]
[68.98767853 247.12017822]
[68.36370087 232.13316345]
[67.73972321 217.14614868]
[64.29682922 210.55128479]
[67.26194763 201.84152222]
[66.94989014 186.84477234]
[66.63783264 171.84802246]
[59.10574341 184.81982422]
[48.27930832 195.20193481]
[35.00343323 202.18414307]
[20.31417656 205.22152710]
[5.35789967 204.07705688]
[-8.69819450 198.84005737]
[-20.75715637 189.91920471]
[-29.87789726 178.01072693]
[-35.34862137 164.04393005]
[-36.74239349 149.10882568]
[-33.95044327 134.37095642]
[-27.19065094 120.98046112]
[-16.99056053 109.98236084]
[-4.14619637 102.23495483]
[10.34005833 98.34285736]
[25.33768272 98.60980225]
[39.67625046 103.01497650]
[52.23676682 111.21457672]
[62.03899765 122.56870270]
[68.31797028 136.19128418]
[70.58369446 151.02188110]
[76.35997009 137.17866516]
[82.13623810 123.33544922]
[70.07244873 109.43692780]
[68.18325806 89.93011475]
[78.53338623 71.89621735]
[69.02502441 60.29487610]
[59.51666641 48.69353485]
[43.75800705 45.68617249]
[36.41168976 31.42394638]
[43.11317825 16.84760857]
[58.72166443 13.13888168]
[71.26365662 23.14278221]
[71.11800385 39.18517303]
[80.62636566 50.78651428]
[90.13472748 62.38785553]
[105.10551453 61.45222855]
[113.09542847 48.75729752]
[99.53891754 55.17765808]
[84.61333466 56.66991425]
[70.05405426 53.06056595]
[57.55387878 44.76926804]
[48.56619263 32.76004028]
[44.13598633 18.42918968]
[44.77835846 3.44295144]
[50.41861343 -10.45623875]
[60.40097427 -21.65233231]
[73.56478882 -28.84357071]
[88.37952423 -31.19383240]
[103.12267303 -28.42985535]
[116.08006287 -20.87300491]
[125.74515533 -9.40191078]
[130.99418640 4.64969444]
[131.21687317 19.64804077]
[126.38592529 33.85182571]
[138.08555603 24.46466446]
[149.78517151 15.07750225]
[161.48480225 5.69034052]
[173.18441772 -3.69682145]
[177.95964050 -11.56124401]
[185.22648621 -13.15452671]
[197.11886597 -22.29626083]
[209.01124573 -31.43799591]
[220.90362549 -40.57973099]
[232.79600525 -49.72146225]
[244.68838501 -58.86319733]
[246.48890686 -74.56459045]
[258.91641235 -84.32843018]
[274.59790039 -82.36201477]
[284.22979736 -69.83197784]
[282.09768677 -54.17216110]
[269.46652222 -44.67327118]
[253.83012390 -46.97081757]
[241.93774414 -37.82908249]
[230.04536438 -28.68734932]
[218.15298462 -19.54561615]
[206.26060486 -10.40388107]
[194.36822510 -1.26214707]
[182.57157898 8.00280190]
[170.87196350 17.38996315]
[159.17233276 26.77712631]
[147.47271729 36.16428757]
[135.77308655 45.55144882]
[125.79035950 56.74721527]
[117.80044556 69.44214630]
[128.65762329 81.02841187]
[133.10682678 95.79927826]
[130.60450745 110.56329346]
[122.06641388 122.31114960]
[109.59593964 128.82899475]
[95.97945404 129.11172485]
[90.20318604 142.95494080]
[84.42691040 156.79815674]
[81.63459015 171.53596497]
[81.94664764 186.53271484]
[82.25869751 201.52946472]
[82.72674561 216.52217102]
[83.35072327 231.50918579]
[83.97470093 246.49620056]
[84.59867859 261.48321533]
[85.22264862 276.47024536]
[98.85264587 279.43026733]
[111.35881042 285.58309937]
[122.00621796 294.56179810]
[130.17045593 305.83355713]
[135.37426758 318.73126221]
[137.31541443 332.49304199]
[135.88423157 346.30715942]
[131.16983032 359.35998535]
[123.45455170 370.88391113]
[113.19708252 380.20245361]
[101.00515747 386.76992798]
[87.59955597 390.20358276]
[87.59955597 405.20358276]
[87.59955597 420.20358276]
[87.59955597 435.20358276]
[87.59955597 450.20358276]
[87.59955597 465.20358276]
[87.59955597 480.20358276]
[87.59955597 495.20358276]
[87.59955597 510.20358276]
[87.59955597 525.20355225]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[20 129]
[21 128]
[22 127]
[23 126]
[24 125]
[26 124]
[27 123]
[28 122]
[49 121]
[50 120]
[51 119]
[54 64]
[55 63]
[56 62]
[65 113]
[66 112]
[83 111]
[84 110]
[85 109]
[86 108]
[87 107]
[89 106]
[90 105]
[91 104]
[92 103]
[93 102]
[94 101]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
