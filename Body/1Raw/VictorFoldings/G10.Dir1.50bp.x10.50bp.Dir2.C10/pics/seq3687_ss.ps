%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:44 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCUAGGCCUCCUAUUUAUUCUAGCCACCUCUAGCCUAGCCGUUUACUCAAUCCUCUGAUCAGGxxxxxxxxxxCCUCCGGCCUAGCCAUGUGAUUUCACUUCCACUCCAUAACGCUCCUCAUACUAGGCCUACUACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[97.25171661 217.30804443]
[96.64383698 202.32035828]
[96.03594971 187.33268738]
[95.42807007 172.34501648]
[94.82018280 157.35733032]
[94.21230316 142.36965942]
[93.60441589 127.38198090]
[92.99653625 112.39430237]
[85.45269012 99.42932892]
[72.72303009 91.49486542]
[59.99336624 83.56040955]
[47.26370239 75.62594604]
[34.53403854 67.69149017]
[21.80437469 59.75702667]
[9.07470989 51.82256699]
[-3.65495348 43.88810730]
[-16.38461685 35.95364761]
[-25.40381432 47.95129013]
[-35.43436432 59.11719513]
[-46.39992523 69.36638641]
[-58.21704102 78.62084961]
[-70.79577637 86.81015778]
[-84.04039764 93.87198639]
[-97.85009766 99.75258636]
[-112.11978149 104.40720367]
[-126.74084473 107.80041504]
[-141.60200500 109.90638733]
[-156.59017944 110.70909882]
[-171.59126282 110.20244598]
[-186.49110413 108.39027405]
[-201.17631531 105.28637695]
[-215.53511047 100.91438293]
[-229.45822144 95.30756378]
[-242.83967590 88.50859070]
[-255.57762146 80.56920624]
[-267.57513428 71.54984283]
[-278.74090576 61.51913452]
[-288.98992920 50.55343246]
[-298.24423218 38.73618698]
[-306.43338013 26.15733719]
[-313.49502563 12.91261768]
[-319.37542725 -0.89716756]
[-324.02984619 -15.16691780]
[-327.42285156 -29.78802872]
[-329.52862549 -44.64922333]
[-330.33111572 -59.63739777]
[-329.82424927 -74.63848114]
[-328.01187134 -89.53829956]
[-324.90777588 -104.22345734]
[-320.53558350 -118.58219147]
[-314.92855835 -132.50521851]
[-308.12939453 -145.88658142]
[-300.18981934 -158.62443542]
[-291.17028809 -170.62182617]
[-281.13943481 -181.78744507]
[-270.17358398 -192.03633118]
[-258.35620117 -201.29045105]
[-245.77725220 -209.47941589]
[-232.53244019 -216.54087830]
[-218.72256470 -222.42108154]
[-204.45274353 -227.07530212]
[-189.83158875 -230.46809387]
[-174.97036743 -232.57365417]
[-159.98217773 -233.37594604]
[-144.98110962 -232.86886597]
[-130.08131409 -231.05628967]
[-115.39619446 -227.95198059]
[-101.03752136 -223.57957458]
[-87.11457062 -217.97236633]
[-73.73330688 -211.17301941]
[-60.99557114 -203.23327637]
[-48.99831009 -194.21357727]
[-37.83282471 -184.18255615]
[-27.58409882 -173.21656799]
[-18.33012962 -161.39906311]
[-10.14134884 -148.81997681]
[-3.08007812 -135.57507324]
[2.79994130 -121.76511383]
[7.45395756 -107.49523926]
[10.84655094 -92.87403107]
[12.95190048 -78.01277161]
[13.75398350 -63.02457809]
[13.24669456 -48.02350998]
[11.43389606 -33.12374115]
[8.32938385 -18.43866920]
[3.95678520 -4.08005714]
[-1.65062070 9.84281445]
[-8.45015717 23.22398376]
[4.27950668 31.15844345]
[17.00917053 39.09290314]
[29.73883438 47.02736282]
[42.46849823 54.96182251]
[55.19816208 62.89628220]
[67.92782593 70.83074188]
[80.65748596 78.76520538]
[93.38715363 86.69966125]
[121.44612885 79.92610168]
[136.38378906 78.55989075]
[151.32144165 77.19367218]
[152.99099731 62.23381042]
[157.63810730 47.91636276]
[165.07246399 34.82762146]
[174.98965454 23.50356483]
[186.98355103 14.40790081]
[200.56303406 7.91309309]
[215.17202759 4.28510046]
[230.21229553 3.67248654]
[245.06794739 6.10033751]
[259.13064575 11.46923447]
[271.82455444 19.55932426]
[282.62985229 30.03932381]
[291.10409546 42.48008347]
[296.90020752 56.37215805]
[299.78091431 71.14668274]
[299.62817383 86.19864655]
[296.44830322 100.91167450]
[290.37152100 114.68328857]
[281.64660645 126.94954681]
[270.63088989 137.20814514]
[257.77545166 145.03901672]
[243.60670471 150.12147522]
[228.70484924 152.24740601]
[213.68011475 151.32975769]
[199.14773560 147.40609741]
[185.70283508 140.63710022]
[173.89595032 131.29994202]
[164.21057129 119.77700043]
[157.04330444 106.54011536]
[152.68765259 92.13132477]
[137.75000000 93.49754333]
[122.81234741 94.86375427]
[136.57637024 100.82627869]
[150.34039307 106.78880310]
[165.25740051 108.36450195]
[177.71464539 116.72016907]
[184.83209229 129.92402649]
[184.96424866 144.92344666]
[178.08053589 158.25065613]
[165.77246094 166.82452393]
[150.88552856 168.66281128]
[136.86149597 163.34051514]
[126.94264221 152.08813477]
[123.42209625 137.50939941]
[115.70315552 124.64790344]
[107.98420715 111.78641510]
[108.59209442 126.77409363]
[109.19997406 141.76176453]
[109.80786133 156.74945068]
[110.41574860 171.73712158]
[111.02362823 186.72480774]
[111.63151550 201.71247864]
[112.23939514 216.70016479]
[118.92266083 232.28125000]
[105.80059814 243.01660156]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 152]
[2 151]
[3 150]
[4 149]
[5 148]
[6 147]
[7 146]
[8 145]
[9 96]
[10 95]
[11 94]
[12 93]
[13 92]
[14 91]
[15 90]
[16 89]
[17 88]
[97 131]
[98 130]
[99 129]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
