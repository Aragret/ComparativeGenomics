%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:05 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGGGACGAACCAGAGUGUAGCUUAACACAAAGCACCCAACUUACACUUAGGAGAUUUCAACUUAxxxxxxxxxxGACUAAUCAAACUAACCUCAAAACAAAUGAUAACCAUACACAACACUAAAGGACGAACCUGACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[113.41788483 287.83358765]
[100.29582214 277.09823608]
[106.97908783 261.51715088]
[107.58696747 246.52946472]
[108.19485474 231.54179382]
[108.80273438 216.55412292]
[109.41062164 201.56643677]
[110.01850128 186.57876587]
[110.62638855 171.59107971]
[111.23427582 156.60340881]
[111.84215546 141.61572266]
[112.45004272 126.62805176]
[95.97973633 127.11817932]
[83.00625610 118.92392731]
[77.30178070 105.90601349]
[62.33950806 104.84281921]
[47.37723541 103.77961731]
[32.38416672 103.32365417]
[17.38493538 103.47566223]
[6.36278868 114.48248291]
[-8.85072899 114.42296600]
[-19.27612114 103.84720612]
[-34.27534866 103.99921417]
[-49.27458191 104.15122223]
[-64.27381134 104.30323792]
[-79.27304077 104.45524597]
[-94.27227020 104.60725403]
[-109.20992279 105.97347260]
[-123.98786926 108.54492188]
[-138.76580811 111.11637115]
[-153.54376221 113.68782043]
[-162.43173218 126.75608063]
[-177.97254944 129.62986755]
[-190.94610596 120.60423279]
[-193.65542603 105.03390503]
[-184.49313354 92.15649414]
[-168.89503479 89.61193085]
[-156.11520386 98.90987396]
[-141.33726501 96.33842468]
[-126.55931854 93.76697540]
[-111.78137207 91.19552612]
[-124.33784485 82.98974609]
[-129.81887817 69.02699280]
[-126.19757080 54.47068405]
[-114.81308746 44.70372009]
[-99.87539673 43.33790970]
[-86.90843964 50.87833023]
[-80.70737457 64.53654480]
[-83.56534576 79.26175690]
[-94.42427826 89.60802460]
[-79.42504883 89.45601654]
[-64.42581940 89.30400848]
[-49.42658997 89.15199280]
[-34.42736053 88.99998474]
[-19.42813110 88.84797668]
[-9.21921825 78.06309509]
[5.98996782 77.69525909]
[17.23292542 88.47643280]
[32.23215485 88.32442474]
[34.30592346 86.35601044]
[37.30702591 85.11561584]
[40.95273209 84.96931458]
[44.83015823 86.17054749]
[48.44042969 88.81734467]
[63.40270233 89.88053894]
[78.36497498 90.94374084]
[87.43082428 78.45980072]
[103.10914612 73.75913239]
[119.31002808 79.84881592]
[129.01675415 95.30059052]
[141.06204224 86.36128998]
[153.10731506 77.42198181]
[146.53137207 63.89449310]
[142.55422974 49.39281464]
[141.30995178 34.41122437]
[142.83943176 19.46006584]
[147.08914185 5.04838419]
[153.91291809 -8.33341980]
[163.07708740 -20.23026848]
[174.26837158 -30.23788643]
[187.10464478 -38.01654053]
[201.14799500 -43.30255890]
[215.91963196 -45.91729736]
[230.91622925 -45.77314377]
[245.62704468 -42.87647247]
[259.55136108 -37.32737732]
[272.21551514 -29.31620407]
[283.18899536 -19.11702347]
[295.23425293 -28.05632973]
[307.27954102 -36.99563217]
[319.32482910 -45.93493652]
[314.48718262 -60.26854706]
[314.31765747 -75.39555359]
[318.83285522 -89.83397675]
[327.59045410 -102.16928864]
[339.73245239 -111.19298553]
[354.06930542 -116.02103424]
[369.19641113 -116.18041992]
[383.63180542 -111.65553284]
[395.96124268 -102.88967896]
[404.97680664 -90.74164581]
[409.79525757 -76.40156555]
[409.94448853 -61.27434158]
[405.40994263 -46.84198380]
[396.63583374 -34.51842499]
[384.48175049 -25.51100349]
[370.13845825 -20.70217514]
[355.01113892 -20.56305885]
[340.58181763 -25.10728455]
[328.26412964 -33.88965607]
[316.21884155 -24.95035172]
[304.17358398 -16.01104546]
[292.12829590 -7.07174158]
[298.71139526 6.38570929]
[302.71054077 20.82754135]
[303.98812866 35.76229858]
[302.49920654 50.68148041]
[298.29299927 65.07683563]
[291.51132202 78.45768738]
[282.38391113 90.36766815]
[271.22036743 100.40026855]
[258.39996338 108.21272278]
[244.35855103 113.53770447]
[229.57379150 116.19248962]
[214.54898071 116.08522797]
[199.79580688 113.21810150]
[185.81701660 107.68732452]
[173.08920288 99.67989349]
[162.04663086 89.46726990]
[150.00134277 98.40657043]
[137.95605469 107.34587860]
[150.54078674 99.18348694]
[165.32362366 96.64024353]
[179.91258240 100.12764740]
[191.94711304 109.08141327]
[199.47994995 122.05278015]
[201.29223633 136.94290161]
[197.09074402 151.34246826]
[187.55526733 162.92152405]
[174.22874451 169.80654907]
[159.26744080 170.88348389]
[145.09222412 165.97805786]
[133.99670410 155.88403320]
[127.77621460 142.23464966]
[127.43771362 127.23593140]
[126.82983398 142.22361755]
[126.22194672 157.21128845]
[125.61406708 172.19895935]
[125.00617981 187.18664551]
[124.39830017 202.17431641]
[123.79041290 217.16200256]
[123.18253326 232.14967346]
[122.57464600 247.13735962]
[121.96676636 262.12503052]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 154]
[4 153]
[5 152]
[6 151]
[7 150]
[8 149]
[9 148]
[10 147]
[11 146]
[12 145]
[15 66]
[16 65]
[17 64]
[18 59]
[19 58]
[22 55]
[23 54]
[24 53]
[25 52]
[26 51]
[27 50]
[28 41]
[29 40]
[30 39]
[31 38]
[70 131]
[71 130]
[72 129]
[88 113]
[89 112]
[90 111]
[91 110]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
