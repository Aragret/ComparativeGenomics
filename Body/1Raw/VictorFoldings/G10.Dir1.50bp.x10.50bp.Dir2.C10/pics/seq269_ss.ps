%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:37 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGAAAAAAUUUCCACCAAACCCCCCCUCCCCCGCUUCUGGCCACAGCACUUAAACACAUCUCUxxxxxxxxxxCGAACAGCAUACCCCCGAUUCCGCUACGACCAACUCAUACACCUCCUAUGAAAAAACUUCCCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[-41.41403961 285.43350220]
[-51.48382950 277.30245972]
[-61.58926392 288.38760376]
[-71.69470215 299.47274780]
[-81.80013275 310.55786133]
[-91.90557098 321.64300537]
[-102.01100159 332.72814941]
[-112.11643982 343.81326294]
[-121.52029419 355.49948120]
[-130.18690491 367.74243164]
[-138.85351562 379.98538208]
[-147.52011108 392.22833252]
[-156.18672180 404.47128296]
[-160.40315247 420.89257812]
[-177.34989929 421.38677979]
[-182.51611328 405.23913574]
[-168.42967224 395.80468750]
[-159.76307678 383.56173706]
[-151.09646606 371.31878662]
[-142.42985535 359.07583618]
[-133.76324463 346.83288574]
[-148.72668457 347.87948608]
[-160.17121887 338.18295288]
[-161.59642029 323.25082397]
[-152.19277954 311.56442261]
[-137.30152893 309.76156616]
[-125.38075256 318.86624146]
[-123.20157623 333.70782471]
[-113.09613800 322.62271118]
[-102.99069977 311.53756714]
[-92.88526917 300.45242310]
[-82.77983093 289.36730957]
[-72.67440033 278.28216553]
[-62.56896591 267.19702148]
[-80.20053101 248.02461243]
[-95.58403015 227.00552368]
[-108.52754974 204.40200806]
[-118.86960602 180.49603271]
[-126.48119354 155.58584595]
[-131.26734924 129.98219299]
[-133.16835022 104.00450897]
[-132.16050720 77.97686768]
[-128.25636292 52.22397232]
[-121.50464630 27.06709862]
[-111.98957825 2.82009101]
[-125.41703033 -3.86598420]
[-138.84448242 -10.55205917]
[-155.17030334 -9.00300407]
[-164.45294189 -22.52205276]
[-157.14320374 -37.20196915]
[-140.76074219 -37.94131088]
[-132.15840149 -23.97950935]
[-118.73095703 -17.29343414]
[-105.30350494 -10.60735798]
[-99.85483551 -20.17304993]
[-93.96080017 -29.47094345]
[-87.63453674 -38.48031616]
[-80.89013672 -47.18109512]
[-73.74263763 -55.55389023]
[-66.20796204 -63.58004379]
[-58.30289841 -71.24166870]
[-50.04507065 -78.52169037]
[-41.45287323 -85.40388489]
[-32.54545975 -91.87292480]
[-23.34267426 -97.91438293]
[-13.86502743 -103.51479340]
[-4.13363934 -108.66168976]
[5.82980442 -113.34359741]
[16.00310135 -117.55007935]
[26.36358070 -121.27176666]
[36.88815308 -124.50035858]
[47.55336761 -127.22866821]
[58.33545685 -129.45060730]
[69.21039581 -131.16123962]
[80.15393829 -132.35673523]
[91.14171600 -133.03443909]
[102.14923096 -133.19284058]
[113.15195465 -132.83157349]
[124.12537384 -131.95146179]
[135.04502869 -130.55447388]
[145.88658142 -128.64369202]
[156.62588501 -126.22339630]
[167.23899841 -123.29898071]
[177.70228577 -119.87694550]
[187.99240112 -115.96493530]
[198.08644104 -111.57166290]
[207.96189880 -106.70690918]
[217.59677124 -101.38152313]
[226.96957397 -95.60736847]
[236.05944824 -89.39731598]
[244.84611511 -82.76520538]
[253.30999756 -75.72580719]
[261.43225098 -68.29482269]
[269.19476318 -60.48879623]
[276.58020020 -52.32513046]
[283.57217407 -43.82201767]
[290.15505981 -34.99840927]
[302.65908813 -43.28388214]
[309.48049927 -58.19698715]
[325.82965088 -59.47646332]
[334.88796997 -45.80609512]
[327.33700562 -31.24878502]
[310.94458008 -30.77984619]
[298.44052124 -22.49437141]
[304.93072510 -11.29651928]
[310.78967285 0.24415442]
[315.99935913 12.09210014]
[320.54370117 24.21082306]
[324.40869141 36.56299591]
[327.58248901 49.11056900]
[330.05523682 61.81489563]
[331.81939697 74.63684082]
[332.86947632 87.53691101]
[333.20223999 100.47537231]
[332.81671143 113.41236877]
[331.71405029 126.30804443]
[329.89764404 139.12269592]
[327.37310791 151.81683350]
[324.14819336 164.35136414]
[320.23287964 176.68768311]
[315.63916016 188.78776550]
[310.38122559 200.61437988]
[304.47528076 212.13107300]
[297.93948364 223.30236816]
[290.79400635 234.09387207]
[283.06082153 244.47232056]
[274.76376343 254.40577698]
[265.92840576 263.86361694]
[256.58193970 272.81671143]
[246.75314331 281.23748779]
[236.47233582 289.10003662]
[225.77114868 296.38006592]
[214.68255615 303.05523682]
[203.24072266 309.10491943]
[191.48088074 314.51052856]
[179.43925476 319.25537109]
[167.15292358 323.32489014]
[154.65975952 326.70648193]
[141.99822998 329.38977051]
[129.20733643 331.36648560]
[116.32646942 332.63052368]
[103.39530945 333.17800903]
[90.45370483 333.00726318]
[77.54149628 332.11880493]
[64.69846344 330.51531982]
[51.96417236 328.20184326]
[39.37784195 325.18542480]
[26.97824478 321.47537231]
[14.80356979 317.08312988]
[2.89132166 312.02221680]
[-8.72180843 306.30822754]
[-20.00004959 299.95877075]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 34]
[3 33]
[4 32]
[5 31]
[6 30]
[7 29]
[8 28]
[9 21]
[10 20]
[11 19]
[12 18]
[13 17]
[45 54]
[46 53]
[47 52]
[97 104]
[98 103]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
