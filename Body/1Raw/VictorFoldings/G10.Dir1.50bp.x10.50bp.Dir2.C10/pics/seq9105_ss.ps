%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:40 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGAGAAAACAACCGAAACCAAAUAAUUCAAGCACUGCUUAUUACAAUUUUACUGGGUCUCUAUxxxxxxxxxxUGGGGCUCACUCACCCACCACAUUAACAACAUAAAACCCUCAUUCACACGAGAAAACACCCCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[95.16249084 423.78454590]
[95.16249084 408.78454590]
[95.16249084 393.78454590]
[95.16249084 378.78454590]
[95.16249084 363.78454590]
[95.16249084 348.78454590]
[95.16249084 333.78454590]
[95.16249084 318.78454590]
[95.16249084 303.78454590]
[95.16249084 288.78454590]
[80.14692688 284.88854980]
[66.63472748 277.24581909]
[55.54317093 266.36862183]
[47.62692642 252.98898315]
[43.42668152 238.00949097]
[43.23221207 222.44236755]
[47.06241608 207.34106445]
[54.66363144 193.72903442]
[65.52643585 182.53028870]
[78.91977692 174.50671387]
[93.94018555 170.20623779]
[93.63220978 155.20939636]
[80.21326447 151.93371582]
[68.01663208 145.44987488]
[57.79575729 136.15838623]
[50.18202591 124.63322449]
[45.64576721 111.58637238]
[44.46721268 97.82376862]
[29.69509697 95.21904755]
[14.92298031 92.61432648]
[0.15086395 90.00960541]
[-14.69445896 87.86102295]
[-29.59890556 86.17062378]
[-44.50335312 84.48023224]
[-50.80106354 86.80002594]
[-56.45787048 85.70989227]
[-59.98043060 82.40220642]
[-74.80290985 80.10133362]
[-89.62539673 77.80045319]
[-104.44787598 75.49958038]
[-121.02701569 79.04477692]
[-129.02322388 64.09496307]
[-116.87122345 52.27272415]
[-102.14700317 60.67710114]
[-87.32451630 62.97797394]
[-72.50203705 65.27884674]
[-57.67955399 67.57972717]
[-42.81295776 69.57578278]
[-27.90850830 71.26618195]
[-13.00406170 72.95657349]
[-9.99829578 71.00399017]
[-5.88028765 70.44577026]
[-1.33254838 71.79621124]
[2.75558662 75.23748779]
[17.52770233 77.84220886]
[32.29981995 80.44692993]
[47.07193375 83.05165100]
[55.89550018 66.18551636]
[69.89289856 53.28609848]
[87.42211151 45.86661911]
[106.42681885 44.79744339]
[124.67760468 50.20399475]
[133.09101868 37.78567886]
[141.50442505 25.36736488]
[149.91783142 12.94904995]
[150.78573608 -5.41606379]
[166.80900574 -12.50824642]
[155.72538757 -23.23689842]
[146.93814087 -35.90938187]
[140.78015137 -50.04245377]
[137.48408508 -65.09761047]
[137.17361450 -80.50158691]
[139.85874939 -95.66820526]
[145.43554688 -110.02064514]
[153.69012451 -123.01343536]
[164.30686951 -134.15313721]
[176.88046265 -143.01710510]
[190.93144226 -149.26951599]
[205.92440796 -152.67410278]
[221.28845215 -153.10307312]
[236.43888855 -150.54190063]
[250.79951477 -145.08981323]
[258.69598389 -157.84306335]
[266.59246826 -170.59632874]
[274.48895264 -183.34957886]
[267.75268555 -197.22857666]
[269.61203003 -212.54347229]
[279.47366333 -224.40737915]
[294.19076538 -229.03453064]
[309.06716919 -224.94844055]
[319.35586548 -213.45295715]
[321.77377319 -198.21624756]
[315.54934692 -184.10029602]
[302.66879272 -175.60945129]
[287.24221802 -175.45309448]
[279.34573364 -162.69984436]
[271.44924927 -149.94657898]
[263.55276489 -137.19332886]
[274.32647705 -127.33322144]
[283.09649658 -115.64983368]
[289.55996704 -102.54413605]
[293.49316406 -88.46626282]
[294.75933838 -73.90006256]
[293.31338501 -59.34645462]
[289.20355225 -45.30621719]
[282.56973267 -32.26273727]
[273.63876343 -20.66537857]
[262.71664429 -10.91400719]
[250.17807007 -3.34519029]
[236.45356750 1.77941000]
[222.01466370 4.28208637]
[207.35781860 4.07524681]
[192.98719788 1.16448116]
[179.39744568 -4.35158110]
[181.61352539 7.57952261]
[174.86878967 18.14739227]
[162.33615112 21.36246109]
[153.92274475 33.78077316]
[145.50932312 46.19908905]
[137.09591675 58.61740112]
[145.40919495 67.95890808]
[151.42344666 78.92262268]
[154.83416748 90.95346832]
[155.46870422 103.44233704]
[153.29489136 115.75691223]
[148.42282104 127.27373505]
[141.09915161 137.40971375]
[131.69465637 145.65167236]
[120.68549347 151.58233643]
[108.62904358 154.90141296]
[108.93702698 169.89825439]
[123.09187317 173.19143677]
[136.03286743 179.78385925]
[147.00436401 189.28547668]
[155.36692810 201.13650513]
[160.63462830 214.64042664]
[162.50329590 229.00489807]
[160.86801147 243.38825989]
[155.82905579 256.94885254]
[147.68572998 268.89428711]
[136.91860962 278.52767944]
[124.16116333 285.28839111]
[110.16249084 288.78454590]
[110.16249084 303.78454590]
[110.16249084 318.78454590]
[110.16249084 333.78454590]
[110.16249084 348.78454590]
[110.16249084 363.78454590]
[110.16249084 378.78454590]
[110.16249084 393.78454590]
[110.16249084 408.78454590]
[110.16249084 423.78454590]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 152]
[2 151]
[3 150]
[4 149]
[5 148]
[6 147]
[7 146]
[8 145]
[9 144]
[10 143]
[21 131]
[22 130]
[28 57]
[29 56]
[30 55]
[31 54]
[32 50]
[33 49]
[34 48]
[37 47]
[38 46]
[39 45]
[40 44]
[62 120]
[63 119]
[64 118]
[65 117]
[67 114]
[82 98]
[83 97]
[84 96]
[85 95]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
