%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:29 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCAACCAAACCCCAAAGACACCCCCCACAGUUUAUGUAGCUUACCUCCUCAAAGCAAUACACUxxxxxxxxxxAUUGCAUACUCUUCAAUCAGCCACAUAGCCCUCGUAGUAACAGCCAUUCUCAUCCAAACCCCCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[45.35720825 172.35163879]
[35.35796356 183.53265381]
[25.35871506 194.71366882]
[15.35946941 205.89468384]
[5.36022377 217.07569885]
[-4.63902235 228.25671387]
[-13.82061195 240.11834717]
[-22.13835907 252.60093689]
[-30.45610809 265.08352661]
[-38.77385330 277.56613159]
[-33.25861359 292.06997681]
[-37.35432053 307.03677368]
[-49.48609924 316.71145630]
[-64.98902130 317.37393188]
[-77.90190887 308.76943970]
[-83.25949097 294.20663452]
[-79.00166321 279.28515625]
[-66.76564789 269.74261475]
[-51.25644684 269.24838257]
[-42.93869781 256.76577759]
[-34.62094879 244.28318787]
[-26.30320358 231.80059814]
[-41.07634354 234.39949036]
[-54.14826584 227.04254150]
[-59.59225845 213.06530762]
[-54.94005585 198.80497742]
[-42.30093384 190.72706604]
[-27.40537071 192.49404907]
[-17.00690269 203.30477905]
[-15.82003689 218.25746155]
[-5.82079029 207.07644653]
[4.17845583 195.89543152]
[14.17770195 184.71441650]
[24.17694855 173.53340149]
[34.17619324 162.35238647]
[18.31944275 139.35581970]
[10.21561146 112.62369537]
[10.63389492 84.69335175]
[19.53459167 58.21588516]
[36.07286835 35.70446396]
[58.67895508 19.29581642]
[85.20713043 10.54741383]
[83.99236298 -4.40331602]
[82.77759552 -19.35404587]
[81.56282806 -34.30477524]
[80.34805298 -49.25550842]
[71.51856995 -62.38374710]
[78.19974518 -75.69581604]
[76.98497772 -90.64654541]
[75.77020264 -105.59728241]
[60.41271210 -107.77159119]
[45.92527390 -113.29235077]
[33.02706909 -121.88219452]
[22.35765648 -133.11149597]
[14.44525433 -146.41984558]
[9.68059635 -161.14401245]
[8.29763794 -176.55099487]
[10.36206627 -191.87452698]
[15.76818943 -206.35319519]
[24.24434280 -219.26821899]
[35.36653900 -229.97918701]
[48.57967758 -237.95579529]
[63.22524261 -242.80412292]
[61.70771790 -257.72717285]
[60.19019318 -272.65020752]
[58.67266464 -287.57324219]
[57.15513992 -302.49627686]
[42.51247787 -306.49087524]
[30.30393600 -315.50842285]
[22.18062592 -328.32934570]
[19.24115562 -343.21975708]
[21.88306618 -358.16580200]
[29.74905777 -371.14620972]
[41.77532196 -380.40542603]
[56.33540726 -384.69128418]
[71.46017456 -383.42410278]
[85.10413361 -376.77526855]
[95.42204285 -365.64398193]
[101.01849365 -351.53567505]
[101.13661194 -336.35839844]
[95.76041412 -322.16470337]
[85.61700439 -310.87417603]
[72.07817841 -304.01382446]
[73.59570312 -289.09075928]
[75.11322784 -274.16772461]
[76.63075256 -259.24468994]
[78.14827728 -244.32165527]
[92.58805847 -242.71952820]
[106.38068390 -238.13542175]
[118.91719055 -230.76904297]
[129.64349365 -220.94302368]
[138.08491516 -209.08876038]
[143.86718750 -195.72747803]
[146.73298645 -181.44734192]
[146.55346680 -166.87750244]
[143.33401489 -152.66043091]
[137.21411133 -139.42359924]
[128.46128845 -127.75173187]
[117.45947266 -118.16101074]
[104.69210815 -111.07624054]
[90.72093964 -106.81204987]
[91.93570709 -91.86132050]
[93.15047455 -76.91058350]
[101.89307404 -64.85172272]
[95.29878998 -50.47027588]
[96.51355743 -35.51954651]
[97.72832489 -20.56881523]
[98.94309235 -5.61808491]
[100.15785980 9.33264542]
[107.45433807 9.63946152]
[114.70245361 10.53250885]
[121.85518646 12.00599480]
[128.86613464 14.05035877]
[135.68978882 16.65233803]
[142.28192139 19.79505157]
[148.59973145 23.45811081]
[154.60223389 27.61775017]
[160.25050354 32.24698257]
[165.50787354 37.31577682]
[170.34027100 42.79124832]
[174.71630859 48.63787460]
[178.60760498 54.81771851]
[181.98892212 61.29069519]
[184.83831787 68.01480103]
[187.13731384 74.94641876]
[188.87098694 82.04058075]
[190.02809143 89.25125885]
[190.60113525 96.53166199]
[190.58636475 103.83457184]
[189.98391724 111.11260986]
[188.79766846 118.31854248]
[187.03532410 125.40563965]
[184.70832825 132.32791138]
[181.83177185 139.04043579]
[178.42430115 145.49969482]
[174.50805664 151.66375732]
[170.10841370 157.49264526]
[165.25393677 162.94853210]
[159.97610474 167.99603271]
[154.30917358 172.60240173]
[148.28990173 176.73773193]
[141.95733643 180.37522888]
[135.35255432 183.49125671]
[128.51843262 186.06562805]
[121.49928284 188.08163452]
[114.34065247 189.52619934]
[107.08898163 190.38993835]
[99.79132843 190.66725159]
[92.49501801 190.35635376]
[85.24740601 189.45924377]
[78.09550476 187.98175049]
[71.08570862 185.93345642]
[64.26350403 183.32765198]
[57.67314148 180.18124390]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 35]
[2 34]
[3 33]
[4 32]
[5 31]
[6 30]
[7 22]
[8 21]
[9 20]
[10 19]
[42 109]
[43 108]
[44 107]
[45 106]
[46 105]
[48 103]
[49 102]
[50 101]
[63 87]
[64 86]
[65 85]
[66 84]
[67 83]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
