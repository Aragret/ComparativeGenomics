%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:14 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGUAUCCCCACCGGCGUCAAAGUAUUUAGCUGACUCGCCACACUCCACGGAAGCAAUAUGAAxxxxxxxxxxACCCUAACAGGUCAACCUCGCUUCCCCACCCUUACUAACAUUAACGAAAAUAACCCCACCCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[115.75357056 157.98094177]
[112.43182373 143.35336304]
[110.89384460 128.43107605]
[103.98684692 141.74623108]
[104.50055695 157.55909729]
[91.77185059 165.29403687]
[84.86484528 178.60919189]
[77.95784760 191.92434692]
[71.05084991 205.23950195]
[72.32997894 221.58868408]
[58.65941238 230.64671326]
[44.10226440 223.09545898]
[43.63367844 206.70300293]
[57.73569489 198.33250427]
[64.64269257 185.01734924]
[71.54969025 171.70219421]
[78.45668793 158.38703918]
[77.44895172 143.52656555]
[90.67169189 134.83923340]
[97.57868958 121.52407837]
[88.81248474 109.35224152]
[73.99472809 111.68334961]
[59.17696762 114.01445007]
[44.35921097 116.34555054]
[29.59315491 118.98442078]
[14.88519287 121.92990112]
[0.17723121 124.87538147]
[-4.07466316 139.57844543]
[-14.68074512 150.61337280]
[-29.20381546 155.44441223]
[-44.30657959 152.96144104]
[-56.51852798 143.73503113]
[-63.03345108 129.88531494]
[-62.35426331 114.59488678]
[-54.63703918 101.37736511]
[-41.65513611 93.27002716]
[-26.39170647 92.13590240]
[-12.35416985 98.23558044]
[-2.76825118 110.16741943]
[11.93971062 107.22193909]
[26.64767265 104.27645874]
[30.02389717 100.81572723]
[35.63168335 99.48004913]
[42.02810669 101.52779388]
[56.84586334 99.19669342]
[71.66362000 96.86558533]
[86.48137665 94.53448486]
[71.50898743 95.44416809]
[58.23538208 88.45764923]
[50.50906754 75.60058594]
[50.57018661 60.60071182]
[58.40101624 47.80704117]
[71.73111725 40.92892456]
[86.69559479 41.96058273]
[98.95570374 50.60290527]
[104.95678711 64.35015869]
[102.95987701 79.21426392]
[106.36285400 64.60536957]
[109.76583099 49.99647903]
[113.16880798 35.38758850]
[116.57179260 20.77869415]
[119.97476959 6.16980171]
[107.80411530 -4.97711706]
[102.92533112 -20.64533615]
[106.57433319 -36.54863358]
[117.66751862 -48.38599777]
[133.12126160 -53.00481033]
[136.21958923 -67.68133545]
[139.31790161 -82.35785675]
[128.44082642 -72.02882385]
[114.34114075 -66.91033173]
[99.37099457 -67.85628510]
[86.02775574 -74.70886230]
[76.53736115 -86.32489777]
[72.48302460 -100.76658630]
[74.54110718 -115.62472534]
[82.36827087 -128.42065430]
[94.65876770 -137.01969910]
[109.36226654 -139.98736572]
[124.02589417 -136.82858276]
[136.20343018 -128.07029724]
[143.86338806 -115.17359161]
[145.72804260 -100.29134369]
[152.63504028 -113.60649872]
[159.54203796 -126.92165375]
[161.46823120 -143.76582336]
[178.18734741 -146.57783508]
[185.51777649 -131.29054260]
[172.85719299 -120.01465607]
[165.95019531 -106.69949341]
[159.04319763 -93.38433838]
[153.99443054 -79.25953674]
[150.89611816 -64.58301544]
[147.79779053 -49.90648651]
[158.56224060 -41.44563293]
[164.64790344 -29.10692024]
[164.81050110 -15.28370667]
[158.96093750 -2.68499351]
[148.19393921 6.19547844]
[134.58366394 9.57277966]
[131.18067932 24.18167305]
[127.77770233 38.79056549]
[124.37472534 53.39945602]
[120.97174835 68.00834656]
[117.56877136 82.61724091]
[123.30009460 68.75535583]
[130.65739441 55.68362045]
[139.53378296 43.59189987]
[149.80033875 32.65582275]
[161.30795288 23.03423691]
[173.88946533 14.86689377]
[187.36213684 8.27242088]
[201.53027344 3.34660268]
[216.18811035 0.16098645]
[231.12271118 -1.23815751]
[246.11717224 -0.83050680]
[260.95370483 1.37801743]
[275.41677856 5.35533667]
[289.29635620 11.04368114]
[302.39083862 18.36042786]
[314.51000977 27.19930458]
[325.47784424 37.43192291]
[335.13504028 48.90966415]
[343.34133911 61.46580505]
[349.97753906 74.91797638]
[354.94723511 89.07079315]
[358.17825317 103.71867371]
[359.62365723 118.64887238]
[359.26248169 133.64451599]
[357.09994507 148.48782349]
[353.16748047 162.96316528]
[347.52215576 176.86030579]
[340.24603271 189.97738647]
[331.44476318 202.12388611]
[321.24615479 213.12338257]
[309.79840088 222.81610107]
[297.26776123 231.06126404]
[283.83621216 237.73912048]
[269.69888306 242.75265503]
[255.06106567 246.02905273]
[240.13542175 247.52072144]
[225.13871765 247.20602417]
[210.28880310 245.08949280]
[195.80133057 241.20188904]
[181.88676453 235.59967041]
[168.74720764 228.36422729]
[156.57348633 219.60063171]
[145.54243469 209.43617249]
[135.81428528 198.01850891]
[127.53032684 185.51347351]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 20]
[4 19]
[6 17]
[7 16]
[8 15]
[9 14]
[21 47]
[22 46]
[23 45]
[24 44]
[25 41]
[26 40]
[27 39]
[57 105]
[58 104]
[59 103]
[60 102]
[61 101]
[62 100]
[67 94]
[68 93]
[69 92]
[83 91]
[84 90]
[85 89]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
