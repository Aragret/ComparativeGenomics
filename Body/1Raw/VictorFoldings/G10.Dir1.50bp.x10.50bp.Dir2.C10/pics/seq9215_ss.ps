%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:46 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGUACAUCCAAACAUCACUUUGGCUUCGAAGCCGCCGCCUGAUACUGGCAUUUUGUAGAUGUGGUUUxxxxxxxxxxCUUGCCCUAUUACUAUCCAUCCUCAUCCUAGCAAUAAUCCCCAUCCUCCAUAUAUCCAAACAACACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[85.35246277 253.79670715]
[87.91864014 234.58564758]
[88.21131897 219.58850098]
[88.50399017 204.59136963]
[88.79666901 189.59422302]
[89.08934784 174.59707642]
[89.38201904 159.59992981]
[89.67469788 144.60278320]
[89.96737671 129.60563660]
[90.26004791 114.60849762]
[91.17330170 110.17211914]
[93.00834656 106.24995422]
[78.01477051 105.81097412]
[63.02119446 105.37199402]
[48.02761841 104.93301392]
[33.03404617 104.49403381]
[18.03475952 104.34769440]
[3.03547263 104.49403381]
[-11.96381378 104.64038086]
[-26.96310043 104.78672791]
[-29.09239960 112.58158112]
[-33.10149002 119.75981140]
[-38.81451416 125.86780548]
[-45.94622040 130.50155640]
[-54.11585236 133.33296204]
[-62.86729813 134.13233948]
[-71.69454193 132.78552246]
[-80.07090759 129.30439758]
[-87.48045349 123.83007812]
[-93.44966888 116.62827301]
[-108.19268036 119.39298248]
[-122.93569183 122.15768433]
[-137.67871094 124.92238617]
[-149.76712036 136.00401306]
[-165.32484436 130.81854248]
[-168.34744263 114.70034790]
[-155.72549438 104.23045349]
[-140.44340515 110.17937469]
[-125.70039368 107.41467285]
[-110.95738220 104.64996338]
[-96.21437073 101.88526154]
[-94.89893341 86.94305420]
[-108.93215179 81.64503479]
[-122.96536255 76.34702301]
[-134.79684448 86.14047241]
[-149.94259644 88.69028473]
[-164.32850647 83.31057739]
[-174.08482361 71.44845581]
[-176.58714294 56.29478073]
[-171.16236877 41.92580795]
[-159.26972961 32.20672226]
[-144.10827637 29.75190544]
[-129.75637817 35.22169495]
[-120.07462311 47.14474487]
[-117.66734314 62.31380844]
[-103.63413239 67.61182404]
[-89.60092163 72.90984344]
[-64.76003265 60.90778351]
[-39.70500946 68.47397614]
[-27.10944557 89.78744507]
[-12.11015892 89.64109802]
[2.88912749 89.49475098]
[17.88841438 89.34840393]
[21.84311104 86.58957672]
[27.58356667 86.32021332]
[33.47302628 89.50046539]
[48.46659851 89.93944550]
[63.46017456 90.37841797]
[78.45375061 90.81739807]
[93.44732666 91.25637817]
[108.21660614 88.63564301]
[103.73925018 74.31148529]
[100.38536835 59.68343735]
[98.17514801 44.83947372]
[97.12187195 29.86887360]
[97.23188019 14.86166763]
[98.50450897 -0.09188464]
[100.93210602 -14.90185070]
[104.50006866 -29.47916031]
[109.18694305 -43.73614120]
[114.96453857 -57.58705139]
[121.79810333 -70.94859314]
[129.64654541 -83.74039459]
[138.46266174 -95.88553619]
[148.19343567 -107.31096649]
[158.78031921 -117.94797516]
[170.15968323 -127.73258972]
[182.26304626 -136.60595703]
[195.01765442 -144.51472473]
[208.34677124 -151.41131592]
[222.17024231 -157.25424194]
[236.40492249 -162.00839233]
[250.96522522 -165.64515686]
[265.76354980 -168.14266968]
[280.71093750 -169.48590088]
[295.71746826 -169.66677856]
[310.69287109 -168.68420410]
[325.54708862 -166.54411316]
[340.19082642 -163.25933838]
[354.53598022 -158.84967041]
[368.49624634 -153.34161377]
[381.98773193 -146.76831055]
[394.92926025 -139.16926575]
[407.24298096 -130.59019470]
[418.85485840 -121.08269501]
[429.69506836 -110.70395660]
[439.69839478 -99.51638031]
[448.80468750 -87.58726501]
[456.95916748 -74.98834229]
[464.11279297 -61.79539490]
[470.22256470 -48.08776474]
[475.25170898 -33.94789505]
[479.16998291 -19.46081734]
[481.95382690 -4.71366596]
[483.58651733 10.20486832]
[484.05819702 25.20506287]
[483.36605835 40.19670105]
[481.51428223 55.08962631]
[478.51394653 69.79426575]
[474.38314819 84.22217560]
[469.14669800 98.28659821]
[462.83609009 111.90293884]
[455.48931885 124.98930359]
[447.15051270 137.46699524]
[437.86987305 149.26097107]
[427.70315552 160.30029297]
[416.71157837 170.51856995]
[404.96118164 179.85435486]
[392.52267456 188.25149536]
[379.47085571 195.65948486]
[365.88421631 202.03376770]
[351.84448242 207.33602905]
[337.43606567 211.53436279]
[322.74563599 214.60351562]
[307.86157227 216.52503967]
[292.87332153 217.28736877]
[277.87109375 216.88592529]
[262.94506836 215.32312012]
[248.18504333 212.60835266]
[233.67977905 208.75796509]
[219.51651001 203.79508972]
[205.78041077 197.74958801]
[192.55410767 190.65782166]
[179.91714478 182.56242371]
[167.94551086 173.51210022]
[156.71121216 163.56127930]
[146.28182983 152.76979065]
[136.72006226 141.20256042]
[128.08341980 128.92913818]
[120.42385101 116.02335358]
[113.78742981 102.56281281]
[105.25719452 114.90116882]
[104.96451569 129.89831543]
[104.67184448 144.89546204]
[104.37916565 159.89260864]
[104.08648682 174.88975525]
[103.79381561 189.88690186]
[103.50113678 204.88403320]
[103.20845795 219.88117981]
[102.91578674 234.87832642]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 160]
[3 159]
[4 158]
[5 157]
[6 156]
[7 155]
[8 154]
[9 153]
[10 152]
[12 70]
[13 69]
[14 68]
[15 67]
[16 66]
[17 63]
[18 62]
[19 61]
[20 60]
[30 41]
[31 40]
[32 39]
[33 38]
[42 57]
[43 56]
[44 55]
[71 151]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
