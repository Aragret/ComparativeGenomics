%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:51 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCCAGAACACUACGAGCCACAGCUUAAAACUCAAAGGACCUGGCGGUGCUUCAUAUCCCUCxxxxxxxxxxUCCGUGAAAUCAAUAUCCCGCACAAGAGUGCUACUCUCCUCGCUCCGGGCCCAUAACACUCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[125.46912384 396.35290527]
[125.15706635 381.35614014]
[124.84500885 366.35940552]
[124.53295135 351.36264038]
[124.22090149 336.36590576]
[123.90884399 321.36914062]
[123.59678650 306.37237549]
[123.28472900 291.37564087]
[122.97267151 276.37887573]
[121.10505676 261.49560547]
[117.70207977 246.88670349]
[114.29910278 232.27781677]
[99.69020844 228.87483215]
[90.18185425 240.47618103]
[88.05638885 256.73699951]
[72.80965424 262.77597046]
[60.12618256 252.38070679]
[63.05363846 236.24496460]
[78.58051300 230.96781921]
[88.08886719 219.36647034]
[84.87324524 191.33290100]
[103.22400665 173.66107178]
[101.04717255 158.81987000]
[98.87033081 143.97866821]
[96.69349670 129.13746643]
[83.96281433 126.11406708]
[73.30215454 117.58014679]
[67.06024933 104.79575348]
[66.86869812 89.99887085]
[51.93439102 88.59656525]
[37.00008392 87.19426727]
[22.02929115 86.25863647]
[7.03659439 85.79059601]
[-7.95610189 85.32254791]
[-17.35729408 97.66748047]
[-32.22882843 102.09659576]
[-46.85229874 96.90681458]
[-55.60467911 84.09371948]
[-55.12050247 68.58419800]
[-45.58594513 56.34198761]
[-30.66723633 52.07445526]
[-16.10092735 57.42256546]
[-7.48805952 70.32985687]
[7.50463629 70.79789734]
[22.49733353 71.26593781]
[25.33510208 69.07173157]
[29.39762688 68.17866516]
[34.04478073 69.15659332]
[38.40238571 72.25995636]
[53.33669281 73.66226196]
[68.27100372 75.06455994]
[79.57000732 65.19883728]
[80.19398499 50.21182251]
[80.81796265 35.22480774]
[81.44194031 20.23779106]
[81.28590393 5.23860359]
[80.35027313 -9.73218822]
[69.80758667 -24.79312134]
[78.14662170 -40.20287323]
[76.89974976 -55.15095901]
[75.65287018 -70.09904480]
[74.40599823 -85.04713440]
[59.55556870 -87.71680450]
[45.90252686 -94.13995361]
[34.37776566 -103.87865448]
[25.76705742 -116.26889801]
[20.65749550 -130.46589661]
[19.39745903 -145.50167847]
[22.07286072 -160.35107422]
[28.50128555 -174.00163269]
[38.24443436 -185.52264404]
[50.63800049 -194.12855530]
[64.83697510 -199.23263550]
[79.87323761 -200.48687744]
[94.72160339 -197.80574036]
[108.36968231 -191.37203979]
[119.88691711 -181.62445068]
[128.48805237 -169.22755432]
[133.58665466 -155.02661133]
[134.83508301 -139.98986816]
[132.14820862 -125.14253998]
[125.70924377 -111.49694824]
[115.95720673 -99.98347473]
[103.55699158 -91.38712311]
[89.35408783 -86.29400635]
[90.60095978 -71.34592438]
[91.84783173 -56.39783478]
[93.09471130 -41.44974899]
[102.14667511 -33.36462021]
[103.27306366 -20.87661743]
[95.32106781 -10.66781616]
[96.25669098 4.30297518]
[108.21568298 -4.75144482]
[122.80221558 -1.25385952]
[129.35470581 12.23927879]
[123.08383179 25.86557770]
[108.57307434 29.66531563]
[96.42895508 20.86176872]
[95.80497742 35.84878540]
[95.18099976 50.83580017]
[94.55702209 65.82281494]
[106.16184998 67.28825378]
[116.16835785 72.42427063]
[123.51026154 80.34284973]
[127.52384949 89.88256836]
[142.45816040 88.48027039]
[157.39245605 87.07796478]
[172.32676697 85.67565918]
[187.26107788 84.27335358]
[202.46559143 76.77274323]
[213.88209534 89.30668640]
[204.99839783 103.74677277]
[188.66337585 99.20766449]
[173.72908020 100.60997009]
[158.79476929 102.01226807]
[143.86045837 103.41457367]
[128.92614746 104.81687927]
[123.06201172 118.11264801]
[111.53469849 126.96062469]
[113.71154022 141.80183411]
[115.88837433 156.64303589]
[118.06521606 171.48423767]
[129.51528931 174.52711487]
[138.99227905 182.35269165]
[144.53396606 193.81684875]
[144.80000305 206.99053955]
[139.37467957 219.48283386]
[128.90798950 228.87483215]
[132.31097412 243.48373413]
[135.71395874 258.09262085]
[142.16601562 244.55117798]
[154.44587708 235.93693542]
[169.37492371 234.47967529]
[183.08882141 240.55661011]
[192.03776550 252.59472656]
[193.90534973 267.47802734]
[188.20816040 281.35397339]
[176.42089844 290.63082886]
[161.59465027 292.90734863]
[147.56715393 287.59420776]
[137.96942139 276.06683350]
[138.28147888 291.06356812]
[138.59353638 306.06033325]
[138.90559387 321.05709839]
[139.21765137 336.05383301]
[139.52970886 351.05059814]
[139.84176636 366.04733276]
[140.15382385 381.04409790]
[140.46588135 396.04086304]
[143.05686951 415.24856567]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 149]
[2 148]
[3 147]
[4 146]
[5 145]
[6 144]
[7 143]
[8 142]
[9 141]
[10 130]
[11 129]
[12 128]
[13 20]
[14 19]
[22 122]
[23 121]
[24 120]
[25 119]
[29 51]
[30 50]
[31 49]
[32 45]
[33 44]
[34 43]
[52 101]
[53 100]
[54 99]
[55 98]
[56 92]
[57 91]
[59 88]
[60 87]
[61 86]
[62 85]
[105 117]
[106 116]
[107 115]
[108 114]
[109 113]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
