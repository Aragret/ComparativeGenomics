%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:47 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCCACAGGCUUCCACGGACUUCACGUCAUUAUUGGCUCAACUUUCCUCACUAUCUGCUUCAxxxxxxxxxxCUCAUCCAAACCCCCUGAAGCUUCACCGGCGCAGUCAUUCUCAUAAUCGCCCACGGGCUUCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[100.32100677 402.41198730]
[100.32100677 387.41198730]
[100.32100677 372.41198730]
[100.32100677 357.41198730]
[100.32100677 342.41198730]
[100.32100677 327.41198730]
[100.32100677 312.41198730]
[100.32100677 297.41198730]
[100.32100677 282.41198730]
[100.32100677 267.41198730]
[86.59963226 264.39575195]
[73.81027222 258.56616211]
[62.52291489 250.18009949]
[53.24124908 239.60847473]
[46.38013458 227.31976318]
[42.24709702 213.85931396]
[41.02852249 199.82508850]
[42.78126526 185.84112549]
[47.43000412 172.52981567]
[54.77046204 160.48413086]
[64.47838593 150.24127197]
[76.12388611 142.25871277]
[89.19044495 136.89372253]
[103.09783173 134.38740540]
[103.72180939 119.40039825]
[91.92517090 110.13544464]
[77.51295471 114.29333496]
[63.10073853 118.45121765]
[54.11812210 131.74377441]
[38.11429596 132.86497498]
[27.36602402 120.95471954]
[30.11846352 105.14953613]
[44.26017761 97.57382202]
[58.94285202 104.03900146]
[73.35506439 99.88111877]
[87.76728058 95.72322845]
[98.31857300 85.06159973]
[102.32631683 70.60691833]
[106.33405304 56.15222549]
[110.34179688 41.69753647]
[114.34953308 27.24284935]
[102.05484009 18.40736771]
[93.54084015 5.92201948]
[89.81919098 -8.69542122]
[91.32036591 -23.67596054]
[97.84396362 -37.21346664]
[108.58525085 -47.68243408]
[122.23435211 -53.83313751]
[137.13597107 -54.94083405]
[141.14370728 -69.39552307]
[145.15145874 -83.85021210]
[132.68536377 -90.50555420]
[121.89720917 -99.62332916]
[113.26515961 -110.79591370]
[107.17109680 -123.52470398]
[103.88367462 -137.24235535]
[103.54656219 -151.33802795]
[106.17208099 -165.18469238]
[111.64083099 -178.16687012]
[119.70709991 -189.70816040]
[130.00990295 -199.29666138]
[142.08912659 -206.50784302]
[155.40609741 -211.02319336]
[169.36761475 -212.64437866]
[183.35231018 -211.30194092]
[187.95787048 -225.57740784]
[192.56343079 -239.85285950]
[197.16900635 -254.12832642]
[201.77456665 -268.40377808]
[206.38012695 -282.67926025]
[193.48803711 -290.48248291]
[182.74343872 -301.04895020]
[174.72575378 -313.80880737]
[169.86738586 -328.07388306]
[168.43032837 -343.07495117]
[170.49209595 -358.00296021]
[175.94148254 -372.05291748]
[184.48461914 -384.46707153]
[195.66078186 -394.57598877]
[208.86726379 -401.83447266]
[223.39184570 -405.85110474]
[238.45123291 -406.40927124]
[253.23329163 -403.47888184]
[266.94085693 -397.21792603]
[278.83468628 -387.96408081]
[288.27334595 -376.21640015]
[294.74786377 -362.60839844]
[297.90905762 -347.87396240]
[297.58642578 -332.80770874]
[293.79736328 -318.22207642]
[286.74624634 -304.90374756]
[276.81332397 -293.57089233]
[264.53427124 -284.83468628]
[250.57124329 -279.16629028]
[235.67727661 -276.87136841]
[220.65559387 -278.07366943]
[216.05003357 -263.79821777]
[211.44445801 -249.52276611]
[206.83889771 -235.24729919]
[202.23333740 -220.97184753]
[197.62776184 -206.69638062]
[211.26295471 -198.47592163]
[222.56393433 -187.24874878]
[230.88232422 -173.65341187]
[235.73953247 -158.46449280]
[236.85429382 -142.54843140]
[234.15896606 -126.81419373]
[227.80358887 -112.16127014]
[218.14758301 -99.42831421]
[205.73936462 -89.34510040]
[191.28527832 -82.49073792]
[175.60929871 -79.26038361]
[159.60614014 -79.84246826]
[155.59840393 -65.38777924]
[151.59066772 -50.93309021]
[163.79434204 -42.31012344]
[172.32746887 -30.00911713]
[176.14431763 -15.50373173]
[174.76553345 -0.53976095]
[168.33830261 13.07496929]
[157.62092590 23.68900871]
[143.89329529 30.00759697]
[128.80422974 31.25058937]
[124.79648590 45.70527649]
[120.78874207 60.15996552]
[116.78100586 74.61465454]
[112.77326202 89.06934357]
[118.70882416 120.02437592]
[118.08484650 135.01138306]
[133.49372864 139.37098694]
[147.42068481 147.25842285]
[159.07205200 158.21965027]
[167.78498840 171.62561035]
[173.06509399 186.70828247]
[174.61448669 202.60478210]
[172.34861755 218.40657043]
[166.40087891 233.21156311]
[157.11471558 246.17549133]
[145.02384949 256.56005859]
[130.82156372 263.77511597]
[115.32100677 267.41198730]
[115.32100677 282.41198730]
[115.32100677 297.41198730]
[115.32100677 312.41198730]
[115.32100677 327.41198730]
[115.32100677 342.41198730]
[115.32100677 357.41198730]
[115.32100677 372.41198730]
[115.32100677 387.41198730]
[115.32100677 402.41198730]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[24 129]
[25 128]
[26 36]
[27 35]
[28 34]
[37 127]
[38 126]
[39 125]
[40 124]
[41 123]
[49 115]
[50 114]
[51 113]
[65 101]
[66 100]
[67 99]
[68 98]
[69 97]
[70 96]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
