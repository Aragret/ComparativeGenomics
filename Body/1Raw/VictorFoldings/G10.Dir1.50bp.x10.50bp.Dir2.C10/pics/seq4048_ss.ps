%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:24 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGUCGCCCUAUUCUUCAUAGCCGAAUACACAAACAUUAUUAUAAUAAACACCCUCACCACUAxxxxxxxxxxAUUCGCCUACACAAUUCUCCGAUCCGUCCCUAACAAACUAGGAGGCGUCCUUGCCCUAUUCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[125.28124237 334.18951416]
[124.65726471 319.20248413]
[124.03328705 304.21548462]
[123.40930939 289.22845459]
[122.78533173 274.24145508]
[122.16135406 259.25442505]
[121.53737640 244.26741028]
[120.91339874 229.28039551]
[118.73656464 214.43919373]
[115.03040314 199.90425110]
[104.38837433 189.48329163]
[108.47607422 174.19926453]
[104.76991272 159.66433716]
[101.06375122 145.12939453]
[97.35758972 130.59446716]
[83.18103027 125.69290924]
[71.28865051 134.83464050]
[59.39627075 143.97637939]
[47.50389099 153.11811829]
[44.00628281 168.77526855]
[29.52177238 175.67298889]
[15.16163731 168.51992798]
[11.94174576 152.80332947]
[22.33212090 140.57958984]
[38.36215591 141.22573853]
[50.25453568 132.08399963]
[62.14691544 122.94226837]
[74.03929901 113.80052948]
[73.40780640 90.87472534]
[89.03461456 75.51553345]
[78.82113647 64.52986908]
[68.60765839 53.54420471]
[58.39417648 42.55854034]
[48.18069458 31.57287598]
[35.93889999 40.27882004]
[22.66545486 47.31235886]
[8.58748341 52.55313492]
[-6.05412054 55.91147232]
[-21.00882149 57.32990646]
[-36.02072144 56.78416824]
[-50.83295059 54.28359222]
[-65.19205475 49.87096786]
[-78.85231781 43.62180328]
[-91.58000946 35.64302444]
[-103.15734100 26.07116508]
[-113.38619995 15.07000732]
[-122.09156036 2.82779837]
[-129.12446594 -10.44598293]
[-134.36457825 -24.52420425]
[-137.72221375 -39.16596603]
[-139.13993835 -54.12073517]
[-138.59347534 -69.13261414]
[-136.09220886 -83.94472504]
[-131.67889404 -98.30361176]
[-125.42907715 -111.96358490]
[-117.44969940 -124.69089508]
[-107.87728119 -136.26776123]
[-96.87564087 -146.49610901]
[-84.63301849 -155.20088196]
[-71.35890198 -162.23315430]
[-57.28042984 -167.47259521]
[-42.63850784 -170.82952881]
[-27.68367195 -172.24655151]
[-12.67182255 -171.69937134]
[2.14016891 -169.19738770]
[16.49884987 -164.78340149]
[30.15852356 -158.53292847]
[42.88545609 -150.55294800]
[54.46187210 -140.97998047]
[64.68968201 -129.97785950]
[73.39388275 -117.73481750]
[80.42552185 -104.46036530]
[85.66428375 -90.38164520]
[89.02053070 -75.73956299]
[90.43683624 -60.78466034]
[89.88895416 -45.77283478]
[87.38626099 -30.96096420]
[82.97158813 -16.60249329]
[76.72046661 -2.94311690]
[68.73987579 9.78343487]
[59.16636276 21.35939598]
[69.37983704 32.34505844]
[79.59332275 43.33072662]
[89.80680084 54.31639099]
[100.02027893 65.30205536]
[114.66378021 68.55287933]
[128.56634521 62.92092514]
[142.46888733 57.28896713]
[156.37144470 51.65700912]
[153.63885498 36.85438156]
[153.94229126 21.80470276]
[157.26931763 7.12424994]
[163.48371887 -6.58582306]
[172.33100891 -18.76409721]
[183.44889832 -28.91187859]
[196.38211060 -36.61362457]
[210.60104370 -41.55395126]
[225.52343750 -43.53055573]
[240.53823853 -42.46249771]
[255.03059387 -38.39351273]
[268.40704346 -31.49022293]
[280.11984253 -22.03531647]
[289.68936157 -10.41596222]
[296.72369385 2.89203215]
[300.93484497 17.34371376]
[302.15036011 32.34729385]
[300.32043457 47.28838730]
[295.52001953 61.55516434]
[287.94570923 74.56340790]
[277.90762329 85.78044891]
[265.81683350 94.74694061]
[252.16847229 101.09571838]
[237.52140808 104.56680298]
[222.47544861 105.01805878]
[207.64668274 102.43100739]
[193.64236450 96.91158295]
[181.03596497 88.68579865]
[170.34370422 78.09050751]
[162.00340271 65.55956268]
[148.10084534 71.19152069]
[134.19828796 76.82347870]
[120.29573822 82.45543671]
[127.43194580 106.15662384]
[111.89252472 126.88829803]
[115.59868622 141.42323303]
[119.30484772 155.95817566]
[123.01100922 170.49310303]
[133.91813660 181.95370483]
[129.56533813 196.19808960]
[133.27149963 210.73303223]
[139.44046021 197.06028748]
[151.53845215 188.19244385]
[166.43394470 186.42492676]
[180.27130127 192.21524048]
[189.46875000 204.06457520]
[191.64555359 218.90579224]
[186.23826599 232.89726257]
[174.64654541 242.41734314]
[159.87086487 245.00180054]
[145.73588562 239.98164368]
[135.90042114 228.65641785]
[136.52439880 243.64343262]
[137.14837646 258.63046265]
[137.77235413 273.61746216]
[138.39633179 288.60449219]
[139.02030945 303.59149170]
[139.64428711 318.57852173]
[140.26826477 333.56552124]
[146.96824646 349.13943481]
[133.85772705 359.88885498]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 148]
[2 147]
[3 146]
[4 145]
[5 144]
[6 143]
[7 142]
[8 141]
[9 130]
[10 129]
[12 127]
[13 126]
[14 125]
[15 124]
[16 28]
[17 27]
[18 26]
[19 25]
[30 85]
[31 84]
[32 83]
[33 82]
[34 81]
[86 122]
[87 121]
[88 120]
[89 119]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
