%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:36 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCCUAUUCUUCAUAGCCGAAUACACAAACAUUAUUAUAAUAAACACCCUCACCACUACAAUCxxxxxxxxxxAUCACCCGAUGAGGCAACCAGCCAGAACGCCUGAACGCAGGCACAUACUUCCUAUUCUACACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[98.87326813 271.92636108]
[98.87326813 256.92636108]
[98.87326813 241.92636108]
[98.87326813 226.92636108]
[98.87326813 211.92636108]
[98.87326813 196.92636108]
[98.87326813 181.92636108]
[98.87326813 166.92636108]
[98.87326813 151.92636108]
[98.87326813 136.92636108]
[84.18629456 131.00814819]
[74.15125275 119.98241425]
[70.17996979 106.57418060]
[72.30992126 93.68835449]
[79.33544159 83.78890228]
[70.66883850 71.54595184]
[62.00222778 59.30299759]
[53.33562088 47.06004333]
[33.86148071 22.17316818]
[22.67318344 12.18207073]
[11.48488808 2.19097352]
[0.29659101 -7.80012369]
[-4.93656540 -8.88147354]
[-8.81186199 -11.61783695]
[-10.92199707 -15.19791126]
[-11.24853420 -18.76730728]
[-21.80055046 -29.42821693]
[-33.48402786 -20.00020790]
[-46.06138992 -11.80258751]
[-59.40357208 -4.91947556]
[-73.37365723 0.57849556]
[-87.82829285 4.63490725]
[-102.61915588 7.20813465]
[-117.59445953 8.27177238]
[-132.60052490 7.81490469]
[-147.48339844 5.84222078]
[-162.09031677 2.37396359]
[-176.27140808 -2.55427742]
[-189.88114929 -8.89192963]
[-202.77989197 -16.57395935]
[-214.83526611 -25.52153587]
[-225.92355347 -35.64284134]
[-235.93098450 -46.83401871]
[-244.75485229 -58.98022079]
[-252.30462646 -71.95681763]
[-258.50280762 -85.63063812]
[-263.28582764 -99.86136627]
[-266.60458374 -114.50298309]
[-268.42504883 -129.40522766]
[-268.72848511 -144.41519165]
[-267.51181030 -159.37884521]
[-264.78753662 -174.14262390]
[-260.58355713 -188.55503845]
[-254.94306946 -202.46818542]
[-247.92391968 -215.73930359]
[-239.59815979 -228.23220825]
[-230.05120850 -239.81871033]
[-219.38104248 -250.37988281]
[-207.69714355 -259.80737305]
[-195.11943054 -268.00445557]
[-181.77694702 -274.88696289]
[-167.80661011 -280.38433838]
[-153.35180664 -284.44009399]
[-138.56082153 -287.01266479]
[-123.58547974 -288.07565308]
[-108.57942200 -287.61813354]
[-93.69664764 -285.64480591]
[-79.08988190 -282.17590332]
[-64.90900421 -277.24703979]
[-51.29953766 -270.90878296]
[-38.40113449 -263.22616577]
[-26.34616280 -254.27807617]
[-15.25831795 -244.15628052]
[-5.25138283 -232.96466064]
[3.57195592 -220.81806946]
[11.12115669 -207.84114075]
[17.31875038 -194.16705322]
[22.10114288 -179.93611145]
[25.41925621 -165.29434204]
[27.23904228 -150.39201355]
[27.54182625 -135.38204956]
[26.32450104 -120.41844940]
[23.59955978 -105.65478516]
[19.39496231 -91.24256134]
[13.75385857 -77.32965088]
[6.73413229 -64.05883789]
[-1.59218132 -51.56630325]
[-11.13964081 -39.98023224]
[-0.58762586 -29.31932259]
[10.28768826 -18.98842049]
[21.47598457 -8.99732304]
[32.66427994 0.99377382]
[43.85257721 10.98487091]
[58.83993149 11.60069656]
[70.81018829 2.56117678]
[82.78044891 -6.47834301]
[86.41206360 -22.10495377]
[100.95513153 -28.87833405]
[115.25345612 -21.60252762]
[118.33859253 -5.85891008]
[107.84387970 6.27536297]
[91.81996918 5.49191570]
[79.84970856 14.53143501]
[67.87944794 23.57095528]
[65.57857513 38.39343643]
[74.24518585 50.63639069]
[82.91178894 62.87934494]
[91.57839966 75.12229919]
[118.94655609 74.70490265]
[136.91194153 101.52766418]
[151.87322998 102.60473633]
[166.83450317 103.68180084]
[181.79579163 104.75887299]
[196.75706482 105.83594513]
[211.26702881 98.19439697]
[224.99359131 107.16732025]
[223.81605530 123.52413940]
[208.94577026 130.43835449]
[195.67999268 120.79722595]
[180.71871948 119.72015381]
[165.75743103 118.64308167]
[150.79615784 117.56601715]
[135.83486938 116.48894501]
[130.34448242 121.59829712]
[142.95785522 129.71633911]
[155.57124329 137.83438110]
[168.18463135 145.95240784]
[180.79801941 154.07044983]
[195.29298401 157.92993164]
[206.43072510 167.97735596]
[211.75787354 181.99954224]
[210.10099792 196.90774536]
[201.82505798 209.41810608]
[188.75303650 216.77488708]
[173.76435852 217.35758972]
[160.16064453 211.03787231]
[150.93843079 199.20779419]
[148.12921143 184.47195435]
[140.93782043 171.30822754]
[133.74644470 158.14448547]
[126.55505371 144.98074341]
[119.36367035 131.81700134]
[113.87326813 136.92636108]
[113.87326813 151.92636108]
[113.87326813 166.92636108]
[113.87326813 181.92636108]
[113.87326813 196.92636108]
[113.87326813 211.92636108]
[113.87326813 226.92636108]
[113.87326813 241.92636108]
[113.87326813 256.92636108]
[113.87326813 271.92636108]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 152]
[2 151]
[3 150]
[4 149]
[5 148]
[6 147]
[7 146]
[8 145]
[9 144]
[10 143]
[15 108]
[16 107]
[17 106]
[18 105]
[19 93]
[20 92]
[21 91]
[22 90]
[26 89]
[27 88]
[94 104]
[95 103]
[96 102]
[110 123]
[111 122]
[112 121]
[113 120]
[114 119]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
