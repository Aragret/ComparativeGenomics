%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:36 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCCUACUCCUGCUCGCAUCUGCUAUAGUGGAGGCCGGAGCAGGAACAGGUUGAACAGUCUACxxxxxxxxxxCAACCAAUAGCCCUGGCCGUACGCCUAACCGCUAACAUUACUGCAGGCCACCUACUCAUGCCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[128.92008972 321.10238647]
[128.30427551 306.11502075]
[127.68844604 291.12768555]
[127.07261658 276.14031982]
[126.45679474 261.15298462]
[125.84097290 246.16561890]
[125.22514343 231.17826843]
[124.60932159 216.19091797]
[122.15638733 201.39283752]
[117.90354156 187.00834656]
[113.65069580 172.62387085]
[109.39785004 158.23939514]
[105.14500427 143.85490417]
[85.37812805 141.66442871]
[68.57749939 131.02177429]
[58.15133667 114.08593750]
[43.32885742 116.38681030]
[28.50637436 118.68768311]
[13.68389130 120.98856354]
[-1.13859046 123.28943634]
[-15.96107292 125.59030914]
[-30.78355408 127.89118195]
[-45.60603714 130.19206238]
[-60.37815475 132.79678345]
[-75.09367371 135.70425415]
[-87.13239288 145.96972656]
[-101.11801910 140.84611511]
[-115.83354187 143.75358582]
[-130.54907227 146.66105652]
[-145.26458740 149.56852722]
[-159.98011780 152.47599792]
[-171.96055603 163.67427063]
[-187.56781006 158.63983154]
[-190.74647522 142.55169678]
[-178.22662354 131.95994568]
[-162.88758850 137.76048279]
[-148.17205811 134.85299683]
[-133.45654297 131.94552612]
[-118.74102020 129.03805542]
[-104.02549744 126.13058472]
[-93.03932953 116.07308197]
[-78.00114441 120.98873138]
[-63.28562546 118.08126068]
[-59.90183258 114.63174438]
[-54.29454803 113.31028748]
[-47.90690994 115.36957550]
[-33.08443069 113.06870270]
[-18.26194763 110.76782990]
[-3.43946528 108.46694946]
[11.38301659 106.16607666]
[26.20549965 103.86520386]
[41.02798080 101.56433105]
[55.85046387 99.26345062]
[57.96534729 86.47919464]
[63.70025253 74.85935211]
[72.56128693 65.40460968]
[83.78533936 58.92922211]
[80.72694397 44.24432373]
[77.66854858 29.55942726]
[74.61015320 14.87452984]
[71.55175781 0.18963195]
[56.49377060 -1.00778174]
[42.38358307 -6.40030479]
[30.36504364 -15.55078888]
[21.41243935 -27.71744728]
[16.25151825 -41.91398239]
[15.30065250 -56.98954010]
[18.63692665 -71.72202301]
[25.98988152 -84.91712189]
[36.76344681 -95.50518036]
[50.08425903 -102.62786865]
[64.87245941 -105.70777893]
[79.92922974 -104.49523926]
[94.03399658 -99.08853912]
[106.04333496 -89.92598724]
[114.98371124 -77.75034332]
[120.13037109 -63.54862976]
[121.06608582 -48.47212219]
[117.71501923 -33.74300003]
[110.34880829 -20.55529213]
[99.56461334 -9.97806358]
[86.23664856 -2.86876345]
[89.29504395 11.81613445]
[92.35343933 26.50103188]
[95.41183472 41.18592834]
[98.47023010 55.87082672]
[111.73816681 57.43311691]
[123.93157959 62.89200211]
[133.93429565 71.74777222]
[146.92466736 64.24777222]
[159.91505432 56.74777603]
[172.90542603 49.24777603]
[174.22927856 31.21584892]
[185.97329712 17.67523384]
[203.33119202 13.88187408]
[219.36814880 21.15974808]
[232.03965759 13.13275051]
[244.71116638 5.10575390]
[249.61256409 -10.17023849]
[264.66229248 -15.72766113]
[278.31552124 -7.30333471]
[280.09863281 8.64031792]
[268.64379883 19.87269211]
[252.73817444 17.77726936]
[240.06665039 25.80426598]
[227.39514160 33.83126450]
[228.42445374 45.99678040]
[224.13558960 57.50497437]
[215.29182434 66.13076782]
[203.54327393 70.17832947]
[191.11929321 68.81421661]
[180.40542603 62.23815536]
[167.41505432 69.73815918]
[154.42466736 77.23815918]
[141.43429565 84.73815918]
[143.70034790 93.67520142]
[144.06114197 102.88800049]
[158.64488220 106.39717102]
[174.20912170 101.23127747]
[186.28358459 112.32810211]
[182.44709778 128.27217102]
[166.64630127 132.66160583]
[155.13571167 120.98091888]
[140.55197144 117.47174835]
[132.01379395 130.41120911]
[119.52948761 139.60206604]
[123.78233337 153.98654175]
[128.03517151 168.37101746]
[132.28802490 182.75550842]
[136.54087830 197.13998413]
[141.43066406 182.95936584]
[151.90420532 172.22135925]
[165.95849609 166.97950745]
[180.90576172 168.23629761]
[193.88742065 175.75137329]
[202.42083740 188.08752441]
[204.87406921 202.88555908]
[200.77792358 217.31544495]
[190.91578674 228.61758423]
[177.17370605 234.63049316]
[162.17976379 234.20428467]
[148.80143738 227.42044067]
[139.59666443 215.57508850]
[140.21249390 230.56243896]
[140.82832336 245.54978943]
[141.44415283 260.53713989]
[142.05996704 275.52450562]
[142.67579651 290.51184082]
[143.29162598 305.49920654]
[143.90745544 320.48657227]
[150.59896851 336.06411743]
[137.48258972 346.80639648]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 130]
[10 129]
[11 128]
[12 127]
[13 126]
[16 53]
[17 52]
[18 51]
[19 50]
[20 49]
[21 48]
[22 47]
[23 46]
[24 43]
[25 42]
[27 40]
[28 39]
[29 38]
[30 37]
[31 36]
[57 86]
[58 85]
[59 84]
[60 83]
[61 82]
[89 115]
[90 114]
[91 113]
[92 112]
[96 106]
[97 105]
[98 104]
[117 124]
[118 123]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
