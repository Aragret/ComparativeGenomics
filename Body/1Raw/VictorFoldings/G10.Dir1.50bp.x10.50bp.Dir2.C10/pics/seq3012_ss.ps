%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:49 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGUAUCAACAAUAGGGUUUACGACCUCGAUGUUGGAUCAGGACAUCCCGAUGGUGCAGCCGCUxxxxxxxxxxAGCAGUAGCCCAAACAAUCUCAUAUGAAGUCACCCUAGCCAUCAUUCUACUAUCAACAUUACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[151.12757874 437.63442993]
[151.12757874 422.63442993]
[151.12757874 407.63442993]
[151.12757874 392.63442993]
[151.12757874 377.63442993]
[151.12757874 362.63442993]
[151.12757874 347.63442993]
[151.12757874 332.63442993]
[151.12757874 317.63442993]
[151.12757874 302.63442993]
[147.61842346 288.05065918]
[143.46656799 302.46463013]
[131.73338318 311.80981445]
[116.75592041 312.63183594]
[104.07048035 304.62686157]
[98.36611938 290.75384521]
[101.75141144 276.14083862]
[112.97500610 266.18942261]
[127.88819885 264.57803345]
[140.97772217 271.90151978]
[136.43043518 257.60739136]
[131.88314819 243.31324768]
[127.33585358 229.01911926]
[122.78855896 214.72499084]
[118.24127197 200.43086243]
[115.74767303 199.02622986]
[113.67851257 196.51867676]
[112.46833801 193.07160950]
[112.48187256 189.00671387]
[113.95978546 184.77406311]
[110.60052490 170.15504456]
[107.24126434 155.53604126]
[96.85021210 144.86480713]
[101.30043030 129.68238831]
[97.94116974 115.06337738]
[86.75713348 111.63538361]
[79.94735718 100.13610077]
[82.91407776 85.39421082]
[77.49545288 71.40712738]
[72.07682800 57.42004395]
[66.65820312 43.43296051]
[56.32729721 32.55764389]
[42.63667297 26.42847061]
[28.94604683 20.29929733]
[15.25542068 14.17012310]
[0.58044255 20.03702736]
[-13.91173363 13.73207951]
[-19.62315750 -1.00410700]
[-13.16534138 -15.42881393]
[1.63040566 -20.98411751]
[15.98603058 -14.37415695]
[21.38459396 0.47949770]
[35.07521820 6.60867167]
[48.76584625 12.73784542]
[62.45647049 18.86701965]
[68.70848846 14.72428226]
[67.78476715 -0.24724869]
[81.21252441 6.43880749]
[87.46454620 2.29607010]
[87.15656281 -12.70076752]
[86.84858704 -27.69760513]
[83.52687073 -36.27443314]
[86.69142914 -43.00479126]
[86.69142914 -58.00479126]
[73.49691772 -65.74121094]
[65.99587250 -78.95601654]
[66.11570740 -94.05078888]
[73.72410583 -106.97240448]
[86.69142914 -114.30139923]
[86.69142914 -129.30140686]
[86.69142914 -144.30140686]
[73.35030365 -151.91125488]
[65.61533356 -165.18023682]
[65.56719208 -180.53904724]
[73.21882629 -193.85626221]
[86.51198578 -201.54960632]
[101.87087250 -201.54960632]
[115.16403198 -193.85626221]
[122.81566620 -180.53904724]
[122.76752472 -165.18023682]
[115.03255463 -151.91125488]
[101.69142914 -144.30140686]
[101.69142914 -129.30140686]
[101.69142914 -114.30139923]
[114.65875244 -106.97240448]
[122.26714325 -94.05078888]
[122.38697815 -78.95601654]
[114.88594055 -65.74121094]
[101.69142914 -58.00479126]
[101.69142914 -43.00479126]
[101.84542847 -28.00558281]
[102.15340424 -13.00874519]
[102.46138000 1.98809254]
[80.64528656 38.01433563]
[86.06391144 52.00141907]
[91.48253632 65.98850250]
[96.90116119 79.97558594]
[111.04847717 84.96090698]
[124.03885651 77.46090698]
[129.56326294 62.39902115]
[144.82847595 57.46414948]
[158.12432861 66.44190979]
[159.25135803 82.44532013]
[147.34503174 93.19794464]
[131.53884888 90.45128632]
[118.54847717 97.95128632]
[112.56018066 111.70411682]
[115.91943359 126.32312012]
[126.55077362 138.04000854]
[121.86027527 152.17678833]
[125.21953583 166.79579163]
[128.57879639 181.41479492]
[132.53540039 195.88356018]
[137.08268738 210.17770386]
[141.62997437 224.47183228]
[146.17727661 238.76596069]
[150.72456360 253.06008911]
[155.27185059 267.35421753]
[160.97651672 281.22711182]
[162.00737000 266.26257324]
[166.66096497 252.00268555]
[174.65559387 239.31071472]
[185.50726318 228.95498657]
[198.55906677 221.56239319]
[213.02088928 217.58045959]
[228.01724243 217.25024414]
[242.64033508 220.59173584]
[256.00488281 227.40264893]
[267.30187988 237.27067566]
[275.84741211 249.59843445]
[281.12420654 263.63964844]
[282.81277466 278.54431152]
[280.81091309 293.41012573]
[275.23980713 307.33718872]
[266.43670654 319.48236084]
[254.93455505 329.11047363]
[241.42961121 335.63861084]
[226.73945618 338.67163086]
[211.75335693 338.02587891]
[197.37854004 333.74047852]
[184.48521423 326.07485962]
[173.85386658 315.49304199]
[166.12757874 302.63442993]
[166.12757874 317.63442993]
[166.12757874 332.63442993]
[166.12757874 347.63442993]
[166.12757874 362.63442993]
[166.12757874 377.63442993]
[166.12757874 392.63442993]
[166.12757874 407.63442993]
[166.12757874 422.63442993]
[166.12757874 437.63442993]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 152]
[2 151]
[3 150]
[4 149]
[5 148]
[6 147]
[7 146]
[8 145]
[9 144]
[10 143]
[11 119]
[20 118]
[21 117]
[22 116]
[23 115]
[24 114]
[25 113]
[30 112]
[31 111]
[32 110]
[34 108]
[35 107]
[38 97]
[39 96]
[40 95]
[41 94]
[42 55]
[43 54]
[44 53]
[45 52]
[59 93]
[60 92]
[61 91]
[63 90]
[64 89]
[69 84]
[70 83]
[71 82]
[98 106]
[99 105]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
