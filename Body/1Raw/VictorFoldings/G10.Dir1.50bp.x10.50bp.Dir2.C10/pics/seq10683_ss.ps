%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:00 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGUCUCUUCCCCACAACAAUAUUCAUGUGCCUAGACCAAGAAGUUAUUAUCUCGAACUGACACxxxxxxxxxxAUAGUACAUAAAGCCAUUUACCGUACAUAGCACAUUACAGUCAAAUCCCUUCUCGUCCCCACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[115.36235046 252.42666626]
[114.74652863 237.43931580]
[114.13069916 222.45196533]
[113.51487732 207.46461487]
[112.89904785 192.47724915]
[112.28322601 177.48989868]
[111.66740417 162.50254822]
[111.05157471 147.51519775]
[98.13887787 139.88223267]
[84.71142578 146.56829834]
[71.28398132 153.25437927]
[57.85652924 159.94044495]
[44.42908096 166.62652588]
[44.52138901 178.19447327]
[40.28127289 188.90232849]
[32.36553574 197.19650269]
[21.96117401 201.88934326]
[10.60747337 202.32897949]
[-0.03168885 198.48974609]
[-8.41168690 190.97015381]
[-22.22526932 196.81694031]
[-36.03885269 202.66372681]
[-49.85243607 208.51052856]
[-51.66020584 223.76264954]
[-60.86470413 236.05789185]
[-74.98995972 242.08888245]
[-90.23634338 240.23330688]
[-102.50267029 230.99031067]
[-108.48934937 216.84622192]
[-106.58599854 201.60572815]
[-97.30460358 189.36843872]
[-83.14182281 183.42611694]
[-67.90736389 185.37722778]
[-55.69922256 194.69694519]
[-41.88563919 188.85015869]
[-28.07205772 183.00335693]
[-14.25847435 177.15657043]
[-11.15554905 158.78967285]
[2.44822502 145.84831238]
[21.24282837 143.63040161]
[37.74300385 153.19908142]
[51.17045212 146.51300049]
[64.59790039 139.82691956]
[78.02535248 133.14085388]
[91.45280457 126.45477295]
[77.92028809 111.72908783]
[78.67284393 93.82843781]
[66.51950836 85.03659821]
[54.36617661 76.24475861]
[39.66086960 81.19789124]
[24.86273956 76.52938843]
[15.66196728 64.03437042]
[15.59643936 48.51743698]
[24.69135094 35.94515610]
[39.44952393 31.15183258]
[54.19614029 35.98059464]
[63.26082230 48.57468796]
[63.15802002 64.09142303]
[75.31134796 72.88326263]
[87.46468353 81.67510986]
[117.60533142 82.24788666]
[123.07572937 115.50550079]
[133.40663147 104.63018799]
[133.17553711 89.05506897]
[143.80746460 78.17312622]
[158.65737915 78.04878998]
[168.98828125 67.17347717]
[179.31918335 56.29816437]
[189.65008545 45.42285156]
[181.38461304 33.79664993]
[175.42156982 20.84263611]
[171.96659851 7.01132107]
[171.13815308 -7.21658897]
[172.96337891 -21.34691238]
[177.37733459 -34.88915253]
[184.22523499 -47.37352753]
[193.26785278 -58.36725235]
[204.18995667 -67.48957062]
[216.61123657 -74.42490387]
[230.09954834 -78.93380737]
[244.18600464 -80.86121368]
[258.38119507 -80.14176178]
[272.19223022 -76.80202484]
[285.13992310 -70.95953369]
[296.77526855 -62.81861877]
[307.54394531 -73.26062775]
[318.31262207 -83.70263672]
[329.08129883 -94.14464569]
[333.67547607 -111.94701385]
[350.80819702 -115.62317657]
[361.36022949 -126.28408051]
[371.91223145 -136.94499207]
[382.46426392 -147.60589600]
[386.10165405 -163.59655762]
[401.84649658 -168.18263245]
[413.50183105 -156.64636230]
[409.07763672 -140.85527039]
[393.12515259 -137.05387878]
[382.57315063 -126.39297485]
[372.02111816 -115.73207092]
[361.46911621 -105.07115936]
[361.20596313 -92.93885040]
[352.44821167 -83.96817780]
[339.52331543 -83.37596893]
[328.75463867 -72.93395996]
[317.98593140 -62.49195099]
[307.21725464 -52.04994202]
[315.72283936 -38.76115036]
[321.31146240 -24.00052452]
[323.74145508 -8.40001774]
[322.90643311 7.37196302]
[318.83996582 22.63920021]
[311.71420288 36.74665070]
[301.83258057 49.08855820]
[289.61697388 59.13445663]
[275.58959961 66.45197296]
[260.35070801 70.72544098]
[244.55297852 71.76950073]
[228.87345886 69.53716278]
[213.98458862 64.12190247]
[200.52540588 55.75375366]
[190.19450378 66.62906647]
[179.86360168 77.50437927]
[169.53269958 88.37969208]
[170.17048645 103.21643066]
[159.84840393 114.39271545]
[144.28193665 114.96109009]
[133.95103455 125.83640289]
[145.09281921 115.79345703]
[159.16766357 110.60704041]
[174.16200256 111.01913452]
[187.93072510 116.97078705]
[198.50407410 127.61053467]
[204.36940002 141.41625977]
[204.68762207 156.41287231]
[199.41319275 170.45497131]
[189.30068970 181.53366089]
[175.79681396 188.06401062]
[160.83345032 189.11177063]
[146.55128479 184.52706909]
[134.99351501 174.96578979]
[127.81363678 161.79577637]
[126.03892517 146.89936829]
[126.65475464 161.88671875]
[127.27057648 176.87408447]
[127.88640594 191.86143494]
[128.50222778 206.84878540]
[129.11805725 221.83613586]
[129.73388672 236.82348633]
[130.34970093 251.81083679]
[137.04122925 267.38839722]
[123.92485046 278.13070679]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 45]
[10 44]
[11 43]
[12 42]
[13 41]
[20 37]
[21 36]
[22 35]
[23 34]
[47 60]
[48 59]
[49 58]
[62 128]
[63 127]
[66 124]
[67 123]
[68 122]
[69 121]
[85 107]
[86 106]
[87 105]
[88 104]
[90 101]
[91 100]
[92 99]
[93 98]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
