%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:51 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCAGUAAACUAAGAGUAGAGUGCUUAGUUGAACAGGGCCCUGAAGCGCGUACACACCGCCCxxxxxxxxxxUUGACUCCUAGCCGCAGACCUCCUCAUUCUAACCUGAAUCGGAGGACAACCAGUAAGCUACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[119.69548798 262.96414185]
[119.69548798 247.96412659]
[119.69548798 232.96412659]
[119.69548798 217.96412659]
[119.69548798 202.96412659]
[119.69548798 187.96412659]
[119.69548798 172.96412659]
[119.69548798 157.96412659]
[119.69548798 142.96412659]
[119.69548798 127.96413422]
[103.96346283 131.07585144]
[89.97998047 126.62846375]
[80.84250641 116.94317627]
[67.18626404 123.14858246]
[56.86687088 138.36337280]
[39.49773026 136.05841064]
[25.97353935 142.54656982]
[12.44934940 149.03474426]
[-1.07484078 155.52290344]
[-14.59903049 162.01107788]
[-28.12322044 168.49923706]
[-41.64741135 174.98739624]
[-43.45167542 190.30889893]
[-53.27058029 202.20817566]
[-67.97094727 206.88819885]
[-82.86194611 202.85562134]
[-93.19190979 191.39720154]
[-95.66458893 176.16928101]
[-89.49095154 162.03105164]
[-76.64099121 153.49394226]
[-61.21508408 153.28213501]
[-48.13557434 161.46321106]
[-34.61138535 154.97505188]
[-21.08719635 148.48687744]
[-7.56300592 141.99871826]
[5.96118402 135.51055908]
[19.48537445 129.02238464]
[33.00956345 122.53422546]
[37.34128189 111.19651794]
[48.60955429 105.69697571]
[60.98085785 109.49234009]
[74.63710022 103.28693390]
[80.10089874 79.66525269]
[104.69803619 69.02668762]
[130.09573364 83.74725342]
[128.22811890 68.86396790]
[118.51470184 60.31391907]
[117.29669952 47.83451843]
[124.68534851 38.20564651]
[123.12776947 23.28673553]
[121.57019043 8.36782360]
[109.57848358 -1.57384086]
[108.21139526 -16.72592735]
[117.76315308 -28.09692192]
[116.20557404 -43.01583481]
[111.30402374 -57.19239044]
[103.31410980 -69.88732147]
[95.32419586 -82.58225250]
[79.80826569 -84.52906036]
[69.21172333 -96.02894592]
[68.53792572 -111.65200043]
[78.10501862 -124.02150726]
[93.39571381 -127.29695892]
[107.19021606 -119.93179321]
[112.97518158 -105.40360260]
[108.01911926 -90.57216644]
[116.00904083 -77.87723541]
[123.99895477 -65.18231201]
[123.74196625 -80.18010712]
[127.30397797 -94.75103760]
[134.45120239 -107.93880463]
[144.71456909 -118.87787628]
[157.42048645 -126.85031891]
[171.73504639 -131.33288574]
[186.71876526 -132.03138733]
[201.38827515 -128.89997864]
[214.78077698 -122.14418793]
[226.01733398 -112.20738983]
[234.36045837 -99.74174500]
[239.26258850 -85.56539154]
[240.40200806 -70.60872650]
[237.70393372 -55.85337830]
[231.34542847 -42.26774597]
[221.74380493 -30.74346924]
[209.52925110 -22.03689384]
[195.50338745 -16.71943855]
[180.58676147 -15.14009571]
[165.75836182 -17.40251732]
[151.99139404 -23.35821724]
[140.18937683 -32.61632156]
[131.12448120 -44.57341385]
[132.68206787 -29.65450287]
[144.37657166 -20.50168419]
[146.16871643 -5.39397478]
[136.48910522 6.81024218]
[138.04667664 21.72915459]
[139.60426331 36.64806747]
[150.66613770 50.23611069]
[143.11140442 66.99636078]
[144.97901917 81.87963867]
[156.17477417 91.86236572]
[171.17396545 92.01840210]
[186.17315674 92.17443848]
[201.17234802 92.33047485]
[216.17153931 92.48651123]
[231.17071533 92.33047485]
[246.16342163 91.86243439]
[261.15612793 91.39438629]
[276.14880371 90.92634583]
[286.78594971 79.23760986]
[302.57644653 78.57748413]
[314.15206909 89.33762360]
[314.64520264 105.13421631]
[303.76330566 116.59542847]
[287.96237183 116.92152405]
[276.61685181 105.91904449]
[261.62414551 106.38708496]
[246.63145447 106.85512543]
[231.63876343 107.32317352]
[227.73583984 110.17671204]
[221.98426819 110.56487274]
[216.01550293 107.48569489]
[201.01631165 107.32965851]
[186.01712036 107.17362213]
[171.01792908 107.01758575]
[156.01873779 106.86154938]
[150.68792725 112.13719940]
[163.77615356 119.46512604]
[176.86436462 126.79305267]
[191.75437927 128.60621643]
[203.40626526 138.05258179]
[208.25964355 152.24569702]
[204.83152771 166.84870911]
[194.16940308 177.39950562]
[179.53120422 180.67414856]
[165.38981628 175.67207336]
[156.06626892 163.92167664]
[154.40907288 149.01596069]
[147.21768188 135.85221863]
[140.02630615 122.68848419]
[134.69549561 127.96413422]
[134.69549561 142.96412659]
[134.69549561 157.96412659]
[134.69549561 172.96412659]
[134.69549561 187.96412659]
[134.69549561 202.96412659]
[134.69549561 217.96412659]
[134.69549561 232.96412659]
[134.69549561 247.96412659]
[134.69549561 262.96414185]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[13 42]
[14 41]
[16 38]
[17 37]
[18 36]
[19 35]
[20 34]
[21 33]
[22 32]
[45 100]
[46 99]
[49 97]
[50 96]
[51 95]
[54 92]
[55 91]
[56 68]
[57 67]
[58 66]
[101 126]
[102 125]
[103 124]
[104 123]
[105 122]
[106 119]
[107 118]
[108 117]
[109 116]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
