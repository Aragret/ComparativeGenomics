%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:26 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCCACCCUCCUCUCCCUAGGAGGCCUGCCCCCGCUAACCGGCUUUUUGCCCAAAUGGGCCAxxxxxxxxxxCACUACUAUAACCACCCUAACCCUGACUUCCCUAAUUCCCCCCAUCCUUACCACCCUCGUCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[137.02253723 126.02907562]
[128.98693848 117.55680084]
[121.40952301 108.67229462]
[114.31138611 99.40029144]
[108.00435638 111.87879181]
[94.07075500 113.03915405]
[81.63131714 121.42129517]
[69.19187927 129.80343628]
[56.75243759 138.18557739]
[44.31299591 146.56771851]
[31.87355614 154.94987488]
[31.19746399 170.33976746]
[21.69996071 182.24148560]
[7.18709135 186.22151184]
[-6.72004557 180.95562744]
[-19.15948677 189.33776855]
[-31.59892654 197.71990967]
[-44.03836823 206.10205078]
[-56.47780609 214.48420715]
[-68.91724396 222.86634827]
[-71.69363403 238.42485046]
[-84.70596313 247.39451599]
[-100.23424530 244.45379639]
[-109.06583405 231.34735107]
[-105.96109772 215.85102844]
[-92.76202393 207.15850830]
[-77.29939270 210.42691040]
[-64.85994720 202.04475403]
[-52.42050934 193.66261292]
[-39.98106766 185.28047180]
[-27.54162979 176.89833069]
[-15.10218906 168.51618958]
[-14.76117897 153.64938354]
[-5.62328625 141.69267273]
[8.97363281 137.35870361]
[23.49141312 142.51042175]
[35.93085480 134.12828064]
[48.37029266 125.74613953]
[60.80973434 117.36399841]
[73.24917603 108.98185730]
[85.68861389 100.59970856]
[91.99564362 88.12120819]
[105.92924500 86.96084595]
[94.08734131 65.44515228]
[84.70362854 42.75039673]
[77.89353180 19.15634537]
[73.74076843 -5.04616880]
[72.29630280 -29.55883980]
[73.57769775 -54.07956696]
[77.56894684 -78.30617523]
[84.22064209 -101.94013214]
[93.45059204 -124.69023895]
[105.14485168 -146.27621460]
[119.15908813 -166.43215942]
[135.32041931 -184.90977478]
[153.42951965 -201.48149109]
[173.26304626 -215.94328308]
[165.53895569 -228.80168152]
[157.81486511 -241.66009521]
[150.09078979 -254.51849365]
[135.49411011 -261.99307251]
[134.93931580 -278.38284302]
[148.99710083 -286.82739258]
[163.20603943 -278.63970947]
[162.94918823 -262.24258423]
[170.67327881 -249.38417053]
[178.39735413 -236.52577209]
[186.12144470 -223.66737366]
[196.46905518 -229.06419373]
[207.08706665 -233.90756226]
[217.94592285 -238.18397522]
[229.01536560 -241.88150024]
[240.26454163 -244.98982239]
[251.66215515 -247.50030518]
[263.17642212 -249.40591431]
[274.77523804 -250.70135498]
[286.42636108 -251.38301086]
[298.09729004 -251.44895935]
[309.75552368 -250.89901733]
[321.36859131 -249.73469543]
[332.90408325 -247.95924377]
[344.32992554 -245.57760620]
[355.61428833 -242.59638977]
[366.72567749 -239.02391052]
[377.63317871 -234.87010193]
[388.30636597 -230.14654541]
[398.71554565 -224.86636353]
[408.83169556 -219.04428101]
[418.62661743 -212.69650269]
[428.07302856 -205.84071350]
[437.14459229 -198.49600220]
[445.81607056 -190.68283081]
[454.06326294 -182.42294312]
[461.86318970 -173.73934937]
[469.19415283 -164.65625000]
[476.03567505 -155.19892883]
[482.36871338 -145.39373779]
[488.17562866 -135.26797485]
[493.44018555 -124.84986877]
[498.14776611 -114.16842651]
[502.28524780 -103.25340271]
[505.84106445 -92.13520050]
[508.80529785 -80.84479523]
[511.16970825 -69.41364288]
[512.92767334 -57.87357712]
[514.07434082 -46.25675201]
[514.60644531 -34.59553528]
[514.52252197 -22.92240524]
[513.82281494 -11.26988697]
[512.50927734 0.32955754]
[510.58547974 11.84361172]
[508.05685425 23.24019814]
[504.93038940 34.48756409]
[501.21481323 45.55437469]
[496.92047119 56.40979385]
[492.05929565 67.02358246]
[486.64483643 77.36615753]
[480.69216919 87.40870667]
[474.21789551 97.12325287]
[467.24002075 106.48272705]
[459.77795410 115.46104431]
[451.85250854 124.03318787]
[443.48577881 132.17527771]
[434.70101929 139.86460876]
[425.52273560 147.07977295]
[415.97647095 153.80064392]
[406.08880615 160.00851440]
[395.88732910 165.68606567]
[385.40039062 170.81747437]
[374.65725708 175.38844299]
[363.68783569 179.38621521]
[352.52270508 182.79966736]
[341.19293213 185.61927795]
[329.73007202 187.83717346]
[318.16610718 189.44718933]
[306.53320312 190.44479370]
[294.86380005 190.82722473]
[283.19039917 190.59341431]
[271.54553223 189.74398804]
[259.96160889 188.28131104]
[248.47091675 186.20945740]
[237.10548401 183.53417969]
[225.89695740 180.26293945]
[214.87657166 176.40483093]
[204.07504272 171.97058105]
[193.52244568 166.97256470]
[183.24819946 161.42466736]
[173.28092957 155.34236145]
[163.64839172 148.74258423]
[154.37744141 141.64370728]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 43]
[6 41]
[7 40]
[8 39]
[9 38]
[10 37]
[11 36]
[15 32]
[16 31]
[17 30]
[18 29]
[19 28]
[20 27]
[57 68]
[58 67]
[59 66]
[60 65]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
