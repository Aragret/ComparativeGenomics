%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:17 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGUUACUAGACCAAUGGGACUUAAACCCACAAACACUUAGUUAACAGCUAAGCACCCUAAUCxxxxxxxxxxUAAACCCCCAUAAAUAGGAGAAGGCUUAGAAGAAAACCCCACAAACCCCAUUACUAAACCCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[134.26048279 320.72113037]
[134.26048279 305.72113037]
[134.26048279 290.72113037]
[134.26048279 275.72113037]
[134.26048279 260.72113037]
[134.26048279 245.72111511]
[134.26048279 230.72111511]
[134.26048279 215.72111511]
[134.26048279 200.72111511]
[134.26048279 185.72111511]
[130.40332031 171.22552490]
[122.94841003 158.20921326]
[109.90896606 151.01046753]
[109.76443481 135.18991089]
[102.30952454 122.17360687]
[107.74443054 136.15437317]
[103.48410034 150.53663635]
[91.31140900 159.30166626]
[76.32043457 158.78141785]
[64.78465271 149.19363403]
[61.53160095 134.55061340]
[67.92263031 120.98025513]
[81.28445435 114.16133881]
[67.05767059 118.91515350]
[52.83089447 123.66896820]
[38.60411453 128.42279053]
[33.03573608 143.03535461]
[19.35223198 150.60475159]
[4.01453876 147.55693054]
[-5.73535633 135.33099365]
[-5.29384995 119.69964600]
[5.13059187 108.04353333]
[20.61586571 105.86631012]
[33.85029984 114.19600677]
[48.07707977 109.44219208]
[62.30385971 104.68837738]
[76.53063965 99.93456268]
[76.45262146 92.43496704]
[76.29658508 77.43577576]
[76.21856689 69.93618011]
[61.89596939 65.47937012]
[47.57337189 61.02255249]
[32.75937271 67.18088531]
[18.77832413 59.31260300]
[16.35528755 43.45358658]
[27.34901047 31.76951027]
[43.32604980 33.22340012]
[52.03018570 46.69995499]
[66.35278320 51.15676880]
[80.67537689 55.61358643]
[87.29667664 52.09101868]
[76.50418854 41.67361832]
[83.07667542 28.19021034]
[97.93117523 30.27444649]
[100.53926086 45.04588318]
[107.16055298 41.52331543]
[111.46813965 27.15513229]
[115.77571869 12.78694820]
[120.08330536 -1.58123612]
[124.39089203 -15.94941998]
[128.69847107 -30.31760406]
[118.21682739 -47.38750839]
[123.48594666 -66.39943695]
[140.72225952 -75.35933685]
[144.12524414 -89.96823120]
[147.52821350 -104.57712555]
[150.93119812 -119.18601990]
[137.33830261 -125.67040253]
[125.45743561 -134.92561340]
[115.84427643 -146.51878357]
[108.94846344 -159.90765381]
[105.09251404 -174.46600342]
[104.45677948 -189.51292419]
[107.07100677 -204.34465027]
[112.81291199 -218.26745605]
[121.41393280 -230.63015747]
[132.47180176 -240.85453796]
[145.46929932 -248.46235657]
[159.79852295 -253.09780884]
[174.78926086 -254.54408264]
[189.74038696 -252.73352051]
[203.95259094 -247.75080872]
[216.76113892 -239.82901001]
[227.56697083 -229.33862305]
[235.86466980 -216.77032471]
[241.26612854 -202.71192932]
[243.51872253 -187.82099915]
[242.51708984 -172.79399109]
[238.30809021 -158.33377075]
[231.08856201 -145.11663818]
[221.19619751 -133.76078796]
[209.09365845 -124.79737854]
[195.34703064 -118.64562225]
[180.59924316 -115.59325409]
[165.54008484 -115.78304291]
[162.13711548 -101.17414856]
[158.73413086 -86.56525421]
[155.33116150 -71.95635986]
[162.97692871 -64.94197845]
[167.02122498 -55.29868317]
[166.66065979 -44.76671219]
[161.89350891 -35.27761078]
[153.53244019 -28.59999466]
[143.06666565 -26.01001930]
[138.75907898 -11.64183521]
[134.45149231 2.72634840]
[130.14390564 17.09453201]
[125.83631897 31.46271706]
[121.52873230 45.83090210]
[138.86547852 91.56750488]
[115.32582855 114.71869659]
[122.78073883 127.73500824]
[136.35342407 135.86477661]
[135.96472168 150.75430298]
[143.41963196 163.77061462]
[143.83151245 148.77626038]
[147.62661743 134.26429749]
[154.60792542 120.98795319]
[164.41310120 109.63636017]
[176.53317261 100.79872894]
[190.33905029 94.93377686]
[205.11413574 92.34593964]
[220.09150696 93.16953278]
[234.49375916 97.36180878]
[247.57333374 104.70516205]
[258.65130615 114.81843567]
[267.15270996 127.17668915]
[272.63619995 141.13845825]
[274.81723022 155.97904968]
[273.58255005 170.92814636]
[268.99624634 185.20980835]
[261.29641724 198.08274841]
[250.88265991 208.87875366]
[238.29554749 217.03747559]
[224.18843079 222.13542175]
[209.29353333 223.90797424]
[194.38398743 222.26315308]
[180.23368835 217.28630066]
[167.57711792 209.23574829]
[157.07122803 198.52938843]
[149.26048279 185.72111511]
[149.26048279 200.72111511]
[149.26048279 215.72111511]
[149.26048279 230.72111511]
[149.26048279 245.72111511]
[149.26048279 260.72113037]
[149.26048279 275.72113037]
[149.26048279 290.72113037]
[149.26048279 305.72113037]
[149.26048279 320.72113037]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[11 115]
[12 114]
[14 112]
[15 111]
[23 37]
[24 36]
[25 35]
[26 34]
[40 50]
[41 49]
[42 48]
[56 109]
[57 108]
[58 107]
[59 106]
[60 105]
[61 104]
[64 98]
[65 97]
[66 96]
[67 95]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
