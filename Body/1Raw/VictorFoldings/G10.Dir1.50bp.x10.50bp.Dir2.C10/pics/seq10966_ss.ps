%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:25 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCUAGGACUCAUAAUAGUUACAAUCGGCAUCAACCAACCACACCUAGCAUUCCUGCACAUCxxxxxxxxxxUAGCAACACUCCACCUCCUAUUCUUGCACGAAACGGGAUCAAACAACCCCCUAGGAAUCACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[90.32282257 273.20626831]
[90.01076508 258.20950317]
[89.69870758 243.21275330]
[89.38665009 228.21600342]
[89.07460022 213.21925354]
[88.76254272 198.22250366]
[88.45048523 183.22573853]
[88.13842773 168.22898865]
[87.82637024 153.23223877]
[76.22502899 143.72387695]
[61.45897675 146.36274719]
[46.69292068 149.00160217]
[31.92686462 151.64047241]
[17.16080856 154.27932739]
[2.39475393 156.91819763]
[2.57036042 171.95213318]
[0.26891792 186.80989075]
[-4.44678879 201.08616638]
[-11.44811153 214.39147949]
[-20.54404831 226.36285400]
[-31.48645782 236.67370605]
[-43.97682190 245.04272461]
[-57.67439270 251.24163818]
[-72.20549011 255.10130310]
[-87.17369843 256.51641846]
[-102.17066956 255.44842529]
[-116.78728485 251.92642212]
[-130.62478638 246.04649353]
[-143.30566406 237.96905518]
[-154.48399353 227.91445923]
[-163.85481262 216.15701294]
[-171.16249084 203.01745605]
[-176.20764160 188.85426331]
[-178.85266113 174.05378723]
[-179.02536011 159.01983643]
[-176.72105408 144.16250610]
[-172.00260925 129.88714600]
[-164.99871826 116.58318329]
[-155.90048218 104.61356354]
[-144.95608521 94.30482483]
[-132.46411133 85.93819427]
[-118.76534271 79.74192810]
[-104.23349762 75.88506317]
[-89.26501465 74.47281647]
[-74.26824951 75.54370880]
[-59.65231705 79.06853485]
[-45.81595230 84.95113373]
[-33.13662720 93.03101349]
[-21.96023369 103.08776093]
[-12.59167862 114.84700775]
[-5.28654099 127.98796844]
[-0.24411048 142.15214539]
[14.52194500 139.51327515]
[29.28800011 136.87442017]
[44.05405426 134.23554993]
[58.82011032 131.59667969]
[73.58616638 128.95782471]
[70.58289337 86.56414032]
[102.98503876 74.68999481]
[109.04804993 60.96994019]
[115.11106873 47.24988556]
[113.61203003 31.49985504]
[125.83348083 22.98602104]
[131.89649963 9.26596737]
[137.95950317 -4.45408630]
[144.02252197 -18.17413902]
[131.96194458 -26.52232552]
[121.65354919 -36.95137787]
[113.45087433 -49.10141373]
[107.63488770 -62.55356598]
[104.40428162 -76.84440613]
[103.86871338 -91.48193359]
[106.04507446 -105.96247864]
[110.85699463 -119.78808594]
[118.13747406 -132.48358154]
[127.63470459 -143.61294556]
[139.02078247 -152.79425049]
[151.90299988 -159.71282959]
[165.83744812 -164.13197327]
[180.34422302 -165.90110779]
[194.92407227 -164.96089172]
[209.07546997 -161.34516907]
[215.42259216 -174.93612671]
[211.31774902 -190.44514465]
[220.99914551 -203.23773193]
[237.04005432 -203.50048828]
[247.13523865 -191.03187561]
[243.54057312 -175.39672852]
[229.01354980 -168.58898926]
[222.66641235 -154.99804688]
[235.09121704 -145.96833801]
[245.52996826 -134.69508362]
[253.58419800 -121.60594177]
[258.94595337 -107.19794464]
[261.40954590 -92.01862335]
[260.87951660 -76.64517975]
[257.37417603 -61.66255569]
[251.02519226 -47.64117432]
[242.07241821 -35.11521530]
[230.85502625 -24.56227493]
[217.79855347 -16.38515091]
[203.39874268 -10.89646244]
[188.20281982 -8.30670929]
[172.78860474 -8.71619034]
[157.74256897 -12.11112690]
[151.67956543 1.60892689]
[145.61654663 15.32898045]
[139.55354309 29.04903412]
[141.48623657 43.81771469]
[128.83111572 53.31289673]
[122.76810455 67.03295135]
[116.70509338 80.75300598]
[127.95738983 88.96805573]
[134.43695068 103.60488892]
[132.68937683 121.62523651]
[146.70608521 126.96674347]
[160.72279358 132.30825806]
[173.07699585 123.06826019]
[188.46711731 121.99705505]
[201.98225403 129.43646240]
[209.30975342 143.01258850]
[208.11146545 158.39334106]
[198.76972961 170.67077637]
[184.26547241 175.92723083]
[169.22695923 172.48535156]
[158.45291138 161.44346619]
[155.38128662 146.32496643]
[141.36457825 140.98345947]
[127.34786224 135.64195251]
[121.21667480 139.96150208]
[130.95664978 151.36909485]
[140.69660950 162.77668762]
[154.45910645 168.74273682]
[159.09530640 183.00827026]
[151.46969604 195.92530823]
[136.73957825 198.75787354]
[124.86712646 189.59027100]
[123.88167572 174.62318420]
[116.41799164 161.61190796]
[108.95430756 148.60061646]
[102.82312775 152.92018127]
[103.13518524 167.91693115]
[103.44723511 182.91368103]
[103.75929260 197.91044617]
[104.07135010 212.90719604]
[104.38340759 227.90394592]
[104.69546509 242.90069580]
[105.00752258 257.89746094]
[105.31957245 272.89419556]
[107.91057587 292.10192871]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 149]
[2 148]
[3 147]
[4 146]
[5 145]
[6 144]
[7 143]
[8 142]
[9 141]
[10 57]
[11 56]
[12 55]
[13 54]
[14 53]
[15 52]
[59 112]
[60 111]
[61 110]
[63 108]
[64 107]
[65 106]
[66 105]
[82 90]
[83 89]
[115 129]
[116 128]
[117 127]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
