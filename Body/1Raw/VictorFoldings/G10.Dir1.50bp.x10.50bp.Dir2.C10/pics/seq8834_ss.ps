%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:07 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCCCUAACAGGGGCCCUCUCAGCCCUCCUAAUGACCUCCGGCCUAGCCAUGUGAUUUCACUxxxxxxxxxxCAUCGCUACCUCCCUGACAAGCGCCUAUAGCACUCGAAUAAUUCUUCUCACCCUAACAGGCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[-25.32538605 234.58026123]
[-35.98701096 245.13156128]
[-46.64863586 255.68284607]
[-57.31026459 266.23413086]
[-67.97189331 276.78543091]
[-78.63351440 287.33673096]
[-88.73216248 298.42803955]
[-98.24052429 310.02938843]
[-107.74888611 321.63070679]
[-117.25724030 333.23205566]
[-126.76560211 344.83340454]
[-136.27395630 356.43475342]
[-145.78231812 368.03607178]
[-155.29067993 379.63742065]
[-157.41613770 395.89825439]
[-172.66287231 401.93722534]
[-185.34634399 391.54196167]
[-182.41888428 375.40621948]
[-166.89201355 370.12905884]
[-157.38365173 358.52770996]
[-147.87530518 346.92639160]
[-138.36694336 335.32504272]
[-128.85858154 323.72369385]
[-119.35022736 312.12234497]
[-109.84186554 300.52102661]
[-100.33350372 288.91967773]
[-115.25714874 287.40808105]
[-123.55849457 274.91458130]
[-119.16993713 260.57089233]
[-105.29915619 254.86114502]
[-92.08456421 261.95864868]
[-89.18480682 276.67507935]
[-78.52317810 266.12380981]
[-67.86155701 255.57250977]
[-57.19992828 245.02122498]
[-46.53830338 234.46992493]
[-35.87667465 223.91864014]
[-48.77772141 208.09019470]
[-59.84434891 190.92900085]
[-68.94010925 172.64666748]
[-75.95285797 153.46861267]
[-80.79611969 133.63128662]
[-83.41018677 113.37928772]
[-83.76281738 92.96232605]
[-81.84966278 72.63214111]
[-77.69432831 52.63939285]
[-71.34803009 33.23060226]
[-62.88903046 14.64506912]
[-52.42162323 -2.88804364]
[-64.50160980 -11.78039360]
[-76.58159637 -20.67274284]
[-92.92177582 -25.19323540]
[-93.10136414 -42.14623260]
[-76.86061096 -47.01185226]
[-67.68924713 -32.75273132]
[-55.60926056 -23.86038208]
[-43.52927399 -14.96803188]
[-27.10767937 -32.89822769]
[-8.46417904 -48.50529480]
[12.07532883 -61.51641846]
[5.44683027 -74.97238159]
[-1.18166840 -88.42834473]
[-15.10649490 -97.09040833]
[-14.29698563 -113.46955872]
[0.41410518 -120.71633911]
[13.89326859 -111.37588501]
[12.27429676 -95.05684662]
[18.90279579 -81.60088348]
[25.53129387 -68.14491272]
[38.34101486 -73.25261688]
[51.49747086 -77.38603210]
[64.92668152 -80.52191925]
[78.55313110 -82.64263916]
[92.30018616 -83.73625946]
[106.09054565 -83.79664612]
[119.84664917 -82.82344055]
[133.49114990 -80.82213593]
[146.94729614 -77.80397034]
[160.13945007 -73.78591919]
[172.99340820 -68.79058838]
[185.43688965 -62.84605789]
[197.39990234 -55.98576355]
[208.81520081 -48.24828339]
[219.61856079 -39.67712402]
[229.83204651 -50.66278839]
[240.04553223 -61.64845276]
[250.25900269 -72.63411713]
[244.64889526 -86.82881165]
[245.76177979 -102.05130768]
[253.37667847 -115.27915955]
[265.98165894 -123.88596344]
[281.07400513 -126.16284180]
[295.65710449 -121.65771484]
[306.83544922 -111.26507568]
[312.38961792 -97.04840088]
[311.21679688 -81.83040619]
[303.54986572 -68.63264465]
[290.91110229 -60.07554626]
[275.80990601 -57.85811615]
[261.24465942 -62.42063904]
[251.03118896 -51.43497467]
[240.81771851 -40.44930649]
[230.60423279 -29.46364403]
[238.53202820 -20.94287300]
[245.90495300 -11.93768787]
[252.69348145 -2.48415494]
[258.87042236 7.37986088]
[264.41104126 17.61485100]
[269.29312134 28.17981911]
[273.49713135 39.03245163]
[277.00625610 50.12928009]
[279.80639648 61.42585754]
[281.88635254 72.87693787]
[283.23776245 84.43665314]
[283.85528564 96.05870056]
[283.73638916 107.69654083]
[282.88159180 119.30355072]
[281.29428101 130.83325195]
[278.98080444 142.23944092]
[275.95046997 153.47645569]
[272.21539307 164.49928284]
[267.79055786 175.26376343]
[262.69363403 185.72679138]
[256.94506836 195.84645081]
[250.56791687 205.58221436]
[243.58767700 214.89508057]
[236.03231812 223.74777222]
[227.93209839 232.10479736]
[219.31947327 239.93270874]
[210.22894287 247.20013428]
[200.69689941 253.87799072]
[190.76153564 259.93951416]
[180.46264648 265.36041260]
[169.84147644 270.11898804]
[158.94056702 274.19619751]
[147.80357361 277.57568359]
[136.47512817 280.24389648]
[125.00057220 282.19021606]
[113.42588806 283.40676880]
[101.79742432 283.88873291]
[90.16176605 283.63418579]
[78.56550598 282.64410400]
[67.05510712 280.92245483]
[55.67665482 278.47616577]
[44.47573853 275.31503296]
[33.49721146 271.45169067]
[22.78505135 266.90161133]
[12.38216305 261.68307495]
[2.33021283 255.81692505]
[-7.33053827 249.32667542]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 37]
[2 36]
[3 35]
[4 34]
[5 33]
[6 32]
[7 26]
[8 25]
[9 24]
[10 23]
[11 22]
[12 21]
[13 20]
[14 19]
[49 57]
[50 56]
[51 55]
[60 69]
[61 68]
[62 67]
[84 103]
[85 102]
[86 101]
[87 100]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
