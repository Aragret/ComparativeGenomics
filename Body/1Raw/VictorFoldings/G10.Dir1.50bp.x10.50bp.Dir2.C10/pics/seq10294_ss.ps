%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:27 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCAAACCCCCUGAAGCUUCACCGGCGCAGUCAUUCUCAUAAUCGCCCACGGGCUUACAUCCxxxxxxxxxxAAUCAAUACUAAACCCCCAUAAAUAGGAGAAGGCUUAGAAGAAAACCCCACAAACCCCAUCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[120.84853363 531.53277588]
[120.84853363 516.53277588]
[120.84853363 501.53277588]
[120.84853363 486.53277588]
[120.84853363 471.53277588]
[120.84853363 456.53277588]
[120.84853363 441.53277588]
[120.84853363 426.53277588]
[120.84853363 411.53277588]
[120.84853363 396.53277588]
[105.87246704 392.28527832]
[92.68049622 383.99386597]
[82.33948517 372.31951904]
[75.68843079 358.19711304]
[73.27040863 342.76062012]
[75.28821564 327.25213623]
[81.58740234 312.92178345]
[91.66806030 300.92709351]
[104.72448730 292.23937988]
[119.70957947 287.56518555]
[119.39752960 272.56842041]
[117.22068787 257.72723389]
[113.21295166 243.27253723]
[109.20520782 228.81785583]
[105.19747162 214.36315918]
[101.03958130 199.95094299]
[96.73199463 185.58276367]
[92.42441559 171.21458435]
[81.35809326 161.24533081]
[84.80646515 145.80450439]
[80.49887848 131.43630981]
[69.62005615 121.10910797]
[55.04735184 117.55435181]
[40.47464752 113.99958801]
[25.90194702 110.44482422]
[30.99419975 124.55400848]
[23.32060051 137.44259644]
[8.48992920 139.69009399]
[-2.65779281 129.65374756]
[-1.97448349 114.66931152]
[10.03976822 105.68933868]
[-4.08503485 100.64058685]
[-18.20983887 95.59182739]
[-33.26718903 101.12858582]
[-46.90882874 92.68553162]
[-48.67005539 76.73944092]
[-37.19981003 65.52280426]
[-21.29708099 67.64005280]
[-13.16108131 81.46702576]
[0.96372128 86.51577759]
[15.08852386 91.56453705]
[29.45670891 95.87212372]
[44.02941132 99.42688751]
[58.60211563 102.98164368]
[73.17481995 106.53640747]
[73.83892059 95.71405792]
[78.52278137 86.42143250]
[86.16137695 80.01402283]
[95.29303741 77.27313995]
[97.16065216 62.38985825]
[99.02826691 47.50657654]
[84.65720367 43.07446289]
[71.27417755 36.21400833]
[59.28590012 27.13368607]
[49.05666351 16.10944557]
[40.89733505 3.47629571]
[35.05586243 -10.38185406]
[31.70976257 -25.04387093]
[30.96071815 -40.06419373]
[32.83149338 -54.98636627]
[37.26523590 -69.35692596]
[44.12721252 -82.73917389]
[53.20889282 -94.72642517]
[64.23429108 -104.95440674]
[76.86837006 -113.11230469]
[90.72718048 -118.95220184]
[105.38957214 -122.29664612]
[120.40998077 -123.04398346]
[135.33193970 -121.17151642]
[149.70201111 -116.73614502]
[163.08346558 -109.87265015]
[175.06968689 -100.78961182]
[185.29641724 -89.76304626]
[193.45288086 -77.12805176]
[199.29121399 -63.26857376]
[202.63398743 -48.60580063]
[203.37962341 -33.58530807]
[201.50546265 -18.66355896]
[197.06846619 -4.29400301]
[190.20346069 9.08668232]
[181.11906433 21.07187462]
[170.09133911 31.29735756]
[157.45541382 39.45238876]
[143.59527588 45.28914642]
[128.93211365 48.63025665]
[113.91154480 49.37419128]
[112.04393005 64.25746918]
[110.17632294 79.14075470]
[117.26126099 83.67356873]
[122.40711212 90.57301331]
[124.84069824 99.03328705]
[124.11618042 108.00364685]
[120.18918610 116.31882477]
[113.44000244 122.85032654]
[104.64051056 126.65907288]
[94.86706543 127.12873077]
[99.17465210 141.49691772]
[110.54907227 152.49386597]
[106.79259491 166.90699768]
[111.10018158 181.27517700]
[115.40776825 195.64335632]
[120.90388489 203.02201843]
[119.65216064 210.35542297]
[123.65989685 224.81011963]
[127.66764069 239.26480103]
[131.67538452 253.71948242]
[136.83731079 239.63565063]
[147.51461792 229.10025024]
[161.66627502 224.12721252]
[176.58700562 225.66720581]
[189.42459106 233.42584229]
[197.72499084 245.91996765]
[199.90150452 260.76123047]
[195.53807068 275.11254883]
[185.46881104 286.23052979]
[171.61854553 291.98989868]
[156.63490295 291.28964233]
[143.38214111 284.26367188]
[134.39428711 272.25637817]
[134.70632935 287.25314331]
[148.74382019 290.83230591]
[161.35993958 297.92758179]
[171.69239807 308.04678345]
[179.03686523 320.49124146]
[182.89500427 334.40417480]
[183.00823975 348.82955933]
[179.37512207 362.77780151]
[172.25097656 375.29379272]
[162.12994385 385.52209473]
[149.71078491 392.76553345]
[135.84854126 396.53277588]
[135.84854126 411.53277588]
[135.84854126 426.53277588]
[135.84854126 441.53277588]
[135.84854126 456.53277588]
[135.84854126 471.53277588]
[135.84854126 486.53277588]
[135.84854126 501.53277588]
[135.84854126 516.53277588]
[135.84854126 531.53277588]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[20 130]
[21 129]
[22 116]
[23 115]
[24 114]
[25 113]
[26 111]
[27 110]
[28 109]
[30 107]
[31 106]
[32 55]
[33 54]
[34 53]
[35 52]
[41 51]
[42 50]
[43 49]
[59 98]
[60 97]
[61 96]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
