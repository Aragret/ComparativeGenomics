%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:28 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGAUCAUCCCCACCAUCAUAGCCACCAUCACCCUCCUUAACCUCUACUUCUACCUACGCCUAxxxxxxxxxxACAAACUAGGAGGCGUCCUUGCCCUAUUACUAUCCAUCCUCAUCCUAGCAAUAAUCCCCACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[19.23230934 331.47012329]
[5.90400219 326.37973022]
[-7.10561562 320.52261353]
[-19.75248337 313.91860962]
[-27.47656822 326.77703857]
[-27.95019341 342.59112549]
[-41.13658142 349.51705933]
[-48.86066818 362.37545776]
[-56.58475113 375.23385620]
[-64.30883789 388.09225464]
[-72.03292084 400.95068359]
[-75.00602722 417.64190674]
[-91.86798859 419.40557861]
[-98.23059845 403.69082642]
[-84.89132690 393.22659302]
[-77.16724396 380.36819458]
[-69.44315338 367.50979614]
[-61.71907043 354.65136719]
[-53.99498367 341.79296875]
[-54.07383728 326.89859009]
[-40.33496857 319.05294800]
[-32.61088562 306.19454956]
[-45.70860291 297.15689087]
[-58.19239807 287.28854370]
[-70.00968170 276.63110352]
[-81.11064911 265.22943115]
[-91.44853973 253.13160706]
[-100.97978973 240.38859558]
[-109.66425323 227.05406189]
[-117.46532440 213.18421936]
[-124.35013580 198.83749390]
[-130.28968811 184.07432556]
[-135.25895691 168.95692444]
[-139.23699951 153.54899597]
[-142.20704651 137.91543579]
[-144.15660095 122.12212372]
[-145.07743835 106.23560333]
[-144.96568298 90.32281494]
[-143.82180786 74.45079803]
[-141.65061951 58.68643188]
[-138.46128845 43.09613419]
[-134.26722717 27.74558830]
[-129.08612061 12.69947529]
[-122.93980408 -1.97881114]
[-115.85416412 -16.22742653]
[-107.85905457 -29.98633575]
[-98.98816681 -43.19757080]
[-89.27886963 -55.80546188]
[-78.77208710 -67.75689697]
[-67.51206970 -79.00151062]
[-55.54626846 -89.49193573]
[-42.92509842 -99.18395996]
[-29.70173645 -108.03675842]
[-15.93189716 -116.01303101]
[-1.67359805 -123.07916260]
[13.01308632 -129.20538330]
[28.06627655 -134.36589050]
[43.42254639 -138.53894043]
[59.01719666 -141.70693970]
[74.78452301 -143.85653687]
[90.65808868 -144.97869873]
[106.57101440 -145.06867981]
[122.45626068 -144.12609863]
[138.24688721 -142.15492249]
[141.03919983 -156.89273071]
[143.83152771 -171.63053894]
[146.62385559 -186.36834717]
[149.41618347 -201.10615540]
[152.20851135 -215.84396362]
[138.67880249 -222.54095459]
[127.45841980 -232.64073181]
[119.37997437 -245.39382935]
[115.04295349 -259.85388184]
[114.76918793 -274.94781494]
[118.57898712 -289.55563354]
[126.18964386 -302.59329224]
[137.03639221 -313.09332275]
[150.31434631 -320.27655029]
[165.03817749 -323.60992432]
[180.11528015 -322.84609985]
[194.42684937 -318.04174805]
[206.91084290 -309.55337524]
[216.64089966 -298.01089478]
[222.89495850 -284.27084351]
[225.20893860 -269.35281372]
[223.41113281 -254.36378479]
[217.63493347 -240.41609192]
[208.30899048 -228.54473877]
[196.12533569 -219.63063049]
[181.98808289 -214.33528137]
[166.94630432 -213.05163574]
[164.15399170 -198.31382751]
[161.36166382 -183.57601929]
[158.56933594 -168.83821106]
[155.77700806 -154.10041809]
[152.98469543 -139.36260986]
[166.81916809 -135.87503052]
[180.42733765 -131.58859253]
[193.76310730 -126.51779938]
[206.78132629 -120.67981720]
[219.43788147 -114.09442902]
[231.68992615 -106.78393555]
[243.49595642 -98.77309418]
[254.81599426 -90.08904266]
[265.61169434 -80.76118469]
[275.84646606 -70.82111359]
[285.48568726 -60.30249786]
[294.49670410 -49.24096298]
[302.84899902 -37.67397308]
[310.51425171 -25.64069939]
[317.46652222 -13.18189907]
[323.68228149 -0.33977017]
[329.14047241 12.84219456]
[333.82257080 26.31934929]
[337.71276855 40.04605103]
[340.79785156 53.97580719]
[343.06741333 68.06143951]
[344.51370239 82.25524139]
[345.13189697 96.50914764]
[344.91986084 110.77487183]
[343.87829590 125.00410461]
[342.01077271 139.14865112]
[339.32360840 153.16061401]
[335.82586670 166.99252319]
[331.52941895 180.59753418]
[326.44882202 193.92958069]
[320.60128784 206.94349670]
[314.00659180 219.59521484]
[306.68707275 231.84188843]
[298.66757202 243.64202881]
[289.97518921 254.95567322]
[280.63940430 265.74450684]
[270.69180298 275.97198486]
[260.16610718 285.60345459]
[249.09796143 294.60635376]
[237.52484131 302.95013428]
[225.48593140 310.60653687]
[213.02203369 317.54965210]
[200.17533875 323.75598145]
[186.98936462 329.20446777]
[173.50877380 333.87667847]
[159.77920532 337.75677490]
[145.84719849 340.83163452]
[131.75988770 343.09082031]
[117.56503296 344.52670288]
[103.31067657 345.13439941]
[89.04511261 344.91186523]
[74.81665039 343.85986328]
[60.67347717 341.98193359]
[46.66349792 339.28445435]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 22]
[5 21]
[7 19]
[8 18]
[9 17]
[10 16]
[11 15]
[64 96]
[65 95]
[66 94]
[67 93]
[68 92]
[69 91]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
