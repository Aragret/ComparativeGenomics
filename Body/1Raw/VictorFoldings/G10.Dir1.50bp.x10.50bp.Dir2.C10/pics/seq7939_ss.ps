%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:04 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGACUUAGCAUUAACCUUUUAAGUUAAAGAUUAAGAGAACCAACACCUCUUUACAGUGAAAUxxxxxxxxxxUUCAAGUCAACUAGGACUCAUAAUAGUUACAAUCGGCAUCAACCAACCACACCUAGCAUUCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[79.87546539 267.17733765]
[79.87546539 252.17733765]
[79.87546539 237.17733765]
[79.87546539 222.17733765]
[79.87546539 207.17733765]
[79.87546539 192.17733765]
[79.87546539 177.17733765]
[79.87546539 162.17733765]
[79.87546539 147.17733765]
[79.87546539 132.17733765]
[66.35127258 125.68917084]
[54.65164948 135.07632446]
[42.95202637 144.46348572]
[31.25240326 153.85066223]
[19.55278015 163.23782349]
[23.04352951 178.09640503]
[19.73330688 192.99623108]
[10.27935791 204.97895813]
[-3.44122696 211.66539001]
[-18.70421600 211.72792053]
[-32.47913361 205.15415955]
[-42.03095627 193.24929810]
[-45.46316528 178.37709045]
[-42.09429169 163.49040222]
[-32.59323120 151.54501343]
[-18.84642029 144.91265869]
[-3.58330393 144.91023254]
[10.16561794 151.53819275]
[21.86524200 142.15103149]
[33.56486511 132.76387024]
[45.26448822 123.37670898]
[56.96411133 113.98954773]
[61.60813141 97.04566193]
[71.65519714 85.67681885]
[83.66271973 81.06214905]
[94.24242401 82.66749573]
[100.80983734 88.51193237]
[100.80983734 73.51193237]
[100.80983734 58.51193237]
[100.80983734 43.51193237]
[93.21993256 30.57387543]
[80.12677765 23.25477028]
[67.03362274 15.93566418]
[53.94046783 8.61655903]
[40.84731674 1.29745293]
[27.28297806 8.64676094]
[11.90031815 7.47317219]
[-0.39211461 -1.84882486]
[-5.67185020 -16.34461594]
[-2.25414348 -31.38864517]
[8.77042770 -42.18041992]
[23.88396263 -45.27632141]
[38.26378632 -39.68846130]
[47.32135010 -27.19990158]
[48.16641998 -11.79570103]
[61.25957489 -4.47659588]
[74.35272980 2.84250975]
[87.44588470 10.16161537]
[100.53903961 17.48072052]
[107.26538849 5.46865559]
[118.24698639 -0.55780923]
[117.31136322 -15.52860069]
[108.15016937 -24.66788101]
[107.71294403 -37.19895554]
[115.68780518 -46.34820557]
[115.06382751 -61.33522034]
[114.43984985 -76.32223511]
[113.81587219 -91.30925751]
[99.78038025 -97.30655670]
[89.74343109 -108.80535889]
[85.69787598 -123.52256775]
[88.44696045 -138.53607178]
[97.44485474 -150.86492920]
[110.90501404 -158.06123352]
[126.15492249 -158.69615173]
[140.16668701 -152.64363098]
[150.15827942 -141.10539246]
[154.14584351 -126.37236023]
[151.33766174 -111.36980438]
[142.29129028 -99.07647705]
[128.80288696 -91.93323517]
[129.42686462 -76.94621277]
[130.05084229 -61.95919800]
[130.67481995 -46.97218323]
[140.86759949 -32.72061157]
[132.28215027 -16.46422958]
[133.21777344 -1.49343765]
[136.45831299 -0.24503271]
[139.45999146 1.50123489]
[151.72236633 -7.13788128]
[163.98472595 -15.77699757]
[176.24710083 -24.41611290]
[188.50946045 -33.05522919]
[187.04675293 -48.34431076]
[193.43913269 -62.30973053]
[205.96711731 -71.19486237]
[221.26069641 -72.60964203]
[235.20602417 -66.17351532]
[244.05183411 -53.61775589]
[245.41867065 -38.31980515]
[238.93885803 -24.39473152]
[226.35543823 -15.58831501]
[211.05326843 -14.26943398]
[197.14859009 -20.79286194]
[184.88621521 -12.15374565]
[172.62384033 -3.51462913]
[160.36148071 5.12448692]
[148.09910583 13.76360321]
[147.62863159 30.53114700]
[134.89018250 43.14747238]
[115.80983734 43.51193237]
[115.80983734 58.51193237]
[115.80983734 73.51193237]
[115.80983734 88.51193237]
[124.44895935 100.77429962]
[138.57376099 105.82305908]
[150.23001099 95.82168579]
[165.32826233 93.00415039]
[179.80714417 98.12834167]
[189.77192688 109.81588745]
[192.54212952 124.92289734]
[187.37257385 139.38565063]
[175.65385437 149.31375122]
[160.53823853 152.03657532]
[146.09176636 146.82171631]
[136.20043945 135.07192993]
[133.52500916 119.94786072]
[119.40019989 114.89910126]
[113.26902008 119.21865845]
[123.24419403 130.42115784]
[133.21937561 141.62364197]
[143.19454956 152.82614136]
[154.77900696 162.35507202]
[154.21942139 177.34461975]
[141.95675659 185.98330688]
[127.65375519 181.46398926]
[122.58079529 167.34899902]
[115.38941193 154.18525696]
[108.19802856 141.02151489]
[101.00664520 127.85778046]
[94.87546539 132.17733765]
[94.87546539 147.17733765]
[94.87546539 162.17733765]
[94.87546539 177.17733765]
[94.87546539 192.17733765]
[94.87546539 207.17733765]
[94.87546539 222.17733765]
[94.87546539 237.17733765]
[94.87546539 252.17733765]
[94.87546539 267.17733765]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[11 32]
[12 31]
[13 30]
[14 29]
[15 28]
[37 114]
[38 113]
[39 112]
[40 111]
[41 59]
[42 58]
[43 57]
[44 56]
[45 55]
[61 87]
[62 86]
[65 84]
[66 83]
[67 82]
[68 81]
[89 108]
[90 107]
[91 106]
[92 105]
[93 104]
[115 128]
[116 127]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
