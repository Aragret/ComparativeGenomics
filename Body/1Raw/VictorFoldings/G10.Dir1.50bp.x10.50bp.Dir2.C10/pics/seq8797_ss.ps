%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:09 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGAUGACCCACCAAUCACAUGCCUAUCAUAUAGUAAAACCCAGCCCAUGACCCCUAACAGGGxxxxxxxxxxCAUUUACCGUACAUAGCACAUUACAGUCAAAUCCCUUCUCGUCCCCAUGGAUGACCCCCCCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[107.40588379 257.31433105]
[107.40588379 242.31433105]
[107.40588379 227.31433105]
[107.40588379 212.31433105]
[107.40588379 197.31433105]
[107.40588379 182.31433105]
[107.40588379 167.31433105]
[107.40588379 152.31433105]
[107.40588379 137.31433105]
[107.40588379 122.31432343]
[93.62349701 116.39436340]
[82.74467468 126.72156525]
[71.86585236 137.04876709]
[76.57963562 151.56576538]
[74.51941681 166.68919373]
[66.09425354 179.41630554]
[52.97696304 187.22012329]
[37.77199554 188.55117798]
[23.49830627 183.14518738]
[12.98995018 172.07554626]
[8.33336735 157.54010010]
[10.45312595 142.42489624]
[18.92834473 129.73106384]
[32.07626343 121.97897339]
[47.28635788 120.70780182]
[61.53864288 126.16995239]
[72.41747284 115.84274292]
[83.29629517 105.51554108]
[78.54248047 91.28875732]
[63.64057922 89.57607269]
[48.64382553 89.26401520]
[33.68357468 90.35532379]
[18.72332764 91.44663239]
[3.76307821 92.53794861]
[-11.59418392 99.72061920]
[-22.74747276 86.95188904]
[-13.56528568 72.69973755]
[2.67176771 77.57769775]
[17.63201714 76.48638916]
[32.59226608 75.39507294]
[47.55251312 74.30376434]
[35.48952866 65.38835907]
[30.02319527 51.41985321]
[32.83105850 36.68500137]
[43.05141830 25.70573997]
[57.54778290 21.85146523]
[71.87139893 26.30500603]
[81.62653351 37.69962692]
[83.81945801 52.53846359]
[77.77719116 66.26766968]
[65.35327148 74.67416382]
[80.25517273 76.38685608]
[94.09838867 70.61058807]
[103.36333466 58.81394577]
[112.62828827 47.01730347]
[121.89323425 35.22066498]
[131.15818787 23.42402458]
[122.42554474 11.11057949]
[117.52138519 -3.15025854]
[116.83506775 -18.19997787]
[120.41368866 -32.81851959]
[127.95890808 -45.82319641]
[138.85185242 -56.16436386]
[152.20385742 -63.01015091]
[166.92892456 -65.81336212]
[181.83212280 -64.35520935]
[195.70646667 -58.76238251]
[204.97142029 -70.55902100]
[214.23637390 -82.35566711]
[223.50132751 -94.15230560]
[209.00621033 -90.29331207]
[194.35017395 -93.48712158]
[182.77497864 -103.02729797]
[176.84095764 -116.80362701]
[177.86065674 -131.76893616]
[185.60853577 -144.61300659]
[198.37083435 -152.49487305]
[213.32464600 -153.67112732]
[227.16232300 -147.88159180]
[236.82310486 -136.40687561]
[240.17010498 -121.78505707]
[236.46208191 -107.24860382]
[248.16171265 -116.63576508]
[259.86132812 -126.02292633]
[271.56097412 -135.41009521]
[283.16229248 -144.91844177]
[294.66409302 -154.54698181]
[300.27929688 -169.33819580]
[315.00500488 -171.57498169]
[326.50680542 -181.20350647]
[338.00860596 -190.83204651]
[335.28005981 -205.94662476]
[340.48944092 -220.39508057]
[352.23547363 -230.29084778]
[367.35852051 -232.97201538]
[381.79058838 -227.71736145]
[391.64947510 -215.94035339]
[394.28323364 -200.80897522]
[388.98336792 -186.39346313]
[377.17553711 -176.57151794]
[362.03594971 -173.98521423]
[347.63714600 -179.33023071]
[336.13534546 -169.70170593]
[324.63351440 -160.07318115]
[319.84100342 -145.97067261]
[304.29263306 -143.04516602]
[292.79083252 -133.41664124]
[289.66052246 -126.66780090]
[280.94812012 -123.71046448]
[269.24850464 -114.32330322]
[257.54888916 -104.93614197]
[245.84924316 -95.54898071]
[235.29795837 -84.88735199]
[226.03300476 -73.09071350]
[216.76806641 -61.29407501]
[207.50311279 -49.49743271]
[216.22462463 -37.34372711]
[221.17304993 -23.21063423]
[221.93930054 -8.24070835]
[218.45274353 6.35328341]
[210.98760986 19.38662338]
[200.14149475 29.79880905]
[186.78746033 36.73984528]
[172.00379944 39.63962936]
[156.98699951 38.25476456]
[142.95481873 32.68897247]
[133.68988037 44.48561478]
[124.42492676 56.28225327]
[115.15998077 68.07889557]
[105.89502716 79.87553406]
[119.68139648 73.96485901]
[133.71751404 68.67456818]
[148.66662598 69.90926361]
[161.64457703 77.43074799]
[170.14756775 89.78790283]
[172.53511047 104.59667206]
[168.34658813 119.00001526]
[158.39009094 130.21910095]
[144.58650208 136.08946228]
[129.59725952 135.47807312]
[122.40588379 122.31432343]
[122.40588379 137.31433105]
[122.40588379 152.31433105]
[122.40588379 167.31433105]
[122.40588379 182.31433105]
[122.40588379 197.31433105]
[122.40588379 212.31433105]
[122.40588379 227.31433105]
[122.40588379 242.31433105]
[122.40588379 257.31433105]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[11 28]
[12 27]
[13 26]
[29 52]
[30 51]
[31 41]
[32 40]
[33 39]
[34 38]
[53 130]
[54 129]
[55 128]
[56 127]
[57 126]
[67 116]
[68 115]
[69 114]
[70 113]
[82 112]
[83 111]
[84 110]
[85 109]
[86 107]
[87 106]
[89 104]
[90 103]
[91 102]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
