%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:13 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGUUAGCAGUAAACUAAGAGUAGAGUGCUUAGUUGAACAGGGCCCUGAAGCGCGUACACACCxxxxxxxxxxUCAAAACCAUACCUCUCACUUCAACCUCCCUCACCAUUGGCAGCCUAGCAUUAGCAGGAACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[101.87041473 330.29446411]
[101.87041473 315.29446411]
[101.87041473 300.29446411]
[101.87041473 285.29446411]
[101.87041473 270.29446411]
[101.87041473 255.29447937]
[101.87041473 240.29447937]
[101.87041473 225.29447937]
[101.87041473 210.29447937]
[101.87041473 195.29447937]
[88.09928131 182.10296631]
[83.70516205 165.14494324]
[88.46122742 149.89962769]
[99.41100311 140.50625610]
[94.50945282 126.32969666]
[88.48858643 116.06385040]
[89.12153625 106.41508484]
[74.62593842 110.27223969]
[61.92845154 123.56711578]
[45.18121719 118.41638184]
[30.76900101 122.57426453]
[16.35678482 126.73215485]
[1.94456959 130.89004517]
[-12.46764660 135.04792786]
[-26.87986183 139.20581055]
[-41.29207993 143.36370850]
[-45.60979080 158.17454529]
[-57.26440811 168.28262329]
[-72.53698730 170.46250916]
[-86.55410004 164.01860046]
[-94.84294128 151.00711060]
[-94.75856781 135.57998657]
[-86.32790375 122.65994263]
[-72.24114990 116.36972809]
[-56.99332428 118.71652985]
[-45.44996643 128.95149231]
[-31.03775024 124.79360199]
[-16.62553406 120.63571167]
[-2.21331787 116.47782898]
[12.19889832 112.31993866]
[26.61111450 108.16204834]
[41.02333069 104.00416565]
[47.17355347 93.54079437]
[59.19724274 89.98412323]
[70.76878357 95.77664185]
[85.26438141 91.91948700]
[95.24710846 80.72371674]
[97.42394257 65.88251495]
[99.60077667 51.04130936]
[101.77761841 36.20010376]
[89.53481293 24.57401848]
[86.63906860 8.10901928]
[94.03244781 -6.69989491]
[108.63732147 -14.12976360]
[110.50492859 -29.01304436]
[112.37254333 -43.89632416]
[114.24015808 -58.77960205]
[116.10777283 -73.66287994]
[101.64103699 -77.73365021]
[87.94263458 -83.91519928]
[75.31860352 -92.06943512]
[64.05097198 -102.01418304]
[54.39144897 -113.52727509]
[46.55583954 -126.35150909]
[40.71919632 -140.20037842]
[37.01190567 -154.76449585]
[35.51679611 -169.71850586]
[36.26726913 -184.72831726]
[39.24655151 -199.45861816]
[44.38809204 -213.58030701]
[51.57702637 -226.77790833]
[60.65274811 -238.75660706]
[71.41249847 -249.24876404]
[83.61591339 -258.01998901]
[96.99034882 -264.87432861]
[111.23703003 -269.65866089]
[126.03766632 -272.26611328]
[141.06161499 -272.63839722]
[155.97323608 -270.76721191]
[170.43939209 -266.69439697]
[184.13691711 -260.51089478]
[196.75978088 -252.35485840]
[208.02600098 -242.40850830]
[217.68388367 -230.89404297]
[225.51766968 -218.06869507]
[231.35234070 -204.21899414]
[235.05755615 -189.65434265]
[236.55052185 -174.70011902]
[235.79792786 -159.69041443]
[232.81654358 -144.96055603]
[227.67298889 -130.83958435]
[220.48217773 -117.64300537]
[211.40473938 -105.66561127]
[200.64349365 -95.17498779]
[188.43884277 -86.40550232]
[175.06341553 -79.55306244]
[160.81607056 -74.77075195]
[146.01506042 -72.16542053]
[130.99105835 -71.79527283]
[129.12344360 -56.91199112]
[127.25582886 -42.02870941]
[125.38821411 -27.14542961]
[123.52059937 -12.26215076]
[134.08937073 -4.04648781]
[139.24467468 8.42485142]
[137.53443909 21.92024422]
[129.30093384 32.88484192]
[116.61882019 38.37694168]
[114.44198608 53.21814728]
[112.26514435 68.05934906]
[110.08831024 82.90055847]
[119.35326385 94.69719696]
[134.28756714 96.09950256]
[148.96034241 88.77543640]
[162.48844910 98.04486084]
[160.95533752 114.37218475]
[145.93814087 120.96125793]
[132.88526917 111.03380585]
[117.95095825 109.63150787]
[108.68600464 121.42814636]
[113.58755493 135.60470581]
[137.82971191 140.55070496]
[150.49293518 167.44659424]
[163.43099976 175.03649902]
[180.15225220 177.83581543]
[182.09123230 194.67851257]
[166.44351196 201.20425415]
[155.84107971 187.97456360]
[142.90303040 180.38465881]
[136.39488220 184.11210632]
[144.11029053 196.97570801]
[151.82571411 209.83932495]
[159.54112244 222.70292664]
[170.11033630 233.34678650]
[163.72366333 246.91920471]
[148.78535461 245.56018066]
[144.95271301 231.05822754]
[137.76133728 217.89450073]
[130.56994629 204.73075867]
[123.37857056 191.56701660]
[116.87041473 195.29447937]
[116.87041473 210.29447937]
[116.87041473 225.29447937]
[116.87041473 240.29447937]
[116.87041473 255.29447937]
[116.87041473 270.29446411]
[116.87041473 285.29446411]
[116.87041473 300.29446411]
[116.87041473 315.29446411]
[116.87041473 330.29446411]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[14 121]
[15 120]
[17 46]
[18 45]
[20 42]
[21 41]
[22 40]
[23 39]
[24 38]
[25 37]
[26 36]
[47 111]
[48 110]
[49 109]
[50 108]
[54 103]
[55 102]
[56 101]
[57 100]
[58 99]
[112 119]
[113 118]
[123 129]
[124 128]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
