%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:40 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGUUUAACCAGUGAAAUUGACCUGCCCGUGAAGAGGCGGGCAUAACACAGCAAGACGAGAAGxxxxxxxxxxCCUAUUCCCCCGAGCAAUCUCAAUUACAAUAUAUACACCAACAAACAAUGUUCAACCAGUCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[170.24768066 453.85153198]
[169.93562317 438.85476685]
[169.62356567 423.85800171]
[169.31150818 408.86126709]
[168.99945068 393.86450195]
[168.68740845 378.86773682]
[168.37535095 363.87100220]
[168.06329346 348.87423706]
[167.75123596 333.87750244]
[165.26611328 319.08477783]
[160.66055298 304.80932617]
[156.05497742 290.53387451]
[151.44941711 276.25839233]
[137.90353394 274.26632690]
[126.49040985 266.58389282]
[119.47925568 254.66955566]
[118.29375458 240.82978821]
[123.22332001 227.77258301]
[133.35519409 218.07768250]
[129.04760742 203.70950317]
[124.74002838 189.34132385]
[113.67370605 179.37207031]
[117.12207794 163.93124390]
[112.36826324 149.70445251]
[107.17285156 135.63293457]
[101.97743225 121.56142426]
[96.78202057 107.48989868]
[93.69208527 109.61846924]
[89.82040405 110.81581879]
[85.41053772 110.88604736]
[80.74823761 109.69182587]
[65.84633636 107.97913361]
[50.94443130 106.26644135]
[36.04253006 104.55375671]
[21.14062691 102.84106445]
[6.23872519 101.12837219]
[-8.66317749 99.41568756]
[-20.88401604 109.43699646]
[-36.60314941 107.79856873]
[-46.49468994 95.47246552]
[-44.69017029 79.77153015]
[-32.26016998 70.01086426]
[-16.57919693 71.98128510]
[-6.95048761 84.51377869]
[7.95141459 86.22647095]
[22.85331726 87.93916321]
[37.75521851 89.65184784]
[52.65712357 91.36454010]
[67.55902100 93.07723236]
[82.46092987 94.78991699]
[94.25756836 85.52497101]
[96.12518311 70.64169312]
[97.99279022 55.75841141]
[83.42487335 52.10696411]
[69.40332031 46.72613525]
[56.13260269 39.69438553]
[43.80625534 31.11426353]
[32.60402679 21.11088943]
[22.68928337 9.83014393]
[14.20660877 -2.56346631]
[7.27970505 -15.88920689]
[2.00958705 -29.95274925]
[-1.52689123 -44.54900360]
[-3.27815723 -59.46511841]
[-3.21867275 -74.48356628]
[-1.34930515 -89.38533783]
[2.30268478 -103.95312500]
[7.68404055 -117.97447968]
[14.71628571 -131.24493408]
[23.29686928 -143.57095337]
[33.30066299 -154.77281189]
[44.58177567 -164.68713379]
[56.97570419 -173.16934204]
[70.30170441 -180.09574890]
[84.36544037 -185.36534119]
[98.96183014 -188.90127563]
[113.87801361 -190.65197754]
[128.89645386 -190.59193420]
[143.79815674 -188.72201538]
[158.36581421 -185.06947327]
[172.38696289 -179.68759155]
[185.65715027 -172.65486145]
[197.98284912 -164.07380676]
[209.18432617 -154.06959534]
[219.09823608 -142.78811646]
[227.57998657 -130.39387512]
[234.50588989 -117.06761169]
[239.77494812 -103.00366974]
[243.31034851 -88.40715027]
[245.06048584 -73.49090576]
[244.99987793 -58.47246552]
[243.12940979 -43.57083130]
[239.47631836 -29.00332069]
[234.09391785 -14.98236847]
[227.06068420 -1.71244287]
[218.47917175 10.61294270]
[208.47454834 21.81404686]
[197.19268799 31.72752571]
[184.79812622 40.20880890]
[171.47160339 47.13422012]
[157.40747070 52.40275955]
[142.81082153 55.93759918]
[127.89451599 57.68719482]
[112.87607574 57.62602234]
[111.00846100 72.50930023]
[109.14084625 87.39258575]
[110.85353851 102.29448700]
[116.04895020 116.36600494]
[121.24436951 130.43753052]
[126.43978119 144.50904846]
[130.55932617 147.92210388]
[132.69935608 152.16151428]
[132.88096619 156.31707764]
[131.49026489 159.62365723]
[142.86468506 170.62060547]
[139.10821533 185.03373718]
[143.41580200 199.40191650]
[147.72337341 213.77009583]
[163.82446289 217.39414978]
[175.84506226 228.56558228]
[180.58245850 244.17926025]
[176.83940125 259.96441650]
[165.72488403 271.65283203]
[170.33044434 285.92828369]
[174.93600464 300.20376587]
[179.54158020 314.47921753]
[183.63122559 300.04748535]
[192.84826660 288.21337891]
[205.83932495 280.71456909]
[220.69686890 278.65209961]
[235.23925781 282.32885742]
[247.33120728 291.20492554]
[255.19717407 303.97705078]
[257.68215942 318.76977539]
[254.42131042 333.41104126]
[245.89338684 345.75100708]
[233.35061646 353.97772217]
[218.63470459 356.88323975]
[203.90646362 354.04089355]
[191.32850647 345.86807251]
[182.74798584 333.56542969]
[183.06004333 348.56219482]
[183.37210083 363.55892944]
[183.68415833 378.55569458]
[183.99621582 393.55245972]
[184.30827332 408.54919434]
[184.62031555 423.54595947]
[184.93237305 438.54272461]
[185.24443054 453.53945923]
[187.83543396 472.74719238]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 149]
[2 148]
[3 147]
[4 146]
[5 145]
[6 144]
[7 143]
[8 142]
[9 141]
[10 126]
[11 125]
[12 124]
[13 123]
[19 118]
[20 117]
[21 116]
[23 114]
[24 110]
[25 109]
[26 108]
[27 107]
[31 50]
[32 49]
[33 48]
[34 47]
[35 46]
[36 45]
[37 44]
[51 106]
[52 105]
[53 104]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
