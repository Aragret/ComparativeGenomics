%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:15 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCCCAACUAACACAUUAUUUUCCCCUCCCACUCCCAUACUACUAAUCUCAUCAAUACAACCCCxxxxxxxxxxGUACUGGAAAGUGCACUUGGACGAACCAGAGUGUAGCUUAACACAAAGCACCCAACUUACACCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[76.24252319 295.89953613]
[76.24252319 280.89953613]
[76.24252319 265.89953613]
[76.24252319 250.89953613]
[76.24252319 235.89953613]
[76.24252319 220.89953613]
[76.24252319 205.89953613]
[76.24252319 190.89953613]
[76.24252319 175.89953613]
[76.24252319 160.89953613]
[61.28382111 162.01188660]
[47.08788681 157.16674805]
[35.93070602 147.14091492]
[29.60108566 133.54180908]
[29.11383247 118.54972076]
[34.54706573 104.56830597]
[45.02969360 93.83916473]
[58.88106537 88.08246613]
[73.88042450 88.22116852]
[87.62506866 94.23451996]
[76.75317383 83.90001678]
[65.88128662 73.56551361]
[63.31133270 88.34371185]
[50.25598907 95.73005676]
[36.26498413 90.32156372]
[31.57246780 76.07444763]
[39.61092377 63.41020203]
[54.49991226 61.59231567]
[44.72932434 50.21094131]
[34.95873642 38.82957077]
[25.18815041 27.44819832]
[15.41756344 16.06682587]
[3.01814342 24.53544998]
[-10.23765278 31.58860970]
[-24.18891144 37.14068604]
[-38.66627884 41.12428665]
[-53.49401093 43.49104691]
[-68.49211121 44.21224213]
[-83.47852325 43.27911377]
[-98.27131653 40.70299530]
[-112.69092560 36.51515198]
[-126.56230927 30.76642036]
[-139.71708679 23.52659035]
[-151.99555969 14.88354301]
[-163.24868774 4.94219732]
[-173.33985901 -6.17676735]
[-182.14659119 -18.33837700]
[-189.56195068 -31.39500237]
[-195.49595642 -45.18814468]
[-199.87655640 -59.55036926]
[-202.65057373 -74.30733490]
[-203.78434753 -89.27989960]
[-203.26409912 -104.28631592]
[-201.09614563 -119.14441681]
[-197.30680847 -133.67384338]
[-191.94209290 -147.69821167]
[-185.06710815 -161.04728699]
[-176.76531982 -173.55902100]
[-167.13749695 -185.08152771]
[-156.30052185 -195.47494507]
[-144.38594055 -204.61311340]
[-131.53837585 -212.38507080]
[-117.91381073 -218.69650269]
[-103.67760468 -223.47079468]
[-89.00259399 -226.64996338]
[-74.06690979 -228.19544983]
[-59.05185699 -228.08847046]
[-44.13970947 -226.33032227]
[-29.51148605 -222.94236755]
[-15.34475803 -217.96572876]
[-1.81149745 -211.46080017]
[10.92401505 -203.50656128]
[22.70718002 -194.19956970]
[33.39496231 -183.65278625]
[42.85762405 -171.99426270]
[50.98029327 -159.36550903]
[57.66437149 -145.91983032]
[62.82871628 -131.82044983]
[66.41063690 -117.23850250]
[68.36666107 -102.35102081]
[68.67303467 -87.33871460]
[67.32604218 -72.38381958]
[64.34203339 -57.66788101]
[59.75723648 -43.36952972]
[53.62730026 -29.66233826]
[46.02663803 -16.71269989]
[37.04751587 -4.67780972]
[26.79893494 6.29623938]
[36.56952286 17.67761040]
[46.34011078 29.05898285]
[56.11069870 40.44035339]
[65.88128662 51.82172775]
[76.21578979 62.69361877]
[87.08767700 73.02812195]
[97.95957184 83.36262512]
[112.76281738 85.78417969]
[126.36100006 79.45256042]
[139.95918274 73.12094116]
[153.55737305 66.78932953]
[167.09068298 60.32022858]
[180.55775452 53.71431732]
[194.02482605 47.10840225]
[200.55345154 32.45383072]
[216.11698914 28.56077003]
[228.77641296 38.41564560]
[228.82051086 54.45863724]
[216.21543884 64.38293457]
[200.63073730 60.57546997]
[187.16366577 67.18138123]
[173.69659424 73.78729248]
[169.04902649 79.59071350]
[159.88899231 80.38751221]
[146.29080200 86.71913147]
[132.69261169 93.05075073]
[119.09443665 99.38237000]
[119.47430420 106.87274170]
[120.23403931 121.85348511]
[120.61390686 129.34385681]
[134.78288269 134.26728821]
[148.95185852 139.19071960]
[163.12083435 144.11415100]
[177.23405457 137.00131226]
[192.21678162 142.03059387]
[199.18000793 156.21823120]
[193.99258423 171.14694214]
[179.73211670 177.95977783]
[164.85910034 172.61482239]
[158.19740295 158.28312683]
[144.02842712 153.35969543]
[129.85945129 148.43626404]
[115.69048309 143.51283264]
[109.57849121 147.85951233]
[119.65251923 158.97319031]
[129.72654724 170.08688354]
[139.80058289 181.20056152]
[152.85746765 188.58416748]
[156.60653687 203.10809326]
[148.75471497 215.88890076]
[134.10449219 219.10929871]
[121.61656189 210.79956055]
[118.92865753 196.04406738]
[111.73727417 182.88034058]
[104.54589081 169.71659851]
[97.35450745 156.55285645]
[91.24252319 160.89953613]
[91.24252319 175.89953613]
[91.24252319 190.89953613]
[91.24252319 205.89953613]
[91.24252319 220.89953613]
[91.24252319 235.89953613]
[91.24252319 250.89953613]
[91.24252319 265.89953613]
[91.24252319 280.89953613]
[91.24252319 295.89953613]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 154]
[2 153]
[3 152]
[4 151]
[5 150]
[6 149]
[7 148]
[8 147]
[9 146]
[10 145]
[20 95]
[21 94]
[22 93]
[28 92]
[29 91]
[30 90]
[31 89]
[32 88]
[96 115]
[97 114]
[98 113]
[99 112]
[100 110]
[101 109]
[102 108]
[118 131]
[119 130]
[120 129]
[121 128]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
