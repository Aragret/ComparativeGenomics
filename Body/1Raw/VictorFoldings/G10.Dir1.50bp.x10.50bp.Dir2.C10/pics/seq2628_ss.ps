%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:59 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGUCAUUAUUACCCUCACUGUCAACCCAACACAGGCAUGCUCAUAAGGAAAGGUUAAAAAAAxxxxxxxxxxAGACAGUCCCACCCUCACACGAUUCUUUACCUUUCACUUCAUCUUGCCCUUCAUUAUUGCCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[86.44972992 427.43103027]
[86.44972992 412.43103027]
[86.44972992 397.43103027]
[86.44972992 382.43103027]
[86.44972992 367.43103027]
[86.44972992 352.43103027]
[86.44972992 337.43103027]
[86.44972992 322.43103027]
[86.44972992 307.43103027]
[86.44972992 292.43103027]
[71.37922668 289.31237793]
[57.27510452 283.14041138]
[44.74886322 274.18014526]
[34.34410858 262.81756592]
[26.51298332 249.54301453]
[21.59650230 234.92991638]
[19.80970573 219.61013794]
[21.23226547 204.24659729]
[25.80491829 189.50457764]
[33.33194733 176.02296448]
[43.48954391 164.38648987]
[55.83975601 155.10043335]
[69.84934235 148.56864929]
[84.91282654 145.07600403]
[84.60076904 130.07925415]
[73.09896851 120.45072937]
[58.28120804 122.78182983]
[43.46345139 125.11293793]
[28.64569283 127.44403839]
[22.51751900 141.60205078]
[9.69505501 150.18038940]
[-5.73009396 150.44175720]
[-18.83582115 142.30274963]
[-25.44013596 128.36048889]
[-23.43562508 113.06390381]
[-13.46192074 101.29408264]
[1.29840314 96.80672455]
[16.13538170 101.03372955]
[26.31458855 112.62628174]
[41.13234711 110.29518127]
[55.95010376 107.96407318]
[70.76786041 105.63297272]
[74.60459137 89.34236908]
[86.00695038 78.90721130]
[100.04546356 76.91659546]
[104.94701385 62.74003983]
[109.84856415 48.56348038]
[95.32511139 52.31440735]
[83.21034241 43.46950150]
[82.35916901 28.49366951]
[93.39373016 18.33303642]
[108.24865723 20.41419983]
[116.06612396 33.21534729]
[122.41325378 19.62439537]
[128.76039124 6.03344345]
[134.96578979 -7.62279749]
[141.02880859 -21.34285164]
[147.09181213 -35.06290436]
[153.15483093 -48.78295898]
[159.21784973 -62.50301361]
[165.28085327 -76.22306824]
[171.34387207 -89.94312286]
[158.51322937 -97.75526428]
[146.81208801 -107.17536163]
[136.44065857 -118.04221344]
[127.57640839 -130.16987610]
[120.37103271 -143.35083008]
[114.94780731 -157.35952759]
[111.39954376 -171.95626831]
[109.78694916 -186.89128113]
[110.13762665 -201.90901184]
[112.44556427 -216.75247192]
[116.67127991 -231.16767883]
[122.74245453 -244.90797424]
[130.55520630 -257.73825073]
[139.97586060 -269.43896484]
[150.84321594 -279.80987549]
[162.97129822 -288.67352295]
[176.15258789 -295.87829590]
[190.16154480 -301.30084229]
[204.75845337 -304.84841919]
[219.69354248 -306.46029663]
[234.71125793 -306.10888672]
[249.55461121 -303.80026245]
[263.96963501 -299.57385254]
[277.70962524 -293.50201416]
[290.53952026 -285.68865967]
[302.23977661 -276.26745605]
[312.61016846 -265.39959717]
[321.47326660 -253.27110291]
[328.67739868 -240.08946228]
[334.09927368 -226.08024597]
[337.64614868 -211.48316956]
[339.25732422 -196.54800415]
[338.90521240 -181.53030396]
[336.59585571 -166.68705750]
[332.36877441 -152.27224731]
[326.29629517 -138.53253174]
[318.48229980 -125.70300293]
[309.06054688 -114.00320435]
[298.19223022 -103.63332367]
[286.06329346 -94.77081299]
[272.88131714 -87.56732178]
[258.87182617 -82.14609528]
[244.27458191 -78.59992218]
[229.33934021 -76.98945618]
[214.32167053 -77.34227753]
[199.47853088 -79.65233612]
[185.06391907 -83.88010406]
[179.00091553 -70.16004944]
[172.93789673 -56.43999863]
[166.87487793 -42.71994400]
[160.81187439 -28.99989128]
[154.74885559 -15.27983761]
[148.68585205 -1.55978441]
[148.86007690 5.87764072]
[142.35133362 12.38057327]
[136.00421143 25.97152328]
[129.65707397 39.56247330]
[124.02512360 53.46503067]
[119.12357330 67.64158630]
[114.22201538 81.81814575]
[125.23812866 98.06398773]
[120.07855225 118.85108948]
[99.59752655 129.76719666]
[99.90958405 144.76394653]
[114.31229401 147.39433289]
[127.91525269 152.79533386]
[140.19128418 160.75552368]
[150.66503906 170.96435547]
[158.93141174 183.02424622]
[164.67121887 196.46607971]
[167.66352844 210.76744080]
[167.79409790 225.37292480]
[165.05982971 239.71571350]
[159.56875610 253.23954773]
[151.53576660 265.42034912]
[141.27424622 275.78649902]
[129.18380737 283.93704224]
[115.73474121 289.55731201]
[101.44972992 292.43103027]
[101.44972992 307.43103027]
[101.44972992 322.43103027]
[101.44972992 337.43103027]
[101.44972992 352.43103027]
[101.44972992 367.43103027]
[101.44972992 382.43103027]
[101.44972992 397.43103027]
[101.44972992 412.43103027]
[101.44972992 427.43103027]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[24 126]
[25 125]
[26 42]
[27 41]
[28 40]
[29 39]
[45 122]
[46 121]
[47 120]
[53 119]
[54 118]
[55 117]
[56 115]
[57 114]
[58 113]
[59 112]
[60 111]
[61 110]
[62 109]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
