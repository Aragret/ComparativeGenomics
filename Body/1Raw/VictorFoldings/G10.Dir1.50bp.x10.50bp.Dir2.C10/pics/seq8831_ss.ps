%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:42 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCCCCUAACAGGGGCCCUCUCAGCCCUCCUAAUGACCUCCGGCCUAGCCAUGUGAUUUCACUxxxxxxxxxxCCUUUUACCACUCCAGCCUAGCCCCUACCCCCCAAUUAGGAGGGCACUGGCCCCCAACAGGCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[98.17222595 236.16131592]
[97.24880981 221.18977356]
[96.32540131 206.21821594]
[95.40198517 191.24667358]
[94.47856903 176.27511597]
[93.55516052 161.30357361]
[92.63174438 146.33201599]
[78.38505554 141.63821411]
[68.74324036 153.12889099]
[59.10142517 164.61955261]
[49.45960999 176.11021423]
[39.81779480 187.60089111]
[30.17598152 199.09155273]
[20.53416824 210.58221436]
[10.89235401 222.07289124]
[5.34292030 238.09288025]
[-11.58723927 237.19509888]
[-15.41127586 220.67803955]
[-0.59831303 212.43107605]
[9.04350090 200.94039917]
[18.68531609 189.44973755]
[28.32712936 177.95907593]
[37.96894455 166.46839905]
[47.61075592 154.97773743]
[57.25257111 143.48707581]
[66.89438629 131.99639893]
[56.12033844 108.61727142]
[59.70925903 83.88263702]
[75.69803619 65.65675354]
[98.31444550 59.28593826]
[100.46302032 44.44061279]
[102.30635071 29.55430603]
[103.84364319 14.63329029]
[105.38093567 -0.28772649]
[106.91822815 -15.20874310]
[108.45552063 -30.12975883]
[109.99281311 -45.05077744]
[111.53010559 -59.97179413]
[113.06739807 -74.89280701]
[114.60469055 -89.81382751]
[116.14198303 -104.73484039]
[117.67927551 -119.65586090]
[102.93042755 -122.43760681]
[88.46608734 -126.44376373]
[74.38769531 -131.64622498]
[60.79402161 -138.00849915]
[47.78040314 -145.48594666]
[35.43813324 -154.02613831]
[23.85377884 -163.56916809]
[13.10859776 -174.04808044]
[3.27796221 -185.38937378]
[-5.56917143 -197.51351929]
[-13.37074661 -210.33544922]
[-20.07204056 -223.76524353]
[-25.62604713 -237.70867920]
[-29.99380875 -252.06797791]
[-33.14468765 -266.74240112]
[-35.05657959 -281.62899780]
[-35.71607971 -296.62338257]
[-35.11856079 -311.62036133]
[-33.26821136 -326.51477051]
[-30.17800903 -341.20205688]
[-25.86963463 -355.57928467]
[-20.37330437 -369.54556274]
[-13.72757435 -383.00292969]
[-5.97906017 -395.85699463]
[2.81788778 -408.01760864]
[12.60156441 -419.39944458]
[23.30334282 -429.92266846]
[34.84815598 -439.51348877]
[47.15502548 -448.10464478]
[60.13762283 -455.63580322]
[73.70488739 -462.05419922]
[87.76165009 -467.31481934]
[102.20932007 -471.38070679]
[116.94654083 -474.22338867]
[131.86994934 -475.82293701]
[146.87486267 -476.16809082]
[161.85603333 -475.25643921]
[176.70837402 -473.09436035]
[191.32769775 -469.69708252]
[205.61148071 -465.08837891]
[219.45951843 -459.30059814]
[232.77467346 -452.37432861]
[245.46354675 -444.35815430]
[257.43713379 -435.30831909]
[268.61145020 -425.28826904]
[278.90814209 -414.36831665]
[288.25491333 -402.62506104]
[296.58627319 -390.14086914]
[303.84375000 -377.00332642]
[309.97644043 -363.30453491]
[314.94134521 -349.14062500]
[318.70358276 -334.61093140]
[321.23684692 -319.81738281]
[322.52328491 -304.86373901]
[322.55392456 -289.85488892]
[321.32855225 -274.89608765]
[318.85574341 -260.09231567]
[315.15283203 -245.54739380]
[310.24581909 -231.36332703]
[304.16912842 -217.63960266]
[296.96536255 -204.47251892]
[288.68505859 -191.95440674]
[279.38629150 -180.17308044]
[269.13430786 -169.21118164]
[258.00100708 -159.14559937]
[246.06445312 -150.04695129]
[233.40843201 -141.97901917]
[220.12165833 -134.99844360]
[206.29737854 -129.15415955]
[192.03253174 -124.48716736]
[177.42720032 -121.03019714]
[162.58380127 -118.80751038]
[147.60649109 -117.83469391]
[132.60029602 -118.11856842]
[131.06300354 -103.19754791]
[129.52571106 -88.27653503]
[127.98841095 -73.35551453]
[126.45111847 -58.43450165]
[124.91382599 -43.51348495]
[123.37653351 -28.59246635]
[121.83924103 -13.67145061]
[120.30194855 1.24956596]
[118.76465607 16.17058182]
[117.22736359 31.09159851]
[119.53247070 35.33844376]
[119.15087128 41.08668518]
[115.30834961 46.58919144]
[113.15976715 61.43451691]
[120.89252472 64.54130554]
[127.90399933 69.19651031]
[133.88473511 75.23477173]
[138.56277466 82.42901611]
[141.71597290 90.49895477]
[143.18238831 99.12189484]
[142.86822510 107.94568634]
[140.75311279 116.60309601]
[136.89231873 124.72705841]
[131.41580200 131.96624756]
[124.52404022 138.00025940]
[116.48084259 142.55368042]
[107.60329437 145.40859985]
[108.52671051 160.38015747]
[109.45011902 175.35169983]
[110.37353516 190.32325745]
[111.29695129 205.29479980]
[112.22035980 220.26635742]
[113.14377594 235.23789978]
[122.64820862 248.60195923]
[115.58168793 263.40048218]
[99.21364594 264.41003418]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 149]
[2 148]
[3 147]
[4 146]
[5 145]
[6 144]
[7 143]
[8 26]
[9 25]
[10 24]
[11 23]
[12 22]
[13 21]
[14 20]
[15 19]
[30 130]
[31 129]
[32 126]
[33 125]
[34 124]
[35 123]
[36 122]
[37 121]
[38 120]
[39 119]
[40 118]
[41 117]
[42 116]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
