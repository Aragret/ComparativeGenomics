%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:38 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGAUUAAUCCCCUGGCCCAACCCGUCAUCUACUCUACCAUCUUUGCAGGCACACUCAUCACAxxxxxxxxxxACAAUCCUAGGCCUACCCGCCGCAGUACUGAUCAUUCUAUUUCCCCCUCUAUUGAUCCCCCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[175.43740845 166.69395447]
[162.66004944 158.83653259]
[147.76564026 158.76045227]
[140.06333923 144.94070435]
[127.28598022 137.08328247]
[114.50862122 129.22586060]
[99.89973450 132.62882996]
[91.90981293 145.32376099]
[83.91989899 158.01869202]
[75.92998505 170.71362305]
[67.94007111 183.40855408]
[67.85573578 199.80747986]
[53.47954178 207.69778442]
[39.60047150 198.96260071]
[40.49613190 182.58793640]
[55.24513626 175.41864014]
[63.23505402 162.72370911]
[71.22496796 150.02877808]
[79.21488953 137.33384705]
[87.20480347 124.63891602]
[76.78690338 107.60923767]
[81.08302307 90.66767120]
[70.86954498 79.68200684]
[60.65606689 68.69634247]
[50.44258499 57.71067810]
[38.52701569 66.84106445]
[25.79749489 74.79744720]
[12.36930275 81.50776672]
[-1.63594711 86.91126251]
[-16.09141922 90.95898438]
[-30.86619949 93.61428833]
[-45.82648087 94.85311127]
[-60.83678055 94.66424561]
[-75.76116180 93.04940033]
[-90.46445465 90.02320099]
[-104.81350708 85.61305237]
[-118.67836761 79.85888672]
[-131.93347168 72.81282806]
[-144.45877075 64.53868866]
[-156.14085388 55.11138535]
[-166.87388611 44.61631012]
[-176.56069946 33.14850998]
[-185.11354065 20.81183243]
[-192.45497131 7.71801138]
[-198.51849365 -6.01437426]
[-203.24920654 -20.26095772]
[-206.60424805 -34.89271927]
[-208.55325317 -49.77714539]
[-209.07855225 -64.77944183]
[-208.17539978 -79.76373291]
[-205.85197449 -94.59432220]
[-202.12931824 -109.13690186]
[-197.04115295 -123.25976562]
[-190.63352966 -136.83500671]
[-182.96450806 -149.73968506]
[-174.10353088 -161.85694885]
[-164.13084412 -173.07702637]
[-153.13676453 -183.29832458]
[-141.22085571 -192.42828369]
[-128.49104309 -200.38420105]
[-115.06261444 -207.09402466]
[-101.05716705 -212.49700928]
[-86.60154724 -216.54420471]
[-71.82666779 -219.19897461]
[-56.86634064 -220.43725586]
[-41.85604858 -220.24783325]
[-26.93172836 -218.63244629]
[-12.22854519 -215.60571289]
[2.12034726 -211.19503784]
[15.98499870 -205.44036865]
[29.23984718 -198.39382935]
[41.76485062 -190.11923218]
[53.44657898 -180.69149780]
[64.17923737 -170.19604492]
[73.86562347 -158.72787476]
[82.41802216 -146.39089966]
[89.75897217 -133.29679871]
[95.82199860 -119.56420135]
[100.55218506 -105.31744385]
[103.90670013 -90.68555450]
[105.85515594 -75.80106354]
[106.37991333 -60.79874802]
[105.47621918 -45.81448746]
[103.15225220 -30.98398018]
[99.42906189 -16.44153786]
[94.34037018 -2.31886148]
[87.93226624 11.25614738]
[80.26277161 24.16055107]
[71.40134430 36.27748108]
[61.42824936 47.49720001]
[71.64173126 58.48286438]
[81.85520935 69.46852875]
[92.06868744 80.45419312]
[110.72545624 79.29637146]
[124.87120056 94.19350433]
[122.36605072 116.44850159]
[135.14340210 124.30592346]
[147.92076111 132.16334534]
[163.72909546 132.80145264]
[170.51747131 146.05917358]
[183.29483032 153.91661072]
[192.64582825 142.16432190]
[203.34524536 131.62487793]
[215.23707581 122.45200348]
[228.14788818 114.77944183]
[241.88941956 108.71908569]
[256.26126099 104.35931396]
[271.05383301 101.76371002]
[286.05142212 100.97012329]
[301.03530884 101.99012756]
[315.78698730 104.80883789]
[330.09133911 109.38516235]
[343.73977661 115.65235901]
[356.53323364 123.51902771]
[368.28518677 132.87046814]
[378.82421875 143.57028198]
[387.99664307 155.46246338]
[395.66873169 168.37356567]
[401.72857666 182.11531067]
[406.08779907 196.48730469]
[408.68286133 211.27998352]
[409.47589111 226.27760315]
[408.45532227 241.26144409]
[405.63604736 256.01303101]
[401.05920410 270.31719971]
[394.79150391 283.96542358]
[386.92434692 296.75857544]
[377.57247925 308.51016235]
[366.87225342 319.04879761]
[354.97973633 328.22079468]
[342.06835938 335.89239502]
[328.32638550 341.95172119]
[313.95419312 346.31042480]
[299.16143799 348.90490723]
[284.16378784 349.69738770]
[269.17999268 348.67626953]
[254.42851257 345.85644531]
[240.12449646 341.27905273]
[226.47653198 335.01083374]
[213.68365479 327.14318848]
[201.93241882 317.79089355]
[191.39418030 307.09027100]
[182.22264099 295.19741821]
[174.55151367 282.28573608]
[168.49270630 268.54354858]
[164.13455200 254.17121887]
[161.54060364 239.37835693]
[160.74870300 224.38067627]
[161.77038574 209.39689636]
[164.59075928 194.64553833]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 101]
[2 100]
[4 98]
[5 97]
[6 96]
[7 20]
[8 19]
[9 18]
[10 17]
[11 16]
[22 93]
[23 92]
[24 91]
[25 90]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
