%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:55 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGAUAUAGUACCGCAAGGGAAAGAUGAAAAAUUAUAACCAAGCAUAAUAUAGCAAGGACUAACxxxxxxxxxxCUAUUUCUGUAUGUCUCCAUCUAUUGAUGAGGGUCUUACUCUUUUAGUAUAAAUAGUACCGCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[115.37133789 327.71893311]
[115.37133789 312.71893311]
[115.37133789 297.71893311]
[115.37133789 282.71893311]
[115.37133789 267.71893311]
[115.37133789 252.71893311]
[115.37133789 237.71893311]
[115.37133789 222.71893311]
[115.37133789 207.71893311]
[115.37133789 192.71893311]
[113.68093872 177.81448364]
[110.32167816 163.19546509]
[106.96242523 148.57646179]
[103.60316467 133.95745850]
[96.55546570 131.39230347]
[91.42494965 145.48760986]
[77.32971954 140.35687256]
[82.46007538 126.26200104]
[75.41238403 123.69685364]
[63.44212723 132.73637390]
[57.55173874 148.04112244]
[41.31235504 150.32464600]
[31.42966080 137.23783875]
[38.07012558 122.24329376]
[54.40260696 120.76611328]
[66.37286377 111.72659302]
[73.79998779 87.41264343]
[92.50000000 78.76499939]
[92.50000000 63.76499939]
[92.50000000 48.76499939]
[92.50000000 33.76499939]
[92.50000000 18.76499939]
[69.66375732 8.62014198]
[70.39647675 -13.09524727]
[61.48032379 -25.15767860]
[52.56417084 -37.22010803]
[43.64802170 -49.28254318]
[30.52679443 -41.97079086]
[16.57826614 -36.39702225]
[2.03148293 -32.65276718]
[-12.87468243 -30.79950905]
[-27.89545631 -30.86767769]
[-42.78418732 -32.85615540]
[-57.29638672 -36.73229218]
[-71.19374847 -42.43243027]
[-84.24806976 -49.86297607]
[-96.24498749 -58.90191269]
[-106.98749542 -69.40081024]
[-116.29920197 -81.18726349]
[-124.02718353 -94.06773376]
[-130.04455566 -107.83071136]
[-134.25250244 -122.25019836]
[-136.58192444 -137.08940125]
[-136.99456787 -152.10466003]
[-135.48367310 -167.04940796]
[-132.07402039 -181.67823792]
[-126.82163239 -195.75093079]
[-119.81272888 -209.03640747]
[-111.16242218 -221.31648254]
[-101.01274872 -232.38954163]
[-89.53038025 -242.07373047]
[-76.90386200 -250.21003723]
[-63.34054184 -256.66485596]
[-49.06313324 -261.33218384]
[-34.30608749 -264.13537598]
[-19.31172752 -265.02841187]
[-4.32627583 -263.99664307]
[10.40419388 -261.05697632]
[24.63779259 -256.25769043]
[38.14079285 -249.67762756]
[50.69146347 -241.42480469]
[62.08370972 -231.63476562]
[72.13046265 -220.46824646]
[80.66674042 -208.10862732]
[87.55237579 -194.75885010]
[92.67430115 -180.63815308]
[95.94840240 -165.97839355]
[97.32092285 -151.02029419]
[96.76932526 -136.00950623]
[94.30265808 -121.19248962]
[89.96143341 -106.81256866]
[83.81693268 -93.10587311]
[75.97006226 -80.29747772]
[66.54967499 -68.59770966]
[55.71045303 -58.19869232]
[64.62660217 -46.13626099]
[73.54275513 -34.07382965]
[82.45890808 -22.01139832]
[98.29500580 -21.51989555]
[109.93869019 -7.55261946]
[123.75226593 -13.39940739]
[137.56585693 -19.24619675]
[147.25862122 -31.75063133]
[161.99511719 -29.58621979]
[171.68788147 -42.09065247]
[186.42439270 -39.92624283]
[200.23797607 -45.77302933]
[214.05155945 -51.61981964]
[227.80438232 -57.60811615]
[241.49501038 -63.73728943]
[255.18563843 -69.86646271]
[268.87625122 -75.99563599]
[278.04455566 -89.59249878]
[294.38284302 -88.18119812]
[301.08374023 -73.21355438]
[291.25390625 -60.08700562]
[275.00543213 -62.30501175]
[261.31481934 -56.17583847]
[247.62419128 -50.04666138]
[233.93356323 -43.91748810]
[229.08378601 -38.27906418]
[219.89834595 -37.80623627]
[206.08476257 -31.95944786]
[192.27117920 -26.11265945]
[183.56645203 -14.02642536]
[167.84190369 -15.77263641]
[159.13719177 -3.68640280]
[143.41264343 -5.43261290]
[129.59906006 0.41417506]
[115.78547668 6.26096296]
[107.50000000 18.76499939]
[107.50000000 33.76499939]
[107.50000000 48.76499939]
[107.50000000 63.76499939]
[107.50000000 78.76499939]
[123.89243317 87.67353821]
[130.04330444 108.59634399]
[118.22216797 130.59820557]
[121.58142853 145.21720886]
[124.94068909 159.83621216]
[128.29994202 174.45521545]
[134.37339783 160.73977661]
[146.04577637 151.31877136]
[160.73411560 148.27694702]
[175.18803406 152.28744507]
[186.20904541 162.46278381]
[191.35829163 176.55125427]
[189.49632263 191.43524170]
[181.03515625 203.82107544]
[167.84716797 210.96788025]
[152.85072327 211.29417419]
[139.36436462 204.72772217]
[130.37133789 192.71893311]
[130.37133789 207.71893311]
[130.37133789 222.71893311]
[130.37133789 237.71893311]
[130.37133789 252.71893311]
[130.37133789 267.71893311]
[130.37133789 282.71893311]
[130.37133789 297.71893311]
[130.37133789 312.71893311]
[130.37133789 327.71893311]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 152]
[2 151]
[3 150]
[4 149]
[5 148]
[6 147]
[7 146]
[8 145]
[9 144]
[10 143]
[11 131]
[12 130]
[13 129]
[14 128]
[19 26]
[20 25]
[28 125]
[29 124]
[30 123]
[31 122]
[32 121]
[34 88]
[35 87]
[36 86]
[37 85]
[90 120]
[91 119]
[92 118]
[94 116]
[96 114]
[97 113]
[98 112]
[99 110]
[100 109]
[101 108]
[102 107]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
