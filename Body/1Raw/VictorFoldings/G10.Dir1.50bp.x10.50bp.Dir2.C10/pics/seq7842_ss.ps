%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:29 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGAACCAAACCACUUUCACCGCUACACGACCGGGGGUAUACUACGGUCAAUGCUCUGAAAUCxxxxxxxxxxACACAACCACCCACAGCCUAAUUAUUAGCAUCAUCCCUCUACUAUUUUUUAACCAAAUCACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[136.87602234 464.63128662]
[136.87602234 449.63128662]
[136.87602234 434.63128662]
[136.87602234 419.63128662]
[136.87602234 404.63128662]
[136.87602234 389.63128662]
[136.87602234 374.63128662]
[136.87602234 359.63128662]
[136.87602234 344.63128662]
[136.87602234 329.63128662]
[135.31843567 314.71237183]
[132.22012329 300.03585815]
[122.23193359 293.14068604]
[119.55946350 280.89010620]
[126.17850494 269.77066040]
[123.38618469 255.03283691]
[120.59385681 240.29504395]
[105.14667511 239.56074524]
[90.31140900 235.16316223]
[76.94441986 227.35180664]
[65.81835938 216.57339478]
[57.57749176 203.44627380]
[52.70037842 188.72496033]
[51.47211456 173.25677490]
[53.96763611 157.93305969]
[60.04719162 143.63783264]
[69.36413574 131.19679260]
[81.38470459 121.32958984]
[95.41860199 114.60823822]
[92.16209412 129.25047302]
[79.92765045 137.92909241]
[65.03194427 136.16329956]
[55.16566467 124.86478424]
[55.42279434 109.86698914]
[65.67057037 98.91330719]
[80.62001801 97.65973663]
[66.49521637 92.61097717]
[52.37041473 87.56221771]
[38.24560928 82.51346588]
[24.12080765 77.46470642]
[8.52157688 80.10565186]
[-0.85885376 68.53600311]
[-14.98365688 63.48724365]
[-30.04100800 69.02400208]
[-43.68264771 60.58094406]
[-45.44387436 44.63486099]
[-33.97362900 33.41822052]
[-18.07089996 35.53547287]
[-9.93490028 49.36244202]
[4.18990278 54.41119766]
[18.77883339 51.40913391]
[29.16956329 63.33990479]
[43.29436874 68.38866425]
[57.41917038 73.43741608]
[71.54397583 78.48617554]
[85.66877747 83.53492737]
[92.52697754 86.34641266]
[97.38161469 91.07479858]
[102.86864471 77.11441040]
[108.35567474 63.15402222]
[113.84271240 49.19363022]
[119.32974243 35.23324203]
[123.33747864 20.77855301]
[125.82260132 5.98584509]
[128.30772400 -8.80686188]
[114.30050659 -14.32879448]
[101.74768066 -22.64265060]
[91.19799042 -33.38498688]
[83.11263275 -46.08619308]
[77.84505463 -60.19102478]
[75.62553406 -75.08288574]
[76.55110168 -90.11075592]
[80.58129883 -104.61769104]
[87.53993225 -117.96951294]
[97.12281036 -129.58253479]
[108.91101074 -138.94906616]
[122.38919067 -145.65968323]
[136.96815491 -149.42097473]
[152.01057434 -150.06855774]
[166.85885620 -147.57411194]
[180.86389160 -142.04666138]
[193.41345215 -133.72787476]
[203.95890808 -122.98138428]
[212.03927612 -110.27700043]
[217.30130005 -96.17009735]
[219.51496887 -81.27736664]
[218.58348083 -66.24985504]
[214.54757690 -51.74450684]
[207.58369446 -38.39542770]
[197.99624634 -26.78618240]
[186.20436096 -17.42427826]
[172.72354126 -10.71897697]
[158.14309692 -6.96340609]
[143.10041809 -6.32174349]
[140.61531067 8.47096348]
[138.13018799 23.26367188]
[149.29928589 13.25111580]
[163.94934082 10.02998638]
[178.28825378 14.43406105]
[188.60441589 25.32335854]
[192.22752380 39.87921906]
[188.21975708 54.33390045]
[177.61851501 64.94585419]
[163.16787720 68.96820831]
[148.60836792 65.35978699]
[137.70866394 55.05461502]
[133.29013062 40.72027206]
[127.80310059 54.68066406]
[122.31607056 68.64105225]
[116.82903290 82.60144043]
[111.34200287 96.56182861]
[110.09513092 111.50991821]
[124.66638184 111.84311676]
[138.78741455 115.42213440]
[151.74490356 122.06270599]
[162.88505554 131.42601013]
[171.64665222 143.03590393]
[177.58924866 156.30322266]
[180.41540527 170.55560303]
[179.98545837 185.07159424]
[176.32453918 199.11714172]
[169.62104797 211.98278809]
[160.21699524 223.01939392]
[148.59053040 231.67097473]
[135.33166504 237.50271606]
[138.12399292 252.24052429]
[140.91630554 266.97833252]
[153.25215149 280.60940552]
[146.89665222 296.93753052]
[149.99496460 311.61407471]
[156.72735596 298.20977783]
[169.18376160 289.85287476]
[184.13989258 288.70651245]
[197.72439575 295.06741333]
[206.42095947 307.28912354]
[207.97851562 322.20803833]
[201.99388123 335.96246338]
[190.01617432 344.99209595]
[175.14578247 346.95965576]
[161.23185730 341.35586548]
[151.87602234 329.63128662]
[151.87602234 344.63128662]
[151.87602234 359.63128662]
[151.87602234 374.63128662]
[151.87602234 389.63128662]
[151.87602234 404.63128662]
[151.87602234 419.63128662]
[151.87602234 434.63128662]
[151.87602234 449.63128662]
[151.87602234 464.63128662]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[11 130]
[12 129]
[15 127]
[16 126]
[17 125]
[29 112]
[36 56]
[37 55]
[38 54]
[39 53]
[40 52]
[42 50]
[43 49]
[58 111]
[59 110]
[60 109]
[61 108]
[62 107]
[63 96]
[64 95]
[65 94]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
