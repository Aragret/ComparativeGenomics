%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:30 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGUUAACCACUCACGGGAGCUCUCCAUGCAUUUGGUAUUUUCGUCUGGGGGGUAUGCACGCGxxxxxxxxxxCCUAUUUAUUACCUCAGAAGUUUUUUUCUUCGCAGGAUUUUUCUGAGCCUUUUACCACUCCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[84.62333679 483.26473999]
[84.62333679 468.26473999]
[84.62333679 453.26473999]
[84.62333679 438.26473999]
[84.62333679 423.26473999]
[84.62333679 408.26473999]
[84.62333679 393.26473999]
[84.62333679 378.26473999]
[84.62333679 363.26473999]
[84.62333679 348.26473999]
[71.41645050 345.76876831]
[58.85669327 340.97201538]
[47.34159470 334.02487183]
[37.23587418 325.14572144]
[28.85989380 314.61422729]
[22.47950745 302.76245117]
[18.29762077 289.96438599]
[16.44773293 276.62417603]
[16.98968697 263.16336060]
[19.90772247 250.00747681]
[25.11093903 237.57270813]
[32.43612671 226.25268555]
[41.65287399 216.40597534]
[52.47083282 208.34478760]
[64.54885101 202.32505798]
[77.50574493 198.53831482]
[90.93230438 197.10557556]
[92.17918396 182.15748596]
[93.42605591 167.20939636]
[94.67292786 152.26132202]
[94.82896423 137.26213074]
[93.89334106 122.29133606]
[92.95771027 107.32054138]
[89.33159637 100.05863190]
[92.16164398 92.02917480]
[91.53766632 77.04216003]
[90.91368866 62.05514526]
[76.59899902 59.31246948]
[63.26606750 53.44341278]
[51.58782196 44.74788284]
[42.15287781 33.66834259]
[35.43583298 20.76731110]
[31.77340889 6.69880009]
[31.34757423 -7.82483912]
[34.17650223 -22.06898880]
[40.11382294 -35.31392288]
[48.85618591 -46.89116669]
[59.95877075 -56.21723557]
[72.85791016 -62.82305908]
[86.89971161 -66.37754059]
[78.87699127 -80.01376343]
[86.34783936 -92.89924622]
[86.03578186 -107.89599609]
[85.72373199 -122.89275360]
[85.41167450 -137.88951111]
[85.09961700 -152.88626099]
[84.78755951 -167.88301086]
[84.47550201 -182.87976074]
[69.62273407 -185.25355530]
[55.43257523 -190.24147034]
[42.36119461 -197.68316650]
[30.82877731 -207.33941650]
[21.20604324 -218.89981079]
[13.80232334 -231.99273682]
[8.85561657 -246.19731140]
[6.52494049 -261.05691528]
[6.88521481 -276.09387207]
[9.92485905 -290.82479858]
[15.54616165 -304.77615356]
[23.56842041 -317.49948120]
[33.73375320 -328.58578491]
[45.71538544 -337.67864990]
[59.12815857 -344.48580933]
[73.54090881 -348.78842163]
[88.49032593 -350.44818115]
[103.49584198 -349.41171265]
[118.07509613 -345.71237183]
[131.75942993 -339.46908569]
[144.10893250 -330.88250732]
[154.72663879 -320.22866821]
[163.27122498 -307.85006714]
[169.46801758 -294.14462280]
[173.11781311 -279.55288696]
[174.10330200 -264.54391479]
[172.39277649 -249.60023499]
[168.04124451 -235.20217896]
[161.18856812 -221.81260681]
[152.05506897 -209.86192322]
[140.93431091 -199.73429871]
[128.18380737 -191.75529480]
[114.21342468 -186.18141174]
[99.47225952 -183.19181824]
[99.78431702 -168.19506836]
[100.09636688 -153.19831848]
[100.40842438 -138.20155334]
[100.72048187 -123.20480347]
[101.03253937 -108.20805359]
[101.34459686 -93.21129608]
[109.34499359 -80.64774323]
[101.89646912 -66.68959808]
[117.00851440 -63.40624619]
[130.91020203 -56.61161041]
[142.79832458 -46.69363785]
[151.98492432 -34.22087479]
[157.93707275 -19.90986252]
[160.30783081 -4.58397722]
[158.95645142 10.87394142]
[153.95666504 25.57244492]
[145.59277344 38.66288757]
[134.34341431 49.38842392]
[120.85421753 57.12776566]
[105.90070343 61.43116760]
[106.52468109 76.41818237]
[107.14865875 91.40519714]
[107.92850494 106.38491821]
[108.86412811 121.35570526]
[109.79975891 136.32649231]
[120.01752472 125.34482574]
[134.88113403 123.32659149]
[147.65721130 131.18609619]
[152.55809021 145.36288452]
[147.36360168 159.43475342]
[134.42691040 167.02699280]
[119.60846710 164.70025635]
[109.62101746 153.50819397]
[108.37414551 168.45626831]
[107.12726593 183.40435791]
[105.88039398 198.35244751]
[121.83985138 203.18156433]
[136.35527039 211.37414551]
[148.72824097 222.53282166]
[158.36412048 236.11766052]
[164.80059814 251.47216797]
[167.72993469 267.85507202]
[167.01358032 284.47610474]
[162.68879700 300.53411865]
[154.96675110 315.25567627]
[144.22210693 327.93237305]
[130.97492981 337.95486450]
[115.86549377 344.84216309]
[99.62333679 348.26473999]
[99.62333679 363.26473999]
[99.62333679 378.26473999]
[99.62333679 393.26473999]
[99.62333679 408.26473999]
[99.62333679 423.26473999]
[99.62333679 438.26473999]
[99.62333679 453.26473999]
[99.62333679 468.26473999]
[99.62333679 483.26473999]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[27 128]
[28 127]
[29 126]
[30 125]
[31 117]
[32 116]
[33 115]
[35 114]
[36 113]
[37 112]
[50 100]
[52 98]
[53 97]
[54 96]
[55 95]
[56 94]
[57 93]
[58 92]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
