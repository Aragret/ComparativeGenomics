%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:43 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGACCCCAUAAACAAAUAGGUUUGGUCCUAGCCUUUCUAUUAGCUCUUAGUAAGAUUACACAxxxxxxxxxxUUAGGUCAAGGUGUAGCCCAUGAGGUGGCAAGAAAUGGGCUACAUUUUCUACCCCAGAAACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[92.50000000 252.66246033]
[92.50000000 237.66246033]
[92.50000000 222.66246033]
[92.50000000 207.66246033]
[92.50000000 192.66246033]
[92.50000000 177.66246033]
[92.50000000 162.66246033]
[92.50000000 147.66246033]
[92.50000000 132.66246033]
[92.50000000 117.66245270]
[79.11371613 110.89434052]
[67.03372955 119.78668976]
[54.95373917 128.67904663]
[53.31200409 132.85829163]
[50.66677475 135.95245361]
[47.49592972 137.77662659]
[44.28763580 138.32511902]
[41.47937393 137.75854492]
[28.70201683 145.61598206]
[15.92465973 153.47340393]
[3.14730215 161.33082581]
[-0.27389190 176.76037598]
[-13.64808178 185.18098450]
[-29.04059792 181.59684753]
[-37.31933212 168.13438416]
[-33.57265854 152.78062439]
[-20.02341461 144.64468384]
[-4.71012354 148.55346680]
[8.06723404 140.69604492]
[20.84459114 132.83862305]
[33.62194824 124.98119354]
[46.06138992 116.59905243]
[58.14137650 107.70670319]
[70.22136688 98.81435394]
[73.31968689 84.13782501]
[65.86477661 71.12151337]
[58.40986633 58.10520554]
[42.29697800 49.25339127]
[42.96805573 31.74483299]
[35.24397278 18.88643074]
[27.51988792 6.02802849]
[19.79580307 -6.83037376]
[5.69233227 -1.60272455]
[-9.12766838 0.94360721]
[-24.15922928 0.72334576]
[-38.89044189 -2.25454211]
[-52.81989670 -7.88720179]
[-65.47374725 -15.98144436]
[-76.42183685 -26.26036835]
[-85.29230499 -38.37283707]
[-91.78424072 -51.90547562]
[-95.67786407 -66.39676666]
[-96.84198761 -81.35279846]
[-95.23842621 -96.26409912]
[-90.92324066 -110.62300110]
[-84.04481506 -123.94090271]
[-74.83869934 -135.76490784]
[-63.61957932 -145.69323730]
[-71.34366608 -158.55163574]
[-79.06774902 -171.41003418]
[-93.66441345 -178.88461304]
[-94.21922302 -195.27438354]
[-80.16143799 -203.71893311]
[-65.95249939 -195.53126526]
[-66.20934296 -179.13412476]
[-58.48526001 -166.27572632]
[-50.76117706 -153.41731262]
[-36.72671890 -158.65890503]
[-21.96413422 -161.23297119]
[-6.97594023 -161.05043030]
[7.72739363 -158.11601257]
[21.64483070 -152.52821350]
[34.30183792 -144.47599792]
[45.26657486 -134.23236084]
[54.16461182 -122.14507294]
[60.69173050 -108.62493896]
[64.62431335 -94.13178253]
[65.82701874 -79.15879822]
[64.25743103 -64.21580505]
[59.96753311 -49.81187820]
[53.10202789 -36.43797684]
[43.89343262 -24.55025291]
[32.65420532 -14.55445862]
[40.37828827 -1.69605637]
[48.10237503 11.16234589]
[55.82645798 24.02074814]
[67.51947021 27.27356720]
[74.04836273 37.97835922]
[71.42617798 50.65029526]
[78.88108826 63.66660690]
[86.33599854 76.68291473]
[118.32991791 85.46952057]
[132.97341919 82.21868896]
[147.61691284 78.96786499]
[162.26042175 75.71704102]
[176.90391541 72.46621704]
[191.54742432 69.21538544]
[206.19091797 65.96456146]
[220.83442688 62.71373749]
[235.47792053 59.46290970]
[250.12142944 56.21208572]
[253.11190796 41.27967453]
[261.92269897 28.85832977]
[275.02728271 21.10012436]
[290.15521240 19.34921455]
[304.68548584 23.90895844]
[316.10061646 33.98934937]
[322.42291260 47.84390259]
[322.55697632 63.07222748]
[316.47955322 77.03592682]
[305.24362183 87.31571198]
[290.79589844 92.13053894]
[275.63946533 90.64620972]
[262.40036011 83.11990356]
[253.37225342 70.85559082]
[238.72875977 74.10641479]
[224.08525085 77.35723877]
[209.44175720 80.60806274]
[194.79824829 83.85888672]
[180.15475464 87.10971832]
[165.51124573 90.36054230]
[150.86775208 93.61136627]
[136.22424316 96.86219025]
[121.58074188 100.11302185]
[135.99015808 104.28061676]
[150.39956665 108.44821930]
[165.35551453 107.29961395]
[179.63768005 111.88434601]
[191.13069153 121.52336884]
[198.13227844 134.78903198]
[199.60543823 149.71652222]
[195.33198547 164.09487915]
[185.94483948 175.79452515]
[172.83438110 183.08258057]
[157.94239807 184.87959290]
[143.47460938 180.91941833]
[131.57385254 171.78858948]
[124.00278473 158.83950806]
[121.88276672 143.98992920]
[114.69138336 130.82618713]
[107.50000000 117.66245270]
[107.50000000 132.66246033]
[107.50000000 147.66246033]
[107.50000000 162.66246033]
[107.50000000 177.66246033]
[107.50000000 192.66246033]
[107.50000000 207.66246033]
[107.50000000 222.66246033]
[107.50000000 237.66246033]
[107.50000000 252.66246033]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[11 34]
[12 33]
[13 32]
[18 31]
[19 30]
[20 29]
[21 28]
[35 91]
[36 90]
[37 89]
[39 86]
[40 85]
[41 84]
[42 83]
[58 67]
[59 66]
[60 65]
[92 124]
[93 123]
[94 122]
[95 121]
[96 120]
[97 119]
[98 118]
[99 117]
[100 116]
[101 115]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
