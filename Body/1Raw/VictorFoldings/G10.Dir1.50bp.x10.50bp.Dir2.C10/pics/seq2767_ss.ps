%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:18 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCAUAAUCACUUGUUCCUUAAAUAGGGACCUGUAUGAAUGGCUCCACGAGGGUUCAGCUGUCxxxxxxxxxxGCUACUUCCCCUAUCAUAGAAGAGCUUAUCACCUUUCAUGAUCACGCCCUCAUAAUCAUUUCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[150.24099731 337.96502686]
[149.31758118 322.99349976]
[148.39416504 308.02194214]
[147.47074890 293.05038452]
[146.54733276 278.07882690]
[145.62393188 263.10729980]
[144.70051575 248.13574219]
[141.94427490 233.39114380]
[137.39697266 219.09701538]
[132.84968567 204.80287170]
[128.30239868 190.50874329]
[114.13095856 186.00228882]
[105.22514343 173.87171936]
[105.16927338 158.64509583]
[114.19434357 146.16093445]
[109.64705658 131.86680603]
[105.09976196 117.57267761]
[91.67231750 110.88660431]
[77.52500153 115.87192535]
[70.64559937 129.84732056]
[56.22719193 134.70161438]
[42.94618225 128.05702209]
[28.79886818 133.04234314]
[14.65155125 138.02766418]
[0.50423431 143.01300049]
[-13.64308262 147.99832153]
[-27.79039955 152.98364258]
[-35.98836136 166.77395630]
[-51.90043259 168.81982422]
[-63.32023239 157.55183411]
[-61.48746490 141.61380005]
[-47.80807495 133.23205566]
[-32.77572250 138.83631897]
[-18.62840462 133.85099792]
[-4.48108768 128.86567688]
[9.66622925 123.88035583]
[23.81354523 118.89503479]
[37.96086121 113.90971375]
[44.14218903 100.40686798]
[58.41856384 95.14950562]
[72.53967285 101.72460938]
[86.68698883 96.73928833]
[96.56269836 85.44900513]
[99.62109375 70.76410675]
[102.67948914 56.07920837]
[105.73788452 41.39431000]
[108.79627991 26.70941353]
[104.03527832 11.62155819]
[114.20503998 0.73922747]
[117.26343536 -13.94567013]
[112.27811432 -28.09298706]
[100.68906403 -37.61632538]
[89.10002136 -47.13965988]
[73.02389526 -52.52433395]
[73.74782562 -69.46282196]
[90.22474670 -73.45622253]
[98.62335205 -58.72871017]
[110.21240234 -49.20537186]
[121.80145264 -39.68203354]
[136.31007385 -43.48989487]
[141.72869873 -57.47697830]
[147.14732361 -71.46405792]
[142.65475464 -83.59750366]
[147.50224304 -95.15921783]
[158.57238770 -100.13056183]
[164.27703857 -114.00344086]
[169.98170471 -127.87631989]
[175.68637085 -141.74920654]
[163.51557922 -132.98153687]
[149.18376160 -128.55445862]
[134.18847656 -128.93054199]
[120.09660339 -134.07049561]
[108.38062286 -143.43724060]
[100.26476288 -156.05201721]
[96.59704590 -170.59671021]
[97.76073456 -185.55149841]
[103.63422394 -199.35374451]
[113.60379028 -210.56123352]
[126.62768555 -218.00288391]
[141.34504700 -220.90107727]
[156.21800232 -218.95300293]
[169.69247437 -212.36221313]
[180.36048889 -201.81738281]
[187.10734558 -188.42036438]
[189.22802734 -173.57102966]
[186.50111389 -158.82148743]
[196.60655212 -169.90661621]
[206.71199036 -180.99176025]
[216.81741333 -192.07688904]
[212.08493042 -206.68849182]
[215.30796814 -221.70541382]
[225.61956787 -233.08815002]
[240.24594116 -237.77481079]
[255.25267029 -234.50471497]
[266.60302734 -224.15748596]
[271.24383545 -209.51649475]
[267.92669678 -194.52009583]
[257.54394531 -183.20222473]
[242.88848877 -178.60734558]
[227.90255737 -181.97145081]
[217.79711914 -170.88632202]
[207.69168091 -159.80119324]
[197.58624268 -148.71604919]
[189.55924988 -136.04454041]
[183.85458374 -122.17165375]
[178.14991760 -108.29877472]
[172.44526672 -94.42589569]
[175.73796082 -77.21535492]
[161.13441467 -66.04543304]
[155.71578979 -52.05835342]
[150.29716492 -38.07126999]
[146.81291199 -18.81653595]
[131.94833374 -10.88727474]
[128.88993835 3.79762292]
[133.86970520 17.83511734]
[123.48117828 29.76780891]
[120.42278290 44.45270920]
[117.36438751 59.13760376]
[114.30599213 73.82250214]
[111.24759674 88.50740051]
[119.39389038 113.02538300]
[123.94118500 127.31951904]
[128.48847961 141.61364746]
[143.06773376 146.58872986]
[151.81967163 159.04893494]
[151.55949402 174.09541321]
[142.59652710 185.96145630]
[147.14381409 200.25558472]
[151.69111633 214.54971313]
[156.23840332 228.84384155]
[160.83601379 214.56582642]
[171.08686829 203.61503601]
[185.03057861 198.08573914]
[200.00048828 199.03536987]
[213.13371277 206.28231812]
[221.91862488 218.44065857]
[224.67515564 233.18521118]
[220.87615967 247.69615173]
[211.24813843 259.19839478]
[197.63241577 265.49218750]
[182.63288879 265.37390137]
[169.11810303 258.86618042]
[159.67205811 247.21232605]
[160.59547424 262.18386841]
[161.51889038 277.15542603]
[162.44230652 292.12698364]
[163.36572266 307.09851074]
[164.28912354 322.07006836]
[165.21253967 337.04162598]
[174.71697998 350.40567017]
[167.65045166 365.20419312]
[151.28240967 366.21374512]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 149]
[2 148]
[3 147]
[4 146]
[5 145]
[6 144]
[7 143]
[8 130]
[9 129]
[10 128]
[11 127]
[15 123]
[16 122]
[17 121]
[18 42]
[19 41]
[22 38]
[23 37]
[24 36]
[25 35]
[26 34]
[27 33]
[43 120]
[44 119]
[45 118]
[46 117]
[47 116]
[49 114]
[50 113]
[51 59]
[52 58]
[53 57]
[60 111]
[61 110]
[62 109]
[65 107]
[66 106]
[67 105]
[68 104]
[86 103]
[87 102]
[88 101]
[89 100]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
