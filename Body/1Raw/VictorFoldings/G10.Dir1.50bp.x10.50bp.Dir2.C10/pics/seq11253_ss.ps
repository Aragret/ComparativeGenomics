%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:46 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGACCUAAAACAAUUUCACAGCACCAAAUCUCCACCUCCAUCAUCACCUCAACCCAAAAAGGxxxxxxxxxxUCCUACACAUCGGGCGAGGCCUAUAUUACGGAUCAUUUCUCUACUCAGAAACCUGAAACACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[85.28759766 469.56729126]
[85.28759766 454.56729126]
[85.28759766 439.56729126]
[85.28759766 424.56729126]
[85.28759766 409.56729126]
[85.28759766 394.56729126]
[85.28759766 379.56729126]
[85.28759766 364.56729126]
[85.28759766 349.56729126]
[85.28759766 334.56729126]
[71.70991516 331.35528564]
[59.19150543 325.17630005]
[48.37180710 316.34204102]
[39.80435944 305.29989624]
[33.92850113 292.61032104]
[31.04684067 278.91848755]
[31.30966568 264.92126465]
[34.70711899 251.33198547]
[41.06950760 238.84388733]
[50.07579041 228.09494019]
[61.26976395 219.63510132]
[74.08318329 213.89825439]
[87.86457825 211.17994690]
[88.48855591 196.19293213]
[89.11253357 181.20591736]
[78.87010193 170.45285034]
[79.28941345 155.24499512]
[90.63765717 144.57470703]
[91.26163483 129.58769226]
[77.58897400 121.20227814]
[69.97373199 107.08615875]
[70.47419739 91.05474091]
[78.95510864 77.44111633]
[93.12419128 69.92486572]
[93.43624115 54.92810822]
[93.74829865 39.93135452]
[94.06035614 24.93460274]
[84.80609894 9.04943275]
[94.39720917 -5.61380672]
[94.39720917 -20.61380768]
[94.39720917 -35.61380768]
[81.13067627 -38.65351105]
[68.80735779 -44.41508865]
[57.97838211 -52.63777924]
[49.12739563 -62.95083237]
[42.64896774 -74.89020538]
[38.83100128 -87.91946411]
[37.84192657 -101.45386505]
[39.72328949 -114.88661194]
[44.38800049 -127.61605072]
[51.62437057 -139.07263184]
[61.10571289 -148.74438477]
[72.40509033 -156.19976807]
[85.01454926 -161.10699463]
[98.36791992 -163.24871826]
[99.30355072 -178.21951294]
[100.23917389 -193.19030762]
[101.17480469 -208.16108704]
[93.22280884 -218.36988831]
[94.34919739 -230.85789490]
[103.40116119 -238.94302368]
[104.64803314 -253.89111328]
[105.89491272 -268.83920288]
[91.47716522 -273.17767334]
[78.27669525 -280.41931152]
[66.87055969 -290.24752808]
[57.75739288 -302.23266602]
[51.33558273 -315.85083008]
[47.88586044 -330.50665283]
[47.55903244 -345.55944824]
[50.36938858 -360.35119629]
[56.19407272 -374.23522949]
[64.77845764 -386.60464478]
[75.74726105 -396.91864014]
[88.62097931 -404.72640991]
[102.83683014 -409.68658447]
[117.77336121 -411.58230591]
[132.77760315 -410.33074951]
[147.19363403 -405.98660278]
[160.39126587 -398.73977661]
[171.79353333 -388.90707397]
[180.90197754 -376.91833496]
[187.31843567 -363.29766846]
[190.76239014 -348.64050293]
[191.08329773 -333.58755493]
[188.26712036 -318.79693604]
[182.43696594 -304.91516113]
[173.84771729 -292.54916382]
[162.87486267 -282.23944092]
[149.99807739 -274.43676758]
[135.78027344 -269.48217773]
[120.84299469 -267.59231567]
[119.59612274 -252.64424133]
[118.34925079 -237.69615173]
[126.68827820 -222.28639221]
[116.14559937 -207.22546387]
[115.20996857 -192.25466919]
[114.27433777 -177.28387451]
[113.33871460 -162.31309509]
[129.04321289 -157.33410645]
[142.96095276 -148.49909973]
[154.16354370 -136.39117432]
[161.90216064 -121.81195831]
[165.65750122 -105.72853088]
[165.17471313 -89.20925903]
[160.48063660 -73.35286713]
[151.88240051 -59.21532822]
[139.94731140 -47.73953247]
[125.46540070 -39.69244385]
[109.39720917 -35.61380768]
[109.39720917 -20.61380768]
[109.39720917 -5.61380672]
[117.74576569 3.19578338]
[117.83019257 15.73419762]
[109.05711365 25.24665833]
[108.74505615 40.24341202]
[108.43299866 55.24016571]
[108.12094116 70.23692322]
[120.14675140 76.63551331]
[128.24472046 87.58927155]
[130.83607483 100.96263885]
[127.41560364 114.14833069]
[118.65015411 124.57564545]
[106.24864960 130.21166992]
[105.62467194 145.19868469]
[116.04667664 156.77537537]
[115.20037842 171.96545410]
[104.09954834 181.82989502]
[103.47557068 196.81690979]
[102.85159302 211.80392456]
[118.27545929 216.48762512]
[131.96966553 224.97039795]
[143.01812744 236.67835999]
[150.68344116 250.82203674]
[154.45603943 266.44973755]
[154.08808899 282.51147461]
[149.60977173 297.92950439]
[141.32688904 311.67074585]
[129.79992676 322.81594849]
[115.80626678 330.62112427]
[100.28759766 334.56729126]
[100.28759766 349.56729126]
[100.28759766 364.56729126]
[100.28759766 379.56729126]
[100.28759766 394.56729126]
[100.28759766 409.56729126]
[100.28759766 424.56729126]
[100.28759766 439.56729126]
[100.28759766 454.56729126]
[100.28759766 469.56729126]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[23 130]
[24 129]
[25 128]
[28 125]
[29 124]
[34 118]
[35 117]
[36 116]
[37 115]
[39 112]
[40 111]
[41 110]
[55 99]
[56 98]
[57 97]
[58 96]
[61 94]
[62 93]
[63 92]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
