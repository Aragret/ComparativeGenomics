%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:13 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCUAAGAGUAGAGUGCUUAGUUGAACAGGGCCCUGAAGCGCGUACACACCGCCCGUCACCCUxxxxxxxxxxUAUUAAUAAUUUUCAUGAUUUGAGAAGCCUUCGCUUCGAAGCGAAAAGUCCUAAUAGUAGACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[102.79067993 282.91659546]
[102.79067993 267.91659546]
[102.79067993 252.91661072]
[102.79067993 237.91661072]
[102.79067993 222.91661072]
[102.79067993 207.91661072]
[102.79067993 192.91661072]
[102.79067993 177.91661072]
[102.79067993 162.91661072]
[102.79067993 147.91661072]
[89.03784943 141.92831421]
[78.05704498 152.14701843]
[67.07624817 162.36572266]
[56.09544373 172.58444214]
[45.11463928 182.80314636]
[47.95141220 197.96745300]
[42.11825180 212.24952698]
[29.47649956 221.09202576]
[14.06009197 221.67330933]
[0.78834784 213.80792236]
[-6.10376644 200.00566101]
[-4.41700268 184.67079163]
[5.31039953 172.69660950]
[19.97446060 167.90402222]
[34.89593124 171.82234192]
[45.87673569 161.60363770]
[56.85753632 151.38493347]
[67.83834076 141.16621399]
[78.81914520 130.94750977]
[69.12055969 103.75530243]
[81.56161499 83.54647827]
[73.92864990 70.63377380]
[66.29567719 57.72108078]
[58.66270828 44.80838013]
[33.59967422 40.89383316]
[24.09320450 11.05201721]
[11.93987083 2.26017475]
[-0.21346231 -6.53166771]
[-12.36679554 -15.32351017]
[-17.68321991 -15.86284065]
[-21.81855011 -18.18763161]
[-24.28448105 -21.53259468]
[-24.97511482 -25.04973030]
[-36.56416321 -34.57306671]
[-48.15320969 -44.09640503]
[-63.72759628 -46.88012314]
[-68.64839935 -60.93839264]
[-84.22278595 -63.72211075]
[-89.14358521 -77.78038025]
[-100.73263550 -87.30371857]
[-112.32168579 -96.82705688]
[-127.65873718 -93.77600098]
[-141.34384155 -101.34249878]
[-146.91531372 -115.95388794]
[-141.74246216 -130.71112061]
[-128.26777649 -138.64627075]
[-112.85356140 -136.01260376]
[-102.77796173 -124.05367279]
[-102.79834747 -108.41609955]
[-91.20929718 -98.89276886]
[-79.62025452 -89.36943054]
[-64.87479401 -87.26688385]
[-59.12506104 -72.52744293]
[-44.37960434 -70.42489624]
[-38.62987518 -55.68545532]
[-27.04082489 -46.16211700]
[-15.45177650 -36.63877869]
[-3.57495284 -27.47684288]
[8.57838058 -18.68500137]
[20.73171425 -9.89315796]
[32.88504791 -1.10131574]
[40.13935852 -3.00524521]
[33.68883896 -16.54743195]
[27.23832130 -30.08961678]
[17.78507423 -41.73590851]
[19.52935600 -56.63414764]
[31.41715622 -65.78183746]
[46.26508713 -63.65134430]
[55.10105133 -51.53005219]
[52.58558273 -36.74212646]
[53.61678314 -21.77761650]
[54.64798355 -6.81310368]
[61.90229797 -8.71703339]
[68.17169952 -22.34401321]
[74.44110870 -35.97099304]
[75.56834412 -52.88742447]
[92.13572693 -56.48717117]
[100.18110657 -41.56375885]
[88.06808472 -29.70158577]
[81.79868317 -16.07460785]
[75.52927399 -2.44762802]
[82.10423279 20.65657806]
[71.57540894 37.17541122]
[79.20837402 50.08810806]
[86.84134674 63.00080872]
[94.47431946 75.91350555]
[124.49739838 80.82920837]
[133.46470642 116.92604065]
[148.46391296 116.77204132]
[163.46311951 116.61804199]
[178.46232605 116.46405029]
[193.46154785 116.31005096]
[182.40933228 106.16861725]
[179.27381897 91.49999237]
[185.21398926 77.72631073]
[198.03413391 69.93889618]
[212.99539185 71.01629639]
[224.56745911 80.56025696]
[228.47282410 95.04293823]
[223.26791382 109.11094666]
[210.87770081 117.56385040]
[225.70018005 119.86472321]
[240.52265930 122.16559601]
[255.34513855 124.46646881]
[270.16763306 126.76734924]
[284.99011230 129.06822205]
[300.07806396 122.64284515]
[313.02221680 132.71165466]
[310.50671387 148.91673279]
[295.11932373 154.58767700]
[282.68923950 143.89070129]
[267.86676025 141.58982849]
[253.04426575 139.28895569]
[238.22178650 136.98808289]
[223.39930725 134.68721008]
[208.57681274 132.38632202]
[193.61553955 131.30926514]
[178.61633301 131.46325684]
[163.61712646 131.61724854]
[148.61790466 131.77125549]
[133.61869812 131.92524719]
[146.85557556 138.98110962]
[161.85052490 139.37028503]
[174.69569397 147.11634827]
[182.03735352 160.19686890]
[181.95863342 175.19667053]
[174.48010254 188.19941711]
[161.55433655 195.81024170]
[146.55613708 196.04202271]
[133.40136719 188.83422852]
[125.52462769 176.06877136]
[124.98206329 161.08035278]
[117.79067993 147.91661072]
[117.79067993 162.91661072]
[117.79067993 177.91661072]
[117.79067993 192.91661072]
[117.79067993 207.91661072]
[117.79067993 222.91661072]
[117.79067993 237.91661072]
[117.79067993 252.91661072]
[117.79067993 267.91659546]
[117.79067993 282.91659546]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 152]
[2 151]
[3 150]
[4 149]
[5 148]
[6 147]
[7 146]
[8 145]
[9 144]
[10 143]
[11 29]
[12 28]
[13 27]
[14 26]
[15 25]
[31 96]
[32 95]
[33 94]
[34 93]
[36 71]
[37 70]
[38 69]
[39 68]
[43 67]
[44 66]
[45 65]
[47 63]
[49 61]
[50 60]
[51 59]
[83 91]
[84 90]
[85 89]
[98 131]
[99 130]
[100 129]
[101 128]
[102 127]
[111 126]
[112 125]
[113 124]
[114 123]
[115 122]
[116 121]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
