%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:07 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCCCAUGUCGAAGCCCCCAUCGCUGGGUCAAUAGUACUUGCCGCAGUACUCUUAAAACUAGGxxxxxxxxxxUACGACCCCUUAUUUACCGAGAAAGCUCACAAGAACUGCUAACUCAUGCCCCCAUGUCUAACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[79.75300598 268.07925415]
[79.75300598 253.07925415]
[79.75300598 238.07925415]
[79.75300598 223.07925415]
[79.75300598 208.07925415]
[79.75300598 193.07925415]
[79.75300598 178.07925415]
[79.75300598 163.07925415]
[79.75300598 148.07925415]
[79.75300598 133.07925415]
[66.46566772 126.11889648]
[54.13438034 134.65936279]
[41.80309677 143.19981384]
[29.47181320 151.74028015]
[24.15695190 159.24681091]
[16.79851341 160.32643127]
[11.33065033 167.72225952]
[3.95159745 168.65058899]
[-8.71991825 176.67758179]
[-21.39143372 184.70457458]
[-22.24404907 200.19821167]
[-32.06684494 212.21038818]
[-47.08275223 216.12217712]
[-61.51785278 210.42941284]
[-69.82155609 197.32109070]
[-68.80091095 181.83761597]
[-58.84838867 169.93270874]
[-43.79092789 166.18405151]
[-29.41843224 172.03306580]
[-16.74691582 164.00605774]
[-4.07539988 155.97906494]
[8.51303959 147.82240295]
[20.93135452 139.40899658]
[33.26263809 130.86853027]
[45.59392166 122.32807159]
[57.92520523 113.78761292]
[60.97549438 98.35771179]
[68.83992767 86.79695892]
[79.24212646 80.29010010]
[89.76455688 78.94902802]
[98.29553223 81.88980865]
[103.39630127 87.47944641]
[105.54488373 72.63412476]
[107.69345856 57.78880310]
[102.01266479 43.02265549]
[111.49321747 31.53490448]
[113.64179230 16.68958092]
[115.79037476 1.84425867]
[117.93894958 -13.00106430]
[107.21820068 -26.78702354]
[109.70517731 -43.73242188]
[123.38612366 -53.46560287]
[125.22944641 -68.35191345]
[117.91304779 -79.02308655]
[119.79406738 -91.41796875]
[129.31727600 -98.93932343]
[123.63647461 -113.70546722]
[133.11703491 -125.19322205]
[135.26560974 -140.03854370]
[137.41418457 -154.88386536]
[130.17820740 -171.78567505]
[141.49830627 -185.16101074]
[143.34162903 -200.04731750]
[145.18495178 -214.93362427]
[147.02828979 -229.81993103]
[137.55831909 -239.44955444]
[135.41459656 -252.58674622]
[141.16137695 -264.37670898]
[152.48851013 -270.59347534]
[154.63708496 -285.43881226]
[156.78565979 -300.28411865]
[143.30639648 -307.18252563]
[132.79917908 -318.08563232]
[126.40376282 -331.81066895]
[124.81386566 -346.86892700]
[128.20195007 -361.62695312]
[136.20050049 -374.48394775]
[147.94189453 -384.04522705]
[162.15252686 -389.27371216]
[177.29090881 -389.60220337]
[191.71496582 -384.99508667]
[203.86006165 -375.95214844]
[212.40881348 -363.45422363]
[216.43389893 -348.85705566]
[215.49870300 -333.74401855]
[209.70469666 -319.75445557]
[199.68032837 -308.40585327]
[186.51300049 -300.92919922]
[171.63098145 -298.13555908]
[169.48240662 -283.29022217]
[167.33383179 -268.44491577]
[177.96290588 -255.44775391]
[175.89204407 -238.44647217]
[161.91459656 -227.97660828]
[160.07127380 -213.09030151]
[158.22793579 -198.20399475]
[156.38461304 -183.31768799]
[163.58662415 -173.55073547]
[162.13157654 -161.09866333]
[152.25950623 -152.73529053]
[150.11093140 -137.88996887]
[147.96235657 -123.04463959]
[153.79682922 -109.34033203]
[144.16259766 -96.79074097]
[151.55372620 -80.90314484]
[140.11575317 -66.50859070]
[138.27243042 -51.62228012]
[147.55859375 -42.63787079]
[149.99194336 -29.74960327]
[144.45889282 -17.64313889]
[132.78427124 -10.85248470]
[130.63569641 3.99283767]
[128.48712158 18.83815956]
[126.33853912 33.68348312]
[132.17301941 47.38779449]
[122.53878784 59.93738174]
[120.39020538 74.78270721]
[118.24162292 89.62802887]
[125.60786438 102.69472504]
[139.42144775 108.54151154]
[152.64398193 100.42091370]
[168.11177063 101.65679169]
[179.87710571 111.77392578]
[183.41600037 126.88206482]
[177.36766052 141.17182922]
[164.05781555 149.14849854]
[148.60435486 147.74490356]
[136.94944763 137.50073242]
[133.57466125 122.35509491]
[119.76107788 116.50830078]
[113.50905609 120.65103912]
[122.82852173 132.40466309]
[132.14797974 144.15829468]
[141.46743774 155.91191101]
[153.37123108 165.03878784]
[152.85412598 180.02986145]
[140.34971619 188.31478882]
[126.34325409 182.94644165]
[122.57917023 168.42773438]
[115.38778687 155.26399231]
[108.19640350 142.10025024]
[101.00502014 128.93652344]
[94.75300598 133.07925415]
[94.75300598 148.07925415]
[94.75300598 163.07925415]
[94.75300598 178.07925415]
[94.75300598 193.07925415]
[94.75300598 208.07925415]
[94.75300598 223.07925415]
[94.75300598 238.07925415]
[94.75300598 253.07925415]
[94.75300598 268.07925415]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 152]
[2 151]
[3 150]
[4 149]
[5 148]
[6 147]
[7 146]
[8 145]
[9 144]
[10 143]
[11 36]
[12 35]
[13 34]
[14 33]
[16 32]
[18 31]
[19 30]
[20 29]
[42 118]
[43 117]
[44 116]
[46 114]
[47 113]
[48 112]
[49 111]
[52 107]
[53 106]
[56 104]
[58 102]
[59 101]
[60 100]
[62 97]
[63 96]
[64 95]
[65 94]
[69 91]
[70 90]
[71 89]
[119 130]
[120 129]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
