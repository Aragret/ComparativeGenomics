%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:02 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGAUCACCCCCUCCCCAAUAAAGCUAAAACUCACCUGAGUUGUAAAAAACUCCAGUUGACACxxxxxxxxxxACGCCAUAAAACUCUUCACCAAAGAGCCCCUAAAACCCGCCACAUCUACCAUCACCCUCUCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[7.72236252 276.20791626]
[0.26745203 289.22424316]
[-7.18745852 302.24053955]
[-14.64236832 315.25686646]
[-22.09727859 328.27316284]
[-29.55218887 341.28945923]
[-37.00709915 354.30578613]
[-44.46200943 367.32208252]
[-51.91691971 380.33840942]
[-59.37182999 393.35470581]
[-58.77391434 409.74295044]
[-72.80944824 418.22445679]
[-87.03987122 410.07418823]
[-86.82614899 393.67642212]
[-72.38813782 385.89981079]
[-64.93322754 372.88348389]
[-57.47832108 359.86718750]
[-50.02341080 346.85086060]
[-42.56850052 333.83456421]
[-35.11359024 320.81826782]
[-27.65867805 307.80194092]
[-20.20376778 294.78564453]
[-12.74885750 281.76931763]
[-5.29394722 268.75302124]
[-22.76394463 256.50369263]
[-38.82136536 242.45358276]
[-53.28144073 226.76432800]
[-65.97778320 209.61647034]
[-76.76431274 191.20730591]
[-85.51691437 171.74867249]
[-92.13486481 151.46446228]
[-96.54202271 130.58807373]
[-98.68767548 109.35972595]
[-98.54713440 88.02368164]
[-96.12201691 66.82544708]
[-91.44022369 46.00893021]
[-84.55563354 25.81365967]
[-75.54746246 6.47201347]
[-64.51935577 -11.79345608]
[-76.59934235 -20.68580627]
[-88.67933655 -29.57815552]
[-104.37991333 -31.52812004]
[-110.04274750 -45.30424500]
[-122.12273407 -54.19659424]
[-134.20272827 -63.08894348]
[-146.37455750 -71.85514832]
[-158.63693237 -80.49426270]
[-170.89929199 -89.13338470]
[-183.16166687 -97.77249908]
[-198.68894958 -94.82648468]
[-211.70433044 -103.79171753]
[-214.48600769 -119.34928131]
[-205.38366699 -132.26914978]
[-189.79757690 -134.88619995]
[-176.97465515 -125.64776611]
[-174.52255249 -110.03486633]
[-162.26017761 -101.39575195]
[-149.99781799 -92.75663757]
[-137.73544312 -84.11751556]
[-130.40861511 -82.82790375]
[-125.31037140 -75.16893005]
[-113.23038483 -66.27658081]
[-101.15039825 -57.38423157]
[-86.31385803 -56.07030869]
[-79.78698730 -41.65814590]
[-67.70699310 -32.76579285]
[-55.62700653 -23.87344551]
[-46.10409927 -34.97402573]
[-35.79126358 -45.34486008]
[-24.74426270 -54.92987061]
[-13.02281857 -63.67723846]
[-0.69030571 -71.53967285]
[12.18659878 -78.47465515]
[25.53827477 -84.44470215]
[39.29253769 -89.41752625]
[53.37501907 -93.36624908]
[67.70957947 -96.26952362]
[82.21872711 -98.11164093]
[96.82400513 -98.88265228]
[111.44646454 -98.57838440]
[126.00702667 -97.20048523]
[140.42698669 -94.75640106]
[154.62837219 -91.25934601]
[168.53439331 -86.72823334]
[182.06988525 -81.18755341]
[195.16166687 -74.66726685]
[207.73893738 -67.20262146]
[219.73371887 -58.83398056]
[231.08113098 -49.60659027]
[241.71984863 -39.57033920]
[251.59234619 -28.77948380]
[260.64523315 -17.29237175]
[273.08468628 -25.67451477]
[285.52413940 -34.05665970]
[297.96356201 -42.43880081]
[310.40301514 -50.82094574]
[314.87042236 -66.22943878]
[329.75698853 -72.21025085]
[343.64297485 -64.17541504]
[345.87628174 -48.28857040]
[334.74368286 -36.73674011]
[318.78515625 -38.38150406]
[306.34570312 -29.99936104]
[293.90628052 -21.61721802]
[281.46682739 -13.23507500]
[269.02740479 -4.85293198]
[274.69824219 4.89522696]
[279.80752563 14.94911385]
[284.33877563 25.27640724]
[288.27743530 35.84391022]
[291.61087036 46.61765289]
[294.32830811 57.56299973]
[296.42108154 68.64476776]
[297.88244629 79.82733154]
[298.70767212 91.07473755]
[298.89410400 102.35084534]
[298.44119263 113.61938477]
[297.35037231 124.84415436]
[295.62512207 135.98904419]
[293.27099609 147.01824951]
[290.29559326 157.89631653]
[286.70846558 168.58825684]
[282.52111816 179.05972290]
[277.74703979 189.27702332]
[272.40155029 199.20733643]
[266.50189209 208.81874084]
[260.06695557 218.08033752]
[253.11747742 226.96232605]
[245.67578125 235.43620300]
[237.76579285 243.47468567]
[229.41291809 251.05194092]
[220.64404297 258.14364624]
[211.48735046 264.72695923]
[201.97224426 270.78073120]
[192.12934875 276.28549194]
[181.99029541 281.22357178]
[171.58766174 285.57910156]
[160.95489502 289.33804321]
[150.12619019 292.48834229]
[139.13635254 295.01983643]
[128.02069092 296.92443848]
[116.81496429 298.19598389]
[105.55517578 298.83041382]
[94.27753448 298.82568359]
[83.01828766 298.18179321]
[71.81362915 296.90078735]
[60.69958496 294.98684692]
[49.71187210 292.44610596]
[38.88582230 289.28668213]
[28.25622749 285.51879883]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 24]
[2 23]
[3 22]
[4 21]
[5 20]
[6 19]
[7 18]
[8 17]
[9 16]
[10 15]
[39 67]
[40 66]
[41 65]
[43 63]
[44 62]
[45 61]
[46 59]
[47 58]
[48 57]
[49 56]
[92 106]
[93 105]
[94 104]
[95 103]
[96 102]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
