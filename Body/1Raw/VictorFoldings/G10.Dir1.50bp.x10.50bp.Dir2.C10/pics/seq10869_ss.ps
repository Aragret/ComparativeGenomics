%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:57 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGGGCAAAUCAGCCCAAUUAGGUCUCCACCCCUGACUCCCCUCAGCCAUAGAAGGCCCCACCxxxxxxxxxxUAAACUAAUACACCAGUCUUGUAAACCGGAGAUGAAAACCUUUUUCCAAGGACAAAUCAGCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[83.95493317 252.21461487]
[83.64287567 237.21786499]
[83.33081818 222.22111511]
[83.01876068 207.22434998]
[82.70670319 192.22760010]
[82.39465332 177.23085022]
[82.08259583 162.23410034]
[81.77053833 147.23733521]
[81.45848083 132.24058533]
[67.28192139 127.33903503]
[57.77356339 138.94038391]
[48.26520538 150.54171753]
[38.75684738 162.14306641]
[40.56538010 177.84353638]
[30.67698097 190.17216492]
[14.95826817 191.81460571]
[2.73487163 181.79640198]
[1.25871634 166.06120300]
[11.40557957 153.94441223]
[27.15550613 152.63470459]
[36.66386414 141.03335571]
[46.17222214 129.43202209]
[55.68058014 117.83068085]
[57.94944763 104.60817719]
[63.66265106 93.97903442]
[71.59149170 86.71041107]
[80.37858582 83.10357666]
[88.69574738 82.98922729]
[95.39278412 85.77256012]
[99.62245178 90.52220154]
[97.13732910 75.72949219]
[94.65221405 60.93678665]
[92.16709137 46.14408112]
[89.68197632 31.35137177]
[87.19685364 16.55866432]
[73.91010284 13.78881550]
[62.37537384 6.72927427]
[53.92465591 -3.76617908]
[49.52077103 -16.44930840]
[49.64774704 -29.82583427]
[35.63103485 -35.16734695]
[21.61432076 -40.50885773]
[7.59760761 -45.85037231]
[-6.72037268 -39.15925980]
[-21.54732704 -44.63072586]
[-28.08668900 -59.01865005]
[-22.45876694 -73.78692627]
[-8.00251198 -80.17380524]
[6.70544004 -74.39006042]
[12.93912029 -59.86708450]
[26.95583344 -54.52557373]
[40.97254562 -49.18405914]
[54.98925781 -43.84254837]
[61.18113708 -51.44799805]
[69.07289124 -57.27057266]
[78.16662598 -60.94292831]
[87.88861084 -62.23336411]
[90.68093109 -76.97116852]
[85.64785004 -91.97045898]
[95.61914825 -103.03492737]
[98.41147614 -117.77272797]
[101.20379639 -132.51054382]
[103.99612427 -147.24833679]
[106.78844452 -161.98614502]
[92.80068207 -167.53042603]
[80.11510468 -175.62193298]
[69.19027710 -185.96817017]
[60.42113876 -198.19514465]
[54.12468338 -211.86083984]
[50.52852249 -226.47125244]
[49.76265717 -241.49821472]
[51.85477066 -256.39852905]
[56.72923660 -270.63357544]
[64.20984650 -283.68872070]
[74.02617645 -295.09207153]
[85.82337952 -304.43136597]
[99.17498779 -311.36901855]
[113.59835052 -315.65423584]
[128.57206726 -317.13211060]
[143.55487061 -315.74920654]
[158.00511169 -311.55551147]
[171.40043640 -304.70266724]
[183.25660706 -295.43835449]
[193.14505005 -284.09747314]
[200.70828247 -271.09002686]
[205.67289734 -256.88616943]
[207.85945129 -241.99942017]
[207.18887329 -226.96789551]
[203.68542480 -212.33497620]
[197.47573853 -198.62963867]
[188.78428650 -186.34732056]
[177.92529297 -175.93200684]
[165.29125977 -167.76023865]
[151.33894348 -162.12738037]
[136.57266235 -159.23709106]
[121.52625275 -159.19383240]
[118.73392487 -144.45602417]
[115.94160461 -129.71821594]
[113.14927673 -114.98040771]
[110.35695648 -100.24259949]
[115.58976746 -86.29746246]
[105.41873932 -74.17884827]
[102.62641144 -59.44104004]
[117.86093140 -48.71200943]
[126.43412018 -32.09148788]
[126.34455872 -13.32232475]
[117.54964447 3.33589244]
[101.98956299 14.07354641]
[104.47467804 28.86625290]
[106.95980072 43.65896225]
[109.44491577 58.45166779]
[111.93003845 73.24437714]
[114.41515350 88.03707886]
[124.39788055 99.23284912]
[138.81010437 103.39073944]
[153.22232056 107.54862213]
[167.63453674 111.70651245]
[182.04675293 115.86439514]
[198.94120789 114.44547272]
[204.98153687 130.28691101]
[191.43132019 140.47651672]
[177.88885498 130.27661133]
[163.47663879 126.11872864]
[149.06442261 121.96083832]
[134.65220642 117.80295563]
[120.23999786 113.64506531]
[114.29380798 118.21593475]
[124.94831848 128.77439880]
[135.60282898 139.33288574]
[146.25733948 149.89135742]
[160.24041748 155.32029724]
[167.36820984 168.51858521]
[164.23971558 183.18870544]
[152.34770203 192.33090210]
[137.36636353 191.58303833]
[126.44395447 181.30192566]
[124.79247284 166.39151001]
[117.32878876 153.38023376]
[109.86510468 140.36894226]
[102.40142822 127.35766602]
[96.45523834 131.92852783]
[96.76728821 146.92529297]
[97.07934570 161.92204285]
[97.39140320 176.91879272]
[97.70346069 191.91554260]
[98.01551819 206.91230774]
[98.32757568 221.90905762]
[98.63962555 236.90580750]
[98.95168304 251.90255737]
[101.54268646 271.11029053]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 149]
[2 148]
[3 147]
[4 146]
[5 145]
[6 144]
[7 143]
[8 142]
[9 141]
[10 23]
[11 22]
[12 21]
[13 20]
[30 113]
[31 112]
[32 111]
[33 110]
[34 109]
[35 108]
[40 53]
[41 52]
[42 51]
[43 50]
[57 103]
[58 102]
[60 100]
[61 99]
[62 98]
[63 97]
[64 96]
[114 126]
[115 125]
[116 124]
[117 123]
[118 122]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
