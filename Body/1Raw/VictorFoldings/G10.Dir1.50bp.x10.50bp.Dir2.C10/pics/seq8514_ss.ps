%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:28 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGUAGCCAUGGCCAUCCCCUUAUGAGCGGGCACAGUGAUUAUAGGCUUUCGCUCUAAGAUUAAxxxxxxxxxxUAUCCCCAUACUAGUUAUUAUCGAAACCAUCAGCCUACUCAUUCAACCAAUAGCCCUGGCCCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[101.97522736 481.03921509]
[101.97522736 466.03921509]
[101.97522736 451.03921509]
[101.97522736 436.03921509]
[101.97522736 421.03921509]
[101.97522736 406.03921509]
[101.97522736 391.03921509]
[101.97522736 376.03921509]
[101.97522736 361.03921509]
[101.97522736 346.03921509]
[84.08449554 339.65878296]
[69.91148376 326.96618652]
[61.57659531 309.82861328]
[60.33879852 290.78060913]
[66.40548706 272.64916992]
[78.89820099 258.13430786]
[95.97971344 249.40681458]
[94.13639069 234.52050781]
[92.29306793 219.63420105]
[83.46173859 231.75886536]
[69.23991394 236.52746582]
[54.88455582 232.17732239]
[45.70200348 220.31643677]
[45.08650589 205.32907104]
[53.26557922 192.75517273]
[67.21589661 187.24258423]
[81.78084564 190.82897949]
[91.57619476 202.18768311]
[92.19202423 187.20033264]
[92.50000000 172.20350647]
[92.50000000 157.20350647]
[92.50000000 142.20350647]
[92.50000000 127.20349884]
[92.50000000 112.20349884]
[85.67605591 100.00000000]
[92.50000000 87.79650116]
[92.50000000 72.79650116]
[92.50000000 57.79650116]
[92.50000000 42.79650116]
[90.11171722 39.00232315]
[89.18818665 35.04370880]
[89.59565735 31.41318321]
[91.05069733 28.50593376]
[93.16638947 26.57853508]
[94.39700317 11.62910080]
[95.62761688 -3.32033420]
[96.85823059 -18.26976967]
[94.78927612 -22.24709129]
[94.19362640 -26.26813126]
[94.89757538 -29.85298729]
[96.58621979 -32.63106155]
[98.85290527 -34.37839127]
[101.30583954 -49.17647171]
[99.61666107 -58.21762466]
[103.96404266 -64.25189972]
[106.72028351 -78.99649811]
[109.47652435 -93.74109650]
[112.23277283 -108.48569489]
[114.98901367 -123.23028564]
[100.74742126 -128.01811218]
[87.31079865 -134.74143982]
[74.94068909 -143.26943970]
[63.87788773 -153.43606567]
[54.33772659 -165.04345703]
[46.50591660 -177.86566162]
[40.53489685 -191.65309143]
[36.54090118 -206.13735962]
[34.60167313 -221.03652954]
[34.75496292 -236.06060791]
[36.99777985 -250.91711426]
[41.28646851 -265.31689453]
[47.53755569 -278.97961426]
[55.62935257 -291.63934326]
[65.40435791 -303.04965210]
[76.67228699 -312.98846436]
[89.21382141 -321.26229858]
[102.78482819 -327.71008301]
[117.12113953 -332.20632935]
[131.94371033 -334.66351318]
[146.96398926 -335.03378296]
[161.88963318 -333.30999756]
[176.43008423 -329.52563477]
[190.30232239 -323.75439453]
[203.23631287 -316.10861206]
[214.98028564 -306.73712158]
[225.30566406 -295.82232666]
[234.01144409 -283.57669067]
[240.92817688 -270.23858643]
[245.92121887 -256.06762695]
[248.89337158 -241.33967590]
[249.78677368 -226.34141541]
[248.58407593 -211.36477661]
[245.30863953 -196.70129395]
[240.02426147 -182.63639832]
[232.83378601 -169.44386292]
[223.87716675 -157.38047791]
[213.32876587 -146.68106079]
[201.39390564 -137.55389404]
[188.30490112 -130.17663574]
[174.31652832 -124.69287109]
[159.70108032 -121.20935822]
[144.74305725 -119.79389954]
[129.73361206 -120.47404480]
[126.97736359 -105.72944641]
[124.22112274 -90.98485565]
[121.46488190 -76.24025726]
[118.70864105 -61.49565887]
[116.10391235 -46.72354126]
[113.65098572 -31.92546463]
[111.80766296 -17.03915596]
[110.57704926 -2.08972168]
[109.34643555 12.85971260]
[108.11582184 27.80914688]
[107.50000000 42.79650116]
[107.50000000 57.79650116]
[107.50000000 72.79650116]
[107.50000000 87.79650116]
[114.32394409 100.00000000]
[107.50000000 112.20349884]
[107.50000000 127.20349884]
[107.50000000 142.20350647]
[107.50000000 157.20350647]
[107.50000000 172.20350647]
[110.51473236 178.19966125]
[110.06902313 183.94328308]
[107.17937469 187.81616211]
[106.56355286 202.80351257]
[107.17937469 217.79086304]
[109.02269745 232.67716980]
[110.86602783 247.56349182]
[122.06321716 249.20578003]
[132.59118652 253.33029175]
[141.90779114 259.71981812]
[149.53439331 268.04061890]
[155.08038330 277.85995483]
[158.26319885 288.66842651]
[158.92277527 299.90652466]
[157.02949524 310.99353027]
[152.68557739 321.35760498]
[146.11952209 330.46511841]
[137.67407227 337.84835815]
[127.78841400 343.12930298]
[116.97522736 346.03921509]
[116.97522736 361.03921509]
[116.97522736 376.03921509]
[116.97522736 391.03921509]
[116.97522736 406.03921509]
[116.97522736 421.03921509]
[116.97522736 436.03921509]
[116.97522736 451.03921509]
[116.97522736 466.03921509]
[116.97522736 481.03921509]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 152]
[2 151]
[3 150]
[4 149]
[5 148]
[6 147]
[7 146]
[8 145]
[9 144]
[10 143]
[17 130]
[18 129]
[19 128]
[28 127]
[29 126]
[30 123]
[31 122]
[32 121]
[33 120]
[34 119]
[36 117]
[37 116]
[38 115]
[39 114]
[44 113]
[45 112]
[46 111]
[47 110]
[52 109]
[53 108]
[55 107]
[56 106]
[57 105]
[58 104]
[59 103]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
