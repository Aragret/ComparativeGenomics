%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:59 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCUUCAACAUCGAAUACGCCGCAGGCCCCUUCGCCCUAUUCUUCAUAGCCGAAUACACAAAxxxxxxxxxxUGAACAAGAUAUUCGAAAAAUAGGAGGACUACUCAAAACCAUACCUCUCACUUCAACCUCCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[92.50000000 246.86193848]
[92.50000000 231.86193848]
[92.50000000 216.86193848]
[92.50000000 201.86193848]
[92.50000000 186.86193848]
[92.50000000 171.86193848]
[92.50000000 156.86193848]
[92.50000000 141.86193848]
[92.50000000 126.86193848]
[92.50000000 111.86193848]
[86.86804199 97.95938110]
[76.42823029 87.18857574]
[63.16331482 92.16381073]
[49.04718781 91.69671631]
[36.21925354 85.89125824]
[26.61101532 75.65794373]
[21.65524864 62.57120132]
[22.07242584 48.62717819]
[27.76615143 35.93929672]
[17.55267143 24.95363045]
[7.33919096 13.96796608]
[-2.87428904 2.98230147]
[-13.08776855 -8.00336361]
[-23.30124855 -18.98902893]
[-33.51472855 -29.97469330]
[-46.88301086 -29.73692703]
[-57.32792282 -37.37173843]
[-71.74013519 -33.21385193]
[-86.15235138 -29.05596352]
[-99.69482422 -18.85606384]
[-113.24503326 -29.04567337]
[-107.20471191 -44.88710022]
[-90.31024170 -43.46817780]
[-75.89802551 -47.62606812]
[-61.48580933 -51.78395462]
[-60.75251770 -55.44488525]
[-59.35066986 -58.90536880]
[-57.32924652 -62.04447937]
[-64.78415680 -75.06079102]
[-75.33544922 -85.72241211]
[-88.27350616 -93.31232452]
[-101.21156311 -100.90222931]
[-113.91008759 -98.41201019]
[-124.54638672 -105.05190277]
[-127.67739105 -116.77811432]
[-140.45475769 -124.63554382]
[-153.23210144 -132.49296570]
[-166.00946045 -140.35038757]
[-181.88575745 -138.04319763]
[-193.48925781 -149.12193298]
[-191.91876221 -165.08793640]
[-178.37901306 -173.69345093]
[-163.25656128 -168.33706665]
[-158.15203857 -153.12774658]
[-145.37467957 -145.27032471]
[-132.59732056 -137.41290283]
[-119.81996918 -129.55546570]
[-102.30537415 -130.04438782]
[-93.62165070 -113.84028625]
[-80.68359375 -106.25038147]
[-67.74553680 -98.66046906]
[-74.84022522 -111.87657166]
[-78.75938416 -126.35552979]
[-79.29957581 -141.34580994]
[-76.43277740 -156.06930542]
[-70.30778503 -169.76179504]
[-61.24252319 -181.71257019]
[-49.70752716 -191.30131531]
[-36.30153275 -198.03030396]
[-21.72038651 -201.55026245]
[-6.72093487 -201.67851257]
[7.91826534 -198.40837097]
[21.43735504 -191.90957642]
[33.13461304 -182.51947021]
[42.40288925 -170.72544861]
[48.76110458 -157.13967896]
[51.87923050 -142.46734619]
[51.59542084 -127.47003174]
[47.92440414 -112.92618561]
[41.05672836 -99.59070587]
[31.34886360 -88.15578461]
[19.30470657 -79.21496582]
[5.54941702 -73.23232269]
[-9.20302582 -70.51838684]
[-24.18688583 -71.21403503]
[-38.62441635 -75.28315735]
[-51.76784897 -82.51570129]
[-44.31293869 -69.49938965]
[-24.83215332 -61.73785019]
[-22.52906418 -40.18817139]
[-12.31558418 -29.20250702]
[-2.10210419 -18.21684265]
[8.11137581 -7.23117828]
[18.32485580 3.75448632]
[28.53833580 14.74015045]
[38.75181580 25.72581482]
[53.89258194 20.71010017]
[69.76466370 22.79156876]
[83.19725800 31.60536575]
[91.48474121 45.43663025]
[92.93158722 61.55396271]
[87.19903564 76.74876404]
[97.63885498 87.51956940]
[131.08493042 76.73033142]
[146.01924133 78.13263702]
[160.95355225 79.53494263]
[175.88786316 80.93724060]
[182.35881042 67.22949219]
[193.13003540 56.56381607]
[206.90084839 50.22816086]
[222.00836182 48.98757935]
[236.62825012 52.99187851]
[248.99511719 61.75751877]
[257.61560059 74.22601318]
[261.44869995 88.89171600]
[260.03158569 103.98368835]
[253.53538513 117.67949677]
[242.74452209 128.32530212]
[228.96206665 134.63557434]
[213.85229492 135.84831238]
[199.23980713 131.81707764]
[186.88911438 123.02865601]
[178.29164124 110.54429626]
[174.48554993 95.87155151]
[159.55123901 94.46924591]
[144.61694336 93.06694031]
[129.68263245 91.66464233]
[124.13697052 96.71396637]
[136.57075500 105.10449219]
[149.00454712 113.49501801]
[163.65869141 116.69754028]
[173.66780090 127.86972809]
[175.24655151 142.78642273]
[167.79791260 155.80630493]
[154.13883972 162.00546265]
[139.43499756 159.03945923]
[129.24719238 148.02996826]
[127.42842102 133.14009094]
[120.23703766 119.97634888]
[113.04565430 106.81261444]
[107.50000000 111.86193848]
[107.50000000 126.86193848]
[107.50000000 141.86193848]
[107.50000000 156.86193848]
[107.50000000 171.86193848]
[107.50000000 186.86193848]
[107.50000000 201.86193848]
[107.50000000 216.86193848]
[107.50000000 231.86193848]
[107.50000000 246.86193848]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[11 103]
[12 102]
[19 96]
[20 95]
[21 94]
[22 93]
[23 92]
[24 91]
[25 90]
[27 35]
[28 34]
[29 33]
[38 88]
[39 87]
[40 61]
[41 60]
[42 59]
[45 57]
[46 56]
[47 55]
[48 54]
[104 127]
[105 126]
[106 125]
[107 124]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
