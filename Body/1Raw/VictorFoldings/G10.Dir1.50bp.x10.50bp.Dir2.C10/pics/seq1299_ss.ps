%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:25 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGUUGACACAAAAUAGACUACGAAAGUGGCUUUAACAUAUCUGAACACACAAUAGCUAAGACxxxxxxxxxxUAACAUGGUAAGUGUACUGGAAAGUGCACUUGGACGAACCAGAGUGUAGCUUAACACAAACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[118.91279602 262.66461182]
[118.91279602 247.66461182]
[118.91279602 232.66461182]
[118.91279602 217.66461182]
[118.91279602 202.66461182]
[118.91279602 187.66461182]
[118.91279602 172.66461182]
[118.91279602 157.66461182]
[118.91279602 142.66461182]
[118.91279602 127.66460419]
[112.44376373 123.86965179]
[104.85364532 136.80758667]
[91.91584015 129.21723938]
[99.50570679 116.27973938]
[93.03668213 112.48478699]
[79.94352722 119.80389404]
[66.85037231 127.12300110]
[69.29979706 142.08215332]
[66.48213196 156.97631836]
[58.73760986 170.00698853]
[47.00142670 179.60061646]
[32.69078064 184.59873962]
[17.53375435 184.39781189]
[3.36063194 179.02209473]
[-8.11711311 169.12071228]
[-15.51348782 155.88934326]
[-17.93534470 140.92570496]
[-15.09022999 126.03674316]
[-7.32170820 113.02037048]
[4.43213558 103.44838715]
[18.75196648 98.47663879]
[33.90859604 98.70550537]
[48.07178879 104.10733795]
[59.53126907 114.02984619]
[72.62442017 106.71073914]
[85.71757507 99.39163208]
[95.34609985 87.88983154]
[100.24765015 73.71327209]
[105.14920044 59.53671265]
[93.07071686 68.43109894]
[78.44345856 71.75424194]
[63.70757675 68.95175934]
[51.32135773 60.49116898]
[43.35109711 47.78388977]
[41.12641144 32.94978333]
[45.01842499 18.46350479]
[54.37787247 6.74169731]
[67.64337921 -0.26018253]
[82.60196686 -1.37406301]
[96.75820160 3.58587599]
[107.75051117 13.79220581]
[113.74512482 27.54228020]
[113.74230194 42.54088974]
[122.25339508 30.18931770]
[130.76448059 17.83774567]
[139.27557373 5.48617268]
[140.73468018 -10.26760674]
[154.32740784 -16.35753822]
[140.59848022 -10.31463528]
[125.90369415 -7.30411911]
[110.90451813 -7.46150541]
[96.27613831 -10.77971077]
[82.67704010 -17.10936546]
[70.71938324 -26.16554642]
[60.94143295 -37.54059219]
[53.78333664 -50.72246170]
[49.56731796 -65.11777496]
[48.48315048 -80.07854462]
[50.57964706 -94.93131256]
[55.76242828 -109.00749207]
[63.79819870 -121.67344666]
[74.32522583 -132.35902405]
[86.86965179 -140.58323669]
[100.86678314 -145.97584534]
[115.68655396 -148.29412842]
[130.66184998 -147.43371582]
[145.11859131 -143.43334961]
[158.40597534 -136.47309875]
[169.92591858 -126.86627197]
[179.15982056 -115.04531860]
[185.69206238 -101.54235840]
[189.22856140 -86.96520996]
[189.61013794 -71.97006226]
[186.81961060 -57.23191833]
[180.98260498 -43.41419983]
[172.36035156 -31.13718796]
[186.14273071 -37.05715179]
[199.92512512 -42.97711182]
[213.70750427 -48.89707565]
[227.09378052 -55.66519165]
[240.03184509 -63.25510025]
[252.96989441 -70.84500885]
[265.90795898 -78.43491364]
[278.84600830 -86.02482605]
[291.78405762 -93.61473083]
[304.72210693 -101.20464325]
[317.66018677 -108.79454803]
[330.59823608 -116.38446045]
[338.22424316 -130.90258789]
[354.61889648 -131.28686523]
[362.91674805 -117.14199829]
[354.58172607 -103.01899719]
[338.18814087 -103.44640350]
[325.25009155 -95.85649109]
[312.31204224 -88.26658630]
[299.37396240 -80.67667389]
[286.43591309 -73.08676910]
[273.49786377 -65.49685669]
[260.55981445 -57.90695190]
[247.62174988 -50.31704330]
[234.68370056 -42.72713470]
[248.74452209 -37.50284576]
[255.16737366 -23.94752121]
[250.30567932 -9.75724983]
[236.91964722 -2.98861599]
[222.60928345 -7.48453903]
[215.49932861 -20.69244003]
[219.62745667 -35.11469650]
[205.84507751 -29.19473267]
[192.06269836 -23.27476883]
[178.28031921 -17.35480690]
[166.67898560 -7.84644747]
[165.82864380 7.02386475]
[151.62715149 13.99726295]
[143.11605835 26.34883499]
[134.60496521 38.70040894]
[126.09387970 51.05197906]
[119.32575989 64.43826294]
[114.42420959 78.61482239]
[109.52265930 92.79138184]
[120.62078094 82.70021057]
[133.41177368 74.86499023]
[148.33041382 73.30492401]
[162.46563721 78.32442474]
[173.05921936 88.94403839]
[178.04400635 103.09154510]
[176.44732666 118.00631714]
[168.58073425 130.77803040]
[155.97924805 138.91453552]
[141.10417175 140.82833862]
[133.91279602 127.66460419]
[133.91279602 142.66461182]
[133.91279602 157.66461182]
[133.91279602 172.66461182]
[133.91279602 187.66461182]
[133.91279602 202.66461182]
[133.91279602 217.66461182]
[133.91279602 232.66461182]
[133.91279602 247.66461182]
[133.91279602 262.66461182]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[15 36]
[16 35]
[17 34]
[37 130]
[38 129]
[39 128]
[53 127]
[54 126]
[55 125]
[56 124]
[58 122]
[86 121]
[87 120]
[88 119]
[89 118]
[90 111]
[91 110]
[92 109]
[93 108]
[94 107]
[95 106]
[96 105]
[97 104]
[98 103]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
