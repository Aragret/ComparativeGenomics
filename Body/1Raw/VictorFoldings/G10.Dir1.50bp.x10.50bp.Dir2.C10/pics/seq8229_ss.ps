%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:11 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGGCCGCAGUACUGAUCAUUCUAUUUCCCCCUCUAUUGAUCCCCACCUCCAAAUAUCUCAUCAxxxxxxxxxxGACUCCCUAAAGCCCAUGUCGAAGCCCCCAUCGCUGGGUCAAUAGUACUUGCCGCAGUACUCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[103.80500031 419.76672363]
[106.39077759 400.55828857]
[106.69875336 385.56143188]
[107.00672913 370.56460571]
[107.31471252 355.56777954]
[107.62268829 340.57092285]
[107.93066406 325.57409668]
[108.23863983 310.57723999]
[108.54662323 295.58041382]
[108.85459900 280.58358765]
[109.16257477 265.58673096]
[90.18327332 256.18936157]
[78.38516235 238.51693726]
[76.97380829 217.24455261]
[86.39574432 198.04197693]
[104.20072937 186.06242371]
[102.05215454 171.21710205]
[99.90357208 156.37178040]
[97.75499725 141.52645874]
[95.60641479 126.68112946]
[93.45783997 111.83580780]
[87.64446259 125.66349030]
[78.37529755 137.45681763]
[66.31281281 146.37289429]
[52.31914139 151.77449036]
[37.39443207 153.27552795]
[22.60538292 150.76872253]
[9.00899124 144.43325806]
[-2.42298818 134.72193909]
[-10.87349033 122.32883453]
[-15.73854446 108.13970947]
[-16.67043686 93.16868591]
[-13.60256290 78.48576355]
[-6.75418901 65.14035797]
[3.38522005 54.08629608]
[16.09098244 46.11361694]
[30.45499802 41.79214859]
[45.45064163 41.43075562]
[60.00615692 45.05525970]
[73.08123016 52.40662003]
[83.74136353 62.95941544]
[91.22466278 75.95942688]
[94.99575043 90.47310638]
[99.24859619 76.08862305]
[103.50144196 61.70413971]
[107.75428772 47.31966019]
[112.00713348 32.93518066]
[110.81616211 26.33031845]
[112.87203217 20.94874763]
[116.74114990 18.05407906]
[121.58097076 3.85632682]
[126.42078400 -10.34142590]
[131.26060486 -24.53917885]
[117.59423828 -30.75184059]
[104.60263062 -38.27414322]
[92.41091156 -47.03363800]
[81.13648987 -56.94596481]
[70.88795471 -67.91566467]
[61.76399612 -79.83708191]
[53.85248947 -92.59540558]
[47.22963715 -106.06777191]
[41.95920944 -120.12442017]
[38.09197617 -134.62997437]
[35.66517258 -149.44474792]
[34.70217896 -164.42605591]
[35.21226501 -179.42961121]
[37.19051743 -194.31091309]
[40.61788559 -208.92665100]
[45.46136093 -223.13607788]
[51.67429733 -236.80232239]
[59.19685745 -249.79377747]
[67.95659637 -261.98532104]
[77.86914825 -273.25955200]
[88.83905029 -283.50787354]
[100.76065063 -292.63159180]
[113.51913452 -300.54281616]
[126.99163055 -307.16540527]
[141.04838562 -312.43554688]
[155.55403137 -316.30249023]
[170.36885071 -318.72900391]
[185.35015869 -319.69171143]
[200.35371399 -319.18130493]
[215.23497009 -317.20275879]
[229.85064697 -313.77511597]
[244.05996704 -308.93133545]
[257.72610474 -302.71813965]
[270.71740723 -295.19531250]
[282.90875244 -286.43533325]
[294.18280029 -276.52255249]
[304.43087769 -265.55245972]
[313.55438232 -253.63066101]
[321.46536255 -240.87202454]
[328.08767700 -227.39939880]
[333.35754395 -213.34252930]
[337.22418213 -198.83682251]
[339.65039062 -184.02195740]
[340.61279297 -169.04060364]
[340.10211182 -154.03707886]
[338.12326050 -139.15585327]
[334.69531250 -124.54024506]
[329.85125732 -110.33101654]
[323.63778687 -96.66502380]
[316.11471558 -83.67387390]
[307.35449219 -71.48267365]
[297.44146729 -60.20885086]
[286.47116089 -49.96096802]
[274.54919434 -40.83772659]
[261.79040527 -32.92699051]
[248.31764221 -26.30494308]
[234.26066589 -21.03536224]
[219.75488281 -17.16899681]
[204.93995667 -14.74308395]
[189.95860291 -13.78098679]
[174.95507812 -14.29197121]
[160.07389832 -16.27111626]
[145.45835876 -19.69936180]
[140.61854553 -5.50160933]
[135.77871704 8.69614315]
[130.93890381 22.89389610]
[126.39161682 37.18802643]
[122.13877106 51.57250595]
[117.88592529 65.95698547]
[113.63307953 80.34146881]
[109.38022614 94.72595215]
[108.30316162 109.68723297]
[110.45173645 124.53255463]
[112.60031891 139.37786865]
[114.74889374 154.22320557]
[116.89747620 169.06852722]
[119.04605103 183.91384888]
[128.31980896 185.37336731]
[137.01904297 188.87112427]
[144.70252991 194.22398376]
[150.98187256 201.15489197]
[155.54110718 209.30720520]
[158.15257263 218.26298523]
[158.68832397 227.56449890]
[157.12637329 236.73756409]
[153.55152893 245.31576538]
[148.15080261 252.86408997]
[141.20364380 259.00109863]
[133.06750488 263.41809082]
[124.15941620 265.89471436]
[123.85143280 280.89154053]
[123.54345703 295.88839722]
[123.23548126 310.88522339]
[122.92750549 325.88208008]
[122.61952972 340.87890625]
[122.31154633 355.87573242]
[122.00357056 370.87258911]
[121.69559479 385.86941528]
[121.38761902 400.86627197]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 152]
[3 151]
[4 150]
[5 149]
[6 148]
[7 147]
[8 146]
[9 145]
[10 144]
[11 143]
[16 130]
[17 129]
[18 128]
[19 127]
[20 126]
[21 125]
[43 124]
[44 123]
[45 122]
[46 121]
[47 120]
[50 119]
[51 118]
[52 117]
[53 116]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
