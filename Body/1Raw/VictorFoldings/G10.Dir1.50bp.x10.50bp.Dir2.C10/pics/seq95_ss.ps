%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:46 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGGCCUCAUCCUAUUAUUUAUCGCACCUACGUUCAAUAUUACAGGCGAACAUACUUACUAAAxxxxxxxxxxCGGCUUUUUGCCCAAAUGGGCCAUUAUCGAAGAAUUCACAAAAAACAAUAGCCUCAUCAUCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[92.50000000 247.78161621]
[92.50000000 232.78161621]
[92.50000000 217.78161621]
[92.50000000 202.78161621]
[92.50000000 187.78161621]
[92.50000000 172.78161621]
[92.50000000 157.78161621]
[92.50000000 142.78161621]
[92.50000000 127.78160858]
[92.50000000 112.78160858]
[84.24771118 100.25564575]
[70.46533203 94.33568573]
[56.68294907 88.41571808]
[47.57192612 100.41883850]
[35.85993576 109.88676453]
[22.23049927 116.27250671]
[7.47772598 119.20880890]
[-7.53998327 118.52924347]
[-21.94986725 114.27765656]
[-34.91552734 106.70533752]
[-45.68548203 96.25622559]
[-53.63671112 83.54080963]
[-58.31070328 69.30052185]
[-59.43988800 54.36449432]
[-56.96296310 39.60125351]
[-70.74534607 33.68128967]
[-84.52772522 27.76132774]
[-98.31010437 21.84136581]
[-112.63270569 17.38455009]
[-127.34066772 14.43906689]
[-142.04862976 11.49358463]
[-156.75659180 8.54810238]
[-163.76327515 21.93029022]
[-174.25733948 32.79543304]
[-187.38807678 40.26274109]
[-202.09100342 43.72687912]
[-217.17425537 42.90701675]
[-231.41510010 37.86962509]
[-243.65907288 29.02305412]
[-252.91362000 17.08446312]
[-258.42852783 3.02165556]
[-259.75671387 -12.02535725]
[-256.79049683 -26.83678246]
[-249.77037048 -40.21192551]
[-239.26539612 -51.06652069]
[-226.12718201 -58.52063370]
[-211.42076111 -61.96999741]
[-196.33834839 -61.13498688]
[-182.10258484 -56.08328629]
[-169.86749268 -47.22442245]
[-160.62493896 -35.27653885]
[-155.12417603 -21.20819855]
[-153.81111145 -6.15985918]
[-139.10314941 -3.21437693]
[-124.39517975 -0.26889440]
[-109.68722534 2.67658806]
[-119.34639740 -8.79949093]
[-122.10883331 -23.54292870]
[-117.25949097 -37.73743057]
[-106.05359650 -47.70878983]
[-91.39177704 -50.87595749]
[-77.06918335 -46.41911697]
[-66.79319000 -35.49190521]
[-63.22369766 -20.92280579]
[-67.28466034 -6.48297834]
[-77.92491150 4.08986807]
[-92.39014435 8.05898380]
[-78.60776520 13.97894669]
[-64.82537842 19.89891052]
[-51.04299927 25.81887245]
[-42.04120255 13.85827065]
[-30.43134880 4.39405632]
[-16.88556099 -2.02026320]
[-2.18937707 -5.00790882]
[12.80379963 -4.39095783]
[27.22225952 -0.20093495]
[40.22666931 7.32276964]
[51.05892181 17.74657249]
[59.08634949 30.46768188]
[63.83865738 44.74895477]
[65.03547668 59.76161575]
[62.60291290 74.63333893]
[76.38529205 80.55330658]
[90.16767120 86.47326660]
[115.40991974 80.26325226]
[129.53471375 75.21450043]
[143.65953064 70.16574097]
[157.78433228 65.11698151]
[171.90913391 60.06822968]
[184.76753235 52.34414291]
[195.85884094 42.24549484]
[206.95016479 32.14684296]
[218.04147339 22.04819489]
[222.50425720 6.26796436]
[238.46597290 2.50557303]
[249.50659180 14.63144779]
[244.26846313 30.17152786]
[228.14012146 33.13951111]
[217.04881287 43.23815918]
[205.95750427 53.33681107]
[194.86618042 63.43545914]
[209.59925842 60.61825562]
[224.51710510 62.18592072]
[238.34269714 68.00424957]
[249.89248657 77.57516479]
[258.17773438 90.07935333]
[262.48919678 104.44637299]
[262.45779419 119.44633484]
[258.08618164 133.79516602]
[249.74862671 146.26454163]
[238.15884399 155.78698730]
[224.30900574 161.54736328]
[209.38470459 163.05252075]
[194.66357422 160.17362976]
[181.40579224 153.15711975]
[170.74630737 142.60366821]
[163.59762573 129.41668701]
[160.57171631 114.72505951]
[161.92762756 99.78646851]
[167.54925537 85.87973785]
[176.95788574 74.19303131]
[162.83308411 79.24179077]
[148.70828247 84.29054260]
[134.58348083 89.33930206]
[120.45867157 94.38805389]
[135.27485657 96.72914886]
[149.61782837 92.33834076]
[164.56404114 93.60755157]
[177.96124268 100.35403442]
[187.88024902 111.60628510]
[192.89274597 125.74399567]
[192.27691650 140.73135376]
[186.12145996 154.41018677]
[175.31275940 164.81074524]
[161.40722656 170.43537903]
[146.40728760 170.47412109]
[132.47288513 164.92141724]
[121.61058044 154.57682800]
[115.38452911 140.92999268]
[114.69138336 125.94535065]
[107.50000000 112.78160858]
[107.50000000 127.78160858]
[107.50000000 142.78161621]
[107.50000000 157.78161621]
[107.50000000 172.78161621]
[107.50000000 187.78161621]
[107.50000000 202.78161621]
[107.50000000 217.78161621]
[107.50000000 232.78161621]
[107.50000000 247.78161621]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[11 84]
[12 83]
[13 82]
[25 70]
[26 69]
[27 68]
[28 67]
[29 56]
[30 55]
[31 54]
[32 53]
[85 125]
[86 124]
[87 123]
[88 122]
[89 121]
[90 101]
[91 100]
[92 99]
[93 98]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
