%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:20 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCCCAAAUAAAGUAUAGGCGAUAGAAAUUGAAACCUGGCGCAAUAGAUAUAGUACCGCAAGxxxxxxxxxxCCUUUUAAGUUAAAGAUUAAGAGAACCAACACCUCUUUACAGUGAAAUGCCCCAACUAAACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[92.50000000 295.30673218]
[92.50000000 280.30673218]
[92.50000000 265.30673218]
[92.50000000 250.30671692]
[92.50000000 235.30671692]
[92.50000000 220.30671692]
[92.50000000 205.30671692]
[92.50000000 190.30671692]
[92.50000000 175.30671692]
[92.50000000 160.30671692]
[79.58743286 157.24052429]
[67.64839935 151.44438171]
[57.25229263 143.19471741]
[48.89493561 132.88499451]
[42.97491074 121.00690460]
[39.77455902 108.12693024]
[24.77537155 108.28296661]
[9.77618313 108.43900299]
[1.49246383 119.10847473]
[-11.24415016 122.98231506]
[-23.69550514 118.85459900]
[-31.36423492 108.45327759]
[-46.36342239 108.29724121]
[-61.36261368 108.14120483]
[-71.14418793 116.61320496]
[-83.67385864 116.13758087]
[-92.21866608 107.51820374]
[-107.21135712 107.05016327]
[-122.20405579 106.58212280]
[-136.23893738 113.88504791]
[-148.71858215 105.75439453]
[-163.71127319 105.28634644]
[-178.70397949 104.81830597]
[-186.72640991 117.91548920]
[-200.23027039 125.23266602]
[-215.58311462 124.80154419]
[-228.65509033 116.73809814]
[-235.92990112 103.21135712]
[-235.45065308 87.85994720]
[-227.34628296 74.81331635]
[-213.79679871 67.58094025]
[-198.44696045 68.10829926]
[-185.42579651 76.25353241]
[-178.23593140 89.82560730]
[-163.24324036 90.29365540]
[-148.25053406 90.76169586]
[-135.28804016 83.42528534]
[-121.73601532 91.58942413]
[-106.74331665 92.05746460]
[-91.75061798 92.52551270]
[-76.79524994 83.39660645]
[-61.20657730 93.14202118]
[-46.20738602 93.29805756]
[-31.20819855 93.45409393]
[-19.74094582 81.19195557]
[-2.61669445 80.98200226]
[9.62014675 93.43981934]
[24.61933517 93.28378296]
[39.61852264 93.12773895]
[44.95532990 74.24665070]
[56.03003311 58.05011368]
[71.68820190 46.22646713]
[90.29762268 40.00821304]
[109.91841888 40.04355240]
[128.50531006 46.32880020]
[144.12078857 58.20877457]
[156.20077515 49.31642532]
[168.28076172 40.42407608]
[153.30625916 41.29832077]
[138.99649048 36.80052567]
[127.21492004 27.51641846]
[119.49581909 14.65502167]
[116.84441376 -0.10878702]
[119.60597992 -14.85238743]
[127.42089081 -27.65579224]
[139.27143860 -36.85167694]
[153.61441040 -41.24250412]
[168.58197021 -40.25647736]
[182.22496033 -34.02200317]
[192.76673889 -23.35096931]
[198.83448792 -9.63300896]
[199.63803101 5.34545279]
[195.07273865 19.63384247]
[185.73445129 31.37028694]
[199.96124268 26.61647224]
[214.18801880 21.86265755]
[224.82470703 10.15063572]
[239.34802246 13.45555305]
[249.98471069 1.74353147]
[264.50802612 5.04844952]
[278.68460083 0.14689854]
[292.80938721 -4.90185785]
[306.93420410 -9.95061398]
[321.05899048 -14.99937057]
[335.18380737 -20.04812622]
[349.30859375 -25.09688377]
[349.09674072 -40.23735428]
[353.81481934 -54.62548828]
[362.95104980 -66.70056915]
[375.51443481 -75.15278625]
[390.14218140 -79.06530762]
[405.24758911 -78.01372528]
[419.19210815 -72.11210632]
[430.46316528 -62.00062180]
[437.83813477 -48.77608490]
[440.51705933 -33.87299728]
[438.20935059 -18.90793228]
[431.16531372 -5.50418758]
[420.14904785 4.88429689]
[406.35552979 11.13065720]
[391.28094482 12.55733395]
[376.56045532 9.00957298]
[363.79089355 0.87220776]
[354.35736084 -10.97208023]
[340.23254395 -5.92332363]
[326.10775757 -0.87456751]
[311.98294067 4.17418861]
[297.85815430 9.22294521]
[283.73333740 14.27170181]
[278.45925903 19.51858521]
[269.26184082 19.27522850]
[259.64276123 30.64722633]
[244.10183716 27.68233299]
[234.48274231 39.05432892]
[218.94183350 36.08943558]
[204.71505737 40.84325027]
[190.48826599 45.59706497]
[177.17311096 52.50406265]
[165.09312439 61.39641571]
[153.01313782 70.28876495]
[157.43605042 80.14426422]
[160.04415894 90.62715149]
[160.75502014 101.40619659]
[159.54621887 112.14080811]
[156.45590210 122.49179840]
[151.58175659 132.13211060]
[145.07777405 140.75715637]
[137.14944458 148.09437561]
[128.04731750 153.91195679]
[118.05895996 158.02606201]
[107.50000000 160.30671692]
[107.50000000 175.30671692]
[107.50000000 190.30671692]
[107.50000000 205.30671692]
[107.50000000 220.30671692]
[107.50000000 235.30671692]
[107.50000000 250.30671692]
[107.50000000 265.30673218]
[107.50000000 280.30673218]
[107.50000000 295.30673218]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[16 59]
[17 58]
[18 57]
[22 54]
[23 53]
[24 52]
[27 50]
[28 49]
[29 48]
[31 46]
[32 45]
[33 44]
[66 130]
[67 129]
[68 128]
[84 127]
[85 126]
[86 125]
[88 123]
[90 121]
[91 119]
[92 118]
[93 117]
[94 116]
[95 115]
[96 114]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
