%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:27 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGUCACCCAUCAACAACCGCUAUGUAUUUCGUACAUUACUGCCAGCCACCAUGAAUAUUGUACGxxxxxxxxxxAAACCCCCUCCCCAUGCUUACAAGCAAGUACAGCAAUCAACCCUCAACUAUCACACAUCAACCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[243.97753906 164.72744751]
[230.01972961 159.23385620]
[216.06192017 153.74026489]
[202.10411072 148.24667358]
[188.14628601 142.75309753]
[174.18847656 137.25950623]
[160.23066711 131.76591492]
[146.27285767 126.27232361]
[132.31504822 120.77873230]
[118.35723877 115.28514099]
[104.39942932 109.79155731]
[89.73783875 106.62333679]
[74.75708771 105.86359406]
[66.36231232 118.64933014]
[52.78454208 125.47142792]
[37.71521759 124.58720398]
[25.19553947 116.33410645]
[18.53273582 103.01222229]
[3.55198860 102.25247955]
[-11.42875862 101.49274445]
[-17.73724747 114.17448425]
[-28.37782478 123.45748901]
[-41.71585464 127.95967102]
[-55.71902084 127.02999878]
[-68.26697540 120.84245300]
[-77.47241211 110.36463165]
[-81.96489716 97.20659637]
[-96.92716980 96.14340210]
[-111.88944244 95.08020782]
[-126.88944244 95.08020782]
[-141.85171509 96.14340210]
[-156.81398010 97.20659637]
[-171.77626038 98.26979065]
[-186.73852539 99.33299255]
[-198.29402161 110.46179962]
[-214.18013000 108.22328949]
[-222.21040344 94.33465576]
[-216.22471619 79.45006561]
[-200.81474304 74.98770905]
[-187.80172729 84.37071991]
[-172.83946228 83.30751801]
[-157.87718201 82.24432373]
[-142.91490173 81.18112946]
[-127.95263672 80.11793518]
[-139.05050659 70.02649689]
[-141.23420715 55.18629456]
[-133.51365662 42.32577133]
[-119.38928986 37.27578735]
[-105.26499176 42.32596588]
[-97.54461670 55.18659592]
[-99.72851562 70.02676392]
[-110.82624817 80.11793518]
[-95.86397552 81.18112946]
[-80.90169525 82.24432373]
[-73.25242615 68.24520874]
[-60.22476578 58.93807602]
[-44.38751221 56.22022629]
[-28.89061356 60.68350983]
[-16.83867836 71.48637390]
[-10.66902161 86.51199341]
[4.31172609 87.27173615]
[19.29247284 88.03147125]
[27.26884460 75.45200348]
[40.55923843 68.50784302]
[55.64070129 69.15269470]
[68.45862579 77.31343079]
[75.51682281 90.88285065]
[90.49757385 91.64258575]
[78.21862793 83.02703857]
[69.55027008 70.78532410]
[65.50131989 56.34212875]
[66.54298401 41.37834167]
[72.55403900 27.63544655]
[82.83492279 16.71283531]
[96.18914795 9.88167763]
[111.06255341 7.93698263]
[125.72417450 11.10507298]
[138.46769714 19.01724625]
[147.81004333 30.75268936]
[152.66395569 44.94563293]
[152.46452332 59.94430542]
[147.23495483 74.00317383]
[137.58387756 85.48606110]
[124.63448334 93.05660248]
[109.89302063 95.83374023]
[123.85083008 101.32733154]
[137.80863953 106.82092285]
[151.76644897 112.31451416]
[165.72425842 117.80810547]
[179.68206787 123.30168915]
[193.63987732 128.79528809]
[207.59768677 134.28886414]
[221.55551147 139.78245544]
[235.51332092 145.27604675]
[249.47113037 150.76963806]
[255.47090149 149.38365173]
[260.98394775 150.76963806]
[274.94174194 145.27604675]
[288.89956665 139.78245544]
[302.85739136 134.28886414]
[316.75878906 128.65411377]
[330.60241699 122.87876892]
[344.44601440 117.10342407]
[350.22448730 102.39340210]
[364.74523926 96.15451813]
[379.39334106 102.08819580]
[385.47833252 116.67408752]
[379.39013672 131.25863647]
[364.74072266 137.18910217]
[350.22134399 130.94703674]
[336.37774658 136.72238159]
[322.53414917 142.49772644]
[317.54251099 148.00799561]
[308.35095215 148.24667358]
[294.39315796 153.74026489]
[280.43533325 159.23385620]
[266.47753906 164.72744751]
[281.19595337 167.62017822]
[295.29067993 172.75233459]
[308.42315674 180.00067139]
[320.27795410 189.19108582]
[330.57034302 200.10284424]
[339.05313110 212.47386169]
[345.52258301 226.00701904]
[349.82330322 240.37725830]
[351.85198975 255.23944092]
[351.55993652 270.23660278]
[348.95413208 285.00851440]
[344.09719849 299.20040894]
[337.10574341 312.47143555]
[328.14773560 324.50280762]
[317.43829346 335.00555420]
[305.23464966 343.72744751]
[291.82992554 350.45898438]
[277.54611206 355.03851318]
[262.72619629 357.35598755]
[247.72619629 357.35577393]
[232.90637207 355.03787231]
[218.62265015 350.45797729]
[205.21812439 343.72607422]
[193.01473999 335.00384521]
[182.30558777 324.50079346]
[173.34790039 312.46917725]
[166.35682678 299.19796753]
[161.50027466 285.00595093]
[158.89488220 270.23394775]
[158.60322571 255.23677063]
[160.63233948 240.37464905]
[164.93344116 226.00453186]
[171.40327454 212.47155762]
[179.88641357 200.10076904]
[190.17910767 189.18928528]
[202.03416443 179.99920654]
[215.16682434 172.75122070]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 95]
[2 94]
[3 93]
[4 92]
[5 91]
[6 90]
[7 89]
[8 88]
[9 87]
[10 86]
[11 85]
[12 68]
[13 67]
[18 62]
[19 61]
[20 60]
[27 54]
[28 53]
[29 52]
[30 44]
[31 43]
[32 42]
[33 41]
[34 40]
[97 117]
[98 116]
[99 115]
[100 114]
[101 112]
[102 111]
[103 110]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
