%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:27 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGAAUCAACAAAACUGCUCGCCAGAACACUACGAGCCACAGCUUAAAACUCAAAGGACCUGGxxxxxxxxxxCUCGCUGUCACUUUCCUAGGACUUCUAACAGCCCUAGACCUCAACUACCUAACCAACAAACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[92.50000000 252.09742737]
[92.50000000 237.09742737]
[92.50000000 222.09742737]
[92.50000000 207.09742737]
[92.50000000 192.09742737]
[92.50000000 177.09742737]
[92.50000000 162.09742737]
[92.50000000 147.09742737]
[92.50000000 132.09742737]
[92.50000000 117.09741974]
[87.22116852 131.13786316]
[74.96530151 139.78619385]
[59.96768951 140.05380249]
[47.41109467 131.84820557]
[41.63472366 118.00502777]
[44.63473892 103.30809021]
[55.37441635 92.83625793]
[70.14241791 90.20829773]
[83.83559418 96.33259583]
[73.17396545 85.78130341]
[62.51234055 75.23001099]
[46.65655518 79.02056122]
[31.38602066 73.84375763]
[21.32925606 61.46926498]
[6.51149845 63.80036926]
[-8.30625916 66.13146973]
[-23.12401772 68.46257782]
[-37.94177628 70.79367828]
[-46.18457794 80.76915741]
[-58.61989594 82.37596130]
[-68.47462463 75.29135132]
[-83.33766937 77.31369019]
[-95.96628571 87.77552795]
[-111.24458313 81.81684875]
[-113.45555115 65.56742859]
[-100.32474518 55.74327850]
[-85.36000824 62.45064163]
[-70.49696350 60.42830658]
[-57.26069260 48.94783401]
[-40.27288055 55.97592163]
[-25.45512199 53.64482117]
[-10.63736343 51.31371689]
[4.18039465 48.98261261]
[18.99815369 46.65150833]
[22.76192856 35.28743744]
[30.84486580 26.45713425]
[25.64945030 12.38561535]
[20.45403481 -1.68590355]
[15.25861931 -15.75742340]
[10.06320381 -29.82894325]
[-4.74989557 -27.21898460]
[-19.79096603 -27.29616356]
[-34.57649994 -30.05799866]
[-48.63120651 -35.41570663]
[-61.50328064 -43.19705963]
[-72.77893829 -53.15192413]
[-82.09571838 -64.96028137]
[-89.15412903 -78.24255371]
[-93.72725677 -92.57176208]
[-95.66810608 -107.48728943]
[-94.91427612 -122.50965881]
[-91.49001312 -137.15596008]
[-85.50538635 -150.95538330]
[-77.15277863 -163.46432495]
[-66.70068359 -174.28068542]
[-54.48510361 -183.05674744]
[-40.89871216 -189.51040649]
[-26.37825966 -193.43421936]
[-11.39051628 -194.70202637]
[3.58272290 -193.27307129]
[18.06013107 -189.19331360]
[31.57631874 -182.59388733]
[43.69679642 -173.68693542]
[54.03194427 -162.75878906]
[62.24952316 -150.16072083]
[68.08538055 -136.29772949]
[71.35190582 -121.61544800]
[71.94410706 -106.58583832]
[69.84294128 -91.69205475]
[65.11594391 -77.41285706]
[57.91508484 -64.20727539]
[48.47183228 -52.49981308]
[37.08974838 -42.66680908]
[24.13472366 -35.02435684]
[29.33013916 -20.95283890]
[34.52555466 -6.88131905]
[39.72097015 7.19020033]
[44.91638565 21.26171875]
[60.18858337 23.87321663]
[71.98328400 34.12004471]
[76.78298950 49.12542343]
[73.06362915 64.56838989]
[83.72525787 75.11967468]
[94.38687897 85.67096710]
[104.35828400 81.42472839]
[116.86840820 84.70495605]
[131.28062439 80.54706573]
[145.69284058 76.38918304]
[160.10505676 72.23129272]
[174.51727295 68.07340240]
[177.01753235 53.01646805]
[185.81018066 40.54040146]
[199.14941406 33.12234497]
[214.38673401 32.23515701]
[228.49673462 38.05498886]
[238.67788696 49.42630768]
[242.90870667 64.09133148]
[240.34916687 79.13830566]
[231.50746155 91.57965088]
[218.13911438 98.94512177]
[202.89843750 99.77229309]
[188.81144714 93.89694214]
[178.67515564 82.48561859]
[164.26293945 86.64350891]
[149.85072327 90.80139923]
[135.43850708 94.95928192]
[121.02629852 99.11717224]
[135.66760254 102.37786865]
[150.30891418 105.63856506]
[164.95021057 108.89925385]
[179.68334961 106.08242035]
[194.61714172 107.49030304]
[208.56425476 113.01097107]
[220.41586304 122.20550537]
[229.22969055 134.34291077]
[234.30500793 148.45819092]
[235.23829651 163.42912292]
[231.95535278 178.06546021]
[224.71719360 191.20353699]
[214.09928894 201.79882812]
[200.94581604 209.00894165]
[186.30250549 212.26066589]
[171.33358765 211.29545593]
[157.22917175 206.19004822]
[145.11059570 197.35035706]
[135.94134521 185.47918701]
[130.45043945 171.52030945]
[129.07414246 156.58863831]
[121.88276672 143.42489624]
[114.69138336 130.26115417]
[107.50000000 117.09741974]
[107.50000000 132.09742737]
[107.50000000 147.09742737]
[107.50000000 162.09742737]
[107.50000000 177.09742737]
[107.50000000 192.09742737]
[107.50000000 207.09742737]
[107.50000000 222.09742737]
[107.50000000 237.09742737]
[107.50000000 252.09742737]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[19 94]
[20 93]
[21 92]
[24 44]
[25 43]
[26 42]
[27 41]
[28 40]
[31 38]
[32 37]
[46 88]
[47 87]
[48 86]
[49 85]
[50 84]
[96 117]
[97 116]
[98 115]
[99 114]
[100 113]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
