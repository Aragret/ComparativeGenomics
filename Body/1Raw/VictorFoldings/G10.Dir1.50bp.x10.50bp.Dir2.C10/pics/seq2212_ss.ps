%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:49 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGUAGUUCAACUUUAAAUUUGCCCACAGAACCCUCUAAAUCCCCUUGUAAAUUUAACUGUUAxxxxxxxxxxAUUCUCGCACGGACUACAACCACGACCAAUGAUAUGAAAAACCAUCGUUGUAUUUCAACUCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[95.27452850 233.41598511]
[94.96247101 218.41923523]
[94.65042114 203.42248535]
[94.33836365 188.42572021]
[94.02630615 173.42897034]
[93.71424866 158.43222046]
[93.40219116 143.43547058]
[93.09013367 128.43870544]
[92.77808380 113.44195557]
[86.00996399 100.05567169]
[74.11758423 90.91394043]
[62.22520447 81.77220154]
[50.33282471 72.63047028]
[38.44044495 63.48873520]
[26.54806709 54.34700394]
[14.65568733 45.20526886]
[1.06473601 38.85813904]
[-13.57876492 35.60731125]
[-28.22226715 32.35648727]
[-45.61537933 38.31127167]
[-58.10977554 26.02754021]
[-72.81773376 23.08205795]
[-87.52569580 20.13657570]
[-102.23365784 17.19109344]
[-116.94161987 14.24561119]
[-131.64958191 11.30012894]
[-146.35754395 8.35464573]
[-161.06550598 5.40916348]
[-165.26103210 7.00888729]
[-169.32978821 7.13607073]
[-172.81338501 6.01959419]
[-175.37890625 4.01658249]
[-176.85061646 1.55865610]
[-191.26283264 -2.59923124]
[-205.67504883 -6.75711870]
[-214.13966370 5.78104210]
[-226.06573486 15.08823299]
[-240.28489685 20.25263214]
[-255.40405273 20.76828194]
[-269.94201660 16.58466530]
[-282.47451782 8.11164951]
[-291.77371216 -3.82066369]
[-296.92858887 -18.04327011]
[-297.43411255 -33.16278076]
[-293.24075317 -47.69794464]
[-284.75933838 -60.22475052]
[-272.82080078 -69.51595306]
[-258.59472656 -74.66128540]
[-243.47488403 -75.15667725]
[-228.94253540 -70.95358276]
[-216.42141724 -62.46377563]
[-207.13821411 -50.51901245]
[-202.00241089 -36.28950882]
[-201.51716614 -21.16933441]
[-187.10494995 -17.01144791]
[-172.69273376 -12.85355949]
[-158.12002563 -9.29879761]
[-143.41206360 -6.35331535]
[-128.70410156 -3.40783310]
[-113.99613953 -0.46235055]
[-99.28817749 2.48313189]
[-84.58021545 5.42861462]
[-69.87225342 8.37409687]
[-55.16429520 11.31957912]
[-44.88684845 4.86346006]
[-32.57596970 7.24279118]
[-24.97144127 17.71298599]
[-10.32793999 20.96381187]
[4.31556177 24.21463776]
[-6.51860428 13.84059048]
[-14.21789742 0.96732873]
[-18.23229790 -13.48551178]
[-18.27502632 -28.48545074]
[-14.34302807 -42.96092606]
[-6.71719790 -55.87784195]
[4.05769205 -66.31343842]
[17.21190643 -73.52223206]
[31.80573845 -76.98922729]
[46.79663849 -76.46675873]
[61.11368561 -71.99214172]
[73.73410034 -63.88504791]
[83.75631714 -52.72461700]
[90.46436310 -39.30812836]
[93.37902832 -24.59402847]
[92.29210663 -9.63346100]
[87.28123474 4.50482559]
[78.70438385 16.81082344]
[67.17425537 26.40541840]
[53.51455307 32.60319519]
[38.70108032 34.96139908]
[23.79742050 33.31288910]
[35.68980026 42.45462418]
[47.58218002 51.59635544]
[59.47455978 60.73809052]
[71.36694336 69.87982178]
[83.25932312 79.02156067]
[95.15170288 88.16329193]
[83.93489075 78.20421600]
[78.69869995 64.14781952]
[80.66619110 49.27741241]
[89.37780762 37.06644440]
[102.79866791 30.36715889]
[117.79392242 30.74438667]
[130.86096191 38.11001205]
[138.94757080 50.74356842]
[140.16488647 65.69409180]
[134.22834778 79.46968079]
[148.87184143 82.72051239]
[163.51535034 85.97133636]
[178.15884399 89.22216034]
[192.80235291 92.47298431]
[207.44584656 95.72381592]
[222.08935547 98.97463989]
[232.40965271 87.59980011]
[247.03961182 82.92434692]
[262.04382324 86.20593262]
[273.38626099 96.56184387]
[278.01583862 111.20638275]
[274.68722534 126.20024872]
[264.29583740 137.51016235]
[249.63684082 142.09381104]
[234.65348816 138.71823120]
[223.37620544 128.29141235]
[218.83853149 113.61814117]
[204.19502258 110.36731720]
[189.55152893 107.11648560]
[174.90802002 103.86566162]
[160.26452637 100.61483765]
[145.62101746 97.36401367]
[130.97752380 94.11318207]
[125.17684937 98.86736298]
[136.46919250 108.74069977]
[147.76155090 118.61403656]
[160.07508850 127.18005371]
[160.66549683 142.16842651]
[149.06390381 151.67646790]
[134.48345947 148.15357971]
[128.50286865 134.39828491]
[121.03918457 121.38700104]
[113.57550812 108.37572479]
[107.77483368 113.12990570]
[108.08689117 128.12666321]
[108.39894867 143.12341309]
[108.71100616 158.12016296]
[109.02305603 173.11691284]
[109.33511353 188.11367798]
[109.64717102 203.11042786]
[109.95922852 218.10717773]
[110.27128601 233.10392761]
[112.86228180 252.31166077]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 149]
[2 148]
[3 147]
[4 146]
[5 145]
[6 144]
[7 143]
[8 142]
[9 141]
[10 97]
[11 96]
[12 95]
[13 94]
[14 93]
[15 92]
[16 91]
[17 69]
[18 68]
[19 67]
[21 64]
[22 63]
[23 62]
[24 61]
[25 60]
[26 59]
[27 58]
[28 57]
[33 56]
[34 55]
[35 54]
[107 130]
[108 129]
[109 128]
[110 127]
[111 126]
[112 125]
[113 124]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
