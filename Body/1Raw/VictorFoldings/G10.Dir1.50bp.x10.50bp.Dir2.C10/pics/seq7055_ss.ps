%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:01 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGGCCAUCAUAGGAGGCUUCAUUCACUGAUUUCCCCUAUUCUCAGGCUACACCCUAGACCAAAxxxxxxxxxxCAGAAACCUGAAACAUCGGCAUUAUCCUCCUGCUUGCAACUAUAGCAACAGCCUUCAUAGGCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[69.27439880 263.25479126]
[69.27439880 248.25480652]
[69.27439880 233.25480652]
[69.27439880 218.25480652]
[69.27439880 203.25480652]
[69.27439880 188.25480652]
[69.27439880 173.25480652]
[69.27439880 158.25480652]
[69.27439880 143.25480652]
[69.27439880 128.25480652]
[88.24086761 95.19958496]
[80.08419800 82.61114502]
[75.50783539 96.89599609]
[62.25893402 103.92925262]
[47.86278534 99.71607971]
[40.49628830 86.64952850]
[44.34356308 72.15130615]
[57.21938324 64.45629120]
[71.81101990 67.93565369]
[65.26314545 54.44026947]
[58.71527481 40.94488907]
[52.16740417 27.44950294]
[45.61953354 13.95411873]
[39.07166290 0.45873508]
[26.34745216 2.20169330]
[13.66729641 0.27927259]
[2.06407261 -5.14165449]
[-7.51997566 -13.60966206]
[-14.30974770 -24.42634583]
[-17.75996590 -36.70391846]
[-17.59896278 -49.43807220]
[-13.85003185 -61.59012985]
[-6.82870865 -72.17177582]
[2.88376355 -80.32540894]
[-2.82089972 -94.19828796]
[-8.52556324 -108.07116699]
[-14.23022652 -121.94405365]
[-19.93488884 -135.81692505]
[-25.78167725 -149.63050842]
[-31.76997375 -163.38334656]
[-36.15739059 -149.03933716]
[-47.50822449 -139.23329163]
[-62.33740234 -136.97596741]
[-76.09188843 -142.96046448]
[-84.54860687 -155.34931946]
[-85.11107635 -170.33877563]
[-77.60659790 -183.32656860]
[-64.33929443 -190.32502747]
[-49.38264465 -189.18540955]
[-37.32995224 -180.25907898]
[-40.68921280 -194.87808228]
[-44.04846954 -209.49708557]
[-47.40773010 -224.11608887]
[-50.76698685 -238.73510742]
[-65.79194641 -238.03474426]
[-80.70046997 -240.02865601]
[-95.01331329 -244.65275574]
[-108.27037811 -251.75837708]
[-120.04550934 -261.11712646]
[-129.96018982 -272.42813110]
[-137.69567871 -285.32781982]
[-143.00334167 -299.40148926]
[-145.71253967 -314.19677734]
[-145.73619080 -329.23803711]
[-143.07353210 -344.04174805]
[-137.81016541 -358.13204956]
[-130.11528015 -371.05599976]
[-120.23622894 -382.39813232]
[-108.49058533 -391.79385376]
[-95.25592804 -398.94116211]
[-80.95770264 -403.61022949]
[-66.05551910 -405.65103149]
[-51.02843857 -404.99792480]
[-36.35950851 -401.67190552]
[-22.52027893 -395.77993774]
[-9.95562363 -387.51135254]
[0.93055600 -377.13201904]
[9.78831482 -364.97555542]
[16.33291245 -351.43270874]
[20.35396767 -336.93890381]
[21.72221756 -321.95999146]
[20.39368248 -306.97750854]
[16.41106606 -292.47308350]
[9.90239525 -278.91296387]
[1.07689488 -266.73303223]
[-9.78173065 -256.32485962]
[-22.32442093 -248.02301025]
[-36.14797974 -242.09436035]
[-32.78872299 -227.47535706]
[-29.42946434 -212.85635376]
[-26.07020569 -198.23733521]
[-22.71094704 -183.61833191]
[-18.01714516 -169.37164307]
[-12.02884865 -155.61880493]
[-6.44051123 -150.71139526]
[-6.06200933 -141.52159119]
[-0.35734582 -127.64871216]
[5.34731770 -113.77583313]
[11.05198097 -99.90295410]
[16.75664330 -86.03007507]
[34.04008865 -86.53962708]
[50.24102020 -80.39807129]
[62.89437866 -68.51128387]
[70.06398010 -52.66147232]
[70.63876343 -35.23997498]
[64.50489044 -18.88649750]
[52.56704712 -6.08913565]
[59.11491776 7.40624857]
[65.66278839 20.90163231]
[72.21066284 34.39701843]
[78.75852966 47.89240265]
[85.30640411 61.38778305]
[92.67263794 74.45448303]
[100.82930756 87.04291534]
[112.79956818 96.08243561]
[127.13962555 100.48274231]
[141.47969055 104.88304138]
[155.81974792 109.28334045]
[168.84400940 100.62870026]
[184.37841797 102.42205048]
[195.08810425 113.81662750]
[195.91629028 129.43226624]
[186.47192383 141.89573669]
[171.21435547 145.32215881]
[157.34773254 138.09370422]
[151.41944885 123.62339783]
[137.07939148 119.22309875]
[122.73932648 114.82279968]
[108.39926147 110.42250061]
[102.36804962 114.88057709]
[112.84301758 125.61719513]
[123.31799316 136.35380554]
[133.79296875 147.09042358]
[146.72332764 154.69345093]
[150.43220520 169.22769165]
[142.72596741 182.09678650]
[128.16250610 185.68925476]
[115.35547638 177.88027954]
[111.87976837 163.28794861]
[104.68838501 150.12420654]
[97.49700165 136.96046448]
[90.30561829 123.79673004]
[84.27439880 128.25480652]
[84.27439880 143.25480652]
[84.27439880 158.25480652]
[84.27439880 173.25480652]
[84.27439880 188.25480652]
[84.27439880 203.25480652]
[84.27439880 218.25480652]
[84.27439880 233.25480652]
[84.27439880 248.25480652]
[84.27439880 263.25479126]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 152]
[2 151]
[3 150]
[4 149]
[5 148]
[6 147]
[7 146]
[8 145]
[9 144]
[10 143]
[11 114]
[12 113]
[19 112]
[20 111]
[21 110]
[22 109]
[23 108]
[24 107]
[34 100]
[35 99]
[36 98]
[37 97]
[38 96]
[39 94]
[40 93]
[50 92]
[51 91]
[52 90]
[53 89]
[54 88]
[115 129]
[116 128]
[117 127]
[118 126]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
