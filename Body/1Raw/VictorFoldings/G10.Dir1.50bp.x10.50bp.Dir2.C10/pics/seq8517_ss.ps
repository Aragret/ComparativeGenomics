%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:36 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGGCCAUCCCCUUAUGAGCGGGCACAGUGAUUAUAGGCUUUCGCUCUAAGAUUAAAAAUGCCxxxxxxxxxxGAGGCCAAAUAUCAUUCUGAGGGGCCACAGUAAUUACAAACUUACUAUCCGCCAUCCCAUCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[189.72872925 389.44964600]
[192.31971741 370.24191284]
[192.63177490 355.24517822]
[192.94383240 340.24841309]
[193.25588989 325.25164795]
[193.56794739 310.25491333]
[193.88000488 295.25814819]
[194.19206238 280.26141357]
[194.50411987 265.26464844]
[194.81617737 250.26789856]
[195.12823486 235.27113342]
[175.69468689 230.01148987]
[161.29310608 217.01675415]
[154.60186768 199.59477234]
[156.45532227 181.76278687]
[165.79316711 167.32591248]
[156.77563477 155.33908081]
[147.75811768 143.35224915]
[138.74058533 131.36541748]
[129.72305298 119.37857819]
[120.70552063 107.39174652]
[108.44436646 118.79553223]
[92.80825806 117.82946777]
[83.43932343 106.64800262]
[68.45960999 105.86816406]
[53.47989273 105.08831787]
[38.50017929 104.30847168]
[23.52046394 103.52862549]
[8.52776814 103.06058502]
[-6.47142076 102.90454865]
[-21.47060966 102.74851227]
[-27.77075958 116.61314392]
[-39.16979218 126.71175385]
[-53.69275665 131.29469299]
[-68.82346344 129.56794739]
[-81.94042206 121.83068848]
[-90.77104187 109.42343140]
[-93.78536987 94.49581146]
[-90.46114349 79.63414001]
[-81.37432098 67.41327667]
[-68.09923553 59.95056915]
[-52.93587875 58.53897095]
[-38.51139832 63.42305756]
[-27.32492256 73.75662231]
[-21.31457329 87.74932098]
[-6.31538391 87.90535736]
[8.68380451 88.06139374]
[12.70205021 85.37267303]
[18.46479607 85.22411346]
[24.30030823 88.54891205]
[39.28002167 89.32875824]
[54.25973892 90.10860443]
[69.23944855 90.88845062]
[84.21916962 91.66828918]
[90.76101685 83.14021301]
[101.69661713 79.46464539]
[113.58638000 82.71512604]
[114.83325195 67.76704407]
[116.08013153 52.81895447]
[100.88980865 46.64798355]
[88.34712219 36.11708832]
[79.66006470 22.25540161]
[75.66069794 6.41211224]
[76.72547913 -9.87484837]
[82.73985291 -25.02809525]
[93.11045837 -37.58355713]
[106.82363129 -46.33193588]
[122.54448700 -50.43517685]
[123.16846466 -65.42219543]
[123.79244232 -80.40921021]
[110.30404663 -87.55245209]
[101.25767517 -99.84577942]
[98.44948578 -114.84834290]
[102.43705750 -129.58135986]
[112.42864227 -141.11959839]
[126.44041443 -147.17213440]
[141.69032288 -146.53720093]
[155.15048218 -139.34089661]
[164.14837646 -127.01204681]
[166.89746094 -111.99854279]
[162.85189819 -97.28133392]
[152.81495667 -85.78253174]
[138.77946472 -79.78523254]
[138.15548706 -64.79821777]
[137.53150940 -49.81119919]
[150.56309509 -45.57933044]
[162.05496216 -38.09474182]
[171.21144104 -27.86769867]
[177.39646912 -15.59861660]
[180.17782593 -2.13010001]
[179.35728455 11.61092949]
[174.98477173 24.67702293]
[167.35528564 36.16553116]
[156.98915100 45.28096771]
[144.59640503 51.39007187]
[131.02821350 54.06582642]
[129.78134155 69.01391602]
[128.53446960 83.96199799]
[132.69235229 98.37421417]
[141.70988464 110.36105347]
[150.72741699 122.34788513]
[159.74494934 134.33471680]
[168.76246643 146.32154846]
[177.77999878 158.30838013]
[193.61036682 153.32429504]
[210.72351074 155.89379883]
[225.56248474 166.10649109]
[234.77638245 182.40505981]
[235.96653748 201.80041504]
[250.73258972 204.43928528]
[265.49862671 207.07815552]
[280.26470947 209.71701050]
[295.03076172 212.35588074]
[306.12393188 201.50596619]
[321.48080444 199.28192139]
[335.19631958 206.53895569]
[341.99658203 220.48657227]
[339.26675415 235.76164246]
[328.05648804 246.49058533]
[312.67642212 248.54789734]
[299.04043579 241.14250183]
[292.39187622 227.12193298]
[277.62582397 224.48307800]
[262.85977173 221.84420776]
[248.09371948 219.20533752]
[233.32766724 216.56648254]
[227.52699280 221.32066345]
[239.22029114 230.71569824]
[250.91358948 240.11074829]
[262.60687256 249.50579834]
[276.03283691 256.19488525]
[282.48031616 269.73852539]
[279.20745850 284.37710571]
[267.60610962 293.88543701]
[252.60983276 294.22000122]
[240.59597778 285.23849487]
[236.67356873 270.76049805]
[229.75759888 257.45001221]
[222.84162903 244.13951111]
[215.92565918 230.82901001]
[210.12498474 235.58319092]
[209.81292725 250.57995605]
[209.50086975 265.57669067]
[209.18881226 280.57345581]
[208.87675476 295.57022095]
[208.56469727 310.56695557]
[208.25263977 325.56372070]
[207.94058228 340.56048584]
[207.62854004 355.55722046]
[207.31648254 370.55398560]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 150]
[3 149]
[4 148]
[5 147]
[6 146]
[7 145]
[8 144]
[9 143]
[10 142]
[11 141]
[16 104]
[17 103]
[18 102]
[19 101]
[20 100]
[21 99]
[24 54]
[25 53]
[26 52]
[27 51]
[28 50]
[29 47]
[30 46]
[31 45]
[57 98]
[58 97]
[59 96]
[68 85]
[69 84]
[70 83]
[109 126]
[110 125]
[111 124]
[112 123]
[113 122]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
