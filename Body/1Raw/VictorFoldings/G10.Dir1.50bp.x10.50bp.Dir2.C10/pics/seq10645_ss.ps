%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:23 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGUAACCCUAACAAAAAAAACUCAUACCCCCAUUAUGUAAAAUCCAUUGUCGCAUCCACCUUUxxxxxxxxxxUCUCAUCGCUACCUCCCUGACAAGCGCCUAUAGCACUCGAAUAAUUCUUCUCACCCUAACACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[168.02647400 97.09668732]
[153.20399475 99.39756012]
[141.81417847 108.99555206]
[126.99048615 103.46665192]
[112.16800690 105.76752472]
[96.36313629 141.88099670]
[84.39288330 150.92051697]
[72.42262268 159.96003723]
[60.45236588 168.99955750]
[48.48210526 178.03907776]
[36.51184845 187.07859802]
[24.54158974 196.11811829]
[29.89272499 210.24404907]
[31.04599380 225.30548096]
[27.90789986 240.08145142]
[20.73283958 253.37411499]
[10.10245895 264.10592651]
[-3.12148309 271.40689087]
[-17.86697960 274.68515015]
[-32.93868256 273.67495728]
[-47.11479187 268.45819092]
[-59.24611664 259.45776367]
[-68.34922791 247.40330505]
[-73.68617249 233.27200317]
[-74.82430267 218.20942688]
[-71.67137146 203.43663025]
[-64.48295593 190.15116882]
[-53.84180069 179.43003845]
[-40.61053085 172.14236450]
[-25.86174965 168.87892151]
[-10.79106998 169.90426636]
[3.37979198 175.13525391]
[15.50206947 184.14785767]
[27.47232819 175.10833740]
[39.44258499 166.06881714]
[51.41284561 157.02929688]
[63.38310242 147.98979187]
[75.35336304 138.95027161]
[87.32362366 129.91075134]
[87.16963196 122.41232300]
[74.02798462 115.18064880]
[86.86165619 107.41548920]
[86.70766449 99.91706848]
[74.37638092 91.37660980]
[62.04509735 82.83615112]
[49.71381378 74.29569244]
[36.72248840 82.24209595]
[21.62138748 84.21102142]
[7.02686739 79.86132050]
[-4.53248358 69.94662476]
[-11.05393791 56.18470001]
[-11.40761471 40.95988846]
[-5.53223610 26.90998459]
[5.55425215 16.46921539]
[19.93104935 11.44650745]
[35.10728836 12.71207619]
[48.45359421 20.04665184]
[57.65763855 32.17947769]
[61.12476349 47.00846863]
[58.25427246 61.96440887]
[70.58555603 70.50486755]
[82.91683960 79.04532623]
[95.24812317 87.58578491]
[109.86713409 90.94504547]
[124.68961334 88.64417267]
[137.13963318 78.88160706]
[150.90312195 84.57508087]
[165.72560120 82.27420807]
[164.88899231 62.89044571]
[166.46667480 43.55401611]
[170.43391418 24.56444168]
[176.72898865 6.21583557]
[185.25411987 -11.20765400]
[195.87698364 -27.43623734]
[208.43278503 -42.21866989]
[222.72682190 -55.32613754]
[238.53746033 -66.55578613]
[255.61961365 -75.73390198]
[273.70852661 -82.71852875]
[292.52392578 -87.40174103]
[311.77420044 -89.71125793]
[331.16113281 -89.61157990]
[350.38442993 -87.10453033]
[369.14630127 -82.22922516]
[387.15618896 -75.06145477]
[404.13519287 -65.71251678]
[419.82043457 -54.32748032]
[433.96908569 -41.08293915]
[445.36016846 -50.84221649]
[456.75125122 -60.60149002]
[468.14230347 -70.36076355]
[464.17459106 -85.09915161]
[467.00299072 -100.09791565]
[476.06591797 -112.37904358]
[489.56393433 -119.50410461]
[504.81698608 -120.05841064]
[518.79656982 -113.93191528]
[528.72705078 -102.34102631]
[532.63665771 -87.58713531]
[529.74926758 -72.59962463]
[520.63800049 -60.35428238]
[507.11206055 -53.28242874]
[491.85693359 -52.78818893]
[477.90158081 -58.96969223]
[466.51052856 -49.21041489]
[455.11944580 -39.45114136]
[443.72836304 -29.69186783]
[450.67758179 -20.00378418]
[456.86532593 -9.81213665]
[462.25524902 0.82334387]
[466.81570435 11.84032249]
[470.51995850 23.17422485]
[473.34619141 34.75861359]
[475.27783203 46.52558136]
[476.30349731 58.40614319]
[476.41714478 70.33065033]
[475.61804199 82.22918701]
[473.91082764 94.03199005]
[471.30548096 105.66986084]
[467.81719971 117.07454681]
[463.46643066 128.17916870]
[458.27865601 138.91862488]
[452.28421021 149.22988892]
[445.51818848 159.05252075]
[438.02026367 168.32890320]
[429.83435059 177.00459290]
[421.00842285 185.02871704]
[411.59414673 192.35418701]
[401.64672852 198.93803406]
[391.22445679 204.74159241]
[380.38842773 209.73081970]
[369.20214844 213.87641907]
[357.73117065 217.15402222]
[346.04275513 219.54440308]
[334.20538330 221.03347778]
[322.28851318 221.61247253]
[310.36199951 221.27796936]
[298.49572754 220.03186035]
[286.75927734 217.88140869]
[275.22152710 214.83920288]
[263.95007324 210.92300415]
[253.01103210 206.15574646]
[242.46856689 200.56533813]
[232.38450623 194.18452454]
[222.81799316 187.05065918]
[213.82513428 179.20553589]
[205.45870972 170.69512939]
[197.76777649 161.56929016]
[190.79747009 151.88150024]
[184.58868408 141.68853760]
[179.17788696 131.05014038]
[174.59681702 120.02865601]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 68]
[2 67]
[4 65]
[5 64]
[6 39]
[7 38]
[8 37]
[9 36]
[10 35]
[11 34]
[12 33]
[43 63]
[44 62]
[45 61]
[46 60]
[88 107]
[89 106]
[90 105]
[91 104]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
