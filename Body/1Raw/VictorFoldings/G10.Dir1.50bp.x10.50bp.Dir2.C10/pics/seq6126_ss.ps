%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:48 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGACCCUAAUCAACUGGCUUCAAUCUACUUCUCCCGCCGCCGGGAAAAAAGGCGGGAGAAGCxxxxxxxxxxUAUUUACAGUAGGAAUAGACGUAGACACACGAGCAUAUUUCACCUCCGCUACCAUAAUCACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[105.04429626 281.43801880]
[105.04429626 266.43801880]
[105.04429626 251.43801880]
[105.04429626 236.43801880]
[105.04429626 221.43801880]
[105.04429626 206.43801880]
[105.04429626 191.43801880]
[105.04429626 176.43801880]
[105.04429626 161.43801880]
[105.04429626 146.43801880]
[82.06335449 138.40451050]
[68.34553528 121.13580322]
[66.29440308 101.46989441]
[74.20953369 85.85845184]
[63.33071136 75.53125000]
[52.45188522 65.20404053]
[37.11626053 61.31441116]
[33.21272278 46.94042206]
[22.33389854 36.61321640]
[4.35770321 32.76142502]
[-0.02745541 15.79762840]
[-11.11877060 5.69897890]
[-22.21008682 -4.39967060]
[-33.30140305 -14.49831963]
[-47.64864731 -4.40961266]
[-63.94152069 2.06420207]
[-81.28580475 4.57148790]
[-98.73043060 2.97820663]
[-115.31962585 -2.62491941]
[-130.14527893 -11.92756844]
[-142.39666748 -24.41700172]
[-151.40476990 -39.40632248]
[-156.67880249 -56.07226181]
[-157.93296814 -73.50038910]
[-155.10194397 -90.73526764]
[-148.34423828 -106.83287811]
[-160.60661316 -115.47199249]
[-172.86897278 -124.11110687]
[-185.13134766 -132.75022888]
[-197.39370728 -141.38934326]
[-209.65608215 -150.02845764]
[-221.91844177 -158.66757202]
[-234.18081665 -167.30668640]
[-246.44319153 -175.94580078]
[-258.70556641 -184.58493042]
[-270.96792603 -193.22404480]
[-284.27664185 -185.75138855]
[-299.51019287 -184.80177307]
[-313.64392090 -190.56375122]
[-323.87158203 -201.89324951]
[-328.16247559 -216.54081726]
[-325.66461182 -231.59815979]
[-316.87393188 -244.07562256]
[-303.53588867 -251.49580383]
[-288.29870605 -252.38542175]
[-274.18777466 -246.56784058]
[-264.00482178 -235.19813538]
[-259.77166748 -220.53379822]
[-262.32879639 -205.48640442]
[-250.06643677 -196.84729004]
[-237.80406189 -188.20817566]
[-225.54170227 -179.56906128]
[-213.27932739 -170.92994690]
[-201.01696777 -162.29083252]
[-188.75459290 -153.65170288]
[-176.49223328 -145.01258850]
[-164.22985840 -136.37347412]
[-151.96749878 -127.73435974]
[-139.70512390 -119.09524536]
[-130.62373352 -127.95014191]
[-120.17007446 -135.13986206]
[-108.64590454 -140.45538330]
[-96.38414001 -143.74182129]
[-83.73923492 -144.90292358]
[-71.07691956 -143.90391541]
[-58.76364899 -140.77249146]
[-47.15596771 -135.59808350]
[-36.59020615 -128.52928162]
[-27.37272072 -119.76962280]
[-19.77103233 -109.57166290]
[-14.00603962 -98.22973633]
[-10.24561024 -86.07143402]
[-8.59969616 -73.44818115]
[-9.11711121 -60.72504044]
[-11.78409004 -48.27016830]
[-16.52464867 -36.44416428]
[-23.20275116 -25.58963585]
[-12.11143684 -15.49098587]
[-1.02012122 -5.39233637]
[10.07119370 4.70631313]
[22.20580101 4.46421099]
[31.53380775 12.84318924]
[32.66110229 25.73439026]
[43.53992844 36.06159592]
[58.09742355 39.21255493]
[62.77909088 54.32521820]
[73.65791321 64.65242004]
[84.53674316 74.97962952]
[113.06062317 64.24880981]
[144.38796997 85.45204926]
[158.61474609 80.69823456]
[172.84152222 75.94441986]
[179.67395020 61.69332886]
[194.60975647 56.52641678]
[208.78782654 63.50912476]
[213.79652405 78.49873352]
[206.66432190 92.60217285]
[191.62258911 97.45212555]
[177.59533691 90.17119598]
[163.36856079 94.92501068]
[149.14178467 99.67882538]
[149.14178467 114.67882538]
[163.36856079 119.43264008]
[177.59533691 124.18645477]
[187.84814453 112.92591095]
[201.79722595 106.81501770]
[217.02583313 106.91253662]
[230.89550781 113.20157623]
[241.00325012 124.59250641]
[245.59783936 139.11180115]
[243.88322449 154.24388123]
[236.15647888 167.36703491]
[223.75630188 176.20759583]
[208.83110046 179.23388672]
[193.96676636 175.92158508]
[181.73863220 166.84455872]
[174.26527405 153.57545471]
[172.84152222 138.41323853]
[158.61474609 133.65942383]
[144.38796997 128.90560913]
[138.30204773 133.28871155]
[148.50811768 144.28125000]
[158.71420288 155.27380371]
[171.01306152 163.86087036]
[171.12277222 178.86047363]
[158.95080566 187.62651062]
[144.75930786 182.76837158]
[140.51298523 168.38240051]
[133.32159424 155.21865845]
[126.13021851 142.05491638]
[120.04429626 146.43801880]
[120.04429626 161.43801880]
[120.04429626 176.43801880]
[120.04429626 191.43801880]
[120.04429626 206.43801880]
[120.04429626 221.43801880]
[120.04429626 236.43801880]
[120.04429626 251.43801880]
[120.04429626 266.43801880]
[120.04429626 281.43801880]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[14 98]
[15 97]
[16 96]
[18 94]
[19 93]
[21 90]
[22 89]
[23 88]
[24 87]
[36 69]
[37 68]
[38 67]
[39 66]
[40 65]
[41 64]
[42 63]
[43 62]
[44 61]
[45 60]
[46 59]
[100 111]
[101 110]
[102 109]
[112 130]
[113 129]
[114 128]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
