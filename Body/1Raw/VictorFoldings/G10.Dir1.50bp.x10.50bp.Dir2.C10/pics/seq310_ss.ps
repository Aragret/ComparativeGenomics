%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:42 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCAAACCCCCCCUCCCCCGCUUCUGGCCACAGCACUUAAACACAUCUCUGCCAAACCCCAAxxxxxxxxxxGGUACCAUAAAUACUUGACCACCUGUAGUACAUAAAAACCCAAUCCACAUCAAAACCCCCCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[-7.89814425 294.18450928]
[-15.62222958 307.04293823]
[-23.34631348 319.90133667]
[-30.93622208 332.83938599]
[-38.39113235 345.85568237]
[-45.84604263 358.87200928]
[-53.30095291 371.88830566]
[-60.75586319 384.90463257]
[-68.21077728 397.92092896]
[-75.66568756 410.93725586]
[-75.06777191 427.32546997]
[-89.10330200 435.80697632]
[-103.33372498 427.65670776]
[-103.12000275 411.25897217]
[-88.68199158 403.48233032]
[-81.22708130 390.46603394]
[-73.77217102 377.44970703]
[-66.31726074 364.43341064]
[-58.86235428 351.41708374]
[-51.40744400 338.40078735]
[-43.95253372 325.38446045]
[-43.35353088 317.96917725]
[-36.20471573 312.17724609]
[-28.48063087 299.31884766]
[-20.75654602 286.46044922]
[-43.91675568 269.22650146]
[-64.64653015 249.13470459]
[-82.59580231 226.52435303]
[-97.46144104 201.77729797]
[-108.99240112 175.31144714]
[-116.99394989 147.57376099]
[-121.33096313 119.03266144]
[-136.31068420 119.81250763]
[-151.29039001 120.59235382]
[-164.74494934 129.96823120]
[-179.47505188 122.76016998]
[-180.32763672 106.38320160]
[-166.42562866 97.68454742]
[-152.07023621 105.61264038]
[-137.09053040 104.83279419]
[-122.11080933 104.05294800]
[-122.02642822 92.65814972]
[-121.35785675 81.28266907]
[-120.10684204 69.95642853]
[-118.27668762 58.70924759]
[-115.87220001 47.57070923]
[-112.89971924 36.57012177]
[-109.36705017 25.73642921]
[-105.28349304 15.09813976]
[-100.65979767 4.68324423]
[-95.50812531 -5.48085451]
[-89.84203339 -15.36741257]
[-83.67643738 -24.95041466]
[-77.02754211 -34.20465088]
[-69.91285706 -43.10576630]
[-62.35109711 -51.63034058]
[-54.36215973 -59.75594711]
[-45.96706390 -67.46120453]
[-37.18790054 -74.72583771]
[-28.04776955 -81.53073120]
[-18.57071877 -87.85798645]
[-8.78168583 -93.69094849]
[1.29357386 -99.01427460]
[11.62854958 -103.81394958]
[22.19604683 -108.07734680]
[32.96826172 -111.79325867]
[43.91685104 -114.95189667]
[55.01300812 -117.54496002]
[66.22753143 -119.56561279]
[77.53091431 -121.00855255]
[88.89342499 -121.86996460]
[100.28515625 -122.14760590]
[111.67613983 -121.84072113]
[123.03639221 -120.95013428]
[134.33604431 -119.47818756]
[145.54533386 -117.42874908]
[156.63479614 -114.80721283]
[167.57524109 -111.62047577]
[178.33789062 -107.87692261]
[188.89440918 -103.58640289]
[199.21702576 -98.76020813]
[209.27857971 -93.41104126]
[219.05261230 -87.55296326]
[228.51338196 -81.20140076]
[237.63601685 -74.37306213]
[246.39649963 -67.08591461]
[254.77178955 -59.35913467]
[262.73983765 -51.21304321]
[270.27969360 -42.66908264]
[277.37149048 -33.74973297]
[283.99661255 -24.47845840]
[290.13760376 -14.87965775]
[303.23074341 -22.19876289]
[316.32391357 -29.51786995]
[329.41705322 -36.83697510]
[333.18264771 -42.39824677]
[338.41784668 -44.81153107]
[343.21063232 -44.17523956]
[356.59692383 -50.94335556]
[362.94802856 -65.67572784]
[378.46340942 -69.75650787]
[391.24096680 -60.05528641]
[391.47885132 -44.01399612]
[378.99459839 -33.93814850]
[363.36502075 -37.55707169]
[349.97872925 -30.78895569]
[336.73614502 -23.74382019]
[323.64300537 -16.42471504]
[310.54983521 -9.10560894]
[297.45669556 -1.78650343]
[303.27734375 10.40112209]
[308.34658813 22.91994476]
[312.64569092 35.72369003]
[316.15878296 48.76502991]
[318.87283325 61.99575424]
[320.77783203 75.36695862]
[321.86676025 88.82922363]
[322.13552856 102.33277893]
[321.58322144 115.82770538]
[320.21182251 129.26412964]
[318.02642822 142.59237671]
[315.03512573 155.76319885]
[311.24893188 168.72787476]
[306.68188477 181.43850708]
[301.35086060 193.84811401]
[295.27554321 205.91081238]
[288.47839355 217.58201599]
[280.98455811 228.81858826]
[272.82171631 239.57899475]
[264.02005005 249.82344055]
[254.61207581 259.51409912]
[244.63259888 268.61508179]
[234.11849976 277.09280396]
[223.10864258 284.91592407]
[211.64370728 292.05551147]
[199.76609802 298.48516846]
[187.51971436 304.18115234]
[174.94979858 309.12237549]
[162.10285950 313.29058838]
[149.02633667 316.67037964]
[135.76860046 319.24926758]
[122.37865448 321.01773071]
[108.90598297 321.96917725]
[95.40039062 322.10015869]
[81.91179657 321.41015625]
[68.49006653 319.90170288]
[55.18481445 317.58041382]
[42.04521561 314.45483398]
[29.11984444 310.53656006]
[16.45647812 305.84002686]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 25]
[2 24]
[3 23]
[4 21]
[5 20]
[6 19]
[7 18]
[8 17]
[9 16]
[10 15]
[32 41]
[33 40]
[34 39]
[92 110]
[93 109]
[94 108]
[95 107]
[98 106]
[99 105]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
