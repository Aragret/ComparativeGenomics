%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:19 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCUCCCUCUCUCCUACUCCUGCUCGCAUCUGCUAUAGUGGAGGCCGGAGCAGGAACAGGUUxxxxxxxxxxAUCUCCACCUCCAUCAUCACCUCAACCCAAAAAGGCAUAAUUAAACUUUACUUCCUCUCUCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[77.37311554 265.55694580]
[77.37311554 250.55694580]
[77.37311554 235.55694580]
[77.37311554 220.55694580]
[77.37311554 205.55694580]
[77.37311554 190.55694580]
[77.37311554 175.55694580]
[77.37311554 160.55694580]
[77.37311554 145.55694580]
[77.37311554 130.55694580]
[70.18173218 143.72067261]
[65.63243103 158.01417542]
[54.31131744 167.85450745]
[39.52354431 170.36883545]
[25.58637238 164.82310486]
[16.56871605 152.83636475]
[15.10325718 137.90812683]
[21.61783409 124.39662933]
[34.21052933 116.24654388]
[49.20551300 115.83738708]
[63.84681702 112.57669067]
[49.43460083 108.41880798]
[35.02238846 104.26091766]
[21.30563164 111.64253998]
[6.74882555 107.22054291]
[-0.20389374 94.09822845]
[-14.61610985 89.94033813]
[-29.02832603 85.78244781]
[-43.44054031 81.62456512]
[-57.85275650 77.46667480]
[-72.26497650 73.30879211]
[-86.67719269 69.15090179]
[-101.08940887 64.99301147]
[-115.58499908 61.13585281]
[-130.15769958 57.58109283]
[-145.39837646 61.82756424]
[-155.92947388 51.29450989]
[-170.50218201 47.73974609]
[-185.07487488 44.18498611]
[-199.64758301 40.63022232]
[-214.22029114 37.07546234]
[-229.80061340 42.19264603]
[-241.84030151 31.05811691]
[-237.95396423 15.12612247]
[-222.13952637 10.78613472]
[-210.66552734 22.50275803]
[-196.09281921 26.05752182]
[-181.52012634 29.61228371]
[-166.94741821 33.16704559]
[-152.37471008 36.72180557]
[-138.17637634 32.22107697]
[-126.60294342 43.00838852]
[-112.03024292 46.56315231]
[-107.50679016 44.85613632]
[-101.86059570 46.01881409]
[-96.93151855 50.58079910]
[-82.51930237 54.73868561]
[-68.10708618 58.89657211]
[-53.69487000 63.05445862]
[-39.28265381 67.21234894]
[-24.87043762 71.37023163]
[-10.45822239 75.52812195]
[3.95399380 79.68601227]
[16.82802773 72.28366089]
[31.50329590 76.29503632]
[39.18027496 89.84870148]
[53.59249115 94.00659180]
[68.00470734 98.16447449]
[102.78328705 75.78585815]
[111.03557587 63.25989532]
[99.92990112 53.13021088]
[90.54568481 41.38785172]
[83.11402130 28.32198715]
[77.81792450 14.25437164]
[74.78781128 -0.46856645]
[74.09829712 -15.48426056]
[75.76637268 -30.42293549]
[79.75095367 -44.91671371]
[85.95391846 -58.60867310]
[94.22251129 -71.16163635]
[104.35311127 -82.26647186]
[116.09624481 -91.64971924]
[129.16271973 -99.08030701]
[143.23077393 -104.37524414]
[157.95396423 -107.40414429]
[172.96971130 -108.09241486]
[187.90824890 -106.42311096]
[202.40170288 -102.43733215]
[216.09313965 -96.23323822]
[228.64543152 -87.96361542]
[239.74943542 -77.83209991]
[249.13171387 -66.08818817]
[256.56121826 -53.02109909]
[261.85498047 -38.95260620]
[264.88269043 -24.22916985]
[265.56970215 -9.21336269]
[263.89916992 5.72503710]
[259.91220093 20.21815681]
[253.70697021 33.90909195]
[245.43630981 46.46068954]
[235.30387878 57.56385803]
[223.55920410 66.94516754]
[210.49150085 74.37359619]
[196.42256165 79.66621399]
[181.69888306 82.69268036]
[166.68301392 83.37847900]
[151.74475098 81.70670319]
[137.25196838 77.71853638]
[123.56153870 71.51218414]
[115.30924988 84.03814697]
[120.50466919 98.10966492]
[134.91688538 102.26755524]
[149.32910156 106.42543793]
[163.74131775 110.58332825]
[174.28588867 99.48961639]
[188.78187561 94.57791138]
[203.89820862 96.97689056]
[216.16127014 106.13528442]
[222.75308228 119.94855499]
[222.15888977 135.24252319]
[214.51525879 148.50274658]
[201.57862854 156.68211365]
[186.32174683 157.90107727]
[172.25051880 151.87951660]
[162.59841919 140.00115967]
[159.58341980 124.99554443]
[145.17120361 120.83765411]
[130.75898743 116.67977142]
[116.34677887 112.52188110]
[110.35336304 117.03064728]
[121.00787354 127.58911896]
[131.66238403 138.14759827]
[145.19680786 144.61439514]
[149.69697571 158.92343140]
[142.30039978 171.97297668]
[127.71192169 175.46243286]
[115.21102142 167.17222595]
[112.74929810 152.37565613]
[105.55791473 139.21191406]
[98.36653137 126.04817963]
[92.37311554 130.55694580]
[92.37311554 145.55694580]
[92.37311554 160.55694580]
[92.37311554 175.55694580]
[92.37311554 190.55694580]
[92.37311554 205.55694580]
[92.37311554 220.55694580]
[92.37311554 235.55694580]
[92.37311554 250.55694580]
[92.37311554 265.55694580]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[21 68]
[22 67]
[23 66]
[26 63]
[27 62]
[28 61]
[29 60]
[30 59]
[31 58]
[32 57]
[33 56]
[34 53]
[35 52]
[37 50]
[38 49]
[39 48]
[40 47]
[41 46]
[69 110]
[70 109]
[111 129]
[112 128]
[113 127]
[114 126]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
