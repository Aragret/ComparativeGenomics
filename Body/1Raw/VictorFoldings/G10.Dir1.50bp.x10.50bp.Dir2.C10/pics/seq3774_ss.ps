%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:13 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGUAGCCCAAACAAUCUCAUAUGAAGUCACCCUAGCCAUCAUUCUACUAUCAACAUUACUAAxxxxxxxxxxCAUCAUAGGAGGCUUCAUUCACUGAUUUCCCCUAUUCUCAGGCUACACCCUAGACCAAACCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[135.00112915 352.24267578]
[134.68907166 337.24591064]
[134.37701416 322.24917603]
[134.06495667 307.25241089]
[133.75289917 292.25564575]
[133.44084167 277.25891113]
[133.12878418 262.26214600]
[132.81672668 247.26539612]
[132.50466919 232.26864624]
[130.01956177 217.47593689]
[125.41399384 203.20046997]
[120.80842590 188.92501831]
[116.20286560 174.64955139]
[111.59729767 160.37408447]
[106.99172974 146.09863281]
[86.60093689 144.65907288]
[68.78556824 134.63563538]
[56.96989822 117.95490265]
[53.42501831 97.82306671]
[58.83228302 78.10966492]
[72.15236664 62.60378265]
[65.24536133 49.28862762]
[58.33836746 35.97347260]
[51.43136597 22.65831566]
[34.93708801 22.09491920]
[21.04699516 13.35644913]
[13.48583031 -1.10241747]
[14.22497463 -17.30845642]
[22.96936607 -30.86158371]
[15.78685760 -44.03016663]
[8.60434818 -57.19874954]
[1.42183959 -70.36733246]
[-5.76066923 -83.53591156]
[-12.94317818 -96.70449829]
[-20.12568665 -109.87307739]
[-27.30819511 -123.04166412]
[-39.47602844 -127.44594574]
[-45.17460632 -138.61488342]
[-41.82030487 -150.27919006]
[-48.72730255 -163.59434509]
[-55.63430405 -176.90950012]
[-62.54130173 -190.22465515]
[-76.71102905 -185.22814941]
[-91.43824768 -182.25241089]
[-106.43629456 -181.35533142]
[-121.41322327 -182.55438232]
[-136.07749939 -185.82621765]
[-150.14369202 -191.10716248]
[-163.33799744 -198.29443359]
[-175.40356445 -207.24809265]
[-186.10554504 -217.79388428]
[-195.23564148 -229.72651672]
[-202.61610413 -242.81370544]
[-208.10327148 -256.80075073]
[-211.59036255 -271.41534424]
[-213.00947571 -286.37301636]
[-212.33299255 -301.38262939]
[-209.57408142 -316.15200806]
[-204.78645325 -330.39367676]
[-198.06327820 -343.83038330]
[-189.53544617 -356.20059204]
[-179.36895752 -367.26351929]
[-167.76168823 -376.80383301]
[-154.93959045 -384.63580322]
[-141.15225220 -390.60702515]
[-126.66802216 -394.60119629]
[-111.76887512 -396.54061890]
[-96.74480438 -396.38751221]
[-81.88825989 -394.14489746]
[-67.48844147 -389.85638428]
[-53.82563400 -383.60549927]
[-41.16579056 -375.51385498]
[-29.75534248 -365.73898315]
[-19.81639481 -354.47119141]
[-11.54241180 -341.92977905]
[-5.09444904 -328.35885620]
[-0.59801859 -314.02258301]
[1.85935545 -299.20004272]
[2.22983956 -284.17977905]
[0.50622231 -269.25411987]
[-3.27794576 -254.71360779]
[-9.04900455 -240.84130859]
[-16.69461823 -227.90721130]
[-26.06596565 -216.16310120]
[-36.98062515 -205.83758545]
[-49.22614670 -197.13165283]
[-42.31914520 -183.81649780]
[-35.41214752 -170.50134277]
[-28.50514984 -157.18618774]
[-13.23941135 -148.58634949]
[-14.13961315 -130.22416687]
[-6.95710468 -117.05558777]
[0.22540434 -103.88700104]
[7.40791321 -90.71842194]
[14.59042168 -77.54984283]
[21.77293015 -64.38125610]
[28.95544052 -51.21267319]
[36.13794708 -38.04409027]
[49.81789398 -38.60847473]
[62.46164322 -33.18493652]
[71.56816101 -22.78402328]
[75.30928040 -9.40684319]
[72.89654541 4.33978462]
[64.74652100 15.75131702]
[71.65351868 29.06647301]
[78.56051636 42.38162613]
[85.46752167 55.69678497]
[95.17100525 53.62491226]
[105.09317017 53.65318298]
[114.78469849 55.78031158]
[123.80667877 59.90997314]
[131.75054932 65.85515594]
[138.25656128 73.34661102]
[143.03010559 82.04509735]
[145.85498047 91.55669403]
[146.60325623 101.45064545]
[145.24107361 111.27890778]
[141.83009338 120.59638977]
[136.52479553 128.98114014]
[129.56544495 136.05346680]
[121.26719666 141.49307251]
[125.87275696 155.76852417]
[130.47831726 170.04399109]
[135.08389282 184.31944275]
[139.68945312 198.59490967]
[144.29501343 212.87036133]
[148.38465881 198.43864441]
[157.60171509 186.60453796]
[170.59277344 179.10571289]
[185.45030212 177.04324341]
[199.99270630 180.72000122]
[212.08465576 189.59608459]
[219.95062256 202.36817932]
[222.43560791 217.16091919]
[219.17474365 231.80218506]
[210.64683533 244.14215088]
[198.10406494 252.36886597]
[183.38815308 255.27438354]
[168.65991211 252.43205261]
[156.08195496 244.25923157]
[147.50143433 231.95658875]
[147.81347656 246.95333862]
[148.12553406 261.95010376]
[148.43759155 276.94683838]
[148.74964905 291.94360352]
[149.06170654 306.94033813]
[149.37376404 321.93710327]
[149.68582153 336.93386841]
[149.99787903 351.93060303]
[152.58888245 371.13833618]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 149]
[2 148]
[3 147]
[4 146]
[5 145]
[6 144]
[7 143]
[8 142]
[9 141]
[10 126]
[11 125]
[12 124]
[13 123]
[14 122]
[15 121]
[21 107]
[22 106]
[23 105]
[24 104]
[29 98]
[30 97]
[31 96]
[32 95]
[33 94]
[34 93]
[35 92]
[36 91]
[39 89]
[40 88]
[41 87]
[42 86]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
