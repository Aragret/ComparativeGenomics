%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:06 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGUUAUACCCACACCCACCCAAGAACAGGGUUUGUUAAGAUGGCAGAGCCCGGUAAUCGCAUxxxxxxxxxxAUUCACAGCCACAGAACUAAUCAUAUUUUAUAUCUUCUUCGAAACCACACUUAUCCCCACCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[136.28982544 280.78143311]
[135.66584778 265.79443359]
[135.04187012 250.80741882]
[134.41789246 235.82038879]
[133.79391479 220.83337402]
[133.16993713 205.84635925]
[132.54595947 190.85934448]
[131.92198181 175.87232971]
[129.12965393 161.13452148]
[124.22810364 146.95796204]
[119.32655334 132.78140259]
[114.42500305 118.60485077]
[94.74993134 120.07419586]
[83.45833588 106.98725891]
[68.46563721 106.51921082]
[53.47294617 106.05117035]
[38.48024750 105.58312988]
[23.63904381 107.75996399]
[9.41226387 112.51377869]
[-1.22442365 124.22579956]
[-15.74774265 120.92088318]
[-29.97452164 125.67469788]
[-44.20130157 130.42851257]
[-58.42808151 135.18232727]
[-60.81624603 150.30036926]
[-69.96586609 162.56997681]
[-83.77442932 169.17166138]
[-99.06881714 168.58840942]
[-112.33450317 160.95426941]
[-120.52312469 148.02348328]
[-121.75299835 132.76747131]
[-115.74150085 118.69194794]
[-103.87004089 109.03135681]
[-88.86658478 106.00563812]
[-74.17882538 110.31008148]
[-63.18189621 120.95555115]
[-48.95511627 116.20173645]
[-34.72833633 111.44792175]
[-20.50155640 106.69410706]
[-10.88246441 95.32210541]
[4.65844870 98.28700256]
[18.88522720 93.53318787]
[20.20466042 86.15016174]
[5.43860483 83.51129150]
[-9.42022800 85.56436157]
[-15.96427536 72.06712341]
[-5.14973021 61.67262650]
[8.07746887 68.74523926]
[22.84352493 71.38410187]
[24.16295624 64.00107574]
[12.46333313 54.61391449]
[0.76370931 45.22675323]
[-15.37428093 40.03044510]
[-14.84848881 23.08465385]
[1.58060992 18.89883614]
[10.15087128 33.52713013]
[21.85049438 42.91429138]
[33.55011749 52.30145264]
[43.52345276 72.97029114]
[38.94829178 90.59043121]
[53.94098663 91.05847931]
[68.93368530 91.52651978]
[83.92637634 91.99456024]
[99.65675354 79.25346375]
[120.71421814 88.81329346]
[130.92768860 77.82762909]
[141.14117432 66.84196472]
[131.40361023 55.40971375]
[123.05912781 42.92427826]
[116.22056580 29.55451393]
[110.98041534 15.48122883]
[107.40953827 0.89474964]
[105.55623627 -14.00765896]
[105.44556427 -29.02445793]
[107.07901764 -43.95256424]
[110.43451691 -58.59009171]
[115.46666718 -72.73908234]
[122.10742950 -86.20819092]
[130.26698303 -98.81525421]
[139.83499146 -110.38978577]
[150.68205261 -120.77525330]
[162.66145325 -129.83120728]
[175.61122131 -137.43516541]
[189.35620117 -143.48429871]
[203.71051025 -147.89678955]
[218.48004150 -150.61299133]
[233.46502686 -151.59614563]
[248.46282959 -150.83296204]
[263.27062988 -148.33375549]
[277.68814087 -144.13233948]
[291.52038574 -138.28553772]
[304.58032227 -130.87240601]
[316.69131470 -121.99319458]
[327.68957520 -111.76799774]
[337.42639160 -100.33509064]
[345.77005005 -87.84910583]
[352.60769653 -74.47888184]
[357.84692383 -60.40524673]
[361.41680908 -45.81853104]
[363.26913452 -30.91599846]
[363.37881470 -15.89919090]
[361.74435425 -0.97119397]
[358.38787842 13.66610813]
[353.35476685 27.81476402]
[346.71313477 41.28342819]
[338.55273438 53.88994980]
[328.98394775 65.46384430]
[318.13619995 75.84858704]
[306.15618896 84.90373230]
[293.20590210 92.50682831]
[279.46051025 98.55504608]
[265.10592651 102.96658325]
[250.33621216 105.68179321]
[235.35115051 106.66394806]
[220.35340881 105.89976501]
[205.54577637 103.39957428]
[191.12855530 99.19719696]
[177.29669189 93.34946442]
[164.23724365 85.93546295]
[152.12684631 77.05544281]
[141.91336060 88.04110718]
[131.69987488 99.02677155]
[128.60156250 113.70330048]
[133.50311279 127.87985992]
[138.40466309 142.05641174]
[143.30621338 156.23297119]
[147.09474182 141.71928406]
[156.06359863 129.69599915]
[168.89584351 121.92852783]
[183.70726013 119.55742645]
[198.32299805 122.93084717]
[210.59698486 131.55345154]
[218.72695923 144.15914917]
[221.51914978 158.89697266]
[218.56358337 173.60292053]
[210.29423523 186.11761475]
[197.92532349 194.60350037]
[183.27305603 197.81452942]
[168.48886108 195.27920532]
[155.74360657 187.36982727]
[146.90899658 175.24835205]
[147.53297424 190.23536682]
[148.15695190 205.22238159]
[148.78092957 220.20939636]
[149.40490723 235.19641113]
[150.02888489 250.18344116]
[150.65286255 265.17044067]
[151.27684021 280.15747070]
[157.97682190 295.73138428]
[144.86630249 306.48080444]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 148]
[2 147]
[3 146]
[4 145]
[5 144]
[6 143]
[7 142]
[8 141]
[9 126]
[10 125]
[11 124]
[12 123]
[14 63]
[15 62]
[16 61]
[17 60]
[18 42]
[19 41]
[21 39]
[22 38]
[23 37]
[24 36]
[50 58]
[51 57]
[52 56]
[65 122]
[66 121]
[67 120]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
