%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:11 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGUCACCCCCCAACUAACACAUUAUUUUCCCCUCCCACUCCCAUACUACUAAUCUCAUCAAUACxxxxxxxxxxUCCCCCUCUAUUGAUCCCCACCUCCAAAUAUCUCAUCAACAACCGACUAAUCACCACCCAACCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[143.75637817 71.31651306]
[132.67726135 81.42855835]
[121.59815979 91.54059601]
[110.51905060 101.65264130]
[101.33746338 113.51427460]
[94.32523346 126.77431488]
[87.31300354 140.03434753]
[80.30077362 153.29438782]
[73.28854370 166.55442810]
[66.27631378 179.81446838]
[64.21678925 196.64285278]
[47.47592545 199.32238770]
[40.26678848 183.97752380]
[53.01627731 172.80224609]
[60.02850723 159.54220581]
[67.04073334 146.28216553]
[74.05296326 133.02212524]
[81.06519318 119.76208496]
[88.07742310 106.50204468]
[77.63327789 95.73544312]
[64.16620636 102.34135437]
[55.18381119 115.36545563]
[40.34974670 114.02388763]
[26.88267899 120.62979889]
[13.41561031 127.23571014]
[4.73020124 141.14598083]
[-11.64757347 140.30899048]
[-18.86966133 125.58576202]
[-9.50659943 112.12229156]
[6.80969858 113.76863861]
[20.27676582 107.16272736]
[33.74383545 100.55681610]
[41.76297379 88.00521851]
[57.56029510 88.87428284]
[71.02735901 82.26837158]
[89.80159760 80.84398651]
[100.40701294 90.57353210]
[111.48612213 80.46148682]
[122.56522369 70.34944916]
[133.64433289 60.23740768]
[122.21155548 45.32333755]
[112.24633026 29.39186478]
[103.83854675 12.58691120]
[97.06404877 -4.93972731]
[91.98390198 -23.02974510]
[88.64389801 -41.51976013]
[87.07408142 -60.24278259]
[87.28853607 -79.02973938]
[89.28521729 -97.71097565]
[93.04598999 -116.11781311]
[98.53680420 -134.08404541]
[105.70796967 -151.44747925]
[114.49463654 -168.05134583]
[124.81736755 -183.74577332]
[136.58287048 -198.38908386]
[149.68481445 -211.84910583]
[164.00480652 -224.00436401]
[179.41346741 -234.74519348]
[195.77162170 -243.97467041]
[212.93147278 -251.60954285]
[230.73803711 -257.58096313]
[249.03047180 -261.83511353]
[267.64358521 -264.33364868]
[286.40930176 -265.05413818]
[305.15811157 -263.99017334]
[307.27914429 -278.83944702]
[309.40020752 -293.68875122]
[311.52124023 -308.53802490]
[313.64227295 -323.38729858]
[315.76333618 -338.23657227]
[317.88436890 -353.08587646]
[304.20840454 -359.52478027]
[293.03906250 -369.70989990]
[285.36947632 -382.73559570]
[281.88165283 -397.44363403]
[282.88571167 -412.52618408]
[288.29238892 -426.64212036]
[297.62088013 -438.53625488]
[310.04177856 -447.15093994]
[324.45056152 -451.72021484]
[339.56604004 -451.83776855]
[354.04412842 -447.49313354]
[366.59750366 -439.07263184]
[376.10986328 -427.32504272]
[381.73538208 -413.29489136]
[382.97390747 -398.22979736]
[379.71524048 -383.46926880]
[372.24914551 -370.32586670]
[361.23956299 -359.96826172]
[347.66537476 -353.31744385]
[332.73364258 -350.96481323]
[330.61260986 -336.11553955]
[328.49157715 -321.26626587]
[326.37051392 -306.41699219]
[324.24948120 -291.56768799]
[322.12844849 -276.71841431]
[320.00738525 -261.86914062]
[332.30160522 -259.22982788]
[344.40322876 -255.81393433]
[356.26324463 -251.63526917]
[367.83364868 -246.71072388]
[379.06756592 -241.06021118]
[389.91952515 -234.70661926]
[400.34555054 -227.67564392]
[410.30343628 -219.99572754]
[419.75286865 -211.69795227]
[428.65554810 -202.81590271]
[436.97543335 -193.38552856]
[444.67880249 -183.44500732]
[451.73446655 -173.03454590]
[458.11383057 -162.19630432]
[463.79107666 -150.97415161]
[468.74316406 -139.41351318]
[472.95007324 -127.56120300]
[476.39468384 -115.46517181]
[479.06311035 -103.17441559]
[480.94445801 -90.73867798]
[482.03112793 -78.20832062]
[482.31869507 -65.63405609]
[481.80599976 -53.06681061]
[480.49505615 -40.55745697]
[478.39114380 -28.15665245]
[475.50283813 -15.91460609]
[471.84173584 -3.88088703]
[467.42266846 7.89577532]
[462.26351929 19.36769295]
[456.38513184 30.48841095]
[449.81134033 41.21289444]
[442.56869507 51.49770737]
[434.68652344 61.30120468]
[426.19671631 70.58367920]
[417.13363647 79.30752563]
[407.53396606 87.43742371]
[397.43658447 94.94043732]
[386.88232422 101.78616333]
[375.91390991 107.94687653]
[364.57574463 113.39762115]
[352.91375732 118.11629486]
[340.97512817 122.08379364]
[328.80819702 125.28401947]
[316.46221924 127.70400238]
[303.98715210 129.33392334]
[291.43353271 130.16717529]
[278.85220337 130.20034790]
[266.29406738 129.43330383]
[253.80999756 127.86911011]
[241.45051575 125.51409912]
[229.26568604 122.37776947]
[217.30482483 118.47281647]
[205.61640930 113.81502533]
[194.24772644 108.42323303]
[183.24482727 102.31925201]
[172.65228271 95.52778625]
[162.51298523 88.07631683]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 40]
[2 39]
[3 38]
[4 37]
[5 19]
[6 18]
[7 17]
[8 16]
[9 15]
[10 14]
[20 35]
[21 34]
[23 32]
[24 31]
[25 30]
[65 97]
[66 96]
[67 95]
[68 94]
[69 93]
[70 92]
[71 91]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
