%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:00 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGUCACUCAGCCAUUUUACCUCACCCCCACUGAUGUUCGCCGACCGUUGACUAUUCUCUACAAxxxxxxxxxxUAGUCACAGCCCUAUACUCCCUCUACAUAUUUACCACAACACAAUGGGGCUCACUCACCCACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[76.55995941 118.85218048]
[66.22905731 129.72749329]
[55.89815521 140.60281372]
[45.56725311 151.47811890]
[35.23635101 162.35343933]
[31.34150696 177.68774414]
[16.96618843 181.58639526]
[6.63528633 192.46170044]
[-3.69561648 203.33702087]
[-14.02651882 214.21232605]
[-24.35742188 225.08764648]
[-18.14981461 238.96330261]
[-17.72971725 254.15843201]
[-23.16119194 268.35589600]
[-33.61597824 279.39065552]
[-47.49979401 285.57998657]
[-62.69546509 285.98010254]
[-76.88575745 280.52996826]
[-87.90675354 270.06066895]
[-94.07782745 256.16873169]
[-94.45794678 240.97253418]
[-88.98914337 226.78942871]
[-78.50536346 215.78221130]
[-64.60530853 209.62940979]
[-49.40863800 209.26928711]
[-35.23273468 214.75674438]
[-24.90183258 203.88142395]
[-14.57093048 193.00611877]
[-4.24002743 182.13079834]
[6.09087515 171.25549316]
[9.24678421 156.69906616]
[24.36103821 152.02253723]
[34.69194031 141.14721680]
[45.02284241 130.27191162]
[55.35374451 119.39659119]
[65.68464661 108.52127838]
[64.45818329 101.12223816]
[50.17806244 105.71332550]
[39.08525085 115.81033325]
[24.19230270 114.02144623]
[15.80617142 101.58469391]
[19.73063850 87.10717010]
[33.24970245 80.60832977]
[47.00754547 86.58616638]
[62.00525665 86.32416534]
[60.77879333 78.92512512]
[47.49145126 71.96476746]
[31.81135941 75.35803223]
[19.47362137 65.10328674]
[19.94269371 49.06709671]
[32.85874557 39.55104828]
[48.31368637 43.85504150]
[54.45180893 58.67742538]
[67.73915100 65.63777924]
[80.90046692 79.45145416]
[93.92251587 93.39553070]
[90.86412048 78.71063232]
[87.80572510 64.02573395]
[84.74732971 49.34083557]
[81.68893433 34.65593719]
[78.63053894 19.97104073]
[63.57255554 18.77362633]
[49.46236801 13.38110352]
[37.44382858 4.23061895]
[28.49122429 -7.93603849]
[23.33030319 -22.13257217]
[22.37943840 -37.20813370]
[25.71571159 -51.94061279]
[33.06866837 -65.13571167]
[43.84223175 -75.72377014]
[57.16304398 -82.84645844]
[71.95124054 -85.92636871]
[87.00801849 -84.71382904]
[101.11277771 -79.30712891]
[113.12212372 -70.14457703]
[122.06250000 -57.96893311]
[127.20915222 -43.76722336]
[128.14486694 -28.69071388]
[124.79380035 -13.96159267]
[117.42759705 -0.77388406]
[106.64339447 9.80334473]
[93.31543732 16.91264534]
[96.37383270 31.59754181]
[99.43222809 46.28244019]
[102.49062347 60.96733856]
[105.54901886 75.65223694]
[108.60741425 90.33713531]
[112.96373749 75.98365021]
[110.95124817 61.11926651]
[111.23107147 46.12187576]
[113.79665375 31.34291267]
[118.58787537 17.12868690]
[125.49246216 3.81228113]
[134.34861755 -8.29426384]
[144.94882202 -18.90725708]
[157.04469299 -27.77800560]
[170.35276794 -34.69864273]
[184.56120300 -39.50699615]
[199.33706665 -42.09039307]
[214.33410645 -42.38829803]
[229.20089722 -40.39373016]
[243.58908081 -36.15342712]
[257.16149902 -29.76675224]
[269.60009766 -21.38336372]
[280.61340332 -11.19970608]
[289.94335938 0.54558480]
[297.37133789 13.57728481]
[302.72326660 27.59002304]
[305.87374878 42.25544357]
[306.74893188 57.22988892]
[305.32833862 72.16246796]
[301.64526367 86.70326996]
[295.78598022 100.51155090]
[287.88778687 113.26375580]
[278.13577271 124.66105652]
[266.75848389 134.43638611]
[254.02249146 142.36068726]
[240.22624207 148.24824524]
[225.69302368 151.96112061]
[210.76338196 153.41230774]
[195.78717041 152.56779480]
[181.11532593 149.44737244]
[167.09165955 144.12416077]
[154.04476929 136.72290039]
[142.28038025 127.41703033]
[132.07620239 116.42713928]
[118.22087860 110.67997742]
[127.62473297 122.36618805]
[137.02859497 134.05239868]
[146.43244934 145.73860168]
[161.28602600 142.22663879]
[176.19058228 145.51559448]
[188.18678284 154.95242310]
[194.89279175 168.66343689]
[194.97712708 183.92633057]
[188.42303467 197.71061707]
[176.53182983 207.27941895]
[161.66453552 210.73286438]
[146.77305603 207.38525391]
[134.81410217 197.90126038]
[128.16213989 184.16392517]
[128.13790894 168.90083313]
[134.74624634 155.14245605]
[125.34238434 143.45625305]
[115.93852234 131.77005005]
[106.53466797 120.08383179]
[99.04099274 119.77592468]
[107.90412140 131.87736511]
[103.96907806 146.35200500]
[90.19895172 152.30041504]
[76.96267700 145.24342346]
[74.22720337 130.49496460]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 36]
[2 35]
[3 34]
[4 33]
[5 32]
[7 30]
[8 29]
[9 28]
[10 27]
[11 26]
[46 54]
[47 53]
[56 87]
[57 86]
[58 85]
[59 84]
[60 83]
[61 82]
[127 146]
[128 145]
[129 144]
[130 143]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
