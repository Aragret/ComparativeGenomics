%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:40 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCUACUCAUUCAACCAAUAGCCCUGGCCGUACGCCUAACCGCUAACAUUACUGCAGGCCACCUAxxxxxxxxxxACACCAAUGACCCCAAUACGCAAAACUAACCCCCUAAUAAAAUUAAUUAACCACUCAUUCAUCCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[182.11383057 80.97435760]
[179.41783142 66.21222687]
[164.50857544 67.85973358]
[152.70812988 76.94810486]
[138.14163208 70.77333832]
[123.23237610 72.42084503]
[103.48383331 132.26420593]
[92.71925354 142.71044922]
[81.95467377 153.15667725]
[71.19009399 163.60290527]
[60.42551041 174.04914856]
[49.66093063 184.49537659]
[38.89634705 194.94161987]
[44.17952728 209.22474670]
[43.18999863 224.42147827]
[36.09920502 237.89889526]
[24.13566780 247.32192993]
[9.37214279 251.05799866]
[-5.63349867 248.45980835]
[-18.28144073 239.97750854]
[-26.38034821 227.08070374]
[-28.52704048 212.00384521]
[-24.34958649 197.35910034]
[-14.57175636 185.68373108]
[-0.88761926 179.00061035]
[14.33196640 178.46759033]
[28.45011520 184.17703247]
[39.21469498 173.73080444]
[49.97927475 163.28456116]
[60.74385834 152.83833313]
[71.50843811 142.39210510]
[82.27301788 131.94586182]
[93.03759766 121.49963379]
[87.33203125 107.62712097]
[72.33277893 107.77719879]
[57.33353043 107.92726898]
[45.12179184 118.33174133]
[29.40147591 115.12997437]
[22.23186874 100.77809906]
[29.11287689 86.28564453]
[44.76597977 82.76998138]
[57.18345642 92.92802429]
[72.18270874 92.77794647]
[87.18195343 92.62787628]
[89.75494385 85.58303833]
[80.12588501 74.08168030]
[94.90090942 71.49335480]
[97.47389221 64.44851685]
[86.10198975 54.66691589]
[74.63278961 44.99958038]
[63.06744003 35.44747162]
[48.70434189 40.88778305]
[33.54796600 38.40184402]
[21.67530441 28.65836143]
[16.28004074 14.27828026]
[18.81347656 -0.87022728]
[28.59412766 -12.71228981]
[42.99104691 -18.06245041]
[58.13154221 -15.48154545]
[69.94288635 -5.66382313]
[75.24789429 8.74979782]
[72.61954498 23.88212585]
[84.18489075 33.43423080]
[91.38514709 35.27927399]
[95.88359070 43.29500961]
[107.25549316 53.07661438]
[121.58486938 57.51159668]
[136.49412537 55.86408997]
[149.36097717 46.65787506]
[162.86106873 52.95048141]
[177.77032471 51.30297470]
[177.17813110 36.30836868]
[177.64514160 21.30933952]
[179.16899109 6.38061714]
[181.74211121 -8.40342712]
[185.35168457 -22.96913910]
[189.97972107 -37.24394989]
[195.60314941 -51.15674591]
[202.19398499 -64.63820648]
[209.71936035 -77.62117767]
[218.14181519 -90.04096985]
[227.41937256 -101.83571625]
[237.50579834 -112.94664764]
[248.35086060 -123.31841278]
[259.90054321 -132.89933777]
[272.09725952 -141.64169312]
[284.88027954 -149.50190735]
[298.18591309 -156.44085693]
[311.94787598 -162.42393494]
[326.09762573 -167.42135620]
[340.56460571 -171.40821838]
[355.27679443 -174.36466980]
[370.16085815 -176.27595520]
[385.14270020 -177.13256836]
[400.14764404 -176.93023682]
[415.10092163 -175.66998291]
[429.92803955 -173.35806274]
[444.55517578 -170.00601196]
[458.90939331 -165.63052368]
[472.91925049 -160.25340271]
[486.51486206 -153.90142822]
[499.62857056 -146.60624695]
[512.19500732 -138.40422058]
[524.15161133 -129.33618164]
[535.43872070 -119.44732666]
[546.00018311 -108.78691864]
[555.78338623 -97.40806580]
[564.73956299 -85.36745453]
[572.82403564 -72.72508240]
[579.99664307 -59.54392624]
[586.22155762 -45.88965607]
[591.46783447 -31.83029366]
[595.70928955 -17.43588638]
[598.92480469 -2.77814555]
[601.09838867 12.06990337]
[602.21917725 27.03428650]
[602.28155518 42.04045105]
[601.28527832 57.01364136]
[599.23529053 71.87925720]
[596.14184570 86.56323242]
[592.02026367 100.99242401]
[586.89111328 115.09493256]
[580.77996826 128.80050659]
[573.71722412 142.04087830]
[565.73815918 154.75006104]
[556.88250732 166.86473083]
[547.19427490 178.32456970]
[536.72186279 189.07246399]
[525.51733398 199.05485535]
[513.63659668 208.22203064]
[501.13882446 216.52830505]
[488.08627319 223.93231201]
[474.54394531 230.39714050]
[460.57931519 235.89062500]
[446.26196289 240.38534546]
[431.66323853 243.85894775]
[416.85583496 246.29411316]
[401.91354370 247.67871094]
[386.91082764 248.00582886]
[371.92239380 247.27386475]
[357.02291870 245.48643494]
[342.28665161 242.65246582]
[327.78701782 238.78607178]
[313.59619141 233.90652466]
[299.78494263 228.03811646]
[286.42205811 221.21008301]
[273.57409668 213.45645142]
[261.30508423 204.81585693]
[249.67611694 195.33132935]
[238.74514771 185.05012512]
[228.56665039 174.02348328]
[219.19131470 162.30632019]
[210.66584778 149.95700073]
[203.03273010 137.03707886]
[196.33000183 123.61090088]
[190.59103394 109.74536133]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 71]
[3 70]
[5 68]
[6 67]
[7 33]
[8 32]
[9 31]
[10 30]
[11 29]
[12 28]
[13 27]
[34 44]
[35 43]
[36 42]
[48 66]
[49 65]
[50 63]
[51 62]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
