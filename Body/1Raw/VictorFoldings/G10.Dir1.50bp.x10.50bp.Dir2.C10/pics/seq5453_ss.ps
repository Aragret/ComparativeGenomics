%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:53 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGAAGCUAACAUGACUAACACCCUUAAUUCCAUCCACCCUCCUCUCCCUAGGAGGCCUGCCCxxxxxxxxxxUUCCAAGGACAAAUCAGAGAAAAAGUCUUUAACUCCACCAUUAGCACCCAAAGCUAAGAUCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[144.76591492 360.88748169]
[143.83029175 345.91668701]
[142.89465332 330.94589233]
[141.95903015 315.97512817]
[141.02339172 301.00433350]
[140.08776855 286.03353882]
[139.15214539 271.06274414]
[136.51327515 256.29669189]
[132.20568848 241.92849731]
[127.89810944 227.56031799]
[117.37133026 221.51927185]
[113.68977356 209.53323364]
[119.36161041 197.90205383]
[115.35386658 183.44737244]
[111.34613037 168.99269104]
[107.33838654 154.53799438]
[103.33065033 140.08331299]
[81.10896301 135.50906372]
[64.89787292 119.63684082]
[50.67109680 124.39065552]
[36.44431686 129.14447021]
[36.34116364 144.28607178]
[31.32477951 158.57293701]
[21.93929863 170.45533752]
[9.20279026 178.64436340]
[-5.50318432 182.25172424]
[-20.58343124 180.88612366]
[-34.40215683 174.69567871]
[-45.46041107 164.35189819]
[-52.55867767 150.97680664]
[-54.92699051 136.02120972]
[-52.30844498 121.10739136]
[-44.98709106 107.85308838]
[-33.75709152 97.69602966]
[-19.83658981 91.73798370]
[-4.73558092 90.62522125]
[9.90789223 94.47845459]
[22.50541496 102.87971497]
[31.69050217 114.91769409]
[45.91728210 110.16387939]
[60.14405823 105.41006470]
[57.52143097 95.33142853]
[57.55594635 84.32148743]
[60.53407288 73.10255432]
[66.54230499 62.47717667]
[75.44638824 53.27231216]
[63.94458389 43.64378738]
[52.44277954 34.01525879]
[40.94097519 24.38673401]
[29.43917274 14.75820827]
[17.93737030 5.12968206]
[2.21893573 6.77479172]
[-10.00616550 -3.24131775]
[-11.48499870 -18.97626686]
[-1.34019792 -31.09478760]
[14.40950584 -32.40717697]
[26.42009354 -22.13482094]
[27.56589508 -6.37212133]
[39.06769943 3.25640464]
[50.56950378 12.88493061]
[62.07130432 22.51345634]
[73.57311249 32.14198303]
[85.07491302 41.77050781]
[98.73115540 35.56510162]
[99.04321289 20.56834984]
[99.35526276 5.57159519]
[85.00173950 0.83157724]
[72.68401337 -7.92998695]
[63.49736786 -19.93402481]
[58.25867462 -34.11314774]
[57.43375015 -49.20655060]
[61.09594727 -63.87214661]
[68.91963196 -76.80587769]
[80.20912170 -86.85768890]
[93.96056366 -93.13376617]
[108.95119476 -95.07606506]
[123.84804535 -92.51186371]
[137.32650757 -85.66917419]
[148.18809509 -75.15644073]
[155.46697998 -61.90845108]
[158.51594543 -47.10321045]
[157.06387329 -32.05718231]
[151.23986816 -18.10825729]
[141.56182861 -6.49675989]
[128.89030457 1.74482131]
[114.35202026 5.88365126]
[114.03996277 20.88040543]
[113.72790527 35.87715912]
[119.72132111 40.38592529]
[127.18500519 27.37464142]
[130.39274597 12.72164249]
[144.45655823 7.50540447]
[156.44355774 16.52270699]
[155.33068848 31.48136520]
[142.14070129 38.62561035]
[131.70816040 49.40345383]
[137.70156860 53.91222000]
[152.02416992 49.45540237]
[166.34677124 44.99858856]
[178.48022461 31.18702507]
[195.42721558 35.63664246]
[209.65400696 30.88282776]
[223.88078308 26.12901306]
[234.34112549 13.49916172]
[250.46159363 16.50955391]
[255.65882874 32.06335831]
[244.58636475 44.16015244]
[228.63459778 40.35579300]
[214.40782166 45.10960770]
[200.18103027 49.86342239]
[194.47138977 60.57357407]
[182.60606384 64.62733459]
[170.80358887 59.32118607]
[156.48098755 63.77799988]
[142.15838623 68.23481750]
[147.57250977 82.49224854]
[148.51161194 97.10727692]
[145.24147034 110.76117706]
[138.39300537 122.32019806]
[128.87838745 130.92964172]
[117.78533936 136.07556152]
[121.79307556 150.53025818]
[125.80081940 164.98493958]
[129.80856323 179.43963623]
[133.81629944 193.89431763]
[147.24253845 206.45281982]
[142.26629639 223.25273132]
[146.57388306 237.62091064]
[150.88145447 251.98910522]
[156.07510376 237.91693115]
[167.12702942 227.77519226]
[181.59266663 223.80714417]
[196.27233887 226.89048767]
[207.91905212 236.34323120]
[213.95664978 250.07447815]
[213.04968262 265.04702759]
[205.39874268 277.94909668]
[192.69616699 285.92684937]
[177.75163269 287.21569824]
[163.87075806 281.53051758]
[154.12294006 270.12710571]
[155.05856323 285.09790039]
[155.99418640 300.06869507]
[156.92982483 315.03948975]
[157.86544800 330.01028442]
[158.80107117 344.98107910]
[159.73670959 359.95187378]
[169.25204468 373.30816650]
[162.19758606 388.11242676]
[145.83038330 389.13534546]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 147]
[2 146]
[3 145]
[4 144]
[5 143]
[6 142]
[7 141]
[8 129]
[9 128]
[10 127]
[13 125]
[14 124]
[15 123]
[16 122]
[17 121]
[19 41]
[20 40]
[21 39]
[46 63]
[47 62]
[48 61]
[49 60]
[50 59]
[51 58]
[64 88]
[65 87]
[66 86]
[97 115]
[98 114]
[99 113]
[101 110]
[102 109]
[103 108]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
