%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:38 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGAUAAUCCUAUUUAUUACCUCAGAAGUUUUUUUCUUCGCAGGAUUUUUCUGAGCCUUUUACxxxxxxxxxxUACUAUUCUGCCUAGCAAACUCAAACUACGAACGCACUCACAGUCGCAUCAUAAUCCUCUCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[112.51728058 264.95324707]
[112.51728058 249.95323181]
[112.51728058 234.95323181]
[112.51728058 219.95323181]
[112.51728058 204.95323181]
[112.51728058 189.95323181]
[112.51728058 174.95323181]
[112.51728058 159.95323181]
[112.51728058 144.95323181]
[112.51728058 129.95323181]
[98.96809387 128.08682251]
[89.26000214 121.18070984]
[78.59838104 131.73199463]
[67.93675232 142.28329468]
[57.27512741 152.83457947]
[58.73722458 168.40365601]
[49.80715561 181.24063110]
[34.70143127 185.28427124]
[20.55250549 178.62530518]
[14.04107380 164.40786743]
[18.24163246 149.34503174]
[31.17080688 140.54898071]
[46.72383499 142.17295837]
[57.38546371 131.62165833]
[68.04708862 121.07037354]
[78.70871735 110.51908112]
[74.89456940 97.81163025]
[78.50714874 84.23769379]
[89.25754547 74.02820587]
[104.52337646 70.78981018]
[119.96507263 76.27083588]
[130.75883484 89.61862183]
[120.33789062 77.71422577]
[125.27946472 63.66323853]
[122.18113708 48.98671341]
[119.08281708 34.31018448]
[115.98449707 19.63366127]
[112.88617706 4.95713520]
[109.33141327 -9.61556816]
[105.32366943 -24.07025528]
[101.31593323 -38.52494431]
[90.17274475 -49.75615311]
[94.22825623 -64.08800507]
[90.22052002 -78.54269409]
[76.74744415 -86.36025238]
[72.88893890 -101.07645416]
[80.42481232 -113.87278748]
[76.41707611 -128.32746887]
[72.40933228 -142.78216553]
[68.40159607 -157.23684692]
[64.39385223 -171.69154358]
[60.38611221 -186.14622498]
[56.37837219 -200.60092163]
[41.38043594 -199.39329529]
[26.42501450 -201.04614258]
[12.05274200 -205.49971008]
[-1.21683550 -212.59300232]
[-12.90402985 -222.06961060]
[-22.58635712 -233.58694458]
[-29.91380692 -246.72866821]
[-34.62149811 -261.01971436]
[-36.53924561 -275.94348145]
[-35.59772873 -290.96047974]
[-31.83098221 -305.52783203]
[-25.37517166 -319.11898804]
[-16.46366882 -331.24258423]
[-5.41861916 -341.46038818]
[7.36070442 -349.40301514]
[21.41233826 -354.78335571]
[36.22832489 -357.40692139]
[51.27307129 -357.17883301]
[66.00273132 -354.10739136]
[79.88481903 -348.30361938]
[92.41751862 -339.97726440]
[103.14778137 -329.42938232]
[111.68771362 -317.04122925]
[117.72859192 -303.26065063]
[121.05205536 -288.58581543]
[121.53795624 -273.54718018]
[119.16873169 -258.68841553]
[114.03002167 -244.54661560]
[106.30760193 -231.63302612]
[96.28061676 -220.41447449]
[84.31154633 -211.29647827]
[70.83306122 -204.60865784]
[74.84080505 -190.15397644]
[78.84854126 -175.69927979]
[82.85628510 -161.24459839]
[86.86402130 -146.78990173]
[90.87176514 -132.33522034]
[94.87950134 -117.88052368]
[107.92878723 -110.79167938]
[112.19911957 -96.18965912]
[104.67520905 -82.55043793]
[108.68294525 -68.09574890]
[119.53946686 -57.89843750]
[115.77062225 -42.53268433]
[119.77835846 -28.07799721]
[123.78610229 -13.62330818]
[126.72438049 -11.56563759]
[128.78417969 -7.95192575]
[129.23118591 -3.22407532]
[127.56269836 1.85881329]
[130.66102600 16.53533936]
[133.75933838 31.21186447]
[136.85766602 45.88838959]
[139.95599365 60.56491470]
[150.15530396 71.41954803]
[145.43536377 86.52029419]
[155.64883423 97.50595856]
[170.06105042 101.66384888]
[181.75059509 96.11331177]
[193.69769287 99.91934967]
[199.62890625 110.50840759]
[213.95150757 114.96521759]
[228.31968689 119.27280426]
[242.73190308 123.43069458]
[257.14410400 127.58857727]
[274.03857422 126.16965485]
[280.07891846 142.01107788]
[266.52868652 152.20069885]
[252.98623657 142.00079346]
[238.57402039 137.84291077]
[224.16180420 133.68501282]
[216.81576538 134.86039734]
[209.49468994 129.28781128]
[195.17208862 124.83100128]
[178.32131958 129.63221741]
[165.90316772 116.07606506]
[151.49095154 111.91817474]
[145.49752808 116.42694092]
[156.15203857 126.98541260]
[166.80656433 137.54388428]
[179.02227783 146.24884033]
[179.21632385 161.24758911]
[167.22990417 170.26565552]
[152.87228394 165.92297363]
[147.89346313 151.77194214]
[140.70208740 138.60821533]
[133.51069641 125.44447327]
[127.51728058 129.95323181]
[127.51728058 144.95323181]
[127.51728058 159.95323181]
[127.51728058 174.95323181]
[127.51728058 189.95323181]
[127.51728058 204.95323181]
[127.51728058 219.95323181]
[127.51728058 234.95323181]
[127.51728058 249.95323181]
[127.51728058 264.95324707]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[12 26]
[13 25]
[14 24]
[15 23]
[32 109]
[34 107]
[35 106]
[36 105]
[37 104]
[38 103]
[39 99]
[40 98]
[41 97]
[43 95]
[44 94]
[47 91]
[48 90]
[49 89]
[50 88]
[51 87]
[52 86]
[53 85]
[110 130]
[111 129]
[114 127]
[115 126]
[116 124]
[117 123]
[118 122]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
