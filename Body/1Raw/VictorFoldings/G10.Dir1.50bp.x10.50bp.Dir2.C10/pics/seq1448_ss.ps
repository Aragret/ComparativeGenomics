%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:03 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGAAUCAACAAAACUGCUCGCCAGAACACUACGAGCCACAGCUUAAAACUCAAAGGACCUGGxxxxxxxxxxUAUUACUAUCCAUCCUCAUCCUAGCAAUAAUCCCCAUCCUCCAUAUAUCCAAACAACAAACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[94.67887115 423.12252808]
[94.67887115 408.12252808]
[94.67887115 393.12252808]
[94.67887115 378.12252808]
[94.67887115 363.12252808]
[94.67887115 348.12252808]
[94.67887115 333.12252808]
[94.67887115 318.12252808]
[94.67887115 303.12252808]
[94.67887115 288.12252808]
[79.62049103 284.78164673]
[65.67016602 278.18472290]
[53.52253723 268.65682983]
[43.78322601 256.66909790]
[36.93865967 242.81533813]
[33.33176804 227.78269958]
[33.14480972 212.31758118]
[36.39014816 197.18853760]
[42.90951157 183.14813232]
[52.38168335 170.89544678]
[64.33834839 161.04132080]
[78.18722534 154.07785034]
[93.24142456 150.35388184]
[81.73961639 140.72535706]
[66.92185974 143.05645752]
[52.10410309 145.38755798]
[37.28634644 147.71867371]
[22.46858597 150.04977417]
[14.22578430 160.02523804]
[1.79046535 161.63204956]
[-8.06426334 154.54743958]
[-22.92731094 156.56977844]
[-35.55592728 167.03161621]
[-50.83421707 161.07293701]
[-53.04518890 144.82351685]
[-39.91438293 134.99937439]
[-24.94964409 141.70672607]
[-10.08659840 139.68440247]
[3.14966822 128.20391846]
[20.13748360 135.23200989]
[34.95524216 132.90090942]
[49.77299881 130.56980896]
[64.59075928 128.23870850]
[79.40851593 125.90760040]
[71.59009552 113.80476379]
[69.92184448 100.16240692]
[74.16892242 87.79135132]
[82.93315125 78.99669647]
[94.03844452 75.14959717]
[94.97406769 60.17880630]
[95.90969849 45.20801544]
[85.84066772 56.32622528]
[71.60427856 61.05118942]
[56.88557816 58.15985489]
[45.49445343 48.40063858]
[40.37946320 34.29968643]
[42.86460876 19.50698280]
[52.30661774 7.85157728]
[66.26145172 2.35043406]
[81.11695099 4.42750835]
[93.02780914 13.54515457]
[98.91091919 27.34319496]
[102.91866302 12.88850594]
[106.92639923 -1.56618226]
[110.93414307 -16.02087021]
[97.38867188 -22.55998611]
[85.22861481 -31.41282272]
[74.84485626 -42.29479980]
[66.57120514 -54.85610580]
[60.67361450 -68.69294739]
[57.34167480 -83.36053467]
[56.68248749 -98.38735199]
[58.71724701 -113.29035187]
[63.38054276 -127.59047699]
[70.52246857 -140.82801819]
[79.91344452 -152.57746887]
[91.25158691 -162.46110535]
[104.17241669 -170.16122437]
[118.26058960 -175.43029785]
[133.06323242 -178.09893799]
[148.10449219 -178.08137512]
[162.90084839 -175.37817383]
[176.97668457 -170.07620239]
[189.87950134 -162.34593201]
[201.19453430 -152.43583679]
[210.55802917 -140.66450500]
[217.66902161 -127.41030884]
[222.29891968 -113.09934235]
[224.29885864 -98.19161987]
[223.60458374 -83.16638947]
[220.23840332 -68.50662994]
[214.30851746 -54.68359375]
[206.00555420 -42.14164352]
[195.59640503 -31.28394508]
[183.41571045 -22.45953178]
[169.85499573 -15.95206833]
[155.35021973 -11.97074509]
[140.36761475 -10.64354420]
[125.38883209 -12.01313019]
[121.38108826 2.44155812]
[117.37335205 16.89624596]
[113.36560822 31.35093498]
[110.88049316 46.14364243]
[109.94486237 61.11443329]
[109.00923157 76.08522797]
[128.88920593 94.96470642]
[121.45627594 125.19605255]
[136.31932068 127.21838379]
[151.18237305 129.24072266]
[158.80957031 116.09179688]
[170.89111328 106.86655426]
[185.58460999 102.97177887]
[200.64944458 105.00138855]
[213.78831482 112.64588928]
[222.99766541 124.73954010]
[226.87310791 139.43815613]
[224.82368469 154.50030518]
[217.16191101 167.62911987]
[205.05615234 176.82254028]
[190.35244751 180.67864990]
[175.29301453 178.60940552]
[162.17428589 170.93037415]
[152.99679565 158.81253052]
[149.16003418 144.10377502]
[134.29698181 142.08143616]
[119.43394470 140.05909729]
[108.23817444 150.04182434]
[122.57328796 152.86380005]
[135.99725342 158.61521912]
[147.91891479 167.04005432]
[157.81387329 177.76460266]
[165.24754333 190.31408691]
[169.89421082 204.13363647]
[171.55130005 218.61286926]
[170.14823914 233.11280823]
[165.74946594 246.99411011]
[158.55142212 259.64523315]
[148.87382507 270.50939941]
[137.14546204 279.10903931]
[123.88515472 285.06692505]
[109.67887115 288.12252808]
[109.67887115 303.12252808]
[109.67887115 318.12252808]
[109.67887115 333.12252808]
[109.67887115 348.12252808]
[109.67887115 363.12252808]
[109.67887115 378.12252808]
[109.67887115 393.12252808]
[109.67887115 408.12252808]
[109.67887115 423.12252808]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[23 127]
[24 44]
[25 43]
[26 42]
[27 41]
[28 40]
[31 38]
[32 37]
[49 105]
[50 104]
[51 103]
[62 102]
[63 101]
[64 100]
[65 99]
[107 126]
[108 125]
[109 124]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
