%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:52 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGUCCUACUCCUCAUUGUACCCAUUCUAAUCGCAAUGGCAUUCCUAAUGCUUACCGAACGAAAAAxxxxxxxxxxCUCAGACGCUCAGGAAAUAGAAACCGUCUGAACUAUCCUGCCCGCCAUCAUCCUAGUCCUCAUCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[92.50000000 315.68041992]
[92.50000000 300.68041992]
[92.50000000 285.68041992]
[92.50000000 270.68041992]
[92.50000000 255.68041992]
[92.50000000 240.68041992]
[92.50000000 225.68041992]
[92.50000000 210.68041992]
[92.50000000 195.68041992]
[92.50000000 180.68041992]
[82.62812805 179.40341187]
[72.95687866 176.91934204]
[63.63374329 173.25825500]
[54.80184174 168.46818542]
[46.59775543 162.61454773]
[39.14939499 155.77931213]
[32.57402039 148.05973816]
[26.97640419 139.56712341]
[22.44715118 130.42512512]
[19.06124878 120.76799011]
[16.87683487 110.73856354]
[2.34361911 114.45146942]
[-12.18959618 118.16437531]
[-26.72281265 121.87727356]
[-41.25602722 125.59017944]
[-55.78924179 129.30308533]
[-58.30536652 144.32269287]
[-66.71839905 157.01681519]
[-79.57073975 165.18611145]
[-94.63563538 167.41519165]
[-109.30300903 163.31785583]
[-121.03163910 153.60398865]
[-127.78948212 139.95658875]
[-128.40568542 124.74015045]
[-122.77350616 110.59100342]
[-111.86873627 99.96057129]
[-97.58071136 94.69065094]
[-82.38490295 95.69428253]
[-68.91407776 102.79758453]
[-59.50214386 114.76985931]
[-44.96892929 111.05696106]
[-30.43571472 107.34405518]
[-15.90249920 103.63115692]
[-1.36928320 99.91825104]
[13.16393280 96.20535278]
[15.10942554 81.33205414]
[2.02015233 74.00600433]
[-11.06912041 66.67996216]
[-24.15839386 59.35391617]
[-37.24766541 52.02787018]
[-54.02223206 49.56813812]
[-56.30228806 32.76820755]
[-40.79008484 25.92657280]
[-29.92162132 38.93859863]
[-16.83234787 46.26464462]
[-3.74307585 53.59068680]
[9.34619713 60.91673279]
[22.43547058 68.24277496]
[30.70246696 53.40771484]
[41.75452423 40.59581757]
[55.11683273 30.31866646]
[70.22307587 22.97981834]
[86.43943787 18.85899544]
[103.09114838 18.10149002]
[119.49061584 20.71318817]
[134.96575928 26.56137657]
[148.88757324 35.38123322]
[159.00604248 24.30800247]
[151.26638794 13.83726120]
[145.51119995 2.16202593]
[141.92216492 -10.34584522]
[140.61204529 -23.28826141]
[141.62106323 -36.25356674]
[144.91567993 -48.82962799]
[150.38975525 -60.61695480]
[157.86795044 -71.24136353]
[167.11129761 -80.36586761]
[177.82489014 -87.70137787]
[189.66728210 -93.01584625]
[202.26133728 -96.14160919]
[215.20628357 -96.98066711]
[228.09042358 -95.50778961]
[240.50427246 -91.77122498]
[252.05352783 -85.89117432]
[262.37164307 -78.05586243]
[273.54556274 -88.06304169]
[284.71945190 -98.07022858]
[295.89337158 -108.07740784]
[307.06729126 -118.08458710]
[318.24118042 -128.09176636]
[329.41510010 -138.09895325]
[323.75115967 -152.15937805]
[323.24084473 -167.30914307]
[327.94580078 -181.71884155]
[337.29782104 -193.64843750]
[350.16766357 -201.65734863]
[365.00122070 -204.77850342]
[380.00726318 -202.63496399]
[393.37371826 -195.48559570]
[403.48657227 -184.19372559]
[409.12457275 -170.12287903]
[409.60696411 -154.97219849]
[404.87548828 -140.57119751]
[395.50146484 -128.65887451]
[382.61688232 -120.67367554]
[367.77761841 -117.57987976]
[352.77554321 -119.75106049]
[339.42230225 -126.92504120]
[328.24838257 -116.91786194]
[317.07446289 -106.91067505]
[305.90054321 -96.90349579]
[294.72665405 -86.89631653]
[283.55273438 -76.88912964]
[272.37881470 -66.88195038]
[280.75054932 -51.93904114]
[285.39395142 -35.44433975]
[286.04754639 -18.31339836]
[282.67150879 -1.49796772]
[275.44992065 14.06690979]
[264.78085327 27.51487923]
[251.25433350 38.09650040]
[235.61978149 45.22100830]
[218.74444580 48.48929977]
[201.56532288 47.71628952]
[185.03715515 42.94137955]
[170.07928467 34.42647934]
[159.96080017 45.49971008]
[165.61900330 52.46342468]
[170.47256470 60.01004791]
[174.46199036 68.04703522]
[177.53833008 76.47583008]
[179.66389465 85.19309235]
[180.81259155 94.09191895]
[180.97033691 103.06318665]
[180.13522339 111.99689484]
[178.31747437 120.78350067]
[175.53936768 129.31524658]
[171.83499146 137.48753357]
[167.24974060 145.20011902]
[161.83987427 152.35847473]
[155.67170715 158.87478638]
[148.82089233 164.66915894]
[141.37141418 169.67054749]
[133.41462708 173.81762695]
[125.04811859 177.05953979]
[116.37445068 179.35652161]
[107.50000000 180.68041992]
[107.50000000 195.68041992]
[107.50000000 210.68041992]
[107.50000000 225.68041992]
[107.50000000 240.68041992]
[107.50000000 255.68041992]
[107.50000000 270.68041992]
[107.50000000 285.68041992]
[107.50000000 300.68041992]
[107.50000000 315.68041992]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 156]
[2 155]
[3 154]
[4 153]
[5 152]
[6 151]
[7 150]
[8 149]
[9 148]
[10 147]
[21 45]
[22 44]
[23 43]
[24 42]
[25 41]
[26 40]
[46 58]
[47 57]
[48 56]
[49 55]
[50 54]
[67 127]
[68 126]
[85 114]
[86 113]
[87 112]
[88 111]
[89 110]
[90 109]
[91 108]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
