%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:40 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGAACAAACCCACAGGUCCUAAACUACCAAACCUGCAUUAAAAAUUUCGGUUGGGGCGACCUxxxxxxxxxxCGCAUAAAACUUAAAACUUUACAGUCAGAGGUUCAAUUCCUCUUCUUAACAACAUACCCACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[104.53784943 277.36856079]
[104.53784943 262.36856079]
[104.53784943 247.36856079]
[104.53784943 232.36856079]
[104.53784943 217.36856079]
[104.53784943 202.36856079]
[104.53784943 187.36856079]
[104.53784943 172.36856079]
[104.53784943 157.36856079]
[104.53784943 142.36856079]
[92.76580811 141.44276428]
[81.84960938 137.35150146]
[72.61098480 130.49156189]
[65.72059631 121.46446228]
[61.64957047 111.02449799]
[60.63789368 100.01593781]
[62.68167114 89.30490875]
[47.74736404 87.90260315]
[32.81305695 86.50029755]
[17.87874985 85.09799957]
[2.91850042 86.18930817]
[-11.65420246 89.74407196]
[-26.22690582 93.29883575]
[-40.79960632 96.85359192]
[-55.37231064 100.40835571]
[-58.05149078 115.39974976]
[-66.60196686 128.00170898]
[-79.54232025 136.03085327]
[-94.63054657 138.09609985]
[-109.25252533 133.83963013]
[-120.87491608 123.99889374]
[-127.48406219 110.27886963]
[-127.93488312 95.05663300]
[-122.14928436 80.96952057]
[-111.12965393 70.45821381]
[-96.78520203 65.34385681]
[-81.60119629 66.51255035]
[-68.20835876 73.76181030]
[-58.92707443 85.83565521]
[-44.35437012 82.28089142]
[-29.78166771 78.72612762]
[-15.20896435 75.17136383]
[-0.63626158 71.61660767]
[-14.83905697 66.79160309]
[-26.59502602 57.47510529]
[-34.53731155 44.75032043]
[-37.74246979 30.09675789]
[-35.83784103 15.21816921]
[-29.04487610 1.84447777]
[-18.15338326 -8.46936798]
[-4.42971230 -14.52418709]
[10.53050041 -15.61598969]
[24.98784256 -11.61783314]
[37.26137161 -2.99458027]
[45.92405319 9.25115108]
[49.96868515 23.69556046]
[48.92500305 38.65920639]
[42.91435623 52.40228271]
[32.63558960 63.32688522]
[19.28105354 70.16368866]
[34.21535873 71.56599426]
[49.14966965 72.96829987]
[64.08397675 74.37059784]
[74.74560547 63.81930923]
[73.49872589 48.87122345]
[72.25185394 33.92313766]
[57.76245499 29.32685852]
[46.13813400 19.53177643]
[39.15151978 6.03156757]
[37.86801529 -9.11508465]
[42.48334885 -23.59842491]
[52.29371643 -35.20984650]
[65.80310059 -42.17869949]
[80.95143127 -43.44227600]
[95.42868805 -38.80789185]
[107.02719879 -28.98226166]
[113.97827148 -15.46371841]
[115.22191620 -0.31374243]
[110.56849670 14.15740490]
[100.72761536 25.74297905]
[87.19993591 32.67626190]
[88.44681549 47.62434769]
[89.69368744 62.57243729]
[104.27905273 63.91639328]
[116.37141418 70.36976624]
[126.35414124 59.17399979]
[136.33686829 47.97823334]
[146.31959534 36.78246689]
[142.08464050 21.94775391]
[146.56408691 7.18502951]
[158.32858276 -2.79497528]
[173.62408447 -4.80767679]
[187.56988525 1.78917038]
[195.71589661 14.89053726]
[195.46279907 30.31582451]
[186.89131165 43.14287949]
[172.73660278 49.27863312]
[157.51536560 46.76519394]
[147.53263855 57.96096039]
[137.54991150 69.15672302]
[127.56718445 80.35249329]
[137.22262573 91.27481079]
[142.07534790 106.73444366]
[157.05506897 107.51428986]
[167.18058777 99.45652771]
[179.67964172 100.45294952]
[187.85848999 109.42031860]
[202.81874084 110.51162720]
[217.77899170 111.60293579]
[232.73922729 112.69424438]
[247.69947815 113.78556061]
[258.46551514 102.44419098]
[274.00863647 100.72785187]
[286.98983765 109.44692993]
[291.27978516 124.48455811]
[284.85293579 138.74041748]
[270.74383545 145.48333740]
[255.61434937 141.52949524]
[246.60816956 128.74580383]
[231.64791870 127.65449524]
[216.68766785 126.56318665]
[201.72743225 125.47187805]
[186.76718140 124.38056183]
[171.44500732 132.87944031]
[156.27522278 122.49400330]
[141.29550171 121.71415710]
[135.85609436 126.87776184]
[148.62814331 134.74378967]
[161.40020752 142.60983276]
[176.28700256 144.44923401]
[187.87710571 153.97128296]
[192.57032776 168.21817017]
[188.90882874 182.76441956]
[178.02996826 193.09158325]
[163.31300354 195.99176025]
[149.32943726 190.56408691]
[140.42292786 178.49453735]
[139.36003113 163.53244019]
[132.16865540 150.36869812]
[124.97726440 137.20497131]
[119.53784943 142.36856079]
[119.53784943 157.36856079]
[119.53784943 172.36856079]
[119.53784943 187.36856079]
[119.53784943 202.36856079]
[119.53784943 217.36856079]
[119.53784943 232.36856079]
[119.53784943 247.36856079]
[119.53784943 262.36856079]
[119.53784943 277.36856079]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[17 63]
[18 62]
[19 61]
[20 60]
[21 43]
[22 42]
[23 41]
[24 40]
[25 39]
[64 83]
[65 82]
[66 81]
[85 101]
[86 100]
[87 99]
[88 98]
[103 126]
[104 125]
[107 123]
[108 122]
[109 121]
[110 120]
[111 119]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
