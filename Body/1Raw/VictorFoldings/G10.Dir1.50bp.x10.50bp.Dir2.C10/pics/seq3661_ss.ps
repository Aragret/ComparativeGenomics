%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:56 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGAACCUCAACCUAGGCCUCCUAUUUAUUCUAGCCACCUCUAGCCUAGCCGUUUACUCAAUCCUxxxxxxxxxxUAGCCCUACUAGUCUCAAUCUCCAACACAUAUGGCCUAGACUACGUACAUAACCUAAACCUACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[92.50000000 293.40673828]
[92.50000000 278.40673828]
[92.50000000 263.40673828]
[92.50000000 248.40673828]
[92.50000000 233.40673828]
[92.50000000 218.40673828]
[92.50000000 203.40673828]
[92.50000000 188.40673828]
[92.50000000 173.40673828]
[92.50000000 158.40673828]
[73.55822754 152.61587524]
[57.60808945 140.87203979]
[46.45417786 124.50392151]
[41.35845184 105.36343384]
[42.89744949 85.61611938]
[50.89704132 67.49620819]
[64.45214844 53.05377579]
[82.02915955 43.92285538]
[79.30808258 29.17172813]
[75.84336090 14.57735443]
[71.64390564 0.17719746]
[67.44444275 -14.22295952]
[63.24497604 -28.62311554]
[59.04551697 -43.02327347]
[54.84605408 -57.42343140]
[50.64659119 -71.82358551]
[35.98260117 -68.63734436]
[21.13207054 -66.48178101]
[6.16735029 -65.36739349]
[-8.83865261 -65.29960632]
[-23.81282997 -66.27875519]
[-38.68222809 -68.30007172]
[-53.37440491 -71.35370636]
[-67.81777954 -75.42478180]
[-81.94198608 -80.49346161]
[-95.67820740 -86.53505707]
[-108.95953369 -93.52012634]
[-121.72124481 -101.41464996]
[-133.90116882 -110.18015289]
[-145.43998718 -119.77393341]
[-156.28144836 -130.14926147]
[-166.37275696 -141.25556946]
[-175.66473389 -153.03877258]
[-184.11212158 -165.44143677]
[-191.67376709 -178.40316772]
[-198.31282043 -191.86079407]
[-203.99694824 -205.74874878]
[-208.69844055 -219.99938965]
[-212.39440918 -234.54327393]
[-215.06683350 -249.30955505]
[-216.70269775 -264.22628784]
[-217.29403687 -279.22076416]
[-216.83796692 -294.22000122]
[-215.33671570 -309.15087891]
[-212.79759216 -323.94064331]
[-209.23295593 -338.51727295]
[-204.66018677 -352.80975342]
[-199.10156250 -366.74841309]
[-192.58416748 -380.26538086]
[-185.13973999 -393.29476929]
[-176.80456543 -405.77313232]
[-167.61924744 -417.63967896]
[-157.62852478 -428.83654785]
[-146.88108826 -439.30923462]
[-135.42927551 -449.00671387]
[-123.32891083 -457.88171387]
[-110.63892365 -465.89102173]
[-97.42114258 -472.99560547]
[-83.73997498 -479.16085815]
[-69.66206360 -484.35671997]
[-55.25599289 -488.55792236]
[-40.59195709 -491.74395752]
[-25.74139786 -493.89929199]
[-10.77666092 -495.01348877]
[4.22934341 -495.08105469]
[19.20350647 -494.10168457]
[34.07287598 -492.08013916]
[48.76500702 -489.02630615]
[63.20832443 -484.95501709]
[77.33245850 -479.88613892]
[91.06859589 -473.84436035]
[104.34981537 -466.85910034]
[117.11141968 -458.96438599]
[129.29122925 -450.19869995]
[140.82989502 -440.60476685]
[151.67120361 -430.22927856]
[161.76235962 -419.12283325]
[171.05416870 -407.33947754]
[179.50138855 -394.93670654]
[187.06283569 -381.97485352]
[193.70170593 -368.51715088]
[199.38562012 -354.62908936]
[204.08691406 -340.37838745]
[207.78266907 -325.83444214]
[210.45487976 -311.06814575]
[212.09054565 -296.15139771]
[212.68167114 -281.15689087]
[212.22538757 -266.15765381]
[210.72390747 -251.22682190]
[208.18457031 -236.43707275]
[204.61973572 -221.86048889]
[200.04676819 -207.56809998]
[194.48794556 -193.62951660]
[187.97035217 -180.11264038]
[180.52574158 -167.08334351]
[172.19038391 -154.60510254]
[163.00488281 -142.73870850]
[153.01400757 -131.54196167]
[142.26641846 -121.06942749]
[130.81446838 -111.37212372]
[118.71397400 -102.49728394]
[106.02387238 -94.48815918]
[92.80599976 -87.38376617]
[79.12473297 -81.21871948]
[65.04674530 -76.02304840]
[69.24620819 -61.62289047]
[73.44567108 -47.22273636]
[77.64513397 -32.82257843]
[81.84459686 -18.42242241]
[86.04405975 -4.02226448]
[90.24352264 10.37789249]
[99.89710236 -1.10288930]
[114.89600372 -0.92130762]
[124.26882172 10.78981400]
[121.15951538 25.46401596]
[107.84248352 32.36740494]
[94.05920410 26.45065117]
[96.78028107 41.20177841]
[107.38842773 41.57904053]
[117.75650024 43.85461426]
[127.54759216 47.95456314]
[136.44355774 53.74565506]
[144.15534973 61.03972626]
[150.43235779 69.59976196]
[155.07063293 79.14761353]
[157.91946411 89.37303162]
[158.88627625 99.94376373]
[157.93966675 110.51631927]
[155.11036682 120.74716187]
[150.49032593 130.30386353]
[144.22967529 138.87586975]
[136.53184509 146.18464661]
[127.64694977 151.99272156]
[117.86370087 156.11137390]
[107.50000000 158.40673828]
[107.50000000 173.40673828]
[107.50000000 188.40673828]
[107.50000000 203.40673828]
[107.50000000 218.40673828]
[107.50000000 233.40673828]
[107.50000000 248.40673828]
[107.50000000 263.40673828]
[107.50000000 278.40673828]
[107.50000000 293.40673828]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 154]
[2 153]
[3 152]
[4 151]
[5 150]
[6 149]
[7 148]
[8 147]
[9 146]
[10 145]
[18 128]
[19 127]
[20 121]
[21 120]
[22 119]
[23 118]
[24 117]
[25 116]
[26 115]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
