%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:59 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGUCCCUCUCUCCUACUCCUGCUCGCAUCUGCUAUAGUGGAGGCCGGAGCAGGAACAGGUUGAAxxxxxxxxxxCACCUUCCACCCUUACUACACAAUCAAAGACGCCCUCGGCUUACUUCUCUUCCUUCUCUCCUCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[94.98015594 278.78533936]
[94.98015594 263.78533936]
[94.98015594 248.78533936]
[94.98015594 233.78533936]
[94.98015594 218.78533936]
[94.98015594 203.78533936]
[94.98015594 188.78533936]
[94.98015594 173.78533936]
[94.98015594 158.78533936]
[94.98015594 143.78533936]
[87.78877258 156.94906616]
[74.55101776 164.00328064]
[59.55146027 163.88841248]
[46.42329407 156.63229370]
[38.34642792 143.99250793]
[37.27724457 129.03067017]
[43.47472000 115.37082672]
[55.43770599 106.32167816]
[70.26993561 104.07525635]
[84.56655884 99.53581238]
[69.84376526 96.66538239]
[55.12097168 93.79496002]
[42.10879135 102.35772705]
[27.21867561 99.23697662]
[19.13557816 86.77908325]
[4.41278410 83.90865326]
[-10.31000996 81.03823090]
[-25.03280449 78.16780853]
[-39.75559616 75.29737854]
[-54.47839355 72.42695618]
[-69.20118713 69.55653381]
[-83.92398071 66.68611145]
[-98.70192719 64.11466217]
[-113.52894592 61.84324265]
[-128.34162903 67.40158844]
[-139.75048828 57.82625198]
[-154.57751465 55.55483627]
[-169.40454102 53.28341675]
[-184.23156738 51.01200104]
[-199.05859375 48.74058533]
[-214.13375854 55.19593048]
[-227.09788513 45.15285873]
[-224.61459351 28.94281960]
[-209.23847961 23.24131393]
[-196.78717041 33.91355896]
[-181.96014404 36.18497467]
[-167.13311768 38.45639420]
[-152.30609131 40.72780991]
[-137.47906494 42.99922562]
[-123.72692108 37.27841187]
[-111.25753021 47.01622009]
[-96.43051147 49.28763580]
[-92.07720184 47.19662857]
[-86.35829163 47.85975647]
[-81.05355835 51.96331406]
[-66.33076477 54.83374023]
[-51.60796738 57.70416260]
[-36.88517380 60.57458878]
[-22.16238022 63.44501114]
[-7.43958569 66.31543732]
[7.28320837 69.18585968]
[22.00600243 72.05628967]
[34.17691803 63.54720688]
[49.14881516 66.24849701]
[57.99139786 79.07216644]
[72.71418762 81.94258881]
[87.43698120 84.81301117]
[100.55218506 77.53348541]
[105.90404510 63.52071762]
[111.25589752 49.50795364]
[98.42582703 41.65277863]
[87.25775146 31.57365417]
[78.13205719 19.61387444]
[71.35955811 6.18078184]
[67.17093658 -8.26809502]
[65.70883942 -23.24063301]
[67.02307129 -38.22687531]
[71.06887054 -52.71639252]
[77.70844269 -66.21568298]
[86.71563721 -78.26496124]
[97.78367615 -88.45382690]
[110.53559113 -96.43526459]
[124.53705597 -101.93742371]
[139.31117249 -104.77290344]
[154.35476685 -104.84512329]
[169.15542603 -102.15162659]
[183.20907593 -96.78415680]
[196.03703308 -88.92552185]
[207.20239258 -78.84338379]
[216.32485962 -66.88114929]
[223.09373474 -53.44623184]
[227.27845764 -38.99622345]
[228.73652649 -24.02329254]
[227.41825867 -9.03740597]
[223.36854553 5.45102167]
[216.72534180 18.94851875]
[207.71488953 30.99536705]
[196.64410400 41.18125534]
[183.89004517 49.15925217]
[169.88710022 54.65763855]
[155.11221313 57.48913193]
[140.06860352 57.55729675]
[125.26866913 54.85981369]
[119.91680908 68.87258148]
[114.56494904 82.88534546]
[118.78685760 89.08417511]
[133.74545288 87.97041321]
[127.23067474 101.48183441]
[131.45259094 107.68065643]
[146.45181274 107.83267212]
[161.45104980 107.98468018]
[175.32891846 100.38762665]
[187.97712708 108.25350952]
[202.97636414 108.40551758]
[216.98724365 99.88336182]
[231.24124146 107.99236298]
[231.07504272 124.39066315]
[216.65963745 132.20910645]
[202.82435608 123.40474701]
[187.82511902 123.25273895]
[175.02009583 130.86065674]
[161.29904175 122.98390961]
[146.29980469 122.83190155]
[131.30058289 122.67988586]
[125.97047424 127.95625305]
[139.06065369 135.28067017]
[152.15084839 142.60508728]
[165.24102783 149.92948914]
[178.33120728 157.25390625]
[193.03985596 160.19599915]
[205.15863037 169.03541565]
[212.45303345 182.14234924]
[213.57812500 197.10009766]
[208.32646179 211.15071106]
[197.66633606 221.70352173]
[183.56329346 226.81275940]
[168.61769104 225.53637695]
[155.58525085 218.10972595]
[146.86889648 205.90214539]
[144.07579041 191.16392517]
[136.88441467 178.00018311]
[129.69302368 164.83644104]
[122.50164795 151.67271423]
[115.31026459 138.50897217]
[109.98015594 143.78533936]
[109.98015594 158.78533936]
[109.98015594 173.78533936]
[109.98015594 188.78533936]
[109.98015594 203.78533936]
[109.98015594 218.78533936]
[109.98015594 233.78533936]
[109.98015594 248.78533936]
[109.98015594 263.78533936]
[109.98015594 278.78533936]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 154]
[2 153]
[3 152]
[4 151]
[5 150]
[6 149]
[7 148]
[8 147]
[9 146]
[10 145]
[20 67]
[21 66]
[22 65]
[25 62]
[26 61]
[27 60]
[28 59]
[29 58]
[30 57]
[31 56]
[32 55]
[33 52]
[34 51]
[36 49]
[37 48]
[38 47]
[39 46]
[40 45]
[68 105]
[69 104]
[70 103]
[109 124]
[110 123]
[111 122]
[113 120]
[114 119]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
