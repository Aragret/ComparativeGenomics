%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:37 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGGCAAGCAACCGCAUCCAUAAUCCUUCUAAUAGCUAUCCUCUUCAACAAUAUACUCUCCGGxxxxxxxxxxAAAACCCAAUCCACAUCAAAACCCCCUCCCCAUGCUUACAAGCAAGUACAGCAAUCAACCCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[92.50000000 242.69361877]
[92.50000000 227.69361877]
[92.50000000 212.69361877]
[92.50000000 197.69361877]
[92.50000000 182.69361877]
[92.50000000 167.69361877]
[92.50000000 152.69361877]
[92.50000000 137.69361877]
[92.50000000 122.69362640]
[92.50000000 107.69362640]
[89.86113739 92.92756653]
[84.66571808 78.85604858]
[78.88945007 65.01283264]
[72.54232025 51.42187881]
[66.19519043 37.83092880]
[59.84806061 24.23997879]
[53.50093079 10.64902782]
[39.52275848 16.10518837]
[25.22072792 20.64509964]
[10.65482140 24.24971771]
[-4.11386490 26.90392494]
[-19.02338600 28.59658623]
[-34.01120377 29.32060623]
[-49.01445770 29.07294464]
[-63.97021103 27.85463905]
[-78.81574249 25.67080498]
[-93.48877716 22.53059578]
[-107.92778015 18.44718742]
[-122.07217407 13.43770504]
[-135.86264038 7.52316141]
[-149.24134827 0.72836328]
[-162.15216064 -6.91818857]
[-174.54093933 -15.38442230]
[-186.35571289 -24.63482666]
[-197.54693604 -34.63060379]
[-208.06765747 -45.32982254]
[-217.87374878 -56.68761444]
[-226.92408752 -68.65633392]
[-235.18072510 -81.18577576]
[-242.60899353 -94.22340393]
[-249.17776489 -107.71451569]
[-254.85948181 -121.60253143]
[-259.63031006 -135.82920837]
[-263.47024536 -150.33485413]
[-266.36315918 -165.05863953]
[-268.29696655 -179.93879700]
[-269.26348877 -194.91293335]
[-269.25872803 -209.91822815]
[-268.28268433 -224.89175415]
[-266.33944702 -239.77069092]
[-263.43716431 -254.49263000]
[-259.58801270 -268.99584961]
[-254.80815125 -283.21948242]
[-249.11761475 -297.10388184]
[-242.54028320 -310.59082031]
[-235.10371399 -323.62371826]
[-226.83914185 -336.14791870]
[-217.78118896 -348.11090088]
[-207.96788025 -359.46243286]
[-197.44036865 -370.15496826]
[-186.24279785 -380.14364624]
[-174.42214966 -389.38653564]
[-162.02799988 -397.84490967]
[-149.11233521 -405.48324585]
[-135.72932434 -412.26956177]
[-121.93509674 -418.17532349]
[-107.78751373 -423.17584229]
[-93.34592438 -427.25006104]
[-78.67089844 -430.38095093]
[-63.82398224 -432.55535889]
[-48.86745834 -433.76416016]
[-33.86405182 -434.00228882]
[-18.87669563 -433.26876831]
[-3.96825242 -431.56661987]
[10.79874516 -428.90304565]
[25.36235809 -425.28915405]
[39.66150284 -420.74017334]
[53.63620377 -415.27514648]
[67.22784424 -408.91696167]
[80.37941742 -401.69235229]
[93.03575897 -393.63159180]
[105.14378357 -384.76849365]
[116.65270996 -375.14022827]
[127.51425934 -364.78717041]
[137.68287659 -353.75274658]
[147.11590576 -342.08328247]
[155.77378845 -329.82766724]
[163.62020874 -317.03732300]
[170.62225342 -303.76593018]
[176.75054932 -290.06912231]
[181.97941589 -276.00433350]
[186.28688049 -261.63058472]
[189.65490723 -247.00816345]
[192.06936646 -232.19839478]
[193.52011108 -217.26338196]
[194.00108337 -202.26580811]
[193.51025391 -187.26853943]
[192.04966736 -172.33448792]
[189.62547302 -157.52632141]
[186.24781799 -142.90611267]
[181.93089294 -128.53520203]
[176.69277954 -114.47386932]
[170.55546570 -100.78108215]
[163.54467773 -87.51428986]
[155.68984985 -74.72911835]
[147.02391052 -62.47921371]
[137.58319092 -50.81594086]
[127.40731812 -39.78822708]
[116.53896332 -29.44232368]
[105.02370453 -19.82162857]
[92.90985107 -10.96649361]
[80.24820709 -2.91405964]
[67.09188080 4.30189848]
[73.43901062 17.89284897]
[79.78614044 31.48380089]
[86.13327026 45.07475281]
[92.48040009 58.66570282]
[95.13717651 59.73755264]
[97.51455688 61.96062851]
[99.15883636 65.22837830]
[99.66551208 69.26747894]
[98.73723602 73.66063690]
[103.93265533 87.73215485]
[106.99595642 73.04827881]
[114.58233643 60.10815048]
[125.89946747 50.26322937]
[139.76541138 44.54171371]
[154.73199463 43.54115295]
[169.23614502 47.36605072]
[181.76303101 55.61692810]
[191.00436401 67.43207550]
[195.99499512 81.57752228]
[196.21368408 96.57592773]
[191.63761902 110.86086273]
[182.74468994 122.94042969]
[170.46368408 131.55303955]
[156.07722473 135.79917908]
[141.08781433 135.23541260]
[127.06095886 129.92060852]
[115.46160126 120.40983582]
[107.50000000 107.69362640]
[107.50000000 122.69362640]
[107.50000000 137.69361877]
[107.50000000 152.69361877]
[107.50000000 167.69361877]
[107.50000000 182.69361877]
[107.50000000 197.69361877]
[107.50000000 212.69361877]
[107.50000000 227.69361877]
[107.50000000 242.69361877]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[11 123]
[12 122]
[13 117]
[14 116]
[15 115]
[16 114]
[17 113]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
