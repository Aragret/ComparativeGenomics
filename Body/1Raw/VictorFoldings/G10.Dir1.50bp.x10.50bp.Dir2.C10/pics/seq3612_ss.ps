%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:29 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGUCCCCAUACCCAACCCCCUGGUCAACCUCAACCUAGGCCUCCUAUUUAUUCUAGCCACCUCUxxxxxxxxxxCCUAUGAAAAAACUUCCUACCACUCACCCUAGCAUUACUUAUAUGAUAUGUCUCCAUACCCACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[125.62858582 156.79583740]
[120.61341095 142.65089417]
[112.04438782 154.96235657]
[103.47536469 167.27380371]
[94.90634155 179.58525085]
[86.33731842 191.89671326]
[85.23706055 210.25071716]
[69.12336731 217.13815308]
[60.80561829 229.62074280]
[52.48786926 242.10334778]
[44.17012405 254.58593750]
[47.51838303 270.03146362]
[38.89418411 283.27529907]
[23.41410828 286.46005249]
[10.26221085 277.69631958]
[7.24127865 262.18344116]
[16.14357758 249.12493896]
[31.68753242 246.26818848]
[40.00527954 233.78559875]
[48.32302856 221.30300903]
[56.64077377 208.82040405]
[54.57799911 196.86369324]
[61.45550537 186.38395691]
[74.02587128 183.32768250]
[82.59489441 171.01623535]
[91.16391754 158.70478821]
[99.73294067 146.39332581]
[108.30196381 134.08187866]
[104.53004456 127.59938812]
[93.21427917 108.15193176]
[78.27662659 109.51815033]
[63.33897781 110.88436890]
[55.51557541 124.28488922]
[41.29616928 130.49682617]
[26.14841270 127.13155365]
[15.89692307 115.48309326]
[14.48361111 100.03051758]
[22.45192146 86.71565247]
[36.73787689 80.65834045]
[51.84823990 84.18773651]
[61.97275925 95.94671631]
[76.91041565 94.58049774]
[91.84806824 93.21427917]
[94.09329224 86.05823517]
[98.58373260 71.74614716]
[100.82895660 64.59010315]
[89.34915924 54.93535614]
[77.86935425 45.28061295]
[64.57788849 52.60874176]
[49.53622437 54.63671112]
[34.77861404 51.09025574]
[22.30090332 42.44900513]
[13.79060268 29.88161850]
[10.39866161 15.08772850]
[12.58380985 0.06808963]
[20.05052567 -13.14601612]
[31.78899574 -22.76749039]
[46.21168900 -27.49510574]
[61.36805344 -26.68949318]
[75.20832062 -20.45960236]
[85.86070251 -9.64797783]
[91.88455200 4.28319836]
[92.46519470 19.44984818]
[87.52410126 33.80080795]
[99.00390625 43.45555496]
[110.48370361 53.11030197]
[112.21101379 38.21008682]
[114.89873505 23.45284653]
[118.53561401 8.90042019]
[123.10640717 -5.38621044]
[128.59196472 -19.34717941]
[134.96929932 -32.92398453]
[142.21168518 -46.05973434]
[150.28877258 -58.69937897]
[159.16671753 -70.78996277]
[168.80830383 -82.28080750]
[179.17315674 -93.12377167]
[190.21783447 -103.27342224]
[201.89602661 -112.68721771]
[214.15884399 -121.32571411]
[226.95484924 -129.15270996]
[240.23046875 -136.13540649]
[253.93003845 -142.24456787]
[267.99618530 -147.45454407]
[282.36990356 -151.74354553]
[296.99102783 -155.09359741]
[311.79827881 -157.49063110]
[326.72955322 -158.92463684]
[341.72235107 -159.38957214]
[356.71380615 -158.88351440]
[371.64114380 -157.40858459]
[386.44174194 -154.97094727]
[401.05361938 -151.58082581]
[415.41555786 -147.25241089]
[429.46734619 -142.00387573]
[443.15011597 -135.85717773]
[456.40652466 -128.83810425]
[469.18103027 -120.97603607]
[481.42010498 -112.30394745]
[493.07244873 -102.85816193]
[504.08923340 -92.67826843]
[514.42431641 -81.80691528]
[524.03436279 -70.28967285]
[532.87908936 -58.17478943]
[540.92150879 -45.51304245]
[548.12780762 -32.35748291]
[554.46789551 -18.76324081]
[559.91516113 -4.78728056]
[564.44677734 9.51183128]
[568.04370117 24.07417679]
[570.69097900 38.83872986]
[572.37738037 53.74362564]
[573.09594727 68.72640991]
[572.84362793 83.72428131]
[571.62152100 98.67441559]
[569.43463135 113.51414490]
[566.29223633 128.18130493]
[562.20745850 142.61441040]
[557.19744873 156.75299072]
[551.28314209 170.53781128]
[544.48937988 183.91108704]
[536.84460449 196.81680298]
[528.38085938 209.20085144]
[519.13360596 221.01135254]
[509.14157104 232.19882202]
[498.44665527 242.71636963]
[487.09365845 252.51992798]
[475.13015747 261.56838989]
[462.60632324 269.82388306]
[449.57458496 277.25180054]
[436.08953857 283.82098389]
[422.20776367 289.50393677]
[407.98736572 294.27682495]
[393.48797607 298.11968994]
[378.77032471 301.01638794]
[363.89611816 302.95477295]
[348.92764282 303.92675781]
[333.92764282 303.92825317]
[318.95895386 302.95922852]
[304.08435059 301.02380371]
[289.36611938 298.13003540]
[274.86596680 294.29003906]
[260.64462280 289.51998901]
[246.76171875 283.83978271]
[233.27539062 277.27325439]
[220.24217224 269.84796143]
[207.71669006 261.59494019]
[195.75140381 252.54884338]
[184.39646912 242.74754333]
[173.69946289 232.23211670]
[163.70521545 221.04664612]
[154.45559692 209.23797607]
[145.98937988 196.85560608]
[138.34204102 183.95141602]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 28]
[3 27]
[4 26]
[5 25]
[6 24]
[8 21]
[9 20]
[10 19]
[11 18]
[30 43]
[31 42]
[32 41]
[46 66]
[47 65]
[48 64]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
