%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:58 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGUAAUCCUAUUUAUUACCUCAGAAGUUUUUUUCUUCGCAGGAUUUUUCUGAGCCUUUUACCxxxxxxxxxxUUUUACCAUCAUUGGACAAGUAGCAUCCGUACUAUACUUCACAACAAUCCUAAUCCUAAUCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[92.82942963 257.81402588]
[92.20545197 242.82699585]
[91.58148193 227.83998108]
[90.95750427 212.85296631]
[90.33352661 197.86595154]
[89.70954895 182.87893677]
[89.08557129 167.89192200]
[88.46159363 152.90490723]
[74.39007568 147.70948792]
[64.17658997 158.69514465]
[53.96311188 169.68081665]
[43.74963379 180.66647339]
[33.53615189 191.65214539]
[23.32267189 202.63780212]
[25.43115425 218.13259888]
[17.04281616 231.32992554]
[2.11837435 235.99844360]
[-12.29530621 229.93380737]
[-19.39252472 215.99955750]
[-15.82219410 200.77500916]
[-3.27011347 191.44874573]
[12.33700848 192.42433167]
[22.55048752 181.43865967]
[32.76396942 170.45300293]
[42.97744751 159.46733093]
[53.19092941 148.48167419]
[63.40440750 137.49600220]
[58.73047256 130.40162659]
[55.36401367 122.80104065]
[53.34303665 114.92628479]
[52.66562653 107.00798798]
[37.66643906 106.85195160]
[22.66724968 106.69591522]
[7.66806126 106.53987885]
[-2.36958623 118.53069305]
[-17.77536964 121.21319580]
[-31.27515030 113.32080078]
[-36.49474335 98.58004761]
[-30.96961594 83.95106506]
[-17.30856705 76.34122467]
[-1.96192336 79.34365082]
[7.82409763 91.54068756]
[22.82328606 91.69672394]
[37.82247543 91.85276031]
[52.82166290 92.00879669]
[61.19042587 72.00942993]
[77.52586365 57.75585556]
[98.47469330 52.17398071]
[119.73663330 56.40963364]
[127.98892212 43.88367081]
[136.24121094 31.35770798]
[144.49349976 18.83174706]
[152.74578857 6.30578470]
[146.91638184 -3.12596583]
[145.69749451 -14.63891029]
[149.74783325 -26.00577545]
[158.66560364 -34.84574127]
[170.99215698 -39.12033463]
[170.36817932 -54.10734940]
[169.74420166 -69.09436798]
[154.89848328 -71.60395813]
[140.89907837 -77.14568329]
[128.35801697 -85.47727203]
[117.82352448 -96.23450470]
[109.75611877 -108.94712830]
[104.50848389 -123.05938721]
[102.31001282 -137.95436096]
[103.25681305 -152.98092651]
[107.30751038 -167.48214722]
[114.28500366 -180.82411194]
[123.88428497 -192.42358398]
[135.68571472 -201.77345276]
[149.17337036 -208.46499634]
[163.75762939 -212.20570374]
[178.80094910 -212.83201599]
[193.64569092 -210.31658936]
[207.64289856 -204.76936340]
[220.18067932 -196.43283081]
[230.71095276 -185.67146301]
[238.77334595 -172.95565796]
[244.01544189 -158.84133911]
[246.20805359 -143.94549561]
[245.25532532 -128.91931152]
[241.19892883 -114.41968536]
[234.21618652 -101.08045959]
[224.61235046 -89.48477936]
[212.80725098 -80.13954926]
[199.31695557 -73.45330048]
[184.73121643 -69.71834564]
[185.35519409 -54.73132706]
[185.97917175 -39.74430847]
[197.87155151 -30.60257530]
[212.51506042 -33.85340118]
[227.15855408 -37.10422897]
[233.05981445 -49.25465393]
[244.72160339 -55.67576218]
[257.75704956 -54.20894623]
[267.40884399 -45.61594772]
[282.11679077 -48.56142807]
[296.82476807 -51.50691223]
[311.53271484 -54.45239258]
[326.24069214 -57.39787674]
[329.98391724 -72.19487000]
[339.78320312 -83.89686584]
[353.69287109 -90.18042755]
[368.95120239 -89.79794312]
[382.52862549 -82.82536316]
[391.72927856 -70.64708710]
[394.72644043 -55.68113327]
[390.92498779 -40.89899445]
[381.07968140 -29.23567772]
[367.14535522 -23.00694275]
[351.88864136 -23.44950867]
[338.33880615 -30.47550583]
[329.18615723 -42.68991470]
[314.47821045 -39.74443054]
[299.77023315 -36.79895020]
[285.06228638 -33.85346603]
[270.35430908 -30.90798569]
[261.66714478 -16.54166222]
[244.95555115 -12.79914379]
[230.40937805 -22.46072578]
[215.76588440 -19.20989990]
[201.12237549 -15.95907497]
[190.75498962 10.63163662]
[165.27175903 14.55807400]
[157.01947021 27.08403587]
[148.76716614 39.60999680]
[140.51487732 52.13595963]
[132.26258850 64.66191864]
[139.32212830 72.01551819]
[144.71621704 80.76808167]
[148.17041016 90.54451752]
[149.49429321 100.91657257]
[148.59159851 111.42155457]
[145.46627808 121.58296967]
[140.22390747 130.93215942]
[133.06846619 139.02989197]
[124.29471588 145.48690796]
[114.27602386 149.98263550]
[103.44860840 152.28092957]
[104.07258606 167.26794434]
[104.69656372 182.25495911]
[105.32054138 197.24197388]
[105.94451904 212.22898865]
[106.56849670 227.21600342]
[107.19247437 242.20301819]
[107.81645203 257.19003296]
[114.51644135 272.76394653]
[101.40591431 283.51336670]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 148]
[2 147]
[3 146]
[4 145]
[5 144]
[6 143]
[7 142]
[8 141]
[9 27]
[10 26]
[11 25]
[12 24]
[13 23]
[14 22]
[31 45]
[32 44]
[33 43]
[34 42]
[49 130]
[50 129]
[51 128]
[52 127]
[53 126]
[58 91]
[59 90]
[60 89]
[92 124]
[93 123]
[94 122]
[98 119]
[99 118]
[100 117]
[101 116]
[102 115]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
