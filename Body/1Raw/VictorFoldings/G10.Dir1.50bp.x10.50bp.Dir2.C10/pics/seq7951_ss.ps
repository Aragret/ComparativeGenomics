%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:37 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGAUUAACCUUUUAAGUUAAAGAUUAAGAGAACCAACACCUCUUUACAGUGAAAUGCCCCAAxxxxxxxxxxCACAGCACCAAAUCUCCACCUCCAUCAUCACCUCAACCCAAAAAGGCAUAAUUAAACUUUCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[145.17013550 492.53909302]
[145.17013550 477.53909302]
[145.17013550 462.53909302]
[145.17013550 447.53909302]
[145.17013550 432.53909302]
[145.17013550 417.53909302]
[145.17013550 402.53909302]
[145.17013550 387.53909302]
[145.17013550 372.53909302]
[145.17013550 357.53909302]
[143.45744324 342.63720703]
[140.05445862 328.02832031]
[130.86238098 323.38745117]
[125.66367340 314.24453735]
[126.40605927 303.53228760]
[133.08465576 294.84426880]
[130.29232788 280.10644531]
[127.50000763 265.36865234]
[124.70768738 250.63084412]
[121.91535950 235.89303589]
[119.12303925 221.15522766]
[104.84786224 212.31910706]
[101.27938080 195.56947327]
[111.09175873 181.12458801]
[107.99343872 166.44805908]
[104.89511871 151.77153015]
[94.90692902 144.87635803]
[92.23445892 132.62577820]
[98.85350037 121.50632477]
[96.06118011 106.76852417]
[91.92378235 109.59872437]
[86.78829193 111.10285187]
[81.00408173 111.03936768]
[74.97064209 109.24996185]
[60.32713699 105.99913788]
[45.68363571 102.74830627]
[31.04013443 99.49748230]
[16.39663315 96.24665833]
[5.51415920 107.18170929]
[-9.55758953 110.47502136]
[-24.00927162 105.07572937]
[-33.22940826 92.70671082]
[-34.27588654 77.31488037]
[-26.81478119 63.81171417]
[-13.22690296 56.50602722]
[2.15190744 57.72903061]
[14.41432571 67.09047699]
[19.64745903 81.60315704]
[34.29096222 84.85398102]
[48.93446350 88.10480499]
[63.57796478 91.35563660]
[78.22146606 94.60646057]
[67.10466766 84.53586578]
[68.87600708 69.64082336]
[82.04457092 62.45828247]
[95.52655792 69.03369141]
[97.97434235 83.83269501]
[103.16975403 69.76117706]
[108.36517334 55.68965530]
[113.56058502 41.61813736]
[110.00514984 23.58098793]
[123.86125183 12.85679054]
[128.76280212 -1.31976783]
[133.66435242 -15.49632549]
[120.40018463 -22.56798553]
[108.40564728 -31.62765121]
[97.97611237 -42.45222473]
[89.36843109 -54.77513885]
[82.79455566 -68.29293060]
[78.41638184 -82.67270660]
[76.34172821 -97.56036377]
[76.62168884 -112.58927917]
[79.24935913 -127.38933563]
[84.16003418 -141.59608459]
[91.23278809 -154.85966492]
[100.29344177 -166.85345459]
[111.11888123 -177.28210449]
[123.44250488 -185.88876343]
[136.96083069 -192.46153259]
[151.34097290 -196.83851624]
[166.22880554 -198.91194153]
[181.25769043 -198.63073730]
[196.05754089 -196.00184631]
[210.26388550 -191.08999634]
[223.52688599 -184.01614380]
[235.51992798 -174.95449829]
[245.94766235 -164.12820435]
[254.55332947 -151.80387878]
[261.12496948 -138.28500366]
[265.50076294 -123.90449524]
[267.57296753 -109.01650238]
[267.29052734 -93.98764038]
[264.66040039 -79.18801117]
[259.74737549 -64.98207092]
[252.67243958 -51.71965408]
[243.60980225 -39.72735977]
[232.78265381 -29.30050850]
[220.45761108 -20.69586945]
[206.93818665 -14.12534237]
[192.55732727 -9.75073051]
[177.66915894 -7.67976379]
[162.64031982 -7.96344042]
[147.84091187 -10.59477520]
[142.93936157 3.58178306]
[138.03781128 17.75834084]
[143.04934692 28.81237793]
[139.03196716 40.69007111]
[127.63210297 46.81355286]
[122.43669128 60.88507080]
[117.24127197 74.95658875]
[112.04586029 89.02811432]
[110.79898071 103.97619629]
[113.59130859 118.71400452]
[125.92715454 132.34509277]
[119.57164001 148.67321777]
[122.66996002 163.34974670]
[125.76828766 178.02626038]
[137.85667419 184.05358887]
[144.15611267 195.78153992]
[142.55377197 208.80102539]
[133.86083984 218.36291504]
[136.65316772 233.10072327]
[139.44549561 247.83851624]
[142.23780823 262.57632446]
[145.03013611 277.31414795]
[147.82246399 292.05194092]
[161.66929626 306.64349365]
[154.66336060 324.62533569]
[158.06632996 339.23422241]
[164.12760925 325.51339722]
[175.79061890 316.08078003]
[190.47558594 313.02276611]
[204.93435669 317.01574707]
[215.96878052 327.17654419]
[221.13812256 341.25765991]
[219.29899597 356.14450073]
[210.85818481 368.54418945]
[197.68273926 375.71408081]
[182.68692017 376.06823730]
[169.18766785 369.52832031]
[160.17013550 357.53909302]
[160.17013550 372.53909302]
[160.17013550 387.53909302]
[160.17013550 402.53909302]
[160.17013550 417.53909302]
[160.17013550 432.53909302]
[160.17013550 447.53909302]
[160.17013550 462.53909302]
[160.17013550 477.53909302]
[160.17013550 492.53909302]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[11 129]
[12 128]
[16 126]
[17 125]
[18 124]
[19 123]
[20 122]
[21 121]
[24 117]
[25 116]
[26 115]
[29 113]
[30 112]
[34 52]
[35 51]
[36 50]
[37 49]
[38 48]
[57 111]
[58 110]
[59 109]
[60 108]
[62 105]
[63 104]
[64 103]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
