%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:27 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGACUACGAAAGUGGCUUUAACAUAUCUGAACACACAAUAGCUAAGACCCAAACUGGGAUUAxxxxxxxxxxGUGUAGCCCAUGAGGUGGCAAGAAAUGGGCUACAUUUUCUACCCCAGAAAACUACGAUAGCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[97.93155670 292.62210083]
[97.93155670 277.62210083]
[97.93155670 262.62210083]
[97.93155670 247.62208557]
[97.93155670 232.62208557]
[97.93155670 217.62208557]
[97.93155670 202.62208557]
[97.93155670 187.62208557]
[97.93155670 172.62208557]
[97.93155670 157.62208557]
[83.75499725 152.72053528]
[74.49005127 164.51718140]
[65.22509766 176.31381226]
[65.70446014 192.34970093]
[53.37330246 202.61236572]
[37.69103622 199.22915649]
[30.68775558 184.79539490]
[37.73577499 170.38342285]
[53.42846298 167.04887390]
[62.69340897 155.25222778]
[71.95835876 143.45558167]
[51.94279099 111.43511963]
[59.39145279 76.17791748]
[44.41173935 76.95776367]
[29.43202400 77.73760986]
[26.30028152 92.49750519]
[19.45424271 105.94348145]
[9.36068058 117.15875244]
[-3.29220748 125.37866211]
[-17.64172745 130.04273987]
[-32.70950317 130.83300781]
[-47.46819305 127.69557190]
[-60.91151810 120.84433746]
[-72.12289429 110.74644470]
[-80.33791351 98.09038544]
[-84.99645996 83.73906708]
[-85.78090668 68.67098236]
[-82.63777161 53.91350937]
[-75.78134918 40.47282791]
[-65.67913055 29.26535034]
[-53.01989746 21.05521965]
[-38.66677856 16.40221405]
[-23.59839821 15.62358665]
[-8.84213638 18.77242470]
[4.59589624 25.63403511]
[15.79947376 35.74058151]
[24.00471687 48.40298080]
[28.65217972 62.75789261]
[43.63189316 61.97805023]
[58.61160660 61.19820404]
[65.09976959 47.67401505]
[56.33356476 35.50217819]
[47.56735992 23.33033943]
[34.94584274 20.47531509]
[27.90098763 10.10280323]
[29.77689552 -1.88837218]
[21.26580620 -14.23994446]
[12.75471497 -26.59151649]
[4.24362516 -38.94308853]
[-9.72238064 -48.55490494]
[-4.35237265 -64.63593292]
[12.58676529 -63.92745590]
[16.59519768 -47.45418167]
[25.10628700 -35.10260773]
[33.61737823 -22.75103569]
[42.12846756 -10.39946270]
[58.34616089 -3.76724315]
[59.73919678 14.56413269]
[68.50540161 26.73596954]
[77.27160645 38.90780640]
[84.68048859 40.07335663]
[82.82290649 25.18882179]
[74.79736328 12.51638889]
[76.14756012 -2.42271972]
[86.31517029 -13.45085049]
[101.09566498 -16.00762749]
[114.37696838 -9.03576565]
[120.66698456 4.58171368]
[117.36463928 19.21368217]
[105.83621216 28.80923653]
[99.49824524 42.40446091]
[106.90712738 43.57001495]
[118.98711395 34.67766571]
[131.06710815 25.78531456]
[143.14709473 16.89296532]
[155.22708130 8.00061512]
[167.30706787 -0.89173442]
[179.38705444 -9.78408432]
[191.46704102 -18.67643356]
[203.54702759 -27.56878281]
[215.62701416 -36.46113205]
[212.32662964 -51.32812119]
[215.36488342 -66.25088501]
[224.21537781 -78.64396667]
[237.34472656 -86.36019135]
[252.47817993 -88.06268311]
[266.99377441 -83.45645905]
[278.37661743 -73.33958435]
[284.65451050 -59.46487427]
[284.73983765 -44.23619461]
[278.61776733 -30.29201508]
[267.34899902 -20.04824448]
[252.88592529 -15.27968025]
[237.73434448 -16.81250381]
[224.51936340 -24.38114548]
[212.43937683 -15.48879528]
[200.35939026 -6.59644556]
[188.27940369 2.29590416]
[176.19941711 11.18825340]
[164.11943054 20.08060265]
[152.03944397 28.97295380]
[139.95945740 37.86530304]
[127.87946320 46.75765228]
[115.79947662 55.65000153]
[146.63920593 83.71988678]
[143.90344238 127.33512878]
[157.68582153 133.25509644]
[171.46820068 139.17504883]
[185.25059509 145.09501648]
[199.03297424 151.01498413]
[214.40635681 146.42820740]
[227.49479675 155.70573425]
[228.25794983 171.73062134]
[216.11039734 182.20996094]
[200.37069702 179.10488892]
[193.11300659 164.79736328]
[179.33062744 158.87739563]
[165.54824829 152.95744324]
[151.76586914 147.03747559]
[137.98347473 141.11750793]
[131.72050476 145.24365234]
[140.97749329 157.04653931]
[150.23449707 168.84942627]
[162.70204163 177.18971252]
[162.64924622 192.18962097]
[150.12330627 200.44194031]
[136.32014465 194.57060242]
[133.57730103 179.82342529]
[126.38592529 166.65968323]
[119.19454193 153.49594116]
[112.93155670 157.62208557]
[112.93155670 172.62208557]
[112.93155670 187.62208557]
[112.93155670 202.62208557]
[112.93155670 217.62208557]
[112.93155670 232.62208557]
[112.93155670 247.62208557]
[112.93155670 262.62210083]
[112.93155670 277.62210083]
[112.93155670 292.62210083]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[11 21]
[12 20]
[13 19]
[23 50]
[24 49]
[25 48]
[51 70]
[52 69]
[53 68]
[56 66]
[57 65]
[58 64]
[59 63]
[82 114]
[83 113]
[84 112]
[85 111]
[86 110]
[87 109]
[88 108]
[89 107]
[90 106]
[91 105]
[116 130]
[117 129]
[118 128]
[119 127]
[120 126]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
