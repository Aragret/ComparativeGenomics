%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:39 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGAUUCCUCCCUGUACGAAAGGACAAGAGAAAUAAGGCCUACUUCACAAAGCGCCUUCCCCCxxxxxxxxxxCAUCGCCCUCCCAUCCCUACGCAUCCUUUACAUAACAGACGAGGUCAACGAUCCCUCCCUCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[148.01661682 407.64282227]
[147.70455933 392.64608765]
[147.39251709 377.64932251]
[147.08045959 362.65255737]
[146.76840210 347.65582275]
[146.45634460 332.65905762]
[146.14428711 317.66232300]
[145.83222961 302.66555786]
[145.52017212 287.66879272]
[143.03504944 272.87609863]
[138.42948914 258.60064697]
[134.60589600 255.64163208]
[132.63865662 250.22302246]
[133.94267273 243.63462830]
[129.93493652 229.17993164]
[125.92719269 214.72525024]
[121.91945648 200.27056885]
[108.75926208 188.70297241]
[113.43284607 170.92271423]
[109.12525940 156.55453491]
[104.81767273 142.18634033]
[100.51009369 127.81816101]
[83.82962036 122.64131165]
[73.52108002 108.54265594]
[73.64655304 91.07777405]
[84.15660095 77.12868500]
[79.25505066 62.95212936]
[74.35350037 48.77557373]
[69.45195007 34.59901428]
[64.55039215 20.42245674]
[59.64884567 6.24589777]
[43.41094208 3.29477572]
[30.93604088 -7.36695051]
[25.55322647 -22.77004623]
[28.63640594 -38.69725800]
[39.25508881 -50.83789825]
[34.05967331 -64.90941620]
[19.98340034 -71.57996368]
[14.91496372 -85.92449951]
[21.36106110 -99.30297089]
[16.16564560 -113.37448883]
[7.27329588 -125.45447540]
[-4.61908340 -134.59620667]
[-16.51146317 -143.73794556]
[-28.40384293 -152.87968445]
[-40.29622269 -162.02140808]
[-52.28305435 -171.03894043]
[-64.36304474 -179.93128967]
[-78.73687744 -174.32803345]
[-93.85371399 -177.40774536]
[-104.88983917 -188.18771362]
[-108.32365417 -203.22807312]
[-103.05944824 -217.72950745]
[-90.77700806 -227.06466675]
[-75.39561462 -228.25473022]
[-61.82341385 -220.91995239]
[-54.39124680 -207.40083313]
[-55.47069550 -192.01127625]
[-43.39070511 -183.11892700]
[-36.09228134 -181.67716980]
[-31.15448952 -173.91378784]
[-19.26210976 -164.77206421]
[-7.36972904 -155.63032532]
[4.52265072 -146.48858643]
[16.41502953 -137.34686279]
[11.09406281 -151.37138367]
[8.85159492 -166.20280457]
[9.78857040 -181.17352295]
[13.86281300 -195.60960388]
[20.89092064 -208.86123657]
[30.55652809 -220.33189392]
[42.42454147 -229.50523376]
[55.96073151 -235.96832275]
[70.55577087 -239.43023682]
[85.55267334 -239.73513794]
[100.27635956 -236.86927795]
[114.06404877 -230.96170044]
[126.29509735 -222.27828979]
[136.41893005 -211.20996094]
[143.97982788 -198.25492859]
[148.63745117 -183.99636841]
[150.18211365 -169.07611084]
[148.54431152 -154.16580200]
[143.79774475 -139.93659973]
[136.15609741 -127.02902985]
[125.96334839 -116.02413177]
[113.67832184 -107.41727448]
[99.85401154 -101.59589386]
[85.11271667 -98.82203674]
[70.11801147 -99.22056580]
[55.54487228 -102.77355194]
[42.04930496 -109.32103729]
[30.23716545 -118.56990051]
[35.43257904 -104.49838257]
[49.02596283 -98.51879120]
[54.49530792 -84.32228088]
[48.13119507 -70.10483551]
[53.32661057 -56.03331375]
[66.94364166 -54.60645294]
[78.66645813 -47.40544128]
[86.16716766 -35.79307175]
[87.92735291 -22.01458740]
[83.54521942 -8.76362705]
[73.82540131 1.34434712]
[78.72695160 15.52090549]
[83.62850189 29.69746399]
[88.53005219 43.87401962]
[93.43160248 58.05057907]
[98.33316040 72.22713470]
[110.30995941 74.15788269]
[120.32666016 81.00165558]
[126.47891998 91.45734406]
[127.59708405 103.53713226]
[123.46856689 114.94445038]
[114.87827301 123.51057434]
[119.18585968 137.87875366]
[123.49344635 152.24694824]
[127.80102539 166.61512756]
[138.79673767 173.43775940]
[142.06542969 185.54290771]
[136.37414551 196.26281738]
[140.38188171 210.71751404]
[144.38961792 225.17219543]
[148.39736938 239.62689209]
[152.70495605 253.99507141]
[157.31051636 268.27053833]
[161.40016174 253.83880615]
[170.61721802 242.00469971]
[183.60827637 234.50587463]
[198.46580505 232.44342041]
[213.00820923 236.12016296]
[225.10014343 244.99624634]
[232.96611023 257.76834106]
[235.45111084 272.56106567]
[232.19024658 287.20233154]
[223.66233826 299.54229736]
[211.11956787 307.76904297]
[196.40365601 310.67453003]
[181.67541504 307.83221436]
[169.09744263 299.65939331]
[160.51692200 287.35675049]
[160.82897949 302.35348511]
[161.14103699 317.35025024]
[161.45309448 332.34701538]
[161.76515198 347.34375000]
[162.07720947 362.34051514]
[162.38926697 377.33728027]
[162.70132446 392.33401489]
[163.01338196 407.33078003]
[165.60437012 426.53851318]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 149]
[2 148]
[3 147]
[4 146]
[5 145]
[6 144]
[7 143]
[8 142]
[9 141]
[10 126]
[11 125]
[14 124]
[15 123]
[16 122]
[17 121]
[19 118]
[20 117]
[21 116]
[22 115]
[26 109]
[27 108]
[28 107]
[29 106]
[30 105]
[31 104]
[36 98]
[37 97]
[40 94]
[41 93]
[42 65]
[43 64]
[44 63]
[45 62]
[46 61]
[47 59]
[48 58]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
