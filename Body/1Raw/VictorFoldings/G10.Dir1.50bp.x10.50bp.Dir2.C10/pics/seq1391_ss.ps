%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:47 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGUAGCCCUAAACCUCAACAGUUAAAUCAACAAAACUGCUCGCCAGAACACUACGAGCCACAGCxxxxxxxxxxAACUUACACUUAGGAGAUUUCAACUUAACUUGACCGCUCUGAGCUAAACCUAGCCCCAAACCCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[189.32392883 533.56219482]
[189.32392883 518.56219482]
[189.32392883 503.56222534]
[189.32392883 488.56222534]
[189.32392883 473.56222534]
[189.32392883 458.56222534]
[189.32392883 443.56222534]
[189.32392883 428.56222534]
[189.32392883 413.56222534]
[189.32392883 398.56222534]
[186.90237427 383.75897217]
[182.12278748 369.54083252]
[177.34320068 355.32269287]
[172.56361389 341.10455322]
[156.93107605 341.43258667]
[141.94105530 336.91708374]
[129.05888367 327.98690796]
[119.54768372 315.50317383]
[114.34455872 300.67605591]
[113.96820831 284.94763184]
[118.46730804 269.85144043]
[127.41455078 256.86322021]
[139.94721985 247.25633240]
[134.88046265 233.13798523]
[129.81369019 219.01963806]
[125.90125275 216.18830872]
[123.75970459 210.84420776]
[124.84037018 204.22517395]
[120.34992218 189.91308594]
[115.85947418 175.60099792]
[111.36903381 161.28890991]
[106.87858582 146.97682190]
[102.38813782 132.66473389]
[89.83434296 131.13433838]
[78.79627228 124.96176147]
[70.91971588 115.06733704]
[67.37908173 102.92634583]
[68.70229340 90.34902954]
[74.69205475 79.21069336]
[84.45527649 71.17208099]
[80.54852295 56.68976974]
[76.64176941 42.20745850]
[65.57724762 30.89874840]
[69.73268890 16.59554863]
[65.82593536 2.11323881]
[57.76288223 -10.53536320]
[46.28308105 -20.19011116]
[34.80327988 -29.84485626]
[23.32347679 -39.49960327]
[11.84367371 -49.15435028]
[-1.08885646 -48.83118439]
[-10.45844936 -57.15798950]
[-11.58099747 -69.23930359]
[-22.86277008 -79.12472534]
[-39.04473877 -81.78478241]
[-44.57809448 -97.22220612]
[-33.77059174 -109.55629730]
[-17.74006462 -106.09880829]
[-12.97734547 -90.40650177]
[-1.69557273 -80.52108002]
[15.65582848 -78.06814575]
[21.49842072 -60.63415146]
[32.97822189 -50.97940445]
[44.45802689 -41.32466125]
[55.93782806 -31.66991234]
[67.41763306 -22.01516533]
[62.74578857 -36.26907349]
[60.89048386 -51.15389252]
[61.92041397 -66.11849213]
[65.79743958 -80.60878754]
[72.37800598 -94.08825684]
[81.41847229 -106.05780792]
[92.58408356 -116.07424164]
[105.46143341 -123.76669312]
[119.57372284 -128.85034180]
[134.39840698 -131.13696289]
[149.38659668 -130.54187012]
[163.98333740 -127.08711243]
[177.64814758 -120.90061188]
[189.87509155 -112.21142578]
[200.21142578 -101.34127808]
[208.27445984 -88.69265747]
[213.76562500 -74.73389435]
[216.48161316 -59.98183441]
[216.32186890 -44.98268509]
[213.29229736 -30.29181290]
[207.50508118 -16.45316887]
[199.17448425 -3.97914577]
[188.60897827 6.66838789]
[176.19975281 15.09519291]
[162.40628052 20.98925591]
[147.73927307 24.13234138]
[132.74180603 24.40807152]
[117.96917725 21.80623817]
[103.96836853 16.42317772]
[91.25777435 8.45820427]
[80.30825043 -1.79351342]
[84.21500397 12.68879604]
[95.00008392 22.96163368]
[91.12407684 38.30070496]
[95.03083038 52.78301620]
[98.93758392 67.26532745]
[115.56826019 71.18478394]
[127.96189880 82.94656372]
[132.74545288 99.34958649]
[128.61703491 115.92963409]
[116.70022583 128.17428589]
[121.19067383 142.48637390]
[125.68112183 156.79846191]
[130.17156982 171.11054993]
[134.66201782 185.42263794]
[139.15246582 199.73472595]
[143.93205261 213.95286560]
[148.99880981 228.07122803]
[154.06556702 242.18957520]
[168.47528076 241.48556519]
[182.48187256 244.87536621]
[194.94746399 252.07434082]
[204.86196899 262.48873901]
[211.42495728 275.26473999]
[214.11027527 289.35836792]
[212.70820618 303.62084961]
[207.34181213 316.89221191]
[198.45625305 328.09567261]
[186.78175354 336.32495117]
[191.56134033 350.54309082]
[196.34092712 364.76123047]
[201.12051392 378.97937012]
[204.64042664 364.39822388]
[212.85690308 351.84875488]
[224.81370544 342.79144287]
[239.11932373 338.28039551]
[254.10885620 338.84063721]
[268.03784180 344.40692139]
[279.28521729 354.33145142]
[286.54202271 367.45922852]
[288.96371460 382.26245117]
[286.26843262 397.01834106]
[278.76989746 410.00955200]
[267.34075928 419.72421265]
[253.31114197 425.03173828]
[238.31381226 425.31445312]
[224.09414673 420.53939819]
[212.30702209 411.26235962]
[204.32392883 398.56222534]
[204.32392883 413.56222534]
[204.32392883 428.56222534]
[204.32392883 443.56222534]
[204.32392883 458.56222534]
[204.32392883 473.56222534]
[204.32392883 488.56222534]
[204.32392883 503.56222534]
[204.32392883 518.56219482]
[204.32392883 533.56219482]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 154]
[2 153]
[3 152]
[4 151]
[5 150]
[6 149]
[7 148]
[8 147]
[9 146]
[10 145]
[11 128]
[12 127]
[13 126]
[14 125]
[23 115]
[24 114]
[25 113]
[28 112]
[29 111]
[30 110]
[31 109]
[32 108]
[33 107]
[40 102]
[41 101]
[42 100]
[44 98]
[45 97]
[46 66]
[47 65]
[48 64]
[49 63]
[50 62]
[53 60]
[54 59]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
