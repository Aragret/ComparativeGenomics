%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:28 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGAAAACUCACCUGAGUUGUAAAAAACUCCAGUUGACACAAAAUAGACUACGAAAGUGGCUUxxxxxxxxxxCUACUCCCCAUAUCUAACAACGUAAAAAUAAAAUGACAGUUUGAACAUACAAAACCCACCCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[124.58501434 260.00976562]
[124.58501434 245.00978088]
[124.58501434 230.00978088]
[124.58501434 215.00978088]
[124.58501434 200.00978088]
[124.58501434 185.00978088]
[124.58501434 170.00978088]
[124.58501434 155.00978088]
[124.58501434 140.00978088]
[124.58501434 125.00977325]
[117.69382477 122.04978943]
[105.67581177 131.02572632]
[103.91144562 116.12982941]
[97.02024841 113.16984558]
[86.14142609 123.49705505]
[75.26260376 133.82426453]
[64.38377380 144.15145874]
[60.25025558 160.02111816]
[44.37026596 164.11476135]
[33.07977295 152.22119141]
[37.99347305 136.57551575]
[54.05657196 133.27264404]
[64.93539429 122.94543457]
[75.81422424 112.61822510]
[86.69304657 102.29102325]
[92.89845276 88.63478088]
[93.52243042 73.64776611]
[94.14640808 58.66075134]
[83.92203522 49.83353043]
[80.71560669 36.91274261]
[85.48508453 24.69282341]
[96.27102661 17.57522583]
[97.20665741 2.60443449]
[98.14228821 -12.36635685]
[99.07791138 -27.33714867]
[100.01354218 -42.30794144]
[91.42809296 -58.56432343]
[101.62087250 -72.81589508]
[102.24485016 -87.80290985]
[95.08831024 -101.91299438]
[103.34835052 -114.30739594]
[103.97232819 -129.29440308]
[89.09140015 -131.26019287]
[74.44659424 -134.55200195]
[60.15582657 -139.14331055]
[46.33415604 -144.99716187]
[33.09286499 -152.06643677]
[20.53857613 -160.29418945]
[8.77236271 -169.61419678]
[-2.11103511 -179.95140076]
[-12.02398872 -191.22257996]
[-20.88668442 -203.33699036]
[-28.62776375 -216.19708252]
[-35.18489838 -229.69931030]
[-40.50529099 -243.73497009]
[-44.54610825 -258.19104004]
[-47.27481461 -272.95114136]
[-48.66943359 -287.89642334]
[-48.71874619 -302.90655518]
[-47.42234421 -317.86065674]
[-44.79067612 -332.63836670]
[-40.84492493 -347.12066650]
[-35.61686325 -361.19097900]
[-29.14858246 -374.73599243]
[-21.49216270 -387.64666748]
[-12.70925140 -399.81906128]
[-2.87056470 -411.15512085]
[7.94468117 -421.56359863]
[19.64940643 -430.96072388]
[32.14936829 -439.27078247]
[45.34392548 -446.42691040]
[59.12683868 -452.37142944]
[73.38713074 -457.05654907]
[88.00999451 -460.44448853]
[102.87768555 -462.50799561]
[117.87049103 -463.23046875]
[132.86770630 -462.60607910]
[147.74856567 -460.63983154]
[162.39326477 -457.34756470]
[176.68389893 -452.75582886]
[190.50538635 -446.90155029]
[203.74645996 -439.83187866]
[216.30050659 -431.60372925]
[228.06643677 -422.28338623]
[238.94950867 -411.94583130]
[248.86212158 -400.67434692]
[257.72445679 -388.55966187]
[265.46514893 -375.69934082]
[272.02185059 -362.19689941]
[277.34182739 -348.16110229]
[281.38220215 -333.70489502]
[284.11044312 -318.94473267]
[285.50460815 -303.99938965]
[285.55346680 -288.98928833]
[284.25662231 -274.03518677]
[281.62448120 -259.25756836]
[277.67831421 -244.77539062]
[272.44979858 -230.70523071]
[265.98110962 -217.16041565]
[258.32431030 -204.24996948]
[249.54101562 -192.07786560]
[239.70198059 -180.74209595]
[228.88642883 -170.33393860]
[217.18141174 -160.93717957]
[204.68119812 -152.62750244]
[191.48641968 -145.47178650]
[177.70332336 -139.52766418]
[163.44288635 -134.84300232]
[148.81991577 -131.45550537]
[133.95217896 -129.39244080]
[118.95934296 -128.67042542]
[118.33536530 -113.68341827]
[125.53652954 -100.64530182]
[117.23186493 -87.17893219]
[116.60788727 -72.19191742]
[124.58274841 -63.04266357]
[124.14552307 -50.51159286]
[114.98433685 -41.37231064]
[114.04870605 -26.40151978]
[113.11307526 -11.43072891]
[112.17744446 3.54006290]
[111.24182129 18.51085472]
[122.89119720 30.60010338]
[122.21057892 47.71211243]
[109.13342285 59.28472519]
[108.50944519 74.27174377]
[107.88546753 89.25875854]
[108.86634827 74.29086304]
[115.07982635 60.63829422]
[125.72201538 50.06739807]
[139.41604614 43.94581985]
[154.39018250 43.06555939]
[168.70713806 47.54051208]
[180.51455688 56.79170227]
[188.28485107 69.62223816]
[191.01269531 84.37211609]
[188.34516907 99.13301849]
[180.62739563 111.99520874]
[168.85787964 121.29458618]
[154.55934143 125.82802582]
[139.58500671 125.00977325]
[139.58500671 140.00978088]
[139.58500671 155.00978088]
[139.58500671 170.00978088]
[139.58500671 185.00978088]
[139.58500671 200.00978088]
[139.58500671 215.00978088]
[139.58500671 230.00978088]
[139.58500671 245.00978088]
[139.58500671 260.00976562]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[14 25]
[15 24]
[16 23]
[17 22]
[26 127]
[27 126]
[28 125]
[32 122]
[33 121]
[34 120]
[35 119]
[36 118]
[38 115]
[39 114]
[41 112]
[42 111]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
