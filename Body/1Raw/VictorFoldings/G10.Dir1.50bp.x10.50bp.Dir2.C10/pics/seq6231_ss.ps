%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:00 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCACUCAGCCAUUUUACCUCACCCCCACUGAUGUUCGCCGACCGUUGACUAUUCUCUACAAxxxxxxxxxxCCACAACAAUAUUCAUGUGCCUAGACCAAGAAGUUAUUAUCUCGAACUGACACUGAGCCACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[92.50000000 250.53100586]
[92.50000000 235.53100586]
[92.50000000 220.53100586]
[92.50000000 205.53100586]
[92.50000000 190.53100586]
[92.50000000 175.53100586]
[92.50000000 160.53100586]
[92.50000000 145.53100586]
[92.50000000 130.53100586]
[92.50000000 115.53100586]
[86.15253448 111.53604889]
[72.88561249 118.53524780]
[73.45760345 103.54612732]
[67.11013794 99.55117035]
[53.58594894 106.03933716]
[40.06175995 112.52750397]
[26.53757095 119.01567078]
[28.78390884 133.96376038]
[26.52277565 148.90962219]
[19.95522881 162.52426147]
[9.66525173 173.59710693]
[-3.43217874 181.14353943]
[-18.17244720 184.49255371]
[-33.24486160 183.34635925]
[-47.30918884 177.80685425]
[-59.11484146 168.36662292]
[-67.61206818 155.86508179]
[-72.04530334 141.41384888]
[-72.02033997 126.29794312]
[-67.53940582 111.86143494]
[-59.00093842 99.38802338]
[-47.16417313 89.98683167]
[-33.08162689 84.49381256]
[-18.00551033 83.39738464]
[-3.27638292 86.79505920]
[9.79605389 94.38471222]
[20.04940605 105.49147797]
[33.57359695 99.00331116]
[47.09778595 92.51514435]
[60.62197495 86.02698517]
[82.42273712 79.46662903]
[97.72809601 87.93726349]
[103.21512604 73.97687531]
[108.70215607 60.01648331]
[114.18919373 46.05609512]
[119.67622375 32.09570312]
[115.24281311 19.93845367]
[120.14908600 8.39949703]
[131.24624634 3.48419523]
[137.02252197 -10.35902214]
[127.80052948 -23.96773529]
[129.99833679 -41.66440964]
[144.33363342 -54.47824478]
[140.93066406 -69.08713531]
[137.52767944 -83.69602966]
[134.12471008 -98.30492401]
[119.06555176 -98.11513519]
[104.31777191 -101.16750336]
[90.57113647 -107.31925964]
[78.46860504 -116.28267670]
[68.57623291 -127.63851929]
[61.35670853 -140.85565186]
[57.14769745 -155.31587219]
[56.14606857 -170.34288025]
[58.39866257 -185.23381042]
[63.80012894 -199.29220581]
[72.09782410 -211.86050415]
[82.90365601 -222.35089111]
[95.71221161 -230.27268982]
[109.92441559 -235.25540161]
[124.87553406 -237.06596375]
[139.86627197 -235.61968994]
[154.19549561 -230.98423767]
[167.19299316 -223.37641907]
[178.25085449 -213.15203857]
[186.85188293 -200.78933716]
[192.59379578 -186.86653137]
[195.20800781 -172.03480530]
[194.57228088 -156.98788452]
[190.71633911 -142.42953491]
[183.82051086 -129.04066467]
[174.20736694 -117.44750214]
[162.32649231 -108.19229126]
[148.73359680 -101.70790100]
[152.13658142 -87.09900665]
[155.53955078 -72.49011993]
[158.94253540 -57.88122559]
[172.39849854 -51.25272369]
[186.05473328 -57.45813370]
[199.71098328 -63.66353989]
[213.36721802 -69.86894989]
[226.89140320 -76.35710907]
[240.27769470 -83.12522888]
[253.66398621 -89.89334106]
[262.48837280 -103.02500153]
[277.33758545 -101.86272430]
[290.72384644 -108.63084412]
[292.20898438 -123.98655701]
[301.77822876 -136.08752441]
[316.37805176 -141.07237244]
[331.34970093 -137.35044861]
[341.91580200 -126.10940552]
[344.70474243 -110.93622589]
[338.82659912 -96.67261505]
[326.15701294 -87.87003326]
[310.73886108 -87.33735657]
[297.49197388 -95.24456024]
[284.10568237 -88.47644043]
[276.23876953 -75.82888794]
[260.43209839 -76.50705719]
[247.04580688 -69.73894501]
[233.65953064 -62.97082520]
[231.33068848 -58.73384476]
[226.28363037 -55.94841766]
[219.57263184 -56.21270752]
[205.91638184 -50.00729752]
[192.26014709 -43.80189133]
[178.60389709 -37.59648514]
[172.81401062 -12.14217281]
[150.86573792 -4.58275032]
[145.08946228 9.26046753]
[148.29432678 26.48628616]
[133.63661194 37.58273697]
[128.14958191 51.54312515]
[122.66255188 65.50351715]
[117.17552185 79.46390533]
[111.68848419 93.42429352]
[121.30828094 81.91519165]
[134.68475342 75.12770081]
[149.65351868 74.16008759]
[163.79252625 79.16892242]
[174.81401062 89.34373474]
[180.93463135 103.03818512]
[181.16404724 118.03643036]
[175.46510315 131.91166687]
[164.75996399 142.41879272]
[150.78076172 147.85771179]
[135.78941345 147.34835815]
[122.21160126 140.97314453]
[112.24431610 129.76362610]
[107.50000000 115.53100586]
[107.50000000 130.53100586]
[107.50000000 145.53100586]
[107.50000000 160.53100586]
[107.50000000 175.53100586]
[107.50000000 190.53100586]
[107.50000000 205.53100586]
[107.50000000 220.53100586]
[107.50000000 235.53100586]
[107.50000000 250.53100586]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[14 40]
[15 39]
[16 38]
[17 37]
[42 127]
[43 126]
[44 125]
[45 124]
[46 123]
[49 121]
[50 120]
[53 87]
[54 86]
[55 85]
[56 84]
[88 118]
[89 117]
[90 116]
[91 115]
[92 112]
[93 111]
[94 110]
[96 108]
[97 107]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
