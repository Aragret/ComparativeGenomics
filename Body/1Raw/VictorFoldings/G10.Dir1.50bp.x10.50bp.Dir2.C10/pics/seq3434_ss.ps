%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:12 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCCAUAAAACUCUUCACCAAAGAGCCCCUAAAACCCGCCACAUCUACCAUCACCCUCUACAxxxxxxxxxxCCAACUAAAAAUAUUAAACACAAACUACCACCUACCUCCCUCACCAAAGCCCAUAAAAAUCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[171.24617004 64.99185944]
[158.46881104 72.84928894]
[151.68043518 86.10700989]
[135.87210083 86.74511719]
[123.09474945 94.60253906]
[110.31739044 102.45996857]
[97.96582031 110.97105408]
[86.07344055 120.11279297]
[74.18106079 129.25451660]
[62.28868103 138.39625549]
[50.39630127 147.53799438]
[65.32286072 149.02046204]
[76.63340759 158.87295532]
[80.14890289 173.45516968]
[74.57045746 187.37928772]
[61.95918274 195.50061035]
[46.97470093 194.81846619]
[35.15348053 185.58489990]
[30.86322212 171.21153259]
[35.68857193 157.00973511]
[22.44598770 164.05487061]
[9.20340157 171.10000610]
[-4.03918409 178.14514160]
[-10.08244896 193.00645447]
[-25.50956726 197.40913391]
[-38.48617172 187.97583008]
[-39.05772400 171.94296265]
[-26.78577805 161.60957336]
[-11.08431911 164.90255737]
[2.15826678 157.85742188]
[15.40085220 150.81228638]
[28.64343834 143.76715088]
[41.25456619 135.64561462]
[53.14694595 126.50387573]
[65.03932190 117.36214447]
[76.93170166 108.22041321]
[88.82408142 99.07867432]
[74.63249207 94.22082520]
[69.38193512 80.16979218]
[76.91014099 67.19573975]
[91.71460724 64.78164673]
[102.97446442 74.69203186]
[102.45996857 89.68260956]
[115.23731995 81.82518005]
[128.01467896 73.96775818]
[135.71697998 60.14801788]
[150.61138916 60.07192993]
[163.38874817 52.21450424]
[156.30728149 38.98619080]
[150.02958679 25.35804939]
[144.57815552 11.37887096]
[139.97250366 -2.90130615]
[136.22911072 -17.43136215]
[133.36137390 -32.15928268]
[131.37956238 -47.03234100]
[130.29077148 -61.99730301]
[130.09890747 -77.00059509]
[130.80464172 -91.98850250]
[132.40545654 -106.90737915]
[134.89561462 -121.70381927]
[138.26622009 -136.32485962]
[142.50517273 -150.71813965]
[147.59733582 -164.83215332]
[153.52445984 -178.61637878]
[160.26533508 -192.02145386]
[167.79580688 -204.99942017]
[176.08895874 -217.50378418]
[185.11508179 -229.48980713]
[194.84185791 -240.91456604]
[205.23446655 -251.73718262]
[216.25572205 -261.91891479]
[227.86616516 -271.42327881]
[240.02423096 -280.21630859]
[252.68638611 -288.26647949]
[265.80731201 -295.54498291]
[279.34005737 -302.02575684]
[293.23614502 -307.68563843]
[307.44583130 -312.50433350]
[321.91830444 -316.46463013]
[336.60168457 -319.55227661]
[351.44345093 -321.75628662]
[366.39044189 -323.06875610]
[381.38919067 -323.48498535]
[396.38598633 -323.00347900]
[411.32711792 -321.62594604]
[426.15914917 -319.35736084]
[440.82894897 -316.20578003]
[455.28402710 -312.18255615]
[469.47262573 -307.30203247]
[483.34393311 -301.58172607]
[496.84832764 -295.04208374]
[509.93743896 -287.70651245]
[522.56445312 -279.60128784]
[534.68408203 -270.75543213]
[546.25305176 -261.20062256]
[557.22991943 -250.97100830]
[567.57531738 -240.10325623]
[577.25225830 -228.63624573]
[586.22607422 -216.61103821]
[594.46472168 -204.07069397]
[601.93865967 -191.06007385]
[608.62109375 -177.62577820]
[614.48815918 -163.81588745]
[619.51879883 -149.67984009]
[623.69506836 -135.26823425]
[627.00201416 -120.63265991]
[629.42773438 -105.82552338]
[630.96356201 -90.89981842]
[631.60406494 -75.90897369]
[631.34686279 -60.90666199]
[630.19293213 -45.94658279]
[628.14642334 -31.08229065]
[625.21459961 -16.36699486]
[621.40795898 -1.85337353]
[616.74017334 12.40661812]
[611.22796631 26.36193275]
[604.89099121 39.96261597]
[597.75201416 53.15997314]
[589.83654785 65.90676880]
[581.17291260 78.15737152]
[571.79217529 89.86791992]
[561.72784424 100.99650574]
[551.01605225 111.50328064]
[539.69500732 121.35063171]
[527.80535889 130.50332642]
[515.38964844 138.92857361]
[502.49224854 146.59622192]
[489.15939331 153.47883606]
[475.43878174 159.55175781]
[461.37954712 164.79327393]
[447.03201294 169.18458557]
[432.44754028 172.71000671]
[417.67831421 175.35690308]
[402.77725220 177.11579895]
[387.79766846 177.98039246]
[372.79318237 177.94760132]
[357.81753540 177.01753235]
[342.92428589 175.19351196]
[328.16680908 172.48208618]
[313.59786987 168.89294434]
[299.26965332 164.43894958]
[285.23348999 159.13603210]
[271.53955078 153.00318909]
[258.23690796 146.06236267]
[245.37315369 138.33839417]
[232.99435425 129.85894775]
[221.14483643 120.65438080]
[209.86697388 110.75762939]
[199.20118713 100.20413208]
[189.18562317 89.03166199]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 48]
[2 47]
[4 45]
[5 44]
[6 43]
[7 37]
[8 36]
[9 35]
[10 34]
[11 33]
[20 32]
[21 31]
[22 30]
[23 29]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
