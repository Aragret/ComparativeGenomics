%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:09 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCAGCCAUAGAAGGCCCCACCCCAGUCUCAGCCCUACUCCACUCAAGCACUAUAGUUGUAGxxxxxxxxxxCCUCUACCUAAAACUCACAGCCCUCGCUGUCACUUUCCUAGGACUUCUAACAGCCCUAGACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[-23.55280876 262.58099365]
[-33.06116486 274.18231201]
[-42.56952667 285.78366089]
[-52.07788467 297.38500977]
[-54.84148026 312.96298218]
[-68.89337921 317.90194702]
[-78.40174103 329.50326538]
[-87.91009521 341.10461426]
[-97.41845703 352.70596313]
[-100.18205261 368.28393555]
[-114.23395538 373.22290039]
[-108.73943329 387.56533813]
[-111.16811371 402.73098755]
[-120.86669159 414.64038086]
[-135.22628784 420.08990479]
[-150.38426208 417.61370850]
[-162.26316833 407.87783813]
[-167.66767883 393.50122070]
[-165.14396667 378.35110474]
[-155.37092590 366.50274658]
[-140.97744751 361.14334106]
[-125.83529663 363.71453857]
[-123.75180054 348.96636963]
[-109.01979828 343.19760132]
[-99.51143646 331.59625244]
[-90.00308228 319.99493408]
[-80.49472046 308.39358521]
[-78.41122437 293.64541626]
[-63.67922592 287.87664795]
[-54.17086792 276.27529907]
[-44.66250610 264.67398071]
[-35.15414810 253.07263184]
[-44.84613419 243.93565369]
[-53.92181396 234.18624878]
[-62.34257889 223.86589050]
[-70.07260132 213.01850891]
[-77.07897949 201.69024658]
[-83.33191681 189.92930603]
[-88.80480194 177.78573608]
[-93.47434235 165.31118774]
[-97.32067871 152.55874634]
[-100.32743835 139.58268738]
[-102.48183441 126.43820190]
[-103.77469635 113.18122101]
[-104.20053101 99.86816406]
[-103.75750732 86.55566406]
[-102.44753265 73.30036926]
[-100.27616119 60.15867615]
[-97.25264740 47.18650436]
[-93.38985443 34.43904495]
[-88.70420074 21.97054100]
[-83.21564484 9.83404064]
[-76.94753265 -1.91881573]
[-69.92652130 -13.23802090]
[-62.18250656 -24.07541275]
[-53.74842072 -34.38488007]
[-44.66015625 -44.12255859]
[-34.95638275 -53.24701309]
[-24.67838860 -61.71942520]
[-13.86990452 -69.50373840]
[-2.57691813 -76.56684113]
[9.15251923 -82.87866974]
[21.26849937 -88.41237640]
[33.71947479 -93.14441681]
[46.45246124 -97.05464935]
[59.41328812 -100.12644196]
[72.54680634 -102.34671783]
[85.79712677 -103.70603943]
[99.10788727 -104.19862366]
[112.42243958 -103.82236481]
[125.68414307 -102.57886505]
[138.83654785 -100.47342682]
[151.82373047 -97.51499939]
[164.59039307 -93.71617126]
[177.08224487 -89.09310150]
[189.24610901 -83.66547394]
[201.03024292 -77.45636749]
[212.38452148 -70.49221039]
[223.26060486 -62.80263138]
[233.61222839 -54.42034912]
[243.39535522 -45.38102722]
[252.56835938 -35.72312927]
[261.09219360 -25.48774910]
[268.93063354 -14.71843433]
[276.05026245 -3.46100760]
[282.42083740 8.23663235]
[288.01522827 20.32471275]
[302.03192139 14.98320007]
[316.04864502 9.64168739]
[330.06536865 4.30017519]
[343.96792603 -1.33178163]
[357.75030518 -7.25174475]
[371.53268433 -13.17170811]
[375.06185913 -28.16674232]
[386.60891724 -38.09241486]
[401.60900879 -39.30122757]
[414.29278564 -31.53850746]
[428.07516479 -37.45846939]
[441.85754395 -43.37843323]
[455.63992310 -49.29839706]
[469.42230225 -55.21836090]
[478.79660034 -68.67401886]
[495.11151123 -67.01405334]
[501.58367920 -51.94610214]
[491.55505371 -38.97077560]
[475.34225464 -41.43597794]
[461.55987549 -35.51601410]
[447.77749634 -29.59605217]
[433.99511719 -23.67608833]
[420.21273804 -17.75612640]
[417.11016846 -3.21267295]
[405.90618896 6.83397436]
[390.75762939 8.37490273]
[377.45263672 0.61067361]
[363.67025757 6.53063679]
[349.88787842 12.45059967]
[347.29928589 16.53407097]
[342.08831787 18.99926376]
[335.40686035 18.31688881]
[321.39016724 23.65840149]
[307.37344360 28.99991226]
[293.35671997 34.34142685]
[298.22961426 50.98071671]
[301.67343140 67.97339630]
[303.66329956 85.19696808]
[304.18493652 102.52725983]
[303.23452759 119.83933258]
[300.81896973 137.00837708]
[296.95562744 153.91061401]
[291.67239380 170.42420959]
[285.00732422 186.43008423]
[277.00851440 201.81286621]
[267.73358154 216.46163940]
[257.24942017 230.27082825]
[245.63162231 243.14085388]
[232.96391296 254.97894287]
[219.33763123 265.69973755]
[204.85101318 275.22595215]
[189.60850525 283.48892212]
[173.71997070 290.42907715]
[157.29997253 295.99639893]
[140.46688843 300.15069580]
[123.34207153 302.86206055]
[106.04896545 304.11096191]
[88.71225739 303.88836670]
[71.45692444 302.19586182]
[54.40736771 299.04568481]
[37.68649673 294.46054077]
[21.41486168 288.47348022]
[5.70976782 281.12765503]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 32]
[2 31]
[3 30]
[4 29]
[6 27]
[7 26]
[8 25]
[9 24]
[11 22]
[87 122]
[88 121]
[89 120]
[90 119]
[91 116]
[92 115]
[93 114]
[97 110]
[98 109]
[99 108]
[100 107]
[101 106]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
