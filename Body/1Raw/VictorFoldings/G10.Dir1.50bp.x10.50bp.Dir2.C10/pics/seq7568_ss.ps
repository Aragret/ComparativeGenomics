%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:42 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGACUCACAACAAAACUAACUAAUACUAACAUCUCAGACGCUCAGGAAAUAGAAACCGUCUGAAxxxxxxxxxxCGGUUUCAUCCUCGCCUUAGCAUGAUUUAUCCUACACUCCAACUCAUGAGACCCACAACAAACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[88.56153107 405.87597656]
[88.56153107 390.87597656]
[88.56153107 375.87597656]
[88.56153107 360.87597656]
[88.56153107 345.87597656]
[88.56153107 330.87597656]
[88.56153107 315.87597656]
[88.56153107 300.87597656]
[88.56153107 285.87597656]
[88.56153107 270.87597656]
[74.35792542 267.82122803]
[61.09983063 261.86526489]
[49.37289429 253.26837158]
[39.69570160 242.40760803]
[32.49686050 229.76016235]
[28.09600258 215.88246155]
[26.68960381 201.38565063]
[28.34220314 186.90872192]
[32.98345566 173.09030151]
[40.41111755 160.54052734]
[50.29985428 149.81405640]
[62.21549606 141.38557434]
[75.63410950 135.62879944]
[89.96499634 132.79992676]
[90.26900482 117.80300903]
[84.40142822 108.34748840]
[84.96370697 98.67580414]
[90.18148041 92.26832581]
[82.90195465 79.15312958]
[75.62242126 66.03792572]
[68.34289551 52.92272949]
[55.19758606 52.12224579]
[44.24792480 45.13652802]
[38.15476608 33.87198257]
[23.16169930 33.41601562]
[13.77045155 45.76850891]
[-1.09751070 50.20960236]
[-15.72515392 45.03160477]
[-24.48785210 32.22555923]
[-24.01616669 16.71565437]
[-14.49147129 4.46576500]
[0.42379430 0.18622187]
[14.99440575 5.52259731]
[23.61766624 18.42294693]
[38.61073303 18.87891388]
[42.86111832 11.18712425]
[49.48163605 5.40801191]
[45.86919785 -9.15050125]
[42.15974426 -12.98881531]
[40.50059891 -17.42811203]
[40.77161789 -21.57117081]
[42.50836182 -24.70345688]
[39.78728485 -39.45458603]
[37.06620789 -54.20571136]
[34.34513092 -68.95684052]
[30.29554367 -74.30288696]
[29.69040298 -80.02822113]
[31.82542038 -84.36011505]
[27.49105072 -92.46902466]
[29.81503105 -99.53151703]
[27.99537468 -114.42073822]
[26.17571640 -129.30995178]
[24.35605812 -144.19917297]
[22.53640175 -159.08839417]
[20.71674347 -173.97761536]
[18.89708519 -188.86683655]
[4.12357855 -192.26083374]
[-8.59647083 -200.50559998]
[-17.72705269 -212.60552979]
[-22.16560745 -227.09950256]
[-21.37615585 -242.23728943]
[-15.45402908 -256.19091797]
[-5.11435318 -267.27545166]
[8.39430714 -274.15237427]
[23.44071388 -275.99124146]
[38.20794296 -272.57000732]
[50.91277313 -264.30181885]
[60.02104187 -252.18508911]
[64.43287659 -237.68296814]
[63.61553192 -222.54666138]
[57.66770172 -208.60395813]
[47.30761719 -197.53849792]
[33.78630447 -190.68649292]
[35.60596085 -175.79727173]
[37.42562103 -160.90805054]
[39.24527740 -146.01882935]
[41.06493759 -131.12960815]
[42.88459396 -116.24039459]
[44.70425034 -101.35117340]
[46.67470169 -86.48116302]
[49.09626007 -71.67791748]
[51.81733704 -56.92678833]
[54.53841400 -42.17565918]
[57.25948715 -27.42453384]
[60.42771149 -12.76293850]
[64.04014587 1.79557431]
[81.40727997 9.57420540]
[88.67360687 27.45322609]
[81.45809174 45.64319992]
[88.73762512 58.75839996]
[96.01715088 71.87359619]
[103.29668427 84.98880005]
[116.18453979 92.66363525]
[131.18376160 92.81565094]
[146.18299866 92.96765900]
[161.18222046 93.11966705]
[176.18145752 93.27167511]
[190.05932617 85.67462158]
[202.70753479 93.54050446]
[217.70677185 93.69251251]
[224.42198181 79.98599243]
[236.42451477 70.55722046]
[251.33126831 67.27827454]
[266.18249512 70.80020142]
[278.02944946 80.42372131]
[284.51995850 94.23806763]
[284.36526489 109.50040436]
[277.59613037 123.18037415]
[265.55657959 132.56181335]
[250.63702393 135.78202820]
[235.79977417 132.20164490]
[223.99079895 122.53154755]
[217.55476379 108.69174957]
[202.55552673 108.53973389]
[189.75050354 116.14765930]
[176.02944946 108.27090454]
[161.03021240 108.11889648]
[146.03099060 107.96688843]
[131.03175354 107.81488037]
[116.03252411 107.66286469]
[105.26592255 118.10701752]
[104.96192169 133.10392761]
[120.02064514 136.82078552]
[133.87522888 143.77888489]
[145.83824158 153.62954712]
[155.31686401 165.88064575]
[161.84228516 179.92118835]
[165.09288025 195.05184937]
[164.91003418 210.51969910]
[161.30593872 225.55575562]
[154.46278381 239.41320801]
[144.72352600 251.40444946]
[132.57478333 260.93524170]
[118.62245178 267.53417969]
[103.56153107 270.87597656]
[103.56153107 285.87597656]
[103.56153107 300.87597656]
[103.56153107 315.87597656]
[103.56153107 330.87597656]
[103.56153107 345.87597656]
[103.56153107 360.87597656]
[103.56153107 375.87597656]
[103.56153107 390.87597656]
[103.56153107 405.87597656]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 154]
[2 153]
[3 152]
[4 151]
[5 150]
[6 149]
[7 148]
[8 147]
[9 146]
[10 145]
[24 132]
[25 131]
[28 102]
[29 101]
[30 100]
[31 99]
[34 45]
[35 44]
[47 96]
[48 95]
[52 94]
[53 93]
[54 92]
[55 91]
[58 90]
[60 89]
[61 88]
[62 87]
[63 86]
[64 85]
[65 84]
[66 83]
[103 130]
[104 129]
[105 128]
[106 127]
[107 126]
[109 124]
[110 123]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
