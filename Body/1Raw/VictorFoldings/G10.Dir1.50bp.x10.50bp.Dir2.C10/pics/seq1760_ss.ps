%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:33 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGACCCCUACGCAUUUAUAUAGAGGAGACAAGUCGUAACAUGGUAAGUGUACUGGAAAGUGCACxxxxxxxxxxACCGUCUGAACUAUCCUGCCCGCCAUCAUCCUAGUCCUCAUCGCCCUCCCAUCCCUACGCAUCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[133.84835815 275.12060547]
[133.24047852 260.13293457]
[132.63259888 245.14526367]
[132.02470398 230.15757751]
[131.41682434 215.16990662]
[130.80894470 200.18222046]
[130.20106506 185.19454956]
[129.59317017 170.20687866]
[125.24799347 155.85000610]
[117.44294739 143.04058838]
[109.63789368 130.23117065]
[101.83284760 117.42176056]
[93.67169952 118.40340424]
[85.14258575 115.40770721]
[78.21208191 108.38964081]
[66.35044098 117.57122803]
[54.48880768 126.75281525]
[56.63730240 141.96069336]
[50.87913895 156.19934082]
[38.76322556 165.63864136]
[23.54868889 167.73945618]
[9.32816029 161.93669128]
[-0.07310939 149.79124451]
[-2.12622571 134.57019043]
[3.72108912 120.36792755]
[15.89593697 111.00477600]
[31.12334633 108.99937439]
[45.30721664 114.89118195]
[57.16885376 105.70959473]
[69.03048706 96.52799988]
[74.24006653 82.46172333]
[71.22058868 67.76876831]
[68.20111084 53.07582092]
[65.18163300 38.38287354]
[62.01341248 23.72127724]
[58.69677353 9.09254169]
[46.52280045 3.24811792]
[40.04877853 -8.38040829]
[41.45225525 -21.41936874]
[49.99492645 -31.11120987]
[45.17580795 -38.94174576]
[47.06632233 -46.13240433]
[44.34524536 -60.88353348]
[31.04104042 -66.74000549]
[23.06585503 -78.64855957]
[22.72582626 -92.77305603]
[9.83796978 -100.44789124]
[-3.04988647 -108.12273407]
[-15.93774319 -115.79756927]
[-31.77959442 -113.26473236]
[-43.53954697 -124.17725372]
[-42.19637299 -140.16397095]
[-28.78043747 -148.96125793]
[-13.58329964 -143.82058716]
[-8.26290417 -128.68542480]
[4.62495232 -121.01058960]
[17.51280975 -113.33574677]
[30.40066528 -105.66091156]
[35.87193298 -109.39073944]
[42.12767410 -111.56146240]
[35.82621002 -126.07360077]
[44.81140900 -137.95280457]
[46.32893372 -152.87583923]
[47.84645844 -167.79888916]
[41.54499817 -182.31101990]
[50.53019714 -194.19023132]
[52.04772186 -209.11326599]
[53.56524658 -224.03630066]
[47.26378250 -238.54844666]
[56.24898529 -250.42764282]
[57.76651001 -265.35067749]
[44.00700760 -271.67166138]
[33.04717255 -282.11965942]
[26.07584763 -295.56137085]
[23.84922981 -310.53872681]
[26.60884476 -325.42706299]
[34.05535126 -338.61148071]
[45.38100433 -348.66174316]
[59.35728836 -354.48776245]
[74.46815491 -355.45748901]
[89.07449341 -351.46582031]
[101.59191895 -342.94567871]
[110.66262817 -330.82125854]
[115.30270386 -316.40780640]
[115.00881958 -301.26870728]
[109.81286621 -287.04614258]
[100.27845001 -275.28292847]
[87.43979645 -267.25497437]
[72.68954468 -263.83316040]
[71.17201996 -248.91012573]
[77.58203125 -235.46537781]
[68.48828888 -222.51878357]
[66.97076416 -207.59573364]
[65.45323944 -192.67269897]
[71.86324310 -179.22795105]
[62.76950073 -166.28135681]
[61.25197601 -151.35832214]
[59.73445129 -136.43527222]
[66.14445496 -122.99053955]
[57.05071259 -110.04393768]
[70.52380371 -97.14240265]
[71.50653839 -78.24474335]
[59.09637451 -63.60460663]
[61.81745148 -48.85348129]
[64.68787384 -34.13068771]
[79.09912872 -25.51309013]
[82.92176056 -8.81682491]
[73.32550812 5.77590275]
[76.64215088 20.40463829]
[81.21513367 26.26701355]
[79.87458038 35.36339569]
[82.89405823 50.05634308]
[85.91353607 64.74929047]
[88.93301392 79.44224548]
[115.06462097 86.19602203]
[114.64226532 109.61670685]
[122.44731140 122.42612457]
[130.25236511 135.23554993]
[138.05741882 148.04496765]
[137.94152832 133.04541016]
[141.22534180 118.40927124]
[147.73823547 104.89697266]
[157.14184570 93.21055603]
[168.94757080 83.95719910]
[182.54206848 77.61766815]
[197.21900940 74.52132416]
[212.21586609 74.82905579]
[226.75343323 78.52486420]
[240.07643127 85.41673279]
[251.49263000 95.14659119]
[260.40893555 107.20892334]
[266.36203003 120.97701263]
[269.04269409 135.73554993]
[268.31158447 150.71771240]
[264.20672607 165.14512634]
[256.94137573 178.26818848]
[246.89303589 189.40509033]
[234.58372498 197.97718811]
[220.65301514 203.53913879]
[205.82467651 205.80195618]
[190.86912537 204.64808655]
[176.56338501 200.13745117]
[163.65071106 192.50442505]
[152.80201721 182.14558411]
[144.58085632 169.59898376]
[145.18873596 184.58666992]
[145.79661560 199.57434082]
[146.40451050 214.56202698]
[147.01239014 229.54969788]
[147.62026978 244.53736877]
[148.22814941 259.52505493]
[148.83604431 274.51272583]
[155.51930237 290.09381104]
[142.39723206 300.82916260]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 152]
[2 151]
[3 150]
[4 149]
[5 148]
[6 147]
[7 146]
[8 145]
[9 119]
[10 118]
[11 117]
[12 116]
[15 30]
[16 29]
[17 28]
[31 114]
[32 113]
[33 112]
[34 111]
[35 109]
[36 108]
[40 105]
[42 104]
[43 103]
[46 58]
[47 57]
[48 56]
[49 55]
[60 100]
[62 98]
[63 97]
[64 96]
[66 94]
[67 93]
[68 92]
[70 90]
[71 89]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
