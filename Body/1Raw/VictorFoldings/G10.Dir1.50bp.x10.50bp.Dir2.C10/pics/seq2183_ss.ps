%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:08 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGAAAGAGCACACCCGUCUAUGUAGCAAAAUAGUGGGAAGAUUUAUAGGUAGAGGCGACAAAxxxxxxxxxxUUGGCAGCCUAGCAUUAGCAGGAAUACCUUUCCUCACAGGUUUCUACUCCAAAGACCACACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[92.50000000 274.13732910]
[92.50000000 259.13732910]
[92.50000000 244.13732910]
[92.50000000 229.13732910]
[92.50000000 214.13732910]
[92.50000000 199.13732910]
[92.50000000 184.13732910]
[92.50000000 169.13732910]
[92.50000000 154.13732910]
[92.50000000 139.13732910]
[86.69133759 137.56141663]
[81.18626404 135.12867737]
[76.11035919 131.89460754]
[65.01904297 141.99325562]
[53.92772675 152.09190369]
[56.59936905 167.28617859]
[50.61119080 181.50395203]
[37.87399292 190.20840454]
[22.45217514 190.62194824]
[9.26677895 182.61265564]
[2.52521801 168.73623657]
[4.37870026 153.42062378]
[14.23578548 141.55296326]
[28.95111465 136.92018127]
[43.82907867 141.00059509]
[54.92039490 130.90193176]
[66.01171112 120.80329132]
[60.51811218 94.59989166]
[72.84621429 70.83404541]
[97.43125153 60.23340225]
[99.29886627 45.35012436]
[101.16648102 30.46684265]
[103.03409576 15.58356380]
[100.98941803 6.61299181]
[105.09850311 0.41129261]
[107.27533722 -14.42991257]
[109.45217896 -29.27111816]
[98.52773285 -40.13218307]
[96.12148285 -55.16758728]
[102.94926453 -68.57823181]
[116.20585632 -75.31624603]
[118.38269043 -90.15744781]
[120.55952454 -104.99865723]
[122.58186340 -119.86170197]
[124.44947815 -134.74497986]
[126.31708527 -149.62826538]
[128.18470764 -164.51153564]
[116.10124207 -155.62390137]
[101.12174225 -156.40789795]
[90.03206635 -166.50834656]
[87.85594177 -181.34965515]
[95.57917786 -194.20857239]
[109.70307159 -199.25987244]
[123.82936096 -194.21527100]
[131.55877686 -181.35963440]
[135.56651306 -195.81431580]
[139.57424927 -210.26901245]
[143.58200073 -224.72369385]
[147.58973694 -239.17839050]
[137.53112793 -262.36050415]
[153.47166443 -281.15222168]
[153.47166443 -296.15222168]
[153.47166443 -311.15222168]
[153.47166443 -326.15222168]
[153.31562805 -341.15139771]
[145.29290771 -354.78762817]
[152.76376343 -367.67309570]
[152.45170593 -382.66986084]
[152.13964844 -397.66662598]
[138.41390991 -404.43881226]
[129.41696167 -416.82080078]
[127.21621704 -431.96725464]
[132.31741333 -446.39767456]
[143.54830933 -456.79598999]
[158.32814026 -460.77282715]
[173.26062012 -457.41424561]
[184.91435242 -447.49209595]
[190.61140442 -433.28640747]
[189.04264832 -418.06149292]
[180.56854248 -405.31597900]
[167.13639832 -397.97866821]
[167.44845581 -382.98190308]
[167.76051331 -367.98516846]
[175.76092529 -355.42160034]
[168.31239319 -341.46347046]
[171.61734009 -334.79840088]
[168.47166443 -326.15222168]
[168.47166443 -311.15222168]
[168.47166443 -296.15222168]
[168.47166443 -281.15222168]
[170.28250122 -280.44177246]
[172.02691650 -279.58111572]
[183.11824036 -289.67977905]
[187.58100891 -305.45999146]
[203.54272461 -309.22238159]
[214.58334351 -297.09652710]
[209.34521484 -281.55642700]
[193.21688843 -278.58843994]
[182.12557983 -268.48980713]
[184.12187195 -261.33798218]
[183.74562073 -253.85859680]
[180.99534607 -246.82469177]
[176.11705017 -240.97602844]
[169.58261108 -236.94128418]
[162.04441833 -235.17063904]
[158.03668213 -220.71595764]
[154.02894592 -206.26126099]
[150.02120972 -191.80657959]
[146.01345825 -177.35188293]
[143.06797791 -162.64392090]
[141.20036316 -147.76065063]
[139.33274841 -132.87736511]
[137.46514893 -117.99408722]
[139.76785278 -110.91996765]
[135.40072632 -102.82181549]
[133.22389221 -87.98061371]
[131.04705811 -73.13940430]
[141.81030273 -62.87828445]
[144.49931335 -48.07175827]
[137.87667847 -34.36067200]
[124.29338074 -27.09428215]
[122.11654663 -12.25307560]
[119.93970490 2.58812952]
[117.91737366 17.45117569]
[116.04975891 32.33445740]
[114.18214417 47.21773529]
[112.31452942 62.10101700]
[119.19584656 65.07865906]
[125.39757538 69.29261017]
[130.70016479 74.59368134]
[134.91587830 80.79421234]
[137.89547729 87.67467499]
[139.53347778 94.99149323]
[139.77188110 102.48561859]
[138.60224915 109.89175415]
[136.06600952 116.94768524]
[132.25291443 123.40363312]
[127.29799652 129.03102112]
[121.37664795 133.63063049]
[114.69850922 137.03964233]
[107.50000000 139.13732910]
[107.50000000 154.13732910]
[107.50000000 169.13732910]
[107.50000000 184.13732910]
[107.50000000 199.13732910]
[107.50000000 214.13732910]
[107.50000000 229.13732910]
[107.50000000 244.13732910]
[107.50000000 259.13732910]
[107.50000000 274.13732910]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[13 27]
[14 26]
[15 25]
[30 127]
[31 126]
[32 125]
[33 124]
[35 123]
[36 122]
[37 121]
[41 117]
[42 116]
[43 115]
[44 113]
[45 112]
[46 111]
[47 110]
[55 109]
[56 108]
[57 107]
[58 106]
[59 105]
[61 90]
[62 89]
[63 88]
[64 87]
[65 85]
[67 83]
[68 82]
[69 81]
[92 99]
[93 98]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
