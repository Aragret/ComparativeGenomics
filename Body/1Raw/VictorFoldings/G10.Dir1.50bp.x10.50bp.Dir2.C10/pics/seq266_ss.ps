%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:38 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCAAAAAAUUUCCACCAAACCCCCCCUCCCCCGCUUCUGGCCACAGCACUUAAACACAUCUxxxxxxxxxxUGGCUUUCUCAACUUUUAAAGGAUAACAGCUAUCCAUUGGUCUUAGGCCCCAAAAAUUUUCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[-5.73566055 198.29576111]
[-17.23746300 207.92428589]
[-28.73926735 217.55282593]
[-40.24106979 227.18135071]
[-51.74287415 236.80987549]
[-63.14389420 246.55752563]
[-74.44290161 256.42324829]
[-85.74190521 266.28897095]
[-97.04090881 276.15469360]
[-108.33991241 286.02041626]
[-102.00039673 299.73126221]
[-99.78183746 314.67297363]
[-101.86406708 329.63427734]
[-108.07830811 343.40237427]
[-117.92078400 354.86108398]
[-130.59361267 363.08154297]
[-145.06947327 367.39733887]
[-160.17486572 367.45861816]
[-174.68527222 363.26040649]
[-187.42439270 355.14303589]
[-197.35951233 343.76455688]
[-203.68524170 330.04736328]
[-205.88880920 315.10342407]
[-203.79153442 300.14419556]
[-197.56347656 286.38238525]
[-187.70948792 274.93353271]
[-175.02839661 266.72583008]
[-160.54821777 262.42456055]
[-145.44276428 262.37847900]
[-130.93658447 266.59124756]
[-118.20563507 274.72140503]
[-106.90663147 264.85568237]
[-95.60762787 254.98995972]
[-84.30862427 245.12423706]
[-73.00962067 235.25851440]
[-70.02039337 228.44601440]
[-61.37139893 225.30807495]
[-49.86959839 215.67953491]
[-38.36779404 206.05101013]
[-26.86598969 196.42248535]
[-15.36418629 186.79396057]
[-31.80367470 158.90567017]
[-41.61561203 128.05540466]
[-44.30662155 95.79441071]
[-39.74138260 63.74488831]
[-28.14946175 33.51839828]
[-41.08751678 25.92849159]
[-54.02557373 18.33858299]
[-70.41915131 18.76598930]
[-78.75419617 4.64299011]
[-70.45632172 -9.50188255]
[-54.06167984 -9.11759663]
[-46.43566513 5.40052748]
[-33.49760818 12.99043560]
[-20.55955315 20.58034325]
[-16.46059990 14.68284988]
[-12.07342148 8.99650669]
[-7.40887260 3.53538656]
[-2.47849917 -1.68699419]
[2.70549726 -6.65771103]
[8.13028717 -11.36446190]
[13.78244400 -15.79559803]
[19.64797974 -19.94015312]
[25.71237755 -23.78787041]
[31.96062851 -27.32922554]
[38.37726974 -30.55545425]
[44.94642258 -33.45857239]
[51.65182495 -36.03139877]
[58.47688293 -38.26755905]
[65.40470886 -40.16152573]
[72.41815186 -41.70860672]
[79.49985504 -42.90497589]
[86.63229370 -43.74766922]
[93.79782104 -44.23460388]
[100.97869110 -44.36457062]
[108.15714264 -44.13725662]
[115.31540680 -43.55321503]
[122.43576813 -42.61389923]
[129.50061035 -41.32162476]
[136.49243164 -39.67959976]
[143.39393616 -37.69187927]
[150.18804932 -35.36338806]
[156.85795593 -32.69989014]
[163.38714600 -29.70797348]
[169.75944519 -26.39504242]
[175.95910645 -22.76929855]
[181.97077942 -18.83971405]
[187.77958679 -14.61601543]
[193.37115479 -10.10865402]
[198.73162842 -5.32878685]
[203.84774780 -0.28824207]
[208.70686340 5.00050497]
[213.29695129 10.52436543]
[217.60662842 16.26966667]
[221.62524414 22.22219276]
[225.34284973 28.36721039]
[228.75025940 34.68951035]
[231.83900452 41.17344666]
[234.60147095 47.80297089]
[237.03082275 54.56167984]
[239.12103271 61.43284225]
[253.76454163 58.18201447]
[268.40805054 54.93119049]
[283.05154419 51.68036270]
[297.69503784 48.42953873]
[307.48928833 35.72315598]
[323.53189087 35.60238647]
[333.51632690 48.15987778]
[329.78338623 63.76259613]
[315.19668579 70.44146729]
[300.94586182 63.07304001]
[286.30236816 66.32386780]
[271.65887451 69.57469177]
[257.01535034 72.82551575]
[242.37185669 76.07633972]
[244.31900024 96.24308777]
[243.42375183 116.48382568]
[239.70373535 136.39991760]
[233.23223877 155.59909058]
[246.75642395 162.08726501]
[260.28060913 168.57542419]
[275.83151245 164.63214111]
[288.52267456 174.44607544]
[288.61856079 190.48884583]
[276.04559326 200.45379639]
[260.44869995 196.69667053]
[253.79244995 182.09960938]
[240.26826477 175.61145020]
[226.74406433 169.12329102]
[220.63107300 179.31097412]
[213.70108032 188.96151733]
[206.00102234 198.00955200]
[197.58303833 206.39378357]
[188.50416565 214.05744934]
[178.82586670 220.94862366]
[168.61370850 227.02066040]
[157.93684387 232.23240662]
[146.86758423 236.54858398]
[135.48091125 239.93995667]
[123.85393524 242.38356018]
[112.06539917 243.86282349]
[100.19515228 244.36775208]
[88.32357788 243.89492798]
[76.53108978 242.44752502]
[64.89754486 240.03536987]
[53.50174713 236.67478943]
[42.42086411 232.38856506]
[31.72994995 227.20568848]
[21.50140953 221.16130066]
[11.80451965 214.29629517]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 41]
[2 40]
[3 39]
[4 38]
[5 37]
[6 35]
[7 34]
[8 33]
[9 32]
[10 31]
[46 55]
[47 54]
[48 53]
[101 115]
[102 114]
[103 113]
[104 112]
[105 111]
[119 129]
[120 128]
[121 127]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
