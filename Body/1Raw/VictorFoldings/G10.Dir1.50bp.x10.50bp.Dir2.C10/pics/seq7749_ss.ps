%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:40 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGUAAUCUUCAACUCCUACAUACUUCCCCCAUUAUUCCUAGAACCAGGCGACCUGCGACUCCxxxxxxxxxxUAACAAGCUCCAUCUGCCUACGACAAACAGACCUAAAAUCGCUCAUUGCAUACUCUUCAACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[-18.98928261 251.57998657]
[-29.91034508 242.33145142]
[-40.11493301 232.29794312]
[-51.41394043 242.16366577]
[-62.71294403 252.02938843]
[-74.01194763 261.89511108]
[-85.31095123 271.76083374]
[-96.60995483 281.62655640]
[-107.90896606 291.49227905]
[-119.20796967 301.35800171]
[-130.50697327 311.22372437]
[-141.80598450 321.08944702]
[-136.31948853 335.22006226]
[-135.99992371 350.37506104]
[-140.88589478 364.72439575]
[-150.38737488 376.53530884]
[-163.35702515 384.38156128]
[-178.22869873 387.31573486]
[-193.20655823 384.98345947]
[-206.48196411 377.66638184]
[-216.45184326 366.24810791]
[-221.91227722 352.10739136]
[-222.20390320 336.95184326]
[-217.29150391 322.61154175]
[-207.76826477 310.81817627]
[-194.78417969 302.99581909]
[-179.90713501 300.08905029]
[-164.93359375 302.44894409]
[-151.67170715 309.79043579]
[-140.37269592 299.92471313]
[-129.07368469 290.05899048]
[-117.77468872 280.19326782]
[-106.47567749 270.32754517]
[-95.17667389 260.46182251]
[-83.87767029 250.59611511]
[-72.57866669 240.73039246]
[-61.27966309 230.86466980]
[-49.98065567 220.99894714]
[-61.18825912 205.60913086]
[-70.82257843 189.18850708]
[-78.78957367 171.89735413]
[-85.01148987 153.90444946]
[-89.42759705 135.38540649]
[-91.99478912 116.52098846]
[-92.68800354 97.49531555]
[-91.50048828 78.49408722]
[-88.44382477 59.70276642]
[-83.54784393 41.30477142]
[-76.86034393 23.47967148]
[-68.44658661 6.40145206]
[-58.38870621 -9.76319599]
[-46.78486633 -24.85649681]
[-33.74832535 -38.73113251]
[-43.73105240 -49.92689896]
[-53.71377945 -61.12266541]
[-63.69650650 -72.31842804]
[-78.75057983 -80.11657715]
[-75.42456818 -96.74108124]
[-58.52902603 -98.14717102]
[-52.50074005 -82.30115509]
[-42.51801300 -71.10539246]
[-32.53528595 -59.90962601]
[-22.55256081 -48.71385956]
[-13.65847778 -55.61713409]
[-4.37642288 -61.98920822]
[5.26191998 -67.80833435]
[15.22365093 -73.05464935]
[25.47476578 -77.71024323]
[35.98027039 -81.75922394]
[46.70430756 -85.18777466]
[57.61026764 -87.98418427]
[68.66092682 -90.13890839]
[79.81856537 -91.64459229]
[91.04508209 -92.49610901]
[102.30217743 -92.69053650]
[113.55140686 -92.22721100]
[124.75438690 -91.10772705]
[135.87286377 -89.33589172]
[146.86888123 -86.91776276]
[157.70492554 -83.86158752]
[168.34397888 -80.17780304]
[178.74975586 -75.87899017]
[188.88671875 -70.97980499]
[198.72026062 -65.49698639]
[208.21681213 -59.44924545]
[217.34397888 -52.85722351]
[226.07060242 -45.74342346]
[234.36686707 -38.13213348]
[242.20448303 -30.04932594]
[249.55667114 -21.52259827]
[256.39837646 -12.58105278]
[262.70617676 -3.25521302]
[268.45861816 6.42308760]
[281.84487915 -0.34502700]
[295.23117065 -7.11314154]
[308.61746216 -13.88125610]
[308.78637695 -29.18583298]
[316.05853271 -42.65335464]
[328.76287842 -51.18908691]
[343.97998047 -52.83158112]
[358.21313477 -47.20339966]
[368.19161987 -35.59786224]
[371.62246704 -20.68183327]
[367.71728516 -5.88290834]
[357.37344360 5.39822769]
[342.96792603 10.56925297]
[327.81100464 8.44190311]
[315.38558960 -0.49497169]
[301.99929810 6.27314329]
[288.61300659 13.04125786]
[275.22671509 19.80937195]
[281.59109497 35.50487900]
[286.55270386 51.69858932]
[290.07330322 68.26540375]
[292.12564087 85.07736206]
[292.69384766 102.00459290]
[291.77359009 118.91633606]
[289.37194824 135.68196106]
[285.50747681 152.17195129]
[280.21005249 168.25894165]
[273.52053833 183.81864929]
[286.76312256 190.86378479]
[302.46456909 187.57080078]
[314.73654175 197.90417480]
[314.16497803 213.93704224]
[301.18835449 223.37036133]
[285.76126099 218.96768188]
[279.71798706 204.10636902]
[266.47540283 197.06123352]
[258.81314087 209.14819336]
[250.27499390 220.63319397]
[240.90806580 231.45286560]
[230.76400757 241.54757690]
[219.89875793 250.86161804]
[208.37226868 259.34362793]
[196.24806213 266.94683838]
[183.59304810 273.62933350]
[170.47700500 279.35421753]
[156.97227478 284.08993530]
[143.15332031 287.81036377]
[129.09637451 290.49499512]
[114.87895966 292.12902832]
[100.57948303 292.70339966]
[86.27681732 292.21502686]
[72.04982758 290.66653442]
[57.97698975 288.06649780]
[44.13591766 284.42922974]
[30.60294342 279.77484131]
[17.45270538 274.12893677]
[4.75772810 267.52267456]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 38]
[4 37]
[5 36]
[6 35]
[7 34]
[8 33]
[9 32]
[10 31]
[11 30]
[12 29]
[53 63]
[54 62]
[55 61]
[56 60]
[93 111]
[94 110]
[95 109]
[96 108]
[121 129]
[122 128]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
