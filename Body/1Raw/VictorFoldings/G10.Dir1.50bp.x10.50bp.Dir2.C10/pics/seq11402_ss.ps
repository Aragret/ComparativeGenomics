%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:06 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGGACAACCAUCAUUCCCCCUAAAUAAAUUAAAAAAACUAUUAAACCCAUAUAACCUCCCCCxxxxxxxxxxCAAAUCCCUUCUCGUCCCCAUGGAUGACCCCCCUCAGAUAGGGGUCCCUUGACCACCAUCCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[94.72296143 293.98840332]
[97.31396484 274.78070068]
[97.62602234 259.78393555]
[97.93807220 244.78718567]
[98.25012970 229.79043579]
[98.56218719 214.79367065]
[98.87424469 199.79692078]
[99.18630219 184.80017090]
[99.49835968 169.80342102]
[99.81040955 154.80665588]
[100.12246704 139.80990601]
[83.79499817 134.21849060]
[72.14610291 122.66988373]
[66.99087524 108.00059509]
[68.67080688 93.40192413]
[76.11678314 81.73312378]
[66.85183716 69.93647766]
[57.58688354 58.13983917]
[48.32193375 46.34320068]
[35.84466553 54.68229675]
[22.76565361 62.04179001]
[9.16165066 68.37849426]
[-4.88750839 73.65522766]
[-19.29937553 77.84101868]
[-33.98937607 80.91130066]
[-48.87130356 82.84805298]
[-63.85781860 83.63992310]
[-78.86097717 83.28224945]
[-93.79273987 81.77714539]
[-108.56546783 79.13343048]
[-123.09247589 75.36662292]
[-137.28851318 70.49883270]
[-151.07026672 64.55862427]
[-164.35685730 57.58086014]
[-177.07031250 49.60647964]
[-189.13603210 40.68228912]
[-200.48320007 30.86065674]
[-211.04522705 20.19921875]
[-220.76014709 8.76054478]
[-229.57092285 -3.38823891]
[-237.42585754 -16.17583847]
[-244.27885437 -29.52720833]
[-250.08970642 -43.36399841]
[-254.82431030 -57.60500717]
[-258.45486450 -72.16666412]
[-260.96008301 -86.96350861]
[-262.32525635 -101.90870667]
[-262.54238892 -116.91455841]
[-261.61016846 -131.89300537]
[-259.53408813 -146.75613403]
[-256.32632446 -161.41673279]
[-252.00573730 -175.78875732]
[-246.59762573 -189.78787231]
[-240.13377380 -203.33192444]
[-232.65208435 -216.34141541]
[-224.19647217 -228.74002075]
[-214.81657410 -240.45497131]
[-204.56741333 -251.41752625]
[-193.50914001 -261.56332397]
[-181.70666504 -270.83288574]
[-169.22923279 -279.17172241]
[-156.15008545 -286.53097534]
[-142.54595947 -292.86743164]
[-128.49670410 -298.14389038]
[-114.08475494 -302.32940674]
[-99.39469910 -305.39941406]
[-84.51273346 -307.33587646]
[-69.52619934 -308.12747192]
[-54.52304840 -307.76950073]
[-39.59132004 -306.26412964]
[-24.81863976 -303.62011719]
[-10.29170418 -299.85305786]
[3.90423703 -294.98498535]
[17.68587494 -289.04452515]
[30.97233391 -282.06649780]
[43.68564224 -274.09188843]
[55.75119019 -265.16744995]
[67.09817505 -255.34561157]
[77.66000366 -244.68397522]
[87.37469482 -233.24511719]
[96.18524170 -221.09616089]
[104.03993988 -208.30841064]
[110.89269257 -194.95690918]
[116.70327759 -181.12001038]
[121.43760681 -166.87892151]
[125.06789398 -152.31719971]
[127.57283020 -137.52030945]
[128.93771362 -122.57507324]
[129.15455627 -107.56922150]
[128.22204590 -92.59078979]
[126.14569855 -77.72769928]
[122.93766785 -63.06716537]
[118.61679077 -48.69522095]
[113.20841980 -34.69621277]
[106.74430847 -21.15228462]
[99.26237488 -8.14292526]
[90.80653381 4.25552082]
[81.42639923 15.97029495]
[71.17703247 26.93264961]
[60.11857605 37.07825089]
[69.38352203 48.87489319]
[78.64847565 60.67153168]
[87.91342163 72.46817017]
[109.65171051 68.11332703]
[130.79635620 80.29166412]
[139.42991638 105.48861694]
[154.33181763 107.20130157]
[169.23373413 108.91399384]
[184.13563538 110.62668610]
[199.03753662 112.33937073]
[213.93943787 114.05206299]
[223.62759399 102.04610443]
[238.27589417 97.20555878]
[253.21011353 101.07502747]
[263.66479492 112.41976929]
[266.30389404 127.61972809]
[260.28524780 141.82464600]
[247.52944946 150.50178528]
[232.10678101 150.88230896]
[218.93856812 142.84478760]
[212.22674561 128.95396423]
[197.32484436 127.24127197]
[182.42294312 125.52858734]
[167.52104187 123.81589508]
[152.61914062 122.10320282]
[137.71723938 120.39051819]
[132.06773376 125.32337952]
[144.32427979 133.97076416]
[156.58081055 142.61813354]
[171.42274475 144.79003906]
[182.74992371 154.62339783]
[186.98541260 169.01300049]
[182.79171753 183.41484070]
[171.49314880 193.28103638]
[156.65757751 195.49603271]
[142.96987915 189.36033630]
[134.75238037 176.81152344]
[134.60066223 161.81008911]
[127.68470001 148.49960327]
[120.76872253 135.18910217]
[115.11922455 140.12196350]
[114.80716705 155.11871338]
[114.49510956 170.11546326]
[114.18305206 185.11222839]
[113.87099457 200.10897827]
[113.55894470 215.10572815]
[113.24688721 230.10247803]
[112.93482971 245.09924316]
[112.62277222 260.09597778]
[112.31071472 275.09274292]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 150]
[3 149]
[4 148]
[5 147]
[6 146]
[7 145]
[8 144]
[9 143]
[10 142]
[11 141]
[16 103]
[17 102]
[18 101]
[19 100]
[106 126]
[107 125]
[108 124]
[109 123]
[110 122]
[111 121]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
