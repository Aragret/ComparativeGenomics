%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:51 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGAAACUAAGAGUAGAGUGCUUAGUUGAACAGGGCCCUGAAGCGCGUACACACCGCCCGUCAxxxxxxxxxxCCGAAUGAUAUUUCCUAUUCGCCUACACAAUUCUCCGAUCCGUCCCUAACAAACUAGGAGCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[34.19137192 459.15914917]
[34.19137192 444.15914917]
[34.19137192 429.15914917]
[34.19137192 414.15914917]
[34.19137192 399.15914917]
[34.19137192 384.15914917]
[34.19137192 369.15914917]
[34.19137192 354.15914917]
[34.19137192 339.15914917]
[34.19137192 324.15914917]
[19.04752922 319.21087646]
[6.28038597 309.68084717]
[-5.98198175 318.31994629]
[-18.24435043 326.95907593]
[-30.50671768 335.59817505]
[-42.76908493 344.23730469]
[-55.03145599 352.87640381]
[-67.29382324 361.51553345]
[-66.53476715 376.92422485]
[-74.24657440 390.28579712]
[-87.96842957 397.33660889]
[-103.32173920 395.82681274]
[-115.40731812 386.23815918]
[-120.36869812 371.63034058]
[-116.62272644 356.66467285]
[-105.36473083 346.11663818]
[-90.18708801 343.35208130]
[-75.93293762 349.25317383]
[-63.67057037 340.61404419]
[-51.40820312 331.97494507]
[-39.14583588 323.33581543]
[-26.88346672 314.69668579]
[-14.62109852 306.05758667]
[-2.35872984 297.41845703]
[-7.58606863 276.65316772]
[-3.49398327 255.58428955]
[9.18463135 238.20553589]
[28.08522415 227.82926941]
[49.65248489 226.45526123]
[54.25804901 212.17979431]
[58.86361313 197.90432739]
[63.46917725 183.62887573]
[58.22875214 172.68148804]
[61.99816895 160.72279358]
[73.26817322 154.36347961]
[70.11450958 139.80656433]
[81.93654633 129.29228210]
[86.83809662 115.11572266]
[80.43338013 104.34375000]
[81.67838287 91.87355042]
[71.23857117 81.10273743]
[60.79875946 70.33193207]
[52.52235794 66.31285095]
[50.25669861 59.22677612]
[40.04321671 48.24111176]
[24.21741676 43.94272995]
[20.28918839 28.02101517]
[32.29955673 16.85485649]
[47.89328766 21.93104362]
[51.02888107 38.02762985]
[61.24236298 49.01329422]
[71.56956482 59.89212036]
[82.00937653 70.66292572]
[92.44919586 81.43373871]
[98.95796967 79.98413086]
[105.58209229 80.75003815]
[114.84703827 68.95339966]
[105.06940460 57.51706314]
[97.71325684 44.39705658]
[93.05968475 30.09855270]
[91.28575134 15.17166710]
[92.45778656 0.19031937]
[96.52886963 -14.26984882]
[103.34073639 -27.65358734]
[112.62991333 -39.44736099]
[124.03791046 -49.19904709]
[137.12506104 -56.53527832]
[151.38745117 -61.17573166]
[166.27635193 -62.94383621]
[181.21931458 -61.77349854]
[195.64216614 -57.71156693]
[208.99108887 -50.91595840]
[218.25604248 -62.71259689]
[227.52099609 -74.50923920]
[236.78593445 -86.30587769]
[246.05088806 -98.10251617]
[240.25918579 -112.32755280]
[242.37184143 -127.54045105]
[251.82055664 -139.64901733]
[266.06369019 -145.39610291]
[281.26986694 -143.23577881]
[293.34875488 -133.74916077]
[299.05117798 -119.48809052]
[296.84320068 -104.28873444]
[287.31875610 -92.23963928]
[273.03988647 -86.58195496]
[257.84753418 -88.83757019]
[248.58258057 -77.04092407]
[239.31762695 -65.24428558]
[230.05268860 -53.44764709]
[220.78773499 -41.65100861]
[230.55323792 -30.29279900]
[237.91744995 -17.24341774]
[242.59570312 -3.00347877]
[244.40638733 11.88030815]
[243.27809143 26.83613014]
[239.25228882 41.28903961]
[232.48190308 54.68305588]
[223.22547913 66.50255585]
[211.83731079 76.29210663]
[198.75384521 83.67405701]
[184.47700500 88.36304474]
[169.55494690 90.17707825]
[154.56092834 89.04458618]
[140.07138062 85.00721741]
[126.64368439 78.21834564]
[117.37873077 90.01498413]
[117.59584045 109.59725952]
[101.01465607 120.01727295]
[96.11310577 134.19383240]
[98.91617584 149.76473999]
[87.44473267 159.26502991]
[91.37463379 177.22430420]
[77.74463654 188.23443604]
[73.13907623 202.50990295]
[68.53350830 216.78535461]
[63.92794418 231.06082153]
[71.52508545 235.80401611]
[78.14270782 241.82817078]
[83.56787872 248.93591309]
[87.62667084 256.89505005]
[90.18974304 265.44619751]
[91.17645264 274.31112671]
[90.55740356 283.20193481]
[88.35529327 291.83041382]
[84.64410400 299.91723633]
[79.54663849 307.20111084]
[73.23040771 313.44729614]
[65.90219116 318.45495605]
[57.80121613 322.06381226]
[49.19137192 324.15914917]
[49.19137192 339.15914917]
[49.19137192 354.15914917]
[49.19137192 369.15914917]
[49.19137192 384.15914917]
[49.19137192 399.15914917]
[49.19137192 414.15914917]
[49.19137192 429.15914917]
[49.19137192 444.15914917]
[49.19137192 459.15914917]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[12 34]
[13 33]
[14 32]
[15 31]
[16 30]
[17 29]
[18 28]
[39 127]
[40 126]
[41 125]
[42 124]
[45 122]
[47 120]
[48 119]
[50 64]
[51 63]
[52 62]
[54 61]
[55 60]
[66 117]
[67 116]
[82 101]
[83 100]
[84 99]
[85 98]
[86 97]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
