%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:30 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGUUCUCCUCACUCUCUCAAUCUUAUCCAUCAUAGCAGGCAGUUGAGGUGGAUUAAACCAAAxxxxxxxxxxUAUUACUCUCAUCGCUACCUCCCUGACAAGCGCCUAUAGCACUCGAAUAAUUCUUCUCACCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[81.98613739 432.16162109]
[81.98613739 417.16162109]
[81.98613739 402.16162109]
[81.98613739 387.16162109]
[81.98613739 372.16162109]
[81.98613739 357.16162109]
[81.98613739 342.16162109]
[81.98613739 327.16162109]
[81.98613739 312.16162109]
[81.98613739 297.16162109]
[67.29057312 294.26083374]
[53.43892288 288.54684448]
[40.96426392 280.23751831]
[30.34708786 269.65069580]
[21.99676895 257.19186401]
[16.23579979 243.33889771]
[13.28732586 228.62345886]
[13.26650143 213.61074829]
[16.17600250 198.87776184]
[21.90584183 184.99111938]
[30.23753357 172.48521423]
[40.85241699 161.84176636]
[53.34384918 153.47116089]
[67.23278809 147.69665527]
[81.98613739 144.74191284]
[81.98613739 129.74191284]
[76.60073090 124.52201080]
[70.00007629 137.99165344]
[55.14999390 135.87622070]
[52.57314682 121.09922028]
[65.82992554 114.08219910]
[60.44451904 108.86229706]
[45.45182419 109.33033752]
[30.45912743 109.79837799]
[18.47072029 120.45941162]
[2.68605757 117.59165955]
[-4.78621531 103.39501190]
[1.78598857 88.75992584]
[17.36103630 84.91318512]
[29.99108696 94.80567932]
[44.98378372 94.33763885]
[59.97647858 93.86959839]
[96.49104309 82.43713379]
[97.42666626 67.46633911]
[88.84122467 51.20995712]
[99.03399658 36.95838547]
[91.87745667 22.84829903]
[100.13749695 10.45390320]
[100.76147461 -4.53311300]
[101.38545227 -19.52012825]
[93.22279358 -29.56128883]
[94.08914185 -42.07002258]
[102.97094727 -50.34171677]
[103.90657806 -65.31250763]
[104.84220123 -80.28330231]
[105.77783203 -95.25408936]
[106.71346283 -110.22488403]
[107.64908600 -125.19567108]
[108.58471680 -140.16645813]
[93.95080566 -143.62431335]
[80.11183929 -149.50572205]
[67.46598816 -157.64146423]
[56.37709427 -167.79747009]
[47.16421127 -179.68153381]
[40.09241486 -192.95170593]
[35.36517334 -207.22621155]
[33.11849594 -222.09431458]
[33.41703033 -237.12823486]
[36.25217819 -251.89543152]
[41.54237366 -265.97100830]
[49.13540268 -278.94998169]
[58.81280136 -290.45892334]
[70.29613495 -300.16671753]
[83.25499725 -307.79403687]
[97.31654358 -313.12139893]
[112.07618713 -315.99557495]
[127.10926819 -316.33386230]
[141.98326111 -314.12649536]
[156.27020264 -309.43698120]
[169.55902100 -302.40029907]
[181.46739197 -293.21884155]
[191.65267944 -282.15686035]
[199.82182312 -269.53253174]
[205.73979187 -255.70916748]
[209.23629761 -241.08444214]
[210.21076965 -226.07916260]
[208.63513184 -211.12506104]
[204.55474854 -196.65237427]
[198.08700562 -183.07752991]
[189.41799927 -170.79110718]
[178.79714966 -160.14659119]
[166.53004456 -151.45027161]
[152.96963501 -144.95233154]
[138.50607300 -140.83973694]
[123.55551147 -139.23083496]
[122.61988068 -124.26004791]
[121.68424988 -109.28925323]
[120.74862671 -94.31845856]
[119.81299591 -79.34767151]
[118.87736511 -64.37687683]
[117.94174194 -49.40608597]
[126.59954834 -34.17315292]
[116.37246704 -18.89615250]
[115.74848938 -3.90913558]
[115.12451172 11.07788086]
[122.32568359 24.11599541]
[114.02101135 37.58236313]
[121.99588013 46.73161697]
[121.55865479 59.26268768]
[112.39746094 68.40196991]
[111.46183014 83.37275696]
[121.09036255 94.87456512]
[135.99226379 96.58724976]
[149.40090942 87.77886963]
[164.60229492 92.90697479]
[169.93521118 108.03771973]
[161.30870056 121.56410217]
[145.34028625 123.10982513]
[134.27957153 111.48915863]
[119.37767029 109.77646637]
[113.77978516 114.76782990]
[123.76233673 125.96374512]
[112.56626892 135.94613647]
[102.58402252 124.75055695]
[96.98613739 129.74191284]
[96.98613739 144.74191284]
[111.73948669 147.69665527]
[125.62842560 153.47116089]
[138.11985779 161.84176636]
[148.73474121 172.48521423]
[157.06643677 184.99111938]
[162.79627991 198.87776184]
[165.70578003 213.61074829]
[165.68495178 228.62345886]
[162.73648071 243.33889771]
[156.97550964 257.19186401]
[148.62518311 269.65069580]
[138.00801086 280.23751831]
[125.53335571 288.54684448]
[111.68170166 294.26083374]
[96.98613739 297.16162109]
[96.98613739 312.16162109]
[96.98613739 327.16162109]
[96.98613739 342.16162109]
[96.98613739 357.16162109]
[96.98613739 372.16162109]
[96.98613739 387.16162109]
[96.98613739 402.16162109]
[96.98613739 417.16162109]
[96.98613739 432.16162109]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[25 126]
[26 125]
[32 42]
[33 41]
[34 40]
[43 111]
[44 110]
[46 107]
[48 105]
[49 104]
[50 103]
[53 101]
[54 100]
[55 99]
[56 98]
[57 97]
[58 96]
[59 95]
[112 120]
[113 119]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
