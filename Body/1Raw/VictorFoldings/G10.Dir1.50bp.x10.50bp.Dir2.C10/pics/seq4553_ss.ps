%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:05 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGAACCCAUCCCUGAGAAUCCAAAAUUCUCCGUGCCACCUAUCACACCCCAUCCUAAAGUAAxxxxxxxxxxACUCCCCAUAUCUAACAACGUAAAAAUAAAAUGACAGUUUGAACAUACAAAACCCACCCCCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[167.64129639 126.35258484]
[159.54722595 110.68714142]
[152.90779114 94.35144043]
[138.58518982 98.80825806]
[124.26259613 103.26507568]
[109.94000244 107.72188568]
[97.95317078 116.73941803]
[89.70088196 129.26538086]
[81.44859314 141.79133606]
[73.19630432 154.31730652]
[64.94401550 166.84326172]
[66.75469971 182.78381348]
[55.31929779 194.03598022]
[39.41007996 191.96806335]
[31.23122787 178.16639709]
[37.05686188 163.21842957]
[52.41805267 158.59097290]
[60.67034149 146.06501770]
[68.92263031 133.53904724]
[77.17491913 121.01309204]
[85.42720795 108.48712921]
[76.28547668 96.59474945]
[62.05869293 101.34856415]
[47.83191681 106.10237885]
[33.60513687 110.85619354]
[19.37835693 115.61000824]
[5.15157795 120.36382294]
[-3.27031279 134.01853943]
[-19.21364784 135.80450439]
[-30.44806290 124.35166168]
[-28.35547829 108.44567108]
[-14.54114437 100.28823090]
[0.39776334 106.13704681]
[14.62454224 101.38323212]
[28.85132217 96.62941742]
[43.07810211 91.87560272]
[57.30487823 87.12178802]
[71.53166199 82.36797333]
[71.68769073 74.86959076]
[72.15576935 52.37446213]
[58.13905716 47.03295135]
[44.12234497 41.69143677]
[31.20329094 50.28664780]
[15.70084190 49.61305237]
[3.57600904 39.92966080]
[-0.50896341 24.95993805]
[5.01668024 10.46004486]
[18.02821732 2.00548744]
[33.52244568 2.84721541]
[45.54151917 12.66156673]
[49.46385956 27.67472458]
[63.48057175 33.01623535]
[77.49728394 38.35774994]
[106.33458710 63.44365311]
[105.48318481 93.39929199]
[119.80578613 88.94247437]
[134.12838745 84.48565674]
[148.45097351 80.02884674]
[145.47097778 67.24464417]
[143.36177063 54.28845978]
[142.13296509 41.21954727]
[141.79014587 28.09765053]
[142.33486938 14.98277092]
[143.76461792 1.93486869]
[146.07283020 -10.98640251]
[149.24893188 -23.72196960]
[153.27835083 -36.21361160]
[158.14268494 -48.40421677]
[163.81962585 -60.23806381]
[170.28321838 -71.66105652]
[177.50389099 -82.62097931]
[185.44860840 -93.06773376]
[194.08100891 -102.95356750]
[203.36163330 -112.23330688]
[213.24800110 -120.86454010]
[223.69491577 -128.80781555]
[234.65460205 -136.02684021]
[246.07690430 -142.48863220]
[257.90963745 -148.16366577]
[270.09863281 -153.02601624]
[282.58819580 -157.05346680]
[295.32119751 -160.22764587]
[308.23941040 -162.53405762]
[321.28375244 -163.96217346]
[334.39462280 -164.50549316]
[347.51205444 -164.16154480]
[360.57608032 -162.93196106]
[373.52694702 -160.82235718]
[386.30545044 -157.84240723]
[398.85321045 -154.00578308]
[411.11282349 -149.33001709]
[423.02825928 -143.83653259]
[434.54504395 -137.55046082]
[445.61056519 -130.50057983]
[456.17419434 -122.71911621]
[466.18768311 -114.24169159]
[475.60525513 -105.10707092]
[484.38385010 -95.35704041]
[492.48336792 -85.03620148]
[499.86682129 -74.19174957]
[506.50042725 -62.87328720]
[512.35388184 -51.13257217]
[517.40051270 -39.02329636]
[521.61718750 -26.60083389]
[524.98461914 -13.92199135]
[527.48754883 -1.04474485]
[529.11450195 11.97202492]
[529.85809326 25.06880188]
[529.71490479 38.18570328]
[528.68560791 51.26275635]
[526.77502441 64.24017334]
[541.41851807 67.49099731]
[556.06201172 70.74182129]
[573.45513916 64.78704071]
[585.94952393 77.07077026]
[600.65747070 80.01625061]
[617.37554932 77.19789124]
[624.71173096 92.48239136]
[612.05548096 103.76309967]
[597.71197510 94.72421265]
[583.00402832 91.77873230]
[572.72656250 98.23485565]
[560.41571045 95.85552216]
[552.81115723 85.38532257]
[538.16766357 82.13449860]
[523.52416992 78.88367462]
[518.27880859 95.70555115]
[511.52850342 111.98251343]
[503.32891846 127.58024597]
[493.74758911 142.37002563]
[482.86349487 156.22976685]
[470.76641846 169.04508972]
[457.55603027 180.71020508]
[443.34130859 191.12879944]
[428.23944092 200.21484375]
[412.37503052 207.89331055]
[395.87890625 214.10076904]
[378.88711548 218.78591919]
[361.53982544 221.91004944]
[343.98016357 223.44728088]
[326.35296631 223.38484192]
[308.80371094 221.72319031]
[291.47714233 218.47590637]
[274.51623535 213.66973877]
[258.06097412 207.34422302]
[242.24713135 199.55149841]
[227.20521545 190.35575867]
[213.05937195 179.83280945]
[199.92634583 168.06939697]
[187.91456604 155.16252136]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 58]
[4 57]
[5 56]
[6 55]
[7 21]
[8 20]
[9 19]
[10 18]
[11 17]
[22 38]
[23 37]
[24 36]
[25 35]
[26 34]
[27 33]
[40 53]
[41 52]
[42 51]
[111 126]
[112 125]
[113 124]
[115 121]
[116 120]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
