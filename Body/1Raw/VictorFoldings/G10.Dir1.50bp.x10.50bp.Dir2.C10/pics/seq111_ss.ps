%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:19 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCUCAUCCUAUUAUUUAUCGCACCUACGUUCAAUAUUACAGGCGAACAUACUUACUAAAGUxxxxxxxxxxAGGAGCCUGUUCUGUAAUCGAUAAACCCCGAUCAACCUCACCACCUCUUGCUCAGCCUAUCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[73.19318390 264.78881836]
[73.19318390 249.78883362]
[73.19318390 234.78883362]
[73.19318390 219.78883362]
[73.19318390 204.78883362]
[73.19318390 189.78883362]
[73.19318390 174.78883362]
[73.19318390 159.78883362]
[73.19318390 144.78883362]
[73.19318390 129.78883362]
[71.93582916 115.35739136]
[76.41033936 103.88874054]
[84.41408539 97.26115417]
[93.24856567 96.21217346]
[85.79365540 83.19586945]
[78.33874512 70.17955780]
[65.40701294 71.36088562]
[53.04054642 67.55554199]
[43.08250427 59.36795044]
[37.00289917 48.05286789]
[35.68163681 35.32318115]
[39.28135300 23.09064484]
[47.22831345 13.17875957]
[40.32131577 -0.13639604]
[33.41431808 -13.45155144]
[26.50731850 -26.76670647]
[19.60032082 -40.08186340]
[12.69332123 -53.39701843]
[5.78632307 -66.71217346]
[4.14415979 -51.80233383]
[-2.98490071 -38.60474014]
[-14.55406475 -29.05725670]
[-28.86457634 -24.56178665]
[-43.81515503 -25.77841949]
[-57.21053696 -32.52851105]
[-67.08380890 -43.82091904]
[-71.98524475 -57.99751663]
[-71.19512939 -72.97669220]
[-64.82948303 -86.55898285]
[-53.82300568 -96.75003052]
[-39.79183197 -102.05344391]
[-24.79622459 -101.69048309]
[-11.03805828 -95.71446228]
[-0.53787810 -85.00341034]
[-3.33020258 -99.74121094]
[-6.12252712 -114.47901917]
[-8.91485119 -129.21682739]
[-11.70717621 -143.95463562]
[-14.49950027 -158.69244385]
[-17.29182434 -173.43023682]
[-20.78897858 -177.47863770]
[-22.19706917 -182.01402283]
[-21.68770599 -186.14224243]
[-19.76840210 -189.17271423]
[-21.63601685 -204.05598450]
[-23.50362968 -218.93927002]
[-25.37124252 -233.82255554]
[-27.54807854 -248.66375732]
[-32.15364456 -262.93920898]
[-38.78214264 -276.39517212]
[-45.41064072 -289.85113525]
[-52.03913879 -303.30712891]
[-65.96396637 -311.96917725]
[-65.15445709 -328.34832764]
[-50.44336700 -335.59512329]
[-36.96420288 -326.25463867]
[-38.58317566 -309.93560791]
[-31.95467567 -296.47964478]
[-25.32617760 -283.02368164]
[-18.69767761 -269.56771851]
[-16.74568939 -284.44015503]
[-9.34361267 -297.48660278]
[2.42167044 -306.79132080]
[16.82260704 -310.98812866]
[31.74464035 -309.46072388]
[44.99669647 -302.43341064]
[54.63290787 -290.93804932]
[59.23835373 -276.66253662]
[58.13678741 -261.70306396]
[51.48995590 -248.25613403]
[40.27384949 -238.29626465]
[26.13538170 -233.28590393]
[11.15056992 -233.96073914]
[-2.48029423 -240.22169495]
[-12.75537205 -251.14888000]
[-9.40167904 -247.66630554]
[-8.24162579 -242.01957703]
[-10.48796272 -235.69017029]
[-8.62034893 -220.80688477]
[-6.75273609 -205.92359924]
[-4.88512278 -191.04032898]
[-2.55401897 -176.22256470]
[0.23830546 -161.48475647]
[3.03062987 -146.74694824]
[5.82295418 -132.00915527]
[8.61527920 -117.27133942]
[11.40760326 -102.53353882]
[14.19992828 -87.79573059]
[19.10147858 -73.61917114]
[26.00847626 -60.30401611]
[32.91547394 -46.98886108]
[39.82247543 -33.67370605]
[46.72947311 -20.35855103]
[53.63647079 -7.04339457]
[60.54346848 6.27176094]
[77.70704651 6.39797354]
[92.53859711 15.21152782]
[100.94052887 30.38143921]
[100.53926086 47.80666351]
[91.35505676 62.72464752]
[98.80996704 75.74095917]
[106.26487732 88.75726318]
[117.76667786 98.38579559]
[131.89147949 103.43454742]
[146.01628113 108.48330688]
[156.84461975 97.72645569]
[171.27064514 92.74122620]
[186.43006897 94.51743317]
[199.31295776 102.70241547]
[207.36141968 115.67103577]
[208.97741699 130.84835815]
[203.84008789 145.22093201]
[192.96948242 155.93505859]
[178.52394104 160.86343384]
[163.37162781 159.02754211]
[150.52107239 150.79190063]
[142.52374268 137.79168701]
[140.96752930 122.60810852]
[126.84272766 117.55934906]
[112.71792603 112.51059723]
[106.58673859 116.83015442]
[116.56192017 128.03263855]
[126.53709412 139.23513794]
[138.87783813 147.76191711]
[138.94613647 162.76176453]
[126.68354034 171.40055847]
[112.58213806 166.28680420]
[108.70713806 151.79675293]
[101.51575470 138.63301086]
[94.32437134 125.46926880]
[88.19318390 129.78883362]
[88.19318390 144.78883362]
[88.19318390 159.78883362]
[88.19318390 174.78883362]
[88.19318390 189.78883362]
[88.19318390 204.78883362]
[88.19318390 219.78883362]
[88.19318390 234.78883362]
[88.19318390 249.78883362]
[88.19318390 264.78881836]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[14 112]
[15 111]
[16 110]
[23 105]
[24 104]
[25 103]
[26 102]
[27 101]
[28 100]
[29 99]
[44 98]
[45 97]
[46 96]
[47 95]
[48 94]
[49 93]
[50 92]
[54 91]
[55 90]
[56 89]
[57 88]
[58 85]
[59 70]
[60 69]
[61 68]
[62 67]
[113 130]
[114 129]
[115 128]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
