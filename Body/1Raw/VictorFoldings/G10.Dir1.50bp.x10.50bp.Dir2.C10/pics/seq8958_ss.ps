%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:14 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCCAAGGCCACCACACACCACCUGUCCAAAAAGGCCUUCGAUACGGGAUAAUCCUAUUUAUxxxxxxxxxxCCCCUCCUAAUACUAACUACCUGACUCCUACCCCUCACAAUCAUGGCAAGCCAACGCCACCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[110.07215118 308.98593140]
[109.76010132 293.98919678]
[109.44804382 278.99243164]
[109.13598633 263.99566650]
[108.82392883 248.99891663]
[108.51187134 234.00216675]
[108.19981384 219.00541687]
[107.88776398 204.00866699]
[107.57570648 189.01190186]
[105.24459839 174.19415283]
[100.93701935 159.82597351]
[96.62943268 145.45777893]
[92.32184601 131.08959961]
[79.00669098 124.18260193]
[64.77991486 128.93641663]
[50.55313110 133.69023132]
[36.32635498 138.44404602]
[22.09957504 143.19786072]
[20.28117371 160.21730042]
[11.26311398 174.70040894]
[-3.11460161 183.78283691]
[-19.95770836 185.69302368]
[-35.90024948 180.09747314]
[-47.77723312 168.15788269]
[-61.79394531 173.49940491]
[-75.81066132 178.84091187]
[-83.65724182 192.83415222]
[-99.51248932 195.28178406]
[-111.21360016 184.30618286]
[-109.78449249 168.32691956]
[-96.32144928 159.60188293]
[-81.15217590 164.82420349]
[-67.13545990 159.48268127]
[-53.11874771 154.14117432]
[-53.07117844 141.08251953]
[-48.55898666 128.79397583]
[-40.10339737 118.75846100]
[-28.70289803 112.19498444]
[-15.71536541 109.91054535]
[-2.69634604 112.20095825]
[8.78725529 118.81276703]
[17.34576035 128.97108459]
[31.57253838 124.21726227]
[45.79931641 119.46344757]
[60.02609634 114.70963287]
[74.25287628 109.95581818]
[75.77500916 92.69981384]
[86.70458221 81.23566437]
[100.93550110 79.32791138]
[106.99851227 65.60785675]
[113.06153107 51.88780594]
[99.93104553 44.61479187]
[87.50538635 36.19403458]
[75.88458252 26.69334030]
[65.16220856 16.18920326]
[55.42459106 4.76619768]
[46.75013351 -7.48370314]
[39.20868301 -20.46186829]
[32.86095810 -34.06380081]
[27.75806618 -48.17998886]
[23.94109726 -62.69677353]
[21.44077873 -77.49726868]
[20.27724648 -92.46231079]
[20.45986748 -107.47140503]
[21.98717117 -122.40370178]
[24.84686089 -137.13897705]
[29.01590919 -151.55859375]
[34.46075058 -165.54644775]
[41.13754654 -178.98989868]
[48.99253845 -191.78073120]
[57.96247864 -203.81594849]
[67.97515106 -214.99864197]
[78.94992828 -225.23878479]
[90.79845428 -234.45391846]
[103.42532349 -242.56985474]
[116.72887421 -249.52124023]
[130.60198975 -255.25210571]
[144.93298340 -259.71630859]
[159.60644531 -262.87792969]
[174.50424194 -264.71145630]
[189.50642395 -265.20217896]
[204.49218750 -264.34613037]
[219.34089661 -262.15020752]
[233.93298340 -258.63204956]
[248.15095520 -253.82005310]
[261.88034058 -247.75291443]
[275.01058960 -240.47950745]
[287.43600464 -232.05836487]
[299.05651855 -222.55731201]
[309.77856445 -212.05285645]
[319.51583862 -200.62954712]
[328.18994141 -188.37937927]
[335.73098755 -175.40098572]
[342.07827759 -161.79885864]
[347.18075562 -147.68251038]
[350.99728394 -133.16561890]
[353.49713135 -118.36504364]
[354.66021729 -103.39997101]
[354.47714233 -88.39088440]
[352.94937134 -73.45862579]
[350.08923340 -58.72343826]
[345.91973877 -44.30395126]
[340.47448730 -30.31626701]
[333.79727173 -16.87301064]
[325.94189453 -4.08241892]
[316.97158813 7.95252228]
[306.95858765 19.13491440]
[295.98348999 29.37471962]
[284.13467407 38.58949280]
[271.50756836 46.70503998]
[258.20379639 53.65601730]
[244.33050537 59.38646317]
[229.99938965 63.85023117]
[215.32582092 67.01139069]
[200.42797852 68.84447479]
[185.42578125 69.33473969]
[170.44003296 68.47822571]
[155.59138489 66.28184509]
[140.99940491 62.76326370]
[126.78157806 57.95082092]
[120.71856689 71.67087555]
[114.65555573 85.39093018]
[123.26708984 106.46691895]
[106.69003296 126.78201294]
[110.99761200 141.15019226]
[115.30519867 155.51838684]
[119.61278534 169.88656616]
[124.21594238 155.61032104]
[134.14323425 144.36537170]
[147.73855591 138.02761841]
[162.73390198 137.65432739]
[176.62773132 143.30780029]
[187.10221863 154.04487610]
[192.41000366 168.07440186]
[191.66561890 183.05592346]
[184.99324036 196.49018860]
[173.50596619 206.13604736]
[159.12016296 210.38438416]
[144.23567200 208.52644348]
[131.33557129 200.87220764]
[122.57245636 188.69985962]
[122.88451385 203.69660950]
[123.19657135 218.69335938]
[123.50862885 233.69010925]
[123.82068634 248.68687439]
[124.13273621 263.68362427]
[124.44479370 278.68035889]
[124.75685120 293.67712402]
[125.06890869 308.67388916]
[127.65990448 327.88159180]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 149]
[2 148]
[3 147]
[4 146]
[5 145]
[6 144]
[7 143]
[8 142]
[9 141]
[10 127]
[11 126]
[12 125]
[13 124]
[14 46]
[15 45]
[16 44]
[17 43]
[18 42]
[24 34]
[25 33]
[26 32]
[49 122]
[50 121]
[51 120]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
