%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:47 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGACCUUUAGCAAUAAACGAAAGUUUAACUAAGCUAUACUAACCCCAGGGUUGGUCAAUUUCxxxxxxxxxxAAGUAAAAGGAACUCGGCAAAUCUUACCCCGCCUGUUUACCAAAAACAUCACCUCUAGCACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[107.21356201 282.10906982]
[107.21356201 267.10906982]
[107.21356201 252.10906982]
[107.21356201 237.10906982]
[107.21356201 222.10906982]
[107.21356201 207.10906982]
[107.21356201 192.10906982]
[107.21356201 177.10906982]
[107.21356201 162.10906982]
[107.21356201 147.10906982]
[69.98471832 125.63047791]
[70.20280457 90.48087311]
[57.42544556 82.62345123]
[44.64809036 74.76602173]
[31.87073135 66.90859985]
[19.09337425 59.05117416]
[4.19147253 57.33848190]
[-10.03530693 62.09229660]
[-24.26208687 66.84611511]
[-32.17977142 85.24602509]
[-50.75655746 91.88832092]
[-68.00830078 82.95815277]
[-81.91085815 88.59011078]
[-95.81341553 94.22206879]
[-109.71597290 99.85402679]
[-123.61853027 105.48598480]
[-133.27072144 118.74370575]
[-149.54757690 116.74469757]
[-155.70486450 101.54535675]
[-145.40849304 88.78147125]
[-129.25048828 91.58342743]
[-115.34793091 85.95146942]
[-101.44537354 80.31951141]
[-87.54281616 74.68755341]
[-73.64025879 69.05560303]
[-72.30957794 58.76537323]
[-66.75553894 49.90523529]
[-57.93808365 44.13420105]
[-47.43523407 42.56612778]
[-37.16085815 45.55531693]
[-29.01590157 52.61933517]
[-14.78912163 47.86552048]
[-0.56234252 43.11170197]
[1.38481569 42.02485275]
[3.37712312 41.42517853]
[-2.97000647 27.83422852]
[-9.31713581 14.24327755]
[-15.66426563 0.65232623]
[-24.80599976 -11.24005318]
[-36.30780411 -20.86857986]
[-47.80960464 -30.49710655]
[-59.31140900 -40.12563324]
[-75.54924774 -42.42013168]
[-81.42928314 -57.72886276]
[-70.90264130 -70.30351257]
[-54.79822922 -67.20836639]
[-49.68288422 -51.62743759]
[-38.18107986 -41.99890900]
[-26.67927742 -32.37038422]
[-15.17747307 -22.74185753]
[-20.01781273 -36.93943024]
[-20.92459106 -51.91199875]
[-17.83303261 -66.58995056]
[-10.96399021 -79.92472839]
[-0.80817360 -90.96372223]
[11.90890884 -98.91832733]
[26.27877617 -103.22029877]
[41.27487564 -103.56229401]
[55.82592392 -99.91989899]
[68.89241791 -92.55330658]
[79.54092407 -81.98876953]
[87.01073456 -68.98100281]
[90.76821899 -54.45925140]
[90.54495239 -39.46091461]
[86.35688019 -25.05743980]
[78.50320435 -12.27777958]
[67.54496002 -2.03488612]
[54.26498032 4.93951178]
[39.61196518 8.14717770]
[24.63269043 7.35896349]
[10.39723969 2.63117790]
[-2.07331467 -5.69480324]
[4.27381516 7.89614773]
[10.62094402 21.48709869]
[16.96807480 35.07804871]
[26.95079994 46.27381516]
[39.72815704 54.13124084]
[52.50551605 61.98866653]
[65.28287506 69.84609222]
[78.06022644 77.70352173]
[85.68487549 69.14906311]
[96.64112091 63.41396332]
[109.81616211 61.77067566]
[123.62609100 65.03479767]
[136.20608521 73.39742279]
[145.65748596 86.33640289]
[159.67419434 80.99488831]
[173.69090271 75.65338135]
[174.93090820 60.44071579]
[182.65605164 47.27694321]
[195.33250427 38.77573395]
[210.44332886 36.62501526]
[224.98828125 41.25181198]
[236.07943726 51.73746490]
[241.51464844 66.00004578]
[240.21473694 81.20771027]
[232.43782043 94.34096527]
[219.72799683 102.79218292]
[204.60881042 104.88337708]
[190.08219910 100.19934082]
[179.03242493 89.67008972]
[165.01570129 95.01160431]
[150.99899292 100.35311890]
[151.31105042 115.34986877]
[165.53782654 120.10368347]
[179.76460266 124.85749817]
[193.99139404 129.61131287]
[208.21817017 134.36512756]
[223.15707397 128.51632690]
[236.97140503 136.67375183]
[239.06399536 152.57974243]
[227.82957458 164.03257751]
[211.88624573 162.24662781]
[203.46435547 148.59190369]
[189.23757935 143.83808899]
[175.01078796 139.08427429]
[160.78401184 134.33045959]
[146.55723572 129.57664490]
[140.47131348 133.95974731]
[150.67738342 144.95230103]
[160.88346863 155.94483948]
[171.08953857 166.93739319]
[182.55577087 176.60824585]
[181.98214722 191.59727478]
[169.81033325 200.36351013]
[155.41213989 196.15730286]
[149.87362671 182.21717834]
[142.68225098 169.05343628]
[135.49085999 155.88969421]
[128.29948425 142.72596741]
[122.21356201 147.10906982]
[122.21356201 162.10906982]
[122.21356201 177.10906982]
[122.21356201 192.10906982]
[122.21356201 207.10906982]
[122.21356201 222.10906982]
[122.21356201 237.10906982]
[122.21356201 252.10906982]
[122.21356201 267.10906982]
[122.21356201 282.10906982]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[12 90]
[13 89]
[14 88]
[15 87]
[16 86]
[17 43]
[18 42]
[19 41]
[22 35]
[23 34]
[24 33]
[25 32]
[26 31]
[45 85]
[46 84]
[47 83]
[48 82]
[49 60]
[50 59]
[51 58]
[52 57]
[96 113]
[97 112]
[98 111]
[114 128]
[115 127]
[116 126]
[117 125]
[118 124]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
