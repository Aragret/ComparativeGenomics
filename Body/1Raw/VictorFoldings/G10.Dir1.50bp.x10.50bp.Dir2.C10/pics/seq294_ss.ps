%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:14 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGACCAAACCCCCCCUCCCCCGCUUCUGGCCACAGCACUUAAACACAUCUCUGCCAAACCCCxxxxxxxxxxCAACCUCGCUUCCCCACCCUUACUAACAUUAACGAAAAUAACCCCACCCUACUAAACCCCCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[-21.14790916 281.04666138]
[-29.91411781 293.21850586]
[-38.68032455 305.39035034]
[-47.44652939 317.56216431]
[-56.21273804 329.73400879]
[-64.85185242 341.99636841]
[-73.36294556 354.34796143]
[-81.87403870 366.69952393]
[-90.38512421 379.05108643]
[-98.89621735 391.40267944]
[-93.60746002 405.99063110]
[-97.93570709 420.89184570]
[-110.21664429 430.37646484]
[-125.72800446 430.79748535]
[-138.50535583 421.99301147]
[-143.63554382 407.34854126]
[-139.14590454 392.49514771]
[-126.76280212 383.14431763]
[-111.24778748 382.89157104]
[-102.73669434 370.54000854]
[-94.22560883 358.18844604]
[-85.71451569 345.83685303]
[-77.20343018 333.48529053]
[-75.99009705 326.14544678]
[-68.38457489 320.96780396]
[-59.61836624 308.79595947]
[-50.85216141 296.62414551]
[-42.08595276 284.45230103]
[-33.31974792 272.28045654]
[-62.27024841 245.33779907]
[-85.87255859 213.60502625]
[-103.34877777 178.12800598]
[-114.12292480 140.07598877]
[-117.83988953 100.70312500]
[-132.83258057 100.23508453]
[-147.82528687 99.76704407]
[-162.01263428 107.99206543]
[-176.09259033 99.58451080]
[-175.58088684 83.19334412]
[-161.00393677 75.68039703]
[-147.35723877 84.77434540]
[-132.36454773 85.24238586]
[-117.37184906 85.71042633]
[-116.43482971 75.28817749]
[-114.99839783 64.92294312]
[-113.06585693 54.63864899]
[-110.64167023 44.45903015]
[-107.73142242 34.40756607]
[-104.34184265 24.50746155]
[-100.48074341 14.78155231]
[-96.15703583 5.25228500]
[-91.38069153 -4.05835295]
[-86.16275024 -13.12887764]
[-80.51522827 -21.93835640]
[-74.45117188 -30.46646500]
[-67.98457336 -38.69352341]
[-61.13035202 -46.60054779]
[-53.90432358 -54.16929245]
[-46.32316208 -61.38228989]
[-38.40435791 -68.22290039]
[-30.16619110 -74.67533875]
[-21.62766266 -80.72471619]
[-12.80848217 -86.35707092]
[-3.72899556 -91.55941010]
[5.58984470 -96.31972504]
[15.12653542 -100.62702942]
[24.85907173 -104.47139740]
[34.76499557 -107.84394836]
[44.82144547 -110.73689270]
[55.00522232 -113.14356995]
[65.29282379 -115.05841827]
[75.66051483 -116.47702026]
[86.08436584 -117.39610291]
[96.54032135 -117.81354523]
[107.00427246 -117.72838593]
[117.45204926 -117.14082336]
[127.85956573 -116.05220795]
[138.20278931 -114.46504974]
[148.45785522 -112.38301849]
[158.60112000 -109.81091309]
[168.60916138 -106.75467682]
[178.45887756 -103.22134399]
[188.12754822 -99.21908569]
[197.59288025 -94.75713348]
[206.83300781 -89.84577942]
[215.82661438 -84.49636078]
[224.55296326 -78.72120667]
[232.99189758 -72.53366852]
[241.12396240 -65.94799805]
[248.93037415 -58.97941208]
[256.39312744 -51.64398193]
[263.49502563 -43.95862961]
[270.21963501 -35.94109726]
[276.55148315 -27.60988235]
[282.47595215 -18.98420715]
[287.97933960 -10.08397675]
[293.04895020 -0.92972875]
[297.67312622 8.45741367]
[301.84115601 18.05578995]
[305.54345703 27.84325218]
[308.77145386 37.79721451]
[311.51773071 47.89471054]
[313.77590942 58.11243820]
[315.54083252 68.42682648]
[316.80838013 78.81406403]
[317.57562256 89.25018311]
[317.84082031 99.71111298]
[317.60336304 110.17271423]
[316.86380005 120.61083221]
[315.62380981 131.00140381]
[313.88626099 141.32043457]
[311.65518188 151.54411316]
[308.93569946 161.64884949]
[305.73413086 171.61134338]
[302.05780029 181.40858459]
[297.91522217 191.01799011]
[293.31597900 200.41735840]
[288.27062988 209.58502197]
[282.79086304 218.49981689]
[276.88931274 227.14117432]
[270.57958984 235.48915100]
[263.87625122 243.52449036]
[256.79479980 251.22865295]
[249.35150146 258.58386230]
[241.56359863 265.57312012]
[233.44903564 272.18032837]
[225.02653503 278.39022827]
[216.31553650 284.18850708]
[207.33615112 289.56176758]
[198.10906982 294.49761963]
[188.65562439 298.98464966]
[178.99758911 303.01254272]
[169.15727234 306.57199097]
[159.15737915 309.65475464]
[149.02098083 312.25375366]
[138.77146912 314.36297607]
[128.43249512 315.97756958]
[118.02790070 317.09378052]
[107.58171082 317.70904541]
[97.11803436 317.82196045]
[86.66100311 317.43225098]
[76.23474884 316.54080200]
[65.86333466 315.14971924]
[55.57069016 313.26214600]
[45.38056564 310.88250732]
[35.31647491 308.01623535]
[25.40164375 304.66998291]
[15.65894604 300.85144043]
[6.11086464 296.56942749]
[-3.22056842 291.83386230]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 29]
[2 28]
[3 27]
[4 26]
[5 25]
[6 23]
[7 22]
[8 21]
[9 20]
[10 19]
[34 43]
[35 42]
[36 41]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
