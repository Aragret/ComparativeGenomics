%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:37 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCCUAGCAACACUCCACCUCCUAUUCUUGCACGAAACGGGAUCAAACAACCCCCUAGGAAUxxxxxxxxxxGUCCCUAACAAACUAGGAGGCGUCCUUGCCCUAUUACUAUCCAUCCUCAUCCUAGCAAUACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[96.89746857 277.93161011]
[96.89746857 262.93161011]
[96.89746857 247.93161011]
[96.89746857 232.93161011]
[96.89746857 217.93161011]
[96.89746857 202.93161011]
[96.89746857 187.93161011]
[96.89746857 172.93161011]
[96.89746857 157.93161011]
[96.89746857 142.93161011]
[79.28591919 135.49461365]
[67.39089203 121.66470337]
[63.11231232 104.83366394]
[66.59874725 88.71482086]
[76.36554718 76.52820587]
[68.37563324 63.83327484]
[60.38571930 51.13834763]
[52.39580154 38.44341660]
[39.33720016 40.87493515]
[26.26436043 38.70930862]
[14.74328518 32.22813034]
[6.14651585 22.22861862]
[1.48963201 9.92561245]
[1.31130350 -3.19599891]
[5.61107302 -15.56048298]
[13.85203457 -25.69049072]
[6.39712429 -38.70679855]
[-1.05778599 -51.72311020]
[-8.51269627 -64.73941803]
[-15.96760654 -77.75572968]
[-23.42251778 -90.77204132]
[-30.87742805 -103.78834534]
[-44.45010376 -111.91810608]
[-44.06140900 -126.80764008]
[-51.08818054 -132.74702454]
[-51.53278732 -140.17320251]
[-58.71529770 -153.34178162]
[-65.89780426 -166.51036072]
[-72.61039734 -165.91911316]
[-79.24024200 -166.95845032]
[-85.39869690 -169.55390930]
[-90.72805023 -173.54022217]
[-94.92224121 -178.67173767]
[-97.74446106 -184.63760376]
[-99.04048920 -191.08050537]
[-98.74706268 -197.61810303]
[-96.89484406 -203.86573792]
[-108.59446716 -213.25289917]
[-120.29409027 -222.64006042]
[-134.88856506 -217.63958740]
[-149.86421204 -221.34547424]
[-160.44235229 -232.57519531]
[-163.24754333 -247.74537659]
[-157.38465881 -262.01525879]
[-144.72451782 -270.83142090]
[-129.30693054 -271.38061523]
[-116.05159760 -263.48760986]
[-109.18824005 -249.67102051]
[-110.90692902 -234.33969116]
[-99.20730591 -224.95252991]
[-87.50768280 -215.56536865]
[-85.02824402 -217.10728455]
[-82.39572906 -218.37022400]
[-79.64140320 -219.33917236]
[-79.64140320 -234.33917236]
[-79.64140320 -249.33917236]
[-79.64140320 -264.33917236]
[-93.89407349 -269.50030518]
[-105.52000427 -279.22723389]
[-113.11530304 -292.34545898]
[-115.76280975 -307.27081299]
[-113.14281464 -322.20104980]
[-105.57170105 -335.33322144]
[-93.96371460 -345.08157349]
[-79.72058105 -350.26895142]
[-64.56222534 -350.26895142]
[-50.31909180 -345.08157349]
[-38.71110535 -335.33322144]
[-31.13999367 -322.20104980]
[-28.52000046 -307.27081299]
[-31.16750336 -292.34545898]
[-38.76280594 -279.22723389]
[-50.38873291 -269.50030518]
[-64.64140320 -264.33917236]
[-64.64140320 -249.33917236]
[-64.64140320 -234.33917236]
[-64.64140320 -219.33917236]
[-45.64712143 -200.22427368]
[-52.72922134 -173.69287109]
[-45.54671478 -160.52429199]
[-38.36420441 -147.35571289]
[-31.04509926 -134.26255798]
[-18.00564766 -127.06380463]
[-17.86111832 -111.24325562]
[-10.40620708 -98.22695160]
[-2.95129728 -85.21063995]
[4.50361300 -72.19432831]
[11.95852375 -59.17802048]
[19.41343307 -46.16170883]
[26.86834335 -33.14540100]
[43.62266541 -34.85103989]
[59.49995422 -29.07293701]
[71.31595612 -16.91887665]
[76.67873383 -0.78041852]
[74.47280884 16.13760567]
[65.09072876 30.45350075]
[73.08065033 43.14842987]
[81.07056427 55.84336090]
[89.06047821 68.53829193]
[107.43386841 65.03870392]
[126.12446594 72.16200256]
[139.10609436 89.05073547]
[141.47096252 111.52857971]
[155.59576416 116.57733154]
[165.77445984 105.28740692]
[179.50097656 98.75659943]
[194.68209839 97.98082733]
[209.00283813 103.07838440]
[220.27937317 113.27192688]
[226.79209900 127.00701141]
[227.54791260 142.18914795]
[222.43151855 156.50315857]
[212.22315979 167.76626587]
[198.47950745 174.26094055]
[183.29640198 174.99676514]
[168.98912048 169.86155701]
[157.73945618 159.63838196]
[151.26286316 145.88619995]
[150.54701233 130.70213318]
[136.42221069 125.65338135]
[130.29103088 129.97293091]
[140.26620483 141.17543030]
[150.24137878 152.37791443]
[162.58212280 160.90469360]
[162.65042114 175.90454102]
[150.38783264 184.54333496]
[136.28642273 179.42959595]
[132.41142273 164.93952942]
[125.22003937 151.77578735]
[118.02865601 138.61206055]
[111.89746857 142.93161011]
[111.89746857 157.93161011]
[111.89746857 172.93161011]
[111.89746857 187.93161011]
[111.89746857 202.93161011]
[111.89746857 217.93161011]
[111.89746857 232.93161011]
[111.89746857 247.93161011]
[111.89746857 262.93161011]
[111.89746857 277.93161011]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[15 109]
[16 108]
[17 107]
[18 106]
[26 100]
[27 99]
[28 98]
[29 97]
[30 96]
[31 95]
[32 94]
[34 92]
[36 91]
[37 90]
[38 89]
[47 61]
[48 60]
[49 59]
[64 87]
[65 86]
[66 85]
[67 84]
[113 130]
[114 129]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
