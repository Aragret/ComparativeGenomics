%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:37 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGAUAUCCCCCGCCCGCGUCCCUUUCUCCAUAAAAUUCUUCUUAGUAGCUAUUACCUUCUUAUxxxxxxxxxxAACGCCUGGCAGCCGGAAGCCUAUUCGCAGGAUUUCUCAUUACUAACAACAUUUCCCCCGCCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[146.63526917 336.40695190]
[146.63526917 321.40695190]
[146.63526917 306.40695190]
[146.63526917 291.40695190]
[146.63526917 276.40695190]
[146.63526917 261.40695190]
[146.63526917 246.40696716]
[146.63526917 231.40696716]
[146.63526917 216.40696716]
[146.63526917 201.40696716]
[142.67866516 186.93820190]
[129.54158020 179.91920471]
[129.17977905 164.10214233]
[121.54681396 151.18943787]
[113.91384125 138.27674866]
[106.28086853 125.36404419]
[91.90546417 124.84477234]
[79.98315430 116.79612732]
[74.12707520 103.65731812]
[76.11195374 89.41012573]
[64.72087860 79.65085602]
[53.32980347 69.89157867]
[35.17948532 66.95958710]
[29.93819618 50.23913956]
[18.34914780 40.71580124]
[6.76009893 31.19246292]
[-4.82894945 21.66912651]
[-15.57985306 32.15155029]
[-27.41867828 41.38764572]
[-40.20170975 49.26528931]
[-53.77377701 55.68885422]
[-67.97012329 60.58036423]
[-82.61842346 63.88044357]
[-97.54085541 65.54903412]
[-112.55628204 65.56587219]
[-127.48242188 63.93075943]
[-142.13807678 60.66354370]
[-156.34536743 55.80388641]
[-169.93180847 49.41077805]
[-182.73248291 41.56182861]
[-194.59199524 32.35231018]
[-205.36637878 21.89402580]
[-214.92485046 10.31392479]
[-223.15138245 -2.24742079]
[-229.94610596 -15.63752651]
[-235.22653198 -29.69384956]
[-238.92858887 -44.24575806]
[-241.00730896 -59.11660767]
[-241.43745422 -74.12587738]
[-240.21382141 -89.09136963]
[-237.35127258 -103.83141327]
[-232.88453674 -118.16708374]
[-226.86782837 -131.92436218]
[-219.37420654 -144.93623352]
[-210.49464417 -157.04475403]
[-200.33689880 -168.10293579]
[-189.02429199 -177.97654724]
[-176.69415283 -186.54573059]
[-163.49615479 -193.70646667]
[-149.59051514 -199.37181091]
[-135.14602661 -203.47302246]
[-120.33802795 -205.96029663]
[-105.34629059 -206.80343628]
[-90.35279083 -205.99221802]
[-75.53952789 -203.53649902]
[-61.08633804 -199.46604919]
[-47.16866302 -193.83032227]
[-33.95544434 -186.69772339]
[-21.60708809 -178.15481567]
[-10.27348423 -168.30531311]
[-0.09221690 -157.26878357]
[8.81312466 -145.17919922]
[16.33443642 -132.18331909]
[22.38041687 -118.43888092]
[26.87767601 -104.11276245]
[29.77161598 -89.37884521]
[31.02711296 -74.41599274]
[30.62892151 -59.40584183]
[28.58187675 -44.53059769]
[24.91082954 -29.97083855]
[19.66034126 -15.90330315]
[12.89414978 -2.49875808]
[4.69438839 10.08007717]
[16.28343582 19.60341454]
[27.87248421 29.12675285]
[39.46153259 38.65008926]
[51.56636810 37.79269028]
[61.30683517 45.68538666]
[63.08908081 58.50050354]
[74.48015594 68.25978088]
[85.87122345 78.01905060]
[101.87626648 73.93730927]
[117.13159943 80.26950073]
[129.80311584 72.24250793]
[133.25520325 66.48701477]
[138.34574890 63.78992462]
[143.16377258 64.15850830]
[156.15414429 56.65850449]
[169.14453125 49.15850449]
[174.66894531 34.09661865]
[189.93415833 29.16175079]
[203.22999573 38.13950729]
[204.35704041 54.14292145]
[192.45071411 64.89554596]
[176.64453125 62.14888763]
[163.65414429 69.64888763]
[150.66377258 77.14888763]
[137.83010864 84.91402435]
[125.15859985 92.94101715]
[125.40502930 106.11299896]
[119.19357300 117.73107910]
[126.82653809 130.64376831]
[134.45950317 143.55647278]
[142.09248352 156.46917725]
[155.77552795 164.41175842]
[155.59135437 179.30522156]
[155.76878357 164.30627441]
[159.21827698 149.70829773]
[165.77325439 136.21636963]
[175.11711121 124.48212433]
[186.79853821 115.07232666]
[200.25332642 108.44145203]
[214.83164978 104.90978241]
[229.82936096 104.64787292]
[244.52209473 107.66838837]
[258.20019531 113.82543945]
[270.20306396 122.82164001]
[279.95092773 134.22248840]
[286.97296143 147.47732544]
[290.93005371 161.94595337]
[291.63107300 176.92956543]
[289.04211426 191.70445251]
[283.28829956 205.55702209]
[274.64746094 217.81817627]
[263.53695679 227.89573669]
[250.49345398 235.30294800]
[236.14691162 239.68205261]
[221.19026184 240.82156372]
[206.34588623 238.66642761]
[192.33076477 233.32073975]
[179.82182312 225.04267883]
[169.42321777 214.23208618]
[161.63526917 201.40696716]
[161.63526917 216.40696716]
[161.63526917 231.40696716]
[161.63526917 246.40696716]
[161.63526917 261.40695190]
[161.63526917 276.40695190]
[161.63526917 291.40695190]
[161.63526917 306.40695190]
[161.63526917 321.40695190]
[161.63526917 336.40695190]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 152]
[2 151]
[3 150]
[4 149]
[5 148]
[6 147]
[7 146]
[8 145]
[9 144]
[10 143]
[11 116]
[13 114]
[14 113]
[15 112]
[16 111]
[20 91]
[21 90]
[22 89]
[24 86]
[25 85]
[26 84]
[27 83]
[93 109]
[94 108]
[97 107]
[98 106]
[99 105]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
