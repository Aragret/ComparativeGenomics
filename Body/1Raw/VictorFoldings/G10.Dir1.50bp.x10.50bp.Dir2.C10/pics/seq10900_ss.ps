%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:26 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCCACCCCAGUCUCAGCCCUACUCCACUCAAGCACUAUAGUUGUAGCAGGAAUCUUCUUACxxxxxxxxxxUUCUAAUUUAAACUAUUCUCUGUUCUUUCAUGGGGAAGCAGAUUUGGGUACCACCCAAGUCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[92.50000000 242.64761353]
[92.50000000 227.64761353]
[92.50000000 212.64761353]
[92.50000000 197.64761353]
[92.50000000 182.64761353]
[92.50000000 167.64761353]
[92.50000000 152.64761353]
[92.50000000 137.64761353]
[92.50000000 122.64762115]
[92.50000000 107.64762115]
[90.47766876 92.78457642]
[86.46992493 78.32988739]
[82.46218872 63.87519455]
[77.12067413 49.85848236]
[70.49217224 36.40251923]
[63.86367416 22.94655228]
[57.23517609 9.49058628]
[50.60667801 -3.96537900]
[36.73287964 1.75187802]
[22.50819397 6.52969646]
[7.99614859 10.34673691]
[-6.73844051 13.18595219]
[-21.62976456 15.03466129]
[-36.61131668 15.88460636]
[-51.61618042 15.73199272]
[-66.57734680 14.57750130]
[-81.42798615 12.42628860]
[-96.10177612 9.28796291]
[-110.53318024 5.17653990]
[-124.65774536 0.11038263]
[-138.41238403 -5.88788176]
[-151.73567200 -12.79146290]
[-164.56808472 -20.56952858]
[-176.85232544 -29.18733978]
[-188.53352356 -38.60640335]
[-199.55952454 -48.78465652]
[-209.88105774 -59.67663956]
[-219.45202637 -71.23370361]
[-228.22969055 -83.40422821]
[-236.17486572 -96.13386536]
[-243.25202942 -109.36575317]
[-249.42961121 -123.04080200]
[-254.67999268 -137.09793091]
[-258.97973633 -151.47434998]
[-262.30963135 -166.10585022]
[-264.65481567 -180.92710876]
[-266.00479126 -195.87190247]
[-266.35354614 -210.87348938]
[-265.69955444 -225.86486816]
[-264.04568481 -240.77908325]
[-261.39932251 -255.54953003]
[-257.77233887 -270.11022949]
[-253.18090820 -284.39617920]
[-247.64550781 -298.34353638]
[-241.19090271 -311.89001465]
[-233.84588623 -324.97512817]
[-225.64329529 -337.54043579]
[-216.61973572 -349.52978516]
[-206.81553650 -360.88964844]
[-196.27445984 -371.56930542]
[-185.04360962 -381.52105713]
[-173.17312622 -390.70043945]
[-160.71603394 -399.06643677]
[-147.72796631 -406.58172607]
[-134.26695251 -413.21270752]
[-120.39308167 -418.92980957]
[-106.16833496 -423.70745850]
[-91.65623474 -427.52429199]
[-76.92161560 -430.36334229]
[-62.03026581 -432.21185303]
[-47.04870605 -433.06161499]
[-32.04384232 -432.90881348]
[-17.08269310 -431.75411987]
[-2.23207784 -429.60272217]
[12.44167519 -426.46423340]
[26.87302780 -422.35260010]
[40.99752808 -417.28628540]
[54.75209427 -411.28784180]
[68.07528687 -404.38409424]
[80.90760803 -396.60586548]
[93.19174194 -387.98791504]
[104.87282562 -378.56869507]
[115.89868927 -368.39028931]
[126.22007751 -357.49819946]
[135.79090881 -345.94100952]
[144.56843567 -333.77035522]
[152.51342773 -321.04061890]
[159.59043884 -307.80865479]
[165.76783752 -294.13354492]
[171.01805115 -280.07632446]
[175.31761169 -265.69985962]
[178.64732361 -251.06831360]
[180.99230957 -236.24703979]
[182.34210205 -221.30223083]
[182.69068909 -206.30062866]
[182.03648376 -191.30926514]
[180.38243103 -176.39506531]
[177.73590088 -161.62464905]
[174.10873413 -147.06398010]
[169.51710510 -132.77810669]
[163.98153687 -118.83081818]
[157.52676392 -105.28441620]
[150.18159485 -92.19940186]
[141.97883606 -79.63420868]
[132.95512390 -67.64495850]
[123.15077972 -56.28520584]
[112.60957336 -45.60567856]
[101.37859344 -35.65407944]
[89.50799561 -26.47485352]
[77.05080414 -18.10899925]
[64.06264496 -10.59387779]
[70.69113922 2.86208797]
[77.31964111 16.31805420]
[83.94814301 29.77401924]
[90.57663727 43.22998428]
[94.31055450 28.70215225]
[105.20466614 18.39108276]
[119.91572571 15.46110916]
[133.92909241 20.81140518]
[142.94422913 32.80003357]
[144.19453430 47.74783325]
[137.29626465 61.06752014]
[124.36644745 68.67144775]
[109.37306213 68.22607422]
[96.91687012 59.86745453]
[100.92461395 74.32214355]
[104.93235016 88.77683258]
[109.83151245 74.59944916]
[119.99058533 63.56345367]
[133.71481323 57.50989914]
[148.71469116 57.44865417]
[162.48789978 63.38993835]
[172.73675537 74.34260559]
[177.75151062 88.47951508]
[176.69561768 103.44230652]
[169.74519348 116.73484802]
[158.05975342 126.13964844]
[143.58866882 130.08778381]
[128.74604797 127.92060089]
[116.00798035 119.99964905]
[107.50000000 107.64762115]
[107.50000000 122.64762115]
[107.50000000 137.64761353]
[107.50000000 152.64761353]
[107.50000000 167.64761353]
[107.50000000 182.64761353]
[107.50000000 197.64761353]
[107.50000000 212.64761353]
[107.50000000 227.64761353]
[107.50000000 242.64761353]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[11 127]
[12 126]
[13 125]
[14 115]
[15 114]
[16 113]
[17 112]
[18 111]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
