%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:24 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCCUACCACUCACCCUAGCAUUACUUAUAUGAUAUGUCUCCAUACCCAUUACAAUCUCCAGCxxxxxxxxxxAGUAGAAGAACCCUCCAUAAACCUGGAGUGACUAUAUGGAUGCCCCCCACCCUACCACACACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[77.58829498 268.18145752]
[77.58829498 253.18147278]
[77.58829498 238.18147278]
[77.58829498 223.18147278]
[77.58829498 208.18147278]
[77.58829498 193.18147278]
[77.58829498 178.18147278]
[77.58829498 163.18147278]
[77.58829498 148.18147278]
[77.58829498 133.18147278]
[71.69722748 128.53977966]
[64.50584412 141.70352173]
[62.90884399 156.61825562]
[50.62741852 165.23025513]
[36.06105042 161.64962769]
[29.17193985 148.32521057]
[34.67166519 134.36981201]
[48.79903030 129.32778931]
[59.91508865 119.25639343]
[54.02402115 114.61470032]
[39.44027328 118.12386322]
[35.57173920 121.81028748]
[31.11575890 123.43812561]
[26.97119713 123.13446808]
[23.85092926 121.37062836]
[9.07881355 123.97534943]
[-3.16813517 133.99148560]
[-17.04561996 128.58178711]
[-31.81773567 131.18650818]
[-46.58985138 133.79124451]
[-54.25143051 147.42333984]
[-68.90124512 152.89297485]
[-83.62210846 147.61753845]
[-91.46327209 134.08793640]
[-88.72238922 118.69242859]
[-76.69360352 108.70030975]
[-61.05655670 108.82955170]
[-49.19457626 119.01911926]
[-34.42245865 116.41439819]
[-19.65034294 113.80967712]
[-8.45999432 103.97985840]
[6.47409058 109.20323181]
[21.24620628 106.59851074]
[35.93110275 103.54011536]
[50.51485443 100.03095245]
[69.15019226 77.52379608]
[91.78556061 74.43394470]
[104.87847137 85.24835968]
[109.71828461 71.05060577]
[114.55809784 56.85285187]
[119.39791870 42.65510178]
[124.23773193 28.45734787]
[129.07754517 14.25959492]
[119.99923706 6.22852135]
[114.20104980 -4.37588978]
[112.35019684 -16.28420448]
[114.64295959 -28.07998085]
[120.78416443 -38.36825562]
[130.02497864 -45.94049454]
[141.25408936 -49.91655731]
[153.13139343 -49.84695053]
[158.83605957 -63.71983337]
[158.32827759 -70.41197205]
[160.92485046 -75.55451202]
[165.07026672 -78.03740692]
[171.33966064 -91.66438293]
[177.60906982 -105.29135895]
[183.87847900 -118.91834259]
[190.14788818 -132.54531860]
[196.41728210 -146.17230225]
[184.09292603 -154.79493713]
[173.50640869 -165.47976685]
[164.99804688 -177.88328552]
[158.84133911 -191.60679626]
[155.23420715 -206.20913696]
[154.29260254 -221.22090149]
[156.04679871 -236.15953064]
[160.44039917 -250.54479980]
[167.33218384 -263.91430664]
[176.50057983 -275.83822632]
[187.65089417 -285.93328857]
[200.42466736 -293.87500000]
[214.41128540 -299.40802002]
[229.16111755 -302.35452271]
[244.20005798 -302.61975098]
[259.04461670 -300.19522095]
[273.21765137 -295.15884399]
[286.26354980 -287.67254639]
[297.76287842 -277.97692871]
[307.34606934 -266.38372803]
[314.70501709 -253.26557922]
[319.60314941 -239.04418945]
[321.88302612 -224.17671204]
[321.47137451 -209.14108276]
[318.38140869 -194.42062378]
[312.71249390 -180.48854065]
[304.64678955 -167.79269409]
[294.44363403 -156.74119568]
[282.43099976 -147.68933105]
[268.99505615 -140.92805481]
[254.56768799 -136.67471313]
[239.61268616 -135.06604004]
[224.61079407 -136.15376282]
[210.04426575 -139.90289307]
[203.77485657 -126.27591705]
[197.50546265 -112.64893341]
[191.23605347 -99.02195740]
[184.96664429 -85.39497375]
[178.69723511 -71.76799774]
[172.70893860 -58.01517105]
[167.00428772 -44.14228821]
[178.70515442 -30.39431572]
[181.87910461 -12.53655529]
[175.57374573 4.55983591]
[161.43431091 16.18760109]
[143.27529907 19.09941101]
[138.43548584 33.29716492]
[133.59567261 47.49491501]
[128.75585938 61.69266891]
[123.91603851 75.89041901]
[119.07621765 90.08817291]
[124.78088379 103.96105194]
[138.20832825 110.64713287]
[153.81544495 106.93263245]
[166.36112976 116.93190002]
[166.22142029 132.97434998]
[153.50346375 142.75358582]
[137.96342468 138.76780701]
[131.52226257 124.07457733]
[118.09481049 117.38850403]
[111.71817780 121.33674622]
[120.29640198 133.64178467]
[128.87461853 145.94683838]
[137.45283508 158.25187683]
[149.69223022 166.92353821]
[149.22698975 181.91632080]
[136.47351074 189.81243896]
[122.84551239 183.54525757]
[120.53907013 168.72444153]
[113.34768677 155.56069946]
[106.15630341 142.39697266]
[98.96492004 129.23323059]
[92.58829498 133.18147278]
[92.58829498 148.18147278]
[92.58829498 163.18147278]
[92.58829498 178.18147278]
[92.58829498 193.18147278]
[92.58829498 208.18147278]
[92.58829498 223.18147278]
[92.58829498 238.18147278]
[92.58829498 253.18147278]
[92.58829498 268.18145752]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 152]
[2 151]
[3 150]
[4 149]
[5 148]
[6 147]
[7 146]
[8 145]
[9 144]
[10 143]
[20 45]
[21 44]
[25 43]
[26 42]
[28 40]
[29 39]
[30 38]
[48 121]
[49 120]
[50 119]
[51 118]
[52 117]
[53 116]
[61 111]
[62 110]
[65 109]
[66 108]
[67 107]
[68 106]
[69 105]
[70 104]
[122 130]
[123 129]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
