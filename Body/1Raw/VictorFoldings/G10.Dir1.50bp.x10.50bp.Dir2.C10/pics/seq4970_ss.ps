%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:38 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGUCAUAAUAGCUAUAGCAAUAAAACUAGGAAUAGCCCCCUUUCACUUCUGAGUCCCAGAGGUUxxxxxxxxxxACACCUCAUAUCCUCCCUACUAUGCCUAGAAGGAAUAAUACUAUCGCUGUUCAUUAUAGCUACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[121.84188843 433.10333252]
[121.84188843 418.10333252]
[121.84188843 403.10333252]
[121.84188843 388.10333252]
[121.84188843 373.10333252]
[121.84188843 358.10333252]
[121.84188843 343.10333252]
[121.84188843 328.10333252]
[121.84188843 313.10333252]
[121.84188843 298.10333252]
[119.87143707 283.23330688]
[111.15345001 295.43972778]
[96.38963318 298.09112549]
[83.96916199 289.68087769]
[80.94966125 274.98794556]
[89.04687500 262.36117554]
[103.65977478 258.97543335]
[116.48498535 266.75463867]
[114.36394501 251.90536499]
[112.24289703 237.05609131]
[102.78366852 225.55076599]
[108.49184418 210.79518127]
[106.37079620 195.94590759]
[104.24975586 181.09661865]
[102.12871552 166.24734497]
[92.62057495 158.70986938]
[90.76110840 146.31359863]
[98.09371185 135.65585327]
[96.27404785 120.76663208]
[93.78913879 135.55937195]
[82.02619171 144.86705017]
[67.05843353 143.88409424]
[56.61375427 133.11801147]
[56.08476639 118.12734222]
[65.74459076 106.65180969]
[80.60782623 104.61672211]
[65.78079987 102.34530640]
[50.95377731 100.07389069]
[40.13339996 111.19589996]
[24.83649254 113.80055237]
[10.94502640 106.88631439]
[3.80055261 93.11183929]
[6.15026903 77.77369690]
[17.09066010 66.76972198]
[32.41492462 64.33116913]
[46.23056793 71.39569855]
[53.22519302 85.24686432]
[68.05221558 87.51828003]
[82.87924194 89.78970337]
[95.36183167 81.47195435]
[98.97427368 66.91343689]
[102.58670807 52.35492706]
[101.61589813 43.21169281]
[106.42269897 37.53945541]
[110.32945251 23.05714607]
[114.23620605 8.57483673]
[118.14295959 -5.90747309]
[122.04971313 -20.38978195]
[124.17075348 -35.23906326]
[124.47475433 -50.23598480]
[124.77876282 -65.23290253]
[111.23643494 -72.18751526]
[102.09384155 -84.28297424]
[99.12164307 -99.08791351]
[102.85683441 -113.65531921]
[112.50668335 -125.10913086]
[126.11623383 -131.21205139]
[126.42023468 -146.20896912]
[126.72424316 -161.20590210]
[127.02824402 -176.20281982]
[127.33225250 -191.19973755]
[113.53044891 -197.63635254]
[103.54478455 -209.13446045]
[99.10533905 -223.70193481]
[100.98127747 -238.81486511]
[108.84757233 -251.85485840]
[121.34133911 -260.56265259]
[136.29797363 -263.42956543]
[151.12612915 -259.95886230]
[163.25674438 -250.75192261]
[170.58811951 -237.40386963]
[171.85005188 -222.22732544]
[166.82391357 -207.85173035]
[156.38047791 -196.76774597]
[142.32916260 -190.89572144]
[142.02516174 -175.89880371]
[141.72116089 -160.90188599]
[141.41716003 -145.90496826]
[141.11315918 -130.90805054]
[154.46418762 -124.25860596]
[163.64193726 -112.42313385]
[166.78372192 -97.71632385]
[163.21397400 -83.04399872]
[153.58872986 -71.32898712]
[139.77568054 -64.92890167]
[139.47167969 -49.93198013]
[139.16767883 -34.93505859]
[148.09675598 -46.98792648]
[161.31611633 -54.07654190]
[176.29643250 -54.84460831]
[190.17146301 -49.14517212]
[200.28642273 -38.06873322]
[204.70597839 -23.73459244]
[202.58450317 -8.88537216]
[194.32792664 3.63775992]
[181.51600647 11.43869400]
[166.60009766 13.02484226]
[152.43414307 8.09271812]
[141.72859192 -2.41399050]
[136.53201294 -16.48303032]
[132.62527466 -2.00072074]
[128.71852112 12.48158836]
[124.81175995 26.96389771]
[120.90501404 41.44620895]
[117.14522552 55.96736526]
[113.53278351 70.52587891]
[109.92034912 85.08438873]
[118.35512543 94.12444305]
[119.27793884 107.35072327]
[111.16326904 118.94697571]
[112.98292542 133.83619690]
[124.39787292 148.25073242]
[116.97799683 164.12629700]
[119.09903717 178.97558594]
[121.22008514 193.82485962]
[123.34112549 208.67414856]
[132.95207214 221.24157715]
[127.09217834 234.93504333]
[129.21322632 249.78433228]
[131.33427429 264.63360596]
[134.35374451 279.32656860]
[139.28465271 265.16018677]
[149.47045898 254.14886475]
[163.21046448 248.13117981]
[178.21044922 248.11192322]
[191.96586609 254.09428406]
[202.17993164 265.07940674]
[207.14720154 279.23306274]
[206.03828430 294.19201660]
[199.03833008 307.45855713]
[187.31613159 316.81750488]
[172.82897949 320.70623779]
[157.99578857 318.47543335]
[145.29328918 310.49752808]
[136.84188843 298.10333252]
[136.84188843 313.10333252]
[136.84188843 328.10333252]
[136.84188843 343.10333252]
[136.84188843 358.10333252]
[136.84188843 373.10333252]
[136.84188843 388.10333252]
[136.84188843 403.10333252]
[136.84188843 418.10333252]
[136.84188843 433.10333252]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 154]
[2 153]
[3 152]
[4 151]
[5 150]
[6 149]
[7 148]
[8 147]
[9 146]
[10 145]
[11 131]
[18 130]
[19 129]
[20 128]
[22 126]
[23 125]
[24 124]
[25 123]
[28 121]
[29 120]
[36 49]
[37 48]
[38 47]
[50 117]
[51 116]
[52 115]
[54 114]
[55 113]
[56 112]
[57 111]
[58 110]
[59 97]
[60 96]
[61 95]
[67 89]
[68 88]
[69 87]
[70 86]
[71 85]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
