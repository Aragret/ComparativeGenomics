%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:48 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGAACCUCACCACCUCUUGCUCAGCCUAUAUACCGCCAUCUUCAGCAAACCCUGAUGAAGGCUAxxxxxxxxxxUCACCCUAGCCAUCAUUCUACUAUCAACAUUACUAAUAAGUGGCUCCUUUAACCUCUCCACCCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[148.14022827 409.48162842]
[148.14022827 394.48162842]
[148.14022827 379.48162842]
[148.14022827 364.48162842]
[148.14022827 349.48162842]
[148.14022827 334.48162842]
[148.14022827 319.48162842]
[148.14022827 304.48162842]
[148.14022827 289.48162842]
[148.14022827 274.48162842]
[146.32057190 259.59240723]
[142.70812988 245.03390503]
[128.08601379 242.09123230]
[116.14247131 233.05458069]
[109.27873993 219.67361450]
[108.90386200 204.57794189]
[115.14574432 190.76034546]
[126.81516266 180.98352051]
[123.20272827 166.42501831]
[119.59028625 151.86650085]
[115.97785187 137.30798340]
[97.87596130 139.29907227]
[81.29971313 133.22647095]
[69.53681183 120.82032013]
[64.68413544 105.00942230]
[49.72185898 103.94622803]
[34.75958633 102.88303375]
[19.79731369 101.81983185]
[4.83504105 100.75663757]
[-11.49750137 109.20223999]
[-25.65979385 98.88151550]
[-40.64054108 98.12177277]
[-46.80638123 111.99069214]
[-57.56864166 122.69293976]
[-71.47182465 128.78112793]
[-86.63562775 129.43188477]
[-101.00927734 124.55718994]
[-112.64884949 114.81631470]
[-119.98020172 101.52662659]
[-122.01181030 86.48545074]
[-118.46893311 71.72698212]
[-109.83070374 59.24718094]
[-97.26538086 50.73383713]
[-82.47231293 47.33831406]
[-67.45214081 49.51982498]
[-54.23622894 56.98334122]
[-44.61191177 68.71948242]
[-39.88080597 83.14102936]
[-24.90005684 83.90076447]
[-15.68238544 76.01071930]
[-3.15937996 76.55778503]
[5.89823627 85.79436493]
[20.86050987 86.85755920]
[35.82278442 87.92075348]
[50.78505707 88.98395538]
[65.74732971 90.04714966]
[69.68023682 81.21125793]
[75.84228516 73.75672913]
[83.78041840 68.23162079]
[92.91102600 65.04215240]
[102.56282806 64.42280579]
[106.76228333 50.02265167]
[110.96174622 35.62249374]
[113.98122406 20.92954445]
[115.80088043 6.04032469]
[117.62054443 -8.84889412]
[111.61449432 -23.48576355]
[120.83860016 -35.18042374]
[122.65825653 -50.06964111]
[124.47791290 -64.95886230]
[126.29756927 -79.84808350]
[128.11723328 -94.73729706]
[114.59591675 -101.58930206]
[104.23583221 -112.65476227]
[98.28800201 -126.59747314]
[97.47065735 -141.73377991]
[101.88249207 -156.23590088]
[110.99076080 -168.35263062]
[123.69559479 -176.62083435]
[138.46281433 -180.04205322]
[153.50923157 -178.20318604]
[167.01788330 -171.32627869]
[177.35755920 -160.24174500]
[183.27969360 -146.28810120]
[184.06913757 -131.15031433]
[179.63058472 -116.65634155]
[170.50000000 -104.55641174]
[157.77995300 -96.31165314]
[143.00645447 -92.91764069]
[141.18679810 -78.02841949]
[139.36714172 -63.13920212]
[137.54747009 -48.24998474]
[135.72781372 -33.36076355]
[141.86402893 -19.78887367]
[132.50976562 -7.02923679]
[130.69010925 7.85998249]
[128.87045288 22.74920082]
[140.36174011 13.10813332]
[155.31355286 11.90682125]
[168.19673157 19.58950806]
[174.24710083 33.31514740]
[171.22721863 48.00801468]
[160.25384521 58.23470688]
[145.38493347 60.21340561]
[132.11897278 53.21239090]
[125.36190796 39.82195663]
[121.16244507 54.22211075]
[116.96298218 68.62226868]
[126.65594482 74.48623657]
[134.30143738 83.35336304]
[138.97061157 94.50278473]
[139.98970032 106.92833710]
[154.98892212 107.08035278]
[169.98815918 107.23236084]
[183.99903870 98.71020508]
[198.25303650 106.81919861]
[198.08683777 123.21750641]
[183.67143250 131.03594971]
[169.83615112 122.23159027]
[154.83691406 122.07958221]
[139.83769226 121.92757416]
[130.53636169 133.69555664]
[134.14880371 148.25405884]
[137.76123047 162.81257629]
[141.37367249 177.37109375]
[156.25994873 180.55857849]
[168.23727417 189.85539246]
[174.96284485 203.37527466]
[175.15063477 218.41275024]
[168.81698608 231.98455811]
[157.26664734 241.42146301]
[160.87908936 255.97998047]
[166.36082458 242.01751709]
[177.27772522 231.73056030]
[191.54098511 227.08737183]
[206.42156982 228.97634888]
[219.07229614 237.03607178]
[227.07264709 249.72442627]
[228.89187622 264.61370850]
[224.18190002 278.85504150]
[213.84390259 289.72363281]
[199.85591125 295.13989258]
[184.89428711 294.06750488]
[171.82173157 286.71166992]
[163.14022827 274.48162842]
[163.14022827 289.48162842]
[163.14022827 304.48162842]
[163.14022827 319.48162842]
[163.14022827 334.48162842]
[163.14022827 349.48162842]
[163.14022827 364.48162842]
[163.14022827 379.48162842]
[163.14022827 394.48162842]
[163.14022827 409.48162842]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 154]
[2 153]
[3 152]
[4 151]
[5 150]
[6 149]
[7 148]
[8 147]
[9 146]
[10 145]
[11 132]
[12 131]
[18 125]
[19 124]
[20 123]
[21 122]
[25 56]
[26 55]
[27 54]
[28 53]
[29 52]
[31 49]
[32 48]
[61 108]
[62 107]
[63 106]
[64 97]
[65 96]
[66 95]
[68 93]
[69 92]
[70 91]
[71 90]
[72 89]
[112 121]
[113 120]
[114 119]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
