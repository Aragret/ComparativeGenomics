%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:16 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCAACUAUCUAUAAACCUAGCCAUGGCCAUCCCCUUAUGAGCGGGCACAGUGAUUAUAGGCxxxxxxxxxxCUCACAGCCCUCGCUGUCACUUUCCUAGGACUUCUAACAGCCCUAGACCUCAACUACCUACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[95.53343201 439.82672119]
[95.53343201 424.82672119]
[95.53343201 409.82672119]
[95.53343201 394.82672119]
[95.53343201 379.82672119]
[95.53343201 364.82672119]
[95.53343201 349.82672119]
[95.53343201 334.82672119]
[95.53343201 319.82672119]
[95.53343201 304.82672119]
[81.18141174 302.11474609]
[67.57329559 296.79730225]
[55.17782593 289.05590820]
[44.42226791 279.15563965]
[35.67770004 267.43597412]
[29.24619484 254.29919434]
[25.35040092 240.19660950]
[24.12582207 225.61300659]
[25.61610985 211.05000305]
[29.77151108 197.00880432]
[36.45052338 183.97290039]
[45.42471313 172.39149475]
[56.38653564 162.66398621]
[68.95986938 155.12617493]
[82.71290588 150.03871155]
[97.17301178 147.57806396]
[97.48506927 132.58129883]
[97.79712677 117.58454895]
[87.81439972 106.38878632]
[72.88008881 104.98648071]
[57.93200302 103.73960876]
[42.97175598 102.64830017]
[28.01150703 101.55698395]
[13.02449131 100.93300629]
[-1.97469747 100.77696991]
[-14.39621162 110.93007660]
[-30.04791641 107.40818787]
[-36.92316437 92.91299438]
[-29.74785042 78.56397247]
[-14.02626419 75.36846161]
[-1.81866086 85.77778625]
[13.18052769 85.93382263]
[15.97203541 83.68105316]
[20.01510239 82.70365906]
[24.68159485 83.58470154]
[29.10281754 86.59674072]
[44.06306458 87.68804932]
[59.02331543 88.77935791]
[65.96814728 86.11197662]
[74.28239441 90.05217743]
[89.21670532 91.45447540]
[102.45928955 84.40933990]
[109.64179993 71.24076080]
[116.82430267 58.07217789]
[124.00681305 44.90359497]
[114.86351013 24.59567451]
[122.25351715 3.83761430]
[141.74891663 -5.91168690]
[144.23403931 -20.70439339]
[146.71914673 -35.49710083]
[149.20426941 -50.28981018]
[139.41482544 -38.92465973]
[127.05901337 -30.41971397]
[112.94777679 -25.33316040]
[98.00724792 -23.99883270]
[83.21797180 -26.50430489]
[69.55059052 -32.68513870]
[57.90210342 -42.13568115]
[49.03701401 -54.23569107]
[43.53713989 -68.19102478]
[41.76344681 -83.08579254]
[43.83234406 -97.94242859]
[49.60803986 -111.78588104]
[58.71148300 -123.70760345]
[70.54519653 -132.92515564]
[84.33252716 -138.83357239]
[99.16860962 -141.04508972]
[114.07971954 -139.41456604]
[128.08724976 -134.04901123]
[140.27186584 -125.30057526]
[149.83387756 -113.74341583]
[156.14572144 -100.13603973]
[158.79315186 -85.37152100]
[157.60140991 -70.41411591]
[166.36761475 -82.58595276]
[175.13383484 -94.75778961]
[183.90003967 -106.92962646]
[192.66624451 -119.10146332]
[193.77330017 -135.46319580]
[208.61366272 -142.44142151]
[221.92083740 -132.85752869]
[220.00555420 -116.57061768]
[204.83807373 -110.33525848]
[196.07186890 -98.16342163]
[187.30566406 -85.99158478]
[178.53945923 -73.81974792]
[169.77325439 -61.64790726]
[163.99697876 -47.80469131]
[161.51185608 -33.01198196]
[159.02674866 -18.21927452]
[156.54162598 -3.42656827]
[160.54132080 -1.20771778]
[164.14305115 1.61160040]
[167.25743103 4.96145201]
[169.80723572 8.75874138]
[171.72921753 12.90927601]
[186.66352844 11.50697231]
[201.59783936 10.10466862]
[212.89791870 -1.28338373]
[228.83071899 0.59421313]
[237.17395020 14.29712772]
[231.52742004 29.31365776]
[216.22264099 34.12440491]
[203.00013733 25.03897667]
[188.06582642 26.44128036]
[173.13151550 27.84358406]
[168.98767090 39.04617691]
[160.63163757 47.71716309]
[149.40965271 52.34692383]
[137.17539978 52.08610535]
[129.99288940 65.25468445]
[122.81037903 78.42327118]
[115.62786865 91.59185028]
[112.79387665 117.89660645]
[112.48182678 132.89335632]
[112.16976929 147.89012146]
[127.23896790 151.18069458]
[141.37849426 157.33207703]
[154.05113220 166.10859680]
[164.77577209 177.17485046]
[173.14569092 190.10859680]
[178.84396362 204.41677856]
[181.65547180 219.55438232]
[181.47503662 234.94517517]
[178.31130981 250.00363159]
[172.28640747 264.15722656]
[163.63121033 276.86819458]
[152.67649841 287.65396118]
[139.84028625 296.10546875]
[125.61193848 301.90267944]
[110.53343201 304.82672119]
[110.53343201 319.82672119]
[110.53343201 334.82672119]
[110.53343201 349.82672119]
[110.53343201 364.82672119]
[110.53343201 379.82672119]
[110.53343201 394.82672119]
[110.53343201 409.82672119]
[110.53343201 424.82672119]
[110.53343201 439.82672119]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[26 126]
[27 125]
[28 124]
[29 51]
[30 50]
[31 48]
[32 47]
[33 46]
[34 42]
[35 41]
[52 123]
[53 122]
[54 121]
[55 120]
[58 101]
[59 100]
[60 99]
[61 98]
[84 97]
[85 96]
[86 95]
[87 94]
[88 93]
[106 116]
[107 115]
[108 114]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
