%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:06 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCCAUAACGCUCCUCAUACUAGGCCUACUAACCAACACACUAACCAUAUACCAAUGAUGGCxxxxxxxxxxUCCGUGAAAUCAAUAUCCCGCACAAGAGUGCUACUCUCCUCGCUCCGGGCCCAUAACACUCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[95.30092621 234.68464661]
[94.98886871 219.68789673]
[94.67681885 204.69113159]
[94.36476135 189.69438171]
[94.05270386 174.69763184]
[93.74064636 159.70088196]
[93.42858887 144.70411682]
[93.11653137 129.70736694]
[92.80448151 114.71061707]
[82.59099579 103.72495270]
[67.65669250 102.32264709]
[52.72238541 100.92034149]
[37.78807449 99.51804352]
[22.85376740 98.11573792]
[19.69221497 112.79705048]
[14.81640720 127.00137329]
[8.29479694 140.52931213]
[0.21893565 153.19093323]
[-9.29780388 164.80850220]
[-20.12182045 175.21893311]
[-32.10116577 184.27607727]
[-45.06766129 191.85276794]
[-58.83928299 197.84265137]
[-73.22270203 202.16165161]
[-88.01599121 204.74911499]
[-103.01147461 205.56874084]
[-117.99864197 204.60899353]
[-132.76710510 201.88337708]
[-147.10952759 197.43014526]
[-160.82455444 191.31179810]
[-173.71966553 183.61424255]
[-185.61384583 174.44554138]
[-196.34008789 163.93440247]
[-205.74781799 152.22837830]
[-213.70498657 139.49182129]
[-220.09988403 125.90352631]
[-224.84271240 111.65425110]
[-227.86691284 96.94403076]
[-229.13002014 81.97937775]
[-228.61430359 66.97036743]
[-226.32699585 52.12770081]
[-222.30021667 37.65975571]
[-216.59051514 23.76963425]
[-209.27799988 10.65233040]
[-200.46536255 -1.50800741]
[-190.27632141 -12.54066753]
[-178.85388184 -22.29076767]
[-166.35842896 -30.62143326]
[-152.96537781 -37.41571426]
[-138.86271667 -42.57823181]
[-124.24845886 -46.03650665]
[-109.32774353 -47.74199295]
[-94.31004333 -47.67074966]
[-79.40618896 -45.82377625]
[-64.82539368 -42.22700119]
[-50.77235413 -36.93091583]
[-37.44435883 -30.00987053]
[-25.02850533 -21.56102562]
[-13.69909573 -11.70299149]
[-3.61517763 -0.57415712]
[5.08168745 11.66924477]
[12.26940918 24.85533714]
[17.84708214 38.79900742]
[21.73640633 53.30450439]
[23.88278008 68.16819763]
[24.25607109 83.18142700]
[39.19038010 84.58373260]
[54.12468719 85.98603821]
[69.05899811 87.38834381]
[83.99330139 88.79064178]
[70.77477264 81.70048523]
[61.85596085 69.64001465]
[58.94895554 54.92440033]
[62.61178970 40.37848663]
[72.14134216 28.79454422]
[85.70828247 22.39625740]
[100.70827484 22.41185951]
[114.26187897 28.83835411]
[123.76730347 40.44209671]
[127.39987183 54.99559784]
[124.46226501 69.70513153]
[115.51911163 81.74639893]
[129.64392090 76.69763947]
[143.76872253 71.64888763]
[150.85165405 65.77658844]
[158.24021912 66.64535522]
[172.46699524 61.89154434]
[171.01728821 46.90140533]
[172.93888855 31.97171021]
[178.13226318 17.85081100]
[186.33392334 5.24579668]
[197.12982178 -5.21291399]
[209.97630310 -13.00309944]
[224.22741699 -17.73681259]
[239.16740417 -19.17969704]
[254.04667664 -17.26259041]
[268.11941528 -12.08482933]
[280.68096924 -3.90910959]
[291.10308838 6.85184050]
[298.86535645 19.65609550]
[313.09213257 14.90227985]
[327.31890869 10.14846516]
[341.54568481 5.39465046]
[352.00604248 -7.23520088]
[368.12652588 -4.22480726]
[373.32376099 11.32899570]
[362.25128174 23.42578888]
[346.29949951 19.62142944]
[332.07272339 24.37524414]
[317.84594727 29.12905884]
[303.61917114 33.88287354]
[305.11367798 48.78147507]
[303.25430298 63.64623260]
[298.13107300 77.73123932]
[289.99792480 90.32900238]
[279.26007080 100.80596161]
[266.45376587 108.63436890]
[252.21965027 113.41886902]
[237.27052307 114.91646576]
[222.35581970 113.04883575]
[208.22395325 107.90647125]
[195.58477783 99.74423981]
[185.07391357 88.96879578]
[177.22080994 76.11832428]
[162.99403381 80.87213898]
[148.81747437 85.77368927]
[134.69267273 90.82244110]
[120.56787109 95.87120056]
[135.38404846 98.21229553]
[150.20011902 95.87049866]
[164.48780823 100.43798065]
[175.19798279 110.94000244]
[180.04495239 125.13530731]
[177.99433899 139.99447632]
[169.48377991 152.34642029]
[156.32949829 159.55506897]
[141.33874512 160.08206177]
[127.71073914 153.81489563]
[118.35381317 142.09107971]
[115.26491547 127.40984344]
[107.80123138 114.39855957]
[108.11328888 129.39530945]
[108.42534637 144.39207458]
[108.73740387 159.38882446]
[109.04945374 174.38557434]
[109.36151123 189.38232422]
[109.67356873 204.37908936]
[109.98562622 219.37583923]
[110.29768372 234.37258911]
[112.88867950 253.58030701]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 149]
[2 148]
[3 147]
[4 146]
[5 145]
[6 144]
[7 143]
[8 142]
[9 141]
[10 70]
[11 69]
[12 68]
[13 67]
[14 66]
[82 128]
[83 127]
[84 126]
[86 125]
[87 124]
[100 111]
[101 110]
[102 109]
[103 108]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
