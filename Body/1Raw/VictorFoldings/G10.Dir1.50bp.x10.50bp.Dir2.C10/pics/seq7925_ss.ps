%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:32 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCUCUACCCCCUCUAGAGCCCACUGUAAAGCUAACUUAGCAUUAACCUUUUAAGUUAAAGAxxxxxxxxxxCUACGAACGCACUCACAGUCGCAUCAUAAUCCUCUCUCAAGGACUUCAAACUCUACUCCCCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[37.17411423 237.63584900]
[28.69237709 233.43890381]
[20.48961258 228.71992493]
[12.59791183 223.49734497]
[5.04814959 217.79162598]
[-2.13013673 211.62506104]
[-6.49638844 226.83184814]
[-20.98518372 230.28498840]
[-31.64680862 240.83627319]
[-42.30843735 251.38755798]
[-52.97006226 261.93884277]
[-63.63168716 272.49014282]
[-74.29331207 283.04144287]
[-84.95494080 293.59271240]
[-95.61656952 304.14401245]
[-94.15447235 319.71310425]
[-103.08453369 332.55007935]
[-118.19026184 336.59371948]
[-132.33918762 329.93472290]
[-138.85061646 315.71731567]
[-134.65005493 300.65444946]
[-121.72088623 291.85839844]
[-106.16785431 293.48239136]
[-95.50623322 282.93109131]
[-84.84460449 272.37982178]
[-74.18297577 261.82852173]
[-63.52135086 251.27722168]
[-52.85972595 240.72593689]
[-42.19810104 230.17465210]
[-31.53647232 219.62335205]
[-27.93281174 205.17126465]
[-12.68142700 200.96343994]
[-25.19731140 184.94912720]
[-35.45377731 167.40173340]
[-43.26572800 148.63795471]
[-48.49217987 128.99642944]
[-51.03881073 108.83159637]
[-50.85966873 88.50737762]
[-47.95798111 68.39057159]
[-62.45357513 64.53340912]
[-76.94917297 60.67625427]
[-91.44477081 56.81909180]
[-108.30606079 58.58917618]
[-114.67463684 42.87683868]
[-101.33934021 32.40753937]
[-87.58760834 42.32349777]
[-73.09201050 46.18065643]
[-58.59641647 50.03781509]
[-44.10081863 53.89497375]
[-27.20154953 18.08244705]
[-1.58837259 -12.11834049]
[-11.09673119 -23.71968269]
[-20.60508919 -35.32102203]
[-30.11344719 -46.92236328]
[-39.62180710 -58.52370453]
[-55.25939178 -58.52351761]
[-67.20529938 -68.61456299]
[-69.81904602 -84.03216553]
[-61.86649323 -97.49659729]
[-47.10259628 -102.65036774]
[-32.49841690 -97.06002808]
[-24.94959831 -83.36515808]
[-28.02046585 -68.03206635]
[-18.51210594 -56.43072128]
[-9.00374794 -44.82938004]
[0.50461012 -33.22803879]
[10.01296902 -21.62669945]
[18.18187141 -27.26552391]
[26.70293999 -32.35656738]
[35.53949738 -36.87791443]
[44.65350723 -40.81010437]
[54.00574112 -44.13621140]
[63.55594635 -46.84192276]
[73.26301575 -48.91559219]
[83.08517456 -50.34828949]
[92.98013306 -51.13385010]
[102.90530396 -51.26889801]
[112.81797028 -50.75284195]
[122.67546844 -49.58790970]
[132.43536377 -47.77911377]
[142.05564880 -45.33424377]
[151.49491882 -42.26381302]
[160.71253967 -38.58104706]
[169.66883850 -34.30179596]
[178.32527161 -29.44447517]
[186.64456177 -24.02999306]
[194.59092712 -18.08165550]
[202.13014221 -11.62506390]
[212.79176331 -22.17635536]
[216.72453308 -30.49411583]
[223.78665161 -32.83336639]
[234.66548157 -43.16057205]
[245.54431152 -53.48777390]
[252.86892700 -68.77784729]
[269.58911133 -65.97218323]
[271.52169800 -49.12874222]
[255.87150574 -42.60895157]
[244.99269104 -32.28174591]
[234.11386108 -21.95454025]
[223.34304810 -11.51472855]
[212.68142700 -0.96343797]
[221.36256409 9.65705490]
[229.04612732 21.02014732]
[235.66896057 33.03244019]
[241.17662048 45.59518814]
[245.52383423 58.60513687]
[248.67486572 71.95533752]
[250.60383606 85.53606415]
[251.29486084 99.23567963]
[250.74227905 112.94158173]
[265.60531616 114.96391296]
[280.46838379 116.98625183]
[295.33142090 119.00858307]
[307.75808716 109.24368286]
[323.43972778 111.20876312]
[333.07272339 123.73798370]
[330.94195557 139.39797974]
[318.31158447 148.89794922]
[302.67498779 146.60173035]
[293.30908203 133.87162781]
[278.44604492 131.84928894]
[263.58300781 129.82696533]
[248.71994019 127.80462646]
[246.69076538 137.04782104]
[244.08767700 146.14607239]
[240.92089844 155.06379700]
[237.20278931 163.76608276]
[232.94792175 172.21890259]
[228.17291260 180.38919067]
[222.89646912 188.24497986]
[217.13922119 195.75552368]
[210.92370605 202.89146423]
[204.27421570 209.62484741]
[197.21678162 215.92936707]
[189.77902222 221.78031921]
[181.99000549 227.15486145]
[173.88023376 232.03192139]
[165.48143005 236.39245605]
[156.82643127 240.21939087]
[147.94912720 243.49774170]
[138.88423157 246.21469116]
[129.66720581 248.35961914]
[120.33412170 249.92411804]
[110.92147827 250.90208435]
[101.46611023 251.28968811]
[92.00501251 251.08540344]
[82.57518005 250.29003906]
[73.21353149 248.90669250]
[63.95666885 246.94079590]
[54.84082031 244.40002441]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[6 32]
[8 30]
[9 29]
[10 28]
[11 27]
[12 26]
[13 25]
[14 24]
[15 23]
[39 49]
[40 48]
[41 47]
[42 46]
[51 67]
[52 66]
[53 65]
[54 64]
[55 63]
[88 101]
[89 100]
[91 99]
[92 98]
[93 97]
[110 123]
[111 122]
[112 121]
[113 120]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
