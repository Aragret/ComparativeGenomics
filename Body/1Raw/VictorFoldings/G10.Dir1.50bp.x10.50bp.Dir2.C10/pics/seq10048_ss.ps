%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:08 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCAUCACCCGAUGAGGCAACCAGCCAGAACGCCUGAACGCAGGCACAUACUUCCUAUUCUAxxxxxxxxxxGCCAUGCACUACUCACCAGACGCCUCAACCGCCUUUUCAUCAAUCGCCCACAUCACUCGACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[86.80259705 294.20480347]
[86.80259705 279.20480347]
[86.80259705 264.20480347]
[86.80259705 249.20481873]
[86.80259705 234.20481873]
[86.80259705 219.20481873]
[86.80259705 204.20481873]
[86.80259705 189.20481873]
[86.80259705 174.20481873]
[86.80259705 159.20481873]
[72.67779541 154.15606689]
[63.16943741 165.75740051]
[53.66107941 177.35874939]
[44.15272141 188.96008301]
[42.02725601 205.22090149]
[26.78052139 211.25987244]
[14.09704876 200.86460876]
[17.02450752 184.72886658]
[32.55138016 179.45172119]
[42.05973816 167.85038757]
[51.56809616 156.24903870]
[61.07645416 144.64770508]
[55.43004227 135.83271790]
[51.62068558 126.46260071]
[37.60397339 131.80412292]
[23.58725929 137.14562988]
[15.74067307 151.13887024]
[-0.11456747 153.58650208]
[-11.81567955 142.61090088]
[-10.38657188 126.63162994]
[3.07646751 117.90660095]
[18.24574661 123.12891388]
[32.26245880 117.78739929]
[46.27917099 112.44589233]
[45.58723068 91.05137634]
[53.09442139 71.00527191]
[67.66954041 55.32820892]
[87.11634064 46.38247681]
[108.50450134 45.51604843]
[112.81208801 31.14786339]
[105.57354736 17.35506439]
[110.14672852 2.84504580]
[123.34066772 -3.97079349]
[127.64825439 -18.33897781]
[131.95584106 -32.70716095]
[120.50417328 -44.59152222]
[116.61219788 -60.53354645]
[121.24607086 -76.17826843]
[133.05601501 -87.30064392]
[148.76776123 -90.94653320]
[152.77549744 -105.40122223]
[156.78324890 -119.85590363]
[160.79098511 -134.31059265]
[146.83052063 -139.83668518]
[133.53654480 -146.81538391]
[121.05969238 -155.16764832]
[109.54132843 -164.79881287]
[99.11196899 -175.59976196]
[89.88978577 -187.44810486]
[81.97927094 -200.20960999]
[75.47005463 -213.73965454]
[70.43589783 -227.88494873]
[66.93383789 -242.48521423]
[65.00355530 -257.37503052]
[64.66693115 -272.38565063]
[65.92776489 -287.34701538]
[68.77177429 -302.08956909]
[73.16674042 -316.44635010]
[79.06285858 -330.25457764]
[86.39332581 -343.35787964]
[95.07508087 -355.60775757]
[105.00975037 -366.86538696]
[116.08477020 -377.00323486]
[128.17465210 -385.90643311]
[141.14241028 -393.47409058]
[154.84109497 -399.62045288]
[169.11552429 -404.27590942]
[183.80390930 -407.38766479]
[198.73985291 -408.92050171]
[213.75411987 -408.85705566]
[228.67657471 -407.19799805]
[243.33813477 -403.96215820]
[257.57269287 -399.18618774]
[271.21893311 -392.92422485]
[284.12222290 -385.24719238]
[296.13641357 -376.24212646]
[307.12533569 -366.01098633]
[316.96447754 -354.66976929]
[325.54235840 -342.34692383]
[332.76177979 -329.18212891]
[338.54095459 -315.32452393]
[342.81436157 -300.93112183]
[345.53363037 -286.16503906]
[346.66793823 -271.19354248]
[346.20440674 -256.18630981]
[344.14831543 -241.31335449]
[340.52294922 -226.74322510]
[335.36938477 -212.64099121]
[328.74603271 -199.16645813]
[320.72790527 -186.47229004]
[311.40585327 -174.70233154]
[300.88555908 -163.98994446]
[289.28619385 -154.45651245]
[276.73916626 -146.21003723]
[263.38665771 -139.34396362]
[249.37998962 -133.93611145]
[234.87782288 -130.04772949]
[220.04450989 -127.72288513]
[205.04811096 -126.98793030]
[190.05854797 -127.85118103]
[175.24566650 -130.30285645]
[171.23793030 -115.84816742]
[167.23019409 -101.39347839]
[163.22245789 -86.93878937]
[173.43818665 -77.82297516]
[178.74237061 -65.12869263]
[178.04243469 -51.32225418]
[171.41841125 -39.11294174]
[160.11845398 -30.92135620]
[146.32402039 -28.39957619]
[142.01643372 -14.03139305]
[137.70884705 0.33679122]
[144.97688293 13.28713226]
[140.81306458 27.91987610]
[127.18026733 35.45544815]
[122.87268829 49.82363129]
[131.59161377 54.47053146]
[139.38188171 60.62597656]
[145.98371887 68.10678864]
[151.17309570 76.68530273]
[154.76930237 86.09627533]
[156.64120483 96.04505157]
[156.71195984 106.21683502]
[154.96195984 116.28661346]
[151.43008423 125.92954254]
[146.21295166 134.83146667]
[139.46237183 142.69906616]
[131.38096619 149.26960754]
[122.21609497 154.31962585]
[112.25232697 157.67256165]
[101.80259705 159.20481873]
[101.80259705 174.20481873]
[101.80259705 189.20481873]
[101.80259705 204.20481873]
[101.80259705 219.20481873]
[101.80259705 234.20481873]
[101.80259705 249.20481873]
[101.80259705 264.20480347]
[101.80259705 279.20480347]
[101.80259705 294.20480347]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[11 22]
[12 21]
[13 20]
[14 19]
[24 34]
[25 33]
[26 32]
[39 126]
[40 125]
[43 122]
[44 121]
[45 120]
[50 114]
[51 113]
[52 112]
[53 111]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
