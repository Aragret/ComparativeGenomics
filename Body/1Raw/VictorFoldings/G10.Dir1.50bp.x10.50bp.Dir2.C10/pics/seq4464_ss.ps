%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:24 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGUUCCCCCUCAAACCUAAGAAAUAUGUCUGAUAAAAGAGUUACUUUGAUAGAGUAAAUAAUxxxxxxxxxxCGCCUGGCAGCCGGAAGCCUAUUCGCAGGAUUUCUCAUUACUAACAACAUUUCCCCCGCACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[38.95510101 404.31112671]
[38.95510101 389.31112671]
[38.95510101 374.31112671]
[38.95510101 359.31112671]
[38.95510101 344.31112671]
[38.95510101 329.31112671]
[38.95510101 314.31112671]
[38.95510101 299.31112671]
[38.95510101 284.31112671]
[38.95510101 269.31112671]
[25.29886055 263.10574341]
[13.99985504 272.97146606]
[2.70085073 282.83718872]
[7.58897209 297.23074341]
[6.59184027 312.39892578]
[-0.13848919 326.02871704]
[-11.57569027 336.04165649]
[-25.97567368 340.91082764]
[-41.14254379 339.89376831]
[-54.76346588 333.14550781]
[-64.76134491 321.69512939]
[-69.61157990 307.28875732]
[-68.57454681 292.12326050]
[-61.80838394 278.51119995]
[-50.34487915 268.52841187]
[-35.93213654 263.69711304]
[-20.76799393 264.75408936]
[-7.16487217 271.53817749]
[4.13413239 261.67245483]
[15.43313694 251.80671692]
[10.83660793 224.14353943]
[25.26527405 201.55853271]
[49.90581894 194.76902771]
[53.61198044 180.23408508]
[57.31814194 165.69915771]
[61.02430344 151.16421509]
[59.62028503 143.85844421]
[64.96170807 136.36703491]
[68.96945190 121.91235352]
[62.90643692 108.19229889]
[49.52015305 101.42417908]
[33.71348572 102.10235596]
[25.84655762 89.45479584]
[12.46027279 82.68668365]
[-0.92601252 75.91856384]
[-14.31229782 69.15045166]
[-29.94185066 72.76937103]
[-42.42611694 62.69352722]
[-42.18822861 46.65223694]
[-29.41068077 36.95101166]
[-13.89531040 41.03179932]
[-7.54418278 55.76416779]
[5.84210205 62.53228378]
[19.22838783 69.30039978]
[32.61467361 76.06851196]
[47.46385956 74.90624237]
[56.28826523 88.03789520]
[69.67455292 94.80601501]
[84.33364105 76.54882812]
[105.67657471 74.99794769]
[113.13148499 61.98163986]
[120.58639526 48.96532822]
[122.15383148 39.89918518]
[128.33421326 35.75809860]
[136.05828857 22.89969635]
[143.78237915 10.04129505]
[151.50646973 -2.81710768]
[138.02343750 3.75617003]
[123.08517456 5.11571980]
[108.63702393 1.08449411]
[96.56048584 -7.81254005]
[88.42823029 -20.41676521]
[85.29929352 -35.08679199]
[87.58112335 -49.91221619]
[94.97658539 -62.96239471]
[106.52259827 -72.53786469]
[120.71557617 -77.39166260]
[135.70724487 -76.89169312]
[149.54530334 -71.10307312]
[160.42768860 -60.77962112]
[166.93725586 -47.26571655]
[168.22627258 -32.32120514]
[164.12767029 -17.89383125]
[175.42668152 -27.75955391]
[186.72567749 -37.62527847]
[197.27697754 -48.28690338]
[207.02462769 -59.68792343]
[216.77227783 -71.08894348]
[213.02691650 -86.14722443]
[218.87907410 -100.51844025]
[232.07849121 -108.67655945]
[247.54972839 -107.48462677]
[259.34375000 -97.40095520]
[262.92553711 -82.30292511]
[256.91781616 -67.99604797]
[243.63067627 -59.98159409]
[228.17329407 -61.34129333]
[218.42564392 -49.94027328]
[208.67799377 -38.53924942]
[223.65800476 -39.31324768]
[235.73553467 -30.41755867]
[239.43934631 -15.88202286]
[233.09156799 -2.29137635]
[219.56779480 4.19768333]
[204.99446106 0.64554858]
[195.97340393 -11.33862877]
[196.59140015 -26.32627296]
[185.29240417 -16.46054840]
[173.99339294 -6.59482622]
[164.36486816 4.90697718]
[156.64077759 17.76537895]
[148.91670227 30.62378120]
[141.19261169 43.48218536]
[133.60270691 56.42023849]
[126.14779663 69.43654633]
[118.69288635 82.45285797]
[123.79731750 89.02008057]
[126.61392212 97.03951263]
[126.74298859 105.72026825]
[124.05615234 114.16699219]
[118.72132874 121.47222900]
[111.19652557 126.81370544]
[102.19198608 129.54612732]
[92.60366821 129.27735901]
[83.42414093 125.92008972]
[79.41639709 140.37478638]
[75.55924225 154.87037659]
[71.85308075 169.40531921]
[68.14691925 183.94024658]
[64.44075775 198.47518921]
[71.46273041 202.53434753]
[77.44208527 208.17526245]
[82.02359009 215.13186646]
[84.91958618 223.05863953]
[85.92760468 231.54769897]
[84.94371796 240.14981079]
[81.97080231 248.39808655]
[77.12095642 255.83337402]
[70.61206055 262.02972412]
[62.75828171 266.61874390]
[53.95510101 269.31112671]
[53.95510101 284.31112671]
[53.95510101 299.31112671]
[53.95510101 314.31112671]
[53.95510101 329.31112671]
[53.95510101 344.31112671]
[53.95510101 359.31112671]
[53.95510101 374.31112671]
[53.95510101 389.31112671]
[53.95510101 404.31112671]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[11 30]
[12 29]
[13 28]
[33 130]
[34 129]
[35 128]
[36 127]
[38 126]
[39 125]
[40 58]
[41 57]
[43 55]
[44 54]
[45 53]
[46 52]
[60 116]
[61 115]
[62 114]
[64 113]
[65 112]
[66 111]
[67 110]
[83 109]
[84 108]
[85 107]
[86 99]
[87 98]
[88 97]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
