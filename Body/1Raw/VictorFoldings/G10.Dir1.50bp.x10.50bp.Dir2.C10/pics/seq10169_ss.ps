%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:25 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGAAACUAGGCGGCUAUGGUAUAAUACGCCUCACACUCAUUCUCAACCCCCUGACAAAACACAUxxxxxxxxxxCCGAAUGAUAUUUCCUAUUCGCCUACACAAUUCUCCGAUCCGUCCCUAACAAACUAGGAGGCCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[213.72789001 405.33267212]
[213.72789001 390.33267212]
[213.72789001 375.33267212]
[213.72789001 360.33267212]
[213.72789001 345.33267212]
[213.72789001 330.33267212]
[213.72789001 315.33267212]
[213.72789001 300.33267212]
[213.72789001 285.33267212]
[213.72789001 270.33267212]
[209.23744202 256.02056885]
[200.66842651 243.70912170]
[181.33540344 241.75907898]
[169.41249084 226.03421021]
[172.85723877 206.29582214]
[163.55590820 194.52783203]
[154.25459290 182.75985718]
[144.95326233 170.99188232]
[135.65194702 159.22389221]
[126.35061646 147.45591736]
[117.04929352 135.68792725]
[112.43860626 134.25083923]
[108.70584869 129.86767578]
[107.62110901 123.24931335]
[98.80432892 111.11405945]
[89.86502075 99.06877899]
[80.80410767 87.11470032]
[63.68841171 80.39659119]
[62.11746597 62.94322205]
[52.81614304 51.17524338]
[43.51482010 39.40726089]
[44.57012177 54.37009430]
[39.55216217 68.50586700]
[29.29878998 79.45430756]
[15.52203178 85.38734436]
[0.52220947 85.31432343]
[-13.19613361 79.24744415]
[-23.34242630 68.19969177]
[-28.22252655 54.01573944]
[-27.02159882 39.06388855]
[-19.94016075 25.84068108]
[-8.16061211 16.55401039]
[6.35019779 12.75448704]
[21.16938019 15.07652283]
[33.82359314 23.13341904]
[27.90825653 9.34905243]
[21.99291801 -4.43531513]
[16.07758141 -18.21968269]
[10.16224289 -32.00405121]
[4.24690485 -45.78841782]
[-4.56987381 -57.92367172]
[-15.85164642 -67.80909729]
[-27.13341904 -77.69451904]
[-42.88494873 -76.40425110]
[-54.88109589 -86.69347382]
[-56.00475693 -102.45776367]
[-45.58928299 -114.34445953]
[-29.81399345 -115.30138397]
[-18.03808212 -104.76081848]
[-17.24799347 -88.97629547]
[-5.96622181 -79.09086609]
[5.31555033 -69.20544434]
[0.68382847 -83.47244263]
[-0.16910712 -98.44816589]
[2.81277800 -113.14879608]
[9.43358612 -126.60854340]
[19.25835991 -137.94317627]
[31.64165306 -146.40805054]
[45.76993561 -151.44705200]
[60.71504211 -152.72915649]
[75.49514008 -150.17012024]
[89.13925171 -143.93807983]
[100.75099945 -134.44244385]
[109.56755066 -122.30702209]
[115.00970459 -108.32907104]
[116.71991730 -93.42688751]
[114.58584595 -78.57946777]
[108.74769592 -64.76223755]
[99.58898926 -52.88291931]
[87.71143341 -43.72193527]
[73.89532471 -37.88112640]
[59.04831696 -35.74420166]
[44.14580154 -37.45155716]
[30.16680908 -42.89101791]
[18.03127289 -51.70375443]
[23.94660950 -37.91938782]
[29.86194801 -24.13501930]
[35.77728653 -10.35065269]
[41.69262314 3.43371415]
[47.60795975 17.21808052]
[55.28279877 30.10593796]
[64.58412170 41.87392044]
[73.88544464 53.64189911]
[85.89440155 55.37491608]
[93.73595428 65.15422821]
[92.75818634 78.05379486]
[101.81909180 90.00786591]
[108.85280609 94.04863739]
[110.93958282 102.29727936]
[119.75636292 114.43253326]
[128.81727600 126.38661194]
[138.11859131 138.15458679]
[147.41992188 149.92257690]
[156.72125244 161.69055176]
[166.02256775 173.45852661]
[175.32389832 185.22651672]
[184.62521362 196.99449158]
[195.29844666 195.54446411]
[205.52374268 198.66271973]
[213.45039368 205.71405029]
[217.67341614 215.35797119]
[217.48234558 225.80316162]
[212.97987366 235.14010620]
[221.54888916 247.45155334]
[220.75071716 232.47280884]
[222.83621216 217.61848450]
[227.72811890 203.43859863]
[235.24533081 190.45817566]
[245.10952759 179.15783691]
[256.95544434 169.95597839]
[270.34448242 163.19331360]
[284.78091431 159.12025452]
[299.73016357 157.88760376]
[314.63876343 159.54100037]
[328.95468140 164.01922607]
[342.14785767 171.15647888]
[353.72979736 180.68846130]
[363.27163696 192.26226807]
[370.42010498 205.44935608]
[374.91052246 219.76145935]
[376.57662964 234.66864014]
[375.35671997 249.61895752]
[371.29592896 264.05883789]
[364.54467773 277.45364380]
[355.35293579 289.30740356]
[344.06097412 299.18118286]
[331.08697510 306.70947266]
[316.91125488 311.61346436]
[302.05871582 313.71157837]
[287.07928467 312.92617798]
[272.52761841 309.28628540]
[258.94247437 302.92672729]
[246.82688904 294.08294678]
[236.62945557 283.08236694]
[228.72789001 270.33267212]
[228.72789001 285.33267212]
[228.72789001 300.33267212]
[228.72789001 315.33267212]
[228.72789001 330.33267212]
[228.72789001 345.33267212]
[228.72789001 360.33267212]
[228.72789001 375.33267212]
[228.72789001 390.33267212]
[228.72789001 405.33267212]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 154]
[2 153]
[3 152]
[4 151]
[5 150]
[6 149]
[7 148]
[8 147]
[9 146]
[10 145]
[11 114]
[12 113]
[15 107]
[16 106]
[17 105]
[18 104]
[19 103]
[20 102]
[21 101]
[24 100]
[25 99]
[26 97]
[27 96]
[29 93]
[30 92]
[31 91]
[45 90]
[46 89]
[47 88]
[48 87]
[49 86]
[50 85]
[51 62]
[52 61]
[53 60]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
