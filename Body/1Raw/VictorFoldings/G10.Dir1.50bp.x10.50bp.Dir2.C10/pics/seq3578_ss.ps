%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:23 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGAACCCCCCUCCCCAUACCCAACCCCCUGGUCAACCUCAACCUAGGCCUCCUAUUUAUUCUxxxxxxxxxxCAAGAUAUUCGAAAAAUAGGAGGACUACUCAAAACCAUACCUCUCACUUCAACCUCCCUCCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[35.23792648 234.39936829]
[28.05541801 247.56796265]
[20.87290955 260.73654175]
[13.69040012 273.90512085]
[6.50789118 287.07369995]
[-0.67461783 300.24227905]
[-7.85712671 313.41085815]
[-15.03963566 326.57946777]
[-22.22214508 339.74804688]
[-29.40465355 352.91662598]
[-31.68085289 369.71707153]
[-48.45485306 372.18066406]
[-55.46566391 356.74417114]
[-42.57323456 345.73410034]
[-35.39072800 332.56552124]
[-28.20821762 319.39694214]
[-21.02570915 306.22836304]
[-13.84320068 293.05978394]
[-6.66069174 279.89120483]
[0.52181739 266.72262573]
[7.70432615 253.55403137]
[14.88683510 240.38545227]
[22.06934357 227.21687317]
[8.61507225 217.92417908]
[-3.74141622 207.21490479]
[-14.85168552 195.21769714]
[-24.58227158 182.07664490]
[-32.81628418 167.94963074]
[-39.45480728 153.00636292]
[-44.41809845 137.42634583]
[-47.64653397 121.39672089]
[-62.58084106 122.79902649]
[-77.51514435 124.20133209]
[-90.56803131 134.12878418]
[-105.58522034 127.53971100]
[-107.11833191 111.21237946]
[-93.59021759 101.94295502]
[-78.91744995 109.26702118]
[-63.98314285 107.86472321]
[-49.04883575 106.46241760]
[-48.43069458 84.97844696]
[-44.73192596 63.80624390]
[-38.02929306 43.38523102]
[-28.46191216 24.13923645]
[-16.22834587 6.46770620]
[-1.58249986 -9.26259232]
[15.17165661 -22.72518158]
[33.68639755 -33.64065170]
[53.57744980 -41.78245926]
[74.43199158 -46.98161697]
[95.81718445 -49.13021851]
[117.28919220 -48.18367767]
[119.77431488 -62.97638321]
[122.25942993 -77.76908875]
[116.91539764 -92.66042328]
[126.65435791 -103.92993927]
[129.13948059 -118.72264862]
[131.62458801 -133.51535034]
[134.10971069 -148.30805969]
[136.59483337 -163.10076904]
[139.07994080 -177.89347839]
[141.56506348 -192.68618774]
[144.05018616 -207.47888184]
[146.53530884 -222.27159119]
[149.02041626 -237.06430054]
[147.35067749 -246.11216736]
[151.71418762 -252.13755798]
[154.50651550 -266.87536621]
[157.29884338 -281.61318970]
[143.76913452 -288.31018066]
[132.54875183 -298.40994263]
[124.47030640 -311.16305542]
[120.13328552 -325.62307739]
[119.85951996 -340.71704102]
[123.66931915 -355.32485962]
[131.27998352 -368.36251831]
[142.12672424 -378.86251831]
[155.40467834 -386.04574585]
[170.12850952 -389.37911987]
[185.20561218 -388.61529541]
[199.51718140 -383.81094360]
[212.00117493 -375.32260132]
[221.73123169 -363.78012085]
[227.98529053 -350.04006958]
[230.29927063 -335.12200928]
[228.50146484 -320.13299561]
[222.72526550 -306.18530273]
[213.39932251 -294.31396484]
[201.21566772 -285.39984131]
[187.07841492 -280.10449219]
[172.03663635 -278.82086182]
[169.24432373 -264.08303833]
[166.45199585 -249.34524536]
[163.81312561 -234.57917786]
[161.32801819 -219.78648376]
[158.84289551 -204.99377441]
[156.35777283 -190.20106506]
[153.87265015 -175.40835571]
[151.38754272 -160.61564636]
[148.90242004 -145.82293701]
[146.41729736 -131.03022766]
[143.93217468 -116.23752594]
[141.44706726 -101.44481659]
[146.96885681 -87.61155701]
[137.05213928 -75.28397369]
[134.56701660 -60.49126434]
[132.08190918 -45.69855881]
[142.90533447 -42.88614273]
[153.48771667 -39.27089691]
[163.76954651 -34.87313461]
[173.69308472 -29.71756744]
[183.20257568 -23.83315659]
[192.24456787 -17.25296974]
[200.76826477 -10.01397610]
[208.72578430 -2.15685081]
[216.07240295 6.27426004]
[222.76686096 15.23198509]
[228.77153015 24.66599274]
[234.05267334 34.52327728]
[238.58061218 44.74845505]
[242.32991028 55.28407288]
[245.27951050 66.07093811]
[247.41284180 77.04843140]
[248.71789551 88.15488434]
[249.18734741 99.32789612]
[248.81858826 110.50468445]
[247.61364746 121.62244415]
[245.57931519 132.61871338]
[242.72702026 143.43171692]
[239.07279968 154.00068665]
[234.63717651 164.26625061]
[229.44505310 174.17071533]
[223.52563477 183.65844727]
[216.91217041 192.67611694]
[209.64179993 201.17308044]
[201.75540161 209.10159302]
[193.29727173 216.41708374]
[184.31492615 223.07847595]
[174.85885620 229.04832458]
[164.98216248 234.29309082]
[154.74037170 238.78332520]
[144.19100952 242.49375916]
[133.39334106 245.40357971]
[122.40805817 247.49642944]
[111.29686737 248.76054382]
[100.12220764 249.18881226]
[88.94685364 248.77885437]
[77.83361053 247.53294373]
[66.84490967 245.45809937]
[56.04249573 242.56597900]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 23]
[2 22]
[3 21]
[4 20]
[5 19]
[6 18]
[7 17]
[8 16]
[9 15]
[10 14]
[31 40]
[32 39]
[33 38]
[52 107]
[53 106]
[54 105]
[56 103]
[57 102]
[58 101]
[59 100]
[60 99]
[61 98]
[62 97]
[63 96]
[64 95]
[65 94]
[67 93]
[68 92]
[69 91]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
