%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:38 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGAACUAUCCUGCCCGCCAUCAUCCUAGUCCUCAUCGCCCUCCCAUCCCUACGCAUCCUUUACAxxxxxxxxxxUUUGAUCUAGAAAUUGCCCUCCUUUUACCCCUACCAUGAGCCCUACAAACAACUAACCUGCCCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[120.55968475 80.67179108]
[112.75463867 93.48120880]
[112.23209381 107.45327759]
[100.05477905 114.32383728]
[92.24973297 127.13325500]
[84.44467926 139.94267273]
[83.87129974 155.75349426]
[70.64147949 162.59608459]
[62.83642578 175.40550232]
[55.03137589 188.21492004]
[47.22632599 201.02433777]
[47.37972641 217.42277527]
[33.11941528 225.52064514]
[19.11518097 216.98756409]
[19.77337646 200.60163879]
[34.41690826 193.21928406]
[42.22195816 180.40986633]
[50.02700806 167.60044861]
[57.83205795 154.79103088]
[57.84717178 139.89643860]
[71.63526154 132.13761902]
[79.44031525 119.32820892]
[87.24536133 106.51879120]
[87.76790619 92.54672241]
[99.94522095 85.67616272]
[107.75026703 72.86674500]
[95.32735443 64.45495605]
[83.32203674 55.45722580]
[71.76191711 45.89424896]
[60.67358398 35.78802109]
[50.08255005 25.16178513]
[40.01316452 14.03998470]
[30.48859787 2.44819832]
[21.53075027 -9.58691216]
[13.16022778 -22.03766441]
[5.39628124 -34.87542343]
[-1.74323094 -48.07065964]
[-8.24188805 -61.59302521]
[-14.08474255 -75.41141510]
[-19.25835609 -89.49405670]
[-23.75082779 -103.80854034]
[-27.55182648 -118.32196045]
[-30.65261078 -133.00093079]
[-33.04604340 -147.81167603]
[-34.72662735 -162.72015381]
[-35.69049072 -177.69206238]
[-35.93541718 -192.69294739]
[-35.46084976 -207.68833923]
[-34.26787186 -222.64373779]
[-32.35923004 -237.52473450]
[-29.73931503 -252.29710388]
[-26.41415405 -266.92687988]
[-22.39139366 -281.38040161]
[-17.68028641 -295.62442017]
[-12.29166794 -309.62619019]
[-6.23793173 -323.35351562]
[0.46699730 -336.77481079]
[7.80769777 -349.85916138]
[15.76728630 -362.57656860]
[24.32745552 -374.89770508]
[33.46851730 -386.79425049]
[43.16944504 -398.23886108]
[53.40792465 -409.20516968]
[64.16041565 -419.66802979]
[75.40217590 -429.60330200]
[87.10735321 -438.98815918]
[99.24903107 -447.80102539]
[111.79927063 -456.02163696]
[124.72921753 -463.63104248]
[138.00912476 -470.61181641]
[151.60845947 -476.94781494]
[165.49592590 -482.62454224]
[179.63960266 -487.62887573]
[194.00694275 -491.94937134]
[208.56489563 -495.57601929]
[223.27999878 -498.50054932]
[238.11839294 -500.71618652]
[253.04594421 -502.21786499]
[268.02832031 -503.00207520]
[283.03109741 -503.06710815]
[298.01971436 -502.41271973]
[312.95971680 -501.04046631]
[327.81674194 -498.95349121]
[342.55664062 -496.15661621]
[357.14547729 -492.65625000]
[371.54971313 -488.46041870]
[385.73620605 -483.57882690]
[399.67236328 -478.02267456]
[413.32608032 -471.80474854]
[426.66598511 -464.93933105]
[439.66140747 -457.44226074]
[452.28240967 -449.33071899]
[464.50000000 -440.62341309]
[476.28607178 -431.34033203]
[487.61349487 -421.50283813]
[498.45626831 -411.13357544]
[508.78939819 -400.25637817]
[518.58911133 -388.89627075]
[527.83294678 -377.07937622]
[536.49957275 -364.83288574]
[544.56903076 -352.18496704]
[552.02288818 -339.16470337]
[558.84387207 -325.80200195]
[565.01629639 -312.12768555]
[570.52606201 -298.17312622]
[575.36041260 -283.97045898]
[579.50830078 -269.55233765]
[582.96014404 -254.95193481]
[585.70794678 -240.20281982]
[587.74548340 -225.33891296]
[589.06799316 -210.39442444]
[589.67248535 -195.40371704]
[589.55761719 -180.40126038]
[588.72351074 -165.42156982]
[587.17218018 -150.49908447]
[584.90716553 -135.66815186]
[581.93371582 -120.96286774]
[578.25866699 -106.41705322]
[573.89038086 -92.06417084]
[568.83898926 -77.93723297]
[563.11608887 -64.06872559]
[556.73486328 -50.49054718]
[549.70996094 -37.23393631]
[542.05755615 -24.32938004]
[533.79528809 -11.80655670]
[524.94207764 0.30572942]
[515.51831055 11.97961903]
[505.54568481 23.18826103]
[495.04711914 33.90587616]
[484.04678345 44.10781479]
[472.56997681 53.77061081]
[460.64306641 62.87203979]
[448.29351807 71.39116669]
[435.54971313 79.30839539]
[422.44097900 86.60552216]
[408.99746704 93.26576233]
[395.25009155 99.27378845]
[381.23046875 104.61579132]
[366.97082520 109.27947998]
[352.50399780 113.25412750]
[337.86325073 116.53059387]
[323.08224487 119.10134888]
[308.19497681 120.96046448]
[293.23571777 122.10367584]
[278.23883057 122.52835083]
[263.23883057 122.23351288]
[248.27021790 121.21984100]
[233.36741638 119.48966217]
[218.56471252 117.04696655]
[203.89613342 113.89736176]
[189.39544678 110.04809570]
[175.09597778 105.50801849]
[161.03063965 100.28758240]
[147.23176575 94.39878082]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 26]
[2 25]
[4 23]
[5 22]
[6 21]
[8 19]
[9 18]
[10 17]
[11 16]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
