%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:35 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGACCAAACCCCCCCUCCCCCGCUUCUGGCCACAGCACUUAAACACAUCUCUGCCAAACCCCAAxxxxxxxxxxCAAUUUCAUCACAACAAUUAUCAAUAUAAAACCCCCUGCCAUAACCCAAUACCAAACGCCCCCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[-15.58610725 279.19577026]
[-24.15513039 291.50723267]
[-32.72415161 303.81866455]
[-41.29317856 316.13012695]
[-49.86220169 328.44158936]
[-58.30601883 340.83923340]
[-66.62376404 353.32183838]
[-74.94151306 365.80441284]
[-83.25926208 378.28701782]
[-91.57701111 390.76959229]
[-86.06176758 405.27346802]
[-90.15747833 420.24023438]
[-102.28925323 429.91494751]
[-117.79218292 430.57742310]
[-130.70506287 421.97293091]
[-136.06263733 407.41009521]
[-131.80480957 392.48861694]
[-119.56880188 382.94610596]
[-104.05960083 382.45184326]
[-95.74185181 369.96926880]
[-87.42410278 357.48666382]
[-79.10635376 345.00408936]
[-70.78861237 332.52148438]
[-69.69023895 325.16802979]
[-62.17365265 319.87255859]
[-53.60462952 307.56109619]
[-45.03560638 295.24966431]
[-36.46658325 282.93820190]
[-27.89755821 270.62673950]
[-55.86292648 245.52670288]
[-78.98809052 215.90745544]
[-96.55493164 182.68878174]
[-108.01791382 146.90226746]
[-113.02106476 109.65924835]
[-128.02029419 109.81126404]
[-143.01951599 109.96327209]
[-156.85481262 118.76763153]
[-171.27021790 110.94918823]
[-171.43640137 94.55088043]
[-157.18241882 86.44188690]
[-143.17153931 94.96404266]
[-128.17230225 94.81203461]
[-113.17307281 94.66001892]
[-112.69573975 84.77510071]
[-111.76028442 74.92297363]
[-110.36872101 65.12486267]
[-108.52405548 55.40186691]
[-106.23024750 45.77492905]
[-103.49224854 36.26478577]
[-100.31595612 26.89192009]
[-96.70820618 17.67651939]
[-92.67677307 8.63843346]
[-88.23033142 -0.20287041]
[-83.37847137 -8.82835007]
[-78.13163757 -17.21942711]
[-72.50112915 -25.35802841]
[-66.49906921 -33.22662354]
[-60.13839722 -40.80826569]
[-53.43280792 -48.08662415]
[-46.39673996 -55.04602051]
[-39.04535294 -61.67147064]
[-31.39447784 -67.94869995]
[-23.46059799 -73.86418915]
[-15.26079750 -79.40518951]
[-6.81274033 -84.55978394]
[1.86537850 -89.31684875]
[10.75486660 -93.66616058]
[19.83657837 -97.59832764]
[29.09095192 -101.10490417]
[38.49805450 -104.17831421]
[48.03762436 -106.81195831]
[57.68911362 -109.00015259]
[67.43173981 -110.73818207]
[77.24450684 -112.02231598]
[87.10629272 -112.84977722]
[96.99584961 -113.21878052]
[106.89186859 -113.12854767]
[116.77305603 -112.57925415]
[126.61811066 -111.57209015]
[136.40582275 -110.10923004]
[146.11514282 -108.19382477]
[155.72511292 -105.82999420]
[165.21507263 -103.02282715]
[174.56457520 -99.77837372]
[183.75346375 -96.10363007]
[192.76194763 -92.00649261]
[201.57064819 -87.49580383]
[210.16058350 -82.58127594]
[218.51322937 -77.27348328]
[226.61062622 -71.58386993]
[234.43531799 -65.52468872]
[241.97044373 -59.10898209]
[249.19978333 -52.35057449]
[256.10778809 -45.26402664]
[262.67953491 -37.86459732]
[268.90087891 -30.16822243]
[274.75845337 -22.19148445]
[280.23959351 -13.95155907]
[285.33255005 -5.46619701]
[290.02630615 3.24632573]
[303.62451172 -3.08529329]
[317.22268677 -9.41691208]
[330.82086182 -15.74853134]
[339.78640747 -29.47991943]
[356.14385986 -28.31117439]
[363.06607056 -13.44460011]
[353.43206787 -0.17365393]
[337.15249634 -2.15034747]
[323.55429077 4.18127155]
[309.95611572 10.51289082]
[296.35794067 16.84450912]
[300.74319458 28.07336426]
[304.48693848 39.53208542]
[307.57714844 51.18404770]
[310.00399780 62.99201965]
[311.75973511 74.91825867]
[312.83868408 86.92465973]
[313.23745728 98.97283936]
[312.95477295 111.02430725]
[311.99151611 123.04054260]
[310.35079956 134.98313904]
[308.03781128 146.81394958]
[305.05996704 158.49514771]
[301.42681885 169.98939514]
[297.14993286 181.25997925]
[292.24298096 192.27085876]
[286.72164917 202.98687744]
[280.60360718 213.37374878]
[273.90838623 223.39831543]
[266.65740967 233.02851868]
[258.87377930 242.23358154]
[250.58245850 250.98410034]
[241.80989075 259.25210571]
[232.58412170 267.01113892]
[222.93463135 274.23648071]
[212.89227295 280.90496826]
[202.48913574 286.99533081]
[191.75846863 292.48806763]
[180.73454285 297.36566162]
[169.45260620 301.61251831]
[157.94871521 305.21505737]
[146.25962830 308.16177368]
[134.42271423 310.44323730]
[122.47578430 312.05215454]
[110.45702362 312.98339844]
[98.40484619 313.23397827]
[86.35777283 312.80310059]
[74.35428619 311.69216919]
[62.43276596 309.90469360]
[50.63130188 307.44638062]
[38.98760986 304.32513428]
[27.53890419 300.55090332]
[16.32176971 296.13574219]
[5.37205505 291.09375000]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 29]
[2 28]
[3 27]
[4 26]
[5 25]
[6 23]
[7 22]
[8 21]
[9 20]
[10 19]
[34 43]
[35 42]
[36 41]
[100 111]
[101 110]
[102 109]
[103 108]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
