%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:26 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCCAUAAACCUGGAGUGACUAUAUGGAUGCCCCCCACCCUACCACACAUUCGAAGAACCCGxxxxxxxxxxAGGCCACCUACUCAUGCACCUAAUUGGAAGCGCCACCCUAGCAAUAUCAACCAUUAACCUCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[-46.29956055 198.77143860]
[-59.07691574 206.62886047]
[-71.85427856 214.48628235]
[-79.55657196 228.30603027]
[-94.45098114 228.38211060]
[-107.22834015 236.23954773]
[-120.00569916 244.09696960]
[-132.78305054 251.95439148]
[-145.56040955 259.81182861]
[-158.33776855 267.66925049]
[-171.11512756 275.52667236]
[-183.64108276 283.77896118]
[-195.90345764 292.41806030]
[-208.16583252 301.05718994]
[-220.42819214 309.69631958]
[-216.73071289 324.41680908]
[-218.60444641 339.47845459]
[-225.79598999 352.84432983]
[-237.33274841 362.70675659]
[-251.65447998 367.73193359]
[-266.82427979 367.24026489]
[-280.79055786 361.29824829]
[-291.66448975 350.70947266]
[-297.97543335 336.90600586]
[-298.86996460 321.75460815]
[-294.22702026 307.30444336]
[-284.67459106 295.50973511]
[-271.50448608 287.96563721]
[-256.49792480 285.69241333]
[-241.68440247 288.99749756]
[-229.06730652 297.43392944]
[-216.80494690 288.79483032]
[-204.54257202 280.15570068]
[-192.28021240 271.51660156]
[-191.33157349 268.05715942]
[-188.62199402 264.90124512]
[-184.32044983 262.88900757]
[-178.97254944 262.74929810]
[-166.19519043 254.89189148]
[-153.41783142 247.03445435]
[-140.64048767 239.17703247]
[-127.86312103 231.31961060]
[-115.08576965 223.46218872]
[-102.30841064 215.60475159]
[-95.52003479 202.34703064]
[-79.71170044 201.70892334]
[-66.93434143 193.85150146]
[-54.15698624 185.99407959]
[-61.07865143 172.20127869]
[-66.76919556 157.85665894]
[-71.18512726 143.06982422]
[-74.29268646 127.95382690]
[-76.06813812 112.62416840]
[-76.49789429 97.19802094]
[-75.57868195 81.79328918]
[-73.31752014 66.52771759]
[-69.73170471 51.51796722]
[-64.84861755 36.87876892]
[-58.70560455 22.72200394]
[-51.34960175 9.15587330]
[-42.83683777 -3.71593595]
[-33.23237228 -15.79504585]
[-22.60961342 -26.98913383]
[-11.04975128 -37.21264648]
[1.35886371 -46.38744354]
[14.52139187 -54.44340515]
[28.33723259 -61.31895447]
[42.70079041 -66.96154785]
[57.50228500 -71.32805634]
[72.62859344 -74.38510132]
[87.96409607 -76.10932922]
[103.39158630 -76.48754883]
[118.79315948 -75.51687622]
[134.05110168 -73.20473480]
[149.04878235 -69.56879425]
[163.67158508 -64.63683319]
[177.80775452 -58.44655609]
[191.34922791 -51.04527664]
[204.19253540 -42.48955917]
[216.23948669 -32.84479523]
[227.39802551 -22.18469810]
[237.58287048 -10.59074688]
[249.66285706 -19.48309708]
[261.74282837 -28.37544632]
[246.74363708 -28.52958679]
[233.47372437 -35.52313232]
[224.86831665 -47.80916977]
[222.83081055 -62.67014694]
[227.81192017 -76.81894684]
[238.70985413 -87.12599182]
[253.11407471 -91.31145477]
[267.83853149 -88.44954681]
[279.62628174 -79.17330170]
[285.87002563 -65.53453827]
[285.18865967 -50.55002213]
[277.73153687 -37.53274918]
[291.51391602 -43.45271301]
[302.14761353 -58.44953156]
[319.46502686 -55.78372574]
[333.12127686 -61.98913193]
[340.07974243 -76.44455719]
[355.75143433 -79.87638855]
[368.11437988 -69.65203857]
[367.68475342 -53.61473465]
[354.79217529 -44.06693649]
[339.32669067 -48.33289337]
[325.67044067 -42.12748337]
[321.10379028 -30.88234901]
[309.72354126 -25.61842346]
[297.43386841 -29.67033195]
[283.65148926 -23.75036812]
[270.63519287 -16.29545784]
[258.55520630 -7.40310860]
[246.47521973 1.48924124]
[254.10585022 13.91431141]
[260.68496704 26.92676735]
[266.16769409 40.43782043]
[270.51663208 54.35528564]
[273.70205688 68.58419800]
[275.70227051 83.02746582]
[276.50363159 97.58654785]
[276.10064697 112.16208649]
[274.49609375 126.65464783]
[271.70089722 140.96533203]
[267.73413086 154.99650574]
[262.62289429 168.65242004]
[256.40200806 181.83990479]
[249.11395264 194.46896362]
[240.80845642 206.45344543]
[231.54219055 217.71154785]
[221.37837219 228.16648865]
[210.38635254 237.74690247]
[198.64114380 246.38745117]
[186.22286987 254.02914429]
[173.21627808 260.61984253]
[159.71009827 266.11459351]
[145.79652405 270.47592163]
[131.57044983 273.67401123]
[117.12896729 275.68710327]
[102.57061005 276.50140381]
[87.99470520 276.11141968]
[73.50072479 274.51974487]
[59.18755341 271.73730469]
[45.15285873 267.78305054]
[31.49239922 262.68395996]
[18.29938507 256.47482300]
[5.66383839 249.19801331]
[-6.32802725 240.90318298]
[-17.59438705 231.64694214]
[-28.05836868 221.49243164]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 48]
[2 47]
[3 46]
[5 44]
[6 43]
[7 42]
[8 41]
[9 40]
[10 39]
[11 38]
[12 34]
[13 33]
[14 32]
[15 31]
[82 114]
[83 113]
[84 112]
[96 111]
[97 110]
[99 107]
[100 106]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
