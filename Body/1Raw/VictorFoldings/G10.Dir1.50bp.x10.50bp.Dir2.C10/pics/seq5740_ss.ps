%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:20 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGAUCUAACAACGUAAAAAUAAAAUGACAGUUUGAACAUACAAAACCCACCCCAUUCCUCCCxxxxxxxxxxACCGGGUUUUCCUCUUGUAAAUAUAGUUUAACCAAAACAUCAGAUUGUGAAUCUGACAACCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[116.77354431 319.01068115]
[116.77354431 304.01068115]
[116.77354431 289.01068115]
[116.77354431 274.01068115]
[116.77354431 259.01068115]
[116.77354431 244.01069641]
[116.77354431 229.01069641]
[116.77354431 214.01069641]
[116.77354431 199.01069641]
[116.77354431 184.01069641]
[114.44244385 169.19293213]
[109.83687592 154.91746521]
[105.23131561 140.64201355]
[100.62574768 126.36654663]
[77.39151764 113.58098602]
[77.01647949 87.06383514]
[66.57666779 76.29302979]
[56.13685226 65.52222443]
[45.69704056 54.75141144]
[20.84871864 56.30831528]
[4.56260538 34.24770737]
[-10.33929729 35.96039963]
[2.08411264 44.36628342]
[8.12678528 58.09530640]
[5.93430042 72.93421173]
[-3.82049489 84.32911682]
[-18.14397812 88.78308105]
[-32.64045715 84.92923737]
[-42.86114502 73.95027924]
[-45.66944504 59.21550751]
[-40.20352173 45.24684143]
[-28.14005089 36.33079910]
[-43.10029984 35.23949051]
[-58.06054688 34.14817810]
[-74.40535736 42.56405640]
[-88.55013275 32.22358322]
[-103.52984619 31.44373703]
[-119.66190338 36.65842819]
[-129.13859558 22.60038567]
[-118.25336456 9.60238838]
[-102.75000000 16.46402359]
[-87.77028656 17.24386787]
[-78.53857422 9.36460686]
[-66.01272583 9.93216419]
[-56.96923828 19.18793106]
[-42.00898743 20.27924156]
[-27.04874039 21.37055206]
[-12.05198669 21.05849648]
[2.84991550 19.34580612]
[11.48903179 7.08343792]
[8.08605385 -7.52545452]
[4.68307590 -22.13434792]
[1.28009784 -36.74324036]
[-2.12288022 -51.35213089]
[-5.52585793 -65.96102142]
[-8.92883587 -80.56991577]
[-23.98798752 -80.38013458]
[-38.73577118 -83.43250275]
[-52.48240662 -89.58425903]
[-64.58493805 -98.54766846]
[-74.47731018 -109.90351105]
[-81.69683075 -123.12064362]
[-85.90583801 -137.58087158]
[-86.90747070 -152.60787964]
[-84.65487671 -167.49880981]
[-79.25341034 -181.55718994]
[-70.95571899 -194.12550354]
[-60.14988708 -204.61589050]
[-47.34133148 -212.53768921]
[-33.12912750 -217.52038574]
[-18.17800903 -219.33094788]
[-3.18726563 -217.88468933]
[11.14195824 -213.24923706]
[24.13945961 -205.64140320]
[35.19731903 -195.41703796]
[43.79834366 -183.05433655]
[49.54024887 -169.13153076]
[52.15447235 -154.29980469]
[51.51874161 -139.25288391]
[47.66279221 -124.69452667]
[40.76697540 -111.30565643]
[31.15382004 -99.71250153]
[19.27295113 -90.45728302]
[5.68005657 -83.97289276]
[9.08303452 -69.36400604]
[12.48601246 -54.75511169]
[15.88899040 -40.14621735]
[19.29196739 -25.53732491]
[22.69494629 -10.92843246]
[26.09792519 3.68045974]
[39.92477036 3.99618006]
[51.65187073 10.34220791]
[58.91518784 20.92769814]
[60.48727798 33.16877747]
[56.46784973 44.31159973]
[66.90766144 55.08240891]
[77.34747314 65.85321808]
[87.78728485 76.62402344]
[93.02983856 74.56373596]
[98.59033203 73.66372681]
[104.21513367 73.96504211]
[109.64765167 75.45393372]
[114.64009857 78.06250000]
[118.96474457 81.67173767]
[122.42430878 86.11702728]
[124.86098480 91.19557953]
[139.84069824 90.41573334]
[154.82041931 89.63588715]
[169.80012512 88.85604095]
[181.56414795 77.94791412]
[197.40505981 80.48666382]
[205.17106628 94.52478790]
[198.90473938 109.29342651]
[183.41308594 113.46335602]
[170.57997131 103.83575439]
[155.60026550 104.61560059]
[140.62054443 105.39544678]
[125.64083099 106.17529297]
[124.08345032 110.75052643]
[121.71733856 114.96475220]
[118.62194061 118.67645264]
[114.90120697 121.76098633]
[119.50677490 136.03645325]
[124.11233521 150.31190491]
[128.71789551 164.58737183]
[132.63446045 150.10771179]
[141.43547058 137.96101379]
[153.97482300 129.72909546]
[168.61958313 126.48394012]
[183.46263123 128.64817810]
[196.57102966 135.93994141]
[206.23774719 147.40966797]
[211.20390320 161.56372070]
[210.82279968 176.55888367]
[205.14407349 190.44239807]
[194.90722656 201.40629578]
[181.44534302 208.02278137]
[166.51152039 209.43023682]
[152.05052185 205.44537354]
[139.94549561 196.58712769]
[131.77354431 184.01069641]
[131.77354431 199.01069641]
[131.77354431 214.01069641]
[131.77354431 229.01069641]
[131.77354431 244.01069641]
[131.77354431 259.01068115]
[131.77354431 274.01068115]
[131.77354431 289.01068115]
[131.77354431 304.01068115]
[131.77354431 319.01068115]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[11 125]
[12 124]
[13 123]
[14 122]
[16 98]
[17 97]
[18 96]
[19 95]
[21 49]
[22 48]
[32 47]
[33 46]
[34 45]
[36 42]
[37 41]
[50 90]
[51 89]
[52 88]
[53 87]
[54 86]
[55 85]
[56 84]
[106 118]
[107 117]
[108 116]
[109 115]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
