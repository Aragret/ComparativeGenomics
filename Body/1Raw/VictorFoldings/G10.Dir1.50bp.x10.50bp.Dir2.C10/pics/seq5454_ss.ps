%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:03 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGGCUAACAUGACUAACACCCUUAAUUCCAUCCACCCUCCUCUCCCUAGGAGGCCUGCCCCCGCxxxxxxxxxxAAACCAUCAGCCUACUCAUUCAACCAAUAGCCCUGGCCGUACGCCUAACCGCUAACAUUACUCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[227.32913208 90.88848114]
[212.45910645 92.85893250]
[197.58909607 94.82938385]
[182.71908569 96.79983521]
[167.84907532 98.77028656]
[156.24848938 108.11243439]
[141.55149841 102.25502014]
[126.68148804 104.22547150]
[111.81147766 106.19592285]
[94.61579132 143.77366638]
[81.72793579 151.44851685]
[95.26190948 157.91622925]
[98.84563446 172.48184204]
[89.85768890 184.49087524]
[74.87257385 185.15895081]
[64.85161591 173.99739075]
[67.12467194 159.17106628]
[53.52648926 165.50268555]
[39.92830658 171.83430481]
[41.53750992 186.89050293]
[38.16835022 201.65287781]
[30.18628693 214.52009583]
[18.45715714 224.09643555]
[4.25324821 229.34310913]
[-10.88470650 229.69102478]
[-25.31465530 225.10241699]
[-37.47134399 216.07502747]
[-46.03610611 203.58810425]
[-50.07990265 188.99609375]
[-49.16408920 173.88186646]
[-43.38800812 159.88488770]
[-33.37820816 148.52342224]
[-20.22047234 141.02992249]
[-5.34205675 138.21717834]
[9.64314079 140.39033508]
[23.10963631 147.31364441]
[33.59668732 158.23611450]
[47.19487000 151.90449524]
[60.79305649 145.57287598]
[74.05309296 138.56065369]
[86.94094849 130.88581848]
[87.01695251 123.38619995]
[87.16896820 108.38697052]
[87.24497223 100.88735199]
[74.51530457 92.95289612]
[61.78564453 85.01843262]
[49.05598068 77.08397675]
[36.32631683 69.14951324]
[23.59665108 61.21505356]
[8.26002979 65.03128052]
[-5.23982573 56.81364822]
[-8.89369011 41.43753815]
[-0.53378975 28.02531815]
[14.88009357 24.53422356]
[28.20317650 33.03545761]
[31.53111076 48.48538971]
[44.26077652 56.41984940]
[56.99044037 64.35430908]
[69.72010040 72.28877258]
[82.44976807 80.22322845]
[95.17942810 88.15769196]
[109.84102631 91.32591248]
[124.71103668 89.35546112]
[139.58105469 87.38500977]
[152.24523926 77.90191650]
[165.87861633 83.90027618]
[180.74862671 81.92982483]
[195.61865234 79.95937347]
[210.48866272 77.98891449]
[225.35867310 76.01846313]
[224.63348389 62.65748596]
[224.88290405 49.27940369]
[226.10560608 35.95521545]
[228.29502869 22.75563049]
[231.43952942 9.75069714]
[235.52239990 -2.99057698]
[240.52194214 -15.40058136]
[246.41157532 -27.41346931]
[253.16000366 -38.96549988]
[260.73141479 -49.99538803]
[269.08557129 -60.44461060]
[278.17810059 -70.25773621]
[287.96075439 -79.38270569]
[298.38159180 -87.77112579]
[309.38525391 -95.37850189]
[320.91333008 -102.16448212]
[332.90463257 -108.09309387]
[345.29553223 -113.13289642]
[358.02023315 -117.25717163]
[371.01116943 -120.44407654]
[384.19940186 -122.67671967]
[397.51495361 -123.94329834]
[410.88717651 -124.23711395]
[424.24502563 -123.55664825]
[437.51766968 -121.90554047]
[450.63464355 -119.29259491]
[463.52639771 -115.73171234]
[476.12445068 -111.24182129]
[488.36196899 -105.84677887]
[500.17407227 -99.57524872]
[511.49801636 -92.46055603]
[522.27380371 -84.54048157]
[532.44421387 -75.85708618]
[541.95526123 -66.45647430]
[550.75659180 -56.38856506]
[558.80145264 -45.70681763]
[566.04711914 -34.46793365]
[572.45532227 -22.73158455]
[577.99194336 -10.56006718]
[582.62774658 1.98200536]
[586.33807373 14.82806015]
[589.10327148 27.90991020]
[590.90875244 41.15812683]
[591.74493408 54.50238800]
[591.60736084 67.87187958]
[590.49694824 81.19564819]
[588.41943359 94.40297699]
[603.01385498 97.86769104]
[617.60821533 101.33241272]
[631.96527100 94.17326355]
[646.45275879 101.06482697]
[649.95697021 116.72048950]
[639.78991699 129.13055420]
[623.75079346 128.77510071]
[614.14349365 115.92678070]
[599.54913330 112.46206665]
[584.95471191 108.99735260]
[579.58966064 125.18052673]
[572.74572754 140.79643250]
[564.48193359 155.71029663]
[554.86956787 169.79331970]
[543.99145508 182.92395020]
[531.94146729 194.98880005]
[518.82348633 205.88366699]
[504.75067139 215.51446533]
[489.84442139 223.79800415]
[474.23333740 230.66271973]
[458.05212402 236.04928589]
[441.44036865 239.91110229]
[424.54147339 242.21479797]
[407.50122070 242.94036865]
[390.46664429 242.08146667]
[373.58483887 239.64540100]
[357.00143433 235.65313721]
[340.85961914 230.13902283]
[325.29870605 223.15055847]
[310.45303345 214.74798584]
[296.45074463 205.00372314]
[283.41278076 194.00180054]
[271.45169067 181.83708191]
[260.67077637 168.61451721]
[251.16316223 154.44815063]
[243.01094055 139.46017456]
[236.28457642 123.77991486]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 70]
[2 69]
[3 68]
[4 67]
[5 66]
[7 64]
[8 63]
[9 62]
[10 41]
[11 40]
[17 39]
[18 38]
[19 37]
[44 61]
[45 60]
[46 59]
[47 58]
[48 57]
[49 56]
[117 127]
[118 126]
[119 125]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
