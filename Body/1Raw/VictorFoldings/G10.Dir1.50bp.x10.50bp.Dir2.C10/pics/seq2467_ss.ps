%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:25 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGUCACACCCAAUUGGACCAAUCUAUCACCCUAUAGAAGAACUAAUGUUAGUAUAAGUAACAUxxxxxxxxxxUAUGAGAAUCGAACCCAUCCCUGAGAAUCCAAAAUUCUCCGUGCCACCUAUCACACCCCAUCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[107.56901550 473.27474976]
[107.56901550 458.27474976]
[107.56901550 443.27474976]
[107.56901550 428.27474976]
[107.56901550 413.27474976]
[107.56901550 398.27474976]
[107.56901550 383.27474976]
[107.56901550 368.27474976]
[107.56901550 353.27474976]
[107.56901550 338.27474976]
[91.23789215 334.57226562]
[76.22776794 327.13104248]
[63.38152313 316.36480713]
[53.42150116 302.87414551]
[46.90887070 287.41296387]
[44.21203613 270.84634399]
[45.48576736 254.10221863]
[50.66234970 238.11929321]
[59.45515442 223.79447937]
[71.37451935 211.93254089]
[85.75500488 203.20088196]
[101.79256439 198.09205627]
[100.56195068 183.14262390]
[99.33133698 168.19317627]
[97.94731140 153.25717163]
[96.41001892 138.33615112]
[74.07260895 134.60208130]
[55.41536713 117.70748901]
[48.06774139 90.99879456]
[56.86505508 62.06821442]
[41.87216949 62.53013992]
[26.87928391 62.99206543]
[11.88639832 63.45399094]
[-3.10648775 63.91591644]
[-13.74840355 75.60031891]
[-29.53916740 76.25399780]
[-41.11040115 65.48914337]
[-41.59709549 49.69234848]
[-30.71050262 38.23557281]
[-14.90944767 37.91592026]
[-3.56841373 48.92303085]
[11.42447186 48.46110535]
[26.41735840 47.99917984]
[41.41024399 47.53725433]
[56.40312958 47.07532883]
[59.81491852 40.39627838]
[46.43596268 33.61368179]
[31.62944794 31.21220589]
[29.31170082 16.39235306]
[42.67797089 9.58479977]
[53.30137253 20.17368507]
[66.63849640 27.03817749]
[70.05027771 20.35912895]
[61.63687134 7.94081450]
[53.22346115 -4.47749996]
[44.81005096 -16.89581490]
[36.39664078 -29.31412888]
[27.98322868 -41.73244476]
[13.83718014 -48.81763077]
[13.10414505 -63.69418716]
[-0.78561926 -73.41584778]
[4.71105099 -89.45402527]
[21.64407539 -88.61197662]
[25.52245903 -72.10759735]
[39.06672668 -65.91065216]
[40.40154266 -50.14585114]
[48.81495285 -37.72753906]
[57.22836304 -25.30922508]
[65.64177704 -12.89091015]
[74.05518341 -0.47259587]
[82.46859741 11.94571877]
[89.96859741 11.94571877]
[88.53878784 -2.98598146]
[87.10898590 -17.91768074]
[79.33673096 -30.74702644]
[83.79100800 -45.07041550]
[97.46824646 -51.22941208]
[111.14571381 -45.07093430]
[115.60054016 -30.74771881]
[107.82820129 -17.91768074]
[106.39839935 -2.98598146]
[104.96859741 11.94571877]
[112.46859741 11.94571877]
[120.88200378 -0.47259587]
[129.29541016 -12.89091015]
[122.00897217 -26.35071564]
[121.82383728 -41.65510559]
[128.78253174 -55.28723907]
[141.28601074 -64.11455536]
[156.46107483 -66.10859680]
[170.82058716 -60.81115341]
[181.06484985 -49.43953705]
[184.83979797 -34.60685730]
[181.27798462 -19.72156143]
[171.19787598 -8.20417786]
[156.91583252 -2.70131874]
[141.71372986 -4.47749996]
[133.30032349 7.94081450]
[124.88690948 20.35912895]
[128.76947021 26.77595520]
[141.60325623 19.01101875]
[149.36799622 31.84491158]
[136.53460693 39.60960770]
[140.41717529 46.02643585]
[155.32162476 44.33604050]
[170.22607422 42.64564133]
[185.13052368 40.95524216]
[200.03497314 39.26484680]
[214.93942261 37.57444763]
[226.01750183 25.97033501]
[241.98359680 27.53994751]
[250.58985901 41.07921219]
[245.23431396 56.20196915]
[230.02526855 61.30732727]
[216.62982178 52.47889709]
[201.72537231 54.16929245]
[186.82092285 55.85969162]
[171.91647339 57.55008698]
[157.01202393 59.24048615]
[142.10757446 60.93088531]
[146.33456421 112.42789459]
[111.33103943 136.79885864]
[112.86833191 151.71987915]
[116.88250732 159.99526978]
[114.28077698 166.96257019]
[115.51139069 181.91200256]
[116.74199677 196.86143494]
[130.01104736 198.45458984]
[142.74313354 202.50120544]
[154.48896790 208.85667419]
[164.83441162 217.29490662]
[173.41508484 227.51644897]
[179.92915344 239.15905762]
[184.14801025 251.81056213]
[185.92425537 265.02343750]
[185.19686890 278.33062744]
[181.99328613 291.26214600]
[176.42839050 303.36148071]
[168.70034790 314.20196533]
[159.08361816 323.40158081]
[147.91917419 330.63659668]
[135.60237122 335.65283203]
[122.56901550 338.27474976]
[122.56901550 353.27474976]
[122.56901550 368.27474976]
[122.56901550 383.27474976]
[122.56901550 398.27474976]
[122.56901550 413.27474976]
[122.56901550 428.27474976]
[122.56901550 443.27474976]
[122.56901550 458.27474976]
[122.56901550 473.27474976]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 152]
[2 151]
[3 150]
[4 149]
[5 148]
[6 147]
[7 146]
[8 145]
[9 144]
[10 143]
[22 127]
[23 126]
[24 125]
[25 123]
[26 122]
[30 45]
[31 44]
[32 43]
[33 42]
[34 41]
[53 71]
[54 70]
[55 69]
[56 68]
[57 67]
[58 66]
[60 64]
[83 99]
[84 98]
[85 97]
[104 120]
[105 119]
[106 118]
[107 117]
[108 116]
[109 115]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
