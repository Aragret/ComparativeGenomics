%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:43 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGAACAAGCAUCAAGCACGCAGCAAUGCAGCUCAAAACGCUUAGCCUAGCCACACCCCCACGGxxxxxxxxxxUACCACUCCAGCCUAGCCCCUACCCCCCAAUUAGGAGGGCACUGGCCCCCAACAGGCAUCACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[229.83180237 187.04693604]
[218.24275208 177.52360535]
[206.65370178 168.00027466]
[195.06466675 158.47692871]
[183.47561646 148.95359802]
[171.88656616 139.43025208]
[160.10443115 130.14686584]
[148.13417053 121.10735321]
[136.16390991 112.06783295]
[124.19364929 103.02831268]
[117.53270721 115.33572388]
[105.66550446 121.46930695]
[93.03552246 119.93354797]
[83.94358063 111.96809387]
[69.43495941 115.77594757]
[54.92633057 119.58380890]
[40.41770554 123.39167023]
[36.21521759 140.40121460]
[24.06564903 152.90223694]
[7.35362196 157.54054260]
[-9.32952976 153.13464355]
[-21.44710732 140.97514343]
[-35.78716660 145.37544250]
[-50.12722778 149.77574158]
[-56.87733841 160.81385803]
[-68.95885468 164.16172791]
[-79.71495056 158.54312134]
[-94.14233398 162.64807129]
[-108.56971741 166.75300598]
[-119.59105682 178.89640808]
[-135.55873108 175.15939331]
[-140.04656982 159.38626099]
[-128.43786621 147.80308533]
[-112.67465973 152.32562256]
[-98.24727631 148.22068787]
[-83.81989288 144.11573792]
[-72.33925629 130.87792969]
[-54.52753067 135.43568420]
[-40.18746948 131.03538513]
[-25.84740639 126.63508606]
[-24.34335709 114.02336884]
[-18.13973808 102.88668823]
[-8.13494205 94.91098785]
[4.19419718 91.31910706]
[17.01035881 92.68338776]
[28.38953018 98.83481598]
[36.60984802 108.88304138]
[51.11847305 105.07518768]
[65.62709808 101.26732635]
[80.13571930 97.45946503]
[82.67371368 87.93143463]
[89.72308350 80.31716156]
[100.00021362 76.70664978]
[111.28546143 78.38653564]
[110.66963196 63.39918518]
[110.05381012 48.41183090]
[109.43798828 33.42447662]
[94.51865387 31.56345558]
[80.10916138 27.27202988]
[66.60260010 20.66727066]
[54.36745834 11.92936230]
[43.73750305 1.29668128]
[35.00273132 -10.94070625]
[28.40143585 -24.44895363]
[24.11370468 -38.85954666]
[22.25650978 -53.77935791]
[22.88051605 -68.80135345]
[25.96870232 -83.51573944]
[31.43681717 -97.52108002]
[39.13568878 -110.43530273]
[48.85528946 -121.90610504]
[60.33045197 -131.62054443]
[73.24813843 -139.31361389]
[87.25592804 -144.77545166]
[101.97169495 -147.85702515]
[116.99397278 -148.47428894]
[131.91294861 -146.61038208]
[146.32160950 -142.31619263]
[159.82688904 -135.70883179]
[172.06036377 -126.96855927]
[182.68826294 -116.33383179]
[191.42068481 -104.09476471]
[198.01936340 -90.58524323]
[202.30432129 -76.17382050]
[204.15864563 -61.25365448]
[203.53173828 -46.23177719]
[200.44071960 -31.51799202]
[194.96990967 -17.51370430]
[187.26855469 -4.60096264]
[177.54673767 6.86796618]
[166.06970215 16.58020020]
[153.15054321 24.27078247]
[139.14169312 29.72990990]
[124.42533875 32.80865097]
[125.04116058 47.79600525]
[125.65699005 62.78335953]
[126.27281189 77.77071381]
[133.23316956 91.05805206]
[145.20343018 100.09757233]
[157.17369080 109.13709259]
[169.14395142 118.17661285]
[175.74577332 119.38430023]
[180.06068420 123.20128632]
[181.40989685 127.84120941]
[192.99894714 137.36454773]
[204.58799744 146.88787842]
[216.17704773 156.41122437]
[227.76609802 165.93455505]
[239.35514832 175.45790100]
[259.84652710 163.25521851]
[283.50210571 160.50346375]
[306.18161011 167.65586853]
[323.92721558 183.43467712]
[333.65423584 205.05931091]
[333.68731689 228.73638916]
[347.83462524 233.72171021]
[357.03173828 233.62818909]
[362.21942139 238.95736694]
[376.26141357 244.23210144]
[390.30337524 249.50683594]
[404.34536743 254.78158569]
[420.42645264 251.56752014]
[431.04574585 264.06402588]
[425.27899170 279.41580200]
[409.05856323 281.83023071]
[399.07061768 268.82354736]
[385.02865601 263.54882812]
[370.98666382 258.27407837]
[356.94470215 252.99934387]
[342.84930420 247.86903381]
[328.70199585 242.88371277]
[324.63034058 249.68898010]
[319.64541626 255.86054993]
[313.84445190 261.27670288]
[307.34082031 265.83041382]
[300.26174927 269.43157959]
[292.74591064 272.00872803]
[284.94064331 273.51043701]
[276.99905396 273.90637207]
[269.07711792 273.18792725]
[261.33047485 271.36837769]
[253.91146851 268.48263550]
[246.96611023 264.58657837]
[240.63121033 259.75601196]
[235.03170776 254.08512878]
[230.27818298 247.68470764]
[226.46466064 240.67994690]
[223.66677856 233.20802307]
[221.94029236 225.41539001]
[221.31991577 217.45492554]
[221.81869507 209.48289490]
[223.42764282 201.65591431]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 109]
[2 108]
[3 107]
[4 106]
[5 105]
[6 104]
[7 101]
[8 100]
[9 99]
[10 98]
[14 50]
[15 49]
[16 48]
[17 47]
[22 40]
[23 39]
[24 38]
[27 36]
[28 35]
[29 34]
[54 97]
[55 96]
[56 95]
[57 94]
[115 131]
[116 130]
[118 129]
[119 128]
[120 127]
[121 126]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
