%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:12 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGAAUAAUAGGAGCUUAAACCCCCUUAUUUCUAGGACUAUGAGAAUCGAACCCAUCCCUGAGAxxxxxxxxxxAUGUGCUCCGGGUCCAUCAUCCACAACCUUAACAAUGAACAAGAUAUUCGAAAAAUAGGAGCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[121.60034180 325.37597656]
[121.29236603 310.37911987]
[120.98438263 295.38229370]
[120.67640686 280.38546753]
[120.36843109 265.38861084]
[120.06045532 250.39178467]
[119.75247192 235.39494324]
[119.44449615 220.39810181]
[119.13652039 205.40126038]
[116.98793793 190.55593872]
[113.03133392 176.08717346]
[109.07472229 161.61840820]
[105.11811066 147.14964294]
[101.16149902 132.68087769]
[85.19277191 129.15705872]
[72.92682648 118.34207916]
[67.43095398 102.94036865]
[70.07948303 86.80336761]
[58.10922623 77.76384735]
[46.13896561 68.72432709]
[34.16870880 59.68481064]
[22.19845009 50.64529037]
[12.03822517 61.69632339]
[0.85884076 71.71514893]
[-11.23532009 80.60822296]
[-24.13133621 88.29251099]
[-37.70879745 94.69626617]
[-51.84093094 99.75969696]
[-66.39579010 103.43552399]
[-81.23746490 105.68942261]
[-96.22739410 106.50035858]
[-111.22560883 105.86075592]
[-126.09207153 103.77658081]
[-140.68797302 100.26730347]
[-154.87704468 95.36567688]
[-168.52677917 89.11747742]
[-181.50976562 81.58103943]
[-193.70474243 72.82673645]
[-204.99787903 62.93629837]
[-215.28370667 52.00207520]
[-224.46620178 40.12616348]
[-232.45962524 27.41944504]
[-239.18934631 14.00056076]
[-244.59251404 -0.00519691]
[-248.61869812 -14.46705627]
[-251.23028564 -29.24998856]
[-252.40292358 -44.21596527]
[-252.12562561 -59.22525024]
[-250.40101624 -74.13770294]
[-247.24517822 -88.81408691]
[-242.68757629 -103.11736298]
[-236.77076721 -116.91399384]
[-229.55000305 -130.07514954]
[-221.09269714 -142.47795105]
[-211.47781372 -154.00659180]
[-200.79513550 -164.55343628]
[-189.14439392 -174.01998901]
[-176.63438416 -182.31788635]
[-163.38189697 -189.36964417]
[-149.51068115 -195.10940552]
[-135.15025330 -199.48359680]
[-120.43468475 -202.45135498]
[-105.50138092 -203.98500061]
[-90.48977661 -204.07019043]
[-75.54003143 -202.70614624]
[-60.79173279 -199.90557861]
[-46.38258362 -195.69465637]
[-32.44711685 -190.11270142]
[-19.11544991 -183.21180725]
[-6.51206303 -175.05644226]
[5.24536848 -165.72271729]
[16.04706573 -155.29780579]
[25.79217529 -143.87902832]
[34.38970566 -131.57301331]
[41.75938034 -118.49465942]
[47.83239365 -104.76607513]
[52.55204010 -90.51544952]
[55.87424850 -75.87582397]
[57.76800537 -60.98390961]
[58.21562958 -45.97874069]
[57.21293259 -31.00041771]
[54.76928711 -16.18879700]
[50.90750504 -1.68217254]
[45.66363907 12.38400745]
[39.08665848 25.87840843]
[31.23797035 38.67503357]
[43.20822906 47.71455002]
[55.17848587 56.75407028]
[67.14874268 65.79358673]
[79.11900330 74.83310699]
[96.04131317 67.53898621]
[114.22064972 70.55239105]
[127.88442230 82.91645813]
[142.13111877 78.22266388]
[145.68417358 74.23128510]
[149.99157715 72.24336243]
[154.14707947 72.20597076]
[157.40153503 73.70787811]
[171.91017151 69.90002441]
[186.41879272 66.09216309]
[200.92741394 62.28430557]
[202.95419312 47.21909332]
[210.59622192 34.07878113]
[222.68815613 24.86717033]
[237.38604736 20.98896408]
[252.44857788 23.03556252]
[265.57882690 30.69487190]
[274.77450562 42.79890442]
[278.63339233 57.50188446]
[276.56698608 72.56170654]
[268.89041138 85.68186951]
[256.77429199 94.86164093]
[242.06623840 98.70115662]
[227.00914001 96.61494446]
[213.89909363 88.92111206]
[204.73527527 76.79293060]
[190.22665405 80.60078430]
[175.71801758 84.40864563]
[161.20939636 88.21650696]
[146.82492065 92.46935272]
[132.57821655 97.16315460]
[132.35830688 104.72525787]
[130.40658569 112.03446198]
[126.82748413 118.69958496]
[121.81258392 124.36389923]
[115.63026428 128.72425842]
[119.58687592 143.19302368]
[123.54348755 157.66178894]
[127.50009918 172.13056946]
[131.45671082 186.59933472]
[136.63662720 172.52209473]
[147.32843018 162.00138855]
[161.48738098 157.04920959]
[176.40568542 158.61262512]
[189.23031616 166.39265442]
[197.50865173 178.90141296]
[199.65753174 193.74670410]
[195.26597595 208.08944702]
[185.17387390 219.18670654]
[171.31121826 224.91619873]
[156.32919312 224.18222046]
[143.09298706 217.12512207]
[134.13336182 205.09329224]
[134.44132996 220.09011841]
[134.74931335 235.08695984]
[135.05729675 250.08380127]
[135.36526489 265.08062744]
[135.67324829 280.07748413]
[135.98121643 295.07431030]
[136.28919983 310.07116699]
[136.59718323 325.06799316]
[139.18295288 344.27642822]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 151]
[2 150]
[3 149]
[4 148]
[5 147]
[6 146]
[7 145]
[8 144]
[9 143]
[10 130]
[11 129]
[12 128]
[13 127]
[14 126]
[18 90]
[19 89]
[20 88]
[21 87]
[22 86]
[93 121]
[94 120]
[98 119]
[99 118]
[100 117]
[101 116]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
