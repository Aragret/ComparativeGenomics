%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:12 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGACAGCCCUAGACCUCAACUACCUAACCAACAAACUUAAAAUAAAAUCCCCACUAUGCACAxxxxxxxxxxGAGGGGCCACAGUAAUUACAAACUUACUAUCCGCCAUCCCAUACAUUGGGACAGACCUAGCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[115.56584930 288.43701172]
[115.56584930 273.43701172]
[115.56584930 258.43701172]
[115.56584930 243.43701172]
[115.56584930 228.43701172]
[115.56584930 213.43701172]
[115.56584930 198.43701172]
[115.56584930 183.43701172]
[115.56584930 168.43701172]
[115.56584930 153.43701172]
[86.64727020 149.52633667]
[66.00339508 132.35433960]
[58.40132523 109.03422546]
[63.89285660 87.51358795]
[50.95479965 79.92367554]
[38.01674652 72.33377075]
[25.07868958 64.74386597]
[16.32146835 76.93548584]
[6.47669125 88.26708221]
[-4.37164688 98.64196777]
[-16.13099098 107.97161865]
[-28.70101166 116.17645264]
[-41.97446442 123.18644714]
[-55.83810043 128.94181824]
[-70.17363739 133.39343262]
[-84.85877228 136.50334167]
[-99.76821136 138.24499512]
[-114.77474213 138.60353088]
[-129.75035095 137.57588196]
[-144.56724548 135.17083740]
[-159.09901428 131.40892029]
[-173.22169495 126.32219696]
[-186.81477356 119.95409393]
[-199.76228333 112.35892487]
[-211.95376587 103.60150146]
[-223.28520203 93.75653839]
[-233.65989685 82.90802765]
[-242.98936462 71.14852905]
[-251.19398499 58.57836914]
[-258.20376587 45.30479813]
[-263.95889282 31.44106674]
[-268.41027832 17.10545158]
[-271.51992798 2.42026711]
[-273.26132202 -12.48919868]
[-273.61962891 -27.49573898]
[-272.59173584 -42.47132492]
[-270.18643188 -57.28817749]
[-266.42428589 -71.81989288]
[-261.33731079 -85.94248199]
[-254.96899414 -99.53546143]
[-247.37361145 -112.48284912]
[-238.61598206 -124.67417908]
[-228.77082825 -136.00544739]
[-217.92213440 -146.37995911]
[-206.16249084 -155.70922852]
[-193.59219360 -163.91363525]
[-180.31851196 -170.92320251]
[-166.45468140 -176.67810059]
[-152.11898804 -181.12924194]
[-137.43374634 -184.23866272]
[-122.52425385 -185.97981262]
[-107.51770782 -186.33784485]
[-92.54214478 -185.30970764]
[-77.72532654 -182.90417480]
[-63.19367599 -179.14176941]
[-49.07117081 -174.05458069]
[-35.47830200 -167.68601990]
[-22.53104210 -160.09042358]
[-10.33985424 -151.33258057]
[0.99124724 -141.48724365]
[11.36558819 -130.63838196]
[20.69465637 -118.87857819]
[28.89885712 -106.30814362]
[35.90819550 -93.03433990]
[41.66286469 -79.17041779]
[46.11377335 -64.83465576]
[49.22294235 -50.14936829]
[50.96384430 -35.23984528]
[51.32162857 -20.23329163]
[50.29324341 -5.25774193]
[47.88746262 9.55903435]
[44.12480927 24.09062386]
[39.03738403 38.21304321]
[32.66859818 51.80580521]
[45.60665512 59.39571381]
[58.54470825 66.98562622]
[71.48276520 74.57553101]
[86.42436981 59.65437698]
[109.02493286 53.94434357]
[133.49758911 61.15331268]
[152.45108032 81.38027191]
[165.06221008 73.25872803]
[177.67332458 65.13719177]
[190.28445435 57.01564789]
[202.89558411 48.89410400]
[203.63230896 33.39452744]
[213.36499023 21.30922508]
[228.35121155 17.28524208]
[242.82849121 22.86988258]
[251.22999573 35.91573715]
[250.32518005 51.40641022]
[240.46197510 63.38542175]
[225.43296814 67.24659729]
[211.01713562 61.50523376]
[198.40600586 69.62677765]
[185.79487610 77.74831390]
[173.18374634 85.86985779]
[160.57261658 93.99140167]
[161.04043579 101.47679901]
[176.00141907 100.39556885]
[190.96238708 99.31434631]
[205.00285339 94.03558350]
[214.49353027 105.65139008]
[206.52174377 118.35771179]
[191.93443298 114.86770630]
[176.95524597 115.65764618]
[161.97605896 116.44758606]
[162.44387817 123.93298340]
[175.96806335 130.42114258]
[189.49224854 136.90931702]
[203.01644897 143.39747620]
[218.56732178 139.45419312]
[231.25849915 149.26814270]
[231.35438538 165.31089783]
[218.78143311 175.27584839]
[203.18452454 171.51872253]
[196.52827454 156.92167664]
[183.00408936 150.43350220]
[169.47990417 143.94534302]
[155.95570374 137.45716858]
[149.60824585 141.45213318]
[158.36624146 153.62988281]
[167.12425232 165.80761719]
[179.67703247 174.01905823]
[179.54536438 189.01847839]
[166.85038757 197.00831604]
[153.26985168 190.63891602]
[151.29608154 175.76953125]
[144.10469055 162.60578918]
[136.91331482 149.44204712]
[130.56584167 153.43701172]
[130.56584167 168.43701172]
[130.56584167 183.43701172]
[130.56584167 198.43701172]
[130.56584167 213.43701172]
[130.56584167 228.43701172]
[130.56584167 243.43701172]
[130.56584167 258.43701172]
[130.56584167 273.43701172]
[130.56584167 288.43701172]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[14 87]
[15 86]
[16 85]
[17 84]
[91 108]
[92 107]
[93 106]
[94 105]
[95 104]
[118 130]
[119 129]
[120 128]
[121 127]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
