%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:11 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGUUCAUCGGCGUAAAUCUAACUUUCUUCCCACAACACUUUCUCGGCCUAUCCGGAAUGCCCxxxxxxxxxxGCCACAUAGCCCUCGUAGUAACAGCCAUUCUCAUCCAAACCCCCUGAAGCUUCACCGGCGCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[128.07456970 390.91821289]
[128.07456970 375.91821289]
[128.07456970 360.91821289]
[128.07456970 345.91821289]
[128.07456970 330.91821289]
[128.07456970 315.91821289]
[128.07456970 300.91821289]
[128.07456970 285.91821289]
[128.07456970 270.91821289]
[128.07456970 255.91821289]
[126.20696259 241.03494263]
[122.50080109 226.50000000]
[118.79463959 211.96505737]
[115.08847809 197.43013000]
[102.18949127 190.07133484]
[98.22386169 175.38363647]
[106.02989197 161.90390015]
[102.32373047 147.36895752]
[97.59288025 141.62747192]
[98.69501495 132.49307251]
[95.29203796 117.88417816]
[83.12020111 109.11797333]
[68.18589020 110.52027893]
[53.25158310 111.92257690]
[50.73654175 126.79998016]
[44.45576096 140.51908875]
[34.83747482 152.14454651]
[22.53747368 160.88366699]
[8.39439392 166.14064026]
[-6.62746668 167.55702209]
[-21.50389290 165.03622437]
[-35.22058487 158.75015259]
[-46.84231567 149.12738037]
[-55.57669830 136.82400513]
[-60.82820511 122.67889404]
[-62.23878098 107.65648651]
[-59.71224976 92.78103638]
[-53.42087555 79.06677246]
[-43.79361343 67.44876099]
[-31.48686981 58.71913147]
[-17.33973503 53.47308350]
[-2.31678534 52.06830978]
[12.55768967 54.60058212]
[26.26952362 60.89725113]
[37.88381958 70.52899933]
[46.60869598 82.83911133]
[51.84927750 96.98827362]
[66.78358459 95.58596802]
[81.71789551 94.18366241]
[84.31560516 87.14790344]
[89.51101685 73.07638550]
[92.10872650 66.04062653]
[81.66891479 55.26981735]
[71.22910309 44.49900818]
[55.27499390 42.81199646]
[46.76855087 29.20978928]
[52.23519135 14.12683868]
[67.48136902 9.13349247]
[80.81153107 18.06021881]
[81.99990845 34.05919647]
[92.43972015 44.83000565]
[102.87953186 55.60081482]
[117.69728851 53.26971054]
[124.32579041 39.81374359]
[130.95428467 26.35777855]
[137.58279419 12.90181351]
[144.21128845 -0.55415201]
[131.93080139 -9.22227287]
[121.15760040 -19.70485306]
[112.15696716 -31.74375153]
[105.15055084 -45.04249954]
[100.31089783 -59.27360153]
[97.75718689 -74.08660126]
[97.55230713 -89.11672211]
[99.70129395 -103.99382782]
[104.15123749 -118.35156250]
[110.79254913 -131.83634949]
[119.46168518 -144.11611938]
[129.94515991 -154.88845825]
[141.98480225 -163.88809204]
[155.28411865 -170.89341736]
[169.51562500 -175.73188782]
[184.32884216 -178.28437805]
[199.35897827 -178.48802185]
[214.23590088 -176.33779907]
[228.59326172 -171.88667297]
[242.07749939 -165.24424744]
[254.35655212 -156.57411194]
[265.12802124 -146.08975220]
[274.12667847 -134.04936218]
[281.13088989 -120.74945831]
[285.96820068 -106.51756287]
[288.51947021 -91.70413971]
[288.72186279 -76.67398071]
[286.57043457 -61.79722977]
[282.11810303 -47.44023132]
[275.47457886 -33.95654297]
[266.80340576 -21.67820740]
[256.31817627 -10.90759659]
[244.27703857 -1.90994239]
[230.97656250 5.09317875]
[216.74426270 9.92930889]
[201.93063354 12.47935486]
[186.90045166 12.68051720]
[172.02388000 10.52784443]
[157.66725159 6.07434654]
[151.03875732 19.53031158]
[144.41024780 32.98627853]
[137.78175354 46.44224167]
[131.15325928 59.89820862]
[146.05541992 61.60868073]
[158.67396545 69.71868896]
[166.41963196 82.56410217]
[167.70304871 97.50909424]
[162.26086426 111.48703003]
[151.20977783 121.62969208]
[136.81744385 125.85585785]
[122.03707886 123.29834747]
[109.90092468 114.48120117]
[113.30390930 129.09008789]
[116.85866547 143.66279602]
[120.56482697 158.19773865]
[133.87234497 166.29388428]
[137.42387390 181.08717346]
[129.62341309 193.72396851]
[133.32957458 208.25889587]
[137.03573608 222.79383850]
[140.74189758 237.32878113]
[146.19569397 223.35537720]
[157.08988953 213.04437256]
[171.34191895 208.36682129]
[186.22740173 210.21690369]
[198.90080261 218.24092102]
[206.93948364 230.90502930]
[208.80676270 245.78834534]
[204.14572144 260.04577637]
[193.84733582 270.95190430]
[179.88024902 276.42187500]
[164.91441345 275.41006470]
[151.81069946 268.10989380]
[143.07456970 255.91821289]
[143.07456970 270.91821289]
[143.07456970 285.91821289]
[143.07456970 300.91821289]
[143.07456970 315.91821289]
[143.07456970 330.91821289]
[143.07456970 345.91821289]
[143.07456970 360.91821289]
[143.07456970 375.91821289]
[143.07456970 390.91821289]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[11 128]
[12 127]
[13 126]
[14 125]
[17 122]
[18 121]
[20 120]
[21 119]
[22 49]
[23 48]
[24 47]
[52 62]
[53 61]
[54 60]
[63 110]
[64 109]
[65 108]
[66 107]
[67 106]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
