%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:02 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGAUUAUUUUCCCCUCCCACUCCCAUACUACUAAUCUCAUCAAUACAACCCCCGCCCAUCCUxxxxxxxxxxCUUCCCCUAUCAUAGAAGAGCUUAUCACCUUUCAUGAUCACGCCCUCAUAAUCAUUUUCCCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[-23.66712761 292.68783569]
[-25.12623978 308.44161987]
[-38.71895981 314.53152466]
[-47.23004913 326.88311768]
[-55.74113846 339.23468018]
[-64.25222778 351.58624268]
[-72.76332092 363.93783569]
[-81.27440643 376.28939819]
[-89.78549957 388.64096069]
[-98.29659271 400.99255371]
[-106.80767822 413.34411621]
[-103.70030975 428.83990479]
[-112.52966309 441.94784546]
[-128.05744934 444.89123535]
[-141.07130432 435.92376709]
[-143.85034180 420.36572266]
[-134.74580383 407.44741821]
[-119.15925598 404.83303833]
[-110.64816284 392.48144531]
[-102.13706970 380.12988281]
[-93.62598419 367.77832031]
[-85.11489105 355.42672729]
[-76.60379791 343.07516479]
[-68.09271240 330.72360229]
[-59.58162308 318.37200928]
[-51.07052994 306.02044678]
[-50.22018814 291.15014648]
[-36.01869965 284.17672729]
[-46.75399017 275.74249268]
[-56.96751022 266.68341064]
[-66.62294006 257.03170776]
[-75.68595886 246.82167053]
[-84.12433624 236.08963013]
[-91.90808105 224.87373352]
[-99.00950623 213.21385193]
[-105.40336609 201.15144348]
[-111.06693268 188.72941589]
[-115.98006439 175.99191284]
[-120.12529755 162.98422241]
[-123.48789215 149.75259399]
[-126.05589294 136.34407043]
[-127.82016754 122.80633545]
[-128.77444458 109.18751526]
[-128.91532898 95.53602600]
[-128.24234009 81.90040588]
[-126.75783539 68.32914734]
[-124.46710968 54.87048340]
[-121.37831879 41.57227707]
[-117.50242615 28.48180389]
[-112.85322571 15.64560986]
[-107.44723511 3.10933161]
[-101.30368805 -9.08245945]
[-94.44441986 -20.88641739]
[-86.89382172 -32.26057053]
[-78.67873383 -43.16448212]
[-69.82836151 -53.55938339]
[-60.37418747 -63.40831757]
[-50.34981155 -72.67626190]
[-39.79087448 -81.33027649]
[-28.73492622 -89.33957672]
[-17.22126961 -96.67570496]
[-5.29084301 -103.31256104]
[7.01393843 -109.22655487]
[19.64932442 -114.39665985]
[32.57039261 -118.80448914]
[45.73119736 -122.43438721]
[59.08495331 -125.27342987]
[72.58418274 -127.31153107]
[86.18088531 -128.54144287]
[99.82671356 -128.95878601]
[113.47316742 -128.56210327]
[127.07171631 -127.35276794]
[140.57400513 -125.33509827]
[153.93205261 -122.51627350]
[167.09832764 -118.90631104]
[180.02606201 -114.51803589]
[192.66925049 -109.36706543]
[204.98297119 -103.47170258]
[216.92343140 -96.85291290]
[228.44818115 -89.53422546]
[239.51623535 -81.54166412]
[250.08825684 -72.90364838]
[260.12664795 -63.65088272]
[269.59573364 -53.81627274]
[278.46182251 -43.43478012]
[286.69342041 -32.54331589]
[294.26123047 -21.18060112]
[301.13833618 -9.38704109]
[307.30035400 2.79543686]
[321.08273315 -3.12452602]
[334.86511230 -9.04448891]
[348.64749146 -14.96445274]
[362.42987061 -20.88441467]
[369.13272095 -27.18707848]
[376.56109619 -26.78086281]
[390.46365356 -32.41281891]
[404.36621094 -38.04477692]
[404.84143066 -53.26627350]
[411.47256470 -66.97568512]
[423.11071777 -76.79777527]
[437.73950195 -81.03079987]
[452.82440186 -78.94136810]
[465.75186157 -70.89147949]
[474.28210449 -58.27583313]
[476.93725586 -43.28016281]
[473.25726318 -28.50256157]
[463.87973022 -16.50333595]
[450.42932129 -9.36142349]
[435.23645020 -8.31420517]
[420.93338013 -13.54311752]
[409.99816895 -24.14221954]
[396.09561157 -18.51026344]
[382.19305420 -12.87830639]
[368.34982300 -7.10203409]
[354.56744385 -1.18207097]
[340.78506470 4.73789215]
[327.00268555 10.65785503]
[313.22030640 16.57781792]
[318.80105591 32.55925369]
[323.18579102 48.90933228]
[326.35055542 65.53868866]
[328.27804565 82.35641479]
[328.95770264 99.27058411]
[328.38583374 116.18873596]
[326.56555176 133.01840210]
[323.50680542 149.66758728]
[319.22631836 166.04527283]
[313.74749756 182.06193542]
[307.10031128 197.63003540]
[299.32104492 212.66447449]
[290.45223999 227.08305359]
[280.54238892 240.80697632]
[269.64566040 253.76121521]
[257.82159424 265.87493896]
[245.13485718 277.08200073]
[231.65478516 287.32104492]
[217.45504761 296.53619385]
[202.61326599 304.67700195]
[187.21058655 311.69900513]
[171.33120728 317.56381226]
[155.06190491 322.23937988]
[138.49162292 325.70013428]
[121.71092987 327.92715454]
[104.81156921 328.90829468]
[87.88590240 328.63815308]
[71.02645874 327.11822510]
[54.32538986 324.35684204]
[37.87398911 320.36904907]
[21.76218033 315.17666626]
[6.07803726 308.80810547]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 28]
[3 26]
[4 25]
[5 24]
[6 23]
[7 22]
[8 21]
[9 20]
[10 19]
[11 18]
[89 118]
[90 117]
[91 116]
[92 115]
[93 114]
[95 113]
[96 112]
[97 111]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
