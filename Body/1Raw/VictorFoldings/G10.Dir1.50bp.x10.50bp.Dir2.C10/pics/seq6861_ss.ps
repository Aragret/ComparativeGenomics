%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:11 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGUUACUACUCCGGAAAAAAAGAACCAUUUGGAUACAUAGGUAUGGUCUGAGCUAUGAUAUCxxxxxxxxxxUCCCUCACCAUUGGCAGCCUAGCAUUAGCAGGAAUACCUUUCCUCACAGGUUUCUACUCCCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[112.75570679 478.43576050]
[112.75570679 463.43576050]
[112.75570679 448.43576050]
[112.75570679 433.43576050]
[112.75570679 418.43576050]
[112.75570679 403.43576050]
[112.75570679 388.43576050]
[112.75570679 373.43576050]
[112.75570679 358.43576050]
[112.75570679 343.43576050]
[97.21913910 338.68209839]
[83.88175964 329.37084961]
[74.04241943 316.39486694]
[68.66360474 301.00454712]
[68.27725220 284.68737793]
[72.93222046 269.02416992]
[82.18838501 255.53585815]
[95.15827942 245.53584290]
[110.59215546 240.00210571]
[109.96817780 225.01509094]
[108.56587219 210.08078003]
[106.38903809 195.23957825]
[104.21220398 180.39836121]
[102.03536224 165.55715942]
[99.85852814 150.71595764]
[84.32728577 148.23374939]
[70.30340576 141.11253357]
[59.13567352 130.03723145]
[51.89816666 116.07301331]
[49.28697205 100.56293488]
[51.55322647 84.99871826]
[58.47896957 70.87728882]
[69.39810181 59.55680466]
[62.21559525 46.38822174]
[55.03308487 33.21963882]
[42.86525345 28.81535721]
[37.16667175 17.64641953]
[40.52097702 5.98211575]
[33.61397552 -7.33303976]
[26.70697784 -20.64819527]
[17.44202995 -32.44483566]
[6.14302444 -42.31055832]
[-5.15598059 -52.17628098]
[-16.55700111 -61.92393494]
[-28.05880547 -71.55245972]
[-39.56060791 -81.18098450]
[-51.06241226 -90.80950928]
[-62.56421661 -100.43804169]
[-78.11259460 -103.36353302]
[-82.90511322 -117.46604919]
[-97.92361450 -113.56424713]
[-112.35492706 -119.26660156]
[-120.64991760 -132.38044739]
[-119.61898041 -147.86323547]
[-109.65854645 -159.76152039]
[-94.59859467 -163.50018311]
[-80.22998810 -157.64160156]
[-72.07775116 -144.43855286]
[-73.27658844 -128.96784973]
[-58.55089188 -126.73105621]
[-52.93568802 -111.93984222]
[-41.43388367 -102.31131744]
[-29.93208122 -92.68279266]
[-18.43027878 -83.05426025]
[-6.92847490 -73.42573547]
[0.26580581 -71.53153992]
[4.70974255 -63.47528458]
[16.00874710 -53.60956192]
[27.30775261 -43.74383926]
[22.88541031 -58.07711792]
[23.02151299 -73.07649994]
[27.70322227 -87.32717133]
[36.48893356 -99.48493958]
[48.54993820 -108.40301514]
[62.74858475 -113.24021912]
[77.74558258 -113.54026031]
[92.12634277 -109.27485657]
[104.53440857 -100.84633636]
[113.79937744 -89.04971313]
[119.04734039 -74.99770355]
[119.78328705 -60.01576996]
[115.93778992 -45.51707458]
[107.87358093 -32.86920929]
[96.35131836 -23.26517868]
[82.45783234 -17.61088371]
[67.50363159 -16.43966484]
[52.89925766 -19.86199951]
[40.02213287 -27.55519485]
[46.92913437 -14.24003792]
[53.83613205 -0.92488259]
[69.10186768 7.67495441]
[68.20166779 26.03713036]
[75.38417816 39.20571136]
[82.56668854 52.37429428]
[100.33452606 49.28495026]
[118.06006622 52.60841751]
[133.50195312 61.92444611]
[144.70758057 76.05505371]
[158.83238220 71.00629425]
[172.95718384 65.95754242]
[180.04011536 60.08524323]
[187.42868042 60.95401382]
[201.65545654 56.20019913]
[212.11581421 43.57034683]
[228.23628235 46.58073807]
[233.43351746 62.13454437]
[222.36105347 74.23133850]
[206.40928650 70.42697906]
[192.18249512 75.18079376]
[178.00593567 80.08234406]
[163.88113403 85.13109589]
[149.75633240 90.17985535]
[150.71015930 100.77934265]
[149.43106079 111.34450531]
[145.97535706 121.41014099]
[140.49522400 130.53302002]
[133.23194885 138.31143188]
[124.50536346 144.40287781]
[114.69972992 148.53912354]
[116.87657166 163.38032532]
[119.05340576 178.22152710]
[121.23023987 193.06272888]
[123.40708160 207.90394592]
[134.57203674 197.88676453]
[149.39881897 200.15974426]
[157.05026245 213.06150818]
[151.93376160 227.16191101]
[137.78907776 232.15470886]
[124.95519257 224.39111328]
[125.57917023 239.37812805]
[139.02430725 242.61598206]
[151.15220642 249.23532104]
[161.13018799 258.77407837]
[168.27514648 270.57000732]
[172.10035706 283.80670166]
[172.34857178 297.56994629]
[169.00935364 310.91110229]
[162.31930542 322.91229248]
[152.74533081 332.74957275]
[140.95205688 339.74966431]
[127.75570679 343.43576050]
[127.75570679 358.43576050]
[127.75570679 373.43576050]
[127.75570679 388.43576050]
[127.75570679 403.43576050]
[127.75570679 418.43576050]
[127.75570679 433.43576050]
[127.75570679 448.43576050]
[127.75570679 463.43576050]
[127.75570679 478.43576050]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[19 130]
[20 129]
[21 123]
[22 122]
[23 121]
[24 120]
[25 119]
[33 94]
[34 93]
[35 92]
[38 90]
[39 89]
[40 88]
[41 69]
[42 68]
[43 67]
[44 65]
[45 64]
[46 63]
[47 62]
[48 61]
[50 59]
[98 112]
[99 111]
[100 110]
[102 109]
[103 108]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
