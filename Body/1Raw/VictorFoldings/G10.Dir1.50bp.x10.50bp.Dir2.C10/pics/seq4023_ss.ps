%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:57 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGAACUAGUCUCAGGCUUCAACAUCGAAUACGCCGCAGGCCCCUUCGCCCUAUUCUUCAUAGxxxxxxxxxxAAAAAGUCUUUAACUCCACCAUUAGCACCCAAAGCUAAGAUUCUAAUUUAAACUAUUCUCCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[122.91116333 391.12893677]
[122.91116333 376.12893677]
[122.91116333 361.12893677]
[122.91116333 346.12893677]
[122.91116333 331.12893677]
[122.91116333 316.12893677]
[122.91116333 301.12893677]
[122.91116333 286.12893677]
[122.91116333 271.12893677]
[122.91116333 256.12893677]
[121.04355621 241.24565125]
[117.33739471 226.71072388]
[106.69535828 216.28976440]
[110.78305817 201.00573730]
[107.07689667 186.47080994]
[103.37073517 171.93586731]
[90.47174835 164.57707214]
[86.50611877 149.88938904]
[94.31214905 136.40963745]
[90.60599518 121.87469482]
[80.08274078 95.70367432]
[68.78372955 85.83795166]
[57.48472595 75.97222900]
[46.18572235 66.10650635]
[34.88671875 56.24078369]
[23.58771324 46.37506104]
[5.99439335 57.16905594]
[-14.19960022 61.32543182]
[-34.57943726 58.36337662]
[-52.71358490 48.65233994]
[-66.44389343 33.36604691]
[-74.14247894 14.34063721]
[-74.90465546 -6.14585781]
[-89.40025330 -10.00301743]
[-103.89584351 -13.86017704]
[-118.39144135 -17.71733665]
[-130.42881775 -8.10444736]
[-145.64064026 -7.43066692]
[-158.18399048 -15.74501038]
[-163.36430359 -29.68424797]
[-177.85990906 -33.54140854]
[-192.35549927 -37.39856720]
[-209.21679688 -35.62848282]
[-215.58537292 -51.34082031]
[-202.25007629 -61.81011963]
[-188.49833679 -51.89416122]
[-174.00274658 -48.03700256]
[-159.50715637 -44.17984390]
[-148.08419800 -53.70108795]
[-133.06747437 -54.68191910]
[-120.20222473 -46.53706360]
[-114.53428650 -32.21293259]
[-100.03868866 -28.35577393]
[-85.54309082 -24.49861336]
[-71.04749298 -20.64145470]
[-65.74217224 -30.74981308]
[-58.59790802 -39.65401840]
[-49.87956619 -47.02395248]
[-56.78656387 -60.33910751]
[-63.69356537 -73.65426636]
[-70.60056305 -86.96942139]
[-85.39820099 -93.16695404]
[-89.64016724 -108.63903046]
[-80.07238007 -121.51680756]
[-64.03443909 -121.92154694]
[-53.82926559 -109.54277039]
[-57.28540802 -93.87641907]
[-50.37841034 -80.56126404]
[-43.47140884 -67.24610901]
[-36.56441116 -53.93095016]
[-26.29851723 -56.71739960]
[-15.69395447 -57.62564468]
[-5.09169483 -56.62430954]
[5.16697168 -53.74346161]
[14.75142860 -49.07368851]
[23.35238838 -42.76328659]
[30.69186783 -35.01351929]
[36.53218079 -26.07221985]
[40.68362808 -16.22585297]
[43.01065826 -5.79034662]
[43.43629837 4.89904785]
[41.94469833 15.49852943]
[38.58169937 25.66679955]
[33.45343781 35.07605743]
[44.75244141 44.94178009]
[56.05144501 54.80750275]
[67.35044861 64.67322540]
[78.64945221 74.53894806]
[89.94846344 84.40467072]
[79.88838196 73.27835846]
[75.42344666 58.95829010]
[77.37730408 44.08608627]
[85.38952637 31.40522385]
[97.98210144 23.25493622]
[112.83206940 21.13871002]
[127.20006561 25.44692421]
[138.43562317 35.38484192]
[144.46612549 49.11921692]
[144.17912292 64.11647034]
[137.62754822 77.61006165]
[126.01998901 87.11082458]
[111.50074005 90.86605072]
[126.36378479 88.84371185]
[141.22683716 86.82138062]
[156.08987427 84.79904938]
[170.95292664 82.77671051]
[179.14418030 69.45614624]
[193.99757385 64.56631470]
[208.49980164 70.41603851]
[215.80335999 84.24326324]
[212.45971680 99.51919556]
[200.04763794 109.03100586]
[184.42774963 108.28750610]
[172.97526550 97.63975525]
[158.11221313 99.66209412]
[143.24916077 101.68442535]
[128.38612366 103.70676422]
[113.52307129 105.72909546]
[105.14093018 118.16853333]
[108.84709167 132.70347595]
[122.15460968 140.79962158]
[125.70612335 155.59291077]
[117.90567017 168.22970581]
[121.61183167 182.76464844]
[125.31799316 197.29957581]
[136.22511292 208.76017761]
[131.87232971 223.00456238]
[135.57849121 237.53948975]
[141.03228760 223.56608582]
[151.92648315 213.25509644]
[166.17851257 208.57754517]
[181.06399536 210.42761230]
[193.73739624 218.45164490]
[201.77607727 231.11575317]
[203.64335632 245.99906921]
[198.98231506 260.25650024]
[188.68392944 271.16262817]
[174.71684265 276.63259888]
[159.75100708 275.62078857]
[146.64729309 268.32061768]
[137.91116333 256.12893677]
[137.91116333 271.12893677]
[137.91116333 286.12893677]
[137.91116333 301.12893677]
[137.91116333 316.12893677]
[137.91116333 331.12893677]
[137.91116333 346.12893677]
[137.91116333 361.12893677]
[137.91116333 376.12893677]
[137.91116333 391.12893677]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[11 128]
[12 127]
[14 125]
[15 124]
[16 123]
[19 120]
[20 119]
[21 89]
[22 88]
[23 87]
[24 86]
[25 85]
[26 84]
[33 55]
[34 54]
[35 53]
[36 52]
[40 48]
[41 47]
[42 46]
[58 70]
[59 69]
[60 68]
[61 67]
[102 118]
[103 117]
[104 116]
[105 115]
[106 114]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
