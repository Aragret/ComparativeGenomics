%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:10 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCUUCACCAAAGAGCCCCUAAAACCCGCCACAUCUACCAUCACCCUCUACAUCACCGCCCCGxxxxxxxxxxAUUCCUCAUCACCCAACUAAAAAUAUUAAACACAAACUACCACCUACCUCCCUCACCAAAGCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[124.75072479 86.44705963]
[113.98204041 96.88906860]
[109.97138214 110.28333282]
[96.45996857 113.87960815]
[85.69129181 124.32161713]
[74.92260742 134.76362610]
[64.70390320 145.74443054]
[55.06208801 157.23509216]
[45.42027283 168.72576904]
[35.77846146 180.21643066]
[26.13664627 191.70709229]
[16.49483109 203.19776917]
[21.17361832 217.89852905]
[17.13977242 232.78918457]
[5.68047523 243.11817932]
[-9.54765034 245.58955383]
[-23.68536568 239.41473389]
[-32.22137833 226.56404114]
[-32.43187332 211.13812256]
[-24.24968910 198.05931091]
[-10.28572559 191.50100708]
[5.00416470 193.55595398]
[14.64597893 182.06527710]
[24.28779221 170.57461548]
[33.92960739 159.08395386]
[43.57142258 147.59327698]
[53.21323395 136.10261536]
[38.30614853 134.43563843]
[30.13770866 121.85483551]
[34.68070984 107.55934906]
[48.61328888 102.00208282]
[61.74789429 109.24654388]
[64.48059845 123.99494934]
[75.24927521 113.55294037]
[86.01795959 103.11093140]
[90.02861786 89.71666718]
[103.54003143 86.12039185]
[114.30870819 75.67838287]
[104.45732117 64.36205292]
[95.22756195 52.53325653]
[86.64603424 40.22608566]
[78.73749542 27.47602654]
[71.52472687 14.31984520]
[65.02854919 0.79547256]
[59.26767349 -13.05809689]
[54.25872040 -27.20092010]
[50.01612854 -41.59221649]
[46.55212784 -56.19049835]
[43.87671280 -70.95366669]
[41.99759293 -85.83916473]
[40.92018509 -100.80406189]
[40.64759827 -115.80522156]
[41.18061829 -130.79937744]
[42.51770782 -145.74331665]
[44.65501404 -160.59394836]
[47.58636856 -175.30842590]
[51.30332565 -189.84436035]
[55.79516220 -204.15982056]
[61.04893112 -218.21354675]
[67.04948425 -231.96499634]
[73.77951813 -245.37452698]
[81.21963501 -258.40347290]
[89.34837341 -271.01431274]
[98.14230347 -283.17062378]
[107.57606506 -294.83737183]
[117.62245941 -305.98092651]
[128.25251770 -316.56915283]
[139.43560791 -326.57156372]
[151.13946533 -335.95925903]
[163.33033752 -344.70520020]
[175.97309875 -352.78414917]
[189.03129578 -360.17285156]
[202.46725464 -366.84997559]
[216.24224854 -372.79626465]
[230.31657410 -377.99459839]
[244.64962769 -382.42996216]
[259.20010376 -386.08959961]
[273.92602539 -388.96292114]
[288.78497314 -391.04165649]
[303.73403931 -392.31982422]
[318.73019409 -392.79373169]
[333.73016357 -392.46200562]
[348.69070435 -391.32562256]
[363.56866455 -389.38784790]
[378.32119751 -386.65423584]
[392.90570068 -383.13272095]
[407.28015137 -378.83343506]
[421.40310669 -373.76876831]
[435.23388672 -367.95330811]
[448.73254395 -361.40386963]
[461.86016846 -354.13931274]
[474.57894897 -346.18054199]
[486.85220337 -337.55056763]
[498.64453125 -328.27426147]
[509.92193604 -318.37832642]
[520.65191650 -307.89135742]
[530.80346680 -296.84353638]
[540.34741211 -285.26672363]
[549.25622559 -273.19433594]
[557.50415039 -260.66113281]
[565.06744385 -247.70330811]
[571.92425537 -234.35816956]
[578.05493164 -220.66423035]
[583.44171143 -206.66094971]
[588.06903076 -192.38871765]
[591.92364502 -177.88867188]
[594.99432373 -163.20263672]
[597.27233887 -148.37294006]
[598.75103760 -133.44235229]
[599.42620850 -118.45391846]
[599.29583740 -103.45085144]
[598.36035156 -88.47640991]
[596.62243652 -73.57376862]
[594.08709717 -58.78589630]
[590.76159668 -44.15543365]
[586.65563965 -29.72456360]
[581.78100586 -15.53489017]
[576.15173340 -1.62733006]
[569.78405762 11.95801926]
[562.69635010 25.18198776]
[554.90899658 38.00644684]
[546.44451904 50.39441681]
[537.32733154 62.31018448]
[527.58367920 73.71939087]
[517.24163818 84.58914948]
[506.33105469 94.88809967]
[494.88339233 104.58656311]
[482.93167114 113.65657806]
[470.51031494 122.07197571]
[457.65515137 129.80851746]
[444.40325928 136.84387207]
[430.79284668 143.15776062]
[416.86312866 148.73199463]
[402.65426636 153.55049133]
[388.20727539 157.59934998]
[373.56378174 160.86691284]
[358.76599121 163.34375000]
[343.85659790 165.02270508]
[328.87857056 165.89895630]
[313.87512207 165.96998596]
[298.88946533 165.23556519]
[283.96484375 163.69783020]
[269.14425659 161.36119080]
[254.47048950 158.23242188]
[239.98580933 154.32051086]
[225.73197937 149.63674927]
[211.75012207 144.19464111]
[198.08053589 138.00987244]
[184.76261902 131.10029602]
[171.83479309 123.48580170]
[159.33433533 115.18836975]
[147.29727173 106.23191833]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 38]
[2 37]
[4 35]
[5 34]
[6 33]
[7 27]
[8 26]
[9 25]
[10 24]
[11 23]
[12 22]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
