%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:08 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGUAACAACAUAAAACCCUCAUUCACACGAGAAAACACCCUCAUGUUCAUACACCUAUCCCCxxxxxxxxxxUUCAAAUAUCUACUCAUCUUCCUAAUUACCAUACUAAUCUUAGUUACCGCUAACAACCUACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[97.19184875 212.84729004]
[96.56787109 197.86027527]
[95.94389343 182.87326050]
[95.31991577 167.88624573]
[94.69593811 152.89923096]
[94.07196045 137.91221619]
[93.44798279 122.92520142]
[92.82400513 107.93817902]
[90.33889008 93.14547729]
[86.03130341 78.77729034]
[81.72371674 64.40910339]
[77.41613007 50.04092407]
[73.10855103 35.67273712]
[68.80096436 21.30455399]
[54.20632172 24.78591728]
[39.43673706 27.42841148]
[24.54038239 29.22341347]
[9.56584644 30.16507149]
[-5.43802500 30.25031471]
[-20.42229271 29.47886276]
[-35.33808136 27.85323143]
[-50.13673782 25.37872696]
[-64.76999664 22.06341553]
[-79.19011688 17.91811562]
[-93.35006714 12.95634651]
[-107.20366669 7.19429302]
[-120.70571899 0.65074885]
[-133.81219482 -6.65294123]
[-146.48031616 -14.69295502]
[-158.66880798 -23.44306564]
[-170.33786011 -32.87473297]
[-181.44944763 -42.95719528]
[-191.96733093 -53.65756226]
[-201.85716248 -64.94093323]
[-211.08673096 -76.77050018]
[-219.62590027 -89.10768127]
[-227.44682312 -101.91223145]
[-234.52398682 -115.14238739]
[-240.83432007 -128.75498962]
[-246.35723877 -142.70565796]
[-251.07472229 -156.94885254]
[-254.97137451 -171.43814087]
[-258.03448486 -186.12626648]
[-260.25408936 -200.96528625]
[-261.62292480 -215.90684509]
[-262.13650513 -230.90216064]
[-261.79321289 -245.90234375]
[-260.59411621 -260.85845947]
[-258.54315186 -275.72174072]
[-255.64701843 -290.44369507]
[-251.91513062 -304.97628784]
[-247.35968018 -319.27215576]
[-241.99552917 -333.28460693]
[-235.84016418 -346.96798706]
[-228.91366577 -360.27764893]
[-221.23864746 -373.17019653]
[-212.84010315 -385.60351562]
[-203.74545288 -397.53713989]
[-193.98437500 -408.93206787]
[-183.58866882 -419.75115967]
[-172.59228516 -429.95913696]
[-161.03106689 -439.52270508]
[-148.94271851 -448.41064453]
[-136.36669922 -456.59396362]
[-123.34400177 -464.04602051]
[-109.91711426 -470.74243164]
[-96.12983704 -476.66143799]
[-82.02713776 -481.78366089]
[-67.65500641 -486.09240723]
[-53.06034088 -489.57366943]
[-38.29073715 -492.21603394]
[-23.39436722 -494.01092529]
[-8.41982365 -494.95248413]
[6.58404827 -495.03759766]
[21.56830978 -494.26602173]
[36.48408508 -492.64028931]
[51.28272247 -490.16564941]
[65.91595459 -486.85025024]
[80.33604431 -482.70483398]
[94.49595642 -477.74295044]
[108.34951019 -471.98077393]
[121.85150909 -465.43713379]
[134.95793152 -458.13333130]
[147.62599182 -450.09323120]
[159.81440735 -441.34301758]
[171.48339844 -431.91125488]
[182.59490967 -421.82870483]
[193.11268616 -411.12826538]
[203.00244141 -399.84481812]
[212.23191833 -388.01516724]
[220.77098083 -375.67791748]
[228.59181213 -362.87332153]
[235.66888428 -349.64309692]
[241.97911072 -336.03045654]
[247.50190735 -322.07974243]
[252.21926880 -307.83651733]
[256.11581421 -293.34716797]
[259.17883301 -278.65905762]
[261.39828491 -263.82000732]
[262.76699829 -248.87843323]
[263.28048706 -233.88311768]
[262.93707275 -218.88293457]
[261.73785400 -203.92681885]
[259.68679810 -189.06355286]
[256.79052734 -174.34162903]
[253.05853271 -159.80906677]
[248.50297546 -145.51324463]
[243.13870239 -131.50082397]
[236.98323059 -117.81748962]
[230.05664062 -104.50788116]
[222.38150024 -91.61540985]
[213.98286438 -79.18213654]
[204.88813782 -67.24860382]
[195.12695312 -55.85374451]
[184.73117065 -45.03472137]
[173.73469543 -34.82683182]
[162.17340088 -25.26336670]
[150.08499146 -16.37552071]
[137.50891113 -8.19228363]
[124.48615265 -0.74034911]
[111.05921173 5.95597696]
[97.27188873 11.87485218]
[83.16914368 16.99696922]
[87.47673035 31.36515427]
[91.78431702 45.73333740]
[96.09190369 60.10152054]
[100.39948273 74.46970367]
[104.70706940 88.83789062]
[109.57488251 74.64971161]
[120.03071594 63.89445496]
[134.07583618 58.62809753]
[149.02539062 59.85735321]
[162.02160645 67.34723663]
[170.58013916 79.66598511]
[173.06492615 94.45874786]
[169.00100708 108.89773560]
[159.16520691 120.22280121]
[145.43775940 126.26905060]
[130.44279480 125.88066864]
[117.04673004 119.13191223]
[107.81101990 107.31420135]
[108.43499756 122.30122375]
[109.05897522 137.28823853]
[109.68295288 152.27525330]
[110.30693054 167.26226807]
[110.93090820 182.24928284]
[111.55488586 197.23629761]
[112.17886353 212.22331238]
[118.87885284 227.79722595]
[105.76832581 238.54666138]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 148]
[2 147]
[3 146]
[4 145]
[5 144]
[6 143]
[7 142]
[8 141]
[9 128]
[10 127]
[11 126]
[12 125]
[13 124]
[14 123]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
