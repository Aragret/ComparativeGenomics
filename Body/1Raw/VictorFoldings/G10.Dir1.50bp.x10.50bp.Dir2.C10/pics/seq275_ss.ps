%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:14 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGAUUUCCACCAAACCCCCCCUCCCCCGCUUCUGGCCACAGCACUUAAACACAUCUCUGCCAAxxxxxxxxxxUUAAUCAUUUUUAUUGCCACAACUAACCUCCUCGGACUCCUGCCUCACUCAUUUACACCAACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[151.54878235 54.58630371]
[141.44334412 65.67144012]
[131.33790588 76.75656891]
[121.23247528 87.84170532]
[111.12704468 98.92684174]
[101.13594818 110.11513519]
[91.26023865 121.40541840]
[81.38453674 132.69569397]
[71.50882721 143.98597717]
[61.63312149 155.27626038]
[58.51494598 173.39552307]
[41.74156952 178.46487427]
[32.09975433 189.95553589]
[22.45793915 201.44619751]
[22.41815758 217.48921204]
[9.76137733 227.34747314]
[-5.80320168 223.45858765]
[-12.33576679 208.80577087]
[-4.82509375 194.62940979]
[10.96727276 191.80439758]
[20.60908699 180.31372070]
[30.25090027 168.82305908]
[29.51781845 156.71005249]
[37.51010132 147.05113220]
[50.34284210 145.40054321]
[60.21854782 134.11027527]
[70.09425354 122.81999207]
[79.96996307 111.52970886]
[89.84566498 100.23942566]
[92.38224030 92.53179169]
[100.04190826 88.82140350]
[110.14734650 77.73626709]
[120.25277710 66.65113831]
[130.35821533 55.56600189]
[140.46365356 44.48086929]
[114.77827454 13.48186779]
[95.85757446 -22.04591179]
[84.47330475 -60.64842987]
[81.08882904 -100.74632263]
[85.84027100 -140.69953918]
[71.33164215 -144.50740051]
[56.82302094 -148.31526184]
[41.15599442 -143.47003174]
[29.31191444 -154.81242371]
[33.47495651 -170.67436218]
[49.36254120 -174.73843384]
[60.63087845 -162.82388306]
[75.13950348 -159.01602173]
[89.64813232 -155.20817566]
[92.68634796 -164.41902161]
[96.16990662 -173.47091675]
[100.09052277 -182.34233093]
[104.43888092 -191.01217651]
[109.20465851 -199.45985413]
[114.37652588 -207.66525269]
[119.94220734 -215.60890198]
[125.88846588 -223.27189636]
[132.20118713 -230.63603210]
[138.86537170 -237.68379211]
[145.86515808 -244.39842224]
[153.18394470 -250.76394653]
[160.80433655 -256.76525879]
[168.70820618 -262.38806152]
[176.87680054 -267.61898804]
[185.29066467 -272.44564819]
[193.92985535 -276.85647583]
[202.77380371 -280.84106445]
[211.80149841 -284.38989258]
[220.99150085 -287.49453735]
[230.32194519 -290.14761353]
[239.77067566 -292.34277344]
[249.31524658 -294.07485962]
[258.93295288 -295.33969116]
[268.60092163 -296.13427734]
[278.29620361 -296.45672607]
[287.99575806 -296.30624390]
[297.67648315 -295.68322754]
[307.31542969 -294.58911133]
[316.88964844 -293.02648926]
[326.37640381 -290.99908447]
[335.75314331 -288.51171875]
[344.99755859 -285.57028198]
[354.08770752 -282.18176270]
[363.00195312 -278.35418701]
[371.71911621 -274.09671021]
[380.21844482 -269.41937256]
[388.47979736 -264.33331299]
[396.48348999 -258.85061646]
[404.21051025 -252.98432922]
[411.64251709 -246.74836731]
[418.76177979 -240.15754700]
[425.55139160 -233.22752380]
[431.99523926 -225.97479248]
[438.07797241 -218.41654968]
[443.78515625 -210.57078552]
[449.10321045 -202.45613098]
[454.01947021 -194.09187317]
[458.52224731 -185.49787903]
[462.60086060 -176.69459534]
[466.24560547 -167.70291138]
[469.44778442 -158.54421997]
[472.19982910 -149.24029541]
[474.49511719 -139.81321716]
[476.32827759 -130.28541565]
[477.69488525 -120.67952728]
[478.59167480 -111.01838684]
[479.01657104 -101.32495117]
[478.96850586 -91.62226105]
[478.44760132 -81.93338013]
[477.45510864 -72.28133392]
[475.99334717 -62.68906784]
[474.06579590 -53.17937851]
[471.67706299 -43.77487564]
[468.83276367 -34.49790573]
[465.53970337 -25.37052536]
[461.80566406 -16.41443062]
[457.63952637 -7.65090990]
[453.05117798 0.89920497]
[448.05157471 9.21558857]
[442.65252686 17.27847099]
[436.86688232 25.06868362]
[430.70840454 32.56770706]
[424.19168091 39.75771713]
[417.33227539 46.62161636]
[410.14639282 53.14308548]
[402.65118408 59.30662155]
[394.86444092 65.09757233]
[386.80462646 70.50215912]
[378.49093628 75.50753784]
[369.94311523 80.10181427]
[361.18148804 84.27404785]
[352.22686768 88.01432037]
[343.10052490 91.31374359]
[333.82415771 94.16445923]
[324.41979980 96.55969238]
[314.90982056 98.49374390]
[305.31683350 99.96201324]
[295.66360474 100.96099091]
[285.97308350 101.48830414]
[276.26834106 101.54270172]
[266.57238770 101.12403107]
[256.90832520 100.23329926]
[247.29908752 98.87260437]
[237.76751709 97.04517365]
[228.33627319 94.75535583]
[219.02777100 92.00857544]
[209.86415100 88.81135559]
[200.86718750 85.17129517]
[192.05825806 81.09703827]
[183.45831299 76.59826660]
[175.08779907 71.68566132]
[166.96661377 66.37088776]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 35]
[2 34]
[3 33]
[4 32]
[5 31]
[6 29]
[7 28]
[8 27]
[9 26]
[10 25]
[12 22]
[13 21]
[14 20]
[40 49]
[41 48]
[42 47]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
