%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:27 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGUUCUUCCCACAACACUUUCUCGGCCUAUCCGGAAUGCCCCGACGUUACUCGGACUACCCCxxxxxxxxxxUCAUCACCUCAACCCAAAAAGGCAUAAUUAAACUUUACUUCCUCUCUUUCUUCUUCCCACCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[143.85595703 93.14795685]
[152.09980774 80.61643219]
[138.85722351 87.66156769]
[125.61463165 94.70670319]
[112.37204742 101.75183868]
[101.49321747 112.07904053]
[101.01959229 127.89315796]
[87.83320618 134.81907654]
[80.10912323 147.67749023]
[72.38503265 160.53588867]
[74.85725403 176.38731384]
[63.89982605 188.10543823]
[47.91835785 186.70111084]
[39.17245865 173.25161743]
[44.37123489 158.07426453]
[59.52663422 152.81179810]
[67.25071716 139.95339966]
[74.97480011 127.09499359]
[74.89595032 112.20059967]
[88.63481903 104.35495758]
[84.50867462 98.09197998]
[76.25638580 85.56601715]
[72.13024139 79.30303192]
[57.26719284 81.32537079]
[51.72824860 85.12374115]
[45.97309875 85.45471954]
[41.74525833 83.10932159]
[26.81095314 84.51162720]
[11.87664509 85.91392517]
[3.56239867 89.85412598]
[-3.38243532 87.18674469]
[-18.34268379 88.27805328]
[-33.30293274 89.36936188]
[-44.83748245 100.51986694]
[-60.72777557 98.31121826]
[-68.78414154 84.43769836]
[-62.82641983 69.54188538]
[-47.42487335 65.05057526]
[-34.39424133 74.40911865]
[-19.43399429 73.31780243]
[-4.47374582 72.22649384]
[10.47434139 70.97962189]
[25.40864944 69.57731628]
[40.34295654 68.17501068]
[55.24485779 66.46232605]
[70.10790253 64.43998718]
[105.32691193 88.50925446]
[118.56949615 81.46411896]
[131.81208801 74.41898346]
[145.05467224 67.37384796]
[146.22021484 59.96496964]
[148.55133057 45.14721298]
[149.71687317 37.73833466]
[139.27706909 26.96752357]
[123.32295990 25.28051186]
[114.81651306 11.67830467]
[120.28315735 -3.40464592]
[135.52934265 -8.39799213]
[148.85949707 0.52873343]
[150.04786682 16.52771187]
[160.48768616 27.29852104]
[156.48968506 12.84113407]
[152.49168396 -1.61625254]
[148.49369812 -16.07363892]
[144.49569702 -30.53102493]
[135.05455017 -42.18712997]
[127.85466003 -55.34621811]
[123.12905121 -69.58238983]
[121.03066254 -84.43489075]
[121.62741089 -99.42301178]
[124.89998627 -114.06166840]
[130.74247742 -127.87707520]
[138.96577454 -140.42208862]
[149.30374146 -151.29067993]
[161.42178345 -160.13110352]
[174.92768860 -166.65724182]
[189.38435364 -170.65783691]
[204.32388306 -172.00344849]
[219.26274109 -170.65051270]
[233.71743774 -166.64280701]
[247.22013855 -160.11004639]
[259.33383179 -151.26368713]
[269.66647339 -140.38999939]
[277.88360596 -127.84095764]
[283.71929932 -114.02268982]
[286.98471069 -99.38243103]
[287.57409668 -84.39401245]
[285.46841431 -69.54254150]
[280.73580933 -55.30869293]
[273.52947998 -42.15314102]
[264.08261108 -30.50167465]
[252.70097351 -20.73138809]
[239.75294495 -13.15850544]
[225.65716553 -8.02800941]
[214.78530884 2.30652547]
[203.91343689 12.64106083]
[193.04158020 22.97559547]
[182.16972351 33.31013107]
[196.66531372 29.45297050]
[211.16090393 25.59581184]
[225.65650940 21.73865318]
[228.98301697 6.79900980]
[238.88014221 -4.87598610]
[253.07359314 -10.60350704]
[268.30181885 -9.06740952]
[281.06549072 -0.62067795]
[288.43161011 12.79569054]
[288.70748901 28.09871101]
[281.82974243 41.77186584]
[269.37881470 50.67316055]
[254.21583557 52.75714111]
[239.82516479 47.54492950]
[229.51367188 36.23424911]
[215.01806641 40.09140778]
[200.52247620 43.94856644]
[186.02687073 47.80572891]
[200.59718323 51.37031174]
[215.36448669 48.73849106]
[230.36192322 48.46060181]
[245.21659851 50.54354858]
[259.55920410 54.93554688]
[273.03314209 61.52740479]
[285.30346680 70.15523529]
[296.06506348 80.60453033]
[305.05041504 92.61550140]
[312.03613281 105.88953400]
[316.84848022 120.09661102]
[319.36788940 134.88352966]
[319.53167725 149.88262939]
[317.33578491 164.72102356]
[312.83480835 179.02980042]
[306.14062500 192.45321655]
[297.41970825 204.65753174]
[286.88882446 215.33934021]
[274.80984497 224.23304749]
[261.48306274 231.11756897]
[247.23977661 235.82171631]
[232.43412781 238.22854614]
[217.43420410 238.27821350]
[202.61294556 235.96949768]
[188.33882141 231.35978699]
[174.96672058 224.56367493]
[162.82910156 215.75015259]
[152.22772217 205.13833618]
[143.42616272 192.99203491]
[136.64323425 179.61325073]
[132.04759216 165.33459473]
[129.75346375 150.51107788]
[129.81790161 135.51121521]
[132.23931885 120.70793915]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 50]
[3 49]
[4 48]
[5 47]
[6 20]
[8 18]
[9 17]
[10 16]
[23 46]
[24 45]
[27 44]
[28 43]
[29 42]
[31 41]
[32 40]
[33 39]
[53 61]
[54 60]
[98 116]
[99 115]
[100 114]
[101 113]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
