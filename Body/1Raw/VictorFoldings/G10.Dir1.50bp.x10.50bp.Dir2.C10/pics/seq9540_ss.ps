%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:51 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGAAUCAUAUUUACCAAAUGCCCCUCAUUUACAUAAAUAUUAUACUAGCAUUUACCAUCUCAxxxxxxxxxxCAAUUAUACCCUAGCCAACCCCUUAAACACCCCUCCCCACAUCAAGCCCGAAUGAUAUUUCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[92.50000000 279.27664185]
[92.50000000 264.27664185]
[92.50000000 249.27665710]
[92.50000000 234.27665710]
[92.50000000 219.27665710]
[92.50000000 204.27665710]
[92.50000000 189.27665710]
[92.50000000 174.27665710]
[92.50000000 159.27665710]
[92.50000000 144.27665710]
[72.63124847 135.60369873]
[59.14081192 118.63327026]
[44.64521790 122.49043274]
[33.29870224 133.51617432]
[19.00980759 129.31179810]
[4.51421118 133.16896057]
[-9.98138523 137.02612305]
[-24.47698212 140.88328552]
[-38.97257996 144.74044800]
[-53.46817398 148.59759521]
[-67.96376801 152.45475769]
[-76.42723846 167.72915649]
[-92.98505402 172.10214233]
[-107.31165314 163.34962463]
[-121.72386932 167.50752258]
[-136.13609314 171.66540527]
[-150.54830933 175.82328796]
[-164.96052551 179.98118591]
[-173.94313049 193.27374268]
[-189.94696045 194.39492798]
[-200.69523621 182.48468018]
[-197.94279480 166.67950439]
[-183.80108643 159.10377502]
[-169.11840820 165.56896973]
[-154.70619202 161.41107178]
[-140.29397583 157.25318909]
[-125.88175964 153.09530640]
[-111.46954346 148.93740845]
[-106.85865021 136.86528015]
[-95.96280670 129.56083679]
[-82.65419769 129.89083862]
[-71.82093048 137.95916748]
[-57.32533646 134.10200500]
[-42.82973862 130.24484253]
[-28.33414078 126.38768768]
[-13.83854485 122.53052521]
[0.65705186 118.67337036]
[15.15264893 114.81620789]
[25.46234131 104.06634521]
[40.78805542 107.99483490]
[55.28365326 104.13767242]
[57.66244507 85.02658081]
[67.82767487 68.66928864]
[83.90981293 58.07413864]
[102.95115662 55.18970490]
[121.44974518 60.54647827]
[130.71469116 48.74983597]
[119.78831482 38.45806885]
[109.82847595 27.22829247]
[100.91537476 15.15092278]
[93.12077332 2.32320118]
[86.50743103 -11.15158749]
[81.12859344 -25.16495132]
[77.02757263 -39.60406113]
[74.23738098 -54.35265732]
[72.78049469 -69.29199219]
[72.66863251 -84.30178070]
[73.90270996 -99.26116943]
[76.47277069 -114.04971313]
[80.35813904 -128.54833984]
[85.52752686 -142.64030457]
[91.93930817 -156.21217346]
[99.54185486 -169.15463257]
[108.27396393 -181.36351013]
[118.06533051 -192.74047852]
[128.83711243 -203.19393921]
[140.50257874 -212.63973999]
[152.96780396 -221.00183105]
[166.13241577 -228.21286011]
[179.89044189 -234.21478271]
[194.13108826 -238.95927429]
[208.73970032 -242.40812683]
[223.59866333 -244.53358459]
[238.58833313 -245.31851196]
[253.58801270 -244.75662231]
[268.47692871 -242.85240173]
[283.13525391 -239.62121582]
[297.44488525 -235.08905029]
[311.29064941 -229.29241943]
[324.56106567 -222.27798462]
[337.14929199 -214.10223389]
[348.95394897 -204.83097839]
[359.88000488 -194.53887939]
[369.83950806 -183.30879211]
[378.75222778 -171.23115540]
[386.54644775 -158.40319824]
[393.15939331 -144.92820740]
[398.53778076 -130.91467285]
[402.63836670 -116.47544861]
[405.42810059 -101.72676086]
[406.88455200 -86.78738403]
[406.99594116 -71.77759552]
[405.76141357 -56.81824112]
[403.19088745 -42.02977753]
[399.30508423 -27.53126907]
[394.13528442 -13.43945503]
[387.72308350 0.13220684]
[380.12014771 13.07444191]
[371.38763428 25.28304482]
[361.59594727 36.65971756]
[350.82385254 47.11285782]
[339.15808105 56.55830383]
[326.69259644 64.92000580]
[313.52777100 72.13063812]
[299.76956177 78.13214111]
[285.52877808 82.87619019]
[270.92004395 86.32460022]
[256.06103516 88.44960022]
[241.07133484 89.23407745]
[226.07167053 88.67172241]
[211.18280029 86.76705170]
[196.52459717 83.53540802]
[182.21510315 79.00281525]
[168.36950684 73.20576477]
[155.09930420 66.19092560]
[142.51133728 58.01478577]
[133.24638367 69.81142426]
[137.45573425 75.22621918]
[140.79142761 81.21886444]
[143.17567444 87.64956665]
[144.55285645 94.36834717]
[144.89083862 101.21849060]
[144.18174744 108.04020691]
[142.44212341 114.67438507]
[139.71255493 120.96628571]
[136.05668640 126.76914978]
[131.55979919 131.94763184]
[126.32678223 136.38093567]
[120.47969818 139.96565247]
[114.15493011 142.61819458]
[107.50000000 144.27665710]
[107.50000000 159.27665710]
[107.50000000 174.27665710]
[107.50000000 189.27665710]
[107.50000000 204.27665710]
[107.50000000 219.27665710]
[107.50000000 234.27665710]
[107.50000000 249.27665710]
[107.50000000 264.27664185]
[107.50000000 279.27664185]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[12 51]
[13 50]
[15 48]
[16 47]
[17 46]
[18 45]
[19 44]
[20 43]
[21 42]
[24 38]
[25 37]
[26 36]
[27 35]
[28 34]
[56 127]
[57 126]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
