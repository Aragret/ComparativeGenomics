%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:19 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGAAGACGAGAAGACCCUAUGGAGCUUUAAUUUAUUAAUGCAAACAGUACCUAACAAACCCAxxxxxxxxxxCUAGGCCUACUAACCAACACACUAACCAUAUACCAAUGAUGGCGCGAUGUAACACGAGAACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[114.17195892 258.60485840]
[114.17195892 243.60485840]
[114.17195892 228.60485840]
[114.17195892 213.60485840]
[114.17195892 198.60485840]
[114.17195892 183.60485840]
[114.17195892 168.60485840]
[114.17195892 153.60485840]
[114.17195892 138.60485840]
[114.17195892 123.60485840]
[101.51845551 123.91141510]
[91.80144501 118.66557312]
[81.13981628 129.21685791]
[85.67813873 143.83404541]
[82.89227295 158.88388062]
[73.42239380 170.90802002]
[59.44460678 177.14340210]
[44.17090607 176.15719604]
[31.11107445 168.17599487]
[23.26616859 155.03385925]
[22.43889046 139.75071716]
[28.81933975 125.83855438]
[40.94133759 116.49426270]
[56.01934052 113.86510468]
[70.58853149 118.55523682]
[81.25015259 108.00394440]
[90.14892578 78.15926361]
[124.86315918 88.17389679]
[116.87324524 75.47896576]
[108.88333130 62.78403854]
[85.64208221 63.50954437]
[67.76660919 42.17147064]
[52.86470795 40.45878220]
[38.27134705 46.56978607]
[26.51074791 37.42989731]
[11.60884666 35.71720505]
[-3.29305577 34.00451660]
[-18.19495773 32.29182816]
[-33.01691818 39.30905914]
[-46.34926224 29.76020622]
[-44.47681808 13.46830654]
[-29.32579613 7.19307137]
[-16.48226929 17.38992500]
[-1.58036613 19.10261536]
[13.32153606 20.81530380]
[28.22343826 22.52799416]
[41.75091553 16.29448509]
[54.57739639 25.55687904]
[69.47930145 27.26956940]
[74.75494385 21.93875694]
[64.09348297 11.38730145]
[74.64510345 0.72600096]
[85.30623627 11.27713013]
[90.58187866 5.94631672]
[88.71426392 -8.93696308]
[86.84665680 -23.82024384]
[84.97904205 -38.70352173]
[82.80220032 -53.54472733]
[80.31708527 -68.33743286]
[77.83197021 -83.13014221]
[75.34684753 -97.92285156]
[60.34680557 -99.70482635]
[46.45695496 -105.64189148]
[34.80328369 -115.25275421]
[26.33050156 -127.75829315]
[21.72546005 -142.14476013]
[21.36146736 -157.24589539]
[25.26803398 -171.83750916]
[33.12846756 -184.73674011]
[44.30556107 -194.89790344]
[57.89323807 -201.49728394]
[72.79000854 -203.99987793]
[87.78824615 -202.20283508]
[101.67212677 -196.25181580]
[113.31613922 -186.62925720]
[121.77635193 -174.11520386]
[126.36694336 -159.72412109]
[126.71576691 -144.62263489]
[122.79454041 -130.03494263]
[114.92115021 -117.14361572]
[103.73385620 -106.99369049]
[90.13955688 -100.40796661]
[92.62467194 -85.61526489]
[95.10979462 -70.82255554]
[97.59490967 -56.02984619]
[100.94860077 -52.54728317]
[102.10865784 -46.90055084]
[99.86231995 -40.57113647]
[101.72993469 -25.68785667]
[103.59754944 -10.80457592]
[105.46515656 4.07870340]
[125.69705963 17.33129692]
[130.86335754 38.26940536]
[121.57825470 54.79412079]
[129.56817627 67.48905182]
[137.55809021 80.18398285]
[150.65124512 87.50308228]
[165.65043640 87.65911865]
[180.64962769 87.81516266]
[186.44415283 74.88710785]
[196.70570374 65.18228149]
[209.85549927 60.14817810]
[223.88769531 60.51719284]
[236.67541504 66.20022583]
[246.29302979 76.30523682]
[251.30618286 89.27709961]
[266.29888916 89.74514008]
[281.29156494 90.21318054]
[296.28427124 90.68122864]
[304.94091797 77.91149139]
[319.13613892 71.87005615]
[334.34033203 74.48472595]
[345.70184326 84.92116547]
[349.59530640 99.84914398]
[344.77828979 114.50520325]
[332.78790283 124.21263885]
[317.45025635 125.87384796]
[303.65948486 118.95874786]
[295.81622314 105.67391968]
[280.82351685 105.20587921]
[265.83084106 104.73783875]
[250.83813477 104.26979828]
[243.75286865 118.55962372]
[231.10868835 128.37696838]
[215.39532471 131.72471619]
[199.73481750 127.88607788]
[187.26127625 117.57721710]
[180.49359131 102.81434631]
[165.49440002 102.65830994]
[150.49520874 102.50227356]
[145.16439819 107.77791595]
[158.25260925 115.10585022]
[173.03100586 117.67471313]
[182.33303833 129.44212341]
[181.42070007 144.41436768]
[170.75869751 154.96527100]
[155.77774048 155.72073364]
[144.10838318 146.29597473]
[141.69415283 131.49295044]
[134.50277710 118.32920837]
[129.17195129 123.60485840]
[129.17195129 138.60485840]
[129.17195129 153.60485840]
[129.17195129 168.60485840]
[129.17195129 183.60485840]
[129.17195129 198.60485840]
[129.17195129 213.60485840]
[129.17195129 228.60485840]
[129.17195129 243.60485840]
[129.17195129 258.60485840]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[12 26]
[13 25]
[28 96]
[29 95]
[30 94]
[32 49]
[33 48]
[35 46]
[36 45]
[37 44]
[38 43]
[54 91]
[55 90]
[56 89]
[57 88]
[58 85]
[59 84]
[60 83]
[61 82]
[97 130]
[98 129]
[99 128]
[106 122]
[107 121]
[108 120]
[109 119]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
