%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:41 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGUAACAACAUACCCAUGGCCAACCUCCUACUCCUCAUUGUACCCAUUCUAAUCGCAAUGGCxxxxxxxxxxUUCAAAUAUCUACUCAUCUUCCUAAUUACCAUACUAAUCUUAGUUACCGCUAACAACCUACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[97.19184875 212.84729004]
[96.56787109 197.86027527]
[95.94389343 182.87326050]
[95.31991577 167.88624573]
[94.69593811 152.89923096]
[94.07196045 137.91221619]
[93.44798279 122.92520142]
[92.82400513 107.93817902]
[90.33889008 93.14547729]
[86.03130341 78.77729034]
[81.72371674 64.40910339]
[77.41613007 50.04092407]
[73.10855103 35.67273712]
[68.80096436 21.30455399]
[53.10453033 21.45711708]
[38.01130676 17.19786453]
[24.73475075 8.87769032]
[14.33988094 -2.82637095]
[7.65785074 -16.96622276]
[5.21949577 -32.39950562]
[7.21316767 -47.88190079]
[13.47021389 -62.16743088]
[23.47920990 -74.10875702]
[36.42775345 -82.74930573]
[31.82218933 -97.02476501]
[27.21662521 -111.30022430]
[22.61106110 -125.57568359]
[8.02119064 -122.06098938]
[-6.79270697 -119.65978241]
[-21.74577904 -118.38581085]
[-36.75237656 -118.24637604]
[-51.72653961 -119.24227905]
[-66.58249664 -121.36781311]
[-81.23515320 -124.61080933]
[-95.60058594 -128.95268250]
[-109.59649658 -134.36856079]
[-123.14273071 -140.82743835]
[-136.16168213 -148.29229736]
[-148.57879639 -156.72039795]
[-160.32292175 -166.06344604]
[-171.32681274 -176.26794434]
[-181.52743530 -187.27543640]
[-190.86636353 -199.02285767]
[-199.29008484 -211.44293213]
[-206.75035095 -224.46450806]
[-213.20445251 -238.01301575]
[-218.61541748 -252.01083374]
[-222.95222473 -266.37780762]
[-226.19004822 -281.03158569]
[-228.31034851 -295.88830566]
[-229.30097961 -310.86282349]
[-229.15626526 -325.86935425]
[-227.87702942 -340.82199097]
[-225.47059631 -355.63504028]
[-221.95077515 -370.22366333]
[-217.33769226 -384.50430298]
[-211.65779114 -398.39517212]
[-204.94360352 -411.81668091]
[-197.23358154 -424.69198608]
[-188.57189941 -436.94729614]
[-179.00816345 -448.51242065]
[-168.59715271 -459.32113647]
[-157.39849854 -469.31152344]
[-145.47636414 -478.42633057]
[-132.89903259 -486.61340332]
[-119.73853302 -493.82580566]
[-106.07025909 -500.02221680]
[-91.97250366 -505.16717529]
[-77.52600861 -509.23120117]
[-62.81353378 -512.19097900]
[-47.91934586 -514.02966309]
[-32.92876053 -514.73657227]
[-17.92764473 -514.30773926]
[-3.00192118 -512.74566650]
[11.76291275 -510.05920410]
[26.28228569 -506.26376343]
[40.47303391 -501.38113403]
[54.25386810 -495.43927002]
[67.54585266 -488.47216797]
[80.27285767 -480.51974487]
[92.36196899 -471.62759399]
[103.74395752 -461.84658813]
[114.35362244 -451.23281860]
[124.13018799 -439.84701538]
[133.01765442 -427.75445557]
[140.96510315 -415.02435303]
[147.92704773 -401.72964478]
[153.86357117 -387.94650269]
[158.74069214 -373.75387573]
[162.53045654 -359.23303223]
[165.21116638 -344.46713257]
[166.76748657 -329.54080200]
[167.19046021 -314.53952026]
[166.47770691 -299.54922485]
[164.63328552 -284.65576172]
[161.66775513 -269.94442749]
[157.59811401 -255.49951172]
[152.44767761 -241.40376282]
[146.24594116 -227.73789978]
[139.02842712 -214.58020020]
[130.83648682 -202.00604248]
[121.71702576 -190.08746338]
[111.72229004 -178.89270020]
[100.90952301 -168.48588562]
[89.34067535 -158.92665100]
[77.08200073 -150.26972961]
[64.20371246 -142.56472778]
[50.77959061 -135.85574341]
[36.88652039 -130.18124390]
[41.49208450 -115.90579224]
[46.09764862 -101.63032532]
[50.70321274 -87.35486603]
[65.05255890 -88.02584839]
[79.09586334 -84.94541931]
[91.86848450 -78.31871033]
[102.49139404 -68.59466553]
[110.23165894 -56.43564987]
[114.55302429 -42.67229843]
[115.15303802 -28.24680328]
[111.98425293 -14.14840126]
[105.25785065 -1.34554243]
[95.42964172 9.28064060]
[83.16914368 16.99696922]
[87.47673035 31.36515427]
[91.78431702 45.73333740]
[96.09190369 60.10152054]
[100.39948273 74.46970367]
[104.70706940 88.83789062]
[109.57488251 74.64971161]
[120.03071594 63.89445496]
[134.07583618 58.62809753]
[149.02539062 59.85735321]
[162.02160645 67.34723663]
[170.58013916 79.66598511]
[173.06492615 94.45874786]
[169.00100708 108.89773560]
[159.16520691 120.22280121]
[145.43775940 126.26905060]
[130.44279480 125.88066864]
[117.04673004 119.13191223]
[107.81101990 107.31420135]
[108.43499756 122.30122375]
[109.05897522 137.28823853]
[109.68295288 152.27525330]
[110.30693054 167.26226807]
[110.93090820 182.24928284]
[111.55488586 197.23629761]
[112.17886353 212.22331238]
[118.87885284 227.79722595]
[105.76832581 238.54666138]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 148]
[2 147]
[3 146]
[4 145]
[5 144]
[6 143]
[7 142]
[8 141]
[9 128]
[10 127]
[11 126]
[12 125]
[13 124]
[14 123]
[24 112]
[25 111]
[26 110]
[27 109]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
