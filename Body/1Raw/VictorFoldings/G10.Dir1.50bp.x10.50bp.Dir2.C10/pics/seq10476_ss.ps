%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:28 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCAUUAACAACAUAAAACCCUCAUUCACACGAGAAAACACCCUCAUGUUCAUACACCUAUCxxxxxxxxxxGUUCUUUCAUGGGGAAGCAGAUUUGGGUACCACCCAAGUAUUGACUCACCCAUCAACAACCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[108.72811890 287.65173340]
[108.72811890 272.65173340]
[108.72811890 257.65173340]
[108.72811890 242.65174866]
[108.72811890 227.65174866]
[108.72811890 212.65174866]
[108.72811890 197.65174866]
[108.72811890 182.65174866]
[108.72811890 167.65174866]
[108.72811890 152.65174866]
[101.77684021 149.83576965]
[87.87428284 144.20381165]
[80.92301178 141.38783264]
[70.48319244 152.15863037]
[60.04338455 162.92944336]
[60.54055405 178.72590637]
[49.66156387 190.18989563]
[33.86072159 190.52003479]
[22.51239014 179.52044678]
[22.34933281 163.71699524]
[33.46828842 152.48559570]
[49.27257538 152.48963928]
[59.71238708 141.71882629]
[70.15219879 130.94801331]
[64.43132782 111.65066528]
[68.60131073 94.59686279]
[79.18697357 83.93458557]
[70.42076874 71.76274872]
[61.65456009 59.59091187]
[54.04903793 54.41328430]
[52.83570862 47.07342911]
[44.32461929 34.72185516]
[35.81352997 22.37028313]
[22.49837303 15.46328449]
[7.49918461 15.61932087]
[-6.33374166 24.42739677]
[-20.75124741 16.61282158]
[-20.92183876 0.21456158]
[-6.67002535 -7.89826012]
[7.34314775 0.62013251]
[22.34233665 0.46409595]
[30.33225250 -12.23083401]
[23.98512268 -25.82178497]
[17.63799286 -39.41273499]
[11.29086399 -53.00368500]
[1.42514098 -64.30268860]
[-11.18598747 -72.42423248]
[-23.79711533 -80.54577637]
[-39.18841171 -76.95640564]
[-52.56546402 -85.37245941]
[-55.99190903 -100.80084229]
[-47.43489838 -114.08816528]
[-31.97114944 -117.35130310]
[-18.77503395 -108.65428925]
[-15.67557335 -93.15690613]
[-3.06444502 -85.03536224]
[9.54668331 -76.91381836]
[3.07834244 -90.44750214]
[-0.38922665 -105.04119873]
[-0.69993311 -120.03797913]
[2.16020918 -134.76277161]
[8.06245232 -148.55274963]
[16.74110985 -160.78717041]
[27.80551720 -170.91529846]
[40.75761414 -178.48121643]
[55.01437378 -183.14434814]
[69.93402863 -184.69480896]
[84.84497833 -183.06278992]
[99.07601929 -178.32174683]
[111.98654938 -170.68510437]
[122.99539948 -160.49661255]
[131.60700989 -148.21492004]
[137.43374634 -134.39286804]
[140.21331787 -119.65264893]
[139.82060242 -104.65779114]
[136.27326965 -90.08328247]
[129.73101807 -76.58517456]
[120.48831940 -64.77108765]
[108.96125031 -55.17282486]
[95.66868591 -48.22244644]
[81.20899200 -44.23282242]
[66.23304749 -43.38354111]
[51.41500854 -45.71283340]
[37.42188644 -51.11584854]
[24.88181496 -59.35081482]
[31.22894478 -45.75986481]
[37.57607269 -32.16891479]
[43.92320251 -18.57796288]
[48.16510010 13.85919285]
[56.67618942 26.21076584]
[65.18727875 38.56233597]
[73.82640076 50.82470703]
[82.59260559 62.99654388]
[91.35881042 75.16838074]
[126.57238007 77.77100372]
[137.47378540 121.08045959]
[152.40809631 119.67815399]
[167.32701111 118.12057495]
[182.22891235 116.40788269]
[190.45939636 112.29557037]
[197.45820618 114.81790161]
[212.39251709 113.41559601]
[227.29441833 111.70290375]
[242.15747070 109.68057251]
[257.02050781 107.65824127]
[271.88357544 105.63590240]
[286.74661255 103.61357117]
[301.60964966 101.59123230]
[316.48898315 93.46463013]
[328.41702271 105.51280975]
[320.14169312 120.30995178]
[303.63198853 116.45428467]
[288.76895142 118.47661591]
[273.90588379 120.49894714]
[259.04284668 122.52128601]
[244.17980957 124.54361725]
[229.31675720 126.56595612]
[225.73124695 129.80934143]
[220.05105591 130.79264832]
[213.79483032 128.34989929]
[198.86051941 129.75221252]
[183.94160461 131.30978394]
[169.03970337 133.02247620]
[162.71279907 136.93605042]
[153.81040955 134.61245728]
[138.87609863 136.01477051]
[152.65447998 141.94401550]
[166.43287659 147.87327576]
[181.40031433 148.86093140]
[194.45777893 156.24353027]
[203.02021790 168.55955505]
[205.39254761 183.37077332]
[201.10510254 197.74497986]
[191.00666809 208.83648682]
[177.09645081 214.44950867]
[162.12828064 213.47280884]
[149.06542969 206.09976196]
[140.49397278 193.79000854]
[138.11088562 178.97921753]
[130.91950989 165.81547546]
[123.72811890 152.65174866]
[123.72811890 167.65174866]
[123.72811890 182.65174866]
[123.72811890 197.65174866]
[123.72811890 212.65174866]
[123.72811890 227.65174866]
[123.72811890 242.65174866]
[123.72811890 257.65173340]
[123.72811890 272.65173340]
[123.72811890 287.65173340]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[13 24]
[14 23]
[15 22]
[27 94]
[28 93]
[29 92]
[31 91]
[32 90]
[33 89]
[34 41]
[35 40]
[42 88]
[43 87]
[44 86]
[45 85]
[46 57]
[47 56]
[48 55]
[96 126]
[97 125]
[98 123]
[99 122]
[101 121]
[102 120]
[103 117]
[104 116]
[105 115]
[106 114]
[107 113]
[108 112]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
