%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:59 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGAACAUUCUCCUCCGCAUAAGCCUGCGUCAGAUUAAAACACUGAACUGACAAUUAACAGCCxxxxxxxxxxAACCCCCUUAUUUCUAGGACUAUGAGAAUCGAACCCAUCCCUGAGAAUCCAAAAUUCUCCCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[197.07443237 389.68286133]
[197.07443237 374.68286133]
[197.07443237 359.68286133]
[197.07443237 344.68286133]
[197.07443237 329.68286133]
[197.07443237 314.68286133]
[197.07443237 299.68286133]
[197.07443237 284.68286133]
[197.07443237 269.68286133]
[197.07443237 254.68287659]
[180.08950806 241.67739868]
[175.41127014 223.17102051]
[182.37500000 207.88845825]
[172.62734985 196.48744202]
[162.87969971 185.08641052]
[148.05664062 184.18516541]
[138.00871277 172.76177979]
[139.05453491 157.22009277]
[129.30688477 145.81906128]
[119.55922699 134.41804504]
[109.81157684 123.01702881]
[93.76766968 128.40361023]
[75.43641663 122.24260712]
[61.31161118 127.29136658]
[47.18680954 132.34011841]
[33.06200409 137.38887024]
[26.52754211 151.77902222]
[11.70244980 157.25553894]
[-2.61780715 150.56929016]
[-7.93727398 135.68713379]
[-1.10000587 121.43836975]
[13.83756733 116.27654266]
[28.01324844 123.26407623]
[42.13805008 118.21531677]
[56.26285553 113.16655731]
[70.38765717 108.11780548]
[70.07559967 93.12104797]
[55.75300217 88.66423798]
[41.43040848 84.20742035]
[27.10780907 79.75060272]
[15.35402203 89.74320221]
[0.06067818 91.77228546]
[-13.89217186 85.19037628]
[-22.05222511 72.09774017]
[-21.81563759 56.67219162]
[-13.25790310 43.83596420]
[0.89023519 37.68505478]
[16.11415863 40.18218994]
[27.55596924 50.53054810]
[31.56462479 65.42800903]
[45.88722229 69.88481903]
[60.20981979 74.34163666]
[74.53241730 78.79845428]
[79.17314911 76.89199829]
[83.80951691 75.84477234]
[88.29601288 75.61296082]
[92.50000000 76.12950897]
[92.50000000 61.12950897]
[89.35433197 52.48331451]
[92.65928650 45.81826401]
[92.97133636 30.82150841]
[93.28339386 15.82475567]
[78.64424896 12.28787994]
[65.10787964 5.68630409]
[53.30741119 -3.67120409]
[43.79476547 -15.34697723]
[37.01487350 -28.79491806]
[33.28483963 -43.38604355]
[32.77912521 -58.43789673]
[35.52138138 -73.24648285]
[41.38335037 -87.11916351]
[50.09085464 -99.40710449]
[61.23663330 -109.53556061]
[74.29936981 -117.03082275]
[88.66810608 -121.54231262]
[103.67078400 -122.85901642]
[118.60570526 -120.91935730]
[132.77433777 -115.81405640]
[145.51397705 -107.78189850]
[156.22877502 -97.19855499]
[164.41758728 -84.55903625]
[169.69738770 -70.45451355]
[171.82125854 -55.54467392]
[170.68984985 -40.52688599]
[166.35607910 -26.10355377]
[159.02264404 -12.94928646]
[149.03253174 -1.67933166]
[136.85301208 7.17919493]
[123.05374908 13.21196365]
[108.28015137 16.13681221]
[107.96809387 31.13356590]
[107.65603638 46.13031769]
[107.50000000 61.12950897]
[107.50000000 76.12950897]
[123.47222900 91.33370209]
[121.21259308 113.26937103]
[130.96025085 124.67039490]
[140.70790100 136.07141113]
[150.45555115 147.47244263]
[165.97094727 148.85461426]
[175.69403076 160.55572510]
[174.28071594 175.33876038]
[184.02838135 186.73979187]
[193.77603149 198.14080811]
[219.35063171 195.95124817]
[237.71690369 220.65975952]
[252.48295593 223.29862976]
[267.42907715 218.10978699]
[278.59667969 227.96545410]
[293.36273193 230.60432434]
[301.53030396 217.78405762]
[313.98513794 209.06936646]
[328.82794189 205.78919983]
[343.79528809 208.44372559]
[356.60479736 216.62815857]
[365.30310059 229.09443665]
[368.56375122 243.94154358]
[365.88952637 258.90539551]
[357.68826294 271.70413208]
[345.21054077 280.38601685]
[330.35916138 283.62713623]
[315.39883423 280.93322754]
[302.61090088 272.71511841]
[293.94543457 260.22601318]
[290.72384644 245.37037659]
[275.95779419 242.73150635]
[262.06784058 248.10910034]
[249.84408569 238.06468201]
[235.07803345 235.42582703]
[229.32713318 240.24008179]
[241.02043152 249.63513184]
[252.71371460 259.03018188]
[266.15310669 265.69219971]
[270.82635498 279.94564819]
[263.94036865 293.27169800]
[249.61071777 297.70574951]
[236.40177917 290.59774780]
[232.20809937 276.19607544]
[225.01670837 263.03234863]
[217.82533264 249.86860657]
[212.07443237 254.68287659]
[212.07443237 269.68286133]
[212.07443237 284.68286133]
[212.07443237 299.68286133]
[212.07443237 314.68286133]
[212.07443237 329.68286133]
[212.07443237 344.68286133]
[212.07443237 359.68286133]
[212.07443237 374.68286133]
[212.07443237 389.68286133]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[13 104]
[14 103]
[15 102]
[18 99]
[19 98]
[20 97]
[21 96]
[23 36]
[24 35]
[25 34]
[26 33]
[37 53]
[38 52]
[39 51]
[40 50]
[57 94]
[58 93]
[60 92]
[61 91]
[62 90]
[106 129]
[107 128]
[109 126]
[110 125]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
