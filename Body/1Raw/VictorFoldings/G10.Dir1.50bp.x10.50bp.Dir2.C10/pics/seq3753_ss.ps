%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:54 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCAAACUCAAACUACGCCCUGAUCGGCGCACUGCGAGCAGUAGCCCAAACAAUCUCAUAUGxxxxxxxxxxGUCACUUUCCUAGGACUUCUAACAGCCCUAGACCUCAACUACCUAACCAACAAACUUAAACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[92.50000000 252.44253540]
[92.50000000 237.44253540]
[92.50000000 222.44253540]
[92.50000000 207.44253540]
[92.50000000 192.44253540]
[92.50000000 177.44253540]
[92.50000000 162.44253540]
[92.50000000 147.44253540]
[92.50000000 132.44253540]
[92.50000000 117.44253540]
[86.46000671 112.99636078]
[77.56745911 125.07620239]
[65.48776245 116.18344879]
[74.38002014 104.10401154]
[68.34002686 99.65783691]
[54.01742554 104.11464691]
[39.69482803 108.57146454]
[38.24972153 123.67733765]
[31.15041924 137.04307556]
[19.50624847 146.64656067]
[5.11140728 151.04840088]
[-9.83144855 149.60758972]
[-23.04825020 142.57470703]
[-32.53959274 131.04891968]
[-46.86219025 135.50573730]
[-61.18478775 139.96255493]
[-75.50738525 144.41935730]
[-82.63479614 158.52523804]
[-97.67487335 163.38031006]
[-111.70459747 156.10415649]
[-116.40038300 141.01358032]
[-108.97630310 127.06157684]
[-93.83693695 122.52559662]
[-79.96420288 130.09677124]
[-65.64160156 125.63995361]
[-51.31900406 121.18313599]
[-36.99640656 116.72631836]
[-35.72067261 101.85010529]
[-28.82795906 88.55966187]
[-17.34096146 78.89458466]
[-2.99007249 74.35150146]
[12.04725838 75.65240479]
[25.47689438 82.63008118]
[35.23801422 94.24887085]
[49.56061172 89.79205322]
[63.88320923 85.33523560]
[78.00023651 80.24064636]
[90.46029663 82.23907471]
[98.42742920 89.36473083]
[104.49044037 75.64467621]
[110.55345154 61.92462540]
[116.61647034 48.20457077]
[103.50468445 40.89665222]
[91.12312317 32.41009140]
[79.57743835 22.81729698]
[68.96611786 12.20011139]
[59.37971497 0.64911807]
[50.90000153 -11.73713112]
[43.59933853 -24.85295868]
[37.54000473 -38.58646393]
[32.77370071 -52.82046890]
[29.34109497 -67.43354034]
[27.27146912 -82.30100250]
[26.58248138 -97.29599762]
[27.28001213 -112.29059601]
[29.35810852 -127.15687561]
[32.79904175 -141.76799011]
[37.57345581 -155.99928284]
[43.64061356 -169.72932434]
[50.94874954 -182.84098816]
[59.43551636 -195.22241211]
[69.02850342 -206.76794434]
[79.64586639 -217.37907410]
[91.19702148 -226.96528625]
[103.58340454 -235.44479370]
[116.69935608 -242.74523926]
[130.43296814 -248.80435181]
[144.66705322 -253.57040405]
[159.28018188 -257.00277710]
[174.14767456 -259.07214355]
[189.14268494 -259.76089478]
[204.13726807 -259.06311035]
[219.00350952 -256.98477173]
[233.61456299 -253.54359436]
[247.84577942 -248.76893616]
[261.57571411 -242.70155334]
[274.68725586 -235.39320374]
[287.06854248 -226.90621948]
[298.61392212 -217.31304932]
[309.22488403 -206.69551086]
[318.81088257 -195.14419556]
[327.29019165 -182.75765991]
[334.59042358 -169.64158630]
[340.64929199 -155.90788269]
[345.41513062 -141.67372131]
[348.84725952 -127.06053162]
[350.91638184 -112.19300842]
[351.60485840 -97.19798279]
[350.90682983 -82.20340729]
[348.82824707 -67.33720398]
[345.38681030 -52.72620392]
[340.61193848 -38.49507141]
[334.54431152 -24.76522446]
[327.23574829 -11.65380192]
[318.74856567 0.72733068]
[309.15518188 12.27254009]
[298.53747559 22.88332367]
[286.98602295 32.46915436]
[274.59933472 40.94824600]
[261.48315430 48.24825668]
[247.74932861 54.30690002]
[233.51509094 59.07249451]
[218.90184021 62.50437164]
[204.03428650 64.57325745]
[189.03926086 65.26148987]
[174.04469299 64.56320953]
[159.17851257 62.48437119]
[144.56758118 59.04270935]
[130.33651733 54.26758575]
[124.27350616 67.98764038]
[118.21049500 81.70769501]
[112.14748383 95.42774200]
[120.52007294 82.98187256]
[132.25659180 73.64088440]
[146.26391602 68.27478790]
[161.23739624 67.38336945]
[175.78244019 71.04966736]
[188.54432678 78.93220520]
[198.33442688 90.29679871]
[204.24089050 104.08496857]
[205.71359253 119.01249695]
[202.61538696 133.68905640]
[195.23483276 146.74766541]
[184.25933838 156.97206116]
[170.71113586 163.40997314]
[155.85212708 165.46174622]
[141.06625366 162.93632507]
[127.73065186 156.06887817]
[117.08739471 145.49906921]
[110.12777710 132.21133423]
[107.50000000 117.44253540]
[107.50000000 132.44253540]
[107.50000000 147.44253540]
[107.50000000 162.44253540]
[107.50000000 177.44253540]
[107.50000000 192.44253540]
[107.50000000 207.44253540]
[107.50000000 222.44253540]
[107.50000000 237.44253540]
[107.50000000 252.44253540]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[15 46]
[16 45]
[17 44]
[24 37]
[25 36]
[26 35]
[27 34]
[49 122]
[50 121]
[51 120]
[52 119]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
