%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:19 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGAAUUAUAACCAAGCAUAAUAUAGCAAGGACUAACCCCUAUACCUUCUGCAUAAUGAAUUAxxxxxxxxxxGUUACCGCUAACAACCUAUUCCAACUGUUCAUCGGCUGAGAGGGCGUAGGAAUUAUAUCCCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[120.08438110 263.67864990]
[120.08438110 248.67866516]
[120.08438110 233.67866516]
[120.08438110 218.67866516]
[120.08438110 203.67866516]
[120.08438110 188.67866516]
[120.08438110 173.67866516]
[120.08438110 158.67866516]
[120.08438110 143.67866516]
[120.08438110 128.67866516]
[113.25626373 125.57595062]
[92.77189636 116.26784515]
[81.47289276 126.13356781]
[70.17388916 135.99928284]
[58.87488556 145.86500549]
[47.57587814 155.73074341]
[49.09630203 171.17314148]
[41.22050095 184.54293823]
[26.97688866 190.69915771]
[11.84241962 187.27461243]
[1.63660812 175.58612061]
[0.28379706 160.12812805]
[8.30416965 146.84455872]
[22.61372948 140.84321594]
[37.71015549 144.43173218]
[49.00916290 134.56600952]
[60.30816650 124.70028687]
[71.60717010 114.83456421]
[82.90617371 104.96884155]
[80.75238037 97.78474426]
[66.38420105 102.09233093]
[54.05025482 110.62894440]
[42.12016678 101.53647614]
[47.08119202 87.38062286]
[62.07661438 87.72414398]
[76.44480133 83.41656494]
[74.29100800 76.23246765]
[59.42795944 74.21013641]
[45.83896255 82.73766327]
[30.74755096 77.29442596]
[25.73056412 62.05600739]
[34.63660431 48.71201706]
[50.63372040 47.49882889]
[61.45029449 59.34708786]
[76.31333923 61.36942291]
[89.76931000 54.74092484]
[97.22422028 41.72461700]
[104.67913055 28.70830536]
[112.13404083 15.69199657]
[119.58895111 2.67568731]
[119.07094574 -15.70124245]
[134.51228333 -23.98163414]
[141.69479370 -37.15021515]
[148.87730408 -50.31879807]
[155.92243958 -63.56138611]
[162.82943726 -76.87654114]
[162.31573486 -92.68940735]
[175.04443359 -100.42434692]
[181.95143127 -113.73950195]
[176.42266846 -126.06388092]
[178.98477173 -139.12771606]
[188.47698975 -148.18156433]
[201.26148987 -150.06657410]
[208.44400024 -163.23515320]
[215.62651062 -176.40373230]
[222.80900574 -189.57232666]
[229.99151611 -202.74090576]
[217.90039062 -212.98278809]
[208.18040466 -225.49041748]
[201.24630737 -239.72645569]
[197.39320374 -255.07989502]
[196.78404236 -270.89224243]
[199.44270325 -286.48587036]
[205.25300598 -301.19293213]
[213.96392822 -314.38403320]
[225.20030212 -325.49514771]
[238.47906494 -334.05175781]
[253.22998047 -339.68905640]
[268.82015991 -342.16763306]
[284.58120728 -341.38342285]
[299.83782959 -337.37231445]
[306.46630859 -350.82827759]
[313.09481812 -364.28424072]
[319.72332764 -377.74020386]
[318.10433960 -394.05923462]
[331.58349609 -403.39968872]
[346.29461670 -396.15292358]
[347.10409546 -379.77377319]
[333.17929077 -371.11169434]
[326.55078125 -357.65573120]
[319.92230225 -344.19976807]
[313.29379272 -330.74380493]
[324.61782837 -322.17047119]
[334.15710449 -311.64141846]
[341.57894897 -299.52136230]
[346.62426758 -286.23049927]
[349.11624146 -272.22998047]
[348.96676636 -258.00595093]
[346.17944336 -244.05249023]
[340.84951782 -230.85467529]
[333.16067505 -218.87161255]
[323.37869263 -208.52040100]
[311.84222412 -200.16177368]
[298.95111084 -194.08737183]
[285.15252686 -190.50965881]
[270.92538452 -189.55445862]
[256.76388550 -191.25656128]
[243.16011047 -195.55839539]
[235.97760010 -182.38981628]
[228.79508972 -169.22122192]
[221.61257935 -156.05264282]
[214.43006897 -142.88406372]
[219.86967468 -127.00109863]
[212.01217651 -111.78453064]
[195.26658630 -106.83249664]
[188.35958862 -93.51734161]
[189.36734009 -78.65686798]
[176.14459229 -69.96954346]
[169.23759460 -56.65438461]
[168.94757080 -49.22057343]
[162.04588318 -43.13629150]
[154.86337280 -29.96770668]
[147.68086243 -16.79912376]
[150.79177856 -5.06756353]
[144.86207581 5.98040485]
[132.60525513 10.13059711]
[125.15034485 23.14690781]
[117.69543457 36.16321564]
[110.24052429 49.17952728]
[102.78561401 62.19583511]
[114.07405090 52.31801987]
[128.15756226 47.15518188]
[143.15560913 47.39669418]
[157.06558228 53.01031113]
[168.03012085 63.24646378]
[174.58517456 76.73835754]
[175.85546875 91.68447113]
[171.67138672 106.08911133]
[162.59161377 118.02886200]
[149.82855225 125.90946960]
[135.08438110 128.67866516]
[135.08438110 143.67866516]
[135.08438110 158.67866516]
[135.08438110 173.67866516]
[135.08438110 188.67866516]
[135.08438110 203.67866516]
[135.08438110 218.67866516]
[135.08438110 233.67866516]
[135.08438110 248.67866516]
[135.08438110 263.67864990]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[12 29]
[13 28]
[14 27]
[15 26]
[16 25]
[37 45]
[38 44]
[46 130]
[47 129]
[48 128]
[49 127]
[50 126]
[52 123]
[53 122]
[54 121]
[55 119]
[56 118]
[58 116]
[59 115]
[63 112]
[64 111]
[65 110]
[66 109]
[67 108]
[81 92]
[82 91]
[83 90]
[84 89]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
