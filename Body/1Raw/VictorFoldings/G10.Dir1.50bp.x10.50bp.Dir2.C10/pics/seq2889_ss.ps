%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:41 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGAUUAAAAAUUUCGGUUGGGGCGACCUCGGAGCAGAACCCAACCUCCGAGCAGUACAUGCUxxxxxxxxxxAAAUAUUAAACACAAACUACCACCUACCUCCCUCACCAAAGCCCAUAAAAAUAAAAAAUUCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[92.50000000 482.65490723]
[92.50000000 467.65490723]
[92.50000000 452.65490723]
[92.50000000 437.65490723]
[92.50000000 422.65490723]
[92.50000000 407.65490723]
[92.50000000 392.65490723]
[92.50000000 377.65490723]
[92.50000000 362.65490723]
[92.50000000 347.65490723]
[77.77018738 344.92126465]
[63.78981781 339.52597046]
[51.03553772 331.65148926]
[39.94248962 321.56469727]
[30.88946152 309.60806274]
[24.18593407 296.18792725]
[20.06152153 281.76062012]
[18.65810013 266.81713867]
[20.02492142 251.86624146]
[24.11689758 237.41726685]
[30.79607773 223.96270752]
[39.83630371 211.96142578]
[50.93086243 201.82301331]
[63.70289993 193.89387512]
[77.71820831 188.44525146]
[92.50000000 185.66410828]
[92.50000000 170.66410828]
[92.50000000 155.66410828]
[92.50000000 140.66410828]
[82.10579681 137.27757263]
[72.96231842 131.28552246]
[65.70863342 123.10675812]
[60.85175323 113.31295013]
[58.73113632 102.58863068]
[59.49501419 91.68338013]
[45.59246063 86.05142212]
[31.68990326 80.41946411]
[17.78734779 74.78750610]
[3.88479185 69.15554810]
[-10.01776409 63.52359390]
[-23.92032051 57.89163589]
[-35.55985260 67.83044434]
[-50.48750305 71.21035004]
[-65.27301025 67.25468445]
[-76.51877594 56.87241745]
[-81.64059448 42.44932938]
[-79.46152496 27.29973412]
[-70.48228455 14.90489960]
[-56.76625443 8.11306858]
[-41.46526337 8.48495293]
[-28.09537506 15.93509769]
[-19.72888947 28.75151253]
[-18.28836441 43.98908234]
[-4.38580751 49.62103653]
[9.51674843 55.25299454]
[23.41930389 60.88495255]
[37.32186127 66.51690674]
[51.22441483 72.14886475]
[65.12697601 77.78082275]
[78.64990234 64.58823395]
[96.62953186 58.78762436]
[115.31272125 61.58983994]
[123.30264282 48.89490891]
[111.62727356 39.44915771]
[101.15106964 28.68879509]
[92.02108765 16.76487923]
[84.36550140 3.84480476]
[78.29177856 -9.89005280]
[73.88519287 -24.24687576]
[71.20760345 -39.02411652]
[70.29660034 -54.01432800]
[71.16497803 -69.00707245]
[73.80052948 -83.79187012]
[78.16626740 -98.16116333]
[84.20090485 -111.91323853]
[91.81971741 -124.85503387]
[100.91575623 -136.80485535]
[111.36132050 -147.59497070]
[123.00977325 -157.07388306]
[135.69760132 -165.10853577]
[149.24665833 -171.58613586]
[163.46676636 -176.41572571]
[178.15827942 -179.52952576]
[193.11495972 -180.88381958]
[208.12683105 -180.45959473]
[222.98315430 -178.26281738]
[237.47538757 -174.32429504]
[251.40003967 -168.69935608]
[264.56167603 -161.46693420]
[276.77551270 -152.72857666]
[287.87005615 -142.60696411]
[297.68960571 -131.24417114]
[306.09628296 -118.79973602]
[312.97207642 -105.44833374]
[318.22042847 -91.37741089]
[321.76773071 -76.78450012]
[323.56411743 -61.87445450]
[323.58441162 -46.85660172]
[321.82833862 -31.94176102]
[318.32049561 -17.33931541]
[313.11016846 -3.25425816]
[306.27047729 10.11567593]
[297.89746094 22.58279419]
[288.10867310 33.97208023]
[277.04150391 44.12364197]
[264.85134888 52.89497375]
[251.70930481 60.16293335]
[237.79989624 65.82549286]
[223.31837463 69.80315399]
[208.46803284 72.04008484]
[193.45735168 72.50488281]
[178.49707031 71.19100952]
[163.79719543 68.11692810]
[149.56408691 63.32577515]
[135.99757385 56.88482666]
[128.00765991 69.57975769]
[137.09774780 81.73591614]
[141.18884277 96.35320282]
[139.72964478 111.46189880]
[132.91679382 125.02608490]
[121.66831970 135.21794128]
[107.50000000 140.66410828]
[107.50000000 155.66410828]
[107.50000000 170.66410828]
[107.50000000 185.66410828]
[122.28179169 188.44525146]
[136.29710388 193.89387512]
[149.06913757 201.82301331]
[160.16369629 211.96142578]
[169.20391846 223.96270752]
[175.88310242 237.41726685]
[179.97508240 251.86624146]
[181.34190369 266.81713867]
[179.93847656 281.76062012]
[175.81407166 296.18792725]
[169.11053467 309.60806274]
[160.05751038 321.56469727]
[148.96446228 331.65148926]
[136.21018982 339.52597046]
[122.22981262 344.92126465]
[107.50000000 347.65490723]
[107.50000000 362.65490723]
[107.50000000 377.65490723]
[107.50000000 392.65490723]
[107.50000000 407.65490723]
[107.50000000 422.65490723]
[107.50000000 437.65490723]
[107.50000000 452.65490723]
[107.50000000 467.65490723]
[107.50000000 482.65490723]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[26 125]
[27 124]
[28 123]
[29 122]
[35 59]
[36 58]
[37 57]
[38 56]
[39 55]
[40 54]
[41 53]
[62 116]
[63 115]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
