%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:37 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGAGUAGGCCUAGAAAUAAACAUGCUAGCUUUUAUUCCAGUUCUAACCAAAAAAAUAAACCCxxxxxxxxxxACCUCCGGCCUAGCCAUGUGAUUUCACUUCCACUCCAUAACGCUCCUCAUACUAGGCCUACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[193.12484741 418.56805420]
[193.12484741 403.56805420]
[193.12484741 388.56805420]
[193.12484741 373.56805420]
[193.12484741 358.56805420]
[193.12484741 343.56805420]
[193.12484741 328.56805420]
[193.12484741 313.56805420]
[193.12484741 298.56805420]
[193.12484741 283.56805420]
[189.11711121 269.11334229]
[181.39302063 256.25494385]
[173.66893005 243.39654541]
[167.48855591 239.25546265]
[165.92112732 230.18931580]
[158.46621704 217.17300415]
[143.57130432 217.25793457]
[130.54711914 209.82646179]
[122.94111633 196.78747559]
[122.88249969 181.59230042]
[130.48713684 168.32141113]
[123.03221893 155.30509949]
[115.57730865 142.28878784]
[108.12239838 129.27247620]
[100.66748810 116.25616455]
[89.59727478 112.50967407]
[83.89472198 102.30836487]
[86.50225830 90.91596985]
[79.31974792 77.74739075]
[72.13724518 64.57881165]
[64.95473480 51.41022491]
[57.77222443 38.24164200]
[50.45311737 25.14848900]
[42.99820709 12.13217926]
[35.54329681 -0.88413030]
[28.08838844 -13.90044022]
[20.49847984 -26.83849525]
[12.77439499 -39.69689941]
[2.67574525 -50.78821182]
[-9.40424347 -59.68056488]
[-21.48423195 -68.57291412]
[-33.56422043 -77.46526337]
[-45.64420700 -86.35761261]
[-57.72419739 -95.24996185]
[-70.16172791 -86.61361694]
[-84.73026276 -82.48607635]
[-99.84950256 -83.31505585]
[-113.87944031 -89.01065063]
[-125.29819489 -98.95502472]
[-132.86715698 -112.06950378]
[-135.76530457 -126.93151855]
[-133.67826843 -141.92895508]
[-126.83241272 -155.43499756]
[-115.97035217 -165.98460388]
[-102.27031708 -172.43345642]
[-87.21836853 -174.08200073]
[-72.44725037 -170.75144958]
[-59.55920410 -162.80303955]
[-49.95224380 -151.09898376]
[-44.66844940 -136.90884399]
[-44.28097534 -121.77184296]
[-48.83184814 -107.32994843]
[-36.75185776 -98.43759918]
[-24.67186928 -89.54524994]
[-12.59188175 -80.65290070]
[-0.51189351 -71.76055145]
[11.56809521 -62.86820221]
[5.91267347 -76.76123047]
[4.52046394 -91.69647980]
[7.51064682 -106.39542389]
[14.62724686 -119.59973907]
[25.26104355 -130.17907715]
[38.50172806 -137.22778320]
[53.21582794 -140.14245605]
[68.14373016 -138.67356873]
[82.00753784 -132.94689941]
[93.62042999 -123.45264435]
[101.98827362 -111.00358582]
[106.39474487 -96.66541290]
[106.46263123 -81.66557312]
[102.18610382 -67.28810883]
[93.93127441 -54.76382446]
[82.40478516 -45.16485977]
[68.59337616 -39.31293869]
[53.67937469 -37.70901489]
[38.93950272 -40.49039459]
[25.63279724 -47.42098236]
[33.35688019 -34.56258011]
[39.53725815 -30.42149544]
[41.10469818 -21.35535049]
[48.55960846 -8.33904076]
[56.01451874 4.67726898]
[63.46942902 17.69357872]
[69.56231689 21.96234322]
[70.94080353 31.05913353]
[78.12331390 44.22771835]
[85.30582428 57.39629745]
[92.48833466 70.56488037]
[99.67084503 83.73346710]
[114.20159149 92.06127930]
[113.68379974 108.80125427]
[121.13871002 121.81756592]
[128.59362793 134.83387756]
[136.04853821 147.85018921]
[143.50344849 160.86650085]
[158.79798889 161.02220154]
[171.87472534 168.76144409]
[179.27275085 181.91954041]
[179.09249878 196.91365051]
[171.48251343 209.71809387]
[178.93742371 222.73440552]
[186.52734375 235.67247009]
[194.25141907 248.53086853]
[201.97550964 261.38928223]
[202.11035156 246.38987732]
[205.51765442 231.78199768]
[212.03295898 218.27085876]
[221.34170532 206.50874329]
[232.99447632 197.06349182]
[246.42874146 190.39109802]
[260.99591064 186.81370544]
[275.99270630 186.50398254]
[290.69512939 189.47691345]
[304.39343262 195.58895874]
[316.42620850 204.54505920]
[326.21264648 215.91281128]
[333.28021240 229.14344788]
[337.28771973 243.59819031]
[338.04171753 258.57922363]
[335.50579834 273.36331177]
[329.80236816 287.23669434]
[321.20678711 299.52963257]
[310.13403320 309.64862061]
[297.11865234 317.10516357]
[282.78900146 321.53927612]
[267.83688354 322.73687744]
[252.98414612 320.64016724]
[238.94784546 315.35037231]
[226.40559387 307.12286377]
[215.96292114 296.35482788]
[208.12484741 283.56805420]
[208.12484741 298.56805420]
[208.12484741 313.56805420]
[208.12484741 328.56805420]
[208.12484741 343.56805420]
[208.12484741 358.56805420]
[208.12484741 373.56805420]
[208.12484741 388.56805420]
[208.12484741 403.56805420]
[208.12484741 418.56805420]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[11 114]
[12 113]
[13 112]
[15 111]
[16 110]
[21 105]
[22 104]
[23 103]
[24 102]
[25 101]
[28 99]
[29 98]
[30 97]
[31 96]
[32 95]
[33 93]
[34 92]
[35 91]
[36 90]
[37 88]
[38 87]
[39 67]
[40 66]
[41 65]
[42 64]
[43 63]
[44 62]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
