%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:21 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGUAACCCCACCCUACUAAACCCCAUUAAACGCCUGGCAGCCGGAAGCCUAUUCGCAGGAUUxxxxxxxxxxAAACCGGAGAUGAAAACCUUUUUCCAAGGACAAAUCAGAGAAAAAGUCUUUAACUCCACCCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[48.34749222 239.73851013]
[38.14457703 235.53131104]
[31.23757744 248.84646606]
[24.33057785 262.16162109]
[24.84428406 277.97448730]
[12.11557770 285.70944214]
[5.20857859 299.02459717]
[-1.69841993 312.33975220]
[-8.60541821 325.65490723]
[-7.32629442 342.00408936]
[-20.99685669 351.06210327]
[-35.55400467 343.51083374]
[-36.02259064 327.11840820]
[-21.92057419 318.74789429]
[-15.01357555 305.43273926]
[-8.10657692 292.11758423]
[-1.19957840 278.80242920]
[-2.20731902 263.94195557]
[11.01542282 255.25462341]
[17.92242050 241.93946838]
[24.82942009 228.62431335]
[14.74606705 222.17445374]
[5.21305466 214.93592834]
[-3.70807719 206.95544434]
[-11.95974064 198.28453064]
[-19.48866844 188.97915649]
[-26.24625778 179.09939575]
[-32.18888855 168.70901489]
[-37.27819824 157.87510681]
[-41.48133087 146.66758728]
[-44.77116013 135.15882874]
[-47.12644196 123.42309570]
[-48.53197861 111.53616333]
[-48.97869110 99.57476044]
[-48.46369934 87.61610413]
[-46.99032974 75.73738098]
[-44.56808853 64.01528931]
[-41.21261215 52.52549362]
[-36.94556808 41.34215546]
[-31.79449463 30.53747368]
[-25.79264450 20.18119431]
[-18.97876358 10.34017086]
[-11.39683723 1.07793081]
[-3.09580898 -7.54573631]
[5.87073612 -15.47516155]
[15.44491482 -22.65915680]
[25.56492424 -29.05134964]
[36.16543579 -34.61047363]
[47.17802048 -39.30064392]
[42.57245636 -53.57610703]
[37.96689224 -67.85156250]
[33.36132812 -82.12702942]
[26.87316132 -95.65121460]
[18.62087250 -108.17717743]
[4.56752920 -115.44451141]
[4.02672958 -130.32929993]
[-4.22555971 -142.85525513]
[-12.47784901 -155.38122559]
[-28.00663567 -158.31930542]
[-36.84045410 -171.42424011]
[-33.73835373 -186.92108154]
[-20.54076004 -195.61585999]
[-5.07756805 -192.35009766]
[3.47718406 -179.06130981]
[0.04811306 -163.63351440]
[8.30040264 -151.10754395]
[16.55269051 -138.58158875]
[30.01577568 -132.21018982]
[31.14683342 -116.42946625]
[39.39912415 -103.90350342]
[39.70864868 -118.90031433]
[45.98854828 -132.52246094]
[57.19119263 -142.49746704]
[71.44773102 -147.16127014]
[86.37985229 -145.73587036]
[99.49654388 -138.45901489]
[108.60964203 -126.54468536]
[112.19888306 -111.98043823]
[109.66550446 -97.19591522]
[101.43212128 -84.65751648]
[88.87225342 -76.45692444]
[74.08116913 -73.96218109]
[59.52634430 -77.58946991]
[47.63678741 -86.73258972]
[52.24235153 -72.45713043]
[56.84791565 -58.18167114]
[61.45347977 -43.90620804]
[84.47035980 -48.16767883]
[107.87062836 -48.77124786]
[131.07659912 -45.70201111]
[153.51535034 -39.03574371]
[174.63294983 -28.93701935]
[193.90802002 -15.65514946]
[210.86474609 0.48196709]
[225.08448792 19.07594490]
[236.21618652 39.66774368]
[243.98504639 61.74899673]
[248.19924927 84.77458191]
[263.17895508 83.99473572]
[278.15869141 83.21488953]
[293.13839722 82.43504333]
[308.11810303 81.65519714]
[323.09780884 80.87535095]
[338.07754517 80.09550476]
[342.78927612 65.66762543]
[352.39782715 53.91857529]
[365.60372925 46.43732834]
[380.62094116 44.23565674]
[395.41854858 47.61132050]
[407.99530029 56.10779190]
[416.65026855 68.57598877]
[420.21295166 83.32968903]
[418.20153809 98.37358093]
[410.88803101 111.67309570]
[399.26153564 121.42958832]
[384.89443970 126.32357025]
[369.72979736 125.69316864]
[355.81845093 119.62364197]
[345.04183960 108.93585205]
[338.85739136 95.07522583]
[323.87765503 95.85506439]
[308.89794922 96.63491058]
[293.91824341 97.41475677]
[278.93853760 98.19460297]
[263.95880127 98.97444916]
[248.97909546 99.75429535]
[248.58850098 110.78368378]
[247.38249207 121.75389099]
[245.36767578 132.60472107]
[242.55513000 143.27662659]
[238.96026611 153.71104431]
[234.60282898 163.85069275]
[229.50671387 173.63995361]
[223.69989014 183.02510071]
[217.21424866 191.95462036]
[210.08535767 200.37951660]
[202.35234070 208.25354004]
[194.05763245 215.53350830]
[185.24676514 222.17945862]
[175.96807861 228.15490723]
[166.27250671 233.42707825]
[156.21324158 237.96704102]
[145.84548950 241.74986267]
[135.22615051 244.75479126]
[124.41350555 246.96534729]
[113.46687317 248.36938477]
[102.44634247 248.95921326]
[91.41239166 248.73158264]
[80.42556000 247.68775940]
[69.54615021 245.83345032]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 21]
[3 20]
[4 19]
[6 17]
[7 16]
[8 15]
[9 14]
[49 87]
[50 86]
[51 85]
[52 84]
[53 70]
[54 69]
[56 67]
[57 66]
[58 65]
[98 126]
[99 125]
[100 124]
[101 123]
[102 122]
[103 121]
[104 120]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
