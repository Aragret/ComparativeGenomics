%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:31 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCUCCAGCAUUCCCCCUCAAACCUAAGAAAUAUGUCUGAUAAAAGAGUUACUUUGAUAGAGxxxxxxxxxxCCGGAGAUGAAAACCUUUUUCCAAGGACAAAUCAGAGAAAAAGUCUUUAACUCCACCAUUCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[154.07289124 276.76162720]
[154.07289124 261.76162720]
[154.07289124 246.76162720]
[154.07289124 231.76162720]
[154.07289124 216.76162720]
[154.07289124 201.76162720]
[154.07289124 186.76162720]
[154.07289124 171.76162720]
[154.07289124 156.76162720]
[154.07289124 141.76162720]
[146.08297729 129.06669617]
[132.55877686 122.57852936]
[119.03459167 116.09036255]
[105.51039886 109.60219574]
[102.40754700 116.36192322]
[95.00915527 121.43178558]
[84.40455627 122.61663055]
[70.17778015 127.37044525]
[56.10626221 132.56585693]
[42.20370483 138.19781494]
[28.30114937 143.82977295]
[28.21754456 159.03048706]
[22.31863976 173.04016113]
[11.50397301 183.72245789]
[-2.57729721 189.44839478]
[-17.77787971 189.34478760]
[-31.77979469 183.42745972]
[-42.44785309 172.59875488]
[-48.15525436 158.50996399]
[-48.03166199 143.30952454]
[-42.09591675 129.31541443]
[-31.25318336 118.66160583]
[-17.15689659 112.97274017]
[-1.95664012 113.11633301]
[12.02965927 119.07048035]
[22.66919136 129.92721558]
[36.57174683 124.29526520]
[50.47430420 118.66330719]
[52.18302917 115.50930023]
[55.53791809 113.05036163]
[60.18381119 112.06645966]
[65.42396545 113.14366913]
[79.65074158 108.38985443]
[83.05372620 93.78096008]
[72.39209747 83.22966766]
[61.73046875 72.67837524]
[53.37224960 68.83234406]
[50.95966339 61.79493713]
[40.51984787 51.02412796]
[25.35930252 46.49992752]
[22.05707932 31.97599411]
[11.61726665 21.20518684]
[1.17745471 10.43437767]
[-9.26235771 -0.33643052]
[-25.21646500 -2.02344346]
[-33.72290802 -15.62564945]
[-28.25626755 -30.70860100]
[-13.01008606 -35.70194626]
[0.32007220 -26.77522087]
[1.50845075 -10.77624321]
[11.94826317 -0.00543445]
[22.38807487 10.76537418]
[32.82788849 21.53618240]
[47.24171066 25.28998566]
[51.29065704 40.58431625]
[61.73046875 51.35512543]
[72.28176117 62.01675034]
[82.94338989 72.56803894]
[93.60501099 83.11933136]
[87.10658264 69.60006714]
[86.46091461 54.61397171]
[91.77246857 40.58588028]
[102.18180847 29.78561974]
[116.00463867 23.96073532]
[131.00434875 24.05373192]
[144.75390625 30.04955864]
[155.02851868 40.97805405]
[160.16574097 55.07093048]
[159.33428955 70.04786682]
[152.66874695 83.48551941]
[141.24760437 93.20957947]
[126.91887665 97.64665222]
[111.99856567 96.07801056]
[125.52275848 102.56616974]
[139.04695129 109.05433655]
[152.57113647 115.54250336]
[157.97091675 110.68457031]
[164.99978638 107.78319550]
[172.93466187 107.37921143]
[180.87681580 109.74285889]
[195.64286804 107.10399628]
[210.40892029 104.46513367]
[219.45179749 91.78190613]
[234.46426392 89.31607056]
[246.50006104 98.01522827]
[261.26611328 95.37636566]
[276.03216553 92.73750305]
[290.79821777 90.09864044]
[305.56427002 87.45977020]
[320.33032227 84.82090759]
[335.09637451 82.18204498]
[337.97509766 67.27977753]
[346.04602051 54.42581940]
[358.21768188 45.35855103]
[372.84393311 41.30425644]
[387.94668579 42.81124115]
[401.48345947 49.67569733]
[411.62344360 60.96926117]
[416.99536133 75.16458130]
[416.87268066 90.34184265]
[411.27197266 104.44845581]
[400.95071411 115.57661438]
[387.30474854 122.22132874]
[372.17959595 123.48394775]
[357.62078857 119.19372559]
[345.59732056 109.93086243]
[337.73526001 96.94809723]
[322.96920776 99.58696747]
[308.20315552 102.22583008]
[293.43707275 104.86469269]
[278.67102051 107.50355530]
[263.90496826 110.14242554]
[249.13891602 112.78128815]
[240.86117554 125.11071014]
[225.92388916 127.99723816]
[213.04779053 119.23118591]
[198.28173828 121.87004852]
[183.51567078 124.50891876]
[197.73924255 129.27232361]
[212.67851257 127.92385101]
[226.59994507 133.50898743]
[236.46490479 144.80865479]
[240.12017822 159.35646057]
[236.76791382 173.97708130]
[227.13983154 185.47924805]
[213.33741760 191.35237122]
[198.37336731 190.31455994]
[185.51387024 182.59228516]
[177.56578064 169.87113953]
[176.26426697 154.92535400]
[169.07289124 141.76162720]
[169.07289124 156.76162720]
[169.07289124 171.76162720]
[169.07289124 186.76162720]
[169.07289124 201.76162720]
[169.07289124 216.76162720]
[169.07289124 231.76162720]
[169.07289124 246.76162720]
[169.07289124 261.76162720]
[169.07289124 276.76162720]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[11 86]
[12 85]
[13 84]
[14 83]
[17 43]
[18 42]
[19 38]
[20 37]
[21 36]
[44 69]
[45 68]
[46 67]
[48 66]
[49 65]
[51 63]
[52 62]
[53 61]
[54 60]
[90 128]
[91 127]
[92 126]
[95 123]
[96 122]
[97 121]
[98 120]
[99 119]
[100 118]
[101 117]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
