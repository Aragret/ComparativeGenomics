%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:34 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCCACAGAACCCUCUAAAUCCCCUUGUAAAUUUAACUGUUAGUCCAAAGAGGAACAGCUCUxxxxxxxxxxAAACAUGCUAGCUUUUAUUCCAGUUCUAACCAAAAAAAUAAACCCUCGUUCCACAGAAGCCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[115.47671509 331.17547607]
[115.47671509 316.17547607]
[115.47671509 301.17547607]
[115.47671509 286.17547607]
[115.47671509 271.17547607]
[115.47671509 256.17547607]
[115.47671509 241.17547607]
[115.47671509 226.17547607]
[115.47671509 211.17547607]
[115.47671509 196.17547607]
[115.20893860 186.36186218]
[117.41598511 177.67996216]
[121.55268860 170.69213867]
[126.95961761 165.76962280]
[132.92161560 163.07287598]
[124.41052246 150.72131348]
[115.89942932 138.36973572]
[107.38833618 126.01816559]
[98.87725067 113.66658783]
[86.01884460 105.94250488]
[71.11694336 104.22981262]
[56.21504211 102.51712799]
[41.31314087 100.80443573]
[26.41123772 99.09174347]
[11.41854191 99.55979156]
[-3.34751391 102.19865417]
[-18.11356926 104.83751678]
[-32.87962341 107.47637939]
[-38.02376556 121.94819641]
[-49.72502899 131.89686584]
[-64.83583832 134.64624023]
[-79.29145050 129.45677185]
[-89.20339203 117.72438049]
[-91.90539551 102.60502625]
[-86.67063141 88.16574860]
[-74.90723419 78.29062653]
[-59.77948761 75.63603210]
[-45.35668564 80.91603088]
[-35.51848984 92.71032715]
[-20.75243378 90.07146454]
[-5.98637819 87.43259430]
[8.77967739 84.79373169]
[-4.96890974 78.79570007]
[-15.45230389 68.06730652]
[-21.13117981 54.18385315]
[-21.17168045 39.18390656]
[-15.56785965 25.26998711]
[-5.14255190 14.48513794]
[8.57344437 8.41295242]
[23.56614494 7.94503736]
[37.63409805 13.15009880]
[48.71164322 23.26385307]
[55.17220688 36.80125046]
[56.06715393 51.77452850]
[51.26507950 65.98509216]
[41.47109222 77.34632874]
[28.12392807 84.18984222]
[43.02582932 85.90253448]
[57.92773056 87.61521912]
[72.82963562 89.32791138]
[87.73153687 91.04060364]
[99.62391663 81.89886475]
[101.80075073 67.05766296]
[96.14807892 52.28072739]
[105.65048218 40.81104660]
[107.82731628 25.96984100]
[110.00415802 11.12863445]
[112.18099213 -3.71257067]
[98.38441467 -9.84095383]
[86.75360870 -19.46524048]
[78.15164948 -31.87124252]
[73.21686554 -46.13835526]
[72.31545258 -61.20786285]
[75.51428986 -75.96150208]
[82.57601166 -89.30446625]
[92.97659302 -100.24661255]
[105.94423676 -107.97595978]
[120.51665497 -111.91893768]
[135.61248779 -111.78295898]
[150.11151123 -107.57810974]
[162.93782043 -99.61641693]
[173.13958740 -88.48868561]
[179.95980835 -75.02067566]
[182.89234924 -60.21180344]
[181.71961975 -45.16098022]
[176.52862549 -30.98508072]
[167.70457458 -18.73604774]
[155.90228271 -9.32284355]
[141.99754333 -3.44398856]
[127.02220154 -1.53573382]
[124.84535980 13.30547142]
[122.66852570 28.14667702]
[120.49168396 42.98788452]
[126.30006409 56.70327759]
[116.64196014 69.23449707]
[114.46511841 84.07570648]
[127.59263611 76.81841278]
[142.17091370 80.35027313]
[150.52134705 92.81101990]
[148.24566650 107.63739014]
[136.54249573 117.02012634]
[121.57606506 116.01721954]
[111.22882080 105.15550232]
[119.73991394 117.50707245]
[128.25100708 129.85864258]
[136.76208496 142.21022034]
[145.27317810 154.56178284]
[157.62475586 163.07287598]
[172.19746399 166.62763977]
[186.77015686 170.18240356]
[194.92280579 157.42257690]
[206.77836609 148.00321960]
[221.05087280 142.94609070]
[236.19210815 142.79972839]
[250.55969238 147.58001709]
[262.59515381 156.76843262]
[270.99291992 169.36827087]
[274.84210205 184.01280212]
[273.72518921 199.11351013]
[267.76327515 213.03236389]
[257.60311890 224.25955200]
[244.34680176 231.57725525]
[229.43226624 234.19168091]
[214.47732544 231.81922913]
[201.10418701 224.71726990]
[190.76345825 213.65615845]
[184.57684326 199.83572388]
[183.21539307 184.75511169]
[168.64270020 181.20034790]
[154.06999207 177.64558411]
[148.17167664 182.27806091]
[159.25617981 192.38418579]
[170.34068298 202.49031067]
[182.47335815 211.31063843]
[182.75181580 226.30804443]
[170.95492554 235.57267761]
[156.45092773 231.74722290]
[150.75779724 217.87048340]
[143.56642151 204.70674133]
[136.37503052 191.54299927]
[130.47671509 196.17547607]
[130.47671509 211.17547607]
[130.47671509 226.17547607]
[130.47671509 241.17547607]
[130.47671509 256.17547607]
[130.47671509 271.17547607]
[130.47671509 286.17547607]
[130.47671509 301.17547607]
[130.47671509 316.17547607]
[130.47671509 331.17547607]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[15 107]
[16 106]
[17 105]
[18 104]
[19 103]
[20 61]
[21 60]
[22 59]
[23 58]
[24 57]
[25 42]
[26 41]
[27 40]
[28 39]
[62 96]
[63 95]
[65 93]
[66 92]
[67 91]
[68 90]
[108 130]
[109 129]
[110 128]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
