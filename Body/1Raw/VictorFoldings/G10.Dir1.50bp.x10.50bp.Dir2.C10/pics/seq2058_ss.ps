%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:37 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGUUAUAACCAAGCAUAAUAUAGCAAGGACUAACCCCUAUACCUUCUGCAUAAUGAAUUAACxxxxxxxxxxAUUUUUUACCUGAGUAGGCCUAGAAAUAAACAUGCUAGCUUUUAUUCCAGUUCUAACCAACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[80.13625336 519.72650146]
[80.13625336 504.72653198]
[80.13625336 489.72653198]
[80.13625336 474.72653198]
[80.13625336 459.72653198]
[80.13625336 444.72653198]
[80.13625336 429.72653198]
[80.13625336 414.72653198]
[80.13625336 399.72653198]
[80.13625336 384.72653198]
[65.44068909 381.82574463]
[51.58903503 376.11175537]
[39.11437607 367.80242920]
[28.49720001 357.21560669]
[20.14688110 344.75677490]
[14.38591290 330.90380859]
[11.43743801 316.18835449]
[11.41661358 301.17565918]
[14.32611465 286.44268799]
[20.05595398 272.55603027]
[28.38764572 260.05014038]
[39.00252914 249.40667725]
[51.49396133 241.03607178]
[65.38289642 235.26156616]
[80.13625336 232.30682373]
[80.13625336 217.30682373]
[80.13625336 202.30682373]
[80.13625336 187.30682373]
[70.54514313 172.64358521]
[79.79940033 156.75842285]
[79.48734283 141.76165771]
[79.17528534 126.76490784]
[69.66693115 115.16356659]
[55.02342606 111.91274261]
[40.37992477 108.66191864]
[25.73642349 105.41108704]
[16.70833015 117.67540741]
[3.46920061 125.20171356]
[-11.68720627 126.68604279]
[-26.13495064 121.87121582]
[-37.37087631 111.59143066]
[-43.44828415 97.62773132]
[-43.31423569 82.39940643]
[-36.99195099 68.54485321]
[-25.57680130 58.46446228]
[-11.04653549 53.90472031]
[4.08139277 55.65562820]
[17.18597794 63.41383362]
[25.99677086 75.83517456]
[28.98724937 90.76758575]
[43.63075256 94.01841736]
[58.27425385 97.26924133]
[72.91775513 100.52006531]
[78.29290771 87.29852295]
[89.01878357 79.54882812]
[101.18758392 78.75747681]
[107.25059509 65.03742218]
[113.31360626 51.31737137]
[112.73100281 45.99946213]
[114.14492798 41.46590042]
[116.90673828 38.35557938]
[120.20667267 36.94919586]
[127.11367035 23.63404083]
[123.96662140 11.08215141]
[130.04455566 0.11503342]
[141.59213257 -3.62138128]
[148.77464294 -16.78996468]
[155.95715332 -29.95854568]
[142.67481995 -22.98862457]
[127.74632263 -21.52578545]
[113.36367798 -25.78482056]
[101.63874817 -35.14035797]
[94.29317474 -48.21868134]
[92.40553284 -63.09943390]
[96.25299835 -77.59760284]
[105.27062988 -89.58436584]
[118.13432312 -97.29962921]
[132.95524597 -99.61054230]
[147.55715942 -96.17776489]
[159.79602051 -87.50536346]
[167.87471008 -74.86674500]
[170.60700989 -60.11769104]
[167.59197998 -45.42449570]
[178.25360107 -55.97578812]
[188.91522217 -66.52707672]
[199.57685852 -77.07836914]
[210.23847961 -87.62965393]
[220.90010071 -98.18094635]
[231.33992004 -108.95175934]
[241.55339050 -119.93742371]
[251.76687622 -130.92308044]
[254.90248108 -147.01966858]
[270.49621582 -152.09585571]
[282.50656128 -140.92970276]
[278.57833862 -125.00798798]
[262.75253296 -120.70960236]
[252.53906250 -109.72393799]
[242.32557678 -98.73827362]
[241.60841370 -93.95693970]
[237.83854675 -89.59582520]
[231.45140076 -87.51931763]
[220.78976440 -76.96803284]
[210.12814331 -66.41674042]
[199.46652222 -55.86545181]
[188.80488586 -45.31415939]
[178.14326477 -34.76287079]
[169.12573242 -22.77603722]
[161.94322205 -9.60745525]
[154.76071167 3.56112766]
[156.15954590 21.02661514]
[140.42881775 30.54104042]
[133.52182007 43.85619736]
[127.03366089 57.38038635]
[120.97064972 71.10044098]
[114.90763855 84.82049561]
[123.16193390 101.53694916]
[115.09690857 120.11488342]
[94.17204285 126.45285034]
[94.48409271 141.44960022]
[94.79615021 156.44636536]
[103.56923676 165.95881653]
[103.48480988 178.49723816]
[95.13625336 187.30682373]
[95.13625336 202.30682373]
[95.13625336 217.30682373]
[95.13625336 232.30682373]
[109.88960266 235.26156616]
[123.77853394 241.03607178]
[136.26997375 249.40667725]
[146.88485718 260.05014038]
[155.21655273 272.55603027]
[160.94638062 286.44268799]
[163.85588074 301.17565918]
[163.83506775 316.18835449]
[160.88658142 330.90380859]
[155.12561035 344.75677490]
[146.77529907 357.21560669]
[136.15812683 367.80242920]
[123.68346405 376.11175537]
[109.83181000 381.82574463]
[95.13625336 384.72653198]
[95.13625336 399.72653198]
[95.13625336 414.72653198]
[95.13625336 429.72653198]
[95.13625336 444.72653198]
[95.13625336 459.72653198]
[95.13625336 474.72653198]
[95.13625336 489.72653198]
[95.13625336 504.72653198]
[95.13625336 519.72650146]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[25 126]
[26 125]
[27 124]
[28 123]
[30 120]
[31 119]
[32 118]
[33 53]
[34 52]
[35 51]
[36 50]
[56 115]
[57 114]
[58 113]
[62 112]
[63 111]
[66 109]
[67 108]
[68 107]
[83 106]
[84 105]
[85 104]
[86 103]
[87 102]
[88 101]
[89 98]
[90 97]
[91 96]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
