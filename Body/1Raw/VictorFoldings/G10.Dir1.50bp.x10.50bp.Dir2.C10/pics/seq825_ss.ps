%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:08 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGACCCCCCACAGUUUAUGUAGCUUACCUCCUCAAAGCAAUACACUGAAAAUGUUUAGACGGxxxxxxxxxxUCCUCCGACCCCCUAACAACCCCCCUCCUAAUACUAACUACCUGACUCCUACCCCUCACACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[175.72171021 178.87281799]
[163.64172363 169.98046875]
[151.56173706 161.08811951]
[139.48175049 152.19577026]
[127.40176392 143.30342102]
[115.32176971 134.41107178]
[100.67826843 137.66189575]
[93.49576569 150.83047485]
[86.31325531 163.99905396]
[79.13074493 177.16764832]
[76.85454559 193.96809387]
[60.08054352 196.43168640]
[53.06973267 180.99520874]
[65.96215820 169.98513794]
[73.14466858 156.81655884]
[80.32717896 143.64796448]
[87.50968933 130.47938538]
[77.99318695 120.37947845]
[74.25920868 108.30722809]
[59.26651382 108.77526855]
[44.27381897 109.24331665]
[40.55061340 111.75314331]
[36.61678696 112.80007172]
[32.97074509 112.50301361]
[30.01769829 111.13425446]
[28.02674294 109.07429504]
[13.04702854 108.29444885]
[-1.93268633 107.51460266]
[-16.91240120 106.73476410]
[-31.90509605 106.26671600]
[-46.90428543 106.11067963]
[-61.90347290 105.95464325]
[-76.90266418 105.79860687]
[-85.29177094 118.74567413]
[-99.35824585 125.08110809]
[-114.61352539 122.78330994]
[-126.18971252 112.58549500]
[-130.39288330 97.74174500]
[-125.88182068 82.98864746]
[-114.09598541 73.03386688]
[-98.79620361 71.05393219]
[-84.86457062 77.68063354]
[-76.74662781 90.79942322]
[-61.74743652 90.95545959]
[-46.74824905 91.11149597]
[-31.74905968 91.26753235]
[-27.73081398 88.57881165]
[-21.96806908 88.43024445]
[-16.13255501 91.75504303]
[-1.15284121 92.53488922]
[13.82687283 93.31473541]
[28.80658722 94.09458160]
[43.80577469 94.25061798]
[58.79847336 93.78257751]
[73.79116821 93.31453705]
[76.09524536 87.34452057]
[79.73735046 82.08287048]
[84.51361847 77.82410431]
[90.15671539 74.80658722]
[96.35076141 73.19922638]
[98.52759552 58.35802078]
[100.70443726 43.51681519]
[102.88127136 28.67561150]
[90.03335571 13.30753613]
[92.48764038 -6.26779461]
[108.24121094 -17.63422203]
[101.67782593 -32.02979660]
[110.44630432 -44.06985855]
[111.69317627 -59.01794434]
[112.94004822 -73.96603394]
[99.41237640 -80.89931488]
[89.57149506 -92.48488617]
[84.91806793 -106.95603943]
[86.16172028 -122.10601044]
[93.11279297 -135.62455750]
[104.71130371 -145.45018005]
[119.18856049 -150.08456421]
[134.33688354 -148.82099915]
[147.84626770 -141.85214233]
[157.65664673 -130.24072266]
[162.27197266 -115.75737762]
[160.98846436 -100.61072540]
[154.00186157 -87.11051941]
[142.37753296 -77.31543732]
[127.88813782 -72.71915436]
[126.64126587 -57.77106857]
[125.39438629 -42.82298279]
[132.04695129 -29.49659538]
[123.18929291 -16.38734627]
[131.77207947 -10.55679321]
[137.17300415 -1.60250294]
[138.34468079 8.87030029]
[135.00509644 18.95076752]
[127.70160675 26.77107239]
[117.72248077 30.85244751]
[115.54563904 45.69365311]
[113.36880493 60.53485870]
[111.19197083 75.37606812]
[129.39813232 94.05249786]
[124.21411896 122.33108521]
[136.29411316 131.22343445]
[148.37409973 140.11578369]
[160.45408630 149.00813293]
[172.53407288 157.90048218]
[184.61405945 166.79283142]
[195.02122498 155.96018982]
[206.75332642 146.57867432]
[219.60961914 138.80882263]
[233.37013245 132.78358459]
[247.79937744 128.60604858]
[262.65048218 126.34770966]
[277.66928101 126.04720306]
[292.59881592 127.70967865]
[307.18362427 131.30668640]
[321.17413330 136.77667236]
[334.33093262 144.02604675]
[346.42892456 152.93075562]
[357.26107788 163.33842468]
[366.64202881 175.07098389]
[374.41125488 187.92764282]
[380.43585205 201.68843079]
[384.61270142 216.11788940]
[386.87033081 230.96908569]
[387.17010498 245.98791504]
[385.50692749 260.91735840]
[381.90924072 275.50201416]
[376.43856812 289.49224854]
[369.18856812 302.64871216]
[360.28329468 314.74627686]
[349.87512207 325.57791138]
[338.14212036 334.95831299]
[325.28506470 342.72695923]
[311.52398682 348.75088501]
[297.09436035 352.92703247]
[282.24304199 355.18395996]
[267.22421265 355.48303223]
[252.29481506 353.81915283]
[237.71035767 350.22073364]
[223.72036743 344.74942017]
[210.56425476 337.49880981]
[198.46711731 328.59295654]
[187.63597107 318.18423462]
[178.25613403 306.45080566]
[170.48811340 293.59338379]
[164.46482849 279.83203125]
[160.28935242 265.40219116]
[158.03314209 250.55076599]
[157.73478699 235.53190613]
[159.39938354 220.60261536]
[162.99847412 206.01831055]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 105]
[2 104]
[3 103]
[4 102]
[5 101]
[6 100]
[7 17]
[8 16]
[9 15]
[10 14]
[19 55]
[20 54]
[21 53]
[26 52]
[27 51]
[28 50]
[29 49]
[30 46]
[31 45]
[32 44]
[33 43]
[60 98]
[61 97]
[62 96]
[63 95]
[66 89]
[68 87]
[69 86]
[70 85]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
