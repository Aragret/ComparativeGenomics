%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:03 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGAAAAAUUAUAACCAAGCAUAAUAUAGCAAGGACUAACCCCUAUACCUUCUGCAUAAUGAAxxxxxxxxxxGACUCAUUAAAUUAUGAUAAUCAUAUUUACCAAAUGCCCCUCAUUUACAUAAAUAUUAUACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[93.74192047 270.41577148]
[93.74192047 255.41577148]
[93.74192047 240.41577148]
[93.74192047 225.41577148]
[93.74192047 210.41577148]
[93.74192047 195.41577148]
[93.74192047 180.41577148]
[93.74192047 165.41577148]
[93.74192047 150.41577148]
[93.74192047 135.41577148]
[72.32133484 111.50815582]
[80.30929565 86.30122375]
[71.29177094 74.31439209]
[62.27423859 62.32755661]
[52.76588058 50.72621536]
[42.78315353 39.53044891]
[32.80042648 28.33468437]
[22.81770134 17.13891792]
[12.83497524 5.94315243]
[11.58226395 20.89075089]
[1.13947523 31.65867424]
[-13.76270485 33.36894608]
[-26.37344360 25.24679947]
[-30.97995186 10.97164345]
[-25.49543762 -2.98973513]
[-12.40443802 -10.31269550]
[2.36304474 -7.67966461]
[-5.88924456 -20.20562553]
[-14.14153385 -32.73159027]
[-22.39382362 -45.25754929]
[-30.64611244 -57.78351212]
[-38.89839935 -70.30947113]
[-51.11172485 -70.25663757]
[-61.73688889 -75.98468018]
[-68.24974060 -85.97791290]
[-69.17761230 -97.72691345]
[-82.56389618 -104.49503326]
[-95.95018005 -111.26314545]
[-109.47437286 -117.75131226]
[-123.13061523 -123.95671844]
[-136.78684998 -130.16212463]
[-148.15350342 -120.02708435]
[-162.66172791 -115.39768982]
[-177.79788208 -117.07599640]
[-190.93954468 -124.77124786]
[-199.80982971 -137.15017700]
[-202.87190247 -152.06806946]
[-199.59526062 -166.94030762]
[-190.54759216 -179.19018555]
[-177.29646301 -186.69534302]
[-162.13769531 -188.15545654]
[-147.69766235 -183.31756592]
[-136.47817993 -173.01985168]
[-130.42308044 -159.04646301]
[-130.58145142 -143.81835938]
[-116.92520905 -137.61296082]
[-103.26896667 -131.40754700]
[-98.50681305 -132.24266052]
[-93.17575073 -130.04924011]
[-89.18206787 -124.64942932]
[-75.79578400 -117.88131714]
[-62.40949631 -111.11320496]
[-57.70587921 -114.73271942]
[-52.25139999 -117.07228851]
[-51.62742233 -132.05931091]
[-51.00344467 -147.04632568]
[-50.37946701 -162.03334045]
[-49.75548935 -177.02035522]
[-49.13151550 -192.00737000]
[-62.93589401 -198.37191772]
[-73.25019836 -209.53810120]
[-78.50157166 -223.80314636]
[-77.88921356 -238.99174500]
[-71.50650787 -252.78773499]
[-60.32677078 -263.08734131]
[-46.05482864 -268.31994629]
[-30.86705208 -267.68762207]
[-17.07946396 -261.28677368]
[-6.79457283 -250.09349060]
[-1.58074903 -235.81468201]
[-2.23306346 -220.62774658]
[-8.65204239 -206.84858704]
[-19.85883904 -196.57843018]
[-34.14449692 -191.38339233]
[-34.76847458 -176.39637756]
[-35.39245224 -161.40936279]
[-36.01642990 -146.42234802]
[-36.64040756 -131.43533325]
[-37.26438522 -116.44831085]
[-22.21331787 -100.57389832]
[-26.37243843 -78.56175995]
[-18.12014961 -66.03580475]
[-9.86786079 -53.50983810]
[-1.61557162 -40.98387909]
[6.63671732 -28.45791626]
[14.88900661 -15.93195343]
[24.03074074 -4.03957367]
[34.01346588 7.15619183]
[43.99619293 18.35195732]
[53.97891998 29.54772377]
[63.96164703 40.74348831]
[66.81432343 41.00724030]
[69.72996521 42.45396042]
[72.24340057 45.11187744]
[73.88865662 48.83534241]
[74.26107025 53.31002808]
[83.27860260 65.29685974]
[92.29613495 77.28369141]
[104.39365387 73.37871552]
[118.23857117 76.21133423]
[130.02113342 86.37068176]
[135.88996887 102.31316376]
[150.46266174 105.86792755]
[165.03536987 109.42269135]
[179.60807800 112.97745514]
[194.18077087 116.53221130]
[208.58180237 109.46184540]
[223.02641296 116.44273376]
[226.43392944 132.11973572]
[216.19041443 144.46679688]
[200.15380859 144.01231384]
[190.62600708 131.10491943]
[176.05331421 127.55015564]
[161.48060608 123.99539185]
[146.90789795 120.44062805]
[132.33520508 116.88587189]
[126.43688202 121.51834106]
[137.52139282 131.62446594]
[148.60589600 141.73059082]
[159.69039917 151.83671570]
[173.42803955 157.85977173]
[180.22212219 171.23289490]
[176.98553467 185.87954712]
[165.18891907 195.14453125]
[150.19247437 194.81799316]
[138.81033325 185.04829407]
[136.21438599 170.27450562]
[129.02301025 157.11076355]
[121.83162689 143.94703674]
[114.64024353 130.78329468]
[108.74192047 135.41577148]
[108.74192047 150.41577148]
[108.74192047 165.41577148]
[108.74192047 180.41577148]
[108.74192047 195.41577148]
[108.74192047 210.41577148]
[108.74192047 225.41577148]
[108.74192047 240.41577148]
[108.74192047 255.41577148]
[108.74192047 270.41577148]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[12 108]
[13 107]
[14 106]
[15 101]
[16 100]
[17 99]
[18 98]
[19 97]
[27 96]
[28 95]
[29 94]
[30 93]
[31 92]
[32 91]
[36 62]
[37 61]
[38 60]
[39 57]
[40 56]
[41 55]
[64 89]
[65 88]
[66 87]
[67 86]
[68 85]
[69 84]
[112 126]
[113 125]
[114 124]
[115 123]
[116 122]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
