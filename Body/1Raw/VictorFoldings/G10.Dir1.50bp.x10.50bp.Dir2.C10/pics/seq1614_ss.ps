%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:52 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGAGCGCAAGUACCCACGUAAAGACGUUAGGUCAAGGUGUAGCCCAUGAGGUGGCAAGAAAUxxxxxxxxxxUGUCAAAGUUAAAUUAUAGGCUAAAUCCUAUAUAUCUUAAUGGCACAUGCAGCGCAAGUACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[112.55319214 255.35591125]
[112.55319214 240.35591125]
[112.55319214 225.35591125]
[112.55319214 210.35591125]
[112.55319214 195.35591125]
[112.55319214 180.35591125]
[112.55319214 165.35591125]
[112.55319214 150.35591125]
[112.55319214 135.35591125]
[112.55319214 120.35591125]
[97.21006012 120.78854370]
[86.82138062 112.31120300]
[72.59460449 117.06501770]
[58.36782074 121.81883240]
[44.14104462 126.57264709]
[40.98503876 141.53883362]
[30.82866859 152.84126282]
[16.47402763 157.51145935]
[1.80723095 154.39039612]
[-9.25358391 144.41421509]
[-23.48036385 149.16802979]
[-37.70714188 153.92184448]
[-49.55063629 167.98284912]
[-66.58654022 163.88674927]
[-80.71134186 168.93550110]
[-94.83614349 173.98426819]
[-108.96094513 179.03302002]
[-119.15628052 191.87774658]
[-135.33589172 189.20338440]
[-140.85557556 173.76106262]
[-130.03717041 161.43653870]
[-114.00970459 164.90821838]
[-99.88490295 159.85946655]
[-85.76010132 154.81069946]
[-71.63529205 149.76194763]
[-66.14970398 138.93533325]
[-54.37127686 134.63560486]
[-42.46095657 139.69506836]
[-28.23417854 134.94125366]
[-14.00739861 130.18743896]
[-11.16581726 115.56584930]
[-1.32154107 104.25451660]
[12.95714283 99.35700989]
[27.86799049 102.28334045]
[39.38722610 112.34586334]
[53.61400604 107.59204865]
[67.84078979 102.83823395]
[82.06756592 98.08441925]
[96.77818298 79.27399445]
[121.88684082 90.36092377]
[130.39793396 78.00935364]
[115.40029144 77.74349976]
[106.08914948 65.98329163]
[109.27020264 51.32447052]
[122.61835480 44.48146057]
[136.37719727 50.45594788]
[140.49021912 64.88040924]
[143.57730103 49.36330414]
[157.72891235 44.71774673]
[167.47656250 33.31672668]
[177.22421265 21.91570473]
[180.31129456 6.39860010]
[194.46289062 1.75304127]
[204.21055603 -9.64797974]
[189.96043396 -4.96458340]
[175.00891113 -3.75957179]
[160.19268799 -6.10037804]
[146.34086609 -11.85600948]
[134.22863770 -20.70437622]
[124.53376770 -32.15032196]
[117.79881287 -45.55332184]
[114.40066528 -60.16333771]
[114.52947998 -75.16278839]
[118.17803955 -89.71228790]
[125.14218903 -102.99764252]
[135.03219604 -114.27539825]
[147.29461670 -122.91443634]
[161.24324036 -128.43132019]
[176.09747314 -130.51733398]
[191.02609253 -129.05570984]
[205.19367981 -124.12827301]
[217.80738831 -116.01074982]
[228.16137695 -105.15740204]
[235.67620850 -92.17559814]
[239.93135071 -77.79179382]
[240.68869019 -62.81092453]
[237.90583801 -48.07132721]
[231.73854065 -34.39783478]
[222.53242493 -22.55615616]
[236.54913330 -27.89766884]
[250.56585693 -33.23918152]
[264.58255005 -38.58069611]
[278.54296875 -44.06772614]
[292.44549561 -49.69968414]
[306.28872681 -55.47595596]
[320.07110596 -61.39591980]
[333.85348511 -67.31587982]
[347.63586426 -73.23584747]
[361.41824341 -79.15580750]
[375.20062256 -85.07576752]
[380.82479858 -99.84548187]
[395.27941895 -106.23605347]
[409.98883057 -100.45606232]
[416.22622681 -85.93467712]
[410.29104614 -71.28718567]
[395.70452881 -65.20367432]
[381.12060547 -71.29338837]
[367.33822632 -65.37342834]
[353.55584717 -59.45346451]
[339.77346802 -53.53350067]
[325.99105835 -47.61353683]
[312.20867920 -41.69357300]
[307.27215576 -36.12793350]
[298.07745361 -35.79712677]
[284.17489624 -30.16517067]
[279.12365723 -24.70343399]
[269.92407227 -24.56398201]
[255.90736389 -19.22246933]
[241.89065552 -13.88095665]
[227.87393188 -8.53944397]
[215.61157227 0.09967239]
[205.86392212 11.50069332]
[203.47406006 26.20232010]
[188.62522888 31.66335678]
[178.87757874 43.06437683]
[169.12992859 54.46539688]
[166.74006653 69.16702271]
[151.89123535 74.62805939]
[142.74951172 86.52043915]
[134.23841858 98.87201691]
[146.30032349 89.95515442]
[161.16430664 87.93966675]
[175.16519165 93.32251740]
[184.85066223 104.77641296]
[187.83247375 119.47705078]
[183.37536621 133.79956055]
[172.57836914 144.21229553]
[158.10382080 148.14768982]
[143.52084351 144.63536072]
[132.42527771 134.54136658]
[127.55319214 120.35591125]
[127.55319214 135.35591125]
[127.55319214 150.35591125]
[127.55319214 165.35591125]
[127.55319214 180.35591125]
[127.55319214 195.35591125]
[127.55319214 210.35591125]
[127.55319214 225.35591125]
[127.55319214 240.35591125]
[127.55319214 255.35591125]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[12 48]
[13 47]
[14 46]
[15 45]
[20 40]
[21 39]
[22 38]
[24 35]
[25 34]
[26 33]
[27 32]
[50 130]
[51 129]
[57 128]
[59 126]
[60 125]
[61 124]
[63 122]
[64 121]
[89 120]
[90 119]
[91 118]
[92 117]
[93 115]
[94 114]
[95 112]
[96 111]
[97 110]
[98 109]
[99 108]
[100 107]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
