%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:59 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGACAUCACCCCAUAAACAAAUAGGUUUGGUCCUAGCCUUUCUAUUAGCUCUUAGUAAGAUUxxxxxxxxxxAAAAAAAGUAAAAGGAACUCGGCAAAUCUUACCCCGCCUGUUUACCAAAAACAUCACCUCCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[98.79178619 479.81808472]
[98.79178619 464.81808472]
[98.79178619 449.81808472]
[98.79178619 434.81808472]
[98.79178619 419.81808472]
[98.79178619 404.81808472]
[98.79178619 389.81808472]
[98.79178619 374.81808472]
[98.79178619 359.81808472]
[98.79178619 344.81808472]
[82.09168243 341.09249878]
[66.71838379 333.56292725]
[53.52531052 322.64346313]
[43.24579239 308.93643188]
[36.45227432 293.19924927]
[33.52445221 276.30255127]
[34.62805176 259.18203735]
[39.70545197 242.78660583]
[48.47868347 228.02583313]
[60.46464539 215.71945190]
[75.00169373 206.55186462]
[91.28617859 201.03407288]
[89.72859955 186.11515808]
[88.17102051 171.19624329]
[86.61344147 156.27732849]
[85.05585480 141.35842896]
[83.49827576 126.43950653]
[73.05846405 115.66870117]
[58.19541550 113.64636993]
[43.33237076 111.62403107]
[28.46932220 109.60169983]
[13.60627651 107.57936096]
[4.81400156 118.24214935]
[-8.00320816 123.11372375]
[-21.44383812 121.01611328]
[-31.99746895 112.60585785]
[-36.96161270 100.17391205]
[-51.77936935 97.84281158]
[-66.59712982 95.51170349]
[-81.69816589 101.90629578]
[-94.62174988 91.81109619]
[-92.07321167 75.61119080]
[-76.67426300 69.97164917]
[-64.26602173 80.69394684]
[-49.44826889 83.02505493]
[-34.63050842 85.35615540]
[-23.44342232 73.38308716]
[-7.16541624 70.38434601]
[7.85171461 77.73059082]
[15.62861061 92.71631622]
[30.49165726 94.73865509]
[45.35470581 96.76098633]
[60.21775055 98.78331757]
[75.08079529 100.80565643]
[84.71340942 84.60803986]
[100.72300720 81.56011200]
[107.35150909 68.10414886]
[100.08270264 57.84349823]
[97.90455627 45.53268814]
[101.17338562 33.54063416]
[109.20337677 24.14815331]
[120.40936279 19.11420059]
[132.61946106 19.34662056]
[139.80197144 6.17803764]
[146.98448181 -6.99054480]
[154.16699219 -20.15912819]
[161.34950256 -33.32770920]
[168.53201294 -46.49629211]
[175.71452332 -59.66487503]
[182.89701843 -72.83345795]
[171.14326477 -82.21535492]
[161.19734192 -93.49587250]
[153.36154175 -106.33219910]
[147.87396240 -120.33425140]
[144.90136719 -135.07653809]
[144.53408813 -150.11103821]
[146.78329468 -164.98088074]
[151.58062744 -179.23417664]
[158.78030396 -192.43780518]
[168.16354370 -204.19050598]
[179.44519043 -214.13514709]
[192.28239441 -221.96949768]
[206.28507996 -227.45549011]
[221.02769470 -230.42640686]
[236.06224060 -230.79197693]
[250.93182373 -228.54109192]
[265.18457031 -223.74214172]
[278.38739014 -216.54095459]
[290.13903809 -207.15638733]
[300.08239746 -195.87362671]
[307.91528320 -183.03552246]
[313.39968872 -169.03222656]
[316.36892700 -154.28926086]
[316.73278809 -139.25468445]
[314.48022461 -124.38535309]
[309.67965698 -110.13313293]
[302.47698975 -96.93114471]
[293.09109497 -85.18056488]
[281.80718994 -75.23849487]
[268.96820068 -67.40705872]
[254.96426392 -61.92424011]
[240.22097778 -58.95666122]
[225.18635559 -58.59450150]
[210.31727600 -60.84876251]
[196.06561279 -65.65094757]
[188.88310242 -52.48236465]
[181.70059204 -39.31378174]
[174.51808167 -26.14520073]
[167.33557129 -12.97661877]
[160.15306091 0.19196412]
[152.97055054 13.36054707]
[145.78804016 26.52912903]
[154.09764099 42.05389786]
[151.44976807 59.62060928]
[138.71086121 72.22625732]
[120.80747223 74.73264313]
[114.17897034 88.18861389]
[119.34204865 109.82229614]
[98.41719055 124.88192749]
[99.97476959 139.80084229]
[101.53234863 154.71975708]
[103.08992767 169.63867188]
[104.64751434 184.55757141]
[106.20509338 199.47648621]
[119.19482422 200.64796448]
[131.76525879 204.10974121]
[143.51602173 209.75007629]
[154.07315063 217.38786316]
[163.10089111 226.77841187]
[170.31248474 237.62138367]
[175.47924805 249.57028198]
[178.43775940 262.24362183]
[179.09512329 275.23699951]
[177.43182373 288.13616943]
[173.50230408 300.53005981]
[167.43321228 312.02398682]
[159.41931152 322.25219727]
[149.71723938 330.88949585]
[138.63722229 337.66162109]
[126.53327942 342.35391235]
[113.79178619 344.81808472]
[113.79178619 359.81808472]
[113.79178619 374.81808472]
[113.79178619 389.81808472]
[113.79178619 404.81808472]
[113.79178619 419.81808472]
[113.79178619 434.81808472]
[113.79178619 449.81808472]
[113.79178619 464.81808472]
[113.79178619 479.81808472]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[22 124]
[23 123]
[24 122]
[25 121]
[26 120]
[27 119]
[28 54]
[29 53]
[30 52]
[31 51]
[32 50]
[37 46]
[38 45]
[39 44]
[56 117]
[57 116]
[63 112]
[64 111]
[65 110]
[66 109]
[67 108]
[68 107]
[69 106]
[70 105]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
