%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:52 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCUCAUACUAGGCCUACUAACCAACACACUAACCAUAUACCAAUGAUGGCGCGAUGUAACAxxxxxxxxxxAAAAUGACAUCAAAAAAAUCGUAGCCUUCUCCACUUCAAGUCAACUAGGACUCAUAAUAGCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[193.47180176 480.49673462]
[193.47180176 465.49673462]
[193.47180176 450.49673462]
[193.47180176 435.49673462]
[193.47180176 420.49673462]
[193.47180176 405.49673462]
[193.47180176 390.49673462]
[193.47180176 375.49673462]
[193.47180176 360.49673462]
[193.47180176 345.49673462]
[191.60418701 330.61346436]
[187.89802551 316.07852173]
[171.24147034 310.36651611]
[161.21955872 295.69812012]
[161.96607971 277.79211426]
[173.37152100 263.76608276]
[169.06394958 249.39791870]
[164.75636292 235.02972412]
[158.83639526 221.24734497]
[151.38148499 208.23103333]
[143.92657471 195.21472168]
[136.47166443 182.19842529]
[130.37876892 177.92965698]
[129.00028992 168.83285522]
[121.81777954 155.66427612]
[114.63526917 142.49569702]
[92.52685547 144.31961060]
[72.23896790 135.34686279]
[58.71392059 117.76330566]
[55.24652863 95.85244751]
[40.75093460 91.99528503]
[26.25533676 88.13813019]
[10.92962074 92.06661224]
[0.61992759 81.31675720]
[-13.87566948 77.45959473]
[-22.29199791 90.04705048]
[-34.34096146 99.21772766]
[-48.71557236 103.97684479]
[-63.85658646 103.80818176]
[-78.12161255 98.73002625]
[-89.96329498 89.29322815]
[-98.09713745 76.52140045]
[-101.64083099 61.79996109]
[-100.20999146 46.72576141]
[-93.95982361 32.93394852]
[-83.56829834 21.92055321]
[-70.16260529 14.88022327]
[-55.19690704 12.57664394]
[-40.29455566 15.25969028]
[-27.07205772 22.63832283]
[-16.96368599 33.91216660]
[-11.06592178 47.85831451]
[-10.01850986 62.96400070]
[4.47708702 66.82115936]
[18.76597977 62.61677933]
[30.11249542 73.64253235]
[44.60809326 77.49968719]
[59.10368729 81.35684967]
[65.10776520 71.66967010]
[73.35540771 63.80412674]
[83.31629181 58.26597214]
[94.34992981 55.41130066]
[94.97390747 40.42428589]
[95.59788513 25.43726921]
[96.22186279 10.45025253]
[96.84584045 -4.53676319]
[82.53735352 -9.37864399]
[70.17336273 -18.05669022]
[60.75617218 -29.86741257]
[55.04918671 -43.85337067]
[53.51504135 -58.88077927]
[56.27811050 -73.73144531]
[63.11440277 -87.20147705]
[73.46972656 -98.19892883]
[86.50462341 -105.83228302]
[101.16241455 -109.48274231]
[116.25485992 -108.85437775]
[130.55847168 -103.99812317]
[142.91374207 -95.30766296]
[152.31906128 -83.48748016]
[158.01199341 -69.49579620]
[159.53103638 -54.46685410]
[156.75305176 -39.61897659]
[149.90322876 -26.15581703]
[139.53686523 -15.16877365]
[126.49430847 -7.54851627]
[111.83285522 -3.91278577]
[111.20887756 11.07423019]
[110.58489990 26.06124687]
[109.96092224 41.04826355]
[109.33694458 56.03527832]
[118.97296906 59.25565338]
[127.63948822 64.55802155]
[134.89366150 71.67143250]
[140.36480713 80.23240662]
[143.77334595 89.80348969]
[144.94512939 99.89559937]
[143.82025146 109.99304199]
[140.45620728 119.57984924]
[135.02490234 128.16615295]
[127.80384827 135.31318665]
[134.98635864 148.48176575]
[142.16886902 161.65036011]
[149.48797607 174.74351501]
[156.94288635 187.75981140]
[164.39779663 200.77612305]
[171.85270691 213.79243469]
[173.71842957 198.90892029]
[182.18139648 186.52432251]
[195.36964417 179.37799072]
[210.36607361 179.05062866]
[223.85360718 185.61466980]
[232.84892273 197.61817932]
[235.36235046 212.40609741]
[230.83792114 226.70748901]
[220.27642822 237.35899353]
[206.01396179 242.00462341]
[191.20523071 239.61679077]
[179.12454224 230.72213745]
[183.43212891 245.09033203]
[187.73971558 259.45852661]
[200.04968262 262.02386475]
[210.02732849 269.55691528]
[215.79867554 280.56536865]
[216.31301880 292.91183472]
[211.53361511 304.22872925]
[202.43295288 312.37234497]
[206.13911438 326.90728760]
[211.59292603 312.93389893]
[222.48710632 302.62289429]
[236.73915100 297.94534302]
[251.62461853 299.79541016]
[264.29803467 307.81942749]
[272.33670044 320.48355103]
[274.20397949 335.36685181]
[269.54293823 349.62429810]
[259.24456787 360.53042603]
[245.27746582 366.00039673]
[230.31163025 364.98858643]
[217.20791626 357.68838501]
[208.47180176 345.49673462]
[208.47180176 360.49673462]
[208.47180176 375.49673462]
[208.47180176 390.49673462]
[208.47180176 405.49673462]
[208.47180176 420.49673462]
[208.47180176 435.49673462]
[208.47180176 450.49673462]
[208.47180176 465.49673462]
[208.47180176 480.49673462]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[11 128]
[12 127]
[16 121]
[17 120]
[18 119]
[19 107]
[20 106]
[21 105]
[22 104]
[24 103]
[25 102]
[26 101]
[30 58]
[31 57]
[32 56]
[34 54]
[35 53]
[62 91]
[63 90]
[64 89]
[65 88]
[66 87]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
