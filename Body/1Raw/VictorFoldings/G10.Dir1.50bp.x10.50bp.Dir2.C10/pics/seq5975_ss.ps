%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:43 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGACCAAGAGCCUUCAAAGCCCUCAGUAAGUUGCAAUACUUAAUUUCUGUAACAGCUAAGGAxxxxxxxxxxGCUAUUACCUUCUUAUUAUUUGAUCUAGAAAUUGCCCUCCUUUUACCCCUACCAUGAGCCCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[106.01117706 477.06338501]
[106.01117706 462.06338501]
[106.01117706 447.06338501]
[106.01117706 432.06338501]
[106.01117706 417.06338501]
[106.01117706 402.06338501]
[106.01117706 387.06338501]
[106.01117706 372.06338501]
[106.01117706 357.06338501]
[106.01117706 342.06338501]
[89.84704590 338.88012695]
[74.66560364 332.46887207]
[61.10432816 323.09652710]
[49.73312378 311.15447998]
[41.03036499 297.14205933]
[35.36279297 281.64584351]
[32.97003555 265.31500244]
[33.95449448 248.83404541]
[38.27696609 232.89430237]
[45.75817871 218.16476440]
[56.08625031 205.26408386]
[68.82968140 194.73458862]
[83.45536041 187.01943970]
[99.35091400 182.44404602]
[98.10403442 167.49595642]
[96.85716248 152.54786682]
[95.61029053 137.59977722]
[87.21595764 135.63117981]
[79.48482513 131.81416321]
[72.81795502 126.34671783]
[67.56120300 119.51248932]
[63.98726654 111.66602325]
[62.28155518 103.21435547]
[47.37965393 101.50166321]
[32.47774887 99.78897858]
[17.57584763 98.07628632]
[7.18102074 109.59701538]
[-8.00721550 112.77460480]
[-22.14867401 106.38721466]
[-29.80567551 92.89092255]
[-28.03394699 77.47532654]
[-17.51475334 66.06803894]
[-2.29293990 63.05539703]
[11.77839565 69.59581757]
[19.28853798 83.17438507]
[34.19044113 84.88706970]
[49.09234238 86.59976196]
[63.99424362 88.31245422]
[78.52075195 68.82861328]
[101.90027618 62.19256592]
[105.60643768 47.65763092]
[109.31259918 33.12269211]
[113.01876068 18.58775711]
[116.72492218 4.05282068]
[120.43108368 -10.48211575]
[124.13724518 -25.01705170]
[125.07287598 -39.98784256]
[123.20526123 -54.87112427]
[121.33764648 -69.75440216]
[119.47003937 -84.63768005]
[110.07471466 -97.36711884]
[116.16716766 -110.95870972]
[114.29955292 -125.84198761]
[112.43194580 -140.72526550]
[97.64757538 -144.07167053]
[84.90103912 -152.27540588]
[75.73152161 -164.34585571]
[71.24629974 -178.82545471]
[71.98697662 -193.96571350]
[77.86412811 -207.93835449]
[88.16803741 -219.05613708]
[101.65447235 -225.97653198]
[116.69487762 -227.86386108]
[131.47305298 -224.49023438]
[144.20445251 -216.26300049]
[153.35171509 -204.17567444]
[157.81024170 -189.68783569]
[157.04165649 -174.54898071]
[151.13877869 -160.58718872]
[140.81439209 -149.48840332]
[127.31522369 -142.59288025]
[129.18283081 -127.70960236]
[131.05044556 -112.82632446]
[140.31217957 -101.16143799]
[134.35331726 -86.50529480]
[136.22093201 -71.62201691]
[138.08854675 -56.73873520]
[139.95616150 -41.85545731]
[146.19439697 -55.49672699]
[156.27830505 -66.60145569]
[169.25669861 -74.12218475]
[183.90539551 -77.34952545]
[198.84265137 -75.97905731]
[212.65953064 -70.14005280]
[224.05273438 -60.38327789]
[231.94761658 -47.62903214]
[235.59950256 -33.08036041]
[234.66389465 -18.10956764]
[229.22908020 -4.12877083]
[219.80766296 7.54329348]
[207.28834534 15.80565834]
[192.85200500 19.87897682]
[177.86033630 19.37903404]
[163.72743225 14.35298634]
[151.78639221 5.27491570]
[143.16352844 -6.99888992]
[138.67218018 -21.31089020]
[134.96601868 -6.77595425]
[131.25985718 7.75898218]
[127.55370331 22.29391861]
[123.84754181 36.82885361]
[120.14138031 51.36379242]
[116.43521881 65.89872742]
[126.98007965 73.44650269]
[134.35885620 84.11030579]
[137.70564270 96.63876343]
[136.62770081 109.56165314]
[131.25151062 121.36248779]
[122.20799255 130.65646362]
[110.55837250 136.35290527]
[111.80525208 151.30099487]
[113.05212402 166.24908447]
[114.29899597 181.19717407]
[127.85578156 182.49678040]
[140.99838257 186.05464172]
[153.35346985 191.76856995]
[164.57031250 199.47512817]
[174.33064270 208.95434570]
[182.35777283 219.93594360]
[188.42440796 232.10711670]
[192.35906982 245.12138367]
[194.05096436 258.60845947]
[193.45307922 272.18481445]
[190.58351135 285.46456909]
[185.52490234 298.07043457]
[178.42207336 309.64450073]
[169.47787476 319.85827637]
[158.94740295 328.42214966]
[147.13069153 335.09356689]
[134.36418152 339.68380737]
[121.01117706 342.06338501]
[121.01117706 357.06338501]
[121.01117706 372.06338501]
[121.01117706 387.06338501]
[121.01117706 402.06338501]
[121.01117706 417.06338501]
[121.01117706 432.06338501]
[121.01117706 447.06338501]
[121.01117706 462.06338501]
[121.01117706 477.06338501]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[24 123]
[25 122]
[26 121]
[27 120]
[33 48]
[34 47]
[35 46]
[36 45]
[50 113]
[51 112]
[52 111]
[53 110]
[54 109]
[55 108]
[56 107]
[57 88]
[58 87]
[59 86]
[60 85]
[62 83]
[63 82]
[64 81]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
