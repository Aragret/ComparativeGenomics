%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:10 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCCCUAACAACCCCCCUCCUAAUACUAACUACCUGACUCCUACCCCUCACAAUCAUGGCAAGxxxxxxxxxxAUCAAGCCCGAAUGAUAUUUCCUAUUCGCCUACACAAUUCUCCGAUCCGUCCCUAACAAACCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[96.30634308 131.09930420]
[98.04241943 116.20010376]
[89.37581635 128.44305420]
[80.70920563 140.68600464]
[72.04260254 152.92895508]
[63.37599182 165.17192078]
[54.70938492 177.41487122]
[46.04277802 189.65782166]
[37.37617111 201.90077209]
[28.70956421 214.14373779]
[34.57863998 228.41108704]
[31.78003502 243.58248901]
[21.20676613 254.81678772]
[6.23273039 258.52917480]
[-8.36391449 253.53501892]
[-17.92543221 241.42796326]
[-19.40077591 226.07130432]
[-12.31916904 212.36531067]
[1.05967271 204.68350220]
[16.46660995 205.47712708]
[25.13321686 193.23417664]
[33.79982376 180.99121094]
[42.46643066 168.74826050]
[51.13304138 156.50531006]
[59.79964828 144.26235962]
[68.46625519 132.01939392]
[77.13285828 119.77645111]
[85.79946899 107.53349304]
[72.32421875 114.12270355]
[63.29338455 126.09951782]
[52.45552826 136.46971130]
[40.09226990 144.96380615]
[26.52486420 151.36111450]
[12.10585690 155.49539185]
[-2.79008079 157.25920105]
[-17.77588272 156.60671997]
[-32.46215057 153.55490112]
[-46.46726227 148.18304443]
[-59.42730331 140.63073730]
[-71.00550842 131.09422302]
[-80.90102386 119.82130432]
[-88.85671997 107.10490417]
[-94.66587067 93.27545166]
[-98.17752838 78.69229889]
[-99.30043793 63.73439026]
[-98.00542450 48.79039764]
[-94.32614136 34.24863434]
[-88.35818481 20.48696327]
[-80.25664520 7.86297989]
[-70.23201752 -3.29528856]
[-58.54480743 -12.69789791]
[-45.49869537 -20.10052490]
[-31.43267632 -25.31081581]
[-16.71225357 -28.19338226]
[-1.71993399 -28.67332077]
[13.15471458 -26.73816299]
[27.52517891 -22.43819046]
[41.01804733 -15.88513756]
[53.28271103 -7.24928331]
[64.00048065 3.24497318]
[72.89286041 15.32494164]
[79.72877502 28.67672920]
[84.33060455 42.95339584]
[86.57877350 57.78396225]
[86.41431427 72.78898621]
[93.05919647 86.23686218]
[93.67501831 71.24951172]
[94.29084778 56.26215744]
[80.10102081 51.01773453]
[68.22756195 41.64349747]
[59.83372116 29.05784798]
[55.74183655 14.49379444]
[56.35278702 -0.62182409]
[61.60671997 -14.80813313]
[70.98890686 -26.67530441]
[83.58017731 -35.06071091]
[98.14697266 -39.14283752]
[113.26217651 -38.52175903]
[127.44496155 -33.25831985]
[139.30584717 -23.86818314]
[147.68281555 -11.27129555]
[151.75517273 3.29822898]
[151.12396240 18.41301537]
[145.85102844 32.59226990]
[136.45294189 44.44685745]
[123.85044861 52.81538391]
[109.27819824 56.87798309]
[108.66237640 71.86533356]
[108.04654694 86.85269165]
[121.26173401 93.94909668]
[133.41506958 85.15724945]
[145.56838989 76.36540985]
[157.72172546 67.57356262]
[169.87506104 58.78172302]
[168.22119141 43.51213455]
[174.43836975 29.46784019]
[186.85421753 20.42668152]
[202.12890625 18.82068443]
[216.15364075 25.08185577]
[225.15583801 37.52597046]
[226.71395874 52.80562592]
[220.40885925 66.81066895]
[207.93658447 75.77381897]
[192.65211487 77.28402710]
[178.66690063 70.93505859]
[166.51356506 79.72689819]
[154.36024475 88.51874542]
[142.20690918 97.31058502]
[130.05357361 106.10242462]
[144.93415833 104.21347809]
[159.81474304 102.32453156]
[174.60089111 99.80068970]
[189.59098816 99.25572205]
[204.52137756 100.69921875]
[219.12944031 104.10577393]
[233.15821838 109.41548157]
[246.36099243 116.53495026]
[258.50552368 125.33895111]
[269.37820435 135.67263794]
[278.78778076 147.35423279]
[286.56875610 160.17828369]
[292.58428955 173.91921997]
[296.72854614 188.33537292]
[298.92864990 203.17314148]
[299.14587402 218.17156982]
[297.37646484 233.06683350]
[293.65145874 247.59696960]
[288.03643799 261.50637817]
[280.63012695 274.55038452]
[271.56283569 286.49963379]
[260.99401855 297.14385986]
[249.10955811 306.29589844]
[236.11851501 313.79476929]
[222.24940491 319.50857544]
[207.74613953 323.33679199]
[192.86381531 325.21209717]
[177.86422729 325.10150146]
[163.01118469 323.00698853]
[148.56593323 318.96533203]
[134.78256226 313.04766846]
[121.90351105 305.35806274]
[110.15529633 296.03179932]
[99.74456787 285.23287964]
[90.85443115 273.15124512]
[83.64125824 259.99945068]
[78.23192596 246.00875854]
[74.72158051 231.42529297]
[73.17195892 216.50555420]
[73.61031342 201.51196289]
[76.02895355 186.70823669]
[80.38531494 172.35476685]
[86.60278320 158.70402527]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 28]
[3 27]
[4 26]
[5 25]
[6 24]
[7 23]
[8 22]
[9 21]
[10 20]
[66 89]
[67 88]
[68 87]
[90 109]
[91 108]
[92 107]
[93 106]
[94 105]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
