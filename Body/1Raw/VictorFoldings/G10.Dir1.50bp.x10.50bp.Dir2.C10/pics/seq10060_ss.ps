%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:26 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGAUACUUCCUAUUCUACACCCUAGUAGGCUCCCUUCCCCUACUCAUCGCACUAAUUUACACUCAxxxxxxxxxxUAUACCCUAGCCAACCCCUUAAACACCCCUCCCCACAUCAAGCCCGAAUGAUAUUUCCUAUUCCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[87.93247986 424.88812256]
[87.93247986 409.88812256]
[87.93247986 394.88812256]
[87.93247986 379.88812256]
[87.93247986 364.88812256]
[87.93247986 349.88812256]
[87.93247986 334.88812256]
[87.93247986 319.88812256]
[87.93247986 304.88812256]
[87.93247986 289.88812256]
[73.99357605 287.20361328]
[60.79045868 281.97875977]
[48.78188705 274.39340210]
[38.38543701 264.70947266]
[29.96298027 253.26179504]
[23.80807495 240.44673157]
[20.13574028 226.70828247]
[19.07495689 212.52282715]
[20.66411781 198.38247681]
[24.84966087 184.77815247]
[31.48785400 172.18238831]
[40.34974670 161.03305054]
[51.12905121 151.71801758]
[63.45273972 144.56178284]
[76.89395905 139.81401062]
[90.98677826 137.64100647]
[91.58692169 122.65301514]
[87.21448517 120.50535583]
[83.36163330 117.52437592]
[80.18494415 113.83122253]
[77.81352234 109.57598114]
[76.34374237 104.93157959]
[61.43449402 103.28407288]
[46.52524185 101.63656616]
[31.61599350 99.98905945]
[16.70674324 98.34155273]
[1.79749405 96.69404602]
[-7.83807421 108.74225616]
[-22.46506500 113.64682007]
[-37.41605759 109.84269714]
[-47.92024612 98.54377747]
[-50.62578201 83.35550690]
[-44.66933823 69.12439728]
[-31.95159340 60.39155960]
[-16.53073502 59.94359589]
[-3.32750297 67.92346191]
[3.44500041 81.78479767]
[18.35424995 83.43230438]
[33.26350021 85.07981110]
[48.17274857 86.72731781]
[63.08199692 88.37482452]
[77.99124908 90.02233124]
[84.77017212 81.23856354]
[94.75991058 76.41016388]
[105.85437775 76.55506134]
[113.82578278 63.84849548]
[121.79718781 51.14193344]
[109.82579041 42.08792496]
[98.68907166 32.02498245]
[88.47177887 21.02969933]
[79.25167084 9.18575191]
[71.09893799 -3.41671753]
[64.07560730 -16.68179321]
[58.23514557 -30.50852013]
[53.62199783 -44.79166412]
[50.27127457 -59.42252350]
[48.20847702 -74.28974152]
[47.44930267 -89.28017426]
[47.99953079 -104.27972412]
[49.85497284 -119.17424774]
[53.00151062 -133.85037231]
[57.41519547 -148.19641113]
[63.06243515 -162.10316467]
[69.90024567 -175.46481323]
[77.87659454 -188.17965698]
[86.93077087 -200.15092468]
[96.99386597 -211.28750610]
[107.98929596 -221.50465393]
[119.83337402 -230.72457886]
[132.43595886 -238.87715149]
[145.70112610 -245.90028381]
[159.52793884 -251.74055481]
[173.81115723 -256.35351562]
[188.44206238 -259.70401001]
[203.30931091 -261.76660156]
[218.29974365 -262.52557373]
[233.29928589 -261.97512817]
[248.19378662 -260.11947632]
[262.86987305 -256.97274780]
[277.21585083 -252.55885315]
[291.12252808 -246.91142273]
[304.48406982 -240.07342529]
[317.19882202 -232.09689331]
[329.16995239 -223.04255676]
[340.30639648 -212.97929382]
[350.52337646 -201.98373413]
[359.74313354 -190.13952637]
[367.89553833 -177.53681946]
[374.91848755 -164.27154541]
[380.75854492 -150.44465637]
[385.37130737 -136.16139221]
[388.72161865 -121.53043365]
[390.78399658 -106.66315460]
[391.54275513 -91.67270660]
[390.99209595 -76.67316437]
[389.13623047 -61.77869797]
[385.98928833 -47.10266113]
[381.57519531 -32.75674820]
[375.92758179 -18.85014534]
[369.08938599 -5.48868752]
[361.11267090 7.22593164]
[352.05816650 19.19694519]
[341.99475098 30.33324432]
[330.99905396 40.55007553]
[319.15472412 49.76967621]
[306.55191040 57.92188644]
[293.28652954 64.94465637]
[279.45956421 70.78453827]
[265.17620850 75.39707947]
[250.54522705 78.74719238]
[235.67791748 80.80936432]
[220.68745422 81.56790924]
[205.68792725 81.01705170]
[190.79347229 79.16098022]
[176.11749268 76.01382446]
[161.77163696 71.59953308]
[147.86511230 65.95171356]
[134.50375366 59.11333466]
[126.53234863 71.81990051]
[118.56094360 84.52645874]
[123.08445740 107.14470673]
[106.57491302 123.25315857]
[105.97476959 138.24114990]
[121.36058044 142.06407166]
[135.62394714 148.97215271]
[148.15397644 158.66705322]
[158.41452026 170.73109436]
[165.96714783 184.64529419]
[170.48983765 199.81172180]
[171.79074097 215.57910156]
[169.81625366 231.27085876]
[164.65333557 246.21415710]
[156.52557373 259.76867676]
[145.78355408 271.35412598]
[132.88973999 280.47503662]
[118.39853668 286.74197388]
[102.93247986 289.88812256]
[102.93247986 304.88812256]
[102.93247986 319.88812256]
[102.93247986 334.88812256]
[102.93247986 349.88812256]
[102.93247986 364.88812256]
[102.93247986 379.88812256]
[102.93247986 394.88812256]
[102.93247986 409.88812256]
[102.93247986 424.88812256]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 156]
[2 155]
[3 154]
[4 153]
[5 152]
[6 151]
[7 150]
[8 149]
[9 148]
[10 147]
[26 133]
[27 132]
[32 52]
[33 51]
[34 50]
[35 49]
[36 48]
[37 47]
[55 130]
[56 129]
[57 128]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
