%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:23 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGAUAGCCCUGGCCGUACGCCUAACCGCUAACAUUACUGCAGGCCACCUACUCAUGCACCUAxxxxxxxxxxUACGACAAACAGACCUAAAAUCGCUCAUUGCAUACUCUUCAAUCAGCCACAUAGCCCUCGCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[92.50000000 281.67260742]
[92.50000000 266.67260742]
[92.50000000 251.67259216]
[92.50000000 236.67259216]
[92.50000000 221.67259216]
[92.50000000 206.67259216]
[92.50000000 191.67259216]
[92.50000000 176.67259216]
[92.50000000 161.67259216]
[92.50000000 146.67259216]
[76.50641632 141.01989746]
[63.53811264 130.08506775]
[50.60005569 137.67498779]
[37.66200256 145.26489258]
[24.72394562 152.85479736]
[23.52674103 170.89308167]
[11.88130760 184.51535034]
[-5.44620895 188.43426514]
[-21.53439140 181.27616882]
[-34.14551926 189.39772034]
[-46.75664902 197.51925659]
[-51.54365158 212.83148193]
[-66.55140686 218.50129700]
[-80.26724243 210.17932129]
[-82.16954803 194.24945068]
[-70.79903412 182.93171692]
[-54.87818909 184.90812683]
[-42.26705933 176.78659058]
[-29.65593338 168.66503906]
[-30.77607155 156.50421143]
[-26.57073975 144.96168518]
[-17.78736305 136.26963806]
[-6.06490946 132.13699341]
[6.37174273 133.41371155]
[17.13403702 139.91674805]
[30.07209206 132.32682800]
[43.01014709 124.73692322]
[55.94820404 117.14701843]
[53.22907639 106.86013794]
[52.87956238 96.22568512]
[38.30686188 92.67092896]
[22.72653770 97.78810883]
[10.68684196 86.65357971]
[14.57317924 70.72158813]
[30.38762093 66.38159943]
[41.86162186 78.09822083]
[56.43432617 81.65298462]
[71.49249268 62.29187012]
[94.22554016 53.08266449]
[118.51320648 56.50468826]
[126.50312805 43.80976105]
[134.49304199 31.11483002]
[123.21854401 18.73195457]
[115.84922791 3.70878935]
[112.96276855 -12.76007748]
[114.78071594 -29.36741257]
[121.15149689 -44.79709625]
[131.56304932 -57.82843399]
[145.18391418 -67.43271637]
[160.92970276 -72.85443878]
[177.54939270 -73.67070770]
[193.72468567 -69.82424164]
[200.90718079 -82.99282074]
[208.08969116 -96.16140747]
[215.27220154 -109.32998657]
[222.45471191 -122.49857330]
[210.42045593 -131.49621582]
[199.78926086 -142.11497498]
[190.77752686 -154.13868713]
[183.56877136 -167.32255554]
[178.30970764 -181.39817810]
[175.10743713 -196.07899475]
[174.02714539 -211.06611633]
[175.09082031 -226.05441284]
[178.27680969 -240.73876953]
[183.52026367 -254.82022095]
[190.71440125 -268.01208496]
[199.71278381 -280.04577637]
[210.33221436 -290.67633057]
[222.35647583 -299.68728638]
[235.54078674 -306.89523315]
[249.61674500 -312.15341187]
[264.29776001 -315.35479736]
[279.28494263 -316.43414307]
[294.27316284 -315.36956787]
[308.95733643 -312.18264771]
[323.03845215 -306.93835449]
[336.22985840 -299.74337769]
[348.26300049 -290.74426270]
[358.89288330 -280.12417603]
[367.90313721 -268.09933472]
[375.11026001 -254.91458130]
[380.36758423 -240.83830261]
[383.56802368 -226.15710449]
[384.64645386 -211.16984558]
[383.58093262 -196.18167114]
[380.39312744 -181.49771118]
[375.14794922 -167.41691589]
[367.95217896 -154.22595215]
[358.95230103 -142.19337463]
[348.33154297 -131.56413269]
[336.30618286 -122.55464935]
[323.12097168 -115.34832764]
[309.04437256 -110.09188843]
[294.36294556 -106.89234161]
[279.37564087 -105.81483459]
[264.38754272 -106.88129425]
[249.70376587 -110.07000732]
[235.62329102 -115.31606293]
[228.44079590 -102.14747620]
[221.25828552 -88.97889709]
[214.07577515 -75.81031799]
[206.89326477 -62.64173126]
[216.78840637 -53.65177536]
[224.41184998 -42.65916443]
[229.36958313 -30.22548103]
[231.40393066 -16.98695755]
[230.40687561 -3.62191033]
[226.42585754 9.18401527]
[219.66145325 20.77301788]
[210.45735168 30.54892921]
[199.28282166 38.00788498]
[186.70883179 42.76428604]
[173.37889099 44.57074738]
[159.97605896 43.33094406]
[147.18797302 39.10474777]
[139.19805908 51.79967499]
[131.20814514 64.49460602]
[136.88186646 70.43128204]
[141.44256592 77.26028442]
[144.75260925 84.77552795]
[146.71211243 92.75022125]
[147.26193237 100.94369507]
[146.38548279 109.10868835]
[144.10920715 116.99879456]
[140.50180054 124.37591553]
[135.67211914 131.01742554]
[129.76593018 136.72288513]
[122.96147156 141.32011414]
[115.46407318 144.67037964]
[107.50000000 146.67259216]
[107.50000000 161.67259216]
[107.50000000 176.67259216]
[107.50000000 191.67259216]
[107.50000000 206.67259216]
[107.50000000 221.67259216]
[107.50000000 236.67259216]
[107.50000000 251.67259216]
[107.50000000 266.67260742]
[107.50000000 281.67260742]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[12 38]
[13 37]
[14 36]
[15 35]
[19 29]
[20 28]
[21 27]
[40 47]
[41 46]
[50 128]
[51 127]
[52 126]
[62 113]
[63 112]
[64 111]
[65 110]
[66 109]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
