%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:20 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGUCAACACCCACUCCCUCUUAGCCAAUAUUGUGCCUAUUGCCAUACUAGUCUUUGCCGCCUxxxxxxxxxxAUUACAAUAUAUACACCAACAAACAAUGUUCAACCAGUAACUACUACUAAUCAACGCCCACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[15.78797913 272.13470459]
[4.35187578 266.05258179]
[-3.63804054 278.74749756]
[-11.62795639 291.44244385]
[-19.61787224 304.13735962]
[-27.60778999 316.83230591]
[-28.41030502 332.63314819]
[-41.73792648 339.28323364]
[-49.72784424 351.97814941]
[-57.71775818 364.67309570]
[-65.70767212 377.36801147]
[-65.79199982 393.76696777]
[-80.16820526 401.65725708]
[-94.04727173 392.92208862]
[-93.15161133 376.54739380]
[-78.40260315 369.37811279]
[-70.41268921 356.68316650]
[-62.42277145 343.98825073]
[-54.43285751 331.29330444]
[-54.20183182 316.40051270]
[-40.30271912 308.84237671]
[-32.31280136 296.14746094]
[-24.32288551 283.45251465]
[-16.33296967 270.75759888]
[-8.34305382 258.06265259]
[-28.38208008 242.26757812]
[-46.14501190 223.95022583]
[-61.31692886 203.43534851]
[-73.62884521 181.08665466]
[-82.86248779 157.30038452]
[-88.85414886 132.49821472]
[-91.49759674 107.11988831]
[-90.74597168 81.61533356]
[-105.60902405 79.59300232]
[-120.47206879 77.57066345]
[-135.33511353 75.54833221]
[-150.19816589 73.52599335]
[-161.65065002 84.17374420]
[-177.27055359 84.91724396]
[-189.68261719 75.40543365]
[-193.02626038 60.12950134]
[-185.72271729 46.30227661]
[-171.22047424 40.45254898]
[-156.36708069 45.34238434]
[-148.17582703 58.66294861]
[-133.31277466 60.68528366]
[-118.44973755 62.70761871]
[-103.58668518 64.72994995]
[-88.72364044 66.75228882]
[-86.74468231 57.00644302]
[-84.26279449 47.37639236]
[-81.28466797 37.88805771]
[-77.81830597 28.56700516]
[-73.87305450 19.43832970]
[-69.45954132 10.52661800]
[-64.58965302 1.85587156]
[-59.27649307 -6.55055857]
[-53.53438187 -14.67003250]
[-47.37878036 -22.48068428]
[-40.82626724 -29.96147728]
[-33.89448547 -37.09226608]
[-26.60211182 -43.85384369]
[-18.96877670 -50.22800446]
[-11.01504230 -56.19757843]
[-2.76232862 -61.74649048]
[5.76713896 -66.85979462]
[14.55038929 -71.52371979]
[23.56376839 -75.72570801]
[32.78300095 -79.45444489]
[42.18325806 -82.69988251]
[51.73922348 -85.45328522]
[61.42516327 -87.70722961]
[71.21498871 -89.45565796]
[81.08233643 -90.69385529]
[91.00063324 -91.41847992]
[100.94316864 -91.62759399]
[110.88316345 -91.32061768]
[120.79384613 -90.49839783]
[130.64852905 -89.16313171]
[140.42066956 -87.31842804]
[150.08395386 -84.96923828]
[159.61235046 -82.12191010]
[168.98020935 -78.78409576]
[178.16229248 -74.96479034]
[187.13386536 -70.67428589]
[195.87078857 -65.92412567]
[204.34950256 -60.72710800]
[212.54719543 -55.09722900]
[220.44178772 -49.04965210]
[228.01200867 -42.60066223]
[235.23747253 -35.76762772]
[242.09872437 -28.56895256]
[248.57728577 -21.02402115]
[254.65570068 -13.15315628]
[260.31759644 -4.97755241]
[265.54776001 3.48077083]
[270.33206177 12.19903374]
[274.65765381 21.15375900]
[288.56021118 15.52180099]
[302.46276855 9.88984489]
[316.36532593 4.25788784]
[323.91909790 -9.89555740]
[339.71997070 -12.67250729]
[351.64688110 -1.94272149]
[350.55050659 14.06282520]
[337.27191162 23.06604767]
[321.99728394 18.16044426]
[308.09472656 23.79240036]
[294.19216919 29.42435837]
[280.28961182 35.05631256]
[286.40884399 55.57285690]
[290.20126343 76.64395142]
[291.61953735 98.00658417]
[290.64599609 119.39409637]
[287.29272461 140.53952026]
[281.60165405 161.17892456]
[295.61837769 166.52044678]
[309.63507080 171.86195374]
[323.65179443 177.20347595]
[338.82107544 171.98115540]
[352.28411865 180.70619202]
[353.71322632 196.68545532]
[342.01211548 207.66104126]
[326.15686035 205.21342468]
[318.31027222 191.22018433]
[304.29357910 185.87866211]
[290.27685547 180.53715515]
[276.26013184 175.19564819]
[270.77767944 186.93103027]
[264.51498413 198.26925659]
[257.50061035 209.15849304]
[249.76667786 219.54901123]
[241.34846497 229.39332581]
[232.28446960 238.64646912]
[222.61607361 247.26615906]
[212.38746643 255.21301270]
[201.64538574 262.45071411]
[190.43890381 268.94622803]
[178.81922913 274.66983032]
[166.83943176 279.59542847]
[154.55426025 283.70043945]
[142.01983643 286.96618652]
[129.29344177 289.37771606]
[116.43319702 290.92401123]
[103.49787903 291.59799194]
[90.54657745 291.39660645]
[77.63846588 290.32073975]
[64.83251953 288.37533569]
[52.18725204 285.56930542]
[39.76042938 281.91540527]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 25]
[3 24]
[4 23]
[5 22]
[6 21]
[8 19]
[9 18]
[10 17]
[11 16]
[33 49]
[34 48]
[35 47]
[36 46]
[37 45]
[98 110]
[99 109]
[100 108]
[101 107]
[116 128]
[117 127]
[118 126]
[119 125]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
