%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:43 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGAAGAACCAUUUGGAUACAUAGGUAUGGUCUGAGCUAUGAUAUCAAUUGGCUUCCUAGGGUUxxxxxxxxxxGGUUUCAAGCCAACCCCAUGGCCUCCAUGACUUUUUCAAAAAGGUAUUAGAAAAACCAUUUCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[88.20874023 300.27746582]
[88.20874023 285.27746582]
[88.20874023 270.27746582]
[88.20874023 255.27746582]
[88.20874023 240.27746582]
[88.20874023 225.27746582]
[88.20874023 210.27746582]
[88.20874023 195.27746582]
[88.20874023 180.27746582]
[88.20874023 165.27746582]
[86.21268463 150.41087341]
[82.25607300 135.94210815]
[70.28581238 126.90258789]
[55.28660583 127.05658722]
[40.28739548 127.21057892]
[25.29055977 127.51856232]
[10.29767323 127.98048401]
[-4.69521284 128.44241333]
[-18.25056839 136.60101318]
[-31.21007538 129.25932312]
[-46.20296097 129.72125244]
[-61.19584656 130.18318176]
[-69.73812103 133.59277344]
[-76.50061035 130.49748230]
[-91.49982452 130.65147400]
[-106.49903107 130.80546570]
[-121.49587250 131.11344910]
[-136.48875427 131.57537842]
[-151.48164368 132.03730774]
[-166.47453308 132.49922180]
[-181.46740723 132.96115112]
[-195.02276611 141.11976624]
[-207.98228455 133.77806091]
[-216.60040283 146.68183899]
[-231.16889954 152.02400208]
[-246.08586121 147.75039673]
[-255.61543274 135.50428772]
[-256.09326172 119.99457550]
[-247.33566284 107.18505096]
[-232.71008301 102.00123596]
[-217.84036255 106.43641663]
[-208.44419861 118.78517914]
[-195.96124268 110.65961456]
[-181.92933655 117.96826935]
[-166.93644714 117.50634003]
[-151.94357300 117.04441833]
[-136.95068359 116.58248901]
[-121.95779419 116.12055969]
[-115.32807922 112.75024414]
[-106.65303040 115.80625916]
[-91.65382385 115.65226746]
[-76.65460968 115.49826813]
[-61.65777206 115.19029236]
[-46.66488647 114.72836304]
[-31.67200089 114.26644135]
[-19.18903732 106.14086914]
[-5.15713882 113.44952393]
[9.83574677 112.98760223]
[24.82863235 112.52567291]
[31.45834732 109.15534973]
[40.13339996 112.21137238]
[55.13261032 112.05737305]
[70.13182068 111.90338135]
[67.45117188 96.25192261]
[72.61615753 80.92061615]
[84.65730286 69.67395020]
[100.88249207 65.41378784]
[104.24175262 50.79478073]
[107.60101318 36.17577362]
[110.96027374 21.55676842]
[114.31952667 6.93775988]
[102.59371185 16.29218483]
[87.78252411 18.66464996]
[73.72154236 13.44076824]
[64.05209351 1.97334754]
[61.27822876 -12.76794338]
[66.11828613 -26.96561432]
[77.31884766 -36.94295502]
[91.97936249 -40.11617279]
[106.30325317 -35.66351700]
[116.58112335 -24.73806953]
[120.15137482 -10.17013931]
[126.42077637 -23.79711723]
[132.69018555 -37.42409515]
[128.49682617 -52.90942383]
[138.10501099 -65.75708771]
[154.14414978 -66.11145782]
[164.31039429 -53.70069885]
[160.80506897 -38.04527283]
[146.31716919 -31.15469170]
[140.04776001 -17.52771187]
[133.77835083 -3.90073371]
[128.93853760 10.29701900]
[125.57927704 24.91602707]
[122.22001648 39.53503418]
[118.86076355 54.15404129]
[115.50150299 68.77304840]
[127.18771362 78.17690277]
[140.74960327 71.76792908]
[154.31150818 65.35895538]
[167.87339783 58.94997787]
[181.43530273 52.54100418]
[193.17248535 40.30683899]
[208.17770386 48.19858170]
[204.74824524 64.80204773]
[187.84426880 66.10289764]
[174.28237915 72.51187897]
[160.72047424 78.92085266]
[147.15858459 85.32982635]
[133.59667969 91.73880005]
[130.47790527 94.07710266]
[127.21890259 96.08723450]
[142.08551025 98.08329010]
[156.95210266 100.07934570]
[171.81869507 102.07540894]
[186.68530273 104.07146454]
[203.18815613 100.18661499]
[211.48962402 114.96910095]
[199.58291626 127.03834534]
[184.68923950 118.93806458]
[169.82264709 116.94200134]
[154.95603943 114.94594574]
[140.08944702 112.94989014]
[125.22284698 110.95383453]
[121.44435883 119.01741028]
[115.06567383 125.74099731]
[106.57341003 130.28402710]
[96.72483826 131.98548889]
[100.68144989 146.45426941]
[105.59677887 132.28247070]
[115.76953888 121.25909424]
[129.50187683 115.22393799]
[144.50181580 115.18429565]
[158.26585388 121.14678192]
[168.49674988 132.11624146]
[173.48690796 146.26184082]
[172.40350342 161.22267151]
[165.42732239 174.50170898]
[153.72273254 183.88267517]
[139.24324036 187.79985046]
[124.40550995 185.59947205]
[111.68598938 177.64875793]
[103.20874023 165.27746582]
[103.20874023 180.27746582]
[103.20874023 195.27746582]
[103.20874023 210.27746582]
[103.20874023 225.27746582]
[103.20874023 240.27746582]
[103.20874023 255.27746582]
[103.20874023 270.27746582]
[103.20874023 285.27746582]
[103.20874023 300.27746582]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 152]
[2 151]
[3 150]
[4 149]
[5 148]
[6 147]
[7 146]
[8 145]
[9 144]
[10 143]
[11 129]
[12 128]
[13 63]
[14 62]
[15 61]
[16 59]
[17 58]
[18 57]
[20 55]
[21 54]
[22 53]
[24 52]
[25 51]
[26 50]
[27 48]
[28 47]
[29 46]
[30 45]
[31 44]
[33 42]
[67 97]
[68 96]
[69 95]
[70 94]
[71 93]
[82 92]
[83 91]
[84 90]
[98 110]
[99 109]
[100 108]
[101 107]
[102 106]
[112 124]
[113 123]
[114 122]
[115 121]
[116 120]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
