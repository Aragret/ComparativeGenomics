%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:07 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCAGCAAACCCUGAUGAAGGCUACAAAGUAAGCGCAAGUACCCACGUAAAGACGUUAGGUCxxxxxxxxxxUUUUGUCACCAAGACCCUACUUCUAACCUCCCUGUUCUUAUGAAUUCGAACAGCAUACCCCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[84.01263428 438.78579712]
[84.01263428 423.78579712]
[84.01263428 408.78579712]
[84.01263428 393.78579712]
[84.01263428 378.78579712]
[84.01263428 363.78579712]
[84.01263428 348.78579712]
[84.01263428 333.78579712]
[84.01263428 318.78579712]
[84.01263428 303.78579712]
[69.80635071 300.73019409]
[56.54604340 294.77230835]
[44.81767273 286.17266846]
[35.14007568 275.30850220]
[27.94203377 262.65737915]
[23.54326057 248.77607727]
[22.14020920 234.27613831]
[23.79729843 219.79690552]
[28.44395828 205.97735596]
[35.87762833 193.42787170]
[45.77259445 182.70332336]
[57.69425583 174.27848816]
[71.11820984 168.52706909]
[85.45332336 165.70509338]
[85.76538086 150.70834351]
[86.07743835 135.71159363]
[86.38949585 120.71483612]
[83.43077087 94.14495087]
[73.92241669 82.54360962]
[58.43913651 80.83895111]
[48.96157455 68.93809509]
[50.68212509 54.18766022]
[41.17376709 42.58631897]
[31.66540718 30.98497581]
[22.15704918 19.38363457]
[12.64869022 7.78229332]
[-0.84256333 14.47497749]
[-15.47786617 17.99581146]
[-30.52247047 18.17134094]
[-45.22180939 14.99598217]
[-58.83935928 8.63212776]
[-70.69351959 -0.59814394]
[-80.19175720 -12.22937489]
[-86.86019897 -25.67619514]
[-90.36728668 -40.26278305]
[-90.54026031 -55.25683594]
[-87.37365723 -69.90632629]
[-81.02943420 -83.47721863]
[-71.82868195 -95.29026794]
[-81.33704376 -106.89160919]
[-90.84539795 -118.49295044]
[-108.20214081 -124.55294037]
[-110.44105530 -141.93070984]
[-120.18870544 -153.33174133]
[-129.93635559 -164.73275757]
[-139.68400574 -176.13377380]
[-155.31730652 -181.08676147]
[-158.57981873 -197.15811157]
[-146.11534119 -207.81498718]
[-130.74627686 -202.09452820]
[-128.28298950 -185.88143921]
[-118.53533936 -174.48040771]
[-108.78768158 -163.07939148]
[-99.04003143 -151.67837524]
[-86.96970367 -150.40773010]
[-78.75753021 -140.93255615]
[-79.24405670 -128.00131226]
[-69.73570251 -116.39996338]
[-60.22734070 -104.79862213]
[-46.83757401 -111.50056458]
[-32.28511047 -115.05641937]
[-17.29902458 -115.28471375]
[-2.63086104 -112.17079926]
[10.98306656 -105.86768341]
[22.85863686 -96.68858337]
[32.39828873 -85.09129333]
[39.12110519 -71.65541840]
[42.68704605 -57.05335236]
[42.91413879 -42.01666641]
[39.78778458 -27.29943657]
[33.46163177 -13.64044189]
[24.25003242 -1.72606516]
[33.75838852 9.87527657]
[43.26675034 21.47661781]
[52.77510834 33.07795715]
[62.28346634 44.67929840]
[77.08457947 45.88872528]
[86.89266968 57.51868439]
[85.52375793 73.03524780]
[95.03211212 84.63658905]
[109.48680115 88.64433289]
[123.61161041 83.59557343]
[137.73640442 78.54682159]
[151.86120605 73.49806213]
[154.63395691 69.96630096]
[158.05633545 67.76210785]
[161.61746216 66.92534637]
[164.84812927 67.32129669]
[167.37541199 68.67045593]
[181.87100220 64.81329346]
[184.23773193 49.76940918]
[192.52418518 36.99230194]
[205.29469299 28.69568062]
[220.33670044 26.31698799]
[235.04406738 30.26834679]
[246.86865234 39.86515808]
[253.76179504 53.44472122]
[254.52920532 68.65428925]
[249.03793335 82.85871124]
[238.23934937 93.59699249]
[224.00440979 99.00865936]
[208.79937744 98.15610504]
[195.25862122 91.18703461]
[185.72816467 79.30889130]
[171.23255920 83.16605377]
[156.90997314 87.62286377]
[142.78517151 92.67162323]
[128.66036987 97.72038269]
[114.53556061 102.76913452]
[129.43019104 104.54397583]
[138.16584778 116.73776245]
[135.05513000 131.41166687]
[122.12330627 139.01217651]
[107.78968811 134.59095764]
[101.38624573 121.02689362]
[101.07419586 136.02365112]
[100.76213837 151.02040100]
[100.45008087 166.01715088]
[115.50428009 169.74111938]
[129.35314941 176.70458984]
[141.30981445 186.55871582]
[150.78199768 198.81140137]
[157.30136108 212.85180664]
[160.54669189 227.98085022]
[160.35974121 243.44596863]
[156.75283813 258.47860718]
[149.90827942 272.33236694]
[140.16896057 284.32009888]
[128.02133179 293.84799194]
[114.07101440 300.44491577]
[99.01263428 303.78579712]
[99.01263428 318.78579712]
[99.01263428 333.78579712]
[99.01263428 348.78579712]
[99.01263428 363.78579712]
[99.01263428 378.78579712]
[99.01263428 393.78579712]
[99.01263428 408.78579712]
[99.01263428 423.78579712]
[99.01263428 438.78579712]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[24 128]
[25 127]
[26 126]
[27 125]
[28 90]
[29 89]
[32 86]
[33 85]
[34 84]
[35 83]
[36 82]
[49 69]
[50 68]
[51 67]
[53 64]
[54 63]
[55 62]
[56 61]
[91 119]
[92 118]
[93 117]
[94 116]
[99 115]
[100 114]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
