%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:54 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCCAUUUCACUAUCAUAUUCAUCGGCGUAAAUCUAACUUUCUUCCCACAACACUUUCUCGGxxxxxxxxxxUCAUAUUUACCAAAUGCCCCUCAUUUACAUAAAUAUUAUACUAGCAUUUACCAUCUCACUCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[95.42575073 240.68333435]
[95.11369324 225.68656921]
[94.80163574 210.68981934]
[94.48957825 195.69306946]
[94.17752838 180.69631958]
[93.86547089 165.69955444]
[93.55341339 150.70280457]
[93.24135590 135.70605469]
[92.92929840 120.70929718]
[79.47333527 114.08080292]
[67.39334869 122.97315216]
[55.31335831 131.86549377]
[60.49122238 146.05586243]
[61.46007919 161.13027954]
[58.14139175 175.86672974]
[50.80419159 189.07060242]
[40.04327011 199.67150879]
[26.73096848 206.81008911]
[11.94645596 209.90763855]
[-3.11175394 208.71307373]
[-17.22295952 203.32322693]
[-29.24322891 194.17500305]
[-38.19813156 182.01004028]
[-43.36173630 167.81448364]
[-44.31544876 152.73910522]
[-40.98196030 138.00599670]
[-33.63149643 124.80950165]
[-22.85993195 114.21940613]
[-9.54046726 107.09420776]
[5.24714994 104.01149750]
[20.30415154 105.22119904]
[34.40993500 110.62522888]
[46.42100906 119.78550720]
[58.50099564 110.89315796]
[70.58098602 102.00080872]
[73.67930603 87.32428741]
[66.22439575 74.30797577]
[58.76948547 61.29166794]
[51.31457520 48.27535629]
[43.85966492 35.25904846]
[36.40475464 22.24273872]
[22.45514107 27.82434845]
[7.86445427 31.41015244]
[-7.08329248 32.93035126]
[-22.09713554 32.35535812]
[-36.88483047 29.69635773]
[-51.15852356 25.00511169]
[-64.64038086 18.37293816]
[-77.06796265 9.92893314]
[-88.19937897 -0.16253841]
[-97.81793976 -11.70504284]
[-105.73641968 -24.47390366]
[-111.80068970 -38.22056580]
[-115.89270020 -52.67745590]
[-117.93280029 -67.56315613]
[-117.88127899 -82.58792114]
[-115.73914337 -97.45928192]
[-111.54808044 -111.88776398]
[-105.38968658 -125.59251404]
[-97.38381958 -138.30677795]
[-87.68632507 -149.78303528]
[-76.48596954 -159.79794312]
[-64.00077057 -168.15652466]
[-50.47374725 -174.69607544]
[-36.16821671 -179.28932190]
[-21.36263657 -181.84684753]
[-6.34520245 -182.31886292]
[8.59176731 -180.69619751]
[23.15752029 -177.01040649]
[37.06852722 -171.33326721]
[50.05401230 -163.77526855]
[61.86120224 -154.48353577]
[72.26026917 -143.63891602]
[81.04879761 -131.45254517]
[88.05570984 -118.16159058]
[93.14461517 -104.02478790]
[96.21645355 -89.31730652]
[97.21144104 -74.32543945]
[96.11019897 -59.34100342]
[92.93416595 -44.65567017]
[87.74517059 -30.55529976]
[80.64421844 -17.31435776]
[71.76951599 -5.19058418]
[61.29383087 5.58002901]
[49.42106628 14.78782845]
[56.87597656 27.80413818]
[64.33088684 40.82044601]
[71.78579712 53.83675766]
[79.24070740 66.85306549]
[86.69561768 79.86937714]
[105.80231476 76.68077850]
[121.01194763 88.54682922]
[135.91384888 86.83414459]
[150.81575012 85.12145233]
[165.71765137 83.40876007]
[180.61955261 81.69607544]
[195.52145386 79.98338318]
[197.16807556 65.00885773]
[202.10603333 50.77635193]
[210.08766174 37.99975967]
[220.71260071 27.31995010]
[233.44792175 19.27261925]
[247.65480042 14.26141644]
[262.62063599 12.53770351]
[277.59478760 14.18793964]
[291.82608032 19.12935066]
[304.60073853 27.11407661]
[315.27798462 37.74160767]
[323.32223511 50.47887039]
[328.32998657 64.68696594]
[330.05007935 79.65323639]
[328.39620972 94.62696075]
[323.45135498 108.85707092]
[315.46353149 121.62979126]
[304.83340454 132.30445862]
[292.09420776 140.34561157]
[277.88488770 145.34992981]
[262.91821289 147.06639099]
[247.94488525 145.40888977]
[233.71597290 140.46058655]
[220.94517517 132.46968079]
[210.27310181 121.83696747]
[202.23503113 109.09580994]
[197.23414612 94.88528442]
[182.33224487 96.59797668]
[167.43034363 98.31066895]
[152.52844238 100.02335358]
[137.62654114 101.73604584]
[122.72463989 103.44873810]
[136.62339783 109.09005737]
[151.62063599 108.80214691]
[164.82984924 115.90964508]
[172.85252380 128.58389282]
[173.62454224 143.56401062]
[166.94726562 156.99584961]
[154.53866577 165.42356873]
[139.59127808 166.67887878]
[125.95085144 160.43878174]
[117.12685394 148.30877686]
[115.38973999 133.40852356]
[107.92605591 120.39723969]
[108.23811340 135.39399719]
[108.55016327 150.39074707]
[108.86222076 165.38749695]
[109.17427826 180.38426208]
[109.48633575 195.38101196]
[109.79839325 210.37776184]
[110.11045074 225.37451172]
[110.42250061 240.37127686]
[113.01350403 259.57901001]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 149]
[2 148]
[3 147]
[4 146]
[5 145]
[6 144]
[7 143]
[8 142]
[9 141]
[10 35]
[11 34]
[12 33]
[36 90]
[37 89]
[38 88]
[39 87]
[40 86]
[41 85]
[92 129]
[93 128]
[94 127]
[95 126]
[96 125]
[97 124]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
