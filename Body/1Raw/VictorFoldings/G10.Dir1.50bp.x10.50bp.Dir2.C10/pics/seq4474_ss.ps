%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:26 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCCCUCAAACCUAAGAAAUAUGUCUGAUAAAAGAGUUACUUUGAUAGAGUAAAUAAUAGGAxxxxxxxxxxACGAGAAAACACCCUCAUGUUCAUACACCUAUCCCCCAUUCUCCUCCUAUCCCUCAACCCCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[92.50000000 278.91625977]
[92.50000000 263.91625977]
[92.50000000 248.91625977]
[92.50000000 233.91625977]
[92.50000000 218.91625977]
[92.50000000 203.91625977]
[92.50000000 188.91625977]
[92.50000000 173.91625977]
[92.50000000 158.91625977]
[92.50000000 143.91625977]
[76.56934357 139.65719604]
[62.79069519 129.63977051]
[53.23059082 114.88584137]
[39.32803726 120.51779938]
[25.42547989 126.14975739]
[25.91347694 141.28207397]
[21.20362091 155.64137268]
[11.88269997 167.50056458]
[-0.90913630 175.44027710]
[-15.61781693 178.51863098]
[-30.46414375 176.38296509]
[-43.65900803 169.31015015]
[-53.61899185 158.17085266]
[-67.52155304 163.80281067]
[-81.42410278 169.43476868]
[-87.35430145 184.08427429]
[-101.93875122 190.17274475]
[-116.52474976 184.08799744]
[-122.45868683 169.44000244]
[-116.22006226 154.91914368]
[-101.51014709 149.14041138]
[-87.05606079 155.53221130]
[-73.15350342 149.90025330]
[-59.25094986 144.26829529]
[-59.85195923 129.33764648]
[-55.29991913 115.07553101]
[-46.12585449 103.20915222]
[-33.42174149 95.18251038]
[-18.71057320 91.98069000]
[-3.76379371 94.00899506]
[9.61202431 101.04173279]
[19.79352379 112.24720001]
[33.69607925 106.61524200]
[47.59863663 100.98328400]
[49.46624756 86.10000610]
[37.38626099 77.20765686]
[25.30627251 68.31530762]
[13.22628403 59.42295837]
[1.14629543 50.53060913]
[-10.93369293 41.63825607]
[-26.94681740 42.61774826]
[-37.58924484 30.61281967]
[-34.69701004 14.83262444]
[-20.48879623 7.38237858]
[-5.86392260 13.97727394]
[-2.04134321 29.55826950]
[10.03864479 38.45061874]
[22.11863327 47.34296799]
[34.19861984 56.23531723]
[46.27861023 65.12767029]
[58.35859680 74.02001953]
[73.99731445 59.71401596]
[93.77532959 53.59900665]
[113.78252411 56.44425201]
[130.24705505 67.28909302]
[142.13943481 58.14735794]
[154.03181458 49.00562286]
[165.92419434 39.86389160]
[177.81657410 30.72215652]
[189.70895386 21.58042145]
[174.71740723 22.08412933]
[160.94386292 16.14365578]
[151.02124023 4.89457941]
[146.84637451 -9.51272583]
[149.21731567 -24.32416153]
[157.68083191 -36.70837784]
[170.61904907 -44.29800415]
[185.55870056 -45.64221573]
[199.64392090 -40.48404694]
[210.18217468 -29.80953598]
[215.15898132 -15.65922070]
[213.62295532 -0.73807281]
[205.86877441 12.10051155]
[219.58883667 6.03749847]
[233.24507141 -0.16790873]
[246.90132141 -6.37331581]
[260.55755615 -12.57872295]
[272.90911865 -21.08981323]
[283.57077026 -31.64110374]
[294.23239136 -42.19239426]
[304.89401245 -52.74368286]
[304.72558594 -68.54707336]
[315.84069824 -79.78226471]
[331.64498901 -79.78360748]
[342.76202393 -68.55030823]
[342.59628296 -52.74689102]
[331.24609375 -41.74923706]
[315.44531250 -42.08205795]
[304.78366089 -31.53076744]
[294.12203979 -20.97947693]
[283.46041870 -10.42818642]
[298.09613037 -13.71393585]
[313.01547241 -12.16042709]
[326.66027832 -5.92990828]
[337.60546875 4.32690954]
[344.70797729 17.53881073]
[347.22601318 32.32595062]
[344.89657593 47.14397049]
[337.96298218 60.44528580]
[327.14932251 70.84071350]
[313.58499146 77.24456787]
[298.68667603 78.98802185]
[284.01028442 75.88899994]
[271.08865356 68.27115631]
[261.27130127 56.93009949]
[255.58354187 43.05028152]
[254.61940002 28.08129883]
[258.47958374 13.58650494]
[266.76296997 1.07751834]
[253.10671997 7.28292561]
[239.45048523 13.48833275]
[225.79423523 19.69373894]
[220.97456360 25.36087227]
[211.78874207 25.88289261]
[198.85069275 33.47280121]
[186.95831299 42.61453629]
[175.06593323 51.75627136]
[163.17355347 60.89800262]
[151.28117371 70.03974152]
[139.38879395 79.18147278]
[142.36557007 86.21425629]
[144.09753418 93.65209961]
[144.53378296 101.27646637]
[143.66152954 108.86331940]
[141.50637817 116.18975067]
[138.13166809 123.04048157]
[133.63653564 129.21421814]
[128.15309143 134.52957153]
[121.84241486 138.83035278]
[114.88996124 141.99020386]
[107.50000000 143.91625977]
[107.50000000 158.91625977]
[107.50000000 173.91625977]
[107.50000000 188.91625977]
[107.50000000 203.91625977]
[107.50000000 218.91625977]
[107.50000000 233.91625977]
[107.50000000 248.91625977]
[107.50000000 263.91625977]
[107.50000000 278.91625977]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[13 44]
[14 43]
[15 42]
[23 34]
[24 33]
[25 32]
[45 61]
[46 60]
[47 59]
[48 58]
[49 57]
[50 56]
[65 130]
[66 129]
[67 128]
[68 127]
[69 126]
[70 125]
[83 124]
[84 122]
[85 121]
[86 120]
[87 119]
[88 101]
[89 100]
[90 99]
[91 98]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
