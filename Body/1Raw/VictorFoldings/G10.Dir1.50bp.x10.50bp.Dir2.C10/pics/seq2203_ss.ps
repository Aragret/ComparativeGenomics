%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:09 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGAUAGCUGGUUGUCCAAGAUAGAAUCUUAGUUCAACUUUAAAUUUGCCCACAGAACCCUCUxxxxxxxxxxGAACCCGUAUACAUAAAAUCUAGACAAAAAAGGAAGGAAUCGAACCCCCCAAAGCUGGUUCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[124.07550812 453.71136475]
[124.07550812 438.71136475]
[124.07550812 423.71136475]
[124.07550812 408.71136475]
[124.07550812 393.71136475]
[124.07550812 378.71136475]
[124.07550812 363.71136475]
[124.07550812 348.71136475]
[124.07550812 333.71136475]
[124.07550812 318.71136475]
[105.26116943 312.21218872]
[90.22950745 299.11892700]
[81.18413544 281.32189941]
[79.46196747 261.40316772]
[85.33566284 242.26179504]
[97.97074127 226.69192505]
[115.54405975 216.97500610]
[113.05894470 202.18229675]
[110.57382965 187.38958740]
[108.08870697 172.59687805]
[105.44984436 157.83082581]
[102.35152435 143.15429688]
[98.94853973 128.54541016]
[95.54556274 113.93651581]
[82.60750580 106.34660339]
[68.19529724 110.50449371]
[53.78307724 114.66237640]
[39.37086105 118.82026672]
[24.95864487 122.97815704]
[11.41617870 133.17805481]
[-2.13403201 122.98844147]
[3.90629125 107.14701843]
[20.80075836 108.56594086]
[35.21297455 104.40805054]
[49.62519073 100.25016022]
[64.03740692 96.09227753]
[78.44962311 91.93438721]
[84.09870148 91.42717743]
[89.40496063 92.26223755]
[94.11505890 94.32640839]
[95.36193848 79.37832642]
[96.60881042 64.43023682]
[94.10112000 58.19974518]
[95.02527618 52.50964737]
[98.23120117 48.89058685]
[100.09880829 34.00730515]
[101.96642303 19.12402725]
[103.83403778 4.24074697]
[101.74881744 -0.68585813]
[101.80126953 -5.43450308]
[103.55355072 -9.20692921]
[106.31061554 -11.50172234]
[109.10293579 -26.23952866]
[111.89526367 -40.97733307]
[114.68759155 -55.71514130]
[100.38589478 -60.30221176]
[86.75632477 -66.61206818]
[74.00548553 -74.54905701]
[62.32668304 -83.99285126]
[51.89696884 -94.80028534]
[42.87445068 -106.80752563]
[35.39590454 -119.83254242]
[29.57471085 -133.67787170]
[25.49911118 -148.13363647]
[23.23089218 -162.98068237]
[22.80444145 -177.99394226]
[24.22622299 -192.94580078]
[27.47468185 -207.60960388]
[32.50057220 -221.76304626]
[39.22770309 -235.19157410]
[47.55409241 -247.69160461]
[57.35351944 -259.07363892]
[68.47741699 -269.16516113]
[80.75716400 -277.81314087]
[94.00658417 -284.88650513]
[108.02483368 -290.27798462]
[122.59939575 -293.90591431]
[137.50932312 -295.71524048]
[152.52859497 -295.67852783]
[167.42950439 -293.79638672]
[181.98616028 -290.09729004]
[195.97790527 -284.63735962]
[209.19261169 -277.49935913]
[221.42994690 -268.79150391]
[232.50440979 -258.64575195]
[242.24810791 -247.21597290]
[250.51332092 -234.67539978]
[257.17477417 -221.21417236]
[262.13143921 -207.03633118]
[265.30819702 -192.35682678]
[266.65692139 -177.39820862]
[266.15713501 -162.38720703]
[263.81637573 -147.55142212]
[259.67019653 -133.11575317]
[253.78143311 -119.29901886]
[246.23933411 -106.31069946]
[237.15826416 -94.34768677]
[226.67585754 -83.59134674]
[214.95104980 -74.20472717]
[202.16159058 -66.33013153]
[188.50134277 -60.08694458]
[174.17741394 -55.56980515]
[159.40693665 -52.84719467]
[144.41383362 -51.96038055]
[129.42539978 -52.92281723]
[126.63307190 -38.18500900]
[123.84074402 -23.44720459]
[121.04842377 -8.70939827]
[118.71731567 6.10836029]
[116.84970093 20.99164009]
[114.98209381 35.87491989]
[113.11447906 50.75820160]
[111.55690002 65.67710876]
[110.31002045 80.62519836]
[109.06314850 95.57328796]
[110.15445709 110.53353119]
[113.55743408 125.14242554]
[116.96041107 139.75131226]
[121.25996399 144.91090393]
[122.12752533 150.60990906]
[120.18765259 155.03849792]
[124.88786316 162.94798279]
[122.88141632 170.11175537]
[125.36653137 184.90446472]
[127.85165405 199.69717407]
[130.33677673 214.48988342]
[140.88529968 215.34118652]
[151.04347229 218.28324890]
[160.40147400 223.19441223]
[168.58244324 229.87361145]
[175.25752258 238.04864502]
[180.15913391 247.38729858]
[183.09173584 257.51074219]
[183.93952942 268.00903320]
[182.67114258 278.45761108]
[179.34069824 288.43447876]
[174.08551025 297.53729248]
[167.12051392 305.39962769]
[158.72935486 311.70556641]
[149.25294495 316.20251465]
[139.07551575 318.71136475]
[139.07551575 333.71136475]
[139.07551575 348.71136475]
[139.07551575 363.71136475]
[139.07551575 378.71136475]
[139.07551575 393.71136475]
[139.07551575 408.71136475]
[139.07551575 423.71136475]
[139.07551575 438.71136475]
[139.07551575 453.71136475]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[17 126]
[18 125]
[19 124]
[20 123]
[21 121]
[22 118]
[23 117]
[24 116]
[25 37]
[26 36]
[27 35]
[28 34]
[29 33]
[40 115]
[41 114]
[42 113]
[45 112]
[46 111]
[47 110]
[48 109]
[52 108]
[53 107]
[54 106]
[55 105]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
