%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:59 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGUUCUACUAUGAACCCCCCUCCCCAUACCCAACCCCCUGGUCAACCUCAACCUAGGCCUCCUAUxxxxxxxxxxACUGCGAGCAGUAGCCCAAACAAUCUCAUAUGAAGUCACCCUAGCCAUCAUUCUACUAUCAACCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[-24.04096794 265.20486450]
[-33.47688293 276.86520386]
[-42.91280365 288.52554321]
[-52.34872055 300.18588257]
[-61.66750336 311.94003296]
[-70.86822510 323.78683472]
[-80.06893921 335.63363647]
[-89.26966095 347.48043823]
[-98.47038269 359.32723999]
[-107.67109680 371.17404175]
[-116.87181854 383.02084351]
[-126.07254028 394.86767578]
[-135.27325439 406.71447754]
[-133.05343628 422.36209106]
[-142.61499023 434.94589233]
[-158.28520203 437.00015259]
[-170.76722717 427.30609131]
[-172.65568542 411.61505127]
[-162.83020020 399.23620605]
[-147.12005615 397.51373291]
[-137.91934204 385.66693115]
[-128.71862793 373.82012939]
[-119.51790619 361.97332764]
[-110.31718445 350.12652588]
[-101.11646271 338.27972412]
[-91.91574860 326.43292236]
[-82.71502686 314.58612061]
[-73.51430511 302.73931885]
[-71.88618469 295.48693848]
[-64.00905609 290.74996948]
[-54.57313919 279.08963013]
[-45.13722229 267.42929077]
[-35.70130539 255.76895142]
[-53.46679688 238.29949951]
[-69.00000763 218.81837463]
[-82.07498169 197.60894775]
[-92.50154877 174.97973633]
[-100.12803650 151.25988770]
[-104.84351349 126.79443359]
[-106.57939911 101.93922424]
[-105.31043243 77.05580902]
[-101.05506897 52.50613785]
[-93.87521362 28.64729691]
[-83.87530518 5.82633352]
[-71.20079803 -15.62480450]
[-83.31838226 -24.46584892]
[-95.43597412 -33.30689240]
[-107.64141083 -42.02626038]
[-119.93347168 -50.62307358]
[-132.22552490 -59.21989059]
[-146.84992981 -54.03275681]
[-161.72067261 -58.46456146]
[-171.11962891 -70.81118774]
[-171.43272400 -86.32510376]
[-162.53956604 -99.04089355]
[-147.85974121 -104.06907654]
[-133.03796387 -99.47621155]
[-123.77349091 -87.02835083]
[-123.62871552 -71.51194763]
[-111.33665466 -62.91513443]
[-99.04459381 -54.31832123]
[-91.71986389 -53.05488205]
[-86.59492493 -45.42448044]
[-74.47734070 -36.58343506]
[-62.35975266 -27.74239349]
[-53.18750763 -38.60878372]
[-43.28947830 -48.81845856]
[-32.71255112 -58.32304382]
[-21.50684547 -67.07750702]
[-9.72545052 -75.04037476]
[2.57581353 -82.17391968]
[15.33866596 -88.44433594]
[28.50263596 -93.82191467]
[42.00535202 -98.28118896]
[55.78284454 -101.80101776]
[69.76983643 -104.36473846]
[83.90005493 -105.96018982]
[98.10655212 -106.57981873]
[112.32201385 -106.22069550]
[126.47910309 -104.88451385]
[140.51074219 -102.57761383]
[154.35043335 -99.31091309]
[167.93261719 -95.09989166]
[181.19294739 -89.96450806]
[187.58506775 -103.53435516]
[193.97718811 -117.10420227]
[200.36930847 -130.67405701]
[198.46514893 -146.96228027]
[211.77886963 -156.53707886]
[226.61445618 -149.54872131]
[227.71034241 -133.18623352]
[213.93916321 -124.28192902]
[207.54704285 -110.71208191]
[201.15492249 -97.14223480]
[194.76280212 -83.57238770]
[204.26985168 -78.34406281]
[213.48931885 -72.62381744]
[222.39573669 -66.42743683]
[230.96455383 -59.77199936]
[239.17214966 -52.67587280]
[246.99586487 -45.15862274]
[254.41412354 -37.24098587]
[261.40646362 -28.94480133]
[267.95361328 -20.29295158]
[274.03747559 -11.30930424]
[279.64132690 -2.01863527]
[284.74966431 7.55342817]
[289.34841919 17.38048363]
[293.42489624 27.43542671]
[296.96786499 37.69052124]
[299.96752930 48.11748123]
[302.41564941 58.68754959]
[304.30541992 69.37156677]
[305.63168335 80.14006805]
[306.39077759 90.96334839]
[306.58056641 101.81154633]
[306.20053101 112.65475464]
[305.25177002 123.46305847]
[303.73687744 134.20663452]
[301.66000366 144.85588074]
[299.02691650 155.38137817]
[295.84484863 165.75413513]
[292.12258911 175.94552612]
[287.87039185 185.92742920]
[283.10000610 195.67231750]
[277.82458496 205.15333557]
[272.05868530 214.34429932]
[265.81817627 223.21986389]
[259.12033081 231.75556946]
[251.98356628 239.92785645]
[244.42759705 247.71417236]
[236.47325134 255.09306335]
[228.14248657 262.04415894]
[219.45826721 268.54830933]
[210.44454956 274.58755493]
[201.12619019 280.14523315]
[191.52890015 285.20602417]
[181.67915344 289.75595093]
[171.60411072 293.78250122]
[161.33155823 297.27453613]
[150.88984680 300.22244263]
[140.30776978 302.61810303]
[129.61450195 304.45486450]
[118.83956146 305.72769165]
[108.01264954 306.43304443]
[97.16363525 306.56903076]
[86.32244873 306.13522339]
[75.51898956 305.13284302]
[64.78305054 303.56466675]
[54.14425278 301.43499756]
[43.63193512 298.74972534]
[33.27509689 295.51623535]
[23.10230446 291.74346924]
[13.14161491 287.44180298]
[3.42050433 282.62313843]
[-6.03421402 277.30075073]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 33]
[2 32]
[3 31]
[4 30]
[5 28]
[6 27]
[7 26]
[8 25]
[9 24]
[10 23]
[11 22]
[12 21]
[13 20]
[45 65]
[46 64]
[47 63]
[48 61]
[49 60]
[50 59]
[84 95]
[85 94]
[86 93]
[87 92]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
