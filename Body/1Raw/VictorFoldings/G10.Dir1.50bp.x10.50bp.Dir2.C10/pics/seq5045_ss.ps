%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:58 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGUGACAUCCGGCCUGCUUCUUCUCACAUGACAAAAACUAGCCCCCAUCUCAAUCAUAUACCAAAxxxxxxxxxxAGUAAAACCCAGCCCAUGACCCCUAACAGGGGCCCUCUCAGCCCUCCUAAUGACCUCCGGCCUCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[115.78863525 291.43762207]
[115.78863525 276.43762207]
[115.78863525 261.43762207]
[115.78863525 246.43762207]
[115.78863525 231.43762207]
[115.78863525 216.43762207]
[115.78863525 201.43762207]
[115.78863525 186.43762207]
[115.78863525 171.43762207]
[115.78863525 156.43762207]
[112.36726379 141.83302307]
[105.70491028 128.39379883]
[99.04254913 114.95455933]
[89.96082306 103.01629639]
[78.78691101 93.00911713]
[67.61299896 83.00193024]
[54.67851257 82.92303467]
[45.57272720 74.31115723]
[44.82402039 62.20269394]
[33.85257721 51.97393799]
[22.88113594 41.74518204]
[11.76385021 51.82846451]
[-0.15819731 60.94610214]
[-12.80138206 69.03414154]
[-26.07702065 76.03585815]
[-39.89199066 81.90212250]
[-54.14939117 86.59180450]
[-68.74921417 90.07199860]
[-83.58905029 92.31829834]
[-98.56480408 93.31494141]
[-113.57143402 93.05493927]
[-128.50367737 91.54012299]
[-143.25679016 88.78110504]
[-157.72729492 84.79724884]
[-171.81367493 79.61649323]
[-185.41714478 73.27517700]
[-198.44227600 65.81778717]
[-210.79768372 57.29663086]
[-222.39674377 47.77147293]
[-233.15805054 37.30913544]
[-243.00616455 25.98299599]
[-251.87196350 13.87250519]
[-259.69329834 1.06261146]
[-266.41528320 -12.35683250]
[-271.99078369 -26.29169655]
[-276.38064575 -40.64423752]
[-279.55413818 -55.31378174]
[-281.48898315 -70.19742584]
[-282.17160034 -85.19078064]
[-281.59719849 -100.18866730]
[-279.76980591 -115.08588409]
[-276.70223999 -129.77795410]
[-272.41601562 -144.16178894]
[-266.94122314 -158.13652039]
[-260.31625366 -171.60412598]
[-252.58755493 -184.47010803]
[-243.80935669 -196.64425659]
[-234.04322815 -208.04116821]
[-223.35768127 -218.58088684]
[-211.82766724 -228.18948364]
[-199.53405762 -236.79957581]
[-186.56307983 -244.35075378]
[-173.00572205 -250.79005432]
[-158.95707703 -256.07232666]
[-144.51570129 -260.16049194]
[-129.78288269 -263.02587891]
[-114.86195374 -264.64840698]
[-99.85758972 -265.01666260]
[-84.87503052 -264.12811279]
[-70.01937866 -261.98895264]
[-55.39482498 -258.61419678]
[-41.10395813 -254.02749634]
[-27.24701691 -248.26106262]
[-13.92120361 -241.35533142]
[-1.21998870 -233.35871887]
[10.76753712 -224.32734680]
[21.95728874 -214.32455444]
[32.27077484 -203.42048645]
[41.63565445 -191.69165039]
[49.98624039 -179.22030640]
[57.26395416 -166.09394836]
[63.41775131 -152.40463257]
[68.40446472 -138.24839783]
[72.18910980 -123.72451782]
[74.74514771 -108.93488312]
[76.05464935 -93.98323822]
[76.10842896 -78.97444916]
[74.90610504 -64.01380157]
[72.45610809 -49.20623398]
[68.77563477 -34.65561295]
[63.89049149 -20.46399689]
[57.83494949 -6.73093557]
[50.65148544 6.44724226]
[42.39048386 18.97809982]
[33.10988998 30.77374077]
[44.08133316 41.00249863]
[55.05277634 51.23125458]
[72.32121277 54.21980667]
[77.62017822 71.82802582]
[88.79409027 81.83520508]
[99.96800232 91.84238434]
[105.73513794 77.44397736]
[118.46880341 66.34473419]
[132.55847168 61.19876480]
[146.64816284 56.05279541]
[160.73783875 50.90682983]
[174.82751465 45.76086044]
[187.63110352 34.64761734]
[201.85443115 43.87439346]
[196.92564392 60.09609222]
[179.97348022 59.85053635]
[165.88380432 64.99650574]
[151.79412842 70.14247131]
[137.70445251 75.28844452]
[123.61476898 80.43441010]
[120.83152008 87.39885712]
[135.79882812 88.38866425]
[139.48258972 102.92929077]
[126.79196930 110.92604828]
[115.26502991 101.32775879]
[112.48178864 108.29220581]
[119.14414215 121.73143768]
[125.80650330 135.17066956]
[126.90754700 120.21113586]
[131.62959290 105.97377777]
[139.68650818 93.32126617]
[150.59011841 83.02024078]
[163.67976379 75.69484711]
[178.16230774 71.78895569]
[193.16021729 71.53923035]
[207.76477051 74.96079254]
[221.09103394 81.84633636]
[232.33155823 91.77864075]
[240.80523682 104.15590668]
[245.99867249 118.22815704]
[247.59713745 133.14274597]
[245.50382996 147.99595642]
[239.84555054 161.88781738]
[230.96514893 173.97660828]
[219.40071106 183.52981567]
[205.85295105 189.96862793]
[191.14274597 192.90287781]
[176.16142273 192.15478516]
[161.81669617 187.76969910]
[148.97776794 180.01327515]
[138.42256165 169.35552979]
[130.78863525 156.43762207]
[130.78863525 171.43762207]
[130.78863525 186.43762207]
[130.78863525 201.43762207]
[130.78863525 216.43762207]
[130.78863525 231.43762207]
[130.78863525 246.43762207]
[130.78863525 261.43762207]
[130.78863525 276.43762207]
[130.78863525 291.43762207]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 156]
[2 155]
[3 154]
[4 153]
[5 152]
[6 151]
[7 150]
[8 149]
[9 148]
[10 147]
[11 123]
[12 122]
[13 121]
[14 101]
[15 100]
[16 99]
[19 97]
[20 96]
[21 95]
[103 115]
[104 114]
[105 113]
[106 112]
[107 111]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
