%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:26 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGUAACAGCCCAAUAUCUACAAUCAACCAACAAGUCAUUAUUACCCUCACUGUCAACCCAACAxxxxxxxxxxCCCCCUCUACCUAAAACUCACAGCCCUCGCUGUCACUUUCCUAGGACUUCUAACAGCCCUACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[75.44224548 108.31176758]
[89.94387817 104.48805237]
[75.43525696 100.68019104]
[60.92662811 96.87233734]
[46.41800308 93.06447601]
[31.90937805 89.25661469]
[17.40075111 85.44876099]
[2.49630427 83.75836182]
[-12.49658203 84.22028351]
[-27.48946762 84.68221283]
[-42.48235321 85.14414215]
[-57.87087250 95.20516205]
[-73.00872803 86.37963104]
[-87.98896790 87.14929199]
[-102.96920776 87.91895294]
[-117.94944763 88.68861389]
[-119.36981964 103.64857483]
[-122.95332336 118.24228668]
[-128.62359619 132.15867615]
[-136.25976562 145.10112000]
[-145.69905090 156.79374695]
[-156.74028015 166.98733521]
[-169.14810181 175.46458435]
[-182.65803528 182.04483032]
[-196.98210144 186.58781433]
[-211.81501770 188.99667358]
[-226.84059143 189.22009277]
[-241.73857117 187.25329590]
[-256.19137573 183.13819885]
[-269.89099121 176.96252441]
[-282.54534912 168.85792542]
[-293.88476562 158.99711609]
[-303.66751099 147.59030151]
[-311.68511963 134.88059998]
[-317.76663208 121.13895416]
[-321.78244019 106.65824127]
[-323.64697266 91.74712372]
[-323.32043457 76.72343445]
[-320.80984497 61.90740204]
[-316.16867065 47.61483383]
[-309.49588013 34.15037918]
[-300.93368530 21.80102730]
[-290.66455078 10.83001041]
[-278.90744019 1.47117472]
[-265.91290283 -6.07599592]
[-251.95791626 -11.65063286]
[-237.33996582 -15.13391209]
[-222.37060547 -16.45158768]
[-207.36892700 -15.57557297]
[-192.65467834 -12.52453995]
[-178.54150391 -7.36352301]
[-165.33021545 -0.20252837]
[-153.30242920 8.80580711]
[-142.71450806 19.46946907]
[-133.79212952 31.56116295]
[-126.72547913 44.82315063]
[-121.66518402 58.97275543]
[-118.71910858 73.70837402]
[-103.73886871 72.93871307]
[-88.75862885 72.16905212]
[-73.77838135 71.39939117]
[-65.41043091 62.61079025]
[-52.89486313 61.88145447]
[-42.94427872 70.15125275]
[-27.95139313 69.68932343]
[-12.95850754 69.22740173]
[2.03437829 68.76547241]
[-10.71511745 60.86292267]
[-19.55538940 48.74477005]
[-23.18776894 34.19121933]
[-21.07864571 19.34023857]
[-13.53786087 6.37349129]
[-1.67317998 -2.80416346]
[12.77243233 -6.84449434]
[27.67686462 -5.15396309]
[40.85060120 2.01908588]
[50.35837555 13.62090588]
[54.80346298 27.94714737]
[53.53285980 42.89323807]
[46.73322296 56.26353836]
[35.40344620 66.09391022]
[21.20861053 70.94013214]
[35.71723557 74.74799347]
[50.22586060 78.55584717]
[64.73448944 82.36370850]
[79.24311066 86.17156982]
[93.75173950 89.97942352]
[97.10468292 88.18572998]
[100.96155548 87.51823425]
[104.94321442 88.11325836]
[108.63601685 89.97942352]
[123.14464569 86.17156982]
[137.65327454 82.36370850]
[152.16189575 78.55584717]
[166.58927917 74.45090485]
[180.92933655 70.05060577]
[195.26940918 65.65030670]
[200.39390564 51.12289429]
[212.94329834 42.49932861]
[227.98631287 42.91396713]
[239.75971985 51.99828720]
[254.09977722 47.59798813]
[268.43984985 43.19768906]
[282.77990723 38.79738617]
[297.11996460 34.39708710]
[307.88964844 22.02995872]
[323.93069458 25.43835068]
[328.74142456 41.11600113]
[317.37301636 52.93508911]
[301.52026367 48.73714828]
[287.18020630 53.13744736]
[272.84014893 57.53775024]
[258.50009155 61.93804932]
[244.16001892 66.33834839]
[239.50830078 80.46278381]
[227.28695679 89.24358368]
[212.06054688 89.14312744]
[199.66970825 79.99036407]
[185.32963562 84.39066315]
[170.98957825 88.79096985]
[167.97714233 92.56911469]
[162.53480530 94.45827484]
[155.96975708 93.06447601]
[141.46113586 96.87233734]
[126.95250702 100.68019104]
[112.44387817 104.48805237]
[126.94808197 108.31273651]
[140.36338806 115.02312469]
[152.12261963 124.33550262]
[161.72859192 135.85615540]
[168.77516174 149.09797668]
[172.96441650 163.50111389]
[174.11920166 178.45658875]
[172.19071960 193.33210754]
[167.26049805 207.49871826]
[159.53698730 220.35746765]
[149.34674072 231.36468506]
[137.12059021 240.05499268]
[123.37547302 246.06094360]
[108.69251251 249.12864685]
[93.69251251 249.12835693]
[79.00967407 246.06011963]
[65.26477814 240.05363464]
[53.03895569 231.36286926]
[42.84912109 220.35527039]
[35.12609482 207.49623108]
[30.19640732 193.32943726]
[28.26848412 178.45384216]
[29.42383957 163.49841309]
[33.61362076 149.09542847]
[40.66069031 135.85388184]
[50.26709366 124.33358765]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 87]
[3 86]
[4 85]
[5 84]
[6 83]
[7 82]
[8 67]
[9 66]
[10 65]
[11 64]
[13 61]
[14 60]
[15 59]
[16 58]
[91 126]
[92 125]
[93 124]
[94 123]
[95 120]
[96 119]
[97 118]
[101 114]
[102 113]
[103 112]
[104 111]
[105 110]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
