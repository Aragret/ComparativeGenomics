%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:15 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCUACCUCCCUCACCAAAGCCCAUAAAAAUAAAAAAUUAUAACAAACCCUGAGAACCAAAAxxxxxxxxxxAUGGCAAGCCAACGCCACUUAUCCAGUGAACCACUAUCACGAAAAAAACUCUACCUCUCUCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[2.67466450 285.02124023]
[-4.78024578 298.03753662]
[-4.92477608 313.85809326]
[-17.96422768 321.05682373]
[-25.41913795 334.07315063]
[-32.87404633 347.08944702]
[-40.32895660 360.10577393]
[-47.78386688 373.12207031]
[-55.23877716 386.13839722]
[-62.69368744 399.15469360]
[-62.09577179 415.54293823]
[-76.13130188 424.02444458]
[-90.36172485 415.87417603]
[-90.14801025 399.47640991]
[-75.70999908 391.69976807]
[-68.25508881 378.68347168]
[-60.80017853 365.66717529]
[-53.34526825 352.65084839]
[-45.89035797 339.63455200]
[-38.43544769 326.61822510]
[-30.98053741 313.60192871]
[-31.36923218 298.71240234]
[-17.79655457 290.58264160]
[-10.34164524 277.56631470]
[-25.35501671 267.30569458]
[-39.41992569 255.77920532]
[-52.42995453 243.07406616]
[-64.28666687 229.28637695]
[-74.90035248 214.52049255]
[-84.19070435 198.88812256]
[-92.08743286 182.50755310]
[-98.53078461 165.50270081]
[-103.47201538 148.00224304]
[-106.87373352 130.13859558]
[-108.71020508 112.04691315]
[-108.96752930 93.86408234]
[-107.64376068 75.72766876]
[-104.74891663 57.77491379]
[-119.32161713 54.22014999]
[-133.89431763 50.66539001]
[-148.46702576 47.11062622]
[-164.04734802 52.22780991]
[-176.08705139 41.09328079]
[-172.20071411 25.16128731]
[-156.38626099 20.82129860]
[-144.91226196 32.53792191]
[-130.33955383 36.09268570]
[-115.76686096 39.64744568]
[-101.19415283 43.20220947]
[-97.71145630 32.06430817]
[-93.61269379 21.13808823]
[-88.91065216 10.45759869]
[-83.61997986 0.05611663]
[-77.75715637 -10.03394699]
[-71.34045410 -19.78115273]
[-64.38986969 -29.15512848]
[-56.92705917 -38.12666321]
[-48.97526932 -46.66780853]
[-40.55928421 -54.75194550]
[-31.70532608 -62.35388565]
[-22.44098282 -69.44994354]
[-12.79512215 -76.01800537]
[-2.79779983 -82.03760529]
[7.51983404 -87.48999023]
[18.12562943 -92.35816956]
[28.98653984 -96.62696838]
[40.06872559 -100.28309631]
[51.33765030 -103.31515503]
[62.75820541 -105.71369934]
[74.29479980 -107.47125244]
[85.91149139 -108.58233643]
[97.57209015 -109.04349518]
[109.24024200 -108.85328674]
[120.87960815 -108.01230621]
[132.45391846 -106.52317047]
[143.92709351 -104.39052582]
[155.26339722 -101.62101746]
[166.42752075 -98.22326660]
[177.38464355 -94.20786285]
[188.10064697 -89.58732605]
[198.54212952 -84.37604523]
[208.67655945 -78.59026337]
[216.92884827 -91.11622620]
[225.18113708 -103.64218903]
[233.43342590 -116.16815186]
[227.84234619 -130.64292908]
[231.85964966 -145.63095093]
[243.94061279 -155.36901855]
[259.43984985 -156.11264038]
[272.39761353 -147.57588196]
[277.83135986 -133.04130554]
[273.65167236 -118.09774017]
[261.46578979 -108.49130249]
[245.95939636 -107.91585541]
[237.70710754 -95.38990021]
[229.45481873 -82.86393738]
[221.20252991 -70.33797455]
[237.70874023 -57.29392624]
[252.82038879 -42.65695572]
[266.38439941 -26.57529831]
[278.26345825 -9.21180820]
[288.33721924 9.25767231]
[296.50369263 28.64610291]
[302.68014526 48.75713730]
[306.80407715 69.38710785]
[308.83370972 90.32709503]
[323.83288574 90.17105865]
[338.83206177 90.01502228]
[353.83126831 89.85898590]
[363.61727905 77.66194916]
[378.96392822 74.65952301]
[392.62496948 82.26936340]
[398.15008545 96.89834595]
[392.93051147 111.63909912]
[379.43072510 119.53150177]
[364.02493286 116.84899139]
[353.98730469 104.85817719]
[338.98809814 105.01421356]
[323.98892212 105.17024994]
[308.98974609 105.32628632]
[308.23193359 118.56163025]
[306.63681030 131.72233582]
[304.21072388 144.75547791]
[300.96347046 157.60864258]
[296.90811157 170.23016357]
[292.06091309 182.56925964]
[286.44140625 194.57632446]
[280.07217407 206.20307922]
[272.97879028 217.40277100]
[265.18984985 228.13035583]
[256.73666382 238.34268188]
[247.65316772 247.99871826]
[237.97592163 257.05960083]
[227.74386597 265.48892212]
[216.99809265 273.25277710]
[205.78186035 280.31991577]
[194.14025879 286.66195679]
[182.12008667 292.25338745]
[169.76968384 297.07174683]
[157.13873291 301.09759521]
[144.27799988 304.31478882]
[131.23922729 306.71038818]
[118.07482910 308.27474976]
[104.83774567 309.00161743]
[91.58121490 308.88800049]
[78.35852814 307.93441772]
[65.22287750 306.14468384]
[52.22706604 303.52597046]
[39.42336655 300.08883667]
[26.86325645 295.84710693]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 24]
[2 23]
[4 21]
[5 20]
[6 19]
[7 18]
[8 17]
[9 16]
[10 15]
[38 49]
[39 48]
[40 47]
[41 46]
[82 97]
[83 96]
[84 95]
[85 94]
[106 120]
[107 119]
[108 118]
[109 117]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
