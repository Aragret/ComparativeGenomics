%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:54 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCCUCCGCUACCAUAAUCAUCGCUAUCCCCACCGGCGUCAAAGUAUUUAGCUGACUCGCCACACxxxxxxxxxxGCCUUUUCAUCAAUCGCCCACAUCACUCGAGACGUAAAUUAUGGCUGAAUCAUCCGCUACCUUCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[92.50000000 442.78689575]
[92.50000000 427.78689575]
[92.50000000 412.78689575]
[92.50000000 397.78689575]
[92.50000000 382.78689575]
[92.50000000 367.78689575]
[92.50000000 352.78689575]
[92.50000000 337.78689575]
[92.50000000 322.78689575]
[92.50000000 307.78689575]
[77.77018738 305.05325317]
[63.78981781 299.65798950]
[51.03553772 291.78347778]
[39.94248962 281.69671631]
[30.88946152 269.74008179]
[24.18593407 256.31991577]
[20.06152153 241.89260864]
[18.65810013 226.94912720]
[20.02492142 211.99822998]
[24.11689758 197.54927063]
[30.79607773 184.09471130]
[39.83630371 172.09341431]
[50.93086243 161.95501709]
[63.70289993 154.02586365]
[77.71820831 148.57725525]
[92.50000000 145.79611206]
[92.50000000 130.79611206]
[92.50000000 115.79611206]
[81.65364838 109.24291229]
[76.84331512 95.44695282]
[61.86207581 96.19701385]
[46.88084412 96.94708252]
[40.51253891 110.86481476]
[28.39870071 120.21968079]
[13.32299995 122.86199951]
[-1.25027692 118.18459320]
[-11.97229767 107.26228333]
[-16.37922096 92.60494232]
[-13.45836830 77.58071899]
[-3.88092995 65.64207458]
[10.15226936 59.53241730]
[25.41650200 60.65570450]
[38.40415955 68.75380707]
[46.13077545 81.96585083]
[61.11201096 81.21578217]
[76.09324646 80.46571350]
[88.12177277 71.50387573]
[93.12651825 57.36342239]
[98.13126373 43.22296524]
[95.44175720 27.63203430]
[106.98213196 18.21561813]
[106.14197540 11.56640339]
[108.47209167 6.30569649]
[112.48036957 3.61638427]
[118.04686737 -10.31251240]
[123.61335754 -24.24140930]
[129.17985535 -38.17030716]
[134.74633789 -52.09920502]
[134.17288208 -58.77671051]
[136.71162415 -63.93997574]
[140.82427979 -66.46676636]
[146.94360352 -80.16179657]
[145.50929260 -95.91785431]
[157.76560974 -104.38140869]
[163.88493347 -118.07643890]
[170.00425720 -131.77146912]
[176.12358093 -145.46650696]
[163.39154053 -153.44404602]
[151.89370728 -163.11596680]
[141.85391235 -174.29399109]
[133.46755981 -186.76055908]
[126.89789581 -200.27299500]
[122.27281952 -214.56826782]
[119.68234253 -229.36811829]
[119.17689514 -244.38446045]
[120.76631927 -259.32501221]
[124.41966248 -273.89892578]
[130.06582642 -287.82254028]
[137.59490967 -300.82479858]
[146.86033630 -312.65264893]
[157.68176270 -323.07583618]
[169.84855652 -331.89147949]
[183.12387085 -338.92794800]
[197.24931335 -344.04830933]
[211.94992065 -347.15289307]
[226.93952942 -348.18124390]
[241.92639160 -347.11337280]
[256.61874390 -343.97003174]
[270.73065186 -338.81243896]
[283.98736572 -331.74096680]
[296.13085938 -322.89328003]
[306.92474365 -312.44158936]
[316.15896606 -300.58935547]
[323.65371704 -287.56726074]
[329.26315308 -273.62881470]
[332.87805176 -259.04531860]
[334.42807007 -244.10063171]
[333.88302612 -229.08567810]
[331.25350952 -214.29270935]
[326.59075928 -200.00967407]
[319.98550415 -186.51461792]
[311.56628418 -174.07022095]
[301.49703979 -162.91870117]
[289.97375488 -153.27713013]
[277.22070312 -145.33319092]
[263.48617554 -139.24151611]
[249.03747559 -135.12068176]
[234.15586853 -133.05088806]
[219.13104248 -133.07243347]
[204.25543213 -135.18490601]
[189.81861877 -139.34716797]
[183.69929504 -125.65214539]
[177.57997131 -111.95711517]
[171.46064758 -98.26208496]
[173.33265686 -83.48558807]
[160.63864136 -74.04247284]
[154.51931763 -60.34744263]
[148.67523193 -46.53271103]
[143.10874939 -32.60381317]
[137.54225159 -18.67491722]
[131.97575378 -4.74602079]
[126.40927124 9.18287659]
[121.12258911 23.22036362]
[124.17007446 37.79987335]
[112.27172089 48.22771072]
[107.26697540 62.36816788]
[102.26222992 76.50862122]
[120.23419952 96.45077515]
[107.50000000 115.79611206]
[107.50000000 130.79611206]
[107.50000000 145.79611206]
[122.28179169 148.57725525]
[136.29710388 154.02586365]
[149.06913757 161.95501709]
[160.16369629 172.09341431]
[169.20391846 184.09471130]
[175.88310242 197.54927063]
[179.97508240 211.99822998]
[181.34190369 226.94912720]
[179.93847656 241.89260864]
[175.81407166 256.31991577]
[169.11053467 269.74008179]
[160.05751038 281.69671631]
[148.96446228 291.78347778]
[136.21018982 299.65798950]
[122.22981262 305.05325317]
[107.50000000 307.78689575]
[107.50000000 322.78689575]
[107.50000000 337.78689575]
[107.50000000 352.78689575]
[107.50000000 367.78689575]
[107.50000000 382.78689575]
[107.50000000 397.78689575]
[107.50000000 412.78689575]
[107.50000000 427.78689575]
[107.50000000 442.78689575]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 156]
[2 155]
[3 154]
[4 153]
[5 152]
[6 151]
[7 150]
[8 149]
[9 148]
[10 147]
[26 131]
[27 130]
[28 129]
[30 46]
[31 45]
[32 44]
[47 127]
[48 126]
[49 125]
[51 123]
[54 122]
[55 121]
[56 120]
[57 119]
[58 118]
[61 117]
[62 116]
[64 114]
[65 113]
[66 112]
[67 111]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
