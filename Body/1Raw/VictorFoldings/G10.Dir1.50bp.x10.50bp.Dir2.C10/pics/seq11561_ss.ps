%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:30 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGAUCCUCAUCCUAGCAAUAAUCCCCAUCCUCCAUAUAUCCAAACAACAAAGCAUAAUAUUUCxxxxxxxxxxAACUAGGAGGCGUCCUUGCCCUAUUACUAUCCAUCCUCAUCCUAGCAAUAAUCCCCAUCCUCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[99.61874390 273.30123901]
[99.61874390 258.30123901]
[99.61874390 243.30123901]
[99.61874390 228.30123901]
[99.61874390 213.30123901]
[99.61874390 198.30123901]
[99.61874390 183.30123901]
[99.61874390 168.30123901]
[99.61874390 153.30123901]
[99.61874390 138.30123901]
[88.08411407 135.69551086]
[78.09296417 129.76855469]
[70.55240631 121.20739746]
[66.10047913 110.93012238]
[65.05323792 99.98839569]
[67.38524628 89.46021271]
[72.74432373 80.34366608]
[80.49781799 73.46240997]
[68.34448242 64.67057037]
[56.19115067 55.87872314]
[44.03781891 47.08688354]
[31.88448524 38.29504013]
[19.73115158 29.50319672]
[9.74669743 40.71487427]
[-1.32081008 50.85890198]
[-13.35780144 59.83118439]
[-26.24075508 67.53964996]
[-39.83747482 73.90520477]
[-54.00843048 78.86251831]
[-68.60820770 82.36072540]
[-83.48699188 84.36392975]
[-98.49210358 84.85157776]
[-113.46955109 83.81865692]
[-128.26565552 81.27577209]
[-142.72859192 77.24900818]
[-156.70991516 71.77970123]
[-170.06619263 64.92397308]
[-182.66033936 56.75216293]
[-194.36312866 47.34813690]
[-205.05447388 36.80839157]
[-214.62464905 25.24108696]
[-222.97547913 12.76491642]
[-230.02124023 -0.49209049]
[-235.68963623 -14.39389610]
[-239.92251587 -28.79784584]
[-242.67643738 -43.55612946]
[-243.92312622 -58.51730347]
[-243.64981079 -73.52784729]
[-241.85928345 -88.43371582]
[-238.56991577 -103.08196259]
[-233.81547546 -117.32226562]
[-227.64472961 -131.00849915]
[-220.12101746 -144.00021362]
[-211.32153320 -156.16410828]
[-201.33659363 -167.37533569]
[-190.26863098 -177.51887512]
[-178.23124695 -186.49063110]
[-165.34796143 -194.19853210]
[-151.75096130 -200.56349182]
[-137.57977295 -205.52018738]
[-122.97985077 -209.01774597]
[-108.10097504 -211.02029419]
[-93.09584808 -211.50727844]
[-78.11843872 -210.47369385]
[-63.32244873 -207.93016052]
[-48.85969925 -203.90277100]
[-34.87860489 -198.43284607]
[-21.52263832 -191.57652283]
[-8.92884922 -183.40415955]
[2.77352738 -173.99961853]
[13.46440601 -163.45941162]
[23.03408051 -151.89167786]
[31.38435173 -139.41514587]
[38.42953110 -126.15782928]
[44.09732437 -112.25576782]
[48.32956696 -97.85163879]
[51.08283615 -83.09323120]
[52.32887268 -68.13200378]
[52.05489349 -53.12147141]
[50.26370621 -38.21567917]
[46.97369766 -23.56757927]
[42.21862030 -9.32748508]
[36.04727936 4.35847616]
[28.52299500 17.34986305]
[40.67632675 26.14170647]
[52.82966232 34.93354797]
[64.98299408 43.72539139]
[77.13632965 52.51723480]
[89.28965759 61.30907822]
[104.23909760 60.07846451]
[114.79110718 49.41755676]
[125.34312439 38.75664520]
[135.89514160 28.09573746]
[139.53256226 12.10507679]
[155.27738953 7.51899958]
[166.93270874 19.05526924]
[162.50852966 34.84636307]
[146.55604553 38.64775467]
[136.00402832 49.30866241]
[125.45201874 59.96957016]
[114.90000153 70.63047791]
[131.09538269 82.62985229]
[138.17303467 103.15435791]
[153.10903931 104.53838348]
[168.04505920 105.92240906]
[182.98107910 107.30643463]
[197.43627930 100.87545776]
[209.39535522 109.75408173]
[224.33135986 111.13810730]
[239.26737976 112.52213287]
[246.68194580 99.22010040]
[258.86981201 90.08905792]
[273.71936035 86.71102142]
[288.65777588 89.67124939]
[301.09695435 98.45686340]
[308.88168335 111.54570770]
[310.66323853 126.67005920]
[306.13293457 141.20953369]
[296.07568359 152.64508057]
[282.23394775 158.99540710]
[267.00592041 159.16030884]
[253.02995300 153.11119080]
[242.72743225 141.89610291]
[237.88336182 127.45814514]
[222.94734192 126.07411957]
[208.01132202 124.69009399]
[194.62443542 131.22006226]
[181.59704590 122.24244690]
[166.66102600 120.85842133]
[151.72502136 119.47439575]
[136.78900146 118.09037018]
[131.24644470 123.14308929]
[143.69049072 131.51838684]
[156.13453674 139.89369202]
[169.50148010 146.69992065]
[174.32328796 160.90379333]
[167.86236572 174.44100952]
[153.78691101 179.62576294]
[140.08833313 173.51435852]
[134.54406738 159.57600403]
[127.35269165 146.41226196]
[120.16130829 133.24851990]
[114.61874390 138.30123901]
[114.61874390 153.30123901]
[114.61874390 168.30123901]
[114.61874390 183.30123901]
[114.61874390 198.30123901]
[114.61874390 213.30123901]
[114.61874390 228.30123901]
[114.61874390 243.30123901]
[114.61874390 258.30123901]
[114.61874390 273.30123901]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 152]
[2 151]
[3 150]
[4 149]
[5 148]
[6 147]
[7 146]
[8 145]
[9 144]
[10 143]
[18 89]
[19 88]
[20 87]
[21 86]
[22 85]
[23 84]
[90 101]
[91 100]
[92 99]
[93 98]
[103 131]
[104 130]
[105 129]
[106 128]
[108 126]
[109 125]
[110 124]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
