%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:10 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGACCGCUAACAACCUAUUCCAACUGUUCAUCGGCUGAGAGGGCGUAGGAAUUAUAUCCUUCxxxxxxxxxxCAGGAAUACCUUUCCUCACAGGUUUCUACUCCAAAGACCACAUCAUCGAAACCGCAAACACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[87.21776581 256.50979614]
[87.21776581 241.50979614]
[87.21776581 226.50979614]
[87.21776581 211.50979614]
[87.21776581 196.50979614]
[87.21776581 181.50979614]
[87.21776581 166.50979614]
[87.21776581 151.50979614]
[87.21776581 136.50979614]
[87.21776581 121.50978851]
[87.52777100 115.23518372]
[89.34887695 109.62749481]
[75.82468414 116.11566162]
[62.30049515 122.60382843]
[56.82836914 139.18675232]
[41.37403488 146.56561279]
[25.66853333 140.63305664]
[12.28224850 147.40118408]
[-1.10403585 154.16929626]
[-14.49032116 160.93740845]
[-14.14396095 176.19659424]
[-20.46043205 190.09136963]
[-32.18559265 199.86293030]
[-46.99140930 203.57112122]
[-61.93817139 200.47966003]
[-74.05818939 191.20237732]
[-80.94502258 177.58128357]
[-81.23129272 162.32084656]
[-74.86015320 148.45104980]
[-63.09659958 138.72573853]
[-48.27629471 135.07589722]
[-33.34182358 138.22618103]
[-21.25843620 147.55111694]
[-7.87215090 140.78300476]
[5.51413441 134.01489258]
[18.90041924 127.24678040]
[21.18342209 114.52731323]
[30.52905273 105.32223511]
[43.66646194 103.16900635]
[55.81233215 109.07963562]
[69.33651733 102.59146881]
[82.86071014 96.10330963]
[89.90584564 82.86071777]
[87.72901154 68.01951599]
[85.55216980 53.17831039]
[75.89406586 40.64708710]
[81.70244598 26.93169403]
[79.52560425 12.09048843]
[77.34877014 -2.75071740]
[75.17193604 -17.59192276]
[64.36925507 -22.73731613]
[57.48696518 -32.37800980]
[56.15701675 -44.02725983]
[60.59724426 -54.74882889]
[69.58575439 -61.89705658]
[68.02817535 -76.81597137]
[66.47059631 -91.73487854]
[57.34212875 -104.65702057]
[63.71601868 -118.11891937]
[62.15843964 -133.03782654]
[59.38438416 -136.56857300]
[58.05402756 -140.41580200]
[58.08503723 -144.07379150]
[59.23532104 -147.11860657]
[61.14496994 -149.25415039]
[60.83291245 -164.25090027]
[60.52085876 -179.24765015]
[60.20880127 -194.24441528]
[46.15433884 -200.10887146]
[35.70496368 -211.18725586]
[30.67109299 -225.56015015]
[31.92487526 -240.73736572]
[39.24908829 -254.08935547]
[51.37476349 -263.30282593]
[66.20105743 -266.78146362]
[81.15921783 -263.92257690]
[93.65766907 -255.22151184]
[101.53096008 -242.18574524]
[103.41500854 -227.07382202]
[98.98338318 -212.50396729]
[89.00389862 -201.00050354]
[75.20555115 -194.55647278]
[75.51760864 -179.55970764]
[75.82966614 -164.56295776]
[76.14172363 -149.56620789]
[77.07735443 -134.59541321]
[78.63493347 -119.67650604]
[87.65199280 -107.82146454]
[81.38951111 -93.29246521]
[82.94709015 -78.37355042]
[84.50466919 -63.45463562]
[99.37870026 -52.86403656]
[101.89620972 -34.45861435]
[90.01313782 -19.76876068]
[92.18997192 -4.92755413]
[94.36681366 9.91365147]
[96.54364777 24.75485611]
[106.04605103 36.22453690]
[100.39337921 51.00147247]
[102.57021332 65.84268188]
[104.74705505 80.68388367]
[116.44667816 90.07104492]
[131.40692139 88.97973633]
[146.35737610 78.28095245]
[161.85304260 86.45923615]
[176.78733826 85.05693054]
[191.72164917 83.65462494]
[200.45993042 70.68634033]
[215.50387573 66.41861725]
[229.75021362 72.86654663]
[236.47225952 86.98561859]
[232.49604797 102.10923767]
[219.69905090 111.09648895]
[204.12359619 109.70387268]
[193.12396240 98.58893585]
[178.18965149 99.99124146]
[163.25534058 101.39353943]
[155.26481628 110.52912140]
[142.78919983 111.78535461]
[132.49822998 103.93998718]
[117.53798676 105.03129578]
[131.19004822 111.24590302]
[144.84210205 117.46051788]
[158.49415588 123.67512512]
[173.49409485 123.71793365]
[187.53623962 128.99221802]
[198.85528564 138.83493042]
[206.02827454 152.00871277]
[208.15344238 166.85740662]
[204.96363831 181.51431274]
[196.85986328 194.13685608]
[184.86087036 203.13821411]
[170.47511292 207.38674927]
[155.51109314 206.34838867]
[141.85002136 200.15364075]
[131.20925903 189.58131409]
[124.92652893 175.96046448]
[123.79191589 161.00100708]
[116.60053253 147.83726501]
[109.40914917 134.67352295]
[102.21776581 121.50978851]
[102.21776581 136.50979614]
[102.21776581 151.50979614]
[102.21776581 166.50979614]
[102.21776581 181.50979614]
[102.21776581 196.50979614]
[102.21776581 211.50979614]
[102.21776581 226.50979614]
[102.21776581 241.50979614]
[102.21776581 256.50979614]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[12 42]
[13 41]
[14 40]
[17 36]
[18 35]
[19 34]
[20 33]
[43 101]
[44 100]
[45 99]
[47 97]
[48 96]
[49 95]
[50 94]
[55 91]
[56 90]
[57 89]
[59 87]
[60 86]
[65 85]
[66 84]
[67 83]
[68 82]
[102 121]
[103 120]
[105 117]
[106 116]
[107 115]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
