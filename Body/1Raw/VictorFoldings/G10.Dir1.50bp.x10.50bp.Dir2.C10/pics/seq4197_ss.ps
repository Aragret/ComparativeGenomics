%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:53 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGUACACAACAUAUUUUGUCACCAAGACCCUACUUCUAACCUCCCUGUUCUUAUGAAUUCGAxxxxxxxxxxUUCUCGGCCUAUCCGGAAUGCCCCGACGUUACUCGGACUACCCCGAUGCAUACACCACAUCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[94.64690399 251.96072388]
[94.64690399 236.96072388]
[94.64690399 221.96072388]
[94.64690399 206.96072388]
[94.64690399 191.96072388]
[94.64690399 176.96072388]
[94.64690399 161.96072388]
[94.64690399 146.96072388]
[94.64690399 131.96072388]
[94.64690399 116.96072388]
[87.59400940 124.79003906]
[78.05033875 130.59790039]
[67.17151642 140.92509460]
[56.29269028 151.25230408]
[51.61102676 166.36497498]
[37.05352783 169.51593018]
[26.17470360 179.84313965]
[22.04118538 195.71279907]
[6.16119242 199.80642700]
[-5.12929773 187.91287231]
[-0.21559817 172.26718140]
[15.84749889 168.96430969]
[26.72632408 158.63710022]
[30.62986183 144.26310730]
[45.96548462 140.37347412]
[56.84431076 130.04627991]
[67.72313690 119.71907043]
[64.47231293 105.07556915]
[50.24553299 100.32175446]
[38.33521271 105.38121796]
[26.55678749 101.08148956]
[21.07119370 90.25487518]
[6.94639111 85.20612335]
[-7.17841196 80.15736389]
[-21.30321503 75.10861206]
[-25.68647385 76.08253479]
[-29.73062515 75.61789703]
[-33.01530838 74.00769806]
[-35.26299286 71.65357208]
[-36.36242294 69.00808716]
[-50.01866150 62.80268478]
[-61.38531876 72.93772125]
[-75.89353943 77.56712341]
[-91.02969360 75.88880920]
[-104.17134857 68.19356537]
[-113.04163361 55.81463242]
[-116.10371399 40.89673996]
[-112.82707214 26.02449799]
[-103.77940369 13.77461910]
[-90.52826691 6.26946449]
[-75.36951447 4.80934811]
[-60.92947388 9.64724445]
[-49.70998383 19.94495773]
[-43.65488434 33.91835022]
[-43.81325531 49.14644241]
[-30.15701485 55.35184860]
[-16.25445938 60.98380661]
[-2.12965560 66.03256226]
[11.99514771 71.08132172]
[26.11995125 76.13007355]
[43.15585327 72.03398132]
[54.99934769 86.09497833]
[69.22612762 90.84879303]
[75.44584656 86.65772247]
[67.06389618 74.21814728]
[79.50359344 65.83638763]
[87.88528442 78.27557373]
[94.10500336 74.08450317]
[95.04063416 59.11371231]
[95.97626495 44.14292145]
[82.45792389 37.13047409]
[72.96560669 25.22183418]
[69.14389801 10.48024273]
[71.65495300 -4.54022694]
[80.06369781 -17.23719025]
[92.91327667 -25.41081810]
[107.97741699 -27.64498520]
[122.64617157 -23.55260468]
[134.37808228 -13.84270668]
[141.14053345 -0.19759147]
[141.76188660 15.01864338]
[136.13447571 29.16969299]
[125.23330688 39.80380249]
[110.94705200 45.07854843]
[110.01142883 60.04934311]
[109.07579803 75.02013397]
[120.47682190 84.76778412]
[135.12031555 81.51696014]
[140.32435608 77.27130890]
[146.03207397 76.46308136]
[150.44024658 78.44892120]
[165.20629883 75.81005859]
[179.97235107 73.17119598]
[187.93029785 68.55351257]
[195.07281494 70.63437653]
[209.89057922 68.30326843]
[213.51258850 53.56703186]
[222.47640991 41.37305450]
[235.39099121 33.56106567]
[250.27224731 31.29484177]
[264.84780884 34.88893890]
[276.90408325 43.76543045]
[284.62228394 56.54660797]
[299.44003296 54.21550369]
[314.25781250 51.88439941]
[329.07556152 49.55329514]
[338.17459106 36.63110352]
[353.76004028 34.01008224]
[366.58529663 43.24523926]
[369.04141235 58.85751343]
[359.67117310 71.58442688]
[344.03378296 73.87532043]
[331.40667725 64.37105560]
[316.58889771 66.70215607]
[301.77114868 69.03326416]
[286.95339966 71.36436462]
[283.53228760 85.89795685]
[274.78381348 98.04741669]
[262.01577759 105.94316101]
[247.15751648 108.35550690]
[232.46817017 104.88611603]
[220.19332886 96.03337097]
[212.22167969 83.12102509]
[197.40393066 85.45213318]
[182.61122131 87.93724823]
[167.84516907 90.57611084]
[153.07910156 93.21498108]
[138.37113953 96.16046143]
[123.72764587 99.41128540]
[138.13705444 103.57888794]
[153.12763977 103.04751587]
[166.48913574 109.86442566]
[174.85736084 122.31324005]
[176.12532043 137.25955200]
[169.97377014 150.94013977]
[157.95156860 159.91046143]
[143.08569336 161.91194153]
[129.11914062 156.44062805]
[119.56842041 144.87413025]
[116.83828735 130.12446594]
[109.64690399 116.96072388]
[109.64690399 131.96072388]
[109.64690399 146.96072388]
[109.64690399 161.96072388]
[109.64690399 176.96072388]
[109.64690399 191.96072388]
[109.64690399 206.96072388]
[109.64690399 221.96072388]
[109.64690399 236.96072388]
[109.64690399 251.96072388]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[12 27]
[13 26]
[14 25]
[16 23]
[17 22]
[28 63]
[29 62]
[32 60]
[33 59]
[34 58]
[35 57]
[40 56]
[41 55]
[68 86]
[69 85]
[70 84]
[87 129]
[88 128]
[91 127]
[92 126]
[93 125]
[95 124]
[96 123]
[103 116]
[104 115]
[105 114]
[106 113]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
