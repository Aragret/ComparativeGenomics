%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:47 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCAUAAUCAUCGCUAUCCCCACCGGCGUCAAAGUAUUUAGCUGACUCGCCACACUCCACGGAxxxxxxxxxxUUCUCAGGCUACACCCUAGACCAAACCUACGCCAAAAUCCAUUUCACUAUCAUAUUCAUCGCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[100.47296906 126.58935547]
[91.06910706 138.27557373]
[88.44543457 153.87771606]
[74.43842316 158.94258118]
[65.03456879 170.62878418]
[55.63071060 182.31500244]
[46.22685242 194.00120544]
[43.85519028 212.23321533]
[27.30407715 217.98692322]
[18.14214325 229.86373901]
[8.98020744 241.74057007]
[14.25859070 256.23684692]
[10.83948040 271.28054810]
[-0.18609726 282.07131958]
[-15.29992104 285.16580200]
[-29.67922401 279.57659912]
[-38.73562241 267.08718872]
[-39.57925415 251.68292236]
[-31.94091988 238.27920532]
[-18.25798225 231.15315247]
[-2.89661646 232.57862854]
[6.26531887 220.70181274]
[15.42725468 208.82498169]
[14.19749069 196.75228882]
[21.78648567 186.77339172]
[34.54064178 184.59735107]
[43.94449997 172.91114807]
[53.34835815 161.22492981]
[62.75221634 149.53872681]
[64.70326233 134.77246094]
[79.38290405 128.87170410]
[88.78675842 117.18550110]
[84.53391266 102.80101776]
[70.28721619 98.10721588]
[56.04052734 93.41342163]
[41.79383469 88.71961975]
[27.45377350 84.31932068]
[13.02638912 80.21437073]
[-1.40099561 76.10942841]
[-11.90477085 87.24178314]
[-26.38262939 92.20667267]
[-41.50766754 89.86321259]
[-53.80426025 80.74990845]
[-60.44674301 66.96092224]
[-59.90871811 51.66487503]
[-52.31382370 38.37667847]
[-39.40731049 30.14986610]
[-24.15499687 28.87489700]
[-10.06175613 34.84475327]
[-0.36611128 46.68759918]
[2.70394921 61.68204117]
[17.13133430 65.78698730]
[31.55871773 69.89192963]
[36.14132309 68.35930634]
[41.73596954 69.73327637]
[46.48763657 74.47292328]
[60.73432922 79.16672516]
[74.98101807 83.86052704]
[89.22771454 88.55432892]
[78.97538757 77.60490417]
[68.72306824 66.65547943]
[58.47074890 55.70605087]
[44.69893646 49.76154709]
[32.61902618 40.86908722]
[22.85128784 29.48527336]
[15.89725590 16.19462013]
[12.11399841 1.67956018]
[11.69577217 -13.31460857]
[14.66405201 -28.01798630]
[20.86642647 -41.67560577]
[29.98442459 -53.58619308]
[41.54986954 -63.13817978]
[54.96891403 -69.84111023]
[69.55253601 -73.35079956]
[84.55191803 -73.48705292]
[99.19689178 -70.24285889]
[112.73548889 -63.78480911]
[124.47254181 -54.44449234]
[133.80540466 -42.70150757]
[140.25485229 -29.15881348]
[143.48974609 -14.51178455]
[143.34397888 0.48750725]
[139.82501221 15.06889820]
[133.11357117 28.48368454]
[123.55079651 40.04637527]
[119.40164185 54.46110916]
[115.25248718 68.87584686]
[111.10333252 83.29057312]
[121.65534973 72.62966919]
[132.09736633 61.86098862]
[142.42826843 50.98567581]
[152.75917053 40.11036301]
[153.78649902 24.10023499]
[167.02615356 15.03982639]
[182.32180786 19.87950516]
[187.93994141 34.90668488]
[179.57080078 48.59379959]
[163.63447571 50.44126511]
[153.30357361 61.31657791]
[142.97267151 72.19189453]
[140.63166809 79.25106049]
[132.31625366 83.18168640]
[121.76424408 93.84259033]
[132.40051270 83.26574707]
[144.20057678 74.00514221]
[157.00251770 66.18783569]
[170.63070679 59.92106247]
[184.89817810 55.29080582]
[199.60919189 52.36059570]
[214.56190491 51.17062378]
[229.55120850 51.73722458]
[244.37142944 54.05261612]
[258.81924438 58.08503723]
[272.69644165 63.77916336]
[285.81265259 71.05687714]
[297.98791504 79.81833649]
[309.05520630 89.94332123]
[318.86264038 101.29294586]
[327.27572632 113.71148682]
[334.17901611 127.02857208]
[339.47778320 141.06149292]
[343.09933472 155.61773682]
[344.99401855 170.49760437]
[345.13583374 185.49693298]
[343.52279663 200.40994263]
[340.17709351 215.03205872]
[335.14456177 229.16265869]
[328.49429321 242.60786438]
[320.31750488 255.18324280]
[310.72637939 266.71624756]
[299.85250854 277.04867554]
[287.84506226 286.03875732]
[274.86880493 293.56314087]
[261.10171509 299.51861572]
[246.73272705 303.82345581]
[231.95892334 306.41864014]
[216.98301697 307.26852417]
[202.01046753 306.36145020]
[187.24668884 303.70989990]
[172.89422607 299.35021973]
[159.14999390 293.34222412]
[146.20254517 285.76834106]
[134.22952271 276.73248291]
[123.39518738 266.35861206]
[113.84816742 254.78906250]
[105.71945953 242.18255615]
[99.12057495 228.71205139]
[94.14204407 214.56233215]
[90.85218048 199.92755127]
[89.29610443 185.00848389]
[89.49517822 170.00981140]
[91.44666290 155.13729858]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 32]
[2 31]
[4 29]
[5 28]
[6 27]
[7 26]
[9 23]
[10 22]
[11 21]
[33 59]
[34 58]
[35 57]
[36 56]
[37 53]
[38 52]
[39 51]
[88 103]
[89 102]
[90 100]
[91 99]
[92 98]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
