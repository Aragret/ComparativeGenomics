%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:22 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGAAACAUGCUAGCUUUUAUUCCAGUUCUAACCAAAAAAAUAAACCCUCGUUCCACAGAAGCxxxxxxxxxxUCCGGAAUGCCCCGACGUUACUCGGACUACCCCGAUGCAUACACCACAUGAAACAUCCUACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[118.76741791 359.08673096]
[118.76741791 344.08673096]
[118.76741791 329.08673096]
[118.76741791 314.08673096]
[118.76741791 299.08673096]
[118.76741791 284.08673096]
[118.76741791 269.08673096]
[118.76741791 254.08673096]
[118.76741791 239.08673096]
[118.76741791 224.08673096]
[106.11850739 213.99562073]
[99.54379272 200.29364014]
[99.59880066 186.07792664]
[105.43479919 174.19844055]
[115.12169647 166.68778992]
[110.22014618 152.51123047]
[105.31859589 138.33467102]
[100.41704559 124.15811920]
[71.62710571 109.57905579]
[78.83598328 71.21151733]
[63.83679581 71.05548096]
[52.59094238 81.83363342]
[37.38185501 81.46172333]
[27.17583847 70.67410278]
[12.17665100 70.51805878]
[-2.82253742 70.36202240]
[-17.82172585 70.20598602]
[-32.82091522 70.04994965]
[-47.82010269 69.89391327]
[-52.86541367 84.17059326]
[-62.27494049 96.03396606]
[-75.02800751 104.19717407]
[-89.74125671 107.77474213]
[-104.81871033 106.37860107]
[-118.62487030 100.16018677]
[-129.66215515 89.79403687]
[-136.73330688 76.40458679]
[-139.07133484 61.44422531]
[-136.42259216 46.53573990]
[-129.07440186 33.29629517]
[-117.82386017 23.16200256]
[-103.89131927 17.23215675]
[-88.78808594 16.14998245]
[-74.15244293 20.03286743]
[-61.57196426 28.45962143]
[-52.41127777 40.51617813]
[-47.66406631 54.89472961]
[-32.66487885 55.05076599]
[-17.66568947 55.20680237]
[-2.66650081 55.36283875]
[12.33268738 55.51887512]
[27.33187675 55.67491150]
[37.76010513 45.10194397]
[52.97364044 45.04652023]
[63.99283218 56.05629349]
[78.99201965 56.21232986]
[89.97768402 45.99885178]
[90.91331482 31.02805901]
[91.84893799 16.05726814]
[83.28945160 28.37535095]
[71.98186493 38.23123932]
[58.61039352 45.02856445]
[43.98411560 48.35602951]
[28.98805428 48.01229858]
[14.52960014 44.01816177]
[1.48361433 36.61531067]
[-9.36050797 26.25167084]
[-17.34660530 13.55433750]
[-21.99144745 -0.70839131]
[-23.01398087 -15.67349815]
[-20.35233688 -30.43546486]
[-14.16756439 -44.10106277]
[-4.83389807 -55.84340668]
[7.08389616 -64.95198822]
[20.86468887 -70.87564850]
[35.67462158 -73.25596619]
[50.61756516 -71.94889832]
[64.78934479 -67.03354645]
[77.33244324 -58.80732727]
[87.48789215 -47.76799774]
[94.64120483 -34.58353424]
[98.35954285 -20.05170631]
[98.41814423 -5.05378580]
[106.14223480 -17.91218758]
[113.86631775 -30.77058983]
[109.79843903 -46.04239273]
[117.79299164 -59.67553711]
[133.10694885 -63.58172226]
[146.65481567 -55.44347763]
[150.39886475 -40.08908081]
[142.11784363 -26.62801933]
[126.72471619 -23.04650497]
[119.00063324 -10.18810272]
[111.27655029 2.67029929]
[106.81973267 16.99289703]
[105.88410187 31.96368790]
[104.94847870 46.93447876]
[110.59797668 51.86734009]
[120.46389008 40.56850052]
[131.76257324 50.43459702]
[121.89698029 61.73306274]
[127.54648590 66.66592407]
[142.25444031 63.72044373]
[156.96240234 60.77495956]
[171.67036438 57.82947922]
[180.22399902 44.53996658]
[195.68690491 41.27288437]
[208.88523865 49.96653366]
[211.98866272 65.46312714]
[203.15596008 78.56880951]
[187.62741089 81.50820923]
[174.61585999 72.53743744]
[159.90789795 75.48292542]
[145.19993591 78.42840576]
[130.49197388 81.37388611]
[129.42440796 105.56631470]
[114.59360504 119.25656891]
[119.49515533 133.43312073]
[124.39670563 147.60968018]
[129.29824829 161.78623962]
[155.02787781 167.49273682]
[167.38993835 196.23884583]
[180.32800293 203.82875061]
[196.15284729 201.19177246]
[207.98432922 212.02671814]
[206.74632263 228.02192688]
[193.38853455 236.90725708]
[178.15791321 231.86665344]
[172.73809814 216.76681519]
[159.80003357 209.17691040]
[153.29188538 212.90435791]
[161.00729370 225.76795959]
[168.72271729 238.63157654]
[181.44804382 246.57298279]
[181.16458130 261.57031250]
[168.14823914 269.02517700]
[155.06910706 261.68103027]
[154.65834045 246.68675232]
[147.46694946 233.52301025]
[140.27557373 220.35926819]
[133.76742554 224.08673096]
[133.76742554 239.08673096]
[133.76742554 254.08673096]
[133.76742554 269.08673096]
[133.76742554 284.08673096]
[133.76742554 299.08673096]
[133.76742554 314.08673096]
[133.76742554 329.08673096]
[133.76742554 344.08673096]
[133.76742554 359.08673096]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[15 120]
[16 119]
[17 118]
[18 117]
[20 56]
[21 55]
[24 52]
[25 51]
[26 50]
[27 49]
[28 48]
[29 47]
[57 97]
[58 96]
[59 95]
[83 94]
[84 93]
[85 92]
[102 115]
[103 114]
[104 113]
[105 112]
[122 130]
[123 129]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
