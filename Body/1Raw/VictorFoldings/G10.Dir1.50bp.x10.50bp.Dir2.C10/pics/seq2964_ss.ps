%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:31 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCUUGACCAACGGAACAAGUUACCCUAGGGAUAACAGCGCAAUCCUAUUCUAGAGUCCAUAxxxxxxxxxxAGUCAAAUCCCUUCUCGUCCCCAUGGAUGACCCCCCUCAGAUAGGGGUCCCUUGACCACCCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[122.81303406 310.34985352]
[122.81303406 295.34985352]
[122.81303406 280.34985352]
[122.81303406 265.34985352]
[122.81303406 250.34986877]
[122.81303406 235.34986877]
[122.81303406 220.34986877]
[122.81303406 205.34986877]
[122.81303406 190.34986877]
[122.81303406 175.34986877]
[109.03064728 169.42990112]
[98.15182495 179.75711060]
[87.27300262 190.08430481]
[76.39417267 200.41151428]
[71.61301422 218.16314697]
[54.44417953 221.66043091]
[43.78255463 232.21171570]
[36.77760315 247.65086365]
[20.00267029 245.19364929]
[17.72009087 228.39405823]
[33.23126221 221.55009460]
[43.89289093 210.99880981]
[44.28199005 198.86802673]
[53.13459396 189.98825073]
[66.06697083 189.53268433]
[76.94579315 179.20549011]
[87.82462311 168.87828064]
[98.70344543 158.55107117]
[81.45906067 153.84587097]
[66.90750122 144.34518433]
[56.28949738 131.22006226]
[50.39702225 115.93000031]
[49.51867294 100.06402588]
[53.43802261 85.17680359]
[61.48267746 72.63642883]
[72.61666107 63.49884033]
[65.70966339 50.18368530]
[58.80266190 36.86853027]
[51.89566422 23.55337334]
[44.98866272 10.23821831]
[38.08166504 -3.07693720]
[23.94377136 2.00276542]
[9.25495052 5.15268421]
[-5.72265673 6.31660461]
[-20.72175789 5.47375536]
[-35.47467804 2.63917851]
[-49.71813202 -2.13653994]
[-63.19792557 -8.76817131]
[-75.67350006 -17.13736725]
[-86.92221832 -27.09476852]
[-96.74332428 -38.46267700]
[-104.96155548 -51.03821182]
[-111.43024445 -64.59695435]
[-116.03395081 -78.89692688]
[-118.69052124 -93.68293762]
[-119.35253906 -108.69110870]
[-118.00818634 -123.65360260]
[-114.68146515 -138.30339050]
[-109.43173981 -152.37904358]
[-102.35269928 -165.62934875]
[-93.57067871 -177.81784058]
[-83.24239349 -188.72702026]
[-71.55217743 -198.16217041]
[-58.70864487 -205.95494080]
[-44.94101334 -211.96623230]
[-30.49497604 -216.08879089]
[-15.62834167 -218.24903870]
[-0.60642338 -218.40840149]
[14.30269623 -216.56407166]
[28.83294678 -212.74893188]
[42.72501755 -207.03108215]
[55.73098755 -199.51255798]
[67.61875153 -190.32754517]
[78.17616272 -179.63995361]
[87.21479797 -167.64051819]
[94.57337189 -154.54338074]
[100.12054443 -140.58227539]
[103.75732422 -126.00637054]
[105.41881561 -111.07576752]
[105.07536316 -96.05693054]
[102.73310089 -81.21788788]
[98.43381500 -66.82345581]
[92.25424194 -53.13052368]
[84.30466461 -40.38345718]
[74.72695160 -28.80974579]
[63.69202805 -18.61593056]
[51.39682007 -9.98393536]
[58.30382156 3.33121991]
[65.21081543 16.64637566]
[72.11782074 29.96153069]
[79.02481842 43.27668762]
[85.93181610 56.59184265]
[105.34217834 52.07901764]
[125.92201996 56.30595779]
[143.73431396 69.37360382]
[155.00796509 89.62118530]
[156.91532898 113.80416107]
[170.43951416 107.31599426]
[183.96371460 100.82782745]
[197.48789978 94.33966064]
[206.29434204 80.50569916]
[222.66418457 81.48554230]
[229.75755310 96.27122498]
[220.27737427 109.65249634]
[203.97605896 107.86385345]
[190.45187378 114.35202026]
[176.92768860 120.84018707]
[163.40348816 127.32834625]
[164.96107483 142.24726868]
[179.53378296 145.80201721]
[194.10647583 149.35678101]
[208.67918396 152.91154480]
[223.25189209 156.46630859]
[237.82458496 160.02107239]
[248.93218994 149.31478882]
[264.06918335 146.33572388]
[278.40542603 152.03450012]
[287.36624146 164.59266663]
[288.09228516 180.00292969]
[280.35189819 193.34796143]
[266.61495972 200.36938477]
[251.26492310 198.82670593]
[239.19990540 189.21217346]
[234.26982117 174.59378052]
[219.69712830 171.03901672]
[205.12442017 167.48425293]
[190.55171204 163.92948914]
[175.97901917 160.37472534]
[161.40631104 156.81996155]
[155.50799561 161.45243835]
[166.59249878 171.55856323]
[177.67700195 181.66468811]
[191.17268372 188.21194458]
[195.74075317 202.49945068]
[188.54669189 215.66172791]
[174.05445862 219.53152466]
[161.25656128 211.70761108]
[158.09411621 197.04486084]
[150.90274048 183.88113403]
[143.71134949 170.71739197]
[137.81303406 175.34986877]
[137.81303406 190.34986877]
[137.81303406 205.34986877]
[137.81303406 220.34986877]
[137.81303406 235.34986877]
[137.81303406 250.34986877]
[137.81303406 265.34985352]
[137.81303406 280.34985352]
[137.81303406 295.34985352]
[137.81303406 310.34985352]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[11 28]
[12 27]
[13 26]
[14 25]
[16 22]
[17 21]
[36 92]
[37 91]
[38 90]
[39 89]
[40 88]
[41 87]
[97 108]
[98 107]
[99 106]
[100 105]
[109 129]
[110 128]
[111 127]
[112 126]
[113 125]
[114 124]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
