%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:43 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGAAACAUCACCUCUAGCAUCACCAGUAUUAGAGGCACCGCCUGCCCAGUGACACAUGUUUAAxxxxxxxxxxCUUUCCUCACUAUCUGCUUCAUCCGCCAACUAAUAUUUCACUUUACAUCCAAACAUCACUUCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[118.77161407 386.68640137]
[118.77161407 371.68640137]
[118.77161407 356.68640137]
[118.77161407 341.68640137]
[118.77161407 326.68640137]
[118.77161407 311.68640137]
[118.77161407 296.68640137]
[118.77161407 281.68640137]
[118.77161407 266.68640137]
[118.77161407 251.68640137]
[115.26245117 237.10264587]
[108.43887329 223.74455261]
[101.61529541 210.38645935]
[100.57440186 225.35029602]
[95.60614777 239.50361633]
[87.06562042 251.83485413]
[75.56321716 261.46267700]
[61.92105103 267.69894409]
[47.11413574 270.09796143]
[32.20075607 268.48828125]
[18.24679375 262.98492432]
[6.24956083 253.98124695]
[-2.93347859 242.12072754]
[-8.64599705 228.25108337]
[-10.47971249 213.36358643]
[-8.30356407 198.52227783]
[-2.27308655 184.78788757]
[7.18071222 173.14204407]
[19.38215256 164.41709900]
[33.45917892 159.23661804]
[48.40567780 157.97087097]
[63.15340424 160.71032715]
[76.64830780 167.25918579]
[87.92588806 177.14939880]
[96.17818451 189.67007446]
[95.56236267 174.68272400]
[94.94653320 159.69537354]
[94.33071136 144.70802307]
[93.71488190 129.72065735]
[93.09906006 114.73331451]
[83.75202942 100.83479309]
[91.62543488 86.05152130]
[90.70201874 71.07997131]
[89.77861023 56.10842133]
[75.27520752 51.76367569]
[63.15612793 42.73595047]
[54.87252045 30.13031387]
[51.40804291 15.47877979]
[53.16204834 0.55413723]
[59.90367126 -12.84455681]
[70.80200195 -23.10884285]
[84.52844238 -29.01393318]
[83.60502625 -43.98548508]
[68.95309448 -55.91899490]
[67.63451385 -74.45120239]
[80.01850128 -87.87185669]
[78.48120880 -102.79286957]
[76.94391632 -117.71389008]
[75.40662384 -132.63490295]
[73.86933136 -147.55592346]
[58.90604019 -149.26293945]
[44.65968704 -154.14714050]
[31.79659653 -161.98008728]
[20.91840553 -172.39541626]
[12.53390408 -184.90597534]
[7.03524971 -198.92663574]
[4.67962503 -213.80162048]
[5.57720709 -228.83518982]
[9.68601418 -243.32421875]
[16.81386948 -256.59100342]
[26.62739182 -268.01504517]
[38.66758347 -277.06204224]
[52.37130356 -283.30880737]
[67.09760284 -286.46319580]
[82.15770721 -286.37765503]
[96.84722900 -283.05621338]
[110.47911072 -276.65417480]
[122.41576385 -267.47103882]
[132.09889221 -255.93624878]
[139.07559204 -242.58935547]
[143.01956177 -228.05459595]
[143.74633789 -213.01179504]
[141.22190857 -198.16453552]
[135.56434631 -184.20722961]
[127.03828430 -171.79270935]
[116.04249573 -161.50161743]
[103.09126282 -153.81527710]
[88.79035187 -149.09321594]
[90.32764435 -134.17219543]
[91.86493683 -119.25118256]
[93.40222931 -104.33016205]
[94.93952179 -89.40914917]
[105.20082092 -84.25970459]
[111.74642944 -74.68150330]
[112.83841705 -63.01105118]
[108.08682251 -52.16448593]
[98.57657623 -44.90889740]
[99.49999237 -29.93734741]
[113.84806061 -25.76383209]
[125.92514038 -16.91662216]
[134.26220703 -4.44794941]
[137.83699036 10.14802456]
[136.19926453 25.11425209]
[129.52754211 38.64230347]
[118.60971069 49.09089661]
[104.75016022 55.18500519]
[105.67356873 70.15655518]
[106.59698486 85.12810516]
[114.86434174 93.38601685]
[115.46391296 105.05576324]
[108.08641052 114.11748505]
[108.70223999 129.10484314]
[109.31806183 144.09219360]
[109.93389130 159.07954407]
[110.54971313 174.06689453]
[111.16553497 189.05424500]
[114.97339630 203.56288147]
[121.79697418 216.92097473]
[128.62054443 230.27908325]
[129.65141296 215.31454468]
[134.30500793 201.05467224]
[142.29962158 188.36270142]
[153.15129089 178.00695801]
[166.20309448 170.61436462]
[180.66491699 166.63244629]
[195.66128540 166.30223083]
[210.28436279 169.64372253]
[223.64892578 176.45463562]
[234.94590759 186.32266235]
[243.49145508 198.65042114]
[248.76823425 212.69163513]
[250.45680237 227.59628296]
[248.45494080 242.46211243]
[242.88383484 256.38916016]
[234.08074951 268.53436279]
[222.57858276 278.16244507]
[209.07365417 284.69058228]
[194.38348389 287.72360229]
[179.39739990 287.07788086]
[165.02258301 282.79248047]
[152.12924194 275.12683105]
[141.49790955 264.54504395]
[133.77162170 251.68640137]
[133.77162170 266.68640137]
[133.77162170 281.68640137]
[133.77162170 296.68640137]
[133.77162170 311.68640137]
[133.77162170 326.68640137]
[133.77162170 341.68640137]
[133.77162170 356.68640137]
[133.77162170 371.68640137]
[133.77162170 386.68640137]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 152]
[2 151]
[3 150]
[4 149]
[5 148]
[6 147]
[7 146]
[8 145]
[9 144]
[10 143]
[11 119]
[12 118]
[13 117]
[35 116]
[36 115]
[37 114]
[38 113]
[39 112]
[40 111]
[42 108]
[43 107]
[44 106]
[52 98]
[53 97]
[56 92]
[57 91]
[58 90]
[59 89]
[60 88]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
