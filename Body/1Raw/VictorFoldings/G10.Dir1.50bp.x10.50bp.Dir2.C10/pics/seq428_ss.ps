%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:18 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGACAAAGAACCCUAACACCAGCCUAACCAGAUUUCAAAUUUUAUCUUUUGGCGGUAUGCACxxxxxxxxxxGCAUCCAUAAUCCUUCUAAUAGCUAUCCUCUUCAACAAUAUACUCUCCGGACAAUGAACCCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[125.05600739 404.86688232]
[125.05600739 389.86688232]
[125.05600739 374.86688232]
[125.05600739 359.86688232]
[125.05600739 344.86688232]
[125.05600739 329.86688232]
[125.05600739 314.86688232]
[125.05600739 299.86688232]
[125.05600739 284.86688232]
[125.05600739 269.86688232]
[109.51943970 265.11322021]
[96.18206024 255.80197144]
[86.34272003 242.82597351]
[80.96390533 227.43565369]
[80.57755280 211.11849976]
[85.23252106 195.45529175]
[94.48868561 181.96697998]
[107.45858002 171.96694946]
[122.89245605 166.43321228]
[122.26847839 151.44619751]
[117.66291046 137.17074585]
[109.41062164 124.64478302]
[101.15833282 112.11882019]
[93.95041656 115.44574738]
[84.33419800 113.98863220]
[75.43973541 106.54164886]
[61.11714172 102.08483124]
[46.79454422 97.62801361]
[37.60417175 98.06266022]
[32.22208405 92.92663574]
[17.99530602 88.17282104]
[3.76852632 83.41900635]
[-11.77238655 86.38389587]
[-21.39147949 75.01190186]
[-35.61825943 70.25808716]
[-42.26554871 71.21781158]
[-47.57454681 68.97151947]
[-50.33076096 64.99925995]
[-64.34747314 59.65774918]
[-78.36418915 54.31623840]
[-92.38089752 48.97472382]
[-104.24269104 58.73143387]
[-119.39628601 61.23426437]
[-133.76544189 55.80996323]
[-143.48492432 43.91764069]
[-145.94023132 28.75627708]
[-140.47091675 14.40419769]
[-128.54820251 4.72204208]
[-113.37921143 2.31426096]
[-99.04434204 7.82853508]
[-89.39960480 19.78155327]
[-87.03938293 34.95801163]
[-73.02267456 40.29952621]
[-59.00595856 45.64103699]
[-44.98924637 50.98255157]
[-30.86444473 56.03130722]
[-16.63766479 60.78512192]
[-2.11434627 57.48020172]
[8.52234077 69.19222260]
[22.74912071 73.94603729]
[36.97589874 78.69985199]
[51.25136185 83.30541992]
[65.57395935 87.76223755]
[79.89655304 92.21904755]
[91.78893280 83.07731628]
[91.16495514 68.09030151]
[90.54097748 53.10328293]
[89.91699982 38.11626816]
[75.88150787 32.11896896]
[65.84455872 20.62016678]
[61.79900360 5.90295792]
[64.54808807 -9.11054516]
[73.54598236 -21.43940163]
[87.00614166 -28.63570595]
[102.25605011 -29.27062988]
[116.26782227 -23.21810532]
[126.25940704 -11.67986774]
[130.24697876 3.05315876]
[127.43878937 18.05571938]
[118.39241791 30.34904671]
[104.90402222 37.49229050]
[105.52799225 52.47930527]
[106.15196991 67.46632385]
[106.77594757 82.45333862]
[108.84415436 67.59660339]
[115.99800110 54.41242981]
[127.32620239 44.58024597]
[141.38574219 39.35251617]
[156.38568115 39.39515305]
[170.41528320 44.70273209]
[181.68740845 54.59915924]
[188.76618958 67.82379150]
[190.74989319 82.69204712]
[187.38584900 97.30995178]
[179.10255432 109.81543732]
[166.95520020 118.61552429]
[152.49111938 122.58922577]
[137.55279541 121.23036194]
[124.04311371 114.71202850]
[113.68429565 103.86653137]
[121.93658447 116.39249420]
[130.18887329 128.91845703]
[129.69964600 113.92643738]
[132.49635315 99.18946075]
[138.44396973 85.41899109]
[147.25535583 73.27982330]
[158.50514221 63.35801315]
[171.65020752 56.13255692]
[186.05595398 51.95227432]
[201.02688599 51.01898575]
[215.84027100 53.37774277]
[229.78094482 58.91467285]
[242.17588806 67.36246490]
[252.42671204 78.31328583]
[260.03854370 91.23846436]
[264.64389038 105.51399231]
[266.02041626 120.45069885]
[264.10168457 135.32746887]
[258.98028564 149.42610168]
[250.90351868 162.06594849]
[240.26129150 172.63679504]
[227.56735229 180.62831116]
[213.43457031 185.65466309]
[198.54521179 187.47323608]
[183.61811829 185.99618530]
[169.37390137 181.29486084]
[156.50025940 173.59620667]
[145.61868286 163.27189636]
[137.25549316 150.82221985]
[137.87947083 165.80924988]
[151.32461548 169.04710388]
[163.45249939 175.66644287]
[173.43048096 185.20520020]
[180.57543945 197.00112915]
[184.40065002 210.23780823]
[184.64886475 224.00108337]
[181.30964661 237.34223938]
[174.61959839 249.34341431]
[165.04562378 259.18069458]
[153.25236511 266.18078613]
[140.05599976 269.86688232]
[140.05599976 284.86688232]
[140.05599976 299.86688232]
[140.05599976 314.86688232]
[140.05599976 329.86688232]
[140.05599976 344.86688232]
[140.05599976 359.86688232]
[140.05599976 374.86688232]
[140.05599976 389.86688232]
[140.05599976 404.86688232]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[19 130]
[20 129]
[21 102]
[22 101]
[23 100]
[26 64]
[27 63]
[28 62]
[30 61]
[31 60]
[32 59]
[34 57]
[35 56]
[38 55]
[39 54]
[40 53]
[41 52]
[65 84]
[66 83]
[67 82]
[68 81]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
