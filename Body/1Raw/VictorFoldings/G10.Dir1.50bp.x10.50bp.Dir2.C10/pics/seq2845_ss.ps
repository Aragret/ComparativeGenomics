%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:02 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGUAACAAACCCACAGGUCCUAAACUACCAAACCUGCAUUAAAAAUUUCGGUUGGGGCGACCxxxxxxxxxxACAAACUACCACCUACCUCCCUCACCAAAGCCCAUAAAAAUAAAAAAUUAUAACAAACCCCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[115.40911865 286.65447998]
[115.40911865 271.65447998]
[115.40911865 256.65447998]
[115.40911865 241.65446472]
[115.40911865 226.65446472]
[115.40911865 211.65446472]
[115.40911865 196.65446472]
[115.40911865 181.65446472]
[115.40911865 166.65446472]
[115.40911865 151.65446472]
[111.70295715 137.11953735]
[104.52045441 123.95095062]
[95.57888031 123.96949005]
[87.23230743 120.76219177]
[80.60401917 114.76070404]
[76.58605194 106.77272034]
[61.59335709 106.30467224]
[46.60066223 105.83663177]
[31.60796356 105.36859131]
[18.36429977 120.42929077]
[-1.36721230 121.86452484]
[-16.23662567 109.23069000]
[-30.94458771 112.17617035]
[-45.65254974 115.12165070]
[-60.36051178 118.06713867]
[-75.06847382 121.01261902]
[-78.36894989 135.87957764]
[-87.43624878 148.11494446]
[-100.69940186 155.59884644]
[-115.86048126 157.03465271]
[-130.29273987 152.17361450]
[-141.49571228 141.85792542]
[-147.52839661 127.87484741]
[-147.34561157 112.64703369]
[-140.97901917 98.81278229]
[-129.53167725 88.76897430]
[-114.98688507 84.25576019]
[-99.86463928 86.05507660]
[-86.78495026 93.85517883]
[-78.01395416 106.30465698]
[-63.30599213 103.35917664]
[-48.59803009 100.41368866]
[-33.89006805 97.46820831]
[-19.18210793 94.52272797]
[-18.99883652 93.09838104]
[-18.73592949 91.68656921]
[-31.82908249 84.36746216]
[-44.92223740 77.04836273]
[-61.69810486 74.59751892]
[-63.98706436 57.79879761]
[-48.47849274 50.94894028]
[-37.60313034 63.95520401]
[-24.50997734 71.27430725]
[-11.41682339 78.59341431]
[0.04124024 71.98499298]
[13.40677261 71.94680023]
[25.14301491 78.62649536]
[32.07600784 90.37589264]
[47.06870270 90.84393311]
[62.06139755 91.31198120]
[77.05409241 91.78002167]
[88.10703278 78.72466278]
[105.01774597 76.14826965]
[112.47265625 63.13196182]
[119.92756653 50.11565399]
[127.38247681 37.09934616]
[115.50970459 27.89154625]
[105.03401947 17.12093163]
[96.15932465 4.99715853]
[89.05836487 -8.24378300]
[83.86936951 -22.34415436]
[80.69333649 -37.02948380]
[79.59210205 -52.01392365]
[80.58708191 -67.00579071]
[83.65892792 -81.71327209]
[88.74783325 -95.85007477]
[95.75473785 -109.14102173]
[104.54326630 -121.32740784]
[114.94233704 -132.17201233]
[126.74952698 -141.46374512]
[139.73501587 -149.02174377]
[153.64601135 -154.69889832]
[168.21177673 -158.38467407]
[183.14874268 -160.00735474]
[198.16616821 -159.53533936]
[212.97175598 -156.97781372]
[227.27728271 -152.38456726]
[240.80430603 -145.84500122]
[253.28950500 -137.48641968]
[264.48986816 -127.47152710]
[274.18734741 -115.99525452]
[282.19323730 -103.28099823]
[288.35162354 -89.57624817]
[292.54269409 -75.14776611]
[294.68481445 -60.27640152]
[294.73632812 -45.25164032]
[292.69622803 -30.36593819]
[288.60421753 -15.90905094]
[282.53994751 -2.16238618]
[274.62149048 10.60647297]
[265.00292969 22.14897728]
[253.87150574 32.24044800]
[241.44392395 40.68445587]
[227.96206665 47.31662750]
[213.68836975 52.00787354]
[198.90068054 54.66687393]
[183.88682556 55.24187088]
[168.93908691 53.72166824]
[154.34840393 50.13586426]
[140.39878845 44.55425644]
[132.94387817 57.57056427]
[125.48896027 70.58687592]
[118.03404999 83.60317993]
[124.37248993 100.25354767]
[117.68903351 116.76844025]
[124.87154388 129.93702698]
[125.56963348 114.95327759]
[129.76786804 100.55276489]
[137.23129272 87.54133606]
[147.54226685 76.64713287]
[160.12377930 68.47978973]
[174.27177429 63.49636078]
[189.19448853 61.97571945]
[204.05686951 64.00296021]
[218.02719116 69.46464539]
[230.32368469 78.05513000]
[240.25820923 89.29368591]
[247.27484131 102.55139923]
[250.98091125 117.08635712]
[251.16905212 132.08517456]
[247.82868958 146.70851135]
[241.14680481 160.13804626]
[231.49728394 171.62223816]
[219.42012024 180.51843262]
[205.59118652 186.32879639]
[190.78431702 188.72817993]
[175.82815552 187.58230591]
[161.55963135 182.95530701]
[148.77722168 175.10609436]
[138.19624329 164.47392273]
[130.40911865 151.65446472]
[130.40911865 166.65446472]
[130.40911865 181.65446472]
[130.40911865 196.65446472]
[130.40911865 211.65446472]
[130.40911865 226.65446472]
[130.40911865 241.65446472]
[130.40911865 256.65447998]
[130.40911865 271.65447998]
[130.40911865 286.65447998]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[11 116]
[12 115]
[16 61]
[17 60]
[18 59]
[19 58]
[22 44]
[23 43]
[24 42]
[25 41]
[26 40]
[46 54]
[47 53]
[48 52]
[63 113]
[64 112]
[65 111]
[66 110]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
