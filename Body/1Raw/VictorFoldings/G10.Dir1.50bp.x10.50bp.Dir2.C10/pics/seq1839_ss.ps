%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:05 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGGCUCUGAGCUAAACCUAGCCCCAAACCCACUCCACCUUACUACCAGACAACCUUAGCCAAAxxxxxxxxxxAUUGUAACUUACUACUCCGGAAAAAAAGAACCAUUUGGAUACAUAGGUAUGGUCUGAGCUACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[68.21126556 284.61038208]
[70.79703522 265.40194702]
[71.10501862 250.40512085]
[71.41299438 235.40827942]
[71.72097015 220.41143799]
[72.02894592 205.41459656]
[72.33692932 190.41777039]
[72.64490509 175.42092896]
[72.95288086 160.42408752]
[73.26085663 145.42724609]
[73.56884003 130.43041992]
[66.96124268 126.88220978]
[59.86484146 140.09739685]
[52.76823425 153.31246948]
[39.55327225 146.21565247]
[46.64965820 133.00099182]
[53.74606323 119.78580475]
[47.13846970 116.23760986]
[34.80718613 124.77806854]
[22.47590256 133.31852722]
[10.14461899 141.85897827]
[3.63086104 156.90899658]
[-12.68858051 158.52388000]
[-22.02566338 145.04237366]
[-14.77519703 130.33309937]
[1.60416031 129.52769470]
[13.93544388 120.98724365]
[26.26672745 112.44678497]
[38.59801102 103.90631866]
[70.55245209 79.25137329]
[97.09620667 89.88862610]
[96.17279053 74.91707611]
[95.24937439 59.94552994]
[94.32596588 44.97397995]
[93.40254974 30.00242996]
[78.39685059 29.76305008]
[63.45482635 28.36155701]
[48.66633606 25.80637741]
[34.12032700 22.11287689]
[19.90427971 17.30327225]
[6.10369205 11.40648651]
[-7.19843721 4.45798588]
[-19.92210579 -3.50044084]
[-31.99079323 -12.42092991]
[-43.33191299 -22.24983215]
[-53.87725830 -32.92803192]
[-63.56341171 -44.39131546]
[-72.33210754 -56.57073212]
[-80.13062286 -69.39303589]
[-86.91204834 -82.78111267]
[-92.63559723 -96.65444183]
[-97.26685333 -110.92958832]
[-100.77796173 -125.52069855]
[-103.14780426 -140.34001160]
[-104.36212921 -155.29841614]
[-104.41362762 -170.30593872]
[-103.30200195 -185.27230835]
[-101.03392029 -200.10754395]
[-97.62303925 -214.72241211]
[-93.08986664 -229.02900696]
[-87.46166992 -242.94129944]
[-80.77229309 -256.37561035]
[-73.06196594 -269.25112915]
[-64.37705994 -281.49044800]
[-54.76981735 -293.01992798]
[-44.29800797 -303.77026367]
[-33.02461243 -313.67675781]
[-21.01743507 -322.67987061]
[-8.34868622 -330.72543335]
[4.90544033 -337.76507568]
[18.66523170 -343.75643921]
[32.84793472 -348.66348267]
[47.36825180 -352.45672607]
[62.13885498 -355.11337280]
[77.07090759 -356.61737061]
[92.07461548 -356.95974731]
[107.05973053 -356.13839722]
[121.93613434 -354.15826416]
[136.61436462 -351.03128052]
[151.00613403 -346.77624512]
[165.02488708 -341.41876221]
[178.58631897 -334.99099731]
[191.60885620 -327.53167725]
[204.01420593 -319.08563232]
[215.72773743 -309.70364380]
[226.67900085 -299.44216919]
[236.80213928 -288.36288452]
[246.03628540 -276.53247070]
[254.32588196 -264.02203369]
[261.62106323 -250.90682983]
[267.87799072 -237.26574707]
[273.05902100 -223.18081665]
[277.13299561 -208.73674011]
[280.07537842 -194.02040100]
[281.86853027 -179.12030029]
[282.50161743 -164.12605286]
[281.97085571 -149.12783813]
[280.27944946 -134.21585083]
[277.43753052 -119.47977448]
[273.46221924 -105.00823975]
[268.37744141 -90.88827515]
[262.21374512 -77.20481110]
[255.00822449 -64.04013824]
[246.80418396 -51.47343063]
[237.65100098 -39.58026505]
[227.60369873 -28.43216896]
[216.72270203 -18.09619331]
[205.07347107 -8.63449764]
[192.72605896 -0.10398674]
[179.75471497 7.44403458]
[166.23745728 13.96417141]
[152.25558472 19.41720963]
[137.89318848 23.77035522]
[123.23664856 26.99742699]
[108.37409973 29.07901573]
[109.29751587 44.05056381]
[110.22092438 59.02211380]
[111.14434052 73.99366760]
[112.06775665 88.96521759]
[120.48116302 101.38352966]
[134.04306030 107.79250336]
[147.60494995 114.20147705]
[161.16685486 120.61045837]
[177.45742798 118.72653198]
[187.01568604 132.05213928]
[180.00889587 146.87904358]
[163.64506531 147.95458984]
[154.75787354 134.17234802]
[141.19598389 127.76337433]
[127.63408661 121.35440063]
[114.07218933 114.94542694]
[107.69555664 118.89366913]
[116.52462006 131.01998901]
[125.35367584 143.14631653]
[138.89579773 149.59695435]
[142.88500977 164.05676270]
[134.56596375 176.53849792]
[119.68458557 178.42112732]
[108.51927948 168.40434265]
[108.78148651 153.40737915]
[101.86189270 140.09877014]
[94.94230652 126.79014587]
[88.56567383 130.73838806]
[88.25769806 145.73522949]
[87.94972229 160.73207092]
[87.64173889 175.72889709]
[87.33376312 190.72573853]
[87.02578735 205.72257996]
[86.71781158 220.71942139]
[86.40982819 235.71626282]
[86.10185242 250.71308899]
[85.79387665 265.70993042]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 152]
[3 151]
[4 150]
[5 149]
[6 148]
[7 147]
[8 146]
[9 145]
[10 144]
[11 143]
[18 29]
[19 28]
[20 27]
[21 26]
[31 119]
[32 118]
[33 117]
[34 116]
[35 115]
[120 131]
[121 130]
[122 129]
[123 128]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
