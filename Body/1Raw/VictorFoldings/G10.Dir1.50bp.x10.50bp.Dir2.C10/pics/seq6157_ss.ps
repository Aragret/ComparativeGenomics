%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:58 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCCGCCGCCGGGAAAAAAGGCGGGAGAAGCCCCGGCAGGUUUGAAGCUGCUUCUUCGAAUUxxxxxxxxxxCCGCCAACUAAUAUUUCACUUUACAUCCAAACAUCACUUUGGCUUCGAAGCCGCCGCCUGCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[92.09665680 219.32470703]
[90.84978485 204.37661743]
[89.60291290 189.42852783]
[88.35603333 174.48043823]
[87.10916138 159.53236389]
[85.86228943 144.58427429]
[72.47600555 137.81616211]
[59.69864655 145.67358398]
[46.92128754 153.53100586]
[34.14392853 161.38842773]
[21.36657333 169.24586487]
[8.75544453 177.36740112]
[1.09936452 194.08158875]
[-16.41161728 194.68611145]
[-28.67398643 203.32522583]
[-40.93635559 211.96434021]
[-53.19872284 220.60345459]
[-65.46109009 229.24256897]
[-64.70204163 244.65126038]
[-72.41384125 258.01281738]
[-86.13569641 265.06365967]
[-101.48900604 263.55386353]
[-113.57458496 253.96520996]
[-118.53596497 239.35739136]
[-114.78999329 224.39172363]
[-103.53199768 213.84368896]
[-88.35436249 211.07913208]
[-74.10020447 216.98020935]
[-61.83783722 208.34109497]
[-49.57546997 199.70198059]
[-37.31310272 191.06286621]
[-25.05073357 182.42373657]
[-22.65724945 170.52507019]
[-12.45582962 163.23466492]
[0.37330127 164.92796326]
[2.15648246 160.43399048]
[6.81745100 157.04183960]
[13.50914669 156.46850586]
[26.28650475 148.61106873]
[39.06386185 140.75364685]
[51.84121704 132.89622498]
[64.61857605 125.03879547]
[59.46825790 104.90303040]
[64.35411835 85.96481323]
[51.74298859 77.84326935]
[39.13186264 69.72173309]
[26.52073479 61.60018921]
[10.72909737 60.63334656]
[4.21800089 47.23727036]
[-12.17916489 46.98235703]
[-19.91949844 32.52486038]
[-11.04040718 18.73740959]
[5.32406044 19.80335426]
[12.33954334 34.62614059]
[27.22914696 35.01207352]
[34.64227676 48.98905945]
[47.25340271 57.11060333]
[59.86453247 65.23214722]
[72.47566223 73.35368347]
[88.10388184 63.58437729]
[106.48545837 62.24348831]
[123.36598206 69.64137268]
[134.66497803 59.77565002]
[145.96398926 49.90992737]
[157.26300049 40.04420090]
[168.56199646 30.17848015]
[179.86100769 20.31275558]
[191.16000366 10.44703388]
[176.28573608 12.38504505]
[161.77461243 8.58668709]
[149.75740051 -0.39031002]
[141.99862671 -13.22780991]
[139.63754272 -28.04082298]
[143.02085876 -42.65428162]
[151.65177917 -54.92242432]
[164.26296997 -63.04385757]
[179.00268555 -65.82608032]
[193.70661926 -62.86055374]
[206.21572876 -54.58273315]
[214.69322205 -42.20808029]
[217.89433289 -27.55362892]
[215.34901428 -12.77116203]
[207.43145752 -0.03174513]
[221.08769226 -6.23715210]
[234.74394226 -12.44255924]
[248.40017700 -18.64796638]
[262.05642700 -24.85337257]
[258.53268433 -39.48142242]
[257.84127808 -54.51200485]
[260.00717163 -69.40177917]
[264.95211792 -83.61248779]
[272.49731445 -96.63041687]
[282.37002563 -107.98498535]
[294.21334839 -117.26572418]
[307.59915161 -124.13714600]
[322.04357910 -128.35084534]
[337.02444458 -129.75451660]
[352.00018311 -128.29740906]
[366.42947388 -124.03218079]
[379.79067993 -117.11304474]
[391.60083008 -107.79010010]
[401.43295288 -96.40037537]
[408.93164062 -83.35560608]
[413.82583618 -69.12734985]
[415.93859863 -54.22994232]
[415.19357300 -39.20191956]
[411.61767578 -24.58653831]
[405.34014893 -10.91213226]
[396.58798218 1.32697713]
[385.67749023 11.68835258]
[373.00314331 19.79743767]
[359.02307129 25.36109543]
[344.24267578 28.17819977]
[329.19622803 28.14691544]
[314.42767334 25.26837540]
[300.47085571 19.64663506]
[287.83032227 11.48491859]
[276.96304321 1.07826412]
[268.26181030 -11.19713211]
[254.60557556 -4.99172497]
[240.94934082 1.21368194]
[227.29310608 7.41908884]
[213.63685608 13.62449646]
[201.02572632 21.74603844]
[189.72673035 31.61176109]
[178.42771912 41.47748566]
[167.12872314 51.34320831]
[155.82971191 61.20893097]
[144.53070068 71.07465363]
[133.23170471 80.94037628]
[136.64653015 87.35360718]
[138.81983948 94.37670898]
[139.64335632 101.76863098]
[139.05566406 109.26926422]
[137.04563904 116.60860443]
[133.65385437 123.51641846]
[128.97235107 129.73222351]
[123.14225006 135.01507568]
[116.34973907 139.15280151]
[108.82011414 141.97042847]
[100.81037140 143.33740234]
[102.05725098 158.28547668]
[103.30412292 173.23356628]
[104.55099487 188.18165588]
[105.79787445 203.12974548]
[107.04474640 218.07783508]
[118.31463623 229.49575806]
[116.27140045 245.40817261]
[102.48243713 253.60841370]
[87.52545929 247.80596924]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 146]
[2 145]
[3 144]
[4 143]
[5 142]
[6 141]
[7 42]
[8 41]
[9 40]
[10 39]
[11 38]
[12 35]
[14 32]
[15 31]
[16 30]
[17 29]
[18 28]
[44 59]
[45 58]
[46 57]
[47 56]
[49 54]
[62 130]
[63 129]
[64 128]
[65 127]
[66 126]
[67 125]
[68 124]
[83 123]
[84 122]
[85 121]
[86 120]
[87 119]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
