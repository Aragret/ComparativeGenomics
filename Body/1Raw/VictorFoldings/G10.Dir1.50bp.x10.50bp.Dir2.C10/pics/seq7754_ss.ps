%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:02 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCUUCAACUCCUACAUACUUCCCCCAUUAUUCCUAGAACCAGGCGACCUGCGACUCCUUGAxxxxxxxxxxGGGGCCCUCUCAGCCCUCCUAAUGACCUCCGGCCUAGCCAUGUGAUUUCACUUCCACUCCCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[-32.98616028 260.41528320]
[-42.96888733 271.61105347]
[-52.95161438 282.80682373]
[-62.93434143 294.00259399]
[-72.91706848 305.19836426]
[-81.93459320 317.18518066]
[-89.92451477 329.88012695]
[-97.91442871 342.57504272]
[-105.90434265 355.26995850]
[-113.89426422 367.96490479]
[-110.14497375 383.31802368]
[-118.42141724 396.78189087]
[-133.81332397 400.36865234]
[-147.18894958 391.95031738]
[-150.61276245 376.52136230]
[-142.05349731 363.23547363]
[-126.58919525 359.97497559]
[-118.59927368 347.28005981]
[-110.60935974 334.58511353]
[-102.61944580 321.89019775]
[-94.62952423 309.19525146]
[-109.14562225 312.97454834]
[-123.16857910 307.64944458]
[-131.51718140 295.18746948]
[-131.10681152 280.19308472]
[-122.08906555 268.20642090]
[-107.79583740 263.65628052]
[-93.50818634 268.22390747]
[-84.50511169 280.22158813]
[-84.11283112 295.21563721]
[-74.13010406 284.01986694]
[-64.14737701 272.82409668]
[-54.16465378 261.62832642]
[-44.18192673 250.43255615]
[-57.99882507 235.84828186]
[-70.34700012 220.00117493]
[-81.11166382 203.03857422]
[-90.19275665 185.11814880]
[-97.50585938 166.40647888]
[-102.98298645 147.07749939]
[-106.57322693 127.31091309]
[-108.24320221 107.29044342]
[-107.97740173 87.20220184]
[-105.77828217 67.23293304]
[-101.66629791 47.56825256]
[-95.67966461 28.39096832]
[-87.87403107 9.87934780]
[-78.32196045 -7.79453135]
[-67.11225128 -24.46637535]
[-78.81187439 -33.85353851]
[-90.51149750 -43.24069977]
[-102.21112061 -52.62786102]
[-118.34911346 -57.82416916]
[-117.82331848 -74.76995850]
[-101.39421844 -78.95578003]
[-92.82395935 -64.32748413]
[-81.12433624 -54.94032288]
[-69.42471313 -45.55316162]
[-57.72509003 -36.16600037]
[-49.24861908 -45.40712738]
[-40.23161316 -54.12163544]
[-30.70672607 -62.27795410]
[-20.70845795 -69.84654999]
[-10.27301693 -76.80001068]
[0.56180048 -83.11315918]
[11.75675488 -88.76311493]
[23.27130127 -93.72942352]
[35.06373596 -97.99410248]
[47.09135437 -101.54170227]
[59.31059265 -104.35937500]
[71.67719269 -106.43692017]
[84.14636993 -107.76680756]
[96.67296600 -108.34422302]
[109.21161652 -108.16706848]
[121.71690369 -107.23600006]
[134.14353943 -105.55437469]
[146.44650269 -103.12829590]
[158.58126831 -99.96654510]
[170.50386047 -96.08056641]
[182.17111206 -91.48444366]
[193.54075623 -86.19481659]
[204.57162476 -80.23085022]
[212.56153870 -92.92578125]
[220.55145264 -105.62070465]
[228.54136658 -118.31563568]
[223.58531189 -133.14707947]
[229.37026978 -147.67526245]
[243.16477966 -155.04043579]
[258.45547485 -151.76498413]
[268.02258301 -139.39547729]
[267.34878540 -123.77241516]
[256.75222778 -112.27252960]
[241.23629761 -110.32572174]
[233.24638367 -97.63079071]
[225.25646973 -84.93585968]
[217.26655579 -72.24093628]
[228.58819580 -63.96175766]
[239.32722473 -54.93968964]
[249.43498230 -45.21560287]
[258.86566162 -34.83355713]
[267.57650757 -23.84059715]
[275.52810669 -12.28652573]
[282.68441772 -0.22369508]
[289.01296997 12.29323864]
[294.48513794 25.20756340]
[299.07614136 38.46076584]
[302.76510620 51.99279785]
[305.53540039 65.74234009]
[307.37438965 79.64710999]
[308.27383423 93.64408875]
[308.22958374 107.66986847]
[323.18981934 108.76117706]
[338.15008545 109.85248566]
[354.38711548 104.97453308]
[363.56930542 119.22668457]
[352.41601562 131.99542236]
[337.05877686 124.81273651]
[322.09851074 123.72142792]
[307.13827515 122.63011932]
[305.22091675 136.09379578]
[302.42938232 149.40373230]
[298.77557373 162.50321960]
[294.27505493 175.33647156]
[288.94699097 187.84880066]
[282.81408691 199.98693848]
[275.90246582 211.69917297]
[268.24154663 222.93560791]
[259.86398315 233.64837646]
[250.80546570 243.79183960]
[241.10456848 253.32281494]
[230.80261230 262.20068359]
[219.94348145 270.38763428]
[208.57342529 277.84878540]
[196.74089050 284.55236816]
[184.49627686 290.46984863]
[171.89173889 295.57595825]
[158.98097229 299.84899902]
[145.81896973 303.27078247]
[132.46177673 305.82666016]
[118.96632385 307.50579834]
[105.39007568 308.30105591]
[91.79087067 308.20901489]
[78.22663116 307.23007202]
[64.75513458 305.36840820]
[51.43377686 302.63195801]
[38.31928635 299.03234863]
[25.46753883 294.58493042]
[12.93327141 289.30865479]
[0.76987797 283.22598267]
[-10.97083092 276.36285400]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 34]
[2 33]
[3 32]
[4 31]
[5 30]
[6 21]
[7 20]
[8 19]
[9 18]
[10 17]
[49 59]
[50 58]
[51 57]
[52 56]
[82 96]
[83 95]
[84 94]
[85 93]
[111 119]
[112 118]
[113 117]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
