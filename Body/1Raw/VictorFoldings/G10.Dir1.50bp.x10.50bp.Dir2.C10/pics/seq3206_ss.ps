%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:55 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGACUUUACAGUCAGAGGUUCAAUUCCUCUUCUUAACAACAUACCCAUGGCCAACCUCCUACUCCUxxxxxxxxxxUACCCACCCUUAACAGUACAUAGUACAUAAAGCCAUUUACCGUACAUAGCACAUUACAGUCAAACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[95.20168304 236.79182434]
[94.90532684 221.79475403]
[94.60896301 206.79768372]
[94.31260681 191.80061340]
[94.01625061 176.80354309]
[93.71989441 161.80647278]
[93.42353821 146.80940247]
[93.12718201 131.81231689]
[92.83082581 116.81525421]
[78.48480988 112.43440247]
[69.86093903 124.70749664]
[61.23707581 136.98059082]
[52.61320877 149.25369263]
[51.69677353 165.62721252]
[36.93867874 172.77778625]
[23.52078819 163.34951782]
[25.24627876 147.04139709]
[40.34011078 140.62982178]
[48.96397781 128.35673523]
[57.58784485 116.08363342]
[66.21170807 103.81053162]
[56.87592316 92.06987000]
[42.97557831 97.70728302]
[29.07523537 103.34470367]
[15.17489052 108.98211670]
[1.27454662 114.61952972]
[-3.36566639 129.55279541]
[-16.54707909 137.96614075]
[-32.04583359 135.88703918]
[-42.54388809 124.29718018]
[-43.08438492 108.66893768]
[-33.41211700 96.38149261]
[-18.09403610 93.23660278]
[-4.36286688 100.71918488]
[9.53747749 95.08177185]
[23.43782043 89.44435883]
[37.33816528 83.80694580]
[51.23851013 78.16952515]
[78.07798004 76.69268036]
[96.27986145 90.10763550]
[100.37641907 75.67787170]
[103.32094574 60.96971512]
[105.09503937 46.07500076]
[106.86914062 31.18028450]
[96.27163696 41.79597855]
[81.82060242 45.81686783]
[67.26309967 42.20035934]
[56.37380600 31.88419342]
[51.97625351 17.54329109]
[55.21069717 2.89616227]
[65.23847198 -8.25927544]
[79.45942688 -13.03048229]
[94.18615723 -10.18031216]
[105.60009766 -0.44779798]
[110.74172974 13.64384079]
[115.40515900 -0.61282104]
[120.06859589 -14.86948204]
[124.73202515 -29.12614441]
[129.39546204 -43.38280487]
[115.71267700 -49.56574249]
[102.77861023 -57.19182968]
[90.74491119 -66.17165375]
[79.75265503 -76.39992523]
[69.93073273 -87.75672913]
[61.39429474 -100.10891724]
[54.24342728 -113.31166077]
[48.56197357 -127.21015930]
[44.41654205 -141.64146423]
[41.85573959 -156.43638611]
[40.90958786 -171.42144775]
[41.58917618 -186.42095947]
[43.88654709 -201.25906372]
[47.77475357 -215.76177979]
[53.20821762 -229.75909424]
[60.12322998 -243.08688354]
[68.43871307 -255.58888245]
[78.05718231 -267.11849976]
[88.86585236 -277.54058838]
[100.73800659 -286.73294067]
[113.53444672 -294.58776855]
[127.10514832 -301.01296997]
[141.29098511 -305.93325806]
[155.92565918 -309.29092407]
[170.83755493 -311.04656982]
[185.85186768 -311.17962646]
[200.79255676 -309.68856812]
[215.48443604 -306.59085083]
[229.75524902 -301.92276001]
[243.43769836 -295.73910522]
[256.37136841 -288.11230469]
[268.40457153 -279.13183594]
[279.39627075 -268.90298462]
[289.21759033 -257.54565430]
[297.75335693 -245.19300842]
[304.90353394 -231.98988342]
[310.58422852 -218.09107971]
[314.72888184 -203.65954590]
[317.28887939 -188.86448669]
[318.23425293 -173.87937927]
[317.55383301 -158.87989807]
[315.25567627 -144.04191589]
[311.36666870 -129.53939819]
[305.93246460 -115.54238129]
[299.01675415 -102.21497345]
[290.70059204 -89.71342468]
[281.08148193 -78.18431091]
[270.27224731 -67.76280975]
[258.39959717 -58.57110214]
[245.60275269 -50.71696091]
[232.03170776 -44.29247284]
[217.84559631 -39.37295914]
[203.21075439 -36.01609802]
[188.29875183 -34.26124954]
[173.28443909 -34.12898254]
[158.34384155 -35.62085342]
[143.65211487 -38.71937180]
[138.98869324 -24.46271133]
[134.32525635 -10.20604992]
[129.66181946 4.05061197]
[124.99839020 18.30727386]
[121.76385498 32.95438004]
[119.98975372 47.84909821]
[118.21566010 62.74381256]
[129.64759827 53.03243637]
[144.59210205 51.74334335]
[157.51817322 59.35363770]
[163.64184570 73.04672241]
[160.69673157 87.75476074]
[149.77281189 98.03425598]
[134.91307068 100.08074951]
[121.61713409 93.13682556]
[114.80619049 79.77442932]
[110.70963287 94.20420074]
[118.91529846 81.64764404]
[131.00793457 72.77249146]
[145.44712830 68.70928192]
[160.39356995 69.97560120]
[173.94335938 76.41014099]
[184.37046814 87.19324493]
[190.34666443 100.95133209]
[191.11068726 115.93186188]
[186.56520081 130.22657776]
[177.28923035 142.01454163]
[164.46438599 149.79420471]
[149.72431946 152.57456970]
[134.94665527 150.00143433]
[122.01384735 142.40260315]
[112.57328796 130.74601746]
[107.82789612 116.51889038]
[108.12425232 131.51596069]
[108.42060852 146.51303101]
[108.71696472 161.51011658]
[109.01332092 176.50718689]
[109.30968475 191.50425720]
[109.60604095 206.50132751]
[109.90239716 221.49839783]
[110.19875336 236.49546814]
[112.76964569 255.70590210]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 157]
[2 156]
[3 155]
[4 154]
[5 153]
[6 152]
[7 151]
[8 150]
[9 149]
[10 21]
[11 20]
[12 19]
[13 18]
[22 38]
[23 37]
[24 36]
[25 35]
[26 34]
[40 133]
[41 132]
[42 123]
[43 122]
[44 121]
[55 120]
[56 119]
[57 118]
[58 117]
[59 116]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
