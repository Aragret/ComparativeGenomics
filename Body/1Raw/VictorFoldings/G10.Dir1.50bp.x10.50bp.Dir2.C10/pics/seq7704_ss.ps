%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:25 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGUCCUUUACAUAACAGACGAGGUCAACGAUCCCUCCCUUACCAUCAAAUCAAUUGGCCACCAAxxxxxxxxxxGAAUGAUUUCGACUCAUUAAAUUAUGAUAAUCAUAUUUACCAAAUGCCCCUCAUUUACAUAACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[101.81881714 252.03311157]
[101.51481628 237.03619385]
[101.21080780 222.03927612]
[100.90680695 207.04235840]
[100.60279846 192.04544067]
[100.29879761 177.04852295]
[99.99478912 162.05158997]
[99.69078827 147.05467224]
[99.38677979 132.05775452]
[85.37401581 126.70590210]
[75.15022278 137.68196106]
[64.92642212 148.65802002]
[70.52319336 162.85798645]
[69.39601135 178.07942200]
[61.76868057 191.30010986]
[49.15561676 199.89508057]
[34.06114960 202.15777588]
[19.48229599 197.63894653]
[8.31369972 187.23580933]
[2.77289271 173.01391602]
[3.96000671 157.79704285]
[11.63933945 144.60649109]
[24.28615379 136.06126404]
[39.38941574 133.85803223]
[53.95035934 138.43423462]
[64.17415619 127.45816803]
[74.39795685 116.48210144]
[67.65590668 103.08267212]
[52.74901199 104.75135040]
[37.84211731 106.42002106]
[22.93522072 108.08869934]
[16.18240929 121.95964050]
[2.99052143 129.95825195]
[-12.43095779 129.53218079]
[-25.16109085 120.81741333]
[-31.13773727 106.59477997]
[-28.45377350 91.40267944]
[-17.96564102 80.08885956]
[-3.02006435 76.26351166]
[11.61387634 81.14729309]
[21.26654434 93.18180847]
[36.17343903 91.51313019]
[51.08033371 89.84445190]
[65.98722839 88.17577362]
[70.51768494 82.19873810]
[56.63564682 76.51639557]
[42.38985825 71.81985474]
[37.93019104 57.49814606]
[46.99111938 45.54408264]
[61.98513412 45.96785355]
[70.35643005 58.41455078]
[79.57859802 70.24466705]
[84.10905457 64.26763153]
[81.68750000 49.46438217]
[79.11605072 34.68643951]
[76.39497375 19.93531227]
[73.67389679 5.18418550]
[70.95281982 -9.56694126]
[68.23174286 -24.31806755]
[65.51066589 -39.06919479]
[55.39831924 -51.23681641]
[60.69845200 -65.15650940]
[56.20800781 -79.46859741]
[50.01451492 -93.13024902]
[43.82102585 -106.79190063]
[31.77419472 -118.72128296]
[39.90247726 -133.59970093]
[56.44957352 -129.90782166]
[57.48267746 -112.98538971]
[63.67616653 -99.32373810]
[69.86965942 -85.66208649]
[72.72758484 -100.38731384]
[81.59724426 -112.48397064]
[94.78157043 -119.63755035]
[109.75792694 -120.47932434]
[123.66083527 -114.84823608]
[133.83018494 -103.82170105]
[138.32022095 -89.50948334]
[136.27183533 -74.65000153]
[128.07698059 -62.08639145]
[115.30359650 -54.22250748]
[100.39568329 -52.56298065]
[86.20563507 -57.42533493]
[75.44957733 -67.87758636]
[85.36730194 -56.76506424]
[80.26179504 -41.79027176]
[82.98287201 -27.03914452]
[85.70394897 -12.28801823]
[88.42502594 2.46310902]
[91.14609528 17.21423531]
[93.86717224 31.96536255]
[98.19882202 38.00824738]
[96.49074554 47.04282761]
[98.91230011 61.84607315]
[116.47776031 69.90396881]
[126.11357117 84.33102417]
[126.59440613 99.70702362]
[141.42143250 97.43560791]
[156.24845886 95.16419220]
[171.07548523 92.89277649]
[185.79827881 90.02235413]
[200.39265442 86.55763245]
[214.98701477 83.09291840]
[229.58139038 79.62820435]
[237.26182556 74.57328033]
[244.50662231 76.24433899]
[259.16821289 73.07611847]
[273.82980347 69.90789795]
[288.49142456 66.73967743]
[302.69613647 57.48428726]
[315.52206421 68.57173920]
[308.41851807 83.96575165]
[291.65963745 81.40127563]
[276.99804688 84.56949615]
[262.33645630 87.73771667]
[247.67485046 90.90593719]
[233.04611206 94.22257996]
[218.45173645 97.68729401]
[203.85736084 101.15200806]
[189.26298523 104.61672211]
[187.67578125 106.99494934]
[185.02322388 108.86820984]
[181.50010681 109.81699371]
[177.45304871 109.50282288]
[173.34689331 107.71980286]
[158.51986694 109.99121857]
[143.69284058 112.26263428]
[128.86582947 114.53404999]
[142.96673584 119.64914703]
[157.06765747 124.76425171]
[172.01820374 123.54727936]
[186.30018616 128.13256836]
[197.74826050 137.82492065]
[204.62672424 151.15483093]
[205.89271545 166.10131836]
[201.35429382 180.39826965]
[191.69955444 191.87806702]
[178.39225769 198.80021667]
[163.45001221 200.11521912]
[149.13825989 195.62370300]
[137.62686157 186.00665283]
[130.66110229 172.72215271]
[129.29708862 157.78433228]
[121.84040070 144.76904297]
[114.38370514 131.75375366]
[114.68770599 146.75067139]
[114.99171448 161.74758911]
[115.29571533 176.74450684]
[115.59971619 191.74142456]
[115.90372467 206.73834229]
[116.20772552 221.73527527]
[116.51173401 236.73219299]
[116.81573486 251.72911072]
[119.39642334 270.93823242]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 153]
[2 152]
[3 151]
[4 150]
[5 149]
[6 148]
[7 147]
[8 146]
[9 145]
[10 27]
[11 26]
[12 25]
[28 44]
[29 43]
[30 42]
[31 41]
[53 94]
[54 93]
[55 91]
[56 90]
[57 89]
[58 88]
[59 87]
[60 86]
[62 84]
[63 71]
[64 70]
[65 69]
[97 128]
[98 127]
[99 126]
[100 125]
[101 120]
[102 119]
[103 118]
[104 117]
[106 116]
[107 115]
[108 114]
[109 113]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
