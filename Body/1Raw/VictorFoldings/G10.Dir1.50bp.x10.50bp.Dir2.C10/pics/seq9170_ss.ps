%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:23 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGUUCCACGGACUUCACGUCAUUAUUGGCUCAACUUUCCUCACUAUCUGCUUCAUCCGCCAAxxxxxxxxxxUGUAGUAUAAACUAAUACACCAGUCUUGUAAACCGGAGAUGAAAACCUUUUUCCAAGGACCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[151.03204346 307.42691040]
[150.40806580 292.43988037]
[149.78408813 277.45288086]
[149.16011047 262.46585083]
[148.53613281 247.47883606]
[147.91217041 232.49182129]
[147.28819275 217.50480652]
[146.66421509 202.51779175]
[144.02534485 187.75172424]
[139.41978455 173.47627258]
[134.81420898 159.20080566]
[130.20864868 144.92535400]
[123.00254059 142.84640503]
[108.59032440 138.68852234]
[101.38421631 136.60957336]
[89.88241577 146.23809814]
[78.38061523 155.86662292]
[78.54347229 171.50335693]
[68.57723236 183.55360413]
[53.18766022 186.32757568]
[39.64123154 178.51551819]
[34.33415604 163.80603027]
[39.77227783 149.14450073]
[53.38787460 141.45362854]
[68.75208282 144.36482239]
[80.25389099 134.73629761]
[91.75569153 125.10777283]
[84.84869385 111.79261780]
[70.35309601 115.64977264]
[59.12532806 127.60256958]
[43.22402191 123.59251404]
[39.00708008 107.74481964]
[50.81253052 96.36222839]
[66.49594116 101.15418243]
[80.99153137 97.29701996]
[81.92716217 82.32622528]
[68.02460480 76.69427490]
[58.48400497 88.41896057]
[45.91043091 96.80923462]
[31.42191505 101.11901855]
[16.30676651 100.96511078]
[1.90901423 96.36118317]
[-10.49110317 87.71662140]
[-19.79097557 75.80008698]
[-25.16366577 61.67119598]
[-26.13143539 46.58627319]
[-22.60823441 31.88666725]
[-14.90734005 18.87945175]
[-3.71351242 8.72122192]
[9.97790146 2.31523967]
[24.94946861 0.23112135]
[39.86993027 2.65418482]
[53.41256714 9.36897278]
[64.37317657 19.77841187]
[71.77715302 32.95690155]
[74.96613312 47.73261642]
[73.65656281 62.79171371]
[87.55912018 68.42367554]
[102.01380920 64.41593170]
[111.03133392 52.42910004]
[120.04886627 40.44226456]
[129.06639099 28.45543289]
[137.83261108 16.28359604]
[146.34368896 3.93202448]
[154.85478210 -8.41954803]
[163.36587524 -20.77112007]
[152.89393616 -31.57530403]
[144.73374939 -44.21091843]
[139.19735718 -58.19131470]
[136.49581909 -72.97848511]
[136.73109436 -88.00376892]
[139.89230347 -102.68971252]
[145.85609436 -116.47228241]
[154.39154053 -128.82250977]
[165.16906738 -139.26678467]
[177.77311707 -147.40504456]
[191.71829224 -152.92607117]
[206.46792603 -155.61943054]
[221.45478821 -155.38345337]
[236.10292053 -152.22904968]
[249.84973145 -146.27931213]
[258.36080933 -158.63088989]
[266.87191772 -170.98246765]
[275.38299561 -183.33403015]
[276.84210205 -199.08781433]
[290.43484497 -205.17774963]
[298.94592285 -217.52931213]
[297.46725464 -233.50408936]
[309.13427734 -244.51591492]
[324.99700928 -242.11747742]
[332.88696289 -228.14865112]
[326.75161743 -213.32511902]
[311.29748535 -209.01823425]
[302.78640747 -196.66665649]
[301.93606567 -181.79634094]
[287.73455811 -174.82295227]
[279.22348022 -162.47137451]
[270.71240234 -150.11979675]
[262.20129395 -137.76823425]
[272.65628052 -127.04125977]
[280.82009888 -114.47663116]
[286.37744141 -100.55622864]
[289.11300659 -85.81436920]
[288.91976929 -70.81729126]
[285.80331421 -56.14141464]
[279.88156128 -42.35117340]
[271.38040161 -29.97732162]
[260.62503052 -19.49648857]
[248.02749634 -11.31283379]
[234.07093811 -5.74245501]
[219.29107666 -3.00118351]
[204.25563049 -3.19621706]
[189.54244995 -6.32193279]
[175.71745300 -12.26003075]
[167.20635986 0.09154209]
[158.69526672 12.44311428]
[150.18417358 24.79468727]
[150.16848755 29.62948418]
[147.07141113 34.49152374]
[141.05322266 37.47296524]
[132.03570557 49.45979691]
[123.01817322 61.44662857]
[114.00064087 73.43346405]
[144.48411560 140.31977844]
[149.08967590 154.59524536]
[153.69523621 168.87071228]
[158.30081177 183.14616394]
[162.60597229 168.77725220]
[172.29716492 157.32821655]
[185.75769043 150.70898438]
[200.74203491 150.02383423]
[214.75047302 155.38702393]
[225.44607544 165.90386963]
[231.04457092 179.81994629]
[230.61201477 194.81370544]
[224.22056580 208.38386536]
[212.93644714 218.26663208]
[198.64213562 222.81330872]
[183.72221375 221.26544189]
[170.66566467 213.88122559]
[161.65122986 201.89381409]
[162.27520752 216.88082886]
[162.89918518 231.86784363]
[163.52316284 246.85485840]
[164.14714050 261.84188843]
[164.77111816 276.82888794]
[165.39509583 291.81591797]
[166.01907349 306.80291748]
[172.71905518 322.37683105]
[159.60853577 333.12625122]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 148]
[2 147]
[3 146]
[4 145]
[5 144]
[6 143]
[7 142]
[8 141]
[9 127]
[10 126]
[11 125]
[12 124]
[15 27]
[16 26]
[17 25]
[28 35]
[29 34]
[36 58]
[37 57]
[59 123]
[60 122]
[61 121]
[62 120]
[63 117]
[64 116]
[65 115]
[66 114]
[81 99]
[82 98]
[83 97]
[84 96]
[86 94]
[87 93]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
