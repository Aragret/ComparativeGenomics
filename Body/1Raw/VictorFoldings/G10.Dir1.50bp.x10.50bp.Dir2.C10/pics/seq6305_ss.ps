%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:23 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCUAAGCCUCCUUAUUCGAGCCGAGCUGGGCCAGCCAGGCAACCUUCUAGGUAACGACCACAxxxxxxxxxxACCCACAACAAAUAGCCCUUCUAAACGCUAAUCCAAGCCUCACCCCACUACUAGGCCUCCUCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[132.79255676 297.04626465]
[132.17674255 282.05892944]
[131.56091309 267.07156372]
[130.94508362 252.08421326]
[130.32925415 237.09686279]
[129.71343994 222.10951233]
[129.09761047 207.12216187]
[128.48178101 192.13481140]
[124.52517700 177.66604614]
[117.42877197 164.45085144]
[110.33236694 151.23567200]
[103.23596191 138.02049255]
[88.33152008 136.33009338]
[78.45581055 147.62037659]
[68.58010101 158.91065979]
[65.93399048 175.09490967]
[50.50133514 180.64155579]
[38.15793610 169.84468079]
[41.60162354 153.81117249]
[57.28982544 149.03494263]
[67.16552734 137.74465942]
[77.04123688 126.45438385]
[68.42702484 104.89665985]
[75.35921478 84.95037079]
[62.60596085 77.05388641]
[48.26589966 72.65358734]
[33.92583847 68.25328827]
[16.34401703 83.40776825]
[-11.83491421 75.00550079]
[-26.82780075 74.54357147]
[-41.82068634 74.08164215]
[-53.28402710 84.62818909]
[-68.48236847 83.94615173]
[-78.46623993 72.95260620]
[-93.45912170 72.49068451]
[-108.45201111 72.02875519]
[-123.44489288 71.56683350]
[-139.46270752 77.12253571]
[-149.23547363 63.26867294]
[-138.62838745 50.04270554]
[-122.98297119 56.57394409]
[-107.99008179 57.03586960]
[-92.99720001 57.49779510]
[-78.00431061 57.95972443]
[-67.36260223 47.60165024]
[-52.15110779 47.85652924]
[-41.35876083 59.08876038]
[-26.36587334 59.55068588]
[-11.37298775 60.01261139]
[-8.59201908 53.04725266]
[-0.24911360 32.15118027]
[-11.43741035 22.16008186]
[-22.62570763 12.16898537]
[-33.81400299 2.17788839]
[-49.65550232 -3.86224937]
[-48.23677826 -20.75673294]
[-31.60979652 -24.07031059]
[-23.82290649 -9.01040840]
[-12.63461018 0.98068881]
[-1.44631326 10.97178555]
[9.74198341 20.96288300]
[27.94102097 26.75988960]
[37.96245956 39.91347122]
[38.32613754 53.91322708]
[52.66619873 58.31352615]
[67.00625610 62.71382523]
[57.00818253 51.53176880]
[49.80136108 38.37647629]
[45.76006317 23.93113327]
[45.09416580 8.94592190]
[47.83824539 -5.80094290]
[53.84980011 -19.54362106]
[62.81663513 -31.56842422]
[74.27307892 -41.25087357]
[87.62417603 -48.08814240]
[102.17656708 -51.72515106]
[117.17452240 -51.97302246]
[131.83915710 -48.81888199]
[145.40888977 -42.42653656]
[157.17904663 -33.12795258]
[166.53833008 -21.40602493]
[173.00073242 -7.86950254]
[176.23062134 6.77863026]
[176.06027222 21.77766228]
[172.49853516 36.34865952]
[165.73036194 49.73491669]
[156.10725403 61.24125671]
[144.12896729 70.27011871]
[130.41754150 76.35263062]
[115.68505096 79.17288971]
[100.69660187 78.58445740]
[86.23452759 74.61946869]
[104.42890167 71.46853638]
[120.81187439 79.98686218]
[133.95350647 72.75516510]
[147.09513855 65.52346039]
[160.23677063 58.29175568]
[160.47189331 42.93466568]
[168.36782837 29.76083565]
[181.80061340 22.31396484]
[197.15689087 22.59722137]
[210.30590820 30.53441238]
[217.71063232 43.99047089]
[217.37924194 59.34579086]
[209.40087891 72.46985626]
[195.92166138 79.83237457]
[180.56745911 79.45285034]
[167.46846008 71.43338776]
[154.32684326 78.66509247]
[141.18521118 85.89678955]
[128.04357910 93.12849426]
[129.89297485 99.40412140]
[130.30557251 106.15690613]
[129.16319275 113.05136871]
[126.42716980 119.72393036]
[122.14480591 125.80192566]
[116.45114899 130.92408752]
[123.54755402 144.13926697]
[130.64395142 157.35444641]
[137.74035645 170.56964111]
[138.46220398 155.58702087]
[142.96804810 141.27976990]
[150.96199036 128.58737183]
[161.91912842 118.34329224]
[175.11994934 111.22020721]
[189.69761658 107.68585205]
[204.69487000 107.97231293]
[219.12693787 112.06077576]
[232.04611206 119.68277740]
[242.60406494 130.33781433]
[250.10748291 143.32621765]
[254.06367493 157.79510498]
[254.21284485 172.79435730]
[250.54519653 187.33906555]
[243.30155945 200.47412109]
[232.95761108 211.33703613]
[220.19258118 219.21446228]
[205.84468079 223.58914185]
[190.85607910 224.17381287]
[176.21101379 220.93008423]
[162.87113953 214.07093811]
[151.71243286 204.04679871]
[143.46913147 191.51898193]
[144.08496094 206.50633240]
[144.70079041 221.49368286]
[145.31661987 236.48104858]
[145.93243408 251.46839905]
[146.54826355 266.45574951]
[147.16409302 281.44311523]
[147.77992249 296.43045044]
[154.47143555 312.00799561]
[141.35505676 322.75030518]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 120]
[10 119]
[11 118]
[12 117]
[13 22]
[14 21]
[15 20]
[24 92]
[25 66]
[26 65]
[27 64]
[29 49]
[30 48]
[31 47]
[34 44]
[35 43]
[36 42]
[37 41]
[51 61]
[52 60]
[53 59]
[54 58]
[94 111]
[95 110]
[96 109]
[97 108]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
