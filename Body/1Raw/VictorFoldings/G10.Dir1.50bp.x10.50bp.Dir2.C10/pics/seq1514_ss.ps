%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:30 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCUUCAUAUCCCUCUAGAGGAGCCUGUUCUGUAAUCGAUAAACCCCGAUCAACCUCACCACxxxxxxxxxxAUACUAGCAUUUACCAUCUCACUUCUAGGAAUACUAGUAUAUCGCUCACACCUCAUAUCCCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[87.49742126 430.97766113]
[87.49742126 415.97766113]
[87.49742126 400.97766113]
[87.49742126 385.97766113]
[87.49742126 370.97766113]
[87.49742126 355.97766113]
[87.49742126 340.97766113]
[87.49742126 325.97766113]
[87.49742126 310.97766113]
[87.49742126 295.97766113]
[73.55045319 293.29092407]
[60.34034729 288.06106567]
[48.32659531 280.46832275]
[37.92740250 270.77508545]
[29.50510979 259.31695557]
[23.35359383 246.49099731]
[19.68798828 232.74212646]
[18.63717079 218.54754639]
[20.23923683 204.40026855]
[24.44011116 190.79191589]
[31.09538078 178.19572449]
[39.97525024 167.05001831]
[50.77248764 157.74298096]
[63.11303329 150.59913635]
[76.56898499 145.86805725]
[90.67342377 143.71557617]
[91.29740143 128.72856140]
[91.92137909 113.74153900]
[87.60821533 128.10804749]
[74.77478790 135.87356567]
[60.04702759 133.02873230]
[51.02891159 121.04233551]
[52.37650681 106.10299683]
[63.39405060 95.92391205]
[78.39508820 95.76129150]
[63.82238388 92.20653534]
[49.24967957 88.65177155]
[39.59685516 100.47486877]
[25.76647186 106.93112946]
[10.50456905 106.73866272]
[-3.15859604 99.93566895]
[-12.51019001 87.87290192]
[-15.69344807 72.94541931]
[-12.07633114 58.11709595]
[-2.37702155 46.33209610]
[11.47867680 39.93035126]
[26.73970413 40.18292236]
[40.37597275 47.03966522]
[49.67999268 59.13916779]
[52.80443954 74.07906342]
[67.37714386 77.63382721]
[81.94984436 81.18859100]
[89.46617126 82.85552979]
[95.31141663 86.62460327]
[98.98799896 91.83776855]
[107.24028778 79.31180573]
[115.49257660 66.78584290]
[123.74486542 54.25988388]
[110.19694519 60.69834518]
[95.45774841 63.48333740]
[80.49462891 62.43208313]
[66.28963470 57.61357498]
[53.77503967 49.34405518]
[43.77219009 38.16626358]
[36.93758774 24.81380463]
[33.71978378 10.16301060]
[34.32997513 -4.82457304]
[38.72810745 -19.16529846]
[46.62553024 -31.91797447]
[57.50392532 -42.24562836]
[70.64933777 -49.47045135]
[85.19902802 -53.11827087]
[100.19808197 -52.94967651]
[114.66210175 -48.97573471]
[127.64179230 -41.45725632]
[138.28529358 -30.88768959]
[145.89407349 -17.96072006]
[149.96875000 -3.52475643]
[150.24189758 11.47275639]
[146.69558716 26.04751968]
[139.55973816 39.24691391]
[152.49780273 31.65700340]
[165.43585205 24.06709671]
[178.37391663 16.47718811]
[191.31196594 8.88727951]
[204.25003052 1.29737091]
[217.18807983 -6.29253721]
[225.17620850 -19.94904900]
[240.06898499 -19.71526146]
[253.00703430 -27.30517006]
[265.94509888 -34.89507675]
[269.59417725 -40.53348541]
[274.77804565 -43.05516052]
[279.58303833 -42.51871490]
[292.82562256 -49.56385040]
[292.16186523 -64.81253052]
[298.18792725 -78.83570862]
[309.70724487 -88.84907532]
[324.43270874 -92.86447144]
[339.44055176 -90.08464050]
[351.75094604 -81.06150818]
[358.91967773 -67.58663177]
[359.52334595 -52.33545685]
[353.44213867 -38.33611298]
[341.88345337 -28.36818504]
[327.14230347 -24.41080856]
[312.14550781 -27.24972343]
[299.87075806 -36.32126236]
[286.62817383 -29.27612877]
[273.53500366 -21.95702171]
[260.59695435 -14.36711407]
[247.65888977 -6.77720594]
[240.59617615 6.33642387]
[224.77798462 6.64551878]
[211.83993530 14.23542690]
[198.90187073 21.82533455]
[185.96382141 29.41524315]
[173.02577209 37.00515366]
[160.08770752 44.59505844]
[147.14965820 52.18496704]
[136.27082825 62.51217270]
[128.01853943 75.03813171]
[119.76625061 87.56409454]
[111.51396179 100.09005737]
[106.90839386 114.36551666]
[106.28441620 129.35253906]
[105.66043854 144.33955383]
[121.03285217 148.18411255]
[135.27943420 155.10899353]
[147.79066467 164.81546021]
[158.03182983 176.88580322]
[165.56575012 190.80131531]
[170.07159424 205.96466064]
[171.35841370 221.72541809]
[169.37330627 237.40803528]
[164.20356750 252.34077454]
[156.07281494 265.88449097]
[145.33142090 277.45996094]
[132.44129944 286.57266235]
[117.95609283 292.83398438]
[102.49742126 295.97766113]
[102.49742126 310.97766113]
[102.49742126 325.97766113]
[102.49742126 340.97766113]
[102.49742126 355.97766113]
[102.49742126 370.97766113]
[102.49742126 385.97766113]
[102.49742126 400.97766113]
[102.49742126 415.97766113]
[102.49742126 430.97766113]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[26 127]
[27 126]
[28 125]
[35 52]
[36 51]
[37 50]
[55 124]
[56 123]
[57 122]
[58 121]
[81 120]
[82 119]
[83 118]
[84 117]
[85 116]
[86 115]
[87 114]
[89 112]
[90 111]
[91 110]
[94 109]
[95 108]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
