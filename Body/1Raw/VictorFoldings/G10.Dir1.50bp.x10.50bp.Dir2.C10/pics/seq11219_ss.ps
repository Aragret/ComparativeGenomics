%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:06 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGAAAUCCCCACUAUGCACAUUUUAUUUCUCCAACAUACUCGGAUUCUACCCUAGCAUCACAxxxxxxxxxxACCGCUAACAAUCAAUACUAAACCCCCAUAAAUAGGAGAAGGCUUAGAAGAAAACCCCACCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[101.07489777 398.28979492]
[101.07489777 383.28979492]
[101.07489777 368.28979492]
[101.07489777 353.28979492]
[101.07489777 338.28979492]
[101.07489777 323.28979492]
[101.07489777 308.28979492]
[101.07489777 293.28979492]
[101.07489777 278.28979492]
[101.07489777 263.28979492]
[84.56158447 258.87347412]
[69.91193390 250.04048157]
[58.28090286 237.47886658]
[50.58779907 222.17092896]
[47.44359970 205.31649780]
[49.10242462 188.23876953]
[55.44103241 172.28054810]
[65.96794128 158.69859314]
[79.86151886 148.56463623]
[96.03411865 142.68087769]
[94.78724670 127.73278809]
[93.54037476 112.78469849]
[85.72563171 101.19067383]
[91.51154327 88.46217346]
[90.26466370 73.51408386]
[80.93651581 85.26081085]
[66.52917480 89.43556213]
[52.36587143 84.49584961]
[43.67966080 72.26679230]
[43.67992401 57.26679230]
[52.36656952 45.03804779]
[66.53005219 40.09883499]
[80.93724060 44.27409744]
[90.26466370 56.02033615]
[91.51154327 41.07225037]
[92.75841522 26.12416267]
[94.00528717 11.17607594]
[95.25216675 -3.77201128]
[96.49903870 -18.72009850]
[97.74591064 -33.66818619]
[82.94326019 -36.14628983]
[68.39580536 -39.83833313]
[54.20293427 -44.71908951]
[40.46158600 -50.75522995]
[27.26564026 -57.90550995]
[14.70523357 -66.12108612]
[2.86617041 -75.34584045]
[-8.17067528 -85.51676178]
[-18.32991028 -96.56436157]
[-27.54213524 -108.41317749]
[-35.74441910 -120.98226929]
[-42.88073349 -134.18577576]
[-48.90232849 -147.93350220]
[-53.76807022 -162.13153076]
[-57.44472122 -176.68287659]
[-59.90716171 -191.48814392]
[-61.13857269 -206.44619751]
[-61.13054276 -221.45483398]
[-59.88312912 -236.41156006]
[-57.40485001 -251.21418762]
[-53.71263123 -265.76159668]
[-48.83170319 -279.95440674]
[-42.79540253 -293.69567871]
[-35.64496613 -306.89154053]
[-27.42923737 -319.45184326]
[-18.20433998 -331.29080200]
[-8.03329182 -342.32754517]
[3.01443052 -352.48663330]
[14.86335659 -361.69873047]
[27.43254471 -369.90084839]
[40.63613510 -377.03701782]
[54.38393021 -383.05844116]
[68.58202362 -387.92401123]
[83.13341522 -391.60049438]
[97.93871307 -394.06274414]
[112.89677429 -395.29397583]
[127.90541840 -395.28576660]
[142.86212158 -394.03817749]
[157.66471863 -391.55972290]
[172.21208191 -387.86734009]
[186.40484619 -382.98623657]
[200.14604187 -376.94976807]
[213.34182739 -369.79919434]
[225.90203857 -361.58331299]
[237.74087524 -352.35827637]
[248.77748108 -342.18707275]
[258.93646240 -331.13925171]
[268.14840698 -319.29022217]
[276.35037231 -306.72091675]
[283.48638916 -293.51724243]
[289.50765991 -279.76937866]
[294.37304688 -265.57122803]
[298.04934692 -251.01979065]
[300.51144409 -236.21446228]
[301.74249268 -221.25639343]
[301.73410034 -206.24774170]
[300.48632812 -191.29106140]
[298.00769043 -176.48849487]
[294.31512451 -161.94117737]
[289.43386841 -147.74847412]
[283.39724731 -134.00733948]
[276.24649048 -120.81164551]
[268.03045654 -108.25153351]
[258.80529785 -96.41280365]
[248.63397217 -85.37631989]
[237.58601379 -75.21747589]
[225.73686218 -66.00567627]
[213.16748047 -57.80384064]
[199.96371460 -50.66799927]
[186.21577454 -44.64689636]
[172.01757812 -39.78166199]
[157.46609497 -36.10553360]
[142.66073608 -33.64362335]
[127.70264435 -32.41274643]
[112.69400024 -32.42131042]
[111.44712830 -17.47322464]
[110.20024872 -2.52513671]
[108.95337677 12.42294979]
[107.70650482 27.37103653]
[106.45962524 42.31912231]
[105.21275330 57.26721191]
[105.21275330 72.26721191]
[106.45962524 87.21530151]
[114.27436829 98.80932617]
[108.48845673 111.53782654]
[109.73533630 126.48591614]
[110.98220825 141.43400574]
[123.87927246 143.35823059]
[136.07255554 147.96028137]
[147.01309204 155.02981567]
[156.20893860 164.24546814]
[163.24739075 175.18943787]
[167.81343079 187.36647034]
[169.70384216 200.22624207]
[168.83627319 213.18824768]
[165.25277710 225.66798401]
[159.11785889 237.10331726]
[150.71083069 246.97981262]
[140.41317749 254.85385132]
[128.69119263 260.37261963]
[116.07489777 263.28979492]
[116.07489777 278.28979492]
[116.07489777 293.28979492]
[116.07489777 308.28979492]
[116.07489777 323.28979492]
[116.07489777 338.28979492]
[116.07489777 353.28979492]
[116.07489777 368.28979492]
[116.07489777 383.28979492]
[116.07489777 398.28979492]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[20 127]
[21 126]
[22 125]
[24 123]
[25 122]
[34 121]
[35 120]
[36 119]
[37 118]
[38 117]
[39 116]
[40 115]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
