%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:06 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCCAUCAUAAUCGGAGGCUUUGGCAACUGACUAGUUCCCCUAAUAAUCGGUGCCCCCGAUAUxxxxxxxxxxAGACGCUACUUCCCCUAUCAUAGAAGAGCUUAUCACCUUUCAUGAUCACGCCCUCAUAAUCCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[94.81953430 407.08422852]
[94.81953430 392.08422852]
[94.81953430 377.08422852]
[94.81953430 362.08422852]
[94.81953430 347.08422852]
[94.81953430 332.08422852]
[94.81953430 317.08422852]
[94.81953430 302.08422852]
[94.81953430 287.08422852]
[94.81953430 272.08422852]
[79.80397034 268.18823242]
[66.29176331 260.54550171]
[55.20021057 249.66830444]
[47.28396606 236.28866577]
[43.08372116 221.30917358]
[42.88925171 205.74205017]
[46.71945572 190.64076233]
[54.32067108 177.02873230]
[65.18347168 165.82998657]
[78.57682037 157.80639648]
[93.59722900 153.50593567]
[93.28924561 138.50909424]
[73.37042999 128.61555481]
[62.07217407 109.45856476]
[47.09193420 110.22821808]
[32.11169434 110.99787903]
[28.44505882 113.57769775]
[24.53904343 114.70313263]
[20.89239311 114.48248291]
[17.91431618 113.17853546]
[15.88089752 111.16452026]
[0.88801199 110.70259857]
[-7.84795713 113.57985687]
[-14.40707588 110.07412720]
[-29.38731575 109.30446625]
[-44.36755753 108.53480530]
[-59.34779739 107.76514435]
[-73.69779968 115.70299530]
[-87.60570526 107.01380157]
[-86.76425934 90.63625336]
[-72.03906250 83.41817474]
[-58.57814026 92.78490448]
[-43.59789658 93.55456543]
[-28.61765671 94.32422638]
[-13.63741589 95.09388733]
[1.34993792 95.70970917]
[16.34282303 96.17163849]
[31.34203339 96.01763916]
[46.32227325 95.24797821]
[61.30251694 94.47831726]
[61.63892365 86.49065399]
[63.66273499 78.44156647]
[67.40589142 70.69345093]
[72.82172394 63.61764145]
[79.78296661 57.57724380]
[71.36956024 45.15893173]
[62.95614624 32.74061584]
[54.54273605 20.32230186]
[46.12932587 7.90398836]
[30.70964241 3.47534847]
[24.69139862 -11.39611053]
[32.69127655 -25.30227852]
[48.57245636 -27.57553291]
[60.15225601 -16.47202682]
[58.54764175 -0.50942171]
[66.96105194 11.90889263]
[75.37446594 24.32720757]
[83.78787231 36.74552155]
[92.20127869 49.16383362]
[99.62394714 50.23812485]
[98.19413757 35.30642700]
[96.76433563 20.37472534]
[95.33452606 5.44302559]
[88.78692627 -8.05248928]
[90.13269043 -22.99199867]
[98.98668671 -35.10012436]
[112.81508636 -40.91178131]
[127.66049194 -38.76378632]
[139.27445984 -29.27085686]
[144.33331299 -15.14966774]
[141.38932800 -0.44140863]
[131.28311157 10.64590168]
[125.67849731 24.55950356]
[120.07388306 38.47310257]
[114.46926880 52.38670349]
[121.89192963 53.46099472]
[133.48097229 43.93765640]
[145.07002258 34.41431808]
[149.75112915 26.49705505]
[156.99618530 24.81737328]
[168.77832031 15.53398705]
[180.56045532 6.25060177]
[192.34259033 -3.03278351]
[190.06323242 -18.22159767]
[195.69857788 -32.50930023]
[207.73275757 -42.05256653]
[222.92864990 -44.28431320]
[237.19860840 -38.60420609]
[246.70411682 -26.54016876]
[248.88821411 -11.33736420]
[243.16340637 2.91472816]
[231.06964111 12.38236809]
[215.86006165 14.51880646]
[201.62597656 8.74935341]
[189.84384155 18.03273964]
[178.06170654 27.31612396]
[166.27957153 36.59951019]
[154.59336853 46.00336838]
[143.00431824 55.52670288]
[131.41526794 65.05004120]
[137.78091431 76.75509644]
[140.27305603 89.09163666]
[139.07951355 100.88079071]
[153.73223877 104.08979034]
[168.38496399 107.29878235]
[183.03768921 110.50778198]
[195.30799866 100.81379700]
[210.93717957 101.32664490]
[222.54559326 111.80418396]
[224.65209961 127.29923248]
[216.26208496 140.49551392]
[201.33705139 145.16212463]
[186.92414856 139.09565735]
[179.82868958 125.16050720]
[165.17596436 121.95150757]
[150.52323914 118.74251556]
[135.87051392 115.53351593]
[129.26251221 125.91697693]
[119.75346375 133.73106384]
[108.28608704 138.20111084]
[108.59406281 153.19795227]
[122.74891663 156.49113464]
[135.68991089 163.08355713]
[146.66140747 172.58517456]
[155.02397156 184.43620300]
[160.29167175 197.94010925]
[162.16033936 212.30458069]
[160.52505493 226.68795776]
[155.48608398 240.24856567]
[147.34277344 252.19398499]
[136.57563782 261.82739258]
[123.81819916 268.58807373]
[109.81953430 272.08422852]
[109.81953430 287.08422852]
[109.81953430 302.08422852]
[109.81953430 317.08422852]
[109.81953430 332.08422852]
[109.81953430 347.08422852]
[109.81953430 362.08422852]
[109.81953430 377.08422852]
[109.81953430 392.08422852]
[109.81953430 407.08422852]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 152]
[2 151]
[3 150]
[4 149]
[5 148]
[6 147]
[7 146]
[8 145]
[9 144]
[10 143]
[21 131]
[22 130]
[24 50]
[25 49]
[26 48]
[31 47]
[32 46]
[34 45]
[35 44]
[36 43]
[37 42]
[55 69]
[56 68]
[57 67]
[58 66]
[59 65]
[86 110]
[87 109]
[88 108]
[90 107]
[91 106]
[92 105]
[93 104]
[113 127]
[114 126]
[115 125]
[116 124]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
