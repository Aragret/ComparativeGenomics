%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:33 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCAAAAACAUCACCUCUAGCAUCACCAGUAUUAGAGGCACCGCCUGCCCAGUGACACAUGUUxxxxxxxxxxCCUCAACCCCGACAUCAUUACCGGGUUUUCCUCUUGUAAAUAUAGUUUAACCAAAACAUCACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[129.78227234 362.14123535]
[129.78227234 347.14123535]
[129.78227234 332.14123535]
[129.78227234 317.14123535]
[129.78227234 302.14123535]
[129.78227234 287.14123535]
[129.78227234 272.14123535]
[129.78227234 257.14123535]
[129.78227234 242.14123535]
[129.78227234 227.14123535]
[150.82386780 193.87423706]
[143.45762634 180.80754089]
[136.09138489 167.74084473]
[128.19490051 154.98759460]
[119.78149414 142.56927490]
[111.36808014 130.15095520]
[92.26015472 131.27952576]
[75.88336182 121.37057495]
[68.01653290 103.92065430]
[53.11208344 102.23026276]
[38.20763397 100.53986359]
[23.30318832 98.84946442]
[6.69430351 114.32633972]
[-18.84816170 106.98435211]
[-33.62027740 109.58907318]
[-48.39239502 112.19380188]
[-63.16451263 114.79852295]
[-66.80776215 129.58522034]
[-76.15544891 141.60772705]
[-89.58804321 148.78305054]
[-104.77826691 149.86802673]
[-119.09430695 144.67469788]
[-130.05583191 134.10279846]
[-135.76370239 119.98401642]
[-135.22897339 104.76448822]
[-128.54429626 91.08110046]
[-116.86785126 81.30458069]
[-102.22262573 77.12877655]
[-87.14601135 79.27715302]
[-74.25011444 87.37751007]
[-65.76923370 100.02640533]
[-50.99711609 97.42168427]
[-36.22500229 94.81696320]
[-21.45288467 92.21223450]
[-18.84816170 77.44011688]
[-31.83854294 69.94011688]
[-44.82892609 62.44012070]
[-57.81930542 54.94012070]
[-73.62548828 57.68678284]
[-85.53181458 46.93415833]
[-84.40476990 30.93074036]
[-71.10892487 21.95298386]
[-55.84371948 26.88785362]
[-50.31930542 41.94974136]
[-37.32892609 49.44974136]
[-24.33854294 56.94974136]
[-11.34816265 64.44973755]
[6.08116198 62.59425735]
[19.69636726 70.74981689]
[24.99358559 83.94501495]
[39.89803314 85.63541412]
[54.80248260 87.32581329]
[69.70693207 89.01621246]
[71.31796265 83.08785248]
[74.10767365 77.39600372]
[78.04008484 72.17743683]
[83.03135681 67.66294098]
[88.95101166 64.06765747]
[95.62494659 61.58160782]
[96.85556030 46.63217545]
[98.08616638 31.68273926]
[84.55095673 24.76417542]
[74.69747925 13.18931484]
[70.02832031 -1.27676117]
[71.25548553 -16.42808151]
[78.19184875 -29.95417786]
[89.77966309 -39.79242325]
[104.25186920 -44.44255066]
[119.40155792 -43.19545364]
[132.91851807 -36.24130249]
[142.74151611 -24.64055824]
[147.37260437 -10.16224766]
[146.10557556 4.98579121]
[139.13365173 18.49359322]
[127.51999664 28.30131531]
[113.03560638 32.91335297]
[111.80499268 47.86278534]
[110.57437897 62.81222153]
[123.93247986 69.63579559]
[135.32354736 59.87652206]
[146.71463013 50.11724854]
[158.10569763 40.35797501]
[155.20468140 25.27554512]
[160.24868774 10.76852989]
[171.88093567 0.73924321]
[186.97238159 -2.11448836]
[201.46351624 2.97497511]
[211.45628357 14.63859367]
[214.26269531 29.73891258]
[209.12783813 44.21401978]
[197.43295288 54.17018890]
[182.32391357 56.92925644]
[167.86497498 51.74904633]
[156.47390747 61.50831985]
[145.08282471 71.26759338]
[133.69175720 81.02687073]
[135.21562195 104.02400208]
[123.78639984 121.73754883]
[132.19981384 134.15586853]
[140.61322021 146.57418823]
[144.71858215 148.37576294]
[147.70352173 151.13505554]
[149.40252686 154.36926270]
[149.82856750 157.59225464]
[149.15808105 160.37460327]
[156.52432251 173.44129944]
[163.89056396 186.50799561]
[175.18083191 196.38369751]
[189.11155701 201.94564819]
[203.04226685 207.50758362]
[216.97299194 213.06951904]
[232.22274780 208.08712769]
[245.54649353 217.02342224]
[246.72337341 233.02325439]
[234.85060120 243.81291199]
[219.03593445 241.11549377]
[211.41105652 227.00022888]
[197.48033142 221.43829346]
[183.54962158 215.87635803]
[169.61889648 210.31442261]
[163.40974426 214.52113342]
[172.96856689 226.08093262]
[182.52738953 237.64073181]
[192.08619690 249.20053101]
[203.87623596 258.47387695]
[203.34367371 273.46441650]
[190.92529297 281.87771606]
[176.80596924 276.81362915]
[172.56558228 262.42575073]
[165.37419128 249.26200867]
[158.18281555 236.09828186]
[150.99142456 222.93453979]
[144.78227234 227.14123535]
[144.78227234 242.14123535]
[144.78227234 257.14123535]
[144.78227234 272.14123535]
[144.78227234 287.14123535]
[144.78227234 302.14123535]
[144.78227234 317.14123535]
[144.78227234 332.14123535]
[144.78227234 347.14123535]
[144.78227234 362.14123535]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 152]
[2 151]
[3 150]
[4 149]
[5 148]
[6 147]
[7 146]
[8 145]
[9 144]
[10 143]
[11 117]
[12 116]
[13 115]
[14 110]
[15 109]
[16 108]
[19 63]
[20 62]
[21 61]
[22 60]
[24 44]
[25 43]
[26 42]
[27 41]
[45 57]
[46 56]
[47 55]
[48 54]
[69 88]
[70 87]
[71 86]
[89 106]
[90 105]
[91 104]
[92 103]
[118 130]
[119 129]
[120 128]
[121 127]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
