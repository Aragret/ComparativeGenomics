%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:03 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCUAACCUCCCUGUUCUUAUGAAUUCGAACAGCAUACCCCCGAUUCCGCUACGACCAACUCxxxxxxxxxxUGAUCUAGAAAUUGCCCUCCUUUUACCCCUACCAUGAGCCCUACAAACAACUAACCUGCCCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[161.98963928 77.08689880]
[148.89648438 84.40600586]
[135.80332947 91.72510529]
[122.71017456 99.04421234]
[109.61701965 106.36331940]
[98.95539856 116.91461182]
[91.50048828 129.93092346]
[84.04557800 142.94723511]
[76.59066772 155.96353149]
[69.13575745 168.97984314]
[69.73367310 185.36808777]
[55.69813919 193.84959412]
[41.46771622 185.69932556]
[41.68143463 169.30155945]
[56.11944580 161.52493286]
[63.57435608 148.50862122]
[71.02926636 135.49232483]
[78.48417664 122.47600555]
[85.93908691 109.45970154]
[76.55192566 97.76007843]
[62.22932816 102.21688843]
[47.90673065 106.67370605]
[33.58413315 111.13052368]
[19.26153564 115.58734131]
[4.93893766 120.04415131]
[1.63667631 135.04383850]
[-8.73485184 146.37199402]
[-23.38575745 150.98138428]
[-38.37501907 147.63212585]
[-49.67060471 137.22514343]
[-54.23405457 122.55986023]
[-50.83782578 107.58116913]
[-40.39548492 96.31826019]
[-25.71597099 91.80079651]
[-10.74799919 95.24396515]
[0.48212197 105.72155762]
[14.80471897 101.26473999]
[29.12731743 96.80792236]
[43.44991302 92.35111237]
[57.77251053 87.89429474]
[72.09510803 83.43747711]
[81.09004211 80.19595337]
[89.50863647 80.30561829]
[96.29291534 83.15633392]
[100.68413544 87.84017181]
[102.29791260 93.27016449]
[115.39106750 85.95105743]
[128.48422241 78.63195038]
[141.57737732 71.31285095]
[154.67053223 63.99374390]
[148.16108704 50.47457123]
[142.48794556 36.58370209]
[137.67218018 22.37281418]
[133.73173523 7.89476919]
[130.68127441 -6.79657125]
[128.53211975 -21.64655495]
[127.29228210 -36.59993744]
[126.96636963 -51.60109329]
[127.55560303 -66.59421539]
[129.05776978 -81.52352142]
[131.46731567 -96.33348846]
[134.77523804 -110.96900940]
[138.96925354 -125.37564087]
[144.03376770 -139.49978638]
[149.94992065 -153.28890991]
[156.69570923 -166.69172668]
[164.24604797 -179.65834045]
[172.57283020 -192.14054871]
[181.64509583 -204.09190369]
[191.42909241 -215.46794128]
[201.88842773 -226.22634888]
[212.98417664 -236.32710266]
[224.67507935 -245.73262024]
[236.91761780 -254.40791321]
[249.66629028 -262.32070923]
[262.87362671 -269.44158936]
[276.49053955 -275.74404907]
[290.46630859 -281.20465088]
[304.74902344 -285.80303955]
[319.28549194 -289.52218628]
[334.02166748 -292.34817505]
[348.90270996 -294.27053833]
[363.87326050 -295.28213501]
[378.87762451 -295.37918091]
[393.86001587 -294.56130981]
[408.76467896 -292.83154297]
[423.53616333 -290.19638062]
[438.11950684 -286.66558838]
[452.46051025 -282.25228882]
[466.50573730 -276.97290039]
[480.20303345 -270.84707642]
[493.50137329 -263.89761353]
[506.35128784 -256.15036011]
[518.70501709 -247.63414001]
[530.51660156 -238.38061523]
[541.74206543 -228.42420959]
[552.33966064 -217.80198669]
[562.26995850 -206.55343628]
[571.49603271 -194.72042847]
[579.98358154 -182.34695435]
[587.70098877 -169.47908020]
[594.61956787 -156.16464233]
[600.71356201 -142.45318604]
[605.96032715 -128.39572144]
[610.34033203 -114.04453278]
[613.83728027 -99.45301819]
[616.43817139 -84.67546082]
[618.13330078 -69.76683044]
[618.91638184 -54.78258133]
[618.78454590 -39.77846909]
[617.73815918 -24.81029892]
[615.78131104 -9.93376160]
[612.92108154 4.79580355]
[609.16821289 19.32360077]
[604.53668213 33.59558868]
[599.04364014 47.55866623]
[592.70959473 61.16090012]
[585.55810547 74.35167694]
[577.61572266 87.08193970]
[568.91204834 99.30432129]
[559.47937012 110.97335052]
[549.35290527 122.04563141]
[538.57025146 132.47994995]
[527.17150879 142.23751831]
[515.19915771 151.28202820]
[502.69766235 159.57981873]
[489.71353149 167.10003662]
[476.29510498 173.81469727]
[462.49227905 179.69882202]
[448.35641479 184.73052979]
[433.94009399 188.89109802]
[419.29693604 192.16503906]
[404.48141479 194.54019165]
[389.54867554 196.00770569]
[374.55419922 196.56213379]
[359.55386353 196.20140076]
[344.60339355 194.92684937]
[329.75842285 192.74324036]
[315.07421875 189.65867615]
[300.60534668 185.68463135]
[286.40570068 180.83590698]
[272.52801514 175.13052368]
[259.02398682 168.58972168]
[245.94384766 161.23782349]
[233.33622742 153.10217285]
[221.24804688 144.21304321]
[209.72425842 134.60350037]
[198.80775452 124.30929565]
[188.53912354 113.36872101]
[178.95657349 101.82247925]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 50]
[2 49]
[3 48]
[4 47]
[5 46]
[6 19]
[7 18]
[8 17]
[9 16]
[10 15]
[20 41]
[21 40]
[22 39]
[23 38]
[24 37]
[25 36]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
