%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:53 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGGCAUAAUGAAUUAACUAGAAAUAACUUUGCAAGGAGAGCCAAAGCUAAGACCCCCGAAACxxxxxxxxxxAAUUAAUUAACCACUCAUUCAUCGACCUCCCCACCCCAUCCAACAUCUCCGCAUGAUGAACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[86.33235931 273.12072754]
[86.33235931 258.12072754]
[86.33235931 243.12071228]
[86.33235931 228.12071228]
[86.33235931 213.12071228]
[86.33235931 198.12071228]
[86.33235931 183.12071228]
[86.33235931 168.12071228]
[86.33235931 153.12071228]
[86.33235931 138.12071228]
[73.39430237 130.53080750]
[60.30114746 137.84991455]
[47.20799255 145.16902161]
[51.20909119 159.70361328]
[51.61486053 174.77342224]
[48.40171814 189.50227356]
[41.75646210 203.03385925]
[32.06544876 214.58149719]
[19.89209366 223.47378540]
[5.94414377 229.19375610]
[-8.96748734 231.40885925]
[-23.97585678 229.99031067]
[-38.20839691 225.02058411]
[-50.83764648 216.78860474]
[-61.12936020 205.77297974]
[-68.48519135 192.61413574]
[-72.47747040 178.07710266]
[-72.87410736 163.00706482]
[-69.65203094 148.28016663]
[-62.99857712 134.75259399]
[-53.30056381 123.21084595]
[-41.12182236 114.32593536]
[-27.17040634 108.61441803]
[-12.25743389 106.40835571]
[2.75007224 107.83600616]
[16.97959709 112.81436157]
[29.60385513 121.05399323]
[39.88888550 132.07586670]
[52.98204041 124.75675964]
[66.07519531 117.43765259]
[65.25665283 89.96051788]
[82.61767578 70.56348419]
[107.11272430 68.58887482]
[113.74122620 55.13290405]
[120.36972809 41.67694092]
[126.99822235 28.22097588]
[133.62672424 14.76500988]
[120.72544098 7.09747267]
[108.46553040 -1.55865645]
[96.92256165 -11.15000916]
[86.16771698 -21.61745071]
[76.26729584 -32.89644623]
[67.28234100 -44.91745377]
[59.26824188 -57.60636139]
[52.27442169 -70.88493347]
[46.34398651 -84.67131042]
[41.51351166 -98.88048553]
[37.81277084 -113.42485046]
[35.26458740 -128.21473694]
[33.88466644 -143.15896606]
[33.68151474 -158.16539001]
[34.65639114 -173.14149475]
[36.80327988 -187.99494934]
[40.10894394 -202.63415527]
[44.55300903 -216.96888733]
[50.10806656 -230.91075134]
[56.73987579 -244.37377930]
[64.40754700 -257.27496338]
[73.06379700 -269.53479004]
[82.65527344 -281.07766724]
[93.12282562 -291.83239746]
[104.40191650 -301.73272705]
[116.42301941 -310.71755981]
[129.11201477 -318.73150635]
[142.39065552 -325.72521973]
[156.17709351 -331.65548706]
[170.38630676 -336.48583984]
[184.93070984 -340.18643188]
[199.72062683 -342.73446655]
[214.66487122 -344.11422729]
[229.67129517 -344.31723022]
[244.64739990 -343.34219360]
[259.50082397 -341.19515991]
[274.14001465 -337.88934326]
[288.47467041 -333.44512939]
[302.41647339 -327.88992310]
[315.87945557 -321.25796509]
[328.78057861 -313.59017944]
[341.04031372 -304.93380737]
[352.58306885 -295.34222412]
[363.33770752 -284.87454224]
[373.23791504 -273.59533691]
[382.22262573 -261.57415771]
[390.23645020 -248.88508606]
[397.23001099 -235.60636902]
[403.16015625 -221.81987000]
[407.99032593 -207.61061096]
[411.69079590 -193.06616211]
[414.23867798 -178.27621460]
[415.61828613 -163.33197021]
[415.82113647 -148.32553101]
[414.84594727 -133.34945679]
[412.69876099 -118.49604797]
[409.39279175 -103.85689545]
[404.94842529 -89.52226257]
[399.39309692 -75.58051300]
[392.76101685 -62.11761856]
[385.09307861 -49.21657562]
[376.43655396 -36.95692825]
[366.84484863 -25.41425514]
[356.37707520 -14.65972900]
[345.09777832 -4.75965214]
[333.07650757 4.22493601]
[320.38735962 12.23864269]
[307.10855103 19.23205948]
[293.32202148 25.16206741]
[279.11270142 29.99210930]
[264.56820679 33.69240189]
[249.77824402 36.24013519]
[234.83396912 37.61959839]
[219.82754517 37.82228851]
[204.85147095 36.84695816]
[189.99807739 34.69961166]
[175.35896301 31.39349747]
[161.02436829 26.94899559]
[147.08268738 21.39350891]
[140.45419312 34.84947205]
[133.82568359 48.30543900]
[127.19718933 61.76140594]
[120.56869507 75.21736908]
[125.89721680 79.95893097]
[130.12744141 85.84759521]
[133.01255798 92.62776947]
[134.36549377 99.99090576]
[134.07020569 107.58949280]
[132.08967590 115.05344391]
[128.47018433 122.00814056]
[123.34143829 128.09317017]
[116.91239166 132.98094177]
[109.46303558 136.39405823]
[101.33235931 138.12071228]
[101.33235931 153.12071228]
[101.33235931 168.12071228]
[101.33235931 183.12071228]
[101.33235931 198.12071228]
[101.33235931 213.12071228]
[101.33235931 228.12071228]
[101.33235931 243.12071228]
[101.33235931 258.12072754]
[101.33235931 273.12072754]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[11 40]
[12 39]
[13 38]
[43 130]
[44 129]
[45 128]
[46 127]
[47 126]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
