%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:52 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCCCACAAACACUUAGUUAACAGCUAAGCACCCUAAUCAACUGGCUUCAAUCUACUUCUCCxxxxxxxxxxUUCUUAUUAUUUGAUCUAGAAAUUGCCCUCCUUUUACCCCUACCAUGAGCCCUACAAACACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[97.94413757 275.10174561]
[97.94413757 260.10174561]
[97.94413757 245.10174561]
[97.94413757 230.10174561]
[97.94413757 215.10174561]
[97.94413757 200.10174561]
[97.94413757 185.10174561]
[97.94413757 170.10174561]
[97.94413757 155.10174561]
[97.94413757 140.10174561]
[82.06716919 133.64060974]
[71.10711670 121.62503815]
[66.64924622 106.89884949]
[68.85256958 92.55735016]
[76.54932404 81.30316162]
[67.53179169 69.31632233]
[58.51426315 57.32949448]
[46.01940536 60.42619324]
[33.30044937 58.95990372]
[21.96209717 53.16473389]
[13.41764164 43.81782913]
[-0.59907162 49.15933990]
[-14.61578465 54.50085449]
[-28.63249779 59.84236526]
[-42.64921188 65.18387604]
[-56.66592407 70.52539062]
[-64.51251221 84.51862335]
[-80.36775208 86.96625519]
[-92.06886292 75.99066925]
[-90.63975525 60.01139450]
[-77.17671204 51.28636551]
[-62.00743484 56.50867844]
[-47.99072266 51.16716385]
[-33.97401047 45.82565308]
[-19.95729637 40.48413849]
[-5.94058418 35.14262772]
[8.07612896 29.80111504]
[7.88183594 20.59251595]
[10.06331348 11.64392948]
[14.47368431 3.55785036]
[20.81600571 -3.12129688]
[28.66325760 -7.94381523]
[25.56493568 -22.62034035]
[22.46661377 -37.29686737]
[19.21578789 -51.94036865]
[15.81280994 -66.54926300]
[12.40983200 -81.15814972]
[9.00685406 -95.76704407]
[5.60387564 -110.37593842]
[-9.37179947 -109.13214874]
[-24.36897469 -110.08218384]
[-39.06798553 -113.20579529]
[-53.15552139 -118.43639374]
[-66.33130646 -125.66249847]
[-78.31449890 -134.73008728]
[-88.84967041 -145.44586182]
[-97.71226501 -157.58143616]
[-104.71337891 -170.87814331]
[-109.70378876 -185.05255127]
[-112.57711029 -199.80252075]
[-113.27210236 -214.81367493]
[-111.77396393 -229.76605225]
[-108.11460876 -244.34092712]
[-102.37204742 -258.22763062]
[-94.66868591 -271.13018799]
[-85.16870880 -282.77359009]
[-74.07462311 -292.90960693]
[-61.62289429 -301.32223511]
[-48.07892609 -307.83215332]
[-33.73141479 -312.30056763]
[-18.88618088 -314.63226318]
[-3.85964561 -314.77752686]
[11.02789688 -312.73330688]
[25.45911789 -308.54309082]
[39.12641525 -302.29626465]
[51.73846817 -294.12597656]
[63.02645111 -284.20632935]
[72.74976349 -272.74877930]
[80.70114899 -259.99758911]
[86.71112061 -246.22448730]
[90.65157318 -231.72308350]
[92.43852997 -216.80247498]
[92.03388977 -201.78068542]
[89.44628143 -186.97790527]
[84.73085785 -172.70967102]
[77.98812866 -159.28009033]
[69.36181641 -146.97543335]
[59.03578949 -136.05796814]
[47.23015213 -126.76039886]
[34.19654083 -119.28090668]
[20.21276855 -113.77891541]
[23.61574554 -99.17002106]
[27.01872444 -84.56113434]
[30.42170143 -69.95223999]
[33.82468033 -55.34334564]
[38.43505859 -49.50467682]
[37.14313889 -40.39518738]
[40.24145889 -25.71866226]
[43.33978271 -11.04213715]
[62.60091400 -5.48460913]
[75.87629700 9.68369007]
[78.86502838 29.72965431]
[70.50109863 48.31196213]
[79.51862335 60.29879761]
[88.53615570 72.28562927]
[110.43247223 68.29286957]
[131.48130798 81.00713348]
[139.59420776 106.68391418]
[154.23770142 109.93473816]
[168.88121033 113.18556213]
[177.00852966 100.39015961]
[189.02389526 91.14858246]
[203.47639465 86.57678986]
[218.62080383 87.22686005]
[232.62837219 93.02028656]
[243.80761719 103.25749207]
[250.80859375 116.70227051]
[252.78588867 131.73110962]
[249.50074768 146.52920532]
[241.34985352 159.30961609]
[229.31747437 168.52903748]
[214.85658264 173.07418823]
[199.71339417 172.39620972]
[185.71652222 166.57698059]
[174.55616760 156.31918335]
[167.57998657 142.86152649]
[165.63038635 127.82906342]
[150.98687744 124.57823944]
[136.34338379 121.32741547]
[130.49357605 126.02099609]
[141.78591919 135.89433289]
[153.07827759 145.76766968]
[166.55493164 152.35398865]
[171.15759277 166.63038635]
[164.06561279 179.84794617]
[149.62515259 183.90663147]
[136.68565369 176.31918335]
[133.17671204 161.73564148]
[125.98532867 148.57189941]
[118.79394531 135.40815735]
[112.94413757 140.10174561]
[112.94413757 155.10174561]
[112.94413757 170.10174561]
[112.94413757 185.10174561]
[112.94413757 200.10174561]
[112.94413757 215.10174561]
[112.94413757 230.10174561]
[112.94413757 245.10174561]
[112.94413757 260.10174561]
[112.94413757 275.10174561]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[15 105]
[16 104]
[17 103]
[21 37]
[22 36]
[23 35]
[24 34]
[25 33]
[26 32]
[42 99]
[43 98]
[44 97]
[45 95]
[46 94]
[47 93]
[48 92]
[49 91]
[108 129]
[109 128]
[110 127]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
