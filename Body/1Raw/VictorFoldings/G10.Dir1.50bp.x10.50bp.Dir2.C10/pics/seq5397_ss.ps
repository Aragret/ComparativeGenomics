%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:37 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGACUCAACUUAAACUCCAGCACCACGACCCUACUACUAUCUCGCACCUGAAACAAGCUAACxxxxxxxxxxAUAUGACUAGCUUACACAAUAGCUUUUAUAGUAAAGAUACCUCUUUACGGACUCCACUUACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[99.93363190 279.03939819]
[99.93363190 264.03939819]
[99.93363190 249.03939819]
[99.93363190 234.03939819]
[99.93363190 219.03939819]
[99.93363190 204.03939819]
[99.93363190 189.03939819]
[99.93363190 174.03939819]
[99.93363190 159.03939819]
[99.93363190 144.03939819]
[88.48999786 141.45289612]
[78.39842224 136.02246094]
[70.32913971 128.27336121]
[64.77307129 118.87795258]
[62.01296234 108.59901428]
[62.11150360 98.22857666]
[64.91664124 88.52716827]
[70.08298492 80.16806030]
[77.10705566 73.69057465]
[69.92454529 60.52199554]
[62.74203491 47.35341263]
[55.55952454 34.18482971]
[51.63977051 31.99462700]
[48.93049622 28.95638847]
[47.55047607 25.56855202]
[47.43954468 22.31560516]
[48.37955856 19.60936928]
[42.31654358 5.88931465]
[36.25352859 -7.83073854]
[22.85899162 -7.51093769]
[10.26059628 -11.90950584]
[0.05898819 -20.42719269]
[-6.46397114 -31.94403076]
[-8.50621128 -44.96648788]
[-23.14971161 -48.21731567]
[-37.79321289 -51.46813965]
[-46.82130814 -39.20382690]
[-60.06043625 -31.67751694]
[-75.21684265 -30.19319153]
[-89.66458893 -35.00801849]
[-100.90051270 -45.28779984]
[-106.97792053 -59.25150299]
[-106.84387207 -74.47982788]
[-100.52158356 -88.33438110]
[-89.10643768 -98.41477203]
[-74.57617188 -102.97451019]
[-59.44824600 -101.22360229]
[-46.34365845 -93.46540070]
[-37.53286743 -81.04405212]
[-34.54238892 -66.11164093]
[-19.89888763 -62.86081696]
[-5.25538540 -59.60998917]
[-1.47694850 -66.11272430]
[3.54573417 -71.71046448]
[9.60246086 -76.16896057]
[16.43975639 -79.30161285]
[23.77147675 -80.97731018]
[25.01835060 -95.92539978]
[13.91287518 -104.15142822]
[8.38152981 -116.69803619]
[9.77753067 -130.22953796]
[17.62772942 -141.20614624]
[29.78477669 -146.80990601]
[31.34235764 -161.72882080]
[32.89994049 -176.64773560]
[34.45751953 -191.56665039]
[36.01510239 -206.48556519]
[37.57268143 -221.40446472]
[23.66284752 -227.32121277]
[12.11605549 -237.07637024]
[3.95903778 -249.80250549]
[-0.08288891 -264.36801147]
[0.34968099 -279.47775269]
[5.21828365 -293.78817749]
[14.09000587 -306.02679443]
[26.17597961 -315.10537720]
[40.40153122 -320.21667480]
[55.50173187 -320.90612793]
[70.13388062 -317.11251831]
[82.99689484 -309.17309570]
[92.94701385 -297.79388428]
[99.09947205 -283.98669434]
[100.90719604 -268.97924805]
[98.20944977 -254.10598755]
[91.24610901 -240.68946838]
[80.63635254 -229.92263794]
[67.32359314 -222.76290894]
[52.49159241 -219.84689331]
[50.93401337 -204.92797852]
[49.37643051 -190.00906372]
[47.81885147 -175.09014893]
[46.26126862 -160.17123413]
[44.70368958 -145.25233459]
[57.24217987 -134.70285034]
[61.08315659 -118.60276031]
[54.52758026 -103.22400665]
[39.96643829 -94.67852783]
[38.71956253 -79.73043823]
[55.95603561 -68.94399261]
[64.89521027 -50.56486893]
[62.71675491 -30.13854408]
[49.97358322 -13.89375210]
[56.03659821 -0.17369826]
[62.09960938 13.54635525]
[68.72811127 27.00232124]
[75.91061401 40.17090225]
[83.09312439 53.33948517]
[90.27563477 66.50807190]
[115.51472473 65.38830566]
[136.98579407 82.34230804]
[142.57554626 111.26033020]
[157.07115173 115.11749268]
[171.56674194 118.97464752]
[186.06234741 122.83181000]
[200.55793762 126.68897247]
[215.05354309 130.54612732]
[229.54913330 134.40328979]
[245.23254395 129.61134338]
[257.03799438 140.99392700]
[252.82104492 156.84162903]
[236.91973877 160.85166931]
[225.69197083 148.89888000]
[211.19638062 145.04171753]
[196.70077515 141.18457031]
[182.20518494 137.32740784]
[167.70959473 133.47024536]
[153.21398926 129.61308289]
[138.71839905 125.75592804]
[132.77220154 130.32679749]
[143.64407349 140.66133118]
[154.51593018 150.99586487]
[168.77198792 155.66113281]
[176.37059021 168.59407043]
[173.50648499 183.31809998]
[161.61395264 192.45964050]
[146.64860535 191.44075012]
[136.10482788 180.77168274]
[135.26258850 165.79600525]
[128.07121277 152.63226318]
[120.87982178 139.46853638]
[114.93363190 144.03939819]
[114.93363190 159.03939819]
[114.93363190 174.03939819]
[114.93363190 189.03939819]
[114.93363190 204.03939819]
[114.93363190 219.03939819]
[114.93363190 234.03939819]
[114.93363190 249.03939819]
[114.93363190 264.03939819]
[114.93363190 279.03939819]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[19 108]
[20 107]
[21 106]
[22 105]
[27 104]
[28 103]
[29 102]
[34 52]
[35 51]
[36 50]
[57 98]
[58 97]
[63 93]
[64 92]
[65 91]
[66 90]
[67 89]
[68 88]
[111 128]
[112 127]
[113 126]
[114 125]
[115 124]
[116 123]
[117 122]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
