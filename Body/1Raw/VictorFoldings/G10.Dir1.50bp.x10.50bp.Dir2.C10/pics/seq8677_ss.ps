%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:31 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCACCCUAGCAAUAUCAACCAUUAACCUUCCCUCUACACUUAUCAUCUUCACAAUUCUAAUxxxxxxxxxxUGAGGCAACCAGCCAGAACGCCUGAACGCAGGCACAUACUUCCUAUUCUACACCCUAGUACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[89.42828369 257.79141235]
[89.42828369 242.79141235]
[89.42828369 227.79141235]
[89.42828369 212.79141235]
[89.42828369 197.79141235]
[89.42828369 182.79141235]
[89.42828369 167.79141235]
[89.42828369 152.79141235]
[89.42828369 137.79141235]
[89.42828369 122.79140472]
[80.91719055 110.43983459]
[66.90048218 105.09832001]
[60.31995010 118.58916473]
[52.55658722 131.43582153]
[43.67290497 143.53483582]
[33.74042511 154.78881836]
[22.83912277 165.10714722]
[11.05677128 174.40673828]
[-1.51176441 182.61271667]
[-14.76528835 189.65902710]
[-28.59708786 195.48890686]
[-42.89579391 200.05543518]
[-57.54628372 203.32185364]
[-72.43059540 205.26184082]
[-87.42888641 205.85978699]
[-102.42039490 205.11087036]
[-117.28441620 203.02113342]
[-131.90127563 199.60739136]
[-146.15328979 194.89714050]
[-159.92568970 188.92828369]
[-173.10760498 181.74891663]
[-185.59288025 173.41680908]
[-197.28102112 163.99906921]
[-208.07788086 153.57151794]
[-217.89656067 142.21810913]
[-226.65797424 130.03025818]
[-234.29161072 117.10609436]
[-240.73599243 103.54968262]
[-245.93922424 89.47016907]
[-249.85942078 74.98092651]
[-252.46501160 60.19859695]
[-253.73503113 45.24221802]
[-253.65924072 30.23220444]
[-252.23825073 15.28941250]
[-249.48352051 0.53415388]
[-245.41720581 -13.91476822]
[-240.07205200 -27.94101715]
[-233.49111938 -41.43165970]
[-225.72735596 -54.27807236]
[-216.84330750 -66.37683105]
[-206.91049194 -77.63050842]
[-196.00886536 -87.94850159]
[-184.22622681 -97.24773407]
[-171.65744019 -105.45333099]
[-158.40370178 -112.49922943]
[-144.57173157 -118.32868958]
[-130.27288818 -122.89478302]
[-115.62229156 -126.16074371]
[-100.73792267 -128.10028076]
[-85.73961639 -128.69776917]
[-70.74813080 -127.94839478]
[-55.88417053 -125.85820007]
[-41.26741409 -122.44401550]
[-27.01554680 -117.73332214]
[-13.24332523 -111.76406097]
[-0.06163298 -104.58428192]
[12.42339611 -96.25179291]
[24.11123848 -86.83369446]
[34.90778732 -76.40581512]
[44.72611237 -65.05210114]
[53.48716354 -52.86398697]
[61.12040329 -39.93959045]
[67.56436157 -26.38298416]
[72.76716614 -12.30331612]
[76.68692017 2.18605161]
[79.29206848 16.96845627]
[80.56162262 31.92487526]
[80.48537445 46.93488693]
[79.06393433 61.87763596]
[76.30874634 76.63281250]
[72.24199677 91.08160400]
[86.25870514 96.42311859]
[86.31678772 82.99319458]
[98.85440826 70.56548309]
[106.84432220 57.87055206]
[114.83424377 45.17562103]
[112.69232941 29.27619553]
[123.89115906 17.78856468]
[139.83996582 19.52505875]
[148.30416870 33.15358734]
[142.79077148 48.21950912]
[127.52916718 53.16553879]
[119.53925323 65.86046600]
[111.54933929 78.55539703]
[119.13924408 91.49345398]
[134.11895752 90.71360779]
[149.09867859 89.93376160]
[164.07838440 89.15391541]
[161.86019897 68.30055237]
[180.94131470 47.52346420]
[195.35353088 43.36557770]
[209.76574707 39.20768738]
[224.17796326 35.04980087]
[238.59017944 30.89191437]
[249.56686401 18.70812988]
[265.54815674 22.38650513]
[270.09387207 38.14304352]
[258.52777100 49.76876831]
[242.74807739 45.30413055]
[228.33586121 49.46201706]
[213.92364502 53.61990356]
[199.51142883 57.77779388]
[185.09921265 61.93568039]
[184.94317627 69.43405914]
[197.77473450 77.20265961]
[184.63111877 84.43080902]
[184.47509766 91.92918396]
[198.70187378 96.68299866]
[213.64077759 90.83419037]
[227.45512390 98.99162292]
[229.54769897 114.89762115]
[218.31329346 126.35045624]
[202.36994934 124.56449890]
[193.94805908 110.90978241]
[179.72128296 106.15596771]
[164.85823059 104.13362885]
[149.87852478 104.91347504]
[134.89880371 105.69332123]
[119.91909027 106.47316742]
[133.43890381 112.97044373]
[148.43748474 113.17720032]
[161.39071655 120.74115753]
[168.94161987 133.70202637]
[169.13323975 148.70080566]
[161.91593933 161.85034180]
[149.16017151 169.74276733]
[134.17176819 170.33262634]
[120.83519745 163.46707153]
[112.60681915 150.92538452]
[111.61966705 135.95513916]
[104.42828369 122.79140472]
[104.42828369 137.79141235]
[104.42828369 152.79141235]
[104.42828369 167.79141235]
[104.42828369 182.79141235]
[104.42828369 197.79141235]
[104.42828369 212.79141235]
[104.42828369 227.79141235]
[104.42828369 242.79141235]
[104.42828369 257.79141235]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[11 82]
[12 81]
[84 94]
[85 93]
[86 92]
[95 129]
[96 128]
[97 127]
[98 126]
[100 113]
[101 112]
[102 111]
[103 110]
[104 109]
[117 125]
[118 124]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
