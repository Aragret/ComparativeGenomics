%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:13 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGUAAAAUAAAAUCCCCACUAUGCACAUUUUAUUUCUCCAACAUACUCGGAUUCUACCCUAGxxxxxxxxxxCAAUAGCCAUCGCUGUAGUAUAUCCAAAGACAACCAUCAUUCCCCCUAAAUAAAUUAAAACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[117.48493958 257.68756104]
[117.17288208 242.69081116]
[116.86083221 227.69406128]
[116.54877472 212.69731140]
[116.23671722 197.70054626]
[115.92465973 182.70379639]
[115.61260223 167.70704651]
[115.30054474 152.71029663]
[114.98849487 137.71353149]
[110.23468018 123.48676300]
[101.46846771 111.31492615]
[95.72425842 114.82340240]
[87.61153412 114.98866272]
[73.82914734 120.90862274]
[60.04676819 126.82859039]
[46.26438904 132.74855042]
[32.48200607 138.66851807]
[18.69962502 144.58847046]
[4.91724300 150.50843811]
[-8.86513805 156.42840576]
[-22.64752007 162.34837341]
[-22.80598259 177.57646179]
[-29.15047264 191.42085266]
[-40.58176804 201.48294067]
[-55.11932373 206.01937866]
[-70.24442291 204.24421692]
[-83.33655548 196.46501160]
[-92.12742615 184.02955627]
[-95.09395599 169.09237671]
[-91.72219086 154.24140930]
[-82.59629822 142.04969788]
[-69.29740143 134.62950134]
[-54.12960815 133.26644897]
[-39.72083282 138.19667053]
[-28.56748199 148.56597900]
[-14.78510189 142.64602661]
[-1.00272012 136.72605896]
[12.77966118 130.80609131]
[26.56204224 124.88613129]
[40.34442520 118.96617126]
[54.12680435 113.04620361]
[67.90918732 107.12624359]
[81.69156647 101.20628357]
[67.08961487 104.63890839]
[52.63677216 100.62451935]
[41.89682007 90.15296173]
[37.51800537 75.80632782]
[40.58006287 61.12219238]
[50.32794571 49.72136688]
[64.35802460 44.41506577]
[79.21076965 46.51171112]
[91.22380066 55.49431229]
[97.43494415 69.14794922]
[96.31304932 84.10475159]
[100.01921082 69.56980896]
[94.61003876 51.99936295]
[107.27764893 39.89433670]
[110.68062592 25.28544426]
[114.08360291 10.67655182]
[117.48657990 -3.93234062]
[120.73740387 -18.57584190]
[123.68289185 -33.28380203]
[126.47521210 -48.02161026]
[129.26753235 -62.75941467]
[132.05986023 -77.49722290]
[121.97994995 -66.38887024]
[109.11633301 -58.67348099]
[94.57019806 -55.01152420]
[79.58676910 -55.71648788]
[65.44872284 -60.72801971]
[53.36633301 -69.61711121]
[44.37392807 -81.62280273]
[39.24130630 -95.71734619]
[38.40784073 -110.69417572]
[41.94488907 -125.27118683]
[49.54965591 -138.20051575]
[60.57113266 -148.37533569]
[74.06582642 -154.92463684]
[88.87850952 -157.28776550]
[103.74114227 -155.26240540]
[117.38140869 -149.02195740]
[128.63162231 -139.10063171]
[136.52870178 -126.34774780]
[140.39662170 -111.85501862]
[139.90365601 -96.85974121]
[148.15594482 -109.38570404]
[156.40823364 -121.91166687]
[156.83370972 -138.30529785]
[171.37094116 -145.89482117]
[185.06529236 -136.87278748]
[183.82916260 -120.52028656]
[168.93420410 -113.65937805]
[160.68191528 -101.13341522]
[152.42962646 -88.60745239]
[146.79766846 -74.70489502]
[144.00534058 -59.96709061]
[141.21301270 -45.22928619]
[138.42070007 -30.49147987]
[140.27767944 -23.28750420]
[135.41392517 -15.47751999]
[137.12063599 -8.23647118]
[132.09547424 -0.52936262]
[128.69248962 14.07952976]
[125.28952026 28.68842316]
[121.88653564 43.29731369]
[128.01882935 53.77120209]
[125.25652313 66.00184631]
[114.55414581 73.27597046]
[110.84798431 87.81091309]
[113.64030457 102.54871368]
[122.40651703 114.72055054]
[121.44497681 99.75140381]
[123.45936584 84.88727570]
[128.37030029 70.71396637]
[135.98423767 57.79003906]
[146.00112915 46.62482452]
[158.02618408 37.65834045]
[171.58552551 31.24394989]
[186.14476013 27.63444710]
[201.13014221 26.97208023]
[215.95106506 29.28295326]
[230.02345276 34.47599411]
[242.79273987 42.34654999]
[253.75564575 52.58443832]
[262.48016357 64.78619385]
[268.62246704 78.47093964]
[271.94046021 93.09936523]
[272.30337524 108.09497833]
[269.69696045 122.86679077]
[264.22387695 136.83265686]
[256.09985352 149.44218445]
[245.64503479 160.19844055]
[233.27145386 168.67750549]
[219.46676636 174.54524231]
[204.77497864 177.57038879]
[189.77511597 177.63374329]
[175.05830383 174.73278809]
[161.20454407 168.98187256]
[148.75978088 160.60760498]
[138.21449280 149.94004822]
[129.98524475 137.40148926]
[130.29730225 152.39823914]
[130.60935974 167.39498901]
[130.92141724 182.39173889]
[131.23347473 197.38850403]
[131.54553223 212.38525391]
[131.85758972 227.38200378]
[132.16963196 242.37875366]
[132.48168945 257.37551880]
[135.07269287 276.58322144]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 149]
[2 148]
[3 147]
[4 146]
[5 145]
[6 144]
[7 143]
[8 142]
[9 141]
[10 111]
[11 110]
[13 43]
[14 42]
[15 41]
[16 40]
[17 39]
[18 38]
[19 37]
[20 36]
[21 35]
[54 109]
[55 108]
[57 105]
[58 104]
[59 103]
[60 102]
[61 100]
[62 98]
[63 97]
[64 96]
[65 95]
[85 94]
[86 93]
[87 92]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
