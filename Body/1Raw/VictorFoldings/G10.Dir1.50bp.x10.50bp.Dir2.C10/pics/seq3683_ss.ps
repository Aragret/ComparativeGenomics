%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:27 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCUAGGCCUCCUAUUUAUUCUAGCCACCUCUAGCCUAGCCGUUUACUCAAUCCUCUGAUCAGxxxxxxxxxxACCCACAACAAAUAGCCCUUCUAAACGCUAAUCCAAGCCUCACCCCACUACUAGGCCUCCUCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[77.53620911 251.09509277]
[77.22823334 236.09825134]
[76.92025757 221.10142517]
[76.61228180 206.10458374]
[76.30429840 191.10774231]
[75.99632263 176.11090088]
[75.68834686 161.11405945]
[75.38037109 146.11723328]
[75.07238770 131.12039185]
[62.56835556 122.83491516]
[48.63763809 128.39685059]
[34.70692062 133.95878601]
[20.77620697 139.52072144]
[6.84548998 145.08267212]
[-7.08522606 150.64460754]
[-21.01594162 156.20654297]
[-18.79888344 171.11228943]
[-20.07968712 186.12748718]
[-24.78928566 200.44239807]
[-32.67369461 213.28500366]
[-43.30771637 223.96275330]
[-56.11787415 231.89979553]
[-70.41333008 236.66809082]
[-85.42314911 238.01049805]
[-100.33786774 235.85462952]
[-114.35316467 230.31672668]
[-126.71319580 221.69544983]
[-136.75141907 210.45574951]
[-143.92646790 197.20375061]
[-147.85140991 182.65412903]
[-148.31457520 167.59152222]
[-145.29098511 152.82823181]
[-138.94371033 139.16043091]
[-129.61503601 127.32521057]
[-117.80805206 117.96082306]
[-104.15949249 111.57227325]
[-89.40541077 108.50408936]
[-74.34146881 108.92174530]
[-59.78005219 112.80271149]
[-46.50643539 119.93768311]
[-35.23645401 129.94189453]
[-26.57787895 142.27581787]
[-12.64716339 136.71388245]
[1.28355277 131.15194702]
[15.21426868 125.59001160]
[29.14498520 120.02807617]
[43.07570267 114.46614075]
[57.00641632 108.90419769]
[92.83995056 79.19933319]
[94.07055664 64.24990082]
[95.30117035 49.30046463]
[96.53178406 34.35103226]
[97.76239777 19.40159607]
[98.99301147 4.45216227]
[84.29577637 1.35463488]
[70.10268402 -3.56056690]
[56.63756180 -10.21592331]
[44.11278152 -18.50646973]
[32.72587967 -28.30145073]
[22.65643883 -39.44638824]
[14.06327248 -51.76550674]
[7.08190536 -65.06452179]
[1.82244396 -79.13368225]
[-1.63216233 -93.75109863]
[-3.22742939 -108.68624115]
[-2.93819737 -123.70355225]
[-0.76902831 -138.56617737]
[3.24586725 -153.03974915]
[9.04316807 -166.89595032]
[16.53144455 -179.91627502]
[25.59259224 -191.89538574]
[36.08370590 -202.64431763]
[47.83932495 -211.99357605]
[60.67404556 -219.79570007]
[74.38545227 -225.92764282]
[88.75728607 -230.29269409]
[103.56288910 -232.82199097]
[118.56874847 -233.47567749]
[133.53820801 -232.24340820]
[148.23518372 -229.14465332]
[162.42785645 -224.22825623]
[175.89242554 -217.57176208]
[188.41650391 -209.28016663]
[199.80258179 -199.48422241]
[209.87107849 -188.33843994]
[218.46321106 -176.01858521]
[225.44346619 -162.71899414]
[230.70173645 -148.64938354]
[234.15512085 -134.03167725]
[235.74913025 -119.09640503]
[235.45863342 -104.07912445]
[233.28820801 -89.21666718]
[229.27209473 -74.74344635]
[223.47363281 -60.88772583]
[215.98425293 -47.86803055]
[206.92210388 -35.88969040]
[196.43008423 -25.14163208]
[184.67367554 -15.79336262]
[171.83830261 -7.99231815]
[158.12637329 -1.86153340]
[143.75418091 2.50230098]
[128.94836426 5.03036070]
[113.94244385 5.68277502]
[112.71183014 20.63220978]
[111.48121643 35.58164215]
[110.25061035 50.53107834]
[109.01999664 65.48051453]
[107.78938293 80.42994690]
[110.62606812 65.70061493]
[121.24884033 55.11020660]
[135.98675537 52.31847382]
[149.74679565 58.29016495]
[157.77388000 70.96162415]
[157.29406738 85.95394897]
[148.47315979 98.08620453]
[134.35942078 103.16580963]
[119.82987976 99.43722534]
[133.87185669 104.71195984]
[145.68707275 94.89891052]
[160.82859802 92.32398987]
[175.22338867 97.67984009]
[184.99935913 109.52576447]
[187.52680969 124.67527771]
[182.12586975 139.05322266]
[170.24935913 148.79200745]
[155.09199524 151.27195740]
[140.73104858 145.82597351]
[131.02954102 133.91899109]
[128.59710693 118.75393677]
[114.55513763 113.47919464]
[108.43366241 117.81250000]
[118.22780609 129.17359924]
[128.02195740 140.53471375]
[137.81610107 151.89581299]
[149.79405212 160.92512512]
[149.56938171 175.92344666]
[137.32635498 184.58995056]
[123.10604095 179.81683350]
[118.57113647 165.51904297]
[111.11099243 152.50573730]
[103.65084839 139.49241638]
[96.19070435 126.47911072]
[90.06922913 130.81240845]
[90.37720490 145.80924988]
[90.68518066 160.80609131]
[90.99316406 175.80293274]
[91.30113983 190.79975891]
[91.60911560 205.79660034]
[91.91709137 220.79344177]
[92.22507477 235.79028320]
[92.53305054 250.78710938]
[95.11882782 269.99554443]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 151]
[2 150]
[3 149]
[4 148]
[5 147]
[6 146]
[7 145]
[8 144]
[9 143]
[10 48]
[11 47]
[12 46]
[13 45]
[14 44]
[15 43]
[16 42]
[49 108]
[50 107]
[51 106]
[52 105]
[53 104]
[54 103]
[117 130]
[118 129]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
