%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:14 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGACCCCCCACAGUUUAUGUAGCUUACCUCCUCAAAGCAAUACACUGAAAAUGUUUAGACGGxxxxxxxxxxCUACAACCCUUCGCUGACGCCAUAAAACUCUUCACCAAAGAGCCCCUAAAACCCGCCACACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[109.10639191 147.74391174]
[103.61936188 161.70429993]
[98.13233185 175.66468811]
[92.64530182 189.62507629]
[87.15826416 203.58546448]
[81.67123413 217.54586792]
[86.73546600 232.76864624]
[77.87086487 246.14019775]
[61.87758636 247.40299988]
[51.02431107 235.58834839]
[53.63674545 219.75942993]
[67.71084595 212.05883789]
[73.19787598 198.09843445]
[78.68490601 184.13804626]
[84.17194366 170.17765808]
[89.65897369 156.21726990]
[95.14600372 142.25688171]
[83.75064087 121.92363739]
[88.95255280 104.79499054]
[73.95986176 105.26303101]
[58.96716309 105.73107147]
[55.24396133 108.24090576]
[51.31013489 109.28783417]
[47.66408920 108.99076843]
[44.71104431 107.62201691]
[42.72008896 105.56205750]
[27.74037361 104.78221130]
[12.76065922 104.00236511]
[-2.21905541 103.22251892]
[-17.21175194 102.75447845]
[-32.21094131 102.59844208]
[-47.21012878 102.44240570]
[-62.20931625 102.28636932]
[-70.59842682 115.23342896]
[-84.66490173 121.56887054]
[-99.92018127 119.27107239]
[-111.49636841 109.07324982]
[-115.69953918 94.22949982]
[-111.18846893 79.47640991]
[-99.40264130 69.52162170]
[-84.10285187 67.54168701]
[-70.17122650 74.16839600]
[-62.05327988 87.28717804]
[-47.05409241 87.44321442]
[-32.05490494 87.59925079]
[-17.05571556 87.75528717]
[-13.03746891 85.06656647]
[-7.27472401 84.91800690]
[-1.43921018 88.24280548]
[13.54050446 89.02265167]
[28.52021790 89.80249786]
[43.49993134 90.58234406]
[58.49912262 90.73838043]
[73.49181366 90.27033234]
[88.48451233 89.80229187]
[75.10279083 83.02515411]
[61.72107315 76.24802399]
[46.74386978 75.42136383]
[32.11857986 72.08956146]
[18.26118851 66.34737396]
[5.56583595 58.35813141]
[-5.60638714 48.34906387]
[-14.93771362 36.60485840]
[-22.16273308 23.45955276]
[-27.07595062 9.28703308]
[-29.53761673 -5.50959492]
[-29.47771645 -20.50947571]
[-26.89795494 -35.28597260]
[-21.87170601 -49.41880035]
[-14.54193020 -62.50598145]
[-5.11710644 -74.17528534]
[6.13469839 -84.09481049]
[18.89345169 -91.98240662]
[32.79626083 -97.61373901]
[47.44769287 -100.82862854]
[62.43102264 -101.53564453]
[77.32008362 -99.71466827]
[91.69138336 -95.41750336]
[105.13617706 -88.76636505]
[117.27204132 -79.95043182]
[127.75381470 -69.22045135]
[136.28335571 -56.88161850]
[142.61807251 -43.28487778]
[146.57778931 -28.81695747]
[148.04986572 -13.88936710]
[146.99244690 1.07331538]
[143.43559265 15.64550972]
[137.48049927 29.41274261]
[129.29650879 41.98343658]
[119.12233734 52.99464035]
[114.23033905 67.17449951]
[109.33834839 81.35435486]
[120.42966461 71.25570679]
[124.89243317 55.47547531]
[140.85415649 51.71308517]
[151.89477539 63.83895874]
[146.65664673 79.37904358]
[130.52830505 82.34702301]
[119.43699646 92.44567108]
[121.88777161 99.53395081]
[136.06433105 94.63240051]
[150.24089050 89.73085022]
[164.41752625 84.82952118]
[169.31863403 99.00622559]
[155.14244080 103.90740967]
[140.96588135 108.80895996]
[126.78932190 113.71051025]
[129.24009705 120.79878998]
[144.20034790 121.89009857]
[159.16059875 122.98140717]
[174.12084961 124.07272339]
[189.08110046 125.16403198]
[202.11172485 115.80549622]
[217.51327515 120.29679871]
[223.47099304 135.19261169]
[215.41462708 149.06613159]
[199.52433777 151.27478027]
[187.98977661 140.12428284]
[173.02954102 139.03297424]
[158.06929016 137.94166565]
[143.10903931 136.85034180]
[128.14878845 135.75903320]
[140.75444031 143.88908386]
[153.36009216 152.01911926]
[165.96574402 160.14915466]
[178.57139587 168.27920532]
[193.39874268 170.54847717]
[207.31138611 176.15547180]
[219.56872559 184.80172729]
[229.51828003 196.02697754]
[236.63043213 209.23368835]
[240.52658081 223.71885681]
[240.99932861 238.71141052]
[238.02351379 253.41326904]
[231.75753784 267.04180908]
[222.53495789 278.87161255]
[210.84669495 288.27291870]
[197.31495667 294.74530029]
[182.66001892 297.94421387]
[167.66201782 297.69940186]
[153.11930847 294.02383423]
[139.80603027 287.11325073]
[128.43084717 277.33544922]
[119.59930420 265.21093750]
[113.78150177 251.38511658]
[111.28713989 236.59396362]
[112.24898529 221.62483215]
[116.61697388 207.27198792]
[114.73932648 192.38996887]
[112.86167908 177.50794983]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 17]
[2 16]
[3 15]
[4 14]
[5 13]
[6 12]
[19 55]
[20 54]
[21 53]
[26 52]
[27 51]
[28 50]
[29 49]
[30 46]
[31 45]
[32 44]
[33 43]
[92 99]
[93 98]
[108 122]
[109 121]
[110 120]
[111 119]
[112 118]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
