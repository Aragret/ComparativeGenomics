%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:03 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGAGCUACCUAAGAACAGCUAAAAGAGCACACCCGUCUAUGUAGCAAAAUAGUGGGAAGAUUxxxxxxxxxxUCACAGCCCUCGCUGUCACUUUCCUAGGACUUCUAACAGCCCUAGACCUCAACUACCUAACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[102.56262207 275.28784180]
[102.56262207 260.28784180]
[102.56262207 245.28784180]
[102.56262207 230.28784180]
[102.56262207 215.28784180]
[102.56262207 200.28784180]
[102.56262207 185.28784180]
[102.56262207 170.28784180]
[102.56262207 155.28784180]
[102.56262207 140.28784180]
[82.20627594 130.92214966]
[72.27806091 113.83679962]
[57.63455582 117.08762360]
[42.99105453 120.33845520]
[28.34755325 123.58927917]
[13.70405197 126.84010315]
[7.80280161 138.99052429]
[-3.85898781 145.41163635]
[-16.89443016 143.94482422]
[-26.54622650 135.35182190]
[-41.25418854 138.29730225]
[-55.96215057 141.24278259]
[-63.23987198 159.78070068]
[-80.05975342 170.17556763]
[-99.61121368 168.41934204]
[-114.09737396 155.38407898]
[-128.50958252 159.54196167]
[-142.92179871 163.69984436]
[-151.90441895 176.99241638]
[-167.90824890 178.11360168]
[-178.65652466 166.20335388]
[-175.90408325 150.39816284]
[-161.76237488 142.82244873]
[-147.07969666 149.28762817]
[-132.66748047 145.12974548]
[-118.25525665 140.97186279]
[-116.93412018 130.57092285]
[-112.18043518 121.18292999]
[-104.52301025 113.90928650]
[-94.83295441 109.61302185]
[-84.22462463 108.81642914]
[-73.92751312 111.63770294]
[-65.14372253 117.77423096]
[-58.90763092 126.53482819]
[-44.19966888 123.58934021]
[-29.49170876 120.64385986]
[-20.80455017 106.27754211]
[-4.09294844 102.53501892]
[10.45322609 112.19660187]
[25.09672737 108.94577789]
[39.74023056 105.69495392]
[54.38373184 102.44412231]
[69.02722931 99.19329834]
[72.92941284 84.92862701]
[82.99906921 74.09765625]
[96.94203949 69.16799927]
[99.11888123 54.32679749]
[97.26126862 45.31563187]
[101.49848175 39.20075607]
[103.98360443 24.40805054]
[106.46871948 9.61534309]
[108.95383453 -5.17736387]
[99.13864136 6.16555977]
[86.56876373 14.35080433]
[72.22517395 18.73958588]
[57.22725677 18.98940277]
[42.74545670 15.08075523]
[29.90995216 7.31867981]
[19.72243500 -3.69106531]
[12.97794628 -17.08926964]
[10.20283413 -31.83032608]
[11.61366844 -46.76383209]
[17.10034752 -60.72435760]
[26.23468590 -72.62242126]
[38.30383301 -81.52947998]
[52.36590195 -86.75041962]
[67.32347870 -87.87779999]
[82.00925446 -84.82363129]
[95.27714539 -77.82627106]
[106.09171295 -67.43179321]
[113.60897827 -54.45139694]
[117.24227905 -39.89807510]
[116.70761108 -24.90492439]
[124.95989990 -37.43088531]
[133.21218872 -49.95684814]
[141.46447754 -62.48281097]
[149.71676636 -75.00877380]
[150.14224243 -91.40239716]
[164.67947388 -98.99192047]
[178.37380981 -89.96988678]
[177.13769531 -73.61739349]
[162.24273682 -66.75648499]
[153.99044800 -54.23052216]
[145.73815918 -41.70455933]
[137.48587036 -29.17859650]
[129.23358154 -16.65263557]
[123.74654388 -2.69224548]
[121.26142883 12.10046196]
[118.77630615 26.89316940]
[116.29119110 41.68587494]
[113.96008301 56.50363541]
[111.78324890 71.34484100]
[130.73538208 81.88557434]
[140.10012817 104.65370941]
[155.07983398 105.43355560]
[170.05955505 106.21340179]
[185.03926086 106.99324799]
[200.01898193 107.77309418]
[207.30215454 94.35973358]
[219.68891907 85.44172668]
[234.71987915 82.78975677]
[249.41062927 86.93036652]
[260.84429932 97.04144287]
[266.75073242 111.11541748]
[265.95721436 126.35789490]
[258.62127686 139.74246216]
[246.19949341 148.61161804]
[231.15820312 151.20437622]
[216.48387146 147.00595093]
[205.09010315 136.84992981]
[199.23913574 122.75280762]
[184.25941467 121.97296143]
[169.27970886 121.19311523]
[154.29998779 120.41326904]
[139.32028198 119.63342285]
[133.88085938 124.79702759]
[146.65292358 132.66307068]
[159.42498779 140.52909851]
[172.19703674 148.39514160]
[186.30462646 153.49180603]
[195.29319763 165.50036621]
[196.20739746 180.47247314]
[188.74662781 193.48542786]
[175.36393738 200.26065063]
[160.45947266 198.57051086]
[148.93368530 188.97068787]
[144.57618713 174.61544800]
[137.38481140 161.45170593]
[130.19342041 148.28797913]
[123.00203705 135.12423706]
[117.56262207 140.28784180]
[117.56262207 155.28784180]
[117.56262207 170.28784180]
[117.56262207 185.28784180]
[117.56262207 200.28784180]
[117.56262207 215.28784180]
[117.56262207 230.28784180]
[117.56262207 245.28784180]
[117.56262207 260.28784180]
[117.56262207 275.28784180]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[12 53]
[13 52]
[14 51]
[15 50]
[16 49]
[20 46]
[21 45]
[22 44]
[26 36]
[27 35]
[28 34]
[56 102]
[57 101]
[59 100]
[60 99]
[61 98]
[62 97]
[83 96]
[84 95]
[85 94]
[86 93]
[87 92]
[104 125]
[105 124]
[106 123]
[107 122]
[108 121]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
