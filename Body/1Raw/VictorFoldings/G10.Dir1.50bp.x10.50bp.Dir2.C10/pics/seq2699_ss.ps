%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:19 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGUUACCAAAAACAUCACCUCUAGCAUCACCAGUAUUAGAGGCACCGCCUGCCCAGUGACACAUGxxxxxxxxxxUUUUACCUGAGUAGGCCUAGAAAUAAACAUGCUAGCUUUUAUUCCAGUUCUAACCAAAAAAAUCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[93.13326263 413.15252686]
[93.13326263 398.15252686]
[93.13326263 383.15252686]
[93.13326263 368.15252686]
[93.13326263 353.15252686]
[93.13326263 338.15252686]
[93.13326263 323.15252686]
[93.13326263 308.15252686]
[93.13326263 293.15252686]
[93.13326263 278.15252686]
[75.58596039 273.15530396]
[60.36343384 263.06869507]
[48.90143585 248.83232117]
[42.28456879 231.77786255]
[41.14363480 213.50430298]
[45.59554291 195.72810364]
[55.23139572 180.12199402]
[69.15402985 168.15748596]
[86.06152344 160.96621704]
[84.26493835 146.07418823]
[82.46834564 131.18217468]
[76.40425873 106.12530518]
[88.93603516 93.20696259]
[80.46263123 80.82950592]
[58.16321564 79.08344269]
[44.05014420 62.22342682]
[29.06890869 62.97349548]
[14.08767319 63.72356415]
[-0.89356142 64.47363281]
[-15.87479591 65.22370148]
[-30.85603142 65.97376251]
[-36.30738068 80.19356537]
[-47.07574081 90.96214294]
[-61.29542923 96.41378021]
[-76.50279999 95.60395050]
[-90.06307983 88.67295837]
[-99.62686920 76.82164001]
[-103.53719330 62.10330963]
[-101.11654663 47.06800461]
[-92.78433990 34.32068253]
[-79.98416901 26.06989670]
[-64.93373871 23.74514580]
[-50.24063110 27.74920273]
[-38.45051575 37.38834381]
[-31.60609818 50.99253082]
[-16.62486458 50.24246216]
[-1.64362884 49.49239731]
[13.33760643 48.74232864]
[28.31884003 47.99225998]
[43.30007553 47.24219131]
[45.11484528 41.80098343]
[47.99542236 36.84089661]
[51.82208252 32.56809235]
[56.43577194 29.16015816]
[61.64474106 26.75873756]
[60.74482727 11.78575802]
[59.84490967 -3.18722296]
[58.94499588 -18.16020393]
[58.04507828 -33.13318253]
[57.14516068 -48.10616684]
[48.59386826 -61.41728592]
[55.55366516 -74.58582306]
[54.65374756 -89.55880737]
[53.75383377 -104.53178406]
[38.90692902 -107.11367798]
[25.05589104 -113.05046844]
[12.94768333 -122.02198029]
[3.23529005 -133.54440308]
[-3.55751324 -146.99633789]
[-7.06439829 -161.65234375]
[-7.09624434 -176.72203064]
[-3.65133286 -191.39273071]
[3.08455563 -204.87324524]
[12.74816322 -216.43661499]
[24.81834412 -225.45922852]
[38.64416885 -231.45449829]
[53.48002625 -234.09912109]
[68.52584076 -233.25045776]
[82.97020721 -228.95429993]
[96.03416443 -221.44232178]
[107.01317596 -211.11964417]
[115.31517792 -198.54292297]
[120.49243927 -184.39045715]
[122.26575470 -169.42541504]
[120.53950500 -154.45489502]
[115.40677643 -140.28620911]
[107.14437103 -127.68344879]
[96.19786835 -117.32628632]
[83.15760040 -109.77326202]
[68.72681427 -105.43170166]
[69.62673187 -90.45872498]
[70.52664185 -75.48574066]
[79.01357269 -63.24559021]
[72.11814117 -49.00608063]
[73.01805878 -34.03310013]
[73.91797638 -19.06011963]
[74.81789398 -4.08713865]
[75.71780396 10.88584232]
[76.61772156 25.85882187]
[89.63230896 32.18198395]
[97.88111115 44.22248459]
[99.09810638 58.89291000]
[92.84008789 72.35610199]
[101.31349182 84.73355865]
[114.88333893 91.12567902]
[129.82257080 89.77681732]
[144.76179504 88.42795563]
[159.70103455 87.07909393]
[174.64025879 85.73023987]
[189.57948303 84.38137817]
[195.95883179 70.40998840]
[208.47848511 61.51315689]
[223.77075195 60.08408356]
[237.72207642 66.50717926]
[246.57962036 79.05467224]
[247.96075439 94.35133362]
[241.49395752 108.28245544]
[228.91876221 117.10063171]
[213.61784363 118.43380737]
[199.70706177 111.92337799]
[190.92834473 99.32060242]
[175.98912048 100.66946411]
[161.04989624 102.01832581]
[146.11065674 103.36718750]
[131.17143250 104.71604919]
[116.23220062 106.06490326]
[111.51424408 111.89507294]
[116.89446259 125.89698029]
[102.07832336 123.55541229]
[97.36036682 129.38557434]
[99.15695953 144.27760315]
[100.95354462 159.16961670]
[112.89225769 160.46730042]
[124.32678223 164.11659241]
[134.79904175 169.96865845]
[143.89001465 177.78648376]
[151.23651123 187.25444031]
[156.54573059 197.99104309]
[159.60685730 209.56436157]
[160.29946899 221.50930786]
[158.59828186 233.34640503]
[154.57403564 244.60101318]
[148.39059448 254.82234192]
[140.29821777 263.60150146]
[130.62350464 270.58792114]
[119.75614166 275.50323486]
[108.13326263 278.15252686]
[108.13326263 293.15252686]
[108.13326263 308.15252686]
[108.13326263 323.15252686]
[108.13326263 338.15252686]
[108.13326263 353.15252686]
[108.13326263 368.15252686]
[108.13326263 383.15252686]
[108.13326263 398.15252686]
[108.13326263 413.15252686]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 156]
[2 155]
[3 154]
[4 153]
[5 152]
[6 151]
[7 150]
[8 149]
[9 148]
[10 147]
[19 132]
[20 131]
[21 130]
[23 104]
[24 103]
[26 50]
[27 49]
[28 48]
[29 47]
[30 46]
[31 45]
[55 99]
[56 98]
[57 97]
[58 96]
[59 95]
[60 94]
[62 92]
[63 91]
[64 90]
[105 126]
[106 125]
[107 124]
[108 123]
[109 122]
[110 121]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
