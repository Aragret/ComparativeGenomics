%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:36 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGAGCCUAACCAGAUUUCAAAUUUUAUCUUUUGGCGGUAUGCACUUUUAACAGUCACCCCCCxxxxxxxxxxUGAGCUAAACCUAGCCCCAAACCCACUCCACCUUACUACCAGACAACCUUAGCCAAACCACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[92.18167877 248.87048340]
[92.18167877 233.87048340]
[92.18167877 218.87048340]
[92.18167877 203.87048340]
[92.18167877 188.87048340]
[92.18167877 173.87048340]
[92.18167877 158.87048340]
[92.18167877 143.87048340]
[92.18167877 128.87048340]
[92.18167877 113.87048340]
[93.05955505 111.79919434]
[94.01074982 109.76563263]
[80.35450745 115.97103882]
[66.69826508 122.17644501]
[57.33523941 134.92965698]
[42.54725266 133.15068054]
[28.89101028 139.35609436]
[24.67615891 144.58509827]
[19.25847054 146.55485535]
[14.53517914 145.52236938]
[0.63262296 151.15432739]
[-13.26993275 156.78628540]
[-27.17248917 162.41824341]
[-29.21647263 177.64051819]
[-38.61045456 189.79159546]
[-52.82749939 195.60289001]
[-68.04329681 193.51119995]
[-80.16486359 184.07917786]
[-85.93157196 169.84399414]
[-83.79220581 154.63482666]
[-74.32222748 142.54287720]
[-60.06903458 136.82081604]
[-44.86664963 139.00785828]
[-32.80444717 148.51568604]
[-18.90188980 142.88372803]
[-4.99933386 137.25177002]
[8.90322208 131.61981201]
[22.68560410 125.69985199]
[36.34184647 119.49444580]
[44.72808456 107.18508911]
[60.49285507 108.52020264]
[74.14910126 102.31479645]
[87.80533600 96.10939026]
[98.46696472 85.55810547]
[104.81409454 71.96714783]
[111.16122437 58.37620163]
[111.96961212 49.21113968]
[117.78437805 44.57064056]
[124.41287231 31.11467552]
[111.54264832 23.39348030]
[99.35399628 14.63583565]
[87.93018341 4.90156460]
[77.34925079 -5.74283695]
[67.68346405 -17.22465515]
[58.99886322 -29.46545792]
[51.35476685 -42.38162231]
[44.80339813 -55.88492203]
[39.38951111 -69.88311005]
[35.15008163 -84.28057098]
[32.11407471 -98.97894287]
[30.30222893 -113.87783051]
[29.72692108 -128.87544250]
[30.39208221 -143.86935425]
[32.29316711 -158.75711060]
[35.41718674 -173.43702698]
[39.74280548 -187.80882263]
[45.24047470 -201.77432251]
[51.87263489 -215.23812866]
[59.59398270 -228.10826111]
[68.35176849 -240.29681396]
[78.08618164 -251.72050476]
[88.73070526 -262.30133057]
[100.21263885 -271.96694946]
[112.45354462 -280.65142822]
[125.36980438 -288.29534912]
[138.87318420 -294.84655762]
[152.87142944 -300.26028442]
[167.26893616 -304.49954224]
[181.96736145 -307.53536987]
[196.86625671 -309.34704590]
[211.86389160 -309.92218018]
[226.85777283 -309.25683594]
[241.74551392 -307.35556030]
[256.42538452 -304.23138428]
[270.79714966 -299.90557861]
[284.76257324 -294.40774536]
[298.22628784 -287.77542114]
[311.09634399 -280.05392456]
[323.28479004 -271.29598999]
[334.70837402 -261.56146240]
[345.28906250 -250.91679382]
[354.95455933 -239.43475342]
[363.63888550 -227.19374084]
[371.28265381 -214.27738953]
[377.83370972 -200.77394104]
[383.24725342 -186.77561951]
[387.48635864 -172.37806702]
[390.52200317 -157.67961121]
[392.33349609 -142.78068542]
[392.90844727 -127.78305054]
[392.24291992 -112.78916931]
[390.34149170 -97.90145111]
[387.21710205 -83.22161102]
[382.89114380 -68.84991455]
[377.39315796 -54.88454437]
[370.76068115 -41.42089844]
[363.03903198 -28.55095100]
[354.28094482 -16.36261368]
[344.54626465 -4.93914938]
[333.90148926 5.64140797]
[322.41931152 15.30678177]
[310.17819214 23.99094582]
[297.26174927 31.63457870]
[283.75823975 38.18546295]
[269.75985718 43.59885406]
[255.36222839 47.83776855]
[240.66375732 50.87324905]
[225.76480103 52.68455887]
[210.76716614 53.25933075]
[195.77328491 52.59363556]
[180.88558960 50.69202042]
[166.20578003 47.56747437]
[151.83413696 43.24134064]
[137.86883545 37.74317551]
[131.24034119 51.19913864]
[124.75217438 64.72332764]
[118.40504456 78.31427765]
[112.05791473 91.90522766]
[122.42282867 81.06233215]
[136.38011169 75.56738281]
[151.35505676 76.43405151]
[164.58523560 83.50245667]
[173.63008118 95.46868896]
[176.82109070 110.12534332]
[173.56962585 124.76869965]
[164.47547913 136.69750977]
[151.21624756 143.71125793]
[136.23785400 144.51612854]
[122.30336761 138.96363831]
[111.98328400 128.07804871]
[107.18167877 113.87048340]
[107.18167877 128.87048340]
[107.18167877 143.87048340]
[107.18167877 158.87048340]
[107.18167877 173.87048340]
[107.18167877 188.87048340]
[107.18167877 203.87048340]
[107.18167877 218.87048340]
[107.18167877 233.87048340]
[107.18167877 248.87048340]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[12 43]
[13 42]
[14 41]
[16 39]
[17 38]
[20 37]
[21 36]
[22 35]
[23 34]
[44 128]
[45 127]
[46 126]
[48 125]
[49 124]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
