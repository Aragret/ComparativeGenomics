%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:54 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGGCCAUCAUGACCCUUGGCCAUAAUAUGAUUUAUCUCCACACUAGCAGAGACCAACCGAACxxxxxxxxxxGUAUUGACUCACCCAUCAACAACCGCUAUGUAUUUCGUACAUUACUGCCAGCCACCAUGACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[67.38905334 537.94372559]
[69.98005676 518.73602295]
[70.29210663 503.73925781]
[70.60416412 488.74252319]
[70.91622162 473.74575806]
[71.22827911 458.74902344]
[71.54033661 443.75225830]
[71.85239410 428.75549316]
[72.16444397 413.75875854]
[72.47650146 398.76199341]
[72.78855896 383.76522827]
[59.65943146 380.52093506]
[47.50152969 374.58251953]
[36.86098862 366.21368408]
[28.21642113 355.78726196]
[21.95742226 343.76882935]
[18.36698914 330.69567871]
[17.60873604 317.15304565]
[19.71943283 303.74768066]
[24.60724449 291.08090210]
[32.05570984 279.72134399]
[41.73333740 270.17974854]
[53.20834732 262.88565063]
[65.96794891 258.16839600]
[79.44123840 256.24200439]
[80.68811035 241.29389954]
[81.93498993 226.34582520]
[83.18186188 211.39773560]
[73.39561462 200.22790527]
[74.44718170 185.05065918]
[86.22946930 174.86167908]
[87.47634125 159.91358948]
[88.72321320 144.96549988]
[89.97009277 130.01741028]
[81.13210297 125.40958405]
[74.16542053 118.28165436]
[69.76098633 109.34056854]
[68.35562134 99.47309875]
[70.08871460 89.65788269]
[57.47758484 81.53633881]
[42.21879578 84.66796875]
[29.54501343 76.25192261]
[26.65351677 61.68569946]
[14.04238892 53.56415558]
[1.43126070 45.44261551]
[-11.17986774 37.32107162]
[-24.80115891 44.41726685]
[-40.14493942 43.73607635]
[-53.08380508 35.46073151]
[-60.13726807 21.81726456]
[-59.40798569 6.47569704]
[-51.09212494 -6.43716717]
[-37.42661667 -13.44783115]
[-22.08740807 -12.67046165]
[-9.20067406 -4.31416798]
[-2.23287892 9.37325001]
[-3.05832529 24.70994568]
[9.55280304 32.83148575]
[22.16393089 40.95302963]
[34.77505875 49.07456970]
[49.23257828 45.68107986]
[62.13774872 53.73782730]
[65.59912872 68.92520905]
[78.21025848 77.04675293]
[94.75660706 68.78860474]
[113.09313965 71.18656158]
[122.35808563 59.38992310]
[131.62303162 47.59328079]
[140.88798523 35.79664230]
[131.11035156 24.36030769]
[123.75420380 11.24030399]
[119.10062408 -3.05820251]
[117.32669830 -17.98508835]
[118.49872589 -32.96643448]
[122.56981659 -47.42660522]
[129.38168335 -60.81034088]
[138.67085266 -72.60411072]
[150.07885742 -82.35580444]
[163.16600037 -89.69203186]
[177.42839050 -94.33248901]
[192.31730652 -96.10059357]
[207.26026917 -94.93025208]
[221.68312073 -90.86832428]
[235.03204346 -84.07270813]
[244.29698181 -95.86935425]
[253.56193542 -107.66599274]
[262.82687378 -119.46263123]
[258.45837402 -134.35208130]
[263.70764160 -148.95429993]
[276.55627441 -157.65443420]
[292.06369019 -157.10710144]
[304.26696777 -147.52276611]
[308.47372437 -132.58680725]
[303.06634521 -118.04240417]
[290.12408447 -109.48216248]
[274.62353516 -110.19768524]
[265.35858154 -98.40103912]
[256.09362793 -86.60440063]
[246.82867432 -74.80776215]
[256.59417725 -63.44955444]
[263.95840454 -50.40017319]
[268.63662720 -36.16023254]
[270.44732666 -21.27644730]
[269.31903076 -6.32062435]
[265.29324341 8.13228607]
[258.52285767 21.52630234]
[249.26643372 33.34579849]
[237.87825012 43.13535309]
[224.79478455 50.51729965]
[210.51795959 55.20628738]
[195.59588623 57.02032471]
[180.60188293 55.88783264]
[166.11231995 51.85046387]
[152.68463135 45.06159210]
[143.41967773 56.85823059]
[134.15472412 68.65486908]
[124.88977814 80.45151520]
[131.31370544 95.40692139]
[129.45527649 111.57718658]
[119.80603790 124.68532562]
[104.91817474 131.26429749]
[103.67130280 146.21237183]
[102.42443085 161.16046143]
[101.17755127 176.10855103]
[111.10896301 188.10876465]
[109.63151550 203.25048828]
[98.12995148 212.64460754]
[96.88307190 227.59269714]
[95.63619995 242.54078674]
[94.38932800 257.48886108]
[110.06287384 262.88906860]
[123.82574463 272.11209106]
[134.76560974 284.54028320]
[142.15890503 299.34362793]
[145.51867676 315.53533936]
[144.62661743 332.03756714]
[139.54734802 347.75317383]
[130.62361145 361.63867188]
[118.45331573 372.77346802]
[103.84934235 380.42098999]
[87.78531647 384.07730103]
[87.47325897 399.07406616]
[87.16120148 414.07080078]
[86.84914398 429.06756592]
[86.53708649 444.06430054]
[86.22502899 459.06106567]
[85.91297913 474.05783081]
[85.60092163 489.05456543]
[85.28886414 504.05133057]
[84.97680664 519.04809570]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 150]
[3 149]
[4 148]
[5 147]
[6 146]
[7 145]
[8 144]
[9 143]
[10 142]
[11 141]
[25 130]
[26 129]
[27 128]
[28 127]
[31 124]
[32 123]
[33 122]
[34 121]
[39 64]
[40 63]
[43 60]
[44 59]
[45 58]
[46 57]
[66 117]
[67 116]
[68 115]
[69 114]
[84 99]
[85 98]
[86 97]
[87 96]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
