%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:46 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCAAAGAACCCUAACACCAGCCUAACCAGAUUUCAAAUUUUAUCUUUUGGCGGUAUGCACUxxxxxxxxxxGGCCCCUACGGGCUACUACAACCCUUCGCUGACGCCAUAAAACUCUUCACCAAAGAGCCCCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[92.59078979 248.23434448]
[92.59078979 233.23434448]
[92.59078979 218.23434448]
[92.59078979 203.23434448]
[92.59078979 188.23434448]
[92.59078979 173.23434448]
[92.59078979 158.23434448]
[92.59078979 143.23434448]
[92.59078979 128.23434448]
[92.59078979 113.23434448]
[90.84250641 110.71387482]
[89.76704407 108.05225372]
[74.94928741 110.38335419]
[60.13153076 112.71446228]
[45.31377029 115.04556274]
[30.49601364 117.37667084]
[30.29183388 132.41217041]
[27.54941368 147.19686890]
[22.34765625 161.30535889]
[14.83622646 174.33174133]
[5.23124266 185.90119934]
[-6.19093990 195.68084717]
[-19.10168266 203.38934326]
[-33.12951660 208.80485535]
[-47.87083435 211.77160645]
[-62.90150070 212.20420837]
[-77.78904724 210.09022522]
[-92.10513306 205.49047852]
[-105.43785858 198.53732300]
[-117.40361023 189.43078613]
[-127.65811920 178.43292236]
[-135.90632629 165.86013794]
[-141.91091919 152.07417297]
[-145.49914551 137.47167969]
[-146.56776428 122.47280884]
[-145.08601379 107.50910950]
[-141.09652710 93.01110840]
[-134.71411133 79.39594269]
[-126.12237549 67.05535126]
[-115.56853485 56.34439468]
[-103.35624695 47.57125473]
[-89.83687592 40.98834610]
[-75.39940643 36.78507614]
[-60.45923615 35.08237457]
[-45.44621277 35.92924118]
[-30.79229927 39.30130005]
[-16.91911316 45.10153961]
[-4.22581768 53.16306686]
[6.92237759 63.25394058]
[16.20471764 75.08382416]
[23.35412788 88.31235504]
[28.16490936 102.55891418]
[42.98266602 100.22780609]
[57.80042648 97.89670563]
[72.61818695 95.56559753]
[87.43594360 93.23449707]
[99.60778046 84.46828461]
[106.51477814 71.15312958]
[113.42177582 57.83797836]
[120.32877350 44.52281952]
[127.23577118 31.20766449]
[126.72206879 15.39480114]
[139.45077515 7.65986204]
[146.35777283 -5.65529346]
[147.54672241 -14.77879429]
[153.54948425 -19.17338943]
[160.73199463 -32.34197235]
[149.19476318 -42.00035858]
[139.76663208 -53.72032166]
[132.80845642 -67.05024719]
[128.58604431 -81.47695923]
[127.25984955 -96.44544983]
[128.87899780 -111.38025665]
[133.37937927 -125.70759583]
[140.58625793 -138.87736511]
[150.22099304 -150.38429260]
[161.91184998 -159.78735352]
[175.20834351 -166.72659302]
[189.59855652 -170.93698120]
[204.52891541 -172.25848389]
[219.42539978 -170.64218140]
[233.71571350 -166.15206909]
[240.89822388 -179.32064819]
[248.08073425 -192.48922729]
[255.26324463 -205.65780640]
[254.32450867 -222.03007507]
[268.18057251 -230.80172729]
[282.57745361 -222.94926453]
[282.70492554 -206.55061340]
[268.43182373 -198.47529602]
[261.24929810 -185.30671692]
[254.06680298 -172.13813782]
[246.88429260 -158.96955872]
[258.39660645 -149.38621521]
[267.82101440 -137.73722839]
[274.79379272 -124.46913910]
[279.04534912 -110.09102631]
[280.41043091 -95.15496063]
[278.83474731 -80.23480988]
[274.37695312 -65.90420532]
[267.20666504 -52.71449661]
[257.59774780 -41.17349625]
[245.91807556 -31.72596931]
[232.61538696 -24.73647308]
[218.20008850 -20.47529984]
[203.22564697 -19.10801506]
[188.26745605 -20.68903732]
[173.90057373 -25.15946388]
[166.71806335 -11.99088097]
[159.67292786 1.25170493]
[152.76593018 14.56686020]
[153.77366638 29.42733574]
[140.55093384 38.11466217]
[133.64393616 51.42982101]
[126.73693085 64.74497223]
[119.82993317 78.06012726]
[112.92293549 91.37528992]
[120.73506165 78.57018280]
[131.43412781 68.05685425]
[144.37405396 60.47014999]
[158.77348328 56.26818085]
[173.76289368 55.70469284]
[188.43716431 58.81370544]
[201.91017151 65.40748596]
[213.36836243 75.08786774]
[222.11984253 87.27030182]
[227.63613892 101.21915436]
[229.58415222 116.09212494]
[227.84626770 130.99110413]
[222.52740479 145.01643372]
[213.94876099 157.32118225]
[202.62835693 167.16233826]
[189.24975586 173.94563293]
[174.62083435 177.26147461]
[159.62496948 176.90960693]
[145.16766357 172.91131592]
[132.12193298 165.50801086]
[121.27553558 155.14674377]
[113.28343964 142.45320129]
[108.62823486 128.19384766]
[107.59078979 113.23434448]
[107.59078979 128.23434448]
[107.59078979 143.23434448]
[107.59078979 158.23434448]
[107.59078979 173.23434448]
[107.59078979 188.23434448]
[107.59078979 203.23434448]
[107.59078979 218.23434448]
[107.59078979 233.23434448]
[107.59078979 248.23434448]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[12 56]
[13 55]
[14 54]
[15 53]
[16 52]
[57 117]
[58 116]
[59 115]
[60 114]
[61 113]
[63 111]
[64 110]
[66 109]
[67 108]
[82 93]
[83 92]
[84 91]
[85 90]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
