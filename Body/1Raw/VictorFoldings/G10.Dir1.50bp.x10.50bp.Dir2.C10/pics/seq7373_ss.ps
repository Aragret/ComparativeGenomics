%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:25 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGAACCCCCCAAAGCUGGUUUCAAGCCAACCCCAUGGCCUCCAUGACUUUUUCAAAAAGGUAUxxxxxxxxxxCGCUAACAAUCAAUACUAAACCCCCAUAAAUAGGAGAAGGCUUAGAAGAAAACCCCACAAACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[83.91458893 430.89257812]
[83.91458893 415.89257812]
[83.91458893 400.89257812]
[83.91458893 385.89257812]
[83.91458893 370.89257812]
[83.91458893 355.89257812]
[83.91458893 340.89257812]
[83.91458893 325.89257812]
[83.91458893 310.89257812]
[83.91458893 295.89257812]
[77.13364410 292.68807983]
[70.72467041 306.24996948]
[64.31548309 319.81176758]
[50.75378418 313.40237427]
[57.16276932 299.84100342]
[63.57174683 286.27911377]
[56.79079819 283.07461548]
[45.20175171 292.59796143]
[33.61270142 302.12130737]
[28.35561752 317.65496826]
[12.22367477 320.60327148]
[1.81203413 307.93322754]
[7.83129787 292.67871094]
[24.08936501 290.53225708]
[35.67841339 281.00891113]
[47.26745987 271.48556519]
[68.21355438 265.94989014]
[84.63593292 272.47982788]
[85.55934143 257.50827026]
[86.48275757 242.53672791]
[87.25241852 227.55648804]
[87.86824036 212.56913757]
[88.48406982 197.58177185]
[89.09989166 182.59442139]
[89.71572113 167.60707092]
[79.46744537 156.85958862]
[79.87847900 141.65150452]
[91.22091675 130.97503662]
[78.07516479 123.57598877]
[69.74275208 111.00111389]
[68.05294800 96.01107025]
[54.01097107 90.73632812]
[39.96899414 85.46158600]
[25.92701912 80.18684387]
[11.88504314 74.91210175]
[-5.06866360 75.00245667]
[-9.84873486 58.73631668]
[4.45846176 49.64013672]
[17.15978432 60.87012863]
[31.20176125 66.14486694]
[45.24373627 71.41960907]
[59.28571320 76.69435120]
[73.32769012 81.96909332]
[73.70091248 69.56037140]
[79.06317902 56.51928329]
[70.14702606 44.45685196]
[61.23087692 32.39442062]
[52.31472778 20.33198929]
[43.39857483 8.26955795]
[29.12139893 -0.87366682]
[33.95498657 -17.12398338]
[50.90830231 -16.97782707]
[55.46100616 -0.64659297]
[64.37715912 11.41583824]
[73.29331207 23.47826958]
[82.20945740 35.54070282]
[91.12561035 47.60313416]
[105.84113312 44.69565964]
[109.49983978 30.14870644]
[113.15854645 15.60175228]
[116.81725311 1.05479836]
[103.63041687 -6.27799368]
[92.79145813 -16.77462769]
[85.03938293 -29.71942711]
[80.90275574 -44.22979355]
[80.66360474 -59.31638336]
[84.33824158 -73.95056915]
[91.67612457 -87.13457489]
[102.17694855 -97.96948242]
[115.12474060 -105.71655273]
[129.63670349 -109.84757996]
[144.72337341 -110.08090210]
[159.35614014 -106.40061188]
[172.53730774 -99.05764008]
[183.36816406 -88.55264282]
[191.11024475 -75.60186005]
[195.23565674 -61.08830261]
[195.46316528 -46.00153351]
[191.77722168 -31.37018585]
[184.42916870 -18.19185638]
[173.91998291 -7.36506033]
[160.96620178 0.37201044]
[146.45106506 4.49183083]
[131.36419678 4.71350431]
[127.70549774 19.26045799]
[124.04679108 33.80741119]
[120.38808441 48.35436630]
[125.71854401 53.63037491]
[136.27073669 42.96963882]
[146.93128967 53.52201080]
[136.37945557 64.18238831]
[141.70989990 69.45839691]
[156.21853638 65.65053558]
[160.19235229 50.81462479]
[171.06309509 39.96461487]
[185.90655518 36.01910019]
[200.72993469 40.03940964]
[211.54582214 50.94409943]
[215.44479370 65.79985809]
[211.37803650 80.61057281]
[200.43949890 91.39221954]
[185.57159424 95.24459839]
[170.77369690 91.13143921]
[160.02638245 80.15916443]
[145.51776123 83.96701813]
[134.92892456 119.95453644]
[106.20826721 131.59086609]
[116.63656616 143.16188049]
[115.79853058 158.35241699]
[104.70307159 168.22290039]
[104.08724976 183.21025085]
[103.47142029 198.19760132]
[102.85559845 213.18495178]
[102.23976898 228.17231750]
[105.02719116 236.93736267]
[101.45430756 243.46014404]
[100.53089142 258.43170166]
[99.60748291 273.40322876]
[106.91295624 260.30249023]
[118.56160736 250.85214233]
[132.88696289 246.40420532]
[147.83963013 247.59500122]
[161.28044128 254.25416565]
[171.28656006 265.42901611]
[176.42648315 279.52090454]
[175.96488953 294.51382446]
[169.96781921 308.26281738]
[159.29322815 318.80099487]
[145.46821594 324.62069702]
[130.47062683 324.88940430]
[116.44601440 319.56866455]
[105.40077209 309.41964722]
[98.91458893 295.89257812]
[98.91458893 310.89257812]
[98.91458893 325.89257812]
[98.91458893 340.89257812]
[98.91458893 355.89257812]
[98.91458893 370.89257812]
[98.91458893 385.89257812]
[98.91458893 400.89257812]
[98.91458893 415.89257812]
[98.91458893 430.89257812]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 152]
[2 151]
[3 150]
[4 149]
[5 148]
[6 147]
[7 146]
[8 145]
[9 144]
[10 143]
[17 26]
[18 25]
[19 24]
[28 128]
[29 127]
[30 126]
[31 124]
[32 123]
[33 122]
[34 121]
[35 120]
[38 117]
[41 53]
[42 52]
[43 51]
[44 50]
[45 49]
[55 67]
[56 66]
[57 65]
[58 64]
[59 63]
[68 97]
[69 96]
[70 95]
[71 94]
[102 115]
[103 114]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
