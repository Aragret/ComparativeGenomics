%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:22 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGAGUCUCCCUUCACCAUUUCCGACGGCAUCUACGGCUCAACAUUUUUUGUAGCCACAGGCUUCCAxxxxxxxxxxCAGCCAGAACGCCUGAACGCAGGCACAUACUUCCUAUUCUACACCCUAGUAGGCUCCCUUCCCCCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[143.54750061 312.32031250]
[143.54750061 297.32031250]
[143.54750061 282.32031250]
[143.54750061 267.32031250]
[143.54750061 252.32031250]
[143.54750061 237.32031250]
[143.54750061 222.32031250]
[143.54750061 207.32031250]
[143.54750061 192.32031250]
[143.54750061 177.32031250]
[138.74345398 163.11041260]
[129.64144897 151.18759155]
[120.53945160 139.26478577]
[106.49601746 143.83370972]
[91.73107910 143.53408813]
[77.88455963 138.39921570]
[66.49436951 128.99938965]
[53.65470123 136.75457764]
[45.84234238 150.51240540]
[30.94779778 150.46960449]
[18.10812950 158.22479248]
[17.78146362 173.64869690]
[9.14891338 186.43472290]
[-5.03490448 192.50291443]
[-20.24398613 189.91691589]
[-31.62516785 179.50190735]
[-35.54675674 164.58129883]
[-30.75738716 149.91618347]
[-18.78532982 140.18615723]
[-3.45082641 138.49603271]
[10.35294151 145.38513184]
[23.19260788 137.62994385]
[30.08658791 124.42681885]
[45.89950943 123.91491699]
[58.73917770 116.15972137]
[55.70377731 98.80136871]
[59.67346191 81.63256836]
[70.02046204 67.36843109]
[61.88819504 54.76421356]
[53.75593185 42.15999603]
[45.02359772 50.71138763]
[30.65741730 54.04183578]
[13.69820499 49.41337204]
[0.70782357 41.91337204]
[-12.28255749 34.41337204]
[-25.27293777 26.91337013]
[-31.95939255 26.52686501]
[-36.70499039 23.27975655]
[-38.61995697 18.85173988]
[-51.30389786 10.84438992]
[-63.98783493 2.83703899]
[-79.89019012 4.95710659]
[-91.36241913 -6.25750208]
[-89.60401917 -22.20389938]
[-75.96387482 -30.64937210]
[-60.90554047 -25.11528015]
[-55.98048401 -9.84690094]
[-43.29654694 -1.83955038]
[-30.61260605 6.16780043]
[-17.77293777 13.92298889]
[-4.78255749 21.42298889]
[8.20782375 28.92298889]
[21.19820404 36.42298889]
[27.57941818 32.48216248]
[27.13460732 17.48875809]
[40.34184265 24.60050774]
[46.72305679 20.65968132]
[45.83444595 5.68602419]
[44.94583893 -9.28763199]
[44.05722809 -24.26128769]
[29.59550667 -28.86813164]
[17.77698898 -38.39110947]
[10.20003605 -51.54231644]
[7.88936663 -66.54315948]
[11.15748024 -81.36489105]
[19.56239128 -94.00300598]
[31.96740532 -102.74829865]
[46.69484329 -106.41802979]
[61.75294495 -104.51591492]
[75.10522461 -97.29918671]
[84.94588470 -85.74385834]
[89.94407654 -71.41268158]
[89.42382050 -56.24383926]
[83.45549011 -42.28879166]
[72.84623718 -31.43484116]
[59.03088379 -25.14989662]
[59.91949463 -10.17624092]
[60.80810547 4.79741478]
[61.69671249 19.77107048]
[66.36014557 34.02773285]
[74.49240875 46.63194656]
[82.62467957 59.23616409]
[98.42654419 55.71550751]
[114.43843842 58.10580444]
[128.52313232 66.08800507]
[139.98197937 56.40840530]
[151.44084167 46.72880554]
[162.89968872 37.04920578]
[174.35853577 27.36960220]
[179.40452576 11.76607227]
[195.49499512 8.59930420]
[206.07748413 21.12699890]
[200.26560974 36.46173859]
[184.03814697 38.82845688]
[172.57928467 48.50805664]
[161.12043762 58.18766022]
[149.66159058 67.86726379]
[138.20272827 77.54685974]
[142.64326477 87.95244598]
[144.30415344 99.14334106]
[143.07711792 110.39006805]
[139.04216003 120.95953369]
[132.46226501 130.16278076]
[141.56427002 142.08560181]
[150.66627502 154.00840759]
[148.39462280 139.18142700]
[152.41439819 124.73007965]
[163.42050171 114.53862762]
[178.13774109 111.63983154]
[192.18655396 116.89630890]
[201.38632202 128.74385071]
[202.99951172 143.65612793]
[188.17755127 145.96037292]
[202.28976440 151.04421997]
[216.40197754 156.12808228]
[231.47303772 150.62878418]
[245.09364319 159.10572815]
[246.81523132 175.05613708]
[235.31712341 186.24423218]
[219.41970825 184.08744812]
[211.31811523 170.24029541]
[197.20590210 165.15643311]
[183.09370422 160.07257080]
[176.95715332 164.38450623]
[186.90444946 175.61177063]
[196.85174561 186.83901978]
[206.79904175 198.06628418]
[216.74633789 209.29353333]
[229.27850342 217.53640747]
[232.40660095 232.20660400]
[224.32679749 244.84451294]
[209.69833374 248.16241455]
[196.95681763 240.24702454]
[193.44958496 225.66333008]
[186.25820923 212.49958801]
[179.06681824 199.33586121]
[171.87544250 186.17211914]
[164.68405151 173.00837708]
[158.54750061 177.32031250]
[158.54750061 192.32031250]
[158.54750061 207.32031250]
[158.54750061 222.32031250]
[158.54750061 237.32031250]
[158.54750061 252.32031250]
[158.54750061 267.32031250]
[158.54750061 282.32031250]
[158.54750061 297.32031250]
[158.54750061 312.32031250]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 158]
[2 157]
[3 156]
[4 155]
[5 154]
[6 153]
[7 152]
[8 151]
[9 150]
[10 149]
[11 115]
[12 114]
[13 113]
[17 35]
[18 34]
[20 32]
[21 31]
[38 92]
[39 91]
[40 90]
[43 63]
[44 62]
[45 61]
[46 60]
[49 59]
[50 58]
[51 57]
[67 89]
[68 88]
[69 87]
[70 86]
[95 108]
[96 107]
[97 106]
[98 105]
[99 104]
[123 133]
[124 132]
[125 131]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
