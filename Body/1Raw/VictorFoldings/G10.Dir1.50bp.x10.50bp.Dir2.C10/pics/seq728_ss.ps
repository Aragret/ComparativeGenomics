%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:54 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCUAACCCCAUACCCCGAACCAACCAAACCCCAAAGACACCCCCCACAGUUUAUGUAGCUUAxxxxxxxxxxCCAUCGUUGUAUUUCAACUACAAGAACACCAAUGACCCCAAUACGCAAAACUAACCCCCUACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[89.66055298 123.50531769]
[76.09865570 129.91429138]
[62.53676224 136.32327271]
[48.97486496 142.73223877]
[35.41297150 149.14122009]
[21.85107422 155.55020142]
[10.87027168 165.76890564]
[3.50403214 178.83560181]
[-3.86220741 191.90229797]
[-11.22844696 204.96899414]
[-10.51912117 221.35278320]
[-24.49666023 229.92951965]
[-38.78216934 221.87619019]
[-38.67994308 205.47735596]
[-24.29514122 197.60275269]
[-16.92890167 184.53605652]
[-9.56266308 171.46936035]
[-2.19642329 158.40266418]
[-15.37451839 165.56770325]
[-29.68075180 170.07678223]
[-44.58567047 171.76300049]
[-59.53767395 170.56398010]
[-73.98340607 166.52409363]
[-87.38825989 159.79283142]
[-99.25614929 150.61932373]
[-109.14785004 139.34304810]
[-116.69730377 126.38134766]
[-121.62509918 112.21389008]
[-123.74888611 97.36499786]
[-122.99005127 82.38420868]
[-119.37668610 67.82592773]
[-113.04251099 54.22893143]
[-104.22194672 42.09642792]
[-93.24143219 31.87741661]
[-80.50732422 23.95008850]
[-66.49089813 18.60782051]
[-51.71088028 16.04831886]
[-36.71424866 16.36630821]
[-22.05601120 19.55001831]
[-8.27863789 25.48162842]
[4.10799170 33.94161606]
[14.64546871 44.61689377]
[22.94382095 57.11238861]
[28.69593620 70.96566010]
[31.68894386 85.66402435]
[31.81207275 100.66352081]
[29.06077003 115.40904236]
[23.53685379 129.35487366]
[15.44209862 141.98829651]
[29.00399399 135.57933044]
[42.56589127 129.17034912]
[56.12778854 122.76137543]
[69.68968201 116.35240173]
[83.25157928 109.94342041]
[86.61083984 95.32441711]
[77.20698547 83.63820648]
[67.80312347 71.95199585]
[52.07209015 68.80332947]
[44.85406494 54.47574615]
[51.68610382 39.96014023]
[67.32724762 36.39164352]
[79.77895355 46.50770187]
[79.48933411 62.54814148]
[88.89318848 74.23435211]
[98.29705048 85.92055511]
[105.79705048 85.92055511]
[103.14705658 71.15649414]
[100.49706268 56.39243317]
[97.84706879 41.62837219]
[95.19706726 26.86430931]
[92.54707336 12.10024738]
[84.01496887 -0.23681678]
[82.19644165 -15.12617397]
[87.50843048 -29.15410233]
[98.73304749 -39.10438156]
[113.29678345 -42.69568253]
[127.86058807 -39.10462570]
[139.08537292 -29.15453339]
[144.39758301 -15.12669277]
[142.57931519 -0.23730573]
[134.04701233 12.10024738]
[131.39701843 26.86430931]
[128.74702454 41.62837219]
[126.09703827 56.39243317]
[123.44704437 71.15649414]
[120.79705048 85.92055511]
[128.29704285 85.92055511]
[137.70089722 74.23435211]
[147.10476685 62.54814148]
[156.50862122 50.86193085]
[156.21899414 34.82149506]
[168.67070007 24.70543480]
[184.31184387 28.27393150]
[191.14389038 42.78953552]
[183.92585754 57.11712265]
[168.19482422 60.26578903]
[158.79096985 71.95199585]
[149.38711548 83.63820648]
[139.98326111 95.32441711]
[154.51481628 91.60504913]
[169.35990906 89.45481873]
[184.34956360 88.89819336]
[199.31324768 89.94151306]
[214.08062744 92.57289886]
[228.48368835 96.76240540]
[242.35850525 102.46235657]
[255.54718018 109.60789490]
[267.89965820 118.11769867]
[279.27532959 127.89492035]
[289.54473877 138.82830811]
[298.59106445 150.79342651]
[306.31130981 163.65412903]
[312.61764526 177.26405334]
[317.43832397 191.46832275]
[320.71844482 206.10530090]
[322.42068481 221.00839233]
[322.52572632 236.00802612]
[321.03231812 250.93350220]
[317.95745850 265.61495972]
[313.33615112 279.88534546]
[307.22100830 293.58221436]
[299.68161011 306.54977417]
[290.80371094 318.64041138]
[280.68838501 329.71652222]
[269.45074463 339.65206909]
[257.21865845 348.33398438]
[244.13131714 355.66351318]
[230.33767700 361.55718994]
[215.99468994 365.94796753]
[201.26559448 368.78585815]
[186.31800842 370.03860474]
[171.32200623 369.69192505]
[156.44827271 367.74978638]
[141.86605835 364.23425293]
[127.74130249 359.18536377]
[114.23474884 352.66058350]
[101.50009918 344.73410034]
[89.68228149 335.49618530]
[78.91577148 325.05194092]
[69.32308960 313.52023315]
[61.01341248 301.03225708]
[54.08129501 287.73016357]
[48.60562515 273.76531982]
[44.64871979 259.29663086]
[42.25560379 244.48876953]
[41.45351028 229.51022339]
[42.25156784 214.53146362]
[44.64069748 199.72296143]
[48.59370804 185.25320435]
[54.06561279 171.28688049]
[60.99414825 157.98292542]
[69.30046082 145.49272156]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 54]
[2 53]
[3 52]
[4 51]
[5 50]
[6 49]
[7 18]
[8 17]
[9 16]
[10 15]
[55 65]
[56 64]
[57 63]
[87 99]
[88 98]
[89 97]
[90 96]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
