%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:55 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGAGAUGAAAAAUUAUAACCAAGCAUAAUAUAGCAAGGACUAACCCCUAUACCUUCUGCAUAxxxxxxxxxxAAACAAAGCAUACAUCAUUAUUCUCGCACGGACUACAACCACGACCAAUGAUAUGAAAAACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[178.47268677 334.87091064]
[178.47268677 319.87091064]
[178.47268677 304.87091064]
[178.47268677 289.87091064]
[178.47268677 274.87091064]
[178.47268677 259.87091064]
[178.47268677 244.87089539]
[178.47268677 229.87089539]
[178.47268677 214.87089539]
[178.47268677 199.87089539]
[156.10212708 180.99575806]
[158.29107666 156.38539124]
[146.59146118 146.99822998]
[134.89183044 137.61106873]
[123.19221497 128.22390747]
[112.90167999 136.21128845]
[99.86627960 140.35140991]
[85.55226898 139.71601868]
[71.73014832 133.94203186]
[60.25608063 123.32624817]
[46.35352707 128.95820618]
[32.45096970 134.59016418]
[18.54841423 140.22212219]
[4.64585829 145.85408020]
[1.03669786 160.94558716]
[-10.77559948 171.00784302]
[-26.24896240 172.17173767]
[-39.43357086 163.98970032]
[-45.25967026 149.60789490]
[-41.48700714 134.55642700]
[-29.56624985 124.62289429]
[-14.08117008 123.62693024]
[-0.98609841 131.95152283]
[12.91645718 126.31955719]
[26.81901360 120.68760681]
[40.72156906 115.05564880]
[54.62412643 109.42369080]
[55.55793381 101.98204803]
[40.82596207 104.80500793]
[33.58876419 91.66640472]
[43.84791946 80.72338104]
[57.42554474 87.09877014]
[58.35935211 79.65712738]
[46.27936172 70.76477814]
[34.19937515 61.87243271]
[22.11938667 52.98007965]
[8.90441227 60.54872131]
[-6.24716711 62.08154678]
[-20.71024704 57.31298065]
[-31.97901154 47.06921005]
[-38.10108185 33.12503052]
[-38.01576614 17.89635277]
[-31.73785210 4.02163982]
[-20.35502434 -6.09523249]
[-5.83942461 -10.70145321]
[9.29402924 -8.99896812]
[22.42337608 -1.28274238]
[31.27387619 11.11034107]
[34.31212997 26.03310585]
[31.01173592 40.90009308]
[43.09172440 49.79244232]
[55.17171478 58.68479156]
[67.25170135 67.57714081]
[81.77391052 62.93149567]
[95.49785614 63.74813080]
[96.74472809 48.80004120]
[97.99160004 33.85195541]
[83.89691162 28.41905403]
[71.90462494 19.23419571]
[62.98688889 7.04195547]
[57.86663818 -7.16929674]
[56.95894241 -22.24751854]
[60.33738327 -36.97038651]
[67.72808838 -50.14438248]
[78.53192902 -60.70154953]
[91.87307739 -67.78606415]
[106.67003632 -70.82362366]
[121.72327423 -69.56797791]
[135.81250000 -64.12091827]
[147.79556274 -54.92401505]
[156.70103455 -42.72282028]
[161.80700684 -28.50643349]
[162.69955444 -13.42730713]
[159.30632019 1.29215825]
[151.90238953 14.45872211]
[141.08795166 25.00502968]
[127.73969269 32.07614136]
[112.93968964 35.09883118]
[111.69281769 50.04691696]
[110.44593811 64.99500275]
[128.00105286 76.53920746]
[136.29322815 95.84439087]
[132.57937622 116.52427673]
[144.27899170 125.91143799]
[155.97862244 135.29859924]
[167.67823792 144.68576050]
[184.69161987 137.40609741]
[204.46420288 144.07403564]
[216.01017761 164.23677063]
[230.98989868 165.01661682]
[245.96960449 165.79646301]
[260.94934082 166.57630920]
[277.11550903 157.82221985]
[291.47235107 167.86619568]
[306.46505737 168.33422852]
[321.45773315 168.80227661]
[327.35250854 154.81599426]
[337.90444946 143.90631104]
[351.68649292 137.54869080]
[366.83477783 136.60295105]
[381.30056763 141.19699097]
[393.12750244 150.70948792]
[400.71609497 163.85397339]
[403.04006958 178.85276794]
[399.78509521 193.67739868]
[391.39135742 206.32295227]
[378.99411011 215.07922363]
[364.26992798 218.76199341]
[349.21014404 216.87321472]
[335.85147095 209.66831970]
[326.00057983 198.12171936]
[320.98968506 183.79496765]
[305.99700928 183.32693481]
[291.00430298 182.85888672]
[281.93850708 190.92849731]
[269.40356445 190.62164307]
[260.16949463 181.55603027]
[245.18977356 180.77618408]
[230.21005249 179.99633789]
[215.23033142 179.21649170]
[209.79092407 184.38009644]
[222.56298828 192.24612427]
[237.31768799 194.94772339]
[246.46681213 206.83442688]
[245.30204773 221.78912354]
[234.42282104 232.11590576]
[219.42774963 232.50042725]
[208.03355408 222.74479675]
[206.10348511 207.87103271]
[198.91209412 194.70729065]
[193.47268677 199.87089539]
[193.47268677 214.87089539]
[193.47268677 229.87089539]
[193.47268677 244.87089539]
[193.47268677 259.87091064]
[193.47268677 274.87091064]
[193.47268677 289.87091064]
[193.47268677 304.87091064]
[193.47268677 319.87091064]
[193.47268677 334.87091064]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[12 96]
[13 95]
[14 94]
[15 93]
[20 37]
[21 36]
[22 35]
[23 34]
[24 33]
[43 63]
[44 62]
[45 61]
[46 60]
[65 90]
[66 89]
[67 88]
[99 130]
[100 129]
[101 128]
[102 127]
[104 124]
[105 123]
[106 122]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
