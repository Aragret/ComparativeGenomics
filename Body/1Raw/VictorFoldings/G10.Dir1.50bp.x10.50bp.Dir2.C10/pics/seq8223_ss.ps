%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:35 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCUAGGCCUACCCGCCGCAGUACUGAUCAUUCUAUUUCCCCCUCUAUUGAUCCCCACCUCCxxxxxxxxxxCCAACAUACUCGGAUUCUACCCUAGCAUCACACACCGCACAAUCCCCUAUCUAGGCCUUCCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[13.12062454 259.19424438]
[5.39653921 272.05267334]
[4.92291403 287.86679077]
[-8.26347637 294.79269409]
[-15.98756123 307.65109253]
[-23.71164513 320.50949097]
[-24.18527222 336.32360840]
[-37.37166214 343.24954224]
[-45.09574509 356.10794067]
[-52.81983185 368.96633911]
[-60.54391479 381.82473755]
[-63.51701736 398.51596069]
[-80.37898254 400.27966309]
[-86.74159241 384.56488037]
[-73.40232086 374.10064697]
[-65.67823029 361.24224854]
[-57.95414734 348.38385010]
[-50.23006439 335.52545166]
[-50.30891800 320.63104248]
[-36.57004929 312.78543091]
[-28.84596252 299.92700195]
[-21.12187767 287.06860352]
[-21.20073128 272.17422485]
[-7.46186304 264.32858276]
[0.26222196 251.47016907]
[-21.29564285 234.82656860]
[-40.11806107 215.14237976]
[-55.78054810 192.86149597]
[-67.92988586 168.48641968]
[-76.29209137 142.56684875]
[-80.67857361 115.68730164]
[-80.99040985 88.45397949]
[-77.22056580 61.48104477]
[-69.45405579 35.37678528]
[-83.23644257 29.45682335]
[-97.01882172 23.53686142]
[-110.80120087 17.61689758]
[-124.58358765 11.69693470]
[-134.54342651 23.08362198]
[-147.53552246 30.83350563]
[-162.28703308 34.18732452]
[-177.35275269 32.81651306]
[-191.25671387 26.85536385]
[-202.63671875 16.88789177]
[-210.37789917 3.89060640]
[-213.72183228 -10.86314869]
[-212.34092712 -25.92795181]
[-206.37046814 -39.82790375]
[-196.39537048 -51.20123672]
[-183.39289856 -58.93370056]
[-168.63690186 -62.26774979]
[-153.57302856 -60.87674713]
[-139.67707825 -54.89696884]
[-128.31044006 -44.91425705]
[-120.58668518 -31.90660858]
[-117.26252747 -17.14838600]
[-118.66362000 -2.08544707]
[-104.88124084 3.83451605]
[-91.09886169 9.75447941]
[-77.31647491 15.67444229]
[-63.53409576 21.59440613]
[-57.91952515 10.82455063]
[-51.59669876 0.45464143]
[-44.59397125 -9.46881390]
[-36.94274902 -18.90130806]
[-28.67734909 -27.80053902]
[-19.83483887 -36.12659073]
[-10.45487690 -43.84212875]
[-0.57953352 -50.91254044]
[9.74690247 -57.30612183]
[20.47811699 -62.99419403]
[31.56598282 -67.95124817]
[42.96076965 -72.15505981]
[54.61137390 -75.58676147]
[66.46554565 -78.23096466]
[78.47010803 -80.07582092]
[90.57124329 -81.11304474]
[102.71465302 -81.33799744]
[114.84589386 -80.74965668]
[126.91055298 -79.35066223]
[138.85452271 -77.14729309]
[150.62422180 -74.14943695]
[162.16688538 -70.37052155]
[173.43074036 -65.82751465]
[184.36524963 -60.54078293]
[194.92138672 -54.53403091]
[205.05181885 -47.83420944]
[214.71109009 -40.47135925]
[223.85589600 -32.47850800]
[232.44522095 -23.89149475]
[240.44052124 -14.74883938]
[247.80596924 -5.09154320]
[254.50851440 5.03708172]
[267.60168457 -2.28202391]
[280.69482422 -9.60112953]
[288.96533203 -23.08850288]
[303.85000610 -22.54494095]
[316.94317627 -29.86404610]
[330.03631592 -37.18315125]
[340.91168213 -50.18941498]
[356.42025757 -43.33955765]
[354.13131714 -26.54083824]
[337.35543823 -24.08999825]
[324.26226807 -16.77089119]
[311.16912842 -9.45178604]
[303.83511353 3.51207495]
[288.01394653 3.49202490]
[274.92077637 10.81113052]
[261.82763672 18.13023567]
[266.37646484 27.82166862]
[270.34552002 37.76462555]
[273.72097778 47.92445374]
[276.49105835 58.26575089]
[278.64611816 68.75247955]
[280.17861938 79.34809875]
[281.08328247 90.01568604]
[281.35690308 100.71806335]
[280.99853516 111.41794586]
[280.00942993 122.07803345]
[278.39306641 132.66117859]
[276.15502930 143.13052368]
[273.30316162 153.44955444]
[269.84735107 163.58233643]
[265.79968262 173.49354553]
[261.17425537 183.14866638]
[255.98716736 192.51402283]
[250.25650024 201.55699158]
[244.00224304 210.24606323]
[237.24615479 218.55094910]
[230.01182556 226.44273376]
[222.32443237 233.89389038]
[214.21076965 240.87846375]
[205.69911194 247.37210083]
[196.81910706 253.35220337]
[187.60173035 258.79791260]
[178.07908630 263.69024658]
[168.28434753 268.01214600]
[158.25166321 271.74859619]
[148.01599121 274.88653564]
[137.61299133 277.41503906]
[127.07891846 279.32531738]
[116.45047760 280.61068726]
[105.76472473 281.26666260]
[95.05887604 281.29098511]
[84.37023926 280.68356323]
[73.73607635 279.44650269]
[63.19343567 277.58410645]
[52.77905655 275.10287476]
[42.52922821 272.01147461]
[32.47966766 268.32064819]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 25]
[2 24]
[4 22]
[5 21]
[6 20]
[8 18]
[9 17]
[10 16]
[11 15]
[34 61]
[35 60]
[36 59]
[37 58]
[38 57]
[93 109]
[94 108]
[95 107]
[97 105]
[98 104]
[99 103]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
