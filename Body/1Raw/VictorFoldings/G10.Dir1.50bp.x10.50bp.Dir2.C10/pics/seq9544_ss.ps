%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:40 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCAUAUUUACCAAAUGCCCCUCAUUUACAUAAAUAUUAUACUAGCAUUUACCAUCUCACUUxxxxxxxxxxGUUUAACCAAAACAUCAGAUUGUGAAUCUGACAACAGAGGCUUACGACCCCUUAUUUACCCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[92.50000000 291.95236206]
[92.50000000 276.95236206]
[92.50000000 261.95236206]
[92.50000000 246.95236206]
[92.50000000 231.95236206]
[92.50000000 216.95236206]
[92.50000000 201.95236206]
[92.50000000 186.95236206]
[92.50000000 171.95236206]
[92.50000000 156.95236206]
[67.89970398 147.63813782]
[50.03041840 128.33482361]
[36.12786102 133.96678162]
[22.22530556 139.59873962]
[8.32275009 145.23069763]
[-5.57980537 150.86265564]
[-19.48236084 156.49461365]
[-33.38491821 162.12657166]
[-39.88075256 178.33587646]
[-55.76525116 184.73640442]
[-71.07012939 177.83576965]
[-84.85250854 183.75573730]
[-98.63488770 189.67568970]
[-112.41727448 195.59565735]
[-126.19965363 201.51562500]
[-133.45735168 215.82315063]
[-149.19705200 218.92822266]
[-161.34460449 208.44888306]
[-160.58143616 192.42398071]
[-147.49301147 183.14646912]
[-132.11961365 187.73324585]
[-118.33723450 181.81327820]
[-104.55485535 175.89331055]
[-90.77246857 169.97334290]
[-76.99008942 164.05339050]
[-73.91815186 151.50109863]
[-64.01655579 142.89688110]
[-50.77041626 141.56729126]
[-39.01687241 148.22401428]
[-25.11431885 142.59205627]
[-11.21176243 136.96009827]
[2.69079375 131.32814026]
[16.59334946 125.69618225]
[30.49590492 120.06422424]
[44.39846039 114.43227386]
[42.64717865 96.76341248]
[46.37522507 79.40376282]
[55.22642899 64.01182556]
[68.35517883 52.05809021]
[84.50717926 44.68459702]
[102.13932037 42.59577560]
[119.56707764 45.99119568]
[126.47408295 32.67604065]
[133.38107300 19.36088562]
[119.46778870 24.96628189]
[104.70566559 22.30553436]
[93.62500000 12.19519615]
[89.62631989 -2.26200080]
[93.93676758 -16.62932777]
[105.23351288 -26.49763298]
[120.04973602 -28.83846283]
[133.83853149 -22.93344307]
[142.36828613 -10.59475040]
[143.02113342 4.39180660]
[152.28608704 -7.40483379]
[161.55104065 -19.20147324]
[155.37065125 -26.90283966]
[150.66091919 -35.57500458]
[147.56999207 -44.94060516]
[146.19433594 -54.70051956]
[146.57562256 -64.54344940]
[148.69955444 -74.15583038]
[152.49633789 -83.23182678]
[157.84300232 -91.48307037]
[164.56735229 -98.64781189]
[172.45355225 -104.49921417]
[181.24900818 -108.85256195]
[190.67250061 -111.57106781]
[200.42314148 -112.57019043]
[210.19001770 -111.82023621]
[219.66206360 -109.34725952]
[226.56906128 -122.66241455]
[233.47605896 -135.97756958]
[240.38305664 -149.29272461]
[236.92691040 -164.95907593]
[247.13208008 -177.33786011]
[263.17001343 -176.93310547]
[272.73782349 -164.05534363]
[268.49584961 -148.58325195]
[253.69821167 -142.38572693]
[246.79121399 -129.07057190]
[239.88421631 -115.75541687]
[232.97721863 -102.44026184]
[241.07379150 -95.43048859]
[247.65313721 -86.98042297]
[261.30938721 -93.18582916]
[274.96563721 -99.39123535]
[288.62185669 -105.59664917]
[302.27810669 -111.80205536]
[315.93435669 -118.00746155]
[329.59057617 -124.21286774]
[341.50946045 -136.27009583]
[356.39495850 -128.15480042]
[352.71752930 -111.60449219]
[335.79598999 -110.55662537]
[322.13977051 -104.35121918]
[308.48352051 -98.14581299]
[294.82727051 -91.94040680]
[281.17102051 -85.73500061]
[267.51480103 -79.52958679]
[253.85855103 -73.32418060]
[255.89547729 -51.70977783]
[249.37927246 -30.96528435]
[235.30525208 -14.34654331]
[215.85708618 -4.47246742]
[194.06799316 -2.91235256]
[173.34767151 -9.93652439]
[164.08271790 1.86011577]
[154.81777954 13.65675545]
[146.69622803 26.26788330]
[139.78923035 39.58303833]
[132.88223267 52.89819336]
[138.55683899 57.41841125]
[143.61643982 62.61782074]
[147.98034668 68.41349030]
[151.57894897 74.71298218]
[154.35484314 81.41580963]
[156.26376343 88.41506195]
[157.27523804 95.59909821]
[157.37316895 102.85333252]
[156.55595398 110.06204987]
[154.83666992 117.11027527]
[152.24270630 123.88558960]
[148.81544495 130.27992249]
[144.60957336 136.19126892]
[139.69215393 141.52534485]
[134.14163208 146.19708252]
[128.04652405 150.13195801]
[121.50407410 153.26721191]
[114.61862183 155.55284119]
[107.50000000 156.95236206]
[107.50000000 171.95236206]
[107.50000000 186.95236206]
[107.50000000 201.95236206]
[107.50000000 216.95236206]
[107.50000000 231.95236206]
[107.50000000 246.95236206]
[107.50000000 261.95236206]
[107.50000000 276.95236206]
[107.50000000 291.95236206]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[12 45]
[13 44]
[14 43]
[15 42]
[16 41]
[17 40]
[18 39]
[21 35]
[22 34]
[23 33]
[24 32]
[25 31]
[52 122]
[53 121]
[54 120]
[64 119]
[65 118]
[66 117]
[81 93]
[82 92]
[83 91]
[84 90]
[95 111]
[96 110]
[97 109]
[98 108]
[99 107]
[100 106]
[101 105]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
