%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:38 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGUUCGCUUCAUUCAUUGCCCCCACAAUCCUAGGCCUACCCGCCGCAGUACUGAUCAUUCUAxxxxxxxxxxCUGAGGAGGCUACUCAGUAGACAGUCCCACCCUCACACGAUUCUUUACCUUUCACUUCAUCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[92.50000000 252.01954651]
[92.50000000 237.01954651]
[92.50000000 222.01954651]
[92.50000000 207.01954651]
[92.50000000 192.01954651]
[92.50000000 177.01954651]
[92.50000000 162.01954651]
[92.50000000 147.01954651]
[92.50000000 132.01954651]
[92.50000000 117.01954651]
[86.79949188 112.14572144]
[72.65737152 117.14575958]
[75.39846802 102.39806366]
[69.69795990 97.52423859]
[54.88019943 99.85534668]
[69.85092163 100.79211426]
[82.15550995 109.37098694]
[88.21141815 123.09417725]
[86.25543976 137.96611023]
[76.85705566 149.65672302]
[62.75267029 154.76223755]
[48.04885101 151.79615784]
[37.02535629 141.61990356]
[22.90055084 146.66865540]
[8.77574825 151.71740723]
[-5.34905434 156.76617432]
[-11.88351727 171.15631104]
[-26.70861053 176.63282776]
[-41.02886581 169.94659424]
[-46.34833145 155.06442261]
[-39.51106644 140.81565857]
[-24.57349205 135.65382385]
[-10.39781094 142.64135742]
[3.72699237 137.59260559]
[17.85179520 132.54385376]
[31.97659874 127.49509430]
[32.05461502 119.99549866]
[17.05543137 119.83921814]
[17.21196556 104.84003448]
[32.21065140 104.99631500]
[32.28866959 97.49671936]
[18.27195740 92.15520477]
[4.25524521 86.81369019]
[-10.06273460 93.50480652]
[-24.88969040 88.03334045]
[-31.42905045 73.64541626]
[-25.80113029 58.87713623]
[-11.34487343 52.49026108]
[3.36307764 58.27400589]
[9.59675789 72.79698181]
[23.61347008 78.13848877]
[37.63018417 83.48000336]
[52.54909515 85.03758240]
[67.36685181 82.70648193]
[89.65324402 76.67047882]
[103.47179413 86.32398224]
[112.98014832 74.72264099]
[119.74826813 61.33635712]
[123.45442963 46.80141830]
[127.16059113 32.26648331]
[130.86674500 17.73154640]
[116.70536041 22.67675400]
[103.89728546 14.86949730]
[101.80419159 0.01624975]
[111.95596313 -11.02646637]
[126.93247223 -10.18731976]
[135.78698730 1.91969514]
[140.98239136 -12.15182400]
[146.17781067 -26.22334290]
[151.37322998 -40.29486465]
[138.53547668 -32.53650665]
[123.54186249 -32.09886169]
[110.27343750 -39.09521484]
[102.16469574 -51.71457672]
[101.31455994 -66.69046783]
[107.94308472 -80.14641571]
[120.33448792 -88.59940338]
[135.28131104 -89.86138916]
[148.91459656 -83.60572052]
[157.70542908 -71.45164490]
[159.37831116 -56.54533005]
[167.36824036 -69.24025726]
[175.35815430 -81.93518829]
[183.34806824 -94.63011932]
[191.33798218 -107.32505035]
[186.38192749 -122.15648651]
[192.16688538 -136.68467712]
[205.96139526 -144.04983521]
[221.25209045 -140.77438354]
[230.81918335 -128.40487671]
[230.14538574 -112.78182220]
[219.54884338 -101.28194427]
[204.03291321 -99.33512878]
[196.04299927 -86.64020538]
[188.05308533 -73.94527435]
[180.06315613 -61.25034332]
[172.07324219 -48.55541229]
[165.44474792 -35.09944916]
[160.24932861 -21.02792740]
[155.05392456 -6.95640850]
[149.85850525 7.11511087]
[145.40168762 21.43770790]
[141.69552612 35.97264481]
[137.98936462 50.50757980]
[134.28320312 65.04251862]
[144.99024963 54.53732681]
[158.09748840 47.24346161]
[172.66854858 43.68198776]
[187.66252136 44.10731888]
[202.00825500 48.48907852]
[214.68093872 56.51424026]
[224.77525330 67.60950470]
[231.57008362 80.98224640]
[234.58001709 95.67715454]
[233.59004211 110.64444733]
[228.67088318 124.81490326]
[220.17393494 137.17620850]
[208.70622253 146.84530640]
[195.08695984 153.13145447]
[180.28907776 155.58558655]
[165.36970520 154.03237915]
[151.39465332 148.58279419]
[139.36227417 139.62612915]
[130.13212585 127.80224609]
[124.36357880 113.95580292]
[122.46875000 99.07596588]
[124.58148956 84.23099518]
[115.07313538 95.83233643]
[126.70742035 86.36431885]
[141.24024963 82.64991760]
[155.99076843 85.37433624]
[168.23793030 94.03499603]
[175.72250366 107.03427124]
[177.06382751 121.97417450]
[172.01445007 136.09875488]
[161.50584412 146.80245972]
[147.47651672 152.11074829]
[132.51446533 151.04443359]
[119.37973785 143.80020142]
[110.49529266 131.71440125]
[107.50000000 117.01954651]
[107.50000000 132.01954651]
[107.50000000 147.01954651]
[107.50000000 162.01954651]
[107.50000000 177.01954651]
[107.50000000 192.01954651]
[107.50000000 207.01954651]
[107.50000000 222.01954651]
[107.50000000 237.01954651]
[107.50000000 252.01954651]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[14 54]
[15 53]
[23 36]
[24 35]
[25 34]
[26 33]
[41 52]
[42 51]
[43 50]
[56 128]
[57 127]
[58 105]
[59 104]
[60 103]
[61 102]
[67 101]
[68 100]
[69 99]
[70 98]
[81 97]
[82 96]
[83 95]
[84 94]
[85 93]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
