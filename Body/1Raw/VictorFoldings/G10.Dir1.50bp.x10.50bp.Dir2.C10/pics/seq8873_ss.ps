%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:54 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCCUAGCCAUGUGAUUUCACUUCCACUCCAUAACGCUCCUCAUACUAGGCCUACUAACCAAxxxxxxxxxxGGCUCACUCCUUGGCGCCUGCCUGAUCCUCCAAAUCACCACAGGACUAUUCCUAGCCAUGCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[102.67312622 261.42413330]
[102.04914856 246.43713379]
[101.42517090 231.45010376]
[100.80119324 216.46308899]
[100.17721558 201.47607422]
[99.55323792 186.48905945]
[98.92926025 171.50204468]
[98.30528259 156.51502991]
[86.80348206 146.88650513]
[71.94042969 148.90884399]
[57.07738495 150.93116760]
[42.21434021 152.95350647]
[27.35129166 154.97584534]
[12.48824501 156.99816895]
[-2.37480187 159.02050781]
[-10.82334805 168.82234192]
[-23.28940201 170.17010498]
[-32.99461365 162.88200378]
[-47.89651489 164.59469604]
[-62.79841614 166.30738831]
[-64.12017059 181.30198669]
[-68.43358612 195.72346497]
[-75.56203461 208.98130798]
[-85.21360779 220.53257751]
[-96.99308777 229.90428162]
[-110.41810608 236.71264648]
[-124.93891144 240.67886353]
[-139.96090698 241.64053345]
[-154.86892700 239.55827332]
[-169.05250549 234.51734924]
[-181.93083191 226.72419739]
[-192.97656250 216.49790955]
[-201.73736572 204.25726318]
[-207.85449219 190.50352478]
[-211.07745361 175.79986572]
[-211.27427673 160.74841309]
[-208.43688965 145.96551514]
[-202.68148804 132.05651855]
[-194.24375916 119.59098053]
[-183.46920776 109.07936859]
[-170.79905701 100.95211792]
[-156.75213623 95.54204559]
[-141.90365601 93.07067108]
[-126.86166382 93.63922119]
[-112.24211121 97.22438812]
[-98.64365387 103.67938232]
[-86.62315369 112.73986816]
[-76.67282867 124.03482056]
[-69.20014954 137.10171509]
[-64.51110840 151.40548706]
[-49.60920334 149.69279480]
[-34.70730209 147.98010254]
[-21.23506355 136.77748108]
[-4.39713621 144.15747070]
[10.46591091 142.13513184]
[25.32895660 140.11279297]
[40.19200516 138.09045410]
[55.05504990 136.06813049]
[69.91809845 134.04579163]
[84.78114319 132.02345276]
[74.78703308 123.49135590]
[68.83536530 112.19450378]
[67.52992249 99.86657715]
[70.78408051 88.29026031]
[77.87094116 79.03961945]
[87.56335449 73.26634979]
[98.33885193 71.55874634]
[101.43717957 56.88221741]
[104.53549957 42.20569229]
[107.63381958 27.52916718]
[96.05788422 37.06843948]
[81.28650665 39.67736053]
[67.14321899 34.68061829]
[57.28896713 23.37161064]
[54.27449036 8.67763424]
[58.88008118 -5.59781790]
[69.91359711 -15.75958920]
[84.51903534 -19.17733574]
[98.91584015 -14.96638298]
[109.37742615 -4.21672583]
[113.19585419 10.28901577]
[119.25887299 -3.43103814]
[113.32118988 -18.07752419]
[119.55610657 -32.59996796]
[134.26455688 -38.38246155]
[148.72026062 -31.99435425]
[154.34692383 -17.22559547]
[147.80635071 -2.83823013]
[132.97892761 2.63197517]
[126.91590881 16.35202789]
[122.31034851 30.62748909]
[119.21202087 45.30401611]
[116.11370087 59.98054123]
[113.01538086 74.65706635]
[127.26576233 85.64929962]
[132.86535645 104.20912933]
[126.20108795 123.88761902]
[141.10299683 122.17492676]
[156.00489807 120.46224213]
[170.90679932 118.74954987]
[181.49732971 104.86509705]
[198.51446533 102.94131470]
[211.41921997 113.68027496]
[226.28227234 111.65794373]
[241.14530945 109.63560486]
[256.00836182 107.61327362]
[264.19961548 94.29270935]
[279.05300903 89.40287781]
[293.55523682 95.25260162]
[300.85879517 109.07982635]
[297.51513672 124.35575867]
[285.10308838 133.86756897]
[269.48318481 133.12406921]
[258.03070068 122.47631836]
[243.16764832 124.49865723]
[228.30459595 126.52098846]
[213.44155884 128.54331970]
[207.12753296 139.81851196]
[195.28700256 145.46440125]
[182.16717529 143.20651245]
[172.61949158 133.65145874]
[157.71757507 135.36413574]
[142.81567383 137.07682800]
[127.91378021 138.78952026]
[141.81253052 144.43084717]
[155.71128845 150.07217407]
[170.64747620 148.69000244]
[184.96507263 153.16284180]
[196.45831299 162.80158997]
[203.35650635 176.12132263]
[204.59692383 191.06994629]
[199.98846436 205.34446716]
[190.24110413 216.74574280]
[176.85653687 223.51727295]
[161.89682007 224.61581421]
[147.66665649 219.87214661]
[136.35836792 210.01707458]
[129.71411133 196.56887817]
[128.75779724 181.59744263]
[121.02504730 168.74424744]
[113.29229736 155.89105225]
[113.91627502 170.87806702]
[114.54025269 185.86508179]
[115.16423035 200.85209656]
[115.78820801 215.83911133]
[116.41218567 230.82612610]
[117.03616333 245.81315613]
[117.66014099 260.80017090]
[124.36013031 276.37405396]
[111.24960327 287.12350464]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 148]
[2 147]
[3 146]
[4 145]
[5 144]
[6 143]
[7 142]
[8 141]
[9 60]
[10 59]
[11 58]
[12 57]
[13 56]
[14 55]
[15 54]
[18 52]
[19 51]
[20 50]
[67 94]
[68 93]
[69 92]
[70 91]
[81 90]
[82 89]
[97 124]
[98 123]
[99 122]
[100 121]
[103 117]
[104 116]
[105 115]
[106 114]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
