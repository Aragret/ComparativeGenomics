%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:15 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCUCCCCAUACCCAACCCCCUGGUCAACCUCAACCUAGGCCUCCUAUUUAUUCUAGCCACCxxxxxxxxxxUCCUAAUGACCUCCGGCCUAGCCAUGUGAUUUCACUUCCACUCCAUAACGCUCCUCAUACCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[94.74314880 131.68557739]
[96.90998840 116.84291077]
[87.89245605 128.82974243]
[78.87492371 140.81657410]
[69.85739899 152.80340576]
[60.83986664 164.79023743]
[59.06577301 183.08866882]
[42.71361542 189.38206482]
[33.94740677 201.55389404]
[25.18120003 213.72573853]
[30.93367767 228.04049683]
[28.01138115 243.18856812]
[17.34680748 254.33622742]
[2.34298086 257.92633057]
[-12.21243191 252.81324768]
[-21.67485046 240.62857056]
[-23.02485275 225.26039124]
[-15.83165741 211.61262512]
[-2.39058685 204.04023743]
[13.00936222 204.95953369]
[21.77556992 192.78768921]
[30.54177666 180.61585999]
[28.91573715 168.58825684]
[36.17485046 158.36454773]
[48.85303116 155.77270508]
[57.87056351 143.78587341]
[66.88809204 131.79904175]
[75.90562439 119.81221008]
[84.92314911 107.82537842]
[71.26273346 114.02158356]
[59.66044617 123.52878571]
[45.34317398 128.00268555]
[30.39203453 126.79296875]
[16.98027420 120.07547760]
[7.05738544 108.82664490]
[2.06572580 94.68156433]
[2.73086810 79.69631958]
[8.95612907 66.04911804]
[19.83662605 55.72367477]
[33.79080200 50.22085953]
[48.79032516 50.34054947]
[62.65491104 56.06534195]
[73.36911011 66.56290436]
[82.14351654 78.72882843]
[80.27590942 63.84555054]
[78.40829468 48.96227264]
[76.54067993 34.07899094]
[74.67306519 19.19571304]
[72.80545044 4.31243229]
[70.93784332 -10.57084751]
[55.91508865 -10.74596024]
[41.05611420 -12.96510983]
[26.63772964 -17.18695450]
[12.92854309 -23.33284378]
[0.18394744 -31.28828430]
[-11.35863400 -40.90507126]
[-21.48416901 -52.00404739]
[-30.00402451 -64.37844849]
[-36.75948334 -77.79774475]
[-41.62469482 -92.01194763]
[-44.50901794 -106.75624847]
[-45.35872650 -121.75597382]
[-44.15798950 -136.73168945]
[-40.92917252 -151.40440369]
[-35.73242569 -165.50076294]
[-28.66456795 -178.75817871]
[-19.85726547 -190.92967224]
[-9.47459030 -201.78848267]
[2.29003096 -211.13233948]
[15.21743202 -218.78713989]
[29.06678391 -224.61030579]
[43.58008194 -228.49333191]
[58.48694992 -230.36390686]
[73.50968170 -230.18717957]
[88.36841583 -227.96641541]
[102.78634644 -223.74301147]
[116.49486542 -217.59564209]
[129.23860168 -209.63880920]
[140.78013611 -200.02078247]
[150.90447998 -188.92070007]
[159.42298889 -176.54537964]
[166.17700195 -163.12535095]
[171.04066467 -148.91062927]
[173.92340088 -134.16601562]
[174.77148438 -119.16619873]
[173.56912231 -104.19061279]
[170.33871460 -89.51824951]
[165.14044189 -75.42244720]
[158.07115173 -62.16579437]
[149.26252747 -49.99525833]
[138.87867737 -39.13756943]
[127.11305237 -29.79499626]
[114.18482208 -22.14159012]
[100.33483887 -16.31992722]
[85.82112122 -12.43846130]
[87.68873596 2.44481897]
[89.55635071 17.32809830]
[91.42395782 32.21138000]
[93.29157257 47.09465790]
[95.15918732 61.97793961]
[97.02680206 76.86122131]
[101.89250946 62.67232132]
[116.27754211 58.42132950]
[128.07420349 67.68624878]
[127.35340881 82.66892242]
[114.72175598 90.75864410]
[129.62365723 89.04595184]
[144.52555847 87.33325958]
[157.36909485 77.13640594]
[172.52011108 83.41164398]
[174.39256287 99.70354462]
[161.06021118 109.25239563]
[146.23825073 102.23516846]
[131.33634949 103.94785309]
[116.43444824 105.66054535]
[130.33320618 111.30187225]
[144.23196411 116.94319916]
[159.15092468 115.38603210]
[174.12284851 116.30320740]
[188.74018860 119.66976166]
[202.60498047 125.39403534]
[215.33981323 133.32020569]
[226.59797668 143.23249817]
[236.07302856 154.86106873]
[243.50698853 167.88934326]
[248.69750977 181.96267700]
[251.50328064 196.69792175]
[251.84791565 211.69396973]
[249.72204590 226.54255676]
[245.18353271 240.83947754]
[238.35592651 254.19552612]
[229.42510986 266.24710083]
[218.63418579 276.66610718]
[206.27693176 285.16894531]
[192.68974304 291.52413940]
[178.24250793 295.55865479]
[163.32850647 297.16265869]
[148.35377502 296.29251099]
[133.72593689 292.97189331]
[119.84323120 287.29119873]
[107.08357239 279.40505981]
[95.79431915 269.52816772]
[86.28280640 257.92941284]
[78.80795288 244.92456055]
[73.57325745 230.86759949]
[70.72121429 216.14123535]
[70.32947540 201.14634705]
[72.40870667 186.29115295]
[76.90229034 171.98005676]
[83.68791199 158.60263062]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 29]
[3 28]
[4 27]
[5 26]
[6 25]
[8 22]
[9 21]
[10 20]
[44 101]
[45 100]
[46 99]
[47 98]
[48 97]
[49 96]
[50 95]
[106 115]
[107 114]
[108 113]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
