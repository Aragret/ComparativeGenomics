%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:30 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGUCAUCCUAGCCCUAAGUCUGGCCUAUGAGUGACUACAAAAAGGAUUAGACUGAACCGAAUUGGUxxxxxxxxxxAACCCAAAAAGGCAUAAUUAAACUUUACUUCCUCUCUUUCUUCUUCCCACUCAUCCUAACCCUACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[95.18866730 236.13317871]
[94.89231110 221.13610840]
[94.59594727 206.13903809]
[94.29959106 191.14195251]
[94.00323486 176.14488220]
[93.70687866 161.14781189]
[93.41052246 146.15074158]
[93.11416626 131.15367126]
[92.81781006 116.15660095]
[81.16995239 106.70528412]
[66.43342590 109.50435638]
[51.69689560 112.30342865]
[37.01855087 115.39310455]
[22.40411186 118.77218628]
[7.78967190 122.15126801]
[-6.82476711 125.53034210]
[-21.43920517 128.90942383]
[-23.38109016 143.04667664]
[-30.02578926 155.64143372]
[-40.55424881 165.18504333]
[-53.68360138 170.54225159]
[-67.82347870 171.08622742]
[-81.26864624 166.77185059]
[-92.40464020 158.13864136]
[-99.90162659 146.24345398]
[-114.57997894 149.33314514]
[-129.25833130 152.42282104]
[-143.93667603 155.51249695]
[-147.53450012 170.34552002]
[-157.21847534 182.14311218]
[-171.06584167 188.56288147]
[-186.32717896 188.33015442]
[-199.97235107 181.49114990]
[-209.29209900 169.40374756]
[-212.43597412 154.46792603]
[-208.77976990 139.64920044]
[-199.04940796 127.88982391]
[-185.17686462 121.52464294]
[-169.91656494 121.81746674]
[-156.29843140 128.71014404]
[-147.02635193 140.83415222]
[-132.34800720 137.74447632]
[-117.66965485 134.65478516]
[-102.99131012 131.56510925]
[-100.32260895 115.96929169]
[-91.86202240 102.55330658]
[-78.87567902 93.38013458]
[-63.32829285 89.87366486]
[-47.58587265 92.59773254]
[-34.05572128 101.16569519]
[-24.81828499 114.29498291]
[-10.20384598 110.91590118]
[4.41059351 107.53682709]
[19.02503204 104.15774536]
[33.63947296 100.77867126]
[36.90695190 97.22930145]
[42.45763779 95.72786713]
[48.89782333 97.56690216]
[63.63434982 94.76782990]
[78.37087250 91.96875763]
[90.72617340 83.42784882]
[102.88721466 85.37324524]
[111.98921204 73.45043182]
[121.09121704 61.52761459]
[122.33091736 54.94573212]
[126.15908813 50.65509415]
[130.79589844 49.32302856]
[140.36183167 37.76911163]
[149.92774963 26.21519089]
[155.28942871 12.20618057]
[155.88203430 -2.78210902]
[156.47463989 -17.77039909]
[157.06723022 -32.75868988]
[143.24955750 -39.09432602]
[132.91189575 -50.23888397]
[127.63066864 -64.49290466]
[128.21122742 -79.68275452]
[134.56503296 -93.49208069]
[145.72319031 -103.81507111]
[159.98414612 -109.07753754]
[175.17320251 -108.47700500]
[188.97416687 -102.10503387]
[199.28247070 -90.93331909]
[204.52618408 -76.66545105]
[203.90565491 -61.47718430]
[197.51554871 -47.68461990]
[186.33027649 -37.39102173]
[172.05552673 -32.16608810]
[171.46292114 -17.17779922]
[170.87031555 -2.18951011]
[170.27772522 12.79877949]
[182.88194275 20.93104553]
[196.29380798 14.21377563]
[209.70568848 7.49650574]
[223.11755371 0.77923596]
[219.78030396 -13.92199421]
[220.05895996 -28.99467850]
[223.93733215 -43.56250763]
[231.18992615 -56.77853012]
[241.39509583 -67.87438202]
[253.95951843 -76.20497131]
[268.15270996 -81.28595734]
[283.14953613 -82.82194519]
[298.07803345 -80.72363281]
[312.07034302 -75.11302185]
[324.31292725 -66.31628418]
[334.09402466 -54.84487534]
[340.84500122 -41.36571121]
[344.17333984 -26.66246223]
[343.88555908 -11.58995056]
[339.99835205 2.97552609]
[332.73773193 16.18714905]
[322.52584839 27.27681351]
[309.95639038 35.59978104]
[295.76010132 40.67216492]
[280.76235962 42.19905853]
[265.83511353 40.09169769]
[251.84623718 34.47259903]
[239.60897827 25.66844749]
[229.83482361 14.19110680]
[216.42295837 20.90837669]
[203.01107788 27.62564659]
[189.59921265 34.34291458]
[174.05088806 40.30320358]
[161.48167419 35.78111649]
[151.91574097 47.33503723]
[142.34982300 58.88895416]
[133.01403809 70.62961578]
[123.91203308 82.55242920]
[114.81002808 94.47525024]
[124.47632599 83.00517273]
[137.15199280 74.98473358]
[151.65643311 71.16094971]
[166.63870239 71.88996124]
[180.70338440 77.10387421]
[192.54049683 86.31706238]
[201.04753113 98.67142487]
[205.43217468 113.01628876]
[205.28602600 128.01557922]
[200.62269592 142.27227783]
[191.87654114 154.45852661]
[179.86215210 163.43931580]
[165.69856262 168.37817383]
[150.70492554 168.81510925]
[136.27774048 164.70942688]
[123.76076508 156.44352722]
[114.31980133 144.78727722]
[108.83417511 130.82632446]
[107.81488037 115.86023712]
[108.11123657 130.85731506]
[108.40759277 145.85438538]
[108.70394897 160.85145569]
[109.00030518 175.84852600]
[109.29666901 190.84559631]
[109.59302521 205.84266663]
[109.88938141 220.83975220]
[110.18573761 235.83682251]
[112.75662994 255.04724121]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 157]
[2 156]
[3 155]
[4 154]
[5 153]
[6 152]
[7 151]
[8 150]
[9 149]
[10 60]
[11 59]
[12 58]
[13 55]
[14 54]
[15 53]
[16 52]
[17 51]
[25 44]
[26 43]
[27 42]
[28 41]
[62 130]
[63 129]
[64 128]
[67 127]
[68 126]
[69 125]
[70 91]
[71 90]
[72 89]
[73 88]
[92 123]
[93 122]
[94 121]
[95 120]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
