%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:43 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGUGCACAGCCACUUUCCACACAGACAUCAUAACAAAAAAUUUCCACCAAACCCCCCCUCCCCxxxxxxxxxxAACUCUACCUCUCUAUACUAAUCUCCCUACAAAUCUCCUUAAUUAUAACAUUCACAGCCACCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[138.89060974 103.13727570]
[123.98616028 104.82767487]
[109.08171082 106.51807404]
[94.19540405 108.36139679]
[79.32880402 110.35745239]
[64.46220398 112.35351562]
[49.59560776 114.34957123]
[34.72900772 116.34562683]
[19.86240959 118.34168243]
[4.99581146 120.33773804]
[-9.87078667 122.33379364]
[-9.79081726 137.35450745]
[-11.63236618 152.26213074]
[-15.36519146 166.81184387]
[-20.92799950 180.76475525]
[-28.22944069 193.89172363]
[-37.14962387 205.97718811]
[-47.54206467 216.82272339]
[-59.23611450 226.25021362]
[-72.03974915 234.10484314]
[-85.74271393 240.25765991]
[-100.11999512 244.60760498]
[-114.93550873 247.08326721]
[-129.94596863 247.64396667]
[-144.90489197 246.28051758]
[-159.56663513 243.01531982]
[-173.69044495 237.90196228]
[-187.04438782 231.02442932]
[-199.40917969 222.49563599]
[-210.58178711 212.45567322]
[-220.37875366 201.06936646]
[-228.63917542 188.52369690]
[-235.22744751 175.02468872]
[-240.03533936 160.79400635]
[-242.98394775 146.06532288]
[-244.02481079 131.08050537]
[-243.14086914 116.08560944]
[-240.34661865 101.32686615]
[-235.68795776 87.04662323]
[-229.24137878 73.47938538]
[-221.11273193 60.84793854]
[-211.43551636 49.35969543]
[-200.36862183 39.20330811]
[-188.09379578 30.54555130]
[-174.81257629 23.52859497]
[-160.74307251 18.26766205]
[-146.11631775 14.84914207]
[-131.17248535 13.32917213]
[-116.15697479 13.73270988]
[-101.31636047 16.05312920]
[-86.89432526 20.25232697]
[-73.12770081 26.26134872]
[-60.24254227 33.98152161]
[-48.45043945 43.28607178]
[-37.94502640 54.02220917]
[-28.89881706 66.01364136]
[-21.46035194 79.06345367]
[-15.75178146 92.95735168]
[-11.86684418 107.46720123]
[2.99975467 105.47113800]
[17.86635399 103.47508240]
[32.73295212 101.47902679]
[47.59955215 99.48297119]
[62.46614838 97.48691559]
[77.33274841 95.49085999]
[92.19934845 93.49479675]
[99.18315125 89.36340332]
[107.39131165 91.61362457]
[122.29576111 89.92323303]
[137.20021057 88.23283386]
[136.61463928 73.23735809]
[137.13813782 58.23958206]
[138.76782227 43.32142639]
[141.49481201 28.56436920]
[145.30419922 14.04900742]
[150.17520142 -0.14538011]
[156.08119202 -13.94126797]
[162.98991394 -27.26330757]
[170.86364746 -40.03873444]
[179.65937805 -52.19777679]
[189.32907104 -63.67402649]
[199.81990051 -74.40480042]
[211.07460022 -84.33148956]
[223.03167725 -93.39987946]
[235.62580872 -101.56043243]
[248.78825378 -108.76859283]
[262.44708252 -114.98498535]
[276.52770996 -120.17565918]
[290.95324707 -124.31225586]
[305.64486694 -127.37219238]
[320.52236938 -129.33874512]
[335.50445557 -130.20120239]
[350.50933838 -129.95480347]
[365.45504761 -128.60093689]
[380.25997925 -126.14698792]
[394.84323120 -122.60635376]
[409.12515259 -117.99836731]
[423.02777100 -112.34820557]
[436.47515869 -105.68672180]
[449.39382935 -98.05030060]
[461.71325684 -89.48065186]
[473.36614990 -80.02458191]
[484.28887939 -69.73373413]
[494.42175293 -58.66431427]
[503.70944214 -46.87678146]
[512.10119629 -34.43551254]
[519.55126953 -21.40846443]
[526.01885986 -7.86678123]
[531.46875000 6.11557293]
[535.87109375 20.46223259]
[539.20184326 35.09483719]
[541.44287109 49.93347168]
[542.58190918 64.89708710]
[542.61273193 79.90396118]
[541.53515625 94.87213135]
[539.35504150 109.71984100]
[536.08435059 124.36599731]
[531.74096680 138.73060608]
[526.34857178 152.73521423]
[519.93658447 166.30334473]
[512.54010010 179.36087036]
[504.19946289 191.83648682]
[494.96023560 203.66204834]
[484.87289429 214.77296448]
[473.99252319 225.10858154]
[462.37854004 234.61241150]
[450.09439087 243.23255920]
[437.20718384 250.92195129]
[423.78726196 257.63858032]
[409.90795898 263.34576416]
[395.64505005 268.01235962]
[381.07647705 271.61282349]
[366.28173828 274.12756348]
[351.34173584 275.54275513]
[336.33798218 275.85073853]
[321.35247803 275.04983521]
[306.46701050 273.14434814]
[291.76293945 270.14477539]
[277.32055664 266.06741333]
[263.21875000 260.93460083]
[249.53450012 254.77433777]
[236.34259033 247.62026978]
[223.71504211 239.51148987]
[211.72084045 230.49226379]
[200.42549133 220.61186218]
[189.89068604 209.92425537]
[180.17396545 198.48780823]
[171.32838440 186.36497498]
[163.40226746 173.62197876]
[156.43891907 160.32841492]
[150.47633362 146.55688477]
[145.54710388 132.38261414]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 70]
[2 69]
[3 68]
[4 66]
[5 65]
[6 64]
[7 63]
[8 62]
[9 61]
[10 60]
[11 59]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
