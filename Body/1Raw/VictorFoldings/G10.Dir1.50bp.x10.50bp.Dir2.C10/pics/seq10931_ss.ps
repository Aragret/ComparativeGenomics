%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:22 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGGAAAAUAGCCCACUAAUCCAAACUCUAACACUAUGCUUAGGCGCUAUCACCACUCUGUUCGxxxxxxxxxxUUCUCACCCUAACAGGUCAACCUCGCUUCCCCACCCUUACUAACAUUAACGAAAAUAACCCCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[171.09320068 294.29003906]
[170.16979980 279.31851196]
[169.24638367 264.34695435]
[168.32296753 249.37539673]
[167.39955139 234.40385437]
[166.47613525 219.43229675]
[165.55271912 204.46075439]
[160.27798462 190.41877747]
[151.11604309 178.54194641]
[141.95411682 166.66513062]
[132.79217529 154.78829956]
[123.63024139 142.91148376]
[114.46830750 131.03465271]
[86.33010864 131.39451599]
[67.42447662 110.55069733]
[52.48846436 111.93472290]
[37.55245209 113.31874847]
[22.61643982 114.70277405]
[7.68042803 116.08679962]
[0.29968706 127.39760590]
[-12.07473564 132.30218506]
[-24.82116890 129.21072388]
[-33.31726456 119.47579956]
[-48.27854538 120.55286407]
[-63.23982620 121.62993622]
[-78.20110321 122.70700836]
[-87.25175476 131.95306396]
[-99.77616882 132.51023865]
[-109.00077057 124.62551117]
[-123.98101044 125.39516449]
[-129.41375732 139.62208557]
[-140.16802979 150.40473938]
[-154.38056946 155.87496948]
[-169.58898926 155.08502197]
[-183.15832520 148.17178345]
[-192.73760986 136.33297729]
[-196.66717529 121.61977386]
[-194.26618958 106.58131409]
[-185.95066833 93.82310486]
[-173.16128540 85.55558777]
[-158.11392212 83.21115112]
[-143.41558838 87.19599152]
[-131.61286926 96.81970215]
[-124.75067139 110.41492462]
[-109.77043152 109.64526367]
[-95.61677551 99.31478882]
[-79.27817535 107.74572754]
[-64.31689453 106.66865540]
[-49.35561371 105.59158325]
[-34.39433289 104.51451874]
[-23.97199440 91.35100555]
[-6.92130852 89.73679352]
[6.29640245 101.15078735]
[21.23241615 99.76676178]
[36.16842651 98.38273621]
[51.10443878 96.99871063]
[66.04045105 95.61468506]
[68.48123169 86.61907196]
[73.25749207 78.61495972]
[80.01530457 72.19543457]
[88.25395203 67.83616638]
[97.36294556 65.86017609]
[99.51152802 51.01485062]
[97.63707733 42.01028442]
[101.85964966 35.88801956]
[104.31257629 21.08994102]
[106.76550293 6.29186153]
[109.21842957 -8.50621796]
[111.67135620 -23.30429649]
[97.92739105 -29.53051186]
[86.26381683 -39.10252380]
[77.47587585 -51.36769867]
[72.16274261 -65.48977661]
[70.68668365 -80.50588989]
[73.14833832 -95.39221191]
[79.37985992 -109.13378143]
[88.95637512 -120.79365540]
[101.22493744 -129.57685852]
[115.34906769 -134.88453674]
[130.36575317 -136.35479736]
[145.25112915 -133.88740540]
[158.99028015 -127.65057373]
[170.64645386 -118.06955719]
[179.42492676 -105.79759979]
[184.72714233 -91.67142487]
[186.19160461 -76.65417480]
[183.71846008 -61.76975250]
[177.47633362 -48.03300858]
[167.89082336 -36.38052750]
[155.61547852 -27.60680008]
[141.48724365 -22.31003380]
[126.46943665 -20.85136795]
[124.01651001 -6.05328989]
[121.56358337 8.74478912]
[119.11065674 23.54286766]
[116.65772247 38.34094620]
[114.35684967 53.16342926]
[112.20827484 68.00875092]
[118.02793121 70.88856506]
[123.19931030 74.81520844]
[127.53646851 79.64748383]
[130.88342285 85.21162415]
[133.11982727 91.30754089]
[134.16526794 97.71603394]
[133.98213196 104.20666504]
[132.57704163 110.54602051]
[130.00048828 116.50614166]
[126.34513092 121.87271881]
[135.50706482 133.74954224]
[144.66900635 145.62637329]
[153.83093262 157.50318909]
[162.99287415 169.38002014]
[172.15480042 181.25683594]
[170.63206482 166.33433533]
[172.08786011 151.40513611]
[176.46475220 137.05792236]
[183.59017944 123.85836792]
[193.18319702 112.32692719]
[204.86555481 102.91828918]
[218.17663574 96.00342560]
[232.59156799 91.85497284]
[247.54199219 90.63651276]
[262.43844604 92.39609528]
[276.69351196 97.06432343]
[289.74520874 104.45714569]
[301.07882690 114.28305817]
[310.24755859 126.15464020]
[316.88986206 139.60380554]
[320.74383545 154.10025024]
[321.65750122 169.07238770]
[319.59484863 183.92990112]
[314.63723755 198.08694458]
[306.98010254 210.98532104]
[296.92535400 222.11647034]
[284.86947632 231.04147339]
[271.28781128 237.40844727]
[256.71588135 240.96632385]
[241.72821045 241.57484436]
[226.91580200 239.20999146]
[212.86268616 233.96502686]
[200.12295532 226.04673767]
[189.19892883 215.76734924]
[180.52427673 203.53733826]
[181.44769287 218.50888062]
[182.37110901 233.48043823]
[183.29450989 248.45198059]
[184.21792603 263.42352295]
[185.14134216 278.39508057]
[186.06475830 293.36663818]
[195.56918335 306.73068237]
[188.50267029 321.52920532]
[172.13462830 322.53875732]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 149]
[2 148]
[3 147]
[4 146]
[5 145]
[6 144]
[7 143]
[8 113]
[9 112]
[10 111]
[11 110]
[12 109]
[13 108]
[15 57]
[16 56]
[17 55]
[18 54]
[19 53]
[23 50]
[24 49]
[25 48]
[26 47]
[29 45]
[30 44]
[62 98]
[63 97]
[65 96]
[66 95]
[67 94]
[68 93]
[69 92]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
