%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:14 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCUCCUACCUAUCUCCCCUUUUAUACUAAUAAUCUUAUAGAAAUUUAGGUUAAAUACAGACxxxxxxxxxxUGGGAGAACUCUCUGUGCUAGUAACCACGUUCUCCUGAUCAAAUAUCACUCUCCUACUUACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[137.09440613 271.14505005]
[137.09440613 256.14505005]
[137.09440613 241.14505005]
[137.09440613 226.14505005]
[137.09440613 211.14505005]
[137.09440613 196.14505005]
[137.09440613 181.14505005]
[137.09440613 166.14505005]
[137.09440613 151.14505005]
[137.09440613 136.14505005]
[121.09284210 145.24612427]
[103.55701447 147.91798401]
[86.88205719 144.27610779]
[73.17993927 135.26770020]
[64.01213074 122.48721313]
[60.21501541 107.91429138]
[45.21582413 108.07032776]
[30.21663666 108.22636414]
[15.21744919 108.38240051]
[0.21826032 108.53843689]
[-14.76145363 109.31828308]
[-29.69576073 110.72058105]
[-44.63006973 112.12288666]
[-49.16420364 126.60450745]
[-58.87116623 138.21562195]
[-72.24787903 145.20684814]
[-87.24151611 146.54043579]
[-101.56452179 142.04418945]
[-113.04362488 132.43296814]
[-119.94958496 119.19525146]
[-134.88389587 120.59754944]
[-149.81819153 121.99985504]
[-164.75250244 123.40216064]
[-177.80538940 133.32962036]
[-192.82258606 126.74053955]
[-194.35568237 110.41320801]
[-180.82757568 101.14378357]
[-166.15481567 108.46784973]
[-151.22050476 107.06555176]
[-136.28619385 105.66324615]
[-121.35188293 104.26094055]
[-117.03090668 89.96903992]
[-107.54163361 78.38893127]
[-94.30598450 71.30496979]
[-79.32617188 69.82410431]
[-64.88183594 74.20298767]
[-53.18307877 83.80414581]
[-46.03237152 97.18858337]
[-31.09806442 95.78627777]
[-16.16375732 94.38397217]
[-14.26021671 92.24297333]
[-11.36666489 90.75256348]
[-7.73613358 90.30408478]
[-3.76216149 91.18647003]
[0.06222376 93.53924561]
[15.06141186 93.38320923]
[30.06060028 93.22717285]
[45.05978775 93.07113647]
[60.05897903 92.91510010]
[63.36177826 79.12358093]
[71.45031738 66.81945801]
[83.66895294 57.66415405]
[98.78790283 53.03514481]
[115.12413025 53.82952499]
[130.72836304 60.31813049]
[143.61746216 72.07194519]
[142.68183899 57.10115814]
[128.39558411 51.82641220]
[117.49441528 41.19230270]
[111.86701202 27.04125214]
[112.48835754 11.82501602]
[119.25080872 -1.82009971]
[130.98272705 -11.52999687]
[145.65147400 -15.62237740]
[160.71562195 -13.38821125]
[173.56520081 -5.21458197]
[181.97393799 7.48238087]
[184.48498535 22.50285149]
[180.66328430 37.24444199]
[171.17097473 49.15307999]
[157.65263367 56.16552734]
[158.58825684 71.13632202]
[172.04421997 77.76481628]
[184.48365784 69.38267517]
[196.92311096 61.00053406]
[209.36254883 52.61838913]
[221.80198669 44.23624802]
[234.24142456 35.85410309]
[246.68086243 27.47196007]
[232.81991577 21.73836708]
[228.45602417 7.38718653]
[236.77882385 -5.09203053]
[251.70504761 -6.57798624]
[262.32479858 4.01543331]
[260.87628174 18.94472885]
[274.11886597 11.89959431]
[287.36145020 4.85445976]
[289.38400269 -10.53023529]
[300.08761597 -21.76468468]
[315.35647583 -24.52901077]
[329.31939697 -17.76027489]
[336.60739136 -4.06119585]
[334.41806030 11.30065346]
[323.59323120 22.41832733]
[308.29528809 25.01685333]
[294.40658569 18.09704590]
[281.16400146 25.14217949]
[267.92141724 32.18731689]
[255.06300354 39.91139984]
[242.62356567 48.29354477]
[230.18412781 56.67568588]
[217.74468994 65.05783081]
[205.30525208 73.43997192]
[192.86581421 81.82211304]
[180.42636108 90.20426178]
[182.13905334 105.10616302]
[196.15577698 110.44767761]
[210.17248535 115.78918457]
[224.18919373 121.13069916]
[239.35847473 115.90838623]
[252.82151794 124.63341522]
[254.25062561 140.61268616]
[242.54951477 151.58827209]
[226.69427490 149.14065552]
[218.84768677 135.14741516]
[204.83096313 129.80589294]
[190.81425476 124.46438599]
[176.79754639 119.12287140]
[170.62176514 123.37841797]
[180.36172485 134.78601074]
[190.10168457 146.19360352]
[199.84165955 157.60118103]
[211.54335022 166.98577881]
[210.99862671 181.97587585]
[198.64665222 190.48638916]
[184.44566345 185.65608215]
[179.84432983 171.38072205]
[172.65295410 158.21697998]
[165.46156311 145.05325317]
[158.27018738 131.88951111]
[152.09440613 136.14505005]
[152.09440613 151.14505005]
[152.09440613 166.14505005]
[152.09440613 181.14505005]
[152.09440613 196.14505005]
[152.09440613 211.14505005]
[152.09440613 226.14505005]
[152.09440613 241.14505005]
[152.09440613 256.14505005]
[152.09440613 271.14505005]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[16 59]
[17 58]
[18 57]
[19 56]
[20 55]
[21 50]
[22 49]
[23 48]
[30 41]
[31 40]
[32 39]
[33 38]
[66 82]
[67 81]
[83 115]
[84 114]
[85 113]
[86 112]
[87 111]
[88 110]
[89 109]
[95 108]
[96 107]
[97 106]
[116 128]
[117 127]
[118 126]
[119 125]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
