%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:43 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGAGACCGCAACCUCAACACCACCUUCUUCGACCCCGCCGGAGGAGGAGACCCCAUUCUAUACxxxxxxxxxxCCACAGCACCAAUCCUACCUCCAUCGCUAACCCCACUAAAACACUCACCAAGACCUCAACCCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[126.25621796 307.48196411]
[126.25621796 292.48196411]
[126.25621796 277.48196411]
[126.25621796 262.48196411]
[126.25621796 247.48196411]
[126.25621796 232.48196411]
[126.25621796 217.48196411]
[126.25621796 202.48196411]
[126.25621796 187.48196411]
[126.25621796 172.48196411]
[122.59751129 157.93501282]
[115.50110626 144.71983337]
[95.55229950 147.12075806]
[76.40505981 141.02958679]
[61.51009369 127.54405212]
[48.08264542 134.23013306]
[50.92809296 149.05598450]
[49.66690445 164.09965515]
[44.39266968 178.24479675]
[35.49677658 190.44175720]
[23.63935280 199.78541565]
[9.70030212 205.58242798]
[-5.28600693 207.40263367]
[-20.20749092 205.11093140]
[-33.95687485 198.87739563]
[-45.51386642 189.16459656]
[-54.02085876 176.69326782]
[-58.84657288 162.38890076]
[-59.63291550 147.31295776]
[-56.32152939 132.58416748]
[-49.15814209 119.29550171]
[-38.67432785 108.43308258]
[-25.64805222 100.80296326]
[-11.04595089 96.97135162]
[4.04840088 97.22257996]
[18.51490402 101.53800201]
[31.28004456 109.59738922]
[41.39656830 120.80268097]
[54.82402039 114.11660767]
[52.69376755 98.49392700]
[55.81344986 83.03838348]
[63.83684540 69.46520233]
[75.87354279 59.28069687]
[90.58773041 53.61511993]
[89.97190857 38.62776566]
[78.62947083 27.95130539]
[78.21843719 12.74322510]
[88.46670532 1.99573863]
[87.85088348 -12.99161434]
[87.23505402 -27.97896767]
[86.61923218 -42.96632004]
[86.00341034 -57.95367432]
[85.23374939 -72.93391418]
[84.31033325 -87.90546417]
[83.38691711 -102.87701416]
[82.46350861 -117.84856415]
[67.50444794 -119.33948517]
[52.97830582 -123.21082306]
[39.26133347 -129.36231995]
[26.70883942 -137.63462830]
[15.64595985 -147.81347656]
[6.35925150 -159.63519287]
[-0.91073883 -172.79359436]
[-5.97569990 -186.94783020]
[-8.70443726 -201.73126221]
[-9.02626991 -216.76098633]
[-6.93286180 -231.64768982]
[-2.47843671 -246.00576782]
[4.22162437 -259.46331787]
[12.99377346 -271.67172241]
[23.61079216 -282.31478882]
[35.79767227 -291.11685181]
[49.23874664 -297.84988403]
[63.58585739 -302.33950806]
[78.46737671 -304.46939087]
[93.49784851 -304.18441772]
[108.28793335 -301.49191284]
[122.45454407 -296.46166992]
[135.63072205 -289.22396851]
[147.47517395 -279.96624756]
[157.68110657 -268.92837524]
[165.98416138 -256.39617920]
[172.16926575 -242.69433594]
[176.07620239 -228.17771912]
[177.60379028 -213.22236633]
[176.71244812 -198.21565247]
[173.42526245 -183.54626465]
[167.82739258 -169.59420776]
[160.06382751 -156.72085571]
[150.33564758 -145.25965881]
[138.89486694 -135.50750732]
[126.03781128 -127.71697998]
[112.09751129 -122.08988953]
[97.43505859 -118.77198029]
[98.35846710 -103.80043030]
[99.28188324 -88.82888031]
[100.20529938 -73.85733032]
[103.77818298 -67.33454895]
[100.99076080 -58.56949997]
[101.60658264 -43.58214569]
[102.22241211 -28.59479332]
[102.83823395 -13.60743999]
[103.45406342 1.37991321]
[114.54952240 11.25039196]
[115.38755798 26.44092751]
[104.95925903 38.01194000]
[105.57508850 52.99929428]
[116.46150970 55.62470627]
[126.42639160 60.73431778]
[134.91188049 68.04208374]
[141.44294739 77.13890076]
[145.65397644 87.51552582]
[147.30921936 98.59104156]
[146.31602478 109.74543762]
[142.72998047 120.35427094]
[136.75184631 129.82363892]
[128.71629333 137.62342834]
[135.81269836 150.83860779]
[136.54931641 135.85670471]
[140.78535461 121.46726990]
[148.28364563 108.47590637]
[158.62438965 97.60994720]
[171.22863770 89.47774506]
[185.39074707 84.53459167]
[200.31782532 83.05723572]
[215.17414856 85.12838745]
[229.12797546 90.63208771]
[241.39807129 99.26021576]
[251.29750061 110.52970123]
[258.27203369 123.80961609]
[261.93115234 138.35646057]
[262.07003784 153.35581970]
[258.68087769 167.96792603]
[251.95346069 181.37471008]
[242.26440430 192.82557678]
[230.15617371 201.67941284]
[216.30665588 207.44055176]
[201.49122620 209.78643799]
[186.53935242 208.58573914]
[172.28814697 203.90567017]
[159.53547668 196.00825500]
[148.99530029 185.33563232]
[141.25621033 172.48196411]
[141.25621033 187.48196411]
[141.25621033 202.48196411]
[141.25621033 217.48196411]
[141.25621033 232.48196411]
[141.25621033 247.48196411]
[141.25621033 262.48196411]
[141.25621033 277.48196411]
[141.25621033 292.48196411]
[141.25621033 307.48196411]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 152]
[2 151]
[3 150]
[4 149]
[5 148]
[6 147]
[7 146]
[8 145]
[9 144]
[10 143]
[11 118]
[12 117]
[15 39]
[16 38]
[44 107]
[45 106]
[48 103]
[49 102]
[50 101]
[51 100]
[52 99]
[53 97]
[54 96]
[55 95]
[56 94]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
