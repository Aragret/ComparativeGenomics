%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:27 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGAUUUGCCAUCAUAGGAGGCUUCAUUCACUGAUUUCCCCUAUUCUCAGGCUACACCCUAGAxxxxxxxxxxGAUAAUCAUAUUUACCAAAUGCCCCUCAUUUACAUAAAUAUUAUACUAGCAUUUACCAUCCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[117.56417084 264.90249634]
[117.56417084 249.90251160]
[117.56417084 234.90251160]
[117.56417084 219.90251160]
[117.56417084 204.90251160]
[117.56417084 189.90251160]
[117.56417084 174.90251160]
[117.56417084 159.90251160]
[117.56417084 144.90251160]
[117.56417084 129.90251160]
[110.83618927 126.58825684]
[104.20746613 140.04411316]
[90.75172424 133.41516113]
[97.38022614 119.95976257]
[90.65223694 116.64550781]
[78.75985718 125.78724670]
[66.86747742 134.92898560]
[61.92968750 142.69235229]
[54.63126373 144.13412476]
[42.55127716 153.02647400]
[36.47402954 168.25798035]
[20.20791435 170.34259033]
[10.48611832 157.13581848]
[17.30958939 142.22367859]
[33.65892792 140.94647217]
[45.73891449 132.05412292]
[57.72574615 123.03659821]
[69.61812592 113.89486694]
[81.51050568 104.75312805]
[80.57669830 97.31149292]
[65.75737762 99.63260651]
[53.59309006 108.40928650]
[39.83900452 102.42388153]
[37.97087479 87.54066467]
[49.81902313 78.34168243]
[63.77572632 83.84058380]
[78.70908356 82.42820740]
[77.77528381 74.98657227]
[63.99289703 69.06660461]
[50.21051788 63.14664459]
[36.42813492 57.22668076]
[24.94992065 67.28716278]
[10.24103069 71.36286163]
[-4.77807379 68.64453888]
[-17.12533760 59.67192459]
[-24.34920311 46.22653580]
[-25.01536560 30.97796059]
[-18.99155998 16.95382118]
[-7.47381544 6.93861580]
[7.25101089 2.92087364]
[22.25929451 5.69831896]
[34.57112885 14.71948814]
[41.74198914 28.19322205]
[42.34809875 43.44430161]
[56.13048172 49.36426163]
[69.91286469 55.28422546]
[83.69524384 61.20418930]
[98.40320587 58.25870514]
[108.84301758 47.48789978]
[119.28282928 36.71709061]
[129.72264099 25.94628143]
[115.19398499 29.67697716]
[100.20738983 29.04287148]
[86.04579926 24.09824371]
[73.92151642 15.26638412]
[64.87244415 3.30334592]
[59.67323303 -10.76677132]
[58.76896286 -25.73949051]
[62.23704529 -40.33306503]
[69.78059387 -53.29820633]
[80.75382996 -63.52503204]
[94.21740723 -70.13806915]
[109.01875305 -72.57120514]
[123.89080048 -70.61614990]
[137.56040955 -64.44026947]
[148.85742188 -54.57225037]
[156.81471252 -41.85684967]
[160.75111389 -27.38257408]
[160.32966614 -12.38849545]
[155.58641052 1.84180927]
[146.92506409 14.09262276]
[160.64511108 8.02960968]
[174.30136108 1.82420218]
[187.95759583 -4.38120508]
[201.61383057 -10.58661175]
[215.27008057 -16.79201889]
[218.37437439 -21.14895630]
[222.44686890 -23.59174919]
[226.57820129 -24.07521820]
[229.97718811 -22.92876244]
[243.99389648 -28.27027512]
[258.01062012 -33.61178970]
[272.02734375 -38.95330048]
[286.04403687 -44.29481506]
[292.87567139 -60.36547089]
[308.88989258 -66.43415833]
[324.04791260 -59.21662140]
[337.95046997 -64.84857941]
[351.85302734 -70.48053741]
[365.75558472 -76.11248779]
[379.65814209 -81.74444580]
[387.21191406 -95.89789581]
[403.01278687 -98.67484283]
[414.93969727 -87.94506073]
[413.84335327 -71.93951416]
[400.56472778 -62.93628693]
[385.29010010 -67.84188843]
[371.38754272 -62.20993423]
[357.48498535 -56.57798004]
[343.58242798 -50.94602203]
[329.67987061 -45.31406403]
[326.34744263 -32.82839966]
[316.26901245 -24.43202972]
[302.99807739 -23.37830162]
[291.38555908 -30.27810097]
[277.36883545 -24.93658829]
[263.35214233 -19.59507561]
[249.33541870 -14.25356293]
[235.31871033 -8.91205025]
[221.47547913 -3.13577795]
[207.81924438 3.06962919]
[194.16300964 9.27503586]
[180.50675964 15.48044300]
[166.85052490 21.68585014]
[162.03085327 27.35298157]
[152.84501648 27.87500381]
[140.49345398 36.38609314]
[130.05363464 47.15690231]
[119.61382294 57.92771149]
[109.17401123 68.69851685]
[120.27497101 58.61046600]
[134.37092590 53.48173904]
[149.35910034 54.07742691]
[163.00357056 60.30867004]
[173.26889038 71.24590302]
[178.62371826 85.25753784]
[178.26921082 100.25334930]
[172.25827026 113.99629211]
[161.48757935 124.43623352]
[147.56390381 130.01576233]
[132.56417847 129.90251160]
[132.56417847 144.90251160]
[132.56417847 159.90251160]
[132.56417847 174.90251160]
[132.56417847 189.90251160]
[132.56417847 204.90251160]
[132.56417847 219.90251160]
[132.56417847 234.90251160]
[132.56417847 249.90251160]
[132.56417847 264.90249634]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[15 29]
[16 28]
[17 27]
[19 26]
[20 25]
[38 57]
[39 56]
[40 55]
[41 54]
[58 130]
[59 129]
[60 128]
[61 127]
[81 126]
[82 124]
[83 123]
[84 122]
[85 121]
[86 120]
[90 119]
[91 118]
[92 117]
[93 116]
[94 115]
[97 111]
[98 110]
[99 109]
[100 108]
[101 107]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
