%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:10 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGUUCUAGCCACCUCUAGCCUAGCCGUUUACUCAAUCCUCUGAUCAGGGUGAGCAUCAAACUxxxxxxxxxxCUUCGAGUCUCCCUUCACCAUUUCCGACGGCAUCUACGGCUCAACAUUUUUUGUAGCCACCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[122.92327118 579.05010986]
[122.92327118 564.05010986]
[122.92327118 549.05010986]
[122.92327118 534.05010986]
[122.92327118 519.05010986]
[122.92327118 504.05007935]
[122.92327118 489.05007935]
[122.92327118 474.05007935]
[122.92327118 459.05007935]
[122.92327118 444.05007935]
[107.85276794 440.93145752]
[93.74864960 434.75946045]
[81.22240448 425.79919434]
[70.81764984 414.43664551]
[62.98652649 401.16207886]
[58.07004547 386.54898071]
[56.28325272 371.22918701]
[57.70581055 355.86566162]
[62.27846146 341.12365723]
[69.80548859 327.64202881]
[79.96308899 316.00555420]
[92.31330109 306.71948242]
[106.32289124 300.18771362]
[121.38637543 296.69506836]
[120.45074463 281.72427368]
[118.89316559 266.80535889]
[117.33557892 251.88645935]
[115.77799988 236.96754456]
[114.06530762 222.06564331]
[112.19770050 207.18235779]
[109.86659241 192.36460876]
[107.07427216 177.62680054]
[104.28194427 162.88899231]
[101.48962402 148.15118408]
[98.69729614 133.41337585]
[81.99552917 129.74131775]
[68.69561768 117.96729279]
[62.58274078 100.58592224]
[65.80512238 81.77261353]
[51.90256882 76.14066315]
[39.69985580 80.44736481]
[28.21256256 75.42132568]
[23.41296387 64.27362823]
[9.63058376 58.35366440]
[-4.15179777 52.43370438]
[-20.36459541 54.89890671]
[-30.39320183 41.92358017]
[-23.92104530 26.85562515]
[-7.60612583 25.19566536]
[1.76816511 38.65132141]
[15.55054665 44.57128525]
[29.33292770 50.49124908]
[46.59115219 47.46575165]
[57.53452682 62.23810577]
[71.43708038 67.87006378]
[84.21443939 60.01263428]
[85.46131134 45.06454849]
[86.70819092 30.11646080]
[87.95506287 15.16837406]
[89.20193481 0.22028744]
[74.65894318 -3.61017513]
[61.00212097 -9.90798092]
[48.64648819 -18.48174667]
[37.96751785 -29.07092476]
[29.28973198 -41.35372543]
[22.87683678 -54.95688248]
[18.92371559 -69.46701050]
[17.55049706 -84.44317627]
[18.79891205 -99.43025208]
[22.63102341 -113.97281647]
[28.93037796 -127.62892151]
[37.50554657 -139.98358154]
[48.09593582 -150.66134644]
[60.37971878 -159.33775330]
[73.98360443 -165.74909973]
[88.49418640 -169.70057678]
[103.47049713 -171.07209778]
[118.45743561 -169.82197571]
[132.99955750 -165.98822021]
[146.65495300 -159.68731689]
[159.00863647 -151.11074829]
[169.68521118 -140.51914978]
[178.36021423 -128.23437500]
[184.77001953 -114.62976837]
[188.71984863 -100.11873627]
[190.08967590 -85.14226532]
[188.83786011 -70.15547180]
[185.00245667 -55.61378098]
[178.69999695 -41.95910263]
[170.12202454 -29.60638809]
[159.52922058 -18.93102074]
[147.24346924 -10.25741291]
[133.63812256 -3.84914637]
[119.12664795 0.09903885]
[104.15002441 1.46716201]
[102.90315247 16.41524887]
[101.65627289 31.36333656]
[100.40940094 46.31142426]
[99.16252899 61.25951004]
[112.05651855 63.87299728]
[123.11569214 70.57111359]
[131.11885071 80.43554688]
[135.24346924 92.20992279]
[135.14863586 104.45874023]
[130.99827576 115.74208832]
[123.42422485 124.78495026]
[113.43510437 130.62104797]
[116.22742462 145.35885620]
[119.01975250 160.09666443]
[121.81207275 174.83447266]
[124.60440063 189.57228088]
[128.10154724 193.62068176]
[129.50964355 198.15605164]
[129.00027466 202.28427124]
[127.08097839 205.31474304]
[128.94859314 220.19802856]
[133.14630127 228.38528442]
[130.69691467 235.40995789]
[132.25448608 250.32887268]
[133.81207275 265.24780273]
[135.36965942 280.16668701]
[138.14370728 283.69744873]
[139.47407532 287.54467773]
[139.44305420 291.20266724]
[138.29277039 294.24746704]
[136.38313293 296.38302612]
[150.78584290 299.01339722]
[164.38879395 304.41439819]
[176.66482544 312.37457275]
[187.13858032 322.58340454]
[195.40495300 334.64331055]
[201.14477539 348.08514404]
[204.13706970 362.38650513]
[204.26763916 376.99200439]
[201.53337097 391.33477783]
[196.04229736 404.85861206]
[188.00930786 417.03942871]
[177.74778748 427.40554810]
[165.65734863 435.55609131]
[152.20828247 441.17639160]
[137.92327881 444.05007935]
[137.92327881 459.05007935]
[137.92327881 474.05007935]
[137.92327881 489.05007935]
[137.92327881 504.05007935]
[137.92327881 519.05010986]
[137.92327881 534.05010986]
[137.92327881 549.05010986]
[137.92327881 564.05010986]
[137.92327881 579.05010986]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[24 126]
[25 121]
[26 120]
[27 119]
[28 118]
[29 116]
[30 115]
[31 111]
[32 110]
[33 109]
[34 108]
[35 107]
[39 55]
[40 54]
[43 52]
[44 51]
[45 50]
[56 99]
[57 98]
[58 97]
[59 96]
[60 95]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
