%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:16 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGGCUUACCUCCUCAAAGCAAUACACUGAAAAUGUUUAGACGGGCUCACAUCACCCCAUAAACAAxxxxxxxxxxCAAACCCCCUGAAGCUUCACCGGCGCAGUCAUUCUCAUAAUCGCCCACGGGCUUACAUCCUCACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[92.50000000 253.55958557]
[92.50000000 238.55958557]
[92.50000000 223.55958557]
[92.50000000 208.55958557]
[92.50000000 193.55958557]
[92.50000000 178.55958557]
[92.50000000 163.55958557]
[92.50000000 148.55958557]
[92.50000000 133.55958557]
[92.50000000 118.55959320]
[78.57110596 112.99310303]
[68.23309326 123.86165619]
[57.89508057 134.73020935]
[47.55706787 145.59877014]
[51.31220245 160.56213379]
[46.35976791 175.17298889]
[34.28006744 184.76904297]
[18.92768860 186.28825378]
[5.20151806 179.24581909]
[-2.51847076 165.88897705]
[-1.76885831 150.47982788]
[7.21115685 137.93539429]
[21.55608559 132.25854492]
[36.68851089 135.26075745]
[47.02652359 124.39219666]
[57.36453629 113.52364349]
[67.70254517 102.65509033]
[54.95217514 110.55622864]
[40.03319931 108.99925232]
[29.18897057 98.63572693]
[26.95762062 83.80261993]
[34.27293396 70.70734406]
[48.07357025 64.83006287]
[62.58418655 68.63032532]
[71.73273468 80.51897430]
[65.88865662 66.70424652]
[60.04457855 52.88951492]
[54.20050049 39.07478333]
[49.08938599 36.08009720]
[45.94471741 31.63491249]
[45.02036667 26.75326157]
[33.45502090 17.20115662]
[21.88967133 7.64905024]
[10.32432461 -1.90305579]
[-1.24102366 -11.45516205]
[-12.80637169 -21.00726700]
[-26.01240730 -18.19335938]
[-38.24232101 -23.43934822]
[-45.10092926 -34.61523438]
[-44.26526260 -47.50586700]
[-55.63716888 -57.28746796]
[-67.00907135 -67.06906891]
[-81.76595306 -62.57039642]
[-96.60617065 -66.78602600]
[-106.79426575 -78.37076569]
[-109.07925415 -93.62797546]
[-102.73200226 -107.68912506]
[-89.77790070 -116.06735992]
[-74.35055542 -116.08921051]
[-61.37276840 -107.74771118]
[-54.98571396 -93.70459747]
[-57.22747040 -78.44097900]
[-45.85556412 -68.65937805]
[-34.48365784 -58.87777328]
[-17.80940628 -60.86757278]
[-4.57761240 -49.98904037]
[-3.25426579 -32.57261658]
[8.31108189 -23.02050972]
[19.87643051 -13.46840382]
[31.44177818 -3.91629767]
[43.00712585 5.63580799]
[54.57247543 15.18791389]
[49.22721481 1.17262995]
[47.07577515 -13.67227840]
[48.22227478 -28.62839890]
[52.61122894 -42.97193527]
[60.03023529 -56.00874329]
[70.12025452 -67.10791016]
[82.39299011 -75.73229218]
[96.25450134 -81.46452332]
[111.03397369 -84.02719879]
[126.01615143 -83.29628754]
[140.47598267 -79.30716705]
[153.71371460 -72.25289154]
[165.08866882 -62.47484207]
[174.05039978 -50.44623184]
[180.16517639 -36.74917221]
[183.13711548 -22.04653168]
[182.82234192 -7.04983473]
[179.23612976 7.51516056]
[172.55203247 20.94358826]
[163.09349060 32.58558273]
[151.31826782 41.87774277]
[137.79621887 48.37036896]
[123.18173981 51.74925995]
[108.18208313 51.85089493]
[93.52315521 48.67035675]
[79.91436768 42.36156082]
[68.01522827 33.23070526]
[73.85930634 47.04543686]
[79.70338440 60.86016464]
[85.54746246 74.67489624]
[128.96913147 82.45352173]
[143.96838379 82.60359955]
[158.96763611 82.75366974]
[173.96463013 82.45353699]
[188.94586182 81.70346832]
[203.92709351 80.95340729]
[194.98126221 68.91296387]
[198.61851501 54.36063385]
[212.17729187 47.94506073]
[225.73597717 54.36083984]
[229.37300110 68.91323090]
[220.42723083 80.95340729]
[235.40846252 81.70346832]
[250.38969421 82.45353699]
[263.20364380 72.80044556]
[278.70355225 76.93957520]
[284.99923706 91.69573212]
[277.26113892 105.74925995]
[261.42532349 108.31949615]
[249.63963318 97.43477631]
[234.65840149 96.68470764]
[219.67716980 95.93463898]
[204.67716980 95.93463898]
[189.69592285 96.68470764]
[174.71469116 97.43477631]
[172.06785583 99.84362030]
[168.10221863 101.06091309]
[163.40449524 100.47171783]
[158.81755066 97.75292206]
[143.81831360 97.60284424]
[128.81906128 97.45277405]
[123.48929596 102.72947693]
[136.58042908 110.05220032]
[149.67155457 117.37493134]
[164.32533264 120.57911682]
[174.46615601 131.63189697]
[176.39973450 146.50674438]
[169.42169189 159.78480530]
[156.07409668 166.62890625]
[141.21945190 164.54576111]
[130.26927185 154.29425049]
[127.21253204 139.61036682]
[120.02114868 126.44662476]
[112.82976532 113.28289032]
[107.50000000 118.55959320]
[107.50000000 133.55958557]
[107.50000000 148.55958557]
[107.50000000 163.55958557]
[107.50000000 178.55958557]
[107.50000000 193.55958557]
[107.50000000 208.55958557]
[107.50000000 223.55958557]
[107.50000000 238.55958557]
[107.50000000 253.55958557]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 156]
[2 155]
[3 154]
[4 153]
[5 152]
[6 151]
[7 150]
[8 149]
[9 148]
[10 147]
[11 27]
[12 26]
[13 25]
[14 24]
[35 102]
[36 101]
[37 100]
[38 99]
[41 72]
[42 71]
[43 70]
[44 69]
[45 68]
[46 67]
[50 64]
[51 63]
[52 62]
[103 133]
[104 132]
[105 131]
[106 127]
[107 126]
[108 125]
[114 124]
[115 123]
[116 122]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
