%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:15 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGUUCUUCAUAGUAAUACCCAUCAUAAUCGGAGGCUUUGGCAACUGACUAGUUCCCCUAAUAAUxxxxxxxxxxAGUGCGGCUUCGACCCUAUAUCCCCCGCCCGCGUCCCUUUCUCCAUAAAAUUCUUCUUAGUACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[254.30505371 273.82635498]
[243.02328491 263.94091797]
[231.74151611 254.05549622]
[217.07000732 251.48722839]
[211.78973389 236.57316589]
[200.50796509 226.68774414]
[189.22619629 216.80230713]
[177.94442749 206.91688538]
[166.66265869 197.03146362]
[155.38087463 187.14604187]
[144.09910583 177.26062012]
[142.13015747 192.13082886]
[129.38488770 200.04017639]
[115.18618774 195.20312500]
[109.92015076 181.15788269]
[117.43877411 168.17826843]
[132.24186707 165.75849915]
[122.01806641 154.78242493]
[111.79427338 143.80636597]
[101.57047272 132.83030701]
[86.81934357 130.10922241]
[73.35227966 136.71513367]
[72.39546967 152.04420471]
[63.88895798 164.83227539]
[50.12094116 171.63941956]
[34.79495621 170.63458252]
[22.03361130 162.08801270]
[15.26964569 148.29873657]
[16.32253075 132.97596741]
[24.90904617 120.24147797]
[38.71946335 113.52076721]
[54.03884888 114.62168121]
[66.74636841 123.24806976]
[80.21343231 116.64215851]
[77.09490204 100.00273895]
[84.72511292 87.15878296]
[77.71289062 73.89874268]
[70.70066071 60.63870621]
[63.68843079 47.37866592]
[56.67620087 34.11862564]
[49.66397095 20.85858727]
[36.37284470 12.27624607]
[37.26287079 -2.59174371]
[27.84276581 -14.26486015]
[16.36296463 -23.91960716]
[0.82130224 -26.88057327]
[-3.93902397 -40.99399185]
[-15.41882610 -50.64873886]
[-33.59632874 -53.41613007]
[-38.98749542 -70.09016418]
[-50.66061020 -79.51026154]
[-62.33372879 -88.93036652]
[-74.00684357 -98.35047150]
[-90.28332520 -100.35255432]
[-96.43774414 -115.55305481]
[-86.13896179 -128.31500244]
[-69.98149109 -125.50999451]
[-64.58673859 -110.02359009]
[-52.91362381 -100.60348511]
[-41.24050903 -91.18338013]
[-29.56739235 -81.76327515]
[-17.47248840 -82.72844696]
[-7.66272116 -74.92501831]
[-5.76407957 -62.12854004]
[5.71572256 -52.47379303]
[20.43627167 -50.20339966]
[26.01771164 -35.39941025]
[37.49751282 -25.74466324]
[32.66082001 -39.94347763]
[32.14293671 -54.93453598]
[35.98824692 -69.43328094]
[43.86724854 -82.19734955]
[55.10480499 -92.13300323]
[68.73799896 -98.38888550]
[83.59862518 -100.42893982]
[98.41329956 -98.07836151]
[111.91259766 -91.53855896]
[122.93978882 -81.36992645]
[130.54995728 -68.44377899]
[134.09103394 -53.86774445]
[133.25956726 -38.89080811]
[128.12680054 -24.79631042]
[119.13256836 -12.79198742]
[107.04756165 -3.90646052]
[92.90731812 1.09888589]
[77.92348480 1.79515409]
[63.38000488 -1.87731779]
[50.52290726 -9.60397243]
[63.31247330 -1.97007930]
[62.92401123 13.84635735]
[69.93624115 27.10639763]
[76.94847107 40.36643600]
[83.96070099 53.62647629]
[90.97292328 66.88651276]
[97.98515320 80.14655304]
[115.89103699 84.89888763]
[123.61251831 103.61952972]
[112.54653931 122.60650635]
[122.77033234 133.58256531]
[132.99412537 144.55863953]
[143.21792603 155.53469849]
[153.98452759 165.97885132]
[165.26631165 175.86427307]
[176.54808044 185.74969482]
[187.82984924 195.63511658]
[199.11161804 205.52053833]
[210.39338684 215.40596008]
[221.67517090 225.29139709]
[237.15362549 228.56672668]
[241.62693787 242.77372742]
[252.90870667 252.65914917]
[264.19049072 262.54458618]
[275.56756592 252.73089600]
[288.19973755 244.59616089]
[301.84118652 238.29873657]
[316.22628784 233.96119690]
[331.07510376 231.66795349]
[346.09857178 231.46366882]
[361.00424194 233.35231018]
[375.50198364 237.29710388]
[389.30960083 243.22128296]
[402.15832520 251.00952148]
[413.79803467 260.51022339]
[424.00216675 271.53845215]
[432.57211304 283.87954712]
[439.34100342 297.29327393]
[444.17715454 311.51852417]
[446.98635864 326.27841187]
[447.71398926 341.28564453]
[446.34585571 356.24807739]
[442.90859985 370.87445068]
[437.46911621 384.88009644]
[430.13330078 397.99237061]
[421.04391479 409.95605469]
[410.37792969 420.53823853]
[398.34292603 429.53298950]
[385.17321777 436.76516724]
[371.12509155 442.09399414]
[356.47204590 445.41580200]
[341.49929810 446.66589355]
[326.49829102 445.81991577]
[311.76101685 442.89434814]
[297.57434082 437.94616699]
[284.21441650 431.07168579]
[271.94131470 422.40469360]
[260.99389648 412.11389160]
[251.58529663 400.39959717]
[243.89863586 387.48986816]
[238.08355713 373.63595581]
[234.25321960 359.10754395]
[232.48219299 344.18743896]
[232.80497742 329.16604614]
[235.21525574 314.33578491]
[239.66612244 299.98532104]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 112]
[2 111]
[3 110]
[5 108]
[6 107]
[7 106]
[8 105]
[9 104]
[10 103]
[11 102]
[17 101]
[18 100]
[19 99]
[20 98]
[21 34]
[22 33]
[36 95]
[37 94]
[38 93]
[39 92]
[40 91]
[41 90]
[43 88]
[44 68]
[45 67]
[47 65]
[48 64]
[50 61]
[51 60]
[52 59]
[53 58]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
