%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:03 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCCACCCUAACCCUGACUUCCCUAAUUCCCCCCAUCCUUACCACCCUCGUUAACCCUAACAxxxxxxxxxxUGGGACAGACCUAGUUCAAUGAAUCUGAGGAGGCUACUCAGUAGACAGUCCCACCCUCACCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[75.01635742 425.38729858]
[75.01635742 410.38729858]
[75.01635742 395.38729858]
[75.01635742 380.38729858]
[75.01635742 365.38729858]
[75.01635742 350.38729858]
[75.01635742 335.38729858]
[75.01635742 320.38729858]
[75.01635742 305.38729858]
[75.01635742 290.38729858]
[61.82257462 287.41683960]
[49.54376602 281.73263550]
[38.73141861 273.58697510]
[29.87181664 263.34265137]
[23.36414337 251.45701599]
[19.50251770 238.46139526]
[18.46269035 224.93745422]
[20.29404831 211.49110413]
[24.91728592 198.72537231]
[32.12781906 187.21333313]
[41.60485077 177.47244263]
[52.92563248 169.94122314]
[65.58433533 164.95953369]
[79.01463318 162.75325012]
[79.95026398 147.78245544]
[80.88588715 132.81167603]
[81.82151794 117.84088135]
[87.23049927 88.46632385]
[83.52433777 73.93138885]
[79.81817627 59.39645386]
[68.64987946 57.29432678]
[59.10746002 50.49032211]
[53.12708664 40.00015640]
[52.07159042 27.61450577]
[56.43189621 15.59494591]
[65.68267059 6.26098680]
[56.91646576 -5.91085005]
[48.15025711 -18.08268738]
[39.38405228 -30.25452423]
[26.06631851 -23.29616547]
[11.89383602 -18.30402184]
[-2.84486413 -15.37973022]
[-17.84972000 -14.58282280]
[-32.81525421 -15.92952538]
[-47.43678284 -19.39241982]
[-61.41663361 -24.90100670]
[-74.47019196 -32.34313583]
[-86.33171082 -41.56729889]
[-96.75969696 -52.38570023]
[-105.54185486 -64.57809448]
[-112.49938965 -77.89625549]
[-117.49065399 -92.06905365]
[-120.41403961 -106.80792999]
[-121.21001434 -121.81283569]
[-119.86238861 -136.77828979]
[-116.39859009 -151.39959717]
[-110.88913727 -165.37910461]
[-103.44619751 -178.43220520]
[-94.22129822 -190.29315186]
[-83.40225220 -200.72047424]
[-71.20932007 -209.50187683]
[-57.89072418 -216.45858765]
[-43.71762085 -221.44897461]
[-28.97856140 -224.37144470]
[-13.97360611 -225.16648865]
[0.99175900 -223.81794739]
[15.61285973 -220.35324097]
[29.59202957 -214.84292603]
[42.64466858 -207.39916992]
[54.50504303 -198.17353821]
[64.93169403 -187.35385132]
[73.71234131 -175.16036987]
[80.66822815 -161.84133911]
[85.65773773 -147.66793823]
[88.57929230 -132.92869568]
[89.37341309 -117.92369080]
[88.02393341 -102.95840454]
[84.55832672 -88.33752441]
[79.04714203 -74.35869598]
[71.60259247 -61.30651474]
[62.37622833 -49.44670868]
[51.55588913 -39.02073288]
[60.32209396 -26.84889412]
[69.08830261 -14.67705727]
[77.85450745 -2.50522065]
[92.73779297 -0.63760746]
[104.23959351 -10.26613331]
[115.74139404 -19.89465904]
[127.24320221 -29.52318573]
[112.86180878 -33.78647995]
[107.03129578 -47.60693741]
[114.01328278 -60.88292694]
[128.70451355 -63.91076660]
[140.36688232 -54.47735596]
[140.47640991 -39.47835159]
[152.91586304 -47.86049652]
[165.35530090 -56.24263763]
[175.11187744 -70.10790253]
[191.13616943 -64.57089996]
[190.25152588 -47.64005280]
[173.73744202 -43.80319977]
[161.29800415 -35.42105484]
[148.85856628 -27.03891182]
[136.87171936 -18.02138329]
[125.36992645 -8.39285660]
[113.86811829 1.23566973]
[102.36631775 10.86419582]
[109.31546021 36.48855591]
[94.35311127 55.69029236]
[98.05927277 70.22522736]
[101.76543427 84.76016235]
[112.42706299 95.31145477]
[127.66773224 91.06498718]
[138.19883728 101.59803772]
[152.77153015 105.15280151]
[167.34423828 108.70756531]
[181.91693115 112.26232147]
[198.73776245 110.14184570]
[205.43182373 125.71829224]
[192.31721497 136.46275330]
[178.36218262 126.83502960]
[163.78947449 123.28026581]
[149.21676636 119.72550201]
[134.64407349 116.17073822]
[120.44573212 120.67147064]
[108.87229919 109.88415527]
[96.79231262 118.77650452]
[95.85668182 133.74729919]
[94.92105103 148.71809387]
[93.98542023 163.68888855]
[109.76792908 168.76184082]
[123.71969604 177.69656372]
[134.91574097 189.89447021]
[142.61540222 204.54080200]
[146.31129456 220.65910339]
[145.76274109 237.17633057]
[141.01150513 252.99420166]
[132.37858582 267.06231689]
[120.44255829 278.44790649]
[106.00083923 286.39758301]
[90.01635742 290.38729858]
[90.01635742 305.38729858]
[90.01635742 320.38729858]
[90.01635742 335.38729858]
[90.01635742 350.38729858]
[90.01635742 365.38729858]
[90.01635742 380.38729858]
[90.01635742 395.38729858]
[90.01635742 410.38729858]
[90.01635742 425.38729858]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[24 130]
[25 129]
[26 128]
[27 127]
[28 111]
[29 110]
[30 109]
[36 85]
[37 84]
[38 83]
[39 82]
[86 107]
[87 106]
[88 105]
[89 104]
[95 103]
[96 102]
[97 101]
[112 126]
[114 124]
[115 123]
[116 122]
[117 121]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
