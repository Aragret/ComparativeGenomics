%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:16 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGACAGACCAAGAGCCUUCAAAGCCCUCAGUAAGUUGCAAUACUUAAUUUCUGUAACAGCUAxxxxxxxxxxCCAACACACUAACCAUAUACCAAUGAUGGCGCGAUGUAACACGAGAAAGCACAUACCAAGCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[89.25584412 450.04299927]
[89.25584412 435.04299927]
[89.25584412 420.04299927]
[89.25584412 405.04299927]
[89.25584412 390.04299927]
[89.25584412 375.04299927]
[89.25584412 360.04299927]
[89.25584412 345.04299927]
[89.25584412 330.04299927]
[89.25584412 315.04299927]
[75.25582123 311.54635620]
[62.49733734 304.78454590]
[51.72968674 295.14959717]
[43.58649826 283.20233154]
[38.54842377 269.63986206]
[36.91477203 255.25485229]
[38.78573990 240.88923645]
[44.05627441 227.38487244]
[52.42195892 215.53428650]
[63.39659119 206.03408813]
[76.34045410 199.44409180]
[90.49757385 196.15429688]
[90.80963135 181.15754700]
[83.33877563 168.27206421]
[91.36150360 154.63583374]
[91.67355347 139.63908386]
[91.98561096 124.64233398]
[79.76952362 116.19267273]
[74.20065308 102.42250824]
[77.10879517 87.85637665]
[87.53840637 77.28032684]
[84.44008636 62.60379791]
[81.34176636 47.92727280]
[70.92082977 36.02287674]
[75.86239624 21.97189140]
[72.76407623 7.29536676]
[69.66574860 -7.38115883]
[64.47033691 -21.45267868]
[57.28782654 -34.62126160]
[42.39252090 -39.17840958]
[35.29602814 -52.63554382]
[39.73236847 -66.80785370]
[32.54985809 -79.97644043]
[25.36734962 -93.14501953]
[18.18484116 -106.31360626]
[3.37762189 -101.85789490]
[-12.02551079 -100.56319427]
[-27.35756874 -102.48322296]
[-41.95512390 -107.53255463]
[-55.18701553 -115.49039459]
[-66.48164368 -126.01025391]
[-75.35166931 -138.63502502]
[-81.41500854 -152.81684875]
[-84.41133118 -167.94088745]
[-84.21321869 -183.35195923]
[-80.83158112 -198.38298035]
[-74.41508484 -212.38375854]
[-65.24361420 -224.74917603]
[-53.71607208 -234.94534302]
[-61.17098236 -247.96165466]
[-68.62589264 -260.97796631]
[-81.74458313 -271.71743774]
[-75.05642700 -287.29641724]
[-58.23480225 -285.18234253]
[-55.60958481 -268.43286133]
[-48.15467453 -255.41656494]
[-40.69976044 -242.40025330]
[-26.87567139 -247.00614929]
[-12.41194534 -248.81323242]
[2.13035607 -247.74943542]
[16.18673706 -243.85409546]
[29.21117973 -237.27648926]
[40.69735336 -228.27015686]
[50.19830322 -217.18307495]
[57.34383774 -204.44421387]
[61.85494614 -190.54699707]
[63.55471039 -176.03013611]
[62.37522507 -161.45677185]
[58.36031342 -147.39262390]
[51.66391373 -134.38403320]
[42.54415131 -122.93669891]
[31.35342407 -113.49611664]
[38.53593063 -100.32752991]
[45.71844101 -87.15895081]
[52.90095139 -73.99036407]
[67.21820068 -70.04678345]
[74.68988037 -56.79428101]
[70.45640564 -41.80376816]
[77.63891602 -28.63518715]
[78.97054291 -43.57596207]
[85.82350159 -56.91901016]
[97.19153595 -66.70510864]
[111.40543365 -71.49732208]
[126.37808228 -70.59197998]
[139.91099548 -64.12202454]
[150.01705933 -53.03746033]
[155.21235657 -38.96589661]
[154.73403931 -23.97352600]
[148.65232849 -10.26174736]
[137.86024475 0.15607211]
[123.94243622 5.75023460]
[108.94252777 5.69932270]
[95.06301117 0.01081148]
[84.34227753 -10.47948074]
[87.44059753 4.19704485]
[90.53891754 18.87357140]
[100.73824310 29.72820282]
[96.01828766 44.82895279]
[99.11661530 59.50547791]
[102.21493530 74.18199921]
[118.03501129 81.39318848]
[125.73631287 96.98055267]
[140.50236511 99.61941528]
[151.59556580 88.76950073]
[166.95242310 86.54546356]
[180.66793823 93.80249023]
[187.46818542 107.75011444]
[184.73835754 123.02518463]
[173.52812195 133.75411987]
[158.14802551 135.81143188]
[144.51205444 128.40603638]
[137.86351013 114.38546753]
[123.09745026 111.74660492]
[116.42590332 120.04157257]
[106.98236847 124.95439148]
[106.67031097 139.95114136]
[106.35825348 154.94789124]
[113.80678558 168.90605164]
[105.80638123 181.46960449]
[105.49432373 196.46635437]
[120.51229858 200.77033997]
[133.90258789 208.79635620]
[144.76208496 219.99641418]
[152.36012268 233.60865784]
[156.18756104 248.70922852]
[155.99098206 264.27496338]
[151.78942871 279.25268555]
[143.87272644 292.63046265]
[132.78146362 303.50601196]
[119.27014923 311.14755249]
[104.25584412 315.04299927]
[104.25584412 330.04299927]
[104.25584412 345.04299927]
[104.25584412 360.04299927]
[104.25584412 375.04299927]
[104.25584412 390.04299927]
[104.25584412 405.04299927]
[104.25584412 420.04299927]
[104.25584412 435.04299927]
[104.25584412 450.04299927]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[22 130]
[23 129]
[25 127]
[26 126]
[27 125]
[31 110]
[32 109]
[33 108]
[35 106]
[36 105]
[37 104]
[38 89]
[39 88]
[42 85]
[43 84]
[44 83]
[45 82]
[59 67]
[60 66]
[61 65]
[112 123]
[113 122]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
