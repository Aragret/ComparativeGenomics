%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:43 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCUAGACCAAACCUACGCCAAAAUCCAUUUCACUAUCAUAUUCAUCGGCGUAAAUCUAACUxxxxxxxxxxUGGAUGCCCCCCACCCUACCACACAUUCGAAGAACCCGUAUACAUAAAAUCUAGACAAAACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[240.91760254 175.92297363]
[227.39341736 169.43479919]
[213.86923218 162.94664001]
[199.04742432 164.41758728]
[189.95175171 151.47235107]
[176.42755127 144.98417664]
[162.90336609 138.49601746]
[149.37918091 132.00784302]
[135.85498047 125.51968384]
[122.33079529 119.03151703]
[108.80660248 112.54335785]
[118.16327667 124.26737976]
[121.27196503 138.94171143]
[117.47305298 153.45268250]
[107.57261658 164.72128296]
[93.67137146 170.35649109]
[78.71896362 169.16258240]
[65.88805389 161.39291382]
[57.90118027 148.69606018]
[56.45302582 133.76612854]
[61.85087585 119.77101898]
[72.94937897 109.68027496]
[87.39341736 105.63500977]
[72.62735748 102.99614716]
[57.86130524 100.35727692]
[43.09524918 97.71841431]
[28.32919312 95.07955170]
[13.56313801 92.44068909]
[-1.43605077 92.28465271]
[-16.25380898 94.61575317]
[-31.07156754 96.94686127]
[-41.63931274 109.01757812]
[-57.65820312 108.13745117]
[-66.83992004 94.98162842]
[-62.14103699 79.64213562]
[-47.16613007 73.88612366]
[-33.40267181 82.12909698]
[-18.58491325 79.79799652]
[-3.76715469 77.46688843]
[-17.51971817 71.47798157]
[-28.46056747 61.21651077]
[-35.31761551 47.87556458]
[-37.29360580 33.00628662]
[-34.15878677 18.33751297]
[-26.27764320 5.57477140]
[-14.56650829 -3.79802489]
[-0.38702595 -8.69110870]
[14.61216736 -8.53556538]
[28.68712807 -3.34948015]
[40.20137405 6.26416540]
[47.81614685 19.18760109]
[50.64609146 33.91822815]
[48.36216736 48.74333191]
[41.22992706 61.93920898]
[30.07863045 71.97158813]
[16.20200157 77.67462921]
[30.96805763 80.31349182]
[45.73411179 82.95236206]
[60.50016785 85.59122467]
[75.26622772 88.23008728]
[90.03227997 90.86894989]
[90.84674072 89.15869141]
[91.94183350 87.51535034]
[91.00621033 72.54456329]
[90.07057953 57.57376862]
[89.13494873 42.60297775]
[74.65882874 38.04157257]
[62.81046677 28.55575562]
[55.19225311 15.42841053]
[52.83448410 0.43489927]
[56.05603790 -14.39702702]
[64.42121887 -27.06147385]
[76.79870605 -35.84567642]
[91.51454926 -39.56164551]
[106.57854462 -37.70682526]
[119.95342255 -30.53206444]
[129.83032227 -19.00769424]
[134.87350464 -4.69228697]
[134.40087891 10.47811413]
[128.47639465 24.45183754]
[117.90129089 35.33905029]
[104.10574341 41.66735077]
[105.04137421 56.63814163]
[105.97699738 71.60893250]
[106.91262817 86.57972717]
[115.29476929 99.01916504]
[128.81895447 105.50733185]
[142.34315491 111.99549866]
[155.86734009 118.48365784]
[169.39152527 124.97182465]
[182.91572571 131.45999146]
[196.43991089 137.94815063]
[212.22904968 136.94129944]
[220.35739136 149.42245483]
[233.88157654 155.91061401]
[247.40577698 162.39878845]
[255.34979248 149.65689087]
[264.64733887 137.86627197]
[275.18554688 127.17003632]
[286.83648682 117.69803619]
[299.45870972 109.56523895]
[312.89904785 102.87038422]
[326.99429321 97.69474030]
[341.57333374 94.10112762]
[356.45925903 92.13317108]
[371.47131348 91.81475830]
[386.42727661 93.14976501]
[401.14559937 96.12197113]
[415.44763184 100.69530487]
[429.15972900 106.81425476]
[442.11544800 114.40452576]
[454.15753174 123.37400055]
[465.13980103 133.61378479]
[474.92892456 144.99957275]
[483.40609741 157.39315796]
[490.46835327 170.64410400]
[496.03005981 184.59153748]
[500.02362061 199.06614685]
[502.40057373 213.89225769]
[503.13208008 228.88984680]
[502.20928955 243.87690735]
[499.64334106 258.67147827]
[495.46542358 273.09396362]
[489.72625732 286.96929932]
[482.49548340 300.12905884]
[473.86087036 312.41345215]
[463.92727661 323.67343140]
[452.81527710 333.77224731]
[440.65972900 342.58734131]
[427.60821533 350.01171875]
[413.81915283 355.95520020]
[399.45993042 360.34570312]
[384.70489502 363.12988281]
[369.73309326 364.27392578]
[354.72631836 363.76400757]
[339.86672974 361.60629272]
[325.33471680 357.82696533]
[311.30664062 352.47189331]
[297.95285034 345.60610962]
[285.43539429 337.31292725]
[273.90628052 327.69305420]
[263.50540161 316.86322021]
[254.35903931 304.95492554]
[246.57823181 292.11273193]
[240.25743103 278.49249268]
[235.47334290 264.25958252]
[232.28407288 249.58676147]
[230.72830200 234.65214539]
[230.82495117 219.63702393]
[232.57283020 204.72367859]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 96]
[2 95]
[3 94]
[5 92]
[6 91]
[7 90]
[8 89]
[9 88]
[10 87]
[11 86]
[23 61]
[24 60]
[25 59]
[26 58]
[27 57]
[28 56]
[29 39]
[30 38]
[31 37]
[63 85]
[64 84]
[65 83]
[66 82]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
