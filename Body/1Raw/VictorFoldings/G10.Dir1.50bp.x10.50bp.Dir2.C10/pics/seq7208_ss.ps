%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:18 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGACAACACUUUCUCGGCCUAUCCGGAAUGCCCCGACGUUACUCGGACUACCCCGAUGCAUAxxxxxxxxxxUUCCUCACUAUCUGCUUCAUCCGCCAACUAAUAUUUCACUUUACAUCCAAACAUCACUUUCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[92.50000000 316.28210449]
[92.50000000 301.28210449]
[92.50000000 286.28210449]
[92.50000000 271.28210449]
[92.50000000 256.28210449]
[92.50000000 241.28210449]
[92.50000000 226.28210449]
[92.50000000 211.28210449]
[92.50000000 196.28210449]
[92.50000000 181.28210449]
[77.77603912 178.54379272]
[63.80019379 173.16149902]
[51.04291534 165.31642151]
[39.93365097 155.27264404]
[30.84635925 143.36825562]
[17.46007538 150.13636780]
[13.46639156 155.53617859]
[8.13533020 157.72959900]
[3.37317777 156.89448547]
[-10.28306389 163.09989929]
[-23.93930435 169.30529785]
[-30.50959206 175.74604797]
[-37.94480133 175.49446106]
[-51.72718430 181.41441345]
[-65.50956726 187.33438110]
[-72.76725769 201.64190674]
[-88.50695801 204.74697876]
[-100.65451050 194.26763916]
[-99.89135742 178.24275208]
[-86.80291748 168.96522522]
[-71.42952728 173.55200195]
[-57.64714813 167.63203430]
[-43.86476517 161.71206665]
[-30.14471245 155.64906311]
[-16.48847008 149.44364929]
[-2.83222938 143.23825073]
[10.69196033 136.75007629]
[24.07824516 129.98196411]
[19.24312019 111.88938904]
[18.65876961 93.17098999]
[22.35595131 74.81204987]
[8.57356930 68.89208984]
[-5.20881224 62.97212601]
[-18.99119377 57.05216217]
[-33.57511902 63.14187622]
[-48.16163635 57.05836868]
[-54.09682083 42.41087341]
[-47.85943222 27.88949013]
[-33.15000534 22.10949898]
[-18.69538116 28.50006676]
[-13.07123089 43.26978302]
[0.71115077 49.18974304]
[14.49353218 55.10970688]
[28.27591324 61.02967072]
[37.40401840 47.60940933]
[49.00687790 36.26043320]
[62.62577438 27.43142319]
[77.72227478 21.47144508]
[93.69953156 18.61612320]
[109.92588043 18.97834778]
[125.75981140 22.54379845]
[140.57531738 29.17150879]
[153.78665161 38.59945297]
[164.66548157 28.27224922]
[175.54431152 17.94504547]
[186.42312622 7.61783981]
[177.30143738 -4.30805445]
[169.49909973 -17.13597488]
[163.10450745 -30.72057343]
[158.19012451 -44.90792084]
[154.81163025 -59.53726959]
[153.00729370 -74.44285583]
[152.79759216 -89.45578766]
[154.18486023 -104.40596008]
[157.15341187 -119.12397003]
[161.66960144 -133.44305420]
[167.68225098 -147.20095825]
[175.12322998 -160.24182129]
[183.90824890 -172.41784668]
[193.93772888 -183.59109497]
[205.09806824 -193.63494873]
[217.26278687 -202.43560791]
[230.29406738 -209.89335632]
[244.04423523 -215.92370605]
[258.35748291 -220.45829773]
[273.07168579 -223.44577026]
[288.02005005 -224.85227966]
[303.03323364 -224.66188049]
[317.94113159 -222.87672424]
[332.57479858 -219.51704407]
[346.76846313 -214.62091064]
[360.36126709 -208.24378967]
[373.19921875 -200.45796204]
[385.13684082 -191.35162354]
[396.03887939 -181.02795410]
[405.78176880 -169.60395813]
[414.25515747 -157.20904541]
[421.36303711 -143.98367310]
[427.02484131 -130.07771301]
[431.17642212 -115.64869690]
[433.77075195 -100.86013031]
[434.77844238 -85.87959290]
[434.18804932 -70.87680817]
[432.00628662 -56.02177429]
[428.25787354 -41.48281097]
[422.98526001 -27.42465591]
[416.24819946 -14.00660038]
[408.12304688 -1.38067877]
[398.70184326 10.31004715]
[388.09136963 20.93311119]
[376.41180420 30.36814690]
[363.79550171 38.50824738]
[350.38543701 45.26118088]
[336.33352661 50.55043030]
[321.79901123 54.31606293]
[306.94656372 56.51541519]
[291.94448853 57.12356186]
[276.96276855 56.13361740]
[262.17114258 53.55679321]
[247.73724365 49.42228699]
[233.82456970 43.77695084]
[220.59080505 36.68474960]
[208.18586731 28.22603798]
[196.75033569 18.49666595]
[185.87150574 28.82386971]
[174.99269104 39.15107346]
[164.11386108 49.47827911]
[171.07655334 59.86080551]
[176.37220764 71.18476105]
[179.87660217 83.18455505]
[181.50756836 95.57873535]
[181.22683716 108.07662201]
[179.04100037 120.38507080]
[175.00132751 132.21540833]
[169.20254517 143.29016113]
[161.78068542 153.34957886]
[152.90982056 162.15773010]
[142.79798889 169.50801086]
[131.68235779 175.22804260]
[119.82365417 179.18367004]
[107.50000000 181.28210449]
[107.50000000 196.28210449]
[107.50000000 211.28210449]
[107.50000000 226.28210449]
[107.50000000 241.28210449]
[107.50000000 256.28210449]
[107.50000000 271.28210449]
[107.50000000 286.28210449]
[107.50000000 301.28210449]
[107.50000000 316.28210449]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[15 38]
[16 37]
[19 36]
[20 35]
[21 34]
[23 33]
[24 32]
[25 31]
[41 54]
[42 53]
[43 52]
[44 51]
[63 127]
[64 126]
[65 125]
[66 124]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
