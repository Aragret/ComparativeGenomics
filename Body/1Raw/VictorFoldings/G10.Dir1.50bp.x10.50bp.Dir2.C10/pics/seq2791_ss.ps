%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:30 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCUUACUUUUAACCAGUGAAAUUGACCUGCCCGUGAAGAGGCGGGCAUAACACAGCAAGACGxxxxxxxxxxUUCCAAUUAACUAGUUUUGACAACAUUCAAAAAAGAGUAAUAAACUUCGCCUUAAUUUUAACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[75.56670380 265.18560791]
[75.56670380 250.18562317]
[75.56670380 235.18562317]
[75.56670380 220.18562317]
[75.56670380 205.18562317]
[75.56670380 190.18562317]
[75.56670380 175.18562317]
[75.56670380 160.18562317]
[75.56670380 145.18562317]
[75.56670380 130.18562317]
[72.46329498 117.49610138]
[74.35314941 106.32298279]
[79.86418152 98.33329773]
[87.14799500 94.46158600]
[94.20541382 94.80184937]
[87.65753937 81.30646515]
[81.10967255 67.81108093]
[74.56179810 54.31570053]
[68.01393127 40.82031631]
[54.74040985 13.53346920]
[44.63497543 2.44833541]
[34.52954102 -8.63679790]
[19.51449203 -13.62266350]
[16.65811920 -28.24081612]
[6.55268383 -39.32595062]
[-3.55275059 -50.41108322]
[-16.41667557 -51.79784012]
[-24.60558891 -61.29063034]
[-24.12136269 -73.41613007]
[-33.99707031 -84.70640564]
[-43.87277603 -95.99668884]
[-53.74848175 -107.28697205]
[-63.62418747 -118.57724762]
[-76.21262360 -126.73391724]
[-82.82936859 -125.61081696]
[-88.18954468 -127.72182465]
[-91.04434204 -131.62046814]
[-105.19165802 -136.60578918]
[-119.33897400 -141.59111023]
[-133.48629761 -146.57643127]
[-147.63360596 -151.56175232]
[-161.78092957 -156.54707336]
[-175.92823792 -161.53239441]
[-190.07241821 -154.48132324]
[-205.03300476 -159.57606506]
[-211.93414307 -173.79400635]
[-206.68151855 -188.69989014]
[-192.39140320 -195.45031738]
[-177.54188538 -190.04039001]
[-170.94291687 -175.67970276]
[-156.79560852 -170.69438171]
[-142.64828491 -165.70906067]
[-128.50096130 -160.72373962]
[-114.35365295 -155.73841858]
[-100.20633698 -150.75309753]
[-86.05902100 -145.76777649]
[-71.81232452 -141.07397461]
[-81.75510406 -152.30523682]
[-89.10395050 -165.38172913]
[-93.52788544 -179.71450806]
[-94.82767487 -194.65808105]
[-92.94477844 -209.53944397]
[-87.96399689 -223.68835449]
[-80.10964203 -236.46760559]
[-69.73546600 -247.30165100]
[-57.30868912 -255.70254517]
[-43.38897324 -261.29196167]
[-28.60322189 -263.81814575]
[-13.61734676 -263.16732788]
[0.89373088 -259.36880493]
[14.27647305 -252.59370422]
[25.92815971 -243.14709473]
[35.32403183 -231.45446777]
[42.04092407 -218.04240417]
[45.77632904 -203.51496887]
[46.36201477 -188.52639771]
[43.77159882 -173.75177002]
[38.12175369 -159.85647583]
[29.66692734 -147.46632385]
[18.78790283 -137.13932800]
[5.97463942 -129.34059143]
[-8.19578838 -124.42134094]
[-23.08518410 -122.60313416]
[-38.02297211 -123.96785736]
[-52.33390808 -128.45295715]
[-42.45820236 -117.16267395]
[-32.58249664 -105.87239838]
[-22.70678902 -94.58211517]
[-12.83108234 -83.29183197]
[4.04284191 -78.56793976]
[7.53238297 -60.51651764]
[17.63781738 -49.43138504]
[27.74325180 -38.34625244]
[42.03549576 -34.15326691]
[45.61467743 -18.74223328]
[55.72011185 -7.65709925]
[65.82554626 3.42803454]
[80.51044464 6.48643017]
[94.20106506 0.35725620]
[107.89169312 -5.77191782]
[121.58232117 -11.90109158]
[126.98088074 -26.75474548]
[141.33650208 -33.36470795]
[156.13226318 -27.80940247]
[162.59007263 -13.38469601]
[156.87864685 1.35149002]
[142.38647461 7.65643787]
[127.71149445 1.78953397]
[114.02086639 7.91870785]
[100.33024597 14.04788208]
[86.63961792 20.17705536]
[81.50931549 34.27244568]
[88.05718231 47.76782990]
[94.60505676 61.26321411]
[101.15292358 74.75859833]
[107.70079803 88.25398254]
[119.09187317 98.01325226]
[133.43193054 102.41355896]
[147.77198792 106.81385803]
[162.56158447 100.59715271]
[176.57356262 108.41024017]
[179.05911255 124.25958252]
[168.11155701 135.98692322]
[152.12890625 134.59603882]
[143.37168884 121.15391541]
[129.03163147 116.75361633]
[114.69157410 112.35331726]
[108.66035461 116.81139374]
[119.13532257 127.54801178]
[129.61029053 138.28462219]
[140.08526611 149.02124023]
[150.56024170 159.75787354]
[162.77906799 168.45845032]
[165.72222900 183.16687012]
[157.79216003 195.89927673]
[143.29336548 199.74436951]
[130.09591675 192.61502075]
[125.36345673 178.38249207]
[118.17207336 165.21876526]
[110.98069000 152.05502319]
[103.78930664 138.89128113]
[96.59792328 125.72754669]
[90.56670380 130.18562317]
[90.56670380 145.18562317]
[90.56670380 160.18562317]
[90.56670380 175.18562317]
[90.56670380 190.18562317]
[90.56670380 205.18562317]
[90.56670380 220.18562317]
[90.56670380 235.18562317]
[90.56670380 250.18562317]
[90.56670380 265.18560791]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 152]
[2 151]
[3 150]
[4 149]
[5 148]
[6 147]
[7 146]
[8 145]
[9 144]
[10 143]
[15 116]
[16 115]
[17 114]
[18 113]
[19 112]
[20 97]
[21 96]
[22 95]
[24 93]
[25 92]
[26 91]
[29 89]
[30 88]
[31 87]
[32 86]
[33 85]
[34 57]
[37 56]
[38 55]
[39 54]
[40 53]
[41 52]
[42 51]
[43 50]
[98 111]
[99 110]
[100 109]
[101 108]
[117 127]
[118 126]
[119 125]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
