%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:39 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCAUCACUAGACAUCGUACUACACGACACGUACUACGUUGUAGCCCACUUCCACUAUGUCCxxxxxxxxxxGCCAUGCACUACUCACCAGACGCCUCAACCGCCUUUUCAUCAAUCGCCCACAUCACUCGACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[144.24234009 291.98348999]
[144.24234009 276.98348999]
[144.24234009 261.98348999]
[144.24234009 246.98347473]
[144.24234009 231.98347473]
[144.24234009 216.98347473]
[144.24234009 201.98347473]
[144.24234009 186.98347473]
[144.24234009 171.98347473]
[144.24234009 156.98347473]
[137.17994690 154.45910645]
[123.05514526 149.41033936]
[115.99273682 146.88597107]
[106.48438263 158.48730469]
[104.35891724 174.74813843]
[89.11218262 180.78709412]
[76.42871094 170.39183044]
[79.35617065 154.25608826]
[94.88304138 148.97894287]
[104.39139557 137.37760925]
[100.00829315 131.29168701]
[91.24208832 119.11985016]
[86.85898590 113.03393555]
[72.84226990 118.37544250]
[58.82555771 123.71695709]
[44.80884552 129.05847168]
[36.96226120 143.05171204]
[21.10701942 145.49934387]
[9.40590763 134.52374268]
[10.83501530 118.54447174]
[24.29805374 109.81944275]
[39.46733475 115.04175568]
[53.48404694 109.70024872]
[67.50076294 104.35873413]
[81.51747131 99.01721954]
[80.81632233 91.55006409]
[78.71286774 69.14860535]
[63.94680786 66.50974274]
[49.18075562 63.87087631]
[34.41469955 61.23200989]
[17.75889969 64.39756012]
[10.10627556 49.26898956]
[22.52515984 37.72742844]
[37.05356216 46.46595764]
[51.81961823 49.10482025]
[66.58567047 51.74368668]
[81.35173035 54.38254929]
[95.07178497 48.31953430]
[103.06169891 35.62460709]
[100.96891785 22.85455894]
[107.93746185 12.43062496]
[119.75566101 9.66703320]
[128.00794983 -2.85892868]
[116.21955872 -12.14911652]
[105.26149750 -22.40557098]
[95.21273804 -33.55438995]
[86.14566803 -45.51524734]
[78.12562561 -58.20196152]
[71.21038818 -71.52312469]
[65.44979095 -85.38275146]
[60.88533020 -99.68099213]
[57.54990387 -114.31481171]
[55.46753693 -129.17878723]
[54.65323257 -144.16580200]
[55.11286163 -159.16789246]
[56.84311295 -174.07695007]
[59.83151627 -188.78556824]
[64.05654144 -203.18774414]
[69.48774719 -217.17974854]
[76.08599854 -230.66072083]
[83.80375671 -243.53356934]
[92.58541107 -255.70552063]
[102.36769867 -267.08886719]
[113.08011627 -277.60162354]
[124.64550018 -287.16799927]
[136.98051453 -295.71911621]
[149.99627686 -303.19329834]
[163.59901428 -309.53677368]
[177.69070435 -314.70376587]
[192.16983032 -318.65707397]
[206.93206787 -321.36822510]
[221.87104797 -322.81768799]
[236.87911987 -322.99499512]
[251.84815979 -321.89886475]
[266.67031860 -319.53723145]
[281.23880005 -315.92706299]
[295.44863892 -311.09442139]
[309.19744873 -305.07409668]
[322.38613892 -297.90945435]
[334.91970825 -289.65213013]
[346.70788574 -280.36166382]
[357.66567993 -270.10491943]
[367.71414185 -258.95584106]
[376.78091431 -246.99475098]
[384.80062866 -234.30783081]
[391.71551514 -220.98648071]
[397.47576904 -207.12670898]
[402.03985596 -192.82835388]
[405.37487793 -178.19444275]
[407.45687866 -163.33041382]
[408.27078247 -148.34338379]
[407.81076050 -133.34130859]
[406.08013916 -118.43228912]
[403.09136963 -103.72375488]
[398.86596680 -89.32167053]
[393.43438721 -75.32981873]
[386.83578491 -61.84900665]
[379.11770630 -48.97636795]
[370.33572388 -36.80464554]
[360.55316162 -25.42154121]
[349.84045410 -14.90907192]
[338.27484131 -5.34298372]
[325.93960571 3.20780015]
[312.92364502 10.68167019]
[299.32073975 17.02477455]
[285.22891235 22.19141388]
[270.74969482 26.14435768]
[255.98738098 28.85512733]
[241.04837036 30.30418968]
[226.04028320 30.48110580]
[211.07127380 29.38459778]
[196.24916077 27.02256966]
[181.68078613 23.41203880]
[167.47106934 18.57901764]
[153.72242737 12.55833244]
[140.53392029 5.39336061]
[132.28161621 17.91932297]
[132.22380066 35.44063950]
[115.75662994 43.61452103]
[107.76671600 56.30945206]
[122.39471436 52.98958588]
[137.38204956 53.60578537]
[151.68815613 58.11526871]
[164.31974792 66.20494843]
[174.39981079 77.31314850]
[181.22851562 90.66863251]
[184.33169556 105.34413147]
[183.49394226 120.32071686]
[178.77340698 134.55857849]
[170.49781799 147.06915283]
[159.24234009 156.98347473]
[159.24234009 171.98347473]
[159.24234009 186.98347473]
[159.24234009 201.98347473]
[159.24234009 216.98347473]
[159.24234009 231.98347473]
[159.24234009 246.98347473]
[159.24234009 261.98348999]
[159.24234009 276.98348999]
[159.24234009 291.98348999]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[13 20]
[14 19]
[23 35]
[24 34]
[25 33]
[26 32]
[37 47]
[38 46]
[39 45]
[40 44]
[48 130]
[49 129]
[52 127]
[53 126]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
