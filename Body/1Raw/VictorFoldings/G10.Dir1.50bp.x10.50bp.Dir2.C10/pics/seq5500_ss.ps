%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:02 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCUCUCCCUAGGAGGCCUGCCCCCGCUAACCGGCUUUUUGCCCAAAUGGGCCAUUAUCGAAGxxxxxxxxxxAAGAAGUUAUUAUCUCGAACUGACACUGAGCCACAACCCAAACAACCCAGCUCUCCCUAAGCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[-32.57888031 282.82180786]
[-42.95748901 274.82598877]
[-52.83319473 286.11627197]
[-62.70890427 297.40655518]
[-72.58460999 308.69683838]
[-82.46031189 319.98712158]
[-85.72232819 335.46838379]
[-99.92546844 339.95391846]
[-109.80117035 351.24420166]
[-119.67687988 362.53448486]
[-129.55258179 373.82476807]
[-132.87597656 382.40093994]
[-139.74882507 385.24279785]
[-149.85426331 396.32794189]
[-159.95970154 407.41305542]
[-170.06512451 418.49819946]
[-176.26759338 434.27685547]
[-193.14660645 432.68475342]
[-196.28932190 416.02462769]
[-181.15026855 408.39276123]
[-171.04483032 397.30761719]
[-160.93939209 386.22250366]
[-150.83395386 375.13735962]
[-140.84286499 363.94906616]
[-130.96716309 352.65878296]
[-121.09145355 341.36849976]
[-111.21574402 330.07821655]
[-108.66011047 315.40451050]
[-93.75059509 310.11141968]
[-83.87488556 298.82113647]
[-73.99918365 287.53085327]
[-64.12347412 276.24057007]
[-54.24777222 264.95028687]
[-68.57142639 250.28189087]
[-81.50578308 234.37492371]
[-92.94425201 217.36050415]
[-102.79254913 199.37884521]
[-110.96951294 180.57814026]
[-117.40774536 161.11335754]
[-122.05420685 141.14488220]
[-124.87057495 120.83732605]
[-125.83366394 100.35803223]
[-124.93551636 79.87578583]
[-122.18354797 59.55939865]
[-117.60043335 39.57630157]
[-111.22394562 20.09119606]
[-103.10663605 1.26466298]
[-93.31539917 -16.74813271]
[-81.93094635 -33.79874039]
[-93.71308136 -43.08212280]
[-105.49521637 -52.36550903]
[-117.27735901 -61.64889526]
[-133.57606506 -63.46110153]
[-139.90725708 -78.58882141]
[-129.75794983 -91.46995544]
[-113.56887817 -88.85350037]
[-107.99397278 -73.43103027]
[-96.21183014 -64.14764404]
[-84.42969513 -54.86426163]
[-72.64756012 -45.58087540]
[-63.63303757 -55.64447021]
[-54.03285599 -65.15099335]
[-43.88137436 -74.06642914]
[-33.21492767 -82.35886383]
[-22.07169342 -89.99861145]
[-10.49155140 -96.95834351]
[1.48405015 -103.21313477]
[13.81225014 -108.74060822]
[26.44892502 -113.52098083]
[39.34884644 -117.53713989]
[52.46584320 -120.77471924]
[65.75296783 -123.22211456]
[79.16267395 -124.87057495]
[92.64694977 -125.71421051]
[106.15754700 -125.74998474]
[119.64611053 -124.97778320]
[133.06434631 -123.40036011]
[146.36425781 -121.02336121]
[159.49821472 -117.85530853]
[172.41921997 -113.90752411]
[185.08103943 -109.19413757]
[197.43833923 -103.73203278]
[209.44689941 -97.54074860]
[221.06373596 -90.64244843]
[232.24728394 -83.06182098]
[242.95748901 -74.82598877]
[252.83319092 -86.11627197]
[262.70889282 -97.40655518]
[272.58459473 -108.69683075]
[268.20864868 -123.49056244]
[272.54736328 -138.29525757]
[284.21633911 -148.38679504]
[299.49197388 -150.54499817]
[313.49993896 -144.08119202]
[321.77029419 -131.05795288]
[321.66403198 -115.63095856]
[313.21502686 -102.72289276]
[299.11935425 -96.45268250]
[283.87487793 -98.82112885]
[273.99917603 -87.53084564]
[264.12347412 -76.24056244]
[254.24777222 -64.95028687]
[263.55355835 -55.72798157]
[272.30889893 -45.98155975]
[280.48431396 -35.74382401]
[288.05227661 -25.04923058]
[294.98736572 -13.93377018]
[301.26617432 -2.43485570]
[306.86761475 9.40881252]
[311.77282715 21.55737495]
[315.96527100 33.96994400]
[319.43090820 46.60474014]
[322.15798950 59.41924667]
[324.13739014 72.37033081]
[325.36245728 85.41440582]
[325.82901001 98.50756836]
[325.53552246 111.60575104]
[324.48300171 124.66487885]
[322.67492676 137.64099121]
[320.11743164 150.49041748]
[316.81912231 163.16992188]
[312.79107666 175.63681030]
[308.04687500 187.84915161]
[302.60244751 199.76580811]
[296.47616577 211.34671021]
[289.68859863 222.55285645]
[282.26263428 233.34654236]
[274.22326660 243.69143677]
[265.59750366 253.55271912]
[256.41439819 262.89721680]
[246.70489502 271.69345093]
[236.50163269 279.91186523]
[225.83895874 287.52474976]
[214.75276184 294.50650024]
[203.28034973 300.83361816]
[191.46034241 306.48480225]
[179.33251953 311.44107056]
[166.93769836 315.68569946]
[154.31758118 319.20440674]
[141.51466370 321.98538208]
[128.57200623 324.01922607]
[115.53320312 325.29910278]
[102.44211578 325.82073975]
[89.34281158 325.58233643]
[76.27938080 324.58474731]
[63.29577637 322.83126831]
[50.43570328 320.32781982]
[37.74244690 317.08285522]
[25.25872231 313.10726929]
[13.02654743 308.41445923]
[1.08708990 303.02020264]
[-10.51946735 296.94268799]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 33]
[3 32]
[4 31]
[5 30]
[6 29]
[8 27]
[9 26]
[10 25]
[11 24]
[13 23]
[14 22]
[15 21]
[16 20]
[49 60]
[50 59]
[51 58]
[52 57]
[86 102]
[87 101]
[88 100]
[89 99]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
