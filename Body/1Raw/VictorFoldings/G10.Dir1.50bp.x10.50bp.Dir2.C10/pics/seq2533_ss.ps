%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:17 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGUUCUCCUCCGCAUAAGCCUGCGUCAGAUUAAAACACUGAACUGACAAUUAACAGCCCAAUAxxxxxxxxxxGAGCACACCAUAUAUUUACAGUAGGAAUAGACGUAGACACACGAGCAUAUUUCACCUCCGCCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[115.53414917 307.28646851]
[115.53414917 292.28646851]
[115.53414917 277.28646851]
[115.53414917 262.28646851]
[115.53414917 247.28646851]
[115.53414917 232.28646851]
[115.53414917 217.28646851]
[115.53414917 202.28646851]
[115.53414917 187.28646851]
[115.53414917 172.28646851]
[115.49849701 160.53387451]
[118.97152710 150.66584778]
[124.88956451 143.59448242]
[131.98963928 139.78973389]
[122.82770538 127.91290283]
[113.66577148 116.03607941]
[104.50382996 104.15925598]
[106.42050934 118.94022369]
[94.22054291 133.37039185]
[81.23016357 140.87039185]
[68.23977661 148.37039185]
[55.24939728 155.87039185]
[51.40155411 171.19911194]
[37.79895020 179.24552917]
[22.51176834 175.23582458]
[14.60962486 161.54891968]
[18.78071976 146.30497742]
[32.55041504 138.54798889]
[47.74939728 142.88000488]
[60.73978043 135.38000488]
[73.73016357 127.88001251]
[86.72054291 120.38001251]
[83.66214752 105.69511414]
[68.75769806 104.00471497]
[53.85325241 102.31431580]
[38.94880295 100.62392426]
[29.27860832 112.64435577]
[14.63756752 117.50681305]
[-0.30241898 113.65968323]
[-10.77405453 102.33058929]
[-13.43587780 87.13459778]
[-7.43851137 72.92069244]
[5.30430698 64.22447968]
[20.72639084 63.82088852]
[33.90660858 71.83870697]
[40.63920212 85.71947479]
[55.54364777 87.40987396]
[70.44809723 89.10026550]
[85.35254669 90.79066467]
[96.54084015 80.79956818]
[96.54084015 65.79956818]
[96.54084015 50.79956818]
[96.54084015 35.79956818]
[81.64735413 33.84018707]
[67.13705444 29.95352173]
[53.25822830 24.20607758]
[40.24835587 16.69619942]
[28.33005714 7.55239439]
[17.70726776 -3.06887627]
[8.56176186 -14.98586941]
[1.05002701 -27.99466896]
[-4.69939947 -41.87267685]
[-8.58813763 -56.38242340]
[-10.54964638 -71.27562714]
[-10.55036163 -86.29744720]
[-8.59027100 -101.19083405]
[-4.70291376 -115.70095062]
[1.04519165 -129.57949829]
[8.55568790 -142.58901978]
[17.70005989 -154.50688171]
[28.32183647 -165.12916565]
[40.23926544 -174.27410889]
[53.24842072 -181.78521729]
[67.12670135 -187.53398132]
[81.63663483 -191.42202759]
[96.52993011 -193.38282776]
[111.55175018 -193.38282776]
[126.44504547 -191.42202759]
[140.95497131 -187.53398132]
[154.83325195 -181.78521729]
[167.84242249 -174.27410889]
[179.75984192 -165.12916565]
[190.38162231 -154.50688171]
[199.52598572 -142.58901978]
[207.03648376 -129.57949829]
[212.78459167 -115.70095062]
[216.67195129 -101.19083405]
[218.63204956 -86.29744720]
[218.63133240 -71.27562714]
[216.66981506 -56.38242340]
[212.78108215 -41.87267685]
[207.03164673 -27.99466896]
[199.51991272 -14.98586941]
[190.37440491 -3.06887627]
[179.75161743 7.55239439]
[167.83332825 16.69619942]
[154.82345581 24.20607758]
[140.94462585 29.95352173]
[126.43432617 33.84018707]
[111.54084015 35.79956818]
[111.54084015 50.79956818]
[111.54084015 65.79956818]
[111.54084015 80.79956818]
[116.38065338 94.99732208]
[125.54259491 106.87414551]
[134.70452881 118.75096893]
[143.86645508 130.62779236]
[156.61972046 138.52427673]
[171.33523560 141.43174744]
[186.05076599 144.33921814]
[200.79536438 147.09545898]
[217.91198730 140.38340759]
[230.93237305 152.11003113]
[245.75486755 154.41090393]
[260.57733154 156.71179199]
[273.18505859 147.18177795]
[288.82708740 149.44078064]
[298.22323608 162.14854431]
[295.79901123 177.76580811]
[282.99258423 187.02709961]
[267.40185547 184.43786621]
[258.27645874 171.53427124]
[243.45397949 169.23339844]
[228.63150024 166.93251038]
[218.64739990 173.83033752]
[206.24603271 171.99250793]
[198.19064331 161.86758423]
[191.01300049 163.81535339]
[183.14329529 159.05474854]
[168.42776489 156.14727783]
[153.71224976 153.23979187]
[147.91772461 158.00146484]
[159.43789673 167.60801697]
[170.95806885 177.21455383]
[184.41369629 183.84371948]
[189.05595398 198.10729980]
[182.07966614 211.38629150]
[167.70037842 215.65664673]
[154.60699463 208.33796692]
[150.71144104 193.85227966]
[143.52006531 180.68853760]
[136.32867432 167.52481079]
[130.53414917 172.28646851]
[130.53414917 187.28646851]
[130.53414917 202.28646851]
[130.53414917 217.28646851]
[130.53414917 232.28646851]
[130.53414917 247.28646851]
[130.53414917 262.28646851]
[130.53414917 277.28646851]
[130.53414917 292.28646851]
[130.53414917 307.28646851]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 152]
[2 151]
[3 150]
[4 149]
[5 148]
[6 147]
[7 146]
[8 145]
[9 144]
[10 143]
[14 107]
[15 106]
[16 105]
[17 104]
[19 32]
[20 31]
[21 30]
[22 29]
[33 49]
[34 48]
[35 47]
[36 46]
[50 103]
[51 102]
[52 101]
[53 100]
[108 131]
[109 130]
[110 129]
[111 127]
[113 124]
[114 123]
[115 122]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
