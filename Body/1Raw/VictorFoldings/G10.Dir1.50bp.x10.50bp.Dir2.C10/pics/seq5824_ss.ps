%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:55 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGACCCCAUUCCUCCCCACACUCAUCGCCCUUACCACGCUACUCCUACCUAUCUCCCCUUUUAxxxxxxxxxxCAAUACUAAACCCCCAUAAAUAGGAGAAGGCUUAGAAGAAAACCCCACAAACCCCAUUACUCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[18.78556252 257.29702759]
[7.00559664 250.63258362]
[5.67077780 266.39736938]
[-7.87348795 272.59432983]
[-16.28689766 285.01263428]
[-24.70030785 297.43096924]
[-33.11371994 309.84927368]
[-41.52713013 322.26757812]
[-49.94054031 334.68591309]
[-58.35395050 347.10421753]
[-66.76735687 359.52252197]
[-63.53786850 374.99334717]
[-72.26357269 388.17050171]
[-87.76766205 391.23623657]
[-100.85183716 382.37170410]
[-103.75348663 366.83609009]
[-94.75112152 353.84634399]
[-79.18567657 351.10913086]
[-70.77226257 338.69079590]
[-62.35885239 326.27249146]
[-53.94544220 313.85418701]
[-45.53203201 301.43585205]
[-37.11862183 289.01754761]
[-28.70521164 276.59924316]
[-20.29180145 264.18090820]
[-19.55876732 249.30436707]
[-5.41271782 242.21917725]
[-18.39993286 231.60391235]
[-30.32416153 219.80712891]
[-41.07835007 206.93472290]
[-50.56594849 193.10226440]
[-58.70177460 178.43392944]
[-65.41278839 163.06143188]
[-70.63874054 147.12277222]
[-74.33271027 130.76104736]
[-76.46153259 114.12315369]
[-77.00609589 97.35845947]
[-75.96150970 80.61748505]
[-73.33715820 64.05052185]
[-69.15659332 47.80630875]
[-63.45735931 32.03069305]
[-56.29061508 16.86529541]
[-47.72070312 2.44627690]
[-37.82456589 -11.09691143]
[-26.69105148 -23.64267921]
[-14.42011452 -35.07839203]
[-1.12192094 -45.30138397]
[13.08413696 -54.21986771]
[28.07052040 -61.75378036]
[43.70267868 -67.83547211]
[59.84027481 -72.41035461]
[76.33841705 -75.43735504]
[93.04899597 -76.88928223]
[109.82197571 -76.75311279]
[126.50677490 -75.03006744]
[142.95359802 -71.73561859]
[147.20645142 -86.12010193]
[151.45928955 -100.50458527]
[150.89398193 -109.68479156]
[155.94995117 -115.13908386]
[160.49723816 -129.43321228]
[165.04452515 -143.72734070]
[169.59181213 -158.02146912]
[174.13909912 -172.31561279]
[160.67881775 -179.00297546]
[148.39715576 -187.66676331]
[137.58203125 -198.10389709]
[128.48696899 -210.06968689]
[121.32516479 -223.28366089]
[116.26449585 -237.43605042]
[113.42360687 -252.19509888]
[112.86907959 -267.21484375]
[114.61391449 -282.14321899]
[118.61721802 -296.63024902]
[124.78514099 -310.33633423]
[132.97309875 -322.94021606]
[142.98915100 -334.14642334]
[154.59851074 -343.69229126]
[167.52903748 -351.35400391]
[181.47763062 -356.95196533]
[196.11729431 -360.35501099]
[211.10487366 -361.48330688]
[226.08901978 -360.31042480]
[240.71849060 -356.86386108]
[254.65036011 -351.22439575]
[267.55804443 -343.52426147]
[279.13894653 -333.94390869]
[289.12161255 -322.70794678]
[297.27203369 -310.07977295]
[303.39916992 -296.35537720]
[307.35934448 -281.85650635]
[309.05978394 -266.92303467]
[308.46057129 -251.90498352]
[305.57577515 -237.15444946]
[300.47302246 -223.01718140]
[293.27194214 -209.82456970]
[284.14132690 -197.88589478]
[273.29519653 -187.48098755]
[260.98782349 -178.85377502]
[247.50769043 -172.20646667]
[233.17080688 -167.69491577]
[218.31323242 -165.42486572]
[203.28327942 -165.44952393]
[188.43324280 -167.76831055]
[183.88594055 -153.47418213]
[179.33865356 -139.18005371]
[174.79136658 -124.88592529]
[170.24407959 -110.59179688]
[165.84378052 -96.25173187]
[161.59092712 -81.86725616]
[157.33808899 -67.48277283]
[169.96601868 -62.61270523]
[182.18496704 -56.79211044]
[193.92352295 -50.05501175]
[205.11306763 -42.44079208]
[215.68818665 -33.99395370]
[225.58706665 -24.76387787]
[234.75184631 -14.80451202]
[243.12895203 -4.17407513]
[250.66941833 7.06529522]
[257.32919312 18.84790039]
[263.06930542 31.10486794]
[267.85620117 43.76455307]
[271.66195679 56.75294876]
[274.46426392 69.99414062]
[276.24679565 83.41072845]
[276.99908447 96.92428589]
[276.71676636 110.45582581]
[275.40145874 123.92623901]
[273.06088257 137.25680542]
[269.70867920 150.36958313]
[265.36450195 163.18794250]
[260.05371094 175.63693237]
[253.80734253 187.64381409]
[246.66191101 199.13838196]
[238.65919495 210.05345154]
[229.84597778 220.32521057]
[220.27375793 229.89364624]
[209.99848938 238.70280457]
[199.08026123 246.70118713]
[187.58285522 253.84205627]
[175.57350159 260.08367920]
[163.12240601 265.38952637]
[150.30232239 269.72863770]
[137.18821716 273.07562256]
[123.85673523 275.41091919]
[110.38579559 276.72088623]
[96.85414886 276.99786377]
[83.34088898 276.24020386]
[69.92501068 274.45236206]
[56.68492889 271.64480591]
[43.69804001 267.83392334]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 27]
[4 25]
[5 24]
[6 23]
[7 22]
[8 21]
[9 20]
[10 19]
[11 18]
[56 111]
[57 110]
[58 109]
[60 108]
[61 107]
[62 106]
[63 105]
[64 104]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
