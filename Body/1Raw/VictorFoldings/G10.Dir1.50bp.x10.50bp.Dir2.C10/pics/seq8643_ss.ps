%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:42 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGACCGCUAACAUUACUGCAGGCCACCUACUCAUGCACCUAAUUGGAAGCGCCACCCUAGCAxxxxxxxxxxAUAAUGACCCACCAAUCACAUGCCUAUCAUAUAGUAAAACCCAGCCCAUGACCCCUAACACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[110.80309296 258.70211792]
[110.80309296 243.70213318]
[110.80309296 228.70213318]
[110.80309296 213.70213318]
[110.80309296 198.70213318]
[110.80309296 183.70213318]
[110.80309296 168.70213318]
[110.80309296 153.70213318]
[110.80309296 138.70213318]
[110.80309296 123.70212555]
[98.03791046 123.77172089]
[87.90839386 117.96730804]
[82.63475800 108.78667450]
[67.67450714 109.87799072]
[52.71426010 110.96929932]
[37.75401306 112.06060791]
[27.44301414 123.73626709]
[12.25564861 124.62989807]
[1.18823290 114.72798157]
[-13.77201557 115.81929779]
[-28.72010231 117.06616974]
[-43.65441132 118.46847534]
[-58.58871841 119.87078094]
[-73.31335449 130.87826538]
[-88.97580719 123.02412415]
[-103.87770844 124.73681641]
[-118.77960968 126.44950867]
[-133.68151855 128.16220093]
[-146.50799561 137.42459106]
[-160.03547668 131.19108582]
[-166.74729919 145.08190918]
[-179.91551208 153.11943054]
[-195.33818054 152.73890686]
[-208.09399414 144.06176758]
[-214.11260986 129.85684204]
[-211.47351074 114.65688324]
[-201.01884460 103.31214142]
[-186.08462524 99.44267273]
[-171.43632507 104.28321838]
[-161.74816895 116.28917694]
[-149.98756409 107.14928436]
[-135.39421082 113.26029205]
[-120.49230194 111.54759979]
[-105.59040070 109.83491516]
[-90.68849945 108.12222290]
[-82.88975525 98.82238770]
[-70.44297791 97.30689240]
[-59.99102020 104.93647003]
[-45.05671310 103.53416443]
[-30.12240601 102.13186646]
[-23.71546364 98.35076141]
[-14.86332607 100.85904694]
[0.09692237 99.76773834]
[9.61018467 88.36451721]
[24.76645851 87.04465485]
[36.66270065 97.10035706]
[51.62295151 96.00904846]
[66.58319855 94.91773987]
[81.54344940 93.82643127]
[100.13495636 77.24555969]
[124.79896545 92.03073120]
[135.89027405 81.93208313]
[126.85118103 69.94795227]
[118.95641327 57.18091202]
[112.27333832 43.73989105]
[106.85895538 29.73956299]
[102.75947571 15.29937935]
[100.00987244 0.54254031]
[98.63359833 -14.40505219]
[98.64240265 -29.41586685]
[100.03620148 -44.36183548]
[102.80311584 -59.11544037]
[106.91953278 -73.55080414]
[112.35032654 -87.54476929]
[119.04916382 -100.97794342]
[126.95890045 -113.73571777]
[136.01203918 -125.70923615]
[146.13136292 -136.79635620]
[157.23049927 -146.90246582]
[169.21478271 -155.94136047]
[181.98196411 -163.83592224]
[195.42309570 -170.51878357]
[209.42350769 -175.93292236]
[223.86375427 -180.03216553]
[238.62065125 -182.78152466]
[253.56826782 -184.15754700]
[268.57907104 -184.14849854]
[283.52502441 -182.75444031]
[298.27859497 -179.98728943]
[312.71386719 -175.87063599]
[326.70776367 -170.43960571]
[340.14080811 -163.74053955]
[352.89846802 -155.83058167]
[364.87182617 -146.77723694]
[375.95877075 -136.65774536]
[386.06469727 -125.55843353]
[395.10339355 -113.57399750]
[402.99774170 -100.80669403]
[409.68038940 -87.36545563]
[415.09429932 -73.36494446]
[419.19329834 -58.92462540]
[421.94241333 -44.16769409]
[423.31817627 -29.22005463]
[423.30886841 -14.20924091]
[421.91458130 0.73668092]
[419.14715576 15.49019337]
[415.03027344 29.92542076]
[409.59899902 43.91920853]
[402.89971924 57.35215759]
[394.98956299 70.10966492]
[385.93600464 82.08288574]
[375.81634521 93.16966248]
[364.71685791 103.27541351]
[352.73226929 112.31391144]
[339.96484375 120.20803833]
[326.52346802 126.89044952]
[312.52288818 132.30412292]
[298.08248901 136.40287781]
[283.32553101 139.15174866]
[268.37786865 140.52728271]
[253.36703491 140.51773071]
[238.42114258 139.12316895]
[223.66767883 136.35552979]
[209.23251343 132.23838806]
[195.23881531 126.80689240]
[181.80598450 120.10738373]
[169.04861450 112.19700623]
[157.07553101 103.14326477]
[145.98892212 93.02339935]
[134.89761353 103.12204742]
[147.89875793 95.64072418]
[162.89566040 95.33557892]
[176.19036865 102.28183746]
[184.50469971 114.76670837]
[185.78849792 129.71166992]
[179.72520447 143.43159485]
[167.80990601 152.54344177]
[152.98068237 154.80041504]
[138.89410400 149.64596558]
[129.02363586 138.35110474]
[125.80309296 123.70212555]
[125.80309296 138.70213318]
[125.80309296 153.70213318]
[125.80309296 168.70213318]
[125.80309296 183.70213318]
[125.80309296 198.70213318]
[125.80309296 213.70213318]
[125.80309296 228.70213318]
[125.80309296 243.70213318]
[125.80309296 258.70211792]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[13 59]
[14 58]
[15 57]
[16 56]
[19 53]
[20 52]
[21 50]
[22 49]
[23 48]
[25 45]
[26 44]
[27 43]
[28 42]
[30 40]
[61 130]
[62 129]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
