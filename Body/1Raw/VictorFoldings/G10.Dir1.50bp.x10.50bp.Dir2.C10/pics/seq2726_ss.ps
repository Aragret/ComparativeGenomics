%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:37 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCACCUCUAGCAUCACCAGUAUUAGAGGCACCGCCUGCCCAGUGACACAUGUUUAACGGCCGCxxxxxxxxxxAUACCCAACCCCCUGGUCAACCUCAACCUAGGCCUCCUAUUUAUUCUAGCCACCUCUAGCCUCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[139.78298950 84.04070282]
[127.05332184 91.97515869]
[114.32366180 99.90962219]
[107.57685089 112.15593719]
[93.61080170 112.82004547]
[80.88113403 120.75450134]
[68.15147400 128.68896484]
[60.53278732 142.55497742]
[45.63911057 142.72102356]
[32.90944672 150.65548706]
[29.22420883 165.79011536]
[16.20149040 173.65544128]
[1.79565251 170.04885864]
[-10.93401146 177.98332214]
[-23.66367531 185.91778564]
[-36.39333725 193.85224915]
[-49.12300110 201.78669739]
[-61.85266495 209.72116089]
[-59.70840454 224.79837036]
[-63.88822174 239.44244385]
[-73.66793060 251.11622620]
[-87.35314941 257.79714966]
[-102.57281494 258.32772827]
[-116.69004822 252.61599731]
[-127.25893402 241.65158081]
[-132.44836426 227.33412170]
[-131.35922241 212.14419556]
[-124.18022919 198.71356201]
[-112.15517426 189.36915588]
[-97.36747742 185.72994995]
[-82.37918854 188.42646790]
[-69.78712463 196.99150085]
[-57.05746460 189.05703735]
[-44.32780075 181.12257385]
[-31.59813499 173.18812561]
[-18.86847115 165.25366211]
[-6.13880777 157.31919861]
[-3.03256345 142.79725647]
[9.76409626 134.56924438]
[24.97498512 137.92582703]
[37.70465088 129.99136353]
[44.41282272 116.69287872]
[60.21701431 115.95929718]
[72.94667816 108.02484131]
[85.67633820 100.09037781]
[92.42314911 87.84406281]
[106.38919830 87.17995453]
[119.11886597 79.24549866]
[131.84852600 71.31103516]
[124.92597198 58.24116898]
[118.92913055 44.72173691]
[113.88700867 30.81821060]
[109.82398224 16.59791183]
[106.75970459 2.12969971]
[104.70898438 -12.51637363]
[103.68171692 -27.26939392]
[103.68284607 -42.05792999]
[104.71234894 -56.81038284]
[106.76519775 -71.45532990]
[109.83143616 -85.92187500]
[113.89618683 -100.13997650]
[118.93974304 -114.04080200]
[124.93766022 -127.55707550]
[131.86087036 -140.62335205]
[139.67584229 -153.17639160]
[148.34469604 -165.15542603]
[157.82543945 -176.50247192]
[168.07215881 -187.16262817]
[179.03523254 -197.08428955]
[190.66154480 -206.21945190]
[202.89479065 -214.52389526]
[215.67572021 -221.95744324]
[228.94245911 -228.48411560]
[242.63075256 -234.07237244]
[256.67431641 -238.69515991]
[271.00515747 -242.33012390]
[285.55386353 -244.95968628]
[300.25003052 -246.57116699]
[315.02246094 -247.15678406]
[329.79965210 -246.71371460]
[344.51004028 -245.24414062]
[359.08245850 -242.75521851]
[373.44628906 -239.25901794]
[387.53204346 -234.77249146]
[401.27151489 -229.31738281]
[414.59820557 -222.92015076]
[427.44760132 -215.61177063]
[439.75750732 -207.42764282]
[451.46832275 -198.40745544]
[462.52337646 -188.59486389]
[472.86917114 -178.03741455]
[482.45562744 -166.78625488]
[491.23635864 -154.89584351]
[499.16885376 -142.42379761]
[512.35717773 -149.57003784]
[525.54547119 -156.71629333]
[538.66064453 -163.99581909]
[551.70141602 -171.40788269]
[564.74218750 -178.81994629]
[566.33447266 -194.25511169]
[576.72027588 -205.78398132]
[591.90600586 -208.97346497]
[606.05249023 -202.59715271]
[613.72003174 -189.10685730]
[611.96038818 -173.68988037]
[601.45013428 -162.27435303]
[586.23071289 -159.24978638]
[572.15423584 -165.77919006]
[559.11346436 -158.36712646]
[546.07269287 -150.95506287]
[541.78637695 -144.87994385]
[532.69171143 -143.52798462]
[519.50341797 -136.38174438]
[506.31512451 -129.23550415]
[512.60003662 -115.37198639]
[517.87622070 -101.09378815]
[522.11639404 -86.47421265]
[525.29882812 -71.58830261]
[527.40716553 -56.51249695]
[528.43054199 -41.32419205]
[528.36364746 -26.10136795]
[527.20678711 -10.92219067]
[524.96594238 4.13540030]
[521.65246582 18.99408531]
[517.28344727 33.57756805]
[511.88125610 47.81095505]
[505.47357178 61.62115860]
[498.09329224 74.93724823]
[489.77825928 87.69084930]
[480.57116699 99.81644440]
[470.51925659 111.25177002]
[459.67410278 121.93807983]
[448.09140015 131.82048035]
[435.83053589 140.84822083]
[422.95452881 148.97489929]
[409.52938843 156.15876770]
[395.62411499 162.36293030]
[381.31002808 167.55548096]
[366.66061401 171.70973206]
[351.75112915 174.80433655]
[336.65808105 176.82334900]
[321.45898438 177.75639343]
[306.23187256 177.59864807]
[291.05490112 176.35086060]
[276.00604248 174.01943970]
[261.16253662 170.61630249]
[246.60064697 166.15890503]
[232.39509583 160.67008972]
[218.61888123 154.17800903]
[205.34271240 146.71598816]
[192.63481140 138.32228088]
[180.56040955 129.03999329]
[169.18154907 118.91673279]
[158.55667114 108.00447083]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 49]
[2 48]
[3 47]
[5 45]
[6 44]
[7 43]
[9 41]
[10 40]
[13 37]
[14 36]
[15 35]
[16 34]
[17 33]
[18 32]
[94 114]
[95 113]
[96 112]
[97 110]
[98 109]
[99 108]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
