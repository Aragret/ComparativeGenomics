%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:40 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGGCCACAUCUACCAUCACCCUCUACAUCACCGCCCCGACCUUAGCUCUCACCAUCGCUCUUxxxxxxxxxxCCAUACCCAACCCCCUGGUCAACCUCAACCUAGGCCUCCUAUUUAUUCUAGCCACCUCUACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[92.34559631 107.34234619]
[92.65765381 92.34559631]
[92.96971130 77.34883881]
[93.28176117 62.35208893]
[93.59381866 47.35533524]
[93.90587616 32.35858154]
[94.21793365 17.36182594]
[94.52999115 2.36507249]
[94.84204865 -12.63168144]
[95.15409851 -27.62843513]
[95.46615601 -42.62518692]
[80.49871826 -43.65603256]
[65.59791565 -45.40330505]
[50.79801941 -47.86298752]
[36.13307571 -51.02941895]
[21.63680840 -54.89532089]
[7.34256363 -59.45179749]
[-6.71678209 -64.68836975]
[-20.50889206 -70.59300232]
[-34.00204468 -77.15209961]
[-47.16520309 -84.35057831]
[-59.96809387 -92.17189026]
[-72.38127136 -100.59803772]
[-84.37617493 -109.60964966]
[-95.92523193 -119.18598938]
[-107.00186157 -129.30503845]
[-117.58060455 -139.94351196]
[-127.63711548 -151.07695007]
[-137.14826965 -162.67974854]
[-146.09219360 -174.72520447]
[-154.44830322 -187.18563843]
[-162.19740295 -200.03236389]
[-169.32165527 -213.23585510]
[-175.80465698 -226.76571655]
[-181.63153076 -240.59086609]
[-186.78884888 -254.67947388]
[-191.26477051 -268.99914551]
[-195.04898071 -283.51693726]
[-198.13278198 -298.19949341]
[-200.50907898 -313.01300049]
[-202.17242432 -327.92340088]
[-203.11897278 -342.89642334]
[-203.34654236 -357.89758301]
[-202.85462952 -372.89242554]
[-201.64436340 -387.84643555]
[-199.71850586 -402.72518921]
[-197.08151245 -417.49453735]
[-193.73944092 -432.12045288]
[-189.69996643 -446.56930542]
[-184.97238159 -460.80786133]
[-179.56756592 -474.80340576]
[-173.49797058 -488.52371216]
[-166.77751160 -501.93722534]
[-159.42169189 -515.01312256]
[-151.44740295 -527.72131348]
[-142.87298584 -540.03253174]
[-133.71817017 -551.91845703]
[-124.00401306 -563.35186768]
[-113.75285339 -574.30633545]
[-102.98827362 -584.75671387]
[-91.73502350 -594.67901611]
[-80.01899719 -604.05029297]
[-67.86714172 -612.84912109]
[-55.30739975 -621.05523682]
[-42.36865997 -628.64965820]
[-29.08068275 -635.61505127]
[-15.47403336 -641.93536377]
[-1.58000612 -647.59600830]
[12.56944180 -652.58398438]
[26.94176674 -656.88787842]
[41.50391006 -660.49768066]
[56.22238159 -663.40515137]
[71.06332397 -665.60363770]
[85.99260712 -667.08807373]
[100.97589111 -667.85498047]
[115.97871399 -667.90258789]
[130.96656799 -667.23089600]
[145.90496826 -665.84136963]
[160.75958252 -663.73724365]
[175.49623108 -660.92327881]
[190.08100891 -657.40606689]
[204.48039246 -653.19360352]
[218.66123962 -648.29559326]
[232.59094238 -642.72332764]
[246.23747253 -636.48962402]
[259.56942749 -629.60876465]
[272.55615234 -622.09667969]
[285.16778564 -613.97052002]
[297.37527466 -605.24908447]
[309.15060425 -595.95239258]
[320.46667480 -586.10180664]
[331.29742432 -575.72003174]
[341.61795044 -564.83087158]
[351.40454102 -553.45941162]
[360.63470459 -541.63183594]
[369.28713989 -529.37536621]
[377.34201050 -516.71807861]
[384.78076172 -503.68920898]
[391.58627319 -490.31866455]
[397.74291992 -476.63717651]
[403.23654175 -462.67626953]
[408.05447388 -448.46801758]
[412.18566895 -434.04510498]
[415.62057495 -419.44073486]
[418.35134888 -404.68844604]
[420.37167358 -389.82220459]
[421.67694092 -374.87619019]
[422.26409912 -359.88479614]
[422.13183594 -344.88247681]
[421.28042603 -329.90374756]
[419.71182251 -314.98309326]
[417.42968750 -300.15478516]
[414.43920898 -285.45294189]
[410.74731445 -270.91137695]
[406.36245728 -256.56356812]
[401.29473877 -242.44247437]
[395.55581665 -228.58059692]
[389.15887451 -215.00981140]
[382.11865234 -201.76133728]
[374.45135498 -188.86564636]
[366.17456055 -176.35238647]
[357.30734253 -164.25033569]
[347.87008667 -152.58735657]
[337.88449097 -141.39025879]
[327.37356567 -130.68479919]
[316.36141968 -120.49558258]
[304.87344360 -110.84606934]
[292.93603516 -101.75843811]
[280.57662964 -93.25360107]
[267.82369995 -85.35111237]
[254.70652771 -78.06915283]
[241.25531006 -71.42446899]
[227.50099182 -65.43235016]
[213.47518921 -60.10656357]
[199.21018982 -55.45936966]
[184.73876953 -51.50145340]
[170.09423828 -48.24192429]
[155.31027222 -45.68827057]
[140.42086792 -43.84637070]
[125.46027374 -42.72046280]
[110.46291351 -42.31313324]
[110.15085602 -27.31637764]
[109.83879852 -12.31962490]
[109.52674103 2.67712879]
[109.21468353 17.67388153]
[108.90263367 32.67063522]
[108.59057617 47.66738892]
[108.27851868 62.66414261]
[107.96646118 77.66089630]
[107.65440369 92.65765381]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 150]
[3 149]
[4 148]
[5 147]
[6 146]
[7 145]
[8 144]
[9 143]
[10 142]
[11 141]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
