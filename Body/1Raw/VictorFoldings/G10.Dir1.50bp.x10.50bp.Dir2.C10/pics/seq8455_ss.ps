%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:33:59 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCUCACUCAUUUACACCAACCACCCAACUAUCUAUAAACCUAGCCAUGGCCAUCCCCUUAUxxxxxxxxxxGUACUUGCCGCAGUACUCUUAAAACUAGGCGGCUAUGGUAUAAUACGCCUCACACUCAUUCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[110.96700287 264.02694702]
[110.96700287 249.02696228]
[110.96700287 234.02696228]
[110.96700287 219.02696228]
[110.96700287 204.02696228]
[110.96700287 189.02696228]
[110.96700287 174.02696228]
[110.96700287 159.02696228]
[110.96700287 144.02696228]
[110.96700287 129.02696228]
[105.21610260 124.21269226]
[95.58739471 135.71435547]
[84.08589172 126.08546448]
[93.71429443 114.58416748]
[87.96339417 109.76990509]
[73.19734192 112.40876770]
[63.49347687 126.92677307]
[46.62946701 129.90826416]
[33.08000183 119.99514008]
[18.37203789 122.94062805]
[3.66407681 125.88610840]
[-11.04388428 128.83158875]
[-12.17099476 143.88589478]
[-17.31899643 158.07746887]
[-26.10587502 170.35319519]
[-37.87958145 179.80212402]
[-51.76643372 185.72309875]
[-66.73593140 187.67674255]
[-81.67723846 185.51806641]
[-95.48161316 179.40727234]
[-107.12467957 169.79782104]
[-115.74244690 157.40278625]
[-120.69541168 143.14198303]
[-121.61603546 128.07363892]
[-118.43599701 113.31592560]
[-111.39128876 99.96397400]
[-101.00466156 89.00858307]
[-88.04688263 81.26271057]
[-73.47949982 77.30116272]
[-58.38350677 77.41790009]
[-43.87913132 81.60427094]
[-31.04269409 89.54960632]
[-20.82674217 100.66432190]
[-13.98936749 114.12362671]
[0.71859437 111.17814636]
[15.42655563 108.23266602]
[30.13451767 105.28717804]
[35.73294449 93.64010620]
[47.19826126 87.26665497]
[60.43337631 88.70179749]
[70.55847168 97.64271545]
[85.32453156 95.00385284]
[97.12117004 85.73889923]
[103.18418121 72.01884460]
[109.24720001 58.29879379]
[115.31021118 44.57873917]
[121.37322235 30.85868645]
[127.43623352 17.13863182]
[133.49925232 3.41857886]
[139.56225586 -10.30147457]
[127.22273254 -1.77293646]
[113.31850433 3.85489106]
[98.52083588 6.31031132]
[83.54412842 5.47478294]
[69.11140442 1.38864362]
[55.91944504 -5.75083923]
[44.60512161 -15.59899044]
[35.71466064 -27.68036842]
[29.67726517 -41.41171265]
[26.78440857 -56.13011551]
[27.17575073 -71.12500763]
[30.83239555 -85.67248535]
[37.57781219 -99.07022095]
[47.08634949 -110.67141724]
[58.89896011 -119.91599274]
[72.44536591 -126.35765076]
[87.07157898 -129.68539429]
[102.07147980 -129.73858643]
[116.72092438 -126.51464844]
[130.31266785 -120.16922760]
[142.19055176 -111.00865173]
[151.78112793 -99.47518921]
[158.62138367 -86.12562561]
[162.38110352 -71.60445404]
[162.87878418 -56.61270905]
[160.09037781 -41.87416077]
[154.15156555 -28.10217094]
[166.41392517 -36.74128723]
[178.67630005 -45.38040161]
[181.66246033 -57.97153854]
[192.10769653 -64.90811157]
[204.07870483 -62.90756607]
[216.51814270 -71.28971100]
[228.95758057 -79.67185211]
[228.51925659 -95.09298706]
[236.50737000 -108.29123688]
[250.37292480 -115.05507660]
[265.69149780 -113.22620392]
[277.57498169 -103.38819885]
[282.23141479 -88.68032837]
[278.17489624 -73.79582977]
[266.69989014 -63.48428726]
[251.46803284 -61.03607559]
[237.33973694 -67.23241425]
[224.90028381 -58.85026932]
[212.46084595 -50.46812820]
[205.66027832 -34.32030106]
[187.31541443 -33.11803436]
[175.05303955 -24.47891808]
[162.79067993 -15.83980274]
[153.28231812 -4.23846149]
[147.21929932 9.48159218]
[141.15629578 23.20164490]
[135.09327698 36.92169952]
[129.03025818 50.64175415]
[122.96724701 64.36180878]
[116.90423584 78.08186340]
[110.84122467 91.80191040]
[122.73976135 82.66819763]
[129.61062622 69.33435822]
[139.55828857 58.10743332]
[151.96797180 49.68129730]
[166.07270813 44.57671738]
[181.00073242 43.10917282]
[195.82948303 45.36936951]
[209.64244080 51.21761703]
[221.58593750 60.29246902]
[230.92181396 72.03305817]
[237.07305908 85.71378326]
[239.65951538 100.48910522]
[238.52133179 115.44586182]
[233.72885132 129.65966797]
[225.57826233 142.25202942]
[214.57330322 152.44471741]
[201.39411926 159.60777283]
[186.85525513 163.29849243]
[171.85525513 163.28877258]
[157.32119751 159.57920837]
[144.15132141 152.39906311]
[133.15838623 142.19068909]
[125.96700287 129.02696228]
[125.96700287 144.02696228]
[125.96700287 159.02696228]
[125.96700287 174.02696228]
[125.96700287 189.02696228]
[125.96700287 204.02696228]
[125.96700287 219.02696228]
[125.96700287 234.02696228]
[125.96700287 249.02696228]
[125.96700287 264.02694702]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[15 52]
[16 51]
[19 47]
[20 46]
[21 45]
[22 44]
[53 118]
[54 117]
[55 116]
[56 115]
[57 114]
[58 113]
[59 112]
[60 111]
[87 110]
[88 109]
[89 108]
[92 106]
[93 105]
[94 104]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
