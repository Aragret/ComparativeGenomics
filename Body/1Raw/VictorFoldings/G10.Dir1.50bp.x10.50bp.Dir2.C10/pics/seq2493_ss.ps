%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:55 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGUAUAGAAGAACUAAUGUUAGUAUAAGUAACAUGAAAACAUUCUCCUCCGCAUAAGCCUGCxxxxxxxxxxUCCCUAGGAGGCCUGCCCCCGCUAACCGGCUUUUUGCCCAAAUGGGCCAUUAUCGAAGAACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[112.97900391 275.68951416]
[112.97900391 260.68951416]
[112.97900391 245.68951416]
[112.97900391 230.68951416]
[112.97900391 215.68951416]
[112.97900391 200.68951416]
[112.97900391 185.68951416]
[112.97900391 170.68951416]
[112.97900391 155.68951416]
[112.97900391 140.68951416]
[99.91739655 145.23423767]
[85.32028961 145.44725037]
[70.65934753 140.83657837]
[60.44586945 151.82225037]
[50.23239136 162.80790710]
[49.37710571 178.82815552]
[36.23554230 188.03025818]
[20.88878059 183.35517883]
[15.10954380 168.38922119]
[23.33116722 154.61299133]
[39.24672699 152.59443665]
[49.46020508 141.60876465]
[59.67368317 130.62310791]
[52.35457993 117.52994537]
[37.64661789 120.47543335]
[22.93865585 123.42091370]
[8.23069477 126.36639404]
[-6.47726679 129.31187439]
[-21.18522835 132.25735474]
[-33.19738388 142.55389404]
[-47.19620514 137.46643066]
[-61.53966904 146.50531006]
[-74.19596863 135.22460938]
[-66.85973358 119.94010925]
[-50.14168549 122.75847626]
[-39.18154526 112.67261505]
[-24.13071060 117.54940033]
[-9.42274952 114.60391998]
[5.28521204 111.65843201]
[19.99317360 108.71295166]
[34.70113373 105.76747131]
[49.40909576 102.82198334]
[50.96667862 87.90307617]
[37.18429565 81.98310852]
[23.40191460 76.06314850]
[7.18911695 78.52835083]
[-2.83948803 65.55302429]
[3.63266850 50.48507309]
[19.94758606 48.82511139]
[29.32187843 62.28076553]
[43.10425949 68.20072937]
[56.88664246 74.12069702]
[72.57486725 66.05744171]
[88.04837799 64.99308014]
[86.18076324 50.10979843]
[84.31314850 35.22651672]
[82.44553375 20.34323883]
[80.57791901 5.45995855]
[76.27033997 -8.90822506]
[69.64183807 -22.36419106]
[63.01334000 -35.82015610]
[47.97120285 -40.66882706]
[40.83778381 -54.77166367]
[45.84522247 -69.76169586]
[60.02268600 -76.74561310]
[74.95893860 -71.57997131]
[81.79257202 -57.32946014]
[76.46930695 -42.44865417]
[83.09780121 -28.99268913]
[89.72630310 -15.53672409]
[91.35857391 -30.44764900]
[97.90588379 -43.94330597]
[108.60697174 -54.45456696]
[122.21764374 -60.75929642]
[137.15539551 -62.12444687]
[151.68342590 -58.39129639]
[164.11256409 -49.99389267]
[172.99769592 -37.90859604]
[177.30575562 -23.54055595]
[176.53584290 -8.56032753]
[170.77748108 5.29034805]
[160.70018005 16.40106392]
[147.47561646 23.47998619]
[132.64141846 25.70405579]
[117.92233276 22.81468201]
[105.02973938 15.14780807]
[95.46120453 3.59234571]
[97.32881165 18.47562599]
[99.19642639 33.35890579]
[101.06404114 48.24218369]
[102.93165588 63.12546539]
[118.62138367 66.39375305]
[132.00749207 76.26071167]
[140.35990906 91.33420563]
[141.72467041 109.11822510]
[156.65898132 107.71592712]
[171.59329224 106.31362152]
[186.52760315 104.91131592]
[201.10029602 101.35655212]
[215.00285339 95.72460175]
[228.90541077 90.09264374]
[236.45918274 75.93919373]
[252.26008606 73.16224670]
[264.18698120 83.89203644]
[263.09063721 99.89758301]
[249.81201172 108.90080261]
[234.53736877 103.99520111]
[220.63481140 109.62715149]
[206.73225403 115.25910950]
[207.58860779 122.71006012]
[209.30130005 137.61196899]
[210.15763855 145.06291199]
[224.97540283 147.39402771]
[239.79315186 149.72512817]
[253.55661011 141.48214722]
[268.53152466 147.23815918]
[273.23040771 162.57765198]
[264.04867554 175.73347473]
[248.02980042 176.61360168]
[237.46205139 164.54287720]
[222.64428711 162.21177673]
[207.82653809 159.88067627]
[187.67971802 140.79434204]
[187.92990112 119.84562683]
[172.99559021 121.24793243]
[158.06129456 122.65023041]
[143.12698364 124.05253601]
[156.90536499 129.98178101]
[170.68376160 135.91104126]
[185.53370667 138.02737427]
[197.71298218 146.78324890]
[204.44921875 160.18560791]
[204.20909119 175.18368530]
[197.04724121 188.36351013]
[184.59391785 196.72500610]
[169.68382263 198.36485291]
[155.71090698 192.90977478]
[145.85580444 181.60151672]
[142.36177063 167.01698303]
[135.17039490 153.85324097]
[127.97900391 140.68951416]
[127.97900391 155.68951416]
[127.97900391 170.68951416]
[127.97900391 185.68951416]
[127.97900391 200.68951416]
[127.97900391 215.68951416]
[127.97900391 230.68951416]
[127.97900391 245.68951416]
[127.97900391 260.68951416]
[127.97900391 275.68951416]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[13 23]
[14 22]
[15 21]
[24 42]
[25 41]
[26 40]
[27 39]
[28 38]
[29 37]
[31 35]
[43 52]
[44 51]
[45 50]
[54 91]
[55 90]
[56 89]
[57 88]
[58 87]
[59 70]
[60 69]
[61 68]
[95 127]
[96 126]
[97 125]
[98 124]
[99 109]
[100 108]
[101 107]
[112 122]
[113 121]
[114 120]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
