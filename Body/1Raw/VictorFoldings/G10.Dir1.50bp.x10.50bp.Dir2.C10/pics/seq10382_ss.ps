%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:44 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGAACCUCGCCUUACCCCCCACUAUUAACCUACUGGGAGAACUCUCUGUGCUAGUAACCACGUUCUxxxxxxxxxxCAGCAGCCAUUCAAGCAAUCCUAUACAACCGUAUCGGCGAUAUCGGUUUCAUCCUCGCCUUAGCCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[154.43927002 404.91824341]
[154.43927002 389.91824341]
[154.43927002 374.91824341]
[154.43927002 359.91824341]
[154.43927002 344.91824341]
[154.43927002 329.91824341]
[154.43927002 314.91824341]
[154.43927002 299.91824341]
[154.43927002 284.91824341]
[154.43927002 269.91824341]
[152.07810974 255.10525513]
[147.41467285 240.84860229]
[142.75125122 226.59193420]
[138.08781433 212.33528137]
[132.86479187 198.27398682]
[127.09032440 184.43000793]
[121.31586456 170.58602905]
[115.54140472 156.74206543]
[109.76694489 142.89808655]
[100.66978455 144.72306824]
[91.23986816 144.60823059]
[81.89282990 142.49554443]
[73.05364990 138.41632080]
[65.13735199 132.49255371]
[58.52968216 124.93402100]
[53.56847000 116.03122711]
[38.77951813 118.53860474]
[23.99056816 121.04598236]
[9.20161629 123.55335236]
[5.02059364 138.23265076]
[-5.12190485 149.63845825]
[-19.21207809 155.50614929]
[-34.45231247 154.67068481]
[-47.81665039 147.29794312]
[-56.65158844 134.85179138]
[-59.20294571 119.80342865]
[-54.96414948 105.14070892]
[-44.77681351 93.77493286]
[-30.66364098 87.96277618]
[-15.42681503 88.85824585]
[-2.09161663 96.28356171]
[6.69424105 108.76440430]
[21.48319244 106.25702667]
[36.27214432 103.74964905]
[51.06109238 101.24227905]
[52.98225021 86.36581421]
[39.31547165 80.18364716]
[25.64869690 74.00148010]
[9.39176369 76.15651703]
[-0.38714314 62.99198151]
[6.37167597 48.05041504]
[22.71532822 46.70242310]
[31.83086395 60.33470154]
[45.49764252 66.51686859]
[59.16441727 72.69903564]
[72.48927307 53.56614304]
[94.81594849 41.40665817]
[91.00527954 26.89876938]
[87.19461060 12.39088154]
[83.38394165 -2.11700559]
[78.02226257 -16.12601662]
[71.17282104 -29.47087288]
[64.43392944 -35.71775436]
[64.32283020 -43.14773560]
[57.73838806 -56.62531281]
[51.15394211 -70.10289001]
[38.76848221 -81.68031311]
[46.46481705 -96.78669739]
[63.11139297 -93.57299805]
[64.63151550 -76.68733215]
[71.21596527 -63.20975876]
[77.80040741 -49.73218155]
[84.51767731 -36.32031250]
[91.36711884 -22.97545433]
[93.79463196 -37.77772522]
[102.72529602 -49.82941055]
[116.18021393 -56.46003723]
[131.17796326 -56.20034790]
[144.39526367 -49.10789108]
[152.90335083 -36.75424576]
[154.81695557 -21.87681007]
[149.71205139 -7.77220392]
[138.71980286 2.43419361]
[124.27593994 6.48079252]
[109.58102417 3.47092438]
[97.89183044 -5.92767477]
[101.70249939 8.58021259]
[105.51316833 23.08810043]
[109.32383728 37.59598923]
[124.08729553 40.24934387]
[132.71116638 27.97624397]
[128.51416016 12.91240692]
[135.02894592 -1.30348313]
[149.17944336 -7.95911789]
[164.28421021 -3.91191030]
[173.21125793 8.92717266]
[171.74548340 24.49590874]
[160.57899475 35.44321442]
[144.98426819 36.60010910]
[136.36039734 48.87320709]
[140.67233276 55.00975800]
[152.94541931 46.38589096]
[165.21865845 37.76221466]
[173.84214783 50.03557968]
[161.56929016 58.65898895]
[149.29618835 67.28285217]
[153.60812378 73.41940308]
[168.07766724 69.46559906]
[182.54719543 65.51178741]
[197.01672363 61.55798340]
[208.16448975 49.53052902]
[224.09219360 53.43437576]
[228.41479492 69.25357819]
[216.68557739 80.71469879]
[200.97053528 76.02751160]
[186.50100708 79.98132324]
[172.03146362 83.93512726]
[157.56193542 87.88893890]
[147.38140869 119.94727325]
[123.61091614 137.12362671]
[129.38537598 150.96760559]
[135.15983582 164.81156921]
[140.93429565 178.65554810]
[146.70875549 192.49951172]
[150.35667419 195.07191467]
[152.72602844 198.35444641]
[153.75109863 201.84677124]
[153.53916931 205.08004761]
[152.34446716 207.67184448]
[157.00790405 221.92849731]
[161.67134094 236.18516541]
[166.33477783 250.44181824]
[169.89628601 235.87077332]
[178.15054321 223.34611511]
[190.13603210 214.32678223]
[204.45660400 209.86344910]
[219.44409180 210.47599792]
[233.35266113 216.09307861]
[244.56214905 226.06039429]
[251.76679993 239.21687317]
[254.12736511 254.02996826]
[251.36888123 268.77413940]
[243.81265259 281.73190308]
[232.33891296 291.39385986]
[218.28416443 296.63449097]
[203.28561401 296.84332275]
[189.09040833 291.99609375]
[177.35206604 282.65737915]
[169.43927002 269.91824341]
[169.43927002 284.91824341]
[169.43927002 299.91824341]
[169.43927002 314.91824341]
[169.43927002 329.91824341]
[169.43927002 344.91824341]
[169.43927002 359.91824341]
[169.43927002 374.91824341]
[169.43927002 389.91824341]
[169.43927002 404.91824341]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 158]
[2 157]
[3 156]
[4 155]
[5 154]
[6 153]
[7 152]
[8 151]
[9 150]
[10 149]
[11 132]
[12 131]
[13 130]
[14 129]
[15 124]
[16 123]
[17 122]
[18 121]
[19 120]
[26 45]
[27 44]
[28 43]
[29 42]
[46 55]
[47 54]
[48 53]
[57 89]
[58 88]
[59 87]
[60 86]
[61 74]
[62 73]
[64 72]
[65 71]
[66 70]
[90 100]
[91 99]
[107 118]
[108 117]
[109 116]
[110 115]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
