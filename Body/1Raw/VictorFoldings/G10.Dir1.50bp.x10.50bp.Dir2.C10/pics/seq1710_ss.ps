%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:33 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCUCCUCAAGUAUACUUCAAAGGACAUUUAACUAAAACCCCUACGCAUUUAUAUAGAGGAGAxxxxxxxxxxGGCAGUUGAGGUGGAUUAAACCAAACCCAGCUACGCAAAAUCUUAGCAUACUCCUCAAUUACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[92.50000000 249.64317322]
[92.50000000 234.64317322]
[92.50000000 219.64317322]
[92.50000000 204.64317322]
[92.50000000 189.64317322]
[92.50000000 174.64317322]
[92.50000000 159.64317322]
[92.50000000 144.64317322]
[92.50000000 129.64317322]
[92.50000000 114.64316559]
[82.39456177 103.55802917]
[67.45854950 102.17400360]
[52.52254105 100.78997803]
[37.58652878 99.40595245]
[22.65051460 98.02193451]
[7.71450233 96.63790894]
[-2.72630525 104.27944946]
[-15.17323589 102.78102875]
[-22.98428535 93.49395752]
[-37.88873291 91.80355835]
[-52.79317856 90.11315918]
[-67.69762421 88.42276001]
[-82.60207367 86.73236847]
[-90.27925873 100.82640076]
[-102.73928070 110.88105011]
[-118.06331635 115.38574982]
[-133.90589905 113.68172455]
[-147.85395813 106.05815125]
[-157.79434204 93.70359039]
[-162.23393250 78.52076721]
[-177.16993713 77.13674164]
[-192.10595703 75.75271606]
[-201.43937683 85.51472473]
[-214.50431824 88.06199646]
[-226.46566772 82.68102264]
[-233.02830505 71.55070496]
[-247.93275452 69.86030579]
[-262.83718872 68.16990662]
[-276.23266602 76.99833679]
[-291.44171143 71.89298248]
[-296.79724121 56.77022552]
[-288.19097900 43.23095703]
[-272.22488403 41.66134644]
[-261.14678955 53.26546097]
[-246.24235535 54.95585632]
[-231.33790588 56.64625549]
[-218.67424011 45.62197876]
[-201.61726379 47.16830063]
[-190.72192383 60.81669998]
[-175.78591919 62.20072556]
[-160.84989929 63.58475113]
[-154.76573181 50.90389252]
[-144.69004822 41.04768753]
[-131.82377625 35.21952438]
[-117.71026611 34.14097595]
[-104.05017090 37.96253204]
[-92.49653625 46.24298859]
[-84.45477295 58.00027847]
[-80.91167450 71.82791901]
[-66.00723267 73.51831818]
[-51.10278320 75.20871735]
[-36.19833374 76.89910889]
[-21.29388809 78.58950806]
[-5.64143753 70.71262360]
[9.09852791 81.70188904]
[24.03454018 83.08591461]
[38.97055435 84.46994019]
[53.90656662 85.85396576]
[68.84257507 87.23799133]
[83.77858734 88.62201691]
[70.23630524 82.17171478]
[60.44005203 70.81242371]
[56.05001068 56.46921921]
[57.81016541 41.57284927]
[65.42221832 28.64780807]
[77.59615326 19.88451576]
[92.26884460 16.76808739]
[106.95370483 19.82666779]
[119.16207886 28.54191780]
[126.82500458 41.43685913]
[128.64384460 56.32617569]
[124.31037140 70.68656921]
[114.55817413 82.08497620]
[128.48889160 76.52304077]
[142.30247498 70.67625427]
[155.99310303 64.54708099]
[169.48847961 57.99921036]
[182.77583313 51.03885269]
[196.06317139 44.07849503]
[209.12986755 36.71225739]
[221.96351624 28.94712067]
[229.76521301 15.18325233]
[244.65979004 15.21450806]
[257.49343872 7.44937277]
[270.32708740 -0.31576273]
[278.79144287 -16.63708496]
[296.31228638 -16.38298988]
[308.98379517 -24.40998840]
[313.88519287 -39.68597794]
[328.93493652 -45.24340057]
[342.58813477 -36.81907654]
[344.37124634 -20.87542343]
[332.91641235 -9.64305019]
[317.01080322 -11.73847198]
[304.33929443 -3.71147442]
[301.36578369 8.05374908]
[290.82147217 14.83525944]
[278.09222412 12.51789093]
[265.25857544 20.28302574]
[252.42492676 28.04816246]
[245.54116821 41.25661850]
[229.72865295 41.78077698]
[216.89500427 49.54590988]
[215.70770264 52.92785263]
[212.78807068 55.88510895]
[208.36238098 57.59358597]
[203.02352905 57.36583710]
[189.73619080 64.32619476]
[176.44883728 71.28655243]
[175.05560303 74.58898926]
[171.95945740 77.36090088]
[167.43698120 78.79368591]
[162.12228394 78.23770142]
[148.43165588 84.36688232]
[145.90632629 88.48657990]
[140.73741150 91.03022766]
[134.05082703 90.45375824]
[120.12011719 96.01569366]
[135.01200867 97.81337738]
[149.48773193 93.88231659]
[164.34083557 95.97648621]
[177.16537476 103.75665283]
[185.88403320 115.96259308]
[189.08454895 130.61717224]
[186.24850464 145.34663391]
[177.83528137 157.76507568]
[165.20767212 165.86094666]
[150.41108704 168.32287598]
[135.84230042 164.75209045]
[123.86118317 155.72697449]
[116.40844727 142.70941162]
[114.69138336 127.80690765]
[107.50000000 114.64316559]
[107.50000000 129.64317322]
[107.50000000 144.64317322]
[107.50000000 159.64317322]
[107.50000000 174.64317322]
[107.50000000 189.64317322]
[107.50000000 204.64317322]
[107.50000000 219.64317322]
[107.50000000 234.64317322]
[107.50000000 249.64317322]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 152]
[2 151]
[3 150]
[4 149]
[5 148]
[6 147]
[7 146]
[8 145]
[9 144]
[10 143]
[11 70]
[12 69]
[13 68]
[14 67]
[15 66]
[16 65]
[19 63]
[20 62]
[21 61]
[22 60]
[23 59]
[30 51]
[31 50]
[32 49]
[36 46]
[37 45]
[38 44]
[83 128]
[84 127]
[85 124]
[86 123]
[87 119]
[88 118]
[89 117]
[90 113]
[91 112]
[93 110]
[94 109]
[95 108]
[97 105]
[98 104]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
