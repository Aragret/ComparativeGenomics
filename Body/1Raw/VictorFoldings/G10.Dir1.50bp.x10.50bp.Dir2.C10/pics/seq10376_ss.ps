%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:40 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCCUCGCUAACCUCGCCUUACCCCCCACUAUUAACCUACUGGGAGAACUCUCUGUGCUAGUAACxxxxxxxxxxACAACCACCACCCCAUCAUACUCUUUCACCCACAGCACCAAUCCUACCUCCAUCGCUAACCCCCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[102.57238007 141.18737793]
[92.67749023 152.46084595]
[82.78260803 163.73431396]
[72.88771820 175.00779724]
[62.99282837 186.28126526]
[53.09794235 197.55473328]
[49.94610214 215.67086792]
[33.15992355 220.70619202]
[23.49258423 232.17539978]
[13.82524681 243.64459229]
[4.15790892 255.11380005]
[10.45145607 269.01898193]
[10.07993031 284.27758789]
[3.11709952 297.85998535]
[-9.05456257 307.06939697]
[-24.01836205 310.07730103]
[-38.80322647 306.28643799]
[-50.47361374 296.44952393]
[-56.71235275 282.51968384]
[-56.28074265 267.26266479]
[-49.26447678 253.70777893]
[-37.05664444 244.54637146]
[-22.08111382 241.59742737]
[-7.31129217 245.44645691]
[2.35604572 233.97726440]
[12.02338409 222.50805664]
[21.69072151 211.03886414]
[20.98377609 198.92788696]
[28.99254417 189.28738403]
[41.82447052 187.65985107]
[51.71935654 176.38638306]
[61.61424255 165.11289978]
[71.50913239 153.83943176]
[81.40402222 142.56596375]
[91.29890442 131.29248047]
[89.36985016 124.04481506]
[75.28147888 129.19435120]
[63.95452881 139.02798462]
[49.61508942 134.62565613]
[45.75737000 120.13021851]
[56.01170349 109.18267059]
[70.72753143 112.08473206]
[85.51172638 109.54947662]
[83.58266449 102.30180359]
[69.39284515 97.43878174]
[53.41231155 101.12042236]
[42.43313980 88.93888855]
[47.74976730 73.42549133]
[63.89289856 70.53908539]
[74.25586700 83.24896240]
[88.44568634 88.11198425]
[95.77173615 75.02270508]
[84.20638275 65.47060394]
[72.64103699 55.91849518]
[56.38835526 53.73163605]
[50.40701675 38.46220398]
[60.85010910 25.81807899]
[76.97467804 28.80645752]
[82.19314575 44.35314941]
[93.75849152 53.90525436]
[105.32383728 63.45735931]
[120.10804749 60.91823196]
[134.89094543 58.37934113]
[142.60650635 45.51582336]
[150.32206726 32.65230560]
[158.03762817 19.78878784]
[165.75320435 6.92527103]
[172.00923157 -6.70785093]
[176.73004150 -20.94561577]
[181.45085144 -35.18338013]
[186.17166138 -49.42114639]
[173.08319092 -56.84934998]
[161.69558716 -66.68849182]
[152.44654846 -78.56037140]
[145.69158936 -92.00866699]
[141.69035339 -106.51647186]
[140.59663391 -121.52613831]
[142.45246887 -136.46072388]
[147.18653870 -150.74620056]
[154.61685181 -163.83346558]
[164.45783997 -175.21948242]
[176.33122253 -184.46659851]
[189.78060913 -191.21939087]
[204.28906250 -195.21827698]
[219.29890442 -196.30957031]
[234.23320007 -194.45130920]
[248.51789856 -189.71493530]
[261.60397339 -182.28248596]
[272.98840332 -172.43966675]
[282.23358154 -160.56478882]
[288.98419189 -147.11430359]
[292.98074341 -132.60520935]
[294.06958008 -117.59519196]
[292.20892334 -102.66120148]
[287.47021484 -88.37725830]
[280.03567505 -75.29239655]
[270.19100952 -63.90956879]
[258.31463623 -54.66629791]
[244.86305237 -47.91786957]
[230.35331726 -43.92367554]
[215.34312439 -42.83724594]
[200.40942383 -44.70033646]
[195.68861389 -30.46257210]
[190.96780396 -16.22480774]
[186.24699402 -1.98704159]
[198.52507019 -10.60383320]
[213.38482666 -12.65018177]
[227.53494263 -7.67283630]
[237.84129333 3.22575784]
[242.02107239 17.63164139]
[239.14848328 32.35401535]
[229.85980225 44.13198090]
[216.21240234 50.35680389]
[201.22908020 49.64973450]
[188.22853088 42.16737747]
[180.09028625 29.56702423]
[178.61671448 14.64083481]
[170.90115356 27.50435257]
[163.18559265 40.36787033]
[155.47003174 53.23138809]
[147.75445557 66.09490204]
[160.80244446 58.69558334]
[174.78819275 53.27349091]
[189.41401672 49.94403076]
[204.36863708 48.77806473]
[219.33375549 49.80041122]
[233.99085999 52.98930359]
[248.02801514 58.27688217]
[261.14642334 65.55059814]
[273.06692505 74.65564728]
[283.53576660 85.39823151]
[292.33016968 97.54972076]
[299.26290894 110.85148621]
[304.18649292 125.02040863]
[306.99606323 139.75494385]
[307.63189697 154.74145508]
[306.08038330 169.66099548]
[302.37460327 184.19602966]
[296.59338379 198.03718567]
[288.85980225 210.88989258]
[279.33847046 222.48056030]
[268.23199463 232.56254578]
[255.77677917 240.92123413]
[242.23791504 247.37872314]
[227.90356445 251.79759216]
[213.07881165 254.08378601]
[198.07917786 254.18864441]
[183.22390747 252.10993958]
[168.82917786 247.89189148]
[155.20137024 241.62431335]
[142.63050842 233.44056702]
[131.38417053 223.51484680]
[121.70171356 212.05841064]
[113.78920746 199.31509399]
[107.81506348 185.55610657]
[103.90642548 171.07431030]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 35]
[2 34]
[3 33]
[4 32]
[5 31]
[6 30]
[8 27]
[9 26]
[10 25]
[11 24]
[44 51]
[45 50]
[52 61]
[53 60]
[54 59]
[63 121]
[64 120]
[65 119]
[66 118]
[67 117]
[68 105]
[69 104]
[70 103]
[71 102]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
