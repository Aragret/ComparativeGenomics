%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:14 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCAUGUUUAACGGCCGCGGUACCCUAACCGUGCAAAGGUAGCAUAAUCACUUGUUCCUUAAxxxxxxxxxxCGACCCCUUAUUUACCGAGAAAGCUCACAAGAACUGCUAACUCAUGCCCCCAUGUCUAACCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[136.22154236 306.30487061]
[134.97467041 291.35678101]
[133.72779846 276.40869141]
[132.48092651 261.46060181]
[131.23403931 246.51251221]
[129.98716736 231.56442261]
[127.19484711 216.82662964]
[122.88726044 202.45843506]
[118.57967377 188.09025574]
[114.27209473 173.72207642]
[109.96450806 159.35388184]
[105.65692139 144.98570251]
[101.34934235 130.61752319]
[97.04175568 116.24933624]
[100.23792267 130.90486145]
[93.79425049 144.45030212]
[80.40730286 151.21711731]
[65.67931366 148.37348938]
[55.77369308 137.10945129]
[54.83578873 122.13880157]
[63.25810242 109.72652435]
[77.51728821 105.06697083]
[62.94458771 108.62172699]
[55.29016876 113.72679901]
[48.03175735 112.09550476]
[33.38825607 115.34632874]
[18.74475479 118.59716034]
[4.10125446 121.84798431]
[-10.54224682 125.09880829]
[-18.81754494 138.56338501]
[-34.20914459 142.15145874]
[-47.58548355 133.73426819]
[-51.01061630 118.30558777]
[-42.45247269 105.01898956]
[-26.98844719 101.75717163]
[-13.79307270 110.45530701]
[0.85042852 107.20448303]
[15.49392986 103.95365906]
[30.13743210 100.70282745]
[44.78093338 97.45200348]
[59.38982391 94.04902649]
[73.96252441 90.49426270]
[83.17295837 87.01531219]
[91.57063293 87.84661865]
[97.54543304 92.04344177]
[102.44698334 77.86688232]
[99.64392090 62.29597092]
[111.11536407 52.79569626]
[116.01691437 38.61913681]
[120.91846466 24.44257927]
[125.82001495 10.26602173]
[130.72155762 -3.91053677]
[122.55051422 -12.10666943]
[118.07726288 -22.72469139]
[117.92150116 -34.19391632]
[122.06732941 -44.83345413]
[129.87127686 -53.09855652]
[140.16180420 -57.80486679]
[151.41513062 -58.29806900]
[157.19140625 -72.14128876]
[162.96768188 -85.98450470]
[168.74395752 -99.82772064]
[174.52021790 -113.67093658]
[161.59339905 -121.32884216]
[149.85820007 -130.71133423]
[139.54306030 -141.63580322]
[130.84877014 -153.88960266]
[123.94454193 -167.23417664]
[118.96479797 -181.40980530]
[116.00644684 -196.14051819]
[115.12709045 -211.13961792]
[116.34383392 -226.11512756]
[119.63300323 -240.77552795]
[124.93056488 -254.83546448]
[132.13340759 -268.02127075]
[141.10131836 -280.07626343]
[151.65974426 -290.76577759]
[163.60316467 -299.88174438]
[176.69908142 -307.24673462]
[190.69258118 -312.71737671]
[205.31127930 -316.18719482]
[220.27062988 -317.58865356]
[235.27943420 -316.89440918]
[250.04554749 -314.11807251]
[264.28152466 -309.31359863]
[277.71029663 -302.57458496]
[290.07043457 -294.03213501]
[301.12133789 -283.85256958]
[310.64791870 -272.23403931]
[318.46475220 -259.40270996]
[324.41964722 -245.60830688]
[328.39672852 -231.11936951]
[330.31854248 -216.21794128]
[330.14767456 -201.19406128]
[327.88751221 -186.34017944]
[323.58200073 -171.94543457]
[317.31494141 -158.29002380]
[309.20837402 -145.63975525]
[299.42004395 -134.24085999]
[288.14050293 -124.31523895]
[275.58929443 -116.05607605]
[262.01077271 -109.62415314]
[247.66920471 -105.14466858]
[232.84378052 -102.70480347]
[217.82307434 -102.35206604]
[202.89945984 -104.09332275]
[188.36343384 -107.89466858]
[182.58717346 -94.05145264]
[176.81089783 -80.20822906]
[171.03462219 -66.36501312]
[165.25834656 -52.52179718]
[175.89486694 -37.23381424]
[175.23919678 -18.47228050]
[163.37469482 -3.73218608]
[144.89811707 0.99101406]
[139.99656677 15.16757202]
[135.09501648 29.34412956]
[130.19346619 43.52068710]
[125.29191589 57.69724655]
[128.44558716 72.25415802]
[116.62354279 82.76844025]
[111.72199249 96.94499207]
[111.40993500 111.94174957]
[115.71752167 126.30993652]
[120.02510834 140.67811584]
[124.33269501 155.04629517]
[128.64027405 169.41448975]
[132.94786072 183.78266907]
[137.25544739 198.15084839]
[141.56303406 212.51904297]
[147.15788269 198.60150146]
[158.87651062 189.23808289]
[173.68559265 186.85246277]
[187.75183105 192.06214905]
[197.43423462 203.51864624]
[200.22653198 218.25645447]
[195.40594482 232.46075439]
[184.22027588 242.45478821]
[169.56491089 245.65165710]
[155.23332214 241.22383118]
[144.93525696 230.31755066]
[146.18212891 245.26564026]
[147.42900085 260.21371460]
[148.67588806 275.16180420]
[149.92276001 290.10989380]
[151.16963196 305.05798340]
[162.43951416 316.47592163]
[160.39628601 332.38833618]
[146.60731506 340.58856201]
[131.65034485 334.78613281]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 146]
[2 145]
[3 144]
[4 143]
[5 142]
[6 141]
[7 130]
[8 129]
[9 128]
[10 127]
[11 126]
[12 125]
[13 124]
[14 123]
[22 42]
[23 41]
[25 40]
[26 39]
[27 38]
[28 37]
[29 36]
[45 122]
[46 121]
[48 119]
[49 118]
[50 117]
[51 116]
[52 115]
[59 111]
[60 110]
[61 109]
[62 108]
[63 107]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
