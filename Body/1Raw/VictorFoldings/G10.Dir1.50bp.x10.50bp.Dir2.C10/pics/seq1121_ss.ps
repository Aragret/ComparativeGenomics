%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:28 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGUAGCAAUAAACGAAAGUUUAACUAAGCUAUACUAACCCCAGGGUUGGUCAAUUUCGUGCCAxxxxxxxxxxCACACUCAUCACAGCGCUAAGCUCGCACUGAUUUUUUACCUGAGUAGGCCUAGAAAUAAACCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[96.16835785 280.65872192]
[96.16835785 265.65872192]
[96.16835785 250.65872192]
[96.16835785 235.65872192]
[96.16835785 220.65872192]
[96.16835785 205.65872192]
[96.16835785 190.65872192]
[96.16835785 175.65872192]
[96.16835785 160.65872192]
[96.16835785 145.65872192]
[83.10166168 138.29248047]
[70.26800537 146.05761719]
[57.43435287 153.82275391]
[44.60069656 161.58789062]
[40.91804504 181.28047180]
[24.24942017 191.83891296]
[5.45720339 186.90704346]
[-6.87408066 195.44750977]
[-19.20536423 203.98797607]
[-31.53664780 212.52842712]
[-43.86793137 221.06889343]
[-50.38169098 236.11889648]
[-66.70113373 237.73377991]
[-76.03821564 224.25228882]
[-68.78775024 209.54301453]
[-52.40839005 208.73760986]
[-40.07710648 200.19714355]
[-27.74582291 191.65667725]
[-15.41453934 183.11622620]
[-3.08325553 174.57575989]
[-4.03883743 164.24906921]
[-0.56401193 154.39167786]
[6.76905680 146.83056641]
[16.66668510 142.99697876]
[27.34158707 143.65585327]
[36.83556366 148.75422668]
[49.66921616 140.98908997]
[62.50287247 133.22396851]
[75.33652496 125.45882416]
[75.02861023 117.96514893]
[74.10487366 95.48411560]
[60.67742538 88.79804230]
[47.24997330 82.11196899]
[33.82252502 75.42589569]
[20.39507675 68.73981476]
[6.96762705 62.05374146]
[-6.45982265 55.36766815]
[-22.78564453 56.91672134]
[-32.06828308 43.39767456]
[-24.75855255 28.71775818]
[-8.37607956 27.97841644]
[0.22625285 41.94021606]
[13.65370178 48.62629318]
[27.08115196 55.31236649]
[40.50860214 61.99844360]
[53.93605042 68.68451691]
[67.36350250 75.37059784]
[80.79094696 82.05667114]
[87.04296875 77.91393280]
[78.46474457 65.60888672]
[66.91491699 56.03802109]
[72.25690460 42.02148819]
[87.24703217 42.56554413]
[91.55889130 56.93239594]
[99.54700470 69.62845612]
[105.79901886 65.48571777]
[104.87561035 50.51417160]
[103.95219421 35.54262161]
[89.67024994 30.25621986]
[78.77775574 19.61322021]
[73.16190338 5.45758295]
[73.79566193 -9.75814056]
[80.56924438 -23.39773369]
[92.30907440 -33.09805679]
[106.98116302 -37.17846680]
[122.04347992 -34.93201065]
[134.88638306 -26.74790001]
[143.28477478 -14.04408169]
[145.78355408 0.97843212]
[141.94982910 15.71689892]
[132.44779968 27.61779213]
[118.92374420 34.61920547]
[119.84716034 49.59075546]
[120.77056885 64.56230927]
[133.44209290 72.58930206]
[147.37280273 67.02736664]
[161.30351257 61.46542740]
[175.23423767 55.90349197]
[189.16494751 50.34155655]
[202.52305603 43.51797867]
[215.19456482 35.49098206]
[227.86608887 27.46398544]
[231.44094849 12.30291367]
[244.40602112 4.34290791]
[258.83773804 7.84443092]
[271.50927734 -0.18256600]
[284.18078613 -8.20956326]
[286.08221436 -23.73111343]
[297.55108643 -34.36123276]
[313.17208862 -35.08070755]
[325.56951904 -25.54981613]
[328.88967896 -10.26876068]
[321.56484985 3.54721451]
[307.05364990 9.37462807]
[292.20779419 4.46195269]
[279.53625488 12.48894978]
[266.86474609 20.51594734]
[263.86437988 35.06013870]
[251.12802124 43.38116455]
[235.89308167 40.13550186]
[223.22155762 48.16249847]
[210.55004883 56.18949509]
[225.39729309 58.32473755]
[236.82841492 68.03707123]
[241.33369446 82.34450531]
[237.52984619 96.85417938]
[226.58479309 107.11116791]
[211.85900879 109.96623993]
[197.87379456 104.54279327]
[188.92306519 92.50600433]
[187.75497437 77.55155182]
[194.72688293 64.27227020]
[180.79617310 69.83420563]
[166.86546326 75.39614868]
[152.93473816 80.95808411]
[139.00402832 86.52001953]
[153.30673218 81.99977112]
[168.30468750 81.75221252]
[182.74877930 85.79795074]
[195.43605042 93.80004120]
[205.30979919 105.09202576]
[211.54771423 118.73345184]
[213.63026428 133.58818054]
[211.38400269 148.41903687]
[204.99600220 161.99082947]
[194.99830627 173.17321777]
[182.22355652 181.03488159]
[167.73571777 184.92106628]
[152.74139404 184.50810242]
[138.48942566 179.83036804]
[126.16675568 171.27748108]
[116.79970551 159.56175232]
[111.16835785 145.65872192]
[111.16835785 160.65872192]
[111.16835785 175.65872192]
[111.16835785 190.65872192]
[111.16835785 205.65872192]
[111.16835785 220.65872192]
[111.16835785 235.65872192]
[111.16835785 250.65872192]
[111.16835785 265.65872192]
[111.16835785 280.65872192]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 152]
[2 151]
[3 150]
[4 149]
[5 148]
[6 147]
[7 146]
[8 145]
[9 144]
[10 143]
[11 39]
[12 38]
[13 37]
[14 36]
[17 30]
[18 29]
[19 28]
[20 27]
[21 26]
[41 58]
[42 57]
[43 56]
[44 55]
[45 54]
[46 53]
[47 52]
[66 84]
[67 83]
[68 82]
[85 126]
[86 125]
[87 124]
[88 123]
[89 122]
[90 112]
[91 111]
[92 110]
[95 107]
[96 106]
[97 105]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
