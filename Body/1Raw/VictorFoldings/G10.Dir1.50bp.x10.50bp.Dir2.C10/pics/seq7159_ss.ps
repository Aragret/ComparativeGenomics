%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:18 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGAUCAUAUUCAUCGGCGUAAAUCUAACUUUCUUCCCACAACACUUUCUCGGCCUAUCCGGAxxxxxxxxxxGGUAUAUAGUUUAAACAAAACGAAUGAUUUCGACUCAUUAAAUUAUGAUAAUCAUAUUUACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[189.35134888 604.24224854]
[189.35134888 589.24224854]
[189.35134888 574.24224854]
[189.35134888 559.24224854]
[189.35134888 544.24224854]
[189.35134888 529.24224854]
[189.35134888 514.24224854]
[189.35134888 499.24227905]
[189.35134888 484.24227905]
[189.35134888 469.24227905]
[187.63865662 454.34036255]
[184.23568726 439.73147583]
[180.83270264 425.12258911]
[177.42973328 410.51370239]
[174.02674866 395.90478516]
[170.62377930 381.29589844]
[166.91761780 366.76095581]
[162.90986633 352.30627441]
[152.05334473 342.10897827]
[155.82218933 326.74322510]
[151.81445312 312.28851318]
[138.65426636 300.72094727]
[143.32785034 282.94067383]
[132.26153564 272.97143555]
[135.70989990 257.53060913]
[131.40231323 243.16241455]
[126.43672180 237.62268066]
[127.15792084 228.45034790]
[123.15018463 213.99566650]
[119.14244080 199.54096985]
[115.13469696 185.08628845]
[111.12696075 170.63160706]
[106.27769470 164.98977661]
[107.18955231 155.83442688]
[104.29471588 153.71606445]
[102.31054688 150.06028748]
[101.96199799 145.32415771]
[103.73585510 140.27708435]
[100.94353485 125.53927612]
[98.15120697 110.80147552]
[86.29872131 114.48154449]
[71.81472778 106.44723511]
[64.58287811 86.53427887]
[56.85879135 73.67588043]
[42.35247040 77.79920197]
[27.28483582 78.02681732]
[12.68308926 74.34919739]
[-0.45888653 67.02286530]
[-11.24816990 56.55247498]
[-18.95347595 43.65607071]
[-23.05471611 29.21583557]
[-23.27809906 14.21775436]
[-19.61440277 -0.31571791]
[-12.31919384 -13.39534950]
[-1.89500701 -24.13247299]
[-9.61909199 -36.99087524]
[-16.76790428 -42.78279495]
[-17.36690712 -50.19810486]
[-24.82181740 -63.21441650]
[-32.27672958 -76.23072815]
[-47.31936646 -81.80733490]
[-52.20127487 -97.08956146]
[-43.17746735 -110.35419464]
[-27.17024040 -111.42573547]
[-16.45896530 -99.48220062]
[-19.26041794 -83.68563843]
[-11.80550861 -70.66932678]
[-4.35059786 -57.65301514]
[3.23931050 -44.71496201]
[10.96339512 -31.85655785]
[25.33853340 -36.01647186]
[40.31212616 -36.31378174]
[54.86359024 -32.72221756]
[67.99956512 -25.48077202]
[78.82171631 -15.07781124]
[86.58817291 -2.21813917]
[90.76437378 12.22474861]
[91.05988312 27.26799774]
[87.44853973 41.88628006]
[80.17070007 55.08167267]
[69.71719360 65.95178986]
[77.44128418 78.81019592]
[84.87280273 79.82136536]
[79.19277191 65.93837738]
[88.37586212 54.07789993]
[103.23886871 56.10055923]
[108.91859436 69.98366547]
[99.73584747 81.84369659]
[107.16737366 82.85486603]
[118.04619598 72.52765656]
[128.92501831 62.20045471]
[139.80384827 51.87324905]
[141.65673828 35.93755341]
[155.34669495 27.57306862]
[170.37196350 33.19631195]
[175.20643616 48.49361038]
[166.14152527 61.73018646]
[150.13105774 62.75207520]
[139.25222778 73.07927704]
[128.37339783 83.40648651]
[117.49457550 93.73368835]
[112.88901520 108.00914764]
[115.68133545 122.74695587]
[118.47366333 137.48475647]
[121.72448730 152.12826538]
[125.58164978 166.62385559]
[129.58938599 181.07855225]
[133.59712219 195.53323364]
[137.60487366 209.98793030]
[141.61260986 224.44261169]
[145.77049255 238.85482788]
[150.07807922 253.22300720]
[161.45249939 264.21997070]
[157.69602966 278.63308716]
[168.69174194 285.45571899]
[171.96043396 297.56088257]
[166.26914978 308.28079224]
[170.27688599 322.73547363]
[181.42007446 333.96667480]
[177.36456299 348.29852295]
[181.37229919 362.75323486]
[185.88276672 367.72949219]
[186.98664856 373.38748169]
[185.23266602 377.89291382]
[188.63563538 392.50183105]
[192.03862000 407.11071777]
[195.44160461 421.71960449]
[198.84457397 436.32849121]
[202.24755859 450.93737793]
[208.30883789 437.21655273]
[219.97183228 427.78393555]
[234.65681458 424.72592163]
[249.11558533 428.71893311]
[260.14999390 438.87969971]
[265.31933594 452.96081543]
[263.48022461 467.84765625]
[255.03941345 480.24737549]
[241.86395264 487.41726685]
[226.86813354 487.77142334]
[213.36889648 481.23150635]
[204.35134888 469.24227905]
[204.35134888 484.24227905]
[204.35134888 499.24227905]
[204.35134888 514.24224854]
[204.35134888 529.24224854]
[204.35134888 544.24224854]
[204.35134888 559.24224854]
[204.35134888 574.24224854]
[204.35134888 589.24224854]
[204.35134888 604.24224854]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[11 129]
[12 128]
[13 127]
[14 126]
[15 125]
[16 124]
[17 121]
[18 120]
[20 118]
[21 117]
[23 114]
[25 112]
[26 111]
[28 110]
[29 109]
[30 108]
[31 107]
[32 106]
[34 105]
[38 104]
[39 103]
[40 102]
[43 82]
[44 81]
[55 70]
[56 69]
[58 68]
[59 67]
[60 66]
[89 101]
[90 100]
[91 99]
[92 98]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
