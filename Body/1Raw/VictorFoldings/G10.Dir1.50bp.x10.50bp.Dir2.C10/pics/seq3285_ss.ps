%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:24 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCCUCCUACUCCUCAUUGUACCCAUUCUAAUCGCAAUGGCAUUCCUAAUGCUUACCGAACGxxxxxxxxxxAUUCAACCAAUAGCCCUGGCCGUACGCCUAACCGCUAACAUUACUGCAGGCCACCUACUCCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[41.45309067 363.13488770]
[41.45309067 348.13488770]
[41.45309067 333.13488770]
[41.45309067 318.13488770]
[41.45309067 303.13488770]
[41.45309067 288.13488770]
[41.45309067 273.13488770]
[41.45309067 258.13488770]
[41.45309067 243.13488770]
[41.45309067 228.13488770]
[26.47702217 223.88739014]
[13.28505135 215.59599304]
[2.94404101 203.92164612]
[-3.70700884 189.79922485]
[-6.12503195 174.36274719]
[-4.10722780 158.85424805]
[2.19195604 144.52391052]
[12.27261353 132.52922058]
[25.32904243 123.84150696]
[40.31414032 119.16730499]
[40.00208282 104.17055511]
[39.69002533 89.17379761]
[28.39102173 79.30807495]
[13.48911953 81.02076721]
[-1.41278255 82.73345947]
[-16.31468582 84.44614410]
[-31.21658707 86.15883636]
[-46.11848831 87.87152863]
[-50.64336395 102.41268921]
[-60.69634628 113.85198212]
[-74.53569031 120.20748138]
[-89.76364899 120.37806702]
[-103.74188995 114.33416748]
[-114.04859161 103.12293243]
[-118.89806366 88.68678284]
[-117.45010376 73.52685547]
[-109.95556641 60.26971054]
[-97.71294403 51.21222305]
[-82.84333801 47.92366028]
[-67.92299652 50.97378540]
[-55.53695679 59.83414078]
[-47.83118057 72.96961975]
[-32.92927551 71.25693512]
[-18.02737427 69.54424286]
[-3.12547231 67.83155060]
[11.77643013 66.11886597]
[26.67833328 64.40617371]
[30.83621979 49.99395752]
[19.13659668 40.60679626]
[7.43697262 31.21963501]
[-4.26265097 21.83247375]
[-15.96227455 12.44531155]
[-32.10026550 7.24900436]
[-31.57447243 -9.69678783]
[-15.14537430 -13.88260555]
[-6.57511282 0.74568760]
[5.12451077 10.13284969]
[16.82413483 19.52001190]
[28.52375793 28.90717316]
[40.22338104 38.29433441]
[46.95136261 34.98008728]
[36.48929977 24.23089027]
[43.47960281 10.95927811]
[58.26174545 13.50648212]
[60.40732956 28.35158730]
[67.13531494 25.03733826]
[66.82325745 10.04058361]
[66.51119995 -4.95616961]
[52.45673752 -10.82063675]
[42.00736237 -21.89901352]
[36.97349167 -36.27190781]
[38.22727585 -51.44912338]
[45.55148697 -64.80111694]
[57.67716217 -74.01457977]
[72.50345612 -77.49322510]
[87.46161652 -74.63434601]
[99.96006775 -65.93326569]
[107.83335876 -52.89750290]
[109.71740723 -37.78557968]
[105.28578186 -23.21572685]
[95.30629730 -11.71226120]
[81.50795746 -5.26822615]
[81.82000732 9.72852802]
[82.13206482 24.72528076]
[88.39505005 28.85142517]
[89.27886963 13.87748623]
[102.68863678 7.15602446]
[115.21441650 15.40858650]
[114.33027649 30.38250732]
[100.92101288 37.10371399]
[107.18399048 41.22985840]
[121.08654785 35.59790421]
[134.98910522 29.96594620]
[148.89166260 24.33399010]
[152.69395447 6.66040277]
[166.19299316 -5.12764502]
[183.90580750 -6.49044800]
[198.78486633 2.92661715]
[212.44111633 -3.27879000]
[226.09735107 -9.48419666]
[233.05583191 -23.93961716]
[248.72752380 -27.37145615]
[261.09045410 -17.14710045]
[260.66082764 -1.10979998]
[247.76824951 8.43799973]
[232.30276489 4.17204428]
[218.64651489 10.37745094]
[204.99028015 16.58285904]
[204.33374023 28.77750969]
[198.49784851 39.58755875]
[188.54605103 46.91292953]
[176.34794617 49.30062866]
[164.22824097 46.23259354]
[154.52362061 38.23654556]
[140.62106323 43.86850357]
[126.71850586 49.50045776]
[112.81594849 55.13241577]
[133.25550842 78.65027618]
[132.00666809 104.87393188]
[145.90922546 110.50588989]
[162.06721497 107.70393372]
[172.36358643 120.46781921]
[166.20631409 135.66716003]
[149.92945862 137.66616821]
[140.27726746 124.40844727]
[126.37471008 118.77648926]
[83.53106689 135.92372131]
[54.68677902 88.86174011]
[54.99883652 103.85849762]
[55.31089401 118.85524750]
[69.34838104 122.43442535]
[81.96450043 129.52970886]
[92.29695129 139.64889526]
[99.64141846 152.09336853]
[103.49954987 166.00630188]
[103.61279297 180.43167114]
[99.97967529 194.37992859]
[92.85552979 206.89590454]
[82.73450470 217.12420654]
[70.31534576 224.36766052]
[56.45309067 228.13488770]
[56.45309067 243.13488770]
[56.45309067 258.13488770]
[56.45309067 273.13488770]
[56.45309067 288.13488770]
[56.45309067 303.13488770]
[56.45309067 318.13488770]
[56.45309067 333.13488770]
[56.45309067 348.13488770]
[56.45309067 363.13488770]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[20 130]
[21 129]
[22 128]
[23 47]
[24 46]
[25 45]
[26 44]
[27 43]
[28 42]
[48 60]
[49 59]
[50 58]
[51 57]
[52 56]
[66 84]
[67 83]
[68 82]
[91 117]
[92 116]
[93 115]
[94 114]
[98 108]
[99 107]
[100 106]
[119 126]
[120 125]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
