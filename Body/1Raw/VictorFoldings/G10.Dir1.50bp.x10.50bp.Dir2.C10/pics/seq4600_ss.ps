%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:07 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGACCCCAUCCUAAAGUAAGGUCAGCUAAAUAAGCUAUCGGGCCCAUACCCCGAAAAUGUUGxxxxxxxxxxUAUAAUACGCCUCACACUCAUUCUCAACCCCCUGACAAAACACAUAGCCUACCCCUUCCUCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[101.77928925 283.40625000]
[101.46723175 268.40951538]
[101.15517426 253.41275024]
[100.84311676 238.41600037]
[100.53105927 223.41923523]
[100.21900177 208.42248535]
[99.90695190 193.42573547]
[99.59489441 178.42898560]
[99.28283691 163.43222046]
[85.56278229 157.36921692]
[74.26377869 167.23493958]
[62.96477509 177.10066223]
[51.66576767 186.96638489]
[56.55389023 201.35995483]
[55.55675888 216.52813721]
[48.82642746 230.15792847]
[37.38922882 240.17086792]
[22.98924446 245.04005432]
[7.82237434 244.02296448]
[-5.79854774 237.27471924]
[-15.79642963 225.82435608]
[-20.64666557 211.41796875]
[-19.60963058 196.25245667]
[-12.84346581 182.64042664]
[-1.37996101 172.65760803]
[13.03278160 167.82632446]
[28.19692421 168.88331604]
[41.80004501 175.66737366]
[53.09904861 165.80165100]
[64.39805603 155.93592834]
[75.69705963 146.07020569]
[70.50164795 131.99868774]
[55.50245667 131.84265137]
[40.50326920 131.68661499]
[25.50407982 131.53057861]
[13.08256435 141.68368530]
[-2.56913996 138.16178894]
[-9.44438648 123.66660309]
[-2.26907349 109.31758118]
[13.45251179 106.12207031]
[25.66011620 116.53139496]
[40.65930557 116.68743134]
[55.65849304 116.84346771]
[70.65768433 116.99950409]
[70.30349731 102.16838837]
[76.18244171 90.50574493]
[64.48281860 81.11857605]
[52.78319550 71.73141479]
[41.08357239 62.34425735]
[29.38394928 52.95709229]
[14.08362865 56.18729782]
[0.31097704 48.78134918]
[-5.43098116 34.23611069]
[-0.43106821 19.41940117]
[12.94990921 11.32721519]
[28.39386368 13.78043842]
[38.60863113 25.62073135]
[38.77111053 41.25746918]
[50.47073364 50.64463043]
[62.17035675 60.03179550]
[73.86997986 69.41895294]
[85.56960297 78.80611420]
[114.14952087 75.37915802]
[131.07731628 102.18495178]
[112.61679077 131.47651672]
[123.49562073 121.14931488]
[134.37445068 110.82210541]
[145.25326538 100.49490356]
[136.22277832 88.49707794]
[128.61882019 75.54803467]
[122.54053497 61.81660461]
[118.06716919 47.48179245]
[115.25704193 32.73049164]
[114.14679718 17.75500679]
[114.75089264 2.75057960]
[117.06145477 -12.08717728]
[121.04837799 -26.56482506]
[126.65966797 -40.49361420]
[133.82217407 -53.69195938]
[142.44252014 -65.98778534]
[152.40830994 -77.22080231]
[163.58964539 -87.24455261]
[175.84072876 -95.92836761]
[189.00186157 -103.15902710]
[202.90145874 -108.84226227]
[217.35829163 -112.90399170]
[232.18389893 -115.29125977]
[247.18499756 -115.97293091]
[262.16601562 -114.94013214]
[276.93167114 -112.20632935]
[291.28942871 -107.80715179]
[305.05209351 -101.79995728]
[318.04028320 -94.26306152]
[330.08465576 -85.29472351]
[341.02816772 -75.01186371]
[350.72817993 -63.54854202]
[359.05819702 -51.05420685]
[365.90963745 -37.69174576]
[371.19320679 -23.63536453]
[374.83996582 -9.06831932]
[376.80242920 5.81947994]
[377.05496216 20.83393860]
[375.59429932 35.77931595]
[372.43948364 50.46076202]
[367.63165283 64.68688202]
[361.23345947 78.27220154]
[353.32833862 91.03961182]
[344.01934814 102.82266235]
[333.42782593 113.46774292]
[321.69189453 122.83606720]
[308.96450806 130.80549622]
[295.41165161 137.27214050]
[281.20996094 142.15168762]
[266.54461670 145.38052368]
[251.60679626 146.91654968]
[236.59126282 146.73976135]
[221.69375610 144.85243225]
[207.10848999 141.27919006]
[193.02563477 136.06661987]
[179.62878418 129.28266907]
[167.09259033 121.01577759]
[155.58047485 111.37372589]
[144.70164490 121.70093536]
[133.82283020 132.02813721]
[122.94400024 142.35534668]
[134.17053223 132.40722656]
[148.17558289 127.03523254]
[163.17517090 126.92366791]
[177.25859070 132.08673096]
[188.63185120 141.86676025]
[195.84620667 155.01791382]
[197.98266602 169.86499023]
[194.76907349 184.51670837]
[186.61479187 197.10668945]
[174.55853271 206.03118896]
[160.13606262 210.15338135]
[145.18455505 208.94815063]
[131.60858154 202.56904602]
[121.13749695 191.82864380]
[115.10511780 178.09509277]
[114.27958679 163.12017822]
[114.59164429 178.11692810]
[114.90370178 193.11367798]
[115.21575928 208.11042786]
[115.52781677 223.10719299]
[115.83987427 238.10394287]
[116.15192413 253.10069275]
[116.46398163 268.09744263]
[116.77603912 283.09420776]
[119.36704254 302.30191040]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 149]
[2 148]
[3 147]
[4 146]
[5 145]
[6 144]
[7 143]
[8 142]
[9 141]
[10 31]
[11 30]
[12 29]
[13 28]
[32 44]
[33 43]
[34 42]
[35 41]
[46 62]
[47 61]
[48 60]
[49 59]
[50 58]
[65 125]
[66 124]
[67 123]
[68 122]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
