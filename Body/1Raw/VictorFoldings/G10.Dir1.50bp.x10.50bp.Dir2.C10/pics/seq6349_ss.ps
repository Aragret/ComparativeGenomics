%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:19 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGUAAUAAUCUUCUUCAUAGUAAUACCCAUCAUAAUCGGAGGCUUUGGCAACUGACUAGUUCxxxxxxxxxxCCCAAACAUUAAUCAGUUCUUCAAAUAUCUACUCAUCUUCCUAAUUACCAUACUAAUCUUCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[174.00288391 512.18035889]
[173.37890625 497.19335938]
[172.75492859 482.20635986]
[172.13095093 467.21932983]
[171.50697327 452.23233032]
[170.88299561 437.24530029]
[170.25901794 422.25830078]
[169.63504028 407.27127075]
[167.30393982 392.45352173]
[163.29620361 377.99880981]
[159.28845215 363.54412842]
[155.28071594 349.08944702]
[151.27297974 334.63476562]
[147.26524353 320.18008423]
[133.32296753 320.71255493]
[119.60874176 318.10290527]
[106.82201385 312.48065186]
[95.61576080 304.12899780]
[86.56308746 293.47070312]
[80.12796021 281.04653931]
[76.64141846 267.48794556]
[76.28453064 253.48493958]
[79.07902527 239.75093079]
[84.88595581 226.98641968]
[93.41266632 215.84329224]
[104.22747040 206.89147949]
[116.78157043 200.58984375]
[113.37859344 185.98095703]
[109.97561646 171.37205505]
[106.57263947 156.76316833]
[103.01787567 142.19046021]
[99.31171417 127.65552521]
[95.60555267 113.12059021]
[84.61988831 102.90711212]
[69.85383606 100.26824951]
[61.34373474 112.89749908]
[48.42914581 120.96802521]
[33.34760284 123.08155060]
[18.71207619 118.87189484]
[7.05825472 109.06840515]
[0.40523541 95.36960602]
[-0.09430595 80.14888000]
[5.64617920 66.04332733]
[16.63211632 55.49680710]
[30.96012688 50.33657455]
[46.14779663 51.45666885]
[59.56376648 58.66302490]
[68.88364410 70.70710754]
[72.49269867 85.50218964]
[87.25875854 88.14105225]
[91.00913239 90.09584808]
[94.32158661 92.57602692]
[96.18919373 77.69274139]
[98.05680847 62.80946350]
[99.92442322 47.92618561]
[101.79203796 33.04290390]
[94.23730469 16.28265762]
[105.29917145 2.69461441]
[106.85675812 -12.22429752]
[108.41433716 -27.14320946]
[109.97191620 -42.06212234]
[111.52949524 -56.98103333]
[113.08708191 -71.89994812]
[106.82460022 -86.42894745]
[115.84165192 -98.28398895]
[117.39923859 -113.20289612]
[118.64611053 -128.15098572]
[119.58174133 -143.12178040]
[120.51736450 -158.09257507]
[106.72182465 -164.42086792]
[96.14670563 -175.30807495]
[90.22222900 -189.28179932]
[89.74961090 -204.45220947]
[94.79277802 -218.76760864]
[104.66968536 -230.29199219]
[118.04456329 -237.46675110]
[133.10856628 -239.32156372]
[147.82440186 -235.60559082]
[160.20188904 -226.82139587]
[168.56707764 -214.15695190]
[171.78862000 -199.32502747]
[169.43086243 -184.33151245]
[161.81263733 -171.20416260]
[149.96427917 -161.71835327]
[135.48815918 -157.15693665]
[134.55253601 -142.18615723]
[133.61689758 -127.21535492]
[136.09307861 -123.06275940]
[135.94183350 -117.30008698]
[132.31814575 -111.64531708]
[130.76055908 -96.72640991]
[137.13446045 -83.26450348]
[128.00599670 -70.34236908]
[126.44841003 -55.42345428]
[124.89083099 -40.50453949]
[123.33324432 -25.58562851]
[121.77566528 -10.66671658]
[120.21808624 4.25219536]
[127.60673523 13.88106632]
[126.38873291 26.36046600]
[116.67531586 34.91051865]
[114.80770111 49.79379654]
[112.94008636 64.67707825]
[111.07247925 79.56035614]
[109.20486450 94.44364166]
[110.14048767 109.41442871]
[113.84664917 123.94936371]
[117.55281067 138.48429871]
[122.73722839 146.08520508]
[121.18153381 153.36018372]
[124.58451080 167.96908569]
[127.98748779 182.57797241]
[131.39047241 197.18685913]
[147.50502014 197.57929993]
[162.96783447 202.09484863]
[176.74279785 210.42520142]
[187.90840149 222.00668335]
[195.71928406 236.05827332]
[199.65612793 251.63438416]
[199.46005249 267.68844604]
[195.14970398 283.14318848]
[187.01960754 296.96301270]
[175.62007141 308.22329712]
[161.71992493 316.17233276]
[165.72766113 330.62701416]
[169.73541260 345.08169556]
[173.74314880 359.53640747]
[177.75088501 373.99108887]
[181.75862122 388.44577026]
[187.24389648 374.48468018]
[198.50440979 364.57507324]
[213.04946899 360.90881348]
[227.66183472 364.29690552]
[239.10937500 373.98986816]
[244.86000061 387.84378052]
[243.64173889 402.79421997]
[235.72404480 415.53430176]
[222.85824585 423.24606323]
[207.89013672 424.22372437]
[194.13053894 418.25103760]
[184.62205505 406.64730835]
[185.24603271 421.63430786]
[185.87001038 436.62133789]
[186.49398804 451.60833740]
[187.11796570 466.59536743]
[187.74194336 481.58236694]
[188.36592102 496.56939697]
[188.98989868 511.55639648]
[195.68989563 527.13031006]
[182.57936096 537.87976074]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 148]
[2 147]
[3 146]
[4 145]
[5 144]
[6 143]
[7 142]
[8 141]
[9 129]
[10 128]
[11 127]
[12 126]
[13 125]
[14 124]
[27 113]
[28 112]
[29 111]
[30 110]
[31 108]
[32 107]
[33 106]
[34 50]
[35 49]
[52 105]
[53 104]
[54 103]
[55 102]
[56 101]
[58 98]
[59 97]
[60 96]
[61 95]
[62 94]
[63 93]
[65 91]
[66 90]
[67 87]
[68 86]
[69 85]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
