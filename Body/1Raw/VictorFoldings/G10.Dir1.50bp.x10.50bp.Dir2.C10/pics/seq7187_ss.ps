%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:50 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGUUCCCACAACACUUUCUCGGCCUAUCCGGAAUGCCCCGACGUUACUCGGACUACCCCGAUGCxxxxxxxxxxACUUACAGGACUCAACAUACUAGUCACAGCCCUAUACUCCCUCUACAUAUUUACCACAACACCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[149.70974731 74.93254089]
[137.31208801 83.37635803]
[124.91442871 91.82017517]
[112.51676941 100.26399994]
[102.74618530 111.64537048]
[103.77529907 127.43306732]
[91.30561066 135.57899475]
[84.83650970 149.11231995]
[78.36740875 162.64564514]
[76.99155426 179.54367065]
[60.37303543 182.89941406]
[52.54796219 167.85931396]
[64.83409119 156.17654419]
[71.30319214 142.64321899]
[77.77228546 129.10989380]
[76.28045654 114.29019165]
[89.21286011 105.17626953]
[84.32756805 99.48558807]
[74.55698395 88.10420990]
[69.67168427 82.41352844]
[55.31482697 86.75870514]
[50.45245743 91.37788391]
[44.82997894 92.61618042]
[40.28746414 90.97631836]
[25.76630592 94.73610687]
[11.24514961 98.49589539]
[3.66874719 103.70543671]
[-3.60843539 102.18154907]
[-18.20280838 105.64626312]
[-32.79718399 109.11097717]
[-42.40448761 121.95929718]
[-58.44360352 122.31475830]
[-68.61068726 109.90468597]
[-65.10643005 94.24902344]
[-50.61899185 87.35746002]
[-36.26189804 94.51660919]
[-21.66752434 91.05188751]
[-7.07315159 87.58717346]
[7.48536110 83.97473907]
[22.00651741 80.21495056]
[36.52767563 76.45516205]
[50.96965027 72.40184784]
[65.32650757 68.05666351]
[104.07295227 87.86634064]
[116.47061157 79.42252350]
[128.86827087 70.97869873]
[141.26593018 62.53488159]
[128.71931458 37.90458298]
[120.35138702 11.56298542]
[116.38452148 -15.78658867]
[116.92361450 -43.41407013]
[121.95330048 -70.58213806]
[131.33837891 -96.56587982]
[144.82745361 -120.67217255]
[162.05964661 -142.25810242]
[182.57427979 -160.74821472]
[174.00526428 -173.05966187]
[165.43623352 -185.37112427]
[156.86721802 -197.68257141]
[141.26855469 -200.22370911]
[132.10342407 -213.09910583]
[134.80934143 -228.67002869]
[147.78092957 -237.69851685]
[163.32237244 -234.82812500]
[172.21321106 -221.76181030]
[169.17866516 -206.25158691]
[177.74768066 -193.94013977]
[186.31671143 -181.62869263]
[194.88572693 -169.31723022]
[204.09371948 -174.73785400]
[213.62577820 -179.56590271]
[223.44381714 -183.78208923]
[233.50860596 -187.36959839]
[243.77993774 -190.31405640]
[254.21678162 -192.60372925]
[264.77743530 -194.22944641]
[275.41967773 -195.18473816]
[286.10101318 -195.46575928]
[296.77877808 -195.07141113]
[307.41030884 -194.00326538]
[317.95309448 -192.26556396]
[328.36505127 -189.86528015]
[338.60458374 -186.81199646]
[348.63073730 -183.11790466]
[358.40347290 -178.79776001]
[367.88375854 -173.86885071]
[377.03372192 -168.35083008]
[385.81677246 -162.26577759]
[394.19787598 -155.63798523]
[402.14346313 -148.49392700]
[409.62188721 -140.86218262]
[421.10168457 -150.51692200]
[432.58148193 -160.17167664]
[444.06127930 -169.82641602]
[441.98913574 -185.11398315]
[448.53170776 -199.08532715]
[461.60128784 -207.28222656]
[477.02743530 -207.08909607]
[489.88772583 -198.56756592]
[496.07846069 -184.43681335]
[493.62423706 -169.20591736]
[483.30816650 -157.73500061]
[468.42205811 -153.68438721]
[453.71603394 -158.34661865]
[442.23623657 -148.69186401]
[430.75640869 -139.03712463]
[419.27661133 -129.38237000]
[425.62475586 -120.54650879]
[431.39147949 -111.32039642]
[436.55285645 -101.74224854]
[441.08749390 -91.85171509]
[444.97659302 -81.68976593]
[448.20401001 -71.29847717]
[450.75637817 -60.72089005]
[452.62304688 -50.00080872]
[453.79626465 -39.18263245]
[454.27117920 -28.31117630]
[454.04577637 -17.43146706]
[453.12094116 -6.58857489]
[451.50051880 4.17258549]
[449.19116211 14.80743313]
[446.20239258 25.27190971]
[442.54663086 35.52265930]
[438.23892212 45.51721191]
[433.29711914 55.21416092]
[427.74166870 64.57331848]
[421.59552002 73.55590057]
[414.88418579 82.12469482]
[407.63537598 90.24417114]
[399.87911987 97.88069916]
[391.64752197 105.00260925]
[382.97470093 111.58038330]
[373.89648438 117.58676147]
[364.45053101 122.99682617]
[354.67593384 127.78814697]
[344.61315918 131.94085693]
[334.30386353 135.43772888]
[323.79080200 138.26425171]
[313.11746216 140.40867615]
[302.32806396 141.86210632]
[291.46731567 142.61848450]
[280.58016968 142.67465210]
[269.71173096 142.03034973]
[258.90707397 140.68823242]
[248.21087646 138.65380859]
[237.66749573 135.93548584]
[227.32061768 132.54449463]
[217.21308899 128.49487305]
[207.38681030 123.80333710]
[197.88247681 118.48932648]
[188.73948669 112.57480621]
[179.99571228 106.08427429]
[171.68740845 99.04457092]
[163.84899902 91.48484802]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 47]
[2 46]
[3 45]
[4 44]
[5 17]
[7 15]
[8 14]
[9 13]
[20 43]
[21 42]
[24 41]
[25 40]
[26 39]
[28 38]
[29 37]
[30 36]
[56 69]
[57 68]
[58 67]
[59 66]
[91 107]
[92 106]
[93 105]
[94 104]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
