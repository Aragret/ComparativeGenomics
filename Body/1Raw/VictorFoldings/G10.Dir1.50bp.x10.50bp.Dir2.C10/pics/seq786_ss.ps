%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:56 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGACCAAACCCCAAAGACACCCCCCACAGUUUAUGUAGCUUACCUCCUCAAAGCAAUACACUGxxxxxxxxxxCUCAUCACCCAACUAAAAAUAUUAAACACAAACUACCACCUACCUCCCUCACCAAAGCCCACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[-12.63072205 245.89599609]
[-22.27253723 257.38665771]
[-31.91435051 268.87731934]
[-41.55616379 280.36801147]
[-51.19797897 291.85867310]
[-60.83979416 303.34933472]
[-69.63163757 315.50265503]
[-77.52811432 328.25592041]
[-85.42459869 341.00918579]
[-93.32108307 353.76242065]
[-89.45915985 369.08761597]
[-97.63652039 382.61190796]
[-113.00167084 386.31158447]
[-126.43875122 377.99169922]
[-129.97576904 362.58828735]
[-121.51428223 349.23992920]
[-106.07434082 345.86596680]
[-98.17785645 333.11270142]
[-90.28137207 320.35943604]
[-82.38489532 307.60617065]
[-97.06752777 310.67541504]
[-110.36864471 303.74142456]
[-116.25997925 289.94677734]
[-112.07149506 275.54342651]
[-99.70146942 267.05917358]
[-84.75618744 268.33923340]
[-74.00907135 278.80340576]
[-72.33045959 293.70751953]
[-62.68864441 282.21685791]
[-53.04683304 270.72619629]
[-43.40501785 259.23550415]
[-33.76320267 247.74484253]
[-24.12138939 236.25418091]
[-44.74121094 214.11093140]
[-61.46036911 188.89247131]
[-73.82829285 161.27842712]
[-81.51168060 132.01296997]
[-84.30346680 101.88479614]
[-82.12841797 71.70582581]
[-75.04515076 42.28936386]
[-63.24454498 14.42815876]
[-47.04462814 -11.12695026]
[-58.63367462 -20.65028763]
[-70.22272491 -30.17362595]
[-81.81177521 -39.69696426]
[-93.59391022 -48.98035049]
[-105.56417084 -58.01986694]
[-117.53442383 -67.05938721]
[-129.50468445 -76.09890747]
[-143.94601440 -70.67197418]
[-159.02403259 -73.93646240]
[-169.92739868 -84.85067749]
[-173.17689514 -99.93193054]
[-167.73561096 -114.36785889]
[-155.33984375 -123.55200195]
[-139.94503784 -124.55374146]
[-126.46362305 -117.05341339]
[-119.19746399 -103.44435883]
[-120.46516418 -88.06916809]
[-108.49490356 -79.02964783]
[-96.52465057 -69.99012756]
[-84.55438995 -60.95060730]
[-79.72758484 -60.72431564]
[-75.00707245 -57.42210007]
[-72.28843689 -51.28601074]
[-60.69938660 -41.76267242]
[-49.11033630 -32.23933792]
[-37.52128983 -22.71599960]
[-30.70154381 -29.95548439]
[-23.50121689 -36.81655884]
[-15.94127274 -43.27924728]
[-8.04372692 -49.32472992]
[0.16842471 -54.93539810]
[8.67127037 -60.09492493]
[17.44005013 -64.78827667]
[26.44923210 -69.00179291]
[35.67258072 -72.72320557]
[45.08324432 -75.94167328]
[54.65381241 -78.64781952]
[64.35642242 -80.83378601]
[74.16281891 -82.49317932]
[84.04445648 -83.62119293]
[93.97254944 -84.21452332]
[103.91819000 -84.27145386]
[113.85242462 -83.79181671]
[123.74632263 -82.77700806]
[133.57107544 -81.22997284]
[143.29808044 -79.15523529]
[152.89900208 -76.55882263]
[162.34588623 -73.44829559]
[171.61123657 -69.83271790]
[180.66806030 -65.72261810]
[189.49000549 -61.12995148]
[198.05134583 -56.06810760]
[206.32719421 -50.55181503]
[214.29342651 -44.59714127]
[221.92686462 -38.22142029]
[229.20526123 -31.44322395]
[236.10743713 -24.28228378]
[242.61329651 -16.75945473]
[248.70387268 -8.89664078]
[254.36146545 -0.71673703]
[259.56958008 7.75643778]
[264.31301880 16.49821091]
[268.57803345 25.48312950]
[272.35217285 34.68502808]
[275.62445068 44.07711411]
[278.38534546 53.63203812]
[280.62680054 63.32197571]
[282.34231567 73.11872101]
[283.52685547 82.99372864]
[284.17700195 92.91826630]
[284.29086304 102.86341858]
[283.86810303 112.80023956]
[282.90991211 122.69978333]
[281.41915894 132.53323364]
[279.40011597 142.27194214]
[276.85870361 151.88757324]
[273.80230713 161.35211182]
[270.23980713 170.63800049]
[266.18161011 179.71820068]
[261.63952637 188.56628418]
[256.62677002 197.15646362]
[251.15792847 205.46374512]
[245.24894714 213.46394348]
[238.91702271 221.13372803]
[232.18060303 228.45080566]
[225.05928040 235.39385986]
[217.57380676 241.94265747]
[209.74598694 248.07815552]
[201.59860229 253.78247070]
[193.15536499 259.03897095]
[184.44088745 263.83239746]
[175.48052979 268.14877319]
[166.30038452 271.97552490]
[156.92718506 275.30151367]
[147.38821411 278.11703491]
[137.71127319 280.41390991]
[127.92450714 282.18545532]
[118.05643463 283.42651367]
[108.13578033 284.13345337]
[98.19144440 284.30422974]
[88.25237274 283.93835449]
[78.34750366 283.03686523]
[68.50568390 281.60238647]
[58.75557327 279.63912964]
[49.12555695 277.15280151]
[39.64368057 274.15060425]
[30.33755112 270.64132690]
[21.23427010 266.63516235]
[12.36034012 262.14379883]
[3.74160337 257.18029785]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 33]
[2 32]
[3 31]
[4 30]
[5 29]
[6 28]
[7 20]
[8 19]
[9 18]
[10 17]
[42 68]
[43 67]
[44 66]
[45 65]
[46 62]
[47 61]
[48 60]
[49 59]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
