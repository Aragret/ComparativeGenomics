%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:41 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGAGGCCUAACCCCUGUCUUUAGAUUUACAGUCCAAUGCUUCACUCAGCCAUUUUACCUCACCCCxxxxxxxxxxGUUAUUAUCGAAACCAUCAGCCUACUCAUUCAACCAAUAGCCCUGGCCGUACGCCUAACCGCUCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[92.50000000 242.64042664]
[92.50000000 227.64042664]
[92.50000000 212.64042664]
[92.50000000 197.64042664]
[92.50000000 182.64042664]
[92.50000000 167.64042664]
[92.50000000 152.64042664]
[92.50000000 137.64042664]
[92.50000000 122.64041901]
[92.50000000 107.64041901]
[90.55450439 92.76712036]
[86.55155945 78.31110382]
[82.40417480 63.89586258]
[78.25679016 49.48062134]
[74.10941315 35.06538010]
[59.48387527 38.41331482]
[44.69612122 40.95047760]
[29.79105568 42.66916275]
[14.81394386 43.56414795]
[-0.18972874 43.63271713]
[-15.17439556 42.87466049]
[-30.09454918 41.29228210]
[-44.90487671 38.89038849]
[-59.56039810 35.67627335]
[-74.01660919 31.65969276]
[-88.22959900 26.85285187]
[-102.15621185 21.27034760]
[-115.75415039 14.92913055]
[-128.98211670 7.84846210]
[-141.79992676 0.04984515]
[-154.16867065 -8.44303608]
[-166.05078125 -17.60438919]
[-177.41017151 -27.40639114]
[-188.21232605 -37.81927490]
[-198.42446899 -48.81141281]
[-208.01556396 -60.34942627]
[-216.95649719 -72.39826965]
[-225.22010803 -84.92135620]
[-232.78129578 -97.88065338]
[-239.61709595 -111.23679352]
[-245.70677185 -124.94923401]
[-251.03179932 -138.97630310]
[-255.57601929 -153.27543640]
[-259.32562256 -167.80317688]
[-262.26925659 -182.51541138]
[-264.39791870 -197.36747742]
[-265.70520020 -212.31423950]
[-266.18710327 -227.31033325]
[-265.84219360 -242.31019592]
[-264.67147827 -257.26828003]
[-262.67852783 -272.13916016]
[-259.86938477 -286.87765503]
[-256.25262451 -301.43905640]
[-251.83918762 -315.77908325]
[-246.64250183 -329.85421753]
[-240.67831421 -343.62170410]
[-233.96478271 -357.03970337]
[-226.52226257 -370.06753540]
[-218.37338257 -382.66555786]
[-209.54286194 -394.79556274]
[-200.05754089 -406.42068481]
[-189.94622803 -417.50564575]
[-179.23960876 -428.01675415]
[-167.97023010 -437.92208862]
[-156.17228699 -447.19155884]
[-143.88162231 -455.79705811]
[-131.13555908 -463.71243286]
[-117.97282410 -470.91360474]
[-104.43336487 -477.37875366]
[-90.55831909 -483.08822632]
[-76.38982391 -488.02465820]
[-61.97090149 -492.17309570]
[-47.34534454 -495.52093506]
[-32.55757141 -498.05801392]
[-17.65249252 -499.77658081]
[-2.67537498 -500.67144775]
[12.32829762 -500.73992920]
[27.31295967 -499.98175049]
[42.23310089 -498.39929199]
[57.04341125 -495.99728394]
[71.69891357 -492.78305054]
[86.15509033 -488.76638794]
[100.36804962 -483.95944214]
[114.29462433 -478.37683105]
[127.89251709 -472.03552246]
[141.12042236 -464.95477295]
[153.93818665 -457.15606689]
[166.30686951 -448.66308594]
[178.18891907 -439.50164795]
[189.54823303 -429.69958496]
[200.35032654 -419.28662109]
[210.56239319 -408.29440308]
[220.15341187 -396.75631714]
[229.09425354 -384.70742798]
[237.35777283 -372.18426514]
[244.91886902 -359.22491455]
[251.75457764 -345.86871338]
[257.84414673 -332.15625000]
[263.16906738 -318.12911987]
[267.71319580 -303.82998657]
[271.46270752 -289.30221558]
[274.40621948 -274.58993530]
[276.53479004 -259.73788452]
[277.84197998 -244.79109192]
[278.32376099 -229.79499817]
[277.97872925 -214.79515076]
[276.80792236 -199.83706665]
[274.81488037 -184.96620178]
[272.00564575 -170.22770691]
[268.38876343 -155.66635132]
[263.97521973 -141.32635498]
[258.77844238 -127.25126648]
[252.81416321 -113.48382568]
[246.10054016 -100.06584930]
[238.65792847 -87.03809357]
[230.50895691 -74.44011688]
[221.67835999 -62.31017303]
[212.19294739 -50.68511200]
[202.08155823 -39.60023499]
[191.37486267 -29.08920670]
[180.10540771 -19.18394661]
[168.30740356 -9.91453743]
[156.01667786 -1.30913126]
[143.27056885 6.60613728]
[130.10777283 13.80723095]
[116.56826782 20.27227783]
[102.69318390 25.98164749]
[88.52465057 30.91799545]
[92.67203522 45.33324051]
[96.81941986 59.74848175]
[100.96679688 74.16372681]
[105.86593628 79.75356293]
[105.04985046 88.90900421]
[109.99610138 74.74797821]
[120.19490814 63.74869156]
[133.94258118 57.74855423]
[148.94258118 57.74987793]
[162.68917847 63.75244522]
[172.88604736 74.75353241]
[177.82980347 88.91542816]
[176.69459534 103.87240601]
[169.67007446 117.12593842]
[157.92965698 126.46202850]
[143.43457031 130.32110596]
[128.60620117 128.05853271]
[115.92159271 120.05223083]
[107.50000000 107.64041901]
[107.50000000 122.64041901]
[107.50000000 137.64042664]
[107.50000000 152.64042664]
[107.50000000 167.64042664]
[107.50000000 182.64042664]
[107.50000000 197.64042664]
[107.50000000 212.64042664]
[107.50000000 227.64042664]
[107.50000000 242.64042664]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 156]
[2 155]
[3 154]
[4 153]
[5 152]
[6 151]
[7 150]
[8 149]
[9 148]
[10 147]
[11 133]
[12 131]
[13 130]
[14 129]
[15 128]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
