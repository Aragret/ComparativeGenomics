%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:41 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGACCCCAGUCUCAGCCCUACUCCACUCAAGCACUAUAGUUGUAGCAGGAAUCUUCUUACUCxxxxxxxxxxAAUUGAAAACAAAAUACUCAAAUGGGCCUGUCCUUGUAGUAUAAACUAAUACACCAGUCUCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[101.19900513 273.33139038]
[100.88694763 258.33462524]
[100.57489014 243.33787537]
[100.26283264 228.34112549]
[99.95077515 213.34437561]
[99.63872528 198.34762573]
[99.32666779 183.35087585]
[99.01461029 168.35411072]
[98.70255280 153.35736084]
[84.33436584 149.04977417]
[75.82328033 161.40135193]
[67.31218719 173.75291443]
[66.54576111 190.13415527]
[51.85378265 197.41960144]
[38.35010147 188.11462402]
[39.92614365 171.79138184]
[54.96061707 165.24183655]
[63.47170639 152.89025879]
[71.98279572 140.53868103]
[59.20287323 100.92677307]
[80.42572784 74.26031494]
[74.36271667 60.54026413]
[68.29970551 46.82020950]
[62.09429550 33.16397095]
[55.74716568 19.57301903]
[49.40003967 5.98206758]
[45.02059174 7.17196751]
[40.14427185 7.25091124]
[35.06247711 6.06373358]
[30.10895348 3.53272963]
[15.61335659 -0.32442987]
[1.11776030 -4.18158913]
[-16.50800896 1.04451299]
[-28.48060417 -11.74833298]
[-43.05330658 -15.30309486]
[-57.66220093 -18.70607185]
[-72.30570221 -21.95689774]
[-86.94920349 -25.20772362]
[-97.83167267 -14.27267551]
[-112.90342712 -10.97935677]
[-127.35511017 -16.37865448]
[-136.57524109 -28.74767303]
[-137.62171936 -44.13950348]
[-130.16061401 -57.64266968]
[-116.57273865 -64.94835663]
[-101.19393158 -63.72534943]
[-88.93151093 -54.36390305]
[-83.69837952 -39.85122681]
[-69.05487823 -36.60039902]
[-54.41137314 -33.34957504]
[-47.15296173 -34.98086929]
[-39.49854660 -29.87579727]
[-24.92584229 -26.32103539]
[-14.38873005 -32.34403992]
[-2.18748331 -29.45465469]
[4.97491980 -18.67718506]
[19.47051620 -14.82002640]
[33.96611404 -10.96286678]
[46.82451630 -18.68695259]
[50.22749329 -33.29584503]
[39.74819946 -22.56344414]
[26.88595772 -14.84575653]
[12.48492432 -10.64929962]
[-2.50974679 -10.24948978]
[-17.11394310 -13.67256641]
[-30.36917877 -20.69387245]
[-41.40550232 -30.85259056]
[-49.49858856 -43.48199844]
[-54.11728668 -57.75321579]
[-54.95846176 -72.72961426]
[-51.96690750 -87.42826843]
[-45.33896637 -100.88451385]
[-35.50963211 -112.21518707]
[-23.12401581 -120.67665863]
[-8.99499035 -125.71358490]
[5.95014143 -126.99539185]
[20.73051834 -124.43796539]
[34.37609100 -118.20913696]
[45.99129105 -108.71771240]
[54.81380463 -96.58662415]
[60.26459503 -82.61204529]
[61.98593140 -67.71113586]
[59.86354446 -52.85718918]
[69.37190247 -64.45853424]
[78.88025665 -76.05987549]
[88.38861847 -87.66121674]
[82.35700226 -101.72813416]
[83.56504822 -116.98589325]
[91.73516846 -129.92837524]
[104.98992157 -137.58148193]
[120.28346252 -138.18659973]
[134.10144043 -131.60467529]
[143.26861572 -119.34816742]
[145.67839050 -104.23355865]
[140.77705383 -89.73406219]
[129.69088745 -79.18154907]
[114.96740723 -75.00092316]
[99.98995972 -78.15285492]
[90.48159790 -66.55151367]
[80.97324371 -54.95017242]
[71.46488190 -43.34883118]
[64.83638763 -29.89286613]
[61.43340683 -15.28397369]
[62.99098969 -0.36506179]
[69.33811951 13.22588921]
[75.68524933 26.81683922]
[81.40220642 31.57730103]
[82.01976013 40.75719833]
[88.08277130 54.47725296]
[94.14578247 68.19730377]
[104.67341614 65.55841827]
[116.23031616 66.55250549]
[127.52785492 71.53626251]
[137.16807556 80.40345001]
[143.81010437 92.55662537]
[146.34158325 106.93820953]
[144.03440857 122.12056732]
[157.93696594 127.75252533]
[171.83952332 133.38447571]
[185.74208069 139.01643372]
[201.90008545 136.21447754]
[212.19645691 148.97836304]
[206.03916931 164.17770386]
[189.76231384 166.17671204]
[180.11012268 152.91899109]
[166.20756531 147.28703308]
[152.30500793 141.65507507]
[138.40245056 136.02311707]
[132.22666931 140.27867126]
[141.72720337 151.88641357]
[151.22773743 163.49417114]
[160.72827148 175.10191345]
[172.84800720 183.94001770]
[172.64765930 198.93867493]
[160.29617310 207.44989014]
[146.20925903 202.29635620]
[142.26614380 187.82360840]
[134.80245972 174.81231689]
[127.33877563 161.80104065]
[119.87509155 148.78976440]
[113.69931030 153.04530334]
[114.01136017 168.04205322]
[114.32341766 183.03881836]
[114.63547516 198.03556824]
[114.94753265 213.03231812]
[115.25959015 228.02906799]
[115.57164764 243.02583313]
[115.88369751 258.02258301]
[116.19575500 273.01934814]
[118.78675842 292.22705078]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 149]
[2 148]
[3 147]
[4 146]
[5 145]
[6 144]
[7 143]
[8 142]
[9 141]
[10 19]
[11 18]
[12 17]
[21 110]
[22 109]
[23 108]
[24 106]
[25 105]
[26 104]
[30 58]
[31 57]
[32 56]
[34 53]
[35 52]
[36 50]
[37 49]
[38 48]
[59 103]
[60 102]
[83 101]
[84 100]
[85 99]
[86 98]
[117 128]
[118 127]
[119 126]
[120 125]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
