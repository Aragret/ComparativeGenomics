%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:14 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGGACAAAACACAUAGCCUACCCCUUCCUUGUACUAUCCCUAUGAGGCAUAAUUAUAACAAGxxxxxxxxxxAUGGGGCUCACUCACCCACCACAUUAACAACAUAAAACCCUCAUUCACACGAGAAAACACCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[69.23486328 309.74450684]
[71.82586670 290.53677368]
[72.13792419 275.54003906]
[72.44998169 260.54327393]
[72.76203156 245.54652405]
[73.07408905 230.54975891]
[73.38614655 215.55300903]
[73.69820404 200.55625916]
[74.01026154 185.55950928]
[74.32231903 170.56274414]
[74.63436890 155.56599426]
[61.85701370 147.70857239]
[48.61442947 154.75370789]
[35.37184143 161.79884338]
[22.12925720 168.84397888]
[25.37280273 183.58786011]
[24.51706505 198.66001892]
[19.62554932 212.94203186]
[11.06123447 225.37405396]
[-0.54034841 235.03353882]
[-14.31828499 241.20372009]
[-29.25016022 243.42669678]
[-44.22793198 241.53753662]
[-58.14014816 235.67640686]
[-69.95442963 226.27825928]
[-78.79408264 214.04048157]
[-84.00313568 199.87120056]
[-85.19506073 184.82188416]
[-82.28138733 170.00929260]
[-75.47834778 156.53259277]
[-65.29075623 145.39187622]
[-52.47461700 137.41384888]
[-37.98095703 133.19052124]
[-22.88531494 133.03529358]
[-8.30787849 136.95970154]
[4.66960526 144.67251587]
[15.08412266 155.60139465]
[28.32670784 148.55625916]
[41.56929398 141.51112366]
[54.81187820 134.46598816]
[47.91031647 121.75920868]
[44.47547150 107.81288910]
[44.68367004 93.54832458]
[48.47224045 79.89514160]
[55.54677582 67.73066711]
[65.40340424 57.82360840]
[77.36444092 50.78550720]
[90.62483215 47.03310013]
[104.30627441 46.76389694]
[117.51541138 49.94636154]
[124.42240906 36.63120651]
[131.32940674 23.31604958]
[138.23640442 10.00089455]
[145.14340210 -3.31426144]
[152.05039978 -16.62941742]
[144.99662781 -27.03906631]
[143.07505798 -39.39252472]
[146.59266663 -51.31398010]
[154.81632996 -60.53737259]
[166.12460327 -65.33711243]
[178.32722473 -64.85072327]
[185.78213501 -77.86703491]
[193.23704529 -90.88334656]
[200.69195557 -103.89965057]
[190.26618958 -112.66200256]
[181.46282959 -123.04887390]
[174.53129578 -134.76429749]
[169.66767883 -147.47467041]
[167.00920105 -160.81828308]
[166.63038635 -174.41558838]
[168.54087830 -187.88005066]
[172.68530273 -200.82905579]
[178.94477844 -212.89482117]
[187.14041138 -223.73486328]
[197.03834534 -233.04170227]
[208.35643005 -240.55157471]
[220.77235413 -246.05189514]
[233.93270874 -249.38732910]
[247.46310425 -250.46411133]
[260.97885132 -249.25271606]
[274.09579468 -245.78869629]
[286.44134521 -240.17156982]
[294.95245361 -252.52314758]
[303.46353149 -264.87472534]
[311.97463989 -277.22628784]
[305.92559814 -291.41827393]
[308.53213501 -306.62387085]
[318.96246338 -317.99096680]
[333.88836670 -321.89242554]
[348.54699707 -317.08325195]
[358.26086426 -305.09808350]
[359.93029785 -289.76132202]
[353.02258301 -275.96685791]
[339.74194336 -268.11648560]
[324.32620239 -268.71520996]
[315.81512451 -256.36361694]
[307.30401611 -244.01205444]
[298.79293823 -231.66047668]
[310.29690552 -219.86764526]
[319.16009521 -205.97430420]
[325.00903320 -190.56202698]
[327.59652710 -174.27638245]
[326.81198120 -157.80004883]
[322.68624878 -141.82405090]
[315.39028931 -127.01894379]
[305.22827148 -114.00648499]
[292.62466431 -103.33368683]
[278.10671997 -95.44970703]
[262.28225708 -90.68700409]
[245.81434631 -89.24731445]
[229.39338684 -91.19306946]
[213.70826721 -96.44474030]
[206.25335693 -83.42843628]
[198.79844666 -70.41212463]
[191.34353638 -57.39581299]
[199.32836914 -41.70153427]
[196.31561279 -24.19371033]
[183.31721497 -11.85580826]
[165.36555481 -9.72241879]
[158.45855713 3.59273696]
[151.55155945 16.90789223]
[144.64456177 30.22304916]
[137.73756409 43.53820419]
[130.83056641 56.85335922]
[137.43397522 62.12356186]
[143.14227295 68.40027618]
[147.80274963 75.53231812]
[151.28808594 83.34545898]
[153.49984741 91.64666748]
[154.37123108 100.22888184]
[153.86898804 108.87619019]
[151.99458313 117.36921692]
[148.78442383 125.49074554]
[144.30921936 133.03121948]
[138.67250061 139.79420471]
[132.00813293 145.60144043]
[124.47731018 150.29756165]
[116.26449585 153.75427246]
[107.57304382 155.87374878]
[98.62007904 156.59147644]
[89.63112640 155.87805176]
[89.31906891 170.87480164]
[89.00701141 185.87156677]
[88.69495392 200.86831665]
[88.38290405 215.86506653]
[88.07084656 230.86181641]
[87.75878906 245.85858154]
[87.44673157 260.85531616]
[87.13467407 275.85208130]
[86.82261658 290.84884644]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 150]
[3 149]
[4 148]
[5 147]
[6 146]
[7 145]
[8 144]
[9 143]
[10 142]
[11 141]
[12 40]
[13 39]
[14 38]
[15 37]
[50 124]
[51 123]
[52 122]
[53 121]
[54 120]
[55 119]
[61 115]
[62 114]
[63 113]
[64 112]
[82 98]
[83 97]
[84 96]
[85 95]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
