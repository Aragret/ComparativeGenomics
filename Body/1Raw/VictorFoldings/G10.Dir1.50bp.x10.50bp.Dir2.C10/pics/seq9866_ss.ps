%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:51 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCCCUAACAACCCCCCUCCUAAUACUAACUACCUGACUCCUACCCCUCACAAUCAUGGCAAGCxxxxxxxxxxCAUGUGCCUAGACCAAGAAGUUAUUAUCUCGAACUGACACUGAGCCACAACCCAAACAACCCCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[-2.50072551 282.32162476]
[-13.25343895 275.84432983]
[-21.82246208 288.15579224]
[-30.39148521 300.46725464]
[-38.96051025 312.77868652]
[-47.52953339 325.09014893]
[-56.09855652 337.40161133]
[-64.66757965 349.71304321]
[-73.23660278 362.02450562]
[-81.80562592 374.33593750]
[-75.82333374 388.55621338]
[-78.50126648 403.74935913]
[-88.98490143 415.06735229]
[-103.92896271 418.89865112]
[-118.56483459 414.02066040]
[-128.22229004 401.98999023]
[-129.81964111 386.64553833]
[-122.84719849 372.88369751]
[-109.52983093 365.09579468]
[-94.11707306 365.76693726]
[-85.54804993 353.45547485]
[-76.97902679 341.14401245]
[-68.41000366 328.83258057]
[-59.84098434 316.52111816]
[-51.27196121 304.20968628]
[-42.70293808 291.89822388]
[-34.13391495 279.58676147]
[-25.56488991 267.27532959]
[-36.21543121 258.72280884]
[-46.28502655 249.49336243]
[-55.73072815 239.62632751]
[-64.51225281 229.16381836]
[-72.59214783 218.15042114]
[-79.93595123 206.63313293]
[-86.51234436 194.66107178]
[-92.29328156 182.28527832]
[-97.25410461 169.55854797]
[-101.37365723 156.53515625]
[-104.63436890 143.27064514]
[-107.02233124 129.82157898]
[-108.52736664 116.24534607]
[-109.14304352 102.59981537]
[-108.86675262 88.94320679]
[-107.69966125 75.33374786]
[-105.64675140 61.82948685]
[-102.71677399 48.48802185]
[-98.92222595 35.36625290]
[-94.27929688 22.52013779]
[-88.80777740 10.00446796]
[-82.53101349 -2.12737846]
[-75.47577667 -13.82366085]
[-67.67214203 -25.03449631]
[-59.15340805 -35.71207047]
[-49.95589828 -45.81084442]
[-40.11883926 -55.28774643]
[-29.68418312 -64.10236359]
[-18.69643784 -72.21709442]
[-7.20246410 -79.59734344]
[4.74871969 -86.21161652]
[17.10614204 -92.03172302]
[29.81709862 -97.03282166]
[42.82737732 -101.19359589]
[56.08149338 -104.49629974]
[69.52291870 -106.92684937]
[83.09432220 -108.47486877]
[96.73783112 -109.13376617]
[97.04183960 -124.13068390]
[97.34584045 -139.12760925]
[97.64984894 -154.12452698]
[83.42363739 -159.31044006]
[71.65367889 -168.83654785]
[63.61668015 -181.66952515]
[60.18444061 -196.41735840]
[61.72926331 -211.48030090]
[68.08358002 -225.22444153]
[78.55811310 -236.15892029]
[92.01667023 -243.09764099]
[106.99937439 -245.28794861]
[121.88099670 -242.49224854]
[135.04730225 -235.01380920]
[145.07011414 -223.66383362]
[150.86221313 -209.67347717]
[151.79533386 -194.56030273]
[147.76824951 -179.96368408]
[139.21778870 -167.46693420]
[127.07144928 -158.42564392]
[112.64676666 -153.82051086]
[112.34275818 -138.82359314]
[112.03875732 -123.82668304]
[111.73475647 -108.82975769]
[134.11813354 -106.35776520]
[156.10601807 -101.49364471]
[177.44351196 -94.29378510]
[197.88327026 -84.84165955]
[217.18835449 -73.24681854]
[235.13499451 -59.64369202]
[251.51512146 -44.18995285]
[266.13885498 -27.06474876]
[278.83670044 -8.46659756]
[289.46145630 11.38891029]
[297.88995361 32.27161026]
[312.24682617 27.92643166]
[326.60369873 23.58125305]
[340.96054077 19.23607635]
[345.08505249 4.37027788]
[356.60708618 -5.88869143]
[371.84997559 -8.26723289]
[385.94979858 -2.00636268]
[394.40734863 10.89609909]
[394.52383423 26.32302284]
[386.26211548 39.35173416]
[372.25845337 45.82481766]
[356.98135376 43.67673492]
[345.30572510 33.59293747]
[330.94885254 37.93811417]
[316.59201050 42.28329086]
[302.23513794 46.62846756]
[305.07263184 58.85649872]
[307.17147827 71.23271942]
[308.52407837 83.71256256]
[309.12561035 96.25107574]
[308.97387695 108.80308533]
[308.06942749 121.32339478]
[306.41552734 133.76689148]
[304.01812744 146.08876038]
[300.88586426 158.24462891]
[297.03005981 170.19070435]
[292.46450806 181.88394165]
[287.20574951 193.28225708]
[281.27267456 204.34455872]
[274.68667603 215.03103638]
[267.47146606 225.30316162]
[259.65301514 235.12396240]
[251.25952148 244.45805359]
[242.32119751 253.27182007]
[232.87023926 261.53350830]
[222.94068909 269.21334839]
[212.56832886 276.28372192]
[201.79048157 282.71911621]
[190.64601135 288.49633789]
[179.17503357 293.59463501]
[167.41886902 297.99563599]
[155.41986084 301.68344116]
[143.22123718 304.64480591]
[130.86692810 306.86904907]
[118.40145111 308.34817505]
[105.86968994 309.07681274]
[93.31678009 309.05239868]
[80.78794861 308.27499390]
[68.32831573 306.74737549]
[55.98276138 304.47506714]
[43.79575729 301.46627808]
[31.81119347 297.73178101]
[20.07224464 293.28509521]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 28]
[3 27]
[4 26]
[5 25]
[6 24]
[7 23]
[8 22]
[9 21]
[10 20]
[66 90]
[67 89]
[68 88]
[69 87]
[101 117]
[102 116]
[103 115]
[104 114]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
