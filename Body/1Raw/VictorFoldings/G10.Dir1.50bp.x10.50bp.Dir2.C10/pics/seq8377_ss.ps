%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:27 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCAAAACAAAUGAUAACCAUACACAACACUAAAGGACGAACCUGAUCUCUUAUACUAGUAUxxxxxxxxxxUUUCAUCCUCGCCUUAGCAUGAUUUAUCCUACACUCCAACUCAUGAGACCCACAACAAAUCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[92.50000000 254.50346375]
[92.50000000 239.50346375]
[92.50000000 224.50346375]
[92.50000000 209.50346375]
[92.50000000 194.50346375]
[92.50000000 179.50346375]
[92.50000000 164.50346375]
[92.50000000 149.50346375]
[92.50000000 134.50346375]
[92.50000000 119.50346375]
[85.91571045 115.91220856]
[78.73320007 129.08079529]
[71.55068970 142.24937439]
[64.36796570 155.41783142]
[51.19961929 148.23489380]
[58.38210678 135.06686401]
[65.56462097 121.89827728]
[72.74712372 108.72969818]
[66.16283417 105.13844299]
[53.55170822 113.25998688]
[40.94057846 121.38152313]
[36.15357590 136.69375610]
[21.14582062 142.36357117]
[7.42998266 134.04159546]
[5.52767658 118.11172485]
[16.89818954 106.79399109]
[32.81903458 108.77040100]
[45.43016434 100.64885712]
[58.04129410 92.52731323]
[44.75712967 99.49373627]
[29.85394478 97.79225922]
[18.48186493 88.01085663]
[14.57076645 73.52972412]
[19.47221947 59.35313034]
[31.49241638 50.38012314]
[46.47750854 49.71152115]
[59.24906158 57.57838058]
[65.39361572 71.26247406]
[60.49206924 57.08591843]
[55.59051895 42.90936279]
[50.68896484 28.73280334]
[44.89066696 21.58916473]
[45.83625031 14.21003723]
[41.23068619 -0.06542331]
[35.58225250 -7.32814169]
[36.68114471 -14.68600082]
[32.37356186 -29.05418396]
[28.06597710 -43.42236710]
[13.57196712 -48.64059448]
[5.02964211 -61.24543762]
[5.54143333 -76.28545380]
[14.70161247 -87.99993896]
[10.39402771 -102.36811829]
[6.08644342 -116.73630524]
[-8.91906738 -115.50004578]
[-23.85365486 -117.41101837]
[-38.06444168 -122.38568115]
[-50.93019104 -130.20655823]
[-61.88847351 -140.53175354]
[-70.46023560 -152.90991211]
[-76.27075195 -166.79988098]
[-79.06602478 -181.59448242]
[-78.72384644 -196.64694214]
[-75.25917816 -211.29924011]
[-68.82348633 -224.91084290]
[-59.69810104 -236.88668823]
[-48.28195190 -246.70326233]
[-35.07410049 -253.93142700]
[-20.65193939 -258.25518799]
[-5.64594221 -259.48556519]
[9.28789139 -257.56869507]
[23.49671936 -252.58845520]
[36.35939407 -244.76251221]
[47.31361008 -234.43299866]
[55.88050079 -222.05148315]
[61.68555832 -208.15922546]
[64.47500610 -193.36352539]
[64.12690735 -178.31120300]
[60.65647888 -163.66026306]
[54.21542740 -150.05120850]
[45.08533096 -138.07894897]
[33.66532135 -128.26686096]
[20.45462799 -121.04389191]
[24.76221275 -106.67570496]
[29.06979561 -92.30751801]
[43.16388702 -87.56467438]
[51.86557007 -75.28685760]
[51.66676712 -60.06142426]
[42.43416214 -47.72995377]
[46.74174500 -33.36177063]
[51.04932785 -18.99358559]
[55.50614548 -4.67098761]
[60.11170959 9.60447311]
[64.86552429 23.83125114]
[69.76707458 38.00780869]
[74.66862488 52.18436813]
[79.57017517 66.36092377]
[121.72891235 88.06471252]
[136.68916321 86.97340393]
[151.64941406 85.88209534]
[166.60964966 84.79077911]
[181.56990051 83.69947052]
[194.77058411 74.97866058]
[208.02705383 81.76949310]
[222.98728943 80.67818451]
[228.54373169 66.46238708]
[239.72375488 56.07153320]
[254.30755615 51.56872940]
[269.39953613 53.84801483]
[282.00314331 62.45682907]
[289.61593628 75.68589020]
[290.72640991 90.90856171]
[285.11401367 105.10236359]
[273.89315796 115.44911194]
[259.29174805 119.89444733]
[244.20886230 117.55575562]
[231.63925171 108.89736938]
[224.07861328 95.63843536]
[209.11836243 96.72974396]
[196.98773193 105.37249756]
[182.66120911 98.65972137]
[167.70097351 99.75102997]
[152.74072266 100.84233856]
[137.78047180 101.93365479]
[122.82022095 103.02496338]
[136.47227478 109.23957062]
[150.12432861 115.45418549]
[165.12417603 115.52275085]
[178.78656006 121.71463013]
[188.72608948 132.94876099]
[193.20739746 147.26371765]
[191.44804382 162.16017151]
[183.75523376 175.03730774]
[171.47206116 183.64683533]
[156.74313354 186.48556519]
[142.14001465 183.05787659]
[130.21234131 173.96223450]
[123.04264069 160.78668213]
[121.88276672 145.83093262]
[114.69138336 132.66720581]
[107.50000000 119.50346375]
[107.50000000 134.50346375]
[107.50000000 149.50346375]
[107.50000000 164.50346375]
[107.50000000 179.50346375]
[107.50000000 194.50346375]
[107.50000000 209.50346375]
[107.50000000 224.50346375]
[107.50000000 239.50346375]
[107.50000000 254.50346375]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[19 29]
[20 28]
[21 27]
[38 97]
[39 96]
[40 95]
[41 94]
[43 93]
[44 92]
[46 91]
[47 90]
[48 89]
[52 85]
[53 84]
[54 83]
[98 125]
[99 124]
[100 123]
[101 122]
[102 121]
[104 119]
[105 118]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
