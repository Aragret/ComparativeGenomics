%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:42 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGACUAUCCUGCCCGCCAUCAUCCUAGUCCUCAUCGCCCUCCCAUCCCUACGCAUCCUUUACAxxxxxxxxxxUUCACCGGCGCAGUCAUUCUCAUAAUCGCCCACGGGCUUACAUCCUCAUUACUAUUCUGCCCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[-15.36392021 309.89987183]
[-22.99689102 322.81256104]
[-23.35868263 338.62963867]
[-36.49576950 345.64862061]
[-44.12873840 358.56134033]
[-51.76171112 371.47402954]
[-52.12350082 387.29110718]
[-65.26058960 394.31008911]
[-72.89355469 407.22277832]
[-80.52652740 420.13549805]
[-88.15950012 433.04818726]
[-91.01450348 449.76000977]
[-107.86357117 451.64288330]
[-114.33714294 435.97351074]
[-101.07219696 425.41522217]
[-93.43922424 412.50250244]
[-85.80625916 399.58981323]
[-78.17328644 386.67712402]
[-78.35745239 371.78366089]
[-64.67440796 363.84106445]
[-57.04143906 350.92837524]
[-49.40846634 338.01565552]
[-49.59263611 323.12219238]
[-35.90958786 315.17959595]
[-28.27661896 302.26690674]
[-39.82797241 294.46060181]
[-50.90555573 285.99545288]
[-61.47183609 276.90008545]
[-71.49101257 267.20532227]
[-80.92913818 256.94406128]
[-89.75423431 246.15101624]
[-97.93640137 234.86279297]
[-105.44791412 223.11761475]
[-112.26332092 210.95529175]
[-118.35952759 198.41702271]
[-123.71588135 185.54528809]
[-128.31423950 172.38371277]
[-132.13900757 158.97688293]
[-135.17724609 145.37022400]
[-137.41864014 131.60984802]
[-138.85560608 117.74235535]
[-139.48327637 103.81475830]
[-139.29951477 89.87423706]
[-138.30496216 75.96801758]
[-136.50297546 62.14323044]
[-133.89965820 48.44670486]
[-130.50382996 34.92485809]
[-126.32701111 21.62350082]
[-121.38333893 8.58770084]
[-115.68957520 -4.13837337]
[-109.26499939 -16.51160240]
[-102.13138580 -28.49006462]
[-94.31289673 -40.03317261]
[-85.83604431 -51.10181427]
[-76.72953033 -61.65848541]
[-67.02421570 -71.66742706]
[-56.75297928 -81.09471130]
[-45.95063400 -89.90840912]
[-34.65377045 -98.07865906]
[-22.90067101 -105.57776642]
[-10.73115540 -112.38032532]
[1.81354284 -118.46329498]
[14.69091988 -123.80606079]
[27.85734367 -128.39051819]
[41.26820374 -132.20114136]
[54.87805939 -135.22500610]
[68.64080048 -137.45187378]
[82.50979614 -138.87420654]
[96.43804932 -139.48716736]
[110.37837219 -139.28869629]
[124.28353119 -138.27946472]
[138.10641479 -136.46287537]
[151.80017090 -133.84510803]
[165.31843567 -130.43501282]
[178.61537170 -126.24414825]
[191.64595032 -121.28672028]
[204.36599731 -115.57952118]
[216.73243713 -109.14188385]
[228.70336914 -101.99563599]
[240.23822021 -94.16497040]
[251.29789734 -85.67642975]
[261.84497070 -76.55877686]
[271.84365845 -66.84290314]
[281.26007080 -56.56172562]
[290.06237793 -45.75008011]
[298.22070312 -34.44459915]
[310.89221191 -42.47159576]
[323.56372070 -50.49859619]
[335.98202515 -58.91200638]
[348.13537598 -67.70384979]
[360.28869629 -76.49568939]
[346.23846436 -81.74835968]
[341.38534546 -95.94158173]
[349.27801514 -108.69720459]
[364.14526367 -110.68827057]
[375.11614990 -100.45890808]
[374.16897583 -85.48940277]
[387.15936279 -92.98940277]
[400.14974976 -100.48940277]
[405.67416382 -115.55129242]
[420.93936157 -120.48616028]
[434.23519897 -111.50839996]
[435.36224365 -95.50498962]
[423.45593262 -84.75236511]
[407.64974976 -87.49902344]
[394.65936279 -79.99902344]
[381.66897583 -72.49902344]
[369.08053589 -64.34235382]
[356.92721558 -55.55051422]
[344.77386475 -46.75867081]
[343.86804199 -43.29072189]
[341.20086670 -40.10390854]
[336.93026733 -38.03810120]
[331.59072876 -37.82707977]
[318.91918945 -29.80008125]
[306.24768066 -21.77308464]
[314.10934448 -7.34979057]
[320.96389771 7.57844687]
[326.77911377 22.94140816]
[331.52761841 38.66683197]
[335.18707275 54.68075180]
[337.74026489 70.90783691]
[339.17523193 87.27176666]
[339.48513794 103.69556427]
[338.66860962 120.10197449]
[336.72943115 136.41383362]
[333.67675781 152.55441284]
[329.52493286 168.44779968]
[324.29348755 184.01922607]
[318.00701904 199.19543457]
[310.69509888 213.90507507]
[302.39215088 228.07891846]
[293.13720703 241.65032959]
[282.97378540 254.55545044]
[271.94970703 266.73358154]
[260.11682129 278.12747192]
[247.53082275 288.68347168]
[234.25085449 298.35195923]
[220.33941650 307.08746338]
[205.86192322 314.84887695]
[190.88650513 321.59973145]
[175.48356628 327.30819702]
[159.72558594 331.94750977]
[143.68666077 335.49578857]
[127.44226074 337.93637085]
[111.06877136 339.25775146]
[94.64321899 339.45373535]
[78.24285889 338.52340698]
[61.94484329 336.47113037]
[45.82582855 333.30654907]
[29.96163177 329.04458618]
[14.42687702 323.70523071]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 25]
[2 24]
[4 22]
[5 21]
[6 20]
[8 18]
[9 17]
[10 16]
[11 15]
[86 116]
[87 115]
[88 114]
[89 110]
[90 109]
[91 108]
[97 107]
[98 106]
[99 105]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
