%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:08 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGUAACAACGUAAAAAUAAAAUGACAGUUUGAACAUACAAAACCCACCCCAUUCCUCCCCACACUxxxxxxxxxxUCCCUCUACAUAUUUACCACAACACAAUGGGGCUCACUCACCCACCACAUUAACAACAUAAAACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[171.44213867 117.41392517]
[163.26675415 102.72354889]
[156.30490112 87.42034149]
[142.21522522 92.56631470]
[128.12554932 97.71228027]
[114.03587341 102.85825348]
[104.91403961 113.45465088]
[91.11009216 111.23143005]
[77.02041626 116.37739563]
[62.93073654 121.52336121]
[48.84106064 126.66933441]
[63.58744812 129.41598511]
[77.27500916 135.55200195]
[89.13668823 144.73353577]
[98.50776672 156.44604492]
[104.86308289 170.03315735]
[107.84649658 184.73347473]
[107.29080963 199.72317505]
[103.22716522 214.16226196]
[95.88329315 227.24153137]
[85.67073822 238.22805786]
[73.16180420 246.50613403]
[59.05750275 251.61187744]
[44.14822769 253.25915527]
[29.26949501 251.35565186]
[15.25510597 246.00805664]
[2.89042521 237.51600647]
[-7.13163280 226.35543823]
[-14.24943352 213.15177917]
[-18.06409836 198.64492798]
[-18.36185074 183.64788818]
[-15.12600708 169.00106812]
[-8.53790283 155.52528381]
[1.03326511 143.97570801]
[13.05113125 134.99957275]
[26.84034920 129.10046387]
[11.96704960 127.15496826]
[-2.90625048 125.20947266]
[-17.77955055 123.26398468]
[-30.15559196 133.09297180]
[-45.84718323 131.20896912]
[-55.54478073 118.72969818]
[-53.49497223 103.05889893]
[-40.91387177 93.49378204]
[-25.26562500 95.70915985]
[-15.83405781 108.39068604]
[-0.96075749 110.33617401]
[13.91254234 112.28166962]
[28.78584290 114.22715759]
[43.69509125 112.57965851]
[57.78477097 107.43368530]
[71.87445068 102.28771973]
[85.96412659 97.14174652]
[95.08596039 86.54534912]
[108.88990784 88.76856995]
[122.97958374 83.62260437]
[137.06925964 78.47663879]
[151.15893555 73.33066559]
[147.38278198 60.25665283]
[144.47001648 46.96377945]
[142.43310547 33.50899887]
[141.28074646 19.94995308]
[141.01785278 6.34473467]
[141.64555359 -7.24837065]
[143.16110229 -20.77113152]
[145.55801392 -34.16561890]
[148.82598877 -47.37445068]
[152.95098877 -60.34104538]
[157.91534424 -73.00986481]
[163.69776917 -85.32663727]
[170.27345276 -97.23860931]
[177.61421204 -108.69476318]
[185.68858337 -119.64601898]
[194.46194458 -130.04548645]
[203.89672852 -139.84863281]
[213.95245361 -149.01345825]
[224.58605957 -157.50073242]
[235.75198364 -165.27410889]
[247.40234375 -172.30029297]
[259.48724365 -178.54920959]
[271.95489502 -183.99411011]
[284.75186157 -188.61169434]
[297.82333374 -192.38218689]
[311.11331177 -195.28945923]
[324.56484985 -197.32109070]
[338.12026978 -198.46838379]
[351.72158813 -198.72645569]
[365.31045532 -198.09420776]
[378.82870483 -196.57438660]
[392.21841431 -194.17352295]
[405.42221069 -190.90191650]
[418.38354492 -186.77360535]
[431.04690552 -181.80630493]
[443.35803223 -176.02130127]
[455.26419067 -169.44342041]
[466.71441650 -162.10083008]
[477.65963745 -154.02502441]
[488.05297852 -145.25062561]
[497.84994507 -135.81521606]
[507.00857544 -125.75925446]
[515.48962402 -115.12582397]
[523.25683594 -103.96050262]
[530.27691650 -92.31111908]
[536.51977539 -80.22761536]
[541.95874023 -67.76174164]
[546.57049561 -54.96693039]
[550.33532715 -41.89799881]
[553.23712158 -28.61093330]
[555.26342773 -15.16266823]
[556.40570068 -1.61081672]
[556.65893555 11.98656082]
[571.64019775 12.73662853]
[586.62139893 13.48669624]
[601.60266113 14.23676395]
[610.49804688 1.63217568]
[624.80444336 -4.14108515]
[639.95672607 -1.24079204]
[651.11987305 9.40758133]
[654.73175049 24.40617943]
[649.63977051 38.96900177]
[637.46887207 48.44910812]
[622.10266113 49.82142639]
[608.44445801 42.64805984]
[600.85260010 29.21799850]
[585.87133789 28.46793175]
[570.89007568 27.71786308]
[555.90887451 26.96779633]
[553.79199219 43.63565063]
[550.33520508 60.07830048]
[545.56115723 76.18820953]
[539.50097656 91.86003876]
[532.19421387 106.99127960]
[523.68859863 121.48297119]
[514.03973389 135.24032593]
[503.31066895 148.17337036]
[491.57150269 160.19749451]
[478.89895630 171.23402405]
[465.37582397 181.21076965]
[451.09054565 190.06243896]
[436.13650513 197.73112488]
[420.61141968 204.16662598]
[404.61685181 209.32681274]
[388.25729370 213.17788696]
[371.63973999 215.69462585]
[354.87283325 216.86050415]
[338.06622314 216.66786194]
[321.32980347 215.11788940]
[304.77301025 212.22068787]
[288.50408936 207.99513245]
[272.62948608 202.46881104]
[257.25296021 195.67779541]
[242.47512817 187.66645813]
[228.39260864 178.48712158]
[215.09753418 168.19978333]
[202.67687988 156.87164307]
[191.21186829 144.57675171]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 58]
[4 57]
[5 56]
[6 55]
[8 53]
[9 52]
[10 51]
[11 50]
[36 49]
[37 48]
[38 47]
[39 46]
[111 127]
[112 126]
[113 125]
[114 124]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
