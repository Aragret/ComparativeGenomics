%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:08 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGAUAAACAACAUAAGCUUCUGACUCUUACCUCCCUCUCUCCUACUCCUGCUCGCAUCUGCUxxxxxxxxxxCUAGUUUUGACAACAUUCAAAAAAGAGUAAUAAACUUCGCCUUAAUUUUAAUAAUCAACACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[91.67699432 399.91635132]
[91.67699432 384.91635132]
[91.67699432 369.91635132]
[91.67699432 354.91635132]
[91.67699432 339.91635132]
[91.67699432 324.91635132]
[91.67699432 309.91635132]
[91.67699432 294.91635132]
[91.67699432 279.91635132]
[91.67699432 264.91635132]
[77.21214294 261.08001709]
[64.22328186 253.62438965]
[53.59880829 243.05249023]
[46.06719971 230.08070374]
[42.14705276 215.59025574]
[42.11138535 200.56735229]
[45.96863937 186.03602600]
[53.46167755 172.98838806]
[64.08493805 162.31681824]
[77.11852264 154.75302124]
[91.67699432 150.81777954]
[91.67699432 135.81777954]
[91.67699432 120.81777954]
[86.87669373 116.36239624]
[83.87197113 111.01401520]
[82.74156189 105.40524292]
[83.36037445 100.13095093]
[85.42967224 95.68726349]
[88.52429962 92.42517853]
[92.15086365 90.52308655]
[95.81005859 89.98041534]
[92.10389709 75.44548035]
[88.39773560 60.91054153]
[84.69157410 46.37560654]
[80.98541260 31.84066963]
[77.27925110 17.30573463]
[72.55547333 16.46340561]
[68.09557343 14.60347080]
[64.11755371 11.80093002]
[60.81928635 8.17720890]
[58.36866379 3.89494801]
[56.89511490 -0.84927320]
[56.48282242 -5.83394718]
[49.30031204 -19.00252914]
[34.86949539 -14.72113705]
[19.86968803 -13.53431129]
[4.95673370 -15.49150658]
[-9.21782780 -20.50476074]
[-22.03522873 -28.35264778]
[-32.93648148 -38.69005585]
[-41.44675827 -51.06336594]
[-47.19607162 -64.93035889]
[-49.93536377 -79.68395996]
[-49.54729080 -94.67884064]
[-46.05124283 -109.25962067]
[-39.60240173 -122.78953552]
[-30.48484421 -134.67823792]
[-19.09903908 -144.40753174]
[-26.28154755 -157.57611084]
[-41.68645096 -159.43852234]
[-53.03163528 -170.02467346]
[-55.95464325 -185.26394653]
[-49.33152390 -199.29655457]
[-35.70899963 -206.72665405]
[-20.32520676 -204.69723511]
[-9.09552956 -193.98863220]
[-6.33800793 -178.71855164]
[-13.11296558 -164.75862122]
[-5.93045664 -151.59004211]
[8.41405487 -155.89477539]
[23.34595490 -157.12330627]
[38.21275711 -155.21952820]
[52.36431885 -150.26425171]
[65.18125916 -142.47174072]
[76.10207367 -132.18057251]
[84.64775085 -119.83879852]
[90.44274139 -105.98449707]
[93.23149872 -91.22230530]
[92.88973999 -76.19705200]
[89.42997742 -61.56554794]
[83.00106049 -47.96790695]
[73.88180542 -35.99953079]
[62.46889496 -26.18503952]
[69.65140533 -13.01645565]
[84.53468323 -11.14884281]
[94.74816132 -22.13450813]
[104.96164703 -33.12017059]
[115.17512512 -44.10583878]
[125.38860321 -55.09150314]
[135.60208130 -66.07716370]
[134.77639771 -81.85987091]
[145.41453552 -93.54770660]
[161.20509338 -94.20648193]
[172.77980042 -83.44536591]
[173.27159119 -67.64872742]
[162.38870239 -56.18844223]
[146.58775330 -55.86368561]
[136.37426758 -44.87802124]
[126.16078949 -33.89235687]
[115.94731140 -22.90669250]
[105.73382568 -11.92102814]
[95.52034760 -0.93536305]
[91.81418610 13.59957314]
[95.52034760 28.13451004]
[99.22650909 42.66944504]
[102.93267059 57.20438004]
[106.63883209 71.73931885]
[110.34499359 86.27425385]
[121.22381592 96.60145569]
[135.93177795 99.54694366]
[150.63973999 102.49242401]
[159.41073608 90.04294586]
[172.49043274 82.24284363]
[187.61267090 80.44352722]
[202.15745544 84.95674133]
[213.60481262 95.00054932]
[219.97140503 108.83480072]
[220.15419006 124.06261444]
[214.12149048 138.04570007]
[202.91853333 148.36138916]
[188.48626709 153.22242737]
[173.32518005 151.78660583]
[160.06204224 144.30271912]
[150.99473572 132.06735229]
[147.69425964 117.20038605]
[132.98629761 114.25490570]
[118.27833557 111.30941772]
[106.67699432 120.81777954]
[106.67699432 135.81777954]
[106.67699432 150.81777954]
[121.23546600 154.75302124]
[134.26905823 162.31681824]
[144.89231873 172.98838806]
[152.38534546 186.03602600]
[156.24259949 200.56735229]
[156.20693970 215.59025574]
[152.28678894 230.08070374]
[144.75518799 243.05249023]
[134.13070679 253.62438965]
[121.14185333 261.08001709]
[106.67699432 264.91635132]
[106.67699432 279.91635132]
[106.67699432 294.91635132]
[106.67699432 309.91635132]
[106.67699432 324.91635132]
[106.67699432 339.91635132]
[106.67699432 354.91635132]
[106.67699432 369.91635132]
[106.67699432 384.91635132]
[106.67699432 399.91635132]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[21 130]
[22 129]
[23 128]
[31 108]
[32 107]
[33 106]
[34 105]
[35 104]
[36 103]
[43 84]
[44 83]
[58 69]
[59 68]
[85 102]
[86 101]
[87 100]
[88 99]
[89 98]
[90 97]
[109 127]
[110 126]
[111 125]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
