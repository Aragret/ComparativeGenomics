%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:30 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCACCCUUAUCACAACACAAGAACACCUCUGAUUACUCCUGCCAUCAUGACCCUUGGCCAUAxxxxxxxxxxUUACUAGACCAAUGGGACUUAAACCCACAAACACUUAGUUAACAGCUAAGCACCCUAAUCACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[141.90791321 279.05154419]
[141.90791321 264.05154419]
[141.90791321 249.05154419]
[141.90791321 234.05154419]
[141.90791321 219.05154419]
[141.90791321 204.05154419]
[141.90791321 189.05154419]
[141.90791321 174.05154419]
[141.90791321 159.05154419]
[141.90791321 144.05154419]
[129.15145874 151.29469299]
[115.42855072 155.07763672]
[101.63129425 155.37194824]
[88.60671997 152.36914062]
[77.10485840 146.45706177]
[67.73556519 138.18452454]
[60.93663788 128.21710205]
[56.95477676 117.28734589]
[55.84015274 106.14300537]
[40.84726715 105.68108368]
[25.85437965 105.21915436]
[38.34191513 113.52947998]
[47.52602005 125.38916779]
[52.44704056 139.55897522]
[52.59076691 154.55828857]
[47.94218063 168.81979370]
[38.98702240 180.85330200]
[26.66102982 189.40139771]
[12.25216293 193.57087708]
[-2.73397160 192.92607117]
[-16.73144913 187.53434753]
[-28.27765274 177.95910645]
[-36.16609955 165.20088196]
[-39.57251358 150.59278870]
[-38.14095688 135.66125488]
[-32.02101135 121.96650696]
[-21.85216141 110.93951416]
[-8.69696426 103.73252106]
[6.06947041 101.09859467]
[-7.86124563 95.53665161]
[-21.79196167 89.97471619]
[-35.72267914 84.41278076]
[-47.73689270 93.98117828]
[-62.92808151 96.24467468]
[-77.20988464 90.59439850]
[-86.74057770 78.55024719]
[-88.95644379 63.35203934]
[-83.26142883 49.08801651]
[-71.18746948 39.59512711]
[-55.98238754 37.42690659]
[-41.73628616 43.16660309]
[-32.28128815 55.27026367]
[-30.16073990 70.48206329]
[-16.23002434 76.04399872]
[-2.29930830 81.60594177]
[11.63140774 87.16787720]
[26.31630516 90.22627258]
[41.30919266 90.68819427]
[56.30207825 91.15012360]
[64.87966919 66.34988403]
[87.34307861 48.84943390]
[117.93856049 46.16258240]
[147.08711243 61.53421783]
[148.01051331 46.56266785]
[148.93392944 31.59111786]
[149.85734558 16.61956787]
[135.50537109 11.98582268]
[122.75709534 3.92776752]
[112.41388702 -7.04806137]
[105.12592316 -20.25171471]
[101.35134125 -34.85319901]
[101.32740784 -49.93465042]
[105.05562592 -64.54804230]
[112.30164337 -77.77475739]
[122.60997009 -88.78336334]
[135.33261108 -96.88183594]
[149.66979980 -101.56111145]
[164.72030640 -102.52703857]
[179.53804016 -99.71890259]
[193.19154358 -93.31321716]
[204.82254028 -83.71266174]
[213.69990540 -71.52072906]
[219.26559448 -57.50381088]
[221.16973877 -42.54302979]
[219.29264832 -27.57882690]
[213.75233459 -13.55186653]
[204.89703369 -1.34389591]
[193.28341675 8.27768230]
[179.64152527 14.70804787]
[164.82890320 17.54298210]
[163.90548706 32.51453018]
[162.98207092 47.48608017]
[162.05865479 62.45763016]
[174.97135925 70.09059906]
[187.64286804 62.06360245]
[200.31439209 54.03660583]
[212.98590088 46.00960922]
[214.88734436 30.48805809]
[226.35620117 19.85793877]
[241.97721863 19.13846779]
[254.37464905 28.66935730]
[257.69479370 43.95041275]
[250.36997986 57.76638794]
[235.85876465 63.59379959]
[221.01289368 58.68112564]
[208.34138489 66.70812225]
[195.66986084 74.73512268]
[182.99835205 82.76211548]
[183.84355164 90.21434021]
[198.74800110 88.52394104]
[213.65248108 86.83379364]
[215.34237671 101.73829651]
[200.43840027 103.42839050]
[185.53395081 105.11878967]
[186.37915039 112.57101440]
[200.52645874 117.55633545]
[214.67378235 122.54165649]
[228.82109070 127.52697754]
[242.96841431 132.51229858]
[257.11572266 137.49761963]
[272.14807129 131.89335632]
[285.82748413 140.27511597]
[287.66024780 156.21313477]
[276.24044800 167.48112488]
[260.32836914 165.43525696]
[252.13040161 151.64494324]
[237.98309326 146.65962219]
[223.83576965 141.67430115]
[209.68846130 136.68898010]
[195.54113770 131.70364380]
[181.39382935 126.71833038]
[175.27235413 131.05163574]
[185.29769897 142.20924377]
[195.32304382 153.36686707]
[208.91290283 159.71633911]
[213.32121277 174.05393982]
[205.64611816 186.94165039]
[190.93989563 189.89585876]
[178.88323975 180.97190857]
[177.41215515 166.04571533]
[170.22077942 152.88197327]
[163.02938843 139.71824646]
[156.90791321 144.05154419]
[156.90791321 159.05154419]
[156.90791321 174.05154419]
[156.90791321 189.05154419]
[156.90791321 204.05154419]
[156.90791321 219.05154419]
[156.90791321 234.05154419]
[156.90791321 249.05154419]
[156.90791321 264.05154419]
[156.90791321 279.05154419]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 152]
[2 151]
[3 150]
[4 149]
[5 148]
[6 147]
[7 146]
[8 145]
[9 144]
[10 143]
[19 59]
[20 58]
[21 57]
[39 56]
[40 55]
[41 54]
[42 53]
[63 93]
[64 92]
[65 91]
[66 90]
[94 108]
[95 107]
[96 106]
[97 105]
[115 131]
[116 130]
[117 129]
[118 128]
[119 127]
[120 126]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
