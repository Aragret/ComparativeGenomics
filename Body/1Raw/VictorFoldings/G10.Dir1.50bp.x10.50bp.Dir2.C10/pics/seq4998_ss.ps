%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:12 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGUAAAACUAGGAAUAGCCCCCUUUCACUUCUGAGUCCCAGAGGUUACCCAAGGCACCCCUCxxxxxxxxxxCCAUGUCGAAGCCCCCAUCGCUGGGUCAAUAGUACUUGCCGCAGUACUCUUAAAACUAGGCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[99.63395691 140.26454163]
[85.50914764 145.31329346]
[71.38434601 150.36206055]
[58.94490814 158.74420166]
[48.96218109 169.93995667]
[38.97945404 181.13572693]
[28.99672699 192.33149719]
[19.01400185 203.52726746]
[9.03127480 214.72302246]
[5.62205172 230.17254639]
[-8.62314034 234.52268982]
[-18.60586739 245.71846008]
[-13.71272945 260.27706909]
[-16.77017593 275.32855225]
[-26.95576668 286.82418823]
[-41.52963257 291.67166138]
[-56.57147217 288.56704712]
[-68.03511047 278.34545898]
[-72.83688354 263.75650024]
[-69.68513489 248.72445679]
[-59.42768097 237.29290771]
[-44.82371521 232.53689575]
[-29.80163193 235.73573303]
[-19.81890678 224.53996277]
[-17.12371445 209.89123535]
[-2.16449118 204.74029541]
[7.81823540 193.54454041]
[17.80096245 182.34877014]
[27.78368759 171.15299988]
[37.76641464 159.95722961]
[47.74914169 148.76147461]
[45.59534836 141.57737732]
[30.99827194 138.12406921]
[41.28776550 127.20919037]
[39.13397217 120.02510071]
[24.63837433 116.16794586]
[10.14277840 112.31078339]
[-4.35281801 108.45362091]
[-18.84841537 104.59646606]
[-33.34400940 100.73930359]
[-47.83960724 96.88214874]
[-62.38460541 103.65138245]
[-76.68086243 96.37150574]
[-79.76151276 80.62701416]
[-69.26334381 68.49572754]
[-53.23965454 69.28373718]
[-43.98244858 82.38655090]
[-29.48685265 86.24370575]
[-14.99125481 90.10086823]
[-0.49565864 93.95802307]
[13.99993801 97.81518555]
[28.49553490 101.67234802]
[42.99113083 105.52950287]
[57.33535767 113.30770111]
[65.24240875 124.65672302]
[66.33559418 136.23724365]
[80.46039581 131.18849182]
[94.58519745 126.13973999]
[71.68633270 111.87316132]
[70.82254791 81.19934845]
[64.19404602 67.74338531]
[57.56554794 54.28742218]
[43.64072037 45.62536240]
[44.45022964 29.24620628]
[59.16131973 21.99942589]
[72.64048767 31.33988571]
[71.02151489 47.65892029]
[77.65000916 61.11488724]
[84.27851105 74.57085419]
[91.50585175 76.57472229]
[92.13993073 61.58813095]
[92.77400970 46.60153961]
[93.40808868 31.61494637]
[94.04216766 16.62835503]
[94.67624664 1.64176250]
[88.22953033 -11.90223217]
[87.28018188 -26.87215996]
[91.96430206 -41.12203598]
[101.61041260 -52.60910034]
[114.83570099 -59.68664932]
[129.74429321 -61.34008789]
[144.19898987 -57.33239746]
[156.12768555 -48.23809052]
[163.82034302 -35.36086273]
[166.17420959 -20.54670334]
[162.85185242 -5.91926622]
[154.32952881 6.42456150]
[141.82870483 14.71535969]
[134.65507507 27.88878059]
[127.48143768 41.06220245]
[120.30780792 54.23562241]
[113.13417053 67.40904236]
[105.96054077 80.58246613]
[113.18788910 82.58633423]
[125.79901123 74.46479034]
[138.41014099 66.34324646]
[151.02127075 58.22170639]
[158.03675842 43.39891815]
[174.40121460 42.33297348]
[183.28031921 56.12042236]
[175.53997803 70.57791901]
[159.14280701 70.83283234]
[146.53169250 78.95437622]
[133.92056274 87.07592010]
[121.30942535 95.19746399]
[122.47498322 102.60633850]
[135.84724426 95.81055450]
[146.44253540 106.42845154]
[139.61828613 119.78620148]
[124.80608368 117.42409515]
[125.97163391 124.83297729]
[140.46723938 128.69013977]
[154.96282959 132.54730225]
[169.45841980 136.40444946]
[183.95402527 140.26161194]
[198.44961548 144.11877441]
[211.99540710 135.97706604]
[227.31034851 139.87934875]
[235.30839539 153.51045227]
[231.24441528 168.78329468]
[217.52951050 176.63676453]
[202.30049133 172.41154480]
[194.59245300 158.61436462]
[180.09686279 154.75721741]
[165.60127258 150.90005493]
[151.10566711 147.04289246]
[136.61007690 143.18572998]
[122.11447906 139.32856750]
[136.58326721 143.28511047]
[149.65032959 150.65069580]
[160.52659607 160.98059082]
[168.55531311 173.65101624]
[173.25167847 187.89686584]
[174.33209229 202.85791016]
[171.73130798 217.63072205]
[165.60638428 231.32324219]
[156.32716370 243.10865784]
[144.45397949 252.27531433]
[130.70379639 258.26968384]
[115.90690613 260.72976685]
[100.95682526 259.50704956]
[86.75630951 254.67535400]
[74.16285706 246.52642822]
[63.93692017 235.55236816]
[56.69599152 222.41581726]
[52.87731552 207.91003418]
[52.71148300 192.91094971]
[56.20850372 178.32427979]
[63.15721512 165.03085327]
[73.13801575 153.83335876]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 58]
[2 57]
[3 56]
[4 31]
[5 30]
[6 29]
[7 28]
[8 27]
[9 26]
[11 24]
[12 23]
[35 53]
[36 52]
[37 51]
[38 50]
[39 49]
[40 48]
[41 47]
[60 69]
[61 68]
[62 67]
[94 105]
[95 104]
[96 103]
[97 102]
[111 128]
[112 127]
[113 126]
[114 125]
[115 124]
[116 123]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
