%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:34 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGGCCUCCAUGACUUUUUCAAAAAGGUAUUAGAAAAACCAUUUCAUAACUUUGUCAAAGUUAxxxxxxxxxxGUAUUGACUCACCCAUCAACAACCGCUAUGUAUUUCGUACAUUACUGCCAGCCACCAUGACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[124.36769867 343.03601074]
[124.05564117 328.03924561]
[123.74358368 313.04251099]
[123.43152618 298.04574585]
[123.11947632 283.04898071]
[122.80741882 268.05224609]
[122.49536133 253.05548096]
[122.18330383 238.05873108]
[121.87124634 223.06198120]
[119.84891510 208.19892883]
[116.14275360 193.66400146]
[112.43659210 179.12905884]
[93.50074005 179.83630371]
[74.92861176 176.07563782]
[57.75956726 168.05749512]
[42.95444870 156.23062134]
[31.34180450 141.25686646]
[17.81761360 147.74502563]
[4.29342413 154.23320007]
[-4.80226040 167.17843628]
[-19.62405586 165.70748901]
[-33.14824677 172.19566345]
[-46.67243576 178.68382263]
[-60.19662476 185.17198181]
[-73.72081757 191.66015625]
[-85.38626862 203.96273804]
[-100.43737793 196.15887451]
[-97.10504913 179.53562927]
[-80.20897675 178.13597107]
[-66.68479156 171.64779663]
[-53.16059875 165.15963745]
[-39.63640976 158.67146301]
[-26.11222076 152.18330383]
[-17.98387718 139.70214844]
[-2.19474077 140.70901489]
[11.32944870 134.22084045]
[24.85363960 127.73267365]
[20.82947731 112.16985321]
[19.99375916 96.11690521]
[22.38014412 80.22034454]
[8.25534058 75.17158508]
[-5.86946297 70.12283325]
[-19.99426651 65.07407379]
[-35.05161667 70.61083221]
[-48.69325638 62.16777420]
[-50.45448303 46.22169113]
[-38.98423767 35.00505066]
[-23.08150864 37.12230301]
[-14.94550896 50.94927216]
[-0.82070643 55.99802780]
[13.30409622 61.04678345]
[27.42889977 66.09554291]
[37.52368546 49.87229538]
[51.17359924 36.50149918]
[43.18368530 23.80657005]
[35.19376755 11.11163902]
[27.20385170 -1.58329010]
[19.21393585 -14.27822018]
[11.22401905 -26.97315025]
[3.23410296 -39.66807938]
[-10.31997681 -49.85253906]
[-4.28567076 -65.69625854]
[12.60933304 -64.28376007]
[15.92903233 -47.65799713]
[23.91894913 -34.96306610]
[31.90886497 -22.26813507]
[39.89878082 -9.57320595]
[47.88869858 3.12172318]
[55.87861252 15.81665325]
[63.86853027 28.51158333]
[70.91964722 25.36482048]
[78.24098206 22.91159439]
[85.76451874 21.17469978]
[93.42032623 20.17027473]
[101.13728333 19.90765572]
[108.84366608 20.38928223]
[116.46787262 21.61067581]
[123.93905640 23.56049156]
[131.18778992 26.22060776]
[138.14671326 29.56630707]
[144.75115967 33.56649780]
[154.25952148 21.96515656]
[156.79327393 3.75636792]
[173.39306641 -1.85135448]
[182.65802002 -13.64799404]
[191.92297363 -25.44463348]
[201.18791199 -37.24127579]
[196.81939697 -52.13072205]
[202.06866455 -66.73293304]
[214.91729736 -75.43306732]
[230.42471313 -74.88574219]
[242.62800598 -65.30141449]
[246.83476257 -50.36545563]
[241.42738342 -35.82104492]
[228.48512268 -27.26080513]
[212.98455811 -27.97632408]
[203.71960449 -16.17968559]
[194.45466614 -4.38304520]
[185.18971252 7.41359472]
[186.31401062 19.49843025]
[178.63589478 29.41132164]
[165.86087036 31.47351646]
[156.35250854 43.07485580]
[164.41271973 52.38615036]
[170.95030212 62.82296753]
[175.81071472 74.13859558]
[178.87907410 86.06555176]
[180.08283997 98.32189941]
[195.04309082 99.41321564]
[210.00334167 100.50452423]
[224.96357727 101.59583282]
[239.92382812 102.68714142]
[252.95446777 93.32860565]
[268.35601807 97.81991577]
[274.31372070 112.71572876]
[266.25735474 126.58924866]
[250.36706543 128.79789734]
[238.83251953 117.64739227]
[223.87226868 116.55608368]
[208.91201782 115.46477509]
[193.95178223 114.37345886]
[178.99153137 113.28215027]
[174.42370605 129.61737061]
[166.51863098 144.62452698]
[155.63078308 157.63064575]
[142.24839783 168.05255127]
[126.97152710 175.42289734]
[130.67768860 189.95783997]
[134.38385010 204.49276733]
[140.15837097 190.64881897]
[151.62261963 180.97560120]
[166.24079895 177.61274719]
[180.77951050 181.30407715]
[192.02291870 191.23310852]
[197.48408508 205.20364380]
[195.95506287 220.12550354]
[187.77404785 232.69813538]
[174.75059509 240.14056396]
[159.76539612 240.80662537]
[146.13301086 234.54896545]
[136.86799622 222.74992371]
[137.18005371 237.74667358]
[137.49211121 252.74342346]
[137.80416870 267.74017334]
[138.11622620 282.73693848]
[138.42828369 297.73370361]
[138.74034119 312.73043823]
[139.05239868 327.72720337]
[139.36445618 342.72393799]
[141.95544434 361.93167114]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 149]
[2 148]
[3 147]
[4 146]
[5 145]
[6 144]
[7 143]
[8 142]
[9 141]
[10 129]
[11 128]
[12 127]
[17 37]
[18 36]
[19 35]
[21 33]
[22 32]
[23 31]
[24 30]
[25 29]
[40 52]
[41 51]
[42 50]
[43 49]
[54 70]
[55 69]
[56 68]
[57 67]
[58 66]
[59 65]
[60 64]
[81 103]
[82 102]
[84 99]
[85 98]
[86 97]
[87 96]
[108 122]
[109 121]
[110 120]
[111 119]
[112 118]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
