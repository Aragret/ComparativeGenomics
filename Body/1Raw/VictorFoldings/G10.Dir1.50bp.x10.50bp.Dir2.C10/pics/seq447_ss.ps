%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:50 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGAACCCUAACACCAGCCUAACCAGAUUUCAAAUUUUAUCUUUUGGCGGUAUGCACUUUUAAxxxxxxxxxxCCACCCUAACCCUGACUUCCCUAAUUCCCCCCAUCCUUACCACCCUCGUUAACCCUAACACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[106.95401001 311.79138184]
[106.95401001 296.79138184]
[106.95401001 281.79138184]
[106.95401001 266.79138184]
[106.95401001 251.79136658]
[106.95401001 236.79136658]
[106.95401001 221.79136658]
[106.95401001 206.79136658]
[106.95401001 191.79136658]
[106.95401001 176.79136658]
[105.39642334 161.87246704]
[102.29810333 147.19593811]
[99.19978333 132.51940918]
[92.91127014 131.74748230]
[86.89167023 129.77119446]
[81.36933899 126.66553497]
[76.55376434 122.54831696]
[72.62763214 117.57572174]
[69.73987579 111.93637848]
[68.00004578 105.84423828]
[53.02032852 105.06439209]
[38.04061508 104.28454590]
[29.24257469 106.97644806]
[22.75835800 103.32945251]
[7.79810858 102.23814392]
[-7.16213989 101.14682770]
[-21.48866081 107.85961151]
[-33.61928558 99.21685028]
[-48.57953262 98.12554169]
[-54.78359985 100.69790649]
[-60.48300552 99.83299255]
[-64.13522339 96.66489410]
[-79.03712463 94.95220184]
[-93.93902588 93.23950958]
[-108.84092712 91.52682495]
[-117.92429352 103.91181183]
[-131.98966980 110.08115387]
[-147.25354004 108.37532043]
[-159.61000061 99.25318146]
[-165.73521423 85.16853333]
[-163.98155212 69.91008759]
[-154.82072449 57.58228302]
[-140.71694946 51.50123978]
[-125.46407318 53.30272675]
[-113.16503906 62.50215149]
[-107.12823486 76.62492371]
[-92.22633362 78.33760834]
[-77.32443237 80.05030060]
[-62.42253113 81.76299286]
[-47.48822403 83.16529083]
[-32.52797318 84.25660706]
[-19.27151108 77.46576691]
[-6.07082939 86.18658447]
[8.88941956 87.27789307]
[23.84966850 88.36920166]
[38.82046127 89.30483246]
[53.80017471 90.08467865]
[68.77988434 90.86452484]
[86.23550415 70.52643585]
[113.03527832 70.19674683]
[122.05281067 58.20991516]
[111.04637146 47.99901581]
[101.14818573 36.71053314]
[92.46317291 24.46412086]
[85.08340454 11.38960457]
[79.08709717 -2.37441945]
[74.53782654 -16.68204498]
[71.48381042 -31.38160515]
[69.95743561 -46.31727219]
[69.97486877 -61.33072281]
[71.53592682 -76.26280975]
[74.62406921 -90.95523834]
[79.20655060 -105.25225830]
[85.23480988 -119.00231934]
[92.64492798 -132.05966187]
[101.35835266 -144.28587341]
[111.28273010 -155.55134583]
[122.31285095 -165.73664856]
[134.33178711 -174.73382568]
[147.21212769 -182.44750977]
[160.81733704 -188.79591370]
[175.00320435 -193.71174622]
[189.61932373 -197.14288330]
[204.51078796 -199.05299377]
[219.51971436 -199.42178345]
[234.48701477 -198.24537659]
[249.25402832 -195.53620911]
[263.66421509 -191.32304382]
[277.56478882 -185.65051270]
[290.80844116 -178.57875061]
[303.25476074 -170.18272400]
[314.77178955 -160.55143738]
[325.23748779 -149.78698730]
[334.54089355 -138.00347900]
[342.58334351 -125.32583618]
[349.27966309 -111.88844299]
[354.55880737 -97.83374023]
[358.36480713 -83.31071472]
[360.65737915 -68.47332001]
[361.41213989 -53.47884369]
[360.62115479 -38.48623276]
[358.29278564 -23.65441895]
[354.45172119 -9.14062595]
[349.13864136 4.90128946]
[342.40991211 18.32247734]
[334.33685303 30.98066330]
[325.00503540 42.74166489]
[314.51339722 53.48081207]
[302.97311401 63.08425522]
[290.50656128 71.45020294]
[277.24588013 78.48996735]
[263.33163452 84.12891388]
[248.91131592 88.30728149]
[234.13781738 90.98076630]
[219.16770935 92.12104034]
[204.15971375 91.71599579]
[189.27291870 89.76994324]
[174.66511536 86.30351257]
[160.49116516 81.35343933]
[146.90132141 74.97219849]
[134.03964233 67.22744751]
[125.02210999 79.21427917]
[130.09524536 87.65379333]
[132.41064453 97.22463989]
[131.75614929 107.04979706]
[128.19172668 116.22895813]
[122.04399872 123.92100525]
[113.87631226 129.42108154]
[116.97463226 144.09761047]
[120.07295227 158.77413940]
[126.80533600 145.36984253]
[139.26174927 137.01293945]
[154.21788025 135.86657715]
[167.80238342 142.22749329]
[176.49894714 154.44918823]
[178.05650330 169.36810303]
[172.07186890 183.12252808]
[160.09416199 192.15217590]
[145.22377014 194.11973572]
[131.30984497 188.51593018]
[121.95401001 176.79136658]
[121.95401001 191.79136658]
[121.95401001 206.79136658]
[121.95401001 221.79136658]
[121.95401001 236.79136658]
[121.95401001 251.79136658]
[121.95401001 266.79138184]
[121.95401001 281.79138184]
[121.95401001 296.79138184]
[121.95401001 311.79138184]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[11 130]
[12 129]
[13 128]
[20 58]
[21 57]
[22 56]
[24 55]
[25 54]
[26 53]
[28 51]
[29 50]
[32 49]
[33 48]
[34 47]
[35 46]
[60 122]
[61 121]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
