%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:53 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGUUAUUCUAGCCACCUCUAGCCUAGCCGUUUACUCAAUCCUCUGAUCAGGGUGAGCAUCAAxxxxxxxxxxAUUAAAUUAUGAUAAUCAUAUUUACCAAAUGCCCCUCAUUUACAUAAAUAUUAUACUAGCCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[99.25452423 271.80303955]
[99.25452423 256.80303955]
[99.25452423 241.80303955]
[99.25452423 226.80303955]
[99.25452423 211.80303955]
[99.25452423 196.80303955]
[99.25452423 181.80303955]
[99.25452423 166.80303955]
[99.25452423 151.80303955]
[99.25452423 136.80303955]
[79.27501678 126.02182770]
[71.17173767 107.23557281]
[75.95397186 89.65137482]
[64.45217133 80.02285004]
[52.95036316 70.39432526]
[46.47398376 72.65307617]
[39.57365799 72.59919739]
[33.05527878 70.21099854]
[27.68953514 65.74105835]
[12.92348003 63.10219193]
[-1.86922741 60.61707306]
[-16.68698502 58.28596878]
[-31.50474358 55.95486450]
[-46.32250214 53.62376022]
[-55.35250473 55.38753510]
[-61.42296982 51.08694077]
[-76.18902588 48.44807434]
[-91.17604065 47.82409668]
[-106.11035156 49.22640228]
[-111.36983490 63.55471420]
[-122.33126831 74.17590332]
[-136.81825256 78.98113251]
[-151.95437622 77.01631165]
[-164.73435974 68.67156219]
[-172.62071228 55.60373688]
[-174.04762268 40.40746689]
[-168.73175049 26.09997559]
[-157.72857666 15.52203178]
[-143.22277832 10.77389145]
[-128.09451294 12.79830170]
[-115.34749603 21.19331360]
[-107.51264954 34.29209518]
[-92.57834625 32.88978958]
[-90.95293427 25.56803894]
[-87.70210266 10.92453861]
[-86.07669067 3.60278773]
[-99.01474762 -3.98712063]
[-111.95280457 -11.57702923]
[-128.34637451 -11.14962387]
[-136.68142700 -25.27262306]
[-128.38356018 -39.41749573]
[-111.98891449 -39.03320694]
[-104.36289978 -24.51508522]
[-91.42484283 -16.92517662]
[-78.48678589 -9.33526802]
[-66.90860748 14.45045090]
[-73.55016327 33.68201828]
[-58.78410339 36.32088470]
[-43.99139786 38.80600357]
[-29.17363930 41.13710785]
[-14.35588169 43.46821213]
[0.46187648 45.79931259]
[7.60440111 43.71845245]
[15.56234360 48.33613586]
[30.32839966 50.97499847]
[42.59076691 42.33588409]
[45.07588577 27.54317665]
[47.56100464 12.75046921]
[50.04612350 -2.04223776]
[36.45182419 -8.62795639]
[25.26452637 -18.77788734]
[17.39113808 -31.66921806]
[13.46991539 -46.25690842]
[13.81873703 -61.35839844]
[18.40932465 -75.74948120]
[26.86953926 -88.26352692]
[38.51354980 -97.88608551]
[52.39743042 -103.83710480]
[67.39567566 -105.63414764]
[82.29244232 -103.13155365]
[95.88011932 -96.53218079]
[107.05721283 -86.37101746]
[114.91764832 -73.47177887]
[118.82421112 -58.88015747]
[118.46022034 -43.77902603]
[113.85517883 -29.39256477]
[105.38239288 -16.88702202]
[93.72872162 -7.27616215]
[79.83887482 -1.33909786]
[64.83882904 0.44288072]
[62.35371017 15.23558807]
[59.86859512 30.02829552]
[57.38347626 44.82100296]
[62.57889175 58.89252090]
[74.08069611 68.52104950]
[85.58249664 78.14957428]
[104.30496979 70.59099579]
[125.51115417 78.64956665]
[136.79202271 101.16890717]
[151.77172852 101.94875336]
[166.75144958 102.72859955]
[181.73117065 103.50844574]
[196.71087646 104.28829193]
[211.69059753 105.06813812]
[224.43507385 93.13014221]
[241.53576660 94.05225372]
[252.48300171 106.78079987]
[267.47570801 107.24884033]
[282.46838379 107.71688080]
[297.46109009 108.18492126]
[312.45379639 108.65296936]
[325.08383179 98.76047516]
[340.65887451 102.60721588]
[347.23107910 117.24229431]
[339.75881958 131.43893433]
[323.97415161 134.30670166]
[311.98574829 123.64566040]
[296.99304199 123.17761993]
[282.00036621 122.70957947]
[267.00765991 122.24153900]
[252.01495361 121.77349091]
[243.92019653 131.84680176]
[231.30790710 135.45298767]
[218.74345398 131.05267334]
[210.91075134 120.04785156]
[195.93103027 119.26800537]
[180.95132446 118.48815918]
[165.97160339 117.70831299]
[150.99188232 116.92846680]
[136.01217651 116.14862823]
[130.57276917 121.31222534]
[143.34481812 129.17826843]
[158.09953308 131.87985229]
[167.24864197 143.76655579]
[166.08389282 158.72126770]
[155.20466614 169.04804993]
[140.20959473 169.43255615]
[128.81538391 159.67694092]
[126.88532257 144.80317688]
[119.69393921 131.63943481]
[114.25452423 136.80303955]
[114.25452423 151.80303955]
[114.25452423 166.80303955]
[114.25452423 181.80303955]
[114.25452423 196.80303955]
[114.25452423 211.80303955]
[114.25452423 226.80303955]
[114.25452423 241.80303955]
[114.25452423 256.80303955]
[114.25452423 271.80303955]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[13 96]
[14 95]
[15 94]
[19 65]
[20 64]
[21 62]
[22 61]
[23 60]
[24 59]
[26 58]
[27 57]
[28 43]
[29 42]
[46 55]
[47 54]
[48 53]
[66 93]
[67 92]
[68 91]
[69 90]
[99 130]
[100 129]
[101 128]
[102 127]
[103 126]
[104 125]
[107 121]
[108 120]
[109 119]
[110 118]
[111 117]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
