%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:51 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGAACUUAAUAUGACUAGCUUACACAAUAGCUUUUAUAGUAAAGAUACCUCUUUACGGACUCxxxxxxxxxxAUGUCCUCCCGUGAGGCCAAAUAUCAUUCUGAGGGGCCACAGUAAUUACAAACUUACUAUCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[117.51943970 339.08724976]
[117.51943970 324.08724976]
[117.51943970 309.08724976]
[117.51943970 294.08724976]
[117.51943970 279.08724976]
[117.51943970 264.08724976]
[117.51943970 249.08726501]
[117.51943970 234.08726501]
[117.51943970 219.08726501]
[117.51943970 204.08726501]
[115.49710083 189.22421265]
[111.48936462 174.76953125]
[106.64009857 169.12770081]
[107.55195618 159.97235107]
[103.84579468 145.43742371]
[100.13963318 130.90248108]
[66.61468506 119.21172333]
[60.21768570 76.63935089]
[45.64498520 80.19411469]
[31.07228088 83.74887848]
[16.49957848 87.30363464]
[1.92687547 90.85839844]
[-5.45818901 101.48453522]
[-17.71690559 104.11946106]
[-28.12643623 97.87854767]
[-42.76993561 101.12937164]
[-57.41343689 104.38019562]
[-72.05693817 107.63102722]
[-78.11650085 121.91603088]
[-91.43262482 129.88224792]
[-106.88497925 128.46650696]
[-118.53182220 118.21318054]
[-121.89470673 103.06489563]
[-115.68054199 88.84646606]
[-102.27878571 81.02516937]
[-86.84269714 82.60845947]
[-75.30776215 92.98752594]
[-60.66426468 89.73669434]
[-46.02076340 86.48587036]
[-31.37726212 83.23504639]
[-19.14111900 70.69404602]
[-1.62788641 76.28569794]
[12.94481659 72.73093414]
[27.51751900 69.17617035]
[42.09022141 65.62141418]
[56.66292572 62.06665039]
[60.36908722 47.53171539]
[49.27777100 37.43306351]
[38.18645477 27.33441353]
[27.09514046 17.23576546]
[16.00382423 7.13711548]
[4.91250896 -2.96153426]
[-6.17880630 -13.06018353]
[-22.30713844 -16.02816772]
[-27.54526329 -31.56824684]
[-16.50464821 -43.69412231]
[-0.54292965 -39.93173218]
[3.91984344 -24.15149879]
[15.01115894 -14.05284977]
[26.10247421 -3.95420003]
[37.19379044 6.14444923]
[48.28510666 16.24309921]
[59.37641907 26.34174919]
[70.46773529 36.44039917]
[84.18778992 30.37738419]
[84.18778992 15.37738514]
[84.18778992 0.37738496]
[84.18778992 -14.62261486]
[70.13059998 -20.40741539]
[59.36072922 -31.13487053]
[53.52049637 -45.16912079]
[53.50050354 -60.37004089]
[59.30379105 -74.41960907]
[70.04540253 -85.17536163]
[84.08731842 -90.99712372]
[99.28825378 -90.99712372]
[113.33017731 -85.17536163]
[124.07179260 -74.41960907]
[129.87507629 -60.37004089]
[129.85508728 -45.16912079]
[124.01484680 -31.13487053]
[113.24497986 -20.40741539]
[99.18778992 -14.62261486]
[99.18778992 0.37738496]
[99.18778992 15.37738514]
[99.18778992 30.37738419]
[105.18120575 34.88615036]
[110.05342865 20.69948578]
[125.05134583 20.94951057]
[129.44798279 35.29069519]
[117.16803741 43.90367889]
[123.16145325 48.41244507]
[137.57366943 44.25455856]
[148.68835449 32.99514389]
[163.06161499 36.90134811]
[177.47383118 32.74346161]
[191.88604736 28.58557320]
[206.29826355 24.42768669]
[207.30641174 9.30289078]
[213.42959595 -4.56370735]
[223.92839050 -15.49764919]
[237.53501892 -22.17860794]
[252.60643005 -23.79982567]
[267.32266235 -20.16553116]
[279.90667725 -11.71458435]
[288.83889771 0.53252172]
[293.04067993 15.09689045]
[292.00463867 30.21980286]
[285.85592651 44.07509232]
[275.33700562 54.98966980]
[261.71807861 61.64553833]
[246.64370728 63.23897934]
[231.93418884 59.57757187]
[219.36576843 51.10345078]
[210.45616150 38.83990097]
[196.04394531 42.99779129]
[181.63172913 47.15567780]
[167.21951294 51.31356430]
[157.13568115 62.27557755]
[141.73155212 58.66677475]
[127.31934357 62.82466125]
[138.42552185 102.67382050]
[114.67456818 127.19631958]
[118.38072968 141.73126221]
[122.08689117 156.26618958]
[125.94405365 170.76179504]
[129.95179749 185.21647644]
[134.85095215 171.03909302]
[145.01002502 160.00309753]
[158.73425293 153.94953918]
[173.73413086 153.88830566]
[187.50733948 159.82958984]
[197.75619507 170.78225708]
[202.77095032 184.91915894]
[201.71505737 199.88194275]
[194.76463318 213.17449951]
[183.07919312 222.57929993]
[168.60810852 226.52742004]
[153.76548767 224.36024475]
[141.02742004 216.43928528]
[132.51943970 204.08726501]
[132.51943970 219.08726501]
[132.51943970 234.08726501]
[132.51943970 249.08726501]
[132.51943970 264.08724976]
[132.51943970 279.08724976]
[132.51943970 294.08724976]
[132.51943970 309.08724976]
[132.51943970 324.08724976]
[132.51943970 339.08724976]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[11 127]
[12 126]
[14 125]
[15 124]
[16 123]
[18 46]
[19 45]
[20 44]
[21 43]
[22 42]
[25 40]
[26 39]
[27 38]
[28 37]
[47 64]
[48 63]
[49 62]
[50 61]
[51 60]
[52 59]
[53 58]
[65 86]
[66 85]
[67 84]
[68 83]
[92 121]
[93 120]
[95 118]
[96 117]
[97 116]
[98 115]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
