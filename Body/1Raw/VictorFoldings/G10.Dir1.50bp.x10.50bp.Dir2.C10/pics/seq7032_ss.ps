%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:49 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCCACUUCCACUAUGUCCUAUCAAUAGGAGCUGUAUUUGCCAUCAUAGGAGGCUUCAUUCAxxxxxxxxxxCCCCACAUUAGGCUUAAAAACAGAUGCAAUUCCCGGACGUCUAAACCAAACCACUUUCACCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[128.33424377 557.05780029]
[128.33424377 542.05780029]
[128.33424377 527.05780029]
[128.33424377 512.05780029]
[128.33424377 497.05776978]
[128.33424377 482.05776978]
[128.33424377 467.05776978]
[128.33424377 452.05776978]
[128.33424377 437.05776978]
[128.33424377 422.05776978]
[113.86939240 418.22143555]
[100.88053131 410.76580811]
[90.25605774 400.19390869]
[82.72444916 387.22213745]
[78.80430603 372.73168945]
[78.76863861 357.70877075]
[82.62589264 343.17745972]
[90.11892700 330.12982178]
[100.74218750 319.45825195]
[113.77577209 311.89443970]
[128.33424377 307.95919800]
[126.93193817 293.02490234]
[124.13961792 278.28707886]
[121.34729004 263.54928589]
[118.55496979 248.81147766]
[115.76264191 234.07366943]
[112.97032166 219.33587646]
[100.38953400 214.76205444]
[91.65407562 204.47598267]
[89.13809967 191.10734558]
[93.60736084 178.14437866]
[103.99061584 169.02368164]
[101.50550079 154.23097229]
[99.02037811 139.43826294]
[89.28141785 128.16874695]
[94.62545776 113.27741241]
[85.87400818 102.37311554]
[90.58184052 89.20770264]
[80.66512299 76.88011932]
[86.18691254 63.04685974]
[83.70179749 48.25415039]
[81.21667480 33.46144485]
[78.73155975 18.66873741]
[68.81484985 6.34115076]
[74.33663177 -7.49211025]
[71.85151672 -22.28481674]
[69.36640167 -37.07752609]
[66.57407379 -51.81533051]
[63.47575378 -66.49185944]
[60.37742996 -81.16838074]
[45.47281265 -84.01936340]
[32.82930374 -92.33709717]
[24.35645294 -104.82807159]
[21.31962395 -119.57138062]
[24.15107918 -134.31410217]
[32.38876724 -146.81553650]
[44.75139236 -155.18780518]
[41.65306854 -169.86431885]
[36.78932571 -177.67430115]
[38.64630508 -184.87828064]
[35.85398102 -199.61608887]
[20.83091736 -201.28909302]
[6.96907902 -207.31744385]
[-4.49894953 -217.16506958]
[-12.55343914 -229.95632935]
[-16.47818947 -244.55386353]
[-15.92421341 -259.65963745]
[-10.94077110 -273.93048096]
[-1.97098768 -286.09741211]
[10.18755054 -295.07858276]
[24.45371437 -300.07537842]
[39.55896759 -300.64349365]
[54.16016006 -296.73239136]
[66.95896149 -288.68988037]
[76.81731415 -277.23107910]
[82.85861969 -263.37487793]
[84.54569244 -248.35339355]
[81.72851562 -233.50230408]
[74.65758514 -220.14216614]
[63.96165085 -209.46093750]
[50.59178543 -202.40841675]
[53.38411331 -187.67060852]
[56.32959366 -172.96264648]
[59.42791748 -158.28611755]
[74.11972046 -155.62524414]
[86.70757294 -147.52023315]
[95.25644684 -135.17997742]
[98.43800354 -120.46722412]
[95.73700714 -105.61737061]
[87.53439331 -92.89887238]
[75.05395508 -84.26670074]
[78.15227509 -69.59017944]
[81.25060272 -54.91365433]
[84.74626160 -51.57361221]
[86.14020538 -45.98002243]
[84.15910339 -39.56264496]
[86.64422607 -24.76993561]
[89.12934113 -9.97722912]
[98.86830139 1.29228425]
[93.52426910 16.18361855]
[96.00938416 30.97632599]
[98.49449921 45.76903152]
[100.97962189 60.56174088]
[110.71858215 71.83125305]
[105.37454224 86.72258759]
[114.12599182 97.62688446]
[109.41815948 110.79229736]
[119.33487701 123.11988068]
[113.81308746 136.95314026]
[116.29820251 151.74584961]
[118.78332520 166.53855896]
[134.00440979 173.84407043]
[141.81565857 188.62466431]
[139.32629395 204.98831177]
[127.70812225 216.54354858]
[130.50044250 231.28135681]
[133.29277039 246.01914978]
[136.08509827 260.75695801]
[138.87742615 275.49478149]
[141.66975403 290.23257446]
[149.14950562 277.23052979]
[162.40251160 270.20501709]
[177.36160278 271.31210327]
[189.43601990 280.21203613]
[194.92027283 294.17352295]
[192.13131714 308.91195679]
[181.92504883 319.90432739]
[167.43363953 323.77719116]
[153.10432434 319.34204102]
[143.33424377 307.95919800]
[157.89271545 311.89443970]
[170.92630005 319.45825195]
[181.54956055 330.12982178]
[189.04260254 343.17745972]
[192.89985657 357.70877075]
[192.86418152 372.73168945]
[188.94404602 387.22213745]
[181.41242981 400.19390869]
[170.78796387 410.76580811]
[157.79910278 418.22143555]
[143.33424377 422.05776978]
[143.33424377 437.05776978]
[143.33424377 452.05776978]
[143.33424377 467.05776978]
[143.33424377 482.05776978]
[143.33424377 497.05776978]
[143.33424377 512.05780029]
[143.33424377 527.05780029]
[143.33424377 542.05780029]
[143.33424377 557.05780029]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[21 130]
[22 120]
[23 119]
[24 118]
[25 117]
[26 116]
[27 115]
[32 111]
[33 110]
[34 109]
[36 107]
[38 105]
[40 103]
[41 102]
[42 101]
[43 100]
[45 98]
[46 97]
[47 96]
[48 93]
[49 92]
[50 91]
[57 84]
[58 83]
[60 82]
[61 81]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
