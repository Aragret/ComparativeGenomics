%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:55 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCUCACUCUCACUGCCCAAGAACUAUCAAACUCCUGAGCCAACAACUUAAUAUGACUAGCUxxxxxxxxxxUAGUACUUGCCGCAGUACUCUUAAAACUAGGCGGCUAUGGUAUAAUACGCCUCACACUCACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[76.20674896 438.05813599]
[76.20674896 423.05813599]
[76.20674896 408.05813599]
[76.20674896 393.05813599]
[76.20674896 378.05813599]
[76.20674896 363.05813599]
[76.20674896 348.05813599]
[76.20674896 333.05813599]
[76.20674896 318.05813599]
[76.20674896 303.05813599]
[62.62906265 299.84613037]
[50.11065674 293.66714478]
[39.29095840 284.83288574]
[30.72350883 273.79074097]
[24.84765053 261.10119629]
[21.96599007 247.40933228]
[22.22881699 233.41212463]
[25.62626839 219.82283020]
[31.98865891 207.33474731]
[40.99494171 196.58580017]
[52.18891525 188.12594604]
[65.00232697 182.38909912]
[78.78372955 179.67079163]
[79.40770721 164.68377686]
[78.78372955 149.69676208]
[76.91611481 134.81347656]
[75.04850006 119.93019867]
[68.70137024 106.33924866]
[58.48789215 95.35358429]
[43.42474747 90.51496887]
[40.42539215 75.92547607]
[30.21191025 64.93981171]
[19.99843025 53.95415115]
[9.78495121 42.96848297]
[-2.10742855 33.82675171]
[-15.35001373 26.78161621]
[-28.59259987 19.73648071]
[-38.64611053 30.96992874]
[-51.09621811 39.47041321]
[-65.21909332 44.74372101]
[-80.19365692 46.48327255]
[-95.14929199 44.58793259]
[-109.21651459 39.16789246]
[-121.57746124 30.53826714]
[-131.51348877 19.20077133]
[-138.44692993 5.81455278]
[-141.97467041 -8.84213161]
[-141.89163208 -23.91716194]
[-138.20263672 -38.53409576]
[-131.12216187 -51.84312439]
[-121.06184387 -63.07047653]
[-108.60658264 -71.56340790]
[-94.48050690 -76.82815552]
[-79.50489807 -78.55862427]
[-64.55041504 -76.65422058]
[-50.48648453 -71.22565460]
[-38.13077164 -62.58853531]
[-28.20162010 -51.24501801]
[-21.27629662 -37.85459900]
[-17.75743294 -23.19577599]
[-17.84960747 -8.12079906]
[-21.54746437 6.49389505]
[-8.30487919 13.53903008]
[4.93770647 20.58416557]
[-2.45192885 7.53068686]
[-5.02612734 -7.24677944]
[-2.48558998 -22.03006935]
[4.87429762 -35.10034180]
[16.19780731 -44.93793106]
[30.16836548 -50.39902496]
[45.16162491 -50.84866333]
[59.43432999 -46.23457718]
[71.32701111 -37.09323502]
[79.45691681 -24.48749161]
[82.87877655 -9.88301277]
[81.19474792 5.02215624]
[74.60063171 18.49500084]
[63.86310959 28.96904755]
[50.23062897 35.22648621]
[35.28823090 36.53976822]
[20.77061653 32.75500488]
[30.98409653 43.74066925]
[41.19757462 54.72633362]
[51.41105652 65.71199799]
[65.74365997 69.76485443]
[69.47355652 85.14010620]
[79.68703461 96.12577057]
[93.19960785 82.55639648]
[109.99721527 86.54127502]
[123.38349915 79.77316284]
[136.76977539 73.00505066]
[150.15606689 66.23693085]
[163.54235840 59.46881866]
[176.78494263 52.42368317]
[189.87809753 45.10457993]
[202.97125244 37.78547287]
[203.81631470 22.38127136]
[212.87388611 9.89271450]
[227.25370789 4.30485392]
[242.36723328 7.40075588]
[253.39181519 18.19252968]
[256.80950928 33.23656082]
[251.52978516 47.73234940]
[239.23735046 57.05434799]
[223.85469055 58.22793579]
[210.29035950 50.87862778]
[197.19720459 58.19773483]
[184.10404968 65.51683807]
[181.95347595 69.84703064]
[177.02665710 72.83999634]
[170.31047058 72.85510254]
[156.92417908 79.62322235]
[143.53790283 86.39133453]
[130.15161133 93.15944672]
[116.76532745 99.92756653]
[113.93387604 111.50534821]
[103.58351135 119.04029083]
[89.93177795 118.06259155]
[91.79939270 132.94586182]
[93.66700745 147.82914734]
[102.49843597 135.70455933]
[116.71964264 130.93409729]
[131.07617188 135.28036499]
[140.26358032 147.13749695]
[140.88728333 162.12452698]
[132.71685791 174.70404053]
[118.77110291 180.22814941]
[104.20269775 176.65582275]
[94.39472198 165.30775452]
[93.77074432 180.29476929]
[109.19461060 184.97846985]
[122.88880920 193.46125793]
[133.93727112 205.16920471]
[141.60258484 219.31289673]
[145.37518311 234.94059753]
[145.00723267 251.00230408]
[140.52893066 266.42034912]
[132.24603271 280.16159058]
[120.71908569 291.30679321]
[106.72541809 299.11196899]
[91.20674896 303.05813599]
[91.20674896 318.05813599]
[91.20674896 333.05813599]
[91.20674896 348.05813599]
[91.20674896 363.05813599]
[91.20674896 378.05813599]
[91.20674896 393.05813599]
[91.20674896 408.05813599]
[91.20674896 423.05813599]
[91.20674896 438.05813599]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[23 130]
[24 129]
[25 120]
[26 119]
[27 118]
[28 87]
[29 86]
[31 84]
[32 83]
[33 82]
[34 81]
[35 64]
[36 63]
[37 62]
[89 115]
[90 114]
[91 113]
[92 112]
[93 111]
[94 108]
[95 107]
[96 106]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
