%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:47 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGUCGAUAAACCCCGAUCAACCUCACCACCUCUUGCUCAGCCUAUAUACCGCCAUCUUCAGCxxxxxxxxxxUUUGAGAAGCCUUCGCUUCGAAGCGAAAAGUCCUAAUAGUAGAAGAACCCUCCAUAAACCCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[94.89567566 591.12365723]
[94.89567566 576.12365723]
[94.89567566 561.12365723]
[94.89567566 546.12365723]
[94.89567566 531.12365723]
[94.89567566 516.12365723]
[94.89567566 501.12362671]
[94.89567566 486.12362671]
[94.89567566 471.12362671]
[94.89567566 456.12362671]
[80.20011139 453.22283936]
[66.34845734 447.50885010]
[53.87380219 439.19955444]
[43.25662613 428.61270142]
[34.90630722 416.15390015]
[29.14533997 402.30093384]
[26.19686508 387.58547974]
[26.17604065 372.57278442]
[29.08554077 357.83978271]
[34.81538010 343.95312500]
[43.14707184 331.44723511]
[53.76195526 320.80380249]
[66.25338745 312.43316650]
[80.14232635 306.65866089]
[94.89567566 303.70394897]
[94.89567566 288.70394897]
[79.82517242 285.58529663]
[65.72105408 279.41333008]
[53.19480896 270.45306396]
[42.79005814 259.09048462]
[34.95893097 245.81591797]
[30.04244995 231.20281982]
[28.25565529 215.88304138]
[29.67821312 200.51950073]
[34.25086594 185.77748108]
[41.77789307 172.29586792]
[51.93549347 160.65939331]
[64.28570557 151.37333679]
[78.29528809 144.84155273]
[93.35877228 141.34892273]
[93.04672241 126.35216522]
[92.73466492 111.35540771]
[89.78917694 96.64744568]
[84.30214691 82.68705750]
[78.81511688 68.72666931]
[69.27774811 76.54586792]
[54.91329575 78.93437958]
[38.53417969 73.80035400]
[26.83455467 64.41319275]
[12.24007702 69.41366577]
[-2.73556805 65.70778656]
[-13.31370735 54.47806931]
[-16.11889648 39.30788422]
[-10.25600719 25.03798294]
[2.40413213 16.22183800]
[17.82171822 15.67264843]
[31.07705307 23.56565857]
[37.94041061 37.38223648]
[36.22171783 52.71356583]
[47.92134094 62.10072708]
[54.64932251 58.78647995]
[68.10528564 52.15798187]
[74.83326721 48.84373093]
[74.52121735 33.84697723]
[74.20915985 18.85022354]
[70.88430023 10.27134609]
[74.04987335 3.53897929]
[74.04987335 -11.46102047]
[59.99268723 -17.24582100]
[49.22281647 -27.97327614]
[43.38258362 -42.00752640]
[43.36258698 -57.20844650]
[49.16587448 -71.25801086]
[59.90748978 -82.01376343]
[73.94940948 -87.83552551]
[89.15034485 -87.83552551]
[103.19226074 -82.01376343]
[113.93387604 -71.25801086]
[119.73715973 -57.20844650]
[119.71716309 -42.00752640]
[113.87693787 -27.97327614]
[103.10706329 -17.24582100]
[89.04987335 -11.46102047]
[89.04987335 3.53897929]
[89.20590973 18.53816795]
[89.51796722 33.53491974]
[89.83002472 48.53167343]
[92.77550507 63.23963547]
[98.26253510 77.20002747]
[103.74957275 91.16041565]
[105.17044830 88.16033936]
[106.65500641 85.18963623]
[119.26613617 77.06809998]
[131.87725830 68.94655609]
[144.48838806 60.82501221]
[157.09951782 52.70347214]
[169.71064758 44.58192825]
[176.72613525 29.75914001]
[193.09060669 28.69319534]
[201.96969604 42.48064423]
[194.22935486 56.93814468]
[177.83219910 57.19305801]
[165.22106934 65.31459808]
[152.60993958 73.43614197]
[139.99880981 81.55768585]
[127.38768005 89.67922211]
[114.77655029 97.80076599]
[107.73141479 111.04335022]
[108.04347229 126.04010773]
[108.35552979 141.03686523]
[122.75824738 143.66723633]
[136.36120605 149.06823730]
[148.63723755 157.02842712]
[159.11097717 167.23725891]
[167.37736511 179.29714966]
[173.11717224 192.73898315]
[176.10946655 207.04034424]
[176.24005127 221.64582825]
[173.50578308 235.98861694]
[168.01469421 249.51246643]
[159.98170471 261.69326782]
[149.72019958 272.05938721]
[137.62974548 280.20996094]
[124.18068695 285.83023071]
[109.89567566 288.70394897]
[109.89567566 303.70394897]
[124.64902496 306.65866089]
[138.53796387 312.43316650]
[151.02940369 320.80380249]
[161.64428711 331.44723511]
[169.97596741 343.95312500]
[175.70581055 357.83978271]
[178.61531067 372.57278442]
[178.59448242 387.58547974]
[175.64601135 402.30093384]
[169.88504028 416.15390015]
[161.53472900 428.61270142]
[150.91754150 439.19955444]
[138.44288635 447.50885010]
[124.59123993 453.22283936]
[109.89567566 456.12362671]
[109.89567566 471.12362671]
[109.89567566 486.12362671]
[109.89567566 501.12362671]
[109.89567566 516.12365723]
[109.89567566 531.12365723]
[109.89567566 546.12365723]
[109.89567566 561.12365723]
[109.89567566 576.12365723]
[109.89567566 591.12365723]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[25 126]
[26 125]
[40 110]
[41 109]
[42 108]
[43 90]
[44 89]
[45 88]
[48 60]
[49 59]
[63 87]
[64 86]
[65 85]
[67 84]
[68 83]
[92 107]
[93 106]
[94 105]
[95 104]
[96 103]
[97 102]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
