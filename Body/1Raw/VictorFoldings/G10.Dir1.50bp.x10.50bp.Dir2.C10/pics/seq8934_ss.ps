%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:46 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCACACUAACCAUAUACCAAUGAUGGCGCGAUGUAACACGAGAAAGCACAUACCAAGGCCAxxxxxxxxxxAUUUUGGUGCAACUCCAAAUAAAAGUAAUAACCAUGCACACUACUAUAACCACCCUAACCCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[102.67244720 562.29724121]
[102.67244720 547.29724121]
[102.67244720 532.29724121]
[102.67244720 517.29724121]
[102.67244720 502.29724121]
[102.67244720 487.29724121]
[102.67244720 472.29724121]
[102.67244720 457.29724121]
[102.67244720 442.29724121]
[102.67244720 427.29724121]
[87.63197327 423.70022583]
[73.87464905 416.61785889]
[62.19543076 406.45471191]
[53.27030563 393.79351807]
[47.61716080 379.36178589]
[45.56574631 363.98989868]
[47.23843002 348.56344604]
[52.54291534 333.97213745]
[61.17733002 321.05853271]
[72.64737701 310.56933594]
[86.29466248 303.11230469]
[101.33446503 299.12091064]
[101.02241516 284.12414551]
[100.71035767 269.12741089]
[100.39830017 254.13064575]
[87.28131104 247.07301331]
[79.40574646 234.31246948]
[78.97190857 219.22346497]
[86.19641113 205.85546875]
[99.22711945 197.84622192]
[98.91506195 182.84947205]
[98.13521576 167.86975098]
[96.88834381 152.92167664]
[95.64147186 137.97358704]
[94.39459229 123.02549744]
[77.30020905 106.80540466]
[82.65158844 83.85606384]
[75.46907806 70.68747711]
[64.10646057 74.90673065]
[49.54644394 70.62483978]
[36.45328903 63.30573273]
[23.36013412 55.98662949]
[10.26698017 48.66752243]
[-1.90281200 57.82263184]
[-16.74564362 61.23001480]
[-31.68990326 58.29932022]
[-44.14640808 49.53830338]
[-51.95699310 36.46487427]
[-53.76842880 21.34407234]
[-49.26687241 6.79567528]
[-39.23224640 -4.65972185]
[-25.40310669 -11.03740215]
[-10.17543793 -11.23239326]
[3.81247306 -5.21091318]
[14.13713741 5.98378181]
[19.00974464 20.41214180]
[17.58608627 35.57436752]
[30.67923927 42.89347458]
[43.77239609 50.21257782]
[56.86554718 57.53168488]
[69.64290619 49.67425919]
[69.01892853 34.68724442]
[68.39495087 19.70022583]
[67.77097321 4.71321058]
[67.14699554 -10.27380562]
[52.57254028 -14.32847977]
[39.96549225 -22.69014931]
[30.56096077 -34.53962326]
[25.28030968 -48.71600723]
[24.64088249 -63.83044815]
[28.70532036 -78.40218353]
[37.07543564 -91.00363159]
[48.93120575 -100.40021515]
[63.11112976 -105.67136383]
[78.22599792 -106.30066681]
[92.79500580 -102.22646332]
[105.39083862 -93.84790802]
[114.77947998 -81.98583984]
[120.04112244 -67.80239105]
[120.66030121 -52.68710709]
[116.57633209 -38.12083054]
[108.18933868 -25.53061676]
[96.32098389 -16.14992523]
[82.13401031 -10.89778328]
[82.75798798 4.08923340]
[83.38196564 19.07625008]
[84.00594330 34.06326675]
[84.62992096 49.05028152]
[88.63766479 63.50497055]
[95.82017517 76.67355347]
[105.61604309 76.97709656]
[114.45138550 81.21832275]
[126.89083099 72.83617401]
[139.33026123 64.45403290]
[138.89193726 49.03289795]
[146.88005066 35.83465195]
[160.74560547 29.07080650]
[176.06419373 30.89968300]
[187.94766235 40.73768997]
[192.60408020 55.44555664]
[188.54757690 70.33005524]
[177.07258606 80.64160156]
[161.84071350 83.08981323]
[147.71241760 76.89347076]
[135.27296448 85.27561951]
[122.83352661 93.65776062]
[123.68621063 99.25325775]
[123.18768311 104.89135742]
[121.36639404 110.25042725]
[118.32624054 115.02474976]
[114.24064636 118.94196320]
[109.34268188 121.77862549]
[110.58955383 136.72671509]
[111.83643341 151.67478943]
[113.08330536 166.62287903]
[116.14117432 171.01252747]
[117.07070160 175.66961670]
[116.13542175 179.72262573]
[113.91181946 182.53741455]
[114.22386932 197.53416443]
[127.57647705 204.99441528]
[135.35081482 218.05032349]
[135.54502869 233.14431763]
[128.20709229 246.22142029]
[115.39505005 253.81858826]
[115.70710754 268.81533813]
[116.01916504 283.81210327]
[116.33122253 298.80886841]
[130.58575439 301.84872437]
[143.79370117 307.99389648]
[155.28851318 316.93051147]
[164.49092102 328.20391846]
[170.93812561 341.24191284]
[174.30708313 355.38354492]
[174.43067932 369.91290283]
[171.30603027 384.09512329]
[165.09445190 397.21368408]
[156.11312866 408.60653687]
[144.81892395 417.69961548]
[131.78515625 424.03564453]
[117.67244720 427.29724121]
[117.67244720 442.29724121]
[117.67244720 457.29724121]
[117.67244720 472.29724121]
[117.67244720 487.29724121]
[117.67244720 502.29724121]
[117.67244720 517.29724121]
[117.67244720 532.29724121]
[117.67244720 547.29724121]
[117.67244720 562.29724121]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[22 128]
[23 127]
[24 126]
[25 125]
[30 120]
[31 119]
[32 115]
[33 114]
[34 113]
[35 112]
[37 90]
[38 89]
[40 60]
[41 59]
[42 58]
[43 57]
[61 88]
[62 87]
[63 86]
[64 85]
[65 84]
[92 106]
[93 105]
[94 104]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
