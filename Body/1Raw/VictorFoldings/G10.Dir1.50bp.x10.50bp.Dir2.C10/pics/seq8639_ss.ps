%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:37 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGAACCGCUAACAUUACUGCAGGCCACCUACUCAUGCACCUAAUUGGAAGCGCCACCCUAGCxxxxxxxxxxAUCUGACAACAGAGGCUUACGACCCCUUAUUUACCGAGAAAGCUCACAAGAACUGCUAACCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[93.53379822 256.49298096]
[93.53379822 241.49296570]
[93.53379822 226.49296570]
[93.53379822 211.49296570]
[93.53379822 196.49296570]
[93.53379822 181.49296570]
[93.53379822 166.49296570]
[93.53379822 151.49296570]
[93.53379822 136.49296570]
[93.53379822 121.49296570]
[88.88499451 117.76164246]
[85.69056702 113.18977356]
[84.04302216 108.26235199]
[83.88753510 103.44858551]
[68.89484406 103.91662598]
[53.90214539 104.38466644]
[38.90944672 104.85271454]
[28.12168503 116.08934021]
[12.91029167 116.35042572]
[2.26436090 105.99669647]
[-12.72833538 106.46473694]
[-27.71535110 107.08871460]
[-42.69506454 107.86856079]
[-57.67478180 108.64840698]
[-72.84456635 119.03385162]
[-88.16674042 110.53496552]
[-103.12699127 111.62628174]
[-118.08723450 112.71759033]
[-133.04748535 113.80889893]
[-146.24816895 122.52971649]
[-159.50462341 115.73887634]
[-166.78848267 129.33847046]
[-180.27964783 136.82127380]
[-195.67312622 135.79951477]
[-208.05694580 126.59925842]
[-213.47946167 112.15627289]
[-210.21035767 97.07925415]
[-199.29280090 86.17922211]
[-184.21055603 82.93434906]
[-169.77629089 88.38005066]
[-160.59594727 100.77863312]
[-148.46531677 92.13587189]
[-134.13879395 98.84865570]
[-119.17855072 97.75733948]
[-104.21829987 96.66603088]
[-89.25804901 95.57472229]
[-81.07920074 86.60735321]
[-68.58015442 85.61093140]
[-58.45462418 93.66869354]
[-43.47491074 92.88884735]
[-28.49519539 92.10900116]
[-21.93651199 88.59769440]
[-13.19637680 91.47204590]
[1.79631889 91.00399780]
[11.77570343 80.00638580]
[26.97376251 79.31815338]
[38.44140625 89.86001587]
[53.43410110 89.39197540]
[68.42679596 88.92392731]
[83.41949463 88.45588684]
[94.29831696 78.12868500]
[85.45997620 90.24823761]
[73.61399841 99.45002747]
[59.68486786 105.01593018]
[44.75961685 106.51158142]
[30.00303268 103.82025909]
[16.56672859 97.15200043]
[5.49928331 87.02719879]
[-2.33558822 74.23600006]
[-6.32644653 59.77663803]
[-6.16184187 44.77754211]
[-1.85461974 30.40924835]
[6.25908041 17.79307365]
[17.54605865 7.91359329]
[31.12546921 1.54181147]
[45.93756485 -0.82501334]
[60.82639313 0.99782830]
[74.63002014 6.86808014]
[86.27120209 16.32762337]
[94.84144592 28.63822556]
[99.67192078 42.83915710]
[100.38540649 57.82486343]
[107.56791687 44.65628052]
[114.75042725 31.48769951]
[121.93293762 18.31911659]
[120.99420929 1.94685924]
[134.85025024 -6.82480240]
[149.24716187 1.02766550]
[149.37461853 17.42631721]
[135.10151672 25.50162697]
[127.91900635 38.67020798]
[120.73650360 51.83879089]
[113.55399323 65.00737762]
[109.24640656 79.37555695]
[120.33772278 89.47420502]
[135.10377502 86.83534241]
[149.86982727 84.19647980]
[164.63589478 81.55761719]
[166.07594299 66.53001404]
[171.51806641 52.44861221]
[180.55842590 40.35834503]
[192.52615356 31.15639305]
[206.53318787 25.52559853]
[221.54008484 23.88380623]
[236.43324280 26.35284615]
[250.10751343 32.74950027]
[261.54815674 42.59909439]
[269.90618896 55.17072296]
[274.56140137 69.53148651]
[275.16833496 84.61572266]
[271.68197632 99.30407715]
[264.36102295 112.50658417]
[253.74873352 123.24353027]
[240.63261414 130.71815491]
[225.98596191 134.37579346]
[210.89567566 133.94502258]
[196.48152161 129.45780945]
[183.81315613 121.24714661]
[173.83064270 109.92230225]
[167.27474976 96.32366943]
[152.50869751 98.96253204]
[137.74264526 101.60140228]
[122.97658539 104.24026489]
[137.20016479 109.00366211]
[151.42373657 113.76706696]
[166.31742859 111.98443604]
[180.85818481 115.66768646]
[193.10720825 124.32570648]
[201.43128967 136.80407715]
[204.72050476 151.43901062]
[202.53631592 166.27912903]
[195.16993713 179.34574890]
[183.60356140 188.89660645]
[169.37940979 193.65826416]
[154.39404297 192.99581909]
[140.64555359 186.99757385]
[129.96707153 176.46333313]
[123.78244019 162.79766846]
[122.91656494 147.82044983]
[115.72518158 134.65670776]
[108.53379822 121.49296570]
[108.53379822 136.49296570]
[108.53379822 151.49296570]
[108.53379822 166.49296570]
[108.53379822 181.49296570]
[108.53379822 196.49296570]
[108.53379822 211.49296570]
[108.53379822 226.49296570]
[108.53379822 241.49296570]
[108.53379822 256.49298096]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[14 60]
[15 59]
[16 58]
[17 57]
[20 54]
[21 53]
[22 51]
[23 50]
[24 49]
[26 46]
[27 45]
[28 44]
[29 43]
[31 41]
[61 94]
[82 93]
[83 92]
[84 91]
[85 90]
[95 123]
[96 122]
[97 121]
[98 120]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
