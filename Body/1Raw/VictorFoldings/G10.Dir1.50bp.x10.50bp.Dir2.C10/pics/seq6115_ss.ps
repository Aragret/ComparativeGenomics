%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:00 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGAAACACUUAGUUAACAGCUAAGCACCCUAAUCAACUGGCUUCAAUCUACUUCUCCCGCCGxxxxxxxxxxUAGGCGGCUAUGGUAUAAUACGCCUCACACUCAUUCUCAACCCCCUGACAAAACACAUAGCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[81.10960388 264.84600830]
[81.10960388 249.84599304]
[81.10960388 234.84599304]
[81.10960388 219.84599304]
[81.10960388 204.84599304]
[81.10960388 189.84599304]
[81.10960388 174.84599304]
[81.10960388 159.84599304]
[81.10960388 144.84599304]
[81.10960388 129.84599304]
[74.52531433 126.25474548]
[71.76347351 140.99829102]
[56.88804245 142.92744446]
[50.45671844 129.37612915]
[61.35673141 119.07223511]
[54.77243805 115.48097992]
[42.16131210 123.60252380]
[29.55018234 131.72406006]
[16.93905449 139.84561157]
[4.32792568 147.96714783]
[-8.28320217 156.08868408]
[-13.07020664 171.40090942]
[-28.07795906 177.07073975]
[-41.79379654 168.74876404]
[-43.69610596 152.81889343]
[-32.32559204 141.50115967]
[-16.40474510 143.47756958]
[-3.79361629 135.35601807]
[8.81751156 127.23447418]
[21.42864037 119.11293793]
[34.03976822 110.99139404]
[46.65089798 102.86985016]
[31.68991470 103.95108032]
[18.65399361 96.53051758]
[8.94725513 85.09464264]
[3.74340510 71.02623749]
[3.67167473 56.02641296]
[8.74073696 41.90888214]
[18.33765984 30.38069725]
[31.30201530 22.83580017]
[46.06620026 20.18649483]
[60.84498596 22.75312614]
[73.85136414 30.22534752]
[83.51265717 41.69964218]
[88.66065216 55.78857803]
[88.67284393 70.78876495]
[95.86422729 83.95249939]
[95.86422729 68.95249939]
[95.86422729 53.95249939]
[81.45843506 51.19155502]
[67.81420898 45.81908035]
[55.40041733 38.02132797]
[44.64333725 28.06787300]
[35.91202545 16.30228043]
[29.50565338 3.13025141]
[25.64326286 -10.99436665]
[24.45626068 -25.58521843]
[25.98396873 -40.14018631]
[30.17230606 -54.15866852]
[36.87571335 -67.15880585]
[45.86220169 -78.69402313]
[56.82139587 -88.36840057]
[69.37523651 -95.85023499]
[83.09102631 -100.88342285]
[97.49636078 -103.29624176]
[97.80841827 -118.29299927]
[98.12046814 -133.28974915]
[98.43252563 -148.28649902]
[98.74458313 -163.28326416]
[84.94623566 -169.72729492]
[74.96675110 -181.23075867]
[70.53513336 -195.80061340]
[72.41918182 -210.91253662]
[80.29247284 -223.94830322]
[92.79091644 -232.64938354]
[107.74908447 -235.50825500]
[122.57537842 -232.02961731]
[134.70104980 -222.81614685]
[142.02526855 -209.46415710]
[143.27903748 -194.28694153]
[138.24517822 -179.91404724]
[127.79579926 -168.83566284]
[113.74134064 -162.97120667]
[113.42928314 -147.97444153]
[113.11722565 -132.97769165]
[112.80516815 -117.98094177]
[112.49311066 -102.98418427]
[127.50752258 -99.74710083]
[141.61219788 -93.65513611]
[154.26980591 -84.93841553]
[164.99775696 -73.92707825]
[173.38664246 -61.03879547]
[179.11578369 -46.76292038]
[181.96556091 -31.64190483]
[181.82577515 -16.25069237]
[178.69995117 -1.17485404]
[172.70524597 13.01168537]
[164.06806946 25.76850128]
[153.11553955 36.60925293]
[140.26306152 45.12022781]
[125.99861908 50.97612762]
[110.86422729 53.95249939]
[110.86422729 68.95249939]
[110.86422729 83.95249939]
[120.72994995 95.25150299]
[135.59298706 97.27384186]
[150.45603943 99.29617310]
[157.01147461 85.66233826]
[167.46061707 74.72293854]
[180.77976990 67.54969025]
[195.66404724 64.84536743]
[210.65525818 66.87490845]
[224.28469849 73.43948364]
[235.21710205 83.89595032]
[242.38140869 97.21990967]
[245.07575989 112.10599518]
[243.03617859 127.09583282]
[236.46247864 140.72087097]
[225.99867249 151.64627075]
[212.66992188 158.80165100]
[197.78202820 161.48602295]
[182.79356384 159.43640137]
[169.17294312 152.85356140]
[158.25456238 142.38244629]
[151.10810852 129.04890442]
[148.43370056 114.15921783]
[133.57066345 112.13688660]
[118.70761108 110.11454773]
[113.05811310 115.04740906]
[125.13210297 123.94789886]
[137.20610046 132.84838867]
[151.42053223 137.63899231]
[159.21139526 150.45704651]
[156.91862488 165.28079224]
[145.61935425 175.14620972]
[130.62182617 175.41864014]
[118.97170258 165.97012329]
[116.14186859 151.24061584]
[108.95048523 138.07687378]
[101.75910950 124.91313934]
[96.10960388 129.84599304]
[96.10960388 144.84599304]
[96.10960388 159.84599304]
[96.10960388 174.84599304]
[96.10960388 189.84599304]
[96.10960388 204.84599304]
[96.10960388 219.84599304]
[96.10960388 234.84599304]
[96.10960388 249.84599304]
[96.10960388 264.84600830]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[16 32]
[17 31]
[18 30]
[19 29]
[20 28]
[21 27]
[47 104]
[48 103]
[49 102]
[65 87]
[66 86]
[67 85]
[68 84]
[69 83]
[105 128]
[106 127]
[107 126]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
