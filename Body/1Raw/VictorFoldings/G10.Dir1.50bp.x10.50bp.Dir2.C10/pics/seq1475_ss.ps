%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:37 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGGAGCCACAGCUUAAAACUCAAAGGACCUGGCGGUGCUUCAUAUCCCUCUAGAGGAGCCUGxxxxxxxxxxAACAAUAUUCAUGUGCCUAGACCAAGAAGUUAUUAUCUCGAACUGACACUGAGCCACAACCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[112.00716400 282.48950195]
[114.59816742 263.28179932]
[114.91021729 248.28503418]
[115.22227478 233.28828430]
[115.53433228 218.29151917]
[115.84638977 203.29476929]
[116.15844727 188.29801941]
[116.47050476 173.30126953]
[116.78255463 158.30450439]
[117.09461212 143.30775452]
[117.40666962 128.31100464]
[111.10110474 124.25022888]
[92.18441772 112.06791687]
[78.66022491 118.55608368]
[65.13603210 125.04425049]
[51.61184311 131.53240967]
[48.81177521 148.18208313]
[36.77558517 159.78431702]
[20.36312294 161.92837524]
[6.04021835 153.96850586]
[-7.34606647 160.73661804]
[-20.73235130 167.50473022]
[-23.07453918 182.84402466]
[-34.00952911 193.85336304]
[-49.33259583 196.29943848]
[-63.15170288 189.24168396]
[-70.15312958 175.39395142]
[-67.64467621 160.08097839]
[-56.59089661 149.19090271]
[-41.24219894 146.91119385]
[-27.50046539 154.11843872]
[-14.11418152 147.35032654]
[-0.72789651 140.58221436]
[0.17939106 127.22658539]
[7.64099026 115.98220825]
[19.78835678 109.85913849]
[33.48221588 110.56003571]
[45.12368011 118.00822449]
[58.64786911 111.52005768]
[72.17205811 105.03189087]
[85.69625092 98.54372406]
[96.24753571 87.88210297]
[102.59466553 74.29115295]
[108.94179535 60.70019913]
[115.28892517 47.10924911]
[115.09446716 40.39585114]
[117.93224335 35.37805176]
[122.19322205 33.09341431]
[129.10021973 19.77825928]
[136.00721741 6.46310282]
[131.46279907 -8.43609428]
[138.65716553 -21.84116173]
[152.88928223 -26.08174706]
[159.79627991 -39.39690399]
[152.67803955 -55.92267990]
[158.33283997 -72.71957397]
[173.52543640 -81.30945587]
[175.70227051 -96.15066528]
[177.87910461 -110.99186707]
[180.05593872 -125.83307648]
[182.23277283 -140.67428589]
[180.41709900 -144.78096008]
[180.07855225 -148.83761597]
[181.01240540 -152.37452698]
[182.87931824 -155.04072571]
[185.25741577 -156.63822937]
[188.66038513 -171.24711609]
[177.72317505 -160.98178101]
[163.72822571 -155.58348083]
[148.73051453 -155.84489441]
[134.93218994 -161.72761536]
[124.35935974 -172.36787415]
[118.56446075 -186.20330811]
[118.39839935 -201.20239258]
[123.88554382 -215.16273499]
[134.22021484 -226.03446960]
[147.88488770 -232.22126770]
[162.87315369 -232.81466675]
[176.98417664 -227.72755432]
[188.14599609 -217.70687866]
[194.71966553 -204.22404480]
[195.74000549 -189.25944519]
[203.19491577 -202.27575684]
[210.64982605 -215.29206848]
[205.08110046 -229.90449524]
[210.25669861 -244.66075134]
[223.73287964 -252.59338379]
[239.14659119 -249.95683289]
[249.21995544 -237.99600220]
[249.19664001 -222.35844421]
[239.08764648 -210.42771912]
[223.66613770 -207.83715820]
[216.21122742 -194.82084656]
[208.75631714 -181.80453491]
[203.26928711 -167.84414673]
[199.86630249 -153.23524475]
[197.07397461 -138.49743652]
[194.89714050 -123.65623474]
[192.72030640 -108.81503296]
[190.54347229 -93.97382355]
[188.36663818 -79.13262177]
[192.08891296 -76.84613800]
[195.33982849 -73.92810822]
[198.01359558 -70.47351074]
[200.02322388 -66.59474945]
[214.98345947 -67.68605804]
[229.94371033 -68.77736664]
[238.01220703 -82.03176880]
[252.34342957 -87.98118591]
[267.42675781 -84.33794403]
[277.46231079 -72.50295258]
[278.59124756 -57.02699661]
[270.37945557 -43.86090469]
[255.98451233 -38.06730270]
[240.94160461 -41.87395477]
[231.03501892 -53.81711960]
[216.07478333 -52.72581100]
[201.11453247 -51.63449860]
[191.08833313 -36.64502716]
[173.11143494 -32.48990250]
[166.20443726 -19.17474747]
[170.93464661 -5.09779453]
[164.11964417 8.50405979]
[149.32237244 13.37010193]
[142.41537476 26.68525696]
[135.50837708 40.00041199]
[128.87988281 53.45637894]
[122.53275299 67.04733276]
[116.18562317 80.63828278]
[109.83849335 94.22923279]
[121.92446899 85.34502411]
[134.74555969 77.55915070]
[149.68327332 76.19364166]
[163.70352173 81.52584839]
[173.95857239 92.47271729]
[178.36546326 106.81075287]
[176.02905273 121.62767792]
[167.42393494 133.91392517]
[154.29794312 141.17396545]
[139.31939697 141.93354797]
[132.40342712 128.62306213]
[132.09136963 143.61981201]
[131.77931213 158.61656189]
[131.46725464 173.61331177]
[131.15519714 188.61007690]
[130.84313965 203.60682678]
[130.53108215 218.60357666]
[130.21902466 233.60032654]
[129.90696716 248.59709167]
[129.59492493 263.59384155]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 150]
[3 149]
[4 148]
[5 147]
[6 146]
[7 145]
[8 144]
[9 143]
[10 142]
[11 141]
[13 41]
[14 40]
[15 39]
[16 38]
[20 33]
[21 32]
[22 31]
[42 130]
[43 129]
[44 128]
[45 127]
[48 126]
[49 125]
[50 124]
[53 121]
[54 120]
[57 101]
[58 100]
[59 99]
[60 98]
[61 97]
[66 96]
[67 95]
[82 94]
[83 93]
[84 92]
[105 118]
[106 117]
[107 116]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
