%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:00 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGACAUAAAAACCCAAUCCACAUCAAAACCCCCUCCCCAUGCUUACAAGCAAGUACAGCAAUCAxxxxxxxxxxGUACGGUACCAUAAAUACUUGACCACCUGUAGUACAUAAAAACCCAAUCCACAUCAAAACCCCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[96.82621002 112.24245453]
[84.60222626 120.93579865]
[72.37824249 129.62915039]
[60.15426254 138.32249451]
[47.93028259 147.01583862]
[35.70630264 155.70918274]
[23.48232079 164.40254211]
[11.25834084 173.09588623]
[-0.96564049 181.78923035]
[-13.18962193 190.48257446]
[-7.40320969 204.39175415]
[-4.85747194 219.23988342]
[-5.68010139 234.28219604]
[-9.82983589 248.76416016]
[-17.09852600 261.95938110]
[-27.12157631 273.20599365]
[-39.39623642 281.93984985]
[-53.30681610 287.72290039]
[-68.15556335 290.26504517]
[-83.19766998 289.43875122]
[-97.67863464 285.28552246]
[-110.87209320 278.01364136]
[-122.11627197 267.98785400]
[-130.84716797 255.71109009]
[-136.62683105 241.79910278]
[-139.16537476 226.94973755]
[-138.33546448 211.90783691]
[-134.17871094 197.42788696]
[-126.90362549 184.23617554]
[-116.87512207 172.99443054]
[-104.59622955 164.26651001]
[-90.68285370 158.49021912]
[-75.83287811 155.95527649]
[-60.79117203 156.78883362]
[-46.31222153 160.94909668]
[-33.12228775 168.22737122]
[-21.88296890 178.25859070]
[-9.65898800 169.56524658]
[2.56499314 160.87190247]
[14.78897381 152.17855835]
[27.01295471 143.48521423]
[39.23693466 134.79185486]
[51.46091843 126.09851074]
[63.68489838 117.40516663]
[75.90888214 108.71181488]
[88.13285828 100.01847076]
[83.04717255 97.57694244]
[78.52291870 93.69626617]
[67.86270905 83.14353943]
[57.20249939 72.59082031]
[46.54228973 62.03810120]
[35.77568436 51.59395218]
[24.90379333 41.25944901]
[14.03190041 30.92494392]
[-1.75898015 31.57581139]
[-13.32829571 20.80889511]
[-13.81217575 5.01201582]
[-2.92354393 -6.44281864]
[12.87756824 -6.75965786]
[24.21664238 4.24947309]
[24.36640549 20.05305290]
[35.23829651 30.38755608]
[46.11018753 40.72206116]
[53.16648483 43.06477356]
[57.09500885 51.37789154]
[67.75521851 61.93061066]
[78.41542816 72.48332977]
[89.07563782 83.03605652]
[84.77967072 68.66439056]
[80.48369598 54.29273224]
[76.18772888 39.92107010]
[65.84905243 29.05314445]
[58.13570023 16.18830299]
[53.42064667 1.94863141]
[51.93189240 -12.97730637]
[53.74142456 -27.86775970]
[58.76174927 -42.00269318]
[66.75009918 -54.69860840]
[77.32019806 -65.34158325]
[89.96092987 -73.41698456]
[104.06103516 -78.53430939]
[118.93870544 -80.44611359]
[133.87451172 -79.05994415]
[148.14625549 -74.44284821]
[161.06378174 -66.81806183]
[172.00248718 -56.55430603]
[180.43342590 -44.14788055]
[185.94889832 -30.19870377]
[188.28221130 -15.38129330]
[187.32052612 -0.41215280]
[183.11036682 13.98487949]
[175.85531616 27.11362839]
[165.90615845 38.33924866]
[153.74403381 47.11891937]
[139.96115112 53.02684402]
[130.34579468 64.53964996]
[120.73042297 76.05245972]
[111.11505890 87.56526947]
[125.07287598 82.07167816]
[139.03068542 76.57809448]
[152.98849487 71.08450317]
[157.46081543 66.08672333]
[162.96453857 64.39715576]
[167.62493896 65.66375732]
[181.79391479 60.74032974]
[190.05207825 46.98598099]
[205.97294617 45.00969315]
[217.34336853 56.32750702]
[215.44094849 72.25736237]
[201.72505188 80.57923889]
[186.71734619 74.90930939]
[172.54837036 79.83273315]
[158.48208618 85.04231262]
[144.52427673 90.53590393]
[130.56646729 96.02949524]
[116.60865021 101.52307892]
[130.90643311 96.98727417]
[145.72474670 94.65968323]
[160.72459412 94.59354401]
[175.56285095 96.79038239]
[189.90007019 101.19993591]
[203.40826416 107.72133636]
[215.77842712 116.20539856]
[226.72755432 126.45802307]
[236.00518799 138.24468994]
[243.39909363 151.29574585]
[248.74011230 165.31265259]
[251.90608215 179.97473145]
[252.82455444 194.94659424]
[251.47451782 209.88571167]
[247.88688660 224.45036316]
[242.14369202 238.30732727]
[234.37634277 251.13964844]
[224.76252747 262.65374756]
[213.52215576 272.58624268]
[200.91238403 280.70986938]
[187.22166443 286.83883667]
[172.76319885 290.83294678]
[157.86773682 292.60076904]
[142.87603760 292.10192871]
[128.13105774 289.34777832]
[113.97008514 284.40136719]
[100.71708679 277.37585449]
[88.67523956 268.43191528]
[78.12002563 257.77416992]
[69.29289246 245.64645386]
[62.39577484 232.32617188]
[57.58646393 218.11805725]
[54.97496796 203.34713745]
[54.62103271 188.35131836]
[56.53275681 173.47363281]
[60.66640091 159.05444336]
[66.92741394 145.42361450]
[75.17255402 132.89294434]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 46]
[2 45]
[3 44]
[4 43]
[5 42]
[6 41]
[7 40]
[8 39]
[9 38]
[10 37]
[48 68]
[49 67]
[50 66]
[51 65]
[52 63]
[53 62]
[54 61]
[98 116]
[99 115]
[100 114]
[101 113]
[104 112]
[105 111]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
