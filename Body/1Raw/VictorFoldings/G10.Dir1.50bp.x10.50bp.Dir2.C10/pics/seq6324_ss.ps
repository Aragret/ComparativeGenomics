%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:38 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCACAUCUACAACGUUAUCGUCACAGCCCAUGCAUUUGUAAUAAUCUUCUUCAUAGUAAUAxxxxxxxxxxGGCUUUCGCUCUAAGAUUAAAAAUGCCCUAGCCCACUUCUUACCACAAGGCACACCUACACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[84.02040863 266.43402100]
[84.02040863 251.43402100]
[84.02040863 236.43402100]
[84.02040863 221.43402100]
[84.02040863 206.43402100]
[84.02040863 191.43402100]
[84.02040863 176.43402100]
[84.02040863 161.43402100]
[84.02040863 146.43402100]
[84.02040863 131.43402100]
[77.55138397 127.63907623]
[74.33100891 142.28930664]
[59.40265656 143.75369263]
[53.39685440 130.00849915]
[64.61332703 120.04916382]
[58.14429855 116.25421143]
[45.05114365 123.57331848]
[43.09810638 138.85375977]
[32.64414215 149.92480469]
[17.85066223 152.68467712]
[4.42938185 146.28097534]
[-8.66377258 153.60008240]
[-21.75692749 160.91918945]
[-29.68332481 175.27552795]
[-46.08241272 175.31866455]
[-54.08422089 161.00422668]
[-45.45716858 147.05767822]
[-29.07603264 147.82603455]
[-15.98287868 140.50692749]
[-2.88972402 133.18783569]
[-1.31409228 118.40082550]
[8.78607655 107.24508667]
[23.69273949 104.13948059]
[37.73204041 110.48016357]
[50.82519150 103.16105652]
[57.96494675 90.59364319]
[67.72057343 82.17707825]
[78.38663483 78.23779297]
[88.31962585 78.49803925]
[96.13318634 82.14590454]
[100.85667419 87.96407318]
[99.60980225 73.01598358]
[98.36292267 58.06789780]
[97.11605072 43.11981201]
[95.86917877 28.17172432]
[94.62229919 13.22363853]
[85.76464081 0.11438936]
[92.41720581 -13.21199799]
[89.35933685 -17.60164833]
[88.42980957 -22.25872421]
[89.36508942 -26.31173897]
[91.58869934 -29.12653160]
[91.27664185 -44.12328339]
[90.96458435 -59.12003708]
[90.65252686 -74.11679077]
[90.34046936 -89.11354828]
[90.02841187 -104.11029816]
[75.15771484 -106.33973694]
[60.87775040 -111.05042267]
[47.59938049 -118.10682678]
[35.70464706 -127.30592346]
[25.53578949 -138.38302612]
[17.38538551 -151.01943970]
[11.48793602 -164.85157776]
[8.01312447 -179.48147583]
[7.06092787 -194.48818970]
[8.65874290 -209.43994141]
[12.76059723 -223.90655518]
[19.24847221 -237.47178650]
[27.93569756 -249.74533081]
[38.57232666 -260.37408447]
[50.85232162 -269.05218506]
[64.42236328 -275.52999878]
[78.89201355 -279.62112427]
[93.84494781 -281.20785522]
[108.85094452 -280.24450684]
[123.47825623 -276.75885010]
[137.30601501 -270.85113525]
[149.93638611 -262.69137573]
[161.00593567 -252.51429749]
[170.19621277 -240.61273193]
[177.24276733 -227.32913208]
[181.94285583 -213.04568481]
[184.16125488 -198.17332458]
[183.83413696 -183.13999939]
[180.97091675 -168.37823486]
[175.65397644 -154.31272888]
[168.03627014 -141.34822083]
[158.33700562 -129.85768127]
[146.83523560 -120.17175293]
[133.86190796 -112.56909180]
[119.79025269 -107.26846313]
[105.02516937 -104.42235565]
[105.33722687 -89.42559814]
[105.64928436 -74.42884827]
[105.96133423 -59.43209457]
[106.27339172 -44.43534088]
[106.58544922 -29.43858719]
[107.36529541 -14.45887280]
[116.13377380 -2.41881084]
[109.57038879 11.97676373]
[110.81726074 26.92485046]
[112.06414032 41.87293625]
[113.31101227 56.82102585]
[114.55788422 71.76911163]
[115.80476379 86.71720123]
[125.67048645 98.01620483]
[140.31398010 101.26702881]
[154.95748901 104.51785278]
[162.62355042 91.47612762]
[173.94586182 81.44316864]
[187.81520081 75.40190125]
[202.87275696 73.94419098]
[217.64337158 77.21285248]
[230.67996216 84.88765717]
[240.70533752 96.21669006]
[246.73730469 110.09006500]
[248.18492126 125.14860535]
[244.90637207 139.91702271]
[237.22283936 152.94847107]
[225.88708496 162.96624756]
[212.00965881 168.98892212]
[196.95016479 170.42645264]
[182.18394470 167.13800049]
[169.15765381 159.44572449]
[159.14746094 148.10327148]
[153.13409424 134.22181702]
[151.70666504 119.16135406]
[137.06315613 115.91053009]
[122.41965485 112.65970612]
[116.56984711 117.35328674]
[127.86219788 127.22662354]
[139.15455627 137.09996033]
[151.24618530 145.97647095]
[151.56809998 160.97300720]
[139.86851501 170.36022949]
[125.29812622 166.79600525]
[119.25299072 153.06791687]
[112.06160736 139.90419006]
[104.87022400 126.74044800]
[99.02040863 131.43402100]
[99.02040863 146.43402100]
[99.02040863 161.43402100]
[99.02040863 176.43402100]
[99.02040863 191.43402100]
[99.02040863 206.43402100]
[99.02040863 221.43402100]
[99.02040863 236.43402100]
[99.02040863 251.43402100]
[99.02040863 266.43402100]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[16 35]
[17 34]
[21 30]
[22 29]
[23 28]
[41 106]
[42 105]
[43 104]
[44 103]
[45 102]
[46 101]
[48 99]
[52 98]
[53 97]
[54 96]
[55 95]
[56 94]
[57 93]
[107 130]
[108 129]
[109 128]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
