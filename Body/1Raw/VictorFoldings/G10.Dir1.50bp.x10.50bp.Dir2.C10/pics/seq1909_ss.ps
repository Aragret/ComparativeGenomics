%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:54 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCCACUCCACCUUACUACCAGACAACCUUAGCCAAACCAUUUACCCAAAUAAAGUAUAGGCxxxxxxxxxxUUUAUUACCUCAGAAGUUUUUUUCUUCGCAGGAUUUUUCUGAGCCUUUUACCACUCCAGCCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[112.49331665 260.25604248]
[112.49331665 245.25604248]
[112.49331665 230.25604248]
[112.49331665 215.25604248]
[112.49331665 200.25604248]
[112.49331665 185.25604248]
[112.49331665 170.25604248]
[112.49331665 155.25604248]
[112.49331665 140.25604248]
[112.49331665 125.25604248]
[97.08508301 125.95713806]
[84.81245422 118.66516876]
[79.08688354 106.85078430]
[64.09419250 106.38274384]
[49.10149384 105.91470337]
[46.67834473 120.73979950]
[42.34080887 135.12174988]
[36.16310501 148.81449890]
[28.25094032 161.58369446]
[18.73970413 173.21087646]
[7.79214382 183.49708557]
[-4.40441179 192.26629639]
[-17.64126396 199.36845398]
[-31.69191360 204.68205261]
[-46.31593323 208.11614990]
[-61.26308823 209.61199951]
[-76.27761841 209.14399719]
[-91.10259247 206.72013855]
[-105.48434448 202.38191223]
[-119.17678833 196.20356750]
[-131.94561768 188.29078674]
[-143.57234192 178.77899170]
[-153.85803223 167.83094788]
[-162.62666321 155.63397217]
[-169.72819519 142.39678955]
[-175.04112244 128.34588623]
[-178.47451782 113.72170258]
[-179.96965027 98.77447510]
[-179.50093079 83.75997162]
[-177.07637024 68.93510437]
[-172.73747253 54.55355835]
[-166.55845642 40.86141205]
[-158.64508057 28.09295845]
[-149.13273621 16.46668053]
[-138.18420410 6.18152142]
[-125.98680878 -2.58652759]
[-112.74928284 -9.68743324]
[-98.69812775 -14.99969006]
[-84.07377625 -18.43239784]
[-69.12648010 -19.92681885]
[-54.11199951 -19.45738029]
[-39.28725052 -17.03211784]
[-24.90591049 -12.69252777]
[-11.21405888 -6.51286793]
[1.55401897 1.40111995]
[13.17984390 10.91401768]
[23.46448135 21.86304665]
[32.23194885 34.06085205]
[39.33222580 47.29872131]
[44.64381409 61.35012817]
[48.07582474 75.97463989]
[49.56953430 90.92200470]
[64.56223297 91.39005280]
[79.55492401 91.85809326]
[91.74540710 77.39663696]
[112.32798004 76.97196198]
[127.38548279 93.36781311]
[138.88728333 83.73928833]
[150.38908386 74.11076355]
[161.89089966 64.48223114]
[147.05339050 66.68412781]
[132.21365356 64.49726105]
[118.64205933 58.10884094]
[107.50041199 48.06575394]
[99.74248505 35.22774124]
[96.03240204 20.69380569]
[96.68776703 5.70812893]
[101.65247345 -8.44643402]
[110.50152588 -20.55817604]
[122.47739410 -29.59026909]
[136.55487061 -34.76951599]
[151.52885437 -35.65254593]
[166.11749268 -32.16376495]
[179.07192993 -24.60183525]
[189.28317261 -13.61409664]
[195.87710571 -0.14115798]
[198.28924561 14.66362476]
[196.31309509 29.53288269]
[190.11782837 43.19372940]
[180.23118591 54.47893143]
[194.55378723 50.02211761]
[208.87638855 45.56529999]
[223.19897461 41.10848618]
[237.52157593 36.65166855]
[251.84417725 32.19485474]
[251.40197754 17.10488892]
[255.04850769 2.45547414]
[262.51318359 -10.66630554]
[273.24209595 -21.28672791]
[286.43902588 -28.61768723]
[301.12475586 -32.11517715]
[316.20944214 -31.51966286]
[330.57373047 -26.87533188]
[343.15170288 -18.52682495]
[353.00994873 -7.09365988]
[359.41696167 6.57574940]
[361.89727783 21.46704102]
[360.26687622 36.47518158]
[354.64669800 50.48646927]
[345.45379639 62.46117401]
[333.37039185 71.51068878]
[319.29312134 76.96348572]
[304.26663208 78.41492462]
[289.40594482 75.75730133]
[275.81387329 69.18782806]
[264.49899292 59.19401169]
[256.30099487 46.51745224]
[241.97839355 50.97426605]
[227.65579224 55.43107986]
[213.33319092 59.88789749]
[199.01060486 64.34471130]
[184.68800354 68.80152893]
[171.51942444 75.98403931]
[160.01762390 85.61256409]
[148.51580811 95.24108887]
[137.01400757 104.86961365]
[148.90060425 95.72035980]
[163.33505249 91.64034271]
[178.25236511 93.21325684]
[191.51843262 100.21408081]
[201.23539734 111.64126587]
[206.01313782 125.86002350]
[205.16816711 140.83621216]
[198.82133484 154.42730713]
[187.88064575 164.68894958]
[173.91130066 170.15310669]
[158.91172791 170.03805542]
[145.02783203 164.36027527]
[134.24583435 153.93202209]
[128.10821533 140.24517822]
[127.49331665 125.25604248]
[127.49331665 140.25604248]
[127.49331665 155.25604248]
[127.49331665 170.25604248]
[127.49331665 185.25604248]
[127.49331665 200.25604248]
[127.49331665 215.25604248]
[127.49331665 230.25604248]
[127.49331665 245.25604248]
[127.49331665 260.25604248]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[13 64]
[14 63]
[15 62]
[67 126]
[68 125]
[69 124]
[70 123]
[90 122]
[91 121]
[92 120]
[93 119]
[94 118]
[95 117]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
