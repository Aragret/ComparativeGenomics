%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:38 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGAUACCCUUCCCGUACUAAUUAAUCCCCUGGCCCAACCCGUCAUCUACUCUACCAUCUUUGxxxxxxxxxxUACCUCUCACUUCAACCUCCCUCACCAUUGGCAGCCUAGCAUUAGCAGGAAUACCUUUCCCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[95.58273315 461.52523804]
[95.58273315 446.52523804]
[95.58273315 431.52523804]
[95.58273315 416.52523804]
[95.58273315 401.52523804]
[95.58273315 386.52523804]
[95.58273315 371.52523804]
[95.58273315 356.52523804]
[95.58273315 341.52523804]
[95.58273315 326.52523804]
[80.50421906 323.60119629]
[66.27587128 317.80398560]
[53.43966293 309.35247803]
[42.48494720 298.56671143]
[33.82975388 285.85574341]
[27.80485725 271.70214844]
[24.64112473 256.64367676]
[24.46068573 241.25288391]
[27.27219963 226.11528015]
[32.97047424 211.80709839]
[41.34039307 198.87336731]
[52.06503296 187.80709839]
[64.73767090 179.03059387]
[78.87719727 172.87921143]
[93.94639587 169.58862305]
[93.63433838 154.59187317]
[93.32228088 139.59512329]
[93.01022339 124.59836578]
[92.69816589 109.60160828]
[92.07418823 94.61459351]
[91.13856506 79.64379883]
[80.92079163 90.62548065]
[66.05718994 92.64370728]
[53.28110504 84.78421021]
[48.38023758 70.60741425]
[53.57472229 56.53554916]
[66.51140594 48.94330978]
[81.32984924 51.27005005]
[91.31730652 62.46210861]
[92.56417847 47.51402283]
[93.81105042 32.56593704]
[94.74668121 17.59514427]
[95.37065887 2.60812879]
[95.99463654 -12.37888718]
[96.61861420 -27.36590385]
[81.75273895 -29.45698738]
[67.16342163 -32.99513245]
[52.99115372 -37.94625854]
[39.37243271 -44.26268768]
[26.43841934 -51.88358307]
[14.31367683 -60.73555756]
[3.11497450 -70.73334503]
[-7.04983377 -81.78067780]
[-16.08285332 -93.77114868]
[-23.89708900 -106.58927917]
[-30.41728401 -120.11162567]
[-35.58064270 -134.20796204]
[-39.33743668 -148.74250793]
[-41.65148926 -163.57531738]
[-42.50050735 -178.56350708]
[-41.87632370 -193.56274414]
[-39.78494263 -208.42857361]
[-36.24650574 -223.01782227]
[-31.29509544 -237.18998718]
[-24.97839546 -250.80857849]
[-17.35723877 -263.74246216]
[-8.50502491 -275.86700439]
[1.49299181 -287.06552124]
[12.54052353 -297.23010254]
[24.53117371 -306.26287842]
[37.34946060 -314.07687378]
[50.87194061 -320.59677124]
[64.96836853 -325.75985718]
[79.50299835 -329.51635742]
[94.33584595 -331.83010864]
[109.32405853 -332.67883301]
[124.32328796 -332.05435181]
[139.18907166 -329.96267700]
[153.77825928 -326.42395020]
[167.95031738 -321.47225952]
[181.56878662 -315.15527344]
[194.50250244 -307.53387451]
[206.62689209 -298.68142700]
[217.82519531 -288.68316650]
[227.98956299 -277.63543701]
[237.02209473 -265.64459229]
[244.83581543 -252.82615662]
[251.35546875 -239.30355835]
[256.51828003 -225.20701599]
[260.27447510 -210.67231750]
[262.58795166 -195.83941650]
[263.43637085 -180.85119629]
[262.81158447 -165.85197449]
[260.71960449 -150.98623657]
[257.18057251 -136.39712524]
[252.22860718 -122.22515106]
[245.91136169 -108.60681152]
[238.28968811 -95.67325592]
[229.43698120 -83.54904175]
[219.43852234 -72.35094452]
[208.39057922 -62.18679428]
[196.39956665 -53.15449524]
[183.58097839 -45.34103012]
[170.05822754 -38.82164383]
[155.96159363 -33.65913391]
[141.42681885 -29.90320969]
[126.59387207 -27.59004784]
[111.60562897 -26.74192619]
[110.98165131 -11.75490952]
[110.35767365 3.23210621]
[109.73369598 18.21912193]
[112.29573059 22.31930733]
[112.26440430 28.08388138]
[108.75914001 33.81281281]
[107.51226807 48.76089859]
[106.26538849 63.70898438]
[106.10935211 78.70817566]
[107.04498291 93.67896271]
[110.13608551 98.00306702]
[110.54741669 103.75767517]
[107.69492340 109.28955078]
[108.00698090 124.28630829]
[108.31903839 139.28306580]
[108.63108826 154.27981567]
[108.94314575 169.27656555]
[123.40325928 171.73721313]
[137.15629578 176.82467651]
[149.72962952 184.36248779]
[160.69145203 194.09001160]
[169.66563416 205.67140198]
[176.34465027 218.70730591]
[180.50004578 232.74851990]
[181.99034119 247.31152344]
[180.76576233 261.89511108]
[176.86996460 275.99771118]
[170.43846130 289.13449097]
[161.69389343 300.85415649]
[150.93833923 310.75442505]
[138.54286194 318.49581909]
[124.93474579 323.81326294]
[110.58273315 326.52523804]
[110.58273315 341.52523804]
[110.58273315 356.52523804]
[110.58273315 371.52523804]
[110.58273315 386.52523804]
[110.58273315 401.52523804]
[110.58273315 416.52523804]
[110.58273315 431.52523804]
[110.58273315 446.52523804]
[110.58273315 461.52523804]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[25 125]
[26 124]
[27 123]
[28 122]
[29 121]
[30 118]
[31 117]
[39 116]
[40 115]
[41 114]
[42 111]
[43 110]
[44 109]
[45 108]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
