%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:33:59 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGUAUUAUAAUAAACACCCUCACCACUACAAUCUUCCUAGGAACAACAUAUGACGCACUCUCxxxxxxxxxxUCAUUAAAUUAUGAUAAUCAUAUUUACCAAAUGCCCCUCAUUUACAUAAAUAUUAUACUACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[97.41284943 272.02239990]
[97.41284943 257.02239990]
[97.41284943 242.02241516]
[97.41284943 227.02241516]
[97.41284943 212.02241516]
[97.41284943 197.02241516]
[97.41284943 182.02241516]
[97.41284943 167.02241516]
[97.41284943 152.02241516]
[97.41284943 137.02241516]
[72.80310822 116.18688202]
[76.16832733 89.14801025]
[64.86931610 79.28228760]
[53.57031631 69.41656494]
[42.27130890 59.55083847]
[30.97230530 49.68511581]
[15.48815346 46.43679047]
[10.99005699 32.23762131]
[-0.30894759 22.37189674]
[-11.60795212 12.50617504]
[-22.90695763 2.64045167]
[-33.76655579 13.00309277]
[-45.52349854 22.33527184]
[-58.08035660 30.55965996]
[-71.33307648 37.60810471]
[-85.17185211 43.42219925]
[-99.48199463 47.95376205]
[-114.14492798 51.16524887]
[-129.03913879 53.03004456]
[-144.04122925 53.53269577]
[-159.02687073 52.66903687]
[-173.87187195 50.44622803]
[-188.45324707 46.88268280]
[-202.65016174 42.00793457]
[-216.34495544 35.86238098]
[-229.42414856 28.49693871]
[-241.77937317 19.97264671]
[-253.30825806 10.36014175]
[-263.91525269 -0.26092449]
[-273.51245117 -11.80253983]
[-282.02035522 -24.16906548]
[-289.36843872 -37.25802612]
[-295.49581909 -50.96095657]
[-300.35174561 -65.16431427]
[-303.89593506 -79.75039673]
[-306.09906006 -94.59834290]
[-306.94284058 -109.58511353]
[-306.42028809 -124.58652496]
[-304.53573608 -139.47825623]
[-301.30480957 -154.13691711]
[-296.75427246 -168.44104004]
[-290.92181396 -182.27207947]
[-283.85580444 -195.51544189]
[-275.61477661 -208.06138611]
[-266.26699829 -219.80593872]
[-255.88996887 -230.65177917]
[-244.56964111 -240.50904846]
[-232.39985657 -249.29605103]
[-219.48143005 -256.93997192]
[-205.92143250 -263.37747192]
[-191.83221436 -268.55523682]
[-177.33052063 -272.43029785]
[-162.53652954 -274.97061157]
[-147.57283020 -276.15509033]
[-132.56341553 -275.97390747]
[-117.63266754 -274.42861938]
[-102.90430450 -271.53195190]
[-88.50037384 -267.30798340]
[-74.54023743 -261.79165649]
[-61.13956451 -255.02873230]
[-48.40941238 -247.07521057]
[-36.45525742 -237.99702454]
[-25.37616730 -227.86940002]
[-15.26394463 -216.77622986]
[-6.20238352 -204.80947876]
[1.73342645 -192.06826782]
[8.47772503 -178.65821838]
[13.97462654 -164.69041443]
[18.17858124 -150.28062439]
[21.05475235 -135.54824829]
[22.57930565 -120.61537170]
[22.73961067 -105.60572052]
[21.53433609 -90.64368439]
[18.97347069 -75.85324097]
[15.07823467 -61.35695648]
[9.88090706 -47.27494431]
[3.42455459 -33.72390366]
[-4.23732233 -20.81611824]
[-13.04123402 -8.65855312]
[-1.74222934 1.20716989]
[9.55677509 11.07289314]
[20.85577965 20.93861580]
[35.53174973 23.48127937]
[40.83802795 38.38611221]
[52.13703156 48.25183487]
[63.43603897 58.11755753]
[74.73503876 67.98327637]
[86.03404999 77.84899902]
[96.52539825 71.84210968]
[109.52459717 70.96556854]
[122.47930908 76.19403076]
[132.50923157 87.23003387]
[137.03318787 102.42791748]
[151.89624023 104.45024872]
[166.75929260 106.47258759]
[181.62232971 108.49491882]
[195.31504822 97.65762329]
[212.27990723 99.99803925]
[222.13119507 113.59252167]
[237.03311157 115.30521393]
[251.93501282 117.01789856]
[266.83691406 118.73059082]
[281.73880005 120.44328308]
[295.14746094 111.63489532]
[310.34884644 116.76300049]
[315.68176270 131.89375305]
[307.05526733 145.42012024]
[291.08685303 146.96585083]
[280.02612305 135.34518433]
[265.12420654 133.63249207]
[250.22232056 131.91979980]
[235.32041931 130.20710754]
[220.41851807 128.49443054]
[211.51441956 137.85998535]
[198.64601135 140.40530396]
[186.49082947 134.97579956]
[179.60000610 123.35796356]
[164.73695374 121.33563232]
[149.87390137 119.31330109]
[135.01086426 117.29096222]
[129.36135864 122.22382355]
[141.43534851 131.12431335]
[156.14006042 134.08595276]
[164.98161316 146.20318604]
[163.31517029 161.11032104]
[152.01618958 170.97608948]
[137.02047729 170.61756897]
[126.20586395 160.22314453]
[125.25373077 145.25328064]
[118.06235504 132.08955383]
[112.41284943 137.02241516]
[112.41284943 152.02241516]
[112.41284943 167.02241516]
[112.41284943 182.02241516]
[112.41284943 197.02241516]
[112.41284943 212.02241516]
[112.41284943 227.02241516]
[112.41284943 242.02241516]
[112.41284943 257.02239990]
[112.41284943 272.02239990]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[12 98]
[13 97]
[14 96]
[15 95]
[16 94]
[18 92]
[19 91]
[20 90]
[21 89]
[103 130]
[104 129]
[105 128]
[106 127]
[109 123]
[110 122]
[111 121]
[112 120]
[113 119]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
