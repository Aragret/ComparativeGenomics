%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:23 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGUAAAUACUACCGUAUGGCCCACCAUAAUUACCCCCAUACUCCUUACACUAUUCCUCAUCAxxxxxxxxxxCCGAGCAAUCUCAAUUACAAUAUAUACACCAACAAACAAUGUUCAACCAGUAACUACUACCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[-51.20528030 258.01446533]
[-62.46295929 246.41513062]
[-72.83318329 234.01602173]
[-82.25930786 220.88485718]
[-95.03666687 228.74227905]
[-107.81402588 236.59970093]
[-120.59138489 244.45713806]
[-133.36874390 252.31455994]
[-144.35440063 262.52804565]
[-153.12060547 274.69989014]
[-161.88682556 286.87170410]
[-170.65303040 299.04354858]
[-169.50701904 315.04562378]
[-181.40058899 325.81234741]
[-197.21000671 323.08441162]
[-204.80766296 308.95446777]
[-198.36524963 294.26181030]
[-182.82485962 290.27734375]
[-174.05865479 278.10549927]
[-165.29244995 265.93365479]
[-156.52624512 253.76182556]
[-165.54417419 241.77447510]
[-174.56129456 229.78816223]
[-188.68611145 234.83692932]
[-202.81091309 239.88568115]
[-216.93571472 244.93443298]
[-231.06051636 249.98318481]
[-241.25584412 262.82791138]
[-257.43545532 260.15353394]
[-262.95513916 244.71122742]
[-252.13673401 232.38670349]
[-236.10926819 235.85838318]
[-221.98446655 230.80963135]
[-207.85966492 225.76087952]
[-193.73486328 220.71211243]
[-179.61006165 215.66336060]
[-167.07020569 215.48403931]
[-156.29345703 218.74623108]
[-148.11473083 224.56408691]
[-143.04228210 231.87342834]
[-141.22616577 239.53720093]
[-128.44880676 231.67977905]
[-115.67145538 223.82235718]
[-102.89409637 215.96492004]
[-90.11673737 208.10749817]
[-96.94514465 195.10108948]
[-102.88501740 181.66561890]
[-107.90957642 167.86170959]
[-111.99613953 153.75164795]
[-115.12628174 139.39909363]
[-117.28587341 124.86877441]
[-118.46516418 110.22625732]
[-118.65885162 95.53761292]
[-117.86604309 80.86909485]
[-116.09033203 66.28688812]
[-113.33972168 51.85678101]
[-109.62661743 37.64387131]
[-104.96777344 23.71228409]
[-99.38421631 10.12487125]
[-92.90113068 -3.05706644]
[-85.54776001 -15.77405834]
[-77.35729218 -27.96873283]
[-68.36666107 -39.58607101]
[-58.61644745 -50.57366180]
[-48.15062714 -60.88193512]
[-37.01641846 -70.46438599]
[-25.26405716 -79.27777863]
[-12.94656086 -87.28234863]
[-0.11950406 -94.44199371]
[13.15924549 -100.72441101]
[26.82978058 -106.10124969]
[40.83042526 -110.54824829]
[55.09801483 -114.04536438]
[69.56818390 -116.57679749]
[84.17564392 -118.13114166]
[98.85449982 -118.70137787]
[113.53852081 -118.28493500]
[128.16145325 -116.88369751]
[142.65734863 -114.50397491]
[156.96078491 -111.15651703]
[171.00724792 -106.85641479]
[184.73335266 -101.62306976]
[198.07719421 -95.48010254]
[205.25970459 -108.64868164]
[212.44219971 -121.81726837]
[211.50347900 -138.18952942]
[225.35952759 -146.96118164]
[239.75642395 -139.10871887]
[239.88389587 -122.71006775]
[225.61079407 -114.63475800]
[218.42828369 -101.46617126]
[211.24577332 -88.29759216]
[222.51704407 -81.16616821]
[233.33264160 -73.36093140]
[243.65232849 -64.91092682]
[253.43774414 -55.84756470]
[262.65246582 -46.20456696]
[271.26226807 -36.01779556]
[279.23507690 -25.32513618]
[286.54129028 -14.16635895]
[293.15365601 -2.58296585]
[299.04766846 9.38196182]
[304.20135498 21.68392181]
[308.59558105 34.27716064]
[312.21395874 47.11484146]
[315.04306030 60.14921570]
[317.07235718 73.33181000]
[318.29431152 86.61358643]
[318.70437622 99.94514465]
[318.30099487 113.27691650]
[317.08572388 126.55930328]
[331.90347290 128.89041138]
[346.72122192 131.22151184]
[361.53900146 133.55261230]
[375.30245972 125.30963898]
[390.27734375 131.06565857]
[394.97622681 146.40515137]
[385.79452515 159.56097412]
[369.77563477 160.44110107]
[359.20788574 148.37037659]
[344.39013672 146.03927612]
[329.57235718 143.70816040]
[314.75460815 141.37705994]
[311.11203003 157.12542725]
[306.31625366 172.56175232]
[300.39346313 187.60169983]
[293.37606812 202.16313171]
[285.30230713 216.16650391]
[276.21636963 229.53530884]
[266.16784668 242.19653320]
[255.21162415 254.08100891]
[243.40756226 265.12380981]
[230.82014465 275.26464844]
[217.51811218 284.44808960]
[203.57414246 292.62399292]
[189.06440735 299.74768066]
[174.06816101 305.78024292]
[158.66731262 310.68875122]
[142.94599915 314.44638062]
[126.99008179 317.03259277]
[110.88674164 318.43325806]
[94.72393036 318.64071655]
[78.58994293 317.65390015]
[62.57290268 315.47811890]
[46.76031113 312.12530518]
[31.23853874 307.61373901]
[16.09237671 301.96810913]
[1.40455663 295.21920776]
[-12.74468613 287.40396118]
[-26.27806282 278.56500244]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 45]
[5 44]
[6 43]
[7 42]
[8 41]
[9 21]
[10 20]
[11 19]
[12 18]
[23 36]
[24 35]
[25 34]
[26 33]
[27 32]
[83 92]
[84 91]
[85 90]
[111 123]
[112 122]
[113 121]
[114 120]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
