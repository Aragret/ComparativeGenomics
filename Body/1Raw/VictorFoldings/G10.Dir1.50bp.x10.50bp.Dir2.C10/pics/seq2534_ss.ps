%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:39 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGUUCUCCUCCGCAUAAGCCUGCGUCAGAUUAAAACACUGAACUGACAAUUAACAGCCCAAUxxxxxxxxxxUACUAUUUUUUAACCAAAUCAACAACAACCUAUUUAGCUGUUCCCCAACCUUUUCCUCCGCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[92.50000000 322.19198608]
[92.50000000 307.19198608]
[92.50000000 292.19198608]
[92.50000000 277.19198608]
[92.50000000 262.19198608]
[92.50000000 247.19198608]
[92.50000000 232.19198608]
[92.50000000 217.19198608]
[92.50000000 202.19198608]
[92.50000000 187.19198608]
[82.30027008 186.00677490]
[72.27560425 183.62852478]
[62.56552505 180.08204651]
[53.30614853 175.40844727]
[44.62825394 169.66470337]
[36.65546799 162.92294312]
[29.50248146 155.26956177]
[23.27341461 146.80415344]
[18.06030464 137.63815308]
[4.96714973 144.95726013]
[-8.12600422 152.27636719]
[-21.21915817 159.59547424]
[-25.27923775 174.86935425]
[-38.99213409 182.72631836]
[-54.22223282 178.50498962]
[-61.93378448 164.70979309]
[-57.55166245 149.52517700]
[-43.67570114 141.95989990]
[-28.53826523 146.50231934]
[-15.44511032 139.18321228]
[-2.35195589 131.86410522]
[10.74119854 124.54500580]
[7.94887400 109.80719757]
[-6.91417265 107.78486633]
[-21.77721977 105.76252747]
[-36.64026642 103.74019623]
[-46.57610321 115.54200745]
[-61.32193375 120.07676697]
[-76.17241669 115.89744568]
[-86.38881683 104.33766174]
[-88.71112061 89.08609009]
[-82.39828491 75.00945282]
[-69.46472168 66.59955597]
[-54.03747177 66.53997040]
[-41.03932190 74.84970093]
[-34.61793137 88.87715149]
[-19.75488472 90.89948273]
[-4.89183807 92.92182159]
[9.97120857 94.94415283]
[12.74836349 78.21928406]
[18.59572220 62.35414124]
[27.28998756 47.90530396]
[38.50831223 35.37625504]
[51.84027481 25.19982529]
[66.80285645 17.72326279]
[82.85797119 13.19639874]
[99.43177795 11.76332474]
[115.93518829 13.45787334]
[131.78483582 18.20301437]
[146.42367554 25.81418800]
[155.44120789 13.82735538]
[164.45872498 1.84052277]
[173.47625732 -10.14630985]
[182.49378967 -22.13314247]
[191.51132202 -34.11997604]
[180.66154480 -44.50355148]
[171.11604309 -56.09750748]
[163.00883484 -68.73908234]
[156.45372009 -82.25081635]
[151.54273987 -96.44301605]
[148.34481812 -111.11644745]
[146.90484619 -126.06512451]
[147.24305725 -141.07917786]
[149.35469055 -155.94786072]
[153.21011353 -170.46240234]
[158.75518799 -184.41906738]
[165.91207886 -197.62191772]
[174.58030701 -209.88560486]
[184.63819885 -221.03797913]
[195.94453430 -230.92245483]
[208.34062195 -239.40028381]
[221.65240479 -246.35246277]
[235.69302368 -251.68136597]
[250.26538086 -255.31219482]
[265.16488647 -257.19400024]
[280.18237305 -257.30032349]
[295.10702515 -255.62971497]
[309.72933960 -252.20559692]
[323.84402466 -247.07604980]
[337.25292969 -240.31307983]
[349.76779175 -232.01162720]
[361.21298218 -222.28825378]
[371.42779541 -211.27943420]
[380.26879883 -199.13970947]
[387.61193848 -186.03953552]
[393.35409546 -172.16279602]
[397.41467285 -157.70429993]
[399.73663330 -142.86701965]
[400.28744507 -127.85925293]
[399.05929565 -112.89168549]
[396.06948853 -98.17443848]
[391.35995483 -83.91411591]
[384.99682617 -70.31092072]
[377.06945801 -57.55580139]
[367.68908691 -45.82783890]
[356.98742676 -35.29166412]
[345.11471558 -26.09519005]
[332.23764038 -18.36752510]
[318.53692627 -12.21715069]
[304.20495605 -7.73040867]
[289.44290161 -4.97028589]
[274.45800781 -3.97553086]
[259.46066284 -4.76010752]
[244.66136169 -7.31300259]
[230.26789856 -11.59837627]
[216.48231506 -17.55607033]
[203.49815369 -25.10244560]
[194.48062134 -13.11561298]
[185.46308899 -1.12877989]
[176.44555664 10.85805225]
[167.42803955 22.84488487]
[158.41050720 34.83171844]
[165.92843628 42.44886398]
[172.46037292 50.92672348]
[177.90861511 60.13850021]
[182.19169617 69.94642639]
[185.24554443 80.20382690]
[187.02450562 90.75729370]
[187.50195312 101.44898224]
[186.67076111 112.11900330]
[184.54336548 122.60778046]
[181.15156555 132.75843811]
[176.54609680 142.41918945]
[170.79583740 151.44552612]
[163.98678589 159.70245361]
[156.22076416 167.06651306]
[147.61393738 173.42755127]
[138.29501343 178.69042969]
[128.40336609 182.77644348]
[118.08693695 185.62449646]
[107.50000000 187.19198608]
[107.50000000 202.19198608]
[107.50000000 217.19198608]
[107.50000000 232.19198608]
[107.50000000 247.19198608]
[107.50000000 262.19198608]
[107.50000000 277.19198608]
[107.50000000 292.19198608]
[107.50000000 307.19198608]
[107.50000000 322.19198608]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[19 32]
[20 31]
[21 30]
[22 29]
[33 49]
[34 48]
[35 47]
[36 46]
[60 122]
[61 121]
[62 120]
[63 119]
[64 118]
[65 117]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
