%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:12 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGAACAAAACUAACUAAUACUAACAUCUCAGACGCUCAGGAAAUAGAAACCGUCUGAACUAUCxxxxxxxxxxAUGAGUGACUACAAAAAGGAUUAGACUGAACCGAAUUGGUAUAUAGUUUAAACAAAACGAACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[115.31224823 412.86740112]
[115.31224823 397.86740112]
[115.31224823 382.86740112]
[115.31224823 367.86740112]
[115.31224823 352.86740112]
[115.31224823 337.86740112]
[115.31224823 322.86740112]
[115.31224823 307.86740112]
[115.31224823 292.86740112]
[115.31224823 277.86740112]
[96.14399719 268.86169434]
[83.98553467 251.43522644]
[82.13771057 230.19631958]
[91.16339874 210.80433655]
[108.71866608 198.46174622]
[106.26573944 183.66366577]
[103.81281281 168.86558533]
[101.35988617 154.06750488]
[98.90695953 139.26942444]
[96.45403290 124.47134399]
[76.76429749 108.45710754]
[81.55374908 83.53317261]
[73.92078400 70.62046814]
[66.28781128 57.70777512]
[58.65484238 44.79507446]
[51.02187347 31.88237762]
[37.33882523 23.93978500]
[37.52299500 9.04631901]
[29.89002419 -3.86637878]
[14.17189503 -0.40184975]
[-1.95106363 -2.76672244]
[-16.36179733 -10.79374886]
[-27.11758804 -23.56307030]
[-32.71157074 -39.50578690]
[-32.28270340 -56.59611893]
[-25.74501610 -72.60868835]
[-38.88665009 -79.84039307]
[-52.02827835 -87.07209778]
[-65.16991425 -94.30379486]
[-78.31154633 -101.53549957]
[-91.45317078 -108.76720428]
[-104.59480286 -115.99890900]
[-115.98791504 -106.00025940]
[-130.11480713 -100.50418091]
[-145.26956177 -100.17433167]
[-159.62220764 -105.05055237]
[-171.43957520 -114.54400635]
[-179.29464722 -127.50832367]
[-182.23890686 -142.37800598]
[-179.91680908 -157.35743713]
[-172.60876465 -170.63781738]
[-161.19723511 -180.61543274]
[-147.06025696 -186.08547974]
[-131.90490723 -186.38740540]
[-117.56127167 -181.48474121]
[-105.76142883 -171.96951294]
[-97.93025208 -158.99075317]
[-95.01340485 -144.11567688]
[-97.36310577 -129.14053345]
[-84.22147369 -121.90883636]
[-71.07984161 -114.67713165]
[-57.93820953 -107.44542694]
[-44.79657745 -100.21372986]
[-31.65494537 -92.98202515]
[-18.51331329 -85.75032043]
[-5.60061646 -93.38329315]
[-5.60061646 -108.38329315]
[-5.60061646 -123.38329315]
[-19.85328674 -128.54441833]
[-31.47921562 -138.27136230]
[-39.07451630 -151.38957214]
[-41.72201920 -166.31492615]
[-39.10202789 -181.24514771]
[-31.53091431 -194.37733459]
[-19.92292976 -204.12568665]
[-5.67979527 -209.31306458]
[9.47856236 -209.31306458]
[23.72169685 -204.12568665]
[35.32968140 -194.37733459]
[42.90079498 -181.24514771]
[45.52079010 -166.31492615]
[42.87328339 -151.38957214]
[35.27798462 -138.27136230]
[23.65205383 -128.54441833]
[9.39938354 -123.38329315]
[9.39938354 -108.38329315]
[9.39938354 -93.38329315]
[20.45130920 -92.83322144]
[31.00652695 -89.79303741]
[40.51599121 -84.45951080]
[48.49393845 -77.14768219]
[54.54268265 -68.27240753]
[58.37235260 -58.32493591]
[59.81464005 -47.84580231]
[58.82989883 -37.39545441]
[55.50728226 -27.52428055]
[50.05809784 -18.74363518]
[42.80272293 -11.49934864]
[50.43569183 1.41334927]
[63.57277679 8.43233871]
[63.93457031 24.24940681]
[71.56754303 37.16210556]
[79.20050812 50.07480240]
[86.83348083 62.98750305]
[94.46645355 75.90019989]
[100.76424408 75.28489685]
[107.01198578 76.28813171]
[112.80052185 78.84421539]
[117.75078583 82.78575897]
[121.53857422 87.85462189]
[123.91584778 93.71886444]
[138.89608765 94.48852539]
[153.87632751 95.25818634]
[166.70289612 85.62186432]
[182.19738770 89.78125763]
[188.47373962 104.54563141]
[180.71728516 118.58903503]
[164.87811279 121.13854980]
[153.10667419 110.23842621]
[138.12643433 109.46876526]
[123.14618683 108.69910431]
[121.15470123 112.80230713]
[118.44347382 116.46994019]
[115.10474396 119.57720947]
[111.25210571 122.01841736]
[113.70503998 136.81649780]
[116.15796661 151.61457825]
[118.61089325 166.41265869]
[121.06381989 181.21073914]
[123.51674652 196.00880432]
[132.81851196 197.27761841]
[141.58772278 200.59602356]
[149.37950134 205.78999329]
[155.79983521 212.59053040]
[160.52548218 220.64750671]
[163.32026672 229.54777527]
[164.04689026 238.83633423]
[162.67361450 248.03953552]
[159.27565002 256.68933105]
[154.03103638 264.34695435]
[147.21134949 270.62530518]
[139.16760254 275.20840454]
[130.31224060 277.86740112]
[130.31224060 292.86740112]
[130.31224060 307.86740112]
[130.31224060 322.86740112]
[130.31224060 337.86740112]
[130.31224060 352.86740112]
[130.31224060 367.86740112]
[130.31224060 382.86740112]
[130.31224060 397.86740112]
[130.31224060 412.86740112]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 152]
[2 151]
[3 150]
[4 149]
[5 148]
[6 147]
[7 146]
[8 145]
[9 144]
[10 143]
[15 130]
[16 129]
[17 128]
[18 127]
[19 126]
[20 125]
[22 105]
[23 104]
[24 103]
[25 102]
[26 101]
[28 99]
[29 98]
[36 65]
[37 64]
[38 63]
[39 62]
[40 61]
[41 60]
[42 59]
[66 87]
[67 86]
[68 85]
[111 121]
[112 120]
[113 119]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
