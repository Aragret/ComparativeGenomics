%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:47 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGAACCCUCUAAAUCCCCUUGUAAAUUUAACUGUUAGUCCAAAGAGGAACAGCUCUUUGGACxxxxxxxxxxAUCGUUGUAUUUCAACUACAAGAACACCAAUGACCCCAAUACGCAAAACUAACCCCCUAACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[93.82253265 254.33854675]
[93.82253265 239.33854675]
[93.82253265 224.33854675]
[93.82253265 209.33854675]
[93.82253265 194.33854675]
[93.82253265 179.33854675]
[93.82253265 164.33854675]
[93.82253265 149.33854675]
[93.82253265 134.33854675]
[93.82253265 119.33854675]
[81.12760925 111.34863281]
[67.60341644 117.83679199]
[54.07922745 124.32495880]
[52.60327530 138.06616211]
[44.58018875 149.18565369]
[32.20239639 154.82841492]
[18.76251411 153.61141968]
[7.77766800 145.96099854]
[-5.87857294 152.16639709]
[-19.53481483 158.37181091]
[-33.19105530 164.57720947]
[-46.84729767 170.78262329]
[-48.25628662 186.07675171]
[-57.13667297 198.60807800]
[-71.09967041 205.00575256]
[-86.38930511 203.54882812]
[-98.89273834 194.62921143]
[-105.24662018 180.64624023]
[-103.74177551 165.36123657]
[-94.78301239 152.88581848]
[-80.78018188 146.57580566]
[-65.49997711 148.12855530]
[-53.05270386 157.12637329]
[-39.39646149 150.92097473]
[-25.74022102 144.71556091]
[-12.08398056 138.51016235]
[1.57226110 132.30474854]
[4.32717991 116.15186310]
[16.27059364 104.69233704]
[32.85241699 102.56520844]
[47.59106064 110.80077362]
[61.11524963 104.31260681]
[74.63944244 97.82444000]
[79.84693909 93.38423920]
[85.52324677 91.14794922]
[75.30976868 80.16228485]
[65.09628296 69.17662048]
[54.88280487 58.19095612]
[44.66932678 47.20529175]
[34.45584488 36.21962738]
[24.24236679 25.23396301]
[14.02888584 14.24829865]
[3.81540632 3.26263356]
[-6.39807367 -7.72303104]
[-22.19902611 -8.04778671]
[-33.08191681 -19.50807381]
[-32.59012222 -35.30471039]
[-21.01541519 -46.06583023]
[-5.22486305 -45.40705109]
[5.41328001 -33.71921539]
[4.58759117 -17.93651199]
[14.80107117 -6.95084620]
[25.01455116 4.03481817]
[35.22803116 15.02048302]
[45.44150925 26.00614738]
[55.65499115 36.99181366]
[65.86846924 47.97747803]
[76.08194733 58.96314240]
[86.29543304 69.94880676]
[96.50891113 80.93447113]
[92.81254578 66.39704132]
[85.30299377 53.41218185]
[83.89181519 38.47871017]
[88.83608246 24.31699181]
[99.23512268 13.50681210]
[113.19458008 8.01741219]
[128.17152405 8.84877396]
[141.43766785 15.84945107]
[150.57637024 27.74415970]
[153.92286682 42.36609268]
[150.86756897 57.05163193]
[141.96701050 69.12557983]
[128.84545898 76.38761139]
[118.19094086 86.94608307]
[132.60316467 82.78819275]
[147.01538086 78.63031006]
[161.24215698 73.87649536]
[175.25886536 68.53498077]
[189.27557373 63.19346619]
[203.29229736 57.85195541]
[217.30900574 52.51044083]
[231.09138489 46.59047699]
[244.61557007 40.10231400]
[258.13977051 33.61414719]
[256.62820435 18.53134537]
[260.36941528 3.84192300]
[268.91162109 -8.68030071]
[281.22335815 -17.52320480]
[295.81790161 -21.61896706]
[310.93289185 -20.47300529]
[324.74310303 -14.22369671]
[335.58090210 -3.62567782]
[342.13754272 10.04128933]
[343.62133789 25.12685204]
[339.85305786 39.80935669]
[331.28775024 52.31581497]
[318.95974731 61.13601685]
[304.35769653 65.20487976]
[289.24484253 64.03105927]
[275.44616699 57.75631332]
[264.62792969 47.13834000]
[251.10374451 53.62650299]
[237.57955933 60.11466980]
[236.53540039 62.78245163]
[234.33717346 65.18282318]
[231.08670044 66.86101532]
[227.05308533 67.40968323]
[222.65051270 66.52715302]
[208.63380432 71.86866760]
[194.61709595 77.21018219]
[180.60037231 82.55168915]
[166.58366394 87.89320374]
[165.32136536 90.46495819]
[162.93121338 92.67430115]
[159.55249023 94.07648468]
[155.48724365 94.28795624]
[151.17326355 93.04252625]
[136.76104736 97.20040894]
[122.34883118 101.35829926]
[136.99014282 104.61899567]
[151.96807861 103.80568695]
[165.47344971 110.33292389]
[174.14181519 122.57463074]
[175.81370544 137.48117065]
[170.07261658 151.33901978]
[158.34877014 160.69590759]
[143.56280518 163.22087097]
[129.39820862 158.28486633]
[119.38365173 147.11756897]
[116.01391602 132.50228882]
[108.82253265 119.33854675]
[108.82253265 134.33854675]
[108.82253265 149.33854675]
[108.82253265 164.33854675]
[108.82253265 179.33854675]
[108.82253265 194.33854675]
[108.82253265 209.33854675]
[108.82253265 224.33854675]
[108.82253265 239.33854675]
[108.82253265 254.33854675]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[11 43]
[12 42]
[13 41]
[18 37]
[19 36]
[20 35]
[21 34]
[22 33]
[45 70]
[46 69]
[47 68]
[48 67]
[49 66]
[50 65]
[51 64]
[52 63]
[53 62]
[54 61]
[84 129]
[85 128]
[86 127]
[87 122]
[88 121]
[89 120]
[90 119]
[91 118]
[92 113]
[93 112]
[94 111]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
