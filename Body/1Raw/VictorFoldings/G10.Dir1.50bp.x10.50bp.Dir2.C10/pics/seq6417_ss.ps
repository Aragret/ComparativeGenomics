%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:06 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGGUUCCCCUAAUAAUCGGUGCCCCCGAUAUGGCGUUUCCCCGCAUAAACAACAUAAGCUUCxxxxxxxxxxUCCGACAUCUGGUUCCUACUUCAGGGUCAUAAAGCCUAAAUAGCCCACACGUUCCCCUUACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[105.17264557 263.50836182]
[105.17264557 248.50836182]
[105.17264557 233.50836182]
[105.17264557 218.50836182]
[105.17264557 203.50836182]
[105.17264557 188.50836182]
[105.17264557 173.50836182]
[105.17264557 158.50836182]
[105.17264557 143.50836182]
[105.17264557 128.50836182]
[90.99608612 123.60681152]
[81.73114014 135.40345764]
[72.46618652 147.20008850]
[72.94554901 163.23597717]
[60.61439133 173.49864197]
[44.93212509 170.11543274]
[37.92884445 155.68165588]
[44.97686386 141.26968384]
[60.66954803 137.93513489]
[69.93450165 126.13850403]
[79.19944763 114.34186554]
[74.87989044 108.21067810]
[61.92121506 89.81712341]
[47.69443512 94.57093811]
[33.46765518 99.32475281]
[19.24087715 104.07856750]
[5.01409864 108.83238220]
[-3.40779233 122.48710632]
[-19.35112572 124.27306366]
[-30.58554268 112.82022095]
[-28.49295807 96.91423035]
[-14.67862415 88.75679779]
[0.26028392 94.60560608]
[14.48706341 89.85179138]
[28.71384239 85.09797668]
[42.94062042 80.34416199]
[57.16740036 75.59034729]
[62.50891113 61.57363510]
[55.05400085 48.55732346]
[47.59909058 35.54101562]
[34.02641678 27.41125298]
[34.41511154 12.52171993]
[26.96020126 -0.49458933]
[12.93124676 4.89882183]
[-1.75661790 8.08740520]
[-16.75908852 8.99641609]
[-31.72448730 7.60454464]
[-46.30200195 3.94441938]
[-60.14991379 -1.89816129]
[-72.94361115 -9.78623867]
[-84.38318634 -19.53490639]
[-94.20048523 -30.91563797]
[-102.16537476 -43.66165924]
[-108.09114075 -57.47417831]
[-111.83888245 -72.02941132]
[-113.32074738 -86.98616791]
[-112.50199127 -101.99383545]
[-109.40180969 -116.70061493]
[-104.09288025 -130.76174927]
[-96.69964600 -143.84764099]
[-87.39541626 -155.65153503]
[-76.39830017 -165.89671326]
[-63.96607971 -174.34303284]
[-50.39018631 -180.79251099]
[-35.98886108 -185.09391785]
[-21.09968758 -187.14646912]
[-6.07169008 -186.90202332]
[8.74285126 -184.36633301]
[22.99666405 -179.59880066]
[36.35561752 -172.71122742]
[48.50656128 -163.86503601]
[59.16465759 -153.26760864]
[68.08006287 -141.16735840]
[75.04379272 -127.84794617]
[79.89260864 -113.62158203]
[82.51283264 -98.82175446]
[82.84306335 -83.79540253]
[80.87554932 -68.89475250]
[76.65641022 -54.46910477]
[70.28454590 -40.85661697]
[61.90933228 -28.37638283]
[51.72709274 -17.32095909]
[39.97650909 -7.94949961]
[47.43141937 5.06680965]
[60.47087097 12.26555824]
[60.61540222 28.08610535]
[68.07031250 41.10241318]
[75.52522278 54.11872482]
[119.45209503 62.94771194]
[131.48970032 96.39839172]
[146.19766235 93.45290375]
[160.90562439 90.50742340]
[166.45043945 81.05541229]
[176.10021973 76.34528351]
[186.52612305 77.73081207]
[194.27873230 84.50788879]
[209.09649658 82.17678833]
[223.91424561 79.84568024]
[236.34432983 70.05773926]
[250.11940002 75.72312927]
[264.93716431 73.39202881]
[272.98944092 68.94090271]
[280.08712769 71.16989899]
[294.95019531 69.14756775]
[309.81323242 67.12523651]
[322.44424438 57.59800720]
[336.09848022 63.54874420]
[346.91503906 51.70048141]
[362.91217041 52.91367340]
[371.81820679 66.25765991]
[366.80120850 81.49607849]
[351.70980835 86.93931580]
[338.12081909 78.41178894]
[326.55288696 87.79436493]
[311.83557129 81.98828125]
[296.97250366 84.01061249]
[282.10946655 86.03295135]
[267.26824951 88.20978546]
[252.45050049 90.54089355]
[241.08029175 100.16209412]
[226.24536133 94.66343689]
[211.42759705 96.99454498]
[196.60983276 99.32564545]
[182.57408142 112.57054138]
[163.85110474 105.21538544]
[149.14314270 108.16086578]
[134.43518066 111.10635376]
[148.75477600 115.57282257]
[163.57762146 113.27426910]
[177.97436523 117.48542023]
[189.22192383 127.40974426]
[195.19288635 141.17010498]
[194.75785828 156.16380310]
[187.99914551 169.55482483]
[176.19509888 178.81033325]
[161.57841492 182.17970276]
[146.91377258 179.02560425]
[134.97492981 169.94465637]
[128.02005005 156.65443420]
[127.36402893 141.67210388]
[120.17264557 128.50836182]
[120.17264557 143.50836182]
[120.17264557 158.50836182]
[120.17264557 173.50836182]
[120.17264557 188.50836182]
[120.17264557 203.50836182]
[120.17264557 218.50836182]
[120.17264557 233.50836182]
[120.17264557 248.50836182]
[120.17264557 263.50836182]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[11 21]
[12 20]
[13 19]
[23 37]
[24 36]
[25 35]
[26 34]
[27 33]
[38 88]
[39 87]
[40 86]
[42 84]
[43 83]
[90 127]
[91 126]
[92 125]
[96 123]
[97 122]
[98 121]
[100 119]
[101 118]
[103 117]
[104 116]
[105 115]
[107 113]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
