%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:59 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGUUUAAACAAAACGAAUGAUUUCGACUCAUUAAAUUAUGAUAAUCAUAUUUACCAAAUGCCxxxxxxxxxxUCAACACAACCACCCACAGCCUAAUUAUUAGCAUCAUCCCUCUACUAUUUUUUAACCAAACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[91.21732330 277.39434814]
[90.90527344 262.39761353]
[90.59321594 247.40084839]
[90.28115845 232.40409851]
[89.96910095 217.40734863]
[89.65704346 202.41058350]
[89.34498596 187.41383362]
[89.03293610 172.41708374]
[88.72087860 157.42033386]
[74.49409485 152.66651917]
[65.22914886 164.46315002]
[55.96419907 176.25979614]
[46.69924927 188.05642700]
[47.17860794 204.09231567]
[34.84745026 214.35498047]
[19.16518593 210.97177124]
[12.16190434 196.53800964]
[19.20992470 182.12602234]
[34.90261078 178.79148865]
[44.16755676 166.99484253]
[53.43250656 155.19819641]
[62.69745636 143.40156555]
[55.18284988 132.06683350]
[50.81880569 119.71682739]
[36.24610138 123.27159119]
[21.67339897 126.82634735]
[7.10069561 130.38111877]
[-7.47200680 133.93586731]
[-14.23578453 148.03500366]
[-28.50113678 154.44075012]
[-43.53239822 150.12854004]
[-52.23226929 137.13446045]
[-50.49293518 121.59391022]
[-39.13565826 110.84466553]
[-23.52299500 109.96219635]
[-11.02676868 119.36316681]
[3.54593396 115.80841064]
[18.11863708 112.25364685]
[32.69134140 108.69888306]
[47.26404190 105.14411926]
[47.65750122 91.76557159]
[51.39076614 78.91242981]
[38.61341095 71.05500031]
[22.80507660 70.41690063]
[16.01670074 57.15917587]
[3.23934317 49.30175018]
[-9.53801441 41.44432449]
[-22.31537056 33.58689880]
[-35.09272766 25.72947121]
[-51.75212479 22.58290100]
[-53.34030151 5.70350361]
[-37.56020737 -0.49528918]
[-27.23530388 12.95211411]
[-14.45794582 20.80953979]
[-1.68058836 28.66696548]
[11.09676933 36.52439117]
[23.87412643 44.38181686]
[38.76853561 44.45790482]
[46.47083664 58.27764511]
[59.24819183 66.13507080]
[76.00679779 52.75733566]
[96.69496918 47.11692047]
[117.92443085 50.13761139]
[136.21826172 61.32467651]
[147.91789246 51.93751526]
[159.61750793 42.55035400]
[171.31713867 33.16319275]
[163.17483521 20.54943466]
[156.37266541 7.16532135]
[150.98272705 -6.84726906]
[147.06217957 -21.33979416]
[144.65255737 -36.15862656]
[143.77943420 -51.14667892]
[144.45202637 -66.14506531]
[146.66323853 -80.99479675]
[150.38961792 -95.53845978]
[155.59165955 -109.62188721]
[162.21423340 -123.09577179]
[170.18710327 -135.81730652]
[179.42578125 -147.65161133]
[189.83233643 -158.47323608]
[201.29643250 -168.16749573]
[213.69654846 -176.63159180]
[226.90124512 -183.77581787]
[240.77053833 -189.52444458]
[255.15742493 -193.81652832]
[269.90936279 -196.60655212]
[284.86999512 -197.86497498]
[299.88070679 -197.57843018]
[314.78240967 -195.74996948]
[329.41711426 -192.39895630]
[343.62969971 -187.56092834]
[357.26950073 -181.28718567]
[370.19192505 -173.64421082]
[382.25997925 -164.71301270]
[393.34576416 -154.58830261]
[403.33172607 -143.37739563]
[412.11199951 -131.19911194]
[419.59356689 -118.18257141]
[425.69708252 -104.46575165]
[430.35784912 -90.19405365]
[433.52645874 -75.51876831]
[435.16931152 -60.59546661]
[435.26901245 -45.58233643]
[433.82449341 -30.63852692]
[430.85107422 -15.92245293]
[426.38027954 -1.59011209]
[420.45950317 12.20656395]
[413.15148926 25.32132339]
[404.53369141 37.61514282]
[394.69750977 48.95769882]
[383.74719238 59.22875595]
[371.79882812 68.31943512]
[358.97906494 76.13336945]
[345.42379761 82.58773041]
[331.27673340 87.61408997]
[316.68780518 91.15917206]
[301.81170654 93.18540192]
[286.80612183 93.67128754]
[271.83007812 92.61167908]
[257.04238892 90.01782227]
[242.59977722 85.91720581]
[228.65536499 80.35330200]
[215.35693359 73.38507843]
[202.84548950 65.08641815]
[191.25366211 55.54528427]
[180.70429993 44.86281586]
[169.00466919 54.24997711]
[157.30505371 63.63713837]
[145.60542297 73.02429962]
[150.15994263 81.76412964]
[153.04293823 91.26300049]
[154.13006592 101.20183563]
[153.35775757 111.24166870]
[150.72633362 121.03517914]
[146.30087280 130.23872375]
[140.20985413 138.52439880]
[132.64151001 145.59167480]
[123.83814240 151.17828369]
[114.08835602 155.06990051]
[103.71762848 157.10827637]
[104.02968597 172.10502625]
[104.34174347 187.10177612]
[104.65380096 202.09852600]
[104.96585846 217.09529114]
[105.27790833 232.09204102]
[105.58996582 247.08879089]
[105.90202332 262.08554077]
[106.21408081 277.08230591]
[108.80507660 296.29003906]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 149]
[2 148]
[3 147]
[4 146]
[5 145]
[6 144]
[7 143]
[8 142]
[9 141]
[10 22]
[11 21]
[12 20]
[13 19]
[24 40]
[25 39]
[26 38]
[27 37]
[28 36]
[42 60]
[43 59]
[45 57]
[46 56]
[47 55]
[48 54]
[49 53]
[64 130]
[65 129]
[66 128]
[67 127]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
