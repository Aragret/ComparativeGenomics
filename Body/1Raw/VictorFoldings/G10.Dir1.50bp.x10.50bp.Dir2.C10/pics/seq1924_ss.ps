%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:51 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCCUUACUACCAGACAACCUUAGCCAAACCAUUUACCCAAAUAAAGUAUAGGCGAUAGAAAUxxxxxxxxxxAAAAAGAGUAAUAAACUUCGCCUUAAUUUUAAUAAUCAACACCCUCCUAGCCUUACUACUACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[116.89002228 299.11596680]
[116.89002228 284.11596680]
[116.89002228 269.11596680]
[116.89002228 254.11596680]
[116.89002228 239.11596680]
[116.89002228 224.11596680]
[116.89002228 209.11596680]
[116.89002228 194.11596680]
[116.89002228 179.11596680]
[116.89002228 164.11596680]
[113.75385284 160.34048462]
[112.31941223 155.16404724]
[113.18678284 149.39195251]
[106.09037781 136.17675781]
[98.99397278 122.96157837]
[84.44702148 119.30287170]
[71.94298553 127.58834839]
[59.43894577 135.87382507]
[56.10575867 141.69897461]
[51.07166672 144.50001526]
[46.24709320 144.23043823]
[33.41343689 151.99557495]
[28.19943810 167.16770935]
[13.03876781 172.41496277]
[-0.43860245 163.71208191]
[-1.89398825 147.73518372]
[9.78905773 136.74037170]
[25.64830208 139.16192627]
[38.48195648 131.39678955]
[51.15347290 123.36978912]
[63.65750885 115.08431244]
[76.16154480 106.79883575]
[75.08725739 99.37617493]
[60.24193192 101.52475739]
[46.78705597 108.15546417]
[36.32322311 97.40798950]
[43.31134796 84.13523102]
[58.09335327 86.67943573]
[72.93867493 84.53085327]
[71.86438751 77.10819244]
[57.52432251 72.70789337]
[43.18426132 68.30759430]
[28.84420204 63.90729141]
[12.99146271 68.10523224]
[1.62303281 56.28614426]
[6.43377781 40.60849380]
[22.47481537 37.20009995]
[33.24450302 49.56723022]
[47.58456421 53.96753311]
[61.92462540 58.36783218]
[76.26468658 62.76813126]
[89.09834290 55.00299835]
[91.85458374 40.25839996]
[94.61082458 25.51380348]
[89.54103851 10.52688026]
[99.48522949 -0.56196058]
[102.24147034 -15.30655670]
[100.73828888 -24.38048744]
[105.20864105 -30.32423210]
[108.26703644 -45.00912857]
[111.32543182 -59.69402695]
[114.38382721 -74.37892151]
[117.44222260 -89.06381989]
[120.50062561 -103.74871826]
[110.31587982 -92.73641205]
[97.75049591 -84.54426575]
[83.56514740 -79.66822052]
[68.61856079 -78.40344238]
[53.81556320 -80.82649994]
[40.05227280 -86.79071808]
[28.16187859 -95.93503571]
[18.86418152 -107.70587921]
[12.72203827 -121.39069366]
[10.10727119 -136.16102600]
[11.17817116 -151.12275696]
[15.86990833 -165.37013245]
[23.89846230 -178.04066467]
[34.77780914 -188.36730957]
[47.84934616 -195.72496033]
[62.32176971 -199.66816711]
[77.31896210 -199.95825195]
[91.93305206 -196.57763672]
[105.27933502 -189.73098755]
[116.54988098 -179.83276367]
[125.06240845 -167.48217773]
[130.30158997 -153.42689514]
[131.95027161 -138.51777649]
[129.90827942 -123.65607452]
[139.31214905 -135.34228516]
[148.71600342 -147.02848816]
[148.42637634 -163.06893921]
[160.87808228 -173.18499756]
[176.51922607 -169.61650085]
[183.35127258 -155.10089111]
[176.13323975 -140.77330017]
[160.40220642 -137.62463379]
[150.99835205 -125.93843079]
[141.59449768 -114.25222015]
[135.18551636 -100.69032288]
[132.12712097 -86.00542450]
[129.06872559 -71.32052612]
[126.01033020 -56.63563156]
[122.95193481 -41.95073318]
[119.89353943 -27.26583672]
[116.98606873 -12.55031395]
[114.22982788 2.19428229]
[119.49675751 16.12657356]
[109.35542297 28.27004623]
[106.59918213 43.01464462]
[103.84293365 57.75923920]
[123.41978455 71.59320068]
[129.97903442 91.29537964]
[124.34849548 107.96505737]
[112.20915222 115.86517334]
[119.30555725 129.08035278]
[126.40196228 142.29554749]
[126.84538269 127.30210114]
[130.55644226 112.76840973]
[137.35552979 99.39782715]
[146.91360474 87.83741760]
[158.76812744 78.64663696]
[172.34538269 72.27027130]
[186.98831177 69.01690674]
[201.98829651 69.04397583]
[216.61938477 72.35017395]
[230.17355347 78.77550507]
[241.99481201 88.00901031]
[251.51110840 99.60385132]
[258.26187134 112.99888611]
[261.92044067 127.54586792]
[262.30975342 142.54081726]
[259.41094971 157.25805664]
[253.36433411 170.98533630]
[244.46250916 183.05834961]
[233.13629150 192.89282227]
[219.93380737 200.01281738]
[205.49397278 204.07376099]
[190.51560974 204.87913513]
[175.72358704 202.38996887]
[161.83375549 196.72671509]
[149.51829529 188.16343689]
[139.37322998 177.11457825]
[131.89001465 164.11596680]
[131.89001465 179.11596680]
[131.89001465 194.11596680]
[131.89001465 209.11596680]
[131.89001465 224.11596680]
[131.89001465 239.11596680]
[131.89001465 254.11596680]
[131.89001465 269.11596680]
[131.89001465 284.11596680]
[131.89001465 299.11596680]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 152]
[2 151]
[3 150]
[4 149]
[5 148]
[6 147]
[7 146]
[8 145]
[9 144]
[10 143]
[13 116]
[14 115]
[15 114]
[16 32]
[17 31]
[18 30]
[21 29]
[22 28]
[40 51]
[41 50]
[42 49]
[43 48]
[52 110]
[53 109]
[54 108]
[56 106]
[57 105]
[59 104]
[60 103]
[61 102]
[62 101]
[63 100]
[64 99]
[88 98]
[89 97]
[90 96]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
