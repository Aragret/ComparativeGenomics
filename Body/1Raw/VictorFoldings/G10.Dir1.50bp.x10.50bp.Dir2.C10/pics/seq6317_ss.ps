%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:20 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGAACGACCACAUCUACAACGUUAUCGUCACAGCCCAUGCAUUUGUAAUAAUCUUCUUCAUAGUxxxxxxxxxxUUGGCAGCCUAGCAUUAGCAGGAAUACCUUUCCUCACAGGUUUCUACUCCAAAGACCACAUCCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[123.44384003 280.39236450]
[123.44384003 265.39236450]
[123.44384003 250.39236450]
[123.44384003 235.39236450]
[123.44384003 220.39236450]
[123.44384003 205.39236450]
[123.44384003 190.39236450]
[123.44384003 175.39236450]
[123.44384003 160.39236450]
[123.44384003 145.39236450]
[94.59211731 141.26272583]
[78.38933563 123.79292297]
[65.99167633 132.23674011]
[53.59402084 140.68055725]
[41.19636154 149.12437439]
[38.12749481 164.39591980]
[25.43421936 172.78254700]
[10.89405727 169.76272583]
[-1.50360036 178.20654297]
[-0.98868865 193.62532043]
[-8.91114902 206.86306763]
[-22.74295425 213.69569397]
[-38.07042313 211.94291687]
[-50.00261688 202.16404724]
[-54.73201752 187.47949219]
[-50.74948883 172.57502747]
[-39.32584381 162.20661926]
[-24.10632133 159.68280029]
[-9.94741917 165.80888367]
[2.45023847 157.36506653]
[4.96542072 142.72917175]
[17.41812325 133.98933411]
[32.75254440 136.72673035]
[45.15019989 128.28289795]
[57.54785919 119.83908844]
[69.94551849 111.39526367]
[64.79228210 92.82395935]
[71.33335114 72.50499725]
[89.53987885 57.76578140]
[114.90982056 55.11180878]
[139.51139832 67.61280823]
[135.60464478 53.13050079]
[122.18646240 45.21909714]
[118.43076324 30.47632217]
[126.05577087 17.73289680]
[122.14901733 3.25058746]
[118.24226379 -11.23172188]
[114.33551788 -25.71403122]
[99.43932343 -23.76804733]
[84.41666412 -23.82495880]
[69.53564453 -25.88375092]
[55.06182480 -29.90768242]
[41.25351334 -35.82493973]
[28.35713005 -43.52992630]
[16.60283279 -52.88513184]
[6.20038509 -63.72360611]
[-2.66456580 -75.85192108]
[-9.83381557 -89.05364227]
[-15.17942142 -103.09315491]
[-18.60598373 -117.71991730]
[-20.05235100 -132.67288208]
[-19.49271202 -147.68522644]
[-16.93705368 -162.48901367]
[-12.43098450 -176.82005310]
[-6.05492163 -190.42260742]
[2.07734752 -203.05389404]
[11.82069302 -214.48852539]
[23.00123215 -224.52241516]
[35.41943741 -232.97650146]
[48.85368729 -239.69992065]
[63.06423950 -244.57267761]
[77.79747772 -247.50779724]
[92.79048157 -248.45294189]
[107.77568054 -247.39118958]
[122.48564911 -244.34153748]
[136.65785217 -239.35838318]
[150.03939819 -232.53065491]
[162.39146423 -223.98020935]
[173.49360657 -213.85964966]
[183.14768982 -202.34956360]
[191.18145752 -189.65538025]
[197.45149231 -176.00364685]
[201.84594727 -161.63798523]
[204.28636169 -146.81475830]
[204.72918701 -131.79852295]
[203.16653442 -116.85726166]
[199.62629700 -102.25759888]
[194.17163086 -88.26009369]
[186.89988708 -75.11455536]
[177.94085693 -63.05556870]
[167.45440674 -52.29834747]
[155.62768555 -43.03486633]
[142.67175293 -35.43043900]
[128.81782532 -29.62078285]
[132.72457886 -15.13847446]
[136.63133240 -0.65616477]
[140.53808594 13.82614517]
[153.53756714 21.00590134]
[157.70587158 35.63736725]
[150.08694458 49.22374725]
[153.99369812 63.70605469]
[167.10890198 70.98558807]
[181.46575928 66.64041138]
[195.82261658 62.29523087]
[210.17947388 57.95005417]
[224.53634644 53.60487366]
[233.34513855 40.19649124]
[249.33300781 38.86702728]
[260.23544312 50.63633728]
[257.68899536 66.47601318]
[243.64712524 74.23520660]
[228.88151550 67.96173859]
[214.52465820 72.30691528]
[200.16780090 76.65209198]
[185.81094360 80.99726868]
[171.45407104 85.34244537]
[170.99832153 92.82858276]
[185.97058105 93.74033356]
[185.05860901 108.71257782]
[170.08680725 107.80086517]
[169.63105774 115.28700256]
[183.35476685 121.34172821]
[196.69842529 113.42173767]
[212.14578247 114.89105988]
[223.75700378 125.18470764]
[227.06733704 140.34457397]
[220.80389404 154.54136658]
[207.37509155 162.31613159]
[191.94459534 160.67932129]
[180.44572449 150.26031494]
[177.30003357 135.06544495]
[163.57632446 129.01071167]
[157.29321289 133.10612488]
[166.43411255 144.99914551]
[175.57501221 156.89216614]
[184.71591187 168.78518677]
[196.70307922 177.80226135]
[196.19882202 192.79379272]
[183.63281250 200.98498535]
[169.71298218 195.39585876]
[166.30111694 180.78816223]
[159.10972595 167.62442017]
[151.91835022 154.46069336]
[144.72695923 141.29695129]
[138.44384766 145.39236450]
[138.44384766 160.39236450]
[138.44384766 175.39236450]
[138.44384766 190.39236450]
[138.44384766 205.39236450]
[138.44384766 220.39236450]
[138.44384766 235.39236450]
[138.44384766 250.39236450]
[138.44384766 265.39236450]
[138.44384766 280.39236450]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 154]
[2 153]
[3 152]
[4 151]
[5 150]
[6 149]
[7 148]
[8 147]
[9 146]
[10 145]
[12 36]
[13 35]
[14 34]
[15 33]
[18 30]
[19 29]
[41 101]
[42 100]
[45 97]
[46 96]
[47 95]
[48 94]
[102 116]
[103 115]
[104 114]
[105 113]
[106 112]
[121 132]
[122 131]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
