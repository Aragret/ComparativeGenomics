%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:57 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGAAGGAACAAGCAUCAAGCACGCAGCAAUGCAGCUCAAAACGCUUAGCCUAGCCACACCCCxxxxxxxxxxUCAAAGCCAUACUAUUUAUGUGCUCCGGGUCCAUCAUCCACAACCUUAACAAUGAACAAGCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[111.04080200 306.87774658]
[111.04080200 291.87774658]
[111.04080200 276.87774658]
[111.04080200 261.87774658]
[111.04080200 246.87776184]
[111.04080200 231.87776184]
[111.04080200 216.87776184]
[111.04080200 201.87776184]
[111.04080200 186.87776184]
[111.04080200 171.87776184]
[109.01847076 157.01470947]
[105.01073456 142.56002808]
[101.00299072 128.10533142]
[96.99524689 113.65065002]
[94.03804779 112.95439148]
[91.24497986 111.61307526]
[88.75751495 109.66608429]
[86.70749664 107.18395233]
[71.74724579 108.27526093]
[56.78699875 109.36656952]
[41.82675171 110.45787811]
[34.58754730 126.41062164]
[20.36110878 136.48077393]
[3.08568263 137.99017334]
[-12.51137447 130.61552429]
[-22.20721245 116.45236969]
[-37.10911560 118.16505432]
[-52.01101685 119.87774658]
[-60.66164780 129.50169373]
[-73.15304565 130.58981323]
[-82.70453644 123.10140228]
[-97.63883972 124.50370789]
[-112.57315063 125.90601349]
[-125.62602997 135.83346558]
[-140.64321899 129.24438477]
[-142.17633057 112.91706085]
[-128.64822388 103.64763641]
[-113.97545624 110.97170258]
[-99.04114532 109.56940460]
[-84.10683441 108.16709900]
[-70.40445709 97.24716949]
[-53.72370529 104.97584534]
[-38.82180405 103.26315308]
[-23.91990089 101.55046844]
[-20.14085197 89.42122650]
[-12.00801277 79.60034180]
[-0.71300179 73.58258057]
[12.06789398 72.30139923]
[24.42247772 75.98426056]
[34.48873138 84.11325836]
[40.73543930 95.49763489]
[55.69569016 94.40632629]
[70.65593719 93.31501007]
[85.61618805 92.22370148]
[97.31581116 82.83654022]
[93.86743927 67.39570618]
[104.93375397 57.42646027]
[109.24134064 43.05827713]
[104.56775665 25.27801895]
[117.72795105 13.71042728]
[121.73569489 -0.74426156]
[125.74343109 -15.19894981]
[125.02223206 -24.37128448]
[129.98782349 -29.91101074]
[134.29541016 -44.27919388]
[138.60299683 -58.64737701]
[125.23033142 -65.53842926]
[113.35173798 -74.76955414]
[103.37178802 -86.02634430]
[95.63040924 -98.92539978]
[90.39125824 -113.02738190]
[87.83277893 -127.85198212]
[88.04211426 -142.89428711]
[91.01213074 -157.64195251]
[96.64167786 -171.59268188]
[104.73901367 -184.27131653]
[115.02834320 -195.24603271]
[127.15921783 -204.14302063]
[140.71846008 -210.65927124]
[155.24426270 -214.57283020]
[170.24185181 -215.75042725]
[185.20043945 -214.15191650]
[199.61054993 -209.83175659]
[212.98135376 -202.93710327]
[224.85745239 -193.70278931]
[234.83436584 -182.44329834]
[242.57226562 -169.54216003]
[247.80761719 -155.43876648]
[250.36210632 -140.61347961]
[250.14871216 -125.57123566]
[247.17471313 -110.82437134]
[241.54141235 -96.87516022]
[233.44065857 -84.19870758]
[223.14837646 -73.22676849]
[211.01510620 -64.33303833]
[197.45410156 -57.82044601]
[182.92724609 -53.91079712]
[167.92933655 -52.73725510]
[152.97117615 -54.33979416]
[148.66358948 -39.97161102]
[144.35600281 -25.60342598]
[140.19812012 -11.19120979]
[136.19038391 3.26347876]
[132.18264771 17.71816635]
[137.87393188 28.43808365]
[134.60523987 40.54323196]
[123.60952759 47.36585999]
[119.30194092 61.73404312]
[123.05841827 76.14717102]
[111.68399048 87.14412689]
[119.12902069 74.12216187]
[131.10278320 65.08728790]
[145.66786194 61.50139999]
[160.46752930 63.94471359]
[173.10711670 72.02188873]
[181.54147339 84.42598724]
[184.40585327 99.14996338]
[181.23680115 113.81137848]
[172.54707336 126.03793335]
[159.74272156 133.85130310]
[144.89558411 135.98722839]
[130.40798950 132.10011292]
[118.62412262 122.81891632]
[111.44993591 109.64290619]
[115.45767975 124.09759521]
[119.46541595 138.55227661]
[123.47315979 153.00697327]
[128.37231445 138.82958984]
[138.53138733 127.79359436]
[152.25563049 121.74003601]
[167.25549316 121.67879486]
[181.02870178 127.62007904]
[191.27755737 138.57275391]
[196.29232788 152.70965576]
[195.23641968 167.67243958]
[188.28601074 180.96498108]
[176.60055542 190.36979675]
[162.12947083 194.31791687]
[147.28684998 192.15074158]
[134.54878235 184.22978210]
[126.04080200 171.87776184]
[126.04080200 186.87776184]
[126.04080200 201.87776184]
[126.04080200 216.87776184]
[126.04080200 231.87776184]
[126.04080200 246.87776184]
[126.04080200 261.87774658]
[126.04080200 276.87774658]
[126.04080200 291.87774658]
[126.04080200 306.87774658]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[11 127]
[12 126]
[13 125]
[14 124]
[18 54]
[19 53]
[20 52]
[21 51]
[26 44]
[27 43]
[28 42]
[31 40]
[32 39]
[33 38]
[55 110]
[57 108]
[58 107]
[60 104]
[61 103]
[62 102]
[64 101]
[65 100]
[66 99]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
