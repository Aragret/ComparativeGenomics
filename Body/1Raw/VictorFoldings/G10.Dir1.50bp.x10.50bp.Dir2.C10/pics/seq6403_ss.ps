%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:28 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGAGGCUUUGGCAACUGACUAGUUCCCCUAAUAAUCGGUGCCCCCGAUAUGGCGUUUCCCCGxxxxxxxxxxUCUAUAAACCUAGCCAUGGCCAUCCCCUUAUGAGCGGGCACAGUGAUUAUAGGCUUUCGCCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[35.76425552 456.56329346]
[35.76425552 441.56329346]
[35.76425552 426.56329346]
[35.76425552 411.56329346]
[35.76425552 396.56329346]
[35.76425552 381.56329346]
[35.76425552 366.56329346]
[35.76425552 351.56329346]
[35.76425552 336.56329346]
[35.76425552 321.56329346]
[22.59567261 314.38076782]
[9.98454475 322.50231934]
[-2.62658286 330.62387085]
[-4.52580309 334.69256592]
[-7.35888004 337.61572266]
[-10.63733578 339.23855591]
[-13.87359238 339.58587646]
[-16.64104652 338.84524536]
[-29.88363266 345.89038086]
[-36.03938293 352.72839355]
[-43.47580719 352.94107056]
[-56.86209106 359.70916748]
[-70.24837494 366.47729492]
[-83.63465881 373.24542236]
[-92.15139771 387.25958252]
[-108.53808594 386.62051392]
[-115.93750763 371.98559570]
[-106.73777008 358.41000366]
[-90.40277863 359.85913086]
[-77.01649475 353.09100342]
[-63.63020706 346.32290649]
[-50.24392319 339.55477905]
[-36.92876816 332.64776611]
[-23.68618202 325.60263062]
[-10.74812508 318.01272583]
[1.86300302 309.89120483]
[14.47413158 301.76965332]
[27.89240456 292.97753906]
[40.99235153 293.96954346]
[46.47938538 280.00915527]
[51.96641541 266.04876709]
[57.45344543 252.08837891]
[62.94047928 238.12799072]
[68.42751312 224.16760254]
[73.91454315 210.20721436]
[79.10995483 196.13569641]
[84.01150513 181.95913696]
[88.91305542 167.78257751]
[93.81461334 153.60601807]
[98.71616364 139.42945862]
[103.61771393 125.25289917]
[91.40970612 123.21345520]
[81.95622253 115.81430817]
[77.34059906 105.13671875]
[78.36164093 93.92288208]
[84.41712952 84.87415314]
[93.73529053 80.00026703]
[94.67091370 65.02947998]
[95.60654449 50.05868530]
[96.54217529 35.08789444]
[97.47780609 20.11710358]
[97.94584656 5.12440681]
[97.94584656 -9.87559319]
[97.94584656 -24.87559319]
[97.94584656 -39.87559509]
[83.44832611 -44.11807251]
[70.73404694 -52.27428436]
[60.83369827 -63.68304062]
[54.54985809 -77.41948700]
[52.39192581 -92.37007904]
[54.53483582 -107.32282257]
[60.80487442 -121.06557465]
[70.69375610 -132.48426819]
[83.39983368 -140.65325928]
[97.89308929 -144.91029358]
[112.99860382 -144.91029358]
[127.49185181 -140.65325928]
[140.19793701 -132.48426819]
[150.08682251 -121.06557465]
[156.35685730 -107.32282257]
[158.49977112 -92.37007904]
[156.34182739 -77.41948700]
[150.05799866 -63.68304062]
[140.15763855 -52.27428436]
[127.44336700 -44.11807251]
[112.94584656 -39.87559509]
[112.94584656 -24.87559319]
[112.94584656 -9.87559319]
[112.94584656 5.12440681]
[115.22753143 7.89232922]
[116.24692535 11.92500973]
[115.41448212 16.60041618]
[112.44859314 21.05273056]
[111.51296234 36.02352142]
[110.57733917 50.99431610]
[109.64170837 65.96510315]
[108.70607758 80.93589783]
[120.78141785 89.60927582]
[124.92277527 105.44537354]
[139.41836548 101.58821869]
[153.87306213 97.58047485]
[168.28527832 93.42258453]
[182.69749451 89.26470184]
[190.11682129 75.31016541]
[205.25463867 70.76903534]
[219.12995911 78.33547974]
[223.51078796 93.52046967]
[215.79806519 107.31501007]
[200.56761169 111.53505707]
[186.85537720 103.67691803]
[172.44316101 107.83480072]
[158.03094482 111.99269104]
[152.43986511 116.90038300]
[143.27552795 116.08380890]
[128.77993774 119.94097137]
[117.79426575 130.15444946]
[112.89271545 144.33100891]
[107.99116516 158.50756836]
[103.08961487 172.68412781]
[98.18806458 186.86068726]
[93.28651428 201.03724670]
[94.17704010 207.69415283]
[91.87564087 212.97949219]
[87.87493134 215.69424438]
[82.38790131 229.65463257]
[76.90087128 243.61502075]
[71.41383362 257.57540894]
[65.92680359 271.53579712]
[60.43977356 285.49618530]
[54.95274353 299.45657349]
[65.91764832 289.22082520]
[80.45429230 285.52136230]
[94.97822571 289.27038574]
[105.90814972 299.54348755]
[110.54896545 313.80752563]
[107.75634766 328.54528809]
[98.21888733 340.12271118]
[84.28833771 345.68505859]
[69.39968872 343.86077881]
[57.22416687 335.09970093]
[50.76425552 321.56329346]
[50.76425552 336.56329346]
[50.76425552 351.56329346]
[50.76425552 366.56329346]
[50.76425552 381.56329346]
[50.76425552 396.56329346]
[50.76425552 411.56329346]
[50.76425552 426.56329346]
[50.76425552 441.56329346]
[50.76425552 456.56329346]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[11 37]
[12 36]
[13 35]
[18 34]
[19 33]
[21 32]
[22 31]
[23 30]
[24 29]
[39 130]
[40 129]
[41 128]
[42 127]
[43 126]
[44 125]
[45 124]
[46 121]
[47 120]
[48 119]
[49 118]
[50 117]
[51 116]
[57 97]
[58 96]
[59 95]
[60 94]
[61 93]
[62 89]
[63 88]
[64 87]
[65 86]
[99 115]
[100 114]
[101 112]
[102 111]
[103 110]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
