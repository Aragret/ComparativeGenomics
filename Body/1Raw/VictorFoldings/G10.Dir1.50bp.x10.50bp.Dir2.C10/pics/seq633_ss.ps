%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:04 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGUACUAAUCUCAUCAAUACAACCCCCGCCCAUCCUACCCAGCACACACACACCGCUGCUAAxxxxxxxxxxACGCCACUUAUCCAGUGAACCACUAUCACGAAAAAAACUCUACCUCUCUAUACUAAUCUCCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[-20.08652115 228.37631226]
[-27.36149216 221.16227722]
[-38.66049576 231.02799988]
[-49.95950317 240.89372253]
[-55.26577759 255.79855347]
[-69.94174957 258.34121704]
[-81.24075317 268.20693970]
[-92.53975677 278.07266235]
[-103.83876038 287.93838501]
[-115.13777161 297.80410767]
[-126.43677521 307.66983032]
[-120.47846222 321.57501221]
[-119.11073303 336.64102173]
[-122.46756744 351.39184570]
[-130.22010803 364.38235474]
[-141.60882568 374.33987427]
[-155.51799011 380.28884888]
[-170.58489990 381.64648438]
[-185.33348083 378.27978516]
[-198.31878662 370.51852417]
[-208.26867676 359.12313843]
[-214.20834351 345.20999146]
[-215.55587769 330.14218140]
[-212.17927551 315.39587402]
[-204.40934753 302.41574097]
[-193.00729370 292.47351074]
[-179.09016418 286.54315186]
[-164.02143860 285.20571899]
[-149.27738953 288.59219360]
[-136.30249023 296.37081909]
[-125.00349426 286.50509644]
[-113.70448303 276.63937378]
[-102.40547943 266.77365112]
[-91.10647583 256.90792847]
[-79.80747223 247.04222107]
[-75.30937958 232.84304810]
[-59.82522583 229.59472656]
[-48.52621841 219.72900391]
[-37.22721481 209.86328125]
[-52.91438675 186.70893860]
[-64.73079681 161.35971069]
[-72.37733459 134.45726013]
[-75.66044617 106.68259430]
[-74.49701691 78.73876953]
[-68.91650391 51.33312988]
[-59.06016159 25.15941238]
[-45.17749023 0.88015145]
[-27.61990738 -20.89006424]
[-38.05971909 -31.66087151]
[-48.49953461 -42.43167877]
[-58.93934631 -53.20248795]
[-73.60295105 -48.81646729]
[-88.62299347 -51.75873566]
[-100.54797363 -61.35318375]
[-106.63761902 -75.39508057]
[-105.49256897 -90.65769958]
[-97.37595367 -103.63379669]
[-84.15291595 -111.34156799]
[-68.86199951 -112.00981903]
[-55.01695633 -105.48499298]
[-45.79927444 -93.26644897]
[-43.32710266 -78.16191101]
[-48.16853714 -63.64229965]
[-37.72872543 -52.87149429]
[-27.28891182 -42.10068512]
[-16.84910011 -31.32987595]
[-7.38174009 -39.17761993]
[2.61110115 -46.34428787]
[13.08052349 -52.79480743]
[23.97529411 -58.49761200]
[35.24209976 -63.42479324]
[46.82580185 -67.55223846]
[58.66971588 -70.85975647]
[70.71588898 -73.33115387]
[82.90535736 -74.95433807]
[95.17848969 -75.72137451]
[107.47521210 -75.62850189]
[119.73535156 -74.67617035]
[131.89891052 -72.86904907]
[143.90637207 -70.21597290]
[155.69898987 -66.72993469]
[167.21902466 -62.42798996]
[178.41011047 -57.33118820]
[189.21749878 -51.46446991]
[199.58830261 -44.85654831]
[208.60581970 -56.84337997]
[217.62335205 -68.83021545]
[226.64088440 -80.81704712]
[225.82801819 -96.83949280]
[237.94300842 -107.35646057]
[253.69226074 -104.30023193]
[260.99432373 -90.01528931]
[254.24763489 -75.45980835]
[238.62771606 -71.79951477]
[229.61018372 -59.81268311]
[220.59266663 -47.82585144]
[211.57513428 -35.83901978]
[219.29931641 -29.10817528]
[226.61827087 -21.93877029]
[233.50711060 -14.35515499]
[239.94244385 -6.38309097]
[245.90240479 1.95034170]
[251.36676025 10.61683559]
[256.31695557 19.58695221]
[260.73614502 28.83022118]
[264.60934448 38.31524277]
[267.92340088 48.00979996]
[270.66702271 57.88096237]
[272.83093262 67.89519501]
[274.40774536 78.01848602]
[275.39212036 88.21644592]
[275.78070068 98.45442963]
[275.57220459 108.69766235]
[274.76730347 118.91135406]
[273.36874390 129.06080627]
[271.38125610 139.11154175]
[268.81161499 149.02941895]
[265.66854858 158.78074646]
[261.96273804 168.33241272]
[257.70675659 177.65196228]
[252.91506958 186.70773315]
[247.60394287 195.46896362]
[241.79142761 203.90591431]
[235.49726868 211.98989868]
[228.74284363 219.69348145]
[221.55110168 226.99047852]
[213.94645691 233.85609436]
[205.95475769 240.26702881]
[197.60313416 246.20149231]
[188.91998291 251.63932800]
[179.93476868 256.56207275]
[170.67803955 260.95297241]
[161.18121338 264.79718018]
[151.47656250 268.08157349]
[141.59706116 270.79501343]
[131.57626343 272.92828369]
[121.44820404 274.47412109]
[111.24728394 275.42733765]
[101.00815582 275.78460693]
[90.76560974 275.54479980]
[80.55442810 274.70867920]
[70.40929413 273.27908325]
[60.36468506 271.26089478]
[50.45470810 268.66094971]
[40.71303177 265.48806763]
[31.17274284 261.75308228]
[21.86625290 257.46862793]
[12.82517052 252.64926147]
[4.08021069 247.31138611]
[-4.33892345 241.47309875]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 39]
[3 38]
[4 37]
[6 35]
[7 34]
[8 33]
[9 32]
[10 31]
[11 30]
[48 66]
[49 65]
[50 64]
[51 63]
[85 97]
[86 96]
[87 95]
[88 94]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
