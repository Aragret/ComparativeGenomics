%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:45 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCUAUCAUCACCCGAUGAGGCAACCAGCCAGAACGCCUGAACGCAGGCACAUACUUCCUAUUxxxxxxxxxxACUAGAAAAGCUAUUACCUAAAACAAUUUCACAGCACCAAAUCUCCACCUCCAUCAUCACCCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[129.99540710 286.20248413]
[129.68742371 271.20565796]
[129.37944031 256.20880127]
[129.07147217 241.21197510]
[128.76348877 226.21513367]
[128.45552063 211.21829224]
[128.14753723 196.22145081]
[127.83956146 181.22460938]
[127.53157806 166.22778320]
[123.27873230 151.84329224]
[115.38225555 139.09004211]
[107.48577118 126.33678436]
[97.74329376 131.17288208]
[85.62887573 132.05484009]
[74.44057465 142.04594421]
[63.25228119 152.03704834]
[52.06398392 162.02813721]
[40.87568665 172.01924133]
[36.26077271 187.75564575]
[20.26347351 191.36375427]
[9.34044170 179.13185120]
[14.72835541 163.64306641]
[30.88459206 160.83093262]
[42.07288742 150.83984375]
[53.26118469 140.84873962]
[64.44947815 130.85765076]
[75.63777924 120.86655426]
[68.81420135 107.50845337]
[54.16147614 110.71744537]
[39.50875092 113.92644501]
[29.67825508 126.60480499]
[13.63537788 126.67976379]
[3.68684149 114.09381104]
[7.46431255 98.50181580]
[22.07003784 91.86462402]
[36.29975510 99.27371979]
[50.95248032 96.06472015]
[65.60520935 92.85572815]
[76.67938232 79.19158936]
[91.42523193 73.99738312]
[90.80941010 59.01002502]
[90.19358063 44.02267456]
[62.26453018 51.49319077]
[29.77160072 30.54916573]
[16.62997055 23.31746292]
[3.48833823 16.08576012]
[-9.65329361 8.85405731]
[-22.79492569 1.62235510]
[-39.17057800 2.49984741]
[-47.89036560 -11.38890266]
[-39.98411560 -25.75634003]
[-23.58510017 -25.82247543]
[-15.56322193 -11.51927662]
[-2.42159081 -4.28757381]
[10.72004032 2.94412851]
[23.86167145 10.17583084]
[37.00330353 17.40753365]
[43.49849319 13.65753365]
[32.35133743 3.62055659]
[38.45243073 -10.08260536]
[53.37025452 -8.51460552]
[56.48887634 6.15753365]
[62.98406601 2.40753365]
[63.29204178 -12.58930397]
[63.60002136 -27.58614159]
[54.34184647 -43.47062683]
[63.93247986 -58.13569641]
[63.93247986 -73.13569641]
[63.93247986 -88.13569641]
[49.87529373 -93.92049408]
[39.10541916 -104.64794922]
[33.26519012 -118.68219757]
[33.24519348 -133.88311768]
[39.04848099 -147.93269348]
[49.79009247 -158.68844604]
[63.83201218 -164.51020813]
[79.03295135 -164.51020813]
[93.07486725 -158.68844604]
[103.81648254 -147.93269348]
[109.61976624 -133.88311768]
[109.59976959 -118.68219757]
[103.75954437 -104.64794922]
[92.98966980 -93.92049408]
[78.93247986 -88.13569641]
[78.93247986 -73.13569641]
[78.93247986 -58.13569641]
[87.28014374 -49.32781601]
[87.36633301 -36.79131317]
[78.59686279 -27.27816391]
[78.28887939 -12.28132629]
[77.98090363 2.71551132]
[84.51425171 6.39863110]
[97.58094788 13.76487064]
[104.11429596 17.44799042]
[116.78581238 9.42099285]
[129.45732117 1.39399612]
[129.45529175 -14.03336716]
[137.81344604 -27.00042725]
[151.86476135 -33.36944199]
[167.12548828 -31.10807991]
[178.72599792 -20.93793678]
[182.96459961 -6.10426664]
[178.48878479 8.65956020]
[166.72674561 18.64245987]
[151.43173218 20.65892601]
[137.48432922 14.06551170]
[124.81280518 22.09250832]
[112.14128876 30.11950684]
[105.18093109 43.40684891]
[105.79676056 58.39419937]
[106.41258240 73.38155365]
[121.90750885 83.57672119]
[127.34867096 101.30883789]
[120.23902893 118.44029999]
[128.13551331 131.19355774]
[136.03199768 143.94680786]
[135.90141296 128.94738770]
[139.05047607 114.28166199]
[145.32705688 100.65798187]
[154.42800903 88.73436737]
[165.91377258 79.08670807]
[179.22958374 72.18098450]
[193.73231506 68.35073853]
[208.72149658 67.78095245]
[223.47314453 70.49916840]
[237.27479553 76.37407684]
[249.45980835 85.12194061]
[259.43969727 96.32024384]
[266.73242188 109.42810822]
[270.98574829 123.81245422]
[271.99423218 138.77850342]
[269.70919800 153.60343933]
[264.24099731 167.57121277]
[255.85372925 180.00720215]
[244.95249939 190.31074524]
[232.06382751 197.98420715]
[217.81021118 202.65696716]
[202.88011169 204.10331726]
[187.99461365 202.25341797]
[173.87269592 197.19660950]
[161.19642639 189.17712402]
[150.57804871 178.58230591]
[142.52841187 165.91979980]
[142.83639526 180.91664124]
[143.14437866 195.91348267]
[143.45234680 210.91030884]
[143.76033020 225.90715027]
[144.06831360 240.90399170]
[144.37628174 255.90083313]
[144.68426514 270.89767456]
[144.99223328 285.89450073]
[147.57801819 305.10293579]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 151]
[2 150]
[3 149]
[4 148]
[5 147]
[6 146]
[7 145]
[8 144]
[9 143]
[10 116]
[11 115]
[12 114]
[14 27]
[15 26]
[16 25]
[17 24]
[18 23]
[28 38]
[29 37]
[30 36]
[40 111]
[41 110]
[42 109]
[44 57]
[45 56]
[46 55]
[47 54]
[48 53]
[63 91]
[64 90]
[65 89]
[67 86]
[68 85]
[69 84]
[94 108]
[95 107]
[96 106]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
