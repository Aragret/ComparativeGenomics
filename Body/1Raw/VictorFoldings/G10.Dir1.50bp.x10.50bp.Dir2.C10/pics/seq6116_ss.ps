%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:14 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCUUAGUUAACAGCUAAGCACCCUAAUCAACUGGCUUCAAUCUACUUCUCCCGCCGCCGGGxxxxxxxxxxAUUAAUCAGUUCUUCAAAUAUCUACUCAUCUUCCUAAUUACCAUACUAAUCUUAGUUACCCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[-33.26789093 336.12881470]
[-44.86223602 329.19879150]
[-56.09706879 321.69992065]
[-66.94449615 313.65084839]
[-77.37760162 305.07153320]
[-87.37049866 295.98327637]
[-98.03211975 306.53457642]
[-108.69374847 317.08584595]
[-113.05999756 332.29266357]
[-127.54879761 335.74578857]
[-138.21041870 346.29705811]
[-148.87203979 356.84835815]
[-159.53367615 367.39965820]
[-170.19529724 377.95092773]
[-180.85691833 388.50222778]
[-191.51855469 399.05352783]
[-193.03950500 415.02432251]
[-206.55249023 423.67178345]
[-221.69149780 418.36233521]
[-226.84317017 403.16894531]
[-218.05558777 389.74664307]
[-202.06983948 388.39190674]
[-191.40821838 377.84060669]
[-180.74659729 367.28930664]
[-170.08496094 356.73803711]
[-159.42333984 346.18673706]
[-148.76171875 335.63543701]
[-138.10008240 325.08413696]
[-134.49642944 310.63204956]
[-119.24504089 306.42422485]
[-108.58341217 295.87295532]
[-97.92178345 285.32165527]
[-110.06890106 271.42987061]
[-121.24297333 256.74404907]
[-131.39224243 241.33215332]
[-140.46969604 225.26562500]
[-148.43328857 208.61885071]
[-155.24612427 191.46894836]
[-160.87664795 173.89535522]
[-165.29878235 155.97949219]
[-168.49205017 137.80432129]
[-170.44165039 119.45403290]
[-171.13856506 101.01364136]
[-170.57954407 82.56855011]
[-168.76719666 64.20420837]
[-165.70991516 46.00566864]
[-161.42185974 28.05723381]
[-155.92288208 10.44204044]
[-149.23846436 -6.75831795]
[-141.39956665 -23.46416855]
[-132.44248962 -39.59812927]
[-122.40873718 -55.08546448]
[-111.34477997 -69.85444641]
[-99.30187225 -83.83664703]
[-86.33578491 -96.96731567]
[-72.50659180 -109.18562317]
[-57.87833405 -120.43498230]
[-42.51878357 -130.66326904]
[-26.49908066 -139.82312012]
[-33.12757874 -153.27909851]
[-39.75607681 -166.73506165]
[-46.38457489 -180.19102478]
[-60.30940247 -188.85307312]
[-59.49989319 -205.23223877]
[-44.78880310 -212.47901917]
[-31.30963898 -203.13856506]
[-32.92861176 -186.81951904]
[-26.30011177 -173.36355591]
[-19.67161369 -159.90759277]
[-13.04311466 -146.45162964]
[-0.62902302 -151.77558899]
[12.03480911 -156.47470093]
[24.91695213 -160.53730774]
[37.98543549 -163.95329285]
[51.20782471 -166.71421814]
[64.55130768 -168.81320190]
[77.98276520 -170.24505615]
[91.46887207 -171.00621033]
[104.97614288 -171.09478760]
[118.47106934 -170.51057434]
[131.92015076 -169.25498962]
[145.29000854 -167.33119202]
[158.54748535 -164.74391174]
[171.65963745 -161.49960327]
[184.59394836 -157.60630798]
[197.31832886 -153.07368469]
[209.80117798 -147.91299438]
[222.01152039 -142.13702393]
[233.91905212 -135.76011658]
[245.49423218 -128.79811096]
[256.70831299 -121.26828003]
[267.53350830 -113.18930054]
[277.94290161 -104.58122253]
[287.91064453 -95.46542358]
[297.41207886 -85.86452484]
[306.42355347 -75.80233765]
[314.92272949 -65.30385590]
[322.88851929 -54.39511871]
[330.30114746 -43.10320663]
[337.14221191 -31.45614052]
[343.39474487 -19.48283005]
[349.04321289 -7.21298599]
[354.07360840 5.32293749]
[358.47344971 18.09383011]
[362.23181152 31.06799698]
[365.33938599 44.21323776]
[367.78842163 57.49693298]
[369.57287598 70.88610840]
[370.68829346 84.34754181]
[371.13192749 97.84781647]
[370.90264893 111.35343170]
[370.00106812 124.83087921]
[368.42938232 138.24668884]
[366.19152832 151.56759644]
[363.29302979 164.76051331]
[359.74111938 177.79269409]
[355.54455566 190.63183594]
[350.71380615 203.24603271]
[345.26080322 215.60398865]
[339.19915771 227.67504883]
[332.54382324 239.42924500]
[325.31140137 250.83740234]
[317.51977539 261.87121582]
[309.18832397 272.50329590]
[300.33770752 282.70727539]
[290.98989868 292.45779419]
[281.16809082 301.73068237]
[270.89666748 310.50292969]
[260.20111084 318.75271606]
[249.10797119 326.45962524]
[237.64476013 333.60452271]
[225.83996582 340.16964722]
[213.72283936 346.13870239]
[201.32348633 351.49691772]
[188.67268372 356.23095703]
[175.80180359 360.32910156]
[162.74279785 363.78112793]
[149.52807617 366.57855225]
[136.19042969 368.71435547]
[122.76296997 370.18325806]
[109.27902222 370.98162842]
[95.77204895 371.10748291]
[82.27555847 370.56051636]
[68.82306671 369.34207153]
[55.44794083 367.45516968]
[42.18338776 364.90447998]
[29.06232452 361.69638062]
[16.11731339 357.83880615]
[3.38048077 353.34130859]
[-9.11656189 348.21508789]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[6 32]
[7 31]
[8 30]
[10 28]
[11 27]
[12 26]
[13 25]
[14 24]
[15 23]
[16 22]
[59 70]
[60 69]
[61 68]
[62 67]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
