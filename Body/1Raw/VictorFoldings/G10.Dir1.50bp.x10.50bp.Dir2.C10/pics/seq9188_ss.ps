%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:52 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGUAUUGGCUCAACUUUCCUCACUAUCUGCUUCAUCCGCCAACUAAUAUUUCACUUUACAUCxxxxxxxxxxAAACUAUUCUCUGUUCUUUCAUGGGGAAGCAGAUUUGGGUACCACCCAAGUAUUGACUCACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[78.08815765 251.34980774]
[77.77610016 236.35305786]
[77.46405029 221.35630798]
[77.15199280 206.35955811]
[76.83993530 191.36279297]
[76.52787781 176.36604309]
[76.21582031 161.36929321]
[75.90376282 146.37254333]
[75.59171295 131.37577820]
[61.87165451 125.31277466]
[50.57265091 135.17849731]
[51.20994949 148.67114258]
[44.04664230 159.89233398]
[31.90039444 164.84640503]
[19.31241035 161.92417908]
[7.81060696 171.55270386]
[9.84787750 186.84495544]
[3.27344275 200.80133057]
[-9.81482029 208.96839905]
[-25.24049377 208.74006653]
[-38.08130264 200.18920898]
[-44.23978806 186.04437256]
[-41.75080490 170.81910706]
[-31.40857506 159.37176514]
[-16.51326752 155.35511780]
[-1.81791949 160.05090332]
[9.68388367 150.42237854]
[10.43130589 133.65039062]
[23.31046867 122.36273193]
[40.70692825 123.87948608]
[52.00593185 114.01376343]
[72.83883667 85.56500244]
[96.48909760 89.02882385]
[95.24221802 74.08074188]
[93.99534607 59.13265228]
[92.74847412 44.18456268]
[91.50159454 29.23647690]
[90.25472260 14.28839016]
[89.00785065 -0.65969664]
[87.76097107 -15.60778332]
[85.06096649 -19.19546509]
[83.81093597 -23.06954384]
[83.91804504 -26.72610092]
[85.13141632 -29.74631500]
[87.08508301 -31.84167480]
[79.34778595 -45.64184570]
[87.08508301 -58.36911774]
[87.08508301 -73.36911774]
[87.08508301 -88.36911774]
[72.16930389 -90.11154938]
[57.55667496 -93.57385254]
[43.44480896 -98.70920563]
[30.02455902 -105.44815063]
[17.47741699 -113.69956207]
[5.97306776 -123.35183716]
[-4.33290529 -134.27444458]
[-13.30112553 -146.31967163]
[-20.81030846 -159.32463074]
[-26.75889969 -173.11341858]
[-31.06645203 -187.49957275]
[-33.67470932 -202.28854370]
[-34.54840088 -217.28031921]
[-33.67571259 -232.27214050]
[-31.06843948 -247.06127930]
[-26.76184654 -261.44772339]
[-20.81417656 -275.23690796]
[-13.30586147 -288.24237061]
[-4.33844519 -300.28820801]
[5.96679926 -311.21148682]
[17.47050476 -320.86453247]
[30.01709557 -329.11679077]
[43.43689728 -335.85662842]
[57.54841614 -340.99291992]
[72.16082001 -344.45620728]
[87.07647705 -346.19961548]
[102.09368896 -346.19961548]
[117.00934601 -344.45620728]
[131.62174988 -340.99291992]
[145.73327637 -335.85662842]
[159.15307617 -329.11679077]
[171.69966125 -320.86453247]
[183.20336914 -311.21148682]
[193.50860596 -300.28820801]
[202.47602844 -288.24237061]
[209.98434448 -275.23690796]
[215.93200684 -261.44772339]
[220.23860168 -247.06127930]
[222.84587097 -232.27214050]
[223.71856689 -217.28031921]
[222.84487915 -202.28854370]
[220.23661804 -187.49957275]
[215.92906189 -173.11341858]
[209.98046875 -159.32463074]
[202.47129822 -146.31967163]
[193.50306702 -134.27444458]
[183.19709778 -123.35183716]
[171.69274902 -113.69956207]
[159.14559937 -105.44815063]
[145.72535706 -98.70920563]
[131.61349487 -93.57385254]
[117.00086212 -90.11154938]
[102.08508301 -88.36911774]
[102.08508301 -73.36911774]
[102.08508301 -58.36911774]
[109.82238007 -45.64184570]
[102.08508301 -31.84167480]
[102.70906067 -16.85465813]
[103.95593262 -1.90657115]
[105.20281219 13.04151535]
[106.44968414 27.98960304]
[107.69655609 42.93769073]
[108.94343567 57.88577652]
[110.19030762 72.83386230]
[111.43717957 87.78195190]
[120.45471191 99.76878357]
[134.47142029 105.11029816]
[148.48814392 110.45180511]
[162.50485229 115.79331970]
[176.52156067 121.13483429]
[190.53828430 126.47634888]
[207.49221802 126.46669006]
[212.19482422 142.75538635]
[197.84449768 151.78337097]
[185.19676208 140.49305725]
[171.18005371 135.15155029]
[157.16334534 129.81002808]
[143.14662170 124.46852112]
[129.12991333 119.12700653]
[115.11319733 113.78549957]
[108.98201752 118.10505676]
[118.72197723 129.51264954]
[128.46194458 140.92022705]
[142.22444153 146.88627625]
[146.86064148 161.15182495]
[139.23503113 174.06886292]
[124.50490570 176.90142822]
[112.63246918 167.73381042]
[111.64701080 152.76673889]
[104.18332672 139.75544739]
[96.71965027 126.74417114]
[90.58846283 131.06373596]
[90.90052032 146.06048584]
[91.21257782 161.05723572]
[91.52463531 176.05398560]
[91.83668518 191.05075073]
[92.14874268 206.04750061]
[92.46080017 221.04425049]
[92.77285767 236.04100037]
[93.08491516 251.03776550]
[95.67591095 270.24548340]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 149]
[2 148]
[3 147]
[4 146]
[5 145]
[6 144]
[7 143]
[8 142]
[9 141]
[10 31]
[11 30]
[15 27]
[16 26]
[33 114]
[34 113]
[35 112]
[36 111]
[37 110]
[38 109]
[39 108]
[40 107]
[45 106]
[47 104]
[48 103]
[49 102]
[115 129]
[116 128]
[117 127]
[118 126]
[119 125]
[120 124]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
