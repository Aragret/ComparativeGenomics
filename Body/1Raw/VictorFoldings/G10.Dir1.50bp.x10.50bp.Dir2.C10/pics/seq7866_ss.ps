%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:14 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGUCCUAGAAUUAAUUCCCCUAAAAAUCUUUGAAAUAGGGCCCGUAUUUACCCUAUAGCACCxxxxxxxxxxUAACCUUCCCUCUACACUUAUCAUCUUCACAAUUCUAAUUCUACUGACUAUCCUAGAAAUCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[142.54989624 390.48504639]
[142.23783875 375.48828125]
[141.92578125 360.49154663]
[141.61372375 345.49478149]
[141.30166626 330.49801636]
[140.98960876 315.50128174]
[140.67755127 300.50451660]
[140.36549377 285.50775146]
[140.05343628 270.51101685]
[137.87660217 255.66979980]
[133.86886597 241.21511841]
[129.86112976 226.76042175]
[116.70092773 215.19284058]
[121.37451172 197.41258240]
[117.06692505 183.04438782]
[112.75934601 168.67620850]
[108.45175934 154.30802917]
[104.14417267 139.93984985]
[99.83658600 125.57165527]
[95.52900696 111.20347595]
[90.92343903 96.92801666]
[86.02188873 82.75145721]
[81.12033844 68.57489777]
[76.21878815 54.39833832]
[61.30981827 56.42676163]
[46.29639435 55.50774002]
[31.75542831 51.67846680]
[18.24530029 45.08793259]
[6.28443527 35.99111176]
[-3.66860056 24.73912048]
[-11.23267841 11.76565742]
[-16.11870193 -2.42971635]
[-18.14065170 -17.30081177]
[-17.22267532 -32.27582550]
[-13.40192318 -46.77932739]
[-6.82705164 -60.25436783]
[2.24756026 -72.18387604]
[13.47165012 -82.11049652]
[26.41259384 -89.65410614]
[21.51104355 -103.83066559]
[9.68900871 -114.34494781]
[12.84266949 -128.90185547]
[4.07646227 -141.07369995]
[-7.81591749 -150.21542358]
[-19.70829773 -159.35716248]
[-31.60067749 -168.49890137]
[-43.49305725 -177.64062500]
[-55.38543701 -186.78236389]
[-69.54946136 -180.84300232]
[-84.78350830 -182.79728699]
[-96.98970795 -192.11953735]
[-102.88465118 -206.30209351]
[-100.88262177 -221.52995300]
[-91.52216339 -233.70686340]
[-77.32118225 -239.55732727]
[-62.09968185 -237.50756836]
[-49.95216370 -228.10899353]
[-44.14625168 -213.88973999]
[-46.24370193 -198.67474365]
[-34.35132217 -189.53300476]
[-22.45894241 -180.39128113]
[-10.56656265 -171.24954224]
[1.32581663 -162.10780334]
[13.21819687 -152.96607971]
[7.94460344 -167.00848389]
[5.64704323 -181.83148193]
[6.42217731 -196.81143188]
[10.23739433 -211.31813049]
[16.93218231 -224.74124146]
[26.22488403 -236.51602173]
[37.72453690 -246.14712524]
[50.94733810 -253.22932434]
[65.33698273 -257.46466064]
[80.28807068 -258.67498779]
[95.17160034 -256.80932617]
[109.36138916 -251.94621277]
[122.26045227 -244.29022217]
[133.32611084 -234.16346741]
[142.09280396 -221.99198914]
[148.19172668 -208.28785706]
[151.36627197 -193.62762451]
[151.48287964 -178.62808228]
[148.53665161 -163.92027283]
[142.65153503 -150.12297058]
[134.07513428 -137.81666565]
[123.16826630 -127.51908112]
[110.38979340 -119.66346741]
[96.27732849 -114.58032227]
[81.42460632 -112.48348999]
[66.45650482 -113.46119690]
[52.00275421 -117.47231293]
[38.67144012 -124.34806824]
[27.01922798 -133.80340576]
[38.49067307 -124.30313110]
[35.68760300 -108.73221588]
[40.58915329 -94.55565643]
[55.42587662 -96.61618805]
[70.38428497 -95.74217987]
[84.88936615 -91.96535492]
[98.38317108 -85.42906952]
[110.34625244 -76.38283539]
[120.31770325 -65.17284393]
[127.91287994 -52.22869492]
[132.83827209 -38.04693222]
[134.90278625 -23.17199326]
[134.02523804 -8.17532349]
[130.23747253 6.36659145]
[123.68326569 19.89438057]
[114.61282349 31.88730431]
[103.37327576 41.88330078]
[90.39534760 49.49678802]
[95.29689789 63.67334747]
[100.19844818 77.84990692]
[105.09999847 92.02646637]
[109.23404694 95.36747742]
[111.16796112 100.80297852]
[109.89718628 106.89588928]
[114.20477295 121.26407623]
[118.51235962 135.63226318]
[122.81994629 150.00044250]
[127.12752533 164.36862183]
[131.43510437 178.73681641]
[135.74269104 193.10499573]
[146.73840332 199.92762756]
[150.00709534 212.03277588]
[144.31581116 222.75268555]
[148.32354736 237.20738220]
[152.33129883 251.66206360]
[157.49322510 237.57823181]
[168.17053223 227.04281616]
[182.32218933 222.06979370]
[197.24291992 223.60978699]
[210.08050537 231.36842346]
[218.38090515 243.86254883]
[220.55741882 258.70379639]
[216.19398499 273.05511475]
[206.12472534 284.17312622]
[192.27445984 289.93246460]
[177.29081726 289.23223877]
[164.03805542 282.20623779]
[155.05020142 270.19894409]
[155.36224365 285.19570923]
[155.67430115 300.19247437]
[155.98635864 315.18920898]
[156.29841614 330.18597412]
[156.61047363 345.18270874]
[156.92253113 360.17947388]
[157.23458862 375.17623901]
[157.54664612 390.17297363]
[160.13764954 409.38070679]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 149]
[2 148]
[3 147]
[4 146]
[5 145]
[6 144]
[7 143]
[8 142]
[9 141]
[10 128]
[11 127]
[12 126]
[14 123]
[15 122]
[16 121]
[17 120]
[18 119]
[19 118]
[20 117]
[21 114]
[22 113]
[23 112]
[24 111]
[39 96]
[40 95]
[42 93]
[43 64]
[44 63]
[45 62]
[46 61]
[47 60]
[48 59]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
