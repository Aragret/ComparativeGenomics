%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:10 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCACUAUCAUAUUCAUCGGCGUAAAUCUAACUUUCUUCCCACAACACUUUCUCGGCCUAUCxxxxxxxxxxUAUAUCUUAAUGGCACAUGCAGCGCAAGUAGGUCUACAAGACGCUACUUCCCCUAUCAUACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[92.50000000 251.13435364]
[92.50000000 236.13435364]
[92.50000000 221.13435364]
[92.50000000 206.13435364]
[92.50000000 191.13435364]
[92.50000000 176.13435364]
[92.50000000 161.13435364]
[92.50000000 146.13435364]
[92.50000000 131.13435364]
[92.50000000 116.13435364]
[78.65678406 110.35808563]
[84.74198151 124.26257324]
[85.38948059 139.42651367]
[80.51169586 153.79911804]
[70.76831818 165.43659973]
[57.47705460 172.76509094]
[42.43544006 174.79347229]
[27.67773247 171.24742126]
[15.19978905 162.60650635]
[6.68914700 150.03935242]
[3.29680228 135.24555969]
[5.48154211 120.22585297]
[12.94789791 107.01154327]
[24.68610573 97.38975525]
[39.10866928 92.66174316]
[54.26505661 93.46694183]
[68.10549164 99.69645691]
[71.20381165 85.01992798]
[65.71678162 71.05953979]
[60.22975159 57.09915161]
[54.74271774 43.13876343]
[40.34809494 47.39130783]
[25.63761139 50.37308884]
[10.72322369 52.06140900]
[-4.28155661 52.44341660]
[-19.26253319 51.51620483]
[-34.10569000 49.28683472]
[-48.69805527 45.77226639]
[-62.92857742 40.99925613]
[-76.68894958 35.00412369]
[-89.87443542 27.83250046]
[-102.38469696 19.53896713]
[-114.12451935 10.18664169]
[-125.00454712 -0.15329611]
[-134.94198608 -11.40215206]
[-143.86119080 -23.47431374]
[-151.69429016 -36.27790451]
[-158.38166809 -49.71547699]
[-163.87242126 -63.68476486]
[-168.12477112 -78.07945251]
[-171.10633850 -92.78997803]
[-172.79444885 -107.70438385]
[-173.17623901 -122.70917511]
[-172.24882507 -137.69013977]
[-170.01924133 -152.53326416]
[-166.50447083 -167.12557983]
[-161.73126221 -181.35603333]
[-155.73593140 -195.11631775]
[-148.56413269 -208.30171204]
[-140.27041626 -220.81185913]
[-130.91793823 -232.55154419]
[-120.57784271 -243.43142700]
[-109.32884216 -253.36869812]
[-97.25655365 -262.28775024]
[-84.45285797 -270.12066650]
[-71.01519012 -276.80786133]
[-57.04582596 -282.29840088]
[-42.65108109 -286.55053711]
[-27.94051361 -289.53192139]
[-13.02608013 -291.21981812]
[1.97871137 -291.60140991]
[16.95966148 -290.67376709]
[31.80275345 -288.44400024]
[46.39502335 -284.92901611]
[60.62541199 -280.15560913]
[74.38561249 -274.16009521]
[87.57089996 -266.98809814]
[100.08093262 -258.69421387]
[111.82048798 -249.34155273]
[122.70022583 -239.00131226]
[132.63734436 -227.75216675]
[141.55621338 -215.67976379]
[149.38896179 -202.87594604]
[156.07595825 -189.43818665]
[161.56631470 -175.46875000]
[165.81825256 -161.07394409]
[168.79942322 -146.36332703]
[170.48710632 -131.44886780]
[170.86848450 -116.44407654]
[169.94064331 -101.46314240]
[167.71064758 -86.62007904]
[164.19546509 -72.02786255]
[159.42185974 -57.79753876]
[153.42614746 -44.03742218]
[146.25396729 -30.85223389]
[137.95991516 -18.34232140]
[128.60708618 -6.60289431]
[118.26669312 4.27670050]
[107.01741791 14.21366119]
[94.94488525 23.13236046]
[82.14096069 30.96492004]
[68.70310974 37.65172958]
[74.19013977 51.61212158]
[79.67716980 65.57250977]
[85.16420746 79.53289795]
[133.14247131 82.11124420]
[147.90852356 84.75011444]
[162.67457581 87.38897705]
[177.44064331 90.02783966]
[192.20669556 92.66670227]
[206.97274780 95.30557251]
[221.76545715 97.79068756]
[236.58322144 100.12178802]
[251.40097046 102.45289612]
[266.21871948 104.78399658]
[282.80505371 101.27262878]
[290.77078247 116.23872375]
[278.59466553 128.03614807]
[263.88763428 119.60176086]
[249.06987000 117.27065277]
[234.25210571 114.93955231]
[219.43435669 112.60844421]
[212.29182434 114.68930817]
[204.33387756 110.07162476]
[189.56782532 107.43276215]
[174.80177307 104.79389954]
[160.03572083 102.15502930]
[145.26966858 99.51616669]
[130.50360107 96.87730408]
[124.75270844 101.69156647]
[136.44599915 111.08660889]
[148.13929749 120.48165894]
[161.57868958 127.14367676]
[166.25192261 141.39712524]
[159.36595154 154.72317505]
[145.03630066 159.15724182]
[131.82734680 152.04922485]
[127.63366699 137.64756775]
[120.44228363 124.48383331]
[113.25090027 111.32009125]
[107.50000000 116.13435364]
[107.50000000 131.13435364]
[107.50000000 146.13435364]
[107.50000000 161.13435364]
[107.50000000 176.13435364]
[107.50000000 191.13435364]
[107.50000000 206.13435364]
[107.50000000 221.13435364]
[107.50000000 236.13435364]
[107.50000000 251.13435364]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[11 27]
[28 105]
[29 104]
[30 103]
[31 102]
[106 129]
[107 128]
[108 127]
[109 126]
[110 125]
[111 124]
[112 122]
[113 121]
[114 120]
[115 119]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
