%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:17 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCAUAAUCAUCGCUAUCCCCACCGGCGUCAAAGUAUUUAGCUGACUCGCCACACUCCACGGxxxxxxxxxxUUACUAUUCUGCCUAGCAAACUCAAACUACGAACGCACUCACAGUCGCAUCAUAAUCCUCCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[95.87471771 119.73892212]
[86.36636353 131.34025574]
[83.60276794 146.91822815]
[69.55086517 151.85719299]
[60.04250717 163.45852661]
[50.53414917 175.05987549]
[41.02579117 186.66120911]
[38.49204636 204.87001038]
[21.89224434 210.47772217]
[12.62729549 222.27436829]
[3.36234593 234.07099915]
[8.51437187 248.61267090]
[4.96446991 263.62606812]
[-6.15459919 274.32043457]
[-21.29478073 277.28329468]
[-35.62489700 271.56915283]
[-44.57226181 259.00140381]
[-45.28180313 243.59037781]
[-37.52710724 230.25364685]
[-23.78267097 223.24693298]
[-8.43429375 224.80606079]
[0.83065528 213.00941467]
[10.09560490 201.21278381]
[8.97130203 189.12794495]
[16.64942551 179.21505737]
[29.42444801 177.15286255]
[38.93280792 165.55151367]
[48.44116592 153.95018005]
[57.94952393 142.34883118]
[60.03301620 127.60066986]
[74.76502228 121.83190155]
[84.27337646 110.23056030]
[80.26564026 95.77587128]
[66.14083862 90.72711945]
[52.01603317 85.67835999]
[37.89122772 80.62960815]
[23.66444969 75.87579346]
[9.34185314 71.41897583]
[-4.98074436 66.96215820]
[-15.75382996 77.83410645]
[-30.34886551 82.44317627]
[-45.41201782 79.73023987]
[-57.48188400 70.31871033]
[-63.78490067 56.37128830]
[-62.87267685 41.09299088]
[-54.95483780 27.99465370]
[-41.85084534 20.08618355]
[-26.57189560 19.18488693]
[-12.62898540 25.49787712]
[-3.22609067 37.57447052]
[-0.52392852 52.63956070]
[13.79866886 57.09637833]
[28.12126541 61.55319214]
[32.74238586 60.13165283]
[38.30506134 61.64424896]
[42.93998718 66.50479889]
[57.06478882 71.55355835]
[71.18959045 76.60231781]
[85.31439209 81.65106964]
[75.33921814 70.44857788]
[65.36403656 59.24608612]
[55.38885880 48.04359436]
[45.41368103 36.84110260]
[35.43850327 25.63861084]
[22.25561905 18.48238945]
[10.98485851 8.58441162]
[2.18592858 -3.56379128]
[-3.70421815 -17.35894203]
[-6.39307833 -32.11597443]
[-5.74712324 -47.10205841]
[-1.79843152 -61.57299042]
[5.25690603 -74.81014252]
[15.06852245 -86.15616608]
[27.14917564 -95.04760742]
[40.89894104 -101.04293823]
[55.63500977 -103.84441376]
[70.62558746 -103.31292725]
[85.12625122 -99.47486115]
[98.41690063 -92.52082062]
[109.83752441 -82.79613495]
[118.82096863 -70.78373718]
[124.92111969 -57.08015823]
[127.83506012 -42.36591339]
[127.41806030 -27.37171173]
[123.69066620 -12.84167099]
[119.69266510 1.61571574]
[115.69467163 16.07310295]
[111.69667053 30.53048897]
[107.69867706 44.98787689]
[103.70068359 59.44526291]
[114.14049530 48.67445374]
[124.58030701 37.90364456]
[131.26254272 22.32211685]
[148.08497620 24.42981720]
[150.71655273 41.17828369]
[135.35112000 48.34345627]
[124.91130066 59.11426544]
[114.47148895 69.88507080]
[116.32456970 77.15254211]
[130.65016174 72.70538330]
[144.97576904 68.25821686]
[159.30136108 63.81105804]
[173.62696838 59.36389923]
[184.24134827 48.76508713]
[199.21641541 49.62956238]
[208.54067993 61.37937927]
[205.98043823 76.15927124]
[193.24734497 84.08822632]
[178.85462952 79.86589813]
[164.14865112 82.82128906]
[149.44267273 85.77668762]
[134.73670959 88.73208618]
[120.03073120 91.68747711]
[121.88381195 98.95494843]
[136.20640564 103.41175842]
[145.39677429 102.97711945]
[150.77886963 108.11314392]
[165.00564575 112.86695862]
[179.23242188 117.62077332]
[196.17129517 116.90586853]
[201.54740906 132.98484802]
[187.58505249 142.60197449]
[174.47860718 131.84754944]
[160.25183105 127.09373474]
[146.02505493 122.33992004]
[131.74958801 117.73435974]
[117.42699432 113.27754211]
[127.85954285 124.05538940]
[138.29209900 134.83322144]
[148.72463989 145.61106873]
[162.26004028 152.07582092]
[173.60827637 161.88488770]
[181.96395874 174.34211731]
[186.73408508 188.56343079]
[187.58013916 203.53955078]
[184.44207764 218.20762634]
[177.54258728 231.52668762]
[167.37133789 242.55145264]
[154.65017700 250.49954224]
[140.28190613 254.80685425]
[125.28624725 255.16770935]
[110.72743225 251.55650330]
[97.63868713 244.22950745]
[86.94891357 233.70674133]
[79.41676331 220.73497009]
[75.57678986 206.23481750]
[75.70150757 191.23533630]
[79.78207397 176.80102539]
[87.52754974 163.95797729]
[90.30993652 149.21829224]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 32]
[2 31]
[4 29]
[5 28]
[6 27]
[7 26]
[9 23]
[10 22]
[11 21]
[33 59]
[34 58]
[35 57]
[36 56]
[37 53]
[38 52]
[39 51]
[90 98]
[91 97]
[92 96]
[114 127]
[115 126]
[117 125]
[118 124]
[119 123]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
