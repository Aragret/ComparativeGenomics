%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:43 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGAUCAAUACAACCCCCGCCCAUCCUACCCAGCACACACACACCGCUGCUAACCCCAUACCCxxxxxxxxxxUAGCAGGUGUCUCCUCUAUCUUAGGGGCCAUCAAUUUCAUCACAACAAUUAUCAAUAUAACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[97.00661469 118.56601715]
[88.24040222 130.73785400]
[79.47419739 142.90969849]
[77.68766022 158.62971497]
[63.97119141 164.43554688]
[55.20498657 176.60737610]
[46.43877792 188.77922058]
[37.67256927 200.95104980]
[28.90636253 213.12289429]
[35.80366516 226.78619385]
[35.54967499 242.08958435]
[28.20275688 255.51647949]
[15.45117855 263.98144531]
[0.22516151 265.53933716]
[-13.97646904 259.83212280]
[-23.89028168 248.17129517]
[-27.23815346 233.23641968]
[-23.25077057 218.45944214]
[-12.84440327 207.23597717]
[1.58964169 202.14511108]
[16.73452568 204.35668945]
[25.50073433 192.18484497]
[34.26694107 180.01301575]
[43.03314972 167.84117126]
[51.79935455 155.66934204]
[52.95886993 140.81993103]
[67.30236053 134.14349365]
[76.06856537 121.97164917]
[84.83477783 109.79981232]
[71.30621338 116.27886200]
[60.83823013 127.02229309]
[47.53421021 133.95071411]
[32.73031235 136.36828613]
[17.91333961 134.03219604]
[4.57139969 127.17708588]
[-5.95553637 116.49140930]
[-12.61021805 103.04837799]
[-14.72429657 88.19809723]
[-12.08544827 73.43203735]
[-4.95870161 60.23319626]
[5.94018507 49.92716599]
[19.51660347 43.54901123]
[34.40703583 41.73931122]
[49.11599350 44.67982101]
[62.16621399 52.07521057]
[72.24701691 63.18274307]
[78.34600067 76.88696289]
[88.79306793 87.65072632]
[84.78533173 73.19604492]
[80.77758789 58.74135208]
[76.76985168 44.28666306]
[72.76210785 29.83197594]
[68.25164795 24.85570908]
[67.14776611 19.19772720]
[68.90174103 14.69227695]
[65.49876404 0.08338481]
[62.09578705 -14.52550793]
[58.69281006 -29.13439941]
[55.28983307 -43.74329376]
[40.20768738 -44.40011597]
[25.86239433 -49.10279465]
[13.31847382 -57.50235748]
[3.50676632 -68.97550201]
[-2.84463382 -82.67083740]
[-5.26441050 -97.57209015]
[-3.57300043 -112.57347870]
[2.10408258 -126.56180573]
[11.34556103 -138.49903870]
[23.46565628 -147.49937439]
[37.56497574 -152.89489746]
[52.59725952 -154.28524780]
[67.44700623 -151.56724548]
[81.01227570 -144.94258118]
[92.28642273 -134.90286255]
[100.43283844 -122.19307709]
[104.84700775 -107.75640106]
[105.20136261 -92.66411591]
[101.46960449 -78.03617859]
[93.92866516 -64.95806885]
[83.13813019 -54.40028381]
[69.89872742 -47.14627075]
[73.30170441 -32.53737640]
[76.70468140 -17.92848587]
[80.10765839 -3.31959319]
[83.51063538 11.28929901]
[87.21679688 25.82423592]
[91.22454071 40.27892303]
[95.23227692 54.73361206]
[99.24002075 69.18830109]
[103.24775696 83.64299011]
[110.22795105 86.38650513]
[124.18834686 91.87353516]
[131.16853333 94.61705017]
[143.94589233 86.75962830]
[156.72325134 78.90219879]
[169.50061035 71.04477692]
[182.27796936 63.18735123]
[195.05532837 55.32992172]
[205.38023376 41.88251877]
[221.16032410 48.08131409]
[219.57214355 64.96070862]
[202.91275024 68.10728455]
[190.13539124 75.96470642]
[177.35803223 83.82213593]
[164.58067322 91.67955780]
[151.80332947 99.53698730]
[139.02597046 107.39440918]
[154.00619507 106.62466431]
[168.98643494 105.85491180]
[183.96981812 105.14914703]
[198.91336060 106.44944000]
[213.54966736 109.73252106]
[227.61685181 114.93965912]
[240.86322021 121.97767639]
[253.05175781 130.72064209]
[263.96438599 141.01213074]
[273.40582275 152.66799927]
[281.20715332 165.47967529]
[287.22882080 179.21792603]
[291.36303711 193.63696289]
[293.53582764 208.47875977]
[293.70834351 223.47776794]
[291.87747192 238.36560059]
[288.07598877 252.87590027]
[282.37191772 266.74902344]
[274.86730957 279.73675537]
[265.69644165 291.60668945]
[255.02340698 302.14642334]
[243.03918457 311.16741943]
[229.95819092 318.50823975]
[216.01449585 324.03753662]
[201.45756531 327.65640259]
[186.54789734 329.30004883]
[171.55224609 328.93908691]
[156.73892212 326.57995605]
[142.37297058 322.26489258]
[128.71147156 316.07110596]
[115.99882507 308.10940552]
[104.46251678 298.52224731]
[94.30896759 287.48117065]
[85.71984100 275.18371582]
[78.84882355 261.84997559]
[73.81885529 247.71846008]
[70.71993256 233.04206848]
[69.60751343 218.08337402]
[70.50150299 203.11003113]
[73.38588715 188.38996887]
[78.20907593 174.18655396]
[84.88476562 160.75393677]
[93.29145050 148.33509827]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 29]
[2 28]
[3 27]
[5 25]
[6 24]
[7 23]
[8 22]
[9 21]
[48 90]
[49 89]
[50 88]
[51 87]
[52 86]
[55 85]
[56 84]
[57 83]
[58 82]
[59 81]
[93 107]
[94 106]
[95 105]
[96 104]
[97 103]
[98 102]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
