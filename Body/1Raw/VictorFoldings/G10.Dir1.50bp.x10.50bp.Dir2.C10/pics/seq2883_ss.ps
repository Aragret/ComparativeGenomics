%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:31 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGACCAAACCUGCAUUAAAAAUUUCGGUUGGGGCGACCUCGGAGCAGAACCCAACCUCCGAGxxxxxxxxxxCCCCUAUCUAGGCCUUCUUACGAGCCAAAACCUGCCCCUACUCCUCCUAGACCUAACCUGCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[90.04412079 285.32913208]
[90.04412079 270.32913208]
[90.04412079 255.32914734]
[90.04412079 240.32914734]
[90.04412079 225.32914734]
[90.04412079 210.32914734]
[90.04412079 195.32914734]
[90.04412079 180.32914734]
[90.04412079 165.32914734]
[90.04412079 150.32914734]
[76.80153656 143.28401184]
[64.36209869 151.66615295]
[51.92265701 160.04829407]
[39.57108307 168.55938721]
[27.30871582 177.19850159]
[15.04634857 185.83761597]
[18.03673744 200.77005005]
[14.68869400 215.62637329]
[5.58228588 227.83265686]
[-7.70474625 235.27406311]
[-22.87034225 236.66134644]
[-37.28697205 231.75415039]
[-48.45687103 221.40266418]
[-54.44477844 207.40034485]
[-54.21326065 192.17318726]
[-47.80242538 178.35939026]
[-36.32299042 168.35226440]
[-21.76383781 163.88562012]
[-6.64742661 165.73332214]
[6.40723228 173.57524109]
[18.66960144 164.93612671]
[30.93196869 156.29701233]
[34.61243439 149.83174133]
[43.54051590 147.60885620]
[55.97995377 139.22671509]
[68.41939545 130.84455872]
[66.26441956 89.26726532]
[95.19698334 73.77715302]
[96.75456238 58.85824203]
[98.31214142 43.93933105]
[99.86972809 29.02041817]
[101.42730713 14.10150528]
[102.98488617 -0.81740659]
[84.89751434 -14.67259789]
[81.08949280 -38.62732315]
[95.64297485 -59.84273529]
[85.66024780 -71.03849792]
[75.67752075 -82.23426819]
[65.69479370 -93.43003082]
[55.71206665 -104.62580109]
[45.72933960 -115.82156372]
[35.74661636 -127.01732635]
[20.91324806 -123.24508667]
[6.02860165 -126.80962372]
[-5.48694038 -136.89183044]
[-10.98719215 -151.17488098]
[-9.20823479 -166.37666321]
[-0.55886060 -179.00389099]
[12.97336769 -186.15492249]
[28.27884293 -186.18652344]
[41.84048080 -179.09141541]
[50.54191208 -166.50000000]
[52.38361740 -151.30570984]
[46.94237900 -137.00006104]
[56.92510605 -125.80429077]
[66.90783691 -114.60852814]
[76.89055634 -103.41275787]
[86.87328339 -92.21699524]
[96.85601044 -81.02122498]
[106.83873749 -69.82546234]
[103.44561005 -84.43664551]
[100.05247498 -99.04782867]
[96.65934753 -113.65901184]
[87.44093323 -125.49205017]
[82.62941742 -139.69941711]
[82.76067352 -154.69883728]
[87.82006836 -168.81983948]
[97.24414825 -180.48974609]
[109.98334503 -188.40888977]
[124.61890411 -191.69531250]
[139.52084351 -189.98300171]
[153.02955627 -183.46266174]
[163.64056396 -172.86045837]
[170.17210388 -159.35717773]
[171.89678955 -144.45664978]
[168.62252808 -129.81837463]
[160.71395874 -117.07260895]
[149.04988098 -107.63771820]
[142.43045044 -94.17728424]
[135.81101990 -80.71685791]
[129.19158936 -67.25642395]
[141.45396423 -75.89554596]
[153.71632385 -84.53466034]
[152.25361633 -99.82373810]
[158.64599609 -113.78916168]
[171.17396545 -122.67429352]
[186.46755981 -124.08907318]
[200.41287231 -117.65294647]
[209.25869751 -105.09718323]
[210.62553406 -89.79923248]
[204.14572144 -75.87416077]
[191.56230164 -67.06774139]
[176.26013184 -65.74886322]
[162.35543823 -72.27229309]
[150.09307861 -63.63317490]
[137.83070374 -54.99405670]
[144.10357666 -45.56441116]
[146.99580383 -34.89715195]
[146.37561035 -24.13569832]
[142.47857666 -14.37890911]
[135.86618042 -6.56889296]
[127.35182953 -1.40030074]
[117.90380096 0.74017435]
[116.34622192 15.65908623]
[114.78863525 30.57799911]
[113.23105621 45.49691010]
[111.67347717 60.41582489]
[110.11589813 75.33473206]
[126.56612396 81.30030823]
[138.27699280 98.27343750]
[138.23933411 122.05616760]
[151.33248901 129.37527466]
[166.46992493 124.83285522]
[180.34588623 132.39813232]
[184.72801208 147.58273315]
[177.01646423 161.37794495]
[161.78636169 165.59927368]
[148.07347107 157.74230957]
[144.01339722 142.46842957]
[130.92024231 135.14932251]
[124.45121002 138.94427490]
[132.43257141 151.64459229]
[140.41392517 164.34489441]
[153.09576416 172.35557556]
[152.84915161 187.35354614]
[139.91079712 194.94296265]
[126.69963074 187.83908081]
[125.89591980 172.86166382]
[118.70453644 159.69792175]
[111.51315308 146.53417969]
[105.04412079 150.32914734]
[105.04412079 165.32914734]
[105.04412079 180.32914734]
[105.04412079 195.32914734]
[105.04412079 210.32914734]
[105.04412079 225.32914734]
[105.04412079 240.32914734]
[105.04412079 255.32914734]
[105.04412079 270.32913208]
[105.04412079 285.32913208]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[11 36]
[12 35]
[13 34]
[14 32]
[15 31]
[16 30]
[38 118]
[39 117]
[40 116]
[41 115]
[42 114]
[43 113]
[46 70]
[47 69]
[48 68]
[49 67]
[50 66]
[51 65]
[52 64]
[91 106]
[92 105]
[93 104]
[121 130]
[122 129]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
