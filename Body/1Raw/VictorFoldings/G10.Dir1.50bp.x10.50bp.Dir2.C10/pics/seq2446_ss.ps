%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:36 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGAACUGAACUCCUCACACCCAAUUGGACCAAUCUAUCACCCUAUAGAAGAACUAAUGUUAGxxxxxxxxxxAAUACUUAAUUUCUGUAACAGCUAAGGACUGCAAAACCCCACUCUGCAUCAACUGAACGCCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[183.69192505 363.24874878]
[183.69192505 348.24874878]
[183.69192505 333.24874878]
[183.69192505 318.24874878]
[183.69192505 303.24874878]
[183.69192505 288.24874878]
[183.69192505 273.24874878]
[183.69192505 258.24874878]
[183.69192505 243.24874878]
[183.69192505 228.24874878]
[159.13278198 215.51576233]
[149.62649536 191.71403503]
[157.36032104 169.41929626]
[146.92050171 158.64848328]
[136.48069763 147.87767029]
[119.38832855 144.02397156]
[114.97750092 126.17671967]
[104.31587982 115.62542725]
[89.54981995 112.98656464]
[75.89357758 119.19197083]
[62.23733902 125.39737701]
[61.94863892 140.65776062]
[55.05963516 154.27775574]
[42.93813705 163.55311584]
[27.99088478 166.64218140]
[13.18566132 162.93164062]
[1.46205628 153.15821838]
[-4.85220098 139.26243591]
[-4.50340939 124.00329590]
[2.43917799 110.41053009]
[14.59710503 101.18299103]
[29.55640793 98.15280151]
[44.34690475 101.92161560]
[56.03193283 111.74113464]
[69.68817139 105.53572845]
[83.34441376 99.33032227]
[83.42243195 91.83072662]
[68.42324829 91.67443848]
[68.57978058 76.67525482]
[83.57846832 76.83153534]
[83.65648651 69.33194733]
[70.13229370 62.84377670]
[56.60810852 56.35561371]
[43.08391571 49.86744690]
[29.55972672 43.37928391]
[14.73510075 48.85705566]
[0.41427550 42.17203522]
[-4.90645790 27.29032516]
[1.92959797 13.04097748]
[16.86673164 7.87788057]
[31.04300690 14.86420631]
[36.04789352 29.85509300]
[49.57208252 36.34325790]
[63.09627151 42.83142471]
[76.62046051 49.31958771]
[90.14465332 55.80775452]
[102.83958435 47.81783676]
[102.83958435 32.81783676]
[102.83958435 17.81783676]
[102.83958435 2.81783748]
[93.25685883 -12.87137127]
[102.54084015 -27.73096848]
[102.22878265 -42.72772217]
[101.91672516 -57.72447586]
[98.59186554 -66.30335236]
[101.75744629 -73.03572083]
[101.75744629 -88.03572083]
[87.50477600 -93.19684601]
[75.87884521 -102.92379761]
[68.28353882 -116.04199219]
[65.63603973 -130.96736145]
[68.25603485 -145.89758301]
[75.82714844 -159.02975464]
[87.43512726 -168.77812195]
[101.67826080 -173.96549988]
[116.83662415 -173.96549988]
[131.07975769 -168.77812195]
[142.68774414 -159.02975464]
[150.25885010 -145.89758301]
[152.87884521 -130.96736145]
[150.23133850 -116.04199219]
[142.63604736 -102.92379761]
[131.01011658 -93.19684601]
[116.75744629 -88.03572083]
[116.75744629 -73.03572083]
[116.91348267 -58.03653336]
[117.22553253 -43.03977966]
[117.53759003 -28.04302406]
[126.06761932 -19.40902138]
[126.41287231 -6.87507725]
[117.83958435 2.81783748]
[117.83958435 17.81783676]
[117.83958435 32.81783676]
[117.83958435 47.81783676]
[114.86716461 104.96379852]
[125.52879333 115.51509094]
[138.44889832 116.23959351]
[147.11485291 125.30161285]
[147.25149536 137.43786621]
[157.69131470 148.20867920]
[168.13111877 158.97947693]
[179.55328369 153.32815552]
[192.82456970 152.38215637]
[206.00126648 156.70115662]
[216.99655151 166.04336548]
[223.90879822 179.34472656]
[225.34199524 194.83091736]
[239.98548889 198.08174133]
[249.10792542 196.88465881]
[254.89831543 201.55552673]
[269.47103882 205.11027527]
[284.04373169 208.66503906]
[298.61642456 212.21980286]
[308.69039917 200.69705200]
[322.96951294 195.18658447]
[338.17257690 196.95468140]
[350.80596924 205.59501648]
[357.96670532 219.12213135]
[358.00924683 234.42758179]
[350.92382812 247.99427795]
[338.33862305 256.70471191]
[323.14566040 258.55728149]
[308.83612061 253.12628174]
[298.69827271 241.65971375]
[295.06167603 226.79251099]
[280.48895264 223.23774719]
[265.91625977 219.68298340]
[251.34356689 216.12821960]
[236.73466492 212.72525024]
[222.09117126 209.47442627]
[216.24134827 214.16799927]
[227.53370667 224.04133606]
[238.82606506 233.91467285]
[250.91769409 242.79118347]
[251.23960876 257.78771973]
[239.54002380 267.17492676]
[224.96963501 263.61071777]
[218.92449951 249.88264465]
[211.73310852 236.71890259]
[204.54173279 223.55516052]
[198.69192505 228.24874878]
[198.69192505 243.24874878]
[198.69192505 258.24874878]
[198.69192505 273.24874878]
[198.69192505 288.24874878]
[198.69192505 303.24874878]
[198.69192505 318.24874878]
[198.69192505 333.24874878]
[198.69192505 348.24874878]
[198.69192505 363.24874878]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[13 101]
[14 100]
[15 99]
[17 96]
[18 95]
[19 36]
[20 35]
[21 34]
[41 56]
[42 55]
[43 54]
[44 53]
[45 52]
[57 94]
[58 93]
[59 92]
[60 91]
[62 88]
[63 87]
[64 86]
[66 85]
[67 84]
[107 130]
[108 129]
[110 128]
[111 127]
[112 126]
[113 125]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
