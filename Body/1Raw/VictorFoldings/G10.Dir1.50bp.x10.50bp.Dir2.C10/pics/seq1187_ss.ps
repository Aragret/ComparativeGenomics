%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:03 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCACGAUUAACCCAAGUCAAUAGAAGCCGGCGUAAAGAGUGUUUUAGAUCACCCCCUCCCCAxxxxxxxxxxAUAGCUUUUUGAUGACUUCUAGCAAGCCUCGCUAACCUCGCCUUACCCCCCACUAUUAACCCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[120.61315918 313.35260010]
[120.61315918 298.35260010]
[120.61315918 283.35260010]
[120.61315918 268.35260010]
[120.61315918 253.35260010]
[120.61315918 238.35260010]
[120.61315918 223.35260010]
[120.61315918 208.35260010]
[120.61315918 193.35260010]
[120.61315918 178.35260010]
[117.14576721 174.19877625]
[115.80960083 168.36172485]
[117.37906647 161.98397827]
[111.67440796 148.11109924]
[105.96974182 134.23822021]
[95.32585144 134.43901062]
[85.12051392 131.40850830]
[76.31127167 125.43104553]
[69.72467041 117.06745911]
[65.97871399 107.10249329]
[65.42485809 96.47112274]
[68.11507416 86.17085266]
[73.79695892 77.16812897]
[64.88080597 65.10569763]
[55.96465683 53.04327011]
[47.04850769 40.98083878]
[38.13235474 28.91840553]
[29.21620369 16.85597420]
[12.83729362 18.89474678]
[-2.25555873 12.44902039]
[-11.99675751 -0.64237022]
[-13.81403637 -16.76454163]
[-7.30711126 -31.52447891]
[-16.46904755 -43.40130234]
[-25.63098145 -55.27812576]
[-34.79291916 -67.15495300]
[-47.74109268 -59.54259109]
[-61.54126740 -53.61314011]
[-75.97579956 -49.46011353]
[-90.81702423 -47.14901352]
[-105.83088684 -46.71628571]
[-120.78058624 -48.16875458]
[-135.43034363 -51.48351669]
[-149.54913330 -56.60828781]
[-162.91424561 -63.46224976]
[-175.31492615 -71.93729401]
[-186.55558777 -81.89977264]
[-196.45893860 -93.19255066]
[-204.86878967 -105.63753510]
[-211.65251160 -119.03843689]
[-216.70312500 -133.18391418]
[-219.94096375 -147.85087585]
[-221.31497192 -162.80799866]
[-220.80345154 -177.81938171]
[-218.41450500 -192.64826965]
[-214.18579102 -207.06080627]
[-208.18399048 -220.82968140]
[-200.50379944 -233.73773193]
[-191.26631165 -245.58137512]
[-180.61721802 -256.17382812]
[-168.72448730 -265.34805298]
[-155.77566528 -272.95932007]
[-141.97499084 -278.88760376]
[-127.54011536 -283.03939819]
[-112.69869232 -285.34927368]
[-97.68479919 -285.78073120]
[-82.73521423 -284.32699585]
[-68.08573151 -281.01101685]
[-53.96738434 -275.88504028]
[-40.60283661 -269.02996826]
[-28.20287514 -260.55386353]
[-16.96306038 -250.59043884]
[-7.06065941 -239.29682922]
[1.34815061 -226.85113525]
[8.13075161 -213.44966125]
[13.18017101 -199.30375671]
[16.41677284 -184.63653564]
[17.78951263 -169.67930603]
[17.27673912 -154.66795349]
[14.88653755 -139.83926392]
[10.65660763 -125.42708588]
[4.65366077 -111.65872192]
[-3.02762842 -98.75131989]
[-12.26611423 -86.90844727]
[-22.91609383 -76.31688690]
[-13.75415802 -64.44006348]
[-4.59222269 -52.56323624]
[4.56971264 -40.68641281]
[17.98955536 -43.39268875]
[31.32698059 -40.02392960]
[41.95405579 -31.18487930]
[47.75146103 -18.56383896]
[47.53099060 -4.61042881]
[41.27863693 7.93982315]
[50.19478607 20.00225449]
[59.11093903 32.06468582]
[68.02709198 44.12711716]
[76.94323730 56.18954849]
[85.85939026 68.25198364]
[111.21377563 67.10403442]
[130.58792114 83.49931335]
[145.01530457 79.39437103]
[159.44268799 75.28942871]
[173.87007141 71.18447876]
[180.09420776 56.83895111]
[194.10632324 49.89671707]
[209.29032898 53.63569260]
[218.47680664 66.29044342]
[217.32817078 81.88578033]
[206.38679504 93.05807495]
[190.81883240 94.53209686]
[177.97502136 85.61186218]
[163.54763794 89.71681213]
[149.12025452 93.82175446]
[134.69287109 97.92669678]
[134.08918762 106.76911163]
[131.26858521 115.17131042]
[126.41451263 122.58687592]
[119.84262085 128.53355408]
[125.54728699 142.40643311]
[131.25195312 156.27931213]
[133.34251404 141.42572021]
[139.28219604 127.65181732]
[148.64910889 115.93597412]
[160.77792358 107.11032867]
[174.80714417 101.80176544]
[189.74031067 100.38734436]
[204.51672363 102.96752167]
[218.08686829 109.35903168]
[229.48684692 119.10790253]
[237.90693665 131.52168274]
[242.74909973 145.71864319]
[243.66937256 160.69038391]
[240.60240173 175.37348938]
[233.76603699 188.72505188]
[223.64584351 199.79670715]
[210.96064758 207.80207825]
[196.61146545 212.17253113]
[181.61749268 212.59765625]
[167.04373169 209.04725647]
[153.92532349 201.77349854]
[143.19407654 191.29302979]
[135.61315918 178.35260010]
[135.61315918 193.35260010]
[135.61315918 208.35260010]
[135.61315918 223.35260010]
[135.61315918 238.35260010]
[135.61315918 253.35260010]
[135.61315918 268.35260010]
[135.61315918 283.35260010]
[135.61315918 298.35260010]
[135.61315918 313.35260010]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 152]
[2 151]
[3 150]
[4 149]
[5 148]
[6 147]
[7 146]
[8 145]
[9 144]
[10 143]
[13 121]
[14 120]
[15 119]
[23 99]
[24 98]
[25 97]
[26 96]
[27 95]
[28 94]
[33 88]
[34 87]
[35 86]
[36 85]
[101 115]
[102 114]
[103 113]
[104 112]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
