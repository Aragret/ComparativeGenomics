%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:35 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGACCCUCCUUAACCUCUACUUCUACCUACGCCUAAUCUACUCCACCUCAAUCACACUACUCxxxxxxxxxxCACUAUACCUAUUAUUCGGCGCAUGAGCUGGAGUCCUAGGCACAGCUCUAAGCCUCCUUACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[94.62812805 446.67672729]
[94.62812805 431.67672729]
[94.62812805 416.67672729]
[94.62812805 401.67672729]
[94.62812805 386.67672729]
[94.62812805 371.67672729]
[94.62812805 356.67672729]
[94.62812805 341.67672729]
[94.62812805 326.67672729]
[94.62812805 311.67672729]
[79.54961395 308.75268555]
[65.32126617 302.95547485]
[52.48505783 294.50396729]
[41.53034210 283.71820068]
[32.87514877 271.00723267]
[26.85025215 256.85360718]
[23.68651962 241.79516602]
[23.50608063 226.40437317]
[26.31759453 211.26676941]
[32.01586914 196.95858765]
[40.38578796 184.02485657]
[51.11042786 172.95858765]
[63.78306198 164.18208313]
[77.92259216 158.03068542]
[92.99179077 154.74011230]
[92.67973328 139.74336243]
[84.14971161 131.10935974]
[83.80445862 118.57540894]
[92.37774658 108.88249207]
[82.60833740 120.26487732]
[68.27915192 124.70046234]
[53.78762817 120.82801819]
[43.58103561 109.83596039]
[40.79164124 95.09759521]
[46.27548218 81.13595581]
[58.34963226 72.23567963]
[73.30868530 71.12815094]
[86.56191254 78.15325928]
[94.04224396 91.15586090]
[96.83456421 76.41806030]
[99.62689209 61.68025208]
[102.41921234 46.94244385]
[105.21154022 32.20463943]
[96.68324280 23.81171608]
[93.32905579 12.45133305]
[95.87874603 1.00699294]
[103.57871246 -7.67506886]
[114.40961456 -11.49370861]
[117.81259155 -26.10260010]
[121.21556854 -40.71149445]
[124.61854553 -55.32038498]
[128.02153015 -69.92927551]
[131.42449951 -84.53816986]
[127.01972198 -99.73384094]
[137.44265747 -110.37393951]
[140.84564209 -124.98283386]
[144.24861145 -139.59173584]
[147.65159607 -154.20062256]
[133.60481262 -159.52711487]
[120.39336395 -166.67840576]
[108.25299072 -175.52684021]
[97.40037537 -185.91453552]
[88.02918243 -197.65609741]
[80.30665588 -210.54197693]
[74.37062073 -224.34222412]
[70.32699585 -238.81056213]
[68.24796295 -253.68876648]
[68.17060852 -268.71133423]
[70.09632874 -283.61016846]
[73.99074554 -298.11935425]
[79.78435516 -311.98001099]
[87.37377930 -324.94473267]
[96.62356567 -336.78216553]
[107.36863708 -347.28106689]
[119.41724396 -356.25405884]
[132.55435181 -363.54101562]
[146.54553223 -369.01187134]
[161.14108276 -372.56903076]
[176.08053589 -374.14895630]
[191.09727478 -373.72351074]
[205.92330933 -371.30026245]
[220.29405212 -366.92245483]
[233.95303345 -360.66821289]
[246.65650940 -352.64916992]
[258.17776489 -343.00839233]
[268.31115723 -331.91796875]
[276.87591553 -319.57583618]
[283.71911621 -306.20220947]
[288.71868896 -292.03576660]
[291.78536987 -277.32934570]
[292.86444092 -262.34536743]
[291.93667603 -247.35128784]
[289.01861572 -232.61466980]
[284.16232300 -218.39848328]
[277.45443726 -204.95645142]
[269.01473999 -192.52847290]
[258.99380493 -181.33631897]
[247.57046509 -171.57974243]
[234.94859314 -163.43286133]
[221.35343933 -157.04106140]
[207.02761841 -152.51840210]
[192.22680664 -149.94560242]
[177.21511841 -149.36859131]
[162.26048279 -150.79763794]
[158.85751343 -136.18875122]
[155.45452881 -121.57985687]
[152.05154419 -106.97096252]
[156.69973755 -92.82022095]
[146.03340149 -81.13519287]
[142.63041687 -66.52629852]
[139.22744751 -51.91740799]
[135.82446289 -37.30851746]
[132.42147827 -22.69962311]
[129.01850891 -8.09073067]
[139.61531067 6.77887249]
[135.98028564 24.99655533]
[119.94934082 34.99696350]
[117.15702057 49.73476791]
[114.36469269 64.47257233]
[111.57237244 79.21038055]
[108.78004456 93.94818878]
[107.37774658 108.88249207]
[116.96046448 124.57170105]
[107.67648315 139.43130493]
[107.98854065 154.42805481]
[122.44865417 156.88870239]
[136.20169067 161.97616577]
[148.77502441 169.51397705]
[159.73684692 179.24148560]
[168.71102905 190.82289124]
[175.39004517 203.85879517]
[179.54544067 217.90000916]
[181.03573608 232.46299744]
[179.81115723 247.04660034]
[175.91535950 261.14920044]
[169.48385620 274.28594971]
[160.73928833 286.00564575]
[149.98373413 295.90591431]
[137.58825684 303.64730835]
[123.98014069 308.96475220]
[109.62812805 311.67672729]
[109.62812805 326.67672729]
[109.62812805 341.67672729]
[109.62812805 356.67672729]
[109.62812805 371.67672729]
[109.62812805 386.67672729]
[109.62812805 401.67672729]
[109.62812805 416.67672729]
[109.62812805 431.67672729]
[109.62812805 446.67672729]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[25 125]
[26 124]
[29 122]
[39 121]
[40 120]
[41 119]
[42 118]
[43 117]
[48 114]
[49 113]
[50 112]
[51 111]
[52 110]
[53 109]
[55 107]
[56 106]
[57 105]
[58 104]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
