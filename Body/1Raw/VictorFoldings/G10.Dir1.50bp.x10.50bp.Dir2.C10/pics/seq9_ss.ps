%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:36 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCUAUCACCCUAUUAACCACUCACGGGAGCUCUCCAUGCAUUUGGUAUUUUCGUCUGGGGGxxxxxxxxxxUGACGCCAUAAAACUCUUCACCAAAGAGCCCCUAAAACCCGCCACAUCUACCAUCACCCUCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[80.66132355 526.25982666]
[80.66132355 511.25982666]
[80.66132355 496.25982666]
[80.66132355 481.25982666]
[80.66132355 466.25982666]
[80.66132355 451.25982666]
[80.66132355 436.25982666]
[80.66132355 421.25982666]
[80.66132355 406.25982666]
[80.66132355 391.25982666]
[67.08364105 388.04782104]
[54.56523514 381.86883545]
[43.74553680 373.03457642]
[35.17808914 361.99243164]
[29.30223083 349.30288696]
[26.42057037 335.61102295]
[26.68339539 321.61383057]
[30.08084869 308.02453613]
[36.44323730 295.53643799]
[45.44952011 284.78747559]
[56.64349365 276.32763672]
[69.45690918 270.59078979]
[83.23830414 267.87249756]
[83.86228180 252.88546753]
[70.58604431 247.87821960]
[59.49435043 238.99476624]
[51.68449020 227.09690857]
[47.93436050 213.34548950]
[48.62497711 199.08711243]
[53.70182800 185.72232056]
[62.67889786 174.56797791]
[74.68518829 166.72756958]
[88.54918671 162.98197937]
[89.48481750 148.01118469]
[90.42044067 133.04040527]
[91.35607147 118.06961060]
[83.99303436 112.04181671]
[80.24243164 103.29644775]
[65.59893036 100.04562378]
[53.30097961 109.70453644]
[37.67333603 109.14705658]
[26.09489250 98.63641357]
[24.03263474 83.13540649]
[32.46029663 69.96314240]
[47.39859772 65.33916473]
[61.79412460 71.44676208]
[68.84975433 85.40212250]
[83.49325562 88.65294647]
[90.04486847 82.61829376]
[98.56506348 80.02078247]
[103.17062378 65.74532318]
[107.77619171 51.46986008]
[112.23300171 37.14726257]
[116.54058838 22.77907944]
[103.91382599 7.14188671]
[106.40011597 -14.42940331]
[124.78788757 -28.78915787]
[124.47583008 -43.78591156]
[124.16377258 -58.78266525]
[123.85171509 -73.77941895]
[122.91609192 -88.75020599]
[121.35850525 -103.66912079]
[119.80092621 -118.58803558]
[118.24334717 -133.50694275]
[103.48396301 -136.88916016]
[90.62380981 -144.88259888]
[81.05784607 -156.62019348]
[75.82373047 -170.82873535]
[75.48920441 -185.96699524]
[80.09057617 -200.39288330]
[89.12870026 -212.54158020]
[101.62320709 -221.09529114]
[116.21878052 -225.12619019]
[131.33219910 -224.19700623]
[145.32406616 -218.40855408]
[156.67666626 -208.38870239]
[164.15853882 -195.22434998]
[166.95811462 -180.34344482]
[164.77169800 -165.36018372]
[157.83648682 -151.89981079]
[146.90473938 -141.42242432]
[133.16226196 -135.06452942]
[134.71983337 -120.14561462]
[136.27742004 -105.22669983]
[137.83500671 -90.30779266]
[139.99568176 -88.42662048]
[141.51611328 -85.54872894]
[142.00233459 -81.92306519]
[141.16134644 -77.94012451]
[138.84846497 -74.09147644]
[139.16052246 -59.09471893]
[139.47257996 -44.09796524]
[139.78463745 -29.10121346]
[152.80094910 -21.64630318]
[165.89410400 -28.96540833]
[178.98725891 -36.28451538]
[192.08041382 -43.60361862]
[205.17356873 -50.92272568]
[210.90635681 -65.90653992]
[226.23854065 -70.62921143]
[239.40858459 -61.46790695]
[240.31355286 -45.45040131]
[228.25924683 -34.86394882]
[212.49267578 -37.82957077]
[199.39952087 -30.51046562]
[186.30636597 -23.19136047]
[173.21321106 -15.87225437]
[160.12005615 -8.55314827]
[158.63357544 10.40690804]
[146.95399475 23.71485138]
[130.90876770 27.08666420]
[126.60118866 41.45484924]
[127.70008087 48.81270599]
[122.05165100 56.07542419]
[117.44608307 70.35088348]
[112.84052277 84.62634277]
[119.68055725 103.72881317]
[106.32686615 119.00523376]
[105.39123535 133.97602844]
[104.45560455 148.94682312]
[103.51998138 163.91761780]
[118.13061523 170.19543457]
[129.69679260 181.06990051]
[136.83842468 195.21835327]
[138.71194458 210.92895508]
[135.10992432 226.30792236]
[126.48390198 239.50765991]
[113.88781738 248.94889832]
[98.84930420 253.50944519]
[98.22532654 268.49645996]
[113.64919281 273.18017578]
[127.34339142 281.66293335]
[138.39186096 293.37091064]
[146.05717468 307.51458740]
[149.82977295 323.14227295]
[149.46182251 339.20401001]
[144.98350525 354.62203979]
[136.70060730 368.36331177]
[125.17366028 379.50848389]
[111.17999268 387.31365967]
[95.66132355 391.25982666]
[95.66132355 406.25982666]
[95.66132355 421.25982666]
[95.66132355 436.25982666]
[95.66132355 451.25982666]
[95.66132355 466.25982666]
[95.66132355 481.25982666]
[95.66132355 496.25982666]
[95.66132355 511.25982666]
[95.66132355 526.25982666]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[23 130]
[24 129]
[33 121]
[34 120]
[35 119]
[36 118]
[38 48]
[39 47]
[50 116]
[51 115]
[52 114]
[53 112]
[54 111]
[57 93]
[58 92]
[59 91]
[60 90]
[61 85]
[62 84]
[63 83]
[64 82]
[94 108]
[95 107]
[96 106]
[97 105]
[98 104]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
