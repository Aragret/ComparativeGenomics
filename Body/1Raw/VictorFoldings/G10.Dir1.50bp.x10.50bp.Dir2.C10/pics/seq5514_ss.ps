%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:34 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGUAGGAGGCCUGCCCCCGCUAACCGGCUUUUUGCCCAAAUGGGCCAUUAUCGAAGAAUUCACxxxxxxxxxxAUGAUCUGCUGCAGUGCUCUGAGCCCUAGGAUUCAUCUUUCUUUUCACCGUAGGUGGCCUGCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[128.60493469 322.49771118]
[128.60493469 307.49771118]
[128.60493469 292.49771118]
[128.60493469 277.49771118]
[128.60493469 262.49771118]
[128.60493469 247.49771118]
[128.60493469 232.49771118]
[128.60493469 217.49771118]
[128.60493469 202.49771118]
[128.60493469 187.49771118]
[145.74688721 155.54464722]
[136.34303284 143.85842896]
[126.93917084 132.17222595]
[117.53531647 120.48601532]
[95.61503601 125.06616211]
[79.19344330 111.81606293]
[64.32684326 113.81211853]
[49.46024323 115.80818176]
[34.59364319 117.80423737]
[19.72704506 119.80029297]
[5.63165569 124.93059540]
[-7.03986025 132.95759583]
[-14.16600513 147.72749329]
[-30.53798676 148.67102051]
[-39.31371307 134.81755066]
[-31.46547127 120.41835022]
[-15.06685734 120.28607178]
[-2.39534116 112.25907898]
[-4.37364626 105.02469635]
[-18.84241486 108.98130798]
[-33.35104752 105.17347717]
[-22.79902458 94.51253510]
[-8.33025646 90.55592346]
[-10.30856228 83.32154083]
[-25.30144691 82.85961914]
[-40.29433441 82.39768982]
[-52.92034531 92.29533386]
[-68.49696350 88.45494843]
[-75.07513428 73.82254791]
[-67.60865784 59.62285614]
[-51.82516479 56.74866486]
[-39.83240891 67.40480804]
[-24.83952141 67.86672974]
[-9.84663582 68.32865906]
[0.38164139 71.72910309]
[8.61845016 77.14290619]
[14.52105618 83.88819122]
[17.94266891 91.23861694]
[18.93380165 98.47478485]
[17.73098755 104.93369293]
[32.59758759 102.93763733]
[47.46418381 100.94158173]
[62.33078384 98.94552612]
[77.19738007 96.94946289]
[62.30123520 98.71150208]
[48.98886871 91.79913330]
[41.86067200 78.60107422]
[43.37994766 63.67821121]
[53.02168274 52.18747711]
[67.45395660 48.09975433]
[81.68936920 52.82764435]
[90.80856323 64.73731995]
[91.66010284 79.71346283]
[91.04428101 64.72611237]
[90.42845154 49.73875809]
[87.17008972 43.87141800]
[87.37961578 38.11433792]
[90.10782623 34.12609482]
[90.10782623 19.12609482]
[90.10782623 4.12609577]
[76.33396149 -2.44986796]
[66.78403473 -14.35623837]
[63.35419464 -29.22899628]
[66.72544098 -44.11514664]
[76.22840118 -56.05903244]
[89.97627258 -62.68918610]
[105.23938751 -62.68918610]
[118.98725128 -56.05903244]
[128.49021912 -44.11514664]
[131.86146545 -29.22899628]
[128.43162537 -14.35623837]
[118.88169861 -2.44986796]
[105.10782623 4.12609577]
[105.10782623 19.12609482]
[105.10782623 34.12609482]
[105.41580963 49.12293243]
[106.03163147 64.11029053]
[106.64746094 79.09764099]
[120.46103668 84.94442749]
[131.64933777 74.95333099]
[142.83763123 64.96223450]
[147.18974304 56.85946274]
[154.35974121 54.88375092]
[165.75080872 45.12447739]
[177.14187622 35.36520386]
[182.07891846 19.72686195]
[198.14692688 16.44796562]
[208.81651306 28.90155792]
[203.11172485 44.27645493]
[186.90115356 46.75627518]
[175.51008606 56.51554871]
[164.11900330 66.27482605]
[152.82873535 76.15052795]
[141.64042664 86.14162445]
[130.45213318 96.13272858]
[129.22152710 111.08216095]
[138.62538147 122.76837158]
[148.02923584 134.45457458]
[157.43309021 146.14079285]
[170.18635559 154.03726196]
[184.83908081 157.24626160]
[192.68756104 144.29713440]
[204.31695557 134.59992981]
[218.46582031 129.20654297]
[233.59934998 128.70199585]
[248.07601929 133.14102173]
[260.32546997 142.04212952]
[269.01901245 154.43975830]
[273.21359253 168.98913574]
[272.45422363 184.11203003]
[266.82330322 198.16804504]
[256.93161011 209.63247681]
[243.85212708 217.26174927]
[229.00361633 220.22828674]
[213.99673462 218.21032715]
[200.45930481 211.42674255]
[189.85978699 200.61338806]
[183.34793091 186.94317627]
[181.63008118 171.89898682]
[166.97735596 168.68998718]
[161.13424683 173.39192200]
[172.45475769 183.23297119]
[183.77525330 193.07402039]
[198.01557922 197.78710938]
[205.68104553 210.68054199]
[203.01908875 225.44245911]
[191.33287048 234.84628296]
[176.34324646 234.28846741]
[165.38825989 224.04208374]
[163.83081055 209.12326050]
[156.63941956 195.95951843]
[149.44804382 182.79577637]
[143.60493469 187.49771118]
[143.60493469 202.49771118]
[143.60493469 217.49771118]
[143.60493469 232.49771118]
[143.60493469 247.49771118]
[143.60493469 262.49771118]
[143.60493469 277.49771118]
[143.60493469 292.49771118]
[143.60493469 307.49771118]
[143.60493469 322.49771118]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 152]
[2 151]
[3 150]
[4 149]
[5 148]
[6 147]
[7 146]
[8 145]
[9 144]
[10 143]
[11 109]
[12 108]
[13 107]
[14 106]
[16 54]
[17 53]
[18 52]
[19 51]
[20 50]
[21 28]
[22 27]
[34 44]
[35 43]
[36 42]
[63 88]
[64 87]
[65 86]
[68 85]
[69 84]
[70 83]
[89 105]
[90 104]
[91 103]
[93 102]
[94 101]
[95 100]
[110 130]
[111 129]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
