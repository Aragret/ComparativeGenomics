%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:17 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGAUCAAAAGGAACAAGCAUCAAGCACGCAGCAAUGCAGCUCAAAACGCUUAGCCUAGCCACxxxxxxxxxxAUCGUACUACACGACACGUACUACGUUGUAGCCCACUUCCACUAUGUCCUAUCAAUAGGACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[95.49763489 393.40499878]
[95.49763489 378.40499878]
[95.49763489 363.40499878]
[95.49763489 348.40499878]
[95.49763489 333.40499878]
[95.49763489 318.40499878]
[95.49763489 303.40499878]
[95.49763489 288.40499878]
[95.49763489 273.40499878]
[95.49763489 258.40499878]
[78.69860077 252.19822693]
[65.50263214 240.04081726]
[57.91427612 223.74482727]
[57.09948730 205.75349426]
[63.20651627 188.77507019]
[75.33975220 175.37503052]
[91.69097137 167.58851624]
[90.44409180 152.64042664]
[89.19721985 137.69235229]
[87.95034790 122.74425507]
[80.63124084 109.65110779]
[68.55125427 100.75875092]
[54.64869690 95.12680054]
[39.78564835 93.10446167]
[24.92260170 91.08213043]
[10.05955410 89.05979156]
[-0.31864974 103.17321777]
[-16.31833267 110.08766937]
[-33.53298950 107.99620056]
[-47.27042770 97.55893707]
[-53.83170700 81.69848633]
[-68.76601410 80.29618835]
[-83.70032501 78.89388275]
[-94.15227509 86.52346039]
[-106.59905243 85.00796509]
[-114.39779663 75.70812988]
[-129.29969788 73.99543762]
[-144.20159912 72.28274536]
[-159.02355957 79.29998016]
[-172.35591125 69.75112915]
[-170.48345947 53.45922852]
[-155.33244324 47.18399048]
[-142.48890686 57.38084412]
[-127.58701324 59.09353638]
[-112.68510437 60.80622482]
[-97.02265930 52.95207977]
[-82.29801941 63.95957184]
[-67.36370850 65.36187744]
[-52.42940521 66.76418304]
[-46.22649765 55.67708969]
[-36.24048996 47.74786377]
[-23.94606018 44.19292068]
[-11.17615032 45.57932281]
[0.15129443 51.73466110]
[8.32138634 61.76758957]
[12.08188915 74.19674683]
[26.94493484 76.21907806]
[41.80798340 78.24141693]
[56.67102814 80.26374817]
[45.01797485 70.81884003]
[35.90957642 58.90090942]
[29.85554886 45.17688751]
[27.19467735 30.41478348]
[28.07586670 15.44068909]
[32.44980240 1.09256411]
[40.07172012 -11.82666111]
[50.51509094 -22.59402084]
[63.19549561 -30.60696602]
[77.40333557 -35.41708755]
[92.34352875 -36.75521088]
[107.18001556 -34.54645157]
[121.08254242 -28.91441154]
[133.27310181 -20.17426682]
[143.06951904 -8.81511879]
[149.92356873 4.52736759]
[153.45170593 19.10654068]
[153.45648193 34.10654068]
[149.93763733 48.68795776]
[143.09208679 62.03480911]
[133.30291748 73.40019989]
[121.11792755 82.14810944]
[107.21899414 87.78900146]
[92.38391876 90.00721741]
[77.44360352 88.67876434]
[89.52359009 97.57111359]
[84.10139465 77.19175720]
[105.61331177 55.50185394]
[118.05274963 47.11970901]
[130.49218750 38.73756790]
[142.93162537 30.35542297]
[155.37107849 21.97327995]
[157.18524170 17.86593437]
[159.95689392 14.88449097]
[163.20086670 13.19379711]
[166.42919922 12.77924252]
[169.21147156 13.46214008]
[182.30462646 6.14303446]
[195.39778137 -1.17607105]
[208.49093628 -8.49517632]
[219.36628723 -21.50144005]
[234.87486267 -14.65158367]
[232.58590698 2.14713621]
[215.81002808 4.59797764]
[202.71687317 11.91708374]
[189.62371826 19.23618889]
[176.53057861 26.55529404]
[163.75321960 34.41271973]
[151.31376648 42.79486465]
[138.87432861 51.17700577]
[126.43489075 59.55915070]
[113.99545288 67.94129181]
[115.16100311 75.35017395]
[117.49211121 90.16793060]
[118.65766144 97.57681274]
[133.06987000 101.73469543]
[144.61323547 91.49974060]
[159.86105347 89.15293884]
[173.94781494 95.44314575]
[182.37847900 108.36318970]
[182.46286011 123.79032135]
[174.17401123 136.80180359]
[160.15689087 143.24571228]
[144.88432312 141.06584167]
[133.22970581 130.95774841]
[128.91198730 116.14691162]
[114.49977112 111.98902893]
[102.89842987 121.49738312]
[104.14530945 136.44546509]
[105.39218140 151.39355469]
[106.63905334 166.34164429]
[118.63143921 168.95179749]
[129.51631165 174.59045410]
[138.54484558 182.86120605]
[145.09815979 193.18688965]
[148.72970581 204.84979248]
[149.19570923 217.04162598]
[146.47149658 228.91947937]
[140.75270081 239.66410828]
[132.44123840 248.53649902]
[122.11704254 254.92857361]
[110.49763489 258.40499878]
[110.49763489 273.40499878]
[110.49763489 288.40499878]
[110.49763489 303.40499878]
[110.49763489 318.40499878]
[110.49763489 333.40499878]
[110.49763489 348.40499878]
[110.49763489 363.40499878]
[110.49763489 378.40499878]
[110.49763489 393.40499878]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[17 130]
[18 129]
[19 128]
[20 127]
[21 85]
[22 84]
[23 59]
[24 58]
[25 57]
[26 56]
[31 49]
[32 48]
[33 47]
[36 45]
[37 44]
[38 43]
[87 111]
[88 110]
[89 109]
[90 108]
[91 107]
[96 106]
[97 105]
[98 104]
[99 103]
[114 126]
[115 125]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
