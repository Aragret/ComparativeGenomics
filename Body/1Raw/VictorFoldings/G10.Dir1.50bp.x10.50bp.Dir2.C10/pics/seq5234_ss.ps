%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:26 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGAAAAUCUUAGCAUACUCCUCAAUUACCCACAUAGGAUGAAUAAUAGCAGUUCUACCGUACAxxxxxxxxxxUCACCACUCUGUUCGCAGCAGUCUGCGCCCUUACACAAAAUGACAUCAAAAAAAUCGUAGCCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[129.95303345 300.42779541]
[129.95303345 285.42779541]
[129.95303345 270.42779541]
[129.95303345 255.42778015]
[129.95303345 240.42778015]
[129.95303345 225.42778015]
[129.95303345 210.42778015]
[129.95303345 195.42778015]
[129.95303345 180.42778015]
[129.95303345 165.42778015]
[125.55274200 151.08772278]
[117.13932800 138.66940308]
[103.46246338 142.15556335]
[89.40006256 140.94778442]
[76.51793671 135.18057251]
[66.25048828 125.49607849]
[59.74096680 112.97265625]
[44.87437057 114.96871948]
[30.00777054 116.96477509]
[15.73139763 128.54992676]
[-0.23124085 121.32229614]
[-15.05372334 123.62316895]
[-29.87620544 125.92404175]
[-42.32622147 135.68661499]
[-56.08971024 129.99313354]
[-70.91219330 132.29400635]
[-73.82599640 147.16967773]
[-81.65451050 160.15005493]
[-93.45240784 169.66769409]
[-107.79503632 174.57328796]
[-122.95044708 174.27447510]
[-137.08856201 168.80732727]
[-148.50212097 158.83203125]
[-155.81288147 145.55316162]
[-158.13804626 130.57418823]
[-155.19683838 115.70391846]
[-147.34440613 102.73799133]
[-135.52899170 93.24211121]
[-121.17735291 88.36295319]
[-106.02251434 88.68969727]
[-91.89450836 94.18289185]
[-80.49935150 104.17919922]
[-73.21306610 117.47152710]
[-58.39058304 115.17065430]
[-47.00077057 105.57266235]
[-32.17707825 111.10156250]
[-17.35459709 108.80068970]
[-2.53211570 106.49980927]
[4.89106655 96.89988708]
[17.26598549 94.89171600]
[28.01171303 102.09817505]
[42.87831116 100.10211945]
[57.74491119 98.10606384]
[62.22516251 80.96999359]
[73.32928467 67.17086029]
[89.11014557 59.12836456]
[87.87953186 44.17892838]
[86.64892578 29.22949409]
[85.41831207 14.28005981]
[70.46638489 12.56943798]
[56.13557816 7.97441864]
[42.97672653 0.67162371]
[31.49561882 -9.05824757]
[22.13355827 -20.84120369]
[15.25039959 -34.22434235]
[11.11071205 -48.69324493]
[9.87361431 -63.69177246]
[11.58665752 -78.64341736]
[16.18399620 -92.97348022]
[23.48892021 -106.13115692]
[33.22064972 -117.61068726]
[45.00512314 -126.97084045]
[58.38937378 -133.85183716]
[72.85894775 -137.98918152]
[87.85767365 -139.22384644]
[102.80904388 -137.50837708]
[117.13835907 -132.90872192]
[130.29484558 -125.60166931]
[141.77281189 -115.86808777]
[151.13105774 -104.08209991]
[158.00987244 -90.69673157]
[162.14488220 -76.22648621]
[163.37712097 -61.22756195]
[161.65924072 -46.27647018]
[157.05726624 -31.94789696]
[149.74807739 -18.79259300]
[140.01263428 -7.31621027]
[128.22512817 2.04012704]
[114.83866119 8.91678619]
[100.36774445 13.04944801]
[101.59835815 27.99888229]
[102.82897186 42.94831848]
[104.05957794 57.89775085]
[119.24134827 62.33237457]
[131.73275757 72.03374481]
[144.56642151 64.26861572]
[157.40007019 56.50347519]
[170.23371887 48.73834229]
[183.06738281 40.97320557]
[190.49526978 26.35272789]
[206.88317871 25.74554634]
[215.37261963 39.77627945]
[207.23039246 54.01131058]
[190.83251953 53.80685806]
[177.99885559 61.57199478]
[165.16520691 69.33712769]
[152.33155823 77.10226440]
[139.49789429 84.86740112]
[142.17817688 96.82486725]
[141.31825256 109.04883575]
[136.99032593 120.51329803]
[129.55764771 130.25599670]
[137.97105408 142.67431641]
[137.36984253 127.68636322]
[139.74192810 112.87510681]
[144.99374390 98.82454681]
[152.91824341 86.08867645]
[163.20295715 75.16966248]
[175.44235229 66.49804688]
[189.15386963 60.41573334]
[203.79684448 57.16255188]
[218.79393005 56.86676788]
[233.55378723 59.54004288]
[247.49446106 65.07697296]
[260.06628418 73.25924683]
[270.77352905 83.76423645]
[279.19403076 96.17773438]
[284.99578857 110.01029205]
[287.95004272 124.71649933]
[287.94027710 139.71649170]
[284.96691895 154.41883850]
[279.14715576 168.24383545]
[270.71051025 180.64637756]
[259.98959351 191.13742065]
[247.40715027 199.30332947]
[233.45928955 204.82212830]
[218.69596863 207.47619629]
[203.69927979 207.16090393]
[189.06054688 203.88867188]
[175.35696411 197.78852844]
[163.12884521 189.10099792]
[152.85835266 178.16862488]
[144.95303345 165.42778015]
[144.95303345 180.42778015]
[144.95303345 195.42778015]
[144.95303345 210.42778015]
[144.95303345 225.42778015]
[144.95303345 240.42778015]
[144.95303345 255.42778015]
[144.95303345 270.42779541]
[144.95303345 285.42779541]
[144.95303345 300.42779541]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 152]
[2 151]
[3 150]
[4 149]
[5 148]
[6 147]
[7 146]
[8 145]
[9 144]
[10 143]
[11 113]
[12 112]
[17 53]
[18 52]
[19 51]
[21 48]
[22 47]
[23 46]
[25 44]
[26 43]
[56 93]
[57 92]
[58 91]
[59 90]
[95 108]
[96 107]
[97 106]
[98 105]
[99 104]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
