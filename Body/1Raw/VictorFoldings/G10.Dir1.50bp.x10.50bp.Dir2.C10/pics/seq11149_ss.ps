%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:40 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCAACAUUUCCCCCGCAUCCCCCUUCCAAACAACAAUCCCCCUCUACCUAAAACUCACAGCxxxxxxxxxxCCCCUAAUAAAAUUAAUUAACCACUCAUUCAUCGACCUCCCCACCCCAUCCAACAUCUCCCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[150.64372253 50.04026794]
[141.13536072 61.64160919]
[131.62699890 73.24295044]
[122.11864471 84.84429169]
[112.61028290 96.44563293]
[103.59275055 108.43246460]
[95.08166504 120.78403473]
[86.57057190 133.13560486]
[78.05948639 145.48718262]
[69.54839325 157.83876038]
[74.83714294 172.42672729]
[70.50890350 187.32792664]
[58.22796631 196.81256104]
[42.71660233 197.23358154]
[29.93925095 188.42909241]
[24.80906105 173.78460693]
[29.29869843 158.93124390]
[41.68180466 149.58039856]
[57.19681931 149.32766724]
[65.70790863 136.97608948]
[74.21900177 124.62451935]
[82.73008728 112.27294922]
[91.24118042 99.92137909]
[90.91310883 96.81874847]
[91.73741150 93.52706146]
[93.78638458 90.48442078]
[96.96522522 88.14926910]
[101.00894165 86.93727112]
[110.51730347 75.33592987]
[120.02565765 63.73459244]
[129.53401184 52.13325119]
[139.04237366 40.53190994]
[127.94762421 30.43199158]
[117.39204407 19.76982498]
[107.40410614 8.57415485]
[98.01073456 -3.12483764]
[89.23724365 -15.29561329]
[81.10729218 -27.90536308]
[73.64279175 -40.92009354]
[66.86386871 -54.30471420]
[60.78879547 -68.02314758]
[55.43395233 -82.03841400]
[50.81377411 -96.31272125]
[46.94071579 -110.80759430]
[43.82522202 -125.48395538]
[41.47568512 -140.30224609]
[39.89844513 -155.22250366]
[39.09774780 -170.20452881]
[39.07575607 -185.20790100]
[39.83252716 -200.19219971]
[41.36602402 -215.11701965]
[43.67211151 -229.94213867]
[46.74457169 -244.62756348]
[50.57511902 -259.13372803]
[55.15343094 -273.42150879]
[60.46716309 -287.45242310]
[66.50199127 -301.18859863]
[73.24165344 -314.59304810]
[80.66796875 -327.62960815]
[88.76091766 -340.26312256]
[97.49869537 -352.45956421]
[106.85773468 -364.18606567]
[116.81281281 -375.41094971]
[127.33708191 -386.10400391]
[138.40217590 -396.23641968]
[149.97827148 -405.78082275]
[162.03416443 -414.71154785]
[174.53733826 -423.00448608]
[187.45408630 -430.63726807]
[200.74960327 -437.58932495]
[214.38803101 -443.84191895]
[228.33262634 -449.37820435]
[242.54576111 -454.18325806]
[256.98913574 -458.24411011]
[271.62384033 -461.54983521]
[286.41040039 -464.09149170]
[301.30892944 -465.86224365]
[316.27929688 -466.85729980]
[331.28112793 -467.07400513]
[346.27398682 -466.51177979]
[361.21743774 -465.17211914]
[376.07122803 -463.05862427]
[390.79531860 -460.17703247]
[405.34997559 -456.53506470]
[419.69598389 -452.14257812]
[433.79464722 -447.01138306]
[447.60800171 -441.15533447]
[461.09878540 -434.59020996]
[474.23062134 -427.33374023]
[486.96810913 -419.40542603]
[499.27694702 -410.82669067]
[511.12390137 -401.62060547]
[522.47705078 -391.81207275]
[533.30578613 -381.42745972]
[543.58099365 -370.49478149]
[553.27484131 -359.04354858]
[562.36126709 -347.10458374]
[570.81573486 -334.71008301]
[578.61553955 -321.89349365]
[585.73956299 -308.68933105]
[592.16864014 -295.13317871]
[597.88543701 -281.26162720]
[602.87457275 -267.11206055]
[607.12249756 -252.72257996]
[610.61791992 -238.13201904]
[613.35125732 -223.37971497]
[615.31518555 -208.50541687]
[616.50445557 -193.54922485]
[616.91589355 -178.55146790]
[616.54827881 -163.55258179]
[615.40264893 -148.59298706]
[613.48211670 -133.71301270]
[610.79187012 -118.95278168]
[607.33911133 -104.35208130]
[603.13317871 -89.95027161]
[598.18542480 -75.78617859]
[592.50915527 -61.89799118]
[586.11968994 -48.32314301]
[579.03424072 -35.09823227]
[571.27191162 -22.25890732]
[562.85363770 -9.83978653]
[553.80206299 2.12565446]
[544.14172363 13.60515690]
[533.89849854 24.56777382]
[523.10009766 34.98395157]
[511.77566528 44.82561493]
[499.95562744 54.06622314]
[487.67190552 62.68087387]
[474.95761108 70.64633942]
[461.84701538 77.94113922]
[448.37545776 84.54562378]
[434.57925415 90.44197845]
[420.49563599 95.61430359]
[406.16250610 100.04866791]
[391.61853027 103.73310089]
[376.90295410 106.65768433]
[362.05538940 108.81452942]
[347.11590576 110.19782257]
[332.12475586 110.80383301]
[317.12234497 110.63092041]
[302.14913940 109.67956543]
[287.24548340 107.95231628]
[272.45159912 105.45384216]
[257.80731201 102.19087982]
[243.35212708 98.17221069]
[229.12501526 93.40868378]
[215.16433716 87.91313171]
[201.50770569 81.70037842]
[188.19194031 74.78716278]
[175.25296021 67.19212341]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 32]
[2 31]
[3 30]
[4 29]
[5 28]
[6 23]
[7 22]
[8 21]
[9 20]
[10 19]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
