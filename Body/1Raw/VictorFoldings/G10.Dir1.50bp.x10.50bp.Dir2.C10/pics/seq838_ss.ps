%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:33 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGGUUUAUGUAGCUUACCUCCUCAAAGCAAUACACUGAAAAUGUUUAGACGGGCUCACAUCACxxxxxxxxxxGACCCCCGAAACCAGACGAGCUACCUAAGAACAGCUAAAAGAGCACACCCGUCUAUGUAGCCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[112.57415009 322.18710327]
[115.15992737 302.97866821]
[115.46790314 287.98184204]
[115.77587891 272.98498535]
[116.08386230 257.98815918]
[116.39183807 242.99131775]
[116.69981384 227.99449158]
[117.00778961 212.99765015]
[117.31577301 198.00080872]
[117.62374878 183.00396729]
[117.93172455 168.00714111]
[115.02425385 153.29161072]
[109.03595734 139.53878784]
[103.04766083 125.78595734]
[82.54718781 122.74362946]
[68.95389557 104.50492096]
[55.02317810 110.06685638]
[41.09246063 115.62879944]
[27.16174698 121.19073486]
[13.34816360 127.03752136]
[-0.34246212 133.16670227]
[-14.03308773 139.29586792]
[-27.72371292 145.42504883]
[-29.93149185 160.69361877]
[-40.06085205 172.32974243]
[-54.87955093 176.62039185]
[-69.65899658 172.19642639]
[-79.68312836 160.46951294]
[-81.75326538 145.18167114]
[-75.20885468 131.21119690]
[-62.13817596 123.01602173]
[-46.71204758 123.21118164]
[-33.85288620 131.73442078]
[-20.16226196 125.60523987]
[-6.47163582 119.47606659]
[7.21898937 113.34689331]
[9.74431229 109.22718811]
[14.91323471 106.68354797]
[21.59980965 107.26001740]
[35.53052521 101.69808197]
[49.46124268 96.13613892]
[63.39195633 90.57420349]
[69.93982697 77.07881927]
[65.68698120 62.69433975]
[61.43413544 48.30986023]
[51.81038666 59.81566238]
[36.81104279 59.67570114]
[27.40367699 47.99231339]
[30.46699905 33.30844498]
[43.76109314 26.36099434]
[57.56485367 32.22950363]
[54.80860901 17.48490906]
[52.05236816 2.74031258]
[49.29612350 -12.00428391]
[45.81305695 -16.05687332]
[44.41600037 -20.59050941]
[44.93191528 -24.71403122]
[46.85353851 -27.73968506]
[45.01021194 -42.62599182]
[43.16688919 -57.51229858]
[41.32356644 -72.39860535]
[26.35296249 -74.17189026]
[12.24200249 -79.47700500]
[-0.18892615 -88.00550842]
[-10.21710396 -99.26158142]
[-17.25950432 -112.59079742]
[-20.90669441 -127.21821594]
[-20.94662857 -142.29342651]
[-17.37698746 -156.93995667]
[-10.40530396 -170.30630493]
[-0.43690276 -181.61534119]
[11.94866657 -190.20959473]
[26.03132248 -195.58938599]
[40.99232101 -197.44197083]
[55.96184158 -195.65960693]
[70.06958771 -190.34593201]
[82.49533844 -181.80989075]
[92.51669312 -170.54774475]
[99.55101013 -157.21426392]
[103.18933105 -142.58464050]
[103.22013092 -127.50940704]
[99.64160919 -112.86503601]
[92.66181946 -99.50292206]
[82.68656158 -88.19992828]
[70.29578400 -79.61318970]
[56.20987320 -74.24192810]
[58.05319595 -59.35562515]
[59.89652252 -44.46931458]
[61.73984528 -29.58300972]
[64.04071808 -14.76052666]
[66.79696655 -0.01593026]
[69.55320740 14.72866631]
[72.30944824 29.47326279]
[75.81861877 44.05701065]
[80.07146454 58.44149399]
[84.32431030 72.82597351]
[95.89575195 70.26209259]
[107.06315613 72.21537781]
[116.20428467 78.00833130]
[122.14041901 86.43513489]
[136.64904785 82.62727356]
[151.15766907 78.81941223]
[165.66629028 75.01155853]
[169.64012146 60.17564392]
[180.51084900 49.32563400]
[195.35432434 45.38011932]
[210.17770386 49.40042877]
[220.99357605 60.30511856]
[224.89254761 75.16088104]
[220.82579041 89.97158813]
[209.88725281 100.75323486]
[195.01934814 104.60562134]
[180.22146606 100.49246216]
[169.47415161 89.52017975]
[154.96553040 93.32804108]
[140.45689392 97.13590240]
[125.94827271 100.94375610]
[123.36090088 111.33454895]
[116.80049133 119.79766083]
[122.78878784 133.55049133]
[128.77708435 147.30331421]
[130.73718262 132.43193054]
[136.56730652 118.61131287]
[145.85076904 106.82922363]
[157.92404175 97.92777252]
[171.92425537 92.54314423]
[186.85076904 91.06018829]
[201.63676453 93.58490753]
[215.22547913 99.93684387]
[226.64567566 109.66201019]
[235.08116150 122.06534576]
[239.92901611 136.26036072]
[240.84275818 151.23249817]
[237.75709534 165.91169739]
[230.89254761 179.24877930]
[220.73976135 190.29055786]
[208.02433777 198.24783325]
[193.65510559 202.55189514]
[178.65902710 202.89511108]
[164.10792542 199.25297546]
[151.04176331 191.88577271]
[140.39442444 181.32006836]
[132.92855835 168.31510925]
[132.62059021 183.31195068]
[132.31260681 198.30879211]
[132.00462341 213.30561829]
[131.69665527 228.30245972]
[131.38867188 243.29930115]
[131.08070374 258.29614258]
[130.77272034 273.29296875]
[130.46473694 288.28982544]
[130.15676880 303.28665161]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 152]
[3 151]
[4 150]
[5 149]
[6 148]
[7 147]
[8 146]
[9 145]
[10 144]
[11 143]
[12 121]
[13 120]
[14 119]
[16 42]
[17 41]
[18 40]
[19 39]
[20 36]
[21 35]
[22 34]
[23 33]
[43 96]
[44 95]
[45 94]
[51 93]
[52 92]
[53 91]
[54 90]
[58 89]
[59 88]
[60 87]
[61 86]
[100 117]
[101 116]
[102 115]
[103 114]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
