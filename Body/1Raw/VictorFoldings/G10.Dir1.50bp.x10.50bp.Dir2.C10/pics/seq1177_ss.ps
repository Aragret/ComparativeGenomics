%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:09 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGUCAAUUUCGUGCCAGCCACCGCGGUCACACGAUUAACCCAAGUCAAUAGAAGCCGGCGUAxxxxxxxxxxAACCAUCUUCUCCUUACACCUAGCAGGUGUCUCCUCUAUCUUAGGGGCCAUCAAUUUCAUCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[88.42335510 292.25897217]
[88.42335510 277.25897217]
[88.42335510 262.25897217]
[88.42335510 247.25897217]
[88.42335510 232.25897217]
[88.42335510 217.25897217]
[88.42335510 202.25897217]
[88.42335510 187.25897217]
[88.42335510 172.25897217]
[88.42335510 157.25897217]
[70.87573242 141.31431580]
[63.44309235 122.02352142]
[65.47451782 104.43199158]
[74.16172791 92.37739563]
[59.22742081 93.77970123]
[44.29311371 95.18200684]
[29.64961052 98.43283081]
[15.52480793 103.48159027]
[1.40000522 108.53034210]
[-12.72479725 113.57910156]
[-26.84959984 118.62785339]
[-40.80998993 124.11489105]
[-54.59237289 130.03485107]
[-61.29523087 136.33750916]
[-68.72359467 135.93130493]
[-82.62615204 141.56324768]
[-92.27834320 154.82098389]
[-108.55519867 152.82196045]
[-114.71248627 137.62263489]
[-104.41611481 124.85874176]
[-88.25811005 127.66069794]
[-74.35555267 122.02873993]
[-60.51233673 116.25247192]
[-46.72995377 110.33250427]
[-45.08721542 107.14363861]
[-41.78420258 104.61543274]
[-37.15978622 103.53509521]
[-31.89835739 104.50305176]
[-17.77355385 99.45429993]
[-3.64875102 94.40554047]
[10.47605228 89.35678101]
[24.60085487 84.30802917]
[10.17878819 80.18444061]
[-1.10551727 70.30190277]
[-7.09495497 56.54957581]
[-6.64458466 41.55633545]
[0.15950102 28.18829918]
[12.01663399 19.00089455]
[26.66020584 15.75038528]
[41.29095078 19.05813789]
[53.11206436 28.29184532]
[59.86381531 41.68638992]
[60.25554657 56.68127441]
[54.21237183 70.41007996]
[42.89080811 80.24769592]
[57.82511520 78.84539795]
[72.75942230 77.44309235]
[82.62514496 66.14408875]
[82.00116730 51.15707016]
[81.37718964 36.17005539]
[80.75321198 21.18303680]
[80.12923431 6.19602156]
[68.78099060 -4.47426939]
[68.36168671 -19.68212318]
[78.60411835 -30.43518257]
[77.98014069 -45.42219925]
[63.52510834 -49.98596573]
[51.50461578 -59.22087479]
[43.37019348 -72.01176453]
[40.10410690 -86.81407928]
[42.10075760 -101.84036255]
[49.11903763 -115.27612305]
[60.31145859 -125.49891663]
[74.32647705 -131.27430725]
[89.47171783 -131.90486145]
[103.91830444 -127.31446838]
[115.92176056 -118.05741882]
[124.03260040 -105.25155640]
[127.27140045 -90.44325256]
[125.24706268 -75.42066956]
[118.20403290 -61.99787521]
[106.99279022 -51.79572296]
[92.96715546 -46.04617691]
[93.59113312 -31.05916023]
[104.69195557 -21.19471741]
[105.53825378 -6.00464106]
[95.11625671 5.57204437]
[95.74023438 20.55906105]
[96.36421204 35.54607773]
[96.98818970 50.53309250]
[97.61215973 65.52011108]
[104.00083923 69.44882202]
[111.85846710 56.67158508]
[124.63558197 64.52940369]
[116.77819824 77.30624390]
[123.16687775 81.23496246]
[136.82312012 75.02955627]
[150.47935486 68.82414246]
[164.13560486 62.61874008]
[177.79183960 56.41333008]
[191.44808960 50.20792389]
[203.36695862 38.15068817]
[218.25245667 46.26598740]
[214.57502747 62.81629944]
[197.65348816 63.86416626]
[183.99725342 70.06957245]
[170.34100342 76.27497864]
[156.68476868 82.48038483]
[143.02853394 88.68579102]
[129.37228394 94.89120483]
[129.91793823 102.37132263]
[131.00924683 117.33157349]
[131.55490112 124.81169891]
[145.96711731 128.96958923]
[160.37933350 133.12747192]
[174.79154968 137.28535461]
[189.20376587 141.44325256]
[203.61598206 145.60113525]
[220.51045227 144.18222046]
[226.55078125 160.02363586]
[213.00056458 170.21325684]
[199.45809937 160.01335144]
[185.04588318 155.85546875]
[170.63366699 151.69757080]
[156.22145081 147.53968811]
[141.80923462 143.38180542]
[127.39701843 139.22390747]
[121.40360260 143.73268127]
[132.05812073 154.29115295]
[142.71263123 164.84962463]
[153.36714172 175.40809631]
[166.23870850 183.11022949]
[169.92956543 197.64906311]
[162.29040527 210.55809021]
[147.76977539 214.31993103]
[134.82359314 206.74391174]
[130.99092102 192.24142456]
[123.79953766 179.07768250]
[116.60815430 165.91394043]
[109.41677094 152.75021362]
[103.42335510 157.25897217]
[103.42335510 172.25897217]
[103.42335510 187.25897217]
[103.42335510 202.25897217]
[103.42335510 217.25897217]
[103.42335510 232.25897217]
[103.42335510 247.25897217]
[103.42335510 262.25897217]
[103.42335510 277.25897217]
[103.42335510 292.25897217]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[14 57]
[15 56]
[16 55]
[17 42]
[18 41]
[19 40]
[20 39]
[21 38]
[22 34]
[23 33]
[25 32]
[26 31]
[58 91]
[59 90]
[60 89]
[61 88]
[62 87]
[65 84]
[66 83]
[96 110]
[97 109]
[98 108]
[99 107]
[100 106]
[101 105]
[113 127]
[114 126]
[115 125]
[116 124]
[117 123]
[118 122]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
