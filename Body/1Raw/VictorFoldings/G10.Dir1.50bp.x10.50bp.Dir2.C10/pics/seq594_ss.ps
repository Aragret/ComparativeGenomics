%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:17 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGUCCCAUACUACUAAUCUCAUCAAUACAACCCCCGCCCAUCCUACCCAGCACACACACACCxxxxxxxxxxUCAGACCCAAACAUUAAUCAGUUCUUCAAAUAUCUACUCAUCUUCCUAAUUACCAUACUACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[148.47480774 96.57912445]
[139.87866211 84.28128815]
[127.10130310 92.13871002]
[114.32394409 99.99613953]
[107.50328827 112.20147705]
[93.53347778 112.78121948]
[80.75612640 120.63864136]
[67.97876740 128.49606323]
[55.20140839 136.35350037]
[42.42405319 144.21092224]
[29.64669418 152.06834412]
[34.49111176 166.33296204]
[36.03937912 181.31797791]
[34.21382904 196.27174377]
[29.10603142 210.44418335]
[20.97219276 223.12442017]
[10.22030354 233.67642212]
[-2.61032653 241.57089233]
[-16.87611771 246.41184998]
[-31.86150551 247.95648193]
[-46.81483078 246.12731934]
[-60.98603439 241.01608276]
[-73.66429901 232.87916565]
[-84.21369171 222.12472534]
[-92.10505676 209.29219055]
[-96.94255829 195.02522278]
[-98.48355865 180.03945923]
[-96.65076447 165.08657837]
[-91.53610229 150.91661072]
[-83.39611816 138.24032593]
[-72.63911438 127.69353485]
[-59.80466080 119.80528259]
[-45.53652573 114.97123718]
[-30.55039215 113.43386078]
[-15.59795666 115.27027893]
[-1.42923033 120.38838196]
[11.24509144 128.53143311]
[21.78926849 139.29098511]
[34.56662750 131.43356323]
[47.34398270 123.57614136]
[60.12134171 115.71871185]
[72.89869690 107.86128998]
[85.67605591 100.00386047]
[92.49671173 87.79852295]
[106.46652222 87.21878052]
[119.24387360 79.36135864]
[132.02124023 71.50392914]
[124.92505646 58.28369141]
[118.61697388 44.66977692]
[113.11874390 30.70912361]
[108.44930267 16.44985199]
[104.62475586 1.94111991]
[101.65828705 -12.76705933]
[99.56011963 -27.62398338]
[98.33748627 -42.57843399]
[97.99460602 -57.57886505]
[98.53266144 -72.57356262]
[99.94979095 -87.51084137]
[102.24111938 -102.33920288]
[105.39873505 -117.00753021]
[109.41176605 -131.46527100]
[114.26637268 -145.66256714]
[119.94581604 -159.55049133]
[126.43051910 -173.08116150]
[133.69813538 -186.20793152]
[141.72360229 -198.88557434]
[150.47926331 -211.07034302]
[159.93492126 -222.72027588]
[170.05799866 -233.79519653]
[180.81358337 -244.25692749]
[192.16461182 -254.06941223]
[204.07194519 -263.19879150]
[216.49453735 -271.61364746]
[229.38957214 -279.28494263]
[242.71258545 -286.18621826]
[256.41766357 -292.29370117]
[270.45755005 -297.58636475]
[284.78384399 -302.04589844]
[299.34716797 -305.65698242]
[314.09732056 -308.40716553]
[328.98345947 -310.28695679]
[343.95425415 -311.28985596]
[358.95809937 -311.41241455]
[373.94329834 -310.65423584]
[388.85815430 -309.01791382]
[403.65124512 -306.50909424]
[418.27163696 -303.13644409]
[432.66888428 -298.91152954]
[446.79336548 -293.84899902]
[460.59640503 -287.96621704]
[474.03039551 -281.28353882]
[487.04904175 -273.82394409]
[499.60745239 -265.61318970]
[511.66235352 -256.67953491]
[523.17218018 -247.05383301]
[534.09722900 -236.76922607]
[544.39990234 -225.86117554]
[554.04467773 -214.36727905]
[562.99822998 -202.32717896]
[571.22973633 -189.78236389]
[578.71087646 -176.77607727]
[585.41577148 -163.35314941]
[591.32135010 -149.55987549]
[596.40722656 -135.44378662]
[600.65594482 -121.05354309]
[604.05279541 -106.43875885]
[606.58605957 -91.64981079]
[608.24707031 -76.73768616]
[609.03002930 -61.75377655]
[608.93225098 -46.74974442]
[607.95416260 -31.77731514]
[606.09899902 -16.88809395]
[603.37322998 -2.13341188]
[599.78619385 12.43586922]
[595.35034180 26.76952553]
[590.08093262 40.81814575]
[583.99615479 54.53330231]
[577.11688232 67.86771393]
[569.46697998 80.77542114]
[561.07269287 93.21191406]
[551.96295166 105.13433075]
[542.16931152 116.50157166]
[531.72534180 127.27445221]
[520.66717529 137.41583252]
[509.03292847 146.89074707]
[496.86264038 155.66654968]
[484.19830322 163.71298218]
[471.08355713 171.00228882]
[457.56362915 177.50936890]
[443.68511963 183.21177673]
[429.49588013 188.08985901]
[415.04479980 192.12680054]
[400.38171387 195.30867004]
[385.55715942 197.62451172]
[370.62225342 199.06636047]
[355.62847900 199.62921143]
[340.62750244 199.31114197]
[325.67102051 198.11325073]
[310.81066895 196.03965759]
[296.09759521 193.09751892]
[281.58255005 189.29698181]
[267.31558228 184.65112305]
[253.34585571 179.17599487]
[239.72152710 172.89044189]
[226.48956299 165.81613159]
[213.69558716 157.97747803]
[201.38369751 149.40147400]
[189.59632874 140.11770630]
[178.37413025 130.15815735]
[167.75576782 119.55715942]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 47]
[3 46]
[4 45]
[6 43]
[7 42]
[8 41]
[9 40]
[10 39]
[11 38]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
