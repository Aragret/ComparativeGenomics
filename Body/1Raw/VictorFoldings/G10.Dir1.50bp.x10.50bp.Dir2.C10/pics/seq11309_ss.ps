%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:17 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGUCAAUUACAAUAUAUACACCAACAAACAAUGUUCAACCAGUAACUACUACUAAUCAACGCxxxxxxxxxxUCGCACGGACUACAACCACGACCAAUGAUAUGAAAAACCAUCGUUGUAUUUCAACUACAACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[56.33569717 604.21545410]
[58.92669678 585.00775146]
[59.23875427 570.01098633]
[59.55080795 555.01422119]
[59.86286545 540.01745605]
[60.17492294 525.02069092]
[60.48697662 510.02395630]
[60.79903412 495.02719116]
[61.11109161 480.03045654]
[61.42314529 465.03369141]
[47.28350830 461.68322754]
[34.15001678 455.45077515]
[22.60308838 446.60897827]
[13.15360165 435.54583740]
[6.22030783 422.74771118]
[2.11127019 408.77792358]
[1.01017642 394.25192261]
[2.96812963 379.81030273]
[7.90128088 366.09039307]
[15.59441853 353.69827271]
[25.71035576 343.18191528]
[37.80470657 335.00692749]
[51.34540558 329.53601074]
[65.73612976 327.01284790]
[66.36009979 312.02584839]
[66.98407745 297.03881836]
[67.60805511 282.05181885]
[68.23203278 267.06478882]
[56.92918015 276.92611694]
[41.93635559 277.39001465]
[30.04545784 268.24633789]
[26.64318085 253.63728333]
[33.27079010 240.18087769]
[46.92591095 233.97302246]
[61.42264175 237.82591248]
[70.19393921 249.99455261]
[72.98625946 235.25674438]
[67.75344849 221.31159973]
[77.92447662 209.19299316]
[80.71679688 194.45518494]
[83.50912476 179.71737671]
[85.68595886 164.87617493]
[87.24354553 149.95726013]
[88.80112457 135.03834534]
[90.35870361 120.11943054]
[83.66383362 115.19460297]
[79.23603821 108.16112518]
[77.68977356 99.99508667]
[79.23963165 91.82971954]
[67.94062805 81.96399689]
[56.64162445 72.09827423]
[45.34262085 62.23255157]
[29.30349541 61.87756348]
[19.69581032 49.02952957]
[23.88976097 33.54436493]
[38.66810608 27.30096054]
[52.69416428 35.08872223]
[55.20834351 50.93354797]
[66.50734711 60.79927063]
[77.80635071 70.66499329]
[89.10535431 80.53071594]
[95.39171600 78.17089081]
[102.09550476 77.78839874]
[108.44263458 64.19744873]
[114.78976440 50.60649872]
[121.13689423 37.01554871]
[106.85265350 14.82992458]
[119.58990479 -14.48208046]
[119.58990479 -29.48208046]
[105.81604004 -36.05804443]
[96.26611328 -47.96441650]
[92.83627319 -62.83717346]
[96.20751190 -77.72332764]
[105.71047974 -89.66720581]
[119.45834351 -96.29736328]
[134.72146606 -96.29736328]
[148.46932983 -89.66720581]
[157.97229004 -77.72332764]
[161.34353638 -62.83717346]
[157.91369629 -47.96441650]
[148.36376953 -36.05804443]
[134.58990479 -29.48208046]
[134.58990479 -14.48208046]
[141.59826660 -11.81132507]
[155.61497498 -6.46981192]
[162.62333679 -3.79905581]
[172.60606384 -14.99482155]
[167.16482544 -29.30046844]
[169.00653076 -44.49476624]
[177.70796204 -57.08617783]
[191.26959229 -64.18128967]
[206.57507324 -64.14969635]
[220.10729980 -56.99865341]
[228.75666809 -44.37142563]
[230.53562927 -29.16965294]
[225.03538513 -14.88659191]
[213.51983643 -4.80438662]
[198.63519287 -1.23985302]
[183.80181885 -5.01209545]
[173.81909180 6.18367052]
[173.75709534 18.72921753]
[169.65092468 29.84884644]
[162.42788696 38.35958481]
[153.31631470 43.52375031]
[143.65950012 45.10656738]
[134.72784424 43.36267853]
[128.38070679 56.95362854]
[122.03358459 70.54457855]
[115.68645477 84.13552856]
[121.49916077 105.96090698]
[105.27761841 121.67701721]
[103.72003174 136.59593201]
[102.16245270 151.51484680]
[100.60487366 166.43374634]
[102.58982086 170.46133423]
[103.09681702 174.50039673]
[102.31090546 178.07310486]
[100.55650330 180.81465149]
[98.24693298 182.50970459]
[95.45460510 197.24751282]
[92.66228485 211.98530579]
[97.69536591 226.98460388]
[87.72406769 238.04907227]
[84.93173981 252.78688049]
[83.21905518 267.68878174]
[82.59507751 282.67578125]
[81.97109985 297.66281128]
[81.34712219 312.64981079]
[80.72314453 327.63684082]
[95.69660950 331.67318726]
[109.39762115 338.92324829]
[121.14669800 349.02398682]
[130.36192322 361.47109985]
[136.58778381 375.64407349]
[139.51766968 390.83737183]
[139.00901794 406.29525757]
[135.09017944 421.24960327]
[127.95887756 434.95797729]
[117.97229004 446.74050903]
[105.62907410 456.01361084]
[91.54452515 462.31887817]
[76.41989899 465.34576416]
[76.10784149 480.34249878]
[75.79578400 495.33926392]
[75.48373413 510.33602905]
[75.17167664 525.33276367]
[74.85961914 540.32952881]
[74.54756165 555.32629395]
[74.23550415 570.32305908]
[73.92344666 585.31976318]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 150]
[3 149]
[4 148]
[5 147]
[6 146]
[7 145]
[8 144]
[9 143]
[10 142]
[24 129]
[25 128]
[26 127]
[27 126]
[28 125]
[36 124]
[37 123]
[39 121]
[40 120]
[41 119]
[42 114]
[43 113]
[44 112]
[45 111]
[49 61]
[50 60]
[51 59]
[52 58]
[63 109]
[64 108]
[65 107]
[66 106]
[68 83]
[69 82]
[86 100]
[87 99]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
