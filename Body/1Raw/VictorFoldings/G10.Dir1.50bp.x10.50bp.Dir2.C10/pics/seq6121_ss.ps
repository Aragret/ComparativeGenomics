%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:36 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGUAAGCACCCUAAUCAACUGGCUUCAAUCUACUUCUCCCGCCGCCGGGAAAAAAGGCGGGAGAxxxxxxxxxxAAAAAUUUUGGUGCAACUCCAAAUAAAAGUAAUAACCAUGCACACUACUAUAACCACCCUAACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[109.77975464 267.44177246]
[109.47575378 252.44487000]
[109.17174530 237.44793701]
[108.86774445 222.45101929]
[108.56373596 207.45410156]
[108.25973511 192.45718384]
[107.95572662 177.46026611]
[107.65172577 162.46334839]
[107.34772491 147.46643066]
[104.47729492 132.74363708]
[99.12543488 118.73086548]
[84.68346405 114.67755127]
[72.82183075 123.85914612]
[60.96018982 133.04072571]
[49.09855652 142.22232056]
[53.12856293 156.87931824]
[51.23785782 171.96220398]
[43.71475220 185.17097473]
[31.70647240 194.49136353]
[17.04418945 198.50207520]
[1.96379662 196.59153748]
[-11.23505592 189.05107117]
[-20.53964043 177.03053284]
[-24.53107262 162.36299133]
[-22.60069084 147.28512573]
[-15.04286194 134.09619141]
[-3.01010132 124.80743408]
[11.66268253 120.83530426]
[26.73799706 122.78551483]
[39.91696548 130.36068726]
[51.77860260 121.17910004]
[63.64023590 111.99750519]
[75.50187683 102.81591797]
[77.92343140 88.01267242]
[69.60568237 75.53008270]
[61.28793716 63.04748917]
[46.19993591 65.07569885]
[31.78628349 60.37106323]
[20.88921928 49.91763687]
[15.63303471 35.82744217]
[17.01007843 20.91391945]
[24.69388962 8.13015842]
[15.03914261 -3.34964418]
[4.16725063 -13.68414783]
[-6.70464134 -24.01865196]
[-17.57653236 -34.35315704]
[-28.44842529 -44.68766022]
[-39.32031631 -55.02216339]
[-50.19220734 -65.35666656]
[-61.06410217 -75.69116974]
[-71.93598938 -86.02567291]
[-86.19194031 -80.57309723]
[-101.40117645 -81.85446930]
[-114.54389191 -89.61538696]
[-123.01058960 -102.31491089]
[-125.12020111 -117.43153381]
[-120.45386505 -131.96383667]
[-109.93807983 -143.02644348]
[-95.66077423 -148.42283630]
[-80.45670319 -147.08157349]
[-67.34465027 -139.26896667]
[-58.92802811 -126.53620148]
[-56.87796021 -111.41138458]
[-61.60149002 -96.89756775]
[-50.72959518 -86.56306458]
[-39.85770416 -76.22856140]
[-28.98581314 -65.89405823]
[-18.11392212 -55.55955124]
[-7.24202919 -45.22504807]
[3.62986231 -34.89054489]
[14.50175381 -24.55603981]
[25.37364578 -14.22153568]
[22.83535576 -29.00521278]
[27.33895874 -43.31316757]
[37.88736343 -53.97764587]
[52.14517593 -58.63755798]
[66.95574188 -56.26120758]
[79.04003906 -47.37471008]
[85.72261810 -33.94552231]
[85.52397919 -18.94683647]
[78.48809814 -5.69933510]
[66.17269897 2.86401391]
[51.30438995 4.84730196]
[37.17647934 -0.18758924]
[51.93314362 -2.35699081]
[66.22713470 2.11417294]
[77.20732117 12.39019012]
[82.65924835 26.47197533]
[81.45159912 41.58583069]
[73.77052307 54.72974396]
[82.08827209 67.21233368]
[90.40602112 79.69492340]
[115.39894104 85.55508423]
[129.75579834 81.20990753]
[144.11265564 76.86472321]
[158.46951294 72.51954651]
[172.82638550 68.17436981]
[186.78419495 62.68078232]
[200.25125122 56.07487106]
[213.71832275 49.46895599]
[215.38883972 34.13230515]
[225.10356140 22.14781952]
[239.76254272 17.33970642]
[254.68815613 21.24221802]
[265.11770630 32.61007690]
[267.72314453 47.81583786]
[261.67309570 62.00740433]
[248.89810181 70.65628815]
[233.47462463 71.00267792]
[220.32423401 62.93602753]
[206.85716248 69.54193878]
[193.39010620 76.14785004]
[207.74177551 80.51012421]
[216.91268921 92.38002014]
[217.51144409 107.36806488]
[209.31661987 119.93170166]
[195.35865784 125.42491150]
[180.79919434 121.81630707]
[171.02229309 110.44036102]
[169.64344788 95.50386810]
[177.17155457 82.53123474]
[162.81469727 86.87641144]
[148.45783997 91.22158813]
[134.10098267 95.56676483]
[119.74411774 99.91194153]
[113.13820648 113.37901306]
[118.49006653 127.39177704]
[121.30313110 112.65791321]
[128.67027283 99.59173584]
[139.82138062 89.55913544]
[153.59071350 83.60889435]
[168.53887939 82.36302948]
[183.10325623 85.95178986]
[195.76129150 94.00000763]
[205.18978882 105.66635132]
[210.40309143 119.73125458]
[210.85623169 134.72441101]
[206.50183105 149.07847595]
[197.79508972 161.29292297]
[185.64619446 170.09088135]
[171.32513428 174.55264282]
[156.32901001 174.21179199]
[142.22546387 169.10395813]
[130.48884583 159.76309204]
[122.34464264 147.16242981]
[122.64864349 162.15934753]
[122.95265198 177.15626526]
[123.25665283 192.15318298]
[123.56066132 207.15010071]
[123.86466217 222.14701843]
[124.16866302 237.14393616]
[124.47267151 252.14085388]
[124.77667236 267.13778687]
[127.35736084 286.34689331]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 153]
[2 152]
[3 151]
[4 150]
[5 149]
[6 148]
[7 147]
[8 146]
[9 145]
[10 127]
[11 126]
[12 33]
[13 32]
[14 31]
[15 30]
[34 92]
[35 91]
[36 90]
[42 84]
[43 72]
[44 71]
[45 70]
[46 69]
[47 68]
[48 67]
[49 66]
[50 65]
[51 64]
[93 125]
[94 124]
[95 123]
[96 122]
[97 121]
[98 112]
[99 111]
[100 110]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
