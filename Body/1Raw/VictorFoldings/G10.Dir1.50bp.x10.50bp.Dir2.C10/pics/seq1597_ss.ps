%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:25 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCGCCAUCUUCAGCAAACCCUGAUGAAGGCUACAAAGUAAGCGCAAGUACCCACGUAAAGACxxxxxxxxxxACAAUCGGCAUCAACCAACCACACCUAGCAUUCCUGCACAUCUGUACCCACGCCUUCUUCACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[95.32702637 237.73780823]
[95.01905060 222.74096680]
[94.71106720 207.74412537]
[94.40309143 192.74729919]
[94.09511566 177.75045776]
[93.78713989 162.75361633]
[93.47915649 147.75677490]
[93.17118073 132.75993347]
[92.86320496 117.76309967]
[80.80077362 108.84695435]
[66.37339020 112.95189667]
[51.94600296 117.05683899]
[37.51861954 121.16178894]
[34.60607910 136.53985596]
[23.09334183 148.52636719]
[5.96040964 152.50502014]
[-11.48147106 146.16540527]
[-24.90892029 152.85147095]
[-38.33636856 159.53755188]
[-51.76382065 166.22363281]
[-65.19126892 172.90969849]
[-74.09586334 185.98712158]
[-88.93766022 184.73399353]
[-102.36511230 191.42007446]
[-108.80627441 206.11331177]
[-124.34632111 210.09907532]
[-137.06427002 200.31983948]
[-137.20399475 184.27740479]
[-124.65830231 174.27813721]
[-109.05118561 177.99263000]
[-95.62374115 171.30654907]
[-87.67956543 158.70736694]
[-71.87734222 159.48225403]
[-58.44989395 152.79617310]
[-45.02244568 146.11010742]
[-31.59499550 139.42402649]
[-18.16754723 132.73794556]
[-20.31612587 117.89262390]
[-35.08824158 115.28790283]
[-49.86035919 112.68318176]
[-65.07706451 118.79741669]
[-77.81175232 108.46496582]
[-74.96407318 92.31495667]
[-59.46347046 86.96114349]
[-47.25563431 97.91106415]
[-32.48352051 100.51578522]
[-17.71140289 103.12051392]
[0.40774530 91.41020966]
[20.35376358 93.56015015]
[33.41367340 106.73439789]
[47.84106064 102.62945557]
[62.26844406 98.52451324]
[76.69583130 94.41956329]
[85.05895233 86.16353607]
[94.85767365 84.04364777]
[102.61854553 87.09777832]
[111.53469849 75.03534698]
[120.45085144 62.97291565]
[129.36700439 50.91048431]
[118.18385315 40.89690781]
[107.98754120 29.88011742]
[98.86766815 17.95692635]
[90.90439606 5.23212051]
[84.16769409 -8.18247318]
[78.71676636 -22.16896248]
[74.59952545 -36.60443115]
[71.85214996 -51.36202240]
[70.49878693 -66.31203461]
[70.55132294 -81.32308960]
[72.00930023 -96.26325989]
[74.85990906 -111.00125122]
[79.07809448 -125.40755463]
[84.62679291 -139.35554504]
[91.45722961 -152.72265625]
[99.50937653 -165.39140320]
[108.71248627 -177.25047302]
[118.98566437 -188.19561768]
[130.23863220 -198.13066101]
[142.37249756 -206.96830750]
[155.28062439 -214.63085938]
[168.84956360 -221.05099487]
[182.96008301 -226.17230225]
[197.48817444 -229.94973755]
[212.30615234 -232.35014343]
[227.28379822 -233.35240173]
[242.28948975 -232.94772339]
[257.19134521 -231.13964844]
[271.85839844 -227.94406128]
[286.16177368 -223.38906860]
[299.97576904 -217.51467896]
[313.17895508 -210.37252808]
[325.65530396 -202.02537537]
[337.29519653 -192.54658508]
[347.99633789 -182.01945496]
[357.66464233 -170.53651428]
[366.21517944 -158.19865417]
[373.57281494 -145.11431885]
[379.67285156 -131.39848328]
[384.46170044 -117.17169952]
[387.89727783 -102.55899048]
[389.94937134 -87.68877411]
[390.59997559 -72.69173431]
[389.84338379 -57.69967270]
[387.68618774 -42.84433365]
[384.14739990 -28.25627708]
[379.25808716 -14.06370354]
[373.06124878 -0.39134121]
[365.61129761 12.64065456]
[356.97375488 24.91775513]
[347.22448730 36.33206940]
[336.44921875 46.78327942]
[324.74261475 56.17954254]
[312.20755005 64.43827820]
[298.95419312 71.48691559]
[285.09902954 77.26349640]
[270.76382446 81.71726990]
[256.07452393 84.80908203]
[241.16026306 86.51176453]
[226.15209961 86.81036377]
[211.18190002 85.70223999]
[196.38127136 83.19714355]
[181.88024902 79.31707764]
[167.80628967 74.09616089]
[154.28306580 67.58025360]
[141.42942810 59.82663345]
[132.51327515 71.88906860]
[123.59712982 83.95149994]
[114.68097687 96.01393127]
[125.29277039 85.41252136]
[139.08294678 79.51074982]
[154.07867432 79.15292358]
[168.13465881 84.39025116]
[179.24000549 94.47346497]
[185.80599976 107.96003723]
[186.89328003 122.92058563]
[182.34631348 137.21481323]
[172.81558228 148.79779053]
[159.66456604 156.01242065]
[144.77468872 157.82659912]
[130.27607727 153.98075867]
[118.24295044 145.02510071]
[110.39675903 132.24084473]
[107.86004639 117.45512390]
[108.16802216 132.45196533]
[108.47599792 147.44880676]
[108.78397369 162.44563293]
[109.09195709 177.44247437]
[109.39993286 192.43931580]
[109.70790863 207.43615723]
[110.01588440 222.43298340]
[110.32386017 237.42982483]
[112.90963745 256.63824463]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 151]
[2 150]
[3 149]
[4 148]
[5 147]
[6 146]
[7 145]
[8 144]
[9 143]
[10 53]
[11 52]
[12 51]
[13 50]
[17 37]
[18 36]
[19 35]
[20 34]
[21 33]
[23 31]
[24 30]
[38 47]
[39 46]
[40 45]
[56 128]
[57 127]
[58 126]
[59 125]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
