%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:19 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCCACAUCUACCAUCACCCUCUACAUCACCGCCCCGACCUUAGCUCUCACCAUCGCUCUUCUAxxxxxxxxxxCUCCUUAUUCGAGCCGAGCUGGGCCAGCCAGGCAACCUUCUAGGUAACGACCACAUCUACAACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[3.96180272 183.82345581]
[-7.89983320 193.00505066]
[-19.76146889 202.18663025]
[-31.62310600 211.36822510]
[-37.79990005 225.93386841]
[-52.60036469 227.60583496]
[-64.46199799 236.78742981]
[-75.43806458 247.01121521]
[-85.43730927 258.19223022]
[-95.43655396 269.37326050]
[-88.51584625 282.88131714]
[-86.94604492 297.97769165]
[-90.93946075 312.62066650]
[-99.95601654 324.82995605]
[-112.77629089 332.95428467]
[-127.66645050 335.89495850]
[-142.61271667 333.25427246]
[-155.59375000 325.38931274]
[-164.85395813 313.36380005]
[-169.14096069 298.80404663]
[-167.87500000 283.67919922]
[-161.22727966 270.03469849]
[-150.09684753 259.71588135]
[-135.98899841 254.11830139]
[-120.81169891 253.99896240]
[-106.61756897 259.37399292]
[-96.61832428 248.19299316]
[-86.61907959 237.01197815]
[-101.48180389 239.03668213]
[-115.14010620 232.83583069]
[-123.39873505 220.31405640]
[-123.72097778 205.31750488]
[-116.00785828 192.45252991]
[-102.62851715 185.67070007]
[-87.69254303 187.05509949]
[-75.78763580 196.18052673]
[-70.57049561 210.24400330]
[-73.64359283 224.92578125]
[-61.78195572 215.74420166]
[-56.45358276 201.83528137]
[-40.80469513 199.50659180]
[-28.94305992 190.32499695]
[-17.08142281 181.14340210]
[-5.21978712 171.96182251]
[-17.00078773 150.60160828]
[-24.49731827 127.38840485]
[-27.43486214 103.17226410]
[-25.70584488 78.83995819]
[-19.37358665 55.28251266]
[-8.66996765 33.36258316]
[6.01305485 13.88286304]
[-4.43109417 3.11625934]
[-14.87524319 -7.65034437]
[-29.74971581 -3.82338095]
[-44.54055023 -7.96182585]
[-55.26909256 -18.95245743]
[-59.04941177 -33.83885193]
[-54.86462402 -48.61664581]
[-43.84041977 -59.31068039]
[-28.94224739 -63.04432297]
[-14.17764473 -58.81323624]
[-3.51821589 -47.75556183]
[0.16870728 -32.84576035]
[-4.10863924 -18.09449387]
[6.33550978 -7.32788944]
[16.77965927 3.43871427]
[24.88893127 -2.99531221]
[33.49351501 -8.75014687]
[42.53666687 -13.78784084]
[51.95875931 -18.07517242]
[61.69765091 -21.58386993]
[71.68912506 -24.29079437]
[81.86729431 -26.17809677]
[92.16503143 -27.23332977]
[102.51444244 -27.44953728]
[112.84726715 -26.82529259]
[123.09537506 -25.36471176]
[133.19117737 -23.07742500]
[143.06811523 -19.97851753]
[152.66104126 -16.08842468]
[161.90669250 -11.43279934]
[170.74411011 -6.04234171]
[179.11500549 0.04740115]
[186.96420288 6.79627085]
[194.23991394 14.15976334]
[200.89416504 22.08931923]
[206.88308716 30.53264999]
[212.16717529 39.43407440]
[216.71159363 48.73489761]
[220.48637390 58.37377930]
[223.46661377 68.28716278]
[238.18940735 65.41674042]
[252.91220093 62.54631424]
[261.23422241 40.93612671]
[289.98516846 35.01435089]
[303.45223999 28.40843773]
[316.91931152 21.80252647]
[322.11679077 7.11838436]
[335.86840820 0.61089319]
[349.83547974 5.65638208]
[363.30252075 -0.94953001]
[376.76959229 -7.55544233]
[390.23666382 -14.16135406]
[401.79434204 -26.56524658]
[416.91296387 -18.89299202]
[413.72579956 -2.24131656]
[396.84259033 -0.69428647]
[383.37551880 5.91162586]
[369.90844727 12.51753807]
[356.44137573 19.12345123]
[351.88189697 33.25663376]
[338.31848145 40.14781189]
[323.52523804 35.26959610]
[310.05816650 41.87550735]
[296.59109497 48.48141861]
[297.42541504 55.93486786]
[299.92843628 78.29521179]
[314.52282715 81.75992584]
[329.11718750 85.22463989]
[343.71157837 88.68935394]
[360.51898193 86.46506500]
[367.30908203 101.99987793]
[354.26107788 112.82510376]
[340.24685669 103.28372955]
[325.65246582 99.81901550]
[311.05810547 96.35430145]
[296.46371460 92.88957977]
[277.68853760 96.32579041]
[262.67510986 89.43576050]
[255.78262329 77.26911163]
[241.05982971 80.13953400]
[226.33703613 83.00995636]
[227.42750549 96.54462433]
[227.07211304 110.11849213]
[225.27491760 123.57756042]
[222.05630493 136.76910400]
[217.45277405 149.54344177]
[211.51657104 161.75564575]
[204.31506348 173.26713562]
[195.92994690 183.94731140]
[186.45637512 193.67498779]
[176.00181580 202.33978271]
[164.68492126 209.84338379]
[152.63406372 216.10064697]
[139.98600769 221.04058838]
[126.88426208 224.60716248]
[113.47747040 226.75987244]
[99.91775513 227.47431946]
[86.35897064 226.74237061]
[72.95496368 224.57235718]
[59.85782242 220.98889160]
[47.21615601 216.03263855]
[35.17339325 209.75982666]
[23.86618423 202.24162292]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 44]
[2 43]
[3 42]
[4 41]
[6 39]
[7 38]
[8 28]
[9 27]
[10 26]
[51 66]
[52 65]
[53 64]
[91 132]
[92 131]
[93 130]
[95 115]
[96 114]
[97 113]
[100 110]
[101 109]
[102 108]
[103 107]
[117 127]
[118 126]
[119 125]
[120 124]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
