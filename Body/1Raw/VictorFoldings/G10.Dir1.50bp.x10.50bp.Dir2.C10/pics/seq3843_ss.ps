%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:46 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGUCUACUAUCAACAUUACUAAUAAGUGGCUCCUUUAACCUCUCCACCCUUAUCACAACACAxxxxxxxxxxCACAUCAAAACCCCCUCCCCAUGCUUACAAGCAAGUACAGCAAUCAACCCUCAACUAUCACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[87.93020630 101.66838074]
[74.99214935 94.07847595]
[62.05409241 86.48857117]
[49.11603546 78.89865875]
[36.17798233 71.30875397]
[23.23992538 63.71884155]
[10.30186844 56.12893295]
[-2.63618731 48.53902435]
[-15.57424355 40.94911957]
[-28.51229858 33.35921097]
[-41.45035553 25.76930046]
[-50.03619385 38.07854462]
[-59.56134033 49.67620087]
[-69.96707153 60.49076843]
[-81.18923187 70.45556641]
[-93.15863800 79.50915527]
[-105.80147552 87.59572601]
[-119.03981781 94.66541290]
[-132.79202271 100.67463684]
[-146.97332764 105.58633423]
[-161.49627686 109.37023926]
[-176.27134705 112.00300598]
[-191.20744324 113.46841431]
[-206.21244812 113.75742340]
[-221.19389343 112.86826324]
[-236.05938721 110.80639648]
[-250.71726990 107.58454895]
[-265.07720947 103.22257996]
[-279.05059814 97.74738312]
[-292.55136108 91.19271851]
[-305.49621582 83.59899902]
[-317.80538940 75.01303101]
[-329.40295410 65.48777008]
[-340.21740723 55.08192444]
[-350.18209839 43.85966110]
[-359.23556519 31.89016914]
[-367.32199097 19.24724197]
[-374.39154053 6.00883198]
[-380.40063477 -7.74344254]
[-385.31219482 -21.92479324]
[-389.09594727 -36.44778442]
[-391.72854614 -51.22288132]
[-393.19381714 -66.15898132]
[-393.48266602 -81.16400146]
[-392.59335327 -96.14543152]
[-390.53134155 -111.01090240]
[-387.30935669 -125.66876221]
[-382.94723511 -140.02864075]
[-377.47189331 -154.00199890]
[-370.91708374 -167.50268555]
[-363.32324219 -180.44746399]
[-354.73715210 -192.75653076]
[-345.21176147 -204.35400391]
[-334.80581665 -215.16835022]
[-323.58343506 -225.13291931]
[-311.61386108 -234.18626404]
[-298.97085571 -242.27258301]
[-285.73236084 -249.34199524]
[-271.98001099 -255.35093689]
[-257.79861450 -260.26235962]
[-243.27558899 -264.04595947]
[-228.50047302 -266.67840576]
[-213.56436157 -268.14352417]
[-198.55932617 -268.43222046]
[-183.57791138 -267.54275513]
[-168.71246338 -265.48059082]
[-154.05464172 -262.25845337]
[-139.69480896 -257.89617920]
[-125.72150421 -252.42070007]
[-112.22087860 -245.86575317]
[-99.27617645 -238.27177429]
[-86.96719360 -229.68556213]
[-75.36982727 -220.16004944]
[-64.55558014 -209.75399780]
[-54.59112549 -198.53152466]
[-45.53790283 -186.56184387]
[-37.45172119 -173.91876221]
[-30.38243675 -160.68020630]
[-24.37364006 -146.92779541]
[-19.46237373 -132.74635315]
[-15.67891693 -118.22328186]
[-13.04659843 -103.44813538]
[-11.58164787 -88.51200104]
[-11.29309559 -73.50697327]
[-12.18272114 -58.52556610]
[-14.24503994 -43.66013718]
[-17.46733665 -29.00234604]
[-21.82974434 -14.64255905]
[-27.30536842 -0.66931152]
[-33.86044693 12.83124542]
[-20.92238998 20.42115402]
[-7.98433495 28.01106262]
[4.95372105 35.60097122]
[17.89177704 43.19087982]
[30.82983208 50.78078842]
[43.76788712 58.37069321]
[56.70594406 65.96060181]
[69.64399719 73.55051422]
[82.58205414 81.14041901]
[95.52011108 88.73033142]
[102.79891968 88.24755859]
[109.00941467 92.02081299]
[123.98912811 91.24096680]
[138.96884155 90.46112061]
[153.94856262 89.68127441]
[168.91934204 88.74565125]
[183.87959290 87.65433502]
[198.83984375 86.56302643]
[208.98155212 74.44191742]
[224.73092651 73.12550354]
[236.74412537 83.39479828]
[237.89395142 99.15720367]
[227.49822998 111.06116486]
[211.72454834 112.04428101]
[199.93115234 101.52327728]
[184.97090149 102.61458588]
[170.01066589 103.70589447]
[163.52644348 107.35289764]
[154.72840881 104.66098785]
[139.74868774 105.44083405]
[124.76897430 106.22068024]
[109.78926086 107.00052643]
[123.03215027 114.04508972]
[134.61680603 123.57376862]
[144.08393860 135.20877075]
[151.05819702 148.48881531]
[155.26309204 162.88739014]
[156.53189087 177.83363342]
[154.81430054 192.73497009]
[150.17842102 207.00062561]
[142.80804443 220.06498718]
[132.99539185 231.41009521]
[121.12948608 240.58618164]
[107.68079376 247.22941589]
[93.18249512 251.07641602]
[78.20941925 251.97467041]
[63.35518646 249.88856506]
[49.20872879 244.90080261]
[36.33090973 237.20913696]
[25.23229027 227.11851501]
[16.35289764 215.02899170]
[10.04477406 201.41989136]
[6.55801296 186.83078003]
[6.03085613 171.84004211]
[8.48420238 157.04202271]
[13.82078552 143.02343750]
[21.82902527 130.34005737]
[32.19142151 119.49475098]
[44.49713516 110.91748810]
[58.25828552 104.94834137]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 100]
[2 99]
[3 98]
[4 97]
[5 96]
[6 95]
[7 94]
[8 93]
[9 92]
[10 91]
[11 90]
[102 122]
[103 121]
[104 120]
[105 119]
[106 117]
[107 116]
[108 115]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
