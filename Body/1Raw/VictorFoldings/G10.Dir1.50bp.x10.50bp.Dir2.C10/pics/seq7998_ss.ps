%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:22 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGAUACUACCGUAUGGCCCACCAUAAUUACCCCCAUACUCCUUACACUAUUCCUCAUCACCCAAxxxxxxxxxxUGAUGAUACGCCCGAGCAGAUGCCAACACAGCAGCCAUUCAAGCAAUCCUAUACAACCGUAUCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[9.66208267 210.04151917]
[2.80020094 204.03016663]
[-3.66261172 197.59170532]
[-9.69982243 190.75254822]
[-21.74510574 199.69186401]
[-33.79038620 208.63116455]
[-45.83567047 217.57046509]
[-57.88095093 226.50976562]
[-64.35167694 240.94723511]
[-79.18299103 242.31889343]
[-91.22827148 251.25820923]
[-103.27355194 260.19750977]
[-88.49085999 262.74148560]
[-78.67232513 274.08154297]
[-78.26959991 289.07611084]
[-87.46527863 300.92684937]
[-102.09010315 304.26065063]
[-115.51329803 297.56604004]
[-121.64888763 283.87829590]
[-117.71521759 269.40356445]
[-130.90351868 276.54983521]
[-144.09181213 283.69607544]
[-157.28010559 290.84231567]
[-170.46839905 297.98855591]
[-178.58296204 312.23937988]
[-194.98120117 312.06680298]
[-202.79402161 297.64834595]
[-193.98426819 283.81649780]
[-177.61465454 284.80026245]
[-164.42634583 277.65402222]
[-151.23805237 270.50778198]
[-138.04975891 263.36151123]
[-124.86146545 256.21527100]
[-112.21286011 248.15222168]
[-100.16757965 239.21292114]
[-88.12229156 230.27362061]
[-82.51313019 216.47555542]
[-66.82025909 214.46449280]
[-54.77497482 205.52517700]
[-42.72969055 196.58587646]
[-30.68441010 187.64657593]
[-18.63912773 178.70727539]
[-25.91235352 166.45416260]
[-31.92436028 153.53541565]
[-36.61492538 140.08041382]
[-39.93706512 126.22393799]
[-41.85750198 112.10478973]
[-42.35700226 97.86438751]
[-41.43056107 83.64538574]
[-39.08745575 69.59019470]
[-35.35116196 55.83961487]
[-30.25909996 42.53136826]
[-23.86227798 29.79876900]
[-16.22476959 17.76935196]
[-7.42307806 6.56361008]
[2.45463395 -3.70621157]
[13.30942535 -12.93724346]
[25.03256607 -21.03702164]
[37.50662994 -27.92441368]
[50.60666656 -33.53042984]
[64.20146179 -37.79891586]
[78.15483856 -40.68711853]
[76.63731384 -55.61016083]
[75.11978912 -70.53320312]
[73.60226440 -85.45623779]
[72.08473969 -100.37928009]
[70.56721497 -115.30232239]
[55.92454910 -119.29691315]
[43.71601105 -128.31445312]
[35.59270096 -141.13539124]
[32.65322876 -156.02578735]
[35.29513931 -170.97184753]
[43.16113281 -183.95223999]
[55.18739700 -193.21147156]
[69.74748230 -197.49729919]
[84.87225342 -196.23011780]
[98.51620483 -189.58129883]
[108.83411407 -178.45002747]
[114.43056488 -164.34172058]
[114.54868317 -149.16442871]
[109.17249298 -134.97073364]
[99.02907562 -123.68022156]
[85.49025726 -116.81984711]
[87.00778198 -101.89680481]
[88.52530670 -86.97376251]
[90.04283142 -72.05072784]
[91.56035614 -57.12768555]
[93.07788086 -42.20464325]
[118.84600067 -41.12017822]
[143.99568176 -35.40478897]
[167.70162964 -25.24602509]
[189.18591309 -10.97725391]
[199.18515015 -22.15826797]
[202.00904846 -38.31245041]
[217.50175476 -43.68907928]
[229.72570801 -32.75713730]
[226.10592651 -16.76247215]
[210.36616516 -12.15902233]
[200.36691284 -0.97800785]
[220.05464172 23.46923256]
[233.90684509 51.63642883]
[244.87399292 40.23326111]
[259.29690552 43.95199966]
[273.65374756 39.60682297]
[288.01062012 35.26164627]
[293.99444580 20.81422806]
[307.88873291 13.63908958]
[323.13302612 17.12410927]
[332.52944946 29.62376595]
[331.64126587 45.23610687]
[320.88787842 56.58945847]
[305.34671021 58.32312012]
[292.35580444 49.61850357]
[277.99893188 53.96368408]
[263.64205933 58.30886078]
[253.70182800 69.40122986]
[238.25201416 65.99329376]
[240.14608765 74.91709900]
[241.46475220 83.94388580]
[242.20263672 93.03659821]
[242.35665894 102.15789795]
[241.92623901 111.27033997]
[240.91310120 120.33650970]
[239.32144165 129.31918335]
[237.15776062 138.18147278]
[234.43096924 146.88702393]
[231.15223694 155.40005493]
[227.33505249 163.68563843]
[222.99507141 171.70974731]
[218.15011597 179.43945312]
[212.82008362 186.84300232]
[207.02684021 193.88999939]
[200.79418945 200.55152893]
[194.14770508 206.80021667]
[187.11468506 212.61042786]
[179.72401428 217.95829773]
[172.00601196 222.82186890]
[163.99238586 227.18118286]
[155.71601868 231.01832581]
[147.21092224 234.31755066]
[138.51197815 237.06532288]
[129.65492249 239.25036621]
[120.67610168 240.86367798]
[111.61240387 241.89865112]
[102.50102997 242.35104370]
[93.37938690 242.21899414]
[84.28491974 241.50305176]
[75.25498199 240.20613098]
[66.32662964 238.33358765]
[57.53653717 235.89308167]
[48.92078018 232.89465332]
[40.51473618 229.35061646]
[32.35292053 225.27549744]
[24.46883774 220.68603516]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 42]
[5 41]
[6 40]
[7 39]
[8 38]
[10 36]
[11 35]
[12 34]
[20 33]
[21 32]
[22 31]
[23 30]
[24 29]
[62 88]
[63 87]
[64 86]
[65 85]
[66 84]
[67 83]
[92 99]
[93 98]
[101 117]
[103 115]
[104 114]
[105 113]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
