%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:58 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGACUCCCACCCUGGAGCCUCCGUAGACCUAACCAUCUUCUCCUUACACCUAGCAGGUGUCUCxxxxxxxxxxACAUUGGGACAGACCUAGUUCAAUGAAUCUGAGGAGGCUACUCAGUAGACAGUCCCACCCUCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[153.99009705 432.82556152]
[153.99009705 417.82556152]
[153.99009705 402.82556152]
[153.99009705 387.82556152]
[153.99009705 372.82556152]
[153.99009705 357.82556152]
[153.99009705 342.82556152]
[153.99009705 327.82556152]
[153.99009705 312.82556152]
[153.99009705 297.82556152]
[151.68922424 283.00308228]
[147.14193726 268.70895386]
[142.59465027 254.41484070]
[130.29551697 252.07818604]
[120.56505585 242.23056030]
[110.01304626 252.89147949]
[99.46102905 263.55236816]
[92.61601257 279.06307983]
[75.81657410 276.77935791]
[73.36050415 260.00427246]
[88.80011749 253.00036621]
[99.35213470 242.33946228]
[109.90415192 231.67854309]
[114.30445099 217.33848572]
[111.54821014 202.59388733]
[108.79196167 187.84928894]
[106.03572083 173.10469055]
[103.27947998 158.36010742]
[100.52323914 143.61550903]
[97.76699066 128.87091064]
[87.44540405 126.09401703]
[78.83435822 119.76186371]
[73.10709381 110.73718262]
[71.04393768 100.24958801]
[72.92600250 89.72798157]
[78.49685669 80.60591888]
[70.34018707 68.01747894]
[62.18352127 55.42903900]
[54.02685928 42.84059906]
[45.87019348 30.25216103]
[30.78697586 36.18508911]
[14.81339169 38.90113068]
[-1.37254751 38.28718948]
[-17.08426285 34.37147141]
[-31.65573692 27.32218742]
[-44.46973801 17.44033432]
[-54.98397827 5.14684057]
[-62.75404358 -9.03535938]
[-67.45220184 -24.50357246]
[-68.88121033 -40.60096359]
[-66.98258972 -56.64443207]
[-61.83902740 -71.95362091]
[-53.67078781 -85.87975311]
[-42.82624817 -97.83312988]
[-51.74239731 -109.89556122]
[-60.65855026 -121.95799255]
[-69.57469940 -134.02043152]
[-78.49085236 -146.08285522]
[-87.40700531 -158.14529419]
[-101.68418121 -167.28851318]
[-96.85059357 -183.53883362]
[-79.89727020 -183.39266968]
[-75.34457397 -167.06143188]
[-66.42842102 -154.99900818]
[-57.51226807 -142.93656921]
[-48.59611893 -130.87414551]
[-39.67996597 -118.81171417]
[-30.76381493 -106.74928284]
[-18.30137825 -112.82453156]
[-4.95970631 -116.60926819]
[8.84386826 -117.98373413]
[22.67732620 -116.90359497]
[36.10747910 -113.40135193]
[48.71353912 -107.58538055]
[60.10028839 -99.63656616]
[69.91049957 -89.80268860]
[77.83609772 -78.39069366]
[83.62789154 -65.75710297]
[87.10335541 -52.29689026]
[88.15241241 -38.43113327]
[86.74090576 -24.59382439]
[82.91172028 -11.21830654]
[76.78347015 1.27631211]
[68.54683685 12.49828148]
[58.45862961 22.09549522]
[66.61529541 34.68393326]
[74.77196503 47.27237320]
[82.92862701 59.86081314]
[91.08529663 72.44924927]
[106.48497009 71.77835846]
[120.04707336 79.10429382]
[132.88072205 71.33915710]
[145.71438599 63.57402420]
[158.54803467 55.80888748]
[144.97608948 49.42123032]
[141.30377197 34.87770844]
[150.21629333 22.81260109]
[165.19679260 22.04796600]
[175.29145813 33.14291000]
[173.11938477 47.98424149]
[186.68127441 41.57526779]
[200.24316406 35.16629028]
[211.98036194 22.93212891]
[226.98558044 30.82386971]
[223.55610657 47.42733383]
[206.65214539 48.72818756]
[193.09025574 55.13716507]
[179.52835083 61.54613876]
[166.31317139 68.64253998]
[153.47952271 76.40767670]
[140.64585876 84.17281342]
[127.81221008 91.93795013]
[126.42942047 111.83222198]
[112.51158905 126.11466217]
[115.26782990 140.85926819]
[118.02407837 155.60385132]
[120.78031921 170.34844971]
[123.53656006 185.09304810]
[126.29280090 199.83764648]
[129.04904175 214.58224487]
[143.35427856 210.45622253]
[156.84559631 215.26089478]
[164.67471313 226.56962585]
[164.43997192 239.75503540]
[156.88877869 249.86753845]
[161.43606567 264.16168213]
[165.98335266 278.45581055]
[169.92002869 263.98159790]
[178.73892212 251.84788513]
[191.29109192 243.63551331]
[205.94116211 240.41441345]
[220.78045654 242.60426331]
[233.87562561 249.91975403]
[243.52056885 261.40780640]
[248.45870972 275.57165527]
[248.04667664 290.56597900]
[242.33813477 304.43728638]
[232.07682800 315.37829590]
[218.59967041 321.96356201]
[203.66250610 323.33517456]
[189.21144104 319.31439209]
[177.12922668 310.42504883]
[168.99009705 297.82556152]
[168.99009705 312.82556152]
[168.99009705 327.82556152]
[168.99009705 342.82556152]
[168.99009705 357.82556152]
[168.99009705 372.82556152]
[168.99009705 387.82556152]
[168.99009705 402.82556152]
[168.99009705 417.82556152]
[168.99009705 432.82556152]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 152]
[2 151]
[3 150]
[4 149]
[5 148]
[6 147]
[7 146]
[8 145]
[9 144]
[10 143]
[11 127]
[12 126]
[13 125]
[15 23]
[16 22]
[17 21]
[24 120]
[25 119]
[26 118]
[27 117]
[28 116]
[29 115]
[30 114]
[36 89]
[37 88]
[38 87]
[39 86]
[40 85]
[54 68]
[55 67]
[56 66]
[57 65]
[58 64]
[59 63]
[91 112]
[92 111]
[93 110]
[94 109]
[100 108]
[101 107]
[102 106]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
