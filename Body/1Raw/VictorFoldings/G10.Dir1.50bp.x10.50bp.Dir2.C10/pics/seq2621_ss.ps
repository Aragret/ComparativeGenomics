%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:42 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGACCAACAAGUCAUUAUUACCCUCACUGUCAACCCAACACAGGCAUGCUCAUAAGGAAAGGxxxxxxxxxxAUCCACCUUUAUUAUCAGUCUCUUCCCCACAACAAUAUUCAUGUGCCUAGACCAAGAAGUCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[80.62317657 275.74005127]
[80.31111908 260.74331665]
[79.99906158 245.74655151]
[79.68700409 230.74980164]
[79.37494659 215.75305176]
[79.06288910 200.75630188]
[78.75083923 185.75953674]
[78.43878174 170.76278687]
[78.12672424 155.76603699]
[64.95814514 148.58352661]
[52.18078232 156.44094849]
[39.40342712 164.29837036]
[53.01387024 170.60360718]
[56.77700424 185.12388611]
[47.94228363 197.24609375]
[32.96717072 198.10984802]
[22.79726791 187.08383179]
[24.86558342 172.22772217]
[11.34139347 178.71588135]
[-2.18279624 185.20405579]
[-1.70765686 200.42555237]
[-7.47074842 214.52188110]
[-18.47357941 225.05078125]
[-32.80984497 230.18803406]
[-47.99569702 229.04359436]
[-61.40010071 221.81573486]
[-70.70065308 209.75672913]
[-74.28598785 194.95588684]
[-71.53491211 179.97750854]
[-62.92407990 167.41671753]
[-49.94535828 159.44975281]
[-34.84739685 157.45690918]
[-20.24600410 161.78347778]
[-8.67096138 171.67985535]
[4.85322857 165.19169617]
[18.37741852 158.70352173]
[31.54600143 151.52102661]
[44.32335663 143.66358948]
[57.10071564 135.80616760]
[50.04202271 124.23028564]
[46.01604843 111.37395477]
[45.22171402 98.01188660]
[47.66450119 84.93879700]
[53.15859604 72.92214966]
[61.34032822 62.65710831]
[71.69197845 54.72634125]
[83.57438660 49.56701660]
[96.26638794 47.44682312]
[109.00849915 48.45036316]
[121.04841614 52.47657776]
[129.03833008 39.78165054]
[137.02824402 27.08671951]
[145.01815796 14.39179039]
[153.00808716 1.69686067]
[160.99800110 -10.99806881]
[165.75181580 -25.22484779]
[166.99868774 -40.17293549]
[168.24555969 -55.12102127]
[161.68217468 -69.51659393]
[170.45065308 -81.55665588]
[171.69752502 -96.50474548]
[172.94439697 -111.45283508]
[174.19128418 -126.40091705]
[166.45338440 -136.77294922]
[167.83932495 -149.23480225]
[177.05752563 -157.12986755]
[178.61511230 -172.04878235]
[180.17269897 -186.96769714]
[181.73027039 -201.88661194]
[183.28785706 -216.80552673]
[169.76750183 -223.70220947]
[159.65443420 -235.01991272]
[154.31636047 -249.22799683]
[154.47521973 -264.40490723]
[160.10952759 -278.49813843]
[170.45727539 -289.60168457]
[184.11903381 -296.21386719]
[199.24714661 -297.44042969]
[213.79568481 -293.11550903]
[225.79704285 -283.82403564]
[233.62815857 -270.82257080]
[236.22993469 -255.86947632]
[233.25050354 -240.98701477]
[225.09280396 -228.18794250]
[212.86010742 -219.20321655]
[198.20677185 -215.24794006]
[196.64918518 -200.32902527]
[195.09159851 -185.41011047]
[193.53402710 -170.49121094]
[191.97644043 -155.57229614]
[199.99308777 -139.99238586]
[189.13935852 -125.15404510]
[187.89248657 -110.20595551]
[186.64561462 -95.25787354]
[185.39874268 -80.30978394]
[192.05131531 -66.98339844]
[183.19364929 -53.87414932]
[181.94677734 -38.92605972]
[180.69990540 -23.97797394]
[189.51379395 -36.11532211]
[201.02397156 -45.73383331]
[214.53396606 -52.25151062]
[229.22630310 -55.27397919]
[244.21195984 -54.61834335]
[258.58419800 -50.32428741]
[271.47335815 -42.65162659]
[282.09951782 -32.06463242]
[289.81973267 -19.20390892]
[294.16687012 -4.84763575]
[294.87783813 10.13550472]
[291.90966797 24.83890343]
[285.44195557 38.37287903]
[275.86599731 49.91850662]
[263.76129150 58.77717972]
[249.86026001 64.41286469]
[235.00401306 66.48456573]
[220.09149170 64.86691284]
[206.02503967 59.65780258]
[193.65579224 51.17241669]
[183.73219299 39.92420578]
[176.85472107 26.59377861]
[173.43949890 11.98774242]
[173.69293213 -3.00815272]
[165.70300293 9.68677711]
[157.71308899 22.38170624]
[149.72317505 35.07663727]
[141.73326111 47.77156448]
[133.74334717 60.46649551]
[141.05790710 67.64175415]
[146.86006165 76.15844727]
[150.90637207 85.70020294]
[153.01913452 95.90704346]
[153.09407043 106.38894653]
[151.10522461 116.74076080]
[147.10685730 126.55783844]
[141.23222351 135.45188904]
[133.68923950 143.06631470]
[124.75318146 149.09043884]
[114.75666809 153.27224731]
[104.07731628 155.42874146]
[93.12347412 155.45397949]
[93.43553162 170.45072937]
[93.74758911 185.44747925]
[94.05964661 200.44424438]
[94.37170410 215.44099426]
[94.68376160 230.43774414]
[94.99581146 245.43449402]
[95.30786896 260.43124390]
[95.61992645 275.42800903]
[98.21092987 294.63574219]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 149]
[2 148]
[3 147]
[4 146]
[5 145]
[6 144]
[7 143]
[8 142]
[9 141]
[10 39]
[11 38]
[12 37]
[18 36]
[19 35]
[20 34]
[50 128]
[51 127]
[52 126]
[53 125]
[54 124]
[55 123]
[56 99]
[57 98]
[58 97]
[60 95]
[61 94]
[62 93]
[63 92]
[66 90]
[67 89]
[68 88]
[69 87]
[70 86]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
