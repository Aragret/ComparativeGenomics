%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:06 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCAAAGAACCCUAACACCAGCCUAACCAGAUUUCAAAUUUUAUCUUUUGGCGGUAUGCACUxxxxxxxxxxUAUUGCAGCCCUAGCAACACUCCACCUCCUAUUCUUGCACGAAACGGGAUCAAACAACCCCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[185.31819153 322.06784058]
[185.00613403 307.07107544]
[184.69409180 292.07434082]
[184.38203430 277.07757568]
[184.06997681 262.08084106]
[183.75791931 247.08407593]
[183.44586182 232.08732605]
[183.13380432 217.09056091]
[182.82174683 202.09381104]
[179.11558533 187.55886841]
[172.20858765 174.24371338]
[165.30158997 160.92855835]
[158.39459229 147.61340332]
[152.48454285 143.09487915]
[151.48567200 133.94862366]
[144.85716248 120.49266052]
[138.22866821 107.03668976]
[132.10322571 119.79244232]
[122.06182861 129.14996338]
[109.69512939 134.04721069]
[96.81860352 134.09585571]
[85.20764923 129.59645081]
[76.35278320 121.45610809]
[71.26898193 111.02507019]
[70.38323212 99.88019562]
[55.88763428 96.02304077]
[41.39203644 92.16587830]
[32.22770309 92.98245239]
[26.63662148 88.07476044]
[12.22440529 83.91687012]
[-2.18781042 79.75898743]
[-17.59193611 83.36779022]
[-27.67576027 72.40577698]
[-42.08797836 68.24788666]
[-48.68959045 69.48329926]
[-54.08743668 67.45980072]
[-57.00650024 63.60563660]
[-71.23328400 58.85182190]
[-85.46006012 54.09800720]
[-99.68683624 49.34419250]
[-111.13249969 59.58588791]
[-126.16886902 62.71691513]
[-140.75122070 57.89504623]
[-150.95700073 46.41733551]
[-154.04087830 31.37123108]
[-149.17332458 16.80405998]
[-137.66368103 6.63431692]
[-122.60797882 3.59761286]
[-108.05613708 8.51080513]
[-97.92252350 20.05227089]
[-94.93302155 35.11741257]
[-80.70624542 39.87122726]
[-66.47946930 44.62504196]
[-52.25268555 49.37885666]
[-37.93008804 53.83567047]
[-23.51787376 57.99356079]
[-9.14460564 54.08735275]
[1.97007692 65.34677124]
[16.38229370 69.50465393]
[30.79450989 73.66254425]
[45.24919891 77.67028046]
[59.74479294 81.52744293]
[74.24038696 85.38459778]
[88.08283234 67.89658356]
[113.10280609 63.40406418]
[113.41486359 48.40731049]
[113.72692108 33.41055679]
[114.03897858 18.41380310]
[99.99212646 12.66485596]
[88.97327423 2.22697473]
[82.47263336 -11.48820305]
[81.36936188 -26.62581253]
[85.81266785 -41.13861847]
[95.20162964 -53.06387711]
[108.26646423 -60.78879929]
[123.24027252 -63.26865387]
[138.09794617 -60.16806030]
[150.83013916 -51.90634537]
[159.71490479 -39.60084152]
[163.55064392 -24.91576385]
[161.81863403 -9.83715248]
[154.75308228 3.59573746]
[143.30957031 13.56621647]
[129.03573608 18.72585869]
[128.72367859 33.72261429]
[128.41162109 48.71936798]
[128.09956360 63.71612167]
[142.22436523 68.76487732]
[151.48931885 56.96823502]
[153.27603149 40.66671371]
[168.39382935 34.31186676]
[181.29081726 44.44101715]
[178.69967651 60.63416290]
[163.28594971 66.23318481]
[154.02101135 78.02982330]
[167.80737305 72.11915588]
[177.91461182 61.03567123]
[191.26493835 54.19688797]
[206.16522217 52.47012329]
[220.72575378 56.07436371]
[233.09996033 64.55251312]
[241.71850586 76.82935333]
[245.48835754 91.34790039]
[243.93141174 106.26687622]
[237.24513245 119.69422913]
[226.27749634 129.92704773]
[212.41941833 135.66760254]
[197.42845154 136.18785095]
[183.20574951 131.42182922]
[171.55511475 121.97394562]
[163.95281982 109.03903961]
[151.68463135 100.40819550]
[158.31312561 113.86415863]
[164.94163513 127.32012177]
[171.70974731 140.70640564]
[178.61674500 154.02156067]
[185.52374268 167.33671570]
[192.43074036 180.65187073]
[193.42134094 165.68461609]
[198.18223572 151.46020508]
[206.40095520 138.91220093]
[217.53811646 128.86412048]
[230.86276245 121.97545624]
[245.50038147 118.69829559]
[260.49032593 119.24773407]
[274.84875488 123.58769989]
[287.63333130 131.43336487]
[298.00500488 142.26982117]
[305.28305054 155.38583374]
[308.98980713 169.92062378]
[308.88201904 184.92024231]
[304.96673584 199.40023804]
[297.50091553 212.41030884]
[286.97457886 223.09657288]
[274.07855225 230.75767517]
[259.65924072 234.89082336]
[244.66294861 235.22476196]
[230.07392883 231.73756409]
[216.84967041 224.65809631]
[205.85807800 214.45098877]
[197.81849670 201.78175354]
[198.13055420 216.77850342]
[198.44261169 231.77526855]
[198.75466919 246.77201843]
[199.06672668 261.76876831]
[199.37878418 276.76553345]
[199.69084167 291.76226807]
[200.00289917 306.75903320]
[200.31495667 321.75579834]
[202.90594482 340.96350098]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 149]
[2 148]
[3 147]
[4 146]
[5 145]
[6 144]
[7 143]
[8 142]
[9 141]
[10 118]
[11 117]
[12 116]
[13 115]
[15 114]
[16 113]
[17 112]
[25 63]
[26 62]
[27 61]
[29 60]
[30 59]
[31 58]
[33 56]
[34 55]
[37 54]
[38 53]
[39 52]
[40 51]
[65 87]
[66 86]
[67 85]
[68 84]
[88 95]
[89 94]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
