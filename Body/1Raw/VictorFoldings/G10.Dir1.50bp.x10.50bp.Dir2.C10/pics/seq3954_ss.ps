%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:58 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCUCCUGCCAUCAUGACCCUUGGCCAUAAUAUGAUUUAUCUCCACACUAGCAGAGACCAACxxxxxxxxxxCUCUAUCUUAGGGGCCAUCAAUUUCAUCACAACAAUUAUCAAUAUAAAACCCCCUGCCAUCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[92.58636475 271.81243896]
[92.58636475 256.81243896]
[92.58636475 241.81242371]
[92.58636475 226.81242371]
[92.58636475 211.81242371]
[92.58636475 196.81242371]
[92.58636475 181.81242371]
[92.58636475 166.81242371]
[92.58636475 151.81242371]
[92.58636475 136.81242371]
[79.06486511 128.30519104]
[71.09745789 115.63511658]
[69.53591156 101.76222229]
[73.84323883 89.54315948]
[82.35226440 81.14695740]
[75.72376251 67.69099426]
[60.50014877 67.74515533]
[46.81843567 61.21081161]
[37.36922455 49.43233109]
[33.98493576 34.77942657]
[37.28462982 20.17047501]
[46.56159210 8.49128532]
[39.93309402 -4.96468019]
[33.30459213 -18.42064476]
[26.67609596 -31.87661171]
[9.17244816 -32.59649658]
[-5.50245047 -42.00111389]
[-13.38771915 -57.44589233]
[-12.40875244 -74.67073822]
[-2.92225027 -88.97494507]
[-10.10475922 -102.14353180]
[-17.28726768 -115.31211090]
[-24.46977615 -128.48069763]
[-31.65228653 -141.64927673]
[-47.57753754 -150.83438110]
[-46.54235840 -168.32519531]
[-53.99726868 -181.34150696]
[-61.45217896 -194.35781860]
[-66.08024597 -197.04119873]
[-68.89306641 -200.86747742]
[-69.76064301 -204.93553162]
[-68.93697357 -208.42680359]
[-75.56546783 -221.88278198]
[-82.19396973 -235.33874512]
[-90.83308411 -247.60110474]
[-101.27289581 -258.37191772]
[-119.07330322 -262.96817017]
[-122.74899292 -280.09970093]
[-133.41062927 -290.65097046]
[-144.07225037 -301.20227051]
[-154.73387146 -311.75357056]
[-169.52717590 -307.62393188]
[-184.39936829 -311.45977783]
[-195.34989929 -322.22924805]
[-199.43312073 -337.03540039]
[-195.55068970 -351.89550781]
[-184.74694824 -362.81222534]
[-169.92805481 -366.84902954]
[-155.08020020 -362.92004395]
[-144.19740295 -352.08212280]
[-140.20707703 -337.25064087]
[-144.18258667 -322.41519165]
[-133.52096558 -311.86389160]
[-122.85932922 -301.31259155]
[-112.19770813 -290.76132202]
[-100.06352997 -290.49841309]
[-91.09215546 -281.73867798]
[-90.50209045 -268.81173706]
[-80.06227875 -258.04092407]
[-82.94743347 -272.76083374]
[-80.41998291 -287.54635620]
[-72.80905914 -300.47207642]
[-61.10579681 -309.85470581]
[-46.83425140 -314.47238159]
[-31.85294342 -313.72381592]
[-18.11281204 -307.70642090]
[-7.40316963 -297.20388794]
[-1.11868012 -283.58386230]
[-0.07774285 -268.62002563]
[-4.41591406 -254.26103210]
[-13.56825447 -242.37681580]
[-26.34289932 -234.51498413]
[-41.07626724 -231.69934082]
[-55.84970474 -234.29655457]
[-68.73799896 -241.96723938]
[-62.10950470 -228.51127625]
[-55.48100662 -215.05531311]
[-48.43587112 -201.81272888]
[-40.98096085 -188.79641724]
[-33.52605057 -175.78010559]
[-21.90324020 -172.28472900]
[-15.59846306 -161.44642639]
[-18.48370361 -148.83178711]
[-11.30119419 -135.66320801]
[-4.11868572 -122.49462128]
[3.06382322 -109.32604218]
[10.24633217 -96.15745544]
[22.90705681 -97.20898438]
[35.06300735 -93.35855103]
[44.88135147 -85.14936829]
[50.86756134 -73.78459930]
[52.09284973 -60.95113373]
[48.33810806 -48.56921005]
[40.13206100 -38.50510788]
[46.76055908 -25.04914474]
[53.38905716 -11.59317875]
[60.01755524 1.86278677]
[74.93094635 1.62564814]
[88.52429199 7.91297483]
[98.07893372 19.52632332]
[101.65839386 34.19627762]
[98.50068665 49.02583694]
[89.17972565 61.06249619]
[95.80822754 74.51846313]
[122.19857025 77.38721466]
[137.15985107 105.40938568]
[151.28466797 110.45814514]
[165.40946960 115.50690460]
[179.53427124 120.55565643]
[195.56172180 117.08397675]
[206.38014221 129.40850830]
[200.86045837 144.85081482]
[184.68084717 147.52519226]
[174.48550415 134.68046570]
[160.36070251 129.63169861]
[146.23590088 124.58294678]
[132.11109924 119.53419495]
[125.97991943 123.85375214]
[135.95509338 135.05624390]
[145.93026733 146.25872803]
[155.90545654 157.46122742]
[168.99287415 164.79058838]
[172.75276184 179.31172180]
[164.86695862 192.07157898]
[150.19747925 195.20306396]
[137.78880310 186.77545166]
[135.29170227 171.98408508]
[128.10031128 158.82034302]
[120.90893555 145.65660095]
[113.71755219 132.49285889]
[107.58636475 136.81242371]
[107.58636475 151.81242371]
[107.58636475 166.81242371]
[107.58636475 181.81242371]
[107.58636475 196.81242371]
[107.58636475 211.81242371]
[107.58636475 226.81242371]
[107.58636475 241.81242371]
[107.58636475 256.81243896]
[107.58636475 271.81243896]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[15 114]
[16 113]
[22 107]
[23 106]
[24 105]
[25 104]
[30 97]
[31 96]
[32 95]
[33 94]
[34 93]
[36 90]
[37 89]
[38 88]
[42 87]
[43 86]
[44 85]
[45 69]
[46 68]
[48 65]
[49 64]
[50 63]
[51 62]
[116 127]
[117 126]
[118 125]
[119 124]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
