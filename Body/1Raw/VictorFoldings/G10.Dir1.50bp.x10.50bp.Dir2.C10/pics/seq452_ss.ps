%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:32 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGAACCCUAACACCAGCCUAACCAGAUUUCAAAUUUUAUCUUUUGGCGGUAUGCACUUUUAACxxxxxxxxxxUUCUUACUCAUCCGCUUCCACCCCCUAGCAGAAAAUAGCCCACUAAUCCAAACUCUAACACCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[83.56513977 267.28012085]
[83.56513977 252.28012085]
[83.56513977 237.28012085]
[83.56513977 222.28012085]
[83.56513977 207.28012085]
[83.56513977 192.28012085]
[83.56513977 177.28012085]
[83.56513977 162.28012085]
[83.56513977 147.28012085]
[83.56513977 132.28012085]
[76.37375641 145.44386292]
[73.07196045 160.07595825]
[61.94127274 170.13119507]
[47.05004120 171.93431091]
[33.84112167 164.82624817]
[27.14246941 151.40507507]
[29.40249443 136.57630920]
[39.79513931 125.75997925]
[54.52317047 122.90969849]
[67.90212250 116.12710571]
[52.90923691 115.66517639]
[37.91635132 115.20324707]
[29.18038368 118.08051300]
[22.62126541 114.57478333]
[7.64102364 113.80512238]
[-7.33921766 113.03546143]
[-21.51821709 120.05447388]
[-33.83171844 111.67431641]
[-48.81195831 110.90466309]
[-54.95491409 113.60774994]
[-60.66810608 112.86792755]
[-64.38760376 109.78336334]
[-79.32361603 108.39933777]
[-94.25962830 107.01531219]
[-109.19564056 105.63128662]
[-118.00399780 118.21335602]
[-131.93006897 124.69101715]
[-147.22781372 123.32182312]
[-159.78221130 114.47407532]
[-166.21618652 100.52777100]
[-164.79904175 85.23439789]
[-155.91198730 72.70779419]
[-141.94558716 66.31755829]
[-126.65673065 67.78262329]
[-114.15804291 76.70890808]
[-107.81161499 90.69527435]
[-92.87560272 92.07929993]
[-77.93959045 93.46332550]
[-63.00357819 94.84735107]
[-48.04230118 95.92441559]
[-33.06205750 96.69407654]
[-19.95454597 89.62001801]
[-6.56955767 98.05522156]
[8.41068363 98.82488251]
[23.39092445 99.59454346]
[38.37827682 100.21036530]
[53.37116241 100.67229462]
[68.36405182 101.13421631]
[76.65653992 77.99179840]
[99.25136566 67.50017548]
[104.66999054 53.51308823]
[110.08861542 39.52600479]
[96.90866852 32.31879044]
[84.78224182 23.45285606]
[73.91683197 13.07991314]
[64.49836731 1.37745345]
[56.68801117 -11.45427704]
[50.61940002 -25.19571114]
[46.39638519 -39.61171341]
[44.09122086 -54.45560837]
[43.74335480 -69.47339630]
[45.35873795 -84.40811157]
[48.90973282 -99.00418854]
[54.33557129 -113.01187134]
[61.54341507 -126.19147491]
[70.40992737 -138.31748962]
[80.78338623 -149.18238831]
[92.48629761 -158.60029602]
[105.31839752 -166.41004944]
[119.06011963 -172.47801208]
[133.47631836 -176.70033264]
[148.32032776 -179.00479126]
[163.33813477 -179.35194397]
[178.27276611 -177.73585510]
[192.86868286 -174.18415833]
[206.87609863 -168.75765991]
[220.05537415 -161.54917908]
[232.18095398 -152.68209839]
[243.04536438 -142.30812073]
[252.46272278 -130.60476685]
[260.27185059 -117.77228546]
[266.33914185 -104.03027344]
[270.56079102 -89.61386871]
[272.86456299 -74.76975250]
[273.21099854 -59.75193405]
[271.59417725 -44.81737900]
[268.04180908 -30.22163773]
[262.61462402 -16.21446800]
[255.40553284 -3.03554916]
[246.53785706 9.08961201]
[236.16336060 19.95353699]
[224.45956421 29.37032890]
[211.62672424 37.17885590]
[197.88441467 43.24550247]
[183.46780396 47.46646118]
[168.62358093 49.76950455]
[153.60574341 50.11522675]
[138.67126465 48.49770737]
[124.07569885 44.94462967]
[118.65707397 58.93171310]
[113.23844910 72.91880035]
[116.58148956 79.63252258]
[127.28565216 69.12439728]
[140.58723450 76.05749512]
[138.10385132 90.85049438]
[123.26756287 93.05997467]
[126.61059570 99.77369690]
[141.03797913 103.87863922]
[155.46536255 107.98358917]
[171.22857666 103.46104431]
[182.83728027 115.04422760]
[178.34944153 130.81735229]
[162.38175964 134.55436707]
[151.36042786 122.41097260]
[136.93304443 118.30603027]
[122.50565338 114.20108032]
[116.52052307 118.72084045]
[127.21372986 129.24012756]
[137.90693665 139.75941467]
[148.60014343 150.27870178]
[159.29335022 160.79797363]
[172.57391357 167.77127075]
[178.64729309 181.48674011]
[174.88439941 196.00708008]
[162.91413879 205.04661560]
[147.91833496 204.69218445]
[136.38850403 195.09724426]
[133.31579590 180.41531372]
[126.12441254 167.25157166]
[118.93302917 154.08784485]
[111.74165344 140.92410278]
[104.55027008 127.76036072]
[98.56513977 132.28012085]
[98.56513977 147.28012085]
[98.56513977 162.28012085]
[98.56513977 177.28012085]
[98.56513977 192.28012085]
[98.56513977 207.28012085]
[98.56513977 222.28012085]
[98.56513977 237.28012085]
[98.56513977 252.28012085]
[98.56513977 267.28012085]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 152]
[2 151]
[3 150]
[4 149]
[5 148]
[6 147]
[7 146]
[8 145]
[9 144]
[10 143]
[20 58]
[21 57]
[22 56]
[24 55]
[25 54]
[26 53]
[28 51]
[29 50]
[32 49]
[33 48]
[34 47]
[35 46]
[60 111]
[61 110]
[62 109]
[117 126]
[118 125]
[119 124]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
