%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:01 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCCUUCACCAUUUCCGACGGCAUCUACGGCUCAACAUUUUUUGUAGCCACAGGCUUCCACGGxxxxxxxxxxUAUUCGAAAAAUAGGAGGACUACUCAAAACCAUACCUCUCACUUCAACCUCCCUCACCAUUCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[92.50000000 247.05825806]
[92.50000000 232.05825806]
[92.50000000 217.05825806]
[92.50000000 202.05825806]
[92.50000000 187.05825806]
[92.50000000 172.05825806]
[92.50000000 157.05825806]
[92.50000000 142.05825806]
[92.50000000 127.05825806]
[92.50000000 112.05825806]
[85.67642212 98.70015717]
[73.52309418 89.90830994]
[61.36975861 81.11647034]
[60.77748489 96.10477448]
[48.81568909 105.15548706]
[34.23088837 101.65069580]
[27.68754578 88.15312195]
[33.97018051 74.53223419]
[48.48429489 70.74757385]
[37.29599762 60.75648117]
[26.10770226 50.76538467]
[14.91940594 40.77428436]
[2.08575177 33.00915146]
[-11.95622444 27.73440933]
[-25.99820137 22.45966721]
[-38.08488464 27.07657051]
[-49.69575500 22.34803772]
[-54.78048325 11.32952023]
[-68.71119690 5.76758289]
[-82.86281586 14.97801399]
[-99.55159760 13.97148895]
[-112.23946381 3.33993959]
[-116.07336426 -12.59277153]
[-130.11534119 -17.86751366]
[-144.36846924 -11.58373260]
[-158.53388977 -17.13310432]
[-164.43667603 -30.76001549]
[-178.47865295 -36.03475571]
[-192.52062988 -41.30949783]
[-206.56260681 -46.58423996]
[-213.23594666 -45.87060547]
[-218.45599365 -48.30758286]
[-221.06536865 -52.37456894]
[-234.87895203 -58.22135925]
[-248.69253540 -64.06814575]
[-264.04138184 -59.39990997]
[-277.17883301 -68.60788727]
[-278.02697754 -84.62850189]
[-265.93518066 -95.17211914]
[-250.17921448 -92.15056610]
[-242.84574890 -77.88172913]
[-229.03216553 -72.03494263]
[-215.21858215 -66.18815613]
[-201.28787231 -60.62621689]
[-187.24589539 -55.35147476]
[-173.20391846 -50.07673264]
[-159.16194153 -44.80199051]
[-145.74731445 -51.17248917]
[-131.43161011 -46.02318192]
[-124.84059906 -31.90948868]
[-110.79862213 -26.63474846]
[-100.35357666 -35.00452423]
[-87.02749634 -37.12174606]
[-74.29974365 -32.32490921]
[-65.54737091 -21.77202225]
[-63.14926147 -8.16313362]
[-49.21854401 -2.60119605]
[-32.04271698 -6.07040977]
[-20.72345924 8.41769123]
[-6.68148327 13.69243240]
[7.36049318 18.96717453]
[-1.84610140 7.12493563]
[-7.02352095 -6.95321512]
[-7.68316507 -21.93870354]
[-3.76278210 -36.41732788]
[4.36765575 -49.02272415]
[15.94086838 -58.56529999]
[29.86467552 -64.14450836]
[44.82506943 -65.23384094]
[59.41021347 -61.73048401]
[72.24369812 -53.96506119]
[82.11439514 -42.67040634]
[88.09080505 -28.91240501]
[89.60891724 -13.98942566]
[86.52547455 0.69023257]
[79.13146210 13.74123096]
[68.12465668 23.93192863]
[54.54379654 30.30061340]
[39.67051697 32.24626923]
[24.91050339 29.58598900]
[36.09880066 39.57708740]
[47.28709412 49.56818390]
[58.47539139 59.55928040]
[70.16159821 68.96313477]
[82.31493378 77.75498199]
[94.46826935 86.54682159]
[122.70108795 80.91235352]
[137.69396973 80.45042419]
[152.68685913 79.98850250]
[155.25651550 65.15671539]
[160.75950623 51.14593506]
[168.97048950 38.52988815]
[179.55322266 27.82519341]
[192.07437134 19.47020149]
[206.02117920 13.80704594]
[220.82254028 11.06762791]
[235.87236023 11.36412525]
[250.55435181 14.68439674]
[264.26727295 20.89247894]
[276.44964600 29.73415565]
[286.60253906 40.84736252]
[294.31024170 53.77702713]
[299.25711060 67.99368286]
[301.24060059 82.91516876]
[300.17947388 97.93045044]
[296.11715698 112.42468262]
[289.22003174 125.80431366]
[279.77053833 137.52146912]
[268.15557861 147.09632874]
[254.85083008 154.13681030]
[240.40109253 158.35462952]
[225.39807129 159.57704163]
[210.45613098 157.75399780]
[196.18714905 152.96017456]
[183.17541504 145.39183044]
[171.95375061 135.35893250]
[162.98168945 123.27228546]
[156.62661743 109.62684631]
[153.14878845 94.98138428]
[138.15589905 95.44331360]
[123.16301727 95.90523529]
[136.54196167 102.68782806]
[151.53897095 102.98735809]
[164.43762207 110.64404297]
[171.88250732 123.66609192]
[171.93692017 138.66598511]
[164.58671570 151.74171448]
[151.74394226 159.49177551]
[136.74951172 159.90010071]
[123.50399780 152.86045837]
[115.45307159 140.20413208]
[114.69138336 125.22199249]
[107.50000000 112.05825806]
[107.50000000 127.05825806]
[107.50000000 142.05825806]
[107.50000000 157.05825806]
[107.50000000 172.05825806]
[107.50000000 187.05825806]
[107.50000000 202.05825806]
[107.50000000 217.05825806]
[107.50000000 232.05825806]
[107.50000000 247.05825806]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 152]
[2 151]
[3 150]
[4 149]
[5 148]
[6 147]
[7 146]
[8 145]
[9 144]
[10 143]
[11 96]
[12 95]
[13 94]
[19 93]
[20 92]
[21 91]
[22 90]
[23 71]
[24 70]
[25 69]
[28 67]
[29 66]
[33 61]
[34 60]
[37 57]
[38 56]
[39 55]
[40 54]
[43 53]
[44 52]
[45 51]
[97 131]
[98 130]
[99 129]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
