%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:21 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGACAACACAAGAACACCUCUGAUUACUCCUGCCAUCAUGACCCUUGGCCAUAAUAUGAUUUxxxxxxxxxxACUAGUUCCCCUAAUAAUCGGUGCCCCCGAUAUGGCGUUUCCCCGCAUAAACAACAUAAGCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[117.16417694 282.67111206]
[117.16417694 267.67111206]
[117.16417694 252.67109680]
[117.16417694 237.67109680]
[117.16417694 222.67109680]
[117.16417694 207.67109680]
[117.16417694 192.67109680]
[117.16417694 177.67109680]
[117.16417694 162.67109680]
[117.16417694 147.67109680]
[113.76119995 133.06221008]
[107.13269806 119.60623932]
[104.37762451 134.35105896]
[90.76179504 140.64463806]
[77.74546814 133.18975830]
[76.28430939 118.26109314]
[87.60823822 108.42387390]
[72.64798737 109.51518250]
[57.68774033 110.60649872]
[42.72748947 111.69780731]
[31.56855392 125.12969208]
[14.48611546 126.34391785]
[2.03925943 115.07743835]
[-12.89504814 116.47973633]
[-16.45445061 119.21691895]
[-20.31531334 120.50717926]
[-23.97278786 120.43811798]
[-27.00546074 119.25622559]
[-29.12102890 117.32446289]
[-44.12021637 117.48049927]
[-59.11940765 117.63653564]
[-74.11859131 117.79257202]
[-81.58925629 131.21214294]
[-94.77705383 139.08471680]
[-110.13453674 139.29263306]
[-123.53062439 131.77993774]
[-131.36183167 118.56752777]
[-131.52160645 103.20947266]
[-123.96695709 89.83699799]
[-110.73006439 82.04724884]
[-95.37157440 81.93561554]
[-82.02285004 89.53214264]
[-74.27462769 102.79338837]
[-59.27544403 102.63735199]
[-44.27625275 102.48131561]
[-29.27706528 102.32527924]
[-14.29735184 101.54543304]
[0.63695592 100.14312744]
[7.41453648 89.14034271]
[19.47968292 83.99189758]
[32.49422836 86.79359436]
[41.63618088 96.73755646]
[56.59642792 95.64624786]
[71.55667877 94.55493927]
[86.51692200 93.46362305]
[98.86849976 84.95253754]
[105.21562958 71.36158752]
[111.56275940 57.77063370]
[117.90988922 44.17968369]
[124.25701904 30.58873177]
[117.24989319 23.80906487]
[114.02795410 13.13384056]
[116.60250854 0.83382046]
[119.08762360 -13.95888710]
[121.57273865 -28.75159454]
[111.61675262 -17.53204536]
[98.60247803 -10.07358265]
[83.88912201 -7.15516233]
[69.01334381 -9.08158302]
[55.52874756 -15.65165043]
[44.84366989 -26.17918968]
[38.07404709 -39.56471252]
[35.92689514 -54.41024017]
[38.62646484 -69.16532135]
[45.89081192 -82.28893280]
[56.96125031 -92.41046906]
[70.68159485 -98.47282410]
[85.61889648 -99.84285736]
[100.21311188 -96.37749481]
[112.94004059 -88.43863678]
[122.47047424 -76.85542297]
[127.80906677 -62.83760071]
[128.39790344 -47.84618759]
[135.85281372 -60.86249924]
[143.30772400 -73.87880707]
[140.50627136 -89.67536926]
[151.21754456 -101.61891174]
[167.22476196 -100.54736328]
[176.24856567 -87.28273773]
[171.36666870 -72.00050354]
[156.32402039 -66.42389679]
[148.86911011 -53.40758896]
[141.41419983 -40.39127731]
[136.36544800 -26.26647568]
[133.88032532 -11.47376823]
[131.39521790 3.31893897]
[143.09483337 12.70610046]
[156.99739075 7.07414436]
[170.89994812 1.44218743]
[184.80250549 -4.18976927]
[198.70506287 -9.82172585]
[206.25883484 -23.97517204]
[222.05972290 -26.75212097]
[233.98663330 -16.02233505]
[232.89027405 -0.01678867]
[219.61164856 8.98643398]
[204.33702087 4.08083010]
[190.43446350 9.71278667]
[176.53190613 15.34474373]
[162.62934875 20.97669983]
[148.72679138 26.60865593]
[137.84796143 36.93586349]
[131.50083923 50.52681351]
[125.15370941 64.11776733]
[118.80657959 77.70871735]
[112.45944977 91.29966736]
[120.58866882 112.97774506]
[127.21716309 126.43370819]
[128.51892090 111.49030304]
[133.57470703 97.36801147]
[142.05268860 84.99369812]
[153.39648438 75.17948914]
[166.86155701 68.56951904]
[181.56419373 65.59758759]
[196.53945923 66.45874786]
[210.80448914 71.09648895]
[223.42308044 79.20642090]
[233.56706238 90.25629425]
[240.57067871 103.52088928]
[243.97425842 118.12963867]
[243.55442810 133.12376404]
[239.33876038 147.51918030]
[231.60391235 160.37110901]
[220.85754395 170.83607483]
[207.80493164 178.22723389]
[193.30273438 182.05952454]
[178.30274963 182.08140564]
[163.78942871 178.29145813]
[150.71531677 170.93840027]
[139.93844604 160.50483704]
[132.16418457 147.67109680]
[132.16418457 162.67109680]
[132.16418457 177.67109680]
[132.16418457 192.67109680]
[132.16418457 207.67109680]
[132.16418457 222.67109680]
[132.16418457 237.67109680]
[132.16418457 252.67109680]
[132.16418457 267.67111206]
[132.16418457 282.67111206]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[11 118]
[12 117]
[17 55]
[18 54]
[19 53]
[20 52]
[23 48]
[24 47]
[29 46]
[30 45]
[31 44]
[32 43]
[56 116]
[57 115]
[58 114]
[59 113]
[60 112]
[63 96]
[64 95]
[65 94]
[83 93]
[84 92]
[85 91]
[97 111]
[98 110]
[99 109]
[100 108]
[101 107]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
