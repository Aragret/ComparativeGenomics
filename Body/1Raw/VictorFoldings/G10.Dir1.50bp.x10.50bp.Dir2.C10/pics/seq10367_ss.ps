%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:36 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCCCACUAAUAGCUUUUUGAUGACUUCUAGCAAGCCUCGCUAACCUCGCCUUACCCCCCACxxxxxxxxxxCGUUGUAUUUCAACUACAAGAACACCAAUGACCCCAAUACGCAAAACUAACCCCCUAAUACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[95.80580902 467.44299316]
[95.80580902 452.44299316]
[95.80580902 437.44299316]
[95.80580902 422.44299316]
[95.80580902 407.44299316]
[95.80580902 392.44299316]
[95.80580902 377.44299316]
[95.80580902 362.44299316]
[95.80580902 347.44299316]
[95.80580902 332.44299316]
[80.73530579 329.32434082]
[66.63118744 323.15237427]
[54.10494232 314.19210815]
[43.70019150 302.82952881]
[35.86906433 289.55496216]
[30.95258331 274.94186401]
[29.16578674 259.62210083]
[30.58834648 244.25854492]
[35.16099930 229.51654053]
[42.68802643 216.03491211]
[52.84562683 204.39845276]
[65.19583893 195.11239624]
[79.20542145 188.58061218]
[94.26890564 185.08796692]
[93.95685577 170.09121704]
[93.64479828 155.09445190]
[93.33274078 140.09770203]
[93.02068329 125.10095215]
[73.00930786 120.31291962]
[58.49427414 99.61465454]
[43.55996323 101.01695251]
[35.24571991 104.95715332]
[28.30088425 102.28977203]
[13.34063625 103.38108063]
[-2.01662588 110.56375885]
[-13.16991425 97.79502869]
[-3.98772764 83.54287720]
[12.24932575 88.42082977]
[27.20957375 87.32952118]
[42.15766144 86.08264923]
[57.09196854 84.68034363]
[58.95958328 69.79706573]
[44.83477783 64.74830627]
[30.70997620 59.69955063]
[13.75990105 60.06191254]
[8.71945190 43.87456512]
[22.87885666 34.54999542]
[35.75873184 45.57474899]
[49.88353348 50.62350464]
[64.00833893 55.67226028]
[74.66996765 45.12097168]
[69.76841736 30.94441223]
[64.86685944 16.76785469]
[49.92576599 18.62724686]
[34.92461395 17.33918571]
[20.51918983 12.95997810]
[7.33923912 5.68106556]
[-4.03906918 -4.17934990]
[-13.11832333 -16.19021225]
[-19.50161743 -29.82645988]
[-22.90990257 -44.49197388]
[-23.19417953 -59.54563904]
[-20.34202576 -74.32937622]
[-14.47812176 -88.19690704]
[-5.85881329 -100.54199219]
[5.13910055 -110.82496643]
[18.03483772 -118.59630585]
[32.26465225 -123.51626587]
[47.20647812 -125.36978149]
[62.20712280 -124.07582092]
[76.61082458 -119.69094849]
[89.78791046 -112.40684509]
[101.16233826 -102.54195404]
[110.23686981 -90.52752686]
[116.61479950 -76.88876343]
[120.01731110 -62.22191238]
[120.29566956 -47.16813660]
[117.43769836 -32.38552094]
[111.56833649 -18.52030182]
[102.94417572 -6.17860556]
[91.94221497 4.10004234]
[79.04341888 11.86630344]
[83.94496918 26.04286194]
[88.84651947 40.21941757]
[102.68974304 45.99569321]
[116.21392822 39.50752640]
[129.73811340 33.01935959]
[143.26231384 26.53119659]
[156.78649902 20.04303169]
[170.02908325 12.99789619]
[182.96714783 5.40798807]
[195.90519714 -2.18192029]
[193.14509583 -17.08687401]
[195.65229797 -32.03644562]
[203.12405396 -45.22540665]
[214.65811157 -55.06111908]
[228.86167908 -60.35587692]
[244.01960754 -60.47031021]
[258.30151367 -55.39060593]
[269.98275757 -45.73015594]
[277.65277100 -32.65550995]
[280.38540649 -17.74549675]
[277.85067749 -2.80056906]
[270.35461426 10.37459755]
[258.80245972 20.18903923]
[244.58914185 25.45761299]
[229.43103027 25.54411316]
[215.15852356 20.43809509]
[203.49510193 10.75613594]
[190.55705261 18.34604454]
[177.61898804 25.93595314]
[176.80021667 28.68129921]
[174.80912781 31.25609207]
[171.70939636 33.19866943]
[167.73536682 34.08073044]
[163.27465820 33.56722260]
[149.75047302 40.05538559]
[136.22628784 46.54355240]
[122.70209503 53.03171539]
[109.17790222 59.51988220]
[133.74626160 98.48287964]
[108.01744080 124.78889465]
[108.32949066 139.78564453]
[108.64154816 154.78240967]
[108.95360565 169.77915955]
[109.26566315 184.77590942]
[123.66838074 187.40629578]
[137.27133179 192.80728149]
[149.54736328 200.76748657]
[160.02111816 210.97631836]
[168.28749084 223.03620911]
[174.02731323 236.47804260]
[177.01960754 250.77940369]
[177.15017700 265.38488770]
[174.41590881 279.72766113]
[168.92483521 293.25152588]
[160.89184570 305.43231201]
[150.63032532 315.79846191]
[138.53988647 323.94900513]
[125.09082031 329.56927490]
[110.80580902 332.44299316]
[110.80580902 347.44299316]
[110.80580902 362.44299316]
[110.80580902 377.44299316]
[110.80580902 392.44299316]
[110.80580902 407.44299316]
[110.80580902 422.44299316]
[110.80580902 437.44299316]
[110.80580902 452.44299316]
[110.80580902 467.44299316]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[24 126]
[25 125]
[26 124]
[27 123]
[28 122]
[30 41]
[31 40]
[33 39]
[34 38]
[42 50]
[43 49]
[44 48]
[51 84]
[52 83]
[53 82]
[85 120]
[86 119]
[87 118]
[88 117]
[89 116]
[90 111]
[91 110]
[92 109]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
