%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:21 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGAGCCCCCUUUCACUUCUGAGUCCCAGAGGUUACCCAAGGCACCCCUCUGACAUCCGGCCUGxxxxxxxxxxGGCGACCUGCGACUCCUUGACGUUGACAAUCGAGUAGUACUCCCGAUUGAAGCCCCCAUUCCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[77.97168732 264.71228027]
[77.97168732 249.71228027]
[77.97168732 234.71228027]
[77.97168732 219.71228027]
[77.97168732 204.71228027]
[77.97168732 189.71228027]
[77.97168732 174.71228027]
[77.97168732 159.71228027]
[77.97168732 144.71228027]
[77.97168732 129.71228027]
[63.63162994 125.31197357]
[55.21821976 137.73028564]
[54.58101273 154.11705017]
[39.94694901 161.51814270]
[26.37030029 152.31996155]
[27.81755447 135.98480225]
[42.79990387 129.31687927]
[51.21331406 116.89856720]
[70.34797668 95.02757263]
[93.31376648 94.74904633]
[85.68079376 81.83634186]
[78.04782867 68.92364502]
[60.27810287 70.96568298]
[43.43957138 65.09044647]
[30.87161827 52.51157761]
[25.04557610 35.76728821]
[27.07884979 18.20830917]
[36.52093124 3.32735729]
[28.10752296 -9.09095669]
[19.69411278 -21.50927162]
[11.28070164 -33.92758560]
[2.86729169 -46.34590149]
[-14.15378189 -50.54851151]
[-21.57151413 -65.78614807]
[-35.71883011 -70.77146912]
[-49.86614609 -75.75679016]
[-64.01346588 -80.74211121]
[-78.16078186 -85.72743225]
[-92.30809784 -90.71275330]
[-102.43602753 -79.37726593]
[-116.13309479 -72.78492737]
[-131.31059265 -71.94104004]
[-145.65405273 -76.97428131]
[-156.97621155 -87.11711884]
[-163.55052185 -100.82284546]
[-164.37445068 -116.00143433]
[-159.32234192 -130.33825684]
[-149.16461182 -141.64706421]
[-135.45025635 -148.20333862]
[-120.27059174 -149.00729370]
[-105.94042206 -143.93634033]
[-94.64498901 -133.76374817]
[-88.10675812 -120.04077911]
[-87.32277679 -104.86006927]
[-73.17546082 -99.87474823]
[-59.02814102 -94.88942719]
[-44.88082504 -89.90410614]
[-30.73350716 -84.91878510]
[-16.58619118 -79.93346405]
[-13.62804699 -82.62629700]
[-10.18590450 -84.66434479]
[-10.80173016 -99.65169525]
[-23.87310410 -111.23298645]
[-24.54218292 -128.34684753]
[-12.88264942 -140.42816162]
[-13.80606270 -155.39971924]
[-22.37823868 -168.69740295]
[-15.43911648 -181.87684631]
[-29.72105789 -187.16323853]
[-40.61355209 -197.80624390]
[-46.22940826 -211.96188354]
[-45.59564590 -227.17761230]
[-38.82206726 -240.81719971]
[-27.08223343 -250.51751709]
[-12.41014767 -254.59793091]
[2.65216732 -252.35147095]
[15.49507236 -244.16735840]
[23.89345741 -231.46354675]
[26.39225197 -216.44104004]
[22.55852318 -201.70256042]
[13.05648899 -189.80166626]
[-0.46756634 -182.80026245]
[8.03856087 -170.57344055]
[1.16548717 -156.32313538]
[2.08890080 -141.35157776]
[12.86782455 -134.22647095]
[17.62796402 -122.00478363]
[14.41368008 -109.08775330]
[4.18562317 -100.26751709]
[4.80144882 -85.28016663]
[17.45965767 -72.92720032]
[15.28560638 -54.75931168]
[23.69901657 -42.34099579]
[32.11242676 -29.92268181]
[40.52583694 -17.50436783]
[48.93924713 -5.08605289]
[60.87768173 -8.17883873]
[73.21232605 -7.43437529]
[84.73781586 -2.91023135]
[94.32318878 4.96592617]
[101.02284241 15.43672085]
[104.16981506 27.48787498]
[103.44214630 39.94646072]
[98.89577484 51.59504700]
[90.96052551 61.29067612]
[98.59349060 74.20337677]
[106.22646332 87.11607361]
[118.55774689 95.65653229]
[133.32986450 98.26125336]
[148.10197449 100.86597443]
[162.87409973 103.47070312]
[177.64620972 106.07542419]
[192.41833496 108.68014526]
[207.24081421 110.98101807]
[222.10740662 112.97707367]
[236.97401428 114.97313690]
[253.47686768 111.08828735]
[261.77835083 125.87077332]
[249.87162781 137.94001770]
[234.97795105 129.83973694]
[220.11135864 127.84367371]
[205.24475098 125.84761810]
[200.92893982 128.02084351]
[195.19517517 127.46240997]
[189.81359863 123.45226288]
[175.04148865 120.84754181]
[160.26937866 118.24281311]
[145.49725342 115.63809204]
[130.72514343 113.03337097]
[115.95302582 110.42864990]
[110.20768738 115.24955750]
[121.92266846 124.61754608]
[133.63764954 133.98553467]
[147.86441040 138.73942566]
[155.59356689 151.59477234]
[153.12020874 166.38945007]
[141.62992859 176.03172302]
[126.63050079 175.89961243]
[115.31182861 166.05645752]
[113.09979248 151.21884155]
[105.90840912 138.05511475]
[98.71702576 124.89137268]
[92.97168732 129.71228027]
[92.97168732 144.71228027]
[92.97168732 159.71228027]
[92.97168732 174.71228027]
[92.97168732 189.71228027]
[92.97168732 204.71228027]
[92.97168732 219.71228027]
[92.97168732 234.71228027]
[92.97168732 249.71228027]
[92.97168732 264.71228027]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 152]
[2 151]
[3 150]
[4 149]
[5 148]
[6 147]
[7 146]
[8 145]
[9 144]
[10 143]
[11 18]
[12 17]
[20 107]
[21 106]
[22 105]
[28 96]
[29 95]
[30 94]
[31 93]
[32 92]
[34 59]
[35 58]
[36 57]
[37 56]
[38 55]
[39 54]
[61 90]
[62 89]
[65 85]
[66 84]
[68 82]
[108 130]
[109 129]
[110 128]
[111 127]
[112 126]
[113 125]
[114 122]
[115 121]
[116 120]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
