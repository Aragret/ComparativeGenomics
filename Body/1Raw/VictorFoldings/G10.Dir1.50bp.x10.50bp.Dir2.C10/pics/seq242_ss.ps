%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:00 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCAUCAUAACAAAAAAUUUCCACCAAACCCCCCCUCCCCCGCUUCUGGCCACAGCACUUAAAxxxxxxxxxxUUCUCCUUACACCUAGCAGGUGUCUCCUCUAUCUUAGGGGCCAUCAAUUUCAUCACAACAACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[73.35031891 124.89067841]
[60.51667023 132.65580750]
[47.68301392 140.42094421]
[34.84936142 148.18608093]
[22.01570702 155.95121765]
[9.26244926 163.84770203]
[-3.40906620 171.87469482]
[-16.08058167 179.90170288]
[-28.75209808 187.92869568]
[-41.42361450 195.95568848]
[-36.18180084 210.07011414]
[-33.98947906 224.96600342]
[-34.94248581 239.99217224]
[-38.99916458 254.49171448]
[-45.98217010 267.83081055]
[-55.58623886 279.42630005]
[-67.39151764 288.77130127]
[-80.88193512 295.45727539]
[-95.46774292 299.19195557]
[-110.51132202 299.81207275]
[-125.35501862 297.29052734]
[-139.34994507 291.73751831]
[-151.88427734 283.39581299]
[-162.41011047 272.63009644]
[-170.46725464 259.91098022]
[-175.70352173 245.79447937]
[-177.88998413 230.89773560]
[-176.93106079 215.87194824]
[-172.86868286 201.37399292]
[-165.88041687 188.03764343]
[-156.27178955 176.44593811]
[-144.46284485 167.10557556]
[-130.96978760 160.42489624]
[-116.38251495 156.69596863]
[-101.33869934 156.08177185]
[-86.49599457 158.60917664]
[-72.50325775 164.16767883]
[-59.97219467 172.51431274]
[-49.45061111 183.28417969]
[-36.77909470 175.25717163]
[-24.10758018 167.23017883]
[-11.43606377 159.20318604]
[1.23545253 151.17619324]
[5.22758150 144.90122986]
[14.25057125 143.11756897]
[27.08422470 135.35243225]
[39.91787720 127.58729553]
[52.75153351 119.82215881]
[65.58518982 112.05702209]
[61.84771729 96.31890106]
[65.30794525 79.70340729]
[75.96652985 65.48664093]
[92.34848022 56.75106430]
[111.68446350 55.73181152]
[101.57903290 44.64667892]
[91.47359467 33.56154251]
[75.69063568 29.10842896]
[71.91847992 13.14901543]
[84.03759766 2.10098100]
[99.58087921 7.32959604]
[102.55873108 23.45611000]
[112.66416168 34.54124451]
[122.76959991 45.62637711]
[119.21574402 31.05345345]
[115.66188049 16.48052979]
[112.10802460 1.90760648]
[108.55416870 -12.66531754]
[105.00031281 -27.23824120]
[95.40873718 -38.77087402]
[89.50829315 -52.56162643]
[87.79001617 -67.46288300]
[90.39687347 -82.23461914]
[97.11194611 -95.64759827]
[107.37641907 -106.58562469]
[120.33613586 -114.13849640]
[134.91262817 -117.67767334]
[149.89289856 -116.90866089]
[164.03034973 -111.89543152]
[176.14852905 -103.05518341]
[185.23898315 -91.12355804]
[190.54524231 -77.09346771]
[191.62576294 -62.13243484]
[188.39060974 -47.48546219]
[181.10900879 -34.37141800]
[170.38330078 -23.87897110]
[165.35462952 -9.74700356]
[160.32595825 4.38496447]
[155.29728699 18.51693153]
[150.26863098 32.64889908]
[145.23995972 46.78086853]
[156.42825317 36.78977203]
[167.61654663 26.79867363]
[178.80485535 16.80757713]
[189.99314880 6.81647921]
[201.18144226 -3.17461777]
[208.96833801 -18.23452187]
[225.59532166 -14.92094231]
[227.01403809 1.97354114]
[211.17254639 8.01367855]
[199.98423767 18.00477600]
[188.79594421 27.99587250]
[177.60765076 37.98696899]
[166.41935730 47.97806549]
[155.23106384 57.96916199]
[155.30805969 65.46876526]
[169.91670227 62.06471252]
[184.52532959 58.66065216]
[196.48840332 49.61161423]
[211.48631287 49.36094666]
[223.74508667 58.00514984]
[228.54530334 72.21633911]
[224.03894043 86.52342987]
[211.96089172 95.41839600]
[196.96099854 95.47682953]
[184.81295776 86.67477417]
[170.13751221 83.57137299]
[155.46205139 80.46797943]
[155.53904724 87.96758270]
[166.93013000 97.72686005]
[178.32119751 107.48612976]
[189.71226501 117.24540710]
[202.25636292 108.84610748]
[216.60176086 104.14373016]
[231.68391418 103.48722839]
[246.38365173 106.92530823]
[259.61013794 114.20284271]
[270.38189697 124.77980042]
[277.89956665 137.87129211]
[281.60531616 152.50582886]
[281.22415161 167.59745789]
[276.78430176 182.02627563]
[268.61532593 194.72155762]
[257.32333374 204.74122620]
[243.74632263 211.34176636]
[228.89176941 214.03335571]
[213.86196899 212.61628723]
[199.77226257 207.19570923]
[187.66819763 198.17384338]
[178.44795227 186.22019958]
[172.79574585 172.22180176]
[171.13099670 157.21743774]
[173.57725525 142.32051086]
[179.95300293 128.63647461]
[168.56192017 118.87720490]
[157.17085266 109.11792755]
[145.77976990 99.35865784]
[142.80032349 112.61064911]
[136.17887878 124.07061005]
[126.69615936 132.79853821]
[115.35509491 138.15084839]
[103.27728271 139.82557678]
[91.59300232 137.87351990]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 49]
[2 48]
[3 47]
[4 46]
[5 45]
[6 43]
[7 42]
[8 41]
[9 40]
[10 39]
[54 63]
[55 62]
[56 61]
[90 104]
[91 103]
[92 102]
[93 101]
[94 100]
[95 99]
[118 146]
[119 145]
[120 144]
[121 143]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
