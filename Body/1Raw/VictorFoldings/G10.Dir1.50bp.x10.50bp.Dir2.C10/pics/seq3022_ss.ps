%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:40 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGGGUUUACGACCUCGAUGUUGGAUCAGGACAUCCCGAUGGUGCAGCCGCUAUUAAAGGUUCGxxxxxxxxxxCUUGUAAAUAUAGUUUAACCAAAACAUCAGAUUGUGAAUCUGACAACAGAGGCUUACGACCCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[98.30675507 497.14764404]
[85.19038391 486.40533447]
[91.88189697 470.82778931]
[92.49772644 455.84042358]
[93.11354828 440.85308838]
[93.72937775 425.86572266]
[94.34519958 410.87838745]
[94.96102905 395.89102173]
[95.57685089 380.90365601]
[96.19267273 365.91632080]
[96.80850220 350.92895508]
[97.42432404 335.94161987]
[82.90914154 332.25308228]
[69.47288513 325.62451172]
[57.70394516 316.34344482]
[48.11824417 304.81365967]
[41.13665771 291.53756714]
[37.06650925 277.09436035]
[36.08804321 262.11468506]
[38.24645996 247.25317383]
[43.44982147 233.15975952]
[51.47296143 220.45132446]
[61.96724701 209.68466187]
[74.47570038 201.33209229]
[88.45291901 195.76074219]
[103.28885651 193.21636963]
[103.90468597 178.22901917]
[104.52050781 163.24166870]
[105.13633728 148.25431824]
[105.75215912 133.26696777]
[74.41196442 138.06594849]
[43.37324524 112.42100525]
[28.39300346 111.65134430]
[13.41276169 110.88169098]
[4.61955881 113.57897949]
[-1.86619771 109.93931580]
[-16.82747841 108.86224365]
[-29.84919357 118.23318481]
[-45.25500870 113.75653839]
[-51.22690582 98.86640167]
[-43.18375015 84.98522186]
[-27.29556656 82.76144409]
[-15.75040817 93.90096283]
[-0.78912789 94.97803497]
[14.18242168 95.90144348]
[29.16266251 96.67110443]
[44.14290237 97.44076538]
[48.69019318 83.14663696]
[36.01867676 75.11963654]
[20.11305809 77.21505737]
[8.65821838 65.98268890]
[10.44133282 50.03903580]
[24.09454727 41.61470795]
[39.14428711 47.17213058]
[44.04567719 62.44812393]
[56.71718979 70.47512054]
[67.15966034 59.70595932]
[77.60121155 48.93776321]
[69.18779755 36.51944733]
[53.76811600 32.09080887]
[47.74987030 17.21934891]
[55.74974823 3.31318212]
[71.63092804 1.03992772]
[83.21072388 12.14343262]
[81.60611725 28.10603905]
[90.01952362 40.52435303]
[104.95553589 39.14032745]
[110.94383240 25.38749886]
[116.93212891 11.63466930]
[104.21806335 19.59409523]
[89.38184357 21.80465508]
[74.89966583 17.89740181]
[63.18864441 8.52446270]
[56.20337296 -4.74979639]
[55.10970306 -19.70987320]
[60.09017563 -33.85889816]
[70.31353760 -44.83536530]
[84.07348633 -50.80728149]
[99.07345581 -50.77792358]
[112.80992126 -44.75218201]
[122.99023438 -33.73577499]
[127.91528320 -19.56736183]
[126.76388550 -4.61454535]
[136.16773987 -16.30075455]
[145.57159424 -27.98696327]
[154.73353577 -39.86378479]
[163.64968872 -51.92621613]
[172.56584167 -63.98864746]
[181.48199463 -76.05107880]
[180.53407288 -92.06610870]
[192.55996704 -102.68483734]
[208.33442688 -99.76149750]
[215.75663757 -85.53862000]
[209.13291931 -70.92678070]
[193.54441833 -67.13492584]
[184.62826538 -55.07249832]
[175.71211243 -43.01006699]
[166.79595947 -30.94763565]
[166.61924744 -26.11876488]
[163.36566162 -21.36459541]
[157.25781250 -18.58310509]
[147.85395813 -6.89689684]
[138.45008850 4.78931189]
[130.68495178 17.62296486]
[124.69666290 31.37579536]
[118.70836639 45.12862396]
[140.48498535 78.44240570]
[132.59431458 108.79711151]
[147.57455444 109.56677246]
[162.55479431 110.33643341]
[177.53503418 111.10609436]
[192.51527405 111.87575531]
[207.49551392 112.64540863]
[222.47575378 113.41506958]
[238.60426331 108.18941498]
[248.09051514 122.24101257]
[237.21412659 135.24639893]
[221.70610046 128.39530945]
[206.72586060 127.62565613]
[191.74562073 126.85599518]
[176.76536560 126.08633423]
[161.78512573 125.31667328]
[146.80488586 124.54701233]
[131.82464600 123.77735138]
[120.73951721 133.88278198]
[120.12368774 148.87014771]
[119.50786591 163.85749817]
[118.89203644 178.84484863]
[118.27621460 193.83219910]
[132.85339355 197.58514404]
[146.32641602 204.28442383]
[158.10745239 213.63504028]
[167.68305969 225.22636414]
[174.63655090 238.55017090]
[178.66612244 253.02296448]
[179.59802246 268.01147461]
[177.39390564 282.86038208]
[172.15254211 296.92098999]
[164.10531616 309.57952881]
[153.60601807 320.28402710]
[141.11531067 328.56826782]
[127.18054199 334.07217407]
[112.41168213 336.55743408]
[111.79585266 351.54479980]
[111.18003082 366.53213501]
[110.56420135 381.51950073]
[109.94837952 396.50683594]
[109.33255005 411.49420166]
[108.71672821 426.48156738]
[108.10089874 441.46890259]
[107.48507690 456.45626831]
[106.86925507 471.44360352]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 152]
[4 151]
[5 150]
[6 149]
[7 148]
[8 147]
[9 146]
[10 145]
[11 144]
[12 143]
[26 129]
[27 128]
[28 127]
[29 126]
[30 125]
[32 47]
[33 46]
[34 45]
[36 44]
[37 43]
[48 56]
[49 55]
[58 66]
[59 65]
[67 106]
[68 105]
[69 104]
[83 103]
[84 102]
[85 101]
[86 98]
[87 97]
[88 96]
[89 95]
[108 124]
[109 123]
[110 122]
[111 121]
[112 120]
[113 119]
[114 118]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
