%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:59 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCAACUUAGUAUUAUACCCACACCCACCCAAGAACAGGGUUUGUUAAGAUGGCAGAGCCCGGxxxxxxxxxxAUUCUACUACUCACUCUCACUGCCCAAGAACUAUCAAACUCCUGAGCCAACAACUUAAUAUCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[115.56285095 271.60601807]
[114.94702911 256.61868286]
[114.33119965 241.63131714]
[113.71537781 226.64396667]
[113.09955597 211.65661621]
[112.48372650 196.66926575]
[111.86790466 181.68191528]
[111.25207520 166.69454956]
[108.64735413 151.92243958]
[104.10006714 137.62831116]
[99.55277252 123.33418274]
[93.54657745 122.42848969]
[87.97751617 120.00359344]
[83.22280121 116.22373962]
[69.66091156 122.63271332]
[56.09901047 129.04168701]
[46.00652695 144.40959167]
[28.60398102 142.36119080]
[15.17653275 149.04727173]
[16.60616684 164.15754700]
[12.47703457 178.76284790]
[3.34756589 190.88790894]
[-9.54755211 198.89292908]
[-24.46436119 201.69529724]
[-39.38548660 198.91600037]
[-52.29296494 190.93092346]
[-61.44117355 178.81999207]
[-65.59288025 164.22109985]
[-64.18661499 149.10862732]
[-57.41255188 135.52641296]
[-46.18683243 125.31134033]
[-32.02764130 119.84491730]
[-16.84989738 119.86642456]
[-2.70625997 125.37296295]
[8.49045753 135.61981201]
[21.91790581 128.93374634]
[26.08152580 117.53520966]
[37.26532364 111.87005615]
[49.69003677 115.47978973]
[63.25193405 109.07081604]
[76.81382751 102.66184235]
[78.96320343 89.89369965]
[87.58737946 80.23612213]
[100.03195953 76.66156006]
[104.87178040 62.46380615]
[109.71159363 48.26605225]
[114.55140686 34.06829834]
[119.24520874 19.82160759]
[123.79250336 5.52747726]
[128.33979797 -8.76665306]
[132.88708496 -23.06078339]
[137.43437195 -37.35491180]
[129.89509583 -48.56066895]
[130.20182800 -61.86807632]
[138.01715088 -72.40132904]
[150.29374695 -76.43089294]
[155.13356018 -90.62864685]
[152.26275635 -106.18721771]
[163.69276428 -115.73731995]
[167.94560242 -130.12179565]
[171.60430908 -144.66876221]
[175.26301575 -159.21571350]
[178.92172241 -173.76266479]
[182.58042908 -188.30961609]
[168.80094910 -194.32424927]
[156.19946289 -202.52500916]
[145.11973572 -212.68815613]
[135.86405945 -224.53645325]
[128.68490601 -237.74667358]
[123.77815247 -251.95840454]
[121.27763367 -266.78396606]
[121.25158691 -281.81890869]
[123.70071411 -296.65304565]
[128.55819702 -310.88171387]
[135.69152832 -324.11669922]
[144.90609741 -335.99700928]
[155.95053101 -346.19848633]
[168.52352905 -354.44287109]
[182.28208923 -360.50521851]
[196.85086060 -364.22012329]
[211.83239746 -365.48629761]
[226.81800842 -364.26916504]
[241.39886475 -360.60192871]
[255.17718506 -354.58465576]
[267.77709961 -346.38146973]
[278.85485840 -336.21618652]
[288.10824585 -324.36608887]
[295.28485107 -311.15451050]
[300.18887329 -296.94183350]
[302.68652344 -282.11578369]
[302.70968628 -267.08084106]
[300.25769043 -252.24717712]
[295.39749146 -238.01945496]
[288.26159668 -224.78581238]
[279.04473877 -212.90728760]
[267.99835205 -202.70793152]
[255.42375183 -194.46598816]
[241.66403198 -188.40629578]
[227.09454346 -184.69416809]
[212.11276245 -183.43089294]
[197.12738037 -184.65090942]
[193.46867371 -170.10395813]
[189.80996704 -155.55700684]
[186.15126038 -141.01005554]
[182.49255371 -126.46309662]
[183.87321472 -123.95614624]
[184.31239319 -120.73490906]
[183.52667236 -117.16708374]
[181.37527466 -113.71817017]
[177.89050293 -110.89750671]
[181.10748291 -96.35445404]
[169.33131409 -85.78883362]
[164.49150085 -71.59107971]
[172.55136108 -56.86214066]
[167.39178467 -40.53087234]
[151.72850037 -32.80762100]
[147.18121338 -18.51349258]
[142.63392639 -4.21936226]
[138.08662415 10.07476711]
[133.53933716 24.36889839]
[134.51466370 31.74188614]
[128.74916077 38.90811539]
[123.90934753 53.10586929]
[119.06952667 67.30361938]
[114.22971344 81.50137329]
[123.33723450 100.23960114]
[113.84690094 118.78688812]
[118.39419556 133.08102417]
[122.94148254 147.37515259]
[127.27084351 133.01351929]
[136.98246765 121.58177948]
[150.45544434 114.98793030]
[165.44111633 114.33249664]
[179.43833923 119.72486877]
[190.11094666 130.26504517]
[195.67765808 144.19386292]
[195.20938110 159.18655396]
[188.78425598 172.74079895]
[177.47467041 182.59439087]
[163.16821289 187.10272217]
[148.25263977 185.51335144]
[135.21743774 178.09155273]
[126.23942566 166.07873535]
[126.85525513 181.06608582]
[127.47107697 196.05343628]
[128.08689880 211.04078674]
[128.70272827 226.02813721]
[129.31855774 241.01550293]
[129.93438721 256.00283813]
[130.55020142 270.99020386]
[137.24172974 286.56774902]
[124.12535095 297.31005859]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 129]
[10 128]
[11 127]
[14 41]
[15 40]
[16 39]
[18 36]
[19 35]
[44 125]
[45 124]
[46 123]
[47 122]
[48 120]
[49 119]
[50 118]
[51 117]
[52 116]
[56 113]
[57 112]
[59 110]
[60 105]
[61 104]
[62 103]
[63 102]
[64 101]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
