%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:01 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGAGCAUACCCCCGAUUCCGCUACGACCAACUCAUACACCUCCUAUGAAAAAACUUCCUACCxxxxxxxxxxAUAGCAGGCAGUUGAGGUGGAUUAAACCAAACCCAGCUACGCAAAAUCUUAGCAUACUCCCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[178.11341858 418.24453735]
[178.11341858 403.24453735]
[178.11341858 388.24453735]
[178.11341858 373.24453735]
[178.11341858 358.24453735]
[178.11341858 343.24453735]
[178.11341858 328.24453735]
[178.11341858 313.24453735]
[178.11341858 298.24453735]
[178.11341858 283.24453735]
[174.71043396 268.63565063]
[168.08193970 255.17967224]
[161.45344543 241.72370911]
[146.78225708 244.67428589]
[131.83578491 243.72589111]
[117.63322449 238.93716431]
[105.14465332 230.62886047]
[95.22470093 219.36230469]
[88.55408478 205.90155029]
[85.59290314 191.16151428]
[86.54888916 176.14575195]
[91.36286926 161.87826538]
[99.71239471 149.33351135]
[111.03329468 139.36994934]
[104.40480042 125.91398621]
[89.87778473 124.25856018]
[78.48255920 115.09757996]
[64.25578308 119.85139465]
[51.14934158 130.60580444]
[37.18698502 120.98868561]
[42.56310272 104.90970612]
[59.50196838 105.62461090]
[73.72874451 100.87079620]
[76.42005157 88.38436127]
[84.67940521 78.64077759]
[79.77785492 64.46421814]
[74.87630463 50.28766251]
[63.05426788 39.77338409]
[66.20793152 25.21647263]
[61.30637741 11.03991413]
[56.40482712 -3.13664412]
[51.50327682 -17.31320190]
[45.70497513 -24.45684052]
[46.65055847 -31.83596802]
[42.04499435 -46.11142731]
[28.10796356 -58.10054779]
[32.38105011 -75.09291840]
[27.47949791 -89.26947784]
[22.57794762 -103.44603729]
[10.75591183 -113.96031189]
[13.90957260 -128.51722717]
[9.00802135 -142.69378662]
[4.10647106 -156.87034607]
[-0.79507989 -171.04690552]
[-7.84021473 -184.28948975]
[-16.85774422 -196.27632141]
[-25.87527466 -208.26315308]
[-41.49519348 -211.92344666]
[-48.24186325 -226.47892761]
[-40.93982315 -240.76387024]
[-25.19056702 -243.82009888]
[-13.07557964 -233.30313110]
[-13.88844204 -217.28068542]
[-4.87091208 -205.29385376]
[4.14661789 -193.30702209]
[3.11664867 -208.27162170]
[7.46534348 -222.62741089]
[16.62639236 -234.50491333]
[29.40679550 -242.35739136]
[44.14222336 -245.16223145]
[58.91375351 -242.55418396]
[71.79776001 -234.87287903]
[81.11642456 -223.11862183]
[85.65621185 -208.82211304]
[84.82594299 -193.84510803]
[78.73372650 -180.13800049]
[68.17292786 -169.48579407]
[54.51882553 -163.27566528]
[39.54953384 -162.31634521]
[25.21442795 -166.73275757]
[13.38147831 -175.94845581]
[18.28302956 -161.77189636]
[23.18457985 -147.59533691]
[28.08613014 -133.41877747]
[39.55757523 -123.91850281]
[36.75450516 -108.34758759]
[41.65605545 -94.17102814]
[46.55760574 -79.99446869]
[57.32657242 -74.39655304]
[61.50354004 -62.57403564]
[56.32045364 -50.71699142]
[60.92602158 -36.44153214]
[65.67983246 -22.21475220]
[70.58138275 -8.03819466]
[75.48293304 6.13836336]
[80.38448334 20.31492233]
[91.85593414 29.81519699]
[89.05286407 45.38611221]
[93.95441437 59.56267166]
[98.85596466 73.73922729]
[114.09551239 77.81321716]
[124.25856018 89.87778473]
[125.68487549 105.58787537]
[117.86076355 119.28549194]
[124.48926544 132.74145508]
[139.28813171 129.83822632]
[154.32254028 130.86390686]
[168.56805420 135.74256897]
[181.05554199 144.13597107]
[190.93713379 155.46697998]
[197.54376221 168.95925903]
[200.43046570 183.69042969]
[199.40635681 198.65518188]
[194.54724121 212.83380127]
[186.19004822 225.26174927]
[174.90940857 235.09521484]
[181.53790283 248.55117798]
[188.16641235 262.00714111]
[189.46815491 247.06373596]
[194.52394104 232.94143677]
[203.00193787 220.56712341]
[214.34571838 210.75292969]
[227.81079102 204.14294434]
[242.51342773 201.17102051]
[257.48867798 202.03218079]
[271.75372314 206.66992188]
[284.37231445 214.77986145]
[294.51629639 225.82972717]
[301.51992798 239.09432983]
[304.92349243 253.70307922]
[304.50366211 268.69720459]
[300.28799438 283.09262085]
[292.55316162 295.94454956]
[281.80676270 306.40951538]
[268.75418091 313.80065918]
[254.25196838 317.63296509]
[239.25198364 317.65484619]
[224.73867798 313.86489868]
[211.66455078 306.51184082]
[200.88769531 296.07827759]
[193.11341858 283.24453735]
[193.11341858 298.24453735]
[193.11341858 313.24453735]
[193.11341858 328.24453735]
[193.11341858 343.24453735]
[193.11341858 358.24453735]
[193.11341858 373.24453735]
[193.11341858 388.24453735]
[193.11341858 403.24453735]
[193.11341858 418.24453735]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[11 118]
[12 117]
[13 116]
[24 105]
[25 104]
[27 33]
[28 32]
[35 100]
[36 99]
[37 98]
[39 96]
[40 95]
[41 94]
[42 93]
[44 92]
[45 91]
[47 88]
[48 87]
[49 86]
[51 84]
[52 83]
[53 82]
[54 81]
[55 65]
[56 64]
[57 63]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
