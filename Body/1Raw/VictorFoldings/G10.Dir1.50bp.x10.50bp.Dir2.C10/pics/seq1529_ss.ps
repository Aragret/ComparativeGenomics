%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:00 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGUCCCUCUAGAGGAGCCUGUUCUGUAAUCGAUAAACCCCGAUCAACCUCACCACCUCUUGCxxxxxxxxxxAUAUCACUCUCCUACUUACAGGACUCAACAUACUAGUCACAGCCCUAUACUCCCUCUACACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[109.37509155 493.32797241]
[109.37509155 478.32797241]
[109.37509155 463.32797241]
[109.37509155 448.32797241]
[109.37509155 433.32797241]
[109.37509155 418.32797241]
[109.37509155 403.32797241]
[109.37509155 388.32797241]
[109.37509155 373.32797241]
[109.37509155 358.32797241]
[92.00899506 352.02996826]
[78.30671692 339.59252930]
[70.33363342 322.85723877]
[69.30410004 304.31591797]
[75.39657593 286.73962402]
[87.72325897 272.76461792]
[104.45936584 264.49673462]
[102.90177917 249.57783508]
[93.88472748 237.72279358]
[100.14720917 223.19378662]
[98.58962250 208.27487183]
[97.03204346 193.35595703]
[93.18449402 186.98869324]
[95.60056305 178.11094666]
[94.35369110 163.16285706]
[90.63944244 156.71693420]
[93.23967743 147.89137268]
[92.30404663 132.92057800]
[91.36841583 117.94978333]
[81.87095642 103.82487488]
[86.96570587 88.87113190]
[81.18943787 75.02790833]
[75.41316223 61.18469238]
[69.63688660 47.34147644]
[63.86061859 33.49826050]
[58.08434677 19.65504074]
[43.70787811 23.98184586]
[28.96271896 26.80749512]
[14.00517273 28.10203171]
[-1.00620258 27.85173607]
[-15.91227722 26.05925751]
[-30.55503845 22.74360085]
[-44.77926254 17.93991280]
[-58.43416977 11.69911575]
[-71.37500763 4.08736467]
[-83.46459961 -4.81465149]
[-94.57477570 -14.91256618]
[-104.58778381 -26.09933662]
[-113.39746094 -38.25637436]
[-120.91043091 -51.25481033]
[-127.04704285 -64.95685577]
[-131.74224854 -79.21725464]
[-134.94628906 -93.88484192]
[-136.62518311 -108.80413818]
[-136.76113892 -123.81698608]
[-135.35272217 -138.76423645]
[-132.41484070 -153.48744202]
[-127.97866821 -167.83053589]
[-122.09120941 -181.64147949]
[-114.81488800 -194.77384949]
[-106.22682190 -207.08843994]
[-96.41806030 -218.45471191]
[-85.49257660 -228.75218201]
[-73.56619263 -237.87168884]
[-60.76533127 -245.71655273]
[-47.22568893 -252.20362854]
[-33.09079361 -257.26412964]
[-18.51048279 -260.84445190]
[-3.63931584 -262.90658569]
[11.36506367 -263.42871094]
[26.34360313 -262.40527344]
[41.13751984 -259.84713745]
[55.58998871 -255.78138733]
[69.54780579 -250.25117493]
[82.86301422 -243.31509399]
[95.39446259 -235.04666138]
[107.00930786 -225.53353882]
[117.58442688 -214.87658691]
[127.00772858 -203.18875122]
[135.17930603 -190.59393311]
[142.01254272 -177.22564697]
[147.43499756 -163.22561646]
[151.38919067 -148.74223328]
[153.83320618 -133.92904663]
[154.74114990 -118.94305420]
[154.10337830 -103.94314575]
[151.92666626 -89.08831787]
[148.23406982 -74.53604126]
[143.06474304 -60.44057465]
[136.47349548 -46.95134354]
[128.53018188 -34.21133804]
[119.31900787 -22.35560799]
[108.93761444 -11.50983238]
[97.49606323 -1.78898323]
[85.11563110 6.70389366]
[71.92756653 13.87876892]
[77.70383453 27.72198677]
[83.48011017 41.56520462]
[89.25637817 55.40842056]
[95.03265381 69.25164032]
[100.80892181 83.09485626]
[113.82523346 90.54976654]
[128.68827820 88.52743530]
[143.55133057 86.50509644]
[158.41438293 84.48276520]
[164.83576965 70.45531464]
[177.83390808 62.14558411]
[193.26115417 62.20517349]
[206.19473267 70.61506653]
[212.50756836 84.69170380]
[210.18525696 99.94327545]
[199.96885681 111.50306702]
[185.11837769 115.68238068]
[170.37254333 111.14762115]
[160.43670654 99.34580994]
[145.57366943 101.36814880]
[130.71061707 103.39048004]
[115.84757233 105.41281128]
[106.33921051 117.01415253]
[107.27484131 131.98493958]
[108.21046448 146.95573425]
[109.30178070 161.91598511]
[110.54865265 176.86407471]
[111.95095825 191.79838562]
[113.50853729 206.71730042]
[115.06611633 221.63619995]
[124.19458771 234.55834961]
[117.82069397 248.02024841]
[119.37827301 262.93914795]
[130.96202087 265.02447510]
[141.68640137 269.84521484]
[150.91671753 277.10977173]
[158.10820007 286.38208008]
[162.83821106 297.10778809]
[164.83102417 308.64746094]
[163.97395325 320.31460571]
[160.32362366 331.41656494]
[154.10237122 341.29568481]
[145.68460083 349.36813354]
[135.57437134 355.15853882]
[124.37509155 358.32797241]
[124.37509155 373.32797241]
[124.37509155 388.32797241]
[124.37509155 403.32797241]
[124.37509155 418.32797241]
[124.37509155 433.32797241]
[124.37509155 448.32797241]
[124.37509155 463.32797241]
[124.37509155 478.32797241]
[124.37509155 493.32797241]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[17 129]
[18 128]
[20 126]
[21 125]
[22 124]
[24 123]
[25 122]
[27 121]
[28 120]
[29 119]
[31 101]
[32 100]
[33 99]
[34 98]
[35 97]
[36 96]
[102 118]
[103 117]
[104 116]
[105 115]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
