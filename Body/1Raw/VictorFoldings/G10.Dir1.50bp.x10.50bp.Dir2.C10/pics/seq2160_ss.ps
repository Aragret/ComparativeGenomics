%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:04 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCUACCUAAGAACAGCUAAAAGAGCACACCCGUCUAUGUAGCAAAAUAGUGGGAAGAUUUAUxxxxxxxxxxUAGGCCUAAAAGCAGCCACCAAUUAAGAAAGCGUUCAAGCUCAACACCCACUACCUAAAAACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[170.90786743 500.47488403]
[170.90786743 485.47488403]
[170.90786743 470.47488403]
[170.90786743 455.47488403]
[170.90786743 440.47488403]
[170.90786743 425.47488403]
[170.90786743 410.47488403]
[170.90786743 395.47488403]
[170.90786743 380.47488403]
[170.90786743 365.47488403]
[147.96966553 355.98986816]
[132.26020813 336.70172119]
[127.59378052 312.21203613]
[135.14212036 288.39508057]
[153.14080811 270.98861694]
[147.72218323 257.00155640]
[136.75645447 251.80395508]
[132.14736938 240.14515686]
[136.88812256 228.10650635]
[131.75781250 214.01112366]
[126.62751007 199.91572571]
[121.49720764 185.82034302]
[116.22158051 180.57821655]
[116.40952301 171.38253784]
[111.56970978 157.18478394]
[106.72988892 142.98703003]
[96.15257263 143.34020996]
[85.80287170 141.12928772]
[76.29310608 136.48506165]
[68.18589020 129.68229675]
[61.96086884 121.12346649]
[57.98632431 111.31492615]
[56.49740219 100.83696747]
[41.67491913 98.53609467]
[26.82959747 96.38751221]
[11.96299839 94.39145660]
[-2.90360022 92.39540100]
[-13.51585674 103.71616364]
[-28.76183128 106.60404968]
[-42.77913284 99.94861603]
[-50.17782974 86.30900574]
[-48.11296463 70.92993164]
[-37.37852478 59.72496033]
[-22.10211754 57.00262833]
[-8.15783882 63.80973434]
[-0.90754330 77.52880096]
[13.95905495 79.52485657]
[28.82565498 81.52091980]
[35.91726685 79.28011322]
[43.97579575 83.71361542]
[58.79827499 86.01448822]
[67.43453979 71.14402771]
[81.15754700 60.78089142]
[97.82376099 56.54380798]
[99.66708374 41.65750122]
[101.51041412 26.77119446]
[93.92892456 10.02151489]
[104.97203064 -3.58342743]
[106.50932312 -18.50444412]
[108.04660797 -33.42546082]
[109.58390045 -48.34647751]
[99.91822815 -57.77963257]
[97.50522614 -70.87003326]
[103.00871277 -82.77550507]
[114.20581818 -89.22353363]
[108.22304535 -103.86993408]
[117.46573639 -115.54991150]
[119.30905914 -130.43621826]
[121.15238190 -145.32252502]
[107.28609467 -151.31442261]
[95.67048645 -160.97125244]
[87.24718475 -173.51017761]
[82.69902039 -187.91471863]
[82.39469147 -203.01718140]
[86.35887909 -217.59324646]
[94.27021790 -230.46131897]
[105.48737335 -240.57824707]
[119.10102081 -247.12388611]
[134.00755310 -249.56761169]
[148.99858093 -247.71131897]
[162.85884094 -241.70549011]
[174.46473694 -232.03700256]
[182.87544250 -219.48962402]
[187.40913391 -205.08052063]
[187.69828796 -189.97776794]
[183.71946716 -175.40568542]
[175.79519653 -162.54556274]
[164.56788635 -152.43991089]
[150.94767761 -145.90795898]
[136.03869629 -143.47920227]
[134.19537354 -128.59289551]
[132.35203552 -113.70658875]
[138.46665955 -100.12496185]
[129.09213257 -87.38021088]
[139.98580933 -74.60402679]
[138.26445007 -57.56382751]
[124.50492096 -46.80918503]
[122.96762848 -31.88816833]
[121.43033600 -16.96715164]
[119.89304352 -2.04613495]
[127.29405975 7.57088709]
[126.09498596 20.05021286]
[116.39672089 28.61451721]
[114.55339050 43.50082397]
[112.71006775 58.38713455]
[127.59538269 66.35967255]
[138.32450867 79.39883423]
[143.28153992 95.54076385]
[141.71987915 112.35430145]
[133.87472534 127.30714417]
[120.92764282 138.14721680]
[125.76746368 152.34497070]
[130.60728455 166.54272461]
[135.59260559 180.69003296]
[140.72290039 194.78543091]
[145.85321045 208.88081360]
[150.98350525 222.97621155]
[165.35462952 234.44360352]
[161.70927429 251.58291626]
[167.12789917 265.57000732]
[174.18980408 264.50881958]
[181.32733154 264.44198608]
[188.40119934 265.36993408]
[195.27354431 267.27355957]
[201.81051636 270.11483765]
[207.88496399 273.83752441]
[213.37884521 278.36813354]
[218.18559265 283.61758423]
[222.21209717 289.48281860]
[225.38058472 295.84887695]
[227.63006592 302.59112549]
[228.91754150 309.57772827]
[229.21882629 316.67224121]
[228.52897644 323.73617554]
[226.86236572 330.63180542]
[224.25242615 337.22485352]
[220.75094604 343.38696289]
[216.42707825 348.99844360]
[211.36587524 353.95034790]
[205.66677856 358.14672852]
[199.44151306 361.50650024]
[192.81198120 363.96490479]
[185.90786743 365.47488403]
[185.90786743 380.47488403]
[185.90786743 395.47488403]
[185.90786743 410.47488403]
[185.90786743 425.47488403]
[185.90786743 440.47488403]
[185.90786743 455.47488403]
[185.90786743 470.47488403]
[185.90786743 485.47488403]
[185.90786743 500.47488403]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 152]
[2 151]
[3 150]
[4 149]
[5 148]
[6 147]
[7 146]
[8 145]
[9 144]
[10 143]
[15 120]
[16 119]
[19 117]
[20 116]
[21 115]
[22 114]
[24 113]
[25 112]
[26 111]
[33 51]
[34 50]
[35 48]
[36 47]
[37 46]
[54 105]
[55 104]
[56 103]
[58 100]
[59 99]
[60 98]
[61 97]
[65 94]
[67 92]
[68 91]
[69 90]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
