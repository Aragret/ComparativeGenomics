%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:13 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCUCCGGCCUAGCCAUGUGAUUUCACUUCCACUCCAUAACGCUCCUCAUACUAGGCCUACUAACxxxxxxxxxxAUUACCUCAGAAGUUUUUUUCUUCGCAGGAUUUUUCUGAGCCUUUUACCACUCCAGCCUAGCCCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[168.36991882 285.95510864]
[167.76977539 270.96713257]
[167.16963196 255.97914124]
[166.56948853 240.99114990]
[165.96934509 226.00315857]
[165.36920166 211.01516724]
[164.76905823 196.02717590]
[164.16891479 181.03918457]
[160.45600891 166.50598145]
[153.79365540 153.06674194]
[147.13128662 139.62750244]
[140.46893311 126.18827820]
[133.80657959 112.74903870]
[98.21871185 130.89274597]
[75.01441956 106.25843811]
[60.03318024 105.50836945]
[45.05194473 104.75830078]
[30.07071114 104.00823212]
[15.08947659 103.25817108]
[0.10824192 102.50810242]
[-14.87299252 101.75803375]
[-24.97732162 109.83328247]
[-37.47315598 108.86688995]
[-45.67213058 99.92528534]
[-60.63535690 98.87561035]
[-75.59858704 97.82593536]
[-79.64821625 112.32370758]
[-86.53364563 125.70936584]
[-95.97290802 137.43476868]
[-107.57947540 147.01977539]
[-120.87807465 154.07189941]
[-135.32411194 158.30233765]
[-150.32606506 159.53785706]
[-165.26959229 157.72789001]
[-179.54275513 152.94653320]
[-192.56111145 145.38957214]
[-203.79153442 135.36647034]
[-212.77415466 123.28767395]
[-219.14114380 109.64779663]
[-222.63177490 95.00538635]
[-223.10311890 79.96002960]
[-220.53585815 65.12783051]
[-215.03514099 51.11616135]
[-206.82618713 38.49878693]
[-196.24517822 27.79238319]
[-183.72538757 19.43537140]
[-169.77949524 13.76996326]
[-154.97856140 11.02815628]
[-139.92869568 11.32222366]
[-125.24617767 14.64012432]
[-111.53224182 20.84599304]
[-99.34846497 29.68570137]
[-89.19376373 40.79727173]
[-81.48397064 53.72568893]
[-76.53479767 67.94154358]
[-74.54891205 82.86270905]
[-59.58568192 83.91238403]
[-44.62245560 84.96205902]
[-29.31875420 76.42232513]
[-14.12292576 86.77679443]
[0.85830939 87.52686310]
[15.83954430 88.27693176]
[30.82077980 89.02700043]
[45.80201340 89.77706909]
[60.78324890 90.52713776]
[75.76448059 91.27720642]
[79.18046570 80.75648499]
[87.26595306 71.79754639]
[99.21119690 66.47193146]
[113.30338287 66.40769958]
[113.30338287 51.40769958]
[113.30338287 36.40769958]
[99.52951050 29.83173561]
[89.97958374 17.92536354]
[86.54975128 3.05260539]
[89.92098999 -11.83354473]
[99.42395782 -23.77742958]
[113.17182159 -30.40758324]
[128.43493652 -30.40758324]
[142.18280029 -23.77742958]
[151.68577576 -11.83354473]
[155.05702209 3.05260539]
[151.62718201 17.92536354]
[142.07725525 29.83173561]
[128.30337524 36.40769958]
[128.30337524 51.40769958]
[128.30337524 66.40769958]
[141.93650818 72.66373444]
[153.30841064 62.88212967]
[164.68031311 53.10052872]
[166.01623535 37.58108521]
[177.68829346 27.82314682]
[192.47547913 29.19237518]
[203.84739685 19.41077232]
[215.21929932 9.62917042]
[226.59120178 -0.15243168]
[226.21908569 -15.78558636]
[236.02314758 -27.96813011]
[251.37420654 -30.94783783]
[265.02398682 -23.31778145]
[270.52746582 -8.68064213]
[265.28604126 6.05237103]
[251.77459717 13.92478085]
[236.37280273 11.21947479]
[225.00090027 21.00107765]
[213.62899780 30.78268051]
[202.25708008 40.56428146]
[201.40003967 55.38997269]
[190.00665283 65.47190094]
[174.46191406 64.47243500]
[163.09001160 74.25403595]
[151.71810913 84.03563690]
[163.96302795 75.37181091]
[178.96029663 75.08524323]
[191.52725220 83.27495575]
[197.32112122 97.11082458]
[194.33969116 111.81153870]
[183.61326599 122.29694366]
[168.84860229 124.94358063]
[155.14794922 118.83683014]
[147.24580383 106.08668518]
[153.90817261 119.52591705]
[160.57052612 132.96514893]
[167.23287964 146.40438843]
[173.89523315 159.84361267]
[175.01437378 144.88542175]
[180.05833435 130.75891113]
[188.66630554 118.47466278]
[200.22248840 108.91146851]
[213.90017700 102.75345612]
[228.72087097 100.44116974]
[243.62435913 102.14001465]
[257.54446411 107.72846222]
[269.48538208 116.80672455]
[278.59283447 128.72537231]
[284.21533203 142.63174438]
[285.95068359 157.53103638]
[283.67468262 172.35734558]
[277.55017090 186.05006409]
[268.01528931 197.62962341]
[255.75215149 206.26763916]
[241.63801575 211.34617615]
[226.68261719 212.50192261]
[211.95579529 209.65219116]
[198.51110840 203.00085449]
[187.31034851 193.02374268]
[179.15689087 180.43904114]
[179.75704956 195.42703247]
[180.35719299 210.41502380]
[180.95733643 225.40301514]
[181.55747986 240.39100647]
[182.15762329 255.37899780]
[182.75776672 270.36697388]
[183.35791016 285.35498047]
[190.03312683 300.93951416]
[176.90551758 311.66809082]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 154]
[2 153]
[3 152]
[4 151]
[5 150]
[6 149]
[7 148]
[8 147]
[9 125]
[10 124]
[11 123]
[12 122]
[13 121]
[15 66]
[16 65]
[17 64]
[18 63]
[19 62]
[20 61]
[21 60]
[24 58]
[25 57]
[26 56]
[70 87]
[71 86]
[72 85]
[88 112]
[89 111]
[90 110]
[93 107]
[94 106]
[95 105]
[96 104]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
