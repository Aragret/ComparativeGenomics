%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:40 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCCCUAAACCUCAACAGUUAAAUCAACAAAACUGCUCGCCAGAACACUACGAGCCACAGCUxxxxxxxxxxUUGAGAAGCCUUCGCUUCGAAGCGAAAAGUCCUAAUAGUAGAAGAACCCUCCAUAAACCUCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[43.32204437 595.95550537]
[43.32204437 580.95550537]
[43.32204437 565.95550537]
[43.32204437 550.95550537]
[43.32204437 535.95550537]
[43.32204437 520.95550537]
[43.32204437 505.95547485]
[43.32204437 490.95547485]
[43.32204437 475.95547485]
[43.32204437 460.95547485]
[29.37508202 458.26873779]
[16.16497612 453.03890991]
[4.15122414 445.44616699]
[-6.24797153 435.75292969]
[-14.67026234 424.29476929]
[-20.82177925 411.46884155]
[-24.48738480 397.71997070]
[-25.53820229 383.52539062]
[-23.93613625 369.37808228]
[-19.73526001 355.76974487]
[-13.07999134 343.17355347]
[-4.20012093 332.02783203]
[6.59711361 322.72079468]
[18.93766212 315.57696533]
[32.39361572 310.84588623]
[46.49805450 308.69338989]
[47.12203217 293.70639038]
[47.74600601 278.71936035]
[37.75745392 270.52026367]
[34.28265762 257.87112427]
[38.81343079 245.35314941]
[49.89914322 237.63533020]
[50.83477020 222.66453552]
[43.90640259 209.47943115]
[52.48942566 196.18875122]
[53.42505264 181.21795654]
[45.64225006 171.90478516]
[46.34007645 159.38551331]
[55.68941879 150.43879700]
[56.15745926 135.44610596]
[55.84540176 120.44934845]
[55.53334808 105.45259857]
[48.62635040 92.13743591]
[36.54636002 83.24508667]
[24.46637154 74.35273743]
[12.38638401 65.46038818]
[0.30639556 56.56803894]
[-12.58206940 57.72620392]
[-22.47138786 50.01774597]
[-24.36783409 38.02980042]
[-36.26021576 28.88806534]
[-52.57944107 27.27102089]
[-59.09120941 12.22014332]
[-49.09676361 -0.78151613]
[-32.87754059 1.64103639]
[-27.11848068 16.99568558]
[-15.22610092 26.13742065]
[2.24457765 27.46984291]
[9.19874477 44.48805237]
[21.27873421 53.38040161]
[33.35872269 62.27275085]
[45.43870926 71.16510010]
[57.51869965 80.05744934]
[64.40988922 77.09747314]
[58.49015427 63.31499100]
[72.27273560 57.39548492]
[78.19226837 71.17750549]
[85.08345795 68.21752167]
[86.95107269 53.33424377]
[88.81868744 38.45096588]
[75.31951904 31.55543709]
[64.99513245 20.45665932]
[59.09225082 6.49486303]
[58.32366943 -8.64399719]
[62.78219986 -23.13183022]
[71.92945099 -35.21915817]
[84.66085815 -43.44638062]
[99.43903351 -46.82001877]
[114.47943878 -44.93268967]
[127.96587372 -38.01229477]
[138.26979065 -26.89451027]
[144.14692688 -12.92185974]
[144.88761902 2.21839070]
[140.40238953 16.69798279]
[131.23287964 28.76843452]
[118.48632812 36.97217941]
[103.70196533 40.31857681]
[101.83435059 55.20185852]
[99.96674347 70.08513641]
[106.74797058 76.35527802]
[110.18488312 83.65010834]
[122.44725037 75.01099396]
[134.70962524 66.37187195]
[146.97198486 57.73275757]
[159.23435974 49.09364319]
[171.49671936 40.45452881]
[177.88952637 25.35273552]
[194.19549561 23.60697556]
[203.64042664 37.01313400]
[196.50820923 51.78010559]
[180.13584900 52.71689606]
[167.87347412 61.35601044]
[155.61109924 69.99512482]
[143.34873962 78.63424683]
[131.08636475 87.27336121]
[118.82399750 95.91247559]
[104.72251129 124.13101959]
[70.53009796 105.14054108]
[70.84215546 120.13729095]
[71.15421295 135.13404846]
[83.47950745 126.58493805]
[97.90791321 130.68627930]
[103.89344788 144.44030762]
[97.06115723 157.79396057]
[82.40489960 160.98677063]
[70.63750458 151.68566895]
[78.88289642 168.11714172]
[68.39584351 182.15357971]
[67.46022034 197.12437439]
[74.32166290 211.38029480]
[65.80556488 223.60017395]
[64.86993408 238.57095337]
[76.67470551 251.43893433]
[75.57476044 268.52911377]
[62.73302460 279.34335327]
[62.10904694 294.33035278]
[61.48506927 309.31738281]
[76.85747528 313.16192627]
[91.10405731 320.08682251]
[103.61529541 329.79330444]
[113.85645294 341.86361694]
[121.39038849 355.77914429]
[125.89622498 370.94247437]
[127.18304443 386.70324707]
[125.19793701 402.38586426]
[120.02819061 417.31860352]
[111.89744568 430.86230469]
[101.15605164 442.43777466]
[88.26592255 451.55050659]
[73.78072357 457.81182861]
[58.32204437 460.95547485]
[58.32204437 475.95547485]
[58.32204437 490.95547485]
[58.32204437 505.95547485]
[58.32204437 520.95550537]
[58.32204437 535.95550537]
[58.32204437 550.95550537]
[58.32204437 565.95550537]
[58.32204437 580.95550537]
[58.32204437 595.95550537]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[26 127]
[27 126]
[28 125]
[32 122]
[33 121]
[35 119]
[36 118]
[39 116]
[40 110]
[41 109]
[42 108]
[43 63]
[44 62]
[45 61]
[46 60]
[47 59]
[50 57]
[51 56]
[68 89]
[69 88]
[70 87]
[91 106]
[92 105]
[93 104]
[94 103]
[95 102]
[96 101]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
