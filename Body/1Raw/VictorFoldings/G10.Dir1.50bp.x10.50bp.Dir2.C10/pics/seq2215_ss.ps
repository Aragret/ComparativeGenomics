%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:05 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGUCAACUUUAAAUUUGCCCACAGAACCCUCUAAAUCCCCUUGUAAAUUUAACUGUUAGUCCxxxxxxxxxxUCUUAAUUUAACUAUUUAUAUUAUCCUAACUACUACCGCAUUCCUACUACUCAACUUAAACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[90.97969055 252.29554749]
[90.97969055 237.29554749]
[90.97969055 222.29554749]
[90.97969055 207.29554749]
[90.97969055 192.29554749]
[90.97969055 177.29554749]
[90.97969055 162.29554749]
[90.97969055 147.29554749]
[90.97969055 132.29554749]
[90.97969055 117.29554749]
[89.80466461 112.76999664]
[89.95748138 108.52793121]
[91.26947021 104.89492035]
[76.28975677 104.11507416]
[61.31003952 103.33522797]
[45.14384842 112.08931732]
[30.78701782 102.04534149]
[15.79432106 101.57730103]
[0.80162537 101.10926056]
[-14.19107056 100.64122009]
[-29.18376732 100.17317963]
[-44.17646408 99.70513153]
[-59.16915894 99.23709106]
[-74.16185760 98.76905060]
[-78.03436279 101.04175568]
[-82.02582550 101.84127045]
[-85.64624023 101.31736755]
[-88.50816345 99.76708221]
[-90.36675262 97.58694458]
[-105.26865387 95.87425232]
[-120.17055511 94.16156769]
[-126.44094086 107.92882538]
[-136.66024780 119.08324432]
[-149.82728577 126.53202820]
[-164.65208435 129.54541016]
[-179.68226624 127.82817841]
[-193.44531250 121.54857635]
[-204.59288025 111.32180023]
[-212.03283691 98.14977264]
[-215.03628540 83.32295990]
[-213.30899048 68.29393005]
[-207.02015686 54.53508759]
[-196.78591919 43.39437485]
[-183.60891724 35.96324539]
[-168.78009033 32.96973038]
[-153.75222778 34.70709991]
[-139.99758911 41.00514984]
[-128.86373901 51.24685287]
[-121.44144440 64.42883301]
[-118.45786285 79.25966644]
[-103.55596161 80.97235107]
[-88.65406036 82.68504333]
[-73.69380951 83.77635193]
[-58.70111847 84.24439240]
[-43.70841980 84.71244049]
[-28.71572495 85.18048096]
[-13.72302818 85.64852142]
[1.26966751 86.11656189]
[16.26236343 86.58460999]
[31.25506020 87.05265045]
[40.32085800 78.98303986]
[52.85580444 79.28988647]
[62.08988571 88.35551453]
[77.06960297 89.13536072]
[92.04931641 89.91520691]
[106.32477570 85.30963898]
[118.02439880 75.92247772]
[129.72402954 66.53531647]
[121.62524414 53.89245605]
[114.91622925 40.46036148]
[109.67298126 26.39122772]
[105.95492554 11.84447002]
[103.80419159 -3.01508594]
[103.24513245 -18.01906967]
[104.28409576 -32.99747849]
[106.90930176 -47.78058624]
[111.09101105 -62.20090103]
[116.78184509 -76.09501648]
[123.91730499 -89.30551910]
[132.41656494 -101.68270111]
[142.18330383 -113.08634186]
[153.10685730 -123.38721466]
[165.06346130 -132.46861267]
[177.91763306 -140.22761536]
[191.52374268 -146.57633972]
[205.72758484 -151.44282532]
[220.36825562 -154.77194214]
[235.27984619 -156.52595520]
[250.29339600 -156.68501282]
[265.23880005 -155.24729919]
[279.94671631 -152.22911072]
[294.25045776 -147.66462708]
[307.98800659 -141.60559082]
[321.00369263 -134.12065125]
[333.14999390 -125.29460144]
[344.28933716 -115.22746277]
[354.29547119 -104.03330231]
[363.05505371 -91.83895874]
[370.46878052 -78.78259277]
[376.45269775 -65.01216125]
[380.93896484 -50.68367386]
[383.87680054 -35.95949936]
[385.23284912 -21.00646591]
[384.99179077 -5.99400473]
[383.15634155 8.90778160]
[379.74728394 23.53004456]
[374.80328369 37.70709991]
[368.38034058 51.27831650]
[360.55123901 64.08992004]
[351.40466309 75.99674225]
[341.04428101 86.86386871]
[329.58746338 96.56816864]
[317.16403198 104.99968719]
[303.91476440 112.06288910]
[289.98977661 117.67774200]
[275.54684448 121.78061676]
[260.74960327 124.32504272]
[245.76574707 125.28217316]
[230.76504517 124.64116669]
[215.91744995 122.40928650]
[201.39122009 118.61183167]
[187.35093689 113.29181671]
[173.95568848 106.50952911]
[161.35725403 98.34181213]
[149.69837952 88.88121796]
[139.11119080 78.23493958]
[127.41156006 87.62210083]
[115.71193695 97.00926208]
[128.26647949 88.80051422]
[143.10644531 86.61526489]
[157.49432373 90.85662842]
[168.77595520 100.74220276]
[174.87025452 114.44838715]
[174.65298462 129.44682312]
[168.16423035 142.97071838]
[156.60096741 152.52536011]
[142.09626770 156.34817505]
[127.32582855 153.73397827]
[115.01433563 145.16500854]
[107.43289948 132.22198486]
[105.97969055 117.29554749]
[105.97969055 132.29554749]
[105.97969055 147.29554749]
[105.97969055 162.29554749]
[105.97969055 177.29554749]
[105.97969055 192.29554749]
[105.97969055 207.29554749]
[105.97969055 222.29554749]
[105.97969055 237.29554749]
[105.97969055 252.29554749]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[13 65]
[14 64]
[15 63]
[17 60]
[18 59]
[19 58]
[20 57]
[21 56]
[22 55]
[23 54]
[24 53]
[29 52]
[30 51]
[31 50]
[66 128]
[67 127]
[68 126]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
