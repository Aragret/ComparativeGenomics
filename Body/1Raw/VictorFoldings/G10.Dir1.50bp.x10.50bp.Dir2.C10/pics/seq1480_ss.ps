%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:23 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGACAGCUUAAAACUCAAAGGACCUGGCGGUGCUUCAUAUCCCUCUAGAGGAGCCUGUUCUGxxxxxxxxxxGCAAGGAGAGCCAAAGCUAAGACCCCCGAAACCAGACGAGCUACCUAAGAACAGCUAAAACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[86.85398102 451.24752808]
[86.85398102 436.24752808]
[86.85398102 421.24752808]
[86.85398102 406.24752808]
[86.85398102 391.24752808]
[86.85398102 376.24752808]
[86.85398102 361.24752808]
[86.85398102 346.24752808]
[86.85398102 331.24752808]
[86.85398102 316.24752808]
[72.81710815 313.70053101]
[59.44145966 308.72906494]
[47.14242172 301.48614502]
[36.30218124 292.19543457]
[27.25784683 281.14413452]
[20.29096985 268.67431641]
[15.61877918 255.17222595]
[13.38740826 241.05628967]
[13.66732407 226.76422119]
[16.45110321 212.73944092]
[21.65361977 199.41725159]
[29.11465645 187.21141052]
[38.60382462 176.50123596]
[49.82769394 167.61981201]
[62.43885422 160.84364319]
[76.04666901 156.38406372]
[90.22939301 154.38061523]
[90.85337067 139.39360046]
[91.47734833 124.40658569]
[80.85789490 117.37517548]
[74.88460541 106.12647247]
[75.00730133 93.39075470]
[81.19622040 82.25923157]
[73.74131012 69.24292755]
[66.28639984 56.22661591]
[58.83148956 43.21030426]
[43.84460068 38.96401978]
[36.46968460 25.65743446]
[40.61022568 11.39589500]
[27.03755188 3.26613259]
[27.42624664 -11.62339973]
[19.97133636 -24.63970947]
[12.51642609 -37.65601730]
[8.30999184 -34.71659470]
[2.92322087 -32.91341400]
[-3.32189488 -32.60871506]
[-10.00518894 -34.07313156]
[-16.63394547 -37.46108246]
[-28.33357048 -46.84824371]
[-40.03319168 -56.23540497]
[-55.33351517 -53.00520325]
[-69.10616302 -60.41115189]
[-74.84812164 -74.95639038]
[-69.84821320 -89.77310181]
[-56.46723175 -97.86528015]
[-41.02328110 -95.41206360]
[-30.80851173 -83.57176971]
[-30.64603233 -67.93502808]
[-18.94640732 -58.54786682]
[-7.24678421 -49.16070557]
[5.69127178 -56.75061417]
[3.20615315 -71.54331970]
[-11.75973320 -73.75181580]
[-25.30977249 -80.47874451]
[-36.11647034 -91.06507874]
[-43.12109756 -104.47367096]
[-45.63741302 -119.39089203]
[-43.41889191 -134.35528564]
[-36.68288422 -147.90081787]
[-26.08930969 -158.70042419]
[-12.67602634 -165.69606018]
[2.24287271 -168.20237732]
[17.20578575 -165.97383118]
[30.74679756 -159.22874451]
[41.53929901 -148.62794495]
[48.52595139 -135.20997620]
[51.02227402 -120.28939819]
[48.78369904 -105.32798767]
[42.02954102 -91.79149628]
[31.42150688 -81.00609589]
[17.99885941 -74.02844238]
[20.48397827 -59.23573303]
[25.53273582 -45.11092758]
[32.98764420 -32.09461975]
[40.44255447 -19.07831001]
[53.48200607 -11.87956142]
[53.62653732 3.94098449]
[68.02273560 7.58586407]
[75.76849365 20.68005562]
[71.84780121 35.75539398]
[79.30271149 48.77170563]
[86.75762177 61.78801346]
[94.21253204 74.80432129]
[110.69474030 76.46408081]
[122.78557587 87.78794098]
[137.49353027 84.84246063]
[152.20149231 81.89697266]
[166.90945435 78.95149231]
[154.17446899 71.02558136]
[148.38200378 57.18912888]
[151.67225647 42.55443954]
[162.82954407 32.52872849]
[177.73149109 30.81630325]
[190.87208557 38.04986954]
[197.39617920 51.55676651]
[194.89321899 66.34646606]
[184.28880310 76.95407104]
[199.28149414 76.48602295]
[207.89436340 63.57873535]
[222.46067810 58.23062897]
[237.37937927 62.49815750]
[246.91394043 74.74037170]
[247.39811707 90.24989319]
[238.64573669 103.06298828]
[224.02226257 108.25276947]
[209.15072632 103.82364655]
[199.74954224 91.47872162]
[184.75685120 91.94676208]
[169.85494995 93.65945435]
[155.14698792 96.60493469]
[140.43902588 99.55041504]
[125.73105621 102.49590302]
[119.64914703 116.79963684]
[106.46436310 125.03056335]
[105.84038544 140.01757812]
[105.21640778 155.00459290]
[120.56967926 158.64120483]
[134.92764282 165.17230225]
[147.75051880 174.35049438]
[158.55659485 185.82884216]
[166.94036865 199.17405701]
[172.58769226 213.88285828]
[175.28758240 229.40093994]
[174.94012451 245.14381409]
[171.56011963 260.51889038]
[165.27650452 274.94778442]
[156.32740784 287.88800049]
[145.05111694 298.85339355]
[131.87335205 307.43243408]
[117.29111481 313.30361938]
[101.85398102 316.24752808]
[101.85398102 331.24752808]
[101.85398102 346.24752808]
[101.85398102 361.24752808]
[101.85398102 376.24752808]
[101.85398102 391.24752808]
[101.85398102 406.24752808]
[101.85398102 421.24752808]
[101.85398102 436.24752808]
[101.85398102 451.24752808]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[27 126]
[28 125]
[29 124]
[33 93]
[34 92]
[35 91]
[36 90]
[39 87]
[41 85]
[42 84]
[43 83]
[48 60]
[49 59]
[50 58]
[61 82]
[62 81]
[95 122]
[96 121]
[97 120]
[98 119]
[107 118]
[108 117]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
