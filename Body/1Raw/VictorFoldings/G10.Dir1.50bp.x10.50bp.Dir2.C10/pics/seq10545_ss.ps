%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:17 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGACCAAAACAUCAGAUUGUGAAUCUGACAACAGAGGCUUACGACCCCUUAUUUACCGAGAAxxxxxxxxxxGUUCGUUACAUGGUCCAUCAUAGAAUUCUCACUGUGAUAUAUAAACUCAGACCCAAACAUCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[97.39694977 217.77359009]
[96.77297211 202.78657532]
[96.14899445 187.79956055]
[95.52501678 172.81254578]
[94.90103912 157.82553101]
[94.27706146 142.83851624]
[93.65308380 127.85150146]
[93.02910614 112.86448669]
[85.84660339 99.69589996]
[73.58422852 91.05678558]
[61.32186508 82.41767120]
[49.05949402 73.77854919]
[36.79712677 65.13943481]
[24.53475952 56.50032043]
[10.30798054 51.74650574]
[-4.68471575 51.27846527]
[-19.67741203 50.81042099]
[-27.86083412 67.40664673]
[-47.10309219 75.97775269]
[-69.88820648 69.69290161]
[-83.67058563 75.61286926]
[-97.45296478 81.53282928]
[-111.23535156 87.45279694]
[-125.01773071 93.37275696]
[-138.80010986 99.29271698]
[-152.58248901 105.21268463]
[-164.74961853 117.01934814]
[-179.46307373 108.59613800]
[-175.44212341 92.12590790]
[-158.50245667 91.43029785]
[-144.72007751 85.51033783]
[-130.93769836 79.59037781]
[-117.15531158 73.67041016]
[-103.37293243 67.75045013]
[-89.59054565 61.83048630]
[-75.80816650 55.91052246]
[-75.41824341 48.42066574]
[-90.39795685 47.64081955]
[-105.37766266 46.86072540]
[-104.59732056 31.88103867]
[-89.61811066 32.66110611]
[-74.63839722 33.44095230]
[-74.24847412 25.95109367]
[-87.34162903 18.63198853]
[-100.43478394 11.31288242]
[-113.99912262 18.66219139]
[-129.38177490 17.48860168]
[-141.67420959 8.16660500]
[-146.95394897 -6.32918549]
[-143.53623962 -21.37321472]
[-132.51167297 -32.16498947]
[-117.39813995 -35.26089096]
[-103.01831055 -29.67302895]
[-93.96074677 -17.18447304]
[-93.11567688 -1.78027153]
[-80.02252197 5.53883410]
[-66.92936707 12.85793972]
[-44.08054733 8.97181225]
[-26.01317215 18.98970222]
[-19.20936966 35.81772614]
[-4.21667337 36.28576660]
[10.77602291 36.75381088]
[8.83327961 33.20024490]
[7.74596834 29.12278366]
[7.60941982 24.68613052]
[7.29736328 9.68937588]
[6.98530722 -5.30737734]
[-7.28853321 -10.46702003]
[-18.73204613 -20.43749809]
[-25.79759026 -33.87038803]
[-27.52960968 -48.94900131]
[-23.69386101 -63.63407898]
[-14.80909920 -75.93958282]
[-2.07691479 -84.20129395]
[12.78076839 -87.30189514]
[27.75457001 -84.82203674]
[40.81940842 -77.09711456]
[50.20837021 -65.17185211]
[54.65167618 -50.65904999]
[53.54840469 -35.52143860]
[47.04776382 -21.80626106]
[36.02891159 -11.36838055]
[21.98206139 -5.61943340]
[22.29411697 9.37732029]
[22.60617256 24.37407303]
[30.78025436 11.79693604]
[45.57914734 9.34892273]
[57.36796570 18.62382507]
[58.47154236 33.58317184]
[48.17139053 44.48761749]
[33.17387390 44.23795319]
[45.43624496 52.87706757]
[57.69861221 61.51618576]
[69.96098328 70.15530396]
[82.22335052 78.79441833]
[94.48571777 87.43353271]
[117.98765564 79.68755341]
[132.56036377 76.13278961]
[147.13305664 72.57803345]
[161.70576477 69.02326965]
[176.27847290 65.46850586]
[190.85116577 61.91374588]
[205.42387390 58.35898209]
[211.18495178 43.95100784]
[224.33245850 35.70949173]
[239.81091309 36.80346298]
[251.66854858 46.81226730]
[255.34585571 61.88731384]
[249.42881775 76.23194122]
[236.19268799 84.33035278]
[220.72698975 83.06853485]
[208.97863770 72.93168640]
[194.40592957 76.48645020]
[179.83323669 80.04120636]
[165.26052856 83.59597015]
[150.68782043 87.15073395]
[136.11512756 90.70549774]
[121.54241943 94.26025391]
[136.03541565 98.12718964]
[150.52841187 101.99411774]
[165.02140808 105.86104584]
[179.77383423 103.14708710]
[194.66992188 104.90972137]
[208.38153076 110.99179077]
[219.68620300 120.85102844]
[227.57600403 133.60841370]
[231.34751892 148.12652588]
[230.66448975 163.11097717]
[225.58781433 177.22575378]
[216.57009888 189.21246338]
[204.41535950 198.00234985]
[190.20727539 202.81176758]
[175.21261597 203.21189880]
[160.76826477 199.16708374]
[148.16203308 191.03791809]
[138.51788330 179.54922485]
[132.69566345 165.72526550]
[131.21437073 150.80007935]
[123.48162842 137.94689941]
[115.74887848 125.09369659]
[108.01612854 112.24050903]
[108.64010620 127.22752380]
[109.26408386 142.21453857]
[109.88805389 157.20155334]
[110.51203156 172.18856812]
[111.13600922 187.17558289]
[111.75998688 202.16259766]
[112.38396454 217.14961243]
[119.08395386 232.72352600]
[105.97342682 243.47296143]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 148]
[2 147]
[3 146]
[4 145]
[5 144]
[6 143]
[7 142]
[8 141]
[9 96]
[10 95]
[11 94]
[12 93]
[13 92]
[14 91]
[15 62]
[16 61]
[17 60]
[20 36]
[21 35]
[22 34]
[23 33]
[24 32]
[25 31]
[26 30]
[43 57]
[44 56]
[45 55]
[65 85]
[66 84]
[67 83]
[97 118]
[98 117]
[99 116]
[100 115]
[101 114]
[102 113]
[103 112]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
