%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:06 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGUAUCCUCCCUACUAUGCCUAGAAGGAAUAAUACUAUCGCUGUUCAUUAUAGCUACUCUCAxxxxxxxxxxAUCAAAUAUCACUCUCCUACUUACAGGACUCAACAUACUAGUCACAGCCCUAUACUCCCUCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[84.53199005 264.44458008]
[84.21993256 249.44781494]
[83.90787506 234.45106506]
[83.59581757 219.45431519]
[83.28376007 204.45756531]
[82.97171021 189.46080017]
[82.65965271 174.46405029]
[82.34759521 159.46730042]
[82.03553772 144.47055054]
[69.17713928 136.74645996]
[55.79085159 143.51457214]
[42.40456772 150.28268433]
[29.01828194 157.05081177]
[28.06761932 172.31657410]
[19.65900230 184.97326660]
[6.13407373 191.67720032]
[-8.83039188 190.71765137]
[-21.22187996 182.45227051]
[-34.60816574 189.22038269]
[-47.99444962 195.98849487]
[-56.81885529 209.12014771]
[-71.66804504 207.95788574]
[-85.05432892 214.72599792]
[-98.44061279 221.49411011]
[-106.95735168 235.50828552]
[-123.34403992 234.86920166]
[-130.74346924 220.23429871]
[-121.54372406 206.65870667]
[-105.20873260 208.10781860]
[-91.82244110 201.33970642]
[-78.43615723 194.57159424]
[-70.56922913 181.92404175]
[-54.76256561 182.60220337]
[-41.37628174 175.83409119]
[-27.98999596 169.06597900]
[-27.30041695 154.18679810]
[-19.20188332 141.56658936]
[-5.78509665 134.64877319]
[9.39257717 135.38021851]
[22.25016594 143.66452026]
[35.63645172 136.89640808]
[49.02273560 130.12829590]
[62.40901947 123.36017609]
[56.80840302 102.80966187]
[61.47544098 82.51293182]
[74.86725616 67.18663025]
[93.46878052 60.17475128]
[112.70626831 62.72406769]
[120.16117859 49.70775986]
[127.61608887 36.69144821]
[135.07099915 23.67514038]
[142.52590942 10.65883064]
[130.19071960 2.10755157]
[118.63629913 -7.47247267]
[107.94820404 -18.01031494]
[98.20556641 -29.42795372]
[89.48052216 -41.64085770]
[81.83766174 -54.55860519]
[75.33358002 -68.08555603]
[70.01642609 -82.12155151]
[65.92556763 -96.56268311]
[63.09128952 -111.30203247]
[61.53458023 -126.23046112]
[61.26696396 -141.23745728]
[62.29042435 -156.21189880]
[64.59738159 -171.04292297]
[68.17076111 -185.62072754]
[72.98409271 -199.83738708]
[79.00175476 -213.58763123]
[86.17918396 -226.76966858]
[94.46324158 -239.28588867]
[103.79259491 -251.04362488]
[114.09818268 -261.95584106]
[125.30368805 -271.94174194]
[137.32615662 -280.92736816]
[150.07656860 -288.84625244]
[163.46052551 -295.63967896]
[177.37895203 -301.25741577]
[191.72877502 -305.65786743]
[206.40377808 -308.80841064]
[221.29528809 -310.68576050]
[236.29304504 -311.27603149]
[251.28604126 -310.57479858]
[266.16323853 -308.58728027]
[280.81451416 -305.32818604]
[295.13137817 -300.82165527]
[309.00784302 -295.10107422]
[322.34115601 -288.20874023]
[335.03262329 -280.19573975]
[346.98825073 -271.12136841]
[358.11953735 -261.05279541]
[368.34408569 -250.06462097]
[377.58615112 -238.23814392]
[385.77737427 -225.66096497]
[392.85702515 -212.42616272]
[398.77276611 -198.63175964]
[403.48074341 -184.37986755]
[406.94613647 -169.77601624]
[409.14324951 -154.92832947]
[410.05584717 -139.94671631]
[409.67718506 -124.94211578]
[408.01004028 -110.02561188]
[405.06674194 -95.30764771]
[400.86911011 -80.89718628]
[395.44821167 -66.90092468]
[388.84420776 -53.42248535]
[381.10592651 -40.56165695]
[372.29074097 -28.41366386]
[362.46386719 -17.06844521]
[351.69808960 -6.60999537]
[340.07308960 2.88425040]
[327.67492676 11.34399986]
[314.59542847 18.70661926]
[300.93142700 24.91759491]
[286.78405762 29.93094635]
[272.25808716 33.70955276]
[257.46109009 36.22544098]
[242.50256348 37.45998001]
[227.49328613 37.40403366]
[212.54437256 36.05801010]
[197.76652527 33.43188095]
[183.26913452 29.54508972]
[169.15954590 24.42641068]
[155.54222107 18.11374092]
[148.08731079 31.13005066]
[140.63240051 44.14635849]
[133.17749023 57.16267014]
[125.72257996 70.17897797]
[131.23692322 75.40563965]
[135.69099426 81.64936829]
[138.89787292 88.69536591]
[140.71409607 96.29464722]
[141.04588318 104.17282104]
[139.85354614 112.03999329]
[137.15403748 119.60143280]
[133.02122498 126.56860352]
[127.58415985 132.67018127]
[121.02316284 137.66258240]
[113.56391144 141.33958435]
[105.46972656 143.54080200]
[97.03229523 144.15849304]
[97.34434509 159.15524292]
[97.65640259 174.15199280]
[97.96846008 189.14875793]
[98.28051758 204.14550781]
[98.59257507 219.14225769]
[98.90463257 234.13900757]
[99.21668243 249.13577271]
[99.52873993 264.13250732]
[102.11974335 283.34024048]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 149]
[2 148]
[3 147]
[4 146]
[5 145]
[6 144]
[7 143]
[8 142]
[9 141]
[10 43]
[11 42]
[12 41]
[13 40]
[18 35]
[19 34]
[20 33]
[22 31]
[23 30]
[24 29]
[48 128]
[49 127]
[50 126]
[51 125]
[52 124]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
