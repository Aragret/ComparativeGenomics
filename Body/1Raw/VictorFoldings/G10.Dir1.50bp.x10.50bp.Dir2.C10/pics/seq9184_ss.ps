%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:47 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCGUCAUUAUUGGCUCAACUUUCCUCACUAUCUGCUUCAUCCGCCAACUAAUAUUUCACUUUxxxxxxxxxxGUAGACAGUCCCACCCUCACACGAUUCUUUACCUUUCACUUCAUCUUGCCCUUCAUUAUUGCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[96.23048401 281.73135376]
[95.92250824 266.73452759]
[95.61453247 251.73767090]
[95.30654907 236.74084473]
[94.99857330 221.74400330]
[94.69059753 206.74716187]
[94.38262177 191.75032043]
[94.07463837 176.75347900]
[93.76666260 161.75665283]
[79.17134094 158.47140503]
[65.78601837 151.78939819]
[54.38827896 142.09880066]
[45.64024734 129.96257019]
[40.05012512 116.08572388]
[37.94265747 101.27442169]
[39.44026947 86.38908386]
[44.45596695 72.29443359]
[52.69836807 59.80928802]
[63.68864822 49.65892410]
[76.78836060 42.43301392]
[91.23649597 38.55133057]
[90.92852020 23.55449295]
[90.62054443 8.55765438]
[75.62712860 7.98493147]
[60.69316864 6.53326559]
[45.87014389 4.20766115]
[31.20915413 1.01613510]
[16.76073837 -3.03031111]
[2.57470155 -7.91772842]
[-11.30005264 -13.62926865]
[-24.81569290 -20.14524269]
[-37.92563248 -27.44318771]
[-50.58467102 -35.49794769]
[-62.74917603 -44.28175735]
[-74.37721252 -53.76433182]
[-85.42869568 -63.91298676]
[-95.86553192 -74.69273376]
[-105.65173340 -86.06642151]
[-114.75357819 -97.99483490]
[-123.13967133 -110.43685150]
[-130.78112793 -123.34958649]
[-137.65158081 -136.68852234]
[-143.72737122 -150.40768433]
[-148.98754883 -164.45976257]
[-153.41395569 -178.79634094]
[-156.99136353 -193.36798096]
[-159.70742798 -208.12445068]
[-161.55278015 -223.01489258]
[-162.52105713 -237.98796082]
[-162.60894775 -252.99205017]
[-161.81611633 -267.97543335]
[-160.14532471 -282.88647461]
[-157.60231018 -297.67373657]
[-154.19583130 -312.28628540]
[-149.93766785 -326.67373657]
[-144.84246826 -340.78646851]
[-138.92781067 -354.57586670]
[-132.21406555 -367.99435425]
[-124.72440338 -380.99572754]
[-116.48461914 -393.53512573]
[-107.52313995 -405.56933594]
[-97.87083435 -417.05688477]
[-87.56099701 -427.95812988]
[-76.62915039 -438.23556519]
[-65.11299133 -447.85369873]
[-53.05221558 -456.77938843]
[-40.48839569 -464.98190308]
[-27.46484566 -472.43292236]
[-14.02646065 -479.10675049]
[-0.21956411 -484.98043823]
[13.90824795 -490.03369141]
[28.30827332 -494.24911499]
[42.93087006 -497.61215210]
[57.72563553 -500.11123657]
[72.64156342 -501.73773193]
[87.62724304 -502.48605347]
[102.63100433 -502.35360718]
[117.60113525 -501.34085083]
[132.48602295 -499.45129395]
[147.23437500 -496.69140625]
[161.79531860 -493.07073975]
[176.11868286 -488.60174561]
[190.15507507 -483.29986572]
[203.85612488 -477.18334961]
[217.17460632 -470.27331543]
[230.06457520 -462.59353638]
[242.48162842 -454.17050171]
[254.38294983 -445.03329468]
[265.72750854 -435.21334839]
[276.47622681 -424.74453735]
[286.59201050 -413.66296387]
[296.04000854 -402.00680542]
[304.78762817 -389.81625366]
[312.80474854 -377.13336182]
[320.06372070 -364.00180054]
[326.53952026 -350.46685791]
[332.20983887 -336.57519531]
[337.05508423 -322.37469482]
[341.05859375 -307.91433716]
[344.20657349 -293.24392700]
[346.48812866 -278.41406250]
[347.89544678 -263.47586060]
[348.42361450 -248.48080444]
[348.07086182 -233.48060608]
[346.83840942 -218.52696228]
[344.73046875 -203.67141724]
[341.75430298 -188.96519470]
[337.92022705 -174.45898438]
[333.24139404 -160.20278931]
[327.73397827 -146.24575806]
[321.41693115 -132.63600159]
[314.31204224 -119.42043304]
[306.44381714 -106.64461517]
[297.83938599 -94.35258484]
[288.52838135 -82.58671570]
[278.54290771 -71.38757324]
[267.91738892 -60.79375458]
[256.68847656 -50.84178162]
[244.89483643 -41.56596756]
[232.57716370 -32.99827957]
[219.77789307 -25.16825867]
[206.54116821 -18.10289192]
[192.91259766 -11.82653999]
[178.93916321 -6.36083508]
[164.66906738 -1.72462046]
[150.15145874 2.06612229]
[135.43641663 4.99832582]
[120.57463837 7.06188154]
[105.61737823 8.24967670]
[105.92536163 23.24651527]
[106.23333740 38.24335098]
[120.82865906 41.52859497]
[134.21397400 48.21060562]
[145.61172485 57.90120316]
[154.35975647 70.03743744]
[159.94987488 83.91427612]
[162.05734253 98.72557831]
[160.55972290 113.61091614]
[155.54403687 127.70556641]
[147.30163574 140.19071960]
[136.31135559 150.34107971]
[123.21163940 157.56698608]
[108.76350403 161.44866943]
[109.07147980 176.44551086]
[109.37945557 191.44235229]
[109.68743134 206.43917847]
[109.99541473 221.43601990]
[110.30339050 236.43286133]
[110.61136627 251.42970276]
[110.91934204 266.42654419]
[111.22732544 281.42337036]
[113.81309509 300.63180542]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 151]
[2 150]
[3 149]
[4 148]
[5 147]
[6 146]
[7 145]
[8 144]
[9 143]
[21 131]
[22 130]
[23 129]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
