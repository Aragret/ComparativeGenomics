%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:41 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCUUCAAAGCCCUCAGUAAGUUGCAAUACUUAAUUUCUGUAACAGCUAAGGACUGCAAAACxxxxxxxxxxUUACAAGCAAGUACAGCAAUCAACCCUCAACUAUCACACAUCAACUGCAACUCCAAAGCCCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[126.99777985 522.66711426]
[126.99777985 507.66714478]
[126.99777985 492.66714478]
[126.99777985 477.66714478]
[126.99777985 462.66714478]
[126.99777985 447.66714478]
[126.99777985 432.66714478]
[126.99777985 417.66714478]
[126.99777985 402.66714478]
[126.99777985 387.66714478]
[111.93939972 384.32626343]
[97.98907471 377.72933960]
[85.84144592 368.20147705]
[76.10213470 356.21371460]
[69.25756836 342.35995483]
[65.65068054 327.32733154]
[65.46371460 311.86221313]
[68.70906067 296.73318481]
[75.22842407 282.69277954]
[84.70059204 270.44009399]
[96.65725708 260.58593750]
[110.50613403 253.62248230]
[125.56033325 249.89851379]
[125.24827576 234.90176392]
[124.93621826 219.90499878]
[124.62416077 204.90824890]
[116.09413910 196.27424622]
[115.74888611 183.74029541]
[124.32217407 174.04739380]
[120.91919708 159.43849182]
[114.29069519 145.98252869]
[107.66220093 132.52656555]
[101.03369904 119.07059479]
[87.34929657 114.30789948]
[80.94638062 101.30986786]
[85.51033783 87.55789948]
[78.88183594 74.10193634]
[72.25333405 60.64596939]
[65.62483978 47.19000244]
[58.99634171 33.73403931]
[44.30349731 28.56121063]
[37.77294159 14.82052326]
[42.79499054 0.84502178]
[38.34331131 -2.12181950]
[35.77463531 -6.11610079]
[35.16249084 -10.23033905]
[36.20233154 -13.66344547]
[30.42605782 -27.50666237]
[24.64978600 -41.34988022]
[18.87351418 -55.19309998]
[13.09724140 -69.03631592]
[5.10732508 -81.73124695]
[-4.87540150 -92.92700958]
[-14.85812759 -104.12277985]
[-30.48216820 -103.47209167]
[-42.83750916 -113.05747223]
[-46.09033966 -128.35299683]
[-38.70477295 -142.13658142]
[-24.16804504 -147.90005493]
[-9.34395599 -142.92205811]
[-1.23198664 -129.55307007]
[-3.66236186 -114.10550690]
[6.32036448 -102.90973663]
[16.30309105 -91.71397400]
[13.89208126 -106.51893616]
[16.59556007 -121.27330017]
[24.09919739 -134.26158142]
[35.53055191 -143.97364807]
[49.56050873 -149.28027344]
[64.55781555 -149.56446838]
[78.77874756 -144.79319763]
[90.56985474 -135.52120972]
[98.56018829 -122.82654572]
[101.82072449 -108.18520355]
[99.97235107 -93.29952240]
[93.22999573 -79.90024567]
[82.37757111 -69.54529572]
[68.67688751 -63.43864059]
[53.72091293 -62.29028702]
[39.24855804 -66.23376465]
[26.94045830 -74.81259155]
[32.71673203 -60.96937180]
[38.49300385 -47.12615204]
[44.26927567 -33.28293610]
[50.04554749 -19.43971825]
[56.25095749 -5.78347683]
[70.39176941 -1.24772882]
[77.30569458 12.30410862]
[72.45230865 27.10553932]
[79.08080292 40.56150436]
[85.70930481 54.01747131]
[92.33779907 67.47343445]
[98.96630096 80.92940521]
[112.65070343 85.69210052]
[119.05361938 98.69013214]
[114.48966217 112.44210052]
[121.11816406 125.89806366]
[127.74666595 139.35403442]
[134.37516785 152.80999756]
[135.67692566 137.86659241]
[140.73269653 123.74430084]
[149.21069336 111.36998749]
[160.55447388 101.55577850]
[174.01954651 94.94580841]
[188.72218323 91.97387695]
[203.69744873 92.83503723]
[217.96249390 97.47277832]
[230.58108521 105.58271027]
[240.72506714 116.63258362]
[247.72866821 129.89718628]
[251.13224792 144.50593567]
[250.71243286 159.50006104]
[246.49676514 173.89547729]
[238.76191711 186.74740601]
[228.01553345 197.21237183]
[214.96292114 204.60353088]
[200.46072388 208.43580627]
[185.46073914 208.45768738]
[170.94743347 204.66773987]
[157.87330627 197.31469727]
[147.09645081 186.88113403]
[139.32217407 174.04739380]
[148.90489197 189.73660278]
[139.62091064 204.59619141]
[139.93296814 219.59294128]
[140.24502563 234.58970642]
[140.55708313 249.58645630]
[154.89219666 252.40843201]
[168.31616211 258.15985107]
[180.23782349 266.58468628]
[190.13278198 277.30923462]
[197.56645203 289.85870361]
[202.21311951 303.67825317]
[203.87020874 318.15750122]
[202.46714783 332.65744019]
[198.06837463 346.53875732]
[190.87033081 359.18988037]
[181.19273376 370.05401611]
[169.46437073 378.65368652]
[156.20405579 384.61154175]
[141.99778748 387.66714478]
[141.99778748 402.66714478]
[141.99778748 417.66714478]
[141.99778748 432.66714478]
[141.99778748 447.66714478]
[141.99778748 462.66714478]
[141.99778748 477.66714478]
[141.99778748 492.66714478]
[141.99778748 507.66714478]
[141.99778748 522.66711426]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[23 127]
[24 126]
[25 125]
[26 124]
[29 122]
[30 99]
[31 98]
[32 97]
[33 96]
[36 93]
[37 92]
[38 91]
[39 90]
[40 89]
[43 86]
[47 85]
[48 84]
[49 83]
[50 82]
[51 81]
[52 64]
[53 63]
[54 62]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
