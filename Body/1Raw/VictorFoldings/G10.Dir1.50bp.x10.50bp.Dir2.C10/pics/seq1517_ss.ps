%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:02 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGUCAUAUCCCUCUAGAGGAGCCUGUUCUGUAAUCGAUAAACCCCGAUCAACCUCACCACCUxxxxxxxxxxUUAACAGUACAUAGUACAUAAAGCCAUUUACCGUACAUAGCACAUUACAGUCAAAUCCCUCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[95.04950714 501.06060791]
[95.04950714 486.06060791]
[95.04950714 471.06060791]
[95.04950714 456.06060791]
[95.04950714 441.06060791]
[95.04950714 426.06060791]
[95.04950714 411.06060791]
[95.04950714 396.06060791]
[95.04950714 381.06060791]
[95.04950714 366.06060791]
[80.58465576 362.22427368]
[67.59579468 354.76864624]
[56.97132111 344.19674683]
[49.43971634 331.22497559]
[45.51956558 316.73452759]
[45.48390198 301.71160889]
[49.34115219 287.18029785]
[56.83419037 274.13265991]
[67.45745087 263.46109009]
[80.49103546 255.89729309]
[95.04950714 251.96205139]
[95.04950714 236.96205139]
[85.45840454 222.29881287]
[94.71266174 206.41363525]
[94.40060425 191.41688538]
[86.40019989 178.85333252]
[93.84873199 164.89518738]
[85.84832764 152.33163452]
[93.29685974 138.37347412]
[92.98480225 123.37672424]
[76.69556427 107.25172424]
[80.95932770 84.73117828]
[72.70703888 72.20521545]
[64.45475006 59.67925262]
[50.40140533 52.41192245]
[49.86060715 37.52713776]
[41.60831833 25.00117493]
[33.35602951 12.47521210]
[25.10373878 -0.05074943]
[16.72159576 -12.49018955]
[8.21050549 -24.84176254]
[-3.19051552 -34.58941269]
[-16.71470451 -41.07757950]
[-30.23889542 -47.56574631]
[-43.82771683 -40.07417679]
[-59.22052002 -42.03408432]
[-70.49845886 -52.69183731]
[-73.32493591 -67.94931793]
[-66.61311340 -81.93970490]
[-52.94382095 -89.28341675]
[-37.57318497 -87.15664673]
[-26.41152573 -76.37717438]
[-23.75073051 -61.08993530]
[-10.22654057 -54.60176849]
[3.29764962 -48.11360550]
[-4.87107086 -60.69422531]
[-9.98022461 -74.79729462]
[-11.76461887 -89.69078064]
[-10.13163185 -104.60162354]
[-5.16602516 -118.75587463]
[2.87445736 -131.41883850]
[13.57246876 -141.93324280]
[26.37272072 -149.75331116]
[40.61080551 -154.47315979]
[55.54768753 -155.84777832]
[70.40805054 -153.80583191]
[84.42056274 -148.45332336]
[96.85789490 -140.06803894]
[107.07447052 -129.08526611]
[114.54000092 -116.07503510]
[118.86697388 -101.71267700]
[119.83079529 -86.74367523]
[117.38143921 -71.94500732]
[111.64604187 -58.08480072]
[102.92230225 -45.88249207]
[91.66303253 -35.97144318]
[78.45265961 -28.86609840]
[63.97686768 -24.93526268]
[48.98703766 -24.38297272]
[34.26122665 -27.23789215]
[20.56207848 -33.35285187]
[29.07316780 -21.00127983]
[35.49981308 -17.25376129]
[37.62969971 -8.30303860]
[45.88198853 4.22292328]
[54.13428116 16.74888611]
[62.38656998 29.27484703]
[75.84965515 35.64624023]
[76.98071289 51.42696381]
[85.23300171 63.95292664]
[93.48529053 76.47888947]
[103.04097748 75.78354645]
[112.12805939 78.81995392]
[119.34620667 85.12020111]
[133.47100830 80.07144165]
[147.59580994 75.02268219]
[161.72061157 69.97393036]
[173.26902771 55.66959000]
[190.38645935 59.41038513]
[204.40316772 54.06887054]
[218.41987610 48.72735977]
[232.43658447 43.38584518]
[242.36250305 30.33179283]
[258.59423828 32.66899490]
[264.43399048 47.99313736]
[253.87431335 60.54005814]
[237.77810669 57.40256119]
[223.76139832 62.74407196]
[209.74467468 68.08558655]
[195.72796631 73.42710114]
[190.46879578 84.36549377]
[178.78236389 88.90931702]
[166.76936340 84.09873199]
[152.64456177 89.14749146]
[138.51976013 94.19624329]
[124.39495850 99.24500275]
[123.41381836 106.89036560]
[120.09735870 113.84847260]
[114.77636719 119.42532349]
[107.98155975 123.06466675]
[108.29361725 138.06141663]
[116.31633759 151.69764709]
[108.84548187 164.58312988]
[116.86820984 178.21934509]
[109.39735413 191.10482788]
[109.70941162 206.10157776]
[118.48249054 215.61404419]
[118.39807129 228.15245056]
[110.04950714 236.96205139]
[110.04950714 251.96205139]
[124.60797882 255.89729309]
[137.64157104 263.46109009]
[148.26483154 274.13265991]
[155.75785828 287.18029785]
[159.61511230 301.71160889]
[159.57945251 316.73452759]
[155.65930176 331.22497559]
[148.12770081 344.19674683]
[137.50321960 354.76864624]
[124.51436615 362.22427368]
[110.04950714 366.06060791]
[110.04950714 381.06060791]
[110.04950714 396.06060791]
[110.04950714 411.06060791]
[110.04950714 426.06060791]
[110.04950714 441.06060791]
[110.04950714 456.06060791]
[110.04950714 471.06060791]
[110.04950714 486.06060791]
[110.04950714 501.06060791]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[21 130]
[22 129]
[24 126]
[25 125]
[27 123]
[29 121]
[30 120]
[32 91]
[33 90]
[34 89]
[36 87]
[37 86]
[38 85]
[39 84]
[40 82]
[41 81]
[42 55]
[43 54]
[44 53]
[94 116]
[95 115]
[96 114]
[97 113]
[99 110]
[100 109]
[101 108]
[102 107]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
