%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:58 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGUAAAACUUUACAGUCAGAGGUUCAAUUCCUCUUCUUAACAACAUACCCAUGGCCAACCUCCxxxxxxxxxxACAGCACCAAAUCUCCACCUCCAUCAUCACCUCAACCCAAAAAGGCAUAAUUAAACUUUACCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[103.75674438 288.24261475]
[103.75674438 273.24261475]
[103.75674438 258.24261475]
[103.75674438 243.24261475]
[103.75674438 228.24261475]
[103.75674438 213.24261475]
[103.75674438 198.24261475]
[103.75674438 183.24261475]
[103.75674438 168.24261475]
[103.75674438 153.24261475]
[101.91342163 138.35630798]
[98.25471497 123.80935669]
[84.64264679 118.27794647]
[76.84780121 105.82301331]
[77.82280731 91.16236877]
[87.19832611 79.84934235]
[83.53962708 65.30239105]
[79.88092041 50.75543594]
[76.22221375 36.20848465]
[61.16741562 34.60271072]
[47.59584427 27.95557594]
[37.13700485 17.08668137]
[31.03930092 3.32121301]
[30.02104568 -11.67160702]
[34.18587494 -26.08093262]
[43.01258087 -38.17301178]
[55.42024612 -46.49978638]
[51.76154327 -61.04673767]
[48.10283661 -75.59368896]
[44.44412994 -90.14064789]
[40.78542328 -104.68759918]
[25.98861313 -102.17991638]
[11.04066467 -100.84091187]
[-3.96626115 -100.67884827]
[-18.93964005 -101.69472504]
[-33.78715515 -103.88227081]
[-48.41726685 -107.22800446]
[-62.73977280 -111.71129608]
[-76.66637421 -117.30450439]
[-90.11119843 -123.97315216]
[-102.99135590 -131.67611694]
[-115.22743225 -140.36589050]
[-126.74399567 -149.98893738]
[-137.47004700 -160.48588562]
[-147.33943176 -171.79205322]
[-156.29132080 -183.83770752]
[-164.27050781 -196.54858398]
[-171.22782898 -209.84632874]
[-177.12034607 -223.64894104]
[-181.91175842 -237.87133789]
[-185.57250977 -252.42582703]
[-188.08004761 -267.22265625]
[-189.41889954 -282.17062378]
[-189.58081055 -297.17755127]
[-188.56477356 -312.15090942]
[-186.37707520 -326.99841309]
[-183.03120422 -341.62847900]
[-178.54776001 -355.95095825]
[-172.95440674 -369.87750244]
[-166.28562927 -383.32223511]
[-158.58253479 -396.20233154]
[-149.89262390 -408.43832397]
[-140.26947021 -419.95477295]
[-129.77239990 -430.68072510]
[-118.46614075 -440.54998779]
[-106.42039490 -449.50177002]
[-93.70943451 -457.48083496]
[-80.41162109 -464.43798828]
[-66.60894012 -470.33038330]
[-52.38649750 -475.12164307]
[-37.83198166 -478.78225708]
[-23.03511810 -481.28964233]
[-8.08714199 -482.62832642]
[6.91978741 -482.79010010]
[21.89314651 -481.77389526]
[36.74061584 -479.58605957]
[51.37065887 -476.24002075]
[65.69307709 -471.75643921]
[79.61956024 -466.16293335]
[93.06424713 -459.49401855]
[105.94424438 -451.79080200]
[118.18015289 -443.10076904]
[129.69651794 -433.47750854]
[140.42234802 -422.98031616]
[150.29150391 -411.67395020]
[159.24314880 -399.62811279]
[167.22207642 -386.91708374]
[174.17912292 -373.61920166]
[180.07136536 -359.81646729]
[184.86248779 -345.59396362]
[188.52293396 -331.03939819]
[191.03016663 -316.24252319]
[192.36871338 -301.29452515]
[192.53031921 -286.28759766]
[191.51399231 -271.31423950]
[189.32598877 -256.46679688]
[185.97981262 -241.83679199]
[181.49607849 -227.51441956]
[175.90243530 -213.58799744]
[169.23338318 -200.14337158]
[161.53002930 -187.26345825]
[152.83985901 -175.02763367]
[143.21647644 -163.51136780]
[132.71919250 -152.78564453]
[121.41272736 -142.91661072]
[109.36679840 -133.96508789]
[96.65567017 -125.98628235]
[83.35771942 -119.02938080]
[69.55491638 -113.13728333]
[55.33237839 -108.34630585]
[58.99108505 -93.79935455]
[62.64979172 -79.25239563]
[66.30849457 -64.70544434]
[69.96720123 -50.15848923]
[84.83784485 -48.69248962]
[98.33496857 -42.21507645]
[108.82119751 -31.49063873]
[115.01710510 -17.80005264]
[116.15731049 -2.78772426]
[112.08494568 11.73591518]
[103.27294159 24.01274490]
[90.76916504 32.54977798]
[94.42787170 47.09673309]
[98.08657837 61.64368439]
[101.74528503 76.19064331]
[115.35735321 81.72205353]
[123.15219879 94.17698669]
[122.17719269 108.83763123]
[112.80167389 120.15065765]
[116.46037292 134.69760132]
[121.92823792 120.72969818]
[132.83380127 110.43072510]
[147.09144592 105.77030182]
[161.97450256 107.63969421]
[174.63668823 115.68139648]
[182.65644836 128.35748291]
[184.50007629 143.24375916]
[179.81497192 157.49331665]
[169.49713135 168.38102722]
[155.51977539 173.82469177]
[140.55596924 172.78326416]
[127.46744537 165.45588684]
[118.75674438 153.24261475]
[118.75674438 168.24261475]
[118.75674438 183.24261475]
[118.75674438 198.24261475]
[118.75674438 213.24261475]
[118.75674438 228.24261475]
[118.75674438 243.24261475]
[118.75674438 258.24261475]
[118.75674438 273.24261475]
[118.75674438 288.24261475]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 152]
[2 151]
[3 150]
[4 149]
[5 148]
[6 147]
[7 146]
[8 145]
[9 144]
[10 143]
[11 130]
[12 129]
[16 125]
[17 124]
[18 123]
[19 122]
[27 114]
[28 113]
[29 112]
[30 111]
[31 110]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
