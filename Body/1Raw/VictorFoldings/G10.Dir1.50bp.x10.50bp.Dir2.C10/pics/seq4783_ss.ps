%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:01 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGACCAAAAAAAUAAACCCUCGUUCCACAGAAGCUGCCAUCAAGUAUUUCCUCACGCAAGCAAxxxxxxxxxxGCGCUAUCACCACUCUGUUCGCAGCAGUCUGCGCCCUUACACAAAAUGACAUCAAAAAAAUCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[83.56952667 488.69403076]
[86.15530396 469.48562622]
[86.46327972 454.48876953]
[86.77125549 439.49194336]
[87.07923889 424.49508667]
[87.38721466 409.49826050]
[87.69519043 394.50143433]
[88.00316620 379.50457764]
[88.31114960 364.50775146]
[88.61912537 349.51092529]
[75.32341003 346.85913086]
[62.65884399 342.01089478]
[50.98556137 335.10296631]
[40.63573074 326.33056641]
[31.90406036 315.94210815]
[25.03942680 304.23193359]
[20.23777962 291.53216553]
[17.63654327 278.20318604]
[17.31068802 264.62338257]
[19.27056503 251.17848206]
[23.46158981 238.25059509]
[29.76574898 226.20729065]
[38.00494003 215.39117432]
[47.94598389 206.11016846]
[59.30724335 198.62872314]
[71.76658630 193.16026306]
[84.97052002 189.86114502]
[98.54423523 188.82615662]
[100.08152771 173.90513611]
[101.61882019 158.98411560]
[103.15611267 144.06309509]
[104.69340515 129.14208984]
[82.66563416 120.77168274]
[75.41374207 100.49768829]
[85.14611053 83.59828186]
[79.44144440 69.72540283]
[73.73678589 55.85252380]
[68.03211975 41.97964478]
[62.32745361 28.10676384]
[55.50387955 14.74866390]
[47.60739899 1.99540675]
[39.71091461 -10.75785065]
[32.48698044 -16.45087624]
[31.78633881 -23.85501671]
[24.15336800 -36.76771545]
[10.12881851 -31.34905624]
[-4.59636784 -28.31281662]
[-19.62047577 -27.74182510]
[-34.53363800 -29.65166092]
[-48.92901230 -33.99021912]
[-62.41387939 -40.63914108]
[-74.62036896 -49.41704559]
[-85.21546936 -60.08445358]
[-93.91014862 -72.35036469]
[-100.46720123 -85.88014221]
[-104.70774841 -100.30468750]
[-106.51610565 -115.23049164]
[-105.84294128 -130.25036621]
[-102.70662689 -144.95457458]
[-97.19270325 -158.94194031]
[-89.45161438 -171.83090210]
[-79.69452667 -183.26983643]
[-68.18762970 -192.94667053]
[-55.24484634 -200.59742737]
[-41.21924973 -206.01338196]
[-26.49347878 -209.04678345]
[-11.46926212 -209.61488342]
[3.44353175 -207.70217896]
[17.83806801 -203.36083984]
[31.32165527 -196.70932007]
[43.52645111 -187.92907715]
[54.11949921 -177.25961304]
[62.81181335 -164.99203491]
[69.36625671 -151.46099854]
[73.60402679 -137.03562927]
[75.40951538 -122.10947418]
[74.73345947 -107.08972931]
[71.59429932 -92.38613892]
[66.07769012 -78.39983368]
[58.33411407 -65.51235962]
[48.57482529 -54.07530975]
[37.06606674 -44.40068436]
[44.69903564 -31.48798561]
[52.46417236 -18.65433311]
[60.36065292 -5.90107584]
[68.25713348 6.85218143]
[71.21245575 -7.85380650]
[82.13941193 -18.13007736]
[96.99893951 -20.17809677]
[110.29834747 -13.24083138]
[117.12163544 0.11741834]
[114.94661713 14.95889091]
[104.57727814 25.79756546]
[89.84655762 28.62701988]
[76.20033264 22.40209961]
[81.90499878 36.27497864]
[87.60966492 50.14786148]
[93.31432343 64.02074432]
[99.01898956 77.89362335]
[117.51727295 81.02723694]
[129.49913025 98.95574188]
[143.83918762 94.55544281]
[158.17924500 90.15514374]
[172.51931763 85.75484467]
[186.85937500 81.35453796]
[197.62905884 68.98741150]
[213.67010498 72.39580536]
[218.48085022 88.07345581]
[207.11241150 99.89253998]
[191.25967407 95.69460297]
[176.91961670 100.09490204]
[162.57955933 104.49520111]
[148.23948669 108.89550018]
[133.89942932 113.29580688]
[148.59362793 116.30916595]
[163.59259033 116.48589325]
[176.67572021 123.82289886]
[184.64842224 136.52865601]
[185.56390381 151.50068665]
[179.19866943 165.08316040]
[167.10693359 173.95953369]
[152.24124146 175.96238708]
[138.23149109 170.60267639]
[128.49851990 159.18911743]
[125.41883850 144.51081848]
[119.61442566 130.67938232]
[118.07713318 145.60038757]
[116.53984070 160.52140808]
[115.00254822 175.44242859]
[113.46525574 190.36344910]
[129.27348328 195.24925232]
[143.74986267 203.25152588]
[156.28787231 214.03262329]
[166.36264038 227.13847351]
[173.55302429 242.01779175]
[177.55909729 258.04522705]
[178.21478271 274.54760742]
[175.49462891 290.83227539]
[169.51484680 306.21612549]
[160.52833557 320.05432129]
[148.91400146 331.76718140]
[135.16073608 340.86462402]
[119.84690094 346.96658325]
[103.61596680 349.81887817]
[103.30798340 364.81573486]
[103.00000763 379.81256104]
[102.69203186 394.80938721]
[102.38405609 409.80624390]
[102.07607269 424.80307007]
[101.76809692 439.79992676]
[101.46012115 454.79675293]
[101.15214539 469.79357910]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 152]
[3 151]
[4 150]
[5 149]
[6 148]
[7 147]
[8 146]
[9 145]
[10 144]
[28 130]
[29 129]
[30 128]
[31 127]
[32 126]
[35 99]
[36 98]
[37 97]
[38 96]
[39 95]
[40 86]
[41 85]
[42 84]
[44 83]
[45 82]
[101 114]
[102 113]
[103 112]
[104 111]
[105 110]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
