%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:43 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGUCUACCCCCUCUAGAGCCCACUGUAAAGCUAACUUAGCAUUAACCUUUUAAGUUAAAGAUxxxxxxxxxxACUCCACUCAAGCACUAUAGUUGUAGCAGGAAUCUUCUUACUCAUCCGCUUCCACCCCCUCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[92.50000000 250.89591980]
[92.50000000 235.89591980]
[92.50000000 220.89591980]
[92.50000000 205.89591980]
[92.50000000 190.89591980]
[92.50000000 175.89591980]
[92.50000000 160.89591980]
[92.50000000 145.89591980]
[92.50000000 130.89591980]
[92.50000000 115.89591980]
[78.53961182 110.40888977]
[68.32613373 121.39455414]
[58.11265182 132.38021851]
[47.89916992 143.36589050]
[50.00765228 158.86067200]
[41.61931229 172.05801392]
[26.69487190 176.72653198]
[12.28119183 170.66188049]
[5.18397236 156.72763062]
[8.75430298 141.50308228]
[21.30638504 132.17681885]
[36.91350555 133.15240479]
[47.12698746 122.16674042]
[57.34046555 111.18107605]
[67.55394745 100.19541168]
[69.88504791 85.37765503]
[63.53791809 71.78670502]
[51.66849899 66.63202667]
[46.67768097 55.12938690]
[50.75301743 43.69702148]
[44.69000244 29.97696686]
[38.62699127 16.25691223]
[32.56397629 2.53685927]
[26.50096321 -11.18319416]
[20.43795013 -24.90324783]
[5.97300768 -30.68279839]
[0.01969756 -44.68325424]
[5.61875772 -58.43774796]
[-0.44425538 -72.15779877]
[-6.50726843 -85.87785339]
[-16.01562691 -97.47919464]
[-28.27799606 -106.11830902]
[-40.54036331 -114.75743103]
[-52.80273056 -123.39654541]
[-65.06510162 -132.03565979]
[-77.32746887 -140.67477417]
[-90.63619995 -133.20213318]
[-105.86974335 -132.25251770]
[-120.00347900 -138.01448059]
[-130.23114014 -149.34399414]
[-134.52201843 -163.99156189]
[-132.02413940 -179.04888916]
[-123.23348999 -191.52635193]
[-109.89543152 -198.94653320]
[-94.65826416 -199.83615112]
[-80.54733276 -194.01856995]
[-70.36436462 -182.64888000]
[-66.13121033 -167.98452759]
[-68.68835449 -152.93714905]
[-56.42598343 -144.29803467]
[-44.16361618 -135.65892029]
[-31.90124702 -127.01979828]
[-19.63887978 -118.38068390]
[-7.37651110 -109.74156189]
[-13.31594658 -123.51556396]
[-16.10389519 -138.25419617]
[-15.60575867 -153.24592590]
[-11.84558773 -167.76698303]
[-5.00491333 -181.11633301]
[4.58601475 -192.64950562]
[16.46417236 -201.80970764]
[30.05611610 -208.15472412]
[44.70565796 -211.37820435]
[59.70556259 -211.32455444]
[74.33167267 -207.99635315]
[87.87787628 -201.55427551]
[99.69020081 -192.30934143]
[109.19837952 -180.70785522]
[115.94338989 -167.30990601]
[119.59958649 -152.76231384]
[119.99046326 -137.76741028]
[117.09715271 -123.04910278]
[111.05933380 -109.31793976]
[102.16850281 -97.23683929]
[90.85387421 -87.38903046]
[77.66169739 -80.24995422]
[63.22884750 -76.16426086]
[48.25210953 -75.32919312]
[33.45451736 -77.78507233]
[19.55046463 -83.41333008]
[7.21278524 -91.94086456]
[13.27579784 -78.22081757]
[19.33881187 -64.50076294]
[33.27870178 -59.38070297]
[39.62290955 -45.55298615]
[34.15800476 -30.96626091]
[40.22101593 -17.24620819]
[46.28403091 -3.52615380]
[52.34704208 10.19390011]
[58.41005707 23.91395378]
[64.47306824 37.63400650]
[79.17266083 47.16930389]
[77.12886810 65.43957520]
[83.47599792 79.03052521]
[133.14247131 81.87281799]
[147.90852356 84.51168060]
[162.67457581 87.15054321]
[171.73931885 85.57501221]
[177.71900940 90.00096130]
[192.42697144 92.94644165]
[207.13493347 95.89192963]
[215.90592957 83.44244385]
[228.98561096 75.64234161]
[244.10786438 73.84302521]
[258.65264893 78.35624695]
[270.10000610 88.40005493]
[276.46658325 102.23429871]
[276.64938354 117.46212006]
[270.61666870 131.44520569]
[259.41372681 141.76089478]
[244.98146057 146.62193298]
[229.82037354 145.18611145]
[216.55722046 137.70220947]
[207.48992920 125.46685791]
[204.18945312 110.59989166]
[189.48149109 107.65440369]
[174.77352905 104.70892334]
[160.03572083 101.91659546]
[145.26966858 99.27773285]
[130.50360107 96.63887024]
[124.75270844 101.45313263]
[136.44599915 110.84817505]
[151.12443542 113.93743896]
[159.81105042 126.16619873]
[157.89491272 141.04330444]
[146.39311218 150.67184448]
[131.41093445 149.94085693]
[120.90107727 139.23838806]
[120.44228363 124.24539948]
[113.25090027 111.08165741]
[107.50000000 115.89591980]
[107.50000000 130.89591980]
[107.50000000 145.89591980]
[107.50000000 160.89591980]
[107.50000000 175.89591980]
[107.50000000 190.89591980]
[107.50000000 205.89591980]
[107.50000000 220.89591980]
[107.50000000 235.89591980]
[107.50000000 250.89591980]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[11 25]
[12 24]
[13 23]
[14 22]
[26 104]
[27 103]
[30 101]
[31 100]
[32 99]
[33 98]
[34 97]
[35 96]
[38 93]
[39 92]
[40 91]
[41 64]
[42 63]
[43 62]
[44 61]
[45 60]
[46 59]
[105 130]
[106 129]
[107 128]
[109 127]
[110 126]
[111 125]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
