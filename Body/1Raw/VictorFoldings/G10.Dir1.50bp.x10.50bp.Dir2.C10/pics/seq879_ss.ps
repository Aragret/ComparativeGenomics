%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:06 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGGCUCACAUCACCCCAUAAACAAAUAGGUUUGGUCCUAGCCUUUCUAUUAGCUCUUAGUAAGxxxxxxxxxxUCCUAGCCAUGCACUACUCACCAGACGCCUCAACCGCCUUUUCAUCAAUCGCCCACAUCACCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[92.34759521 107.34442902]
[92.65557098 92.34759521]
[92.96354675 77.35075378]
[93.27152252 62.35391617]
[93.57950592 47.35707855]
[93.88748169 32.36024094]
[94.19545746 17.36340141]
[94.50343323 2.36656380]
[94.81141663 -12.63027382]
[95.11939240 -27.62711143]
[95.42736816 -42.62395096]
[80.45899963 -43.63992691]
[65.55530548 -45.36164093]
[50.74955368 -47.78525543]
[36.07476807 -50.90536118]
[21.56370354 -54.71499634]
[7.24873734 -59.20565414]
[-6.83818913 -64.36732483]
[-20.66564178 -70.18847656]
[-34.20276642 -76.65613556]
[-47.41935730 -83.75585938]
[-60.28591919 -91.47180939]
[-72.77374268 -99.78676605]
[-84.85496521 -108.68217468]
[-96.50263214 -118.13819122]
[-107.69074249 -128.13371277]
[-118.39434052 -138.64643860]
[-128.58953857 -149.65289307]
[-138.25358582 -161.12855530]
[-147.36491394 -173.04777527]
[-155.90319824 -185.38397217]
[-163.84939575 -198.10963440]
[-171.18576050 -211.19635010]
[-177.89591980 -224.61491394]
[-183.96492004 -238.33540344]
[-189.37919617 -252.32717896]
[-194.12667847 -266.55902100]
[-198.19677734 -280.99920654]
[-201.58039856 -295.61547852]
[-204.27000427 -310.37524414]
[-206.25958252 -325.24554443]
[-207.54469299 -340.19320679]
[-208.12248230 -355.18487549]
[-207.99165344 -370.18713379]
[-207.15249634 -385.16644287]
[-205.60688782 -400.08941650]
[-203.35826111 -414.92276001]
[-200.41165161 -429.63336182]
[-196.77363586 -444.18841553]
[-192.45231628 -458.55541992]
[-187.45735168 -472.70230103]
[-181.79988098 -486.59753418]
[-175.49252319 -500.21008301]
[-168.54934692 -513.50958252]
[-160.98587036 -526.46636963]
[-152.81895447 -539.05151367]
[-144.06681824 -551.23693848]
[-134.74899292 -562.99542236]
[-124.88627625 -574.30078125]
[-114.50067139 -585.12774658]
[-103.61536407 -595.45220947]
[-92.25462341 -605.25109863]
[-80.44381714 -614.50250244]
[-68.20929718 -623.18591309]
[-55.57835388 -631.28179932]
[-42.57918167 -638.77215576]
[-29.24078178 -645.64031982]
[-15.59291840 -651.87091064]
[-1.66604626 -657.45001221]
[12.50875854 -662.36523438]
[26.89986610 -666.60552979]
[41.47516632 -670.16149902]
[56.20213318 -673.02520752]
[71.04790497 -675.19024658]
[85.97935486 -676.65179443]
[100.96316528 -677.40655518]
[115.96590424 -677.45288086]
[130.95408630 -676.79064941]
[145.89428711 -675.42132568]
[160.75314331 -673.34802246]
[175.49751282 -670.57531738]
[190.09449768 -667.10943604]
[204.51152039 -662.95806885]
[218.71640015 -658.13049316]
[232.67745972 -652.63751221]
[246.36354065 -646.49133301]
[259.74411011 -639.70568848]
[272.78927612 -632.29571533]
[285.46997070 -624.27795410]
[297.75790405 -615.67034912]
[309.62561035 -606.49200439]
[321.04663086 -596.76348877]
[331.99551392 -586.50640869]
[342.44775391 -575.74377441]
[352.38009644 -564.49957275]
[361.77035522 -552.79882812]
[370.59759521 -540.66766357]
[378.84207153 -528.13323975]
[386.48541260 -515.22338867]
[393.51058960 -501.96701050]
[399.90188599 -488.39367676]
[405.64505005 -474.53366089]
[410.72729492 -460.41787720]
[415.13726807 -446.07785034]
[418.86508179 -431.54556274]
[421.90249634 -416.85342407]
[424.24267578 -402.03424072]
[425.88040161 -387.12109375]
[426.81204224 -372.14724731]
[427.03552246 -357.14608765]
[426.55032349 -342.15112305]
[425.35754395 -327.19583130]
[423.45983887 -312.31350708]
[420.86141968 -297.53741455]
[417.56814575 -282.90054321]
[413.58728027 -268.43551636]
[408.92779541 -254.17460632]
[403.60000610 -240.14965820]
[397.61587524 -226.39195251]
[390.98870850 -212.93220520]
[383.73330688 -199.80043030]
[375.86584473 -187.02595520]
[367.40390015 -174.63725281]
[358.36633301 -162.66198730]
[348.77334595 -151.12687683]
[338.64630127 -140.05766296]
[328.00784302 -129.47904968]
[316.88168335 -119.41461945]
[305.29263306 -109.88685608]
[293.26657104 -100.91700745]
[280.83032227 -92.52509308]
[268.01165771 -84.72982788]
[254.83917236 -77.54862213]
[241.34223938 -70.99749756]
[227.55099487 -65.09105682]
[213.49621582 -59.84249496]
[199.20925903 -55.26351929]
[184.72200012 -51.36434937]
[170.06675720 -48.15367889]
[155.27624512 -45.63867950]
[140.38348389 -43.82495880]
[125.42166901 -42.71656418]
[110.42420959 -42.31597137]
[110.11622620 -27.31913376]
[109.80825043 -12.32229614]
[109.50027466 2.67454147]
[109.19229889 17.67137909]
[108.88431549 32.66821671]
[108.57633972 47.66505432]
[108.26836395 62.66189194]
[107.96038818 77.65872955]
[107.65240479 92.65557098]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 152]
[3 151]
[4 150]
[5 149]
[6 148]
[7 147]
[8 146]
[9 145]
[10 144]
[11 143]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
