%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:13 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCUAAACCAAACCACUUUCACCGCUACACGACCGGGGGUAUACUACGGUCAAUGCUCUGAAAxxxxxxxxxxCAGGAAUCUUCUUACUCAUCCGCUUCCACCCCCUAGCAGAAAAUAGCCCACUAAUCCAAACCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[136.62507629 435.17468262]
[135.70166016 420.20312500]
[134.77824402 405.23156738]
[133.85484314 390.26004028]
[132.93142700 375.28848267]
[132.00801086 360.31692505]
[131.08459473 345.34536743]
[128.32835388 330.60076904]
[123.78106689 316.30664062]
[119.23377228 302.01251221]
[114.68648529 287.71838379]
[110.13919067 273.42425537]
[105.59190369 259.13012695]
[100.66415405 273.29760742]
[89.80403137 283.64447021]
[75.41475677 287.88107300]
[60.68053818 285.06991577]
[48.86188889 275.83306885]
[42.57416534 262.21450806]
[43.20876694 247.22795105]
[50.62526321 234.18971252]
[63.18246460 225.98504639]
[78.10159302 224.42953491]
[92.08120728 229.86741638]
[102.02912903 241.09793091]
[100.79851532 226.14849854]
[99.56790161 211.19906616]
[90.52577209 203.10572815]
[89.41136932 190.61854553]
[97.37081146 180.41801453]
[88.86468506 168.19119263]
[95.73776245 153.94088745]
[94.81434631 138.96932983]
[93.89093018 123.99778748]
[92.96752167 109.02623749]
[82.75692749 120.01458740]
[67.89431763 122.04011536]
[55.11564255 114.18482971]
[50.21239090 100.00885773]
[55.40678787 85.93696594]
[68.34465027 78.34673309]
[83.16236115 80.67817688]
[93.14363098 91.87300110]
[94.37424469 76.92356873]
[95.60485840 61.97413254]
[96.83547211 47.02469635]
[98.06608582 32.07526398]
[99.29669189 17.12582779]
[86.81844330 10.42060852]
[77.87438202 -0.50838453]
[73.79482269 -13.98327065]
[75.16651917 -27.95158577]
[81.74854279 -40.29890060]
[92.51376343 -49.16888809]
[105.80904388 -53.24239349]
[107.34633636 -68.16340637]
[108.88362885 -83.08442688]
[106.69248962 -87.95825195]
[106.63815308 -92.70194244]
[108.30200958 -96.50998688]
[111.00262451 -98.86666107]
[113.45555115 -113.66474152]
[115.90848541 -128.46281433]
[106.12344360 -117.09387207]
[93.46606445 -109.04459381]
[79.02041626 -105.00439453]
[64.02371979 -105.31929779]
[49.76040268 -109.96233368]
[37.45207214 -118.53583527]
[28.15289879 -130.30551147]
[22.65932846 -144.26333618]
[21.44187164 -159.21385193]
[24.60479546 -173.87658691]
[31.87721062 -186.99572754]
[42.63624954 -197.44767761]
[55.96044159 -204.33721924]
[70.70860291 -207.07432556]
[85.61759949 -205.42454529]
[99.41052246 -199.52919006]
[110.90605164 -189.89317322]
[119.11962891 -177.34178162]
[123.34777832 -162.95002747]
[123.22804260 -147.94834900]
[131.12452698 -160.70159912]
[131.81100464 -176.50791931]
[145.08943176 -183.25569153]
[152.98591614 -196.00895691]
[150.72731018 -211.89222717]
[161.84149170 -223.46177673]
[177.80259705 -221.84243774]
[186.36665344 -208.27642822]
[180.96403503 -193.17042542]
[165.73916626 -188.11247253]
[157.84268188 -175.35920715]
[157.72102356 -160.46510315]
[143.87779236 -152.80513000]
[135.98130798 -140.05186462]
[130.70655823 -126.00988770]
[128.25363159 -111.21180725]
[125.80070496 -96.41373444]
[123.80464935 -81.54713440]
[122.26735687 -66.62611389]
[120.73006439 -51.70510101]
[134.47853088 -43.61661148]
[143.36787415 -30.30199242]
[145.58355713 -14.38807487]
[140.63372803 0.95891863]
[129.45724487 12.66333199]
[114.24613190 18.35644150]
[113.01551819 33.30587387]
[111.78490448 48.25531006]
[110.55429077 63.20474243]
[109.32367706 78.15418243]
[108.09307098 93.10361481]
[107.93907166 108.10282135]
[108.86248016 123.07437134]
[109.78589630 138.04592896]
[110.70931244 153.01747131]
[119.28148651 166.31515503]
[112.34236145 179.49459839]
[122.87250519 194.56599426]
[114.51733398 209.96844482]
[115.74794769 224.91787720]
[116.97856140 239.86732483]
[119.88603210 254.58283997]
[124.43332672 268.87698364]
[128.98062134 283.17111206]
[133.52790833 297.46524048]
[138.07519531 311.75936890]
[142.62248230 326.05349731]
[147.22009277 311.77548218]
[157.47096252 300.82467651]
[171.41465759 295.29537964]
[186.38456726 296.24499512]
[199.51779175 303.49197388]
[208.30270386 315.65029907]
[211.05923462 330.39483643]
[207.26023865 344.90579224]
[197.63223267 356.40802002]
[184.01649475 362.70184326]
[169.01696777 362.58355713]
[155.50218201 356.07583618]
[146.05615234 344.42196655]
[146.97955322 359.39352417]
[147.90296936 374.36505127]
[148.82638550 389.33660889]
[149.74980164 404.30816650]
[150.67321777 419.27972412]
[151.59663391 434.25125122]
[161.10105896 447.61532593]
[154.03454590 462.41384888]
[137.66648865 463.42337036]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 149]
[2 148]
[3 147]
[4 146]
[5 145]
[6 144]
[7 143]
[8 130]
[9 129]
[10 128]
[11 127]
[12 126]
[13 125]
[25 124]
[26 123]
[27 122]
[30 120]
[32 118]
[33 117]
[34 116]
[35 115]
[43 114]
[44 113]
[45 112]
[46 111]
[47 110]
[48 109]
[55 103]
[56 102]
[57 101]
[61 100]
[62 99]
[63 98]
[83 97]
[84 96]
[86 94]
[87 93]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
