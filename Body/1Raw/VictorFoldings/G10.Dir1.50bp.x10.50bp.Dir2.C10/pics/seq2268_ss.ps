%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:42 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGUAAAUUUAACUGUUAGUCCAAAGAGGAACAGCUCUUUGGACACUAGGAAAAAACCUUGUAGAGAxxxxxxxxxxCAUAGGAUGAAUAAUAGCAGUUCUACCGUACAACCCUAACAUAACCAUUCUUAAUUUAACUAUUCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[115.88265228 450.83108521]
[115.88265228 435.83108521]
[115.88265228 420.83108521]
[115.88265228 405.83108521]
[115.88265228 390.83108521]
[115.88265228 375.83108521]
[115.88265228 360.83108521]
[115.88265228 345.83108521]
[115.88265228 330.83108521]
[115.88265228 315.83108521]
[98.15259552 312.03622437]
[81.76873779 304.25308228]
[67.61515808 292.89807129]
[56.45637894 278.58044434]
[48.89611435 262.06961060]
[45.34459305 244.25378418]
[45.99629211 226.09214783]
[50.81930923 208.56329346]
[59.55688477 192.61244202]
[71.74109650 179.10047913]
[86.71788025 168.75752258]
[103.68219757 162.14344788]
[101.32104492 147.33044434]
[98.95989227 132.51745605]
[96.59873962 117.70445251]
[84.95088196 108.25313568]
[69.96917725 108.99377441]
[54.98747635 109.73441315]
[40.00577164 110.47505188]
[25.02406693 111.21569061]
[10.04236317 111.95633698]
[-4.93934107 112.69697571]
[-19.92104530 113.43761444]
[-34.90274811 114.17825317]
[-49.88445282 114.91889954]
[-60.30725479 126.79916382]
[-76.08313751 127.74636078]
[-87.85253906 117.19853210]
[-88.63289642 101.41352081]
[-77.96122742 89.75629425]
[-62.16884613 89.14286804]
[-50.62509155 99.93719482]
[-35.64339066 99.19654846]
[-20.66168594 98.45590973]
[-5.67998123 97.71527100]
[9.30172253 96.97463226]
[24.28342628 96.23399353]
[39.26512909 95.49334717]
[54.24683380 94.75270844]
[69.22853851 94.01206970]
[84.21024323 93.27143097]
[87.02894592 86.32125854]
[77.80957794 74.48896027]
[92.66635895 72.42091370]
[95.48506927 65.47074127]
[85.25148010 54.50380325]
[75.01789093 43.53686905]
[59.21637344 43.24105835]
[48.31250763 31.80072784]
[48.77536011 16.00321770]
[60.33033752 5.22091246]
[76.12207031 5.85076284]
[86.78160858 17.51908875]
[85.98483276 33.30327988]
[96.21842194 44.27021790]
[106.45200348 55.23715210]
[121.43370819 54.49651337]
[130.53570557 42.57369614]
[139.63771057 30.65087891]
[125.65746307 36.08710098]
[110.67330170 36.77628708]
[96.25305939 32.64633179]
[83.90554047 24.12935638]
[74.92269897 12.11650658]
[70.24441528 -2.13528895]
[70.36019897 -17.13484192]
[75.25791931 -31.31272316]
[84.42513275 -43.18547440]
[96.90264893 -51.51082993]
[111.38492584 -55.41769409]
[126.35665894 -54.49728394]
[140.25132751 -48.84590149]
[151.61511230 -39.05486298]
[159.25900269 -26.14862251]
[162.38319397 -11.47758198]
[160.66079712 3.42320180]
[154.27108765 16.99603271]
[166.79434204 8.73964596]
[179.31759644 0.48325944]
[191.84086609 -7.77312708]
[199.67164612 -24.41206169]
[217.19303894 -24.82727623]
[229.55073547 -33.32947540]
[227.29867554 -48.38569260]
[231.78875732 -62.86761856]
[242.07920837 -73.91871643]
[256.08978271 -79.38356781]
[271.02212524 -78.22814178]
[283.91857910 -70.73501587]
[296.27627563 -79.23721313]
[308.63397217 -87.73941803]
[312.95196533 -103.19044495]
[327.77990723 -109.31512451]
[341.74307251 -101.41511536]
[344.13009644 -85.55063629]
[333.10986328 -73.89155579]
[317.13616943 -75.38172150]
[304.77847290 -66.87952423]
[292.42077637 -58.37732315]
[294.80908203 -43.65449905]
[290.55068970 -29.29569054]
[280.43884277 -18.16411400]
[266.43957520 -12.50367451]
[251.30946350 -13.48674202]
[238.05293274 -20.97178078]
[225.69523621 -12.46958160]
[223.17301941 -0.60483927]
[212.90106201 6.57308578]
[200.09725952 4.75013494]
[187.57398987 13.00652122]
[175.05073547 21.26290703]
[162.52746582 29.51929474]
[151.56053162 39.75288010]
[142.45852661 51.67569733]
[133.35652161 63.59851456]
[111.41174316 115.34329987]
[113.77289581 130.15629578]
[116.13404083 144.96929932]
[118.49519348 159.78230286]
[130.67163086 159.98727417]
[142.66688538 162.07376099]
[154.19206238 165.99064636]
[164.96972656 171.64271545]
[174.74057007 178.89300537]
[183.26965332 187.56611633]
[190.35206604 197.45245361]
[195.81785583 208.31327820]
[199.53608704 219.88650513]
[201.41798401 231.89297485]
[201.41903687 244.04324341]
[199.54010010 256.04452515]
[195.82728577 267.60778809]
[190.37091064 278.45462036]
[183.30319214 288.32403564]
[174.79516602 296.97875977]
[165.05245972 304.21081543]
[154.31034851 309.84661865]
[142.82809448 313.75112915]
[130.88264465 315.83108521]
[130.88264465 330.83108521]
[130.88264465 345.83108521]
[130.88264465 360.83108521]
[130.88264465 375.83108521]
[130.88264465 390.83108521]
[130.88264465 405.83108521]
[130.88264465 420.83108521]
[130.88264465 435.83108521]
[130.88264465 450.83108521]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 158]
[2 157]
[3 156]
[4 155]
[5 154]
[6 153]
[7 152]
[8 151]
[9 150]
[10 149]
[22 129]
[23 128]
[24 127]
[25 126]
[26 51]
[27 50]
[28 49]
[29 48]
[30 47]
[31 46]
[32 45]
[33 44]
[34 43]
[35 42]
[55 66]
[56 65]
[57 64]
[67 125]
[68 124]
[69 123]
[87 122]
[88 121]
[89 120]
[90 119]
[92 116]
[93 115]
[99 109]
[100 108]
[101 107]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
