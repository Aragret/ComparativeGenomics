%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:26 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGAGUCACAGCCCUAUACUCCCUCUACAUAUUUACCACAACACAAUGGGGCUCACUCACCCACCxxxxxxxxxxAACAUUUCCCCCGCAUCCCCCUUCCAAACAACAAUCCCCCUCUACCUAAAACUCACAGCCCUCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[213.62135315 128.46253967]
[199.55506897 123.25295258]
[185.48878479 118.04337311]
[171.42250061 112.83379364]
[157.35623169 107.62422180]
[142.52920532 105.35279846]
[127.54845428 106.11254120]
[112.56770325 106.87227631]
[100.72549438 114.30555725]
[88.19203186 108.10846710]
[73.21128845 108.86820984]
[58.23053741 109.62794495]
[43.24979019 110.38768005]
[36.38561630 118.92037201]
[26.15822029 122.16800690]
[16.05265808 119.27929688]
[9.37312889 111.45188141]
[-5.62610102 111.60389709]
[-20.62532997 111.75590515]
[-35.62456131 111.90791321]
[-50.62379074 112.05992126]
[-65.62301636 112.21193695]
[-80.62225342 112.36394501]
[-95.62148285 112.51595306]
[-98.59704590 127.27534485]
[-104.57659912 141.09339905]
[-113.29874420 153.36605835]
[-124.38217926 163.55679321]
[-137.34239197 171.22010803]
[-151.61280823 176.02102661]
[-166.56961060 177.74964905]
[-181.55891418 176.33039856]
[-195.92547607 171.82534790]
[-209.04124451 164.43141174]
[-220.33287048 154.47184753]
[-229.30670166 142.38201904]
[-235.57046509 128.69046021]
[-238.85032654 113.99568939]
[-239.00291443 98.94010925]
[-236.02154541 84.18188477]
[-230.03654480 70.36618805]
[-221.30958557 58.09696960]
[-210.22213745 47.91059494]
[-197.25891113 40.25236893]
[-182.98660278 35.45707321]
[-168.02912903 33.73433685]
[-153.04037476 35.15947342]
[-138.67558289 39.67018127]
[-125.56272125 47.06926727]
[-114.27502441 57.03328323]
[-105.30594635 69.12664032]
[-99.04756927 82.82067108]
[-95.77349091 97.51672363]
[-80.77426147 97.36471558]
[-65.77503204 97.21270752]
[-50.77579880 97.06069183]
[-35.77656937 96.90868378]
[-20.77733994 96.75667572]
[-5.77811098 96.60466766]
[9.22111893 96.45265198]
[25.03980064 85.39225006]
[42.49005127 95.40693665]
[57.47079849 94.64720154]
[72.45154572 93.88745880]
[87.43229675 93.12772369]
[99.27450562 85.69444275]
[111.80796814 91.89153290]
[126.78871155 91.13179016]
[141.76947021 90.37205505]
[128.53094482 83.31927490]
[117.76134491 72.87821960]
[110.30192566 59.86449051]
[106.73538208 45.29466629]
[107.34031677 30.30686951]
[112.06947327 16.07187653]
[120.55343628 3.70165372]
[132.12947083 -5.83749294]
[145.89332581 -11.80041122]
[160.76982117 -13.72130585]
[175.59687805 -11.45012665]
[189.21629333 -5.16428709]
[200.56416321 4.64519310]
[208.75404358 17.21204376]
[213.14619446 31.55460358]
[213.39752197 46.55249786]
[209.48837280 61.03416443]
[201.72413635 73.86836243]
[190.71131897 84.05254364]
[177.31016541 90.79117584]
[162.56581116 93.55793762]
[176.63208008 98.76751709]
[190.69836426 103.97709656]
[204.76464844 109.18667603]
[218.83093262 114.39624786]
[225.42016602 100.90697479]
[233.31976318 88.14080811]
[242.45123291 76.22464752]
[252.72380066 65.27690887]
[264.03536987 55.40640259]
[276.27352905 46.71123505]
[289.31665039 39.27781677]
[303.03509521 33.18003464]
[317.29251099 28.47848701]
[331.94720459 25.21990204]
[346.85354614 23.43666649]
[361.86337280 23.14650345]
[376.82748413 24.35229683]
[391.59716797 27.04206276]
[406.02563477 31.18906784]
[419.96951294 36.75209808]
[433.29016113 43.67586136]
[445.85525513 51.89154434]
[457.53985596 61.31749344]
[468.22784424 71.86003113]
[477.81304932 83.41437531]
[486.20013428 95.86569214]
[493.30578613 109.09022522]
[499.05935669 122.95655060]
[503.40371704 137.32684326]
[506.29562378 152.05828857]
[507.70635986 167.00447083]
[507.62188721 182.01684570]
[506.04309082 196.94621277]
[502.98562622 211.64419556]
[498.47988892 225.96470642]
[492.57067871 239.76541138]
[485.31668091 252.90917969]
[476.79003906 265.26535034]
[467.07546997 276.71112061]
[456.26953125 287.13275146]
[444.47961426 296.42663574]
[431.82290649 304.50042725]
[418.42517090 311.27389526]
[404.41961670 316.67968750]
[389.94540405 320.66409302]
[375.14636230 323.18753052]
[360.16964722 324.22488403]
[345.16403198 323.76586914]
[330.27871704 321.81506348]
[315.66162109 318.39178467]
[301.45797729 313.53015137]
[287.80902100 307.27841187]
[274.85034180 299.69869995]
[262.71078491 290.86639404]
[251.51098633 280.86926270]
[241.36222839 269.80664062]
[232.36541748 257.78851318]
[224.60993958 244.93428040]
[218.17288208 231.37171936]
[213.11824036 217.23562622]
[209.49623108 202.66648865]
[207.34284973 187.80911255]
[206.67950439 172.81115723]
[207.51280212 157.82168579]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 94]
[2 93]
[3 92]
[4 91]
[5 90]
[6 69]
[7 68]
[8 67]
[10 65]
[11 64]
[12 63]
[13 62]
[17 60]
[18 59]
[19 58]
[20 57]
[21 56]
[22 55]
[23 54]
[24 53]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
