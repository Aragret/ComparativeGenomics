%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:39 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGACAUACUUCCCCCAUUAUUCCUAGAACCAGGCGACCUGCGACUCCUUGACGUUGACAAUCxxxxxxxxxxUGGCUAUCAUCACCCGAUGAGGCAACCAGCCAGAACGCCUGAACGCAGGCACAUACUUCCCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[-2.74052024 470.75347900]
[-2.74052024 455.75347900]
[-2.74052024 440.75347900]
[-2.74052024 425.75347900]
[-2.74052024 410.75347900]
[-2.74052024 395.75347900]
[-2.74052024 380.75347900]
[-2.74052024 365.75347900]
[-2.74052024 350.75347900]
[-2.74052024 335.75347900]
[-8.73393631 331.24472046]
[-15.92531967 344.40844727]
[-22.52436066 357.87890625]
[-37.49895859 357.00634766]
[-42.48881531 342.86062622]
[-31.37528038 332.78567505]
[-20.72076988 322.22720337]
[-26.71418571 317.71841431]
[-41.12639999 321.87631226]
[-55.49458694 326.18389893]
[-69.81718445 330.64071655]
[-69.98777771 345.76770020]
[-74.82644653 360.10098267]
[-83.85913849 372.23629761]
[-96.20092773 380.98474121]
[-110.64269257 385.48925781]
[-125.76956940 385.30853271]
[-140.09959412 380.46023560]
[-152.22883606 371.41943359]
[-160.96902466 359.07177734]
[-165.46385193 344.62698364]
[-165.27299500 329.50024414]
[-160.41511536 315.17346191]
[-151.36616516 303.05029297]
[-139.01266479 294.31838989]
[-124.56488037 289.83322144]
[-109.43825531 290.03424072]
[-95.11474609 294.90170288]
[-82.99761963 303.95877075]
[-74.27400208 316.31811523]
[-59.95140076 311.86129761]
[-54.46363068 306.83834839]
[-45.28429031 307.46411133]
[-30.87207222 303.30621338]
[-19.27073097 293.79785156]
[-12.36373329 280.48269653]
[-5.45673466 267.16754150]
[1.45026398 253.85238647]
[8.35726261 240.53723145]
[15.26426125 227.22207642]
[11.90995884 215.55776978]
[17.60853767 204.38883972]
[29.77637100 199.98455811]
[36.95887756 186.81596375]
[31.62169266 175.04689026]
[34.09422302 162.16430664]
[43.69031525 152.93701172]
[57.04541016 150.91241455]
[57.64441299 143.49710083]
[64.79322815 137.70518494]
[72.51731110 124.84677887]
[80.24139404 111.98837280]
[87.96548462 99.12997437]
[91.52024078 84.55726624]
[82.93721771 71.26658630]
[89.86558533 58.08148193]
[88.92996216 43.11068726]
[74.64370728 37.83594131]
[63.74253464 27.20183372]
[58.11513138 13.05078316]
[58.73648071 -2.16545224]
[65.49893188 -15.81056786]
[77.23084259 -25.52046585]
[91.89959717 -29.61284637]
[106.96373749 -27.37867928]
[119.81331635 -19.20504951]
[128.22206116 -6.50808764]
[130.73310852 8.51238251]
[126.91141510 23.25397301]
[117.41909027 35.16261292]
[103.90074921 42.17506027]
[104.83638000 57.14585114]
[113.35247803 69.36572266]
[106.49103546 83.62164307]
[113.55343628 86.14601898]
[127.67823792 91.19477844]
[134.74064636 93.71915436]
[144.95411682 82.73348999]
[155.16760254 71.74782562]
[165.38108826 60.76216125]
[175.59455872 49.77649689]
[178.73016357 33.67990875]
[194.32388306 28.60372162]
[206.33425903 39.76987839]
[202.40602112 55.69159698]
[186.58023071 59.98997498]
[176.36674500 70.97563934]
[166.15325928 81.96130371]
[155.93978882 92.94696808]
[145.72630310 103.93263245]
[153.71621704 116.62756348]
[168.03881836 112.17074585]
[182.36141968 107.71393585]
[191.06555176 94.23737335]
[207.04258728 92.78348541]
[218.03631592 104.46755981]
[215.61328125 120.32658386]
[201.63223267 128.19485474]
[186.81823730 122.03652954]
[172.49563599 126.49334717]
[158.17303467 130.95016479]
[131.88630676 133.47413635]
[111.32478333 124.03227997]
[100.82388306 106.85405731]
[93.09980011 119.71246338]
[85.37571716 132.57086182]
[77.65162659 145.42926025]
[70.06172180 158.36732483]
[74.96501160 175.12724304]
[66.42613220 189.97216797]
[50.12746048 193.99847412]
[42.94495392 207.16705322]
[43.84515381 225.52923584]
[28.57941628 234.12907410]
[21.67241859 247.44422913]
[14.76541996 260.75936890]
[7.85842133 274.07455444]
[0.95142257 287.38970947]
[-5.95557594 300.70486450]
[6.48951101 292.33108521]
[18.86758804 283.85858154]
[33.65685654 281.35308838]
[48.13484573 285.27584839]
[59.63638306 294.90469360]
[66.04421234 308.46710205]
[66.17874908 323.46652222]
[60.01523972 337.14172363]
[48.68827820 346.97531128]
[34.28298187 351.15713501]
[19.45086288 348.91723633]
[12.25947952 335.75347900]
[12.25947952 350.75347900]
[12.25947952 365.75347900]
[12.25947952 380.75347900]
[12.25947952 395.75347900]
[12.25947952 410.75347900]
[12.25947952 425.75347900]
[12.25947952 440.75347900]
[12.25947952 455.75347900]
[12.25947952 470.75347900]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[18 44]
[19 43]
[20 41]
[21 40]
[45 129]
[46 128]
[47 127]
[48 126]
[49 125]
[50 124]
[53 122]
[54 121]
[58 118]
[60 117]
[61 116]
[62 115]
[63 114]
[64 84]
[66 82]
[67 81]
[87 100]
[88 99]
[89 98]
[90 97]
[91 96]
[101 111]
[102 110]
[103 109]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
