%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:41 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGUUAUACCCUUCCCGUACUAAUUAAUCCCCUGGCCCAACCCGUCAUCUACUCUACCAUCUUUxxxxxxxxxxUACCGCUAACAACCUAUUCCAACUGUUCAUCGGCUGAGAGGGCGUAGGAAUUAUAUCCUUCCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[99.18551636 397.02670288]
[99.18551636 382.02670288]
[99.18551636 367.02670288]
[99.18551636 352.02670288]
[99.18551636 337.02670288]
[99.18551636 322.02670288]
[99.18551636 307.02670288]
[99.18551636 292.02670288]
[99.18551636 277.02670288]
[99.18551636 262.02670288]
[83.08409882 257.19885254]
[69.22252655 247.65840149]
[58.94114304 234.31463623]
[53.23816299 218.44517517]
[52.67276001 201.57374573]
[57.31026840 185.32380676]
[66.71484375 171.26240540]
[79.99038696 160.74897766]
[95.86594391 154.80397034]
[94.94252777 139.83242798]
[94.01911163 124.86087036]
[93.09570312 109.88932037]
[91.86508942 94.93988800]
[90.32779694 80.01886749]
[82.91557312 93.05953979]
[70.64726257 101.69020844]
[55.86908722 104.26033020]
[41.40727234 100.27838898]
[30.02753448 90.50589752]
[23.90617180 76.81177521]
[24.21385002 61.81493378]
[30.89172935 48.38340759]
[42.66271210 39.08588028]
[57.27567673 35.70044327]
[71.93600464 38.87453461]
[83.84000397 48.00113297]
[90.71146393 61.33616257]
[92.86004639 46.49083710]
[95.00862885 31.64551544]
[97.15720367 16.80019379]
[98.84760284 1.89574564]
[100.07821655 -13.05368900]
[101.30883026 -28.00312424]
[102.53943634 -42.95255661]
[87.75036621 -45.51958084]
[73.25093842 -49.40196228]
[59.15790558 -54.56844711]
[45.58472824 -60.97743607]
[32.64069748 -68.57732391]
[20.43003082 -77.30692291]
[9.05104542 -87.09593964]
[-1.40464103 -97.86557007]
[-10.85284424 -109.52909088]
[-19.21749115 -121.99259186]
[-26.43123245 -135.15573120]
[-32.43598938 -148.91252136]
[-37.18340683 -163.15219116]
[-40.63526917 -177.76008606]
[-42.76377869 -192.61862183]
[-43.55179977 -207.60812378]
[-42.99298477 -222.60792542]
[-41.09183502 -237.49723816]
[-37.86365891 -252.15620422]
[-33.33444595 -266.46676636]
[-27.54066658 -280.31372070]
[-20.52896500 -293.58560181]
[-12.35580063 -306.17550659]
[-3.08697748 -317.98205566]
[7.20287418 -328.91024780]
[18.43090630 -338.87207031]
[30.50671387 -347.78726196]
[43.33306885 -355.58413696]
[56.80669785 -362.19982910]
[70.81912231 -367.58111572]
[85.25750732 -371.68466187]
[100.00561523 -374.47744751]
[114.94469452 -375.93695068]
[129.95446777 -376.05145264]
[144.91406250 -374.82000732]
[159.70306396 -372.25253296]
[174.20236206 -368.36968994]
[188.29524231 -363.20278931]
[201.86822510 -356.79336548]
[214.81202698 -349.19308472]
[227.02243042 -340.46313477]
[238.40110779 -330.67376709]
[248.85647583 -319.90380859]
[258.30432129 -308.23999023]
[266.66857910 -295.77624512]
[273.88192749 -282.61288452]
[279.88626099 -268.85592651]
[284.63323975 -254.61610413]
[288.08465576 -240.00808716]
[290.21270752 -225.14950562]
[291.00027466 -210.15997314]
[290.44100952 -195.16018677]
[288.53939819 -180.27093506]
[285.31079102 -165.61206055]
[280.78112793 -151.30163574]
[274.98693848 -137.45484924]
[267.97482300 -124.18319702]
[259.80126953 -111.59355164]
[250.53208923 -99.78726196]
[240.24189758 -88.85939026]
[229.01356506 -78.89792633]
[216.93748474 -69.98307800]
[204.11088562 -62.18661880]
[190.63705444 -55.57132721]
[176.62448120 -50.19046402]
[162.18595886 -46.08734894]
[147.43777466 -43.29502869]
[132.49864197 -41.83597565]
[117.48887634 -41.72194672]
[116.25826263 -26.77251053]
[115.02764893 -11.82307625]
[113.79703522 3.12635803]
[115.84125519 6.07056856]
[116.52603149 10.16943264]
[115.31627655 14.75660133]
[112.00252533 18.94877243]
[109.85395050 33.79409409]
[107.70536804 48.63941956]
[105.55679321 63.48474121]
[105.24880981 78.48157501]
[106.78610229 93.40259552]
[110.04649353 97.59643555]
[110.69004059 103.32602692]
[108.06725311 108.96591187]
[108.99066162 123.93746185]
[109.91407776 138.90901184]
[110.83749390 153.88055420]
[123.86476898 156.53727722]
[135.85551453 162.25665283]
[146.10221863 170.69563293]
[154.00161743 181.35079956]
[159.09022522 193.58850098]
[161.07153320 206.68246460]
[159.83328247 219.85693359]
[155.45381165 232.33264160]
[148.19706726 243.37281799]
[138.49682617 252.32684326]
[126.93064117 258.66842651]
[114.18551636 262.02670288]
[114.18551636 277.02670288]
[114.18551636 292.02670288]
[114.18551636 307.02670288]
[114.18551636 322.02670288]
[114.18551636 337.02670288]
[114.18551636 352.02670288]
[114.18551636 367.02670288]
[114.18551636 382.02670288]
[114.18551636 397.02670288]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 152]
[2 151]
[3 150]
[4 149]
[5 148]
[6 147]
[7 146]
[8 145]
[9 144]
[10 143]
[19 131]
[20 130]
[21 129]
[22 128]
[23 125]
[24 124]
[37 123]
[38 122]
[39 121]
[40 120]
[41 116]
[42 115]
[43 114]
[44 113]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
