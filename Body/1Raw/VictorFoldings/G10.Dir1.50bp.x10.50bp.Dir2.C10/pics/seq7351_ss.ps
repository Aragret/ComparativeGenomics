%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:13 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCUACCACACAUUCGAAGAACCCGUAUACAUAAAAUCUAGACAAAAAAGGAAGGAAUCGAACxxxxxxxxxxUCAAAACCCCCUCCCCAUGCUUACAAGCAAGUACAGCAAUCAACCCUCAACUAUCACACAUCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[88.26507568 102.84632111]
[74.70317841 96.43734741]
[61.14128494 90.02837372]
[47.57938766 83.61939240]
[34.01749420 77.21041870]
[20.45559692 70.80144501]
[6.89370012 64.39247131]
[-6.66819620 57.98349380]
[-20.23009300 51.57451630]
[-33.79198837 45.16554260]
[-41.26191330 58.18246841]
[-49.74242783 70.56475067]
[-59.17991257 82.23410797]
[-69.51470184 93.11676788]
[-80.68145752 103.14391327]
[-92.60958099 112.25215149]
[-105.22364807 120.38390350]
[-118.44391632 127.48775482]
[-132.18679810 133.51878357]
[-146.36540222 138.43887329]
[-160.89009094 142.21690369]
[-175.66902161 144.82899475]
[-190.60877991 146.25863647]
[-205.61488342 146.49678040]
[-220.59248352 145.54191589]
[-235.44686890 143.40010071]
[-250.08412170 140.08486938]
[-264.41171265 135.61717224]
[-278.33905029 130.02526855]
[-291.77807617 123.34449005]
[-304.64382935 115.61710358]
[-316.85494995 106.89194489]
[-328.33425903 97.22418976]
[-339.00918579 86.67495728]
[-348.81219482 75.31094360]
[-357.68136597 63.20399094]
[-365.56057739 50.43065643]
[-372.40002441 37.07168961]
[-378.15646362 23.21155548]
[-382.79351807 8.93788147]
[-386.28186035 -5.65908861]
[-388.59945679 -20.48706627]
[-389.73162842 -35.45230103]
[-389.67120361 -50.46018219]
[-388.41857910 -65.41581726]
[-385.98168945 -80.22465515]
[-382.37594604 -94.79306793]
[-377.62411499 -109.02894592]
[-371.75625610 -122.84227753]
[-364.80944824 -136.14575195]
[-356.82766724 -148.85522461]
[-347.86129761 -160.89038086]
[-337.96710205 -172.17509460]
[-327.20761108 -182.63804626]
[-315.65081787 -192.21305847]
[-303.36984253 -200.83961487]
[-290.44229126 -208.46316528]
[-276.94992065 -215.03552246]
[-262.97802734 -220.51512146]
[-248.61491394 -224.86730957]
[-233.95144653 -228.06459045]
[-219.08029175 -230.08674622]
[-204.09550476 -230.92097473]
[-189.09179688 -230.56201172]
[-174.16403198 -229.01214600]
[-159.40660095 -226.28114319]
[-144.91281128 -222.38629150]
[-130.77427673 -217.35220337]
[-117.08039856 -211.21072388]
[-103.91775513 -204.00065613]
[-91.36956787 -195.76760864]
[-79.51516724 -186.56362915]
[-68.42951202 -176.44689941]
[-58.18267059 -165.48138428]
[-48.83944702 -153.73641968]
[-40.45890045 -141.28625488]
[-33.09402466 -128.20960999]
[-26.79137611 -114.58915710]
[-21.59080696 -100.51101685]
[-17.52519798 -86.06418610]
[-14.62024975 -71.34000397]
[-12.89433193 -56.43157578]
[-12.35835552 -41.43315125]
[-13.01570892 -26.43955231]
[-14.86223602 -11.54557896]
[-17.88626289 3.15460324]
[-22.06866837 17.56805420]
[-27.38301277 31.60364532]
[-13.82111645 38.01262283]
[-0.25922042 44.42159653]
[13.30267620 50.83057404]
[26.86457253 57.23954773]
[40.42646790 63.64852524]
[53.98836517 70.05750275]
[67.55026245 76.46647644]
[81.11215973 82.87545013]
[94.67405701 89.28442383]
[101.10807800 88.15474701]
[107.13743591 90.56851196]
[121.72118378 87.05934143]
[136.30493164 83.55017853]
[150.88868713 80.04100800]
[165.43563843 76.38230133]
[179.94425964 72.57444763]
[194.45289612 68.76658630]
[202.20777893 54.99570465]
[217.45106506 50.82227325]
[231.13919067 58.72232437]
[235.15122986 74.00888824]
[227.10690308 87.61272430]
[211.77877808 91.46292114]
[198.26074219 83.27521515]
[183.75212097 87.08306885]
[169.24349976 90.89093018]
[163.53695679 95.66037750]
[154.39785767 94.62476349]
[139.81410217 98.13392639]
[125.23035431 101.64309692]
[110.64660645 105.15225983]
[124.89437866 109.84275818]
[138.12818909 116.90436554]
[149.95687866 126.12837219]
[160.03082275 137.24212646]
[168.05227661 149.91716003]
[173.78413391 163.77882385]
[177.05700684 178.41740417]
[177.77412415 193.40025330]
[175.91432190 208.28451538]
[171.53256226 222.63024902]
[164.75833130 236.01344299]
[155.79188538 248.03854370]
[144.89823914 258.35009766]
[132.39936829 266.64337158]
[118.66469574 272.67318726]
[104.10018158 276.26135254]
[89.13631439 277.30184937]
[74.21537018 275.76385498]
[59.77836609 271.69284058]
[46.25202179 265.20916748]
[34.03612900 256.50445557]
[23.49175453 245.83599854]
[14.93055534 233.51910400]
[8.60557556 219.91783142]
[4.70376015 205.43418884]
[3.34043622 190.49627686]
[4.55589867 175.54560852]
[8.31422234 161.02406311]
[14.50432205 147.36088562]
[22.94323921 134.95988464]
[33.38154602 124.18761444]
[45.51071548 115.36246490]
[58.97224808 108.74528503]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 97]
[2 96]
[3 95]
[4 94]
[5 93]
[6 92]
[7 91]
[8 90]
[9 89]
[10 88]
[99 119]
[100 118]
[101 117]
[102 116]
[103 114]
[104 113]
[105 112]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
