%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:23 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGUAACCUUUUAAGUUAAAGAUUAAGAGAACCAACACCUCUUUACAGUGAAAUGCCCCAACUxxxxxxxxxxUAGCCGCAGACCUCCUCAUUCUAACCUGAAUCGGAGGACAACCAGUAAGCUACCCUUUUACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[105.65789795 257.41534424]
[105.65789795 242.41535950]
[105.65789795 227.41535950]
[105.65789795 212.41535950]
[105.65789795 197.41535950]
[105.65789795 182.41535950]
[105.65789795 167.41535950]
[105.65789795 152.41535950]
[105.65789795 137.41535950]
[105.65789795 122.41535950]
[92.13371277 115.92719269]
[80.43408203 125.31435394]
[68.73445892 134.70150757]
[62.81275940 149.37271118]
[48.04372025 151.30267334]
[36.34409714 160.68983459]
[24.64447403 170.07699585]
[12.94484997 179.46415710]
[11.47137260 195.19961548]
[-0.75031865 205.21987915]
[-16.46931076 203.58012390]
[-26.35980606 191.25317383]
[-24.55394745 175.55239868]
[-12.12311935 165.79278564]
[3.55768847 167.76454163]
[15.25731182 158.37738037]
[26.95693588 148.99021912]
[38.65655899 139.60305786]
[43.74142456 125.60328674]
[59.34730148 123.00189209]
[71.04692078 113.61473083]
[82.74654388 104.22756958]
[78.73880768 89.77288055]
[63.87575912 87.75054169]
[49.01271439 85.72821045]
[34.14966583 83.70587921]
[24.21383095 95.50768280]
[9.46800041 100.04244232]
[-5.38248301 95.86312866]
[-15.59888458 84.30333710]
[-17.92118835 69.05176544]
[-11.60835361 54.97513199]
[1.32521474 46.56523514]
[16.75246239 46.50564575]
[29.75061226 54.81538010]
[36.17200089 68.84282684]
[51.03504944 70.86516571]
[65.89809418 72.88749695]
[80.76113892 74.90983582]
[94.35208893 68.56270599]
[102.34201050 55.86777496]
[110.33192444 43.17284393]
[118.32183838 30.47791290]
[118.56874084 12.09534264]
[134.34117126 4.46445560]
[142.06524658 -8.39394665]
[135.80572510 -17.29914856]
[133.81829834 -28.52588844]
[136.90312195 -40.03752899]
[144.89921570 -49.56013107]
[156.63911438 -55.02958679]
[156.01513672 -70.01660156]
[155.39115906 -85.00361633]
[140.66464233 -88.28873444]
[127.29061127 -95.27426910]
[116.18093872 -105.48395538]
[108.09310150 -118.22166443]
[103.57853699 -132.61892700]
[102.94505310 -147.69410706]
[106.23585510 -162.41935730]
[113.22655487 -175.79069519]
[123.44052887 -186.89642334]
[136.18136597 -194.97933960]
[150.58036804 -199.48834229]
[165.65579224 -200.11599731]
[180.37976074 -196.81951904]
[193.74839783 -189.82365417]
[204.85018921 -179.60539246]
[212.92817688 -166.86145020]
[217.43162537 -152.46069336]
[218.05346680 -137.38504028]
[214.75129700 -122.66232300]
[207.75027466 -109.29640198]
[197.52772522 -98.19856262]
[184.78065491 -90.12548065]
[170.37817383 -85.62759399]
[171.00215149 -70.64057922]
[171.62612915 -55.65356445]
[184.23725891 -47.53202057]
[194.12269592 -59.88470459]
[208.82388306 -57.49211502]
[222.72644043 -63.12407303]
[236.62899780 -68.75602722]
[250.53153992 -74.38798523]
[264.43411255 -80.01994324]
[270.19888306 -91.60532379]
[281.94546509 -95.99137115]
[293.15048218 -91.32718658]
[307.16720581 -96.66869354]
[321.18389893 -102.01020813]
[335.20062256 -107.35172272]
[341.43429565 -121.87469482]
[356.14224243 -127.65843964]
[370.59851074 -121.27156067]
[376.22644043 -106.50328064]
[369.68707275 -92.11536407]
[354.86010742 -86.64389801]
[340.54214478 -93.33500671]
[326.52542114 -87.99349213]
[312.50869751 -82.65198517]
[298.49200439 -77.31047058]
[288.20535278 -63.12649155]
[270.06607056 -66.11738586]
[256.16351318 -60.48543167]
[242.26094055 -54.85347366]
[228.35839844 -49.22151566]
[214.45584106 -43.58956146]
[205.56480408 -31.63971329]
[189.86921692 -33.62946701]
[180.74613953 -5.74844265]
[154.92366028 -0.66986173]
[147.19956970 12.18854046]
[149.81977844 24.03935623]
[143.43562317 34.83109665]
[131.01676941 38.46783066]
[123.02685547 51.16275787]
[115.03694153 63.85768890]
[107.04701996 76.55261993]
[120.14510345 69.24234009]
[133.50306702 62.41850662]
[148.44660950 61.11822510]
[162.78242493 65.53234100]
[174.40641785 75.01298523]
[181.61253357 88.16867065]
[183.34309387 103.06851196]
[179.34411621 117.52562714]
[170.20252991 129.41812134]
[157.26005554 137.00050354]
[142.41630554 139.15991211]
[127.84928131 135.57910156]
[120.65789795 122.41535950]
[120.65789795 137.41535950]
[120.65789795 152.41535950]
[120.65789795 167.41535950]
[120.65789795 182.41535950]
[120.65789795 197.41535950]
[120.65789795 212.41535950]
[120.65789795 227.41535950]
[120.65789795 242.41535950]
[120.65789795 257.41534424]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[11 32]
[12 31]
[13 30]
[15 28]
[16 27]
[17 26]
[18 25]
[33 49]
[34 48]
[35 47]
[36 46]
[50 128]
[51 127]
[52 126]
[53 125]
[55 122]
[56 121]
[61 88]
[62 87]
[63 86]
[89 119]
[91 117]
[92 116]
[93 115]
[94 114]
[95 113]
[98 111]
[99 110]
[100 109]
[101 108]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
