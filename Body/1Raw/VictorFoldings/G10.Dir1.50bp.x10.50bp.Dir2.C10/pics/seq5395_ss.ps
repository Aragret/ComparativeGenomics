%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:11 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGUACUCAACUUAAACUCCAGCACCACGACCCUACUACUAUCUCGCACCUGAAACAAGCUAAxxxxxxxxxxAAAGCUCACAAGAACUGCUAACUCAUGCCCCCAUGUCUAACAACAUGGCUUUCUCAACUUCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[107.85060883 289.33850098]
[107.85060883 274.33850098]
[107.85060883 259.33850098]
[107.85060883 244.33850098]
[107.85060883 229.33850098]
[107.85060883 214.33850098]
[107.85060883 199.33850098]
[107.85060883 184.33850098]
[107.85060883 169.33850098]
[107.85060883 154.33850098]
[92.41560364 153.48799133]
[78.07830811 148.41134644]
[65.95104980 139.65055847]
[56.93254471 128.02709961]
[51.64181900 114.56655121]
[50.37689972 100.40876007]
[53.10108566 86.71165466]
[59.45700836 74.55652618]
[48.15800095 64.69080353]
[36.85899734 54.82508087]
[24.49086952 61.73398209]
[10.58732986 64.29054260]
[-3.36942101 62.24208069]
[-15.89789391 55.82577133]
[-25.67456627 45.74139404]
[-31.67369270 33.07503128]
[-33.27490616 19.18214035]
[-47.91840744 15.93131351]
[-62.56190872 12.68048763]
[-70.80767822 22.17384338]
[-82.25160980 27.20740700]
[-94.67671204 26.87361908]
[-105.70462036 21.29824257]
[-113.25080872 11.60444450]
[-115.91860962 -0.31291348]
[-130.41421509 -4.17007303]
[-144.90980530 -8.02723217]
[-154.44026184 3.85091162]
[-167.98101807 10.81997871]
[-183.18605042 11.67253590]
[-197.42098999 6.26087189]
[-208.21957397 -4.47740889]
[-213.71084595 -18.68183517]
[-212.94343567 -33.89140320]
[-206.05030823 -47.47096634]
[-194.22570801 -57.06777573]
[-179.51834106 -61.01913452]
[-164.47633362 -58.64044571]
[-151.70582581 -50.34382248]
[-143.41937256 -37.56671524]
[-141.05264282 -22.52282906]
[-126.55705261 -18.66567039]
[-112.06145477 -14.80850983]
[-98.94817352 -26.56052017]
[-81.25437164 -28.15110970]
[-65.98889160 -18.76241684]
[-59.31108475 -1.96301341]
[-44.66758347 1.28781235]
[-30.02408218 4.53863811]
[-26.74367905 -1.79631197]
[-22.45743942 -7.49901295]
[-17.28423882 -12.41130638]
[-11.36754799 -16.39695740]
[-4.87146044 -19.34542847]
[2.02386427 -21.17494583]
[2.02386427 -36.17494583]
[2.02386427 -51.17494583]
[2.02386427 -66.17494202]
[-12.03332329 -71.95974731]
[-22.80319595 -82.68720245]
[-28.64342690 -96.72145081]
[-28.66342354 -111.92237091]
[-22.86013603 -125.97193909]
[-12.11852264 -136.72769165]
[1.92339659 -142.54945374]
[17.12433243 -142.54945374]
[31.16625214 -136.72769165]
[41.90786362 -125.97193909]
[47.71115112 -111.92237091]
[47.69115448 -96.72145081]
[41.85092545 -82.68720245]
[31.08105087 -71.95974731]
[17.02386475 -66.17494202]
[17.02386475 -51.17494583]
[17.02386475 -36.17494583]
[17.02386475 -21.17494583]
[35.91537857 -12.94789982]
[48.84407806 3.19679451]
[52.77292252 23.58325386]
[46.72472000 43.52607346]
[58.02372360 53.39179611]
[69.32273102 63.25751877]
[82.98989868 55.25895309]
[98.51888275 52.15743637]
[114.20997620 54.29243851]
[128.34574890 61.43027878]
[139.37898254 72.78969574]
[152.90316772 66.30152893]
[155.56396484 51.01428986]
[166.72563171 40.23481750]
[182.09626770 38.10804367]
[195.76554871 45.45175934]
[202.47737122 59.44215012]
[199.65089417 74.69963074]
[188.37295532 85.35738373]
[172.98014832 87.31729126]
[159.39134216 79.82572174]
[145.86714172 86.31388855]
[150.12443542 97.04924774]
[151.77807617 109.01465607]
[150.49252319 121.55943298]
[164.98812866 125.41659546]
[179.48371887 129.27375793]
[193.97932434 133.13092041]
[208.47491455 136.98806763]
[222.97050476 140.84523010]
[236.51629639 132.70353699]
[251.83125305 136.60580444]
[259.82928467 150.23690796]
[255.76530457 165.50975037]
[242.05039978 173.36322021]
[226.82138062 169.13800049]
[219.11335754 155.34083557]
[204.61775208 151.48367310]
[190.12216187 147.62651062]
[175.62655640 143.76934814]
[161.13096619 139.91218567]
[146.63537598 136.05503845]
[140.68917847 140.62590027]
[151.56103516 150.96043396]
[162.43290710 161.29496765]
[176.68896484 165.96023560]
[184.28756714 178.89317322]
[181.42346191 193.61720276]
[169.53092957 202.75874329]
[154.56556702 201.73985291]
[144.02180481 191.07080078]
[143.17956543 176.09510803]
[135.98818970 162.93136597]
[128.79679871 149.76763916]
[122.85060883 154.33850098]
[122.85060883 169.33850098]
[122.85060883 184.33850098]
[122.85060883 199.33850098]
[122.85060883 214.33850098]
[122.85060883 229.33850098]
[122.85060883 244.33850098]
[122.85060883 259.33850098]
[122.85060883 274.33850098]
[122.85060883 289.33850098]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[18 92]
[19 91]
[20 90]
[27 59]
[28 58]
[29 57]
[35 53]
[36 52]
[37 51]
[65 86]
[66 85]
[67 84]
[68 83]
[97 108]
[98 107]
[111 128]
[112 127]
[113 126]
[114 125]
[115 124]
[116 123]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
