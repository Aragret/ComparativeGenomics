%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:47 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCAGACCUAAAAUCGCUCAUUGCAUACUCUUCAAUCAGCCACAUAGCCCUCGUAGUAACAGxxxxxxxxxxAUUGUUCGUUACAUGGUCCAUCAUAGAAUUCUCACUGUGAUAUAUAAACUCAGACCCAAACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[181.25701904 337.38565063]
[181.25701904 322.38565063]
[181.25701904 307.38565063]
[181.25701904 292.38565063]
[181.25701904 277.38565063]
[181.25701904 262.38565063]
[181.25701904 247.38563538]
[181.25701904 232.38563538]
[181.25701904 217.38563538]
[181.25701904 202.38563538]
[162.62606812 194.98501587]
[153.88275146 178.77044678]
[157.31187439 162.32556152]
[146.22055054 152.22691345]
[135.12924194 142.12826538]
[124.03792572 132.02961731]
[115.58155060 136.89083862]
[106.20079041 139.56347656]
[96.45216370 139.88899231]
[86.91401672 137.84805298]
[78.15220642 133.56176758]
[70.68652344 127.28440094]
[64.95989227 119.38837433]
[61.31203079 110.34210968]
[46.35177994 111.43342590]
[31.39153290 112.52473450]
[18.19085121 121.24555206]
[4.93438816 114.45471191]
[-10.02586079 115.54602051]
[-24.98610878 116.63733673]
[-39.94635773 117.72864532]
[-47.23020935 131.32824707]
[-60.72136688 138.81103516]
[-76.11486053 137.78927612]
[-88.49867249 128.58901978]
[-93.92118073 114.14603424]
[-90.65208435 99.06901550]
[-79.73452759 88.16899109]
[-64.65227509 84.92411041]
[-50.21801758 90.36981964]
[-41.03767014 102.76839447]
[-26.07741928 101.67708588]
[-11.11717129 100.58577728]
[3.84307766 99.49446106]
[15.97370148 90.85170746]
[30.30022240 97.56448364]
[45.26047134 96.47317505]
[60.22071838 95.38186646]
[62.29011536 86.52101135]
[66.30640411 78.35606384]
[55.42758179 68.02885437]
[40.46794891 71.79885864]
[25.85218430 66.86095428]
[16.24412346 54.79079437]
[14.70966530 39.43992996]
[21.73844910 25.70676804]
[35.08761597 17.97350883]
[50.49749374 18.70780563]
[63.05084610 27.67534828]
[68.74195099 42.01462936]
[65.75478363 57.15002823]
[76.63361359 67.47723389]
[86.12947083 62.43237305]
[96.62533569 60.09598923]
[98.18292236 45.17707825]
[99.74050140 30.25816536]
[101.29808044 15.33925343]
[102.85565948 0.42034128]
[88.94583130 -5.49640846]
[77.39903259 -15.25156021]
[69.24201965 -27.97769356]
[65.20008850 -42.54320908]
[65.63265991 -57.65295029]
[70.50126648 -71.96337128]
[79.37298584 -84.20199585]
[91.45896149 -93.28057861]
[105.68450928 -98.39185333]
[120.78471375 -99.08132935]
[135.41685486 -95.28770447]
[148.27987671 -87.34829712]
[158.22999573 -75.96907806]
[164.38244629 -62.16188049]
[166.19018555 -47.15443420]
[163.49243164 -32.28118134]
[156.52909851 -18.86465073]
[145.91934204 -8.09782791]
[132.60658264 -0.93809021]
[117.77457428 1.97792220]
[116.21699524 16.89683533]
[114.65941620 31.81574631]
[113.10182953 46.73465729]
[111.54425049 61.65357208]
[131.41778564 75.16773224]
[139.97598267 97.62540436]
[134.13658142 120.93830109]
[145.22789001 131.03695679]
[156.31921387 141.13560486]
[167.41052246 151.23425293]
[192.14073181 148.15832520]
[209.51841736 170.69009399]
[224.42031860 168.97740173]
[239.32221985 167.26470947]
[254.22412109 165.55201721]
[269.12603760 163.83932495]
[284.02792358 162.12663269]
[298.92984009 160.41395569]
[306.43997192 146.83538818]
[320.51129150 140.29496765]
[335.73312378 143.30760193]
[346.25231934 154.71488953]
[348.02404785 170.13049316]
[340.36703491 183.62678528]
[326.22558594 190.01417542]
[311.03735352 186.83657837]
[300.64251709 175.31585693]
[285.74063110 177.02853394]
[270.83871460 178.74122620]
[255.93681335 180.45391846]
[241.03491211 182.16661072]
[226.13301086 183.87930298]
[211.23110962 185.59199524]
[225.12986755 191.23332214]
[239.02862549 196.87463379]
[252.92736816 202.51596069]
[267.92736816 202.52706909]
[281.99566650 207.73123169]
[293.39175415 217.48463440]
[300.70581055 230.58061218]
[303.03295898 245.39898682]
[300.08526611 260.10650635]
[292.22744751 272.88360596]
[280.43161011 282.14959717]
[266.15707397 286.75808716]
[251.16987610 286.13894653]
[237.32411194 280.36877441]
[226.33273315 270.16143799]
[219.55555725 256.77972412]
[217.83116150 241.87684631]
[210.63978577 228.71311951]
[203.44839478 215.54937744]
[196.25701904 202.38563538]
[196.25701904 217.38563538]
[196.25701904 232.38563538]
[196.25701904 247.38563538]
[196.25701904 262.38565063]
[196.25701904 277.38565063]
[196.25701904 292.38565063]
[196.25701904 307.38565063]
[196.25701904 322.38565063]
[196.25701904 337.38565063]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[13 98]
[14 97]
[15 96]
[16 95]
[24 48]
[25 47]
[26 46]
[28 44]
[29 43]
[30 42]
[31 41]
[50 62]
[51 61]
[64 92]
[65 91]
[66 90]
[67 89]
[68 88]
[100 121]
[101 120]
[102 119]
[103 118]
[104 117]
[105 116]
[106 115]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
