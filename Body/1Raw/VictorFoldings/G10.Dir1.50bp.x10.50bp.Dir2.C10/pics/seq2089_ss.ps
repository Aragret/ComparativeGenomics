%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:26 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCUAACCCCUAUACCUUCUGCAUAAUGAAUUAACUAGAAAUAACUUUGCAAGGAGAGCCAAxxxxxxxxxxCAGAAGUUUUUUUCUUCGCAGGAUUUUUCUGAGCCUUUUACCACUCCAGCCUAGCCCCUACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[88.31300354 401.73880005]
[88.31300354 386.73880005]
[88.31300354 371.73880005]
[88.31300354 356.73880005]
[88.31300354 341.73880005]
[88.31300354 326.73880005]
[88.31300354 311.73880005]
[88.31300354 296.73880005]
[88.31300354 281.73880005]
[88.31300354 266.73880005]
[74.59162903 263.72256470]
[61.80226135 257.89297485]
[50.51490784 249.50691223]
[41.23324203 238.93528748]
[34.37212753 226.64657593]
[30.23908806 213.18612671]
[29.02051353 199.15190125]
[30.77326012 185.16793823]
[35.42199707 171.85662842]
[42.76245499 159.81094360]
[52.47038269 149.56808472]
[64.11588287 141.58552551]
[77.18243408 136.22053528]
[91.08982849 133.71421814]
[91.71380615 118.72720337]
[71.44152832 92.79477692]
[102.98310852 61.68772125]
[96.07611084 48.37256241]
[89.16911316 35.05740738]
[82.26211548 21.74225235]
[65.36434174 18.37589073]
[54.78029633 5.26761198]
[39.80058289 6.04745722]
[24.82086945 6.82730246]
[11.36631870 16.20318222]
[-3.36378145 8.99511814]
[-4.21636772 -7.38185120]
[9.68562794 -16.08050346]
[24.04102325 -8.15241241]
[39.02073669 -8.93225765]
[54.00045395 -9.71210194]
[55.64107132 -14.12613964]
[58.09679794 -18.14419365]
[61.27669144 -21.61746597]
[65.06299591 -24.41733551]
[61.66001892 -39.02622604]
[58.25704193 -53.63512039]
[54.85406113 -68.24401093]
[51.45108414 -82.85290527]
[38.55888367 -95.95904541]
[44.22967148 -112.53741455]
[40.52350998 -127.07234955]
[36.81734848 -141.60728455]
[33.11118698 -156.14222717]
[29.40502548 -170.67715454]
[25.69886398 -185.21209717]
[19.77890015 -198.99447632]
[11.78898430 -211.68940735]
[-3.72694087 -213.63621521]
[-14.32348537 -225.13609314]
[-14.99728394 -240.75915527]
[-5.43018961 -253.12866211]
[9.86050797 -256.40411377]
[23.65500832 -249.03894043]
[29.43997192 -234.51075745]
[24.48391533 -219.67932129]
[32.47383118 -206.98439026]
[32.69135666 -221.98281860]
[38.21832657 -235.92744446]
[48.33498764 -247.00233459]
[61.72389603 -253.76524353]
[76.64147949 -255.33551025]
[91.14509583 -251.50860596]
[103.34600067 -242.78289795]
[111.65534210 -230.29470825]
[114.99102020 -215.67030334]
[112.91866302 -200.81414795]
[105.70812988 -187.66088867]
[94.29841614 -177.92341614]
[80.17535400 -172.86978149]
[65.17812347 -173.15811157]
[51.25974274 -178.75083923]
[40.23379898 -188.91825867]
[43.93996048 -174.38331604]
[47.64612198 -159.84838867]
[51.35228348 -145.31344604]
[55.05844498 -130.77850342]
[58.76460648 -116.24357605]
[69.03097534 -109.76985931]
[72.21073914 -97.64104462]
[66.05997467 -86.25588226]
[69.46295166 -71.64698792]
[72.86593628 -57.03809738]
[76.26891327 -42.42920685]
[79.67189026 -27.82031250]
[96.21302032 -19.94870758]
[102.85696411 -2.57929659]
[95.57727051 14.83525372]
[102.48426819 28.15040970]
[109.39126587 41.46556473]
[116.29826355 54.78071976]
[130.20082092 60.41267776]
[144.42759705 55.65886307]
[154.88795471 43.02901077]
[171.00842285 46.03940582]
[176.20565796 61.59320831]
[165.13317871 73.69000244]
[149.18141174 69.88564301]
[134.95463562 74.63945770]
[135.34455872 82.12931061]
[136.51432800 104.59888458]
[151.15782166 107.84970856]
[165.80133057 111.10054016]
[176.12162781 99.72570038]
[190.75158691 95.05023956]
[205.75581360 98.33183289]
[217.09823608 108.68774414]
[221.72782898 123.33228302]
[218.39921570 138.32614136]
[208.00781250 149.63606262]
[193.34883118 154.21971130]
[178.36546326 150.84413147]
[167.08818054 140.41731262]
[162.55050659 125.74404144]
[147.90699768 122.49320984]
[133.26350403 119.24238586]
[118.74475861 122.71861267]
[106.70082092 119.35118103]
[106.07684326 134.33819580]
[121.48572540 138.69779968]
[135.41267395 146.58523560]
[147.06404114 157.54646301]
[155.77697754 170.95242310]
[161.05708313 186.03509521]
[162.60647583 201.93159485]
[160.34060669 217.73338318]
[154.39286804 232.53837585]
[145.10670471 245.50230408]
[133.01583862 255.88688660]
[118.81356049 263.10192871]
[103.31300354 266.73880005]
[103.31300354 281.73880005]
[103.31300354 296.73880005]
[103.31300354 311.73880005]
[103.31300354 326.73880005]
[103.31300354 341.73880005]
[103.31300354 356.73880005]
[103.31300354 371.73880005]
[103.31300354 386.73880005]
[103.31300354 401.73880005]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[24 129]
[25 128]
[27 101]
[28 100]
[29 99]
[30 98]
[32 41]
[33 40]
[34 39]
[45 95]
[46 94]
[47 93]
[48 92]
[49 91]
[51 88]
[52 87]
[53 86]
[54 85]
[55 84]
[56 83]
[57 67]
[58 66]
[102 109]
[103 108]
[111 126]
[112 125]
[113 124]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
