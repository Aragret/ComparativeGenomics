%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:01 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGUAGCAUUAACCUUUUAAGUUAAAGAUUAAGAGAACCAACACCUCUUUACAGUGAAAUGCCCxxxxxxxxxxUUAUGAUAAUCAUAUUUACCAAAUGCCCCUCAUUUACAUAAAUAUUAUACUAGCAUUUACCCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[92.50000000 301.01785278]
[92.50000000 286.01785278]
[92.50000000 271.01785278]
[92.50000000 256.01785278]
[92.50000000 241.01783752]
[92.50000000 226.01783752]
[92.50000000 211.01783752]
[92.50000000 196.01783752]
[92.50000000 181.01783752]
[92.50000000 166.01783752]
[62.54134369 154.87672424]
[41.25151825 131.03581238]
[33.55750275 100.01246643]
[18.65305710 98.32206726]
[3.74860930 96.63166809]
[-11.15583801 94.94126892]
[-26.06028557 93.25087738]
[-42.73124695 101.00392151]
[-56.44884491 90.10107422]
[-71.38485718 88.71704865]
[-86.15697479 91.32176971]
[-99.71887207 97.73075104]
[-113.28076935 104.13972473]
[-126.84266663 110.54869843]
[-131.93511963 125.51006317]
[-146.15200806 132.41337585]
[-161.05868530 127.16303253]
[-167.81130981 112.87395477]
[-162.40365601 98.02361298]
[-148.04397583 91.42243958]
[-133.25163269 96.98680115]
[-119.68974304 90.57782745]
[-106.12784576 84.16885376]
[-92.56594849 77.75988007]
[-92.87386322 70.26619720]
[-106.16121674 63.30587006]
[-93.48968506 55.27884674]
[-93.79759979 47.78517151]
[-107.83957672 42.51042938]
[-121.88155365 37.23568726]
[-135.92352295 31.96094513]
[-149.96549988 26.68620300]
[-162.27557373 35.98489380]
[-177.66043091 37.12933350]
[-191.21083069 29.75433731]
[-198.60285950 16.21323967]
[-197.47778320 0.82695508]
[-188.19458008 -11.49480820]
[-173.71551514 -16.82022095]
[-158.66078186 -13.44996262]
[-147.83430481 -2.45947170]
[-144.69076538 12.64422703]
[-130.64878845 17.91896820]
[-116.60681152 23.19371033]
[-102.56483459 28.46845245]
[-88.52285767 33.74319458]
[-78.22671509 40.30613708]
[-71.20759583 48.75444794]
[-67.66991425 57.89511490]
[-67.43959808 66.57298279]
[-70.00083160 73.78103638]
[-55.06481934 75.16506195]
[-45.52428818 67.66570282]
[-33.03330994 68.73659515]
[-24.36988831 78.34642792]
[-9.46544075 80.03682709]
[5.43900681 81.72721863]
[20.34345436 83.41761780]
[35.24790192 85.10801697]
[37.96640778 76.20001984]
[41.90381241 67.75967407]
[46.98274994 59.95281982]
[53.10342407 52.93284988]
[60.14556885 46.83770370]
[67.97081757 41.78714371]
[76.42539978 37.88040924]
[85.34320831 35.19425964]
[94.54900360 33.78148270]
[103.86190796 33.66983414]
[113.09892273 34.86150360]
[122.07856750 37.33308411]
[130.62437439 41.03600693]
[138.56846619 45.89751053]
[145.75469971 51.82207870]
[152.04191589 58.69329071]
[157.30656433 66.37614441]
[161.44517517 74.71966553]
[175.87255859 70.61472321]
[190.29994202 66.50978088]
[204.72734070 62.40483475]
[219.15472412 58.29988861]
[222.86863708 54.45775223]
[227.25402832 52.64834595]
[231.40756226 52.78158951]
[234.59762573 54.41584396]
[249.25035095 51.20684433]
[263.90307617 47.99784851]
[278.55578613 44.78885269]
[293.20852661 41.57985687]
[302.34405518 26.69599724]
[319.08172607 23.06529236]
[333.00415039 32.44979095]
[347.58789062 28.94062614]
[362.17166138 25.43145752]
[376.75540161 21.92229080]
[391.33914185 18.41312408]
[400.90725708 5.53559494]
[416.94522095 5.13126564]
[427.15008545 17.51030159]
[423.69354248 33.17656708]
[409.22717285 40.11224365]
[394.84832764 32.99687195]
[380.26455688 36.50603867]
[365.68081665 40.01520920]
[351.09707642 43.52437592]
[336.51333618 47.03354263]
[331.36819458 58.88597107]
[320.15878296 65.69606781]
[306.87982178 64.77363586]
[296.41751099 56.23258209]
[281.76480103 59.44157791]
[267.11206055 62.65057373]
[252.45933533 65.85957336]
[237.80662537 69.06856537]
[223.25965881 72.72727203]
[208.83227539 76.83221436]
[194.40489197 80.93716431]
[179.97750854 85.04210663]
[165.55012512 89.14704895]
[166.36520386 96.79611969]
[166.29074097 104.48812866]
[165.32772827 112.11997986]
[163.48907471 119.58937073]
[160.79942322 126.79619598]
[157.29481506 133.64385986]
[153.02226257 140.04054260]
[148.03898621 145.90055847]
[142.41181946 151.14530945]
[136.21617126 155.70452881]
[129.53507996 159.51708984]
[122.45811462 162.53190613]
[115.08012390 164.70854187]
[107.50000000 166.01783752]
[107.50000000 181.01783752]
[107.50000000 196.01783752]
[107.50000000 211.01783752]
[107.50000000 226.01783752]
[107.50000000 241.01783752]
[107.50000000 256.01785278]
[107.50000000 271.01785278]
[107.50000000 286.01785278]
[107.50000000 301.01785278]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 152]
[2 151]
[3 150]
[4 149]
[5 148]
[6 147]
[7 146]
[8 145]
[9 144]
[10 143]
[13 69]
[14 68]
[15 67]
[16 66]
[17 65]
[19 62]
[20 61]
[21 34]
[22 33]
[23 32]
[24 31]
[38 56]
[39 55]
[40 54]
[41 53]
[42 52]
[87 129]
[88 128]
[89 127]
[90 126]
[91 125]
[95 124]
[96 123]
[97 122]
[98 121]
[99 120]
[102 116]
[103 115]
[104 114]
[105 113]
[106 112]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
