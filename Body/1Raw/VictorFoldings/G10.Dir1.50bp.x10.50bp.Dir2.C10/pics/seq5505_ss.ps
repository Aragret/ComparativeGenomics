%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:27 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCUCCCUAGGAGGCCUGCCCCCGCUAACCGGCUUUUUGCCCAAAUGGGCCAUUAUCGAAGAxxxxxxxxxxGCCCUAGCAACACUCCACCUCCUAUUCUUGCACGAAACGGGAUCAAACAACCCCCUAGGACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[-22.82440376 268.52929688]
[-32.08935165 280.32592773]
[-41.35430145 292.12255859]
[-50.61925125 303.91918945]
[-59.88420105 315.71585083]
[-62.32311630 331.34793091]
[-76.26922607 336.57815552]
[-85.53417969 348.37478638]
[-94.79912567 360.17144775]
[-97.23804474 375.80352783]
[-111.18415833 381.03375244]
[-120.44910431 392.83038330]
[-129.71405029 404.62704468]
[-138.97900391 416.42367554]
[-144.00715637 432.61483765]
[-160.95750427 432.26535034]
[-165.31399536 415.88067627]
[-150.77565002 407.15872192]
[-141.51069641 395.36209106]
[-132.24574280 383.56542969]
[-122.98079681 371.76879883]
[-121.20456696 356.98049927]
[-106.59576416 350.90649414]
[-97.33081818 339.10986328]
[-88.06587219 327.31320190]
[-86.28964233 312.52490234]
[-71.68083954 306.45089722]
[-62.41588974 294.65426636]
[-53.15094376 282.85760498]
[-43.88599396 271.06097412]
[-34.62104416 259.26434326]
[-48.45325089 246.45677185]
[-61.07236862 232.45242310]
[-72.37527466 217.36575317]
[-82.26960754 201.32000732]
[-90.67451477 184.44631958]
[-97.52132416 166.88258362]
[-102.75407410 148.77230835]
[-106.33000946 130.26350403]
[-108.21991730 111.50738525]
[-108.40834045 92.65723419]
[-106.89375305 73.86708069]
[-103.68852234 55.29048157]
[-98.81884003 37.07922745]
[-92.32450104 19.38212967]
[-84.25857544 2.34380603]
[-74.68696594 -13.89651585]
[-86.94934082 -22.53563309]
[-99.21170807 -31.17474747]
[-111.47407532 -39.81386566]
[-127.84644318 -40.75065231]
[-134.97866821 -55.51762390]
[-125.53372192 -68.92378235]
[-109.22776031 -67.17802429]
[-102.83496094 -52.07623291]
[-90.57258606 -43.43711472]
[-78.31021881 -34.79800034]
[-66.04785156 -26.15888405]
[-57.60655594 -36.55814743]
[-48.51508331 -46.39406967]
[-38.81094742 -55.62607193]
[-28.53417587 -64.21607208]
[-17.72716522 -72.12863922]
[-6.43449545 -79.33112335]
[5.29724693 -85.79381561]
[17.41966438 -91.49005890]
[29.88274956 -96.39634705]
[42.63508987 -100.49244690]
[55.62407303 -103.76145935]
[68.79611969 -106.18989563]
[82.09689331 -107.76773834]
[95.47152710 -108.48847961]
[108.86483765 -108.34915161]
[122.22157288 -107.35031891]
[135.48664856 -105.49610901]
[148.60531616 -102.79417419]
[161.52348328 -99.25564575]
[174.18785095 -94.89514160]
[186.54617310 -89.73063660]
[198.54747009 -83.78343201]
[210.14222717 -77.07807922]
[221.28260803 -69.64221954]
[231.92266846 -61.50654221]
[242.01850891 -52.70460129]
[251.52848816 -43.27271652]
[260.41336060 -33.24978638]
[268.63650513 -22.67716217]
[281.07592773 -31.05930710]
[293.51538086 -39.44144821]
[305.95480347 -47.82359314]
[302.00863647 -62.44229507]
[303.02545166 -77.55006409]
[308.89495850 -91.50813293]
[318.98049927 -102.80242920]
[332.18801880 -110.20782471]
[347.08489990 -112.92104340]
[362.05523682 -110.64778137]
[375.47515869 -103.63461304]
[385.88897705 -92.64228821]
[392.16705322 -78.86315918]
[393.62841797 -63.79189301]
[390.11453247 -49.06330109]
[382.00659180 -36.27503586]
[370.18405151 -26.81426620]
[355.92932129 -21.70723152]
[340.78869629 -21.50790215]
[326.40447998 -26.23790169]
[314.33694458 -35.38415146]
[301.89752197 -27.00200844]
[289.45806885 -18.61986542]
[277.01864624 -10.23772240]
[284.02716064 1.90842569]
[290.20352173 14.49813461]
[295.51983643 27.47447586]
[299.95199585 40.77877045]
[303.48001099 54.35085678]
[306.08789062 68.12936401]
[307.76385498 82.05198669]
[308.50036621 96.05577087]
[308.29403687 110.07738495]
[307.14581299 124.05343628]
[305.06091309 137.92071533]
[302.04873657 151.61653137]
[298.12289429 165.07893372]
[293.30120850 178.24705505]
[287.60540771 191.06134033]
[281.06124878 203.46386719]
[273.69839478 215.39854431]
[265.55004883 226.81140137]
[256.65313721 237.65081787]
[247.04783630 247.86779785]
[236.77761841 257.41613770]
[225.88888550 266.25265503]
[214.43089294 274.33737183]
[202.45547485 281.63378906]
[190.01675415 288.10885620]
[177.17097473 293.73330688]
[163.97624207 298.48171997]
[150.49221802 302.33261108]
[136.77987671 305.26858521]
[122.90121460 307.27636719]
[108.91899872 308.34683228]
[94.89644623 308.47518921]
[80.89698029 307.66085815]
[66.98388672 305.90747070]
[53.22009659 303.22302246]
[39.66783905 299.61959839]
[26.38839531 295.11352539]
[13.44181728 289.72515869]
[0.88664716 283.47888184]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 31]
[2 30]
[3 29]
[4 28]
[5 27]
[7 25]
[8 24]
[9 23]
[11 21]
[12 20]
[13 19]
[14 18]
[47 58]
[48 57]
[49 56]
[50 55]
[87 111]
[88 110]
[89 109]
[90 108]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
