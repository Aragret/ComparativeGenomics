%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:41 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGACUACUAACAGACCGCAACCUCAACACCACCUUCUUCGACCCCGCCGGAGGAGGAGACCCxxxxxxxxxxUAAACCCCAUUAAACGCCUGGCAGCCGGAAGCCUAUUCGCAGGAUUUCUCAUUACUAACACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[86.82450104 397.88943481]
[86.82450104 382.88943481]
[86.82450104 367.88943481]
[86.82450104 352.88943481]
[86.82450104 337.88943481]
[86.82450104 322.88943481]
[86.82450104 307.88943481]
[86.82450104 292.88943481]
[86.82450104 277.88943481]
[86.82450104 262.88943481]
[71.29245758 258.57681274]
[57.57675171 250.08146667]
[46.77811050 238.07609558]
[39.76572800 223.51533508]
[37.10729599 207.56005859]
[39.02303696 191.48468018]
[45.36750412 176.57542419]
[55.64058685 164.02742004]
[69.02690887 154.84887695]
[84.46057892 149.78007507]
[83.83660126 134.79306030]
[83.21262360 119.80604553]
[86.62081146 91.34835052]
[80.55780029 77.62829590]
[74.49478912 63.90824509]
[68.28938293 50.25200272]
[53.70733261 44.77462769]
[47.46404648 30.90105438]
[52.77575302 17.03305435]
[46.42862320 3.44210410]
[45.48290253 18.41226196]
[43.62759399 33.29708099]
[34.19783783 44.96239853]
[20.03250885 49.89630890]
[5.39615917 46.61343384]
[-5.30485964 36.10209656]
[-8.84894848 21.52679634]
[-4.16914082 7.27550125]
[7.32738781 -2.36211729]
[22.32039642 -1.90418053]
[9.38234043 -9.49408913]
[-3.55571604 -17.08399773]
[-16.49377251 -24.67390633]
[-29.43182755 -32.26381302]
[-44.54713821 -28.50015068]
[-57.56004715 -36.38170624]
[-61.05497360 -50.81503677]
[-73.99302673 -58.40494537]
[-90.38660431 -57.97753906]
[-98.72164917 -72.10054016]
[-90.42378235 -86.24541473]
[-74.02913666 -85.86112213]
[-66.40312195 -71.34300232]
[-53.46506500 -63.75309372]
[-39.16122437 -67.74505615]
[-25.93207550 -60.23212051]
[-21.84191895 -45.20186996]
[-8.90386391 -37.61196136]
[4.03419256 -30.02205276]
[16.97224808 -22.43214417]
[29.91030502 -14.84223652]
[43.63035965 -20.90525055]
[46.72867966 -35.58177567]
[49.82699966 -50.25830078]
[45.10704803 -65.35904694]
[55.30637360 -76.21368408]
[41.54098892 -82.31351471]
[29.34487152 -91.14234924]
[19.25118065 -102.31423950]
[11.70116901 -115.34078979]
[7.02489042 -129.65254211]
[5.42677212 -144.62384033]
[6.97667646 -159.60020447]
[11.60684872 -173.92692566]
[19.11487770 -186.97772217]
[29.17254448 -198.18205261]
[41.34017181 -207.05010986]
[55.08583832 -213.19424438]
[69.80865479 -216.34582520]
[84.86499023 -216.36711121]
[99.59664917 -213.25714111]
[113.35962677 -207.15190125]
[125.55226898 -198.31825256]
[135.64157104 -187.14239502]
[143.18644714 -174.11288452]
[147.85710144 -159.79930115]
[149.44932556 -144.82737732]
[147.89353943 -129.85162354]
[143.25772095 -115.52671051]
[135.74456787 -102.47887421]
[125.68248749 -91.27850342]
[113.51137543 -82.41522217]
[99.76329041 -76.27651215]
[85.03923798 -73.13071442]
[69.98289490 -73.11535645]
[74.92446136 -59.06437302]
[64.50352478 -47.15998077]
[61.40520477 -32.48345184]
[58.30688477 -17.80692863]
[60.01957321 -2.90502548]
[66.36669922 10.68592548]
[80.41009521 15.51487350]
[87.04059601 29.20761299]
[81.88033295 43.90487289]
[87.59729004 48.66533279]
[88.21484375 57.84523010]
[94.27785492 71.56528473]
[100.34086609 85.28533936]
[112.13750458 94.55028534]
[126.90356445 97.18914795]
[141.84968567 92.00031281]
[153.01727295 101.85597229]
[167.78332520 104.49483490]
[182.54939270 107.13370514]
[195.37150574 97.89418030]
[210.95783997 100.50990295]
[220.06127930 113.42899323]
[217.28091431 128.98678589]
[204.26629639 137.95314026]
[188.73876953 135.00843811]
[179.91052246 121.89975739]
[165.14447021 119.26089478]
[150.37841797 116.62203217]
[136.48846436 121.99961853]
[124.26470184 111.95520782]
[109.49864197 109.31634521]
[98.19963837 119.18206787]
[98.82361603 134.16908264]
[99.44759369 149.15609741]
[113.07759094 152.11613464]
[125.58374786 158.26896667]
[136.23115540 167.24766541]
[144.39540100 178.51942444]
[149.59921265 191.41714478]
[151.54035950 205.17890930]
[150.10916138 218.99302673]
[145.39476013 232.04586792]
[137.67948914 243.56977844]
[127.42202759 252.88830566]
[115.23009491 259.45581055]
[101.82450104 262.88943481]
[101.82450104 277.88943481]
[101.82450104 292.88943481]
[101.82450104 307.88943481]
[101.82450104 322.88943481]
[101.82450104 337.88943481]
[101.82450104 352.88943481]
[101.82450104 367.88943481]
[101.82450104 382.88943481]
[101.82450104 397.88943481]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[20 129]
[21 128]
[22 127]
[23 108]
[24 107]
[25 106]
[26 104]
[29 101]
[30 100]
[40 61]
[41 60]
[42 59]
[43 58]
[44 57]
[47 54]
[48 53]
[62 99]
[63 98]
[64 97]
[66 95]
[109 126]
[110 125]
[112 123]
[113 122]
[114 121]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
