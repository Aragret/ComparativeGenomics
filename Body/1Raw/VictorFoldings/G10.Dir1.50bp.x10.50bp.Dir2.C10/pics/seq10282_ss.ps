%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:42 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGUCAUCCAAACCCCCUGAAGCUUCACCGGCGCAGUCAUUCUCAUAAUCGCCCACGGGCUUACxxxxxxxxxxAGCAUUAGCAGGAAUACCUUUCCUCACAGGUUUCUACUCCAAAGACCACAUCAUCGAAACCCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[175.07963562 433.39309692]
[174.46380615 418.40576172]
[173.84799194 403.41839600]
[173.23216248 388.43103027]
[172.61633301 373.44369507]
[172.00050354 358.45632935]
[171.38468933 343.46899414]
[170.76885986 328.48162842]
[168.01261902 313.73703003]
[163.17280579 299.53927612]
[158.33297729 285.34152222]
[153.49316406 271.14376831]
[137.07243347 272.52450562]
[120.83467102 269.65713501]
[105.86126709 262.72726440]
[93.15074158 252.19123840]
[83.55219269 238.74603271]
[77.70859528 223.28324890]
[76.01369476 206.82986450]
[78.58551025 190.48017883]
[85.25811768 175.32287598]
[95.59234619 162.36863708]
[108.90467834 152.48271179]
[103.20001221 138.60983276]
[97.49534607 124.73696136]
[91.79068756 110.86407471]
[81.23867035 100.20317078]
[67.42508698 94.35637665]
[53.61150360 88.50959015]
[39.79792404 82.66280365]
[35.37292480 83.38327026]
[31.36743546 82.69074249]
[28.18288994 80.90037537]
[26.07274437 78.42721558]
[25.12245750 75.72758484]
[11.83511639 68.76722717]
[-1.45222473 61.80687332]
[-14.94760895 55.25900269]
[-28.63823509 49.12982941]
[-42.32886124 43.00065613]
[-39.85268021 57.79486465]
[-49.71781921 69.09437561]
[-64.71084595 68.63695526]
[-73.86878967 56.75705719]
[-70.49533844 42.14131546]
[-57.05778503 35.47683716]
[-70.04816437 27.97683716]
[-83.03854370 20.47683716]
[-98.84472656 23.22349739]
[-110.75106049 12.47087288]
[-109.62401581 -3.53254342]
[-96.32817078 -12.51029968]
[-81.06295776 -7.57543039]
[-75.53854370 7.48645544]
[-62.54816818 14.98645592]
[-49.55778503 22.48645592]
[-36.19968414 29.31002998]
[-22.50905991 35.43920517]
[-8.81843472 41.56837845]
[-5.36218309 40.61888504]
[-1.26873410 41.33531952]
[2.65560865 44.00086594]
[5.50813150 48.51953506]
[18.79547310 55.47988892]
[32.08281326 62.44024658]
[45.64471054 68.84922028]
[59.45829391 74.69600677]
[73.27187347 80.54280090]
[87.08545685 86.38958740]
[77.76599884 74.63596344]
[68.44654083 62.88233948]
[55.73969269 54.91138458]
[48.26927185 41.90397263]
[47.78786850 26.91170120]
[54.40842056 13.45182514]
[66.57772064 4.68209648]
[81.44078827 2.65993476]
[95.51068878 7.85974836]
[105.48654175 19.06163788]
[109.02797699 33.63758469]
[105.30506897 48.16630936]
[106.64330292 63.10649490]
[107.98153687 78.04667664]
[113.96983337 64.29385376]
[111.58512878 48.06901550]
[124.61006927 38.10493469]
[139.64570618 44.65180206]
[141.22467041 60.97475815]
[127.72265625 70.28215027]
[121.73435974 84.03497314]
[133.70462036 93.07449341]
[145.29367065 83.55115509]
[156.88272095 74.02782440]
[168.47177124 64.50448608]
[180.06082153 54.98114395]
[183.04780579 39.21861649]
[197.30053711 31.85387802]
[211.88552856 38.53653336]
[215.61441040 54.14021683]
[205.62672424 66.69512177]
[189.58415222 66.57019043]
[177.99510193 76.09352875]
[166.40605164 85.61686707]
[154.81700134 95.14020538]
[143.22795105 104.66354370]
[129.95901489 109.85926056]
[116.92736053 109.88143158]
[105.66356659 105.15941620]
[111.36823273 119.03229523]
[117.07289124 132.90518188]
[122.77755737 146.77806091]
[136.19880676 144.54437256]
[149.78294373 145.18499756]
[162.92158508 148.66845703]
[175.02694702 154.83599854]
[185.55802917 163.40888977]
[194.04487610 174.00091553]
[200.10949707 186.13591003]
[203.48275757 199.26902771]
[204.01625061 212.81130981]
[201.68885803 226.15602112]
[196.60760498 238.70588684]
[189.00265503 249.89981079]
[179.21701050 259.23791504]
[167.69091797 266.30395508]
[172.53073120 280.50170898]
[177.37055969 294.69946289]
[182.21037292 308.89721680]
[186.02513123 294.39041138]
[195.01681519 282.38415527]
[207.86450195 274.64227295]
[222.68081665 272.30200195]
[237.28918457 275.70718384]
[249.54360962 284.35757446]
[257.64385986 296.98239136]
[260.39996338 311.72702026]
[257.40707397 326.42541504]
[249.10481262 338.91830444]
[236.71284485 347.37048340]
[222.05158997 350.54025269]
[207.27482605 347.96200562]
[194.55332947 340.01446533]
[185.75621033 327.86581421]
[186.37203979 342.85314941]
[186.98786926 357.84051514]
[187.60368347 372.82785034]
[188.21951294 387.81521606]
[188.83534241 402.80258179]
[189.45117188 417.78991699]
[190.06698608 432.77728271]
[196.75851440 448.35482788]
[183.64213562 459.09713745]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 128]
[10 127]
[11 126]
[12 125]
[23 111]
[24 110]
[25 109]
[26 108]
[27 69]
[28 68]
[29 67]
[30 66]
[35 65]
[36 64]
[37 63]
[38 59]
[39 58]
[40 57]
[46 56]
[47 55]
[48 54]
[83 90]
[84 89]
[91 105]
[92 104]
[93 103]
[94 102]
[95 101]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
