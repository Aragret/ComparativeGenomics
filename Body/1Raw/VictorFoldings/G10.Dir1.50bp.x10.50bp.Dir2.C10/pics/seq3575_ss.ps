%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:11 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGAACCCCCCUCCCCAUACCCAACCCCCUGGUCAACCUCAACCUAGGCCUCCUAUUUAUUCUxxxxxxxxxxGCCCUCAGUAAGUUGCAAUACUUAAUUUCUGUAACAGCUAAGGACUGCAAAACCCCACUCCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[23.51605415 255.89053345]
[16.33354378 269.05911255]
[9.15103531 282.22769165]
[1.96852672 295.39627075]
[-5.21398211 308.56488037]
[-12.39649105 321.73345947]
[-19.57900047 334.90203857]
[-26.76150894 348.07061768]
[-33.94401932 361.23919678]
[-41.12652588 374.40777588]
[-43.40272522 391.20822144]
[-60.17672729 393.67181396]
[-67.18753815 378.23535156]
[-54.29510880 367.22528076]
[-47.11259842 354.05670166]
[-39.93009186 340.88809204]
[-32.74758148 327.71951294]
[-25.56507301 314.55093384]
[-18.38256454 301.38235474]
[-11.20005608 288.21377563]
[-4.01754713 275.04519653]
[3.16496181 261.87661743]
[10.34747124 248.70802307]
[-5.05273247 238.25909424]
[-19.24621391 226.22200012]
[-32.06993484 212.73501587]
[-43.37659454 197.95307922]
[-53.03631592 182.04595947]
[-60.93813324 165.19639587]
[-66.99128723 147.59794617]
[-71.12624359 129.45272827]
[-73.29550171 110.96920013]
[-73.47414398 92.35967255]
[-71.66012573 73.83790588]
[-67.87427521 55.61666107]
[-82.19687653 51.15984344]
[-96.51947021 46.70302963]
[-110.88765717 42.39544296]
[-125.29987335 38.23755646]
[-139.71208191 34.07966995]
[-151.87194824 43.71902847]
[-167.37673950 44.33640289]
[-180.26454163 35.69440460]
[-185.57974243 21.11605072]
[-181.27851868 6.20702171]
[-169.01480103 -3.29985905]
[-153.50422668 -3.74900126]
[-140.71093750 5.03229904]
[-135.55419922 19.66745377]
[-121.14198303 23.82534027]
[-106.72976685 27.98322868]
[-99.38373566 26.80785561]
[-92.06265259 32.38043213]
[-77.74005890 36.83724594]
[-63.41746140 41.29406357]
[-58.87306595 29.92145157]
[-53.53836060 18.89744377]
[-47.43989182 8.27687454]
[-40.60799026 -1.88742220]
[-33.07664108 -11.54488468]
[-24.88330841 -20.64747429]
[-16.06875038 -29.14990807]
[-6.67681456 -37.00989151]
[3.24577951 -44.18832779]
[13.64967155 -50.64950943]
[24.48311043 -56.36128998]
[35.69220352 -61.29525757]
[47.22119141 -65.42687225]
[59.01272583 -68.73558044]
[71.00814819 -71.20492554]
[83.14778900 -72.82261658]
[95.37126160 -73.58061218]
[107.61775970 -73.47513580]
[119.82636261 -72.50672150]
[131.93634033 -70.68018341]
[143.88745117 -68.00460052]
[155.62023926 -64.49328613]
[167.07637024 -60.16371155]
[178.19880676 -55.03741455]
[188.93226624 -49.13988876]
[199.22332764 -42.50047302]
[209.02081299 -35.15219879]
[218.27597046 -27.13161469]
[226.94277954 -18.47862244]
[234.97811890 -9.23626328]
[242.34201050 0.54948467]
[248.99783325 10.82994461]
[254.91247559 21.55397606]
[260.05651855 32.66823196]
[264.40435791 44.11742783]
[267.93438721 55.84460831]
[270.62902832 67.79143524]
[272.47488403 79.89848328]
[287.43511963 78.80717468]
[302.39538574 77.71586609]
[317.35562134 76.62455750]
[332.31585693 75.53324127]
[345.51654053 66.81243134]
[358.77301025 73.60326385]
[371.97369385 64.88245392]
[385.23016357 71.67328644]
[400.19039917 70.58197784]
[415.15066528 69.49066162]
[430.11090088 68.39935303]
[434.85766602 53.95855331]
[444.77313232 42.43675613]
[458.34527588 35.59095383]
[473.50448608 34.46508026]
[487.93902588 39.23082733]
[499.44775391 49.16144943]
[506.27569580 62.74259949]
[507.38162231 77.90325165]
[502.59689331 92.33151245]
[492.65115356 103.82718658]
[479.06103516 110.63726044]
[463.89892578 111.72324371]
[449.47698975 106.91953278]
[437.99441528 96.95867157]
[431.20220947 83.35960388]
[416.24197388 84.45091248]
[401.28170776 85.54222107]
[386.32147217 86.63353729]
[374.19085693 95.27629089]
[359.86431885 88.56351471]
[347.73370361 97.20626831]
[333.40716553 90.49349213]
[318.44692993 91.58480072]
[303.48669434 92.67611694]
[288.52642822 93.76742554]
[273.56619263 94.85873413]
[273.28829956 111.08229065]
[271.49728394 127.20906830]
[268.20877075 143.09826660]
[263.45147705 158.61112976]
[257.26696777 173.61221313]
[249.70918274 187.97052002]
[240.84417725 201.56068420]
[230.74932861 214.26402283]
[219.51278687 225.96963501]
[207.23268127 236.57527161]
[194.01622009 245.98837280]
[179.97883606 254.12669373]
[165.24307251 260.91921997]
[149.93762207 266.30661011]
[134.19612122 270.24182129]
[118.15601349 272.69052124]
[101.95738220 273.63128662]
[85.74165344 273.05593872]
[69.65042877 270.96945190]
[53.82421112 267.39010620]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 23]
[2 22]
[3 21]
[4 20]
[5 19]
[6 18]
[7 17]
[8 16]
[9 15]
[10 14]
[35 55]
[36 54]
[37 53]
[38 51]
[39 50]
[40 49]
[93 130]
[94 129]
[95 128]
[96 127]
[97 126]
[99 124]
[101 122]
[102 121]
[103 120]
[104 119]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
