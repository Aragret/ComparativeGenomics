%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:45 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGUCUUAUAGAAAUUUAGGUUAAAUACAGACCAAGAGCCUUCAAAGCCCUCAGUAAGUUGCAAxxxxxxxxxxACAUCCGUAUUACUCGCAUCAGGAGUAUCAAUCACCUGAGCUCACCAUAGUCUAAUAGAAACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[71.52732086 498.49493408]
[71.52732086 483.49493408]
[71.52732086 468.49493408]
[71.52732086 453.49493408]
[71.52732086 438.49493408]
[71.52732086 423.49493408]
[71.52732086 408.49493408]
[71.52732086 393.49493408]
[71.52732086 378.49493408]
[71.52732086 363.49493408]
[56.79750824 360.76126099]
[42.81713486 355.36599731]
[30.06285667 347.49151611]
[18.96981049 337.40472412]
[9.91678047 325.44808960]
[3.21325374 312.02792358]
[-0.91115814 297.60061646]
[-2.31458092 282.65713501]
[-0.94775915 267.70623779]
[3.14421725 253.25727844]
[9.82339764 239.80271912]
[18.86362457 227.80143738]
[29.95818329 217.66302490]
[42.73021698 209.73388672]
[56.74552536 204.28526306]
[71.52732086 201.50411987]
[71.52732086 186.50411987]
[71.52732086 171.50411987]
[63.23589325 184.00421143]
[50.85124969 192.46711731]
[36.19274521 195.64959717]
[21.41375923 193.08413696]
[8.68537903 185.14761353]
[-0.12254906 173.00593567]
[-3.71611047 158.44274902]
[-1.56739795 143.59744263]
[6.00793505 130.65084839]
[17.89704514 121.50485992]
[32.35337830 117.50306702]
[47.25325012 119.23332977]
[60.40781403 126.44148254]
[69.88462067 138.06860352]
[74.29141998 152.40596008]
[78.54426575 138.02146912]
[82.79711151 123.63699341]
[87.04995728 109.25251007]
[82.94501495 94.82512665]
[71.75671387 84.83403015]
[60.56842041 74.84293365]
[46.69904327 81.13262939]
[31.47044373 81.23087311]
[17.52106857 75.12065125]
[7.26773214 63.86058807]
[2.48688626 49.40156555]
[4.00684166 34.24868774]
[11.56425667 21.02729034]
[23.84976387 12.02805710]
[38.73482513 8.81015873]
[53.64051056 11.93111706]
[65.98432159 20.85020638]
[73.62762451 34.02214050]
[75.24616241 49.16480255]
[70.55951691 63.65463638]
[81.74781036 73.64572906]
[92.93611145 83.63682556]
[107.32122803 79.38378906]
[121.70507050 75.13113403]
[125.66168213 60.66236877]
[129.61828613 46.19359970]
[116.28208160 39.19648743]
[104.76213074 29.49572754]
[95.59724426 17.54504013]
[89.21607971 3.90338063]
[85.91710663 -10.79120350]
[85.85460663 -25.85142136]
[89.03151703 -40.57287979]
[95.29924011 -54.26702881]
[104.36463165 -66.29336548]
[115.80367279 -76.08940125]
[129.08135986 -83.19695282]
[143.57664490 -87.28359222]
[158.61157227 -88.15818024]
[173.48294067 -85.77980804]
[187.49516296 -80.25971222]
[199.99288940 -71.85607910]
[210.39157104 -60.96197128]
[218.20483398 -48.08691788]
[223.06723022 -33.83310699]
[224.75135803 -18.86721992]
[223.17843628 -3.88923645]
[218.42204285 10.40029621]
[210.70463562 23.33303070]
[200.38716125 34.30407715]
[187.95220947 42.80030441]
[173.98135376 48.42432785]
[159.12806702 50.91309738]
[144.08706665 50.15021133]
[140.13044739 64.61898041]
[136.17384338 79.08774567]
[146.39254761 90.06855011]
[161.10806274 87.16107941]
[175.82359314 84.25360107]
[190.53910828 81.34613037]
[205.25463867 78.43865967]
[209.54450989 63.74663162]
[220.17906189 52.73914719]
[234.71456909 47.94563675]
[249.81086731 50.46762085]
[261.99893188 59.72555923]
[268.47805786 73.59205627]
[267.75936890 88.88067627]
[260.00802612 102.07822418]
[247.00520325 110.15198517]
[231.73889160 111.24668121]
[217.71716309 105.11074829]
[208.16210938 93.15418243]
[193.44659424 96.06165314]
[178.73106384 98.96912384]
[164.01554871 101.87660217]
[149.30001831 104.78407288]
[101.43444061 113.50535583]
[97.18159485 127.88983917]
[92.92874908 142.27432251]
[88.67589569 156.65879822]
[86.52732086 171.50411987]
[86.52732086 186.50411987]
[86.52732086 201.50411987]
[101.30911255 204.28526306]
[115.32442474 209.73388672]
[128.09645081 217.66302490]
[139.19100952 227.80143738]
[148.23124695 239.80271912]
[154.91041565 253.25727844]
[159.00239563 267.70623779]
[160.36921692 282.65713501]
[158.96580505 297.60061646]
[154.84138489 312.02792358]
[148.13786316 325.44808960]
[139.08482361 337.40472412]
[127.99178314 347.49151611]
[115.23750305 355.36599731]
[101.25713348 360.76126099]
[86.52732086 363.49493408]
[86.52732086 378.49493408]
[86.52732086 393.49493408]
[86.52732086 408.49493408]
[86.52732086 423.49493408]
[86.52732086 438.49493408]
[86.52732086 453.49493408]
[86.52732086 468.49493408]
[86.52732086 483.49493408]
[86.52732086 498.49493408]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 152]
[2 151]
[3 150]
[4 149]
[5 148]
[6 147]
[7 146]
[8 145]
[9 144]
[10 143]
[26 127]
[27 126]
[28 125]
[43 124]
[44 123]
[45 122]
[46 121]
[47 65]
[48 64]
[49 63]
[67 99]
[68 98]
[69 97]
[100 120]
[101 119]
[102 118]
[103 117]
[104 116]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
