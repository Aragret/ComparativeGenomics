%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:50 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCCAAAUCUCCACCUCCAUCAUCACCUCAACCCAAAAAGGCAUAAUUAAACUUUACUUCCUCUxxxxxxxxxxAUCUCCGCAUGAUGAAACUUCGGCUCACUCCUUGGCGCCUGCCUGAUCCUCCAAAUCACCACCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[95.09003448 227.84590149]
[94.78603363 212.84896851]
[94.48203278 197.85205078]
[94.17802429 182.85513306]
[93.87402344 167.85821533]
[93.57001495 152.86129761]
[93.26601410 137.86437988]
[92.96200562 122.86746216]
[92.65800476 107.87054443]
[88.45854187 93.47038269]
[80.65348816 80.66096497]
[72.84844208 67.85154724]
[65.04338837 55.04212952]
[57.23833847 42.23271179]
[41.99291992 47.74662781]
[25.94631004 50.01855469]
[9.77993774 48.95419312]
[-5.82013798 44.60088348]
[-20.19233322 37.14548111]
[-32.72759628 26.90636635]
[-42.89521790 14.31981850]
[-50.26530457 -0.07855085]
[-54.52693939 -15.67660046]
[-55.50132370 -31.81168175]
[-53.14924622 -47.79878998]
[-47.57268906 -62.95964813]
[-39.01038361 -76.65147400]
[-27.82759285 -88.29425812]
[-36.39661789 -100.60570526]
[-44.96564102 -112.91716003]
[-53.53466415 -125.22860718]
[-62.10368729 -137.54006958]
[-70.67270660 -149.85151672]
[-83.82427216 -142.60899353]
[-97.66085052 -136.78089905]
[-112.03084564 -132.43106079]
[-126.77680206 -129.60714722]
[-141.73715210 -128.34010315]
[-156.74800110 -128.64379883]
[-171.64486694 -130.51492310]
[-186.26454163 -133.93296814]
[-200.44682312 -138.86048889]
[-214.03634644 -145.24348450]
[-226.88420105 -153.01202393]
[-238.84963989 -162.08099365]
[-249.80152893 -172.35102844]
[-259.61990356 -183.70960999]
[-268.19717407 -196.03227234]
[-275.43936157 -209.18400574]
[-281.26715088 -223.02073669]
[-285.61663818 -237.39082336]
[-288.44018555 -252.13685608]
[-289.70687866 -267.09722900]
[-289.40280151 -282.10809326]
[-287.53131104 -297.00491333]
[-284.11291504 -311.62448120]
[-279.18505859 -325.80664062]
[-272.80172729 -339.39602661]
[-265.03286743 -352.24368286]
[-255.96362305 -364.20889282]
[-245.69331360 -375.16055298]
[-234.33450317 -384.97863770]
[-222.01162720 -393.55563354]
[-208.85971069 -400.79748535]
[-195.02284241 -406.62493896]
[-180.65264893 -410.97406006]
[-165.90655518 -413.79727173]
[-150.94613647 -415.06356812]
[-135.93530273 -414.75915527]
[-121.03852844 -412.88729858]
[-106.41902161 -409.46853638]
[-92.23697662 -404.54034424]
[-78.64776611 -398.15667725]
[-65.80028534 -390.38751221]
[-53.83529282 -381.31796265]
[-42.88389587 -371.04739380]
[-33.06607437 -359.68835449]
[-24.48939896 -347.36526489]
[-17.24784279 -334.21316528]
[-11.42074680 -320.37615967]
[-7.07195663 -306.00585938]
[-4.24911976 -291.25970459]
[-2.98316431 -276.29925537]
[-3.28796101 -261.28842163]
[-5.16017056 -246.39169312]
[-8.57927990 -231.77227783]
[-13.50782681 -217.59034729]
[-19.89181328 -204.00129700]
[-27.66128922 -191.15400696]
[-36.73113251 -179.18923950]
[-47.00196457 -168.23808289]
[-58.36125565 -158.42053223]
[-49.79223251 -146.10908508]
[-41.22320938 -133.79763794]
[-32.65418625 -121.48618317]
[-24.08516502 -109.17472839]
[-15.51614094 -96.86328125]
[-2.88969660 -102.57968903]
[10.55003738 -105.98282623]
[24.38284683 -106.96492767]
[38.17598724 -105.49396515]
[51.49773026 -101.61463928]
[63.93085861 -95.44709015]
[75.08575439 -87.18312836]
[84.61259460 -77.08026886]
[92.21231842 -65.45375061]
[97.64603424 -52.66664124]
[100.74250031 -39.11854935]
[101.40355682 -25.23310280]
[99.60720062 -11.44472790]
[95.40834045 1.81496429]
[88.93710327 14.13067341]
[80.39482880 25.11642456]
[70.04776001 34.42766190]
[77.85280609 47.23707962]
[85.65785980 60.04649734]
[93.46290588 72.85591888]
[101.26795959 85.66533661]
[101.18296051 70.66557312]
[104.37737274 56.00966263]
[110.69683075 42.40582275]
[119.83595276 30.51143456]
[131.35310364 20.90127563]
[144.69174194 14.03974152]
[159.20730591 10.25840187]
[174.19834900 9.73998642]
[188.94044495 12.50954437]
[202.72122192 18.43324280]
[214.87474060 27.22482872]
[224.81370544 38.45946503]
[232.05783081 51.59425354]
[236.25704956 65.99448395]
[237.20845032 80.96427917]
[234.86605835 95.78025818]
[229.34306335 109.72645569]
[220.90635681 122.12895203]
[209.96362305 132.38841248]
[197.04365540 140.00907898]
[182.77079773 144.62268066]
[167.83473206 146.00627136]
[152.95726013 144.09300232]
[138.85728455 138.97532654]
[126.21616364 130.90054321]
[115.64476776 120.25885010]
[107.65492249 107.56653595]
[107.95893097 122.56345367]
[108.26293182 137.56037903]
[108.56693268 152.55729675]
[108.87094116 167.55421448]
[109.17494202 182.55113220]
[109.47895050 197.54804993]
[109.78295135 212.54496765]
[110.08695984 227.54188538]
[112.66764069 246.75100708]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 153]
[2 152]
[3 151]
[4 150]
[5 149]
[6 148]
[7 147]
[8 146]
[9 145]
[10 118]
[11 117]
[12 116]
[13 115]
[14 114]
[28 97]
[29 96]
[30 95]
[31 94]
[32 93]
[33 92]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
