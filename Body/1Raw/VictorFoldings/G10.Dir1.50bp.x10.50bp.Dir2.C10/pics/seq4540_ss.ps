%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:03 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGGGACUAUGAGAAUCGAACCCAUCCCUGAGAAUCCAAAAUUCUCCGUGCCACCUAUCACACxxxxxxxxxxCUAAUAGUUAUGUCAUCCCUCUUAUUAAUCAUCAUCCUAGCCCUAAGUCUGGCCUAUGAGCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[179.06459045 399.65518188]
[181.65559387 380.44744873]
[181.96765137 365.45068359]
[182.27970886 350.45394897]
[182.59175110 335.45718384]
[182.90380859 320.46041870]
[183.21586609 305.46368408]
[183.52792358 290.46691895]
[183.83998108 275.47015381]
[184.15203857 260.47341919]
[184.46409607 245.47665405]
[183.06179810 230.54235840]
[179.96347046 215.86582947]
[176.86514282 201.18930054]
[173.76683044 186.51277161]
[166.44772339 173.41961670]
[155.56889343 163.09242249]
[144.69006348 152.76521301]
[133.81124878 142.43800354]
[119.25374603 139.28704834]
[114.57208252 124.17438507]
[94.34579468 131.14514160]
[72.48369598 121.76194763]
[61.54460144 97.96363831]
[46.58435059 96.87232208]
[57.88460159 106.73661804]
[63.42592621 120.67555237]
[61.98262787 135.60595703]
[53.87395477 148.22535706]
[40.89346695 155.74247742]
[25.91233635 156.49458313]
[12.24424362 150.31532288]
[2.91244817 138.57148743]
[-0.01894358 123.86071014]
[4.09846544 109.43687439]
[14.35394192 98.49040985]
[28.48104095 93.44235229]
[14.15844250 88.98553467]
[-0.16415435 84.52871704]
[-14.48675156 80.07189941]
[-28.80934906 75.61508942]
[-43.13194656 71.15827179]
[-57.94594574 77.31660461]
[-71.92699432 69.44831848]
[-74.35002899 53.58930206]
[-63.35630798 41.90522766]
[-47.37926865 43.35911942]
[-38.67512894 56.83567429]
[-24.35253334 61.29248810]
[-10.02993584 65.74930573]
[4.29266119 70.20612335]
[18.61525917 74.66293335]
[32.93785477 79.11975098]
[47.67566299 81.91207886]
[62.63591003 83.00338745]
[68.02131653 77.78347778]
[53.59474182 73.67568207]
[49.93882370 59.12802887]
[60.70944214 48.68801498]
[75.13608551 52.79554749]
[78.79212189 67.34366608]
[84.17752838 62.12376022]
[83.55355072 47.13674545]
[82.92957306 32.14973068]
[82.30559540 17.16271400]
[67.73114014 13.10803890]
[55.12408829 4.74636984]
[45.71955872 -7.10310268]
[40.43890762 -21.27948761]
[39.79948044 -36.39392853]
[43.86391830 -50.96566391]
[52.23403549 -63.56710815]
[64.08980560 -72.96369934]
[78.26972961 -78.23484802]
[93.38459015 -78.86415100]
[107.95360565 -74.78994751]
[120.54943085 -66.41138458]
[129.93807983 -54.54932404]
[135.19972229 -40.36587143]
[135.81889343 -25.25058937]
[131.73493958 -10.68431187]
[123.34793854 1.90590215]
[111.47958374 11.28659344]
[97.29261017 16.53873634]
[97.91658783 31.52575302]
[98.54056549 46.51276779]
[99.16454315 61.49978638]
[117.19963074 68.44436646]
[128.42924500 82.53000641]
[130.78321838 99.06755066]
[124.89929199 113.29555511]
[140.23490906 117.18518829]
[144.13844299 131.55918884]
[155.01727295 141.88638306]
[165.89610291 152.21359253]
[176.77493286 162.54080200]
[173.04360962 148.01229858]
[172.25576782 133.03300476]
[174.44242859 118.19323730]
[179.51742554 104.07784271]
[187.28076172 91.24310303]
[197.42646790 80.19481659]
[209.55471802 71.36841583]
[223.18754578 65.11173248]
[237.78767395 61.67134094]
[252.77972412 61.18283081]
[267.57284546 63.66545105]
[281.58407593 69.02136993]
[294.26119995 77.03950500]
[305.10461426 87.40386200]
[313.68704224 99.70598602]
[319.67016602 113.46105957]
[322.81826782 128.12698364]
[323.00723267 143.12579346]
[320.22964478 157.86637878]
[314.59494019 171.76783752]
[306.32522583 184.28228760]
[295.74633789 194.91654968]
[283.27526855 203.25152588]
[269.40344238 208.95875549]
[254.67755127 211.81329346]
[239.67796326 211.70265198]
[224.99578857 208.63119507]
[211.20965576 202.71997070]
[198.86286926 194.20193481]
[188.44335938 183.41445923]
[191.54167175 198.09097290]
[194.63999939 212.76750183]
[197.73831177 227.44403076]
[204.08372498 213.85227966]
[215.94044495 204.66433716]
[230.68585205 201.91247559]
[245.05842590 206.20539856]
[255.87907410 216.59355164]
[260.75436401 230.77915955]
[258.60592651 245.62451172]
[249.90899658 257.84591675]
[236.58723450 264.74017334]
[221.58729553 264.78228760]
[208.22702026 257.96295166]
[199.46084595 245.78871155]
[199.14878845 260.78546143]
[198.83673096 275.78222656]
[198.52467346 290.77899170]
[198.21263123 305.77572632]
[197.90057373 320.77249146]
[197.58851624 335.76922607]
[197.27645874 350.76599121]
[196.96440125 365.76275635]
[196.65234375 380.75949097]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 150]
[3 149]
[4 148]
[5 147]
[6 146]
[7 145]
[8 144]
[9 143]
[10 142]
[11 141]
[12 129]
[13 128]
[14 127]
[15 126]
[16 96]
[17 95]
[18 94]
[19 93]
[21 91]
[24 55]
[25 54]
[37 53]
[38 52]
[39 51]
[40 50]
[41 49]
[42 48]
[62 87]
[63 86]
[64 85]
[65 84]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
