%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:03 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGACAAGCAUCAAGCACGCAGCAAUGCAGCUCAAAACGCUUAGCCUAGCCACACCCCCACGGxxxxxxxxxxCCCAUGCCUCAGGAUACUCCUCAAUAGCCAUCGCUGUAGUAUAUCCAAAGACAACCAUCACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[123.61672974 252.77534485]
[123.61672974 237.77534485]
[123.61672974 222.77534485]
[123.61672974 207.77534485]
[123.61672974 192.77534485]
[123.61672974 177.77534485]
[123.61672974 162.77534485]
[123.61672974 147.77534485]
[123.61672974 132.77534485]
[123.61672974 117.77535248]
[108.01793671 126.32686615]
[91.63797760 124.07181549]
[80.73639679 113.36338043]
[66.32418060 117.52126312]
[51.91196823 121.67915344]
[37.49975204 125.83703613]
[33.71177292 142.94105530]
[21.87216568 155.73257446]
[5.28105831 160.77775574]
[-11.50291729 156.78378296]
[-23.91513252 144.92877197]
[-38.14191055 149.68258667]
[-52.36869049 154.43640137]
[-58.84489822 165.63964844]
[-70.84216309 169.28445435]
[-81.73444366 163.93043518]
[-96.05703735 168.38725281]
[-110.37963867 172.84407043]
[-121.10047150 185.25357056]
[-137.15483093 181.90846252]
[-142.02735901 166.24990845]
[-130.70562744 154.38607788]
[-114.83644867 158.52146912]
[-100.51385498 154.06465149]
[-86.19125366 149.60783386]
[-75.03993225 136.09310913]
[-57.12250519 140.20962524]
[-42.89572525 135.45581055]
[-28.66894722 130.70199585]
[-27.47674561 118.05374146]
[-21.54784012 106.76476288]
[-11.73940277 98.54374695]
[0.50123876 94.65023804]
[13.35010815 95.70178223]
[24.87836647 101.57624054]
[33.34186172 111.42482758]
[47.75407791 107.26693726]
[62.16629410 103.10904694]
[76.57851410 98.95116425]
[91.91976166 74.76004791]
[123.27103424 81.77441406]
[119.26329041 67.31972504]
[104.28450775 68.68931580]
[89.30191040 67.36211395]
[74.79711914 63.38079071]
[61.23641586 56.87332535]
[49.05571365 48.04891205]
[38.64657593 37.19121552]
[30.34360886 24.64926338]
[24.41372108 10.82623100]
[21.04753494 -3.83352852]
[20.35325623 -18.85876656]
[22.35320663 -33.76647949]
[26.98309326 -48.07745361]
[34.09408569 -61.33164215]
[43.45759583 -73.10298157]
[54.77262115 -83.01307678]
[67.67543793 -90.74335480]
[81.75126648 -96.04531097]
[96.54763031 -98.74851990]
[111.58889008 -98.76609039]
[126.39153290 -96.09744263]
[140.47970581 -90.82836914]
[153.40054321 -83.12824249]
[164.73867798 -73.24460602]
[174.12965393 -61.49516296]
[181.27157593 -48.25761795]
[185.93487549 -33.95749664]
[187.96963501 -19.05449295]
[187.31045532 -4.02767420]
[183.97850037 10.63990688]
[178.08091736 24.47674942]
[169.80726624 37.03805542]
[159.42350769 47.92003632]
[147.26345825 56.77287292]
[133.71798706 63.31198883]
[137.72572327 77.76667786]
[150.42065430 85.75659180]
[165.18670654 83.11772919]
[174.22958374 70.43450165]
[189.24205017 67.96866608]
[201.27784729 76.66782379]
[216.04389954 74.02896118]
[230.80995178 71.39009857]
[245.57600403 68.75123596]
[260.28396606 65.80574799]
[274.92745972 62.55492401]
[289.57098389 59.30410004]
[278.76803589 48.89752197]
[279.95629883 33.94466019]
[292.26718140 25.37484550]
[306.70248413 29.45191956]
[312.71112061 43.19586945]
[305.90182495 56.56058121]
[320.80371094 54.84788895]
[335.70562744 53.13520050]
[350.60751343 51.42251205]
[365.50942993 49.70981979]
[378.35296631 39.51296616]
[393.50396729 45.78820038]
[395.37640381 62.08010101]
[382.04406738 71.62895966]
[367.22210693 64.61172485]
[352.32022095 66.32440948]
[337.41830444 68.03710175]
[322.51641846 69.74979401]
[307.61450195 71.46247864]
[292.82180786 73.94760132]
[278.17828369 77.19842529]
[263.53479004 80.44924927]
[260.23129272 83.97946930]
[254.65251160 85.43152618]
[248.21487427 83.51728821]
[233.44882202 86.15615082]
[218.68275452 88.79501343]
[203.91670227 91.43388367]
[195.63896179 103.76330566]
[180.70167542 106.64983368]
[167.82557678 97.88378143]
[153.05950928 100.52264404]
[167.28308105 105.28604889]
[182.25888062 106.13797760]
[194.55732727 114.72566223]
[200.51567078 128.49148560]
[198.35942078 143.33569336]
[188.73071289 154.83735657]
[174.49720764 159.57101440]
[159.89796448 156.12689209]
[149.28094482 145.53071594]
[145.80810547 130.93908691]
[138.61672974 117.77535248]
[138.61672974 132.77534485]
[138.61672974 147.77534485]
[138.61672974 162.77534485]
[138.61672974 177.77534485]
[138.61672974 192.77534485]
[138.61672974 207.77534485]
[138.61672974 222.77534485]
[138.61672974 237.77534485]
[138.61672974 252.77534485]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[13 49]
[14 48]
[15 47]
[16 46]
[21 39]
[22 38]
[23 37]
[26 35]
[27 34]
[28 33]
[51 87]
[52 86]
[88 130]
[89 129]
[92 126]
[93 125]
[94 124]
[95 123]
[96 120]
[97 119]
[98 118]
[104 117]
[105 116]
[106 115]
[107 114]
[108 113]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
