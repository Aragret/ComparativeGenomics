%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:08 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCAUACUAGUCUUUGCCGCCUGCGAAGCAGCGGUGGGCCUAGCCCUACUAGUCUCAAUCUCxxxxxxxxxxGUAACCACGUUCUCCUGAUCAAAUAUCACUCUCCUACUUACAGGACUCAACAUACUAGUCCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[105.47284698 266.81008911]
[105.47284698 251.81008911]
[105.47284698 236.81008911]
[105.47284698 221.81008911]
[105.47284698 206.81008911]
[105.47284698 191.81008911]
[105.47284698 176.81008911]
[105.47284698 161.81008911]
[105.47284698 146.81008911]
[105.47284698 131.81008911]
[88.86661530 129.97729492]
[75.55209351 120.14512634]
[69.03806305 105.09899902]
[70.94315338 88.97113800]
[55.94396210 89.12717438]
[40.94477463 89.28321075]
[25.94558525 89.43924713]
[10.94639683 89.59528351]
[-4.05279207 89.75131989]
[-8.37699699 100.08305359]
[-17.27866364 107.90625000]
[-29.33328056 111.22090912]
[-42.26567459 108.81822205]
[-53.37881088 100.62693024]
[-68.14486694 103.26580048]
[-82.91092682 105.90466309]
[-97.67697906 108.54352570]
[-112.44303131 111.18238831]
[-120.40097809 115.80007172]
[-127.54350281 113.71920776]
[-142.36126709 116.05031586]
[-157.17901611 118.38141632]
[-171.88607788 126.81581116]
[-184.06216431 115.01838684]
[-176.09646606 100.05229187]
[-159.51011658 103.56365967]
[-144.69236755 101.23255920]
[-129.87460327 98.90145111]
[-115.08190155 96.41633606]
[-100.31584167 93.77747345]
[-85.54978943 91.13860321]
[-70.78372955 88.49974060]
[-56.01767731 85.86087799]
[-53.84083939 71.01966858]
[-67.22712708 64.25155640]
[-80.61341095 57.48344421]
[-93.99969482 50.71532822]
[-110.86299133 48.96445847]
[-113.84877014 32.27549744]
[-98.63856506 24.78643608]
[-87.23158264 37.32904434]
[-73.84529114 44.09715652]
[-60.45901108 50.86527252]
[-47.07272339 57.63338852]
[-19.33807564 55.58712387]
[-4.20882845 74.75212860]
[10.79035950 74.59609222]
[25.78954887 74.44005585]
[40.78873825 74.28401947]
[55.78792572 74.12798309]
[70.78711700 73.97194672]
[57.54927826 66.91788483]
[44.31144714 59.86383057]
[29.43226051 57.96386719]
[15.71645260 51.89125443]
[4.30788755 42.15243530]
[-3.84198689 29.55959702]
[-8.05349159 15.16295719]
[-7.97539568 0.16316094]
[-3.61421371 -14.18884563]
[4.66634274 -26.69613838]
[16.17569542 -36.31563950]
[29.95399094 -42.24510574]
[44.85215378 -43.99003220]
[59.62770844 -41.40489960]
[73.04841614 -34.70529938]
[83.99501801 -24.44996071]
[91.55458832 -11.49415684]
[95.09668732 3.08162975]
[94.32590485 18.06181335]
[89.30882263 32.19272995]
[89.63098907 47.18927002]
[89.95314789 62.18581009]
[96.86014557 48.87065125]
[103.76714325 35.55549622]
[105.69334412 18.71132660]
[122.41246033 15.89931297]
[129.74288940 31.18659973]
[117.08230591 42.46249771]
[110.17530060 55.77765274]
[103.26830292 69.09280396]
[123.47980499 78.73442078]
[132.27676392 99.79132080]
[147.04283142 97.15245819]
[161.80888367 94.51359558]
[176.57493591 91.87472534]
[191.34098816 89.23586273]
[192.45381165 74.19550323]
[197.27284241 59.90467834]
[205.49516296 47.26171494]
[216.60388184 37.06136703]
[229.90071106 29.94483376]
[244.54980469 26.35946846]
[259.63031006 26.53064919]
[274.19424438 30.44761467]
[287.32611084 37.86414337]
[298.20043945 48.31402206]
[306.13363647 61.14036560]
[310.62704468 75.53689575]
[311.39816284 90.59864807]
[308.39855957 105.37880707]
[301.81677246 118.94829559]
[292.06655884 130.45411682]
[279.76080322 139.17300415]
[265.67303467 144.55688477]
[250.68888855 146.26733398]
[235.75021362 144.19680786]
[221.79611206 138.47547913]
[209.70372009 129.46298218]
[200.23320007 117.72586060]
[193.97985840 104.00192261]
[179.21380615 106.64078522]
[164.44773865 109.27964783]
[149.68168640 111.91851044]
[134.91563416 114.55738068]
[149.13920593 119.32077789]
[163.36277771 124.08418274]
[178.36175537 123.90969086]
[192.16122437 129.78970337]
[202.42471313 140.72866821]
[207.41445923 154.87442017]
[206.28561401 169.83189392]
[199.22932434 183.06852722]
[187.44029236 192.34317017]
[172.91462708 196.08547974]
[158.11172485 193.66183472]
[145.53794861 185.48257446]
[137.32225037 172.93260193]
[134.85560608 158.13755798]
[127.66423035 144.97381592]
[120.47284698 131.81008911]
[120.47284698 146.81008911]
[120.47284698 161.81008911]
[120.47284698 176.81008911]
[120.47284698 191.81008911]
[120.47284698 206.81008911]
[120.47284698 221.81008911]
[120.47284698 236.81008911]
[120.47284698 251.81008911]
[120.47284698 266.81008911]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[14 61]
[15 60]
[16 59]
[17 58]
[18 57]
[19 56]
[24 43]
[25 42]
[26 41]
[27 40]
[28 39]
[30 38]
[31 37]
[32 36]
[44 54]
[45 53]
[46 52]
[47 51]
[83 91]
[84 90]
[85 89]
[93 125]
[94 124]
[95 123]
[96 122]
[97 121]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
