%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:23 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGAAUUAGGAGGGCACUGGCCCCCAACAGGCAUCACCCCGCUAAAUCCCCUAGAAGUCCCACxxxxxxxxxxCGAAUGAUAUUUCCUAUUCGCCUACACAAUUCUCCGAUCCGUCCCUAACAAACUAGGAGGCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[141.81617737 316.75778198]
[141.81617737 301.75778198]
[141.81617737 286.75778198]
[141.81617737 271.75778198]
[141.81617737 256.75778198]
[141.81617737 241.75778198]
[141.81617737 226.75778198]
[141.81617737 211.75778198]
[141.81617737 196.75778198]
[141.81617737 181.75778198]
[137.35935974 167.43518066]
[128.84826660 155.08360291]
[120.33718109 142.73204041]
[111.82609558 130.38046265]
[93.59827423 131.96633911]
[77.38686371 123.48350525]
[64.77574158 131.60505676]
[59.20970154 138.93110657]
[51.81669235 139.76119995]
[39.03933334 147.61862183]
[26.26197815 155.47604370]
[13.48462009 163.33346558]
[6.16228628 178.00711060]
[-10.22081470 178.73237610]
[-18.81115341 164.76319885]
[-10.77172565 150.46984863]
[5.62719440 150.55612183]
[18.40455246 142.69868469]
[31.18190956 134.84126282]
[43.95926666 126.98384094]
[56.65419769 118.99391937]
[69.26532745 110.87237549]
[67.40378571 99.43793488]
[69.65843201 88.07446289]
[75.74455261 78.21692657]
[84.89360046 71.11011505]
[81.18743896 56.57517624]
[77.48127747 42.04024124]
[73.77511597 27.50530434]
[68.43360138 13.48859215]
[61.52660370 0.17343616]
[54.61960602 -13.14171982]
[47.71260834 -26.45687485]
[33.50855255 -21.55150032]
[18.74162102 -18.76661682]
[3.72656870 -18.16158676]
[-11.21655750 -19.74930573]
[-25.76924324 -23.49592972]
[-39.62129593 -29.32160378]
[-52.47746277 -37.10214996]
[-64.06370544 -46.67172241]
[-74.13307190 -57.82635117]
[-82.47093201 -70.32826996]
[-88.89955139 -83.91100311]
[-93.28192139 -98.28503418]
[-95.52462006 -113.14397430]
[-95.57984161 -128.17111206]
[-93.44642639 -143.04614258]
[-89.16982269 -157.45199585]
[-82.84120941 -171.08160400]
[-74.59546661 -183.64447021]
[-64.60836029 -194.87281799]
[-53.09276962 -204.52728271]
[-40.29413986 -212.40211487]
[-26.48527908 -218.32945251]
[-11.96052456 -222.18293762]
[2.97052765 -223.88044739]
[17.98962212 -223.38578796]
[32.77662277 -220.70951843]
[47.01634979 -215.90869141]
[60.40527725 -209.08560181]
[72.65802002 -200.38571167]
[83.51341248 -189.99444580]
[92.74007416 -178.13330078]
[100.14132690 -165.05511475]
[105.55942535 -151.03862000]
[108.87887573 -136.38258362]
[110.02892303 -121.39942169]
[108.98505402 -106.40848541]
[105.76952362 -91.72930908]
[100.45086670 -77.67478180]
[93.14245605 -64.54447937]
[84.00006104 -52.61826324]
[73.21855927 -42.15035629]
[61.02776337 -33.36387253]
[67.93476105 -20.04871750]
[74.84175873 -6.73356247]
[81.74875641 6.58159351]
[84.23200989 -8.21142769]
[93.20281982 -20.23326492]
[106.67693329 -26.82479668]
[121.67399597 -26.52803802]
[134.87680054 -19.40863037]
[143.36500549 -7.04131985]
[145.26109314 7.83835840]
[140.14567566 21.93915749]
[129.15023804 32.14210892]
[114.70685577 36.19041443]
[100.01028442 33.18862534]
[88.31005096 23.79914284]
[92.01621246 38.33407974]
[95.72237396 52.86901474]
[99.42853546 67.40395355]
[114.09801483 70.60485077]
[125.77712250 80.04082489]
[131.98858643 93.71038818]
[131.41487122 108.71405792]
[124.17766571 121.86936951]
[132.68875122 134.22094727]
[141.19984436 146.57250977]
[149.71093750 158.92408752]
[149.06101990 143.93817139]
[151.38420105 129.11917114]
[156.58892822 115.05109406]
[164.47009277 102.28836823]
[174.71708679 91.33395386]
[186.92608643 82.61957550]
[200.61593628 76.48866272]
[215.24711609 73.18282318]
[230.24301147 72.83235168]
[245.01266479 75.45105743]
[258.97396851 80.93572998]
[271.57675171 89.07023621]
[282.32431030 99.53397369]
[290.79309082 111.91458893]
[296.64935303 125.72415924]
[299.66232300 140.41844177]
[299.71319580 155.41836548]
[296.80001831 170.13275146]
[291.03759766 183.98173523]
[282.65298462 196.41952515]
[271.97668457 206.95594788]
[259.42938232 215.17576599]
[245.50559998 220.75505066]
[230.75405884 223.47390747]
[215.75611877 223.22518921]
[201.10284424 220.01869202]
[187.37171936 213.98080444]
[175.10388184 205.34945679]
[164.78280640 194.46482849]
[156.81617737 181.75778198]
[156.81617737 196.75778198]
[156.81617737 211.75778198]
[156.81617737 226.75778198]
[156.81617737 241.75778198]
[156.81617737 256.75778198]
[156.81617737 271.75778198]
[156.81617737 286.75778198]
[156.81617737 301.75778198]
[156.81617737 316.75778198]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[11 111]
[12 110]
[13 109]
[14 108]
[16 32]
[17 31]
[19 30]
[20 29]
[21 28]
[22 27]
[36 103]
[37 102]
[38 101]
[39 100]
[40 88]
[41 87]
[42 86]
[43 85]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
