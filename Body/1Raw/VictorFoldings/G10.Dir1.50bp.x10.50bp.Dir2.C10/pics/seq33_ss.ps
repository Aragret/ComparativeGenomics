%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:24 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCUAUUAACCACUCACGGGAGCUCUCCAUGCAUUUGGUAUUUUCGUCUGGGGGGUAUGCACxxxxxxxxxxUUAAAUAGGGACCUGUAUGAAUGGCUCCACGAGGGUUCAGCUGUCUCUUACUUUUAACCACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[163.02786255 398.87548828]
[162.71580505 383.87872314]
[162.40374756 368.88198853]
[162.09169006 353.88522339]
[161.77964783 338.88845825]
[161.46759033 323.89172363]
[161.15553284 308.89495850]
[160.84347534 293.89822388]
[160.53141785 278.90145874]
[157.28059387 264.25796509]
[151.21757507 250.53790283]
[145.15455627 236.81785583]
[135.25924683 233.96925354]
[128.44940186 225.95393372]
[127.18467712 215.29072571]
[132.12921143 205.51130676]
[126.64218140 191.55091858]
[121.15515137 177.59053040]
[115.66812134 163.63014221]
[110.25922394 158.52235413]
[110.21547699 149.32180786]
[105.02006531 135.25028992]
[99.82464600 121.17877197]
[87.73028564 117.26341248]
[80.05625153 107.12867737]
[79.56721497 94.42574310]
[86.43935394 83.73101044]
[81.53780365 69.55445099]
[76.63625336 55.37789154]
[71.73470306 41.20133591]
[66.83315277 27.02477646]
[51.83493805 24.02462959]
[40.42747116 13.98637867]
[35.60820770 -0.31890309]
[38.57653427 -15.01737309]
[48.43710709 -26.18136597]
[43.53555298 -40.35792542]
[38.63400269 -54.53448105]
[33.73245239 -68.71103668]
[28.83090210 -82.88759613]
[23.92935181 -97.06415558]
[19.88170624 -100.56217957]
[17.83033562 -104.84519958]
[17.73521042 -109.00363922]
[19.19440460 -112.28056335]
[15.18666458 -126.73525238]
[11.17892456 -141.18994141]
[6.57335997 -155.46540833]
[1.37794459 -169.53692627]
[-3.81747079 -183.60844421]
[-9.01288605 -197.67996216]
[-23.85853577 -195.22981262]
[-38.89958954 -195.63377380]
[-53.59232330 -198.87722778]
[-67.40560913 -204.84294128]
[-79.84009552 -213.31524658]
[-90.44628906 -223.98788452]
[-98.84078979 -236.47503662]
[-104.72013092 -250.32530212]
[-107.87178040 -265.03799438]
[-108.18180847 -280.08129883]
[-105.63900757 -294.91134644]
[-100.33530426 -308.99209595]
[-92.46241760 -321.81448364]
[-82.30494690 -332.91503906]
[-70.23007965 -341.89248657]
[-56.67432022 -348.42224121]
[-42.12769318 -352.26828003]
[-27.11605263 -353.29162598]
[-12.18206215 -351.45520020]
[2.13442636 -346.82543945]
[15.31587982 -339.56970215]
[26.88579750 -329.95025635]
[36.42593384 -318.31488037]
[43.59141922 -305.08413696]
[48.12322617 -290.73635864]
[49.85752869 -275.79016113]
[48.73163986 -260.78585815]
[44.78625488 -246.26585388]
[38.16399765 -232.75503540]
[29.10426140 -220.74182129]
[17.93454742 -210.66044617]
[5.05863285 -202.87538147]
[10.25404835 -188.80384827]
[15.44946384 -174.73233032]
[20.64488029 -160.66081238]
[23.20336533 -159.37182617]
[25.38772011 -156.95883179]
[26.75468445 -153.56570435]
[26.92385674 -149.49847412]
[25.63361359 -145.19767761]
[29.64135361 -130.74299622]
[33.64909363 -116.28830719]
[38.10590744 -101.96570587]
[43.00746155 -87.78914642]
[47.90901184 -73.61258698]
[52.81056213 -59.43603134]
[57.71211243 -45.25947571]
[62.61366272 -31.08291626]
[77.26402283 -28.39358902]
[88.67714691 -18.66751099]
[93.72292328 -4.44054604]
[90.95185852 10.49993706]
[81.00971222 22.12322617]
[85.91126251 36.29978180]
[90.81281281 50.47634125]
[95.71436310 64.65290070]
[100.61591339 78.82946014]
[115.60089874 85.67578125]
[121.14607239 101.18941498]
[113.89616394 115.98336029]
[119.09158325 130.05487061]
[124.28699493 144.12640381]
[129.62850952 158.14311218]
[135.11553955 172.10350037]
[140.60256958 186.06388855]
[146.08959961 200.02427673]
[162.41069031 211.78312683]
[158.87461853 230.75483704]
[164.93763733 244.47488403]
[171.00064087 258.19494629]
[172.99787903 243.32850647]
[179.21250916 229.67645264]
[189.11254883 218.40750122]
[201.85046387 210.48631287]
[216.33586121 206.59097290]
[231.32867432 207.05497742]
[245.54547119 211.83857727]
[257.76919556 220.53228760]
[266.95343018 232.39186096]
[272.31198120 246.40206909]
[273.38610840 261.36355591]
[270.08386230 275.99554443]
[262.68792725 289.04547119]
[251.83145142 299.39614868]
[238.44378662 306.16156006]
[223.67100525 308.76251221]
[208.77774048 306.97634888]
[195.03890991 300.95599365]
[183.63066101 291.21679688]
[175.52816772 278.58938599]
[175.84022522 293.58615112]
[176.15228271 308.58291626]
[176.46434021 323.57965088]
[176.77639771 338.57641602]
[177.08845520 353.57318115]
[177.40051270 368.56991577]
[177.71257019 383.56668091]
[178.02461243 398.56341553]
[180.61561584 417.77114868]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 149]
[2 148]
[3 147]
[4 146]
[5 145]
[6 144]
[7 143]
[8 142]
[9 141]
[10 121]
[11 120]
[12 119]
[16 117]
[17 116]
[18 115]
[19 114]
[21 113]
[22 112]
[23 111]
[27 108]
[28 107]
[29 106]
[30 105]
[31 104]
[36 99]
[37 98]
[38 97]
[39 96]
[40 95]
[41 94]
[45 93]
[46 92]
[47 91]
[48 86]
[49 85]
[50 84]
[51 83]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
