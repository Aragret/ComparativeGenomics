%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:26 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGAAACCAAAUAAUUCAAGCACUGCUUAUUACAAUUUUACUGGGUCUCUAUUUUACCCUCCUxxxxxxxxxxCUAUACUUCACAACAAUCCUAAUCCUAAUACCAACUAUCUCCCUAAUUGAAAACAAAAUACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[115.41692352 263.58712769]
[115.41692352 248.58712769]
[115.41692352 233.58712769]
[115.41692352 218.58712769]
[115.41692352 203.58712769]
[115.41692352 188.58712769]
[115.41692352 173.58712769]
[115.41692352 158.58712769]
[115.41692352 143.58712769]
[115.41692352 128.58712769]
[109.24113464 124.33157349]
[102.04975128 137.49531555]
[99.68446350 152.30764771]
[85.89521790 158.21162415]
[73.54376221 149.70036316]
[74.15074158 134.71264648]
[87.14959717 127.22807312]
[96.88956451 115.82048798]
[90.71377563 111.56494141]
[76.69706726 116.90645599]
[62.68035126 122.24797058]
[48.66363907 127.58947754]
[44.13083267 132.54541016]
[38.60083008 134.17340088]
[33.95113754 132.84829712]
[19.72435951 137.60211182]
[5.49757957 142.35592651]
[-8.72919941 147.10974121]
[-21.83564377 157.86416626]
[-35.79799652 148.24703979]
[-30.42188263 132.16806030]
[-13.48301411 132.88296509]
[0.74376476 128.12915039]
[14.97054386 123.37533569]
[29.19732285 118.62152100]
[43.32212448 113.57276917]
[57.33884048 108.23125458]
[71.35555267 102.88973999]
[85.37226868 97.54822540]
[96.03388977 86.99694061]
[101.52091980 73.03655243]
[107.00795746 59.07616043]
[112.49498749 45.11576843]
[117.98201752 31.15537834]
[104.47581482 24.61280441]
[91.51007843 17.05553055]
[79.16088867 8.52790737]
[67.50072479 -0.92001921]
[56.59801483 -11.23280621]
[46.51673126 -22.34993172]
[37.31604385 -34.20615768]
[29.04994202 -46.73190308]
[21.76693916 -59.85366440]
[15.50977135 -73.49443817]
[10.31516171 -87.57416534]
[6.21359348 -102.01022339]
[3.22913647 -116.71790314]
[1.37930512 -131.61088562]
[0.67495507 -146.60177612]
[1.12021959 -161.60258484]
[2.71248603 -176.52529907]
[5.44240952 -191.28234863]
[9.29397011 -205.78710938]
[14.24456596 -219.95448303]
[20.26514244 -233.70130920]
[27.32036972 -246.94692993]
[35.36884308 -259.61361694]
[44.36333466 -271.62701416]
[54.25105286 -282.91665649]
[64.97397614 -293.41625977]
[76.46917725 -303.06420898]
[88.66920471 -311.80389404]
[101.50244904 -319.58404541]
[114.89360046 -326.35897827]
[128.76408386 -332.08892822]
[143.03250122 -336.74029541]
[157.61509705 -340.28576660]
[172.42631531 -342.70455933]
[187.37924194 -343.98245239]
[202.38610840 -344.11193848]
[217.35884094 -343.09228516]
[232.20960999 -340.92947388]
[246.85122681 -337.63616943]
[261.19778442 -333.23171997]
[275.16506958 -327.74197388]
[288.67114258 -321.19912720]
[301.63674927 -313.64163208]
[313.98577881 -305.11376953]
[325.64575195 -295.66561890]
[336.54827881 -285.35263062]
[346.62933350 -274.23529053]
[355.82980347 -262.37890625]
[364.09567261 -249.85299683]
[371.37841797 -236.73109436]
[377.63534546 -223.09020996]
[382.82968140 -209.01037598]
[386.93096924 -194.57424927]
[389.91516113 -179.86651611]
[391.76470947 -164.97349548]
[392.46875000 -149.98258972]
[392.02322388 -134.98178101]
[390.43066406 -120.05910492]
[387.70046997 -105.30210876]
[383.84863281 -90.79741669]
[378.89776611 -76.63014221]
[372.87692261 -62.88342667]
[365.82144165 -49.63793564]
[357.77273560 -36.97140884]
[348.77801514 -24.95817375]
[338.89007568 -13.66873074]
[328.16696167 -3.16933250]
[316.67156982 6.47840595]
[304.47137451 15.21786690]
[291.63800049 22.99776459]
[278.24670410 29.77243996]
[264.37612915 35.50214005]
[250.10762024 40.15323639]
[235.52494812 43.69843674]
[220.71368408 46.11693192]
[205.76074219 47.39453506]
[190.75387573 47.52374649]
[175.78114319 46.50380707]
[160.93043518 44.34070587]
[146.28887939 41.04713058]
[131.94241333 36.64241028]
[126.45537567 50.60280228]
[120.96834564 64.56319427]
[115.48131561 78.52358246]
[109.99427795 92.48397064]
[121.50257111 82.86319733]
[133.87583923 74.38366699]
[148.64001465 71.73432159]
[163.18955994 75.38269806]
[174.95680237 84.68495178]
[181.86509705 97.99943542]
[182.69528198 112.97644043]
[177.30084229 126.97286987]
[166.63377380 137.51866150]
[152.57658386 142.75273132]
[137.60830688 141.75085449]
[130.41691589 128.58712769]
[130.41691589 143.58712769]
[130.41691589 158.58712769]
[130.41691589 173.58712769]
[130.41691589 188.58712769]
[130.41691589 203.58712769]
[130.41691589 218.58712769]
[130.41691589 233.58712769]
[130.41691589 248.58712769]
[130.41691589 263.58712769]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[19 39]
[20 38]
[21 37]
[22 36]
[25 35]
[26 34]
[27 33]
[28 32]
[40 129]
[41 128]
[42 127]
[43 126]
[44 125]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
