%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:38 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGAACCUCCCUCACCAUUGGCAGCCUAGCAUUAGCAGGAAUACCUUUCCUCACAGGUUUCUACxxxxxxxxxxGACAACCAUCAUUCCCCCUAAAUAAAUUAAAAAAACUAUUAAACCCAUAUAACCUCCCCCACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[89.46490479 461.16799927]
[89.46490479 446.16799927]
[89.46490479 431.16799927]
[89.46490479 416.16799927]
[89.46490479 401.16799927]
[89.46490479 386.16799927]
[89.46490479 371.16799927]
[89.46490479 356.16799927]
[89.46490479 341.16799927]
[89.46490479 326.16799927]
[75.11424255 323.45639038]
[61.50729752 318.13980103]
[49.11268616 310.39968872]
[38.35756683 300.50100708]
[29.61293983 288.78311157]
[23.18082237 275.64819336]
[19.28384399 261.54739380]
[18.05752182 246.96536255]
[19.54556084 232.40353394]
[23.69829369 218.36300659]
[30.37433434 205.32714844]
[39.34539795 193.74510193]
[50.30410004 184.01618958]
[62.87449265 176.47621155]
[76.62496185 171.38583374]
[91.08303070 168.92160034]
[91.39101410 153.92477417]
[91.69898987 138.92793274]
[79.45741272 134.09240723]
[69.46212006 125.52896881]
[62.80606842 114.17399597]
[48.03395462 116.77871704]
[33.48538971 125.48363495]
[21.09321785 113.91339111]
[28.78079414 98.80255127]
[45.42922974 102.00659943]
[60.20134735 99.40187836]
[66.59603119 78.35593414]
[83.19189453 63.91983795]
[79.53318787 49.37288284]
[75.87448883 34.82592773]
[72.21578217 20.27897453]
[58.93475342 12.13943481]
[55.43153381 -2.66536450]
[63.27318573 -15.27663136]
[59.61447906 -29.82358551]
[55.95577240 -44.37054062]
[52.29706955 -58.91749573]
[48.63836288 -73.46444702]
[41.27212143 -86.53114319]
[30.72010803 -97.19205475]
[20.16809273 -107.85295868]
[9.61607742 -118.51387024]
[-5.70125437 -116.03214264]
[-19.53674698 -123.05772400]
[-26.57037163 -136.88912964]
[-24.09755707 -152.20790100]
[-13.06914806 -163.12365723]
[2.27420425 -165.43907166]
[16.03266907 -158.26382446]
[22.91583633 -144.35693359]
[20.27698708 -129.06588745]
[30.82900238 -118.40497589]
[41.38101578 -107.74406433]
[51.93303299 -97.08316040]
[48.44664383 -111.67237091]
[48.23131561 -126.67082214]
[51.29744339 -141.35411072]
[57.49693680 -155.01303101]
[66.53036499 -166.98788452]
[77.96142578 -176.70030212]
[91.23800659 -183.68115234]
[105.71886444 -187.59329224]
[120.70458221 -188.24777222]
[135.47135925 -185.61296082]
[149.30598450 -179.81613159]
[161.54025269 -171.13726807]
[171.58325195 -159.99554443]
[178.94992065 -146.92909241]
[183.28446960 -132.56901550]
[184.37751770 -117.60889435]
[182.17630005 -102.77128601]
[176.78710938 -88.77283478]
[168.47024536 -76.28965759]
[157.62741089 -65.92466736]
[144.78230286 -58.17849731]
[130.55532837 -53.42527390]
[115.63362885 -51.89457703]
[100.73792267 -53.66033554]
[86.58765411 -58.63726425]
[73.86625671 -66.58498383]
[63.18531799 -77.12315369]
[66.84402466 -62.57619858]
[70.50273132 -48.02924728]
[74.16143036 -33.48229218]
[77.82013702 -18.93533707]
[90.69503784 -11.53449249]
[94.61271667 3.16606760]
[86.76273346 16.62026787]
[90.42144012 31.16722298]
[94.08014679 45.71417618]
[97.73885345 60.26113129]
[107.43795776 60.89798737]
[116.69350433 63.86666870]
[124.95353699 68.99014282]
[131.72549438 75.96286774]
[136.60551453 84.36903381]
[139.30258179 93.70734406]
[154.29547119 94.16926575]
[169.28836060 94.63119507]
[184.28123474 95.09311676]
[193.67739868 82.74435425]
[208.54711914 78.30917358]
[223.17269897 83.49298859]
[231.93031311 96.30251312]
[231.45246887 111.81222534]
[221.92289734 124.05832672]
[207.00593567 128.33193970]
[192.43743896 122.98977661]
[183.81932068 110.08600616]
[168.82643127 109.62407684]
[153.83354187 109.16215515]
[138.84065247 108.70022583]
[132.52935791 122.93755341]
[121.23823547 133.66345215]
[106.69582367 139.23590088]
[106.38784790 154.23274231]
[106.07987213 169.22958374]
[121.15126038 172.51649475]
[135.29353333 178.66496277]
[147.96926880 187.43937683]
[158.69715881 198.50437927]
[167.07028198 211.43766785]
[172.77151489 225.74612427]
[175.58561707 240.88461304]
[175.40725708 256.27679443]
[172.24502563 271.33694458]
[166.22100830 285.49240112]
[157.56610107 298.20520020]
[146.61109924 308.99261475]
[133.77415466 317.44543457]
[119.54471588 323.24356079]
[104.46490479 326.16799927]
[104.46490479 341.16799927]
[104.46490479 356.16799927]
[104.46490479 371.16799927]
[104.46490479 386.16799927]
[104.46490479 401.16799927]
[104.46490479 416.16799927]
[104.46490479 431.16799927]
[104.46490479 446.16799927]
[104.46490479 461.16799927]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 152]
[2 151]
[3 150]
[4 149]
[5 148]
[6 147]
[7 146]
[8 145]
[9 144]
[10 143]
[26 128]
[27 127]
[28 126]
[31 37]
[32 36]
[39 102]
[40 101]
[41 100]
[42 99]
[45 96]
[46 95]
[47 94]
[48 93]
[49 92]
[50 65]
[51 64]
[52 63]
[53 62]
[108 123]
[109 122]
[110 121]
[111 120]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
