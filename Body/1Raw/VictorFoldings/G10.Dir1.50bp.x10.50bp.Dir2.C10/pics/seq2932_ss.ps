%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:32 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGUAAGACUUCACCAGUCAAAGCGAACUACUAUACUCAAUUGAUCCAAUAACUUGACCAACGGxxxxxxxxxxUUCCUACUUCAGGGUCAUAAAGCCUAAAUAGCCCACACGUUCCCCUUAAAUAAGACAUCACCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[92.50000000 248.78681946]
[92.50000000 233.78681946]
[92.50000000 218.78681946]
[92.50000000 203.78681946]
[92.50000000 188.78681946]
[92.50000000 173.78681946]
[92.50000000 158.78681946]
[92.50000000 143.78681946]
[92.50000000 128.78681946]
[92.50000000 113.78681946]
[85.62358856 110.79267120]
[73.56117249 119.70884705]
[71.87075806 104.80437469]
[64.99433899 101.81022644]
[54.01353836 112.02893829]
[43.03273773 122.24764252]
[32.05193329 132.46635437]
[30.04095650 148.38287354]
[16.26864243 156.61105347]
[1.29993367 150.83892822]
[-3.38245797 135.49440002]
[5.81339788 122.34845734]
[21.83322716 121.48554993]
[32.81402969 111.26683807]
[43.79483414 101.04813385]
[54.77563477 90.82942963]
[75.75560760 84.16226959]
[93.22133636 90.37407684]
[94.14475250 75.40252686]
[95.06816864 60.43098068]
[86.46993256 44.17979431]
[96.65455627 29.92083168]
[97.27038574 14.93347836]
[97.88620758 -0.05387506]
[98.50203705 -15.04122829]
[84.52027893 -20.84949112]
[73.39022827 -31.07171822]
[66.44214630 -44.45993423]
[64.49748993 -59.38938141]
[67.77182770 -74.05567932]
[75.85113525 -86.69289398]
[87.74401855 -95.78620911]
[102.00337982 -100.25343323]
[102.61920166 -115.24078369]
[83.96496582 -126.17411804]
[74.16703033 -145.29559326]
[76.16267395 -166.55110168]
[63.49115753 -174.57810974]
[50.81964111 -182.60510254]
[38.14812469 -190.63209534]
[21.53214073 -194.00039673]
[20.16903496 -210.89944458]
[36.03033066 -216.88740540]
[46.17512131 -203.30361938]
[58.84663773 -195.27661133]
[71.51815033 -187.24961853]
[84.18966675 -179.22262573]
[92.24613953 -185.63018799]
[101.72581482 -189.64259338]
[111.93426514 -190.96589661]
[114.99266052 -205.65080261]
[117.59738159 -220.42291260]
[119.74596405 -235.26823425]
[121.89453888 -250.11355591]
[124.04312134 -264.95889282]
[126.19169617 -279.80419922]
[112.09671021 -285.10943604]
[99.47196198 -293.32098389]
[88.90794373 -304.05484009]
[80.89874268 -316.80892944]
[75.81897736 -330.98672485]
[73.90623474 -345.92510986]
[75.24996948 -360.92541504]
[79.78733826 -375.28598022]
[87.30611420 -388.33520508]
[97.45464325 -399.46270752]
[109.75824738 -408.14807129]
[123.64147186 -413.98504639]
[138.45497131 -416.70059204]
[153.50588989 -416.16778564]
[168.09027100 -412.41146851]
[181.52597046 -405.60736084]
[193.18458557 -396.07366943]
[202.52082825 -384.25637817]
[209.09799194 -370.70812988]
[212.60848999 -356.06265259]
[212.88812256 -341.00488281]
[209.92378235 -326.23916626]
[203.85414124 -312.45605469]
[194.96308899 -300.30029297]
[183.66647339 -290.34033203]
[170.49264526 -283.04208374]
[156.05778503 -278.74688721]
[141.03701782 -277.65563965]
[138.88844299 -262.81030273]
[136.73986816 -247.96498108]
[134.59127808 -233.11965942]
[132.44270325 -218.27433777]
[134.30180359 -215.20986938]
[134.73294067 -211.07661438]
[133.24310303 -206.57263184]
[129.67755127 -202.59240723]
[126.61916351 -187.90750122]
[137.00872803 -181.42324829]
[144.82125854 -171.95355225]
[149.23414612 -160.46612549]
[149.77345276 -148.14260864]
[146.36471558 -136.25698853]
[139.34257507 -126.04396057]
[129.41804504 -118.57061005]
[117.60655212 -114.62496185]
[116.99073029 -99.63761139]
[130.83552551 -94.01558685]
[141.94229126 -83.97723389]
[148.95759583 -70.71977997]
[151.01766968 -55.83429718]
[147.85473633 -41.11471939]
[139.83169556 -28.34165955]
[127.90052032 -19.06701088]
[113.48938751 -14.42540264]
[112.87356567 0.56195039]
[112.25773621 15.54930401]
[111.64191437 30.53665733]
[119.62092590 39.67982483]
[119.19235992 52.20929718]
[110.03971863 61.35439301]
[109.11630249 76.32594299]
[108.19288635 91.29749298]
[115.49836731 78.19673157]
[127.14701843 68.74639130]
[141.47238159 64.29845428]
[156.42503357 65.48925018]
[169.86584473 72.14841461]
[179.87196350 83.32328796]
[185.01188660 97.41516876]
[184.55029297 112.40806580]
[178.55322266 126.15707397]
[167.87863159 136.69523621]
[154.05361938 142.51496887]
[139.05603027 142.78367615]
[125.03142548 137.46292114]
[113.98618317 127.31389618]
[107.50000000 113.78681946]
[107.50000000 128.78681946]
[107.50000000 143.78681946]
[107.50000000 158.78681946]
[107.50000000 173.78681946]
[107.50000000 188.78681946]
[107.50000000 203.78681946]
[107.50000000 218.78681946]
[107.50000000 233.78681946]
[107.50000000 248.78681946]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 152]
[2 151]
[3 150]
[4 149]
[5 148]
[6 147]
[7 146]
[8 145]
[9 144]
[10 143]
[14 26]
[15 25]
[16 24]
[17 23]
[28 128]
[29 127]
[30 126]
[32 123]
[33 122]
[34 121]
[35 120]
[43 112]
[44 111]
[47 57]
[48 56]
[49 55]
[50 54]
[60 103]
[61 102]
[62 98]
[63 97]
[64 96]
[65 95]
[66 94]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
