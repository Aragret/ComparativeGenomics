%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:42 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCUUCUACUAUGAACCCCCCUCCCCAUACCCAACCCCCUGGUCAACCUCAACCUAGGCCUCxxxxxxxxxxGCCUCACACUCAUUCUCAACCCCCUGACAAAACACAUAGCCUACCCCUUCCUUGUACUAUCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[-23.06824112 249.29220581]
[-33.05096817 260.48797607]
[-43.03369141 271.68374634]
[-53.01641846 282.87948608]
[-62.88214111 294.17849731]
[-72.62979126 305.57952881]
[-82.37744904 316.98052979]
[-92.12509918 328.38156128]
[-101.87274933 339.78259277]
[-111.62039948 351.18359375]
[-114.84815216 359.79949951]
[-121.69138336 362.71768188]
[-131.67410278 373.91345215]
[-141.65682983 385.10922241]
[-140.50299072 400.87133789]
[-150.89567566 412.77795410]
[-166.66909790 413.76507568]
[-178.46517944 403.24710083]
[-179.28549194 387.46411133]
[-168.64337158 375.77990723]
[-152.85260010 375.12649536]
[-142.86987305 363.93072510]
[-132.88714600 352.73495483]
[-123.02142334 341.43594360]
[-113.27377319 330.03494263]
[-103.52612305 318.63391113]
[-93.77846527 307.23287964]
[-84.03081512 295.83187866]
[-74.28316498 284.43084717]
[-72.31423187 277.25665283]
[-64.21218872 272.89675903]
[-54.22945786 261.70101929]
[-44.24673080 250.50523376]
[-34.26400757 239.30947876]
[-52.52639771 219.03634644]
[-67.75522614 196.39572144]
[-79.64761353 171.83792114]
[-87.96703339 145.85134888]
[-92.54802704 118.95285034]
[-93.29947662 91.67739868]
[-90.20643616 64.56747437]
[-83.33042908 38.16226196]
[-97.34714508 32.82075119]
[-111.36386108 27.47923851]
[-127.46007538 30.61673737]
[-138.01974487 18.06981468]
[-132.18000793 2.74567270]
[-115.94825745 0.40847224]
[-106.02234650 13.46252537]
[-92.00563049 18.80403900]
[-77.98892212 24.14555168]
[-71.17261505 9.81192875]
[-63.20439529 -3.91476560]
[-54.13787460 -16.94215775]
[-44.03407288 -29.18257713]
[-32.96098328 -40.55365372]
[-20.99312210 -50.97886276]
[-8.21102810 -60.38805008]
[5.29928064 -68.71788788]
[19.44688416 -75.91233063]
[34.13657761 -81.92295837]
[49.26950455 -86.70932007]
[64.74382782 -90.23920441]
[80.45540619 -92.48886108]
[79.51977539 -107.45965576]
[78.58414459 -122.43044281]
[77.64852142 -137.40122986]
[63.36227036 -142.67597961]
[52.46109390 -153.31008911]
[46.83369064 -167.46113586]
[47.45503998 -182.67738342]
[54.21748734 -196.32249451]
[65.94940186 -206.03239441]
[80.61815643 -210.12477112]
[95.68229675 -207.89060974]
[108.53187561 -199.71697998]
[116.94062042 -187.02001953]
[119.45167542 -171.99954224]
[115.62997437 -157.25794983]
[106.13764954 -145.34930420]
[92.61930847 -138.33686829]
[93.55493927 -123.36607361]
[94.49057007 -108.39527893]
[95.42619324 -93.42449188]
[106.39212036 -93.37294006]
[117.33751678 -92.70018768]
[128.22721863 -91.40840149]
[139.02622986 -89.50173187]
[149.69987488 -86.98629761]
[160.21386719 -83.87017822]
[170.53442383 -80.16339111]
[180.62840271 -75.87783813]
[190.46336365 -71.02729034]
[200.00770569 -65.62732697]
[209.23078918 -59.69529724]
[218.10298157 -53.25025558]
[226.59576416 -46.31290817]
[234.68186951 -38.90553665]
[242.33531189 -31.05194283]
[249.53152466 -22.77735329]
[256.24737549 -14.10834789]
[262.46127319 -5.07277727]
[268.15328979 4.30033350]
[273.30511475 13.98087311]
[277.90020752 23.93774414]
[281.92382812 34.13895798]
[285.36300659 44.55175018]
[288.20672607 55.14266205]
[290.44583130 65.87767792]
[292.07318115 76.72231293]
[293.08346558 87.64171600]
[293.47351074 98.60083008]
[293.24200439 109.56443024]
[292.38973999 120.49731445]
[290.91943359 131.36434937]
[288.83581543 142.13061523]
[286.14556885 152.76155090]
[282.85733032 163.22299194]
[278.98168945 173.48133850]
[274.53106689 183.50363159]
[269.51980591 193.25765991]
[263.96392822 202.71211243]
[257.88134766 211.83662415]
[251.29159546 220.60185242]
[244.21582031 228.97964478]
[236.67675781 236.94311523]
[228.69863892 244.46665955]
[220.30706787 251.52610779]
[211.52902222 258.09878540]
[202.39270020 264.16360474]
[192.92745972 269.70101929]
[183.16368103 274.69332886]
[173.13275146 279.12442017]
[162.86688232 282.98007202]
[152.39904785 286.24792480]
[141.76290894 288.91748047]
[130.99258423 290.98013306]
[120.12271118 292.42929077]
[109.18819427 293.26025391]
[98.22415924 293.47039795]
[87.26583099 293.05905151]
[76.34841156 292.02749634]
[65.50696564 290.37905884]
[54.77633286 288.11904907]
[44.19097519 285.25469971]
[33.78490067 281.79525757]
[23.59153748 277.75180054]
[13.64363098 273.13732910]
[3.97314000 267.96664429]
[-5.38887072 262.25640869]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 34]
[2 33]
[3 32]
[4 31]
[5 29]
[6 28]
[7 27]
[8 26]
[9 25]
[10 24]
[12 23]
[13 22]
[14 21]
[42 51]
[43 50]
[44 49]
[64 84]
[65 83]
[66 82]
[67 81]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
