%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:38 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGUACAGACCAAGAGCCUUCAAAGCCCUCAGUAAGUUGCAAUACUUAAUUUCUGUAACAGCUxxxxxxxxxxAAAAUCACCUCGGAGCUGGUAAAAAGAGGCCUAACCCCUGUCUUUAGAUUUACAGUCCAACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[86.64892578 264.10723877]
[86.64892578 249.10723877]
[86.64892578 234.10723877]
[86.64892578 219.10723877]
[86.64892578 204.10723877]
[86.64892578 189.10723877]
[86.64892578 174.10723877]
[86.64892578 159.10723877]
[86.64892578 144.10723877]
[86.64892578 129.10723877]
[75.98729706 118.55595398]
[60.98810959 118.71199036]
[45.98892212 118.86802673]
[30.98973274 119.02406311]
[15.99054527 119.18009949]
[0.99135667 119.33613586]
[-2.91274881 129.08656311]
[-10.95121765 136.74537659]
[-22.01070976 140.57366943]
[-34.26052856 139.41773987]
[-45.45466995 132.99560547]
[-59.47138214 138.33711243]
[-73.48809814 143.67863464]
[-75.24530792 158.88293457]
[-83.87660980 171.52252197]
[-97.39859772 178.69290161]
[-112.70401001 178.74639893]
[-126.27578735 171.67068481]
[-134.99522400 159.09173584]
[-136.85865784 143.90008545]
[-131.43788147 129.58666992]
[-119.97856140 119.44060516]
[-105.11396027 115.79338837]
[-90.25985718 119.48311615]
[-78.82960510 129.66191101]
[-64.81289673 124.32040405]
[-50.79618073 118.97888947]
[-50.48412323 103.98213959]
[-66.21771240 105.64492798]
[-74.85821533 93.51270294]
[-88.64059448 87.59274292]
[-102.42298126 81.67277527]
[-116.20536041 75.75281525]
[-129.98774719 69.83284760]
[-144.57167053 75.92256927]
[-159.15818787 69.83905792]
[-165.09336853 55.19155884]
[-158.85598755 40.67017746]
[-144.14656067 34.89018631]
[-129.69192505 41.28075409]
[-124.06777954 56.05046844]
[-110.28539276 61.97043228]
[-96.50301361 67.89039612]
[-82.72063446 73.81035614]
[-68.93825531 79.73032379]
[-54.19047546 77.64408875]
[-44.56416321 90.19975281]
[-15.92165756 84.98500824]
[0.83532012 104.33694458]
[15.83450890 104.18090820]
[30.83369637 104.02487183]
[45.83288574 103.86883545]
[60.83207321 103.71279907]
[75.83126068 103.55676270]
[74.93754578 83.15000916]
[91.41919708 65.06719971]
[95.42693329 50.61251450]
[99.43467712 36.15782547]
[103.44241333 21.70313835]
[107.45015717 7.24844933]
[94.37092590 -0.26051223]
[83.57057953 -10.78682899]
[75.72803497 -23.66880608]
[71.33628845 -38.09667587]
[70.67140198 -53.16348267]
[73.77517700 -67.92211914]
[80.45249939 -81.44484711]
[90.28363037 -92.88161469]
[102.65058136 -101.51349640]
[116.77594757 -106.79788208]
[131.77180481 -108.40259552]
[146.69549561 -106.22676849]
[160.60890198 -100.40715790]
[172.63743591 -91.30960083]
[182.02493286 -79.50598145]
[188.18132019 -65.73827362]
[190.71960449 -50.87193680]
[189.48020935 -35.84148026]
[184.54104614 -21.59172440]
[176.21260071 -9.01842785]
[165.01840210 1.08804500]
[151.66212463 8.09239197]
[136.98336792 11.55431271]
[121.90484619 11.25618935]
[117.89710236 25.71087837]
[113.88936615 40.16556549]
[109.88162231 54.62025452]
[105.87388611 69.07494354]
[110.32006073 75.11493683]
[122.40018463 66.22277832]
[131.29216003 78.30303955]
[119.21240997 87.19492340]
[123.65858459 93.23491669]
[138.65127563 93.70296478]
[153.64398193 94.17100525]
[168.63667297 94.63904572]
[183.62936401 95.10708618]
[198.62855530 94.95104980]
[213.60827637 94.17120361]
[225.37229919 83.26307678]
[241.21319580 85.80183411]
[248.97920227 99.83995056]
[242.71289062 114.60859680]
[227.22123718 118.77851868]
[214.38812256 109.15092468]
[199.40840149 109.93076324]
[197.41744995 111.99072266]
[194.46440125 113.35948181]
[190.81835938 113.65654755]
[186.88453674 112.60961151]
[183.16133118 110.09978485]
[168.16862488 109.63174438]
[153.17593384 109.16370392]
[138.18324280 108.69565582]
[123.19054413 108.22761536]
[117.80513763 113.44752502]
[130.73806763 121.04615021]
[143.67100525 128.64477539]
[158.65570068 129.32231140]
[171.34690857 137.31813049]
[178.42703247 150.54205322]
[178.04522705 165.53718567]
[170.30131531 178.38366699]
[157.21965027 185.72326660]
[142.21989441 185.63734436]
[129.22315979 178.14836121]
[121.62692261 165.21401978]
[121.41709900 150.21481323]
[114.22571564 137.05107117]
[107.03433228 123.88733673]
[101.64892578 129.10723877]
[101.64892578 144.10723877]
[101.64892578 159.10723877]
[101.64892578 174.10723877]
[101.64892578 189.10723877]
[101.64892578 204.10723877]
[101.64892578 219.10723877]
[101.64892578 234.10723877]
[101.64892578 249.10723877]
[101.64892578 264.10723877]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[11 64]
[12 63]
[13 62]
[14 61]
[15 60]
[16 59]
[21 37]
[22 36]
[23 35]
[38 57]
[40 55]
[41 54]
[42 53]
[43 52]
[44 51]
[66 98]
[67 97]
[68 96]
[69 95]
[70 94]
[103 125]
[104 124]
[105 123]
[106 122]
[107 121]
[108 116]
[109 115]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
