%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:07 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGUUCAAUUCCUCUUCUUAACAACAUACCCAUGGCCAACCUCCUACUCCUCAUUGUACCCAUxxxxxxxxxxGCCACCAAUGGUACUGAACCUACGAGUACACCGACUACGGCGGACUAAUCUUCAACUCCUCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[97.61161804 222.92967224]
[96.98764038 207.94265747]
[96.36367035 192.95564270]
[95.73969269 177.96861267]
[95.11571503 162.98159790]
[94.49173737 147.99458313]
[93.86775970 133.00756836]
[93.24378204 118.02055359]
[86.61528015 104.56459045]
[75.11347961 94.93606567]
[63.61167526 85.30753326]
[52.10987091 75.67900848]
[40.60806656 66.05048370]
[29.10626411 56.42195892]
[17.40664101 47.03479767]
[22.83338737 61.01873016]
[24.36221695 75.94061279]
[21.88391495 90.73446655]
[15.57552624 104.34344482]
[5.88770533 115.79534912]
[-6.48746967 124.27208710]
[-20.66594315 129.16809082]
[-35.63483810 130.13360596]
[-50.32480621 127.09966278]
[-63.68643188 120.28299713]
[-74.76519012 110.17057037]
[-82.76963043 97.48479462]
[-87.12794495 83.13191986]
[-87.52878571 68.13727570]
[-83.94350433 53.57205200]
[-76.62823486 40.47675323]
[-66.10556793 29.78687668]
[-53.12720871 22.26609039]
[-38.62031174 18.45165634]
[-23.62121201 18.61607361]
[-9.20141506 22.74759293]
[3.60469270 30.54761124]
[-3.30230594 17.23245621]
[-10.20930481 3.91730022]
[-17.66421509 -9.09900951]
[-25.65413094 -21.79393959]
[-33.64404678 -34.48886871]
[-41.63396454 -47.18379974]
[-51.73261261 -58.27511215]
[-63.62499237 -67.41684723]
[-75.51737213 -76.55857849]
[-88.67084503 -68.93923187]
[-103.73953247 -66.93843842]
[-118.42556000 -70.86131287]
[-130.48942566 -80.10964203]
[-138.09147644 -93.27313232]
[-140.07243347 -108.34443665]
[-136.13024902 -123.02529144]
[-126.86605072 -135.07698059]
[-113.69257355 -142.66169739]
[-98.61868286 -144.62283325]
[-83.94302368 -140.66134644]
[-71.90353394 -131.38130188]
[-64.33614349 -118.19786072]
[-62.39483643 -103.12139893]
[-66.37564087 -88.45095825]
[-54.48325729 -79.30922699]
[-42.59087753 -70.16749573]
[-47.81984711 -84.22657776]
[-48.29198074 -99.21914673]
[-43.95797348 -113.57938385]
[-35.27046204 -125.80751038]
[-23.13676453 -134.62643433]
[-8.82411957 -139.11511230]
[6.17266893 -138.80474854]
[20.28734589 -133.72775269]
[32.04578400 -124.41436005]
[40.21993637 -111.83727264]
[43.95610428 -97.31002045]
[42.86407852 -82.34982300]
[37.05791473 -68.51911163]
[27.14400101 -57.26236725]
[14.15774345 -49.75522995]
[-0.54458129 -46.78174210]
[-15.42747211 -48.65245056]
[-28.93903351 -55.17371368]
[-20.94911766 -42.47878647]
[-12.95920181 -29.78385544]
[-4.96928501 -17.08892632]
[-2.19972682 -16.35620308]
[0.43594000 -14.44642925]
[2.47429037 -11.40882969]
[3.47992301 -7.46424389]
[3.10585117 -2.98969841]
[10.01284981 10.32545757]
[16.91984749 23.64061356]
[26.54837418 35.14241791]
[31.37581825 35.40944290]
[36.07026672 38.75510406]
[38.73479080 44.92015457]
[50.23659515 54.54867935]
[61.73839569 64.17720795]
[73.24020386 73.80573273]
[84.74200439 83.43425751]
[96.24380493 93.06278229]
[97.46572876 86.67145538]
[102.31289673 80.89365387]
[110.36373138 77.33251190]
[120.57162476 77.34298706]
[131.39074707 81.80786133]
[146.32505798 83.21016693]
[161.25936890 84.61246490]
[175.72244263 78.19918823]
[187.67063904 87.09243774]
[202.13369751 80.67915344]
[214.08189392 89.57240295]
[229.01620483 90.97470856]
[243.95051575 92.37701416]
[258.62329102 85.05294800]
[272.15139771 94.32237244]
[270.61828613 110.64969635]
[255.60108948 117.23876953]
[242.54821777 107.31131744]
[227.61390686 105.90901947]
[212.67959595 104.50671387]
[199.28472900 111.02029419]
[186.26832581 102.02674103]
[172.87345886 108.54032135]
[159.85705566 99.54677582]
[144.92276001 98.14447021]
[129.98844910 96.74216461]
[124.54903412 101.90576935]
[136.98281860 110.29629517]
[149.41661072 118.68682098]
[161.85040283 127.07734680]
[175.62695312 133.01086426]
[182.89184570 146.13417053]
[180.60690308 160.95912170]
[169.72770691 171.28591919]
[154.80389404 172.79591370]
[142.07662964 164.85762024]
[136.86845398 150.79255676]
[129.13571167 137.93936157]
[121.40296173 125.08616638]
[113.67021179 112.23297119]
[108.23079681 117.39657593]
[108.85477448 132.38359070]
[109.47875214 147.37060547]
[110.10272980 162.35762024]
[110.72670746 177.34463501]
[111.35068512 192.33166504]
[111.97466278 207.31867981]
[112.59864044 222.30569458]
[119.29862976 237.87959290]
[106.18810272 248.62902832]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 148]
[2 147]
[3 146]
[4 145]
[5 144]
[6 143]
[7 142]
[8 141]
[9 100]
[10 99]
[11 98]
[12 97]
[13 96]
[14 95]
[15 92]
[37 91]
[38 90]
[39 89]
[40 84]
[41 83]
[42 82]
[43 81]
[44 63]
[45 62]
[46 61]
[105 126]
[106 125]
[107 124]
[109 122]
[111 120]
[112 119]
[113 118]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
