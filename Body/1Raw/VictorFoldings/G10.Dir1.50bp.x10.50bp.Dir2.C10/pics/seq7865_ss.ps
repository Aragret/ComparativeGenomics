%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:46 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGUCGUCCUAGAAUUAAUUCCCCUAAAAAUCUUUGAAAUAGGGCCCGUAUUUACCCUAUAGCxxxxxxxxxxCCGCACAAUCCCCUAUCUAGGCCUUCUUACGAGCCAAAACCUGCCCCUACUCCUCCUAGACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[238.05657959 409.61828613]
[238.05657959 394.61828613]
[238.05657959 379.61828613]
[238.05657959 364.61828613]
[238.05657959 349.61828613]
[238.05657959 334.61828613]
[238.05657959 319.61828613]
[238.05657959 304.61828613]
[238.05657959 289.61828613]
[238.05657959 274.61828613]
[233.74899292 260.25009155]
[225.49670410 247.72412109]
[217.24441528 235.19816589]
[208.99212646 222.67219543]
[199.85038757 210.77981567]
[189.86766052 199.58406067]
[179.88493347 188.38829041]
[169.90222168 177.19252014]
[159.91949463 165.99676514]
[149.93676758 154.80099487]
[139.27513123 144.24971008]
[127.97612762 134.38398743]
[116.67712402 124.51825714]
[98.92400360 131.87957764]
[78.93753052 126.87217712]
[64.97873688 109.87981415]
[50.04442978 111.28211975]
[35.11012268 112.68442535]
[31.55071831 115.42160034]
[27.68985558 116.71186066]
[24.03238106 116.64280701]
[20.99970818 115.46090698]
[18.88414001 113.52914429]
[3.88495111 113.68518066]
[-11.11423779 113.84122467]
[-24.94716263 122.64929962]
[-39.36466980 114.83472443]
[-39.53525925 98.43646240]
[-25.28344727 90.32363892]
[-11.27027416 98.84203339]
[3.72891450 98.68599701]
[18.72810364 98.52996063]
[33.70781708 97.75011444]
[48.64212418 96.34780884]
[63.57643127 94.94550323]
[68.62519073 80.82070160]
[57.96356201 70.26941681]
[47.30193710 59.71812439]
[36.64030838 49.16683197]
[25.97868347 38.61554337]
[15.31705761 28.06425285]
[0.52375567 32.19387436]
[-14.34843159 28.35804176]
[-25.29895973 17.58857155]
[-29.38219261 2.78239846]
[-25.49976158 -12.07769203]
[-14.69602013 -22.99440956]
[0.12288025 -27.03121376]
[14.97072887 -23.10222054]
[25.85352898 -12.26431370]
[29.84386063 2.56716681]
[25.86834717 17.40262604]
[36.52997589 27.95391655]
[47.19160080 38.50520706]
[57.85322571 49.05649567]
[68.51485443 59.60778809]
[79.17647552 70.15908051]
[86.78697968 69.73848724]
[93.69988251 71.02449036]
[94.32386017 56.03747559]
[80.83546448 48.89423370]
[71.78909302 36.60090637]
[68.98090363 21.59834480]
[72.96847534 6.86531925]
[82.96006012 -4.67291880]
[96.97183228 -10.72544289]
[112.22174072 -10.09051991]
[125.68190002 -2.89421511]
[134.67979431 9.43464088]
[137.42887878 24.44814491]
[133.38331604 39.16535187]
[123.34637451 50.66415405]
[109.31087494 56.66145325]
[108.68689728 71.64846802]
[122.77545929 81.01184845]
[129.45170593 96.55495453]
[126.54284668 113.21925354]
[137.84185791 123.08497620]
[149.14085388 132.95069885]
[149.63967896 117.95899200]
[160.46070862 107.57125092]
[175.46028137 107.68515015]
[186.12231445 118.23603058]
[186.39340210 133.23358154]
[176.11962891 144.16288757]
[161.13252258 144.81826782]
[171.11524963 156.01403809]
[181.09797668 167.20979309]
[191.08070374 178.40556335]
[201.06343079 189.60133362]
[211.04615784 200.79708862]
[212.29887390 185.84950256]
[222.74165344 175.08157349]
[237.64384460 173.37130737]
[250.25457764 181.49345398]
[254.86108398 195.76860046]
[249.37657166 209.72998047]
[236.28556824 217.05294800]
[221.51809692 214.41990662]
[229.77038574 226.94587708]
[238.02267456 239.47183228]
[246.27496338 251.99780273]
[245.87950134 237.00300598]
[248.55177307 222.24296570]
[254.17936707 208.33863831]
[262.52548218 195.87501526]
[273.23904419 185.37643433]
[285.86926270 177.28460693]
[299.88476562 171.93997192]
[314.69595337 169.56736755]
[329.67962646 170.26663208]
[344.20547485 174.00833130]
[357.66229248 180.63505554]
[369.48400879 189.86799622]
[379.17321777 201.31874084]
[386.32229614 214.50549316]
[390.63046265 228.87350464]
[391.91647339 243.81828308]
[390.12622070 258.71105957]
[385.33502197 272.92529297]
[377.74444580 285.86297607]
[367.67385864 296.97976685]
[355.54693604 305.80798340]
[341.87387085 311.97622681]
[327.22991943 315.22497559]
[312.23114014 315.41757202]
[297.50860596 312.54586792]
[283.68167114 306.73068237]
[271.33209229 298.21673584]
[260.97940063 287.36215210]
[253.05657959 274.61828613]
[253.05657959 289.61828613]
[253.05657959 304.61828613]
[253.05657959 319.61828613]
[253.05657959 334.61828613]
[253.05657959 349.61828613]
[253.05657959 364.61828613]
[253.05657959 379.61828613]
[253.05657959 394.61828613]
[253.05657959 409.61828613]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[11 112]
[12 111]
[13 110]
[14 109]
[15 101]
[16 100]
[17 99]
[18 98]
[19 97]
[20 96]
[21 89]
[22 88]
[23 87]
[26 45]
[27 44]
[28 43]
[33 42]
[34 41]
[35 40]
[46 67]
[47 66]
[48 65]
[49 64]
[50 63]
[51 62]
[69 84]
[70 83]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
