%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:29 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGAUCAACAAAACUGCUCGCCAGAACACUACGAGCCACAGCUUAAAACUCAAAGGACCUGGCxxxxxxxxxxGCGCUAUCACCACUCUGUUCGCAGCAGUCUGCGCCCUUACACAAAAUGACAUCAAAAAAACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[73.01362610 295.74795532]
[73.01362610 280.74795532]
[73.01362610 265.74795532]
[73.01362610 250.74794006]
[73.01362610 235.74794006]
[73.01362610 220.74794006]
[73.01362610 205.74794006]
[73.01362610 190.74794006]
[73.01362610 175.74794006]
[73.01362610 160.74794006]
[59.53616333 132.89912415]
[63.02265549 107.98003387]
[77.26857758 94.01255035]
[93.14128113 93.89099884]
[82.47966003 83.33970642]
[71.81803131 72.78841400]
[61.15640640 62.23712540]
[56.76909256 69.96601105]
[48.96448898 76.38505554]
[38.22798157 80.24787140]
[25.45474052 80.49759674]
[10.59169483 82.51993561]
[-4.20101261 85.00505066]
[-18.90897369 87.95053864]
[-33.61693573 90.89601898]
[-48.32489777 93.84149933]
[-63.03285980 96.78697968]
[-70.85356140 107.09671021]
[-83.21127319 109.21941376]
[-93.35218048 102.55088043]
[-108.11824036 105.18974304]
[-120.30072784 116.16786194]
[-135.81365967 110.84989166]
[-138.69866943 94.70651245]
[-125.98789978 84.34464264]
[-110.75710297 90.42369080]
[-95.99105072 87.78482819]
[-83.24381256 75.76368713]
[-65.97834015 82.07901764]
[-51.27037811 79.13353729]
[-36.56241989 76.18805695]
[-21.85445595 73.24257660]
[-7.14649534 70.29708862]
[-4.88050604 67.51630402]
[-1.12651229 65.72487640]
[3.62133026 65.62302399]
[8.56935978 67.65689087]
[23.43240738 65.63455200]
[27.88922310 51.31195450]
[16.79790688 41.21330643]
[5.70659208 31.11465645]
[-9.46122360 34.38833618]
[-23.64283562 28.09059906]
[-31.38512421 14.64304924]
[-29.71102142 -0.78345394]
[-19.26425552 -12.25710583]
[-4.06181812 -15.36605263]
[10.05064011 -8.91484070]
[17.64659309 4.61590624]
[15.80524158 20.02334023]
[26.89655685 30.12199020]
[37.98787308 40.22064209]
[52.11267471 35.17188263]
[54.28951263 20.33067894]
[47.21364212 9.49619961]
[49.37419891 -2.85495353]
[59.06690979 -10.15965557]
[61.55202866 -24.95236206]
[64.03714752 -39.74507141]
[50.44284821 -46.33078766]
[39.25555038 -56.48072052]
[31.38216019 -69.37204742]
[27.46093750 -83.95973969]
[27.80975914 -99.06123352]
[32.40034866 -113.45230865]
[40.86056137 -125.96636200]
[52.50457382 -135.58892822]
[66.38845062 -141.53993225]
[81.38669586 -143.33699036]
[96.28346252 -140.83438110]
[109.87113953 -134.23501587]
[121.04823303 -124.07384491]
[128.90866089 -111.17461395]
[132.81523132 -96.58299255]
[132.45124817 -81.48185730]
[127.84619904 -67.09539795]
[119.37341309 -54.58985519]
[107.71974182 -44.97899246]
[93.82989502 -39.04193115]
[78.82985687 -37.25995255]
[76.34473419 -22.46724510]
[73.85961914 -7.67453718]
[80.88885498 8.37506676]
[69.13071442 22.50751495]
[66.95388031 37.34872055]
[71.70769501 51.57550049]
[82.36932373 62.12678909]
[93.03094482 72.67807770]
[103.69257355 83.22937012]
[118.22750854 86.93553162]
[132.63972473 82.77764130]
[147.05194092 78.61975861]
[161.46415710 74.46186829]
[175.87637329 70.30398560]
[186.85305786 58.12019730]
[202.83433533 61.79857254]
[207.38006592 77.55510712]
[195.81396484 89.18083191]
[180.03425598 84.71620178]
[165.62203979 88.87408447]
[151.20982361 93.03197479]
[136.79760742 97.18985748]
[122.38539886 101.34774780]
[121.76196289 108.82179260]
[136.71005249 110.06866455]
[151.65811157 111.31578827]
[150.41073608 126.26383209]
[135.46318054 125.01675415]
[120.51508331 123.76988220]
[119.89164734 131.24392700]
[133.41583252 137.73208618]
[148.96672058 133.78878784]
[161.65789795 143.60273743]
[161.75378418 159.64550781]
[149.18083191 169.61045837]
[133.58392334 165.85333252]
[126.92767334 151.25627136]
[113.40348053 144.76811218]
[107.05602264 148.76307678]
[115.81401825 160.94081116]
[124.57202148 173.11856079]
[133.33001709 185.29629517]
[145.49020386 194.07867432]
[145.01188660 209.07104492]
[132.31661987 217.06044006]
[118.59291840 211.00570679]
[115.93524170 196.24420166]
[108.74385834 183.08045959]
[101.55247498 169.91671753]
[94.36109161 156.75299072]
[88.01362610 160.74794006]
[88.01362610 175.74794006]
[88.01362610 190.74794006]
[88.01362610 205.74794006]
[88.01362610 220.74794006]
[88.01362610 235.74794006]
[88.01362610 250.74794006]
[88.01362610 265.74795532]
[88.01362610 280.74795532]
[88.01362610 295.74795532]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[14 99]
[15 98]
[16 97]
[17 96]
[21 48]
[22 47]
[23 43]
[24 42]
[25 41]
[26 40]
[27 39]
[30 37]
[31 36]
[49 62]
[50 61]
[51 60]
[63 95]
[64 94]
[67 92]
[68 91]
[69 90]
[100 113]
[101 112]
[102 111]
[103 110]
[104 109]
[120 128]
[121 127]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
