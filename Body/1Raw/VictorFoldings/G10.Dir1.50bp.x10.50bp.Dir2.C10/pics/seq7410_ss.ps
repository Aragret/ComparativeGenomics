%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:07 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGUUCAAAAAGGUAUUAGAAAAACCAUUUCAUAACUUUGUCAAAGUUAAAUUAUAGGCUAAAxxxxxxxxxxGCGCGAUGUAACACGAGAAAGCACAUACCAAGGCCACCACACACCACCUGUCCAAAAAGGCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[101.92508698 398.53018188]
[101.92508698 383.53018188]
[101.92508698 368.53018188]
[101.92508698 353.53018188]
[101.92508698 338.53018188]
[101.92508698 323.53018188]
[101.92508698 308.53018188]
[101.92508698 293.53018188]
[101.92508698 278.53018188]
[101.92508698 263.53018188]
[85.21308136 258.06008911]
[71.32441711 247.23666382]
[61.91193771 232.32774353]
[58.10262299 215.08851624]
[60.36269379 197.55496216]
[68.44060516 181.80332947]
[81.39493561 169.70433044]
[97.70407104 162.70094299]
[96.45719147 147.75285339]
[95.21031952 132.80476379]
[93.96344757 117.85667419]
[83.52362823 107.08586884]
[68.62172699 105.37317657]
[53.71982574 103.66049194]
[54.10081100 123.91696930]
[35.52257538 142.84840393]
[20.94987297 146.40316772]
[6.37717009 149.95793152]
[-8.19553280 153.51269531]
[-17.72332382 166.42008972]
[-33.75993729 166.87457275]
[-44.00345612 154.52751160]
[-40.59592819 138.85050964]
[-26.15131950 131.86962891]
[-11.75029469 138.93998718]
[2.82240820 135.38522339]
[17.39511108 131.83045959]
[31.96781349 128.27571106]
[33.37017059 113.34072876]
[34.77242279 98.40708923]
[21.11618042 92.20168304]
[7.45993853 85.99627686]
[-6.19630241 79.79087067]
[-19.85254288 73.58545685]
[-33.50878525 67.38005066]
[-47.16502762 61.17464447]
[-64.08656311 60.12678146]
[-67.76399231 43.57646942]
[-52.87848663 35.46117020]
[-40.95961761 47.51840591]
[-27.30337715 53.72381210]
[-13.64713669 59.92921829]
[0.00910466 66.13462830]
[13.66534615 72.34003448]
[27.32158661 78.54544067]
[40.97782898 84.75084686]
[55.43251801 88.75859070]
[70.33441925 90.47127533]
[85.23632050 92.18396759]
[88.04274750 89.24727631]
[91.36344910 87.18101501]
[94.95053864 86.05304718]
[98.55523682 85.86479187]
[101.94480896 86.55510712]
[110.19709778 74.02914429]
[118.44938660 61.50318527]
[107.63569641 51.04850769]
[98.92958832 38.78800964]
[92.62635803 25.14009285]
[88.93936157 10.57017612]
[87.99272919 -4.42517138]
[89.81724548 -19.33516312]
[94.34932709 -33.65219116]
[101.43320465 -46.88909912]
[110.82635498 -58.59577179]
[122.20771790 -68.37443542]
[135.18873596 -75.89317322]
[149.32656860 -80.89717865]
[164.13923645 -83.21742249]
[179.12205505 -82.77632904]
[193.76478577 -79.59038544]
[207.56904602 -73.76952362]
[208.70010376 -89.55024719]
[222.16319275 -95.92163849]
[230.41548157 -108.44760132]
[224.82438660 -122.92237854]
[228.84169006 -137.91040039]
[240.92265320 -147.64846802]
[256.42190552 -148.39208984]
[269.37966919 -139.85533142]
[274.81338501 -125.32075500]
[270.63372803 -110.37718964]
[258.44784546 -100.77075195]
[242.94145203 -100.19531250]
[234.68916321 -87.66934967]
[234.14836121 -72.78456116]
[220.09501648 -65.51723480]
[230.89141846 -55.13080597]
[239.59770203 -42.93407440]
[245.91618347 -29.34156799]
[249.63031006 -14.81558895]
[250.61219788 0.14951485]
[248.82693481 15.04417515]
[244.33386230 29.36095238]
[237.28462219 42.61182022]
[227.91796875 54.34480667]
[216.55175781 64.15940857]
[203.57215881 71.72026825]
[189.42044067 76.76860809]
[174.57810974 79.13111877]
[159.55039978 78.72589874]
[144.84915161 75.56528473]
[130.97535706 69.75547791]
[122.72306061 82.28144073]
[114.47077179 94.80739594]
[126.05278778 85.27550507]
[140.79187012 82.48996735]
[155.05368042 87.13764191]
[165.32153320 98.07250214]
[169.06359863 112.59823608]
[165.35714722 127.13309479]
[155.11610413 138.09307861]
[140.86573792 142.77568054]
[126.11986542 140.02626038]
[114.51452637 130.52278137]
[108.91152954 116.60980225]
[110.15840912 131.55789185]
[111.40528107 146.50598145]
[112.65215302 161.45407104]
[125.00897980 163.80860901]
[136.41920471 169.07757568]
[146.20741272 176.94314575]
[153.79560852 186.93395996]
[158.73739624 198.45336914]
[160.74420166 210.81507874]
[159.70214844 223.28404236]
[155.67849731 235.12013245]
[148.91729736 245.62210083]
[139.82466125 254.16909790]
[128.94432068 260.25744629]
[116.92508698 263.53018188]
[116.92508698 278.53018188]
[116.92508698 293.53018188]
[116.92508698 308.53018188]
[116.92508698 323.53018188]
[116.92508698 338.53018188]
[116.92508698 353.53018188]
[116.92508698 368.53018188]
[116.92508698 383.53018188]
[116.92508698 398.53018188]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[18 129]
[19 128]
[20 127]
[21 126]
[22 59]
[23 58]
[24 57]
[26 38]
[27 37]
[28 36]
[29 35]
[40 56]
[41 55]
[42 54]
[43 53]
[44 52]
[45 51]
[46 50]
[64 115]
[65 114]
[66 113]
[82 97]
[84 95]
[85 94]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
