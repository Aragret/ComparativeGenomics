%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:26 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCUGAACUAUCCUGCCCGCCAUCAUCCUAGUCCUCAUCGCCCUCCCAUCCCUACGCAUCCUxxxxxxxxxxCCACAUCAAAACCCCCUCCCCAUGCUUACAAGCAAGUACAGCAAUCAACCCUCAACUAUCCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[120.70136261 290.33071899]
[120.38930511 275.33398438]
[120.07724762 260.33721924]
[119.76519012 245.34046936]
[119.45314026 230.34370422]
[119.14108276 215.34695435]
[118.82902527 200.35020447]
[118.51696777 185.35345459]
[118.20491028 170.35668945]
[115.10659027 155.68017578]
[109.33032227 141.83694458]
[103.55404663 127.99373627]
[97.77777100 114.15051270]
[86.78070068 105.51593018]
[88.37900543 91.62575531]
[82.60273743 77.78253937]
[76.82646179 63.93931961]
[73.15532684 61.35393524]
[70.77618408 58.05079269]
[69.75541687 54.53797150]
[69.98286438 51.29109192]
[71.19880676 48.69709396]
[66.59323883 34.42163467]
[61.98767471 20.14617157]
[47.41684341 23.73500443]
[32.62915039 26.28708076]
[17.69827271 27.78968811]
[2.69859600 28.23533630]
[-12.29515266 27.62181091]
[-27.20827484 25.95216370]
[-41.96647263 23.23471451]
[-56.49621964 19.48299980]
[-70.72512817 14.71571541]
[-84.58231354 8.95660782]
[-97.99874115 2.23437023]
[-110.90756226 -5.41750717]
[-123.24446869 -13.96090317]
[-134.94799805 -23.35325432]
[-145.95985413 -33.54776764]
[-156.22515869 -44.49365616]
[-165.69277954 -56.13638306]
[-174.31553650 -68.41794586]
[-182.05049133 -81.27716827]
[-188.85910034 -94.64996338]
[-194.70744324 -108.46972656]
[-199.56637573 -122.66761017]
[-203.41168213 -137.17286682]
[-206.22424316 -151.91323853]
[-207.99000549 -166.81527710]
[-208.70019531 -181.80476379]
[-208.35127258 -196.80699158]
[-206.94497681 -211.74725342]
[-204.48829651 -226.55108643]
[-200.99349976 -241.14476013]
[-196.47796631 -255.45556641]
[-190.96420288 -269.41220093]
[-184.47970581 -282.94509888]
[-177.05673218 -295.98690796]
[-168.73231506 -308.47262573]
[-159.54788208 -320.34002686]
[-149.54922485 -331.52999878]
[-138.78613281 -341.98681641]
[-127.31223297 -351.65835571]
[-115.18469238 -360.49642944]
[-102.46392822 -368.45703125]
[-89.21331787 -375.50048828]
[-75.49887848 -381.59170532]
[-61.38892746 -386.70034790]
[-46.95376587 -390.80096436]
[-32.26530838 -393.87310791]
[-17.39673233 -395.90148926]
[-2.42211175 -396.87600708]
[12.58394814 -396.79180908]
[27.54668808 -395.64926147]
[42.39156342 -393.45413208]
[57.04461670 -390.21731567]
[71.43284607 -385.95495605]
[85.48456573 -380.68826294]
[99.12978363 -374.44351196]
[112.30050659 -367.25177002]
[124.93111420 -359.14889526]
[136.95869446 -350.17526245]
[148.32331848 -340.37554932]
[158.96836853 -329.79861450]
[168.84082031 -318.49713135]
[177.89146423 -306.52737427]
[186.07524109 -293.94903564]
[193.35136414 -280.82473755]
[199.68357849 -267.21987915]
[205.04032898 -253.20225525]
[209.39495850 -238.84167480]
[212.72575378 -224.20970154]
[215.01612854 -209.37922668]
[216.25465393 -194.42411804]
[216.43518066 -179.41891479]
[215.55679321 -164.43835449]
[213.62388611 -149.55705261]
[210.64607239 -134.84918213]
[206.63818359 -120.38800049]
[201.62020874 -106.24555206]
[195.61714172 -92.49230194]
[188.65887451 -79.19675446]
[180.78007507 -66.42516327]
[172.02001953 -54.24115372]
[162.42231750 -42.70541763]
[152.03480530 -31.87543297]
[140.90924072 -21.80515480]
[129.10102844 -12.54475021]
[116.66900635 -4.14035654]
[103.67511749 3.36615610]
[90.18408966 9.93739033]
[76.26313782 15.54060745]
[80.86869812 29.81606865]
[85.47426605 44.09152985]
[90.66967773 58.16304779]
[96.44595337 72.00626373]
[102.22222900 85.84948730]
[113.21929932 94.48406982]
[111.62099457 108.37424469]
[117.39726257 122.21746063]
[123.17353821 136.06068420]
[128.94981384 149.90390015]
[131.31655884 135.09179688]
[138.06687927 121.69652557]
[148.56404114 110.98159790]
[161.81790161 103.95771027]
[176.57830811 101.28737640]
[191.45295715 103.22247314]
[205.03881836 109.58048248]
[216.05441284 119.76168823]
[223.46067810 132.80574036]
[226.55902100 147.48225403]
[225.05720520 162.40689087]
[219.09687805 176.17185974]
[209.24024963 187.47879028]
[196.41705322 195.26116943]
[181.83680725 198.78492737]
[166.87483215 197.71765137]
[152.94238281 192.16004944]
[141.35365295 182.63632202]
[133.20166016 170.04463196]
[133.51371765 185.04139709]
[133.82577515 200.03814697]
[134.13783264 215.03489685]
[134.44989014 230.03164673]
[134.76194763 245.02841187]
[135.07400513 260.02514648]
[135.38606262 275.02191162]
[135.69812012 290.01867676]
[138.28910828 309.22637939]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 149]
[2 148]
[3 147]
[4 146]
[5 145]
[6 144]
[7 143]
[8 142]
[9 141]
[10 122]
[11 121]
[12 120]
[13 119]
[15 117]
[16 116]
[17 115]
[22 114]
[23 113]
[24 112]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
