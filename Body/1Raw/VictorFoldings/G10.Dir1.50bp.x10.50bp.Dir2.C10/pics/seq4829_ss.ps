%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:17 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCCAUAAUCCUUCUAAUAGCUAUCCUCUUCAACAAUAUACUCUCCGGACAAUGAACCAUAACxxxxxxxxxxCAGUGAAAUGCCCCAACUAAAUACUACCGUAUGGCCCACCAUAAUUACCCCCAUACUCCUUCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[98.53010559 197.99874878]
[97.60668945 183.02719116]
[96.68327332 168.05564880]
[95.75986481 153.08409119]
[94.83644867 138.11254883]
[93.91303253 123.14099884]
[92.98962402 108.16944885]
[88.44232941 93.87532043]
[80.54585266 81.12206268]
[72.64936829 68.36880493]
[64.75288391 55.61554718]
[56.85640335 42.86228943]
[48.95991898 30.10903168]
[41.06343842 17.35577393]
[33.16695404 4.60251760]
[19.92471123 11.65956306]
[6.25343561 17.84463692]
[-7.78952837 23.13179779]
[-22.14528084 27.49886703]
[-36.75360489 30.92753029]
[-51.55323410 33.40340424]
[-66.48208618 34.91610718]
[-81.47754669 35.45929337]
[-96.47672272 35.03068161]
[-111.41669464 33.63206863]
[-126.23480225 31.26932716]
[-140.86889648 27.95236206]
[-155.25758362 23.69508743]
[-169.34053040 18.51536179]
[-183.05865479 12.43490887]
[-196.35443115 5.47923183]
[-209.17207336 -2.32249308]
[-221.45782471 -10.93754292]
[-233.16017151 -20.32978439]
[-244.23001099 -30.45981979]
[-254.62091064 -41.28516388]
[-264.28930664 -52.76040649]
[-273.19461060 -64.83741760]
[-281.29949951 -77.46554565]
[-288.56997681 -90.59181976]
[-294.97555542 -104.16118622]
[-300.48934937 -118.11672211]
[-305.08822632 -132.39990234]
[-308.75289917 -146.95080566]
[-311.46801758 -161.70841980]
[-313.22219849 -176.61082458]
[-314.00802612 -191.59553528]
[-313.82226562 -206.59968567]
[-312.66567993 -221.56033325]
[-310.54312134 -236.41474915]
[-307.46347046 -251.10061646]
[-303.43966675 -265.55633545]
[-298.48858643 -279.72128296]
[-292.63101196 -293.53604126]
[-285.89144897 -306.94265747]
[-278.29824829 -319.88491821]
[-269.88320923 -332.30853271]
[-260.68161011 -344.16137695]
[-250.73210144 -355.39373779]
[-240.07638550 -365.95849609]
[-228.75914001 -375.81137085]
[-216.82786560 -384.91101074]
[-204.33259583 -393.21926880]
[-191.32572937 -400.70129395]
[-177.86183167 -407.32565308]
[-163.99737549 -413.06463623]
[-149.79051208 -417.89410400]
[-135.30082703 -421.79385376]
[-120.58910370 -424.74749756]
[-105.71704865 -426.74267578]
[-90.74702454 -427.77099609]
[-75.74183655 -427.82812500]
[-60.76441956 -426.91387939]
[-45.87759399 -425.03204346]
[-31.14379883 -422.19052124]
[-16.62483406 -418.40124512]
[-2.38159871 -413.68011475]
[11.52616692 -408.04690552]
[25.04012680 -401.52526855]
[38.10359955 -394.14254761]
[50.66179276 -385.92971802]
[62.66202927 -376.92120361]
[74.05397797 -367.15481567]
[84.78986359 -356.67150879]
[94.82463837 -345.51525879]
[104.11623383 -333.73281860]
[112.62565613 -321.37368774]
[120.31723022 -308.48962402]
[127.15869141 -295.13473511]
[133.12133789 -281.36499023]
[138.18016052 -267.23815918]
[142.31394958 -252.81350708]
[145.50535583 -238.15151978]
[147.74099731 -223.31370544]
[149.01150513 -208.36230469]
[149.31153870 -193.36000061]
[148.63983154 -178.36975098]
[146.99922180 -163.45440674]
[144.39659119 -148.67654419]
[140.84283447 -134.09814453]
[136.35287476 -119.78035736]
[130.94554138 -105.78322601]
[124.64351654 -92.16546631]
[117.47322083 -78.98419952]
[109.46474457 -66.29470825]
[100.65167236 -54.15021515]
[91.07096863 -42.60166550]
[80.76281738 -31.69749451]
[69.77046204 -21.48343849]
[58.13999557 -12.00233936]
[45.92021179 -3.29396486]
[53.81669617 9.45929241]
[61.71317673 22.21254921]
[69.60965729 34.96580505]
[77.50614166 47.71906281]
[85.40262604 60.47232056]
[93.29911041 73.22557831]
[101.19558716 85.97883606]
[101.00851440 70.98000336]
[104.35068512 56.35707855]
[111.03499603 42.92874908]
[120.68721008 31.44681740]
[132.76693726 22.55411148]
[146.59786987 16.74850082]
[161.40568542 14.35502243]
[176.36132812 15.50767708]
[190.62750244 20.14193153]
[203.40550232 27.99833107]
[213.97990417 38.63702774]
[221.75871277 51.46239471]
[226.30642700 65.75639343]
[227.36842346 80.71875000]
[224.88523865 95.51178741]
[218.99591064 109.30728149]
[210.03015137 121.33289337]
[198.48992920 130.91534424]
[185.02134705 137.51814270]
[170.37843323 140.77163696]
[155.38101196 140.49365234]
[140.86871338 136.69978333]
[127.65406036 129.60240173]
[116.47686005 119.59889221]
[107.96117401 107.24603271]
[108.88458252 122.21758270]
[109.80799866 137.18913269]
[110.73141479 152.16069031]
[111.65482330 167.13223267]
[112.57823944 182.10379028]
[113.50165558 197.07533264]
[123.00608826 210.43937683]
[115.93956757 225.23789978]
[99.57151794 226.24745178]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 149]
[2 148]
[3 147]
[4 146]
[5 145]
[6 144]
[7 143]
[8 118]
[9 117]
[10 116]
[11 115]
[12 114]
[13 113]
[14 112]
[15 111]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
