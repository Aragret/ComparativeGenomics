%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:18 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCCUCCUCAAAGCAAUACACUGAAAAUGUUUAGACGGGCUCACAUCACCCCAUAAACAAAUxxxxxxxxxxUAGCAUUACUUAUAUGAUAUGUCUCCAUACCCAUUACAAUCUCCAGCAUUCCCCCUCAAACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[115.03400421 265.56491089]
[115.03400421 250.56492615]
[115.03400421 235.56492615]
[115.03400421 220.56492615]
[115.03400421 205.56492615]
[115.03400421 190.56492615]
[115.03400421 175.56492615]
[115.03400421 160.56492615]
[115.03400421 145.56492615]
[115.03400421 130.56492615]
[108.44971466 126.97367096]
[105.68787384 141.71722412]
[90.81244659 143.64637756]
[84.38111877 130.09506226]
[95.28113556 119.79116058]
[88.69683838 116.19990540]
[76.08571625 124.32144928]
[63.47458649 132.44299316]
[60.01320648 147.63037109]
[47.10803223 155.68711853]
[32.65051651 152.29362488]
[27.86351204 167.60585022]
[12.85575867 173.27568054]
[-0.86007971 164.95368958]
[-2.76238561 149.02381897]
[8.60812664 137.70610046]
[24.52897453 139.68249512]
[27.42047119 125.11627960]
[40.09425354 116.70023346]
[55.35304260 119.83186340]
[67.96417236 111.71031952]
[80.57530212 103.58877563]
[80.57530212 96.08877563]
[67.58489990 88.58880615]
[80.57530212 81.08877563]
[80.57530212 73.58877563]
[67.96417236 65.46723175]
[55.35304260 57.34569168]
[42.74191284 49.22415161]
[30.13078690 41.10260773]
[17.51965904 32.98106766]
[4.73238325 37.33345032]
[-8.03470802 33.56127167]
[-16.16151428 23.26421738]
[-16.84308434 10.35947895]
[-29.28252411 1.97733605]
[-41.72196579 -6.40480709]
[-55.85026550 -0.20846932]
[-71.08213806 -2.65667939]
[-82.55713654 -12.96822262]
[-86.61363983 -27.85272217]
[-81.95722198 -42.56058884]
[-70.07373810 -52.39859772]
[-54.75516510 -54.22747421]
[-40.88959885 -47.46362686]
[-32.90149307 -34.26538086]
[-33.33982086 -18.84424782]
[-20.90038109 -10.46210384]
[-8.46094036 -2.07996106]
[7.86099863 -6.01089382]
[22.27635193 3.23473573]
[25.64120102 20.36993790]
[38.25232697 28.49147987]
[50.86345673 36.61302185]
[63.47458649 44.73456573]
[76.08571625 52.85610580]
[88.69683838 60.97764969]
[103.69602966 60.82161331]
[116.13546753 52.43946838]
[128.57490540 44.05732727]
[113.58114624 43.62495041]
[100.20494843 36.83691788]
[91.00331879 24.99081993]
[87.73523712 10.35116100]
[91.02542114 -4.28354597]
[100.24493408 -16.11573219]
[113.63136292 -22.88355827]
[128.62576294 -23.29328537]
[142.36181641 -17.26659393]
[152.21372986 -5.95554209]
[156.29820251 8.47764874]
[153.83447266 23.27393341]
[145.29458618 35.60384750]
[159.41938782 30.55509186]
[158.32255554 14.34744740]
[161.80349731 -1.50570822]
[169.57627869 -15.73850155]
[181.01260376 -27.21667480]
[195.19258118 -35.02797699]
[210.97866821 -38.55467224]
[227.10700989 -37.52236938]
[242.28852844 -32.02137375]
[255.31207275 -22.49883461]
[265.14089966 -9.72240639]
[279.04345703 -15.35436344]
[292.94601440 -20.98632050]
[303.88940430 -35.75867462]
[321.14761353 -32.73317719]
[334.92999268 -38.65314102]
[348.71237183 -44.57310104]
[362.49475098 -50.49306488]
[371.86904907 -63.94872284]
[388.18395996 -62.28876114]
[394.65612793 -47.22080612]
[384.62753296 -34.24547958]
[368.41473389 -36.71068573]
[354.63235474 -30.79071999]
[340.84997559 -24.87075806]
[327.06756592 -18.95079422]
[322.26797485 -7.80309629]
[310.78070068 -2.77706122]
[298.57797241 -7.08376360]
[284.67541504 -1.45180702]
[270.77285767 4.18014956]
[272.62374878 17.89415932]
[271.11437988 31.65994644]
[266.32894897 44.66571808]
[258.54495239 56.14333344]
[248.21717834 65.41368103]
[235.95111084 71.92685699]
[222.46736145 75.29478455]
[208.55943298 75.31433105]
[195.04696655 71.97953796]
[182.72746277 65.48230743]
[172.32917786 56.20129395]
[164.46813965 44.67989349]
[150.34333801 49.72865295]
[136.95704651 56.49676514]
[124.51761627 64.87890625]
[112.07817078 73.26105499]
[127.01342010 71.86881256]
[141.75749207 69.10974884]
[156.40031433 72.36360168]
[168.58828735 81.10736084]
[176.36236572 93.93560028]
[178.47297668 108.78636932]
[174.58088684 123.27262878]
[165.31166077 135.06591797]
[152.15522766 142.27064514]
[137.22538757 143.72866821]
[130.03401184 130.56492615]
[130.03401184 145.56492615]
[130.03401184 160.56492615]
[130.03401184 175.56492615]
[130.03401184 190.56492615]
[130.03401184 205.56492615]
[130.03401184 220.56492615]
[130.03401184 235.56492615]
[130.03401184 250.56492615]
[130.03401184 265.56491089]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[16 32]
[17 31]
[18 30]
[21 27]
[36 67]
[37 66]
[38 65]
[39 64]
[40 63]
[41 62]
[45 59]
[46 58]
[47 57]
[68 130]
[69 129]
[70 128]
[83 127]
[84 126]
[94 114]
[95 113]
[96 112]
[98 109]
[99 108]
[100 107]
[101 106]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
