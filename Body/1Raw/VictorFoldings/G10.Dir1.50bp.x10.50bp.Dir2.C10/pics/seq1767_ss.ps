%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:10 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCAUUUAUAUAGAGGAGACAAGUCGUAACAUGGUAAGUGUACUGGAAAGUGCACUUGGACGxxxxxxxxxxAAUGAUUUCGACUCAUUAAAUUAUGAUAAUCAUAUUUACCAAAUGCCCCUCAUUUACAUACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[165.69209290 364.98751831]
[164.44520569 350.03942871]
[163.19833374 335.09133911]
[161.95146179 320.14324951]
[160.70458984 305.19515991]
[159.45771790 290.24707031]
[156.51223755 275.53912354]
[151.90666199 261.26364136]
[147.30110168 246.98818970]
[142.69554138 232.71272278]
[138.08998108 218.43727112]
[133.48440552 204.16180420]
[128.87884521 189.88635254]
[124.27327728 175.61088562]
[119.66771698 161.33541870]
[112.48006439 174.50120544]
[98.57595062 180.12931824]
[84.25408173 175.67018127]
[76.00238800 163.14381409]
[77.55898285 148.22480774]
[88.21871185 137.67158508]
[103.15260315 136.26489258]
[115.59571075 144.64227295]
[113.11058807 129.84956360]
[98.87806702 131.71008301]
[85.62503052 127.30517578]
[75.89456177 117.83493805]
[71.39775085 105.43456268]
[72.71781921 92.69983673]
[79.25569916 82.14527893]
[71.00341034 69.61931610]
[62.75112152 57.09335709]
[54.49883270 44.56739426]
[46.24654388 32.04143143]
[32.19319916 24.77409935]
[31.65240097 9.88931561]
[23.40011215 -2.63664627]
[15.01796818 -15.07608700]
[6.50687838 -27.42765999]
[-2.00421166 -39.77923203]
[-11.98693848 -50.97499847]
[-30.10780144 -54.07567215]
[-35.19483185 -70.84236908]
[-46.69663620 -80.47089386]
[-58.19844055 -90.09941864]
[-69.70024109 -99.72794342]
[-81.20204926 -109.35647583]
[-92.70384979 -118.98500061]
[-104.20565033 -128.61352539]
[-115.70745850 -138.24205017]
[-127.20925903 -147.87057495]
[-138.71105957 -157.49909973]
[-154.94889832 -159.79360962]
[-160.82893372 -175.10234070]
[-150.30229187 -187.67698669]
[-134.19787598 -184.58183289]
[-129.08253479 -169.00090027]
[-117.58073425 -159.37237549]
[-106.07893372 -149.74385071]
[-94.57712555 -140.11532593]
[-83.07532501 -130.48680115]
[-71.57351685 -120.85827637]
[-60.07171631 -111.22975159]
[-48.56991196 -101.60122681]
[-37.06811142 -91.97269440]
[-25.56630707 -82.34416962]
[-13.45227337 -83.09084320]
[-3.78378892 -75.10714722]
[-2.12121511 -62.27400208]
[-5.55893755 -76.87475586]
[-2.43877053 -91.54665375]
[6.64283514 -103.48501587]
[19.94984055 -110.40769958]
[34.93848038 -110.99137878]
[48.74352646 -105.12446594]
[58.72601318 -93.92848206]
[62.97768402 -79.54365540]
[60.68579102 -64.71977997]
[52.28845596 -52.29059219]
[39.39090729 -44.63205338]
[24.45864105 -43.20816422]
[10.34736061 -48.29032135]
[18.85845184 -35.93874741]
[27.36954117 -23.58717728]
[33.79618454 -19.83965683]
[35.92607498 -10.88893509]
[44.17836380 1.63702655]
[57.64144516 8.00841904]
[58.77250671 23.78914452]
[67.02479553 36.31510544]
[75.27708435 48.84106827]
[83.52937317 61.36703110]
[91.78166199 73.89299011]
[104.73890686 71.71627045]
[117.83493805 75.89456177]
[128.00160217 86.02787018]
[132.60083008 100.26578522]
[147.17352295 96.71102142]
[161.74623108 93.15626526]
[176.31893921 89.60150146]
[190.89163208 86.04673767]
[198.54605103 80.94166565]
[205.80445862 82.57295990]
[220.44796753 79.32213593]
[235.09146118 76.07131195]
[249.73497009 72.82048798]
[263.88729858 63.48516083]
[276.77554321 74.50012970]
[269.75885010 89.93393707]
[252.98579407 87.46398926]
[238.34228516 90.71481323]
[223.69879150 93.96563721]
[209.05528259 97.21646118]
[194.44639587 100.61943817]
[179.87368774 104.17420197]
[165.30099487 107.72896576]
[150.72828674 111.28372955]
[136.15557861 114.83848572]
[127.90329742 127.36444855]
[130.38841248 142.15716553]
[133.94317627 156.72985840]
[138.54873657 171.00532532]
[143.15431213 185.28077698]
[147.75987244 199.55624390]
[152.36543274 213.83171082]
[156.97099304 228.10716248]
[161.57656860 242.38262939]
[166.18212891 256.65808105]
[170.78768921 270.93353271]
[175.68745422 256.75637817]
[186.52600098 246.38690186]
[200.90596008 242.11877441]
[215.64660645 244.89607239]
[227.48744202 254.10446167]
[233.80940247 267.70715332]
[233.21411133 282.69531250]
[225.83323669 295.75375366]
[213.29937744 303.99404907]
[198.38490295 305.59350586]
[184.38874817 300.19836426]
[174.40580750 289.00018311]
[175.65267944 303.94827271]
[176.89955139 318.89636230]
[178.14642334 333.84445190]
[179.39329529 348.79254150]
[180.64016724 363.74063110]
[191.91006470 375.15856934]
[189.86682129 391.07098389]
[176.07786560 399.27120972]
[161.12088013 393.46878052]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 146]
[2 145]
[3 144]
[4 143]
[5 142]
[6 141]
[7 129]
[8 128]
[9 127]
[10 126]
[11 125]
[12 124]
[13 123]
[14 122]
[15 121]
[23 120]
[24 119]
[30 93]
[31 92]
[32 91]
[33 90]
[34 89]
[36 87]
[37 86]
[38 84]
[39 83]
[40 82]
[41 69]
[43 66]
[44 65]
[45 64]
[46 63]
[47 62]
[48 61]
[49 60]
[50 59]
[51 58]
[52 57]
[97 118]
[98 117]
[99 116]
[100 115]
[101 114]
[103 113]
[104 112]
[105 111]
[106 110]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
