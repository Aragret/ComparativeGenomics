%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:03 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCACACUCAUCACAGCGCUAAGCUCGCACUGAUUUUUUACCUGAGUAGGCCUAGAAAUAAAxxxxxxxxxxAUAACAUUCACAGCCACAGAACUAAUCAUAUUUUAUAUCUUCUUCGAAACCACACUUAUCCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[108.10113525 270.67083740]
[108.10113525 255.67083740]
[108.10113525 240.67083740]
[108.10113525 225.67083740]
[108.10113525 210.67083740]
[108.10113525 195.67083740]
[108.10113525 180.67083740]
[108.10113525 165.67083740]
[108.10113525 150.67083740]
[108.10113525 135.67083740]
[95.55549622 134.59658813]
[84.71071625 129.45036316]
[76.76799774 121.24940491]
[72.44801331 111.31795502]
[57.58496475 113.34029388]
[42.72191620 115.36262512]
[27.85887146 117.38496399]
[12.99582386 119.40729523]
[-1.61306882 122.81027222]
[-15.83984756 127.56408691]
[-30.06662750 132.31790161]
[-37.17314911 146.17918396]
[-51.66884613 150.79756165]
[-64.83966064 143.93716431]
[-79.06644440 148.69097900]
[-93.29322052 153.44479370]
[-98.86160278 168.05735779]
[-112.54510498 175.62675476]
[-127.88279724 172.57893372]
[-137.63269043 160.35299683]
[-137.19119263 144.72164917]
[-126.76674652 133.06553650]
[-111.28147125 130.88832092]
[-98.04703522 139.21800232]
[-83.82025909 134.46418762]
[-69.59347534 129.71037292]
[-63.19264603 116.31019592]
[-48.83238983 111.28648376]
[-34.82044220 118.09112549]
[-20.59366226 113.33731079]
[-6.36688375 108.58349609]
[-20.25865936 102.92499542]
[-29.00681686 90.74018097]
[-29.92665863 75.76840973]
[-22.73589897 62.60433197]
[-9.64128780 55.28783417]
[5.33860445 56.06425476]
[17.60663986 64.69532013]
[23.39791489 78.53226471]
[20.93516159 93.32871246]
[10.97348881 104.54425049]
[25.83653641 102.52191162]
[40.69958115 100.49958038]
[55.56262970 98.47724152]
[70.42567444 96.45491028]
[77.76816559 80.17694092]
[93.10131836 71.02386475]
[93.41337585 56.02711105]
[93.72543335 41.03035736]
[81.53371429 31.61397934]
[77.27416229 16.99516869]
[82.37908936 2.83876419]
[94.69359589 -5.49735928]
[95.00564575 -20.49411201]
[95.31770325 -35.49086761]
[80.86545563 -39.85378647]
[68.12685394 -47.95505905]
[58.04719162 -59.19351578]
[51.37444305 -72.73519135]
[48.60377121 -87.57520294]
[49.94078064 -102.61232758]
[55.28625488 -116.73069763]
[64.24352264 -128.88264465]
[76.14789581 -138.16642761]
[90.11599731 -143.89309692]
[105.11128998 -145.63772583]
[120.02103424 -143.27082825]
[133.73881531 -136.96806335]
[145.24670410 -127.19711304]
[153.69071960 -114.68307495]
[158.44425964 -100.35456085]
[159.15458679 -85.27483368]
[155.76899719 -70.56292725]
[148.53871155 -57.31054688]
[138.00025940 -46.50111389]
[124.93569183 -38.93675995]
[110.31446075 -35.17881012]
[110.00240326 -20.18205643]
[109.69034576 -5.18530321]
[121.64742279 3.65586948]
[126.15904236 18.01237679]
[121.29505920 32.44134521]
[108.72218323 41.34241486]
[108.41012573 56.33916473]
[108.09807587 71.33592224]
[121.69288635 76.40660858]
[132.12448120 87.93669128]
[136.36253357 103.97528076]
[151.26443481 102.26259613]
[166.16633606 100.54990387]
[181.06823730 98.83721161]
[184.05181885 84.00638580]
[191.47412109 70.82440186]
[202.60797119 60.58269882]
[216.36259460 54.28465271]
[231.39045715 52.54728317]
[246.21928406 55.54079819]
[259.39630127 62.97192764]
[269.63052368 74.11264038]
[275.91937256 87.87148285]
[277.64666748 102.90051270]
[274.64321899 117.72732544]
[267.20324707 130.89935303]
[256.05569458 141.12612915]
[242.29263306 147.40573120]
[227.26245117 149.12295532]
[212.43765259 146.10957336]
[199.27061462 138.66079712]
[189.05131531 127.50637817]
[182.78092957 113.73912048]
[167.87902832 115.45180511]
[152.97712708 117.16449738]
[138.07522583 118.87718964]
[151.97398376 124.51851654]
[165.87274170 130.15983582]
[180.78720093 128.56021118]
[195.27030945 132.46400452]
[207.36048889 141.34248352]
[215.42027283 153.99316406]
[218.35806274 168.70266724]
[215.77593994 183.47875977]
[208.02365112 196.32017517]
[196.15113831 205.48770142]
[181.76640320 209.73970032]
[166.81770325 208.50027466]
[153.32965088 201.93731689]
[143.12905884 190.93969727]
[137.59747314 176.99690247]
[137.48390198 161.99830627]
[130.29252625 148.83457947]
[123.10113525 135.67083740]
[123.10113525 150.67083740]
[123.10113525 165.67083740]
[123.10113525 180.67083740]
[123.10113525 195.67083740]
[123.10113525 210.67083740]
[123.10113525 225.67083740]
[123.10113525 240.67083740]
[123.10113525 255.67083740]
[123.10113525 270.67083740]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[14 55]
[15 54]
[16 53]
[17 52]
[18 51]
[19 41]
[20 40]
[21 39]
[24 36]
[25 35]
[26 34]
[57 95]
[58 94]
[59 93]
[63 89]
[64 88]
[65 87]
[98 123]
[99 122]
[100 121]
[101 120]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
