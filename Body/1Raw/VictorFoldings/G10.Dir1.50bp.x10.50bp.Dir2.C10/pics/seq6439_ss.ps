%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:47 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCAUAAACAACAUAAGCUUCUGACUCUUACCUCCCUCUCUCCUACUCCUGCUCGCAUCUGCxxxxxxxxxxGUUCUUUCAUGGGGAAGCAGAUUUGGGUACCACCCAAGUAUUGACUCACCCAUCAACAACCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[105.28073120 428.22116089]
[105.28073120 413.22116089]
[105.28073120 398.22116089]
[105.28073120 383.22116089]
[105.28073120 368.22116089]
[105.28073120 353.22116089]
[105.28073120 338.22116089]
[105.28073120 323.22116089]
[105.28073120 308.22116089]
[105.28073120 293.22116089]
[90.21022797 290.10253906]
[76.10610199 283.93054199]
[63.57986069 274.97027588]
[53.17510986 263.60772705]
[45.34398270 250.33314514]
[40.42750168 235.72004700]
[38.64070511 220.40028381]
[40.06326294 205.03672791]
[44.63591766 190.29472351]
[52.16294479 176.81309509]
[62.32054520 165.17662048]
[74.67075348 155.89056396]
[88.68034363 149.35877991]
[103.74382782 145.86614990]
[103.43177032 130.86940002]
[81.61153412 121.46249390]
[74.55819702 101.10118103]
[83.81889343 84.12424469]
[77.19039154 70.66828156]
[70.56189728 57.21231461]
[63.93339539 43.75634766]
[57.29077911 37.39022827]
[57.31024551 29.95078850]
[50.96311569 16.35983849]
[44.44720459 29.87068176]
[30.35079002 34.99816895]
[16.67717171 28.83114815]
[11.18959904 14.87097168]
[17.00366402 1.04358411]
[30.81840897 -4.80045891]
[44.79157639 0.65788335]
[40.18601227 -13.61757755]
[35.58044815 -27.89303780]
[30.97488213 -42.16849899]
[16.20733452 -39.42115784]
[1.20970428 -38.58485794]
[-13.77173615 -39.67333603]
[-28.49097633 -42.66871262]
[-42.70631409 -47.52180481]
[-56.18431854 -54.15291977]
[-68.70367432 -62.45317078]
[-80.05879211 -72.28625488]
[-90.06322479 -83.49070740]
[-98.55267334 -95.88253784]
[-105.38774872 -109.25827026]
[-110.45620728 -123.39824677]
[-113.67481232 -138.07029724]
[-114.99072266 -153.03347778]
[-114.38233185 -168.04206848]
[-111.85961914 -182.84965515]
[-107.46401215 -197.21304321]
[-101.26769257 -210.89639282]
[-93.37241364 -223.67500305]
[-83.90782166 -235.33903503]
[-73.02932739 -245.69696045]
[-60.91557693 -254.57870483]
[-47.76547623 -261.83840942]
[-33.79497147 -267.35684204]
[-19.23346519 -271.04342651]
[-4.32007217 -272.83761597]
[10.70031452 -272.70993042]
[25.58104706 -270.66244507]
[40.07777405 -266.72885132]
[53.95243835 -260.97366333]
[66.97721100 -253.49145508]
[78.93821716 -244.40504456]
[89.63903809 -233.86366272]
[98.90396118 -222.04040527]
[106.58084106 -209.12940979]
[112.54362488 -195.34269714]
[116.69440460 -180.90664673]
[118.96500397 -166.05831909]
[119.31814575 -151.04154968]
[117.74803162 -136.10290527]
[114.28044128 -121.48770142]
[108.97232056 -107.43593597]
[101.91082764 -94.17834473]
[93.21192169 -81.93263245]
[83.01845551 -70.89988708]
[71.49779510 -61.26128006]
[58.83913803 -53.17507553]
[45.25034332 -46.77406311]
[49.85590744 -32.49860382]
[54.46147156 -18.22314262]
[59.06703568 -3.94768119]
[64.55406952 10.01270866]
[70.90119934 23.60366058]
[77.38935852 37.12784958]
[84.01786041 50.58381653]
[90.64636230 64.03977966]
[97.27485657 77.49574280]
[117.35729218 79.49622345]
[131.02766418 98.59275818]
[145.89071655 96.57042694]
[160.75376892 94.54808807]
[175.61680603 92.52575684]
[190.47985840 90.50341797]
[205.34289551 88.48108673]
[220.22224426 80.35448456]
[232.15026855 92.40266418]
[223.87493896 107.19979858]
[207.36523438 103.34413147]
[192.50219727 105.36647034]
[177.63914490 107.38880157]
[162.77609253 109.41114044]
[147.91305542 111.43347168]
[133.05000305 113.45580292]
[148.04434204 113.04370117]
[160.15348816 121.89630127]
[164.30998230 136.30891418]
[158.77436829 150.25012207]
[145.86323547 157.88572693]
[130.97967529 156.02038574]
[120.35221100 145.43467712]
[118.42852783 130.55734253]
[118.74057770 145.55409241]
[133.14329529 148.18447876]
[146.74626160 153.58546448]
[159.02227783 161.54565430]
[169.49603271 171.75448608]
[177.76240540 183.81439209]
[183.50222778 197.25622559]
[186.49452209 211.55758667]
[186.62509155 226.16307068]
[183.89082336 240.50584412]
[178.39974976 254.02969360]
[170.36676025 266.21051025]
[160.10523987 276.57662964]
[148.01480103 284.72717285]
[134.56573486 290.34747314]
[120.28073120 293.22116089]
[120.28073120 308.22116089]
[120.28073120 323.22116089]
[120.28073120 338.22116089]
[120.28073120 353.22116089]
[120.28073120 368.22116089]
[120.28073120 383.22116089]
[120.28073120 398.22116089]
[120.28073120 413.22116089]
[120.28073120 428.22116089]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[24 126]
[25 125]
[28 101]
[29 100]
[30 99]
[31 98]
[33 97]
[34 96]
[41 95]
[42 94]
[43 93]
[44 92]
[103 117]
[104 116]
[105 115]
[106 114]
[107 113]
[108 112]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
