%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:19 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCUAGGCCUCCUCCUAGCAGCAGCAGGCAAAUCAGCCCAAUUAGGUCUCCACCCCUGACUCCxxxxxxxxxxCCAACAUACUCGGAUUCUACCCUAGCAUCACACACCGCACAAUCCCCUAUCUAGGCCUUCUCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[72.40584564 282.69900513]
[72.09786224 267.70214844]
[71.78988647 252.70532227]
[71.48191071 237.70848083]
[71.17393494 222.71163940]
[70.86595154 207.71481323]
[70.55797577 192.71797180]
[70.25000000 177.72113037]
[69.94202423 162.72428894]
[55.95493698 157.30566406]
[45.62403488 168.18098450]
[35.29313278 179.05628967]
[24.96223068 189.93161011]
[14.63132763 200.80693054]
[4.30042553 211.68223572]
[4.95652246 227.47290039]
[-5.80656147 239.04577637]
[-21.60327911 239.53489685]
[-33.06172180 228.65005493]
[-33.38379288 212.84904480]
[-22.37841797 201.50633240]
[-6.57488823 201.35133362]
[3.75601435 190.47602844]
[14.08691692 179.60070801]
[24.41781998 168.72538757]
[34.74872208 157.85008240]
[45.07962418 146.97476196]
[42.44225311 139.95378113]
[28.40027809 145.22851562]
[16.67543221 154.58415222]
[4.15461636 146.32406616]
[8.14146900 131.86360168]
[23.12553596 131.18653870]
[37.16751099 125.91180420]
[34.53013992 118.89081573]
[19.59412956 117.50679016]
[4.65811634 116.12276459]
[-7.33901501 126.41083527]
[-23.09042358 125.11905670]
[-33.25107574 113.01382446]
[-31.79284096 97.27695465]
[-19.58086205 87.24485016]
[-3.86028767 88.86938477]
[6.04214191 101.18675232]
[20.97815514 102.57077789]
[35.91416550 103.95480347]
[42.05963516 78.80462646]
[57.22515488 59.09815598]
[78.16889954 47.70284271]
[100.91375732 45.84910583]
[121.49219513 53.03801727]
[129.64886475 40.44958115]
[137.80552673 27.86113930]
[145.96218872 15.27270126]
[134.10339355 6.07254982]
[123.06755066 -4.10016203]
[112.93418121 -15.17213726]
[103.77629852 -27.06360245]
[95.65987396 -39.68887711]
[88.64340210 -52.95699692]
[82.77742767 -66.77235413]
[78.10422516 -81.03542328]
[74.65745544 -95.64341736]
[72.46195984 -110.49110413]
[71.53356171 -125.47148895]
[71.87893677 -140.47663879]
[73.49560547 -155.39843750]
[76.37191772 -170.12937927]
[80.48714447 -184.56332397]
[85.81164551 -198.59626770]
[92.30705261 -212.12710571]
[99.92655945 -225.05834961]
[108.61527252 -237.29681396]
[118.31059265 -248.75433350]
[128.94264221 -259.34835815]
[140.43484497 -269.00253296]
[152.70439148 -277.64730835]
[165.66285706 -285.22042847]
[179.21688843 -291.66726685]
[193.26882935 -296.94143677]
[207.71743774 -301.00488281]
[222.45860291 -303.82836914]
[237.38609314 -305.39154053]
[252.39239502 -305.68313599]
[267.36935425 -304.70101929]
[282.20907593 -302.45230103]
[296.80462646 -298.95321655]
[311.05084229 -294.22888184]
[324.84509277 -288.31344604]
[338.08795166 -281.24945068]
[350.68405151 -273.08782959]
[362.54260254 -263.88735962]
[373.57818604 -253.71435547]
[383.71127319 -242.64212036]
[392.86886597 -230.75042725]
[400.98495483 -218.12493896]
[408.00109863 -204.85664368]
[413.86669922 -191.04112244]
[418.53955078 -176.77793884]
[421.98593140 -162.16986084]
[424.18103027 -147.32211304]
[425.10903931 -132.34170532]
[424.76327515 -117.33656311]
[423.14624023 -102.41480255]
[420.26953125 -87.68393707]
[416.15393066 -73.25009918]
[410.82907104 -59.21729279]
[404.33331299 -45.68662262]
[396.71347046 -32.75558090]
[388.02444458 -20.51733589]
[378.32882690 -9.06007004]
[367.69650269 1.53366983]
[356.20407104 11.18755245]
[343.93429565 19.83201981]
[330.97561646 27.40478897]
[317.42141724 33.85129547]
[303.36935425 39.12509155]
[288.92065430 43.18817902]
[274.17941284 46.01128387]
[259.25186157 47.57406616]
[244.24555969 47.86526108]
[229.26863098 46.88277054]
[214.42897034 44.63368225]
[199.83351135 41.13419342]
[185.58741760 36.40951920]
[171.79333496 30.49370193]
[158.55062866 23.42936707]
[150.39396667 36.01780701]
[142.23730469 48.60624695]
[134.08062744 61.19468307]
[142.02079773 68.34031677]
[148.44691467 77.11791992]
[153.02276611 87.20331573]
[155.48228455 98.20307159]
[155.64367676 109.66980743]
[153.42034912 121.12033844]
[148.82781982 132.05606079]
[141.98631287 141.98463440]
[133.11865234 150.44200134]
[122.54365540 157.01377869]
[110.66487122 161.35522461]
[97.95535278 163.20841980]
[84.93885803 162.41632080]
[85.24684143 177.41314697]
[85.55481720 192.40998840]
[85.86279297 207.40682983]
[86.17076874 222.40367126]
[86.47874451 237.40051270]
[86.78672791 252.39733887]
[87.09470367 267.39419556]
[87.40267944 282.39102173]
[89.98845673 301.59945679]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 151]
[2 150]
[3 149]
[4 148]
[5 147]
[6 146]
[7 145]
[8 144]
[9 143]
[10 27]
[11 26]
[12 25]
[13 24]
[14 23]
[15 22]
[35 46]
[36 45]
[37 44]
[51 130]
[52 129]
[53 128]
[54 127]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
