%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:05 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGACUCCUGCCUCACUCAUUUACACCAACCACCCAACUAUCUAUAAACCUAGCCAUGGCCAUxxxxxxxxxxUAUUACCUCAGAAGUUUUUUUCUUCGCAGGAUUUUUCUGAGCCUUUUACCACUCCAGCCUCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[92.50000000 242.71401978]
[92.50000000 227.71401978]
[92.50000000 212.71401978]
[92.50000000 197.71401978]
[92.50000000 182.71401978]
[92.50000000 167.71401978]
[92.50000000 152.71401978]
[92.50000000 137.71401978]
[92.50000000 122.71402740]
[92.50000000 107.71402740]
[88.34210968 93.30181122]
[74.44300079 85.74369049]
[74.21197510 70.85087585]
[66.22206116 58.15594482]
[58.23214340 45.46101379]
[50.24222565 32.76608658]
[42.25231171 20.07115555]
[34.26239395 7.37622595]
[21.03003693 14.45391369]
[7.33138752 20.58057022]
[-6.76530886 25.72567177]
[-21.18982315 29.86358452]
[-35.87028885 32.97369766]
[-50.73357391 35.04051208]
[-65.70562744 36.05373001]
[-80.71185303 36.00831223]
[-95.67749786 34.90447235]
[-110.52799225 32.74772263]
[-125.18936920 29.54879761]
[-139.58856201 25.32363892]
[-153.65385437 20.09329605]
[-167.31517029 13.88382530]
[-180.50444031 6.72616434]
[-193.15596008 -1.34402871]
[-205.20669556 -10.28654861]
[-216.59661865 -20.05684280]
[-227.26896667 -30.60623550]
[-237.17059326 -41.88217163]
[-246.25216675 -53.82847214]
[-254.46841431 -66.38562012]
[-261.77844238 -79.49105835]
[-268.14581299 -93.07949829]
[-273.53878784 -107.08323669]
[-277.93051147 -121.43250275]
[-281.29913330 -136.05581665]
[-283.62783813 -150.88032532]
[-284.90502930 -165.83218384]
[-285.12432861 -180.83686829]
[-284.28466797 -195.81965637]
[-282.39022827 -210.70590210]
[-279.45046997 -225.42141724]
[-275.47998047 -239.89291382]
[-270.49856567 -254.04827881]
[-264.53106689 -267.81701660]
[-257.60720825 -281.13049316]
[-249.76144409 -293.92242432]
[-241.03291321 -306.12902832]
[-231.46505737 -317.68954468]
[-221.10559082 -328.54632568]
[-210.00608826 -338.64535522]
[-198.22184753 -347.93624878]
[-185.81159973 -356.37274170]
[-172.83715820 -363.91284180]
[-159.36315918 -370.51892090]
[-145.45674133 -376.15811157]
[-131.18717957 -380.80227661]
[-116.62556458 -384.42834473]
[-101.84444427 -387.01818848]
[-86.91744995 -388.55895996]
[-71.91896057 -389.04293823]
[-56.92369461 -388.46774292]
[-42.00635529 -386.83618164]
[-27.24126244 -384.15646362]
[-12.70197487 -380.44189453]
[1.53907263 -375.71099854]
[15.41093063 -369.98730469]
[28.84449005 -363.29937744]
[41.77282333 -355.68051147]
[54.13152313 -347.16867065]
[65.85901642 -337.80627441]
[76.89688110 -327.63992310]
[87.19012451 -316.72030640]
[96.68746948 -305.10180664]
[105.34159088 -292.84231567]
[113.10937500 -280.00289917]
[119.95213318 -266.64755249]
[125.83576965 -252.84277344]
[130.73097229 -238.65736389]
[134.61334229 -224.16198730]
[137.46354675 -209.42884827]
[139.26739502 -194.53137207]
[140.01588440 -179.54374695]
[139.70530701 -164.54066467]
[138.33718872 -149.59686279]
[135.91835022 -134.78678894]
[132.46084595 -120.18424225]
[127.98190308 -105.86195374]
[122.50382996 -91.89128113]
[116.05392456 -78.34182739]
[108.66432190 -65.28109741]
[100.37182617 -52.77416611]
[91.21775055 -40.88333130]
[81.24771881 -29.66783905]
[70.51138306 -19.18356323]
[59.06223679 -9.48273659]
[46.95732498 -0.61369014]
[54.94723892 12.08123970]
[62.93715668 24.77616882]
[70.92707062 37.47109985]
[78.91699219 50.16602707]
[86.90690613 62.86095810]
[100.23452759 69.51105499]
[101.03704071 85.31189728]
[100.90298462 70.31249237]
[103.93635559 55.62240601]
[110.00060272 41.90289688]
[118.82274628 29.77154541]
[130.00567627 19.77443695]
[143.04598999 12.36158657]
[157.35667419 7.86667967]
[172.29354858 6.49205160]
[187.18424988 8.29958153]
[201.35845947 13.20790386]
[214.17814636 20.99607277]
[225.06623840 31.31350708]
[233.53260803 43.69577408]
[239.19615173 57.58549500]
[241.80192566 72.35742950]
[241.23263550 87.34661865]
[237.51390076 101.87834167]
[230.81311035 115.29846191]
[221.43191528 127.00286865]
[209.79260254 136.46470642]
[196.41909790 143.25804138]
[181.91342163 147.07708740]
[166.92851257 147.74992371]
[152.13893127 145.24627686]
[138.21041870 139.67883301]
[125.76995087 131.29821777]
[115.37754059 120.48165894]
[107.50000000 107.71402740]
[107.50000000 122.71402740]
[107.50000000 137.71401978]
[107.50000000 152.71401978]
[107.50000000 167.71401978]
[107.50000000 182.71401978]
[107.50000000 197.71401978]
[107.50000000 212.71401978]
[107.50000000 227.71401978]
[107.50000000 242.71401978]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[11 113]
[13 111]
[14 110]
[15 109]
[16 108]
[17 107]
[18 106]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
