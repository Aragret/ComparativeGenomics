%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:56 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCCUCACCACCUCUUGCUCAGCCUAUAUACCGCCAUCUUCAGCAAACCCUGAUGAAGGCUAxxxxxxxxxxUGCCUAGAAGGAAUAAUACUAUCGCUGUUCAUUAUAGCUACUCUCAUAACCCUCAACACCCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[187.95072937 673.28454590]
[187.95072937 658.28454590]
[187.95072937 643.28454590]
[187.95072937 628.28454590]
[187.95072937 613.28454590]
[187.95072937 598.28454590]
[187.95072937 583.28454590]
[187.95072937 568.28454590]
[187.95072937 553.28454590]
[187.95072937 538.28454590]
[173.83801270 535.02294922]
[160.80424500 528.68688965]
[149.51004028 519.59381104]
[140.52871704 508.20095825]
[134.31713867 495.08239746]
[131.19248962 480.90017700]
[131.31608582 466.37084961]
[134.68504333 452.22918701]
[141.13224792 439.19119263]
[150.33465576 427.91778564]
[161.82946777 418.98117065]
[175.03741455 412.83599854]
[189.29194641 409.79614258]
[189.60400391 394.79937744]
[188.51269531 379.83914185]
[186.02757263 365.04641724]
[183.54244995 350.25372314]
[179.83628845 335.71878052]
[174.93473816 321.54223633]
[170.03318787 307.36566162]
[165.13163757 293.18911743]
[149.17539978 294.53060913]
[133.39942932 291.72662354]
[118.86335754 284.95989990]
[106.54492950 274.67959595]
[97.27430725 261.57135010]
[91.67807007 246.51158142]
[90.13690186 230.50900269]
[92.75968170 214.63694763]
[99.37582397 199.96142578]
[109.54634857 187.46945190]
[122.59300995 178.00280762]
[117.10597992 164.04241943]
[105.24926758 155.02757263]
[107.40218353 139.35353088]
[101.91515350 125.39313507]
[96.42812347 111.43274689]
[88.04597473 98.99330902]
[77.16715240 88.66609955]
[66.28833008 78.33889771]
[50.95270157 74.44926453]
[47.04916382 60.07527161]
[36.17033768 49.74806976]
[20.15986443 48.72618103]
[11.09495544 35.48960495]
[15.92943478 20.19230652]
[30.95470238 14.56906319]
[44.64466095 22.93354797]
[46.49754333 38.86924362]
[57.37636948 49.19644928]
[71.93386841 52.34740829]
[76.61553192 67.46006775]
[87.49435425 77.78727722]
[98.37318420 88.11447906]
[112.09323883 82.05146790]
[111.78118134 67.05471802]
[111.46912384 52.05796051]
[111.15706635 37.06120682]
[97.10260773 31.19674110]
[86.65322876 20.11836243]
[81.61936188 5.74547005]
[82.87314606 -9.43174648]
[90.19735718 -22.78374290]
[102.32302856 -31.99720573]
[117.14932251 -35.47584534]
[132.10748291 -32.61697006]
[144.60592651 -23.91589165]
[152.47923279 -10.88012791]
[154.36326599 4.23179626]
[149.93165588 18.80164909]
[139.95216370 30.30511665]
[126.15382385 36.74914932]
[126.46587372 51.74590302]
[126.77793121 66.74266052]
[127.08998871 81.73941040]
[110.38851166 105.94571686]
[115.87554169 119.90610504]
[121.36257172 133.86650085]
[133.61175537 143.87989807]
[131.06636047 158.55538940]
[136.55340576 172.51577759]
[150.46652222 170.58152771]
[164.45115662 171.81639099]
[177.79504395 176.15397644]
[189.81935120 183.36985779]
[199.91320801 193.09335327]
[207.56472778 204.82646179]
[212.38699341 217.96940613]
[214.13760376 231.85125732]
[212.73088074 245.76426697]
[208.24198914 258.99981689]
[200.90303040 270.88467407]
[191.09092712 280.81509399]
[179.30819702 288.28756714]
[184.20974731 302.46411133]
[189.11129761 316.64065552]
[194.01284790 330.81723022]
[200.14944458 317.12991333]
[213.07861328 309.52487183]
[228.02328491 310.81201172]
[239.46170044 320.51574707]
[243.16760254 335.05075073]
[237.77172852 349.04663086]
[225.26774597 357.33218384]
[210.27563477 356.84606934]
[198.33515930 347.76858521]
[200.82028198 362.56130981]
[203.30540466 377.35400391]
[211.05403137 364.51037598]
[224.45033264 357.76211548]
[239.38314819 359.18017578]
[251.26980591 368.32934570]
[256.46240234 382.40191650]
[253.36744690 397.07913208]
[242.93470764 407.85678101]
[228.36585999 411.42733765]
[214.13191223 406.69503784]
[204.60075378 395.11141968]
[204.28869629 410.10818481]
[219.32850647 414.09957886]
[232.97579956 421.55661011]
[244.44584656 432.04580688]
[253.08024597 444.95941162]
[258.38473511 459.55072021]
[260.05743408 474.97717285]
[258.00601196 490.34906006]
[252.35285950 504.78079224]
[243.42773438 517.44195557]
[231.74851990 527.60510254]
[217.99119568 534.68750000]
[202.95072937 538.28454590]
[202.95072937 553.28454590]
[202.95072937 568.28454590]
[202.95072937 583.28454590]
[202.95072937 598.28454590]
[202.95072937 613.28454590]
[202.95072937 628.28454590]
[202.95072937 643.28454590]
[202.95072937 658.28454590]
[202.95072937 673.28454590]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[23 129]
[24 128]
[25 118]
[26 117]
[27 116]
[28 107]
[29 106]
[30 105]
[31 104]
[42 91]
[43 90]
[45 88]
[46 87]
[47 86]
[48 64]
[49 63]
[50 62]
[52 60]
[53 59]
[65 85]
[66 84]
[67 83]
[68 82]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
