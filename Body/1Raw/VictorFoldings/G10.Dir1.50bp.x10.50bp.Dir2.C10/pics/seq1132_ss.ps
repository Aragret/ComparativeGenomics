%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:09 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGAUAAACGAAAGUUUAACUAAGCUAUACUAACCCCAGGGUUGGUCAAUUUCGUGCCAGCCAxxxxxxxxxxUAAUUCUUCUCACCCUAACAGGUCAACCUCGCUUCCCCACCCUUACUAACAUUAACGAAACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[92.50000000 249.19114685]
[92.50000000 234.19114685]
[92.50000000 219.19114685]
[92.50000000 204.19114685]
[92.50000000 189.19114685]
[92.50000000 174.19114685]
[92.50000000 159.19114685]
[92.50000000 144.19114685]
[92.50000000 129.19114685]
[92.50000000 114.19114685]
[85.54872131 111.37516785]
[64.69488525 102.92723083]
[54.25507736 113.69804382]
[43.81526184 124.46884918]
[33.37545013 135.23965454]
[22.93563843 146.01046753]
[19.46585083 162.03833008]
[3.76989365 166.78901672]
[-8.00557804 155.37541199]
[-3.74696875 139.53886414]
[12.16482925 135.57064819]
[22.60464287 124.79984283]
[33.04445267 114.02903748]
[43.48426819 103.25823212]
[53.92407990 92.48741913]
[63.56258392 90.25842285]
[73.10169983 89.84909058]
[82.27777100 91.20912170]
[90.83698273 94.25413513]
[88.35186005 79.46142578]
[85.86674500 64.66871643]
[83.38162231 49.87601089]
[68.50318909 47.07291031]
[55.50589371 39.36301804]
[45.94859314 27.69347763]
[40.96984863 13.48495197]
[41.15235901 -1.54129744]
[46.45478821 -15.57193279]
[56.21911621 -26.92037010]
[69.25222015 -34.22951126]
[66.76709747 -49.02221680]
[64.28198242 -63.81492615]
[48.46255493 -74.14667511]
[45.20730591 -92.43603516]
[56.11116791 -107.08197021]
[53.01284409 -121.75849152]
[49.91452408 -136.43501282]
[46.81620026 -151.11154175]
[43.71788025 -165.78807068]
[36.94976425 -179.17434692]
[26.96703911 -190.37011719]
[16.98431206 -201.56588745]
[8.88226318 -205.92578125]
[6.91333389 -213.09996033]
[-2.83431816 -224.50099182]
[-18.60808372 -225.48275757]
[-29.00482559 -237.38583374]
[-27.85634041 -253.14834595]
[-15.84400558 -263.41864014]
[-0.09452492 -262.10357666]
[10.04821301 -249.98333740]
[8.56670284 -234.24864197]
[18.31435394 -222.84761047]
[28.18007851 -211.54861450]
[38.16280365 -200.35284424]
[48.14553070 -189.15707397]
[45.45137787 -203.91314697]
[46.16711426 -218.89605713]
[50.25558472 -233.32812500]
[57.50458145 -246.46022034]
[67.53783417 -257.61074829]
[79.83455658 -266.20086670]
[93.75648499 -271.78479004]
[108.58098602 -274.07260132]
[123.53858948 -272.94558716]
[137.85290527 -268.46221924]
[150.78092957 -260.85525513]
[161.65164185 -250.51951599]
[169.90077209 -237.99147034]
[175.10015869 -223.92141724]
[176.97991943 -209.03967285]
[175.44247437 -194.11866760]
[170.56762695 -179.93290710]
[162.60842896 -167.21868896]
[151.97798157 -156.63598633]
[139.22807312 -148.73408508]
[125.02052307 -143.92314148]
[110.09275055 -142.45286560]
[95.21961212 -144.39958191]
[81.17310333 -149.66223145]
[68.68231201 -157.96768188]
[58.39440536 -168.88639832]
[61.49272537 -154.20986938]
[64.59104919 -139.53334045]
[67.68936920 -124.85681152]
[70.78768921 -110.18029022]
[81.53681183 -106.13715363]
[89.05448914 -97.29678345]
[91.36553955 -85.80187225]
[87.77574158 -74.51373291]
[79.07468414 -66.30004120]
[81.55980682 -51.50733566]
[84.04492188 -36.71463013]
[98.75096893 -34.06555939]
[111.68759918 -26.53079796]
[121.28373718 -15.00306511]
[126.36635590 -0.86133617]
[126.30384827 14.19410038]
[121.08446503 28.34606934]
[111.32003021 39.87984085]
[98.17433167 47.39089203]
[100.65945435 62.18360138]
[103.14456940 76.97631073]
[105.62968445 91.76901245]
[108.50298309 77.04678345]
[114.52581024 63.30904007]
[123.40670013 51.22062302]
[134.71586609 41.36654282]
[147.90599060 34.22367859]
[162.33876038 30.13771629]
[177.31570435 29.30638504]
[192.11203003 31.76992035]
[206.01165771 37.40909958]
[218.34191895 45.95101929]
[228.50611877 56.98229599]
[236.01235962 69.96907806]
[240.49737549 84.28286743]
[241.74411011 99.23096466]
[239.69223022 114.08996582]
[234.44104004 128.14076233]
[226.24467468 140.70338440]
[215.49978638 151.16987610]
[202.72636414 159.03370667]
[188.54257202 163.91430664]
[173.63484192 165.57548523]
[158.72462463 163.93684387]
[144.53346252 159.07769775]
[131.74816895 151.23320007]
[120.98746490 140.78297424]
[112.77210999 128.23275757]
[107.50000000 114.19114685]
[107.50000000 129.19114685]
[107.50000000 144.19114685]
[107.50000000 159.19114685]
[107.50000000 174.19114685]
[107.50000000 189.19114685]
[107.50000000 204.19114685]
[107.50000000 219.19114685]
[107.50000000 234.19114685]
[107.50000000 249.19114685]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[12 25]
[13 24]
[14 23]
[15 22]
[16 21]
[29 114]
[30 113]
[31 112]
[32 111]
[40 103]
[41 102]
[42 101]
[45 96]
[46 95]
[47 94]
[48 93]
[49 92]
[50 66]
[51 65]
[52 64]
[54 63]
[55 62]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
