%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:05 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCUCCCCAAUAAAGCUAAAACUCACCUGAGUUGUAAAAAACUCCAGUUGACACAAAAUAGAxxxxxxxxxxACUAAAACACUCACCAAGACCUCAACCCCUGACCCCCAUGCCUCAGGAUACUCCUCAAUACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[77.53675842 313.39190674]
[77.22470093 298.39514160]
[76.91264343 283.39840698]
[76.60059357 268.40164185]
[76.28853607 253.40489197]
[75.97647858 238.40814209]
[75.66442108 223.41137695]
[75.35236359 208.41462708]
[75.04030609 193.41787720]
[60.91550446 188.36911011]
[51.16785431 199.77014160]
[41.42020035 211.17115784]
[45.96285629 225.91456604]
[41.79149246 240.76727295]
[30.23717880 250.98986816]
[14.98685169 253.32034302]
[0.90683782 247.01504517]
[-7.50998306 234.08598328]
[-7.57783318 218.65876770]
[0.72493756 205.65617371]
[14.74894524 199.22726440]
[30.01918030 201.42350769]
[39.76683426 190.02249146]
[49.51448441 178.62145996]
[45.92322922 172.03717041]
[30.92764854 171.67314148]
[38.74072266 158.86859131]
[35.14946747 152.28430176]
[20.28642082 154.30664062]
[5.42337370 156.32896423]
[-9.43967342 158.35130310]
[-24.30272102 160.37364197]
[-36.93133545 170.83547974]
[-52.20962906 164.87680054]
[-54.42059708 148.62738037]
[-41.28979111 138.80322266]
[-26.32505417 145.51058960]
[-11.46200752 143.48825073]
[3.40103912 141.46592712]
[18.26408577 139.44358826]
[33.12713242 137.42124939]
[34.68471527 122.50234222]
[20.55990982 117.45358276]
[5.50255871 122.99034119]
[-8.13908005 114.54728699]
[-9.90030766 98.60120392]
[1.56993878 87.38455963]
[17.47266769 89.50181580]
[25.60866737 103.32878113]
[39.73347092 108.37754059]
[44.46784973 88.28473663]
[55.21276855 72.29653931]
[69.80724335 61.95307159]
[85.80702972 57.84545517]
[100.85900116 59.62098312]
[103.95732880 44.94445801]
[107.05564880 30.26793098]
[110.15396881 15.59140491]
[113.25228882 0.91487950]
[99.14105988 -4.24786329]
[85.90823364 -11.36636829]
[73.82321930 -20.29571342]
[63.13205338 -30.85410690]
[54.05238724 -42.82659531]
[46.76907730 -55.96943283]
[41.43040085 -70.01504517]
[38.14504623 -84.67749023]
[36.97990036 -99.65824890]
[37.95867920 -114.65233612]
[41.06146240 -129.35449219]
[46.22507858 -143.46540833]
[53.34440231 -156.69779968]
[62.27449799 -168.78225708]
[72.83354950 -179.47277832]
[84.80660248 -188.55169678]
[97.94989014 -195.83419800]
[111.99583435 -201.17199707]
[126.65847778 -204.45645142]
[141.63931274 -205.62066650]
[156.63334656 -204.64096069]
[171.33531189 -201.53726196]
[185.44590759 -196.37277222]
[198.67784119 -189.25262451]
[210.76174927 -180.32179260]
[221.45161438 -169.76206970]
[230.52980042 -157.78846741]
[237.81147766 -144.64472961]
[243.14842224 -130.59844971]
[246.43196106 -115.93560028]
[247.59524536 -100.95469666]
[246.61460876 -85.96072388]
[243.51000977 -71.25894928]
[238.34465027 -57.14867783]
[231.22369385 -43.91717529]
[222.29209900 -31.83382034]
[211.73171997 -21.14461136]
[199.75755310 -12.06717014]
[186.61335754 -4.78630066]
[172.56675720 0.54976803]
[157.90370178 3.83240056]
[142.92272949 4.99476624]
[127.92881775 4.01320124]
[124.83049774 18.68972778]
[121.73217010 33.36625290]
[118.63385010 48.04277802]
[115.53553009 62.71930313]
[150.49728394 103.48043823]
[115.47796631 158.84445190]
[130.24401855 161.48332214]
[145.01008606 164.12219238]
[159.77613831 166.76104736]
[174.54219055 169.39991760]
[184.38038635 157.60562134]
[198.80319214 152.32562256]
[213.93093872 154.98022461]
[225.69433594 164.85533142]
[230.92909241 179.29461670]
[228.22709656 194.41397095]
[218.31515503 206.14636230]
[203.85954285 211.33583069]
[188.74873352 208.58645630]
[177.04747009 198.63778687]
[171.90332031 184.16596985]
[157.13726807 181.52709961]
[142.37121582 178.88824463]
[127.60516357 176.24937439]
[112.83910370 173.61051941]
[107.13859558 178.48434448]
[118.83188629 187.87937927]
[130.52517700 197.27442932]
[145.24652100 200.15231323]
[155.33203125 211.25556946]
[156.78570557 226.18496704]
[149.03157043 239.02528381]
[135.14193726 244.68901062]
[120.62002563 240.93211365]
[111.21961975 229.24311829]
[110.66493988 214.25456238]
[103.20125580 201.24327087]
[95.73757172 188.23199463]
[90.03706360 193.10581970]
[90.34912109 208.10256958]
[90.66117859 223.09931946]
[90.97322845 238.09608459]
[91.28528595 253.09283447]
[91.59734344 268.08959961]
[91.90940094 283.08633423]
[92.22145844 298.08309937]
[92.53351593 313.07983398]
[95.12451172 332.28756714]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 149]
[2 148]
[3 147]
[4 146]
[5 145]
[6 144]
[7 143]
[8 142]
[9 141]
[10 24]
[11 23]
[12 22]
[28 41]
[29 40]
[30 39]
[31 38]
[32 37]
[42 50]
[43 49]
[55 106]
[56 105]
[57 104]
[58 103]
[59 102]
[108 127]
[109 126]
[110 125]
[111 124]
[112 123]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
