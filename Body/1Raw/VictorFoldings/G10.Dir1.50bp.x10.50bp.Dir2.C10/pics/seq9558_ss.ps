%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:16 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCUCAUUUACAUAAAUAUUAUACUAGCAUUUACCAUCUCACUUCUAGGAAUACUAGUAUAUxxxxxxxxxxCAUACUUCCUAUUCUACACCCUAGUAGGCUCCCUUCCCCUACUCAUCGCACUAAUUUACACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[89.95963287 435.46051025]
[89.95963287 420.46051025]
[89.95963287 405.46051025]
[89.95963287 390.46051025]
[89.95963287 375.46051025]
[89.95963287 360.46051025]
[89.95963287 345.46051025]
[89.95963287 330.46051025]
[89.95963287 315.46051025]
[89.95963287 300.46051025]
[75.60761261 297.74850464]
[61.99950027 292.43109131]
[49.60402679 284.68969727]
[38.84846878 274.78942871]
[30.10389900 263.06973267]
[23.67239380 249.93296814]
[19.77659988 235.83038330]
[18.55202293 221.24678040]
[20.04231071 206.68379211]
[24.19771194 192.64257812]
[30.87672424 179.60667419]
[39.85091400 168.02526855]
[50.81273651 158.29776001]
[63.38606644 150.75994873]
[77.13910675 145.67248535]
[91.59921265 143.21183777]
[91.91127014 128.21508789]
[78.56324005 122.99455261]
[68.50182343 111.47224426]
[64.65641785 95.67111969]
[68.74303436 78.93419647]
[80.69902802 65.21790314]
[66.20343018 61.36074829]
[51.70783615 57.50358582]
[37.21223831 53.64642715]
[28.79590988 66.23388672]
[16.74694824 75.40455627]
[2.37233496 80.16368103]
[-12.76867771 79.99501801]
[-27.03370667 74.91686249]
[-38.87538910 65.48005676]
[-47.00922775 52.70823669]
[-50.55292511 37.98679352]
[-49.12208557 22.91259384]
[-42.87191391 9.12078190]
[-32.48038864 -1.89261496]
[-19.07469940 -8.93294430]
[-4.10899782 -11.23652267]
[10.79335022 -8.55347729]
[24.01585007 -1.17484391]
[34.12422180 10.09899902]
[40.02198792 24.04514885]
[41.06939697 39.15083313]
[55.56499481 43.00799179]
[70.06059265 46.86515045]
[84.55619049 50.72230911]
[96.44857025 41.58057404]
[96.44857025 26.58057594]
[96.44857025 11.58057594]
[96.44857025 -3.41942453]
[96.44857025 -18.41942406]
[83.86413574 -30.52601242]
[83.89594269 -47.65151978]
[96.03813171 -59.24570847]
[95.72607422 -74.24246216]
[95.41401672 -89.23921967]
[95.10195923 -104.23596954]
[94.78990173 -119.23272705]
[80.73544312 -125.09719086]
[70.28606415 -136.17556763]
[65.25219727 -150.54846191]
[66.50598145 -165.72567749]
[73.83019257 -179.07766724]
[85.95586395 -188.29113770]
[100.78215790 -191.76977539]
[115.74032593 -188.91090393]
[128.23876953 -180.20982361]
[136.11206055 -167.17405701]
[137.99610901 -152.06213379]
[133.56448364 -137.49227905]
[123.58499908 -125.98881531]
[109.78665924 -119.54477692]
[110.09871674 -104.54802704]
[110.41077423 -89.55126953]
[110.72282410 -74.55451965]
[111.03488159 -59.55776596]
[121.51541138 -51.99765015]
[125.77243042 -39.58990479]
[122.03129578 -26.81368446]
[111.44857025 -18.41942406]
[111.44857025 -3.41942453]
[111.44857025 11.58057594]
[111.44857025 26.58057594]
[111.44857025 41.58057404]
[116.77938080 46.85622025]
[123.97076416 33.69248199]
[130.68927002 20.28122902]
[145.49026489 17.84599876]
[156.15144348 28.39774704]
[153.86903381 43.22308350]
[140.52922058 50.07958221]
[127.44100952 57.40751266]
[132.77182007 62.68315506]
[147.77101135 62.52711868]
[162.77020264 62.37108231]
[177.76937866 62.21504593]
[192.76856995 62.05900955]
[207.76776123 61.90297318]
[215.88571167 48.78418732]
[229.81733704 42.15748596]
[245.11712646 44.13741684]
[256.90295410 54.09220123]
[261.41403198 68.84529877]
[257.21084595 83.68904877]
[245.63465881 93.88686371]
[230.37937927 96.18466187]
[216.31291199 89.84922028]
[207.92379761 76.90216064]
[192.92460632 77.05819702]
[177.92541504 77.21423340]
[162.92623901 77.37026978]
[147.92704773 77.52630615]
[132.92785645 77.68234253]
[132.24113464 112.45992279]
[106.90802002 128.52713013]
[106.59597015 143.52389526]
[121.66516876 146.81446838]
[135.80468750 152.96585083]
[148.47732544 161.74237061]
[159.20196533 172.80862427]
[167.57188416 185.74237061]
[173.27015686 200.05055237]
[176.08168030 215.18815613]
[175.90122986 230.57894897]
[172.73750305 245.63740540]
[166.71260071 259.79098511]
[158.05741882 272.50198364]
[147.10269165 283.28775024]
[134.26649475 291.73925781]
[120.03813934 297.53646851]
[104.95963287 300.46051025]
[104.95963287 315.46051025]
[104.95963287 330.46051025]
[104.95963287 345.46051025]
[104.95963287 360.46051025]
[104.95963287 375.46051025]
[104.95963287 390.46051025]
[104.95963287 405.46051025]
[104.95963287 420.46051025]
[104.95963287 435.46051025]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[26 126]
[27 125]
[32 56]
[33 55]
[34 54]
[35 53]
[57 94]
[58 93]
[59 92]
[60 91]
[61 90]
[64 86]
[65 85]
[66 84]
[67 83]
[68 82]
[103 123]
[104 122]
[105 121]
[106 120]
[107 119]
[108 118]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
