%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:24 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGUACCCCCGAUUCCGCUACGACCAACUCAUACACCUCCUAUGAAAAAACUUCCUACCACUCxxxxxxxxxxCCCAUCAUAAUCGGAGGCUUUGGCAACUGACUAGUUCCCCUAAUAAUCGGUGCCCCCGAUCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[119.27291870 426.74008179]
[119.27291870 411.74008179]
[119.27291870 396.74008179]
[119.27291870 381.74008179]
[119.27291870 366.74008179]
[119.27291870 351.74008179]
[119.27291870 336.74008179]
[119.27291870 321.74008179]
[119.27291870 306.74008179]
[119.27291870 291.74008179]
[101.80178070 284.45068359]
[89.17594910 270.28018188]
[83.91560364 251.99397278]
[87.09799957 233.18498230]
[98.13723755 217.56790161]
[114.89152527 208.24540710]
[113.33393860 193.32649231]
[111.77635956 178.40757751]
[110.21878052 163.48866272]
[108.66120148 148.56974792]
[107.10361481 133.65083313]
[91.16282654 129.18757629]
[80.99210358 118.60763550]
[67.74951935 125.65277100]
[56.60593414 138.42996216]
[41.24321747 131.25895691]
[43.88116074 114.51149750]
[60.70438385 112.41018677]
[73.94696808 105.36505127]
[75.14397430 90.52782440]
[84.12494659 78.65692902]
[78.92952728 64.58540344]
[73.73411560 50.51388550]
[68.53869629 36.44236755]
[61.90494537 49.89574432]
[48.24699020 56.09737778]
[33.75202179 52.23786545]
[24.98639679 40.06560898]
[25.92103577 25.09475517]
[36.13253403 14.10725021]
[50.99498367 12.08053875]
[63.77580643 19.93305779]
[60.52497864 5.28955650]
[57.12200165 -9.31933594]
[53.71902466 -23.92822838]
[50.31604385 -38.53712082]
[46.91306686 -53.14601517]
[43.05590820 -67.64160919]
[38.74832153 -82.00979614]
[34.44073868 -96.37797546]
[30.13315392 -110.74616241]
[25.82556915 -125.11434937]
[10.86741066 -123.51181030]
[-4.13050413 -124.68534851]
[-18.65735054 -128.59500122]
[-32.21835327 -135.10758972]
[-44.35162354 -144.00131226]
[-54.64391327 -154.97326660]
[-62.74466324 -167.64971924]
[-68.37797546 -181.59892273]
[-71.35196686 -196.34577942]
[-71.56536102 -211.38803101]
[-69.01087952 -226.21331787]
[-63.77552414 -240.31671143]
[-56.03761673 -253.21786499]
[-46.06070709 -264.47732544]
[-34.18460083 -273.71166992]
[-20.81379700 -280.60632324]
[-6.40369797 -284.92645264]
[8.55489254 -286.52496338]
[23.55249023 -285.34738159]
[38.07828522 -281.43383789]
[51.63752747 -274.91757202]
[63.76840210 -266.02056885]
[74.05773163 -255.04586792]
[82.15506744 -242.36723328]
[87.78461456 -228.41650391]
[90.75463867 -213.66883850]
[90.96397400 -198.62654114]
[88.40549469 -183.80192566]
[83.16634369 -169.69995117]
[75.42495728 -156.80088806]
[65.44500732 -145.54409790]
[53.56641769 -136.31297302]
[40.19375229 -129.42193604]
[44.50133896 -115.05374908]
[48.80892181 -100.68556213]
[53.11650848 -86.31737518]
[57.42409134 -71.94919586]
[60.40454102 -69.95309448]
[62.53907394 -66.38301849]
[63.08433533 -61.66548920]
[61.52196121 -56.54899216]
[64.92493439 -41.94009781]
[68.32791901 -27.33120728]
[71.73089600 -12.72231388]
[75.13387299 1.88657868]
[79.74425507 7.72524691]
[78.45233154 16.83473587]
[82.61022186 31.24695206]
[87.80563354 45.31847000]
[93.00105286 59.38999176]
[98.19646454 73.46150970]
[120.70381927 77.60887146]
[134.39057922 99.64192200]
[149.29248047 97.92922974]
[164.19438171 96.21654510]
[179.09628296 94.50385284]
[191.93981934 84.30699921]
[207.09083557 90.58222961]
[208.96328735 106.87413025]
[195.63093567 116.42298889]
[180.80897522 109.40575409]
[165.90707397 111.11844635]
[151.00517273 112.83113098]
[136.10327148 114.54382324]
[150.00202942 120.18515015]
[164.67857361 123.28336334]
[174.14671326 134.91755676]
[174.19877625 149.91746521]
[164.81164551 161.61709595]
[150.15695190 164.81712341]
[136.74729919 158.09542847]
[130.54194641 144.43908691]
[122.02252960 132.09326172]
[123.58010864 147.01217651]
[125.13769531 161.93107605]
[126.69527435 176.84999084]
[128.25285339 191.76890564]
[129.81044006 206.68782043]
[140.90483093 209.01856995]
[150.99723816 214.14761353]
[159.39663696 221.71466064]
[165.53031921 231.19277954]
[168.98291016 241.92515564]
[169.52447510 253.17054749]
[167.12586975 264.15447998]
[161.96015930 274.12265015]
[154.39010620 282.39263916]
[144.94281006 288.40066528]
[134.27291870 291.74008179]
[134.27291870 306.74008179]
[134.27291870 321.74008179]
[134.27291870 336.74008179]
[134.27291870 351.74008179]
[134.27291870 366.74008179]
[134.27291870 381.74008179]
[134.27291870 396.74008179]
[134.27291870 411.74008179]
[134.27291870 426.74008179]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[16 130]
[17 129]
[18 128]
[19 127]
[20 126]
[21 125]
[23 29]
[24 28]
[31 103]
[32 102]
[33 101]
[34 100]
[42 99]
[43 97]
[44 96]
[45 95]
[46 94]
[47 93]
[48 89]
[49 88]
[50 87]
[51 86]
[52 85]
[105 116]
[106 115]
[107 114]
[108 113]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
