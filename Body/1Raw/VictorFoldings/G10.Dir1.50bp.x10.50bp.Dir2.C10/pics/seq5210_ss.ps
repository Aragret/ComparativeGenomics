%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:44 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGUUAAACCAAACCCAGCUACGCAAAAUCUUAGCAUACUCCUCAAUUACCCACAUAGGAUGAxxxxxxxxxxCUAUCCCUCAACCCCGACAUCAUUACCGGGUUUUCCUCUUGUAAAUAUAGUUUAACCAAACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[106.00115967 208.74748230]
[105.06552887 193.77670288]
[104.12989807 178.80590820]
[103.19427490 163.83511353]
[102.25864410 148.86431885]
[101.32301331 133.89352417]
[100.38738251 118.92273712]
[88.59074402 109.65779114]
[73.82469177 112.29665375]
[59.05863571 114.93551636]
[44.29257965 117.57438660]
[43.77984619 132.61817932]
[40.15174103 147.22091675]
[33.56920624 160.74485779]
[24.32215881 172.59994507]
[12.81671238 182.26947021]
[-0.44265911 189.33264160]
[-14.87523556 193.48286438]
[-29.84948730 194.54107666]
[-44.71070862 192.46343994]
[-58.80963898 187.34317017]
[-71.53083801 179.40638733]
[-82.31954193 169.00205994]
[-90.70585632 156.58671570]
[-96.32522583 142.70440674]
[-111.09127808 145.34327698]
[-125.85733795 147.98213196]
[-140.62338257 150.62100220]
[-145.76753235 165.09281921]
[-157.46879578 175.04147339]
[-172.57960510 177.79086304]
[-187.03521729 172.60137939]
[-196.94715881 160.86898804]
[-199.64916992 145.74964905]
[-194.41439819 131.31036377]
[-182.65100098 121.43524170]
[-167.52325439 118.78064728]
[-153.10044861 124.06064606]
[-143.26225281 135.85494995]
[-128.49620056 133.21607971]
[-113.73014069 130.57720947]
[-98.96408844 127.93834686]
[-98.50084686 112.96900940]
[-94.93382263 98.41747284]
[-88.41658020 84.92037201]
[-79.23180389 73.06872559]
[-67.77902985 63.38208389]
[-54.55731583 56.28569794]
[-40.14342880 52.09190750]
[-25.16673470 50.98635864]
[-10.28169250 53.01979828]
[3.86072946 58.10575867]
[16.64153481 66.02421570]
[27.50078583 76.43110657]
[35.96213531 88.87331390]
[41.65371704 102.80832672]
[56.41976929 100.16946411]
[71.18582916 97.53060150]
[85.95188141 94.89173889]
[98.72924042 87.03430939]
[107.74677277 75.04747772]
[116.76429749 63.06064606]
[118.53839111 44.76221466]
[134.89054871 38.46882248]
[143.65675354 26.29698372]
[152.42295837 14.12514782]
[161.18917847 1.95331073]
[147.38514709 7.82262373]
[132.54286194 9.99207783]
[117.63642120 8.31929016]
[103.64416504 2.91404724]
[91.48440552 -5.86890078]
[81.95519257 -17.45312119]
[75.68194580 -31.07833290]
[73.07637787 -45.85029984]
[74.30950165 -60.79952621]
[79.30037689 -74.94488525]
[87.72145844 -87.35800171]
[99.02005768 -97.22418976]
[112.45463562 -103.89593506]
[127.14347076 -106.93534851]
[142.12252808 -106.14295959]
[156.40870667 -101.57077789]
[169.06442261 -93.51887512]
[179.25903320 -82.51570129]
[186.32347107 -69.28340912]
[189.79411316 -54.69043732]
[189.44314575 -39.69454575]
[185.29362488 -25.27991867]
[177.61488342 -12.38879108]
[190.85746765 -19.43392563]
[199.40676880 -32.74632263]
[214.27693176 -31.89322090]
[227.51951599 -38.93835449]
[240.76210022 -45.98348999]
[254.00468445 -53.02862549]
[254.45695496 -68.38085938]
[262.53839111 -81.44170380]
[276.07516479 -88.69786835]
[291.42590332 -88.19747925]
[304.46133423 -80.07513428]
[311.67504883 -66.51570129]
[311.12652588 -51.16660690]
[302.96337891 -38.15667725]
[289.38140869 -30.98551750]
[274.03408813 -31.58213425]
[261.04983521 -39.78604126]
[247.80723572 -32.74090576]
[234.56465149 -25.69577026]
[221.32206726 -18.65063477]
[213.71995544 -5.84215450]
[197.90260315 -6.19133997]
[184.66001892 0.85379487]
[173.36100769 10.71951771]
[164.59480286 22.89135551]
[155.82859802 35.06319046]
[147.06239319 47.23502731]
[148.68843079 59.26263428]
[141.42930603 69.48634338]
[128.75112915 72.07817078]
[119.73360443 84.06501007]
[110.71607208 96.05184174]
[124.37649536 89.85563660]
[138.03691101 83.65943909]
[150.48291016 75.28704071]
[164.95040894 71.32577515]
[179.92547607 72.19016266]
[193.84111023 77.78974152]
[205.24111938 87.53857422]
[212.93260193 100.41650391]
[216.11070251 115.07595825]
[214.44284058 129.98294067]
[208.10354614 143.57756042]
[197.75619507 154.43722534]
[184.48355103 161.42556763]
[169.67449951 163.81129456]
[154.87867737 161.34478760]
[141.64436340 154.28411865]
[131.35511780 143.36619568]
[123.35665131 130.67665100]
[115.35817719 117.98711395]
[116.29380798 132.95790100]
[117.22943115 147.92869568]
[118.16506195 162.89949036]
[119.10069275 177.87028503]
[120.03632355 192.84106445]
[120.97194672 207.81185913]
[130.48727417 221.16815186]
[123.43283844 235.97244263]
[107.06562042 236.99533081]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 147]
[2 146]
[3 145]
[4 144]
[5 143]
[6 142]
[7 141]
[8 59]
[9 58]
[10 57]
[11 56]
[25 42]
[26 41]
[27 40]
[28 39]
[60 122]
[61 121]
[62 120]
[64 117]
[65 116]
[66 115]
[67 114]
[90 113]
[91 112]
[93 110]
[94 109]
[95 108]
[96 107]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
