%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:35 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGUCUAACCUCCCUGUUCUUAUGAAUUCGAACAGCAUACCCCCGAUUCCGCUACGACCAACUCAxxxxxxxxxxCCUGCUCGCAUCUGCUAUAGUGGAGGCCGGAGCAGGAACAGGUUGAACAGUCUACCCUCCCUCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[128.23036194 355.58148193]
[128.23036194 340.58148193]
[128.23036194 325.58148193]
[128.23036194 310.58148193]
[128.23036194 295.58148193]
[128.23036194 280.58148193]
[128.23036194 265.58148193]
[128.23036194 250.58148193]
[128.23036194 235.58148193]
[128.23036194 220.58148193]
[125.80880737 205.77822876]
[121.02922058 191.56008911]
[115.88661957 186.19042969]
[116.30001831 177.00511169]
[111.80957031 162.69302368]
[107.31912994 148.38093567]
[102.82868195 134.06883240]
[98.33823395 119.75675201]
[87.28834534 118.05527496]
[77.85771179 110.09720612]
[73.54677582 97.30107880]
[59.18991852 101.64625549]
[44.83305740 105.99143219]
[30.47619820 110.33660889]
[16.11933899 114.68178558]
[1.76247811 119.02696228]
[-1.65645742 134.00048828]
[-12.11586189 145.24755859]
[-26.80220795 149.74275208]
[-41.76494217 146.27690125]
[-52.97916412 135.78228760]
[-57.42830658 121.08192444]
[-53.91556931 106.13012695]
[-43.38586426 94.94885254]
[-28.67162514 90.54581451]
[-13.73091125 94.10540009]
[-2.58269954 104.67010498]
[11.77416039 100.32492828]
[26.13102150 95.97975159]
[40.48788071 91.63457489]
[54.84474182 87.28939819]
[69.20159912 82.94421387]
[54.38060379 85.25463867]
[40.09635162 80.67641449]
[29.37974930 70.18096161]
[24.50469589 55.99527359]
[26.50560379 41.12932587]
[34.95790863 28.73745346]
[48.06816483 21.44902420]
[63.05456924 20.81052971]
[76.73723602 26.95745277]
[86.21290588 38.58550644]
[89.47099304 53.22739410]
[85.82025909 67.77615356]
[91.45501709 53.87473297]
[97.08977509 39.97331238]
[102.72453308 26.07188988]
[108.21811676 12.11407948]
[113.56997681 -1.89868641]
[118.92183685 -15.91145229]
[116.61754608 -31.56395340]
[128.38658142 -40.69297791]
[133.73843384 -54.70574188]
[121.92901611 -45.45708847]
[108.38416290 -39.01218033]
[93.75839996 -35.68245697]
[78.75849152 -35.62882614]
[64.10929108 -38.85387802]
[50.51869583 -45.20176315]
[38.64344406 -54.36573792]
[29.05739021 -65.90296173]
[22.22376060 -79.25592041]
[18.47278404 -93.77935791]
[17.98571396 -108.77144623]
[20.78609276 -123.50772095]
[26.73859406 -137.27607727]
[35.55557632 -149.41119385]
[46.81096649 -159.32664490]
[59.96087646 -166.54327393]
[74.36985016 -170.71238708]
[89.34160614 -171.63247681]
[104.15265656 -169.25910950]
[118.08727264 -163.70697021]
[130.47210693 -155.24435425]
[140.70866394 -144.28018188]
[148.30229187 -131.34431458]
[152.88603210 -117.06182861]
[154.23840332 -102.12291718]
[152.29402161 -87.24947357]
[147.14787292 -73.16225433]
[158.82099915 -82.58235931]
[164.70132446 -97.27018738]
[179.46485901 -99.24177551]
[191.13796997 -108.66188049]
[202.81109619 -118.08198547]
[214.48420715 -127.50208282]
[226.15733337 -136.92219543]
[231.55207825 -152.40859985]
[247.70954895 -155.21359253]
[258.00833130 -142.45166016]
[251.85391235 -127.25115204]
[235.57743835 -125.24906921]
[223.90431213 -115.82896423]
[212.23120117 -106.40886688]
[200.55807495 -96.98876190]
[188.88496399 -87.56865692]
[183.83958435 -73.55461884]
[168.24110413 -70.90924072]
[156.56797791 -61.48913956]
[147.75120544 -49.35388184]
[142.39933777 -35.34111786]
[145.08644104 -20.69090271]
[132.93460083 -10.55959320]
[127.58274078 3.45317245]
[122.23088837 17.46593857]
[122.78561401 24.88024139]
[116.62595367 31.70664597]
[110.99119568 45.60806656]
[105.35643768 59.50949097]
[99.72168732 73.41091156]
[121.79177094 92.01535034]
[112.65032196 115.26630402]
[117.14076996 129.57839966]
[121.63121796 143.89048767]
[126.12166595 158.20257568]
[130.61210632 172.51466370]
[135.24736023 186.78050232]
[140.02694702 200.99864197]
[143.54685974 186.41749573]
[151.76333618 173.86801147]
[163.72013855 164.81069946]
[178.02575684 160.29966736]
[193.01528931 160.85989380]
[206.94427490 166.42617798]
[218.19165039 176.35072327]
[225.44845581 189.47850037]
[227.87014771 204.28172302]
[225.17488098 219.03759766]
[217.67634583 232.02882385]
[206.24720764 241.74348450]
[192.21759033 247.05101013]
[177.22024536 247.33370972]
[163.00057983 242.55867004]
[151.21345520 233.28161621]
[143.23036194 220.58148193]
[143.23036194 235.58148193]
[143.23036194 250.58148193]
[143.23036194 265.58148193]
[143.23036194 280.58148193]
[143.23036194 295.58148193]
[143.23036194 310.58148193]
[143.23036194 325.58148193]
[143.23036194 340.58148193]
[143.23036194 355.58148193]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 154]
[2 153]
[3 152]
[4 151]
[5 150]
[6 149]
[7 148]
[8 147]
[9 146]
[10 145]
[11 128]
[12 127]
[14 126]
[15 125]
[16 124]
[17 123]
[18 122]
[21 42]
[22 41]
[23 40]
[24 39]
[25 38]
[26 37]
[54 120]
[55 119]
[56 118]
[57 117]
[58 115]
[59 114]
[60 113]
[62 111]
[63 110]
[90 109]
[91 108]
[93 106]
[94 105]
[95 104]
[96 103]
[97 102]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
