%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:42 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGUACUAACCCCAGGGUUGGUCAAUUUCGUGCCAGCCACCGCGGUCACACGAUUAACCCAAGUxxxxxxxxxxAAACCCCCAUAAAUAGGAGAAGGCUUAGAAGAAAACCCCACAAACCCCAUUACUAAACCCACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[176.41717529 358.01409912]
[176.41717529 343.01409912]
[176.41717529 328.01409912]
[176.41717529 313.01409912]
[176.41717529 298.01409912]
[176.41717529 283.01409912]
[176.41717529 268.01409912]
[176.41717529 253.01409912]
[176.41717529 238.01409912]
[176.41717529 223.01409912]
[171.86987305 208.71997070]
[155.56893921 202.29159546]
[153.94779968 183.97760010]
[145.03164673 171.91517639]
[136.11549377 159.85273743]
[127.19934082 147.79031372]
[118.15982056 135.82005310]
[108.99788666 123.94322968]
[91.14752960 125.51840973]
[75.65589905 114.70842743]
[70.46036530 95.53871918]
[79.18050385 76.61916351]
[67.39836121 67.33577728]
[55.61622620 58.05239105]
[43.83408737 48.76900482]
[32.05195236 39.48561859]
[18.91032028 32.25391388]
[4.76300383 27.26859283]
[-9.38431263 22.28327179]
[-24.97153473 24.99418640]
[-34.40378952 13.46674824]
[-48.55110550 8.48142624]
[-55.20837402 9.33192730]
[-60.47736740 7.00263786]
[-63.16969681 2.99008441]
[-77.10041046 -2.57185292]
[-91.03112793 -8.13379002]
[-104.96184540 -13.69572735]
[-118.89256287 -19.25766563]
[-132.98794556 -24.38796616]
[-147.23464966 -29.08176804]
[-156.42790222 -28.79942131]
[-161.72392273 -34.02095795]
[-175.87123108 -39.00628281]
[-191.88294983 -35.46271515]
[-202.75656128 -47.73856735]
[-197.30622864 -63.20549774]
[-181.13877869 -65.95245361]
[-170.88591003 -53.15359879]
[-156.73860168 -48.16827774]
[-142.54084778 -43.32846069]
[-128.29414368 -38.63465881]
[-124.95340729 -39.93337250]
[-120.80809021 -39.64023209]
[-116.63122559 -37.39091110]
[-113.33062744 -33.18838120]
[-99.39990997 -27.62644386]
[-85.46919250 -22.06450653]
[-71.53847504 -16.50256920]
[-57.60776138 -10.94063187]
[-43.56578445 -5.66589022]
[-29.41846657 -0.68056828]
[-14.84315491 -3.74806738]
[-4.39899063 8.13595486]
[9.74832630 13.12127686]
[23.89564323 18.10659981]
[14.60353851 6.33133698]
[9.80924702 -7.88185310]
[10.07048035 -22.87957764]
[15.35684776 -36.91718292]
[25.05339813 -48.36169434]
[38.03215027 -55.88180161]
[52.78330994 -58.60270309]
[67.59090424 -56.20787811]
[80.73239136 -48.97591400]
[90.67904663 -37.74809265]
[96.27380371 -23.83052444]
[96.86582184 -8.84221077]
[92.38624573 5.47328281]
[83.35617065 17.45066452]
[70.82604218 25.69662857]
[56.25347137 29.25193596]
[41.33533859 27.70348167]
[53.11747360 36.98686600]
[64.89961243 46.27025223]
[76.68174744 55.55363846]
[88.46388245 64.83702087]
[103.36833191 63.14662552]
[112.77219391 51.46041870]
[109.56383514 36.15549850]
[116.98944092 22.39343643]
[131.54286194 16.67225266]
[146.35241699 21.69331551]
[154.42549133 35.08583450]
[151.95022583 50.52626801]
[140.09535217 60.72412109]
[124.45839691 60.86427307]
[115.05454254 72.55048370]
[122.43315125 79.83956146]
[126.78067017 88.83377075]
[127.82276154 98.38513947]
[125.68987274 107.36168671]
[120.87471008 114.78128815]
[130.03663635 126.65811157]
[137.80599976 131.58081055]
[139.26176453 138.87416077]
[148.17791748 150.93658447]
[157.09407043 162.99902344]
[166.01022339 175.06144714]
[178.66429138 177.75927734]
[185.83720398 188.04133606]
[184.11283875 200.05335999]
[183.26527405 185.07733154]
[185.30105591 170.21611023]
[190.14483643 156.01971436]
[197.61737061 143.01351929]
[207.44210815 131.67884827]
[219.25544739 122.43519592]
[232.62019348 115.62464905]
[247.04173279 111.49925232]
[261.98638916 110.21167755]
[276.90103149 111.80958557]
[291.23370361 116.23382568]
[304.45401001 123.32067871]
[316.07269287 132.80786133]
[325.65972900 144.34426880]
[332.86032104 157.50297546]
[337.40798950 171.79698181]
[339.13446045 186.69729614]
[337.97583008 201.65248108]
[333.97494507 216.10906982]
[327.27990723 229.53204346]
[318.13848877 241.42466736]
[306.88897705 251.34678650]
[293.94769287 258.93121338]
[279.79360962 263.89724731]
[264.95050049 266.06112671]
[249.96771240 265.34274292]
[235.39971924 261.76870728]
[221.78567505 255.47125244]
[209.62939453 246.68348694]
[199.38076782 235.73060608]
[191.41717529 223.01409912]
[191.41717529 238.01409912]
[191.41717529 253.01409912]
[191.41717529 268.01409912]
[191.41717529 283.01409912]
[191.41717529 298.01409912]
[191.41717529 313.01409912]
[191.41717529 328.01409912]
[191.41717529 343.01409912]
[191.41717529 358.01409912]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 152]
[2 151]
[3 150]
[4 149]
[5 148]
[6 147]
[7 146]
[8 145]
[9 144]
[10 143]
[11 112]
[13 109]
[14 108]
[15 107]
[16 106]
[17 104]
[18 103]
[22 87]
[23 86]
[24 85]
[25 84]
[26 83]
[27 66]
[28 65]
[29 64]
[31 62]
[32 61]
[35 60]
[36 59]
[37 58]
[38 57]
[39 56]
[40 52]
[41 51]
[43 50]
[44 49]
[88 98]
[89 97]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
