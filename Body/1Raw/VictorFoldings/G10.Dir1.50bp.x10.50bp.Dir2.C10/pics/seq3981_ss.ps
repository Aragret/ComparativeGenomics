%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:37 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGAUGAUUUAUCUCCACACUAGCAGAGACCAACCGAACCCCCUUCGACCUUGCCGAAGGGGAxxxxxxxxxxGCAAUCCUAUACAACCGUAUCGGCGAUAUCGGUUUCAUCCUCGCCUUAGCAUGAUUUAUCCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[140.67660522 302.60003662]
[140.05262756 287.61303711]
[139.42864990 272.62600708]
[138.80467224 257.63900757]
[138.18069458 242.65197754]
[137.55671692 227.66496277]
[136.93273926 212.67794800]
[136.30876160 197.69093323]
[132.60260010 183.15600586]
[125.97409821 169.70002747]
[119.34559631 156.24406433]
[112.71710205 142.78810120]
[106.08860016 129.33213806]
[99.46010590 115.87617493]
[99.34197235 130.87570190]
[87.04568481 139.46647644]
[72.92087555 134.41775513]
[68.85618591 119.97898102]
[78.27290344 108.30303955]
[64.61666107 114.50844574]
[50.96041870 120.71385193]
[37.30417633 126.91925812]
[35.89518356 142.21337891]
[27.01480103 154.74472046]
[13.05180454 161.14239502]
[-2.23783088 159.68547058]
[-14.74126911 150.76585388]
[-21.09514809 136.78286743]
[-19.59030533 121.49787903]
[-10.63153744 109.02246094]
[3.37129259 102.71244049]
[18.65149307 104.26519012]
[31.09876823 113.26301575]
[44.75500870 107.05760956]
[58.41125107 100.85220337]
[72.06748962 94.64679718]
[80.21408844 91.30086517]
[88.13160706 91.18009949]
[94.83073425 93.94716644]
[95.45471191 78.96015167]
[96.07868958 63.97313690]
[96.70266724 48.98612213]
[97.32664490 33.99910736]
[97.95061493 19.01208878]
[77.29338074 6.76583481]
[69.74221039 -18.14478874]
[81.83509064 -43.45101929]
[71.85236359 -54.64678192]
[61.86963654 -65.84255219]
[51.88690948 -77.03831482]
[41.90418625 -88.23407745]
[31.92145729 -99.42984772]
[21.93873215 -110.62561035]
[11.95600510 -121.82138062]
[-3.66803479 -121.17069244]
[-16.02337837 -130.75607300]
[-19.27620888 -146.05158997]
[-11.89064026 -159.83518982]
[2.64608788 -165.59864807]
[17.47017670 -160.62066650]
[25.58214569 -147.25166321]
[23.15177155 -131.80410767]
[33.13449860 -120.60833740]
[43.11722565 -109.41257477]
[53.09994888 -98.21680450]
[63.08267593 -87.02104187]
[73.06540680 -75.82527924]
[83.04812622 -64.62950897]
[93.03085327 -53.43374252]
[100.52720642 -53.19972229]
[97.13407135 -67.81090546]
[93.74094391 -82.42208862]
[90.34780884 -97.03327179]
[82.67493439 -109.92229462]
[82.64163971 -124.92225647]
[90.25722504 -137.84521484]
[103.39543915 -145.08312988]
[118.38813782 -144.61518860]
[131.04940796 -136.57203674]
[137.84426880 -123.19931030]
[136.87561035 -108.23061371]
[128.41360474 -95.84493256]
[124.11569977 -81.47384644]
[119.81780243 -67.10276794]
[115.51989746 -52.73168182]
[123.01625061 -52.49765778]
[133.67787170 -63.04895020]
[138.04412842 -78.25573730]
[152.53291321 -81.70886993]
[163.19454956 -92.26015472]
[173.85617065 -102.81144714]
[184.51780701 -113.36273956]
[188.32028198 -129.31495667]
[204.11166382 -133.73806763]
[215.64714050 -122.08197021]
[211.05999756 -106.33744049]
[195.06909180 -102.70111084]
[184.40747070 -92.14981842]
[173.74583435 -81.59853363]
[163.08421326 -71.04724121]
[159.48054504 -56.59514999]
[144.22917175 -52.38732529]
[133.56753540 -41.83603287]
[141.40490723 -29.44939232]
[144.08641052 -15.56583977]
[141.60984802 -2.17026401]
[134.68495178 8.95598125]
[124.58683777 16.47190094]
[112.93763733 19.63606644]
[112.31365967 34.62308121]
[111.68968201 49.61009979]
[111.06570435 64.59711456]
[110.44172668 79.58412933]
[109.81774902 94.57114410]
[112.91606903 109.24767303]
[119.54457092 122.70363617]
[126.17306519 136.15960693]
[132.80155945 149.61557007]
[139.43006897 163.07153320]
[146.05856323 176.52749634]
[147.39419556 161.58708191]
[152.81053162 147.59910583]
[161.88485718 135.65521240]
[173.90901184 126.68750763]
[187.94461060 121.39584351]
[202.89631653 120.19317627]
[217.59729004 123.17337036]
[230.90023804 130.10385132]
[241.76699829 140.44375610]
[249.34951782 153.38613892]
[253.05604553 167.92097473]
[252.59732056 182.91397095]
[248.00915527 197.19502258]
[239.64959717 209.64965820]
[228.17103577 219.30589294]
[214.46928406 225.41014099]
[199.61361694 227.48602295]
[184.76339722 225.37155151]
[171.07754517 219.23171997]
[159.62411499 209.54570007]
[151.29577637 197.06695557]
[151.91975403 212.05397034]
[152.54373169 227.04098511]
[153.16770935 242.02799988]
[153.79168701 257.01501465]
[154.41566467 272.00204468]
[155.03964233 286.98904419]
[155.66362000 301.97607422]
[162.36360168 317.54998779]
[149.25308228 328.29940796]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 148]
[2 147]
[3 146]
[4 145]
[5 144]
[6 143]
[7 142]
[8 141]
[9 120]
[10 119]
[11 118]
[12 117]
[13 116]
[14 115]
[19 36]
[20 35]
[21 34]
[22 33]
[39 114]
[40 113]
[41 112]
[42 111]
[43 110]
[44 109]
[47 69]
[48 68]
[49 67]
[50 66]
[51 65]
[52 64]
[53 63]
[54 62]
[86 103]
[87 102]
[89 100]
[90 99]
[91 98]
[92 97]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
