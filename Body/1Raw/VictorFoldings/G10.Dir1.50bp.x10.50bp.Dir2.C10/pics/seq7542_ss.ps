%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:36 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGUCCUAGUCCUGUAUGCCCUUUUCCUAACACUCACAACAAAACUAACUAAUACUAACAUCUxxxxxxxxxxCCCUUUUACCAUCAUUGGACAAGUAGCAUCCGUACUAUACUUCACAACAAUCCUAAUCCUCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[96.43841553 386.08236694]
[96.43841553 371.08236694]
[96.43841553 356.08236694]
[96.43841553 341.08236694]
[96.43841553 326.08236694]
[96.43841553 311.08236694]
[96.43841553 296.08236694]
[96.43841553 281.08236694]
[96.43841553 266.08236694]
[96.43841553 251.08235168]
[80.90637207 246.76971436]
[67.19066620 238.27438354]
[56.39202118 226.26899719]
[49.37964249 211.70825195]
[46.72120667 195.75297546]
[48.63694763 179.67759705]
[54.98141861 164.76834106]
[65.25450134 152.22033691]
[78.64082336 143.04179382]
[94.07449341 137.97299194]
[93.45051575 122.98596954]
[92.82653809 107.99895477]
[89.57570648 93.35545349]
[83.79943848 79.51223755]
[78.02316284 65.66901398]
[72.24689484 51.82579803]
[57.36149979 41.03668594]
[60.20730591 23.74792290]
[54.14429092 10.02786827]
[48.08127975 -3.69218493]
[35.42615891 -13.18736839]
[37.35886383 -27.95604897]
[31.29585075 -41.67610168]
[25.23283768 -55.39615631]
[10.97314262 -50.70276642]
[-3.67792368 -47.42968750]
[-18.57926178 -45.60844421]
[-33.58736038 -45.25657654]
[-48.55767441 -46.37747192]
[-63.34603500 -48.96033859]
[-77.81001282 -52.98029709]
[-91.81031799 -58.39863205]
[-105.21210480 -65.16316223]
[-117.88630676 -73.20874786]
[-129.71086121 -82.45788574]
[-140.57189941 -92.82151794]
[-150.36480713 -104.19982147]
[-158.99526978 -116.48321533]
[-166.38017273 -129.55340576]
[-172.44841003 -143.28451538]
[-177.14151001 -157.54431152]
[-180.41429138 -172.19543457]
[-182.23524475 -187.09681702]
[-182.58680725 -202.10491943]
[-181.46560669 -217.07521057]
[-178.88244629 -231.86352539]
[-174.86219788 -246.32742310]
[-169.44358826 -260.32760620]
[-162.67878723 -273.72927856]
[-154.63294983 -286.40332031]
[-145.38357544 -298.22769165]
[-135.01972961 -309.08850098]
[-123.64122772 -318.88119507]
[-111.35765839 -327.51141357]
[-98.28732300 -334.89605713]
[-84.55609131 -340.96398926]
[-70.29620361 -345.65682983]
[-55.64500809 -348.92932129]
[-40.74359894 -350.74996948]
[-25.73548698 -351.10122681]
[-10.76521492 -349.97973633]
[4.02304220 -347.39627075]
[18.48686218 -343.37573242]
[32.48694611 -337.95684814]
[45.88846207 -331.19177246]
[58.56234360 -323.14569092]
[70.38652802 -313.89608765]
[81.24714661 -303.53201294]
[91.03959656 -292.15332031]
[99.66957092 -279.86956787]
[107.05396271 -266.79907227]
[113.12163544 -253.06773376]
[117.81417084 -238.80775452]
[121.08637238 -224.15649414]
[122.90672302 -209.25505066]
[123.25769043 -194.24693298]
[122.13589478 -179.27667236]
[119.55213928 -164.48847961]
[115.53131866 -150.02473450]
[110.11213684 -136.02476501]
[103.34680176 -122.62337494]
[95.30046082 -109.94966125]
[86.05061340 -98.12565613]
[75.68633270 -87.26524353]
[64.30744171 -77.47302246]
[52.02352524 -68.84329224]
[38.95289230 -61.45916748]
[45.01590347 -47.73911667]
[51.07891846 -34.01906204]
[63.30036926 -25.50522804]
[61.80133438 -9.75519848]
[67.86434937 3.96485567]
[73.92736053 17.68490982]
[85.12438202 22.36828423]
[90.26963806 33.80267334]
[86.09011078 46.04952621]
[91.86637878 59.89274216]
[97.64265442 73.73596191]
[103.41893005 87.57917786]
[105.86875153 72.78058624]
[112.91027069 59.53607941]
[123.80807495 49.22890472]
[137.42401123 42.93553925]
[152.33601379 41.31325531]
[166.98672485 44.53149033]
[179.84599304 52.25412750]
[189.57081604 63.67461777]
[195.14555359 77.60021973]
[195.98797607 92.57654572]
[192.01008606 107.03948212]
[183.62734985 119.47851562]
[171.71525574 128.59454346]
[157.51788330 133.43547058]
[142.51799011 133.49572754]
[128.28219604 128.76901245]
[116.29723358 119.74899292]
[107.81355286 107.37497711]
[108.43753052 122.36199188]
[109.06150818 137.34901428]
[122.69149780 140.30905151]
[135.19766235 146.46186829]
[145.84507751 155.44056702]
[154.00932312 166.71232605]
[159.21313477 179.61004639]
[161.15426636 193.37182617]
[159.72308350 207.18594360]
[155.00868225 220.23876953]
[147.29341125 231.76269531]
[137.03593445 241.08122253]
[124.84400940 247.64871216]
[111.43841553 251.08235168]
[111.43841553 266.08236694]
[111.43841553 281.08236694]
[111.43841553 296.08236694]
[111.43841553 311.08236694]
[111.43841553 326.08236694]
[111.43841553 341.08236694]
[111.43841553 356.08236694]
[111.43841553 371.08236694]
[111.43841553 386.08236694]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[20 129]
[21 128]
[22 127]
[23 109]
[24 108]
[25 107]
[26 106]
[28 103]
[29 102]
[30 101]
[32 99]
[33 98]
[34 97]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
