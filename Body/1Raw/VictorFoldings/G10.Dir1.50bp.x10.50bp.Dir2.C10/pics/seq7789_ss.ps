%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:45 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCCAGGCGACCUGCGACUCCUUGACGUUGACAAUCGAGUAGUACUCCCGAUUGAAGCCCCCxxxxxxxxxxUUCUCUUCCUUCUCUCCUUAAUGACAUUAACACUAUUCUCACCAGACCUCCUAGGCGACCCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[196.90995789 177.56935120]
[192.20079041 165.13360596]
[188.41734314 152.38543701]
[185.58004761 139.39363098]
[183.70426941 126.22834778]
[182.80017090 112.96062469]
[167.80097961 112.80458832]
[152.80178833 112.64855194]
[137.80261230 112.49251556]
[122.80342102 112.33647919]
[107.80422974 112.18044281]
[94.14798737 118.38584900]
[84.40033722 129.78688049]
[74.65268707 141.18789673]
[64.90503693 152.58891296]
[59.20770645 168.55691528]
[42.28657150 167.50260925]
[38.61542511 150.95091248]
[53.50401306 142.84126282]
[63.25166321 131.44024658]
[72.99931335 120.03922272]
[82.74697113 108.63819885]
[74.10784912 96.37583160]
[60.09114075 101.71734619]
[49.95086288 113.86170197]
[35.30263519 111.16378784]
[27.45604897 125.15702820]
[11.60080814 127.60465240]
[-0.10030395 116.62906647]
[1.32880425 100.64979553]
[14.79184341 91.92476654]
[29.96112251 97.14707947]
[39.09883118 85.38478088]
[54.74962616 87.70063019]
[68.76634216 82.35911560]
[69.46749115 74.89196777]
[54.53320694 73.48941040]
[55.93600845 58.55515289]
[70.86979675 59.95765686]
[71.57094574 52.49050522]
[58.79359055 44.63307953]
[46.01623154 36.77565384]
[33.23887634 28.91822624]
[20.46151733 21.06080055]
[7.68416023 13.20337582]
[-5.25389576 5.61346722]
[-18.34704971 -1.70563853]
[-31.44020462 -9.02474403]
[-48.21607208 -11.47558594]
[-50.50503159 -28.27430534]
[-34.99645996 -35.12416077]
[-24.12109947 -22.11789894]
[-11.02794456 -14.79879284]
[2.06521010 -7.47968721]
[6.88030052 -7.91605711]
[12.01058292 -5.28708363]
[15.54158592 0.42601803]
[28.31894302 8.28344345]
[41.09630203 16.14086914]
[53.87365723 23.99829483]
[66.65101624 31.85572052]
[79.42837524 39.71314621]
[108.59321594 55.54129028]
[117.52455139 79.64035034]
[107.96026611 97.18125916]
[122.95945740 97.33729553]
[137.95864868 97.49333191]
[152.95783997 97.64936829]
[167.95701599 97.80540466]
[182.95620728 97.96144104]
[184.66978455 80.83675385]
[188.00195312 63.95273972]
[192.92250061 47.46203995]
[199.38684082 31.51371384]
[207.33644104 16.25191116]
[216.69932556 1.81456745]
[227.39076233 -11.66784286]
[239.31402588 -24.07348633]
[252.36123657 -35.29027557]
[266.41436768 -45.21687317]
[281.34631348 -53.76361465]
[297.02200317 -60.85331726]
[313.29968262 -66.42197418]
[330.03219604 -70.41933441]
[347.06817627 -72.80934906]
[364.25360107 -73.57051849]
[381.43313599 -72.69606018]
[398.45141602 -70.19397736]
[415.15463257 -66.08698273]
[431.39175415 -60.41231918]
[447.01605225 -53.22137833]
[461.88629150 -44.57926941]
[475.86807251 -34.56420517]
[488.83505249 -23.26681709]
[500.67004395 -10.78932285]
[511.26617432 2.75540257]
[520.52764893 17.24483871]
[528.37091064 32.54793167]
[542.27343750 26.91597366]
[556.17602539 21.28401756]
[570.07855225 15.65206051]
[583.98114014 10.02010345]
[596.39123535 -1.53088880]
[610.92626953 7.19659996]
[606.56353760 23.57961082]
[589.61309814 23.92265892]
[575.71051025 29.55461693]
[561.80798340 35.18657303]
[547.90539551 40.81853104]
[534.00286865 46.45048523]
[538.01727295 59.11687088]
[541.09088135 72.04405212]
[543.20709229 85.16225433]
[544.35443115 98.40066528]
[544.52667236 111.68783569]
[543.72290039 124.95202637]
[541.94738770 138.12164307]
[539.20959473 151.12559509]
[535.52441406 163.89366150]
[530.91162109 176.35691833]
[525.39605713 188.44807434]
[519.00756836 200.10185242]
[511.78048706 211.25531006]
[503.75384521 221.84822083]
[494.97097778 231.82341003]
[485.47921753 241.12696838]
[475.32983398 249.70866394]
[464.57754517 257.52215576]
[453.28036499 264.52523804]
[441.49929810 270.68005371]
[429.29791260 275.95333862]
[416.74203491 280.31665039]
[403.89944458 283.74633789]
[390.83947754 286.22390747]
[377.63259888 287.73590088]
[364.35012817 288.27413940]
[351.06372070 287.83569336]
[337.84512329 286.42288208]
[324.76571655 284.04330444]
[311.89608765 280.70977783]
[299.30569458 276.44024658]
[287.06256104 271.25772095]
[275.23278809 265.19015503]
[263.88021851 258.27026367]
[253.06614685 250.53536987]
[242.84901428 242.02722168]
[233.28396606 232.79168701]
[224.42266846 222.87860107]
[216.31297302 212.34147644]
[208.99870300 201.23715210]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[6 70]
[7 69]
[8 68]
[9 67]
[10 66]
[11 65]
[12 22]
[13 21]
[14 20]
[15 19]
[23 35]
[24 34]
[26 32]
[40 62]
[41 61]
[42 60]
[43 59]
[44 58]
[45 57]
[46 54]
[47 53]
[48 52]
[98 110]
[99 109]
[100 108]
[101 107]
[102 106]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
