%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:31 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGUUACAAUCUCCAGCAUUCCCCCUCAAACCUAAGAAAUAUGUCUGAUAAAAGAGUUACUUUxxxxxxxxxxUAAUCAUAUUUACCAAAUGCCCCUCAUUUACAUAAAUAUUAUACUAGCAUUUACCAUCUCCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[92.50000000 416.57748413]
[92.50000000 401.57748413]
[92.50000000 386.57748413]
[92.50000000 371.57748413]
[92.50000000 356.57748413]
[92.50000000 341.57748413]
[92.50000000 326.57748413]
[92.50000000 311.57748413]
[92.50000000 296.57748413]
[92.50000000 281.57748413]
[77.89575195 278.27328491]
[64.38652039 271.79879761]
[52.65122604 262.47583008]
[43.28042221 250.76943970]
[36.74658203 237.26472473]
[33.38029099 222.63758850]
[33.35351944 207.62089539]
[36.67081451 192.96774292]
[43.16894913 179.41375732]
[52.52492142 167.64009094]
[64.27202606 158.23922729]
[77.82312775 151.68513489]
[92.50000000 148.30943298]
[92.50000000 133.30943298]
[77.01322174 125.24630737]
[67.53760529 110.58114624]
[52.60329437 111.98345184]
[37.66898727 113.38575745]
[33.22368240 127.92218018]
[23.55005264 139.64776611]
[10.12325096 146.77444458]
[-5.00922918 148.21543884]
[-19.53979683 143.75100708]
[-31.25264359 134.06196594]
[-38.36164856 120.62580109]
[-39.78273392 105.49143982]
[-35.29920197 90.96675873]
[-25.59475708 79.26666260]
[-12.14925194 72.17533875]
[2.98696733 70.77416229]
[17.50573921 75.27679443]
[29.19305420 84.99662781]
[36.26668549 98.45144653]
[51.20099258 97.04914856]
[66.13529968 95.64684296]
[63.33682251 83.95800781]
[64.81082916 70.53691864]
[52.37138748 62.15477753]
[39.93194962 53.77263641]
[23.97343063 55.41740036]
[12.84082985 43.86557007]
[15.07412529 27.97872353]
[28.96012306 19.94388580]
[43.84667587 25.92469978]
[48.31409073 41.33319473]
[60.75353241 49.71533966]
[73.19297028 58.09748077]
[84.38874054 48.11475372]
[77.48174286 34.79959869]
[70.57474518 21.48444366]
[63.66774368 8.16928864]
[48.87010193 1.97175634]
[44.62813950 -13.50032520]
[54.19592285 -26.37809944]
[70.23387146 -26.78283882]
[80.43904114 -14.40406418]
[76.98289490 1.26228976]
[83.88990021 14.57744503]
[90.79689789 27.89260101]
[97.70389557 41.20775604]
[98.02606201 26.21121597]
[98.34822083 11.21467686]
[95.19573975 -3.45031071]
[99.83595276 -17.71454620]
[111.01319122 -27.71801949]
[125.70279694 -30.75371361]
[139.92965698 -26.00014687]
[149.84387207 -14.74367237]
[152.76258850 -0.03037563]
[147.89598083 14.15821266]
[136.56005859 23.98299408]
[127.80206299 36.16073608]
[119.04405975 48.33847809]
[132.56825256 41.85031509]
[141.66394043 28.90507889]
[156.48573303 30.37601852]
[170.00991821 23.88785362]
[183.53411865 17.39968872]
[197.05830383 10.91152287]
[210.58248901 4.42335749]
[224.10668945 -2.06480742]
[237.63087463 -8.55297279]
[243.10299683 -25.13589096]
[258.55734253 -32.51475906]
[274.26284790 -26.58220863]
[287.64910889 -33.35032272]
[301.03540039 -40.11843872]
[314.42169189 -46.88655090]
[327.80798340 -53.65466690]
[334.15908813 -68.38703918]
[349.67446899 -72.46782684]
[362.45202637 -62.76659775]
[362.68991089 -46.72530746]
[350.20565796 -36.64945984]
[334.57608032 -40.26838303]
[321.18978882 -33.50026703]
[307.80352783 -26.73215294]
[294.41723633 -19.96403694]
[281.03094482 -13.19592285]
[278.74795532 -0.47646224]
[269.40231323 8.72862053]
[256.26489258 10.88184643]
[244.11903381 4.97121716]
[230.59484863 11.45938206]
[217.07066345 17.94754791]
[203.54646301 24.43571281]
[190.02227783 30.92387772]
[176.49809265 37.41204453]
[162.97389221 43.90020752]
[154.84555054 56.38136673]
[139.05641174 55.37450409]
[125.53222656 61.86266708]
[137.90061951 78.55983734]
[141.14533997 97.99144745]
[135.51133728 115.74172974]
[123.15924072 128.20350647]
[107.50000000 133.30943298]
[107.50000000 148.30943298]
[122.17687225 151.68513489]
[135.72796631 158.23922729]
[147.47508240 167.64009094]
[156.83105469 179.41375732]
[163.32917786 192.96774292]
[166.64648438 207.62089539]
[166.61970520 222.63758850]
[163.25341797 237.26472473]
[156.71957397 250.76943970]
[147.34877014 262.47583008]
[135.61347961 271.79879761]
[122.10424805 278.27328491]
[107.50000000 281.57748413]
[107.50000000 296.57748413]
[107.50000000 311.57748413]
[107.50000000 326.57748413]
[107.50000000 341.57748413]
[107.50000000 356.57748413]
[107.50000000 371.57748413]
[107.50000000 386.57748413]
[107.50000000 401.57748413]
[107.50000000 416.57748413]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[23 128]
[24 127]
[26 45]
[27 44]
[28 43]
[47 57]
[48 56]
[49 55]
[58 70]
[59 69]
[60 68]
[61 67]
[83 122]
[84 121]
[86 119]
[87 118]
[88 117]
[89 116]
[90 115]
[91 114]
[92 113]
[95 109]
[96 108]
[97 107]
[98 106]
[99 105]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
