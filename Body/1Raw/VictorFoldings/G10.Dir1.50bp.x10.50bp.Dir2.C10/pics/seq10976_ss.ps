%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:29 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGAUUCCUGCACAUCUGUACCCACGCCUUCUUCAAAGCCAUACUAUUUAUGUGCUCCGGGUCxxxxxxxxxxCACUUCAUCUUGCCCUUCAUUAUUGCAGCCCUAGCAACACUCCACCUCCUAUUCUUGCACCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[105.87609863 282.49951172]
[105.87609863 267.49951172]
[105.87609863 252.49952698]
[105.87609863 237.49952698]
[105.87609863 222.49952698]
[105.87609863 207.49952698]
[105.87609863 192.49952698]
[105.87609863 177.49952698]
[105.87609863 162.49952698]
[105.87609863 147.49952698]
[95.22797394 146.48298645]
[85.32559204 143.16690063]
[76.64553070 137.83042908]
[69.57825470 130.84666443]
[64.41082001 122.65854645]
[61.31593323 113.75193024]
[60.34767914 104.62739563]
[45.38743210 103.53608704]
[30.42718315 102.44477844]
[15.46693420 101.35346222]
[0.50668561 100.26215363]
[-14.45356274 99.17084503]
[-18.81274223 113.07875824]
[-26.16576004 125.65437317]
[-36.13784027 136.26339722]
[-48.22219849 144.37158203]
[-61.80580521 149.57167053]
[-76.20048523 151.60380554]
[-90.67775726 150.36856079]
[-104.50575256 145.93173218]
[-116.98614502 138.52095032]
[-127.48947906 128.51388550]
[-135.48687744 116.41905975]
[-140.57667542 102.85002899]
[-142.50463867 88.49420929]
[-157.43893433 87.09191132]
[-172.37324524 85.68960571]
[-185.59574890 94.77503204]
[-200.90052795 89.96428680]
[-206.54707336 74.94775391]
[-198.20382690 61.24484253]
[-182.27102661 59.36724472]
[-170.97094727 70.75529480]
[-156.03663635 72.15760040]
[-141.10232544 73.55990601]
[-136.11495972 58.92157364]
[-127.77748108 45.88660812]
[-116.56699371 35.20866013]
[-103.12688446 27.50627708]
[-88.22985077 23.22706985]
[-72.73349762 22.62170982]
[-57.53097534 25.72924042]
[-43.49946976 32.37459183]
[-31.44961929 42.17844391]
[-22.07867050 54.57886124]
[-15.93013000 68.86351776]
[-13.36225224 84.21059418]
[1.59799612 85.30190277]
[16.55824471 86.39321899]
[31.51849365 87.48452759]
[46.47874069 88.57583618]
[61.43899155 89.66714478]
[68.88410950 74.98959351]
[81.61752319 64.56267548]
[97.47512817 60.15851212]
[113.76185608 62.52560043]
[121.48593903 49.66719818]
[129.21002197 36.80879593]
[136.93411255 23.95039368]
[123.66124725 30.93832588]
[109.01151276 34.16093063]
[94.03144073 33.38798523]
[79.79117584 28.67471504]
[67.30801392 20.35782242]
[57.47372818 9.03144741]
[50.99085236 -4.49527836]
[48.32250977 -19.25603485]
[49.65932083 -34.19634628]
[54.90578842 -48.24891281]
[63.68711472 -60.40984344]
[75.37598419 -69.81039429]
[89.13736725 -75.77900696]
[103.98818207 -77.88930511]
[118.86751556 -75.99051666]
[132.71243286 -70.21830750]
[144.53385925 -60.98501205]
[153.48731995 -48.95024872]
[158.93319702 -34.97375488]
[160.48245239 -20.05397415]
[158.02438354 -5.25674629]
[151.73757935 8.35621262]
[164.17701721 -0.02593075]
[176.61645508 -8.40807438]
[174.87852478 -23.61459160]
[180.41729736 -37.88275909]
[191.95999146 -47.93385696]
[206.85420227 -51.45821381]
[221.67733765 -47.64596176]
[233.02314758 -37.37312698]
[238.28445435 -23.00032997]
[236.25224304 -7.83033609]
[227.39349365 4.65090084]
[213.74389648 11.57528496]
[198.44003296 11.35164261]
[184.99859619 4.03136635]
[172.55915833 12.41350937]
[160.11972046 20.79565239]
[149.79251099 31.67447853]
[142.06842041 44.53287888]
[134.34434509 57.39128113]
[126.62025452 70.24968719]
[142.17156982 87.83353424]
[146.00924683 113.18646240]
[160.82699585 115.51756287]
[174.59045410 107.27458191]
[189.56536865 113.03060150]
[194.26425171 128.37010193]
[185.08253479 141.52590942]
[169.06364441 142.40605164]
[158.49589539 130.33532715]
[143.67814636 128.00421143]
[137.97763062 132.87805176]
[149.86384583 142.02778625]
[161.75006104 151.17753601]
[173.63627625 160.32728577]
[185.52249146 169.47703552]
[200.11718750 172.94041443]
[211.37301636 182.85536194]
[216.65007019 196.89646912]
[214.71070862 211.77056885]
[206.00975037 223.98913574]
[192.58792114 230.68647766]
[177.59310913 230.29180908]
[164.54216003 222.89768982]
[156.49601746 210.23832703]
[155.34213257 195.28065491]
[148.15075684 182.11691284]
[140.95938110 168.95317078]
[133.76799011 155.78942871]
[126.57660675 142.62570190]
[120.87609863 147.49952698]
[120.87609863 162.49952698]
[120.87609863 177.49952698]
[120.87609863 192.49952698]
[120.87609863 207.49952698]
[120.87609863 222.49952698]
[120.87609863 237.49952698]
[120.87609863 252.49952698]
[120.87609863 267.49951172]
[120.87609863 282.49951172]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[17 62]
[18 61]
[19 60]
[20 59]
[21 58]
[22 57]
[35 45]
[36 44]
[37 43]
[66 111]
[67 110]
[68 109]
[69 108]
[91 107]
[92 106]
[93 105]
[113 121]
[114 120]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
