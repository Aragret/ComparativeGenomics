%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:22 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGUACUAUCCCUAUGAGGCAUAAUUAUAACAAGCUCCAUCUGCCUACGACAAACAGACCUAAxxxxxxxxxxCACAAUUCUCCGAUCCGUCCCUAACAAACUAGGAGGCGUCCUUGCCCUAUUACUAUCCAUCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[65.11348724 559.61224365]
[65.11348724 544.61224365]
[65.11348724 529.61224365]
[65.11348724 514.61224365]
[65.11348724 499.61224365]
[65.11348724 484.61224365]
[65.11348724 469.61224365]
[65.11348724 454.61224365]
[65.11348724 439.61224365]
[65.11348724 424.61224365]
[50.41792679 421.71145630]
[36.56627655 415.99746704]
[24.09161758 407.68814087]
[13.47444057 397.10131836]
[5.12412262 384.64248657]
[-0.63684589 370.78952026]
[-3.58532071 356.07406616]
[-3.60614491 341.06137085]
[-0.69664443 326.32839966]
[5.03319502 312.44174194]
[13.36488628 299.93585205]
[23.97977066 289.29238892]
[36.47120285 280.92178345]
[50.36013794 275.14727783]
[65.11348724 272.19253540]
[65.11348724 257.19253540]
[65.11348724 242.19253540]
[65.11348724 227.19253540]
[52.73272705 215.85345459]
[52.34465408 198.73231506]
[64.67449951 186.36654663]
[56.98111343 199.24334717]
[45.58275223 208.99411011]
[31.66985893 214.60047913]
[16.69548607 215.47692871]
[2.22354984 211.53193665]
[-10.23451138 203.17749023]
[-19.37758446 191.28613281]
[-24.25077248 177.09980774]
[-24.34512329 162.10009766]
[-19.65078163 147.85359192]
[-10.65802193 135.84815979]
[1.69395661 127.33766174]
[16.11512184 123.21091461]
[31.09933472 123.89892578]
[45.08165359 129.32983398]
[56.60177231 138.93643188]
[64.45654297 151.71542358]
[67.82579803 166.33518982]
[72.72734833 152.15863037]
[77.62889862 137.98207092]
[82.53045654 123.80551147]
[87.43200684 109.62895203]
[69.54798889 71.19555664]
[69.86004639 56.19880295]
[70.17209625 41.20204926]
[55.36882401 38.60137177]
[41.13606644 33.77135849]
[27.80746269 26.82522774]
[15.69545078 17.92581177]
[5.08395576 7.28172350]
[-3.77827382 -4.85752344]
[-10.68349457 -18.20736885]
[-15.46983910 -32.45487213]
[-18.02510643 -47.26605225]
[-18.28940010 -62.29371262]
[-16.25652313 -77.18558502]
[-11.97412968 -91.59258270]
[-5.54260445 -105.17697906]
[2.88728786 -117.62034607]
[13.11793804 -128.63098145]
[24.90952682 -137.95080566]
[37.98564148 -145.36131287]
[52.03975677 -150.68881226]
[66.74242401 -153.80841064]
[81.74900055 -154.64698792]
[96.70769501 -153.18489075]
[111.26786804 -149.45637512]
[125.08820343 -143.54885864]
[137.84474182 -135.60081482]
[149.23841858 -125.79856110]
[159.00219727 -114.37186432]
[166.90716553 -101.58860016]
[172.76803589 -87.74842072]
[176.44740295 -73.17575073]
[177.85905457 -58.21220398]
[176.96984863 -43.20854568]
[173.80067444 -28.51648331]
[168.42579651 -14.48041725]
[160.97122192 -1.42937458]
[151.61169434 10.33070946]
[140.56660461 20.52416229]
[128.09487915 28.91203308]
[114.48885345 35.29769897]
[100.06749725 39.53147507]
[85.16885376 41.51410675]
[84.85679626 56.51086044]
[84.54473877 71.50761414]
[90.49092865 76.07848358]
[108.32949829 89.79108429]
[122.74171448 85.63319397]
[137.15393066 81.47531128]
[151.56614685 77.31742096]
[158.98547363 63.36288452]
[174.12330627 58.82175446]
[187.99861145 66.38819885]
[192.37944031 81.57318878]
[184.66671753 95.36773682]
[169.43626404 99.58777618]
[155.72402954 91.72963715]
[141.31181335 95.88752747]
[126.89960480 100.04541016]
[112.48738861 104.20330048]
[101.60855865 114.53050232]
[96.70700836 128.70706177]
[91.80545807 142.88362122]
[86.90390778 157.06018066]
[82.00235748 171.23674011]
[79.67125702 186.05448914]
[90.42632294 194.22677612]
[94.43244171 206.92240906]
[90.43447113 219.41603088]
[80.11348724 227.19253540]
[80.11348724 242.19253540]
[80.11348724 257.19253540]
[80.11348724 272.19253540]
[94.86684418 275.14727783]
[108.75577545 280.92178345]
[121.24721527 289.29238892]
[131.86209106 299.93585205]
[140.19378662 312.44174194]
[145.92362976 326.32839966]
[148.83312988 341.06137085]
[148.81230164 356.07406616]
[145.86383057 370.78952026]
[140.10285950 384.64248657]
[131.75254822 397.10131836]
[121.13536072 407.68814087]
[108.66070557 415.99746704]
[94.80905151 421.71145630]
[80.11348724 424.61224365]
[80.11348724 439.61224365]
[80.11348724 454.61224365]
[80.11348724 469.61224365]
[80.11348724 484.61224365]
[80.11348724 499.61224365]
[80.11348724 514.61224365]
[80.11348724 529.61224365]
[80.11348724 544.61224365]
[80.11348724 559.61224365]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[25 126]
[26 125]
[27 124]
[28 123]
[31 119]
[49 118]
[50 117]
[51 116]
[52 115]
[53 114]
[54 98]
[55 97]
[56 96]
[100 113]
[101 112]
[102 111]
[103 110]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
