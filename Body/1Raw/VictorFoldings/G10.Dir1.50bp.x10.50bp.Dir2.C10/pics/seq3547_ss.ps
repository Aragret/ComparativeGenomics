%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:55 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCAUCGCUCUUCUACUAUGAACCCCCCUCCCCAUACCCAACCCCCUGGUCAACCUCAACCUxxxxxxxxxxAUAAAAUGACAGUUUGAACAUACAAAACCCACCCCAUUCCUCCCCACACUCAUCGCCCUUCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[-37.40044785 224.80337524]
[-48.90225220 234.43190002]
[-60.40405655 244.06042480]
[-71.90586090 253.68894958]
[-83.30687714 263.43661499]
[-94.60588837 273.30233765]
[-105.90489197 283.16806030]
[-117.20389557 293.03378296]
[-128.50289917 302.89950562]
[-139.80191040 312.76522827]
[-150.89321899 322.86386108]
[-161.77204895 333.19107056]
[-172.65086365 343.51828003]
[-167.93708801 358.03527832]
[-169.99729919 373.15869141]
[-178.42247009 385.88580322]
[-191.53976440 393.68960571]
[-206.74472046 395.02066040]
[-221.01841736 389.61468506]
[-231.52676392 378.54504395]
[-236.18334961 364.00961304]
[-234.06359863 348.89440918]
[-225.58837891 336.20056152]
[-212.44046021 328.44848633]
[-197.23036194 327.17730713]
[-182.97807312 332.63946533]
[-172.09924316 322.31225586]
[-161.22042847 311.98504639]
[-160.20642090 307.25775146]
[-156.17185974 303.14025879]
[-149.66763306 301.46621704]
[-138.36862183 291.60049438]
[-127.06961823 281.73477173]
[-115.77061462 271.86904907]
[-104.47161102 262.00332642]
[-93.17260742 252.13760376]
[-90.18338013 245.32508850]
[-81.53438568 242.18714905]
[-70.03258514 232.55862427]
[-58.53078079 222.93009949]
[-47.02897644 213.30157471]
[-63.10807037 188.60317993]
[-75.07547760 161.67124939]
[-82.62951660 133.18467712]
[-85.57977295 103.86158752]
[-83.85186768 74.44115448]
[-77.48936462 45.66501236]
[-66.65264130 18.25856781]
[-51.61488342 -7.08731031]
[-63.50726318 -16.22904396]
[-75.39964294 -25.37077904]
[-91.71887207 -26.98782349]
[-98.23063660 -42.03870010]
[-88.23619080 -55.04035950]
[-72.01696777 -52.61780930]
[-66.25791168 -37.26315689]
[-54.36552811 -28.12142372]
[-42.47314835 -18.97969055]
[-36.04861450 -26.27564621]
[-29.25091553 -33.22524261]
[-22.09869576 -39.80941772]
[-14.61157131 -46.01011276]
[-6.81008101 -51.81031418]
[1.28437805 -57.19411850]
[9.64960289 -62.14675522]
[18.26264954 -66.65464020]
[27.09989166 -70.70541382]
[36.13709259 -74.28796387]
[45.34946060 -77.39245605]
[54.71172714 -80.01038361]
[64.19821930 -82.13455963]
[73.78290558 -83.75916290]
[83.43950653 -84.87973022]
[93.14153290 -85.49319458]
[102.86237335 -85.59787750]
[112.57535553 -85.19348145]
[122.25384521 -84.28112030]
[131.87129211 -82.86329651]
[141.40133667 -80.94390106]
[150.81781006 -78.52819061]
[160.09489441 -75.62280273]
[169.20713806 -72.23570251]
[178.12956238 -68.37617493]
[186.83769226 -64.05480957]
[195.30763245 -59.28345871]
[203.51614380 -54.07521439]
[211.44073486 -48.44435883]
[219.05964661 -42.40633392]
[226.35200500 -35.97770691]
[233.29777527 -29.17610550]
[239.87794495 -22.02018929]
[246.07443237 -14.52958679]
[251.87025452 -6.72484112]
[264.48138428 -14.84638309]
[277.09249878 -22.96792603]
[289.70364380 -31.08946800]
[292.80310059 -46.58684921]
[305.99920654 -55.28386688]
[321.46295166 -52.02073288]
[330.01995850 -38.73340225]
[326.59353638 -23.30502129]
[313.21646118 -14.88896751]
[297.82516479 -18.47834015]
[285.21405029 -10.35679722]
[272.60293579 -2.23525500]
[259.99179077 5.88628721]
[265.66873169 16.28238297]
[270.67102051 27.01939201]
[274.97830200 38.05359268]
[278.57305908 49.34004974]
[281.44061279 60.83280563]
[283.56930542 72.48505402]
[284.95050049 84.24935150]
[285.57849121 96.07778931]
[285.45080566 107.92220306]
[284.56793213 119.73435211]
[282.93344116 131.46614075]
[280.55404663 143.06977844]
[277.43936157 154.49804688]
[273.60214233 165.70437622]
[269.05795288 176.64315796]
[263.82534790 187.26982117]
[257.92559814 197.54112244]
[251.38275146 207.41520691]
[244.22344971 216.85186768]
[236.47685242 225.81269836]
[228.17448425 234.26118469]
[219.35015869 242.16294861]
[210.03982544 249.48577881]
[200.28138733 256.19989014]
[190.11459351 262.27792358]
[179.58082581 267.69512939]
[168.72299194 272.42944336]
[157.58531189 276.46160889]
[146.21311951 279.77517700]
[134.65275574 282.35665894]
[122.95126343 284.19555664]
[111.15631104 285.28439331]
[99.31593323 285.61868286]
[87.47834015 285.19711304]
[75.69174194 284.02139282]
[64.00412750 282.09631348]
[52.46309280 279.42968750]
[41.11563873 276.03237915]
[30.00797462 271.91824341]
[19.18533134 267.10403442]
[8.69177914 261.60931396]
[-1.42994785 255.45652771]
[-11.13863277 248.67066956]
[-20.39474106 241.27940369]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 41]
[2 40]
[3 39]
[4 38]
[5 36]
[6 35]
[7 34]
[8 33]
[9 32]
[10 31]
[11 28]
[12 27]
[13 26]
[49 58]
[50 57]
[51 56]
[93 106]
[94 105]
[95 104]
[96 103]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
