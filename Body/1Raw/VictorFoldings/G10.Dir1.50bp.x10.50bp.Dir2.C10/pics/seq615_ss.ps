%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:06 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGAUACUACUAAUCUCAUCAAUACAACCCCCGCCCAUCCUACCCAGCACACACACACCGCUGCUAxxxxxxxxxxUCCCCACACUCAUCGCCCUUACCACGCUACUCCUACCUAUCUCCCCUUUUAUACUAAUAAUCUCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[-38.77146530 224.34210205]
[-50.33681107 233.89421082]
[-61.90216064 243.44631958]
[-67.61524200 258.20001221]
[-82.35543823 260.33917236]
[-93.92078400 269.89129639]
[-105.48612976 279.44338989]
[-117.05147552 288.99551392]
[-128.61682129 298.54760742]
[-121.95177460 312.06329346]
[-118.58390045 326.75186157]
[-118.69482422 341.82119751]
[-122.27857208 356.45858765]
[-129.14187622 369.87469482]
[-138.91459656 381.34597778]
[-151.06971741 390.25381470]
[-164.95172119 396.11782837]
[-179.81198120 398.62179565]
[-194.84907532 397.63061523]
[-209.25209045 393.19781494]
[-222.24429321 385.56240845]
[-233.12501526 375.13616943]
[-241.30747986 362.48135376]
[-246.35043335 348.28045654]
[-247.98188782 333.29931641]
[-246.11389160 318.34579468]
[-240.84715271 304.22637939]
[-232.46571350 291.70248413]
[-221.42158508 281.44949341]
[-208.31033325 274.02035522]
[-193.83906555 269.81570435]
[-178.78817749 269.06228638]
[-163.96936035 271.80078125]
[-150.18176270 277.88342285]
[-138.16893005 286.98226929]
[-126.60358429 277.43014526]
[-115.03823853 267.87805176]
[-103.47288513 258.32592773]
[-91.90753937 248.77383423]
[-87.02168274 234.70338440]
[-71.45426178 231.88096619]
[-59.88891602 222.32885742]
[-48.32357025 212.77676392]
[-64.78722382 186.96925354]
[-76.80313110 158.81437683]
[-84.04698944 129.07205200]
[-86.32327271 98.54504395]
[-83.57054138 68.05731201]
[-75.86309052 38.43173981]
[-63.40896225 10.46794224]
[-46.54429626 -15.07931328]
[-25.72427940 -37.52048874]
[-35.39161682 -48.98968887]
[-45.05895615 -60.45888901]
[-54.72629166 -71.92809296]
[-69.65888214 -68.57004547]
[-84.43857574 -72.54737091]
[-95.66912079 -82.94609070]
[-100.76982117 -97.37666321]
[-98.56855774 -112.52305603]
[-89.57118225 -124.90472412]
[-75.84521484 -131.67646790]
[-60.54478455 -131.28216553]
[-47.18582153 -123.81244659]
[-38.83811569 -110.98379517]
[-37.41990662 -95.74413300]
[-43.25709152 -81.59542847]
[-33.58975220 -70.12622833]
[-23.92241478 -58.65702820]
[-14.25507736 -47.18782425]
[-6.33582258 -53.00709534]
[1.87923288 -58.40073776]
[10.36723709 -63.35374832]
[19.10457802 -67.85234070]
[28.06695175 -71.88401794]
[37.22942352 -75.43754578]
[46.56650925 -78.50305939]
[56.05223465 -81.07200623]
[65.66020966 -83.13726807]
[75.36371613 -84.69307709]
[85.13574982 -85.73511505]
[94.94913483 -86.26048279]
[104.77656555 -86.26771545]
[114.59071350 -85.75680542]
[124.36427307 -84.72915649]
[134.07005310 -83.18763733]
[143.68106079 -81.13653564]
[153.17056274 -78.58155060]
[162.51214600 -75.52979279]
[171.67985535 -71.98976135]
[180.64814758 -67.97129059]
[189.39210510 -63.48556519]
[197.88739014 -58.54506302]
[206.11038208 -53.16352463]
[214.03820801 -47.35592270]
[221.64878845 -41.13840866]
[228.92097473 -34.52828598]
[235.83454895 -27.54393578]
[242.37025452 -20.20478821]
[248.50991821 -12.53126049]
[254.23646545 -4.54469728]
[259.53396606 3.73268414]
[264.38766479 12.27785778]
[268.78408813 21.06705475]
[272.71099854 30.07582283]
[276.15747070 39.27910233]
[279.11389160 48.65129471]
[281.57208252 58.16632843]
[283.52517700 67.79772949]
[284.96774292 77.51871490]
[285.89578247 87.30223083]
[286.30670166 97.12107086]
[286.19937134 106.94792175]
[285.57406616 116.75544739]
[284.43252563 126.51635742]
[282.77795410 136.20350647]
[280.61495972 145.78994751]
[277.94949341 155.24902344]
[274.78903198 164.55439758]
[271.14236450 173.68019104]
[267.01959229 182.60102844]
[262.43225098 191.29209900]
[257.39303589 199.72920227]
[251.91598511 207.88890076]
[246.01634216 215.74845886]
[239.71052551 223.28604126]
[233.01606750 230.48066711]
[225.95158386 237.31233215]
[218.53672791 243.76202393]
[210.79214478 249.81181335]
[202.73936462 255.44485474]
[194.40077209 260.64547729]
[185.79959106 265.39923096]
[176.95974731 269.69290161]
[167.90580750 273.51449585]
[158.66296387 276.85342407]
[149.25694275 279.70040894]
[139.71389771 282.04748535]
[130.06037903 283.88815308]
[120.32323456 285.21728516]
[110.52955627 286.03118896]
[100.70659637 286.32760620]
[90.88166046 286.10571289]
[81.08209991 285.36608887]
[71.33515930 284.11083984]
[61.66795349 282.34344482]
[52.10738373 280.06881714]
[42.68003845 277.29327393]
[33.41214371 274.02453613]
[24.32947922 270.27169800]
[15.45731258 266.04522705]
[6.82032347 261.35684204]
[-1.55746186 256.21960449]
[-9.65273857 250.64778137]
[-17.44298744 244.65692139]
[-24.90653801 238.26364136]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 43]
[2 42]
[3 41]
[5 39]
[6 38]
[7 37]
[8 36]
[9 35]
[52 70]
[53 69]
[54 68]
[55 67]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
