%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:39 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCUCGCACUGAUUUUUUACCUGAGUAGGCCUAGAAAUAAACAUGCUAGCUUUUAUUCCAGUxxxxxxxxxxAGUCUCUUCCCCACAACAAUAUUCAUGUGCCUAGACCAAGAAGUUAUUAUCUCGAACUGACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[112.73735809 278.55184937]
[112.73735809 263.55184937]
[112.73735809 248.55184937]
[112.73735809 233.55184937]
[112.73735809 218.55184937]
[112.73735809 203.55184937]
[112.73735809 188.55184937]
[112.73735809 173.55184937]
[112.73735809 158.55184937]
[112.73735809 143.55184937]
[108.72962189 129.09716797]
[101.00553894 116.23876190]
[86.14093781 108.52262115]
[85.96192169 91.77558899]
[77.97200775 79.08065796]
[69.98209381 66.38572693]
[61.99217606 53.69079590]
[53.87063599 41.07966995]
[45.61834335 28.55370712]
[37.36605453 16.02774620]
[24.25237083 23.32455826]
[10.63005924 29.62097359]
[-3.42469501 34.88178253]
[-17.83329201 39.07756042]
[-32.51515198 42.18484497]
[-47.38816452 44.18625641]
[-62.36915970 45.07060242]
[-77.37435150 44.83293915]
[-92.31981659 43.47459793]
[-107.12199402 41.00317001]
[-121.69808197 37.43247986]
[-135.96656799 32.78249359]
[-149.84767151 27.07921982]
[-163.26374817 20.35455132]
[-176.13977051 12.64609814]
[-188.40373230 3.99696612]
[-199.98704529 -5.54447222]
[-210.82493591 -15.92485809]
[-220.85678101 -27.08613777]
[-230.02648926 -38.96589279]
[-238.28277588 -51.49768829]
[-245.57948303 -64.61144257]
[-251.87577820 -78.23380280]
[-257.13644409 -92.28860474]
[-261.33212280 -106.69724274]
[-264.43927002 -121.37912750]
[-266.44055176 -136.25215149]
[-267.32476807 -151.23315430]
[-267.08697510 -166.23834229]
[-265.72848511 -181.18380737]
[-263.25692749 -195.98596191]
[-259.68612671 -210.56201172]
[-255.03599548 -224.83045959]
[-249.33261108 -238.71151733]
[-242.60781860 -252.12753296]
[-234.89924622 -265.00347900]
[-226.25001526 -277.26736450]
[-216.70846558 -288.85058594]
[-206.32798767 -299.68838501]
[-195.16662598 -309.72015381]
[-183.28678894 -318.88973999]
[-170.75491333 -327.14593506]
[-157.64109802 -334.44250488]
[-144.01867676 -340.73867798]
[-129.96383667 -345.99923706]
[-115.55516052 -350.19476318]
[-100.87324524 -353.30178833]
[-86.00019836 -355.30294800]
[-71.01918793 -356.18704224]
[-56.01400375 -355.94909668]
[-41.06855774 -354.59048462]
[-26.26642990 -352.11880493]
[-11.69040298 -348.54785156]
[2.57800674 -343.89761353]
[16.45900345 -338.19409180]
[29.87495995 -331.46920776]
[42.75084686 -323.76052856]
[55.01465607 -315.11117554]
[66.59780121 -305.56951904]
[77.43550110 -295.18896484]
[87.46715546 -284.02749634]
[96.63665771 -272.14758301]
[104.89273071 -259.61563110]
[112.18919373 -246.50175476]
[118.48525238 -232.87927246]
[123.74568939 -218.82438660]
[127.94108582 -204.41567993]
[131.04797363 -189.73373413]
[133.04899597 -174.86067200]
[133.93295288 -159.87965393]
[133.69488525 -144.87446594]
[132.33615112 -129.92903137]
[129.86433411 -115.12693024]
[126.29325867 -100.55093384]
[121.64289093 -86.28256226]
[115.93925476 -72.40161896]
[109.21423340 -58.98572159]
[101.50543213 -46.10990143]
[92.85597992 -33.84617233]
[83.31423187 -22.26310921]
[72.93356323 -11.42549610]
[61.77201462 -1.39394069]
[49.89201736 7.77545643]
[58.14430618 20.30141830]
[66.39659882 32.82738113]
[72.74388885 36.70778656]
[74.68710327 45.70088196]
[82.67702484 58.39580917]
[90.66693878 71.09074402]
[98.65685272 83.78566742]
[109.87333679 87.06842041]
[115.99531555 97.02368164]
[113.86393738 108.51467896]
[121.58802032 121.37307739]
[121.72286224 106.37368774]
[125.13018036 91.76580811]
[131.64547729 78.25466919]
[140.95422363 66.49255371]
[152.60699463 57.04730225]
[166.04125977 50.37491608]
[180.60841370 46.79750824]
[195.60520935 46.48779678]
[210.30764771 49.46072388]
[224.00593567 55.57277298]
[236.03874207 64.52886963]
[245.82514954 75.89662933]
[252.89273071 89.12725830]
[256.90023804 103.58200836]
[257.65423584 118.56304169]
[255.11830139 133.34712219]
[249.41487122 147.22050476]
[240.81929016 159.51344299]
[229.74653625 169.63243103]
[216.73117065 177.08897400]
[202.40151978 181.52308655]
[187.44940186 182.72068787]
[172.59666443 180.62399292]
[158.56036377 175.33418274]
[146.01811218 167.10667419]
[135.57542419 156.33863831]
[127.73735809 143.55184937]
[127.73735809 158.55184937]
[127.73735809 173.55184937]
[127.73735809 188.55184937]
[127.73735809 203.55184937]
[127.73735809 218.55184937]
[127.73735809 233.55184937]
[127.73735809 248.55184937]
[127.73735809 263.55184937]
[127.73735809 278.55184937]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[11 114]
[12 113]
[14 110]
[15 109]
[16 108]
[17 107]
[18 105]
[19 104]
[20 103]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
