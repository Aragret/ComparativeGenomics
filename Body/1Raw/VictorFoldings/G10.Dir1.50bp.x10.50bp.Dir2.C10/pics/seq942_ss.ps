%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:58 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGUUGGUCCUAGCCUUUCUAUUAGCUCUUAGUAAGAUUACACAUGCAAGCAUCCCCGUUCCAxxxxxxxxxxCAUGUCUAACAACAUGGCUUUCUCAACUUUUAAAGGAUAACAGCUAUCCAUUGGUCUUAGCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[95.25904083 232.67149353]
[94.94698334 217.67472839]
[94.63492584 202.67797852]
[94.32286835 187.68122864]
[94.01081085 172.68447876]
[93.69875336 157.68771362]
[93.38670349 142.69096375]
[93.07464600 127.69421387]
[92.76258850 112.69745636]
[87.42107391 98.68074799]
[77.67342377 87.27972412]
[67.92577362 75.87870789]
[58.17811966 64.47768402]
[44.54145050 67.74681091]
[30.89467049 64.82166290]
[19.90086174 56.33160400]
[13.68007469 43.98617935]
[13.40061092 30.23114395]
[19.06002426 17.76396942]
[9.55166626 6.16262770]
[0.04330762 -5.43871355]
[-9.46505070 -17.04005432]
[-24.00831795 -12.70772743]
[-39.06171036 -14.26927185]
[-52.33454132 -21.45576096]
[-61.81906891 -33.14470291]
[-66.09417725 -47.53526306]
[-64.53826141 -62.42568207]
[-57.41939545 -75.55012512]
[-66.92775726 -87.15146637]
[-76.43611145 -98.75280762]
[-85.94447327 -110.35414886]
[-95.11701202 -96.02694702]
[-114.43410492 -88.54370880]
[-129.41381836 -89.32355499]
[-144.39353943 -90.10340118]
[-159.37324524 -90.88324738]
[-175.50531006 -85.66855621]
[-184.98200989 -99.72659302]
[-174.09677124 -112.72459412]
[-158.59339905 -105.86296082]
[-143.61369324 -105.08311462]
[-128.63397217 -104.30326843]
[-113.65425873 -103.52342224]
[-109.20808411 -109.56341553]
[-121.28792572 -118.45597076]
[-112.39517212 -130.53565979]
[-100.31573486 -121.64340973]
[-95.86956024 -127.68340302]
[-101.06497192 -141.75491333]
[-106.26039124 -155.82643127]
[-111.45580292 -169.89796448]
[-116.65122223 -183.96948242]
[-131.56956482 -181.90618896]
[-146.58262634 -183.09860229]
[-160.98823547 -187.49092102]
[-174.11260986 -194.87773132]
[-185.34188843 -204.91354370]
[-194.15086365 -217.12893677]
[-200.12753296 -230.95259094]
[-202.99235535 -245.73796082]
[-202.61131287 -260.79348755]
[-199.00225830 -275.41500854]
[-192.33396912 -288.91864014]
[-182.91836548 -300.67279053]
[-171.19580078 -310.12771606]
[-157.71456909 -316.84118652]
[-143.10522461 -320.49917603]
[-128.05105591 -320.93063354]
[-113.25617981 -318.11532593]
[-99.41258240 -312.18499756]
[-87.16775513 -303.41696167]
[-77.09441376 -292.22134399]
[-69.66368866 -279.12179565]
[-65.22315216 -264.73098755]
[-63.98047638 -249.72198486]
[-65.99379730 -234.79681396]
[-71.16893768 -220.65354919]
[-79.26385498 -207.95368958]
[-89.89993286 -197.29124451]
[-102.57970428 -189.16488647]
[-97.38428497 -175.09336853]
[-92.18887329 -161.02185059]
[-86.99345398 -146.95033264]
[-81.79804230 -132.87881470]
[-74.34313202 -119.86250305]
[-64.83477020 -108.26116180]
[-55.32641220 -96.65982056]
[-45.81805420 -85.05847931]
[-31.55123520 -89.46156311]
[-16.64519501 -88.06322479]
[-3.37428951 -81.04553223]
[6.22464323 -69.45036316]
[10.66489124 -55.02476120]
[9.24006748 -39.95781326]
[2.13629031 -26.54841423]
[11.64464855 -14.94707203]
[21.15300751 -3.34573102]
[30.66136551 8.25561047]
[46.50610733 5.23969173]
[61.80398941 10.63940620]
[72.36605835 23.07615471]
[75.24996948 39.23098755]
[69.57913971 54.73003006]
[79.32678986 66.13105011]
[89.07444763 77.53207397]
[98.82209778 88.93309021]
[89.87894440 76.89067078]
[88.91280365 61.92181396]
[96.23368835 48.82965469]
[109.49250793 41.81512833]
[124.43486023 43.12901306]
[136.26611328 52.34972382]
[141.18992615 66.51856232]
[137.62559509 81.09045410]
[151.64230347 86.43196869]
[165.65901184 91.77348328]
[179.67573547 97.11499786]
[193.69244385 102.45650482]
[208.86172485 97.23419952]
[222.32476807 105.95922852]
[223.75387573 121.93849945]
[212.05274963 132.91409302]
[196.19750977 130.46646118]
[188.35093689 116.47322083]
[174.33421326 111.13170624]
[160.31750488 105.79019928]
[146.30079651 100.44868469]
[132.28407288 95.10717010]
[126.15289307 99.42672729]
[135.89285278 110.83432007]
[145.63282776 122.24190521]
[159.39532471 128.20794678]
[164.03152466 142.47349548]
[156.40591431 155.39053345]
[141.67578125 158.22309875]
[129.80334473 149.05549622]
[128.81788635 134.08840942]
[121.35420990 121.07712555]
[113.89052582 108.06584167]
[107.75933838 112.38540649]
[108.07139587 127.38215637]
[108.38345337 142.37890625]
[108.69551086 157.37567139]
[109.00756836 172.37242126]
[109.31962585 187.36917114]
[109.63167572 202.36592102]
[109.94373322 217.36268616]
[110.25579071 232.35943604]
[112.84679413 251.56715393]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 149]
[2 148]
[3 147]
[4 146]
[5 145]
[6 144]
[7 143]
[8 142]
[9 141]
[10 107]
[11 106]
[12 105]
[13 104]
[19 99]
[20 98]
[21 97]
[22 96]
[29 89]
[30 88]
[31 87]
[32 86]
[34 44]
[35 43]
[36 42]
[37 41]
[49 85]
[50 84]
[51 83]
[52 82]
[53 81]
[115 129]
[116 128]
[117 127]
[118 126]
[119 125]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
