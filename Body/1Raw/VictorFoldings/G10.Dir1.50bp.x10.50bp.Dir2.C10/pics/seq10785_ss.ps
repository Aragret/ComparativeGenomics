%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:18 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGUCCUUCUUGCUCAUCAGUUGAUGAUACGCCCGAGCAGAUGCCAACACAGCAGCCAUUCAAxxxxxxxxxxAUAUUACGGAUCAUUUCUCUACUCAGAAACCUGAAACAUCGGCAUUAUCCUCCUGCUUGCCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[92.50000000 251.28326416]
[92.50000000 236.28326416]
[92.50000000 221.28326416]
[92.50000000 206.28326416]
[92.50000000 191.28326416]
[92.50000000 176.28326416]
[92.50000000 161.28326416]
[92.50000000 146.28326416]
[92.50000000 131.28326416]
[92.50000000 116.28326416]
[86.60167694 111.65078735]
[79.41029358 124.81452179]
[72.29894257 138.02166748]
[57.35292053 136.75022888]
[52.57462311 122.53166199]
[63.72053528 112.49195862]
[74.80503845 102.38583374]
[68.90672302 97.75336456]
[54.33401871 101.30812073]
[39.76131439 104.86288452]
[25.18861198 108.41764832]
[10.61590862 111.97241211]
[-3.70668864 116.42922211]
[-17.72340202 121.77073669]
[-31.74011421 127.11225128]
[-45.75682831 132.45376587]
[-53.60341263 146.44700623]
[-69.45865631 148.89462280]
[-81.15976715 137.91903687]
[-79.73065948 121.93976593]
[-66.26761627 113.21473694]
[-51.09833908 118.43704987]
[-37.08162689 113.09553528]
[-23.06491470 107.75402832]
[-9.04820156 102.41251373]
[-22.04918098 94.93090057]
[-26.13750839 80.49879456]
[-18.99202156 67.31008911]
[-4.66959620 62.85271835]
[8.69815063 69.65737152]
[13.52162838 83.86068726]
[7.06114674 97.39970398]
[21.63385010 93.84494781]
[36.20655060 90.29018402]
[50.77925491 86.73542023]
[65.35195923 83.18065643]
[85.78104401 78.95122528]
[99.14849854 87.74142456]
[105.77700043 74.28546143]
[112.40550232 60.82949448]
[119.03399658 47.37352753]
[125.66249847 33.91756058]
[115.22747040 22.94780159]
[109.18650818 9.09576988]
[108.25102234 -5.95896626]
[112.51465607 -20.39820099]
[121.44429779 -32.48468018]
[133.94668579 -40.77110672]
[148.50218201 -44.27345276]
[163.34953308 -42.58777237]
[169.97802734 -56.04373932]
[176.60653687 -69.49970245]
[180.16130066 -84.07241058]
[180.47335815 -99.06916046]
[165.94433594 -103.11373138]
[152.87803650 -110.64516449]
[142.09579468 -121.19003296]
[134.27540588 -134.08546448]
[129.90847778 -148.52087402]
[129.26948547 -163.58879089]
[132.39862061 -178.34207153]
[139.09918213 -191.85330200]
[148.94996643 -203.27316284]
[161.33172607 -211.88377380]
[175.46617126 -217.14385986]
[190.46475220 -218.72279358]
[205.38468933 -216.52131653]
[219.28807068 -210.67779541]
[231.30093384 -201.55958557]
[240.66813660 -189.73983765]
[246.80085754 -175.96156311]
[249.31356812 -161.09089661]
[248.04833984 -146.06257629]
[243.08468628 -131.82133484]
[234.73463440 -119.26238251]
[223.52308655 -109.17516327]
[210.15478516 -102.19378662]
[195.47010803 -98.75710297]
[195.15805054 -83.76035309]
[201.54672241 -79.83163452]
[209.40435791 -92.60886383]
[222.18145752 -84.75101471]
[214.32408142 -71.97421265]
[220.71276855 -68.04550171]
[233.95535278 -75.09063721]
[247.19793701 -82.13577271]
[260.44052124 -89.18090057]
[273.68310547 -96.22603607]
[278.06005859 -111.41214752]
[291.93344116 -118.98213959]
[307.07241821 -114.44487000]
[314.49530029 -100.49222565]
[309.79824829 -85.40206146]
[295.76791382 -78.12710571]
[280.72824097 -82.98345184]
[267.48565674 -75.93831635]
[254.24307251 -68.89318085]
[241.00048828 -61.84804916]
[227.75790405 -54.80291367]
[204.75349426 -52.37080765]
[190.06250000 -62.87120438]
[183.43400574 -49.41524124]
[176.80549622 -35.95927429]
[187.19065857 -25.21525574]
[193.28474426 -11.54078293]
[194.33460999 3.42157817]
[190.19430542 17.86731720]
[181.34498596 30.04760933]
[168.83908081 38.48102570]
[154.17518616 42.13370132]
[139.11845398 40.54605865]
[132.48995972 54.00202560]
[125.86146545 67.45799255]
[119.23296356 80.91395569]
[112.60446930 94.36991882]
[122.02770233 82.69933319]
[134.94921875 75.08129120]
[149.72302246 72.48622131]
[164.46720886 75.24467468]
[177.30360413 83.00527954]
[186.59707642 94.77946472]
[191.16378784 109.06740570]
[190.42201233 124.04904938]
[184.46626282 137.81600952]
[174.05517578 148.61459351]
[160.51496887 155.06924438]
[145.57040405 156.35775757]
[131.12519836 152.31600952]
[119.01939392 143.45881653]
[110.79508972 130.91447449]
[107.50000000 116.28326416]
[107.50000000 131.28326416]
[107.50000000 146.28326416]
[107.50000000 161.28326416]
[107.50000000 176.28326416]
[107.50000000 191.28326416]
[107.50000000 206.28326416]
[107.50000000 221.28326416]
[107.50000000 236.28326416]
[107.50000000 251.28326416]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[18 46]
[19 45]
[20 44]
[21 43]
[22 42]
[23 35]
[24 34]
[25 33]
[26 32]
[48 125]
[49 124]
[50 123]
[51 122]
[52 121]
[60 113]
[61 112]
[62 111]
[63 89]
[64 88]
[94 109]
[95 108]
[96 107]
[97 106]
[98 105]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
