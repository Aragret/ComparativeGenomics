%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:01 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGAAUUCUAGGCUAUAUACAACUACGCAAAGGCCCCAACGUUGUAGGCCCCUACGGGCUACUxxxxxxxxxxCUGAGAACCAAAAUGAACGAAAAUCUGUUCGCUUCAUUCAUUGCCCCCACAAUCCUAGGCCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[105.52320862 264.07696533]
[105.52320862 249.07698059]
[105.52320862 234.07698059]
[105.52320862 219.07698059]
[105.52320862 204.07698059]
[105.52320862 189.07698059]
[105.52320862 174.07698059]
[105.52320862 159.07698059]
[105.52320862 144.07698059]
[105.52320862 129.07698059]
[88.25766754 124.26823425]
[78.44599152 111.27014160]
[78.57976532 96.61830902]
[65.48661041 89.29920959]
[52.39345551 81.98010254]
[39.30030060 74.66099548]
[25.33991051 69.17396545]
[10.76720810 65.61920166]
[5.25281334 73.67491150]
[-2.96236014 79.50723267]
[-12.98912048 82.22166443]
[-23.64776802 81.27644348]
[-33.60674286 76.57407379]
[-41.54884720 68.49901581]
[-46.34431076 57.89361191]
[-61.32402420 57.11376572]
[-76.30373383 56.33392334]
[-91.28345490 55.55407715]
[-106.26316833 54.77423096]
[-121.24288177 53.99438477]
[-126.87771606 68.04882812]
[-136.77259827 79.51050568]
[-149.85420227 87.13614655]
[-164.70353699 90.09856415]
[-179.70985413 88.07643127]
[-193.24539185 81.28908539]
[-203.84190369 70.47277069]
[-210.34996033 56.80076599]
[-212.06362915 41.75609589]
[-208.79701233 26.97069931]
[-200.90444946 14.04838657]
[-189.24206543 4.39087296]
[-175.07490540 -0.95426691]
[-159.93972778 -1.40723240]
[-145.47828674 3.08111072]
[-133.25923157 12.02390099]
[-124.60800934 24.45109177]
[-120.46303558 39.01467133]
[-105.48332214 39.79451752]
[-90.50360870 40.57436371]
[-75.52389526 41.35420609]
[-60.54417801 42.13405228]
[-45.56446457 42.91389847]
[-38.38195419 29.74531555]
[-47.14816284 17.57347870]
[-55.91436768 5.40164185]
[-64.68058014 -6.77019501]
[-73.44678497 -18.94203186]
[-88.61425781 -25.17739487]
[-90.52954865 -41.46431351]
[-77.22236633 -51.04820251]
[-62.38199997 -44.06997681]
[-61.27494812 -27.70823860]
[-52.50873947 -15.53640270]
[-43.74253082 -3.36456561]
[-34.97632599 8.80727100]
[-26.21011734 20.97910881]
[3.33521652 26.27183914]
[14.32196999 51.04649734]
[28.89467239 54.60126114]
[18.91005707 43.40717697]
[14.23401451 29.15464783]
[15.64661312 14.22131062]
[22.91219902 1.09838235]
[34.81871033 -8.02493858]
[49.37987518 -11.62667656]
[64.16655731 -9.10598183]
[76.71202087 -0.88336247]
[84.92338562 11.66946411]
[87.43081665 26.45840454]
[83.81602478 41.01633453]
[74.68202972 52.91465759]
[61.55259323 60.16847610]
[46.61940765 61.56784058]
[59.71256256 68.88694763]
[72.80571747 76.20605469]
[85.89887238 83.52515411]
[109.37873077 76.13555908]
[129.40492249 96.63439941]
[143.72752380 92.17758179]
[158.05010986 87.72077179]
[172.27690125 82.96694946]
[186.40170288 77.91819763]
[200.52650452 72.86943817]
[214.65130615 67.82068634]
[228.77610779 62.77192688]
[242.90090942 57.72317123]
[256.97244263 52.52775574]
[270.98913574 47.18624496]
[285.00585938 41.84473038]
[299.02255249 36.50321960]
[305.25625610 21.98024368]
[319.96420288 16.19649887]
[334.42044067 22.58337593]
[340.04837036 37.35165405]
[333.50900269 51.73957825]
[318.68206787 57.21104431]
[304.36407471 50.51993179]
[290.34738159 55.86144257]
[276.33065796 61.20295715]
[262.31393433 66.54447174]
[257.15017700 71.89994049]
[247.94966125 71.84797668]
[233.82485962 76.89672852]
[219.70005798 81.94548798]
[205.57525635 86.99423981]
[191.45045471 92.04299927]
[177.32565308 97.09175873]
[174.48739624 101.00581360]
[169.13281250 103.14116669]
[162.50692749 102.04336548]
[148.18432617 106.50018311]
[133.86174011 110.95699310]
[148.56770325 113.91239166]
[163.27368164 116.86779022]
[178.11705017 114.70576477]
[192.76557922 117.93384552]
[205.32530212 126.13465881]
[214.17231750 138.24789429]
[218.16273499 152.70736694]
[216.78063965 167.64356995]
[210.20472717 181.12530518]
[199.28521729 191.40948486]
[185.43394470 197.16641235]
[170.44180298 197.65174866]
[156.24717712 192.80273438]
[144.68537903 183.24635315]
[137.25125122 170.21815491]
[134.90597534 155.40444946]
[127.71459198 142.24072266]
[120.52320862 129.07698059]
[120.52320862 144.07698059]
[120.52320862 159.07698059]
[120.52320862 174.07698059]
[120.52320862 189.07698059]
[120.52320862 204.07698059]
[120.52320862 219.07698059]
[120.52320862 234.07698059]
[120.52320862 249.07698059]
[120.52320862 264.07696533]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[13 87]
[14 86]
[15 85]
[16 84]
[17 70]
[18 69]
[25 53]
[26 52]
[27 51]
[28 50]
[29 49]
[30 48]
[54 67]
[55 66]
[56 65]
[57 64]
[58 63]
[89 123]
[90 122]
[91 121]
[92 118]
[93 117]
[94 116]
[95 115]
[96 114]
[97 113]
[98 111]
[99 110]
[100 109]
[101 108]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
