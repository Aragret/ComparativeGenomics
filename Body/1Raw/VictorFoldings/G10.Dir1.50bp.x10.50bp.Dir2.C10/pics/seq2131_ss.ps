%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:28 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGUAACUUUGCAAGGAGAGCCAAAGCUAAGACCCCCGAAACCAGACGAGCUACCUAAGAACAxxxxxxxxxxUAUUUACCCUAUAGCACCCCCUCUACCCCCUCUAGAGCCCACUGUAAAGCUAACUUAGCACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[156.59916687 145.85958862]
[143.82180786 138.00216675]
[131.04444885 130.14472961]
[118.26709747 122.28730774]
[105.48973846 114.42988586]
[90.49054718 114.27384949]
[77.55249023 121.86375427]
[64.61444092 129.45365906]
[51.67638016 137.04357910]
[38.73832703 144.63348389]
[25.80027008 152.22338867]
[22.15117645 157.86180115]
[16.96731186 160.38346863]
[12.16234207 159.84703064]
[-1.08024359 166.89216614]
[-14.32282925 173.93730164]
[-22.87213898 187.24969482]
[-37.74229431 186.39659119]
[-50.98487854 193.44172668]
[-55.76244354 210.23791504]
[-70.89645386 218.25328064]
[-86.83514404 212.97918701]
[-99.92829895 220.29829407]
[-107.85469818 234.65463257]
[-124.25378418 234.69775391]
[-132.25558472 220.38331604]
[-123.62854004 206.43678284]
[-107.24740601 207.20513916]
[-94.15425110 199.88603210]
[-92.40232849 187.08261108]
[-83.44770813 177.49673462]
[-70.41123962 174.79887390]
[-58.03001404 180.19914246]
[-44.78742599 173.15400696]
[-37.18531799 160.34552002]
[-21.36796379 160.69471741]
[-8.12537861 153.64958191]
[5.11720705 146.60444641]
[18.21036148 139.28533936]
[31.14841843 131.69541931]
[44.08647537 124.10551453]
[57.02452850 116.51560974]
[69.96258545 108.92570496]
[82.90064240 101.33579254]
[69.70719910 108.47253418]
[54.73694229 109.41664886]
[40.75142670 103.99397278]
[30.33056641 93.20482635]
[25.39669037 79.03948975]
[26.85995483 64.11103058]
[34.45043182 51.17330551]
[46.76790237 42.61293793]
[61.54016495 40.00905609]
[76.04218292 43.84199524]
[87.59877014 53.40469742]
[94.07808685 66.93312836]
[94.28550720 81.92871094]
[94.59755707 66.93195343]
[94.90961456 51.93519974]
[95.22167206 36.93844986]
[80.50866699 33.78821182]
[66.65783691 27.91019821]
[54.16988373 19.51690102]
[43.49623108 8.91172981]
[35.02273178 -3.52194643]
[29.05569458 -17.33465767]
[25.81082344 -32.02708054]
[25.40542221 -47.06809616]
[27.85414124 -61.91397858]
[33.06846619 -76.02806091]
[40.85989761 -88.90013123]
[50.94678116 -100.06486511]
[62.96448135 -109.11866760]
[76.47856903 -115.73424530]
[91.00051880 -119.67245483]
[106.00537109 -120.79093170]
[120.95070648 -119.04924774]
[135.29626465 -114.51035309]
[148.52345276 -107.33833313]
[160.15412903 -97.79244995]
[169.76783752 -86.21778107]
[177.01707458 -73.03274536]
[181.63975525 -58.71397018]
[183.46879578 -43.77907562]
[182.43804932 -28.76794243]
[178.58480835 -14.22321701]
[172.04835510 -0.67068291]
[163.06495667 11.39974594]
[151.95939636 21.55172920]
[139.13310242 29.41828346]
[125.04974365 34.71503067]
[110.21842957 37.25050354]
[109.90637207 52.24725723]
[109.59431458 67.24401093]
[109.28225708 82.24076843]
[114.82852936 92.22355652]
[113.34716034 101.65252686]
[126.12451935 109.50995636]
[138.90188599 117.36737823]
[151.67922974 125.22480774]
[164.45658875 133.08222961]
[173.80758667 121.32994080]
[184.50701904 110.79051208]
[196.39883423 101.61763000]
[209.30966187 93.94506836]
[223.05117798 87.88471222]
[237.42301941 83.52494812]
[252.21559143 80.92934418]
[267.21316528 80.13574982]
[282.19708252 81.15575409]
[296.94876099 83.97446442]
[311.25311279 88.55078888]
[324.90155029 94.81798553]
[337.69500732 102.68466187]
[349.44696045 112.03608704]
[359.98599243 122.73590851]
[369.15841675 134.62808228]
[376.83050537 147.53918457]
[382.89031982 161.28092957]
[387.24957275 175.65293884]
[389.84460449 190.44560242]
[390.63763428 205.44322205]
[389.61709595 220.42707825]
[386.79782104 235.17864990]
[382.22094727 249.48283386]
[375.95324707 263.13104248]
[368.08609009 275.92419434]
[358.73422241 287.67581177]
[348.03402710 298.21441650]
[336.14151001 307.38641357]
[323.23010254 315.05801392]
[309.48812866 321.11734009]
[295.11596680 325.47604370]
[280.32321167 328.07052612]
[265.32556152 328.86300659]
[250.34175110 327.84188843]
[235.59027100 325.02206421]
[221.28625488 320.44467163]
[207.63829041 314.17645264]
[194.84541321 306.30883789]
[183.09417725 296.95651245]
[172.55593872 286.25592041]
[163.38439941 274.36303711]
[155.71328735 261.45138550]
[149.65446472 247.70916748]
[145.29631042 233.33683777]
[142.70237732 218.54397583]
[141.91046143 203.54629517]
[142.93214417 188.56253052]
[145.75251770 173.81115723]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 101]
[2 100]
[3 99]
[4 98]
[5 97]
[6 44]
[7 43]
[8 42]
[9 41]
[10 40]
[11 39]
[14 38]
[15 37]
[16 36]
[18 34]
[19 33]
[22 29]
[23 28]
[57 95]
[58 94]
[59 93]
[60 92]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
