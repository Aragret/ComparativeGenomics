%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:03 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGGUUCAACUUUAAAUUUGCCCACAGAACCCUCUAAAUCCCCUUGUAAAUUUAACUGUUAGUxxxxxxxxxxCUCAACAUUUUUUGUAGCCACAGGCUUCCACGGACUUCACGUCAUUAUUGGCUCAACUUUCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[101.72396851 315.68823242]
[104.31496429 296.48049927]
[104.62702179 281.48373413]
[104.93907928 266.48699951]
[105.25113678 251.49023438]
[105.56319427 236.49348450]
[105.87524414 221.49673462]
[106.18730164 206.49996948]
[106.49935913 191.50321960]
[106.81141663 176.50646973]
[107.12347412 161.50971985]
[71.26461029 142.86259460]
[60.25751495 111.18429565]
[71.87046814 87.04603577]
[60.17084503 77.65887451]
[48.47122192 68.27171326]
[29.08152008 73.91300964]
[10.72623444 66.02198792]
[1.67561173 48.45034027]
[-13.22629070 46.73765182]
[-28.12819290 45.02496338]
[-43.03009415 43.31227112]
[-57.93199921 41.59958267]
[-72.83390045 39.88689423]
[-87.73580170 38.17420197]
[-102.63770294 36.46151352]
[-106.68572235 38.40445328]
[-110.72984314 38.86941147]
[-114.29417419 38.04637146]
[-117.01732635 36.26355362]
[-118.68825531 33.93647003]
[-133.39620972 30.99098587]
[-148.10417175 28.04550362]
[-155.49726868 41.24389267]
[-166.60841370 51.51022720]
[-180.34906006 57.83871841]
[-195.37303162 59.60936356]
[-210.20845032 56.64869308]
[-223.40188599 49.24676514]
[-233.66078186 38.12874603]
[-239.98005676 24.38385963]
[-241.74063110 9.35869598]
[-238.77001953 -5.47473478]
[-231.35925293 -18.66320419]
[-220.23435974 -28.91463852]
[-206.48524475 -35.22470856]
[-191.45890808 -36.97521973]
[-176.62747192 -33.99467087]
[-163.44396973 -26.57506943]
[-153.19999695 -15.44330883]
[-146.89913940 -1.68996799]
[-145.15869141 13.33754158]
[-130.45072937 16.28302383]
[-115.74277496 19.22850609]
[-100.92501831 21.55961037]
[-86.02310944 23.27230072]
[-71.12120819 24.98498917]
[-56.21930695 26.69767952]
[-41.31740570 28.41036987]
[-26.41550255 30.12305832]
[-11.51360130 31.83574867]
[3.38830137 33.54843903]
[11.09899902 22.48908424]
[22.96642876 16.09156227]
[22.96642876 1.09156263]
[22.96642876 -13.90843773]
[22.96642876 -28.90843773]
[8.71375847 -34.06956100]
[-2.91217065 -43.79651260]
[-10.50747204 -56.91471100]
[-13.15497589 -71.84008026]
[-10.53498173 -86.77029419]
[-2.96386886 -99.90247345]
[8.64411545 -109.65083313]
[22.88725090 -114.83821106]
[38.04560852 -114.83821106]
[52.28874207 -109.65083313]
[63.89672852 -99.90247345]
[71.46784210 -86.77029419]
[74.08783722 -71.84008026]
[71.44033051 -56.91471100]
[63.84502792 -43.79651260]
[52.21910095 -34.06956100]
[37.96643066 -28.90843773]
[37.96643066 -13.90843773]
[37.96643066 1.09156263]
[37.96643066 16.09156227]
[47.18598557 20.15885162]
[54.52073288 27.16393661]
[59.06585312 36.30434036]
[60.23980331 46.51075745]
[57.85838318 56.57209396]
[69.55800629 65.95925140]
[81.25762939 75.34641266]
[106.53172302 54.01669693]
[149.71899414 63.09185791]
[162.81214905 55.77275085]
[175.90528870 48.45364380]
[188.99844360 41.13454056]
[199.87380981 28.12827682]
[215.38238525 34.97813416]
[213.09342957 51.77685165]
[196.31755066 54.22769547]
[183.22439575 61.54679871]
[170.13124084 68.86590576]
[157.03808594 76.18501282]
[158.51083374 83.53899384]
[172.72114563 88.34181213]
[161.45631409 98.24695587]
[162.92906189 105.60093689]
[177.83096313 107.31362152]
[192.73286438 109.02631378]
[203.96136475 98.14261627]
[219.56240845 97.07432556]
[232.16967773 106.32585907]
[235.83038330 121.52892303]
[228.81607056 135.50509644]
[214.43867493 141.65525818]
[199.48677063 137.07548523]
[191.02017212 123.92821503]
[176.11827087 122.21552277]
[161.21636963 120.50283813]
[156.31481934 134.67939758]
[169.09217834 142.53681946]
[185.49108887 142.45056152]
[193.53051758 156.74389648]
[184.94018555 170.71308899]
[168.55708313 169.98780823]
[161.23475647 155.31417847]
[148.45739746 147.45675659]
[141.87310791 151.04800415]
[149.31922913 164.06933594]
[156.76536560 177.09066772]
[169.32273865 185.29510498]
[168.72732544 200.28327942]
[155.55873108 207.46574402]
[142.63520813 199.85110474]
[142.53646851 184.85151672]
[135.62048340 171.54101562]
[128.70451355 158.23051453]
[122.12022400 161.82177734]
[121.80816650 176.81852722]
[121.49611664 191.81527710]
[121.18405914 206.81202698]
[120.87200165 221.80879211]
[120.55994415 236.80554199]
[120.24788666 251.80229187]
[119.93582916 266.79904175]
[119.62377930 281.79580688]
[119.31172180 296.79254150]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 150]
[3 149]
[4 148]
[5 147]
[6 146]
[7 145]
[8 144]
[9 143]
[10 142]
[11 141]
[14 94]
[15 93]
[16 92]
[19 62]
[20 61]
[21 60]
[22 59]
[23 58]
[24 57]
[25 56]
[26 55]
[31 54]
[32 53]
[33 52]
[64 87]
[65 86]
[66 85]
[67 84]
[96 106]
[97 105]
[98 104]
[99 103]
[110 122]
[111 121]
[112 120]
[123 130]
[124 129]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
