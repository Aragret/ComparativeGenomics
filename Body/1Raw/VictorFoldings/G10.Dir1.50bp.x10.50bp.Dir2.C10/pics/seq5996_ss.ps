%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:36 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGAAGUUGCAAUACUUAAUUUCUGUAACAGCUAAGGACUGCAAAACCCCACUCUGCAUCAACxxxxxxxxxxCCGGGAAAAAAGGCGGGAGAAGCCCCGGCAGGUUUGAAGCUGCUUCUUCGAAUUUGCAAUCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[94.44155121 317.40026855]
[94.44155121 302.40026855]
[94.44155121 287.40026855]
[94.44155121 272.40026855]
[94.44155121 257.40026855]
[94.44155121 242.40026855]
[94.44155121 227.40026855]
[94.44155121 212.40026855]
[94.44155121 197.40026855]
[94.44155121 182.40026855]
[92.57394409 167.51698303]
[88.86778259 152.98204041]
[85.16162109 138.44711304]
[72.38426208 130.58967590]
[57.74076080 133.84051514]
[43.09725952 137.09133911]
[28.45375633 140.34216309]
[13.81025600 143.59298706]
[2.01490712 154.13719177]
[-12.08672237 149.34205627]
[-23.88207054 159.88626099]
[-37.98369980 155.09112549]
[-52.62720108 158.34196472]
[-67.27070618 161.59278870]
[-81.91420746 164.84361267]
[-84.51502228 179.82040405]
[-92.65345764 192.65917969]
[-105.08845520 201.40213013]
[-119.92376709 204.71603394]
[-134.89712524 202.09550476]
[-147.72518921 193.94018555]
[-156.45178223 181.49369812]
[-159.74615479 166.65403748]
[-157.10594177 151.68414307]
[-148.93376160 138.86682129]
[-136.47579956 130.15661621]
[-121.63181305 126.88176727]
[-106.66540527 129.54167175]
[-93.85884094 137.73069763]
[-85.16503143 150.20010376]
[-70.52153015 146.94927979]
[-55.87802505 143.69845581]
[-41.23452377 140.44763184]
[-30.48657799 130.13594055]
[-15.33754826 134.69856262]
[-4.58960056 124.38687134]
[10.55943012 128.94947815]
[25.20293045 125.69866180]
[39.84643173 122.44783020]
[54.48993301 119.19700623]
[69.13343811 115.94618225]
[61.80754089 93.46183014]
[70.70593262 68.85922241]
[94.93877411 53.51510620]
[91.23261261 38.98016739]
[87.52645874 24.44523239]
[72.46665192 24.83255768]
[57.69834137 21.85853958]
[43.96229935 15.67235279]
[31.94752121 6.58429384]
[22.25665855 -4.94978380]
[15.37580585 -18.35133553]
[11.65010071 -32.94814682]
[11.26642418 -48.00804520]
[14.24402046 -62.77563095]
[20.43353653 -76.51017761]
[29.52450562 -88.52275085]
[41.06093216 -98.21081543]
[54.46414948 -105.08842468]
[69.06185913 -108.81059265]
[84.12184906 -109.19062042]
[98.88871765 -106.20944214]
[112.62175751 -100.01660156]
[124.63213348 -90.92272186]
[134.31739807 -79.38394928]
[141.19175720 -65.97906494]
[144.91040039 -51.38045120]
[145.28677368 -36.32036972]
[142.30201721 -21.55422401]
[136.10585022 -7.82268381]
[127.00906372 4.18548632]
[115.46794128 13.86796093]
[102.06139374 20.73907089]
[105.76755524 35.27400589]
[109.47371674 49.80894470]
[116.39532471 52.69707870]
[120.11128235 38.16464615]
[119.83104706 23.16726303]
[132.23547363 14.73339653]
[146.07896423 20.50901604]
[148.81129456 35.25806427]
[137.95394897 45.60974503]
[130.23854065 58.47335052]
[137.16015625 61.36148834]
[150.09820557 53.77157974]
[163.03625488 46.18167114]
[175.97431946 38.59176254]
[179.71575928 23.23672676]
[193.26223755 15.09617710]
[208.57685852 18.99975777]
[216.57373047 32.63154221]
[212.50845337 47.90403748]
[198.79289246 55.75634003]
[183.56422424 51.52981949]
[170.62617493 59.11972809]
[157.68811035 66.70963287]
[144.75006104 74.29954529]
[148.00088501 88.94304657]
[162.93519592 90.34535217]
[177.86949158 91.74765015]
[192.80380249 93.14995575]
[207.26687622 86.73667908]
[219.21507263 95.62992859]
[233.88783264 88.30585480]
[247.41595459 97.57528687]
[245.88284302 113.90261078]
[230.86564636 120.49168396]
[217.81277466 110.56423187]
[204.41790771 117.07781219]
[191.40150452 108.08426666]
[176.46719360 106.68196106]
[161.53288269 105.27965546]
[146.59858704 103.87734985]
[135.71847534 123.49639893]
[118.23938751 134.18678284]
[99.69655609 134.74095154]
[103.40271759 149.27587891]
[107.10887909 163.81082153]
[112.56268311 149.83741760]
[123.45687103 139.52641296]
[137.70890808 134.84887695]
[152.59437561 136.69894409]
[165.26777649 144.72296143]
[173.30645752 157.38706970]
[175.17375183 172.27040100]
[170.51269531 186.52783203]
[160.21430969 197.43394470]
[146.24722290 202.90391541]
[131.28138733 201.89210510]
[118.17767334 194.59193420]
[109.44155121 182.40026855]
[109.44155121 197.40026855]
[109.44155121 212.40026855]
[109.44155121 227.40026855]
[109.44155121 242.40026855]
[109.44155121 257.40026855]
[109.44155121 272.40026855]
[109.44155121 287.40026855]
[109.44155121 302.40026855]
[109.44155121 317.40026855]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[11 128]
[12 127]
[13 126]
[14 51]
[15 50]
[16 49]
[17 48]
[18 47]
[20 45]
[22 43]
[23 42]
[24 41]
[25 40]
[54 85]
[55 84]
[56 83]
[94 107]
[95 106]
[96 105]
[97 104]
[108 123]
[109 122]
[110 121]
[111 120]
[113 118]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
