%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:34 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGUCAUCCUCGCCUUAGCAUGAUUUAUCCUACACUCCAACUCAUGAGACCCACAACAAAUAGxxxxxxxxxxAUCCGUCCCUAACAAACUAGGAGGCGUCCUUGCCCUAUUACUAUCCAUCCUCAUCCUAGCCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[237.77593994 356.33938599]
[236.84031677 341.36859131]
[235.90469360 326.39779663]
[234.96905518 311.42700195]
[234.03343201 296.45620728]
[233.09780884 281.48541260]
[232.16217041 266.51461792]
[227.40835571 252.28785706]
[219.15606689 239.76188660]
[210.90377808 227.23593140]
[204.55648804 223.35551453]
[202.61326599 214.36242676]
[194.62335205 201.66749573]
[179.74487305 202.37194824]
[166.42282104 195.48870850]
[158.28100586 182.77740479]
[157.59033203 167.59782410]
[164.63633728 154.02206421]
[156.64642334 141.32713318]
[148.65650940 128.63220215]
[140.66659546 115.93727875]
[132.67668152 103.24234772]
[121.44473267 122.10704803]
[101.96829987 128.69406128]
[84.18656158 121.54273987]
[75.99772644 105.76902771]
[61.03747559 104.67771912]
[46.07722473 103.58640289]
[31.11697769 102.49509430]
[16.15672874 101.40378571]
[1.83020782 108.11656189]
[-10.30041599 99.47380829]
[-25.26066399 98.38249207]
[-32.82130432 111.64143372]
[-45.39091873 120.29981232]
[-60.47379684 122.63851166]
[-75.07522583 118.19317627]
[-86.29608154 107.84642792]
[-91.90845490 93.65262604]
[-90.79799652 78.42995453]
[-83.18520355 65.20088959]
[-70.58158875 56.59207535]
[-55.48961639 54.31279373]
[-40.90580750 58.81559753]
[-29.72578621 69.20645142]
[-24.16935349 83.42224884]
[-9.20910549 84.51355743]
[4.04735804 77.72271729]
[17.24803925 86.44353485]
[32.20828629 87.53484344]
[47.16853714 88.62615967]
[62.12878418 89.71746826]
[77.08903503 90.80877686]
[86.72232056 74.48673248]
[107.47260284 68.02441406]
[104.68027496 53.28660583]
[101.88795471 38.54880142]
[86.83394623 38.11198425]
[72.22589874 34.44877243]
[58.74706650 27.73050117]
[47.02787399 18.27139664]
[37.61645508 6.51387978]
[30.95299149 -6.99213123]
[27.34914970 -21.61493492]
[26.97348595 -36.67059708]
[29.84357262 -51.45493698]
[35.82516861 -65.27645874]
[44.63850403 -77.48871613]
[55.87136459 -87.52050781]
[68.99836731 -94.90264130]
[83.40554047 -99.28982544]
[98.41903687 -100.47687531]
[113.33663940 -98.40827179]
[127.46063232 -93.18075562]
[140.13041687 -85.03884125]
[150.75338745 -74.36332703]
[158.83268738 -61.65353394]
[163.99046326 -47.50392151]
[165.98544312 -32.57629395]
[164.72433472 -17.56884003]
[160.26611328 -3.18348622]
[152.81930542 9.90693665]
[142.73222351 21.09016609]
[130.47662354 29.84314346]
[116.62576294 35.75647354]
[119.41808319 50.49428177]
[122.21041107 65.23208618]
[136.53300476 69.68890381]
[147.19462585 59.13761139]
[157.85626221 48.58632278]
[168.51788330 38.03503036]
[168.34944153 22.23163986]
[179.46458435 10.99645424]
[195.26885986 10.99510956]
[206.38591003 22.22840500]
[206.22016907 38.03182220]
[194.86996460 49.02947998]
[179.06916809 48.69665909]
[168.40754700 59.24794769]
[157.74592590 69.79924011]
[147.08428955 80.35053253]
[145.37161255 95.25243378]
[153.36152649 107.94736481]
[161.35144043 120.64228821]
[169.34135437 133.33721924]
[177.33126831 146.03215027]
[192.61904907 145.55149841]
[206.00640869 152.74005127]
[213.94538879 165.57902527]
[214.38902283 180.56765747]
[207.31828308 193.67758179]
[215.30819702 206.37251282]
[223.42974854 218.98364258]
[231.68203735 231.50959778]
[239.93432617 244.03556824]
[239.41012573 229.04472351]
[242.29264832 214.32429504]
[248.43225098 200.63833618]
[257.51025391 188.69725037]
[269.05548096 179.12083435]
[282.46865845 172.40615845]
[297.05355835 168.90176392]
[312.05313110 168.78953552]
[326.68884277 172.07530212]
[340.20098877 178.58851624]
[351.88821411 187.99110413]
[361.14389038 199.79502869]
[367.48760986 213.38757324]
[370.59005737 228.06321716]
[370.29025269 243.06022644]
[366.60369873 257.60015869]
[359.72180176 270.92828369]
[350.00170898 282.35284424]
[337.94802856 291.28079224]
[324.18637085 297.24874878]
[309.43103027 299.94692993]
[294.44790649 299.23529053]
[280.01473999 295.15075684]
[266.88067627 287.90533447]
[255.72741699 277.87512207]
[247.13296509 265.57901001]
[248.06858826 280.54980469]
[249.00422668 295.52059937]
[249.93984985 310.49136353]
[250.87547302 325.46215820]
[251.81111145 340.43295288]
[252.74673462 355.40374756]
[262.26205444 368.76004028]
[255.20762634 383.56433105]
[238.84040833 384.58721924]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 147]
[2 146]
[3 145]
[4 144]
[5 143]
[6 142]
[7 141]
[8 115]
[9 114]
[10 113]
[12 112]
[13 111]
[18 106]
[19 105]
[20 104]
[21 103]
[22 102]
[26 53]
[27 52]
[28 51]
[29 50]
[30 49]
[32 47]
[33 46]
[55 87]
[56 86]
[57 85]
[88 101]
[89 100]
[90 99]
[91 98]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
