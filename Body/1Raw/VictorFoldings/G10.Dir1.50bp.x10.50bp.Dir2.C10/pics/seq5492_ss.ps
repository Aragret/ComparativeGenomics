%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:27 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCCACCCUCCUCUCCCUAGGAGGCCUGCCCCCGCUAACCGGCUUUUUGCCCAAAUGGGCCAUxxxxxxxxxxAAUCCCUUCUCGUCCCCAUGGAUGACCCCCCUCAGAUAGGGGUCCCUUGACCACCAUCCUCCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[-4.49658442 222.21182251]
[-12.82628632 214.56655884]
[-20.59815025 206.35484314]
[-27.77375221 197.61729431]
[-34.71333313 211.83532715]
[-49.58158112 212.72105408]
[-61.91286469 221.26152039]
[-74.24414825 229.80197144]
[-86.57543182 238.34243774]
[-98.90671539 246.88288879]
[-111.23799896 255.42335510]
[-111.71732330 270.82064819]
[-121.06192780 282.84277344]
[-135.52273560 287.00799561]
[-149.49604797 281.92028809]
[-161.82733154 290.46075439]
[-174.15861511 299.00122070]
[-186.48989868 307.54165649]
[-198.82118225 316.08212280]
[-211.15246582 324.62258911]
[-213.72975159 340.21530151]
[-226.62637329 349.35055542]
[-242.19097900 346.60855103]
[-251.18937683 333.61608887]
[-248.28295898 318.08132935]
[-235.19607544 309.22082520]
[-219.69291687 312.29129028]
[-207.36163330 303.75085449]
[-195.03034973 295.21038818]
[-182.69906616 286.66992188]
[-170.36778259 278.12945557]
[-158.03649902 269.58901978]
[-157.88554382 254.71905518]
[-148.90122986 242.64653015]
[-134.36090088 238.12632751]
[-119.77845764 243.09207153]
[-107.44717407 234.55160522]
[-95.11589050 226.01115417]
[-82.78460693 217.47068787]
[-70.45332336 208.93023682]
[-58.12203979 200.38977051]
[-52.06447220 186.78259277]
[-36.31420898 185.28599548]
[-44.69434357 170.13424683]
[-51.39668655 154.16926575]
[-56.34352493 137.57617188]
[-59.47749710 120.54736328]
[-60.76226425 103.28030396]
[-60.18292999 85.97520447]
[-57.74621201 68.83272552]
[-53.48036194 52.05164337]
[-47.43484497 35.82654572]
[-39.67976379 20.34556198]
[-30.30504227 5.78820467]
[-19.41938019 -7.67672968]
[-7.14900208 -19.89311028]
[6.36381102 -30.71928024]
[-1.79285455 -43.30772018]
[-9.94952011 -55.89616013]
[-18.10618591 -68.48459625]
[-32.94847107 -75.45873260]
[-34.06003189 -91.82016754]
[-20.29738808 -100.73765564]
[-5.81836748 -93.03765869]
[-5.51774645 -76.64126587]
[2.63891912 -64.05282593]
[10.79558468 -51.46438599]
[18.95225143 -38.87594604]
[27.45732307 -43.50200653]
[36.22539520 -47.60781097]
[45.22467804 -51.17847061]
[54.42254639 -54.20104218]
[63.78565216 -56.66456985]
[73.28005219 -58.56011581]
[82.87132263 -59.88081360]
[92.52468872 -60.62187195]
[102.20516205 -60.78060532]
[111.87763214 -60.35644150]
[121.50704956 -59.35091019]
[131.05848694 -57.76766586]
[140.49732971 -55.61244202]
[149.78935242 -52.89305496]
[158.90086365 -49.61936569]
[167.79884338 -45.80323792]
[176.45100403 -41.45851135]
[184.82600403 -36.60093307]
[192.89347839 -31.24811745]
[200.62416077 -25.41946983]
[207.99005127 -19.13611984]
[214.96441650 -12.42085171]
[221.52200317 -5.29800701]
[233.30413818 -14.58139229]
[245.08627319 -23.86477852]
[256.86840820 -33.14816284]
[268.65054321 -42.43154907]
[280.43267822 -51.71493530]
[286.00759888 -67.13739777]
[302.19665527 -69.75386047]
[312.34597778 -56.87272644]
[306.01477051 -41.74500275]
[289.71606445 -39.93279648]
[277.93392944 -30.64941216]
[266.15179443 -21.36602592]
[254.36965942 -12.08264065]
[242.58752441 -2.79925537]
[230.80538940 6.48412991]
[247.32623291 35.57759094]
[257.46881104 67.46012878]
[260.79397583 100.75143433]
[275.77420044 101.52109528]
[290.75445557 102.29075623]
[305.73471069 103.06041718]
[320.71493530 103.83007812]
[333.54150391 94.19375610]
[349.03598022 98.35314941]
[355.31234741 113.11753082]
[347.55587769 127.16092682]
[331.71670532 129.71044922]
[319.94528198 118.81031799]
[304.96502686 118.04065704]
[289.98480225 117.27099609]
[275.00454712 116.50133514]
[260.02432251 115.73167419]
[258.52322388 126.93796539]
[256.23837280 138.01106262]
[253.18101501 148.89622498]
[249.36631775 159.53962708]
[244.81312561 169.88867188]
[239.54393005 179.89215088]
[233.58480835 189.50064087]
[226.96520996 198.66661072]
[219.71788025 207.34475708]
[211.87863159 215.49215698]
[203.48622131 223.06855774]
[194.58215332 230.03646851]
[185.21046448 236.36145020]
[175.41746521 242.01222229]
[165.25158691 246.96086121]
[154.76309204 251.18290710]
[144.00384521 254.65745544]
[133.02702332 257.36734009]
[121.88690948 259.29919434]
[110.63858032 260.44342041]
[99.33765411 260.79437256]
[88.04000092 260.35031128]
[76.80148315 259.11346436]
[65.67766571 257.08993530]
[54.72354126 254.28968811]
[43.99327469 250.72662354]
[33.53991699 246.41831970]
[23.41515541 241.38609314]
[13.66904354 235.65483093]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 43]
[6 41]
[7 40]
[8 39]
[9 38]
[10 37]
[11 36]
[15 32]
[16 31]
[17 30]
[18 29]
[19 28]
[20 27]
[57 68]
[58 67]
[59 66]
[60 65]
[91 106]
[92 105]
[93 104]
[94 103]
[95 102]
[96 101]
[109 123]
[110 122]
[111 121]
[112 120]
[113 119]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
