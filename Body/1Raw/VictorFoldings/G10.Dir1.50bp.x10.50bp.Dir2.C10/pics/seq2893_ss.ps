%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:09 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGAAAAAUUUCGGUUGGGGCGACCUCGGAGCAGAACCCAACCUCCGAGCAGUACAUGCUAAGACxxxxxxxxxxGGCUUUCUCAACUUUUAAAGGAUAACAGCUAUCCAUUGGUCUUAGGCCCCAAAAAUUUUGGUCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[91.14676666 448.68475342]
[93.72745514 429.47564697]
[94.03145599 414.47872925]
[94.33546448 399.48181152]
[94.63946533 384.48489380]
[94.94347382 369.48794556]
[95.24747467 354.49102783]
[95.55147552 339.49411011]
[95.85548401 324.49719238]
[96.15948486 309.50027466]
[81.57073212 306.11444092]
[67.99953461 299.76672363]
[56.04011536 290.73242188]
[46.21670914 279.40447998]
[38.96053314 266.27645874]
[34.59089279 251.92102051]
[33.30111313 236.96493530]
[35.14999008 222.06173706]
[40.05912781 207.86315918]
[47.81624222 194.99061584]
[58.08434296 184.00804138]
[70.41638947 175.39714050]
[84.27471924 169.53630066]
[99.05453491 166.68395996]
[99.35853577 151.68704224]
[99.66254425 136.69012451]
[99.96654510 121.69319916]
[100.27055359 106.69628143]
[97.16817474 113.04428101]
[90.98163605 117.84514618]
[82.39159393 119.99201202]
[72.42479706 118.64537811]
[57.76320267 115.47715759]
[43.10160828 112.30893707]
[28.44001389 109.14071655]
[13.77841854 105.97249603]
[-0.88317651 102.80426788]
[-15.54477215 99.63604736]
[-25.31056023 111.42112732]
[-39.43899536 117.30719757]
[-54.68346786 115.94169617]
[-67.54091644 107.63839722]
[-75.05677795 94.30534363]
[-75.50397491 79.00637054]
[-68.77973938 65.25707245]
[-56.42926025 56.21693039]
[-41.29057312 53.96331024]
[-26.84244728 59.01407623]
[-16.40495300 70.20859528]
[-12.37655067 84.97445679]
[2.28504467 88.14267731]
[16.94664001 91.31089783]
[31.60823441 94.47911835]
[46.26982880 97.64733887]
[60.93142700 100.81555939]
[75.59301758 103.98377991]
[83.52748108 91.25411987]
[74.22615814 79.48613739]
[58.52325439 76.20005035]
[51.43077087 61.80990601]
[58.38946152 47.35458755]
[74.06120300 43.92298126]
[86.42398834 54.14751816]
[85.99414062 70.18481445]
[95.29546356 81.95279694]
[110.27620697 82.71253204]
[120.72035980 71.94593048]
[131.16450500 61.17932510]
[141.60865784 50.41271973]
[152.05281067 39.64611435]
[162.49694824 28.87951279]
[172.94110107 18.11290932]
[158.44943237 21.98476982]
[143.45741272 22.47437286]
[128.74400330 19.55627632]
[115.07360840 13.38209343]
[103.15650940 4.27260876]
[93.61185455 -7.29889011]
[86.93554688 -20.73119736]
[83.47445679 -35.32643127]
[83.40840149 -50.32628632]
[86.74082184 -64.95143127]
[93.29857635 -78.44201660]
[102.74095154 -90.09712982]
[114.57736206 -99.31121063]
[128.19284058 -105.60554504]
[142.87998962 -108.65310669]
[157.87573242 -108.29556274]
[172.40093994 -104.55147552]
[185.70097351 -97.61537933]
[197.08479309 -87.84764862]
[205.96095276 -75.75576019]
[211.86830139 -61.96796417]
[214.49989319 -47.20061493]
[213.71903992 -32.22095108]
[209.56626892 -17.80726051]
[202.25737000 -4.70840693]
[192.17195129 6.39514732]
[206.52880859 2.04996943]
[220.88566589 -2.29520798]
[231.85281372 -13.69837761]
[246.27572632 -9.97963810]
[260.63256836 -14.32481575]
[274.98944092 -18.66999435]
[289.34631348 -23.01517105]
[303.70315552 -27.36034966]
[312.51196289 -40.76873398]
[328.49981689 -42.09819412]
[339.40225220 -30.32888794]
[336.85583496 -14.48921394]
[322.81393433 -6.73001671]
[308.04833984 -13.00348854]
[293.69146729 -8.65831089]
[279.33462524 -4.31313372]
[264.97775269 0.03204399]
[250.62089539 4.37722158]
[240.68064880 15.46959496]
[225.23085022 12.06165218]
[210.87397766 16.40682983]
[196.51712036 20.75200653]
[183.70770264 28.55705833]
[173.26354980 39.32366180]
[162.81941223 50.09026337]
[152.37525940 60.85686874]
[141.93110657 71.62347412]
[131.48696899 82.39007568]
[121.04281616 93.15667725]
[115.26747131 107.00028229]
[114.96346283 121.99720764]
[114.65946198 136.99412537]
[114.35545349 151.99104309]
[114.05145264 166.98796082]
[128.70353699 170.43693542]
[142.31297302 176.85456848]
[154.28591919 185.95814514]
[164.10050964 197.34782410]
[171.32958984 210.52415466]
[175.65928650 224.91001892]
[176.90267944 239.87590027]
[175.00785828 254.76742554]
[170.06004333 268.93399048]
[162.27780151 281.75717163]
[152.00340271 292.67770386]
[139.68768311 301.21990967]
[125.87039185 307.01242065]
[111.15640259 309.80429077]
[110.85240173 324.80120850]
[110.54840088 339.79812622]
[110.24439240 354.79504395]
[109.94039154 369.79196167]
[109.63638306 384.78887939]
[109.33238220 399.78579712]
[109.02837372 414.78271484]
[108.72437286 429.77963257]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 154]
[3 153]
[4 152]
[5 151]
[6 150]
[7 149]
[8 148]
[9 147]
[10 146]
[24 132]
[25 131]
[26 130]
[27 129]
[28 128]
[32 56]
[33 55]
[34 54]
[35 53]
[36 52]
[37 51]
[38 50]
[57 65]
[58 64]
[66 127]
[67 126]
[68 125]
[69 124]
[70 123]
[71 122]
[72 121]
[98 120]
[99 119]
[100 118]
[102 116]
[103 115]
[104 114]
[105 113]
[106 112]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
