%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:03 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGUAACAGCCCAAUAUCUACAAUCAACCAACAAGUCAUUAUUACCCUCACUGUCAACCCAACACxxxxxxxxxxAUACUCAAUUGAUCCAAUAACUUGACCAACGGAACAAGUUACCCUAGGGAUAACAGCGCAAUCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[95.33634186 453.29544067]
[95.33634186 438.29544067]
[95.33634186 423.29544067]
[95.33634186 408.29544067]
[95.33634186 393.29544067]
[95.33634186 378.29544067]
[95.33634186 363.29544067]
[95.33634186 348.29544067]
[95.33634186 333.29544067]
[95.33634186 318.29544067]
[80.25527191 315.37060547]
[66.02476501 309.57162476]
[53.18709183 301.11746216]
[42.23183441 290.32846069]
[33.57719040 277.61386108]
[27.55404091 263.45663452]
[24.39327049 248.39482117]
[24.21693420 233.00131226]
[27.03354645 217.86193848]
[32.73767853 203.55320740]
[41.11391068 190.62036133]
[51.84496689 179.55659485]
[64.52372742 170.78422546]
[78.66867828 164.63861084]
[93.74220276 161.35527039]
[93.43819427 146.35835266]
[93.13419342 131.36143494]
[74.66151428 119.71395111]
[67.91316223 98.94466400]
[76.01165771 78.66368866]
[67.44263458 66.35224152]
[58.87361145 54.04078674]
[50.30458832 41.72933578]
[41.73556519 29.41788483]
[28.55710220 36.61339951]
[14.67791271 42.34186172]
[0.26071921 46.53611755]
[-14.52544403 49.14698410]
[-29.50721550 50.14385223]
[-44.50894165 49.51503372]
[-59.35474014 47.26790237]
[-73.87054443 43.42880630]
[-87.88616180 38.04275131]
[-101.23728180 31.17289162]
[-113.76734924 22.89977074]
[-125.32946777 13.32038593]
[-135.78808594 2.54705119]
[-145.02055359 -9.29392147]
[-152.91865540 -22.06370163]
[-159.38977051 -35.61257172]
[-164.35803223 -49.78167725]
[-167.76519775 -64.40489197]
[-169.57131958 -79.31077576]
[-169.75520325 -94.32454681]
[-168.31471252 -109.27018738]
[-165.26673889 -123.97247314]
[-160.64700317 -138.25901794]
[-154.50967407 -151.96231079]
[-146.92671204 -164.92170715]
[-137.98703003 -176.98526001]
[-127.79542542 -188.01152039]
[-116.47139740 -197.87121582]
[-104.14772034 -206.44876099]
[-90.96887207 -213.64355469]
[-77.08937073 -219.37127686]
[-62.67195129 -223.56475830]
[-47.88565063 -226.17483521]
[-32.90382385 -227.17089844]
[-17.90213013 -226.54125977]
[-3.05645561 -224.29333496]
[11.45914173 -220.45346069]
[25.47447395 -215.06665039]
[38.82521820 -208.19607544]
[51.35484695 -199.92227173]
[62.91645050 -190.34226990]
[73.37448120 -179.56837463]
[82.60631561 -167.72689819]
[90.50373077 -154.95669556]
[96.97411346 -141.40747070]
[101.94161987 -127.23810577]
[105.34799957 -112.61470032]
[107.15331268 -97.70873260]
[107.33639526 -82.69494629]
[105.89510345 -67.74938202]
[102.84632874 -53.04726410]
[98.22583008 -38.76097107]
[92.08776093 -25.05799866]
[84.50410461 -12.09901047]
[75.56376648 -0.03594278]
[65.37157440 10.98977089]
[54.04701614 20.84886169]
[62.61603928 33.16031265]
[71.18505859 45.47176361]
[79.75408173 57.78321457]
[88.32310486 70.09466553]
[97.77648926 67.97290802]
[107.43237305 68.76799011]
[116.41136169 72.40750122]
[123.89569092 78.55997467]
[129.20375061 86.66509247]
[143.92654419 83.79466248]
[158.64933777 80.92424011]
[173.37213135 78.05381775]
[188.09492493 75.18338776]
[202.81771851 72.31296539]
[217.54051208 69.44254303]
[231.10971069 57.03460693]
[247.47126770 63.31056976]
[262.13287354 60.14234543]
[276.33758545 50.88695526]
[289.16351318 61.97440338]
[282.05996704 77.36841583]
[265.30108643 74.80393982]
[250.63948059 77.97216034]
[243.79490662 87.99064636]
[231.56161499 90.72407532]
[220.41093445 84.16533661]
[205.68814087 87.03575897]
[190.96534729 89.90618134]
[176.24255371 92.77661133]
[161.51976013 95.64703369]
[146.79696655 98.51745605]
[132.07417297 101.38788605]
[130.03355408 111.34302521]
[124.98372650 120.16165161]
[117.43064880 126.96017456]
[108.13111115 131.05743408]
[108.43511200 146.05435181]
[108.73912048 161.05126953]
[123.19520569 163.51898193]
[136.94316101 168.61219788]
[149.51069641 176.15428162]
[160.46635437 185.88455200]
[169.43437195 197.46723938]
[176.10752869 210.50303650]
[180.25765991 224.54290771]
[181.74349976 239.10357666]
[180.51548767 253.68411255]
[176.61735535 267.78317261]
[170.18464661 280.91629028]
[161.43995667 292.63241577]
[150.68527222 302.52957153]
[138.29148865 310.26843262]
[124.68568420 315.58419800]
[110.33634186 318.29544067]
[110.33634186 333.29544067]
[110.33634186 348.29544067]
[110.33634186 363.29544067]
[110.33634186 378.29544067]
[110.33634186 393.29544067]
[110.33634186 408.29544067]
[110.33634186 423.29544067]
[110.33634186 438.29544067]
[110.33634186 453.29544067]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 154]
[2 153]
[3 152]
[4 151]
[5 150]
[6 149]
[7 148]
[8 147]
[9 146]
[10 145]
[25 129]
[26 128]
[27 127]
[30 95]
[31 94]
[32 93]
[33 92]
[34 91]
[100 123]
[101 122]
[102 121]
[103 120]
[104 119]
[105 118]
[106 117]
[108 114]
[109 113]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
