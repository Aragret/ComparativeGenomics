%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:30 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGGCCCAAUAUCUACAAUCAACCAACAAGUCAUUAUUACCCUCACUGUCAACCCAACACAGGxxxxxxxxxxCCUGCUUGCAACUAUAGCAACAGCCUUCAUAGGCUAUGUCCUCCCGUGAGGCCAAAUAUCCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[-51.07203293 487.88656616]
[-48.48103333 468.67883301]
[-48.16897583 453.68206787]
[-47.85691833 438.68533325]
[-47.54486465 423.68856812]
[-47.23280716 408.69180298]
[-46.92074966 393.69506836]
[-46.60869598 378.69830322]
[-46.29663849 363.70153809]
[-45.98458099 348.70480347]
[-45.67252731 333.70803833]
[-55.06856918 330.78588867]
[-63.59048080 325.86636353]
[-70.81987762 319.19100952]
[-76.40182495 311.08752441]
[-90.62860870 315.84133911]
[-104.85538483 320.59515381]
[-119.08216095 325.34896851]
[-123.84559631 339.99874878]
[-136.17774963 348.93020630]
[-151.22640991 348.88796997]
[-163.22102356 340.09777832]
[-177.44779968 344.85159302]
[-178.87155151 360.01379395]
[-186.34489441 373.28289795]
[-198.57302856 382.35992432]
[-213.43737793 385.67224121]
[-228.36256409 382.64593506]
[-240.76274109 373.80538940]
[-248.48948669 360.68222046]
[-250.20410156 345.55014038]
[-245.60952759 331.03085327]
[-235.50177002 319.63992310]
[-221.63209534 313.35089111]
[-206.40348816 313.25335693]
[-192.45440674 319.36425781]
[-182.20161438 330.62481689]
[-167.97483826 325.87100220]
[-163.67407227 311.63577271]
[-151.67375183 302.55523682]
[-136.44952393 302.27883911]
[-123.83597565 311.12219238]
[-109.60919952 306.36837769]
[-95.38242340 301.61456299]
[-81.15563965 296.86074829]
[-78.61917114 273.49185181]
[-64.47801971 254.61123657]
[-42.61243820 245.54081726]
[-19.09455681 248.89114380]
[-10.84226704 236.36518860]
[-2.58997774 223.83921814]
[5.66231155 211.31326294]
[13.91460037 198.78730774]
[14.97496891 191.42379761]
[22.47113419 186.08906555]
[15.24826717 176.08709717]
[11.45871162 164.32041931]
[11.48715591 151.93405151]
[15.34597874 140.13822937]
[22.67256165 130.09019470]
[32.76330566 122.78062439]
[44.64118958 118.93596649]
[57.15034485 118.94629669]
[69.06855011 122.82576752]
[78.33349609 111.02912903]
[87.59844971 99.23248291]
[92.50000000 85.05592346]
[92.50000000 70.05592346]
[92.50000000 55.05592728]
[92.50000000 40.05592728]
[79.15887451 32.44607544]
[71.42390442 19.17709351]
[71.37576294 3.81827712]
[79.02739716 -9.49893188]
[92.32055664 -17.19227219]
[107.67944336 -17.19227219]
[120.97260284 -9.49893188]
[128.62423706 3.81827712]
[128.57609558 19.17709351]
[120.84112549 32.44607544]
[107.50000000 40.05592728]
[107.50000000 55.05592728]
[107.50000000 70.05592346]
[107.50000000 85.05592346]
[121.51734161 90.39766693]
[135.53343201 95.73895264]
[145.51615906 84.54319000]
[155.49888611 73.34741974]
[165.48159790 62.15165329]
[163.05122375 46.70409012]
[171.16319275 33.33509445]
[185.98728943 28.35710526]
[200.52401733 34.12057114]
[207.90959167 47.90416336]
[204.65675354 63.19968796]
[192.30140686 72.78507233]
[176.67736816 72.13438416]
[166.69464111 83.33014679]
[156.71191406 94.52590942]
[146.72918701 105.72167969]
[150.45664978 112.22983551]
[161.63900757 131.75430298]
[176.34696960 128.80882263]
[191.05493164 125.86333466]
[205.76289368 122.91784668]
[220.47085571 119.97236633]
[232.42231750 108.74318695]
[248.04254150 113.73727417]
[251.26277161 129.81713867]
[238.77030945 140.44120789]
[223.41633606 134.68032837]
[208.70837402 137.62580872]
[194.00041199 140.57128906]
[179.29244995 143.51676941]
[164.58448792 146.46226501]
[118.68054199 139.88159180]
[99.39508820 108.49743652]
[90.13014221 120.29407501]
[80.86518860 132.09071350]
[89.21285248 147.90596008]
[89.84864044 165.72514343]
[82.69168854 181.99885559]
[69.20878601 193.50540161]
[52.11407089 197.98863220]
[34.82270432 194.60014343]
[26.44056320 207.03959656]
[18.18827438 219.56555176]
[9.93598461 232.09152222]
[1.68369508 244.61747742]
[-6.56859398 257.14343262]
[-0.57742119 264.07452393]
[3.88046670 272.06506348]
[6.62448215 280.78161621]
[7.54542828 289.86169434]
[6.60983515 298.92855835]
[3.86115527 307.60705566]
[-0.58223397 315.53903198]
[-6.53211927 322.39813232]
[-13.73842144 327.90325928]
[-21.89970207 331.83007812]
[-30.67577171 334.02011108]
[-30.98782921 349.01684570]
[-31.29988480 364.01361084]
[-31.61194038 379.01037598]
[-31.92399788 394.00711060]
[-32.23605347 409.00387573]
[-32.54811096 424.00061035]
[-32.86016464 438.99737549]
[-33.17222214 453.99414062]
[-33.48427963 468.99087524]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 150]
[3 149]
[4 148]
[5 147]
[6 146]
[7 145]
[8 144]
[9 143]
[10 142]
[11 141]
[15 45]
[16 44]
[17 43]
[18 42]
[22 38]
[23 37]
[49 130]
[50 129]
[51 128]
[52 127]
[53 126]
[55 125]
[64 119]
[65 118]
[66 117]
[67 84]
[68 83]
[69 82]
[70 81]
[86 100]
[87 99]
[88 98]
[89 97]
[102 115]
[103 114]
[104 113]
[105 112]
[106 111]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
