%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:33:58 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGGACCUGUAUGAAUGGCUCCACGAGGGUUCAGCUGUCUCUUACUUUUAACCAGUGAAAUUGxxxxxxxxxxUCACCUUUCAUGAUCACGCCCUCAUAAUCAUUUUCCUUAUCUGCUUCCUAGUCCUGUAUGCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[82.39886475 480.05081177]
[84.98986053 460.84307861]
[85.30191803 445.84634399]
[85.61397552 430.84957886]
[85.92603302 415.85281372]
[86.23809052 400.85607910]
[86.55014038 385.85931396]
[86.86219788 370.86254883]
[87.17425537 355.86581421]
[87.48631287 340.86904907]
[87.79837036 325.87231445]
[73.26602173 322.26498413]
[59.89440918 315.51083374]
[48.35560608 305.94577026]
[39.23036575 294.04696655]
[32.97888565 280.40924072]
[29.91762733 265.71524048]
[30.20326233 250.70123291]
[33.82468033 236.12026978]
[40.60338211 222.70440674]
[50.20226669 211.12791443]
[62.14240646 201.97346497]
[75.82691956 195.70271301]
[90.57084656 192.63307190]
[90.88290405 177.63632202]
[78.92582703 168.79515076]
[74.41420746 154.43864441]
[79.27819061 140.00967407]
[91.85105896 131.10859680]
[92.16311646 116.11184692]
[79.09605408 96.83132172]
[96.31410217 75.91159058]
[91.41255188 61.73503494]
[86.51100159 47.55847549]
[81.60945129 33.38191986]
[76.70790100 19.20536041]
[71.80635071 5.02880239]
[66.31932068 -8.93158722]
[60.25630569 -22.65164185]
[54.19329453 -36.37169647]
[42.51927185 -33.11156082]
[28.36557770 -38.58893585]
[15.92613792 -46.97108078]
[3.48669767 -55.35322189]
[-8.95215607 -46.65613556]
[-23.69372368 -43.04357147]
[-38.74433136 -45.00410461]
[-52.06850433 -52.27258682]
[-61.86425781 -63.86601639]
[-66.80680084 -78.21647644]
[-66.22769165 -93.38318634]
[-60.20525360 -107.31497192]
[-49.55396652 -118.12767029]
[-35.71433258 -124.35896301]
[-20.55804825 -125.16610718]
[-6.13487625 -120.43994904]
[5.60456705 -110.81966400]
[13.07261848 -97.60631561]
[15.25928593 -82.58689880]
[11.86884117 -67.79266357]
[24.30828094 -59.41051865]
[36.74772263 -51.02837753]
[50.13400650 -57.79648972]
[50.75798416 -72.78350830]
[51.38196182 -87.77052307]
[52.00593948 -102.75753784]
[52.62991714 -117.74455261]
[38.44294357 -122.99669647]
[26.57459068 -132.37739563]
[18.18759537 -144.96760559]
[14.10363102 -159.53387451]
[14.72280312 -174.64916992]
[19.98445129 -188.83261108]
[29.37309265 -200.69468689]
[41.96892548 -209.07324219]
[56.53793335 -213.14744568]
[71.65280151 -212.51814270]
[85.83271790 -207.24699402]
[97.68849182 -197.85040283]
[106.05860901 -185.24896240]
[110.12304688 -170.67721558]
[109.48361969 -155.56277466]
[104.20296478 -141.38639832]
[94.79843903 -129.53692627]
[82.19139099 -121.17525482]
[67.61693573 -117.12057495]
[66.99295807 -102.13356018]
[66.36898041 -87.14654541]
[65.74500275 -72.15953064]
[65.12102509 -57.17251205]
[67.91334534 -42.43470764]
[73.97635651 -28.71465492]
[80.03937531 -14.99460030]
[82.67327881 -13.86771011]
[85.00389099 -11.59565830]
[86.57984161 -8.29440594]
[87.00238037 -4.24563885]
[85.98291016 0.12725146]
[90.88446045 14.30380917]
[95.78601074 28.48036766]
[100.68756104 42.65692520]
[105.58911133 56.83348465]
[110.49066162 71.01004028]
[122.93010712 79.39218140]
[137.90982056 78.61234283]
[152.88952637 77.83249664]
[167.86924744 77.05265045]
[175.43444824 63.60752487]
[189.07835388 56.40702438]
[204.44725037 57.74879456]
[216.63699341 67.20468903]
[221.75785828 81.75736237]
[218.17581177 96.76310730]
[207.03385925 107.43364716]
[191.88735962 110.36405945]
[177.56951904 104.61924744]
[168.64909363 92.03236389]
[153.66937256 92.81221008]
[138.68966675 93.59205627]
[123.70994568 94.37190247]
[118.91376495 109.44907379]
[107.15987396 116.42390442]
[106.84781647 131.42065430]
[119.03953552 140.83703613]
[123.29907990 155.45584106]
[118.19416046 169.61224365]
[105.87965393 177.94837952]
[105.56759644 192.94512939]
[120.17106628 196.62544250]
[133.58288574 203.46002197]
[145.13186646 213.10324097]
[154.24089050 225.06900024]
[160.45564270 238.75523376]
[163.46737671 253.47422791]
[163.12820435 268.48712158]
[159.45834351 283.04104614]
[152.64497375 296.40692139]
[143.03265381 307.91583252]
[131.10594177 316.99264526]
[117.46495056 323.18469238]
[102.79512024 326.18435669]
[102.48306274 341.18112183]
[102.17101288 356.17785645]
[101.85895538 371.17462158]
[101.54689789 386.17135620]
[101.23484039 401.16812134]
[100.92278290 416.16488647]
[100.61072540 431.16162109]
[100.29867554 446.15838623]
[99.98661804 461.15515137]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 150]
[3 149]
[4 148]
[5 147]
[6 146]
[7 145]
[8 144]
[9 143]
[10 142]
[11 141]
[24 128]
[25 127]
[29 123]
[30 122]
[32 103]
[33 102]
[34 101]
[35 100]
[36 99]
[37 98]
[38 93]
[39 92]
[40 91]
[42 62]
[43 61]
[44 60]
[63 90]
[64 89]
[65 88]
[66 87]
[67 86]
[104 120]
[105 119]
[106 118]
[107 117]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
