%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:36 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGUUAUUGGCUCAACUUUCCUCACUAUCUGCUUCAUCCGCCAACUAAUAUUUCACUUUACAUxxxxxxxxxxCAUAUAUCCAAACAACAAAGCAUAAUAUUUCGCCCACUAAGCCAAUCACUUUAUUGACUCCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[103.97268677 263.05023193]
[103.66062927 248.05348206]
[103.34857178 233.05673218]
[103.03651428 218.05996704]
[102.72446442 203.06321716]
[102.41240692 188.06646729]
[102.10034943 173.06971741]
[101.78829193 158.07295227]
[101.47623444 143.07620239]
[99.45390320 128.21315002]
[95.74774170 113.67822266]
[86.12015533 103.53912354]
[89.71732330 90.02793884]
[86.01116180 75.49300385]
[82.30500031 60.95806885]
[78.59883881 46.42313385]
[74.89267731 31.88819695]
[71.18651581 17.35326004]
[67.48035431 2.81832480]
[52.87880325 3.32206535]
[38.50006485 0.76603419]
[24.97794533 -4.73451996]
[12.90795135 -12.93461323]
[2.82106566 -23.47043800]
[-4.83961201 -35.87549591]
[-9.73832893 -49.60126495]
[-11.66139412 -64.04144287]
[-10.52649879 -78.55873871]
[-6.38623667 -92.51297760]
[0.57432979 -105.28937531]
[10.04593658 -116.32556152]
[21.60886192 -125.13639069]
[34.75152206 -131.33523560]
[31.34854317 -145.94412231]
[27.94556618 -160.55300903]
[15.05336380 -173.65916443]
[20.72415161 -190.23751831]
[17.01799011 -204.77246094]
[13.31182861 -219.30738831]
[9.60566711 -233.84233093]
[5.89950609 -248.37725830]
[-8.96557426 -246.26145935]
[-23.97227478 -245.76528931]
[-38.94464874 -246.89456177]
[-53.70715332 -249.63603210]
[-68.08670807 -253.95758057]
[-81.91471100 -259.80850220]
[-95.02904510 -267.12023926]
[-107.27595520 -275.80703735]
[-118.51184082 -285.76705933]
[-128.60498047 -296.88354492]
[-137.43701172 -309.02612305]
[-144.90441895 -322.05245972]
[-150.91961670 -335.80978394]
[-155.41210938 -350.13687134]
[-158.32920837 -364.86566162]
[-159.63671875 -379.82351685]
[-159.31929016 -394.83508301]
[-157.38067627 -409.72430420]
[-153.84359741 -424.31661987]
[-148.74949646 -438.44097900]
[-142.15814209 -451.93176270]
[-134.14677429 -464.63079834]
[-124.80935669 -476.38919067]
[-114.25534058 -487.06909180]
[-102.60848236 -496.54525757]
[-90.00532532 -504.70660400]
[-76.59363556 -511.45745850]
[-62.53066254 -516.71862793]
[-47.98128891 -520.42846680]
[-33.11609268 -522.54345703]
[-18.10936737 -523.03887939]
[-3.13705420 -521.90875244]
[11.62530327 -519.16650391]
[26.00462341 -514.84417725]
[39.83231354 -508.99252319]
[52.94625854 -501.68008423]
[65.19269562 -492.99261475]
[76.42804718 -483.03198242]
[86.52058411 -471.91497803]
[95.35196686 -459.77191162]
[102.81866455 -446.74517822]
[108.83313751 -432.98751831]
[113.32485199 -418.66021729]
[116.24115753 -403.93124390]
[117.54785919 -388.97329712]
[117.22962952 -373.96179199]
[115.29021454 -359.07266235]
[111.75234222 -344.48052979]
[106.65749359 -330.35644531]
[100.06539917 -316.86599731]
[92.05335999 -304.16741943]
[82.71530151 -292.40951538]
[72.16071320 -281.73019409]
[60.51334381 -272.25463867]
[47.90974808 -264.09396362]
[34.49769592 -257.34384155]
[20.43444252 -252.08341980]
[24.14060402 -237.54849243]
[27.84676361 -223.01354980]
[31.55292511 -208.47862244]
[35.25908661 -193.94367981]
[45.52545547 -187.46997070]
[48.70522308 -175.34115601]
[42.55445862 -163.95599365]
[45.95743561 -149.34709167]
[49.36041260 -134.73820496]
[64.78409576 -134.90066528]
[79.86728668 -131.64059448]
[93.85973358 -125.11701965]
[106.06470490 -115.65135193]
[115.87374115 -103.71160126]
[122.79696655 -89.88919830]
[126.48754883 -74.86973572]
[126.75907898 -59.39891434]
[123.59498596 -44.24557877]
[117.14949036 -30.16345978]
[107.74014282 -17.85371017]
[95.83213043 -7.92997932]
[82.01528931 -0.88783652]
[85.72145081 13.64709949]
[89.42761230 28.18203545]
[93.13377380 42.71697235]
[96.83993530 57.25190735]
[100.54609680 71.78684235]
[104.25225830 86.32177734]
[113.87984467 96.46087646]
[110.28267670 109.97206116]
[113.98883820 124.50699615]
[119.76335907 110.66304779]
[131.22760010 100.98983002]
[145.84577942 97.62696838]
[160.38449097 101.31830597]
[171.62789917 111.24733734]
[177.08908081 125.21786499]
[175.56004333 140.13972473]
[167.37902832 152.71235657]
[154.35559082 160.15480042]
[139.37037659 160.82084656]
[125.73800659 154.56318665]
[116.47299194 142.76414490]
[116.78504944 157.76089478]
[117.09709930 172.75765991]
[117.40915680 187.75440979]
[117.72121429 202.75115967]
[118.03327179 217.74790955]
[118.34532928 232.74467468]
[118.65738678 247.74142456]
[118.96943665 262.73818970]
[121.56044006 281.94589233]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 149]
[2 148]
[3 147]
[4 146]
[5 145]
[6 144]
[7 143]
[8 142]
[9 141]
[10 129]
[11 128]
[13 126]
[14 125]
[15 124]
[16 123]
[17 122]
[18 121]
[19 120]
[33 107]
[34 106]
[35 105]
[37 102]
[38 101]
[39 100]
[40 99]
[41 98]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
