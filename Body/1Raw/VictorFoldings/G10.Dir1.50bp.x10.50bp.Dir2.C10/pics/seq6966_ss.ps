%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:45 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCAGUGCUCUGAGCCCUAGGAUUCAUCUUUCUUUUCACCGUAGGUGGCCUGACUGGCAUUGUxxxxxxxxxxGUCUAAACCAAACCACUUUCACCGCUACACGACCGGGGGUAUACUACGGUCAAUGCUCUGACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[82.88689423 294.73721313]
[82.88689423 279.73721313]
[82.88689423 264.73721313]
[82.88689423 249.73721313]
[82.88689423 234.73721313]
[82.88689423 219.73721313]
[82.88689423 204.73721313]
[82.88689423 189.73721313]
[82.88689423 174.73721313]
[82.88689423 159.73721313]
[68.64019775 155.04341125]
[59.72404861 167.10585022]
[50.80789948 179.16827393]
[49.49847031 195.51507568]
[34.57289505 202.30912781]
[21.38532066 192.56130981]
[23.50199699 176.29933167]
[38.74546814 170.25213623]
[47.66161728 158.18969727]
[56.57777023 146.12727356]
[47.91116333 133.88430786]
[33.57110214 138.28460693]
[33.09328461 153.41902161]
[27.72488785 167.57737732]
[18.04823685 179.22389221]
[5.11298227 187.09523010]
[-9.67775726 190.33755493]
[-24.71959305 188.59919739]
[-38.38089752 182.06869507]
[-49.17979813 171.45443726]
[-55.94490433 157.90777588]
[-57.94239807 142.89814758]
[-54.95559692 128.05369568]
[-47.30849075 114.98463440]
[-35.83057785 105.10858917]
[-21.76690292 99.49684143]
[-6.64298058 98.75811768]
[7.90065527 102.97254181]
[20.28642082 111.68296814]
[29.17080116 123.94454956]
[43.51086044 119.54425049]
[42.70705414 93.34158325]
[53.04037476 70.26430511]
[71.70118713 54.61295700]
[94.42328644 48.91299438]
[116.44179535 53.52838516]
[123.53820038 40.31320190]
[130.63459778 27.09801865]
[137.73100281 13.88283539]
[144.82740784 0.66765231]
[151.92381287 -12.54753017]
[159.02021790 -25.76271439]
[153.66108704 -42.38399124]
[161.79373169 -57.45686340]
[177.97856140 -61.92390060]
[177.36596680 -77.73324585]
[190.04603577 -85.54765320]
[196.86961365 -98.90574646]
[193.72373962 -128.73214722]
[196.17666626 -143.53022766]
[198.62959290 -158.32830811]
[190.65556335 -176.79835510]
[203.43125916 -191.26483154]
[205.27458191 -206.15113831]
[207.11790466 -221.03744507]
[199.80151367 -231.70861816]
[201.68252563 -244.10350037]
[211.20573425 -251.62484741]
[213.35432434 -266.47018433]
[215.50289917 -281.31549072]
[201.83889771 -287.77975464]
[190.68844604 -297.98559570]
[183.04304504 -311.02548218]
[179.58250427 -325.73995972]
[180.61453247 -340.82064819]
[186.04736328 -354.92651367]
[195.39793396 -366.80331421]
[207.83476257 -375.39495850]
[222.25199890 -379.93750000]
[237.36766052 -380.02703857]
[251.83769226 -375.65554810]
[264.37539673 -367.21179199]
[273.86596680 -355.44656372]
[279.46548462 -341.40600586]
[280.67602539 -326.33862305]
[277.39001465 -311.58419800]
[269.89956665 -298.45465088]
[258.87075806 -288.11749268]
[245.28428650 -281.49185181]
[230.34822083 -279.16693115]
[228.19964600 -264.32159424]
[226.05105591 -249.47627258]
[233.44219971 -233.58868408]
[222.00421143 -219.19412231]
[220.16088867 -204.30781555]
[218.31756592 -189.42150879]
[225.34342957 -181.89857483]
[227.07206726 -171.52775574]
[222.68635559 -161.73033142]
[213.42767334 -155.87538147]
[210.97474670 -141.07730103]
[208.52182007 -126.27922821]
[219.29049683 -115.83721924]
[234.00601196 -118.74468994]
[248.72154236 -121.65216064]
[254.29264832 -136.03848267]
[266.77066040 -145.11059570]
[282.17385864 -145.97360229]
[295.58715820 -138.35214233]
[302.73043823 -124.67817688]
[301.32427979 -109.31502533]
[291.81738281 -97.16502380]
[277.24337769 -92.10517883]
[262.25277710 -95.75007629]
[251.62901306 -106.93663788]
[236.91349792 -104.02916718]
[222.19796753 -101.12169647]
[210.22770691 -92.08217621]
[203.40412903 -78.72407532]
[204.50480652 -63.87019348]
[191.33666992 -55.10032654]
[196.98995972 -43.48169327]
[194.86851501 -30.53842354]
[185.52848816 -21.05448341]
[172.23539734 -18.66630936]
[165.13899231 -5.45112705]
[158.04258728 7.76405573]
[150.94618225 20.97923851]
[143.84979248 34.19441986]
[136.75338745 47.40960312]
[129.65698242 60.62478638]
[137.90417480 67.13539886]
[144.71046448 75.37941742]
[149.71090698 85.03537750]
[152.61282349 95.70500946]
[153.21186829 106.92959595]
[151.40451050 118.20963287]
[147.19596863 129.02708435]
[140.70338440 138.86912537]
[132.15359497 147.25239563]
[121.87588501 153.74645996]
[110.28954315 157.99552917]
[97.88689423 159.73721313]
[97.88689423 174.73721313]
[97.88689423 189.73721313]
[97.88689423 204.73721313]
[97.88689423 219.73721313]
[97.88689423 234.73721313]
[97.88689423 249.73721313]
[97.88689423 264.73721313]
[97.88689423 279.73721313]
[97.88689423 294.73721313]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 152]
[2 151]
[3 150]
[4 149]
[5 148]
[6 147]
[7 146]
[8 145]
[9 144]
[10 143]
[11 20]
[12 19]
[13 18]
[21 41]
[22 40]
[46 131]
[47 130]
[48 129]
[49 128]
[50 127]
[51 126]
[52 125]
[55 121]
[57 119]
[58 118]
[59 102]
[60 101]
[61 100]
[63 96]
[64 95]
[65 94]
[68 92]
[69 91]
[70 90]
[103 117]
[104 116]
[105 115]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
