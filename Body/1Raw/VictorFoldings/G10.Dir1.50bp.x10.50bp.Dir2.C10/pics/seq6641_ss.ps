%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:40 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGAACCCCCUGCCAUAACCCAAUACCAAACGCCCCUCUUCGUCUGAUCCGUCCUAAUCACAGCAxxxxxxxxxxUACUCUUAAAACUAGGCGGCUAUGGUAUAAUACGCCUCACACUCAUUCUCAACCCCCUGACACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[33.46003723 256.59164429]
[26.99093819 270.12496948]
[28.02005196 285.91265869]
[15.55036259 294.05859375]
[9.08126545 307.59191895]
[2.61216712 321.12524414]
[-3.85693049 334.65856934]
[-10.32602882 348.19186401]
[-16.79512596 361.72518921]
[-18.17098236 378.62322998]
[-34.78950500 381.97897339]
[-42.61457825 366.93887329]
[-30.32844734 355.25610352]
[-23.85935020 341.72277832]
[-17.39025116 328.18945312]
[-10.92115402 314.65612793]
[-4.45205593 301.12280273]
[2.01704216 287.58950806]
[0.52521539 272.76977539]
[13.45761776 263.65588379]
[19.92671585 250.12254333]
[8.64060783 243.53387451]
[-2.10650945 236.09838867]
[-12.25123024 227.85997009]
[-21.73370552 218.86721802]
[-30.49799156 209.17318726]
[-38.49237823 198.83506775]
[-45.66970825 187.91386414]
[-51.98763275 176.47398376]
[-57.40887833 164.58293152]
[-61.90146255 152.31086731]
[-65.43888092 139.73017883]
[-68.00025940 126.91510773]
[-69.57049561 113.94123840]
[-70.14031219 100.88511658]
[-69.70636749 87.82378387]
[-68.27120209 74.83427429]
[-82.99399567 71.96385193]
[-97.71678925 69.09342957]
[-108.97900391 79.76779938]
[-124.36889648 81.75039673]
[-137.96875000 74.27886963]
[-144.54913330 60.22618103]
[-141.57975769 44.99586868]
[-130.20242310 34.44429779]
[-114.79191589 32.62876892]
[-101.27391815 40.24738312]
[-94.84636688 54.37063217]
[-80.12357330 57.24105835]
[-65.40077209 60.11148071]
[-47.91921234 15.92612362]
[-18.90012169 -21.70156860]
[-28.89936638 -32.88258362]
[-38.89861298 -44.06359482]
[-48.89785767 -55.24460983]
[-64.32111359 -53.54085922]
[-77.78352356 -61.25728607]
[-84.10851288 -75.42676544]
[-80.86399078 -90.60084534]
[-69.29754639 -100.94477844]
[-53.85671616 -102.48111725]
[-40.47880936 -94.61911011]
[-34.30790710 -80.38184357]
[-37.71684647 -65.24385834]
[-27.71759987 -54.06284332]
[-17.71835327 -42.88182831]
[-7.71910667 -31.70081329]
[0.93201780 -38.32586670]
[9.98947334 -44.38357162]
[19.41610909 -49.84907913]
[29.17326355 -54.69997787]
[39.22091675 -58.91637039]
[49.51785278 -62.48096466]
[60.02184677 -65.37913513]
[70.68981171 -67.59899902]
[81.47799683 -69.13144684]
[92.34214783 -69.97019958]
[103.23770142 -70.11180878]
[114.11998749 -69.55570221]
[124.94435120 -68.30416107]
[135.66641235 -66.36231232]
[146.24217224 -63.73811722]
[156.62828064 -60.44235229]
[166.78211975 -56.48852539]
[176.66206360 -51.89285278]
[186.22755432 -46.67419052]
[195.43939209 -40.85393906]
[204.25978088 -34.45596695]
[212.65255737 -27.50652313]
[220.58326721 -20.03410530]
[228.01940918 -12.06936455]
[234.93046570 -3.64496684]
[241.28811646 5.20453405]
[247.06625366 14.44284153]
[252.24119568 24.03206444]
[256.79171753 33.93287277]
[270.85800171 28.72329330]
[284.92428589 23.51371574]
[298.99057007 18.30413628]
[313.05685425 13.09455776]
[313.59942627 -2.09669185]
[319.91870117 -15.92186451]
[331.05099487 -26.27272224]
[345.29873657 -31.57083321]
[360.48925781 -31.00827599]
[374.30612183 -24.67083549]
[384.64230347 -13.52492428]
[389.92169189 0.72978508]
[389.33914185 15.91955471]
[382.98352051 29.72805405]
[371.82403564 40.04958725]
[357.56237793 45.31019592]
[342.37341309 44.70767593]
[328.57327271 38.33390427]
[318.26641846 27.16083908]
[304.20016479 32.37041855]
[290.13388062 37.57999802]
[276.06759644 42.78957748]
[262.00131226 47.99915314]
[264.89981079 58.08860779]
[267.17059326 68.33760071]
[268.80499268 78.70713043]
[269.79681396 89.15770721]
[270.14224243 99.64956665]
[269.84002686 110.14275360]
[268.89126587 120.59732819]
[267.29959106 130.97349548]
[265.07104492 141.23176575]
[262.21414185 151.33306885]
[258.73971558 161.23896790]
[254.66102600 170.91174316]
[249.99359131 180.31459045]
[244.75517273 189.41168213]
[238.96571350 198.16842651]
[232.64724731 206.55146790]
[225.82385254 214.52890015]
[218.52146912 222.07035828]
[210.76789856 229.14712524]
[202.59268188 235.73228455]
[194.02693176 241.80073547]
[185.10324097 247.32939148]
[175.85557556 252.29721069]
[166.31916809 256.68527222]
[156.53030396 260.47689819]
[146.52622986 263.65762329]
[136.34506226 266.21536255]
[126.02552795 268.14035034]
[115.60692596 269.42529297]
[105.12891388 270.06530762]
[94.63137054 270.05789185]
[84.15427399 269.40313721]
[73.73749542 268.10351562]
[63.42068481 266.16397095]
[53.24312210 263.59188843]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 21]
[2 20]
[4 18]
[5 17]
[6 16]
[7 15]
[8 14]
[9 13]
[37 50]
[38 49]
[39 48]
[52 67]
[53 66]
[54 65]
[55 64]
[96 119]
[97 118]
[98 117]
[99 116]
[100 115]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
