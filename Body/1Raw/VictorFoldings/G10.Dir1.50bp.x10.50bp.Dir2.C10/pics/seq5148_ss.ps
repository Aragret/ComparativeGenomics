%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:04 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGAAGCCUUCUCCUCACUCUCUCAAUCUUAUCCAUCAUAGCAGGCAGUUGAGGUGGAUUAAAxxxxxxxxxxCUCAUUCAUUUCUCUAACAGCAGUAAUAUUAAUAAUUUUCAUGAUUUGAGAAGCCUUCGCCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[83.62807465 577.05554199]
[83.62807465 562.05554199]
[83.62807465 547.05554199]
[83.62807465 532.05554199]
[83.62807465 517.05554199]
[83.62807465 502.05551147]
[83.62807465 487.05551147]
[83.62807465 472.05551147]
[83.62807465 457.05551147]
[83.62807465 442.05551147]
[69.16321564 438.21917725]
[56.17435837 430.76354980]
[45.54988861 420.19165039]
[38.01828003 407.21987915]
[34.09813309 392.72943115]
[34.06246567 377.70651245]
[37.91971588 363.17520142]
[45.41275787 350.12756348]
[56.03601837 339.45599365]
[69.06960297 331.89218140]
[83.62807465 327.95693970]
[83.62807465 312.95693970]
[83.62807465 297.95693970]
[83.62807465 282.95693970]
[72.74521637 293.27990723]
[57.78466797 294.36709595]
[45.52370071 285.72598267]
[41.51665497 271.27108765]
[47.57875824 257.55062866]
[60.96382523 250.78012085]
[75.60828400 254.02662659]
[84.87818146 265.81985474]
[87.05501556 250.97865295]
[89.23184967 236.13745117]
[91.40869141 221.29624939]
[92.50000000 206.33599854]
[92.50000000 191.33599854]
[92.50000000 176.33599854]
[92.50000000 161.33599854]
[78.93818665 158.09263611]
[66.44891357 151.89103699]
[55.66815186 143.04698181]
[47.14490509 132.01083374]
[41.31319809 119.34461212]
[38.46999741 105.69329834]
[38.76008987 91.75206757]
[42.16870117 78.23085022]
[48.52225876 65.81817627]
[57.49721527 55.14614868]
[68.63654327 46.75820923]
[81.37298584 41.08150482]
[95.05797577 38.40510559]
[95.68195343 23.41808701]
[88.52542114 9.30800056]
[96.78545380 -3.08639479]
[97.40943146 -18.07341003]
[98.03340912 -33.06042862]
[98.50144958 -48.05312347]
[98.81350708 -63.04987717]
[99.12556458 -78.04663086]
[99.43762207 -93.04338074]
[99.43762207 -108.04338074]
[99.12556458 -123.04013824]
[98.81350708 -138.03689575]
[98.50144958 -153.03364563]
[98.18939972 -168.03039551]
[83.76224518 -172.62777710]
[71.61104584 -181.66255188]
[63.05387878 -194.15469360]
[59.01895905 -208.74914551]
[59.94396210 -223.86282349]
[65.72855377 -237.85629272]
[75.74526215 -249.21165466]
[88.90755463 -256.69717407]
[103.78768158 -259.50085449]
[118.77155304 -257.31857300]
[132.23384094 -250.38708496]
[142.71424866 -239.45823669]
[149.07592773 -225.71749878]
[150.62884521 -210.65539551]
[147.20452881 -195.90573120]
[139.17442322 -183.06843567]
[127.40957642 -173.53601074]
[113.18614960 -168.34245300]
[113.49820709 -153.34570312]
[113.81026459 -138.34895325]
[114.12232208 -123.35219574]
[114.43437195 -108.35543823]
[117.24716949 -104.42304993]
[117.57546997 -98.66773987]
[114.43437195 -92.73133087]
[114.12232208 -77.73457336]
[113.81026459 -62.73781967]
[113.49820709 -47.74106598]
[116.52304077 -40.94430161]
[113.02042389 -32.43645096]
[112.39644623 -17.44943428]
[111.77246857 -2.46241736]
[118.97364044 10.57569790]
[110.66896820 24.04206467]
[110.04499054 39.02907944]
[125.36458588 43.65292740]
[138.98315430 52.05556870]
[149.98739624 63.67350388]
[157.63935852 77.72760010]
[161.42584229 93.27533722]
[161.09294128 109.27406311]
[156.66296387 124.65083313]
[148.43301392 138.37445068]
[136.95500183 149.52456665]
[122.99868011 157.35342407]
[107.50000000 161.33599854]
[107.50000000 176.33599854]
[107.50000000 191.33599854]
[107.50000000 206.33599854]
[118.38285828 196.01304626]
[133.34341431 194.92587280]
[145.60437012 203.56697083]
[149.61141968 218.02185059]
[143.54931641 231.74230957]
[130.16424561 238.51283264]
[115.51979065 235.26632690]
[106.24989319 223.47308350]
[104.07305908 238.31428528]
[101.89621735 253.15550232]
[99.71938324 267.99670410]
[98.62807465 282.95693970]
[98.62807465 297.95693970]
[98.62807465 312.95693970]
[98.62807465 327.95693970]
[113.18654633 331.89218140]
[126.22013092 339.45599365]
[136.84338379 350.12756348]
[144.33642578 363.17520142]
[148.19367981 377.70651245]
[148.15802002 392.72943115]
[144.23786926 407.21987915]
[136.70625305 420.19165039]
[126.08178711 430.76354980]
[113.09292603 438.21917725]
[98.62807465 442.05551147]
[98.62807465 457.05551147]
[98.62807465 472.05551147]
[98.62807465 487.05551147]
[98.62807465 502.05551147]
[98.62807465 517.05554199]
[98.62807465 532.05554199]
[98.62807465 547.05554199]
[98.62807465 562.05554199]
[98.62807465 577.05554199]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[21 130]
[22 129]
[23 128]
[24 127]
[32 126]
[33 125]
[34 124]
[35 123]
[36 115]
[37 114]
[38 113]
[39 112]
[52 101]
[53 100]
[55 98]
[56 97]
[57 96]
[58 94]
[59 93]
[60 92]
[61 91]
[62 88]
[63 87]
[64 86]
[65 85]
[66 84]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
