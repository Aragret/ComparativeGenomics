%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:53 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCCCGAACCAACCAAACCCCAAAGACACCCCCCACAGUUUAUGUAGCUUACCUCCUCAAAGCAxxxxxxxxxxUACUAAUCAACGCCCAUAAUCAUACAAAGCCCCCGCACCAAUAGGAUCCUCCCGAAUCAACCCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[70.23394775 150.83699036]
[58.75414658 160.49172974]
[47.27434540 170.14648438]
[35.79454041 179.80122375]
[24.31473923 189.45596313]
[12.83493614 199.11071777]
[2.06833267 209.55487061]
[-7.93091345 220.73588562]
[-17.93015862 231.91690063]
[-27.92940521 243.09791565]
[-21.00869560 256.60598755]
[-19.43889618 271.70236206]
[-23.43231010 286.34533691]
[-32.44886398 298.55459595]
[-45.26913834 306.67895508]
[-60.15929794 309.61962891]
[-75.10557556 306.97891235]
[-88.08660126 299.11398315]
[-97.34680176 287.08847046]
[-101.63381195 272.52871704]
[-100.36785126 257.40383911]
[-93.72013092 243.75935364]
[-82.58969116 233.44055176]
[-68.48184204 227.84295654]
[-53.30455017 227.72361755]
[-39.11042023 233.09866333]
[-29.11117363 221.91764832]
[-19.11192703 210.73663330]
[-9.11268139 199.55561829]
[-24.10487747 200.03944397]
[-36.00515747 190.90798950]
[-39.41802979 176.30140686]
[-32.79611969 162.84219360]
[-19.14175415 156.63267517]
[-4.64571571 160.48817444]
[4.11960125 172.66064453]
[3.18018961 187.63092041]
[14.65999222 177.97616577]
[26.13979530 168.32142639]
[37.61959839 158.66667175]
[49.09939957 149.01193237]
[60.57920074 139.35717773]
[58.15764618 124.55393982]
[44.19983292 119.06034851]
[30.24202347 113.56675720]
[15.01686382 118.62384033]
[1.64948082 109.75295258]
[0.39418706 93.75908661]
[12.21393681 82.91136169]
[28.04162979 85.53122711]
[35.73561478 99.60894775]
[49.69342422 105.10253906]
[63.65123367 110.59612274]
[68.36128235 104.75956726]
[82.49143982 87.24989319]
[74.17369080 74.76730347]
[65.85594940 62.28470993]
[57.53819656 49.80212021]
[42.11500168 50.16075134]
[28.95821381 42.10454559]
[22.26611328 28.20421028]
[24.17412758 12.89528942]
[34.07341385 1.06280637]
[48.80514908 -3.51753807]
[63.66848755 0.61582768]
[73.92059326 12.14396191]
[76.29005432 27.38827896]
[70.02079010 41.48437119]
[78.33853912 53.96696091]
[86.65628052 66.44955444]
[94.97402954 78.93214417]
[93.65899658 63.98989868]
[92.34395599 49.04765320]
[91.02892303 34.10541153]
[89.71388245 19.16316605]
[81.93196106 6.33968306]
[76.37531281 -7.59314442]
[73.19662476 -22.25247383]
[72.48324585 -37.23550034]
[74.25476074 -52.13052368]
[78.46250916 -66.52825928]
[84.99086761 -80.03309631]
[93.66044617 -92.27394867]
[104.23303223 -102.91445923]
[116.41810608 -111.66225433]
[129.88084412 -118.27696991]
[144.25134277 -122.57684326]
[159.13471985 -124.44372559]
[174.12200928 -123.82630920]
[188.80139160 -120.74157715]
[202.76951599 -115.27427673]
[215.64257812 -107.57463837]
[227.06684875 -97.85424042]
[236.72840881 -86.38017273]
[244.36177063 -73.46771240]
[249.75721741 -59.47166824]
[252.76646423 -44.77662277]
[253.30685425 -29.78635979]
[251.36349487 -14.91277885]
[246.98983765 -0.56457263]
[240.30601501 12.86400127]
[231.49571228 25.00395584]
[220.80099487 35.52171326]
[208.51576233 44.12826920]
[194.97755432 50.58713150]
[180.55838013 54.72082901]
[165.65826416 56.41566086]
[153.03735352 64.52200317]
[140.41644287 72.62833405]
[127.79553986 80.73467255]
[115.17463684 88.84101105]
[130.13690186 87.77781677]
[143.41160583 78.14898682]
[158.27548218 85.07699585]
[159.43785095 101.43489838]
[145.70297241 110.39508820]
[131.20010376 102.74008942]
[116.23783112 103.80328369]
[114.56908417 118.71084595]
[112.90047455 133.61708069]
[127.25733185 137.96224976]
[143.09382629 133.70344543]
[154.50758362 145.47877502]
[149.75709534 161.17478943]
[133.72927856 164.64477539]
[122.91215515 152.31910706]
[108.55529785 147.97393799]
[119.07144165 158.67022705]
[129.58758545 169.36653137]
[142.82676697 176.41804504]
[154.30609131 186.07337952]
[163.52163696 197.90864563]
[170.06886292 211.40434265]
[173.66036987 225.96803284]
[174.13850403 240.96040344]
[171.48226929 255.72335815]
[165.80827332 269.60879517]
[157.36558533 282.00723267]
[146.52481079 292.37438965]
[133.76184082 300.25515747]
[119.63693237 305.30361938]
[104.77013397 307.29815674]
[89.81404877 306.15118408]
[75.42520905 301.91308594]
[62.23525620 294.76992798]
[50.82318497 285.03521729]
[41.68995285 273.13629150]
[35.23649216 259.59552002]
[31.74608803 245.00726318]
[31.37195778 230.01191711]
[34.13052750 215.26776123]
[39.90070343 201.42199707]
[48.42918777 189.08242798]
[59.34246445 178.79008484]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 42]
[2 41]
[3 40]
[4 39]
[5 38]
[6 37]
[7 29]
[8 28]
[9 27]
[10 26]
[43 53]
[44 52]
[45 51]
[55 71]
[56 70]
[57 69]
[58 68]
[111 118]
[112 117]
[120 127]
[121 126]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
