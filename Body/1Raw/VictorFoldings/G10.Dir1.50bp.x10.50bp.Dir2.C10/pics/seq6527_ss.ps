%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:34 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCCCUCCCUUAGCAGGGAACUACUCCCACCCUGGAGCCUCCGUAGACCUAACCAUCUUCUCCUUxxxxxxxxxxUCGCCCUCCCAUCCCUACGCAUCCUUUACAUAACAGACGAGGUCAACGAUCCCUCCCUUACCACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[92.50000000 303.04544067]
[92.50000000 288.04544067]
[92.50000000 273.04544067]
[92.50000000 258.04544067]
[92.50000000 243.04542542]
[92.50000000 228.04542542]
[92.50000000 213.04542542]
[92.50000000 198.04542542]
[92.50000000 183.04542542]
[92.50000000 168.04542542]
[82.40139008 166.15678406]
[72.69914246 162.77812195]
[63.61177063 157.98558044]
[55.34394455 151.88705444]
[44.37250137 162.11581421]
[33.40105820 172.34457397]
[22.42961693 182.57331848]
[11.45817375 192.80207825]
[7.18181944 208.63385010]
[-8.73441601 212.58422852]
[-19.91727448 200.58940125]
[-14.86278915 184.98863220]
[1.22941744 181.83064270]
[12.20086002 171.60188293]
[23.17230225 161.37312317]
[34.14374542 151.14437866]
[45.11518860 140.91561890]
[41.29892731 135.22235107]
[38.07109070 129.17602539]
[35.46403122 122.83722687]
[33.50388718 116.26951599]
[32.21030045 109.53871155]
[17.21705818 109.98887634]
[2.22381473 110.43903351]
[-12.76942921 110.88919830]
[-23.42050934 122.56523895]
[-39.21178436 123.20652771]
[-50.77456665 112.43259430]
[-51.24886322 96.63542938]
[-40.35328293 85.18719482]
[-24.55198288 84.87994385]
[-13.21958923 95.89595032]
[1.77365422 95.44579315]
[16.76689720 94.99562836]
[31.76014137 94.54547119]
[38.41917419 70.09629059]
[53.51562119 49.74432373]
[74.98107147 36.27807999]
[99.87445068 31.54260826]
[124.78503418 36.18674088]
[131.71496582 22.88350296]
[138.64488220 9.58026600]
[138.15843201 -6.23345995]
[150.90043640 -13.94645977]
[157.83036804 -27.24969673]
[164.76029968 -40.55293274]
[171.69021606 -53.85617065]
[178.62014771 -67.15940857]
[166.02595520 -75.32831573]
[154.26530457 -84.65740204]
[143.44470215 -95.06217194]
[133.66213989 -106.44841003]
[125.00622559 -118.71298981]
[117.55534363 -131.74484253]
[111.37696838 -145.42593384]
[106.52705383 -159.63238525]
[103.04953003 -174.23551941]
[100.97588348 -189.10308838]
[100.32489777 -204.10044861]
[101.10246277 -219.09179688]
[103.30153656 -233.94132996]
[106.90221405 -248.51458740]
[111.87187958 -262.67959595]
[118.16552734 -276.30804443]
[125.72615051 -289.27651978]
[134.48529053 -301.46759033]
[144.36361694 -312.77084351]
[155.27166748 -323.08392334]
[167.11064148 -332.31338501]
[179.77334595 -340.37570190]
[193.14509583 -347.19781494]
[207.10478210 -352.71795654]
[221.52598572 -356.88610840]
[236.27809143 -359.66458130]
[251.22752380 -361.02816772]
[266.23886108 -360.96453857]
[281.17620850 -359.47427368]
[295.90423584 -356.57083130]
[310.28958130 -352.28054810]
[324.20196533 -346.64224243]
[337.51538086 -339.70700073]
[350.10928345 -331.53762817]
[361.86959839 -322.20812988]
[372.68981934 -311.80294800]
[382.47195435 -300.41638184]
[391.12741089 -288.15145874]
[398.57781982 -275.11935425]
[404.75570679 -261.43801880]
[409.60510254 -247.23141479]
[413.08209229 -232.62814331]
[415.15521240 -217.76049805]
[415.80563354 -202.76310730]
[415.02752686 -187.77180481]
[412.82791138 -172.92234802]
[409.22671509 -158.34921265]
[404.25653076 -144.18440247]
[397.96237183 -130.55616760]
[390.40127563 -117.58795929]
[381.64169312 -105.39720154]
[371.76296997 -94.09431458]
[360.85455322 -83.78165436]
[349.01522827 -74.55261230]
[336.35223389 -66.49076843]
[322.98022461 -59.66914368]
[309.02035522 -54.14950943]
[294.59899902 -49.98185730]
[279.84677124 -47.20392990]
[264.89730835 -45.84088516]
[249.88594055 -45.90506744]
[234.94866943 -47.39589310]
[220.22074890 -50.29986572]
[205.83555603 -54.59067917]
[191.92338562 -60.22948074]
[184.99345398 -46.92624283]
[178.06352234 -33.62300873]
[171.13360596 -20.31976891]
[164.20367432 -7.01653290]
[165.18582153 7.84565639]
[151.94812012 16.51019287]
[145.01820374 29.81342888]
[138.08827209 43.11666489]
[146.29301453 49.56799698]
[153.42166138 57.19163513]
[159.30850220 65.81037140]
[163.81671143 75.22384644]
[166.84147644 85.21325684]
[168.31248474 95.54638672]
[168.19555664 105.98304749]
[166.49339294 116.28062439]
[163.24557495 126.19975281]
[158.52760315 135.50985718]
[152.44912720 143.99453735]
[145.15145874 151.45654297]
[136.80422974 157.72242737]
[127.60147858 162.64653015]
[117.75712585 166.11441040]
[107.50000000 168.04542542]
[107.50000000 183.04542542]
[107.50000000 198.04542542]
[107.50000000 213.04542542]
[107.50000000 228.04542542]
[107.50000000 243.04542542]
[107.50000000 258.04544067]
[107.50000000 273.04544067]
[107.50000000 288.04544067]
[107.50000000 303.04544067]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 156]
[2 155]
[3 154]
[4 153]
[5 152]
[6 151]
[7 150]
[8 149]
[9 148]
[10 147]
[14 27]
[15 26]
[16 25]
[17 24]
[18 23]
[32 45]
[33 44]
[34 43]
[35 42]
[50 131]
[51 130]
[52 129]
[54 127]
[55 126]
[56 125]
[57 124]
[58 123]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
