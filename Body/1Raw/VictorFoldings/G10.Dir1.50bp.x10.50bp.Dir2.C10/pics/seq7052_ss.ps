%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:25 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGUUUGCCAUCAUAGGAGGCUUCAUUCACUGAUUUCCCCUAUUCUCAGGCUACACCCUAGACCAAACxxxxxxxxxxCAGACCUCCUCAUUCUAACCUGAAUCGGAGGACAACCAGUAAGCUACCCUUUUACCAUCAUUGGACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[113.66304779 559.65338135]
[113.37037659 544.65625000]
[113.07769775 529.65905762]
[112.78501892 514.66192627]
[112.49234772 499.66479492]
[112.19966888 484.66766357]
[111.90699005 469.67050171]
[111.61431885 454.67337036]
[111.32164001 439.67620850]
[95.36734009 436.58096313]
[80.47673035 430.05398560]
[67.37839508 420.41159058]
[56.71390152 408.12249756]
[49.00637054 393.78518677]
[44.63484955 378.09869385]
[43.81563568 361.82861328]
[46.59159470 345.76956177]
[52.82992554 330.70657349]
[62.22850800 317.37661743]
[74.33053589 306.43246460]
[88.54672241 298.41091919]
[104.18396759 293.70629883]
[103.01438141 278.75198364]
[101.84478760 263.79763794]
[91.14111328 249.91804504]
[99.14739990 233.36146545]
[97.68624878 218.43280029]
[96.22509003 203.50413513]
[94.76393890 188.57546997]
[93.30278015 173.64680481]
[81.72099304 183.17897034]
[67.00709534 180.26329041]
[59.93552780 167.03480530]
[65.68453979 153.18023682]
[80.04433441 148.84478760]
[92.50000000 157.20350647]
[92.50000000 142.20350647]
[92.50000000 127.20349884]
[92.50000000 112.20349884]
[85.67605591 100.00000000]
[92.50000000 87.79650116]
[92.50000000 72.79650116]
[92.35365295 57.79721451]
[92.06098175 42.80007172]
[91.76830292 27.80292511]
[91.32932281 12.80935097]
[90.74407959 -2.17922831]
[82.47424316 -15.66701317]
[89.70908356 -28.68647385]
[89.12384033 -43.67505264]
[85.88628387 -49.53320312]
[86.09963226 -55.27601242]
[88.81974792 -59.25743866]
[88.81974792 -74.25743866]
[88.81974792 -89.25743866]
[88.81974792 -104.25743866]
[88.81974792 -119.25743866]
[73.92626190 -121.21681976]
[59.41596222 -125.10348511]
[45.53713226 -130.85093689]
[32.52725983 -138.36080933]
[20.60896111 -147.50460815]
[9.98617363 -158.12588501]
[0.84066623 -170.04287720]
[-6.67106819 -183.05168152]
[-12.42049503 -196.92968750]
[-16.30923271 -211.43943787]
[-18.27074242 -226.33264160]
[-18.27145767 -241.35444641]
[-16.31136703 -256.24783325]
[-12.42400932 -270.75796509]
[-6.67590380 -284.63650513]
[0.83459234 -297.64602661]
[9.97896481 -309.56390381]
[20.60074234 -320.18618774]
[32.51816940 -329.33111572]
[45.52732468 -336.84222412]
[59.40560913 -342.59100342]
[73.91554260 -346.47903442]
[88.80883789 -348.43984985]
[103.83065033 -348.43984985]
[118.72395325 -346.47903442]
[133.23388672 -342.59100342]
[147.11216736 -336.84222412]
[160.12132263 -329.33111572]
[172.03874207 -320.18618774]
[182.66052246 -309.56390381]
[191.80490112 -297.64602661]
[199.31539917 -284.63650513]
[205.06349182 -270.75796509]
[208.95085144 -256.24783325]
[210.91094971 -241.35444641]
[210.91023254 -226.33264160]
[208.94873047 -211.43943787]
[205.05998230 -196.92968750]
[199.31056213 -183.05168152]
[191.79882812 -170.04287720]
[182.65332031 -158.12588501]
[172.03053284 -147.50460815]
[160.11222839 -138.36080933]
[147.10235596 -130.85093689]
[133.22352600 -125.10348511]
[118.71322632 -121.21681976]
[103.81974792 -119.25743866]
[103.81974792 -104.25743866]
[103.81974792 -89.25743866]
[103.81974792 -74.25743866]
[103.81974792 -59.25743866]
[104.11241913 -44.26029587]
[104.69766235 -29.27171516]
[112.92563629 -16.85601425]
[105.73265839 -2.76446962]
[106.31790161 12.22410965]
[109.73854065 18.81850624]
[106.76544952 27.51025009]
[107.05812073 42.50739288]
[107.35079956 57.50453949]
[110.64212036 64.16442108]
[107.50000000 72.79650116]
[107.50000000 87.79650116]
[114.32394409 100.00000000]
[107.50000000 112.20349884]
[107.50000000 127.20349884]
[107.50000000 142.20350647]
[107.50000000 157.20350647]
[108.23144531 172.18565369]
[109.69260406 187.11431885]
[111.15375519 202.04298401]
[112.61490631 216.97164917]
[114.07606506 231.90031433]
[123.54731750 240.70433044]
[124.43172455 253.20275879]
[116.79911804 262.62805176]
[117.96871185 277.58239746]
[119.13830566 292.53671265]
[132.85655212 294.17651367]
[146.02543640 298.34027100]
[158.18495178 304.88082886]
[168.91075134 313.56802368]
[177.82879639 324.09680176]
[184.62854004 336.09793091]
[189.07365417 349.15093994]
[191.01028442 362.79891968]
[190.37236023 376.56439209]
[187.18385315 389.96606445]
[181.55784607 402.53576660]
[173.69261169 413.83462524]
[163.86450195 423.46850586]
[152.41833496 431.10174561]
[139.75529480 436.46881104]
[126.31878662 439.38354492]
[126.61145782 454.38067627]
[126.90413666 469.37783813]
[127.19681549 484.37496948]
[127.48948669 499.37213135]
[127.78216553 514.36926270]
[128.07484436 529.36639404]
[128.36752319 544.36352539]
[128.66020203 559.36071777]
[131.22636414 578.57177734]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 159]
[2 158]
[3 157]
[4 156]
[5 155]
[6 154]
[7 153]
[8 152]
[9 151]
[22 135]
[23 134]
[24 133]
[26 130]
[27 129]
[28 128]
[29 127]
[30 126]
[36 125]
[37 124]
[38 123]
[39 122]
[41 120]
[42 119]
[43 117]
[44 116]
[45 115]
[46 113]
[47 112]
[49 110]
[50 109]
[53 108]
[54 107]
[55 106]
[56 105]
[57 104]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
