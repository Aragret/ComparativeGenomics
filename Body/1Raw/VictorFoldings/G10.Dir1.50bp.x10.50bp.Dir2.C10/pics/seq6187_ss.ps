%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:58 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGAAAAUCACCUCGGAGCUGGUAAAAAGAGGCCUAACCCCUGUCUUUAGAUUUACAGUCCAAxxxxxxxxxxUGCACGAAACGGGAUCAAACAACCCCCUAGGAAUCACCUCCCAUUCCGAUAAAAUCACCUCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[92.81508636 537.19287109]
[92.81508636 522.19287109]
[92.81508636 507.19290161]
[92.81508636 492.19290161]
[92.81508636 477.19290161]
[92.81508636 462.19290161]
[92.81508636 447.19290161]
[92.81508636 432.19290161]
[92.81508636 417.19290161]
[92.81508636 402.19290161]
[77.28304291 397.88024902]
[63.56733322 389.38491821]
[52.76869202 377.37954712]
[45.75631332 362.81878662]
[43.09787750 346.86352539]
[45.01361847 330.78814697]
[51.35808563 315.87887573]
[61.63116837 303.33087158]
[75.01749420 294.15234375]
[90.45115662 289.08352661]
[89.82717896 274.09652710]
[89.20320129 259.10949707]
[88.57922363 244.12248230]
[87.95525360 229.13546753]
[79.24745178 220.68078613]
[78.64151764 208.15673828]
[87.01130676 198.28756714]
[86.69924927 183.29081726]
[86.38719177 168.29405212]
[74.96618652 178.01828003]
[60.00008011 177.01046753]
[49.98594284 165.84278870]
[50.60934067 150.85574341]
[61.51633453 140.55828857]
[76.51443481 140.79685974]
[87.08901215 151.43740845]
[88.64659119 136.51849365]
[90.20417023 121.59957886]
[91.76175690 106.68066406]
[92.54159546 91.70095062]
[92.54159546 76.70095062]
[92.54159546 61.70095062]
[92.54159546 46.70095062]
[90.67398834 31.81767273]
[86.81682587 17.32207489]
[82.80908203 2.86738682]
[78.80134583 -11.58730125]
[71.21143341 -24.52535820]
[60.54981232 -35.07664871]
[49.88818359 -45.62793732]
[39.22655869 -56.17922974]
[24.43325615 -52.04960632]
[9.56106949 -55.88543701]
[-1.38945973 -66.65490723]
[-5.47269297 -81.46108246]
[-1.59026098 -96.32117462]
[9.21348095 -107.23789215]
[24.03238106 -111.27469635]
[38.88022995 -107.34570312]
[49.76302719 -96.50779724]
[53.75336075 -81.67631531]
[49.77784729 -66.84085846]
[60.43947601 -56.28956604]
[71.10110474 -45.73827362]
[81.76272583 -35.18698502]
[78.15340424 -49.74626923]
[77.93318939 -64.74465179]
[81.11349487 -79.40363312]
[87.52925873 -92.96231842]
[96.84745789 -104.71694183]
[108.58441925 -114.05737305]
[122.13094330 -120.49877930]
[136.78387451 -123.70682526]
[151.78265381 -123.51498413]
[166.34873962 -119.93322754]
[179.72608948 -113.14745331]
[191.22032166 -103.50989532]
[200.23483276 -91.52079773]
[206.30171204 -77.80245209]
[209.10606384 -63.06692886]
[208.50231934 -48.07908249]
[204.52180481 -33.61687469]
[197.37113953 -20.43096733]
[187.42149353 -9.20579243]
[175.18931580 -0.52399772]
[161.30949402 5.16378069]
[146.50250244 7.56231451]
[131.53689575 6.54710674]
[117.18948364 2.17085147]
[104.20497131 -5.33929777]
[93.25603485 -15.59504223]
[97.26377106 -1.14035356]
[101.27151489 13.31433487]
[106.12078094 18.95616531]
[105.20892334 28.11151123]
[110.66272736 14.13810635]
[121.55691528 3.82710838]
[135.80894470 -0.85043555]
[150.69442749 0.99963379]
[163.36782837 9.02365685]
[171.40650940 21.68776321]
[173.27378845 36.57108307]
[168.61274719 50.82852554]
[158.31436157 61.73463440]
[144.34727478 67.20460510]
[129.38143921 66.19279480]
[116.27771759 58.89262009]
[107.54159546 46.70095062]
[107.54159546 61.70095062]
[107.54159546 76.70095062]
[107.54159546 91.70095062]
[120.04207611 83.41011047]
[134.38203430 87.81072235]
[140.08013916 101.68629456]
[132.97152710 114.89491272]
[118.25201416 117.78214264]
[106.68066406 108.23825073]
[105.12308502 123.15715790]
[103.56550598 138.07606506]
[102.00791931 152.99497986]
[101.38394165 167.98199463]
[101.69599915 182.97875977]
[102.00805664 197.97550964]
[111.91510010 213.46195984]
[102.94226837 228.51148987]
[103.56624603 243.49850464]
[104.19022369 258.48550415]
[104.81420135 273.47253418]
[105.43817902 288.45956421]
[119.06816864 291.41958618]
[131.57434082 297.57241821]
[142.22174072 306.55111694]
[150.38598633 317.82287598]
[155.58979797 330.72058105]
[157.53092957 344.48236084]
[156.09974670 358.29647827]
[151.38534546 371.34930420]
[143.67007446 382.87322998]
[133.41261292 392.19177246]
[121.22068024 398.75924683]
[107.81508636 402.19290161]
[107.81508636 417.19290161]
[107.81508636 432.19290161]
[107.81508636 447.19290161]
[107.81508636 462.19290161]
[107.81508636 477.19290161]
[107.81508636 492.19290161]
[107.81508636 507.19290161]
[107.81508636 522.19287109]
[107.81508636 537.19287109]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[20 129]
[21 128]
[22 127]
[23 126]
[24 125]
[27 123]
[28 122]
[29 121]
[36 120]
[37 119]
[38 118]
[39 117]
[40 111]
[41 110]
[42 109]
[43 108]
[44 95]
[45 93]
[46 92]
[47 91]
[48 65]
[49 64]
[50 63]
[51 62]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
