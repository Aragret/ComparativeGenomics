%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:09 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGAACCUCGCCUUACCCCCCACUAUUAACCUACUGGGAGAACUCUCUGUGCUAGUAACCACGxxxxxxxxxxCCUGACAAGCGCCUAUAGCACUCGAAUAAUUCUUCUCACCCUAACAGGUCAACCUCGCUUCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[29.07310486 290.24578857]
[20.56201553 302.59735107]
[12.05092525 314.94891357]
[3.53983498 327.30050659]
[-4.97125530 339.65206909]
[-13.48234558 352.00363159]
[-21.60388756 364.61477661]
[-29.32797241 377.47317505]
[-29.80159760 393.28729248]
[-42.98798752 400.21319580]
[-50.71207428 413.07162476]
[-53.68517685 429.76284790]
[-70.54713440 431.52651978]
[-76.90974426 415.81176758]
[-63.57047653 405.34753418]
[-55.84638977 392.48913574]
[-55.92524338 377.59472656]
[-42.18637466 369.74908447]
[-34.46229172 356.89068604]
[-34.99290085 353.34301758]
[-33.79016876 349.36117554]
[-30.66902542 345.78195190]
[-25.83391762 343.49255371]
[-17.32282829 331.14099121]
[-8.81173801 318.78939819]
[-0.30064750 306.43783569]
[8.21044254 294.08627319]
[16.72153282 281.73468018]
[2.80439973 265.03567505]
[-5.04322577 244.74539185]
[-5.98588800 222.99382019]
[0.08639856 202.06809998]
[12.54544067 184.17201233]
[30.08983421 171.19387817]
[50.88090134 164.50732422]
[72.73537445 164.82591248]
[77.04296112 150.45773315]
[81.35054779 136.08953857]
[85.65813446 121.72135925]
[75.57764435 109.00307465]
[74.99100494 92.78496552]
[84.12625122 79.37160492]
[99.43218994 73.97723389]
[103.43993378 59.52254868]
[107.44766998 45.06785965]
[110.69849396 30.42435646]
[113.18361664 15.63164997]
[115.66873169 0.83894289]
[118.15385437 -13.95376396]
[106.15556335 -25.83202934]
[103.60298157 -42.35370636]
[111.30283356 -57.00560760]
[126.05912018 -64.13003540]
[128.23596191 -78.97123718]
[121.03153229 -95.88502502]
[132.37368774 -109.23999786]
[134.24130249 -124.12327576]
[136.10891724 -139.00656128]
[137.97653198 -153.88983154]
[139.84414673 -168.77311707]
[141.71176147 -183.65640259]
[127.34069824 -188.08851624]
[113.95767212 -194.94897461]
[101.96939087 -204.02928162]
[91.74015808 -215.05352783]
[83.58082581 -227.68667603]
[77.73935699 -241.54483032]
[74.39325714 -256.20684814]
[73.64421082 -271.22717285]
[75.51498413 -286.14935303]
[79.94873047 -300.51989746]
[86.81070709 -313.90216064]
[95.89238739 -325.88940430]
[106.91778564 -336.11737061]
[119.55186462 -344.27526855]
[133.41067505 -350.11517334]
[148.07307434 -353.45962524]
[163.09347534 -354.20697021]
[178.01544189 -352.33450317]
[192.38549805 -347.89910889]
[205.76696777 -341.03561401]
[217.75318909 -331.95257568]
[227.97991943 -320.92602539]
[236.13638306 -308.29101562]
[241.97471619 -294.43154907]
[245.31748962 -279.76876831]
[246.06312561 -264.74829102]
[244.18896484 -249.82653809]
[239.75195312 -235.45698547]
[232.88694763 -222.07629395]
[223.80255127 -210.09109497]
[212.77482605 -199.86561584]
[200.13890076 -191.71058655]
[186.27876282 -185.87382507]
[171.61561584 -182.53271484]
[156.59504700 -181.78878784]
[154.72743225 -166.90550232]
[152.85981750 -152.02223206]
[150.99220276 -137.13894653]
[149.12458801 -122.25566864]
[147.25697327 -107.37238312]
[154.44371033 -97.59188843]
[152.96635437 -85.14052582]
[143.07716370 -76.79440308]
[140.90032959 -61.95319366]
[151.29588318 -53.51943970]
[156.19062805 -40.94355011]
[154.20001221 -27.48665619]
[145.74018860 -16.69572067]
[132.94656372 -11.46864605]
[130.46144104 3.32406139]
[127.97631836 18.11676788]
[125.49120331 32.90947723]
[139.19250488 26.80421829]
[152.60523987 33.51978302]
[155.92576599 48.14764023]
[146.72705078 59.99600220]
[131.73262024 60.40468216]
[121.90235901 49.07559967]
[117.89461517 63.53028870]
[113.88687897 77.98497772]
[122.93578339 87.69322968]
[126.02201843 100.60090637]
[122.34326172 113.35235596]
[112.85587311 122.63256836]
[100.02631378 126.02894592]
[95.71873474 140.39712524]
[91.41114807 154.76531982]
[87.10356140 169.13349915]
[95.51651001 173.45874023]
[103.23911285 178.91754150]
[110.11973572 185.40182495]
[116.02337646 192.78340149]
[120.83435822 200.91645813]
[124.45855713 209.64051819]
[126.82528687 218.78352356]
[127.88862610 228.16525269]
[127.62835693 237.60092163]
[126.05030823 246.90473938]
[123.18627167 255.89363098]
[119.09329987 264.39083862]
[113.85264587 272.22937012]
[107.56808472 279.25521851]
[100.36389923 285.33059692]
[92.38239288 290.33639526]
[83.78110504 294.17465210]
[74.72969055 296.77044678]
[65.40657043 298.07336426]
[55.99541473 298.05841064]
[46.68152618 296.72665405]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 28]
[2 27]
[3 26]
[4 25]
[5 24]
[6 23]
[7 19]
[8 18]
[10 16]
[11 15]
[36 129]
[37 128]
[38 127]
[39 126]
[43 121]
[44 120]
[45 119]
[46 113]
[47 112]
[48 111]
[49 110]
[53 105]
[54 104]
[56 101]
[57 100]
[58 99]
[59 98]
[60 97]
[61 96]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
