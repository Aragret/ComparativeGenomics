%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:17 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCAUCAUCCUAGUCCUCAUCGCCCUCCCAUCCCUACGCAUCCUUUACAUAACAGACGAGGUCxxxxxxxxxxCGAUCCGUCCCUAACAAACUAGGAGGCGUCCUUGCCCUAUUACUAUCCAUCCUCAUCCUAGCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[96.50212097 177.58850098]
[84.91307068 187.11184692]
[73.32402039 196.63517761]
[61.93294907 206.39445496]
[50.74465179 216.38555908]
[39.55635452 226.37664795]
[28.36805916 236.36775208]
[17.17976379 246.35884094]
[5.99146605 256.34994507]
[-5.19683027 266.34103394]
[-16.38512611 276.33212280]
[-10.27214241 290.17001343]
[-8.73650265 305.21981812]
[-11.92865276 320.00717163]
[-19.53586006 333.08331299]
[-30.81284523 343.16717529]
[-44.65480804 349.27090454]
[-59.70565033 350.79644775]
[-74.49084473 347.59439087]
[-87.56188965 339.97842407]
[-97.63822174 328.69470215]
[-103.73265076 314.84863281]
[-105.24812317 299.79678345]
[-102.03615570 285.01373291]
[-94.41143799 271.94778442]
[-83.12094879 261.87902832]
[-69.27081299 255.79386902]
[-54.21794128 254.28849792]
[-39.43704987 257.51034546]
[-26.37622452 265.14382935]
[-15.18792725 255.15274048]
[-3.99963069 245.16163635]
[7.18866587 235.17054749]
[18.37696266 225.17944336]
[29.56525993 215.18835449]
[40.75355530 205.19725037]
[51.94185257 195.20616150]
[53.09943771 190.51475525]
[57.25400925 186.52384949]
[63.80068588 185.04612732]
[75.38973236 175.52279663]
[86.97878265 165.99945068]
[88.15534973 161.22595215]
[91.32708740 157.03744507]
[91.63506317 142.04061890]
[91.94304657 127.04377747]
[92.25102234 112.04693604]
[85.67907715 99.70590210]
[92.75214386 87.64508057]
[93.06011963 72.64824677]
[93.36809540 57.65140915]
[93.67607117 42.65457153]
[78.65567017 38.35409546]
[65.26232147 30.33051872]
[54.39951706 19.13176727]
[46.79830170 5.51973581]
[42.96809769 -9.58155441]
[43.16256714 -25.14868164]
[47.36281586 -40.12817383]
[55.27905655 -53.50781250]
[66.37061310 -64.38501740]
[79.88282013 -72.02774048]
[94.89838409 -75.92373657]
[94.89838409 -90.92373657]
[94.89838409 -105.92373657]
[94.89838409 -120.92373657]
[91.75345612 -129.56695557]
[95.05554199 -136.23092651]
[95.36351776 -151.22775269]
[95.67149353 -166.22459412]
[95.97947693 -181.22143555]
[82.54533386 -188.55509949]
[74.06777191 -201.29830933]
[72.49487305 -216.52278137]
[78.18806458 -230.73004150]
[89.83909607 -240.65536499]
[104.77065277 -244.01797485]
[119.55157471 -240.04518127]
[130.78529358 -229.64990234]
[135.89041138 -215.22088623]
[133.69378662 -200.07382202]
[124.70020294 -187.68939209]
[110.97631073 -180.91345215]
[110.66833496 -165.91662598]
[110.36035919 -150.91978455]
[110.05237579 -135.92294312]
[109.89838409 -120.92373657]
[109.89838409 -105.92373657]
[109.89838409 -90.92373657]
[109.89838409 -75.92373657]
[123.89704895 -72.42757416]
[136.65449524 -65.66687775]
[147.42161560 -56.03348923]
[155.56494141 -44.08805847]
[160.60389709 -30.52745247]
[162.23918152 -16.14408684]
[160.37052917 -1.77961683]
[155.10281372 11.72429943]
[146.74024963 23.57532883]
[135.76876831 33.07694626]
[122.82776642 39.66937256]
[108.67291260 42.96254730]
[108.36493683 57.95938492]
[108.05695343 72.95622253]
[107.74897766 87.95306396]
[114.32092285 100.29409790]
[107.24785614 112.35491943]
[106.93988037 127.35175323]
[106.63190460 142.34858704]
[106.32392883 157.34542847]
[115.09363556 145.17611694]
[125.45497131 134.32978821]
[137.21066284 125.01293945]
[150.13690186 117.40293884]
[163.98762512 111.64466858]
[178.49911499 107.84775543]
[193.39512634 106.08448029]
[208.39204407 106.38842010]
[223.20436096 108.75377655]
[237.55010986 113.13552856]
[251.15614319 119.45025635]
[263.76345825 127.57773590]
[275.13198853 137.36323547]
[285.04537964 148.62045288]
[293.31481934 161.13510132]
[299.78292847 174.66889954]
[304.32653809 188.96418762]
[306.85916138 203.74884033]
[307.33258057 218.74136353]
[305.73776245 233.65634155]
[302.10513306 248.20982361]
[296.50375366 262.12475586]
[289.04034424 275.13616943]
[279.85696411 286.99642944]
[269.12841797 297.47967529]
[257.05902100 306.38638306]
[243.87847900 313.54693604]
[229.83776855 318.82504272]
[215.20419312 322.12020874]
[200.25631714 323.36972046]
[185.27874756 322.54977417]
[170.55661011 319.67596436]
[156.37019348 314.80300903]
[142.98957825 308.02371216]
[130.66949463 299.46710205]
[119.64450073 289.29608154]
[110.12448883 277.70428467]
[102.29069519 264.91244507]
[96.29226685 251.16403198]
[92.24340057 236.72080994]
[90.22116852 221.85774231]
[90.26408386 206.85780334]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 42]
[2 41]
[3 40]
[4 37]
[5 36]
[6 35]
[7 34]
[8 33]
[9 32]
[10 31]
[11 30]
[44 110]
[45 109]
[46 108]
[47 107]
[49 105]
[50 104]
[51 103]
[52 102]
[63 90]
[64 89]
[65 88]
[66 87]
[68 86]
[69 85]
[70 84]
[71 83]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
