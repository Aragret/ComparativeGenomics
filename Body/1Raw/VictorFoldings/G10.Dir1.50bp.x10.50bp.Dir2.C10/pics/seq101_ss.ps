%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:23 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCCUCAUCCUAUUAUUUAUCGCACCUACGUUCAAUAUUACAGGCGAACAUACUUACUAAAGxxxxxxxxxxGAAUCGAACCCAUCCCUGAGAAUCCAAAAUUCUCCGUGCCACCUAUCACACCCCAUCCUACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[96.34365845 525.85241699]
[96.34365845 510.85241699]
[96.34365845 495.85241699]
[96.34365845 480.85241699]
[96.34365845 465.85241699]
[96.34365845 450.85241699]
[96.34365845 435.85241699]
[96.34365845 420.85241699]
[96.34365845 405.85241699]
[96.34365845 390.85241699]
[81.61384583 388.11877441]
[67.63347626 382.72351074]
[54.87919617 374.84899902]
[43.78614807 364.76223755]
[34.73311996 352.80560303]
[28.02959251 339.38543701]
[23.90517998 324.95812988]
[22.50175858 310.01464844]
[23.86857986 295.06375122]
[27.96055603 280.61477661]
[34.63973618 267.16021729]
[43.67996216 255.15893555]
[54.77452087 245.02053833]
[67.54655457 237.09138489]
[81.56186676 231.64277649]
[96.34365845 228.86163330]
[96.34365845 213.86163330]
[82.64974976 201.78378296]
[82.05704498 183.21644592]
[95.40125275 169.83992004]
[94.77727509 154.85290527]
[94.15329742 139.86589050]
[93.52931976 124.87886810]
[81.02516174 119.45140076]
[72.46896362 107.89438629]
[70.75040436 92.86399841]
[77.06679535 78.29711151]
[90.41226959 68.38018799]
[83.22975922 55.21160507]
[76.04724884 42.04302216]
[68.86474609 28.87443924]
[54.81912231 34.20681763]
[40.17821121 37.57691574]
[25.21476936 38.92195129]
[10.20755100 38.21686554]
[-4.56386757 35.47479630]
[-18.82430458 30.74682426]
[-32.30809402 24.12102890]
[-44.76404572 15.72084618]
[-55.96010590 5.70276546]
[-65.68770599 -5.74658251]
[-73.76562500 -18.41390228]
[-80.04337311 -32.06321335]
[-84.40399933 -46.44023132]
[-86.76627350 -61.27712631]
[-87.08618164 -76.29749298]
[-85.35777283 -91.22151184]
[-81.61323547 -105.77115631]
[-75.92233276 -119.67537689]
[-68.39108276 -132.67515564]
[-59.15979004 -144.52828979]
[-48.40042496 -155.01399231]
[-36.31342697 -163.93688965]
[-23.12397575 -171.13078308]
[-9.07777596 -176.46165466]
[5.56349707 -179.83015442]
[20.52708626 -181.17356873]
[35.53422928 -180.46687317]
[50.30535126 -177.72319031]
[64.56527710 -172.99368286]
[78.04834747 -166.36642456]
[90.50338745 -157.96490479]
[101.69836426 -147.94560242]
[111.42472839 -136.49520874]
[119.50127411 -123.82701111]
[125.77754211 -110.17701721]
[130.13661194 -95.79953003]
[132.49728394 -80.96237946]
[132.81556702 -65.94197845]
[131.08554077 -51.01814651]
[127.33942413 -36.46890640]
[121.64701843 -22.56529999]
[114.11436462 -9.56634426]
[104.88179016 2.28579807]
[94.12128448 12.77032948]
[82.03332520 21.69193077]
[89.21583557 34.86051178]
[96.39834595 48.02909470]
[103.58084869 61.19767761]
[97.31449127 47.56929779]
[99.78848267 32.77472687]
[110.14788055 21.92655754]
[124.81277466 18.77361870]
[138.71536255 24.40547943]
[147.05131531 36.87592316]
[146.93994141 51.87551117]
[138.41972351 64.22079468]
[124.43468475 69.64561462]
[138.75727844 65.18879700]
[153.07987976 60.73197937]
[167.40248108 56.27516556]
[181.72508240 51.81834793]
[196.04766846 47.36153412]
[204.75181580 33.88497925]
[220.72885132 32.43108749]
[231.72256470 44.11516571]
[229.29953003 59.97418213]
[215.31848145 67.84246063]
[200.50448608 61.68413162]
[186.18188477 66.14094543]
[171.85929871 70.59776306]
[157.53669739 75.05458069]
[143.21409607 79.51139069]
[128.89149475 83.96820831]
[127.45710754 110.43742371]
[108.51634216 124.25489044]
[109.14031219 139.24191284]
[109.76428986 154.22892761]
[110.38826752 169.21594238]
[120.59825897 175.45524597]
[126.44226837 185.75848389]
[126.55538177 197.48284912]
[121.02584076 207.68539429]
[111.34365845 213.86163330]
[111.34365845 228.86163330]
[126.12545013 231.64277649]
[140.14076233 237.09138489]
[152.91279602 245.02053833]
[164.00735474 255.15893555]
[173.04757690 267.16021729]
[179.72676086 280.61477661]
[183.81874084 295.06375122]
[185.18556213 310.01464844]
[183.78213501 324.95812988]
[179.65773010 339.38543701]
[172.95419312 352.80560303]
[163.90116882 364.76223755]
[152.80812073 374.84899902]
[140.05384827 382.72351074]
[126.07347107 388.11877441]
[111.34365845 390.85241699]
[111.34365845 405.85241699]
[111.34365845 420.85241699]
[111.34365845 435.85241699]
[111.34365845 450.85241699]
[111.34365845 465.85241699]
[111.34365845 480.85241699]
[111.34365845 495.85241699]
[111.34365845 510.85241699]
[111.34365845 525.85241699]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[26 125]
[27 124]
[30 119]
[31 118]
[32 117]
[33 116]
[38 89]
[39 88]
[40 87]
[41 86]
[98 114]
[99 113]
[100 112]
[101 111]
[102 110]
[103 109]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
