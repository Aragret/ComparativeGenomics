%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:33:59 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGAGACCCCAUUCUAUACCAACACCUAUUCUGAUUUUUCGGUCACCCUGAAGUUUAUAUUCUUxxxxxxxxxxGGCGACCUGCGACUCCUUGACGUUGACAAUCGAGUAGUACUCCCGAUUGAAGCCCCCAUUCCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[101.09015656 287.81594849]
[101.09015656 272.81594849]
[101.09015656 257.81594849]
[101.09015656 242.81596375]
[101.09015656 227.81596375]
[101.09015656 212.81596375]
[101.09015656 197.81596375]
[101.09015656 182.81596375]
[101.09015656 167.81596375]
[101.09015656 152.81596375]
[86.94283295 147.83064270]
[77.53897858 159.51684570]
[68.13512421 171.20306396]
[70.08448792 186.88667297]
[60.30713272 199.30354309]
[44.60379410 201.08699036]
[32.29098129 191.17889404]
[30.67366600 175.45758057]
[40.71137619 163.25021362]
[56.44891357 161.79919434]
[65.85276794 150.11299133]
[75.25662994 138.42678833]
[65.33348846 124.63337708]
[61.74815750 109.23406219]
[64.20072937 94.80706787]
[71.44624329 83.46205902]
[81.60128021 76.53181458]
[75.61298370 62.77898788]
[69.62468719 49.02615738]
[63.63639069 35.27333069]
[65.55126953 50.15060043]
[58.77593231 63.53323364]
[45.65174866 70.79655457]
[30.71407509 69.43055725]
[19.12496185 59.90730286]
[14.88928413 45.51775360]
[19.47077751 31.23455048]
[31.28620148 21.99357033]
[46.25281906 20.98832321]
[31.60009384 17.77932549]
[16.94736862 14.57032967]
[1.49247181 20.05469131]
[-10.80728245 9.20812130]
[-7.29896259 -6.81135798]
[8.40837383 -11.52428055]
[20.15636444 -0.08239474]
[34.80908966 3.12660146]
[49.46181488 6.33559752]
[60.95248032 -3.30621648]
[60.33665466 -18.29356956]
[59.72082901 -33.28092194]
[59.10500336 -48.26827621]
[44.14363480 -49.61455536]
[29.48600006 -52.90222168]
[15.38291168 -58.07502747]
[2.07569075 -65.04444885]
[-10.20795822 -73.69123840]
[-21.25784683 -83.86743927]
[-30.88489532 -95.39891052]
[-38.92437363 -108.08834839]
[-45.23871613 -121.71861267]
[-49.71987152 -136.05647278]
[-52.29116821 -150.85659790]
[-52.90860367 -165.86572266]
[-51.56161499 -180.82702637]
[-48.27324677 -195.48449707]
[-43.09977341 -209.58734131]
[-36.12971497 -222.89422607]
[-27.48234177 -235.17747498]
[-17.30561829 -246.22686768]
[-5.77368307 -255.85337830]
[6.91613626 -263.89224243]
[20.54670143 -270.20593262]
[34.88477707 -274.68640137]
[49.68501282 -277.25701904]
[64.69416809 -277.87371826]
[79.65541077 -276.52603149]
[94.31272888 -273.23696899]
[108.41532898 -268.06280518]
[121.72188568 -261.09213257]
[134.00471497 -252.44416809]
[145.05363464 -242.26692200]
[154.67958069 -230.73452759]
[162.71784973 -218.04432678]
[169.03089905 -204.41345215]
[173.51068115 -190.07516479]
[176.08056641 -175.27481079]
[176.69657898 -160.26562500]
[175.34815979 -145.30444336]
[172.05841064 -130.64727783]
[166.88359070 -116.54492950]
[159.91226196 -103.23870850]
[151.26371765 -90.95629120]
[141.08593750 -79.90785980]
[129.55308533 -70.28245544]
[116.86251068 -62.24478912]
[103.23133850 -55.93239594]
[88.89283752 -51.45328522]
[74.09235382 -48.88410187]
[74.70818329 -33.89674759]
[75.32400513 -18.90939522]
[75.93983459 -3.92204189]
[77.38922119 29.28503227]
[83.37751770 43.03786087]
[89.36581421 56.79069138]
[95.35411072 70.54351807]
[130.01324463 77.08285522]
[141.67620850 118.76021576]
[156.44831848 121.36494446]
[171.22044373 123.96966553]
[185.99255371 126.57438660]
[200.76467896 129.17910767]
[215.53678894 131.78382874]
[230.35926819 134.08470154]
[245.22587585 136.08076477]
[260.09246826 138.07682800]
[276.59533691 134.19197083]
[284.89678955 148.97445679]
[272.99008179 161.04370117]
[258.09640503 152.94342041]
[243.22981262 150.94735718]
[228.36322021 148.95130920]
[224.04739380 151.12454224]
[218.31362915 150.56610107]
[212.93206787 146.55595398]
[198.15995789 143.95123291]
[183.38783264 141.34649658]
[168.61572266 138.74177551]
[153.84359741 136.13705444]
[139.07148743 133.53233337]
[133.32615662 138.35324097]
[145.04113770 147.72123718]
[156.75611877 157.08921814]
[170.98286438 161.84310913]
[178.71202087 174.69847107]
[176.23867798 189.49314880]
[164.74838257 199.13540649]
[149.74896240 199.00331116]
[138.43029785 189.16015625]
[136.21824646 174.32254028]
[129.02687073 161.15879822]
[121.83548737 147.99505615]
[116.09015656 152.81596375]
[116.09015656 167.81596375]
[116.09015656 182.81596375]
[116.09015656 197.81596375]
[116.09015656 212.81596375]
[116.09015656 227.81596375]
[116.09015656 242.81596375]
[116.09015656 257.81594849]
[116.09015656 272.81594849]
[116.09015656 287.81594849]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 152]
[2 151]
[3 150]
[4 149]
[5 148]
[6 147]
[7 146]
[8 145]
[9 144]
[10 143]
[11 22]
[12 21]
[13 20]
[27 106]
[28 105]
[29 104]
[30 103]
[39 48]
[40 47]
[41 46]
[49 102]
[50 101]
[51 100]
[52 99]
[108 130]
[109 129]
[110 128]
[111 127]
[112 126]
[113 125]
[114 122]
[115 121]
[116 120]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
