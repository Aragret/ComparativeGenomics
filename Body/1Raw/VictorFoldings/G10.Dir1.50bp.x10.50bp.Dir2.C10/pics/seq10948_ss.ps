%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:07 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCUAAUCCAAACUCUAACACUAUGCUUAGGCGCUAUCACCACUCUGUUCGCAGCAGUCUGCxxxxxxxxxxCUCACCAUUGGCAGCCUAGCAUUAGCAGGAAUACCUUUCCUCACAGGUUUCUACUCCAAACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[100.13699341 405.90151978]
[100.13699341 390.90151978]
[100.13699341 375.90151978]
[100.13699341 360.90151978]
[100.13699341 345.90151978]
[100.13699341 330.90151978]
[100.13699341 315.90151978]
[100.13699341 300.90151978]
[100.13699341 285.90151978]
[100.13699341 270.90151978]
[83.99053192 265.51223755]
[70.61920166 254.93896484]
[61.62658691 240.42845154]
[58.09834290 223.70092773]
[60.47116470 206.74610901]
[68.47880554 191.58653259]
[81.18185425 180.03628540]
[97.07788849 173.48396301]
[96.14225769 158.51316833]
[95.20663452 143.54237366]
[94.27100372 128.57157898]
[93.33537292 113.60079193]
[89.32763672 99.14610291]
[82.42063904 85.83094788]
[75.51364136 72.51579285]
[68.60663605 59.20063782]
[61.32791138 72.31627655]
[46.57231522 75.01303101]
[35.12500381 65.31978607]
[35.35303116 50.32151794]
[47.08972931 40.98075104]
[61.75599670 44.12442780]
[56.26896667 30.16403770]
[50.78193665 16.20364952]
[45.29490280 2.24325871]
[39.20445633 -4.65299511]
[39.84226227 -12.06507015]
[34.64684677 -26.13658905]
[29.45142937 -40.20811081]
[24.25601387 -54.27962875]
[18.91450119 -68.29634094]
[13.42747021 -82.25672913]
[-1.23024642 -93.35317993]
[1.97461510 -110.57900238]
[-3.80165744 -124.42221832]
[-11.92319965 -137.03334045]
[-22.13667870 -148.01901245]
[-35.01545715 -149.28034973]
[-43.29694748 -158.69500732]
[-42.92862701 -170.82644653]
[-52.91135406 -182.02220154]
[-62.89408112 -193.21797180]
[-72.99272919 -204.30928040]
[-83.20620728 -215.29495239]
[-93.41969299 -226.28060913]
[-109.24549103 -230.57899475]
[-113.17372131 -246.50071716]
[-101.16335297 -257.66687012]
[-85.56962585 -252.59068298]
[-82.43402863 -236.49409485]
[-72.22054291 -225.50843811]
[-62.00706482 -214.52276611]
[-55.10460663 -211.74757385]
[-51.69831467 -203.20069885]
[-41.71558762 -192.00492859]
[-31.73286247 -180.80917358]
[-14.81560230 -176.24777222]
[-11.15101433 -158.23248291]
[-0.93753475 -147.24682617]
[-3.76500916 -161.97792053]
[-1.74673176 -176.84152222]
[4.90650988 -190.28527832]
[15.49985504 -200.90512085]
[28.92694092 -207.59191895]
[43.78544998 -209.64732361]
[58.52357101 -206.85665894]
[71.60205841 -199.51138306]
[81.65501404 -188.37863159]
[87.63249969 -174.62109375]
[88.91023254 -159.67561340]
[85.35477448 -145.10308838]
[77.33745575 -132.42544556]
[65.69559479 -122.96674347]
[51.64505768 -117.71484375]
[36.65327835 -117.21825409]
[22.28599167 -121.52882385]
[10.04156017 -130.19848633]
[15.81783295 -116.35527039]
[26.91500092 -111.43997192]
[31.82126808 -99.90101624]
[27.38786125 -87.74375916]
[32.87489319 -73.78337097]
[38.28378677 -68.67558289]
[38.32753372 -59.47504425]
[43.52294922 -45.40352631]
[48.71836472 -31.33200455]
[53.91378021 -17.26048660]
[59.25529480 -3.24377275]
[64.74232483 10.71661758]
[70.22935486 24.67700768]
[75.71638489 38.63739777]
[81.92179108 52.29363632]
[88.82879639 65.60879517]
[95.73579407 78.92395020]
[102.64279175 92.23910522]
[113.26399994 81.04774475]
[129.65383911 76.13085175]
[144.64653015 76.59889221]
[159.63922119 77.06693268]
[174.63192749 77.53497314]
[189.62461853 78.00302124]
[202.25466919 68.11052704]
[217.82971191 71.95726776]
[224.40191650 86.59235382]
[216.92964172 100.78899384]
[201.14498901 103.65674591]
[189.15657043 92.99571228]
[174.16387939 92.52767181]
[159.17118835 92.05963135]
[144.17848206 91.59159088]
[129.18579102 91.12355042]
[123.96588898 96.50894928]
[134.73652649 106.94894409]
[124.29634857 117.71940613]
[113.52606964 107.27976227]
[108.30616760 112.66516113]
[109.24179840 127.63595581]
[110.17742157 142.60675049]
[111.11305237 157.57754517]
[112.04868317 172.54832458]
[124.81752777 175.46214294]
[136.37377930 181.59661865]
[145.92205811 190.52154541]
[152.80728149 201.61494446]
[156.55960083 214.10636902]
[156.92645264 227.13049316]
[153.88954163 239.78695679]
[147.66563416 251.20268250]
[138.69108582 260.59210205]
[127.59127045 267.31115723]
[115.13699341 270.90151978]
[115.13699341 285.90151978]
[115.13699341 300.90151978]
[115.13699341 315.90151978]
[115.13699341 330.90151978]
[115.13699341 345.90151978]
[115.13699341 360.90151978]
[115.13699341 375.90151978]
[115.13699341 390.90151978]
[115.13699341 405.90151978]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[18 130]
[19 129]
[20 128]
[21 127]
[22 126]
[23 105]
[24 104]
[25 103]
[26 102]
[32 101]
[33 100]
[34 99]
[35 98]
[37 97]
[38 96]
[39 95]
[40 94]
[41 92]
[42 91]
[44 88]
[45 87]
[46 69]
[47 68]
[50 66]
[51 65]
[52 64]
[53 62]
[54 61]
[55 60]
[107 121]
[108 120]
[109 119]
[110 118]
[111 117]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
