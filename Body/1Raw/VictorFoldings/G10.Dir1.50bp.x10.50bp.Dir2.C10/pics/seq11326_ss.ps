%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:04 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGAAUCAACCCUGACCCCUCUCCUUCAUAAAUUAUUCAGCUUCCUACACUAUUAAAGUUUACCAxxxxxxxxxxAACCCAAUCCACAUCAAAACCCCCUCCCCAUGCUUACAAGCAAGUACAGCAAUCAACCCUCACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[87.85511017 99.65673065]
[76.37530518 90.00198364]
[64.89550018 80.34723663]
[53.41570282 70.69248962]
[41.93589783 61.03774643]
[30.45609665 51.38299942]
[18.97629356 41.72825241]
[7.49649096 32.07350540]
[-3.98331141 22.41875839]
[-15.46311378 12.76401234]
[-25.87469482 23.57011795]
[-36.99204254 33.64868546]
[-48.76443100 42.95372391]
[-61.13814926 51.44278336]
[-74.05673218 59.07712555]
[-87.46123505 65.82191467]
[-101.29049683 71.64637756]
[-115.48142242 76.52394104]
[-129.96925354 80.43235016]
[-144.68789673 83.35375977]
[-159.57017517 85.27485657]
[-174.54820251 86.18686676]
[-189.55361938 86.08562469]
[-204.51797485 84.97159576]
[-219.37298584 82.84986877]
[-234.05085754 79.73012543]
[-248.48463440 75.62658691]
[-262.60845947 70.55799103]
[-276.35787964 64.54745483]
[-289.67013550 57.62240982]
[-302.48455811 49.81445312]
[-314.74258423 41.15920639]
[-326.38836670 31.69616699]
[-337.36871338 21.46850967]
[-347.63351440 10.52290344]
[-357.13598633 -1.09071088]
[-365.83276367 -13.31934166]
[-373.68411255 -26.10719109]
[-380.65423584 -39.39591217]
[-386.71136475 -53.12487030]
[-391.82781982 -67.23142242]
[-395.98025513 -81.65120697]
[-399.14974976 -96.31842804]
[-401.32183838 -111.16615295]
[-402.48657227 -126.12664032]
[-402.63870239 -141.13163757]
[-401.77746582 -156.11267090]
[-399.90686035 -171.00137329]
[-397.03533936 -185.72982788]
[-393.17608643 -200.23083496]
[-388.34667969 -214.43821716]
[-382.56912231 -228.28713989]
[-375.86981201 -241.71444702]
[-368.27932739 -254.65882874]
[-359.83224487 -267.06124878]
[-350.56716919 -278.86511230]
[-340.52636719 -290.01657104]
[-329.75561523 -300.46475220]
[-318.30407715 -310.16192627]
[-306.22402954 -319.06390381]
[-293.57055664 -327.13003540]
[-280.40139771 -334.32354736]
[-266.77667236 -340.61157227]
[-252.75851440 -345.96545410]
[-238.41088867 -350.36074829]
[-223.79927063 -353.77743530]
[-208.99032593 -356.19989014]
[-194.05163574 -357.61703491]
[-179.05134583 -358.02246094]
[-164.05792236 -357.41427612]
[-149.13973999 -355.79528809]
[-134.36491394 -353.17288208]
[-119.80081940 -349.55899048]
[-105.51393127 -344.97009277]
[-91.56942749 -339.42718506]
[-78.03094482 -332.95553589]
[-64.96024323 -325.58465576]
[-52.41697311 -317.34820557]
[-40.45836639 -308.28372192]
[-29.13898087 -298.43261719]
[-18.51046944 -287.83981323]
[-8.62132740 -276.55361938]
[0.48332411 -264.62557983]
[8.76194096 -252.11009216]
[16.17675018 -239.06427002]
[22.69392014 -225.54762268]
[28.28371239 -211.62185669]
[32.92062378 -197.35047913]
[36.58349228 -182.79862976]
[39.25561142 -168.03269958]
[40.92478561 -153.12007141]
[41.58340073 -138.12876892]
[41.22845078 -123.12719727]
[39.86154938 -108.18382263]
[37.48894501 -93.36681366]
[34.12145233 -78.74378967]
[29.77444267 -64.38146210]
[24.46774864 -50.34536362]
[18.22558594 -36.69954681]
[11.07643318 -23.50626945]
[3.05291224 -10.82573128]
[-5.80836725 1.28420937]
[5.67143536 10.93895626]
[17.15123749 20.59370232]
[28.63104057 30.24844933]
[40.11084366 39.90319824]
[51.59064484 49.55794144]
[63.07044601 59.21268845]
[74.55024719 68.86743927]
[86.03005219 78.52218628]
[97.50985718 88.17693329]
[104.56299591 88.86738586]
[109.98673248 93.38209534]
[124.92438507 94.74831390]
[139.86204529 96.11453247]
[154.79968262 97.48074341]
[169.45471191 90.12124634]
[183.00518799 99.35796356]
[181.51153564 115.68894958]
[166.51029968 122.31428528]
[153.43347168 112.41839600]
[138.49581909 111.05218506]
[123.55816650 109.68596649]
[108.62051392 108.31974792]
[120.74160004 117.15599823]
[131.00263977 128.09724426]
[139.04379272 140.75978088]
[144.58303833 154.69953918]
[147.42611694 169.42764282]
[147.47332764 184.42756653]
[144.72300720 199.17326355]
[139.27160645 213.14761353]
[131.31033325 225.86051941]
[121.11835480 236.86613464]
[109.05313110 245.77850342]
[95.53778076 252.28506470]
[81.04628754 256.15762329]
[66.08687592 257.26037598]
[51.18417740 255.55464172]
[36.86082840 251.10025024]
[23.61914825 244.05340576]
[11.92352962 234.66125488]
[2.18413901 223.25317383]
[-5.25746202 210.22924805]
[-10.14029503 196.04623413]
[-12.29311943 181.20152283]
[-11.64043331 166.21574402]
[-8.20512772 151.61441040]
[-2.10767889 137.90962219]
[6.43807411 125.58201599]
[17.13243103 115.06389618]
[29.60033798 106.72415924]
[43.40454483 100.85526276]
[58.06093216 97.66304016]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 111]
[2 110]
[3 109]
[4 108]
[5 107]
[6 106]
[7 105]
[8 104]
[9 103]
[10 102]
[113 124]
[114 123]
[115 122]
[116 121]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
