%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:33 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCAAUCUCCAGCAUUCCCCCUCAAACCUAAGAAAUAUGUCUGAUAAAAGAGUUACUUUGAUAGxxxxxxxxxxACUAGUCUUUGCCGCCUGCGAAGCAGCGGUGGGCCUAGCCCUACUAGUCUCAAUCUCCAACACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[90.47070312 253.07450867]
[90.47070312 238.07450867]
[90.47070312 223.07450867]
[90.47070312 208.07450867]
[90.47070312 193.07450867]
[90.47070312 178.07450867]
[90.47070312 163.07450867]
[90.47070312 148.07450867]
[90.47070312 133.07450867]
[90.47070312 118.07450104]
[89.22647858 112.95869446]
[89.58766937 108.22928619]
[91.31803894 104.30612183]
[76.41114044 102.63744354]
[61.50424957 100.96876526]
[59.71020126 113.84960175]
[48.83765411 125.72301483]
[30.15747643 130.88714600]
[15.37953186 133.45858765]
[0.60158700 136.03004456]
[-14.14953995 138.75111389]
[-28.87233353 141.62153625]
[-43.50106812 144.93818665]
[-58.02222443 148.69796753]
[-72.54338074 152.45774841]
[-74.62004852 167.51617432]
[-82.30555725 180.63110352]
[-94.42791748 189.80261230]
[-109.13857269 193.63212585]
[-124.19424438 191.53565979]
[-137.29905701 183.83290100]
[-146.45462036 171.69848633]
[-150.26477051 156.98280334]
[-148.14849854 141.92990112]
[-140.42851257 128.83523560]
[-128.28205872 119.69564819]
[-113.56137848 115.90485382]
[-98.51127625 118.04093170]
[-85.42677307 125.77812958]
[-76.30316925 137.93659973]
[-61.78201294 134.17680359]
[-47.26085663 130.41702271]
[-45.15439224 127.52042389]
[-41.51291656 125.52590942]
[-36.78815460 125.15614319]
[-31.74275780 126.89875031]
[-17.01996422 124.02832031]
[-11.02128887 119.63565826]
[-1.96986175 121.25209808]
[12.80808353 118.68064880]
[27.58602715 116.10919952]
[30.26195717 109.10281372]
[20.80245209 97.46160889]
[35.61381531 95.09004974]
[38.28974533 88.08366394]
[28.98842239 76.31568146]
[19.68709755 64.54770660]
[10.38577366 52.77972412]
[-5.31713057 49.49364090]
[-12.40961075 35.10349274]
[-5.45092297 20.64817619]
[10.22082329 17.21656799]
[22.58360481 27.44110680]
[22.15375519 43.47840118]
[31.45507812 55.24637985]
[40.75640106 67.01435852]
[50.05772781 78.78234100]
[63.17292404 86.06187439]
[78.07981873 87.73054504]
[92.98671722 89.39922333]
[107.54522705 85.78678894]
[119.94288635 77.34297180]
[104.98146820 76.26778412]
[92.48742676 67.96725464]
[85.69773102 54.59189987]
[86.37147522 39.60703659]
[94.33411407 26.89497948]
[107.52265930 19.74918938]
[122.52019501 20.02101517]
[135.44113159 27.64003181]
[142.93788147 40.63228989]
[143.06817627 55.63172150]
[135.79965210 68.75077820]
[149.64326477 62.97543335]
[163.48686218 57.20008850]
[177.33047485 51.42474365]
[191.17407227 45.64940262]
[205.01768494 39.87405777]
[205.13098145 28.74928093]
[210.38215637 18.20700264]
[220.22138977 10.61029911]
[233.02621460 7.92176294]
[246.36039734 11.22745609]
[259.09005737 3.29299617]
[271.81973267 -4.64146376]
[284.54940796 -12.57592392]
[297.27905273 -20.51038361]
[302.94845581 -27.74910927]
[310.34808350 -28.47362709]
[323.23596191 -36.14846802]
[336.12380981 -43.82330704]
[346.63900757 -57.12244797]
[362.32928467 -50.69976807]
[360.50112915 -33.84467697]
[343.79864502 -30.93544960]
[330.91079712 -23.26061058]
[318.02294922 -15.58577061]
[305.21353149 -7.78072023]
[292.48385620 0.15373972]
[279.75418091 8.08819962]
[267.02453613 16.02265930]
[254.29486084 23.95712090]
[257.90728760 38.51563263]
[272.86956787 39.57882690]
[287.83184814 40.64202499]
[302.79412842 41.70521927]
[319.02197266 36.79676056]
[328.23092651 51.03163147]
[317.10165405 63.82129669]
[301.73092651 56.66749191]
[286.76864624 55.60429764]
[271.80636597 54.54110336]
[256.84411621 53.47790527]
[231.95016479 65.76963043]
[210.79302979 53.71766281]
[196.94941711 59.49300766]
[183.10581970 65.26834869]
[169.26220703 71.04369354]
[155.41860962 76.81903839]
[141.57499695 82.59438324]
[128.38670349 89.74062347]
[115.98904419 98.18444824]
[128.85508728 90.47308350]
[143.76918030 88.87000275]
[157.98011780 93.67093658]
[168.86643982 103.99024963]
[174.41990662 117.92433929]
[173.61610413 132.90278625]
[166.60330200 146.16252136]
[154.67514038 155.25750732]
[140.03201294 158.51002502]
[125.37512970 155.32003784]
[113.40825653 146.27604675]
[106.33891296 133.04637146]
[105.47070312 118.07450104]
[105.47070312 133.07450867]
[105.47070312 148.07450867]
[105.47070312 163.07450867]
[105.47070312 178.07450867]
[105.47070312 193.07450867]
[105.47070312 208.07450867]
[105.47070312 223.07450867]
[105.47070312 238.07450867]
[105.47070312 253.07450867]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 154]
[2 153]
[3 152]
[4 151]
[5 150]
[6 149]
[7 148]
[8 147]
[9 146]
[10 145]
[13 70]
[14 69]
[15 68]
[18 51]
[19 50]
[20 49]
[21 47]
[22 46]
[23 42]
[24 41]
[25 40]
[55 67]
[56 66]
[57 65]
[58 64]
[71 132]
[72 131]
[83 130]
[84 129]
[85 128]
[86 127]
[87 126]
[88 125]
[93 112]
[94 111]
[95 110]
[96 109]
[97 108]
[99 107]
[100 106]
[101 105]
[113 123]
[114 122]
[115 121]
[116 120]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
