%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:18 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCUGCUUCUUCGAAUUUGCAAUUCAAUAUGAAAAUCACCUCGGAGCUGGUAAAAAGAGGCCxxxxxxxxxxACAGGCUUCCACGGACUUCACGUCAUUAUUGGCUCAACUUUCCUCACUAUCUGCUUCAUCCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[92.50000000 247.81181335]
[92.50000000 232.81181335]
[92.50000000 217.81181335]
[92.50000000 202.81181335]
[92.50000000 187.81181335]
[92.50000000 172.81181335]
[92.50000000 157.81181335]
[92.50000000 142.81181335]
[92.50000000 127.81181335]
[92.50000000 112.81181335]
[81.09897614 103.06416321]
[68.66889954 112.85210419]
[54.89382935 107.18671417]
[40.07607269 109.51781464]
[25.25831223 111.84892273]
[21.10276794 115.21804810]
[16.52566147 116.48394012]
[12.41534138 115.84600830]
[9.44623280 113.83308411]
[-5.48807526 115.23538208]
[-20.42238235 116.63768768]
[-35.35668945 118.03999329]
[-50.21973801 120.06232452]
[-64.98579407 122.70119476]
[-79.75184631 125.34005737]
[-94.51790619 127.97891998]
[-106.74166870 138.02333069]
[-120.63161469 132.64573669]
[-135.39767456 135.28460693]
[-142.04621887 149.30517578]
[-155.68220520 156.71057129]
[-171.06228638 154.65325928]
[-182.27253723 143.92431641]
[-185.00236511 128.64924622]
[-178.20210266 114.70162964]
[-164.48660278 107.44459534]
[-149.12973022 109.66863251]
[-138.03654480 120.51854706]
[-123.27048492 117.87968445]
[-112.10289001 108.02402496]
[-97.15676880 113.21286774]
[-82.39070892 110.57399750]
[-67.62465668 107.93513489]
[-52.85860062 105.29627228]
[-51.13961792 103.00445557]
[-48.37997055 101.27867126]
[-44.79928589 100.52996063]
[-40.76571655 101.07894897]
[-36.75899506 103.10568237]
[-21.82468605 101.70338440]
[-6.89037848 100.30107880]
[8.04392910 98.89877319]
[22.92720795 97.03115845]
[37.74496841 94.70005798]
[52.56272507 92.36894989]
[63.93293762 82.74774933]
[78.76787567 88.24640656]
[103.89210510 81.95688629]
[113.63975525 70.55586243]
[122.90470123 58.75922394]
[131.67091370 46.58738708]
[140.43711853 34.41555023]
[137.30065918 17.23707390]
[147.33485413 3.35906720]
[163.96351624 1.04695797]
[172.47459412 -11.30461502]
[180.98568726 -23.65618706]
[185.88723755 -37.83274460]
[186.82287598 -52.80353546]
[187.75849915 -67.77433014]
[174.24015808 -74.78677368]
[164.74783325 -86.69541931]
[160.92613220 -101.43700409]
[163.43717957 -116.45747375]
[171.84593201 -129.15443420]
[184.69551086 -137.32806396]
[199.75965881 -139.56224060]
[214.42840576 -135.46984863]
[226.16032410 -125.75995636]
[232.92277527 -112.11483765]
[233.54411316 -96.89860535]
[227.91671753 -82.74755859]
[217.01553345 -72.11344910]
[202.72929382 -66.83869934]
[201.79365540 -51.86790848]
[200.85803223 -36.89711761]
[207.24670410 -32.96840286]
[220.02406311 -25.11097908]
[226.41275024 -21.18226624]
[239.35079956 -28.77217293]
[252.28886414 -36.36208344]
[256.23519897 -56.00064087]
[273.03939819 -66.33681488]
[291.76367188 -61.16265869]
[304.20312500 -69.54479980]
[316.64254761 -77.92694855]
[321.10995483 -93.33544159]
[335.99652100 -99.31625366]
[349.88250732 -91.28141785]
[352.11581421 -75.39456940]
[340.98321533 -63.84274292]
[325.02468872 -65.48750305]
[312.58526611 -57.10536194]
[300.14581299 -48.72322083]
[300.96932983 -38.38004303]
[297.36517334 -28.56376076]
[289.92990112 -21.09589005]
[279.97741699 -17.39221954]
[269.30718994 -18.19472504]
[259.87875366 -23.42402649]
[246.94070435 -15.83411789]
[234.00265503 -8.24420929]
[193.33726501 -15.14509678]
[184.82617188 -2.79352450]
[176.31507874 9.55804825]
[180.40133667 21.81771278]
[176.60446167 34.37390900]
[166.10209656 42.55487823]
[152.60894775 43.18175507]
[143.84274292 55.35359192]
[135.07653809 67.52542877]
[135.43730164 70.36746979]
[134.65684509 73.52735138]
[132.60681152 76.55708313]
[129.32839966 78.97019196]
[125.04077911 80.30351257]
[115.29312134 91.70453644]
[126.68674469 81.94823456]
[141.00286865 77.47068787]
[155.92507935 78.99639130]
[169.03886414 86.27847290]
[178.22233582 98.13865662]
[181.98954773 112.65789032]
[179.73095703 127.48686981]
[171.81201172 140.22619629]
[159.51403809 148.81454468]
[144.82691956 151.86230469]
[130.12713623 148.87629700]
[117.79318237 140.33969116]
[109.82077026 127.63376617]
[107.50000000 112.81181335]
[107.50000000 127.81181335]
[107.50000000 142.81181335]
[107.50000000 157.81181335]
[107.50000000 172.81181335]
[107.50000000 187.81181335]
[107.50000000 202.81181335]
[107.50000000 217.81181335]
[107.50000000 232.81181335]
[107.50000000 247.81181335]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[11 57]
[13 55]
[14 54]
[15 53]
[19 52]
[20 51]
[21 50]
[22 49]
[23 44]
[24 43]
[25 42]
[26 41]
[28 39]
[29 38]
[58 127]
[59 126]
[60 121]
[61 120]
[62 119]
[65 115]
[66 114]
[67 113]
[68 86]
[69 85]
[70 84]
[89 112]
[90 111]
[91 110]
[94 104]
[95 103]
[96 102]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
