%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:25 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCUAGCCACACCCCCACGGGAAACAGCAGUGAUUAACCUUUAGCAAUAAACGAAAGUUUAAxxxxxxxxxxCCGCUACCAUAAUCAUCGCUAUCCCCACCGGCGUCAAAGUAUUUAGCUGACUCGCCACACCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[61.80236053 400.00247192]
[61.80236053 385.00247192]
[61.80236053 370.00247192]
[61.80236053 355.00247192]
[61.80236053 340.00247192]
[61.80236053 325.00247192]
[61.80236053 310.00247192]
[61.80236053 295.00247192]
[61.80236053 280.00247192]
[61.80236053 265.00247192]
[55.25578308 261.34292603]
[48.06439972 274.50665283]
[40.87301636 287.67037964]
[37.70907593 302.33291626]
[22.80458069 304.02288818]
[16.43806076 290.44100952]
[27.27035713 280.06646729]
[34.71649170 267.04513550]
[42.16262817 254.02380371]
[35.61605072 250.36425781]
[22.83869362 258.22167969]
[10.06133556 266.07910156]
[2.73900175 280.75274658]
[-13.64409924 281.47799683]
[-22.23443794 267.50881958]
[-14.19501019 253.21548462]
[2.20390987 253.30174255]
[14.98126698 245.44432068]
[27.75862503 237.58689880]
[23.53986740 211.06376648]
[33.01871872 186.99920654]
[52.63079834 171.70297241]
[76.31224823 168.63160706]
[79.71522522 154.02270508]
[83.11820221 139.41381836]
[86.52117920 124.80492401]
[73.99016571 110.97503662]
[72.82608032 92.34878540]
[83.53766632 77.06630707]
[78.34224701 62.99478531]
[73.14683533 48.92326355]
[67.95141602 34.85174561]
[62.75600052 20.78022575]
[57.56058502 6.70870686]
[45.11456680 4.91618872]
[34.68648148 -1.97984862]
[28.23970985 -12.60687923]
[26.95625877 -24.89720917]
[31.02045822 -36.49018478]
[39.59543610 -45.18560410]
[34.98987198 -59.46106339]
[30.38430786 -73.73652649]
[25.77874184 -88.01198578]
[19.51856995 -92.68405151]
[16.87094498 -99.20058441]
[17.88768959 -105.37783051]
[10.16360569 -118.23622894]
[2.43952036 -131.09463501]
[-5.28456450 -143.95303345]
[-13.00864983 -156.81143188]
[-27.60531616 -164.28601074]
[-28.16012573 -180.67578125]
[-14.10233784 -189.12033081]
[0.10660193 -180.93266296]
[-0.15024720 -164.53552246]
[7.57383776 -151.67712402]
[15.29792309 -138.81871033]
[23.02200699 -125.96031189]
[30.74609184 -113.10191345]
[31.98162270 -128.05093384]
[39.00757980 -141.30371094]
[50.68712234 -150.71585083]
[65.13042450 -154.76440430]
[80.00048828 -152.79432678]
[92.89124298 -145.12434387]
[101.71688843 -132.99552917]
[105.04937744 -118.37039948]
[102.34950256 -103.61537933]
[94.05411530 -91.11791992]
[81.50546265 -82.90017700]
[66.73398590 -80.29183960]
[52.12979507 -83.71495056]
[40.05420303 -92.61755371]
[44.65976715 -78.34208679]
[49.26533127 -64.06662750]
[53.87089539 -49.79116821]
[70.85130310 -45.12924957]
[81.76864624 -31.11453056]
[82.14045715 -13.19682693]
[71.63210297 1.51329112]
[76.82752228 15.58481026]
[82.02293396 29.65633011]
[87.21835327 43.72784805]
[92.41376495 57.79936981]
[97.60918427 71.87088776]
[111.02029419 67.36015320]
[127.30330658 69.85792542]
[141.42811584 64.80916595]
[155.55291748 59.76041031]
[157.62605286 44.59595490]
[166.51844788 32.13866806]
[180.18667603 25.25113869]
[195.48988342 25.51607323]
[208.91151428 32.87259293]
[217.36737061 45.63021851]
[218.91436768 60.85734558]
[213.19699097 75.05489349]
[201.52908325 84.96036530]
[186.59182739 88.29755402]
[171.81768799 84.29960632]
[160.60166931 73.88521576]
[146.47686768 78.93396759]
[132.35206604 83.98272705]
[132.58609009 91.47907257]
[133.05412292 106.47177124]
[133.28814697 113.96811676]
[147.70036316 118.12600708]
[162.11257935 122.28388977]
[179.00704956 120.86496735]
[185.04737854 136.70640564]
[171.49716187 146.89601135]
[157.95469666 136.69610596]
[143.54248047 132.53822327]
[129.13026428 128.38034058]
[114.02342987 131.46664429]
[101.13007355 128.20790100]
[97.72709656 142.81680298]
[94.32411957 157.42568970]
[90.92114258 172.03457642]
[99.95018005 176.36573792]
[107.89894104 182.68566895]
[114.32975769 190.72621155]
[118.87127686 200.12312317]
[121.23950195 210.43234253]
[121.25476837 221.15098572]
[118.85383606 231.74183655]
[114.09606934 241.66026306]
[107.16354370 250.38220215]
[98.35466003 257.43176270]
[88.07166290 262.40701294]
[76.80236053 265.00247192]
[76.80236053 280.00247192]
[76.80236053 295.00247192]
[76.80236053 310.00247192]
[76.80236053 325.00247192]
[76.80236053 340.00247192]
[76.80236053 355.00247192]
[76.80236053 370.00247192]
[76.80236053 385.00247192]
[76.80236053 400.00247192]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[20 29]
[21 28]
[22 27]
[33 129]
[34 128]
[35 127]
[36 126]
[39 95]
[40 94]
[41 93]
[42 92]
[43 91]
[44 90]
[50 86]
[51 85]
[52 84]
[53 83]
[56 69]
[57 68]
[58 67]
[59 66]
[60 65]
[97 113]
[98 112]
[99 111]
[116 124]
[117 123]
[118 122]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
