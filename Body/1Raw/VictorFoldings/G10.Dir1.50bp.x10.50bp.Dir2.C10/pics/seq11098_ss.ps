%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:11 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCCCACCCUUACUAACAUUAACGAAAAUAACCCCACCCUACUAAACCCCAUUAAACGCCUGGxxxxxxxxxxUUGGGACAGACCUAGUUCAAUGAAUCUGAGGAGGCUACUCAGUAGACAGUCCCACCCUCACCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[97.30258942 408.36663818]
[97.30258942 393.36663818]
[97.30258942 378.36663818]
[97.30258942 363.36663818]
[97.30258942 348.36663818]
[97.30258942 333.36663818]
[97.30258942 318.36663818]
[97.30258942 303.36663818]
[97.30258942 288.36663818]
[97.30258942 273.36663818]
[81.76815796 269.05282593]
[68.05093384 260.55496216]
[57.25219727 248.54614258]
[50.24147415 233.98167419]
[47.58652496 218.02314758]
[49.50738907 201.94572449]
[55.85815430 187.03630066]
[66.13800812 174.49043274]
[79.53073883 165.31655884]
[94.96952057 160.25486755]
[94.35369873 145.26750183]
[93.73786926 130.28015137]
[75.20626068 118.47626495]
[69.19343567 97.34338379]
[78.73538208 77.55187988]
[71.36914825 64.48518372]
[64.00290680 51.41849136]
[56.63666534 38.35179520]
[49.13666534 25.36141396]
[41.50369644 12.44871616]
[33.87072754 -0.46398199]
[19.22842789 3.20794225]
[4.15992785 2.60576034]
[-10.11392307 -2.21318483]
[-22.43907166 -10.85025501]
[-31.82156372 -22.59848213]
[-37.50769424 -36.50042343]
[-39.04456329 -51.42620087]
[-36.31611633 -66.16530609]
[-29.55187798 -79.52481842]
[-19.30766869 -90.42589569]
[-26.94063950 -103.33859253]
[-34.57360840 -116.25128937]
[-42.20657730 -129.16398621]
[-56.11648941 -124.81599426]
[-70.63873291 -123.68653870]
[-85.03874207 -125.82938385]
[-98.58886719 -131.13285828]
[-110.60519409 -139.32563782]
[-120.48200989 -149.99067688]
[-127.72235870 -162.58644104]
[-131.96305847 -176.47433472]
[-132.99290466 -190.95114136]
[-130.76316833 -205.28462219]
[-125.38991547 -218.75048828]
[-117.14798737 -230.66912842]
[-106.45688629 -240.43978882]
[-113.82312775 -253.50648499]
[-121.18936157 -266.57318115]
[-136.59651184 -267.36273193]
[-149.11763000 -276.37524414]
[-154.75726318 -290.73483276]
[-151.71585083 -305.85940552]
[-140.96386719 -316.92282104]
[-125.93225861 -320.39471436]
[-111.41753387 -315.16723633]
[-102.05130005 -302.90847778]
[-100.82228851 -287.53015137]
[-108.12267303 -273.93942261]
[-100.75643158 -260.87271118]
[-93.39019012 -247.80603027]
[-78.52044678 -252.05891418]
[-63.05685425 -252.64486694]
[-47.89084244 -249.52593994]
[-33.89766312 -242.87789917]
[-21.88590813 -233.08029175]
[-12.55075264 -220.69479370]
[-6.43374968 -206.43302917]
[-3.89140105 -191.11563110]
[-5.07438707 -175.62507629]
[-9.91864109 -160.85481262]
[-18.14880562 -147.65774536]
[-29.29388046 -136.79695129]
[-21.66091156 -123.88426208]
[-14.02794075 -110.97155762]
[-6.39497089 -98.05886078]
[8.09442997 -101.77835083]
[23.05994034 -101.26375580]
[37.28842545 -96.54824829]
[49.62408447 -88.00586700]
[59.06233597 -76.32188416]
[64.83163452 -62.43782425]
[66.45652771 -47.47560501]
[63.79682922 -32.64688110]
[57.05968094 -19.15491486]
[46.78342438 -8.09695244]
[54.41639328 4.81574583]
[62.04936600 17.72844315]
[68.19841003 21.91191673]
[69.70336151 30.98555565]
[77.06960297 44.05224991]
[84.43584442 57.11894608]
[91.80207825 70.18563843]
[104.09318542 69.35121918]
[115.73455048 73.38185120]
[124.87828827 81.63773346]
[130.07295227 92.80836487]
[145.07215881 92.96236420]
[160.07136536 93.11635590]
[175.07057190 93.27035522]
[190.06979370 93.42435455]
[200.10580444 81.43217468]
[215.51123047 78.74756622]
[229.01206970 86.63813019]
[234.23367310 101.37817383]
[228.71054077 116.00790405]
[215.05052185 123.61960602]
[199.70347595 120.61927032]
[189.91578674 108.42356110]
[174.91658020 108.26956177]
[159.91737366 108.11557007]
[144.91816711 107.96157074]
[129.91894531 107.80757141]
[128.14659119 112.80120850]
[125.54766846 117.41891479]
[122.19847870 121.52508545]
[118.19739532 124.99913025]
[113.66191864 127.73903656]
[108.72522736 129.66432190]
[109.34104919 144.65168762]
[109.95687866 159.63903809]
[123.58241272 162.60559082]
[136.08296204 168.76310730]
[146.72421265 177.74450684]
[154.88235474 189.01701355]
[160.08065796 201.91377258]
[162.01731873 215.67318726]
[160.58299255 229.48399353]
[155.86692810 242.53309631]
[148.15148926 254.05334473]
[137.89515686 263.36871338]
[125.70539093 269.93402100]
[112.30258942 273.36663818]
[112.30258942 288.36663818]
[112.30258942 303.36663818]
[112.30258942 318.36663818]
[112.30258942 333.36663818]
[112.30258942 348.36663818]
[112.30258942 363.36663818]
[112.30258942 378.36663818]
[112.30258942 393.36663818]
[112.30258942 408.36663818]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 152]
[2 151]
[3 150]
[4 149]
[5 148]
[6 147]
[7 146]
[8 145]
[9 144]
[10 143]
[20 131]
[21 130]
[22 129]
[25 103]
[26 102]
[27 101]
[28 100]
[29 98]
[30 97]
[31 96]
[41 86]
[42 85]
[43 84]
[44 83]
[57 71]
[58 70]
[59 69]
[107 123]
[108 122]
[109 121]
[110 120]
[111 119]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
