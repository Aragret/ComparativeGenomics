%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:23 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCCAUCAUCCACAACCUUAACAAUGAACAAGAUAUUCGAAAAAUAGGAGGACUACUCAAAAxxxxxxxxxxAGGAGGCGUCCUUGCCCUAUUACUAUCCAUCCUCAUCCUAGCAAUAAUCCCCAUCCUCCACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[92.50000000 285.27990723]
[92.50000000 270.27990723]
[92.50000000 255.27992249]
[92.50000000 240.27992249]
[92.50000000 225.27992249]
[92.50000000 210.27992249]
[92.50000000 195.27992249]
[92.50000000 180.27992249]
[92.50000000 165.27992249]
[92.50000000 150.27992249]
[83.57975006 148.11128235]
[75.19496155 144.37374878]
[67.61905670 139.18920898]
[61.09908295 132.72673035]
[48.32172394 140.58415222]
[35.54436874 148.44157410]
[22.76701164 156.29899597]
[25.20293236 171.30349731]
[21.70659637 186.09687805]
[12.81116772 198.42326355]
[-0.12686513 206.40296936]
[-15.13454628 208.81915283]
[-29.92331314 205.30335999]
[-42.23798752 196.39172363]
[-50.20066833 183.44320679]
[-52.59710693 168.43235779]
[-49.06186295 153.64822388]
[-40.13403320 141.34529114]
[-27.17505264 133.39964294]
[-12.16106606 131.02294922]
[2.61839986 134.57763672]
[14.90958500 143.52165222]
[27.68694305 135.66421509]
[40.46429825 127.80679321]
[53.24165726 119.94937134]
[49.19826889 98.12808990]
[54.83662796 76.66355133]
[69.08218384 59.64645767]
[89.22002411 50.31990433]
[111.41230011 50.46133423]
[116.89933777 36.50094604]
[122.38636780 22.54055595]
[127.72788239 8.52384281]
[132.92329407 -5.54767656]
[138.11871338 -19.61919594]
[130.30265808 -27.85687447]
[126.14751434 -38.36002350]
[126.21166229 -49.59461594]
[130.44075012 -59.93778229]
[138.18203735 -67.91224670]
[148.28474426 -72.39727783]
[148.59680176 -87.39402771]
[148.90885925 -102.39078522]
[149.22091675 -117.38753510]
[149.53297424 -132.38429260]
[149.84503174 -147.38104248]
[149.68899536 -162.38023376]
[149.06501770 -177.36724854]
[148.44104004 -192.35426331]
[147.81706238 -207.34127808]
[147.19308472 -222.32829285]
[135.84483337 -232.99859619]
[135.42553711 -248.20643616]
[145.66795349 -258.95950317]
[145.04397583 -273.94653320]
[144.41999817 -288.93353271]
[129.96498108 -293.49731445]
[117.94448090 -302.73220825]
[109.81005859 -315.52310181]
[106.54397583 -330.32540894]
[108.54062653 -345.35171509]
[115.55890656 -358.78744507]
[126.75131989 -369.01025391]
[140.76634216 -374.78564453]
[155.91157532 -375.41619873]
[170.35816956 -370.82580566]
[182.36163330 -361.56875610]
[190.47245789 -348.76290894]
[193.71125793 -333.95458984]
[191.68692017 -318.93200684]
[184.64389038 -305.50921631]
[173.43266296 -295.30706787]
[159.40701294 -289.55752563]
[160.03099060 -274.57049561]
[160.65496826 -259.58346558]
[171.75579834 -249.71903992]
[172.60209656 -234.52896118]
[162.18009949 -222.95227051]
[162.80407715 -207.96525574]
[163.42805481 -192.97824097]
[164.05203247 -177.99122620]
[164.67601013 -163.00421143]
[167.07086182 -160.33360291]
[168.25712585 -156.34681702]
[167.61988831 -151.64082336]
[164.84178162 -147.06898499]
[164.52972412 -132.07223511]
[164.21766663 -117.07548523]
[163.90560913 -102.07872772]
[163.59355164 -87.08197784]
[163.28149414 -72.08522034]
[175.38653564 -65.05628204]
[182.78976440 -53.17645645]
[197.76948547 -53.95630264]
[212.74919128 -54.73614883]
[218.17227173 -68.96675873]
[228.91920471 -79.75672150]
[243.12802124 -85.23661041]
[258.33697510 -84.45700836]
[271.91101074 -77.55298615]
[281.49832153 -65.72070312]
[285.43789673 -51.01016998]
[283.04714966 -35.97008514]
[274.74029541 -23.20622826]
[261.95654297 -14.93001461]
[246.91078186 -12.57534981]
[232.20973206 -16.55019379]
[220.40048218 -26.16588020]
[213.52903748 -39.75643539]
[198.54933167 -38.97658920]
[183.56961060 -38.19674301]
[172.57592773 -20.41394424]
[152.19023132 -14.42378044]
[146.99481201 -0.35226080]
[141.79939270 13.71925831]
[142.43721008 21.13133430]
[136.34675598 28.02758789]
[130.85972595 41.98797607]
[125.37269592 55.94836807]
[133.84352112 62.06668472]
[140.88442993 69.78769684]
[146.19796753 78.78519440]
[149.55961609 88.67903137]
[150.82734680 99.05117798]
[149.94761658 109.46340942]
[146.95756531 119.47581482]
[141.98353577 128.66535950]
[135.23568726 136.64376831]
[126.99911499 143.07397461]
[117.62182617 147.68428040]
[107.50000000 150.27992249]
[107.50000000 165.27992249]
[107.50000000 180.27992249]
[107.50000000 195.27992249]
[107.50000000 210.27992249]
[107.50000000 225.27992249]
[107.50000000 240.27992249]
[107.50000000 255.27992249]
[107.50000000 270.27990723]
[107.50000000 285.27990723]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[14 35]
[15 34]
[16 33]
[17 32]
[40 129]
[41 128]
[42 127]
[43 125]
[44 124]
[45 123]
[51 101]
[52 100]
[53 99]
[54 98]
[55 97]
[56 96]
[57 92]
[58 91]
[59 90]
[60 89]
[61 88]
[64 85]
[65 84]
[66 83]
[103 121]
[104 120]
[105 119]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
