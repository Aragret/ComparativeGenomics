%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:23 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGUUUUCGUCUGGGGGGUAUGCACGCGAUAGCAUUGCGAGACGCUGGAGCCGGAGCACCCUAxxxxxxxxxxAACAAUUAUCAAUAUAAAACCCCCUGCCAUAACCCAAUACCAAACGCCCCUCUUCGUCUGCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[97.45130920 450.09100342]
[97.45130920 435.09100342]
[97.45130920 420.09100342]
[97.45130920 405.09100342]
[97.45130920 390.09100342]
[97.45130920 375.09100342]
[97.45130920 360.09100342]
[97.45130920 345.09100342]
[97.45130920 330.09100342]
[97.45130920 315.09100342]
[82.47524261 310.84350586]
[69.28327179 302.55212402]
[58.94226074 290.87777710]
[52.29121017 276.75537109]
[49.87318802 261.31887817]
[51.89099121 245.81037903]
[58.19017410 231.48004150]
[68.27083588 219.48535156]
[81.32726288 210.79763794]
[96.31235504 206.12344360]
[96.00030518 191.12667847]
[95.68824768 176.12992859]
[95.37619019 161.13317871]
[87.37578583 148.56962585]
[94.82431793 134.61148071]
[94.51226044 119.61472321]
[83.11124420 109.86707306]
[68.24819183 111.88940430]
[53.38514709 113.91173553]
[38.52210236 115.93407440]
[31.29607010 129.66593933]
[17.36384583 136.49768066]
[2.08265138 133.80236816]
[-8.67157936 122.61637878]
[-10.76362801 107.24098206]
[-3.38905668 93.58831024]
[10.61645985 86.90811157]
[25.86751556 89.76904297]
[36.49976730 101.07102966]
[51.36281204 99.04869080]
[66.22586060 97.02635956]
[81.08890533 95.00402069]
[83.26583099 80.16215515]
[85.44258118 65.32160950]
[71.78633881 59.11620331]
[58.13010025 52.91079712]
[41.20856476 51.86293030]
[37.53113174 35.31261826]
[52.41663742 27.19732094]
[64.33550262 39.25455475]
[77.99174500 45.45996475]
[91.64798737 51.66537094]
[105.87477112 46.91155624]
[113.05727386 33.74297333]
[120.23978424 20.57439041]
[107.80375671 12.16665649]
[96.22325897 2.61486125]
[85.60316467 -7.99449110]
[76.03965759 -19.56531906]
[67.61933899 -31.99283028]
[60.41847992 -45.16447830]
[54.50228500 -58.96097946]
[49.92433167 -73.25737762]
[46.72608566 -87.92420959]
[44.93651199 -102.82865143]
[44.57181168 -117.83570099]
[45.63529205 -132.80947876]
[48.11732101 -147.61434937]
[51.99541855 -162.11624146]
[57.23446274 -176.18383789]
[63.78701019 -189.68972778]
[71.59371948 -202.51158142]
[80.58388519 -214.53329468]
[90.67609406 -225.64599609]
[101.77894592 -235.74903870]
[113.79188538 -244.75093079]
[126.60611725 -252.57014465]
[140.10560608 -259.13586426]
[154.16807556 -264.38864136]
[168.66618347 -268.28088379]
[183.46862793 -270.77734375]
[198.44136047 -271.85543823]
[213.44876099 -271.50537109]
[228.35493469 -269.73034668]
[243.02488708 -266.54638672]
[257.32574463 -261.98239136]
[271.12802124 -256.07965088]
[284.30667114 -248.89164734]
[296.74240112 -240.48345947]
[308.32254028 -230.93124390]
[318.94226074 -220.32150269]
[328.50534058 -208.75033569]
[336.92520142 -196.32250977]
[344.12557983 -183.15060425]
[350.04129028 -169.35388184]
[354.61871338 -155.05731201]
[357.81640625 -140.39036560]
[359.60543823 -125.48587036]
[359.96960449 -110.47879791]
[358.90557861 -95.50506592]
[356.42300415 -80.70028687]
[352.54437256 -66.19852448]
[347.30484009 -52.13112259]
[340.75180054 -38.62548065]
[332.94461060 -25.80390549]
[323.95401001 -13.78251648]
[313.86138916 -2.67018461]
[302.75817871 7.43245411]
[290.74490356 16.43390656]
[277.93038940 24.25265121]
[264.43066406 30.81787872]
[250.36799622 36.07013321]
[235.86973572 39.96184540]
[221.06719971 42.45777512]
[206.09443665 43.53531647]
[191.08705139 43.18471146]
[176.18093872 41.40913010]
[161.51110840 38.22465897]
[147.21041870 33.66013718]
[133.40837097 27.75689888]
[126.22586060 40.92548370]
[119.04335022 54.09406281]
[135.58993530 98.85176849]
[109.50901794 119.30266571]
[109.82107544 134.29942322]
[117.84379578 147.93563843]
[110.37294006 160.82112122]
[110.68499756 175.81787109]
[110.99705505 190.81463623]
[111.30911255 205.81138611]
[125.34659576 209.39056396]
[137.96272278 216.48583984]
[148.29516602 226.60502625]
[155.63963318 239.04949951]
[159.49777222 252.96243286]
[159.61100769 267.38781738]
[155.97789001 281.33605957]
[148.85374451 293.85205078]
[138.73272705 304.08032227]
[126.31356049 311.32379150]
[112.45130920 315.09100342]
[112.45130920 330.09100342]
[112.45130920 345.09100342]
[112.45130920 360.09100342]
[112.45130920 375.09100342]
[112.45130920 390.09100342]
[112.45130920 405.09100342]
[112.45130920 420.09100342]
[112.45130920 435.09100342]
[112.45130920 450.09100342]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[20 130]
[21 129]
[22 128]
[23 127]
[25 125]
[26 124]
[27 42]
[28 41]
[29 40]
[30 39]
[44 52]
[45 51]
[46 50]
[53 122]
[54 121]
[55 120]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
