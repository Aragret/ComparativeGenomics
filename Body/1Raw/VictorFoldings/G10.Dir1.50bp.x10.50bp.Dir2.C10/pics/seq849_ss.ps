%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:21 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCUUACCUCCUCAAAGCAAUACACUGAAAAUGUUUAGACGGGCUCACAUCACCCCAUAAACAxxxxxxxxxxACGAACCUGAUCUCUUAUACUAGUAUCCUUAAUCAUUUUUAUUGCCACAACUAACCUCCUCCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[99.20378113 479.77389526]
[99.20378113 464.77389526]
[99.20378113 449.77389526]
[99.20378113 434.77389526]
[99.20378113 419.77389526]
[99.20378113 404.77389526]
[99.20378113 389.77389526]
[99.20378113 374.77389526]
[99.20378113 359.77389526]
[99.20378113 344.77389526]
[83.76411438 341.82919312]
[69.17974091 335.95617676]
[56.00054169 327.37448120]
[44.72376633 316.40579224]
[35.77527618 303.46194458]
[29.49348831 289.02935791]
[26.11654854 273.65090942]
[25.77331543 257.90527344]
[28.47844887 242.38542175]
[34.13178253 227.67607117]
[42.52204132 214.33180237]
[53.33472824 202.85601807]
[66.16391754 193.68209839]
[80.52748871 187.15689087]
[95.88526154 183.52774048]
[95.26943207 168.54037476]
[94.65361023 153.55302429]
[94.03778076 138.56567383]
[93.42195892 123.57832336]
[92.80612946 108.59096527]
[80.66662598 117.40189362]
[66.15444946 113.60761261]
[59.88095093 99.98251343]
[66.43334961 86.48933411]
[81.02050018 82.99433136]
[92.97592926 92.05252075]
[93.89934540 77.08097076]
[94.82276154 62.10941696]
[95.74617004 47.13786697]
[96.66958618 32.16631699]
[97.59300232 17.19476891]
[90.71992493 2.94445515]
[99.22605133 -9.28236198]
[100.14946747 -24.25391197]
[101.07288361 -39.22546387]
[86.24249268 -41.54800034]
[71.69477081 -45.24908829]
[57.55754089 -50.29619598]
[43.95505905 -56.64497375]
[31.00686646 -64.23962402]
[18.82674980 -73.01340485]
[7.52175283 -82.88921356]
[-2.80877304 -93.78025055]
[-12.07404137 -105.59080505]
[-20.19262505 -118.21709442]
[-27.09317970 -131.54814148]
[-32.71505737 -145.46679688]
[-37.00885773 -159.85073853]
[-39.93683624 -174.57356262]
[-41.47327042 -189.50585938]
[-41.60465622 -204.51643372]
[-40.32983398 -219.47334290]
[-37.66001129 -234.24516296]
[-33.61864853 -248.70205688]
[-28.24126434 -262.71697998]
[-21.57511711 -276.16677856]
[-13.67878819 -288.93322754]
[-4.62167311 -300.90417480]
[5.51663208 -311.97436523]
[16.64702988 -322.04653931]
[28.67170143 -331.03219604]
[41.48497391 -338.85232544]
[54.97424316 -345.43823242]
[69.02095795 -350.73202515]
[83.50167084 -354.68719482]
[98.28913116 -357.26895142]
[113.25337219 -358.45465088]
[128.26289368 -358.23385620]
[143.18579102 -356.60848999]
[157.89089966 -353.59283447]
[172.24900818 -349.21343994]
[186.13392639 -343.50872803]
[199.42362976 -336.52890015]
[212.00132751 -328.33523560]
[223.75646973 -318.99975586]
[234.58576965 -308.60455322]
[244.39405823 -297.24090576]
[253.09512329 -285.00872803]
[260.61248779 -272.01553345]
[266.88012695 -258.37545776]
[271.84292603 -244.20843506]
[275.45727539 -229.63891602]
[277.69143677 -214.79495239]
[278.52572632 -199.80700684]
[277.95288086 -184.80680847]
[275.97784424 -169.92614746]
[272.61807251 -155.29582214]
[267.90301514 -141.04441833]
[261.87414551 -127.29715729]
[254.58442688 -114.17485809]
[246.09794617 -101.79285431]
[236.48927307 -90.25994873]
[225.84286499 -79.67749786]
[214.25225830 -70.13851166]
[201.81932068 -61.72681046]
[188.65333557 -54.51632690]
[174.86997986 -48.57041931]
[160.59040833 -43.94134521]
[145.94010925 -40.66979218]
[131.04782104 -38.78450394]
[116.04443359 -38.30204773]
[115.12101746 -23.33049774]
[114.19760132 -8.35894871]
[121.13672638 4.82049894]
[112.56455231 18.11818123]
[111.64113617 33.08973312]
[110.71772003 48.06128311]
[109.79431152 63.03283310]
[108.87089539 78.00437927]
[107.94747925 92.97592926]
[107.79348755 107.97514343]
[108.40930939 122.96249390]
[109.02513885 137.94984436]
[109.64096069 152.93719482]
[110.25679016 167.92456055]
[110.87261200 182.91191101]
[125.05146027 184.92247009]
[138.65435791 189.38793945]
[151.25985718 196.16862488]
[162.47766113 205.05314636]
[171.96064758 215.76499939]
[179.41571045 227.97117615]
[184.61270142 241.29246521]
[187.39166260 255.31530762]
[187.66763306 269.60461426]
[185.43331909 283.71722412]
[180.75924683 297.21566772]
[173.79156494 309.68179321]
[164.74743652 320.72958374]
[153.90830994 330.01727295]
[141.61114502 337.25775146]
[128.23791504 342.22760010]
[114.20378113 344.77389526]
[114.20378113 359.77389526]
[114.20378113 374.77389526]
[114.20378113 389.77389526]
[114.20378113 404.77389526]
[114.20378113 419.77389526]
[114.20378113 434.77389526]
[114.20378113 449.77389526]
[114.20378113 464.77389526]
[114.20378113 479.77389526]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 152]
[2 151]
[3 150]
[4 149]
[5 148]
[6 147]
[7 146]
[8 145]
[9 144]
[10 143]
[25 126]
[26 125]
[27 124]
[28 123]
[29 122]
[30 121]
[36 120]
[37 119]
[38 118]
[39 117]
[40 116]
[41 115]
[43 113]
[44 112]
[45 111]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
