%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:43 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGUCUCCUCACUCUCUCAAUCUUAUCCAUCAUAGCAGGCAGUUGAGGUGGAUUAAACCAAACCCAGxxxxxxxxxxUUUUUUGUAGCCACAGGCUUCCACGGACUUCACGUCAUUAUUGGCUCAACUUUCCUCACUAUCUCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[92.50000000 252.61599731]
[92.50000000 237.61599731]
[92.50000000 222.61599731]
[92.50000000 207.61599731]
[92.50000000 192.61599731]
[92.50000000 177.61599731]
[92.50000000 162.61599731]
[92.50000000 147.61599731]
[92.50000000 132.61599731]
[92.50000000 117.61599731]
[86.27945709 113.42614746]
[72.80189514 120.01062012]
[73.83837128 105.04644775]
[67.61782837 100.85659790]
[53.71748352 106.49401093]
[39.81714249 112.13142395]
[34.06160355 123.71306610]
[22.32581520 128.10704041]
[11.12146664 123.45986176]
[-2.88754392 128.82154846]
[-1.66766572 143.87771606]
[-4.74036789 158.66741943]
[-11.85656071 171.99169922]
[-22.43936539 182.77043152]
[-35.63088226 190.12980652]
[-50.36173630 193.47326660]
[-65.43775940 192.52975464]
[-79.63680267 187.37574768]
[-91.80782318 178.42907715]
[-100.96416473 166.41499329]
[-106.36356354 152.30743408]
[-107.56831360 137.25004578]
[-104.48075867 122.46343231]
[-97.35118103 109.14630890]
[-86.75755310 98.37821960]
[-73.55864716 91.03208923]
[-58.82444763 87.70343781]
[-43.74938202 88.66210175]
[-29.55551720 93.83036804]
[-17.39349365 102.78926086]
[-8.24922562 114.81253052]
[5.75978422 109.45085144]
[16.03321266 95.25126648]
[34.17972565 98.23107910]
[48.08007050 92.59366608]
[61.98041534 86.95625305]
[77.21206665 79.72393036]
[91.00407410 81.23451996]
[99.44007874 88.89604187]
[106.28952026 75.55118561]
[113.13895416 62.20632935]
[119.98839569 48.86147308]
[126.83783722 35.51661682]
[133.68727112 22.17176247]
[125.58705902 -20.49851036]
[126.77133179 -35.45168686]
[127.95560455 -50.40486526]
[129.13987732 -65.35803986]
[130.32414246 -80.31121826]
[124.68460846 -79.70773315]
[118.51921082 -80.77033997]
[112.29151917 -83.66641998]
[106.50640869 -88.44048309]
[101.67877960 -95.00543213]
[98.30067444 -103.14151764]
[96.80858612 -112.50322723]
[96.21598053 -127.49151611]
[95.62338257 -142.47981262]
[95.03078461 -157.46809387]
[80.46485138 -161.55326843]
[67.87533569 -169.94131470]
[58.49563217 -181.81045532]
[53.24467468 -195.99786377]
[52.63689041 -211.11361694]
[56.73183060 -225.67680359]
[65.12831116 -238.26069641]
[77.00372314 -247.63244629]
[91.19464874 -252.87390137]
[106.31079865 -253.47155762]
[120.87125397 -249.36685181]
[133.44950867 -240.96194458]
[142.81329346 -229.08024597]
[148.04524231 -214.88581848]
[148.63276672 -199.76927185]
[144.51831055 -185.21157837]
[136.10498047 -172.63894653]
[124.21701050 -163.28312683]
[110.01907349 -158.06069946]
[110.61167145 -143.07240295]
[111.20427704 -128.08412170]
[111.79687500 -113.09582520]
[118.85297394 -110.55389404]
[140.02128601 -102.92810822]
[150.03620911 -114.09509277]
[160.05111694 -125.26207733]
[170.06602478 -136.42906189]
[176.13990784 -152.25764465]
[193.03132629 -150.80293274]
[196.30947876 -134.16893005]
[181.23301697 -126.41414642]
[171.21809387 -115.24716187]
[161.20318604 -104.08017731]
[151.18826294 -92.91320038]
[145.27732849 -79.12694550]
[144.09304810 -64.17376709]
[142.90878296 -49.22059250]
[141.72450256 -34.26741409]
[140.54023743 -19.31423759]
[146.07398987 -14.25186539]
[162.67523193 0.93525243]
[177.46418762 -1.57212305]
[192.25312805 -4.07949877]
[202.67640686 -16.27519608]
[218.70463562 -15.58586979]
[228.04235840 -2.54030991]
[223.52644348 12.85404587]
[208.62113953 18.78796387]
[194.76051331 10.70945263]
[179.97155762 13.21682739]
[165.18260193 15.72420311]
[180.06991577 17.55939293]
[191.35374451 27.44247818]
[195.13468933 41.95813751]
[190.10618591 56.09016037]
[178.00592041 64.95491028]
[163.01544189 65.48896790]
[150.31501770 57.50778580]
[144.29357910 43.76943588]
[147.03213501 29.02120018]
[140.18269348 42.36605835]
[133.33325195 55.71091461]
[126.48381042 69.05577087]
[119.63437653 82.40062714]
[112.78493500 95.74548340]
[122.61907959 84.41898346]
[135.95654297 77.55516052]
[150.88925171 76.13596344]
[165.28092957 80.36442566]
[177.07266235 89.63561249]
[184.57751465 102.62319183]
[186.72184753 117.46912384]
[183.19888306 132.04954529]
[174.51261902 144.27856445]
[161.90573120 152.40667725]
[147.18176270 155.27105713]
[132.44714355 152.46194458]
[119.80983734 144.38121033]
[111.07774353 132.18487549]
[107.50000000 117.61599731]
[107.50000000 132.61599731]
[107.50000000 147.61599731]
[107.50000000 162.61599731]
[107.50000000 177.61599731]
[107.50000000 192.61599731]
[107.50000000 207.61599731]
[107.50000000 222.61599731]
[107.50000000 237.61599731]
[107.50000000 252.61599731]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 158]
[2 157]
[3 156]
[4 155]
[5 154]
[6 153]
[7 152]
[8 151]
[9 150]
[10 149]
[14 46]
[15 45]
[16 44]
[19 42]
[20 41]
[49 134]
[50 133]
[51 132]
[52 131]
[53 130]
[54 129]
[55 108]
[56 107]
[57 106]
[58 105]
[59 104]
[66 91]
[67 90]
[68 89]
[69 88]
[93 103]
[94 102]
[95 101]
[96 100]
[110 120]
[111 119]
[112 118]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
