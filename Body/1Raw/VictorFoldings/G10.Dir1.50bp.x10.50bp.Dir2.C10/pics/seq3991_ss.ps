%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:22 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCACACUAGCAGAGACCAACCGAACCCCCUUCGACCUUGCCGAAGGGGAGUCCGAACUAGUxxxxxxxxxxUUCCGCUACGACCAACUCAUACACCUCCUAUGAAAAAACUUCCUACCACUCACCCUAGCACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[92.50000000 298.72509766]
[92.50000000 283.72509766]
[92.50000000 268.72509766]
[92.50000000 253.72509766]
[92.50000000 238.72509766]
[92.50000000 223.72509766]
[92.50000000 208.72509766]
[92.50000000 193.72509766]
[92.50000000 178.72509766]
[92.50000000 163.72509766]
[85.47104645 162.49838257]
[78.62174988 160.49884033]
[72.03681183 157.75117493]
[65.79765320 154.28939819]
[59.98143005 150.15628052]
[49.31980515 160.70756531]
[47.79884720 176.67835999]
[34.28586197 185.32583618]
[19.14686203 180.01640320]
[13.99518776 164.82298279]
[22.78276443 151.40068054]
[38.76851654 150.04594421]
[49.43014145 139.49465942]
[44.73709106 132.60597229]
[40.97662735 125.16703796]
[38.21221542 117.30340576]
[36.49049759 109.14776611]
[35.84053802 100.83775330]
[36.27330017 92.51361084]
[37.78148270 84.31579590]
[23.76476860 78.97428131]
[8.11397171 81.29013062]
[-1.02373672 69.52783966]
[-15.04045010 64.18632507]
[-29.11196899 58.99090958]
[-43.23677063 53.94215393]
[-57.36157608 48.89339828]
[-71.48638153 43.84463882]
[-85.61118317 38.79588318]
[-99.73598480 33.74712753]
[-113.86078644 28.69837189]
[-127.98558807 23.64961433]
[-141.39044189 31.70217896]
[-156.82707214 29.20327759]
[-167.00677490 17.33281708]
[-167.12298584 1.69566572]
[-157.12086487 -10.32479191]
[-141.72308350 -13.05286407]
[-128.20001221 -5.20043707]
[-122.93683624 9.52481174]
[-108.81202698 14.57356834]
[-94.68722534 19.62232399]
[-80.56242371 24.67108154]
[-66.43762207 29.71983719]
[-52.31282043 34.76859283]
[-38.18801498 39.81734848]
[-24.06321335 44.86610794]
[-16.65817451 44.15123367]
[-9.69893742 50.16961288]
[4.31777573 55.51112366]
[18.96600342 52.81321716]
[29.10628128 64.95757294]
[43.12299347 70.29907990]
[58.68827438 50.90336609]
[80.45935059 38.88288879]
[105.16580200 36.04335022]
[129.09625244 42.81130981]
[148.65589905 58.17008591]
[161.09533691 49.78794098]
[173.53477478 41.40579987]
[166.51496887 28.13348389]
[160.94570923 14.19018936]
[156.89010620 -0.26609704]
[154.39411926 -15.07157326]
[153.48602295 -30.05848312]
[154.17611694 -45.05701065]
[156.45655823 -59.89721680]
[160.30152893 -74.41094208]
[165.66744995 -88.43374634]
[172.49353027 -101.80673218]
[180.70242310 -114.37837219]
[190.20112610 -126.00622559]
[200.88198853 -136.55853271]
[212.62399292 -145.91574097]
[225.29411316 -153.97180176]
[238.74876404 -160.63546753]
[252.83551025 -165.83120728]
[267.39474487 -169.50015259]
[282.26147461 -171.60073853]
[297.26724243 -172.10916138]
[312.24206543 -171.01966858]
[327.01623535 -168.34458923]
[341.42236328 -164.11425781]
[355.29718018 -158.37657166]
[368.48352051 -151.19656372]
[380.83197021 -142.65560913]
[392.20257568 -132.85043335]
[402.46655273 -121.89218903]
[411.50753784 -109.90500641]
[419.22314453 -97.02472687]
[425.52590942 -83.39728546]
[430.34445190 -69.17709351]
[433.62414551 -54.52527618]
[435.32781982 -39.60785294]
[435.43621826 -24.59384918]
[433.94808960 -9.65338135]
[430.88027954 5.04425955]
[426.26757812 19.33254051]
[420.16220093 33.04956436]
[412.63339233 46.03990173]
[403.76641846 58.15636826]
[393.66174316 69.26167297]
[382.43389893 79.22998810]
[370.21005249 87.94835663]
[357.12875366 95.31800079]
[343.33819580 101.25540924]
[328.99465942 105.69331360]
[314.26065063 108.58142090]
[299.30313110 109.88701630]
[284.29156494 109.59530640]
[269.39605713 107.70958710]
[254.78538513 104.25122833]
[240.62509155 99.25941467]
[227.07562256 92.79071808]
[214.29051208 84.91841888]
[202.41462708 75.73172760]
[191.58251953 65.33473206]
[181.91693115 53.84523773]
[169.47747803 62.22738266]
[157.03804016 70.60952759]
[161.29165649 81.01393127]
[163.66438293 92.00097656]
[164.08340454 103.23348999]
[162.53585815 114.36677551]
[159.06924438 125.05918121]
[153.78993225 134.98257446]
[146.85995483 143.83244324]
[138.49194336 151.33720398]
[128.94270325 157.26655579]
[118.50529480 161.43852234]
[107.50000000 163.72509766]
[107.50000000 178.72509766]
[107.50000000 193.72509766]
[107.50000000 208.72509766]
[107.50000000 223.72509766]
[107.50000000 238.72509766]
[107.50000000 253.72509766]
[107.50000000 268.72509766]
[107.50000000 283.72509766]
[107.50000000 298.72509766]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[15 23]
[16 22]
[30 63]
[31 62]
[33 60]
[34 59]
[35 57]
[36 56]
[37 55]
[38 54]
[39 53]
[40 52]
[41 51]
[42 50]
[68 130]
[69 129]
[70 128]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
