%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:56 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGUCUACUCCCACUAAUAGCUUUUUGAUGACUUCUAGCAAGCCUCGCUAACCUCGCCUUACCxxxxxxxxxxCCUCACCAUUGGCAGCCUAGCAUUAGCAGGAAUACCUUUCCUCACAGGUUUCUACUCCAACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[95.94258118 276.57623291]
[95.94258118 261.57623291]
[95.94258118 246.57623291]
[95.94258118 231.57623291]
[95.94258118 216.57623291]
[95.94258118 201.57623291]
[95.94258118 186.57623291]
[95.94258118 171.57623291]
[95.94258118 156.57623291]
[95.94258118 141.57623291]
[81.43286133 135.52751160]
[70.75266266 124.88220978]
[65.15851593 111.57077789]
[65.04544067 97.77198792]
[69.95078278 85.56061554]
[78.69158936 76.59570312]
[71.50907898 63.42712402]
[64.32656860 50.25854111]
[49.43126678 45.70138931]
[42.33477402 32.24425888]
[46.77111435 18.07194328]
[39.58860397 4.90336084]
[32.40609360 -8.26522160]
[25.22358704 -21.43380356]
[18.04107666 -34.60238647]
[9.01242828 -28.53170395]
[-4.09843969 -27.74151039]
[-19.09113503 -28.20955276]
[-34.08383179 -28.67759514]
[-49.07652664 -29.14563560]
[-54.67986298 -15.06094742]
[-64.76483917 -3.74418688]
[-78.11364746 3.43809128]
[-93.11434937 5.61859226]
[-107.95555115 2.53400993]
[-120.84509277 -5.44317770]
[-130.22650146 -17.34968567]
[-134.96693420 -31.74774551]
[-134.49394226 -46.89872360]
[-128.86466980 -60.97306061]
[-118.75885773 -72.27121735]
[-105.39683533 -79.42888641]
[-90.39213562 -81.58173370]
[-75.55664062 -78.46981049]
[-62.68182373 -70.46887970]
[-53.32237244 -58.54510498]
[-48.60848618 -44.13833237]
[-33.61579132 -43.67029190]
[-18.62309456 -43.20224762]
[-3.63039756 -42.73420715]
[-14.67292213 -52.88618469]
[-10.44236183 -67.27723694]
[4.33740425 -69.83818817]
[13.16325092 -57.70829391]
[14.41012573 -72.65637970]
[15.65700054 -87.60446930]
[16.90387535 -102.55255890]
[6.97246695 -114.55275726]
[8.44991589 -129.69448853]
[19.95148087 -139.08860779]
[21.19835472 -154.03669739]
[18.78228760 -162.91444397]
[22.62983322 -169.28170776]
[24.18741417 -184.20062256]
[25.74499512 -199.11953735]
[11.51912308 -204.09158325]
[-1.17633092 -212.21083069]
[-11.65671539 -223.03941345]
[-19.35683823 -235.99336243]
[-23.86144066 -250.37409973]
[-24.92759323 -265.40606689]
[-22.49780273 -280.27862549]
[-16.70310211 -294.18969727]
[-7.85599518 -306.38909912]
[3.56640697 -316.21893311]
[16.94810867 -323.14904785]
[31.56744957 -326.80578613]
[46.63602829 -326.99185181]
[61.34121704 -323.69729614]
[74.88998413 -317.09973145]
[86.55165100 -307.55499268]
[95.69733429 -295.57781982]
[101.83380890 -281.81405640]
[104.63014984 -267.00607300]
[103.93553925 -251.95234680]
[99.78745270 -237.46476746]
[92.40958405 -224.32460022]
[82.19982147 -213.24050903]
[69.70874786 -204.81021118]
[55.61000061 -199.48835754]
[40.66390610 -197.56195068]
[39.10632706 -182.64303589]
[37.54874420 -167.72413635]
[36.14644241 -152.78982544]
[34.89956665 -137.84173584]
[44.68581772 -126.67191315]
[43.63425064 -111.49466705]
[31.85196114 -101.30567932]
[30.60508728 -86.35759735]
[29.35821342 -71.40950775]
[28.11133766 -56.46142197]
[31.20965958 -41.78489685]
[38.39216995 -28.61631393]
[45.57467651 -15.44773006]
[52.75718689 -2.27914810]
[59.93969727 10.88943481]
[74.25695038 14.83302021]
[81.72862244 28.08551788]
[77.49515533 43.07603073]
[84.67766571 56.24461365]
[91.86017609 69.41319275]
[114.67124939 68.19528198]
[134.63850403 83.42575836]
[140.51606750 110.17320251]
[154.64086914 115.22195435]
[168.76567078 120.27071381]
[182.89048767 125.31947327]
[195.62792969 116.45735931]
[211.14103699 116.80829620]
[223.46469116 126.23735046]
[227.86021423 141.11885071]
[222.63740540 155.73056030]
[209.80458069 164.45397949]
[194.29618835 163.93476868]
[182.07554626 154.37258911]
[177.84172058 139.44427490]
[163.71691895 134.39552307]
[149.59211731 129.34675598]
[135.46731567 124.29800415]
[129.33613586 128.61756897]
[139.31130981 139.82005310]
[149.28648376 151.02255249]
[162.88078308 157.36250305]
[167.28242493 171.70214844]
[159.58631897 184.57733154]
[144.87190247 187.49040222]
[132.85069275 178.51873779]
[131.45652771 163.58415222]
[124.26514435 150.42041016]
[117.07376099 137.25668335]
[110.94258118 141.57623291]
[110.94258118 156.57623291]
[110.94258118 171.57623291]
[110.94258118 186.57623291]
[110.94258118 201.57623291]
[110.94258118 216.57623291]
[110.94258118 231.57623291]
[110.94258118 246.57623291]
[110.94258118 261.57623291]
[110.94258118 276.57623291]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[16 111]
[17 110]
[18 109]
[21 106]
[22 105]
[23 104]
[24 103]
[25 102]
[27 50]
[28 49]
[29 48]
[30 47]
[54 101]
[55 100]
[56 99]
[57 98]
[60 95]
[61 94]
[63 93]
[64 92]
[65 91]
[114 129]
[115 128]
[116 127]
[117 126]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
