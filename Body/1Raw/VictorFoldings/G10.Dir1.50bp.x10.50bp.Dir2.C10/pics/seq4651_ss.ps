%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:01 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCGUACUAAUUAAUCCCCUGGCCCAACCCGUCAUCUACUCUACCAUCUUUGCAGGCACACUxxxxxxxxxxGGCACAUACUUCCUAUUCUACACCCUAGUAGGCUCCCUUCCCCUACUCAUCGCACUAAUUCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[95.15855408 227.84240723]
[94.84649658 212.84565735]
[94.53443909 197.84890747]
[94.22238159 182.85215759]
[93.91033173 167.85539246]
[93.59827423 152.85864258]
[93.28621674 137.86189270]
[92.97415924 122.86513519]
[92.66210175 107.86838531]
[88.20529175 93.54578400]
[79.95299530 81.01982880]
[65.89965820 73.75249481]
[65.35885620 58.86771011]
[57.10656738 46.34174728]
[48.85427856 33.81578445]
[40.60198975 21.28982162]
[32.34970093 8.76386070]
[19.27333832 16.12548447]
[5.71530676 22.55700874]
[-8.25833988 28.02710342]
[-22.57952309 32.50911713]
[-37.17847061 35.98120880]
[-51.98405838 38.42647171]
[-66.92415619 39.83298492]
[-81.92597198 40.19389725]
[-96.91641998 39.50745392]
[-111.82246399 37.77699661]
[-126.57148743 35.01095963]
[-141.09164429 31.22281265]
[-155.31216431 26.43101501]
[-169.16378784 20.65891266]
[-182.57902527 13.93462467]
[-195.49252319 6.29091358]
[-207.84136963 -2.23498201]
[-219.56538391 -11.60152435]
[-230.60746765 -21.76307869]
[-240.91381836 -32.67014313]
[-250.43420410 -44.26957321]
[-259.12228394 -56.50485992]
[-266.93566895 -69.31639099]
[-273.83636475 -82.64175415]
[-279.79071045 -96.41603088]
[-284.76968384 -110.57210541]
[-288.74905396 -125.04100800]
[-291.70944214 -139.75225830]
[-293.63638306 -154.63418579]
[-294.52053833 -169.61427307]
[-294.35757446 -184.61953735]
[-293.14828491 -199.57688904]
[-290.89855957 -214.41345215]
[-287.61935425 -229.05693054]
[-283.32666016 -243.43600464]
[-278.04138184 -257.48059082]
[-271.78927612 -271.12228394]
[-264.60083008 -284.29464722]
[-256.51098633 -296.93344116]
[-247.55923462 -308.97714233]
[-237.78915405 -320.36706543]
[-227.24835205 -331.04769897]
[-215.98817444 -340.96704102]
[-204.06347656 -350.07672119]
[-191.53237915 -358.33239746]
[-178.45591736 -365.69384766]
[-164.89779663 -372.12518311]
[-150.92407227 -377.59506226]
[-136.60281372 -382.07687378]
[-122.00382233 -385.54876709]
[-107.19819641 -387.99380493]
[-92.25807953 -389.40011597]
[-77.25626373 -389.76080322]
[-62.26582336 -389.07415771]
[-47.35979843 -387.34347534]
[-32.61081314 -384.57723999]
[-18.09072113 -380.78887939]
[-3.87026215 -375.99688721]
[9.98128128 -370.22457886]
[23.39642525 -363.50009155]
[36.30981445 -355.85620117]
[48.65853119 -347.33013916]
[60.38241577 -337.96340942]
[71.42434692 -327.80169678]
[81.73053741 -316.89450073]
[91.25077057 -305.29492188]
[99.93865967 -293.05950928]
[107.75188446 -280.24786377]
[114.65237427 -266.92239380]
[120.60651398 -253.14805603]
[125.58529663 -238.99189758]
[129.56446838 -224.52293396]
[132.52462769 -209.81164551]
[134.45137024 -194.92970276]
[135.33529663 -179.94960022]
[135.17211914 -164.94432068]
[133.96260071 -149.98699951]
[131.71266174 -135.15046692]
[128.43325806 -120.50703430]
[124.14036560 -106.12802887]
[118.85489655 -92.08351135]
[112.60260010 -78.44190216]
[105.41394043 -65.26966095]
[97.32393646 -52.63096619]
[88.37200165 -40.58739471]
[78.60176086 -29.19761467]
[68.06079865 -18.51712418]
[56.80047989 -8.59795284]
[44.87565994 0.51157135]
[53.12794876 13.03753376]
[61.38024139 25.56349564]
[69.63253021 38.08945847]
[77.88481903 50.61541748]
[91.34790039 56.98681259]
[92.47895813 72.76753998]
[100.73124695 85.29349518]
[100.28517914 70.30013275]
[103.01228333 55.55011749]
[108.78979492 41.70742035]
[117.35765839 29.39516068]
[128.33018494 19.16757011]
[141.21345520 11.48503590]
[155.42753601 6.69338560]
[170.33259583 5.00831223]
[185.25767517 6.50566816]
[199.53092957 11.11805153]
[212.50985718 18.63783646]
[223.61024475 28.72652626]
[232.33238220 40.92998123]
[238.28364563 54.69887161]
[241.19616699 69.41339874]
[240.93882751 84.41118622]
[237.52320862 99.01712799]
[231.10307312 112.57374573]
[221.96739197 124.47078705]
[210.52745056 134.17271423]
[197.29815674 141.24279785]
[182.87507629 145.36279297]
[167.90740967 146.34722900]
[153.06893921 144.15179443]
[139.02761841 138.87532043]
[126.41549683 130.75532532]
[115.80030823 120.15731812]
[107.65885925 107.55632782]
[107.97091675 122.55308533]
[108.28296661 137.54983521]
[108.59502411 152.54658508]
[108.90708160 167.54335022]
[109.21913910 182.54010010]
[109.53119659 197.53684998]
[109.84325409 212.53359985]
[110.15530396 227.53036499]
[112.74630737 246.73808289]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 149]
[2 148]
[3 147]
[4 146]
[5 145]
[6 144]
[7 143]
[8 142]
[9 141]
[10 113]
[11 112]
[13 110]
[14 109]
[15 108]
[16 107]
[17 106]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
