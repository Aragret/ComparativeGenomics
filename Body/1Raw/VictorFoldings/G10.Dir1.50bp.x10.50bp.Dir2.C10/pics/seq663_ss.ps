%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:40 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGAUCAAUACAACCCCCGCCCAUCCUACCCAGCACACACACACCGCUGCUAACCCCAUACCCxxxxxxxxxxAACCUCCCCCAAAAUUCAGAAUAAUAACACACCCGACCACACCGCUAACAAUCAAUACUACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[-19.45299911 278.69329834]
[-28.21920776 290.86514282]
[-36.98541260 303.03695679]
[-38.77194977 318.75698853]
[-52.48841858 324.56280518]
[-61.25462723 336.73464966]
[-70.02083588 348.90649414]
[-78.78704071 361.07833862]
[-87.55324554 373.25015259]
[-80.65594482 386.91345215]
[-80.90993500 402.21685791]
[-88.25685883 415.64376831]
[-101.00843048 424.10873413]
[-116.23445129 425.66659546]
[-130.43608093 419.95938110]
[-140.34989929 408.29855347]
[-143.69776917 393.36370850]
[-139.71038818 378.58670044]
[-129.30401611 367.36325073]
[-114.86997223 362.27236938]
[-99.72508240 364.48394775]
[-90.95887756 352.31210327]
[-82.19267273 340.14028931]
[-73.42646027 327.96844482]
[-64.66025543 315.79660034]
[-63.50074005 300.94720459]
[-49.15724945 294.27075195]
[-40.39104462 282.09890747]
[-31.62483597 269.92709351]
[-54.07807922 249.86746216]
[-73.50801849 226.86717224]
[-89.53341675 201.37750244]
[-101.83980560 173.89860535]
[-110.18572235 144.96969604]
[-114.40740204 115.15839386]
[-114.42201233 85.04965210]
[-110.22925568 55.23426819]
[-101.91141510 26.29726982]
[-115.81397247 20.66531181]
[-129.71652222 15.03335571]
[-143.61907959 9.40139961]
[-155.25862122 19.34020615]
[-170.18626404 22.72011375]
[-184.97177124 18.76444435]
[-196.21754456 8.38218021]
[-201.33935547 -6.04090977]
[-199.16029358 -21.19050407]
[-190.18104553 -33.58533859]
[-176.46501160 -40.37717056]
[-161.16403198 -40.00528336]
[-147.79414368 -32.55514145]
[-139.42765808 -19.73872375]
[-137.98712158 -4.50115681]
[-124.08457184 1.13080001]
[-110.18201447 6.76275682]
[-96.27945709 12.39471340]
[-91.57268524 2.53094363]
[-86.37062073 -7.08082676]
[-80.68670654 -16.41574669]
[-74.53563690 -25.44968224]
[-67.93331909 -34.15927887]
[-60.89682388 -42.52201462]
[-53.44433975 -50.51626587]
[-45.59513474 -58.12137222]
[-37.36950302 -65.31766510]
[-28.78871536 -72.08654022]
[-19.87495232 -78.41049957]
[-10.65126133 -84.27319336]
[-1.14148855 -89.65946198]
[8.62977791 -94.55537415]
[18.63727570 -98.94828033]
[28.85513115 -102.82682037]
[39.25692749 -106.18096924]
[49.81576920 -109.00204468]
[60.50436020 -111.28276062]
[71.29505920 -113.01722717]
[82.15998077 -114.20094299]
[93.07102203 -114.83086395]
[103.99997711 -114.90535736]
[114.91859436 -114.42422485]
[125.79863739 -113.38871002]
[136.61198425 -111.80149841]
[147.33065796 -109.66668701]
[157.92698669 -106.98979950]
[168.37353516 -103.77775574]
[178.64331055 -100.03885651]
[188.70974731 -95.78276825]
[198.54684448 -91.02050018]
[208.12915039 -85.76435852]
[217.43190002 -80.02793884]
[226.43104553 -73.82607269]
[235.10330200 -67.17478943]
[243.42625427 -60.09128952]
[251.37840271 -52.59388351]
[258.93914795 -44.70195389]
[266.08898926 -36.43590927]
[272.80941772 -27.81712151]
[279.08306885 -18.86787033]
[284.89367676 -9.61129475]
[290.22628784 -0.07132639]
[295.06707764 9.72736931]
[299.40353394 19.75945854]
[303.22442627 29.99900246]
[306.51992798 40.41952896]
[309.28146362 50.99409866]
[311.50192261 61.69536972]
[313.17556763 72.49567413]
[314.29806519 83.36708832]
[314.86648560 94.28150940]
[314.87939453 105.21070862]
[314.33676147 116.12644196]
[313.23995972 127.00047302]
[311.59185791 137.80470276]
[309.39669800 148.51118469]
[306.66015625 159.09225464]
[303.38928223 169.52053833]
[299.59259033 179.76908875]
[295.27987671 189.81140137]
[290.46224976 199.62150574]
[285.15219116 209.17405701]
[279.36346436 218.44433594]
[273.11099243 227.40838623]
[266.41094971 236.04302979]
[259.28067017 244.32594299]
[251.73858643 252.23571777]
[243.80418396 259.75189209]
[235.49798584 266.85504150]
[226.84147644 273.52679443]
[217.85700989 279.74993896]
[208.56785583 285.50830078]
[198.99798584 290.78707886]
[189.17218018 295.57257080]
[179.11581421 299.85244751]
[168.85490417 303.61560059]
[158.41596985 306.85232544]
[147.82601929 309.55426025]
[137.11239624 311.71438599]
[126.30284119 313.32714844]
[115.42527771 314.38836670]
[104.50782776 314.89529419]
[93.57872772 314.84664917]
[82.66622925 314.24249268]
[71.79853821 313.08447266]
[61.00376892 311.37551880]
[50.30981827 309.12005615]
[39.74433899 306.32394409]
[29.33464813 302.99438477]
[19.10765457 299.14001465]
[9.08980370 294.77075195]
[-0.69300514 289.89794922]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 29]
[2 28]
[3 27]
[5 25]
[6 24]
[7 23]
[8 22]
[9 21]
[38 56]
[39 55]
[40 54]
[41 53]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
