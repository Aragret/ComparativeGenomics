%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:44 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCUUAGUUGAACAGGGCCCUGAAGCGCGUACACACCGCCCGUCACCCUCCUCAAGUAUACUUxxxxxxxxxxAGGCGACAAACCUACCGAGCCUGGUGAUAGCUGGUUGUCCAAGAUAGAAUCUUAGUUCAACCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[91.63728333 295.08633423]
[91.63728333 280.08633423]
[91.63728333 265.08633423]
[91.63728333 250.08633423]
[91.63728333 235.08633423]
[91.63728333 220.08633423]
[91.63728333 205.08633423]
[91.63728333 190.08633423]
[91.63728333 175.08633423]
[91.63728333 160.08633423]
[89.48870850 145.24101257]
[85.23586273 130.85653687]
[73.45372009 121.57315063]
[58.47348404 120.80348969]
[44.29448318 127.82250214]
[31.98098183 119.44235229]
[17.00074005 118.67269135]
[2.02049971 117.90303040]
[-12.95974159 117.13336945]
[-24.63720703 127.44232178]
[-39.81834030 126.44837952]
[-49.57438660 115.25216675]
[-64.55462646 114.48250580]
[-79.53486633 113.71284485]
[-94.51510620 112.94319153]
[-99.27008057 115.38152313]
[-104.00474548 115.67919159]
[-107.89314270 114.21291351]
[-110.38528442 111.63677979]
[-125.28972626 109.94638824]
[-140.19418335 108.25598907]
[-154.77838135 114.38881683]
[-166.55264282 105.26652527]
[-181.13684082 111.39935303]
[-192.91110229 102.27706146]
[-207.81555176 100.58666992]
[-222.71998596 98.89627075]
[-233.93218994 109.79675293]
[-249.53163147 110.88837433]
[-262.15270996 101.65570831]
[-265.83618164 86.45813751]
[-258.84277344 72.47148895]
[-244.47459412 66.29982758]
[-229.51583862 70.85722351]
[-221.02958679 83.99182129]
[-206.12515259 85.68222046]
[-191.22070312 87.37261963]
[-177.70256042 81.11888123]
[-164.86224365 90.36207581]
[-151.34410095 84.10834503]
[-138.50378418 93.35153961]
[-123.59933472 95.04193878]
[-108.69488525 96.73233795]
[-93.74545288 97.96294403]
[-78.76520538 98.73260498]
[-63.78496552 99.50226593]
[-48.80472565 100.27192688]
[-37.95259476 90.13452911]
[-22.74953461 90.70167542]
[-12.19008160 102.15312958]
[2.79015970 102.92279053]
[17.77040100 103.69245148]
[32.75064087 104.46210480]
[45.85815430 97.38804626]
[59.24314117 105.82324982]
[74.22338104 106.59291077]
[78.36606598 87.91312408]
[93.18524933 78.07833862]
[109.35294342 81.05102539]
[120.33374023 70.83231354]
[131.31454468 60.61360931]
[116.44100952 62.55728531]
[102.16027069 57.96810532]
[91.20343018 47.72371292]
[85.66589355 33.78327560]
[86.60668945 18.81280899]
[93.84588623 5.67530441]
[105.99904633 -3.11678028]
[120.74195862 -5.88202143]
[135.25514221 -2.09158635]
[146.76306152 7.52963114]
[153.06491089 21.14164162]
[152.95549011 36.14124298]
[146.45487976 49.66093826]
[152.51107788 42.73863220]
[159.94140625 42.41882324]
[173.22875977 35.45846939]
[186.51609802 28.49811172]
[199.80343628 21.53775597]
[186.65045166 14.32671261]
[183.88041687 -0.41529852]
[193.51878357 -11.90885830]
[208.51794434 -11.74982834]
[217.91044617 -0.05449321]
[214.82884216 14.62497616]
[228.75955200 9.06303883]
[242.69026184 3.50110173]
[249.55122375 -2.62450290]
[256.96453857 -2.02878356]
[271.00653076 -7.30352497]
[285.04849243 -12.57826710]
[288.19204712 -27.68196487]
[299.01852417 -38.67245483]
[314.07324219 -42.04271317]
[328.55230713 -36.71730042]
[337.83551025 -24.39553833]
[338.96060181 -9.00925446]
[331.56857300 4.53184271]
[318.01815796 11.90683842]
[302.63330078 10.76239872]
[290.32324219 1.46370971]
[276.28125000 6.73845148]
[262.23928833 12.01319313]
[248.25219727 17.43181801]
[234.32148743 22.99375534]
[220.39077759 28.55569267]
[206.76379395 34.82509613]
[193.47645569 41.78545380]
[180.18911743 48.74581146]
[166.90176392 55.70616531]
[153.68658447 62.80257034]
[141.53324890 71.59441376]
[130.55244446 81.81311798]
[119.57164764 92.03182983]
[122.12112427 106.13644409]
[114.85821533 119.83312988]
[99.62033844 126.60369110]
[103.87319183 140.98817444]
[108.28031921 126.65020752]
[117.75733185 115.02324677]
[130.91203308 107.81533051]
[145.81193542 106.08533478]
[160.26818848 110.08739471]
[172.15713501 119.23359680]
[179.73223877 132.18032837]
[181.88067627 147.02566528]
[178.28686523 161.58879089]
[169.47871399 173.73030090]
[156.75019836 181.66659546]
[141.97116089 184.23179626]
[127.31270599 181.04905701]
[114.92822266 172.58592224]
[106.63728333 160.08633423]
[106.63728333 175.08633423]
[106.63728333 190.08633423]
[106.63728333 205.08633423]
[106.63728333 220.08633423]
[106.63728333 235.08633423]
[106.63728333 250.08633423]
[106.63728333 265.08633423]
[106.63728333 280.08633423]
[106.63728333 295.08633423]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 152]
[2 151]
[3 150]
[4 149]
[5 148]
[6 147]
[7 146]
[8 145]
[9 144]
[10 143]
[11 128]
[12 127]
[13 66]
[14 65]
[16 63]
[17 62]
[18 61]
[19 60]
[22 57]
[23 56]
[24 55]
[25 54]
[29 53]
[30 52]
[31 51]
[33 49]
[35 47]
[36 46]
[37 45]
[69 124]
[70 123]
[71 122]
[84 121]
[86 120]
[87 119]
[88 118]
[89 117]
[95 116]
[96 115]
[97 114]
[99 113]
[100 112]
[101 111]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
