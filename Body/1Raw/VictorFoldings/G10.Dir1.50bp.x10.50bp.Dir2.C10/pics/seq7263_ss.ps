%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:33 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGUAAUAUUAAUAAUUUUCAUGAUUUGAGAAGCCUUCGCUUCGAAGCGAAAAGUCCUAAUAGUAGxxxxxxxxxxCCAAUUAACUAGUUUUGACAACAUUCAAAAAAGAGUAAUAAACUUCGCCUUAAUUUUAAUAAUCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[92.50000000 294.25909424]
[92.50000000 279.25909424]
[92.50000000 264.25909424]
[92.50000000 249.25907898]
[92.50000000 234.25907898]
[92.50000000 219.25907898]
[92.50000000 204.25907898]
[92.50000000 189.25907898]
[92.50000000 174.25907898]
[92.50000000 159.25907898]
[78.94781494 155.89895630]
[66.54593658 149.48448181]
[56.65105438 160.75796509]
[46.75616455 172.03143311]
[49.30724335 187.45951843]
[41.30004501 200.89152527]
[26.51532936 205.98527527]
[11.93398476 200.33563232]
[4.44087553 186.61021423]
[7.57401943 171.28971863]
[19.85404205 161.60803223]
[35.48269272 162.13655090]
[45.37757874 150.86306763]
[55.27246857 139.58959961]
[48.35678864 133.75987244]
[42.22109604 126.73854065]
[28.03127670 131.60156250]
[13.84145451 136.46458435]
[5.52476168 150.18362427]
[-10.40437508 152.09207153]
[-21.72648430 140.72592163]
[-19.75621414 124.80431366]
[-6.00498629 116.54093933]
[8.97843361 122.27475739]
[23.16825485 117.41174316]
[37.35807800 112.54872131]
[36.15874863 97.59674072]
[21.37519646 95.05773163]
[6.59164429 92.51872253]
[-8.19190884 89.97971344]
[-22.97546196 87.44070435]
[-38.16482925 93.62254333]
[-50.94533920 83.34681702]
[-48.16949844 67.18430328]
[-32.69285583 61.76161575]
[-20.43645096 72.65715027]
[-5.65289831 75.19615936]
[9.13065434 77.73516846]
[23.91420746 80.27417755]
[38.69775772 82.81318665]
[52.31340408 59.31742477]
[74.19372559 43.95727921]
[100.08681488 39.28472519]
[125.13858032 45.81568146]
[133.10998535 33.10911942]
[141.08139038 20.40255737]
[149.05279541 7.69599438]
[149.68467712 1.02376473]
[153.10719299 -3.60126281]
[157.60594177 -5.35052824]
[166.07934570 -17.72798538]
[174.55274963 -30.10544014]
[160.94882202 -23.78619576]
[146.26712036 -20.71250343]
[131.27078247 -21.04412842]
[116.73930359 -24.76383400]
[103.42801666 -31.67827606]
[92.02880859 -41.42805099]
[83.13420105 -53.50637817]
[77.20652771 -67.28544617]
[74.55389404 -82.04903412]
[75.31418610 -97.02975464]
[79.44787598 -111.44892883]
[86.74010468 -124.55706787]
[96.81184387 -135.67283630]
[109.13955688 -144.21842957]
[123.08248138 -149.74969482]
[137.91587830 -151.97909546]
[152.86874390 -150.79077148]
[167.16381836 -146.24645996]
[180.05809021 -138.58241272]
[190.88131714 -128.19694519]
[199.07093811 -115.62992859]
[204.20126343 -101.53453827]
[206.00561523 -86.64346313]
[204.39021301 -71.73069763]
[199.43901062 -57.57139969]
[191.40719604 -44.89882660]
[204.77911377 -51.69531250]
[218.15101624 -58.49179459]
[231.38424683 -65.55447388]
[244.47352600 -72.88051605]
[257.56280518 -80.20655823]
[261.98437500 -97.10427856]
[276.95071411 -105.43680573]
[292.99890137 -100.49250031]
[305.93896484 -108.07897949]
[318.87902832 -115.66545868]
[331.81909180 -123.25193787]
[344.75915527 -130.83842468]
[357.69921875 -138.42489624]
[361.44473267 -153.77894592]
[374.99337769 -161.91589355]
[390.30694580 -158.00825500]
[398.30023193 -144.37435913]
[394.23089600 -129.10293579]
[380.51324463 -121.25427246]
[365.28570557 -125.48483276]
[352.34564209 -117.89835358]
[339.40557861 -110.31187439]
[326.46551514 -102.72539520]
[313.52545166 -95.13891602]
[300.58535767 -87.55243683]
[299.09857178 -74.72059631]
[290.34906006 -64.95396423]
[277.37728882 -61.98343277]
[264.88885498 -67.11728668]
[251.79956055 -59.79124069]
[238.71029663 -52.46519852]
[236.56356812 -48.14197159]
[231.64952087 -45.14922333]
[224.94749451 -45.11988831]
[211.57559204 -38.32340622]
[198.20368958 -31.52692413]
[186.93020630 -21.63203621]
[178.45680237 -9.25458050]
[169.98339844 3.12287593]
[161.75935364 15.66739655]
[153.78794861 28.37396049]
[145.81654358 41.08052444]
[137.84515381 53.78708649]
[144.14936829 59.76665115]
[149.51936340 66.59757233]
[153.84149170 74.13531494]
[157.02432251 82.22035980]
[159.00047302 90.68163300]
[159.72816467 99.34008789]
[159.19195557 108.01250458]
[157.40322876 116.51537323]
[154.39982605 124.66876984]
[150.24528503 132.30015564]
[145.02752686 139.24806213]
[138.85696411 145.36546326]
[131.86416626 150.52290344]
[124.19711304 154.61125183]
[116.01802826 157.54399109]
[107.50000000 159.25907898]
[107.50000000 174.25907898]
[107.50000000 189.25907898]
[107.50000000 204.25907898]
[107.50000000 219.25907898]
[107.50000000 234.25907898]
[107.50000000 249.25907898]
[107.50000000 264.25909424]
[107.50000000 279.25909424]
[107.50000000 294.25909424]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 156]
[2 155]
[3 154]
[4 153]
[5 152]
[6 151]
[7 150]
[8 149]
[9 148]
[10 147]
[12 24]
[13 23]
[14 22]
[26 36]
[27 35]
[28 34]
[37 50]
[38 49]
[39 48]
[40 47]
[41 46]
[54 131]
[55 130]
[56 129]
[57 128]
[60 127]
[61 126]
[62 125]
[88 124]
[89 123]
[90 122]
[91 119]
[92 118]
[93 117]
[96 113]
[97 112]
[98 111]
[99 110]
[100 109]
[101 108]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
