%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:52 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCAUCAAGCACGCAGCAAUGCAGCUCAAAACGCUUAGCCUAGCCACACCCCCACGGGAAACAxxxxxxxxxxGGCGACCCAGACAAUUAUACCCUAGCCAACCCCUUAAACACCCCUCCCCACAUCAAGCCCGCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[268.90841675 56.01498795]
[254.56835938 60.41528702]
[240.22830200 64.81558990]
[225.88824463 69.21588898]
[211.54817200 73.61618805]
[201.65061951 84.74666595]
[186.18783569 81.39810181]
[176.29026794 92.52857971]
[160.82748413 89.18001556]
[146.48742676 93.58031464]
[132.14736938 97.98062134]
[131.68721008 113.44084930]
[123.75716400 127.88010406]
[109.30063629 137.70848083]
[90.95867157 140.03968811]
[72.59933472 133.47204590]
[59.76567841 141.23718262]
[46.93202591 149.00230408]
[43.07813263 161.35346985]
[32.17810822 167.54707336]
[20.37642860 164.72174072]
[7.38604736 172.22174072]
[-5.60433388 179.72174072]
[-13.33084965 194.18661499]
[-29.72776413 194.45719910]
[-37.92733765 180.25512695]
[-29.49455261 166.19026184]
[-13.10433388 166.73135376]
[-0.11395279 159.23135376]
[12.87642860 151.73135376]
[20.78143311 136.09307861]
[39.16688919 136.16865540]
[52.00054169 128.40351868]
[64.83419800 120.63838959]
[63.68375778 113.22714233]
[48.86127853 115.52802277]
[34.03875732 117.82866669]
[31.73834229 103.00611115]
[46.56040192 100.70553589]
[61.38288498 98.40466309]
[60.23244858 90.99342346]
[45.64869690 87.48425293]
[28.83459282 89.65733337]
[22.09183502 74.10189819]
[35.17277527 63.31647491]
[49.15786362 72.90050507]
[63.74161530 76.40967560]
[81.08576965 64.19306946]
[100.83154297 62.27526474]
[117.68123627 69.82656097]
[127.74706268 83.64055634]
[142.08712769 79.24025726]
[156.42718506 74.83995819]
[167.35044861 63.39474106]
[181.78753662 67.05804443]
[192.71078491 55.61282349]
[207.14787292 59.27612686]
[221.48793030 54.87582779]
[235.82800293 50.47552490]
[250.16806030 46.07522583]
[264.50811768 41.67492676]
[261.07397461 27.06753159]
[258.62319946 12.26338005]
[257.16668701 -2.67140603]
[256.71096802 -17.67012596]
[257.25805664 -32.66579056]
[258.80554199 -47.59142303]
[261.34652710 -62.38036346]
[264.86959839 -76.96656036]
[269.35906982 -91.28487396]
[274.79486084 -105.27133942]
[281.15274048 -118.86350250]
[288.40426636 -132.00065613]
[296.51705933 -144.62411499]
[305.45489502 -156.67750549]
[315.17785645 -168.10699463]
[325.64251709 -178.86154175]
[336.80212402 -188.89311218]
[348.60684204 -198.15689087]
[361.00396729 -206.61151123]
[373.93811035 -214.21920776]
[387.35153198 -220.94599915]
[401.18429565 -226.76185608]
[415.37460327 -231.64080811]
[429.85910034 -235.56103516]
[444.57312012 -238.50505066]
[459.45089722 -240.45970154]
[474.42602539 -241.41625977]
[489.43161011 -241.37043762]
[504.40060425 -240.32246399]
[519.26617432 -238.27700806]
[533.96191406 -235.24319458]
[548.42224121 -231.23460388]
[562.58251953 -226.26910400]
[576.37951660 -220.36888123]
[589.75158691 -213.56030273]
[602.63903809 -205.87377930]
[614.98431396 -197.34361267]
[626.73223877 -188.00793457]
[637.83038330 -177.90841675]
[648.22918701 -167.09016418]
[657.88220215 -155.60151672]
[666.74621582 -143.49377441]
[674.78179932 -130.82101440]
[681.95300293 -117.63982391]
[688.22772217 -104.00909424]
[693.57800293 -89.98970032]
[697.97998047 -75.64424133]
[701.41394043 -61.03680420]
[703.86456299 -46.23262405]
[705.32086182 -31.29781914]
[705.77642822 -16.29909325]
[705.22912598 -1.30343676]
[703.68145752 13.62217808]
[701.14025879 28.41108704]
[697.61700439 42.99724197]
[693.12738037 57.31549072]
[687.69140625 71.30189514]
[681.33337402 84.89397430]
[674.08166504 98.03102875]
[665.96868896 110.65438843]
[657.03070068 122.70767212]
[647.30761719 134.13703918]
[636.84283447 144.89146423]
[625.68310547 154.92288208]
[613.87823486 164.18650818]
[601.48101807 172.64097595]
[588.54675293 180.24850464]
[575.13330078 186.97514343]
[561.30047607 192.79083252]
[547.11004639 197.66958618]
[532.62548828 201.58964539]
[517.91143799 204.53347778]
[503.03366089 206.48793030]
[488.05850220 207.44430542]
[473.05294800 207.39830017]
[458.08395386 206.35012817]
[443.21841431 204.30448914]
[428.52267456 201.27049255]
[414.06243896 197.26171875]
[399.90222168 192.29603577]
[386.10531616 186.39564514]
[372.73333740 179.58689880]
[359.84597778 171.90020752]
[347.50082397 163.36988831]
[335.75299072 154.03405762]
[324.65496826 143.93440247]
[314.25628662 133.11602783]
[304.60345459 121.62725830]
[295.73953247 109.51940155]
[287.70413208 96.84653473]
[280.53311157 83.66526031]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 61]
[2 60]
[3 59]
[4 58]
[5 57]
[7 55]
[9 53]
[10 52]
[11 51]
[16 34]
[17 33]
[18 32]
[21 30]
[22 29]
[23 28]
[41 47]
[42 46]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
