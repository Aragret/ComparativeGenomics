%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:38 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGUCAACACCCUCCUAGCCUUACUACUAAUAAUUAUUACAUUUUGACUACCACAACUCAACGxxxxxxxxxxCCGAUGAGGCAACCAGCCAGAACGCCUGAACGCAGGCACAUACUUCCUAUUCUACACCCUCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[-24.18601227 302.13171387]
[-32.43830109 314.65765381]
[-33.06756973 333.03112793]
[-48.99533844 340.33224487]
[-56.98525238 353.02716064]
[-64.97516632 365.72207642]
[-72.96508789 378.41702271]
[-80.95500183 391.11193848]
[-88.94491577 403.80688477]
[-96.93483734 416.50180054]
[-104.92475128 429.19674683]
[-105.00907898 445.59567261]
[-119.38527679 453.48596191]
[-133.26434326 444.75079346]
[-132.36868286 428.37612915]
[-117.61968231 421.20681763]
[-109.62976074 408.51190186]
[-101.63984680 395.81695557]
[-93.64993286 383.12203979]
[-85.66001892 370.42709351]
[-77.67009735 357.73217773]
[-69.68018341 345.03723145]
[-61.69026566 332.34231567]
[-64.06336212 320.43954468]
[-57.45608902 309.78295898]
[-44.96426392 306.40536499]
[-36.71197510 293.87942505]
[-46.76327515 286.38650513]
[-56.40471268 278.37307739]
[-65.60935211 269.86151123]
[-74.35149384 260.87557983]
[-82.60671997 251.44033813]
[-90.35198212 241.58218384]
[-97.56564331 231.32862854]
[-104.22755432 220.70831299]
[-110.31912231 209.75088501]
[-115.82332611 198.48696899]
[-120.72480011 186.94799805]
[-125.00984955 175.16619873]
[-128.66651917 163.17448425]
[-131.68457031 151.00634766]
[-134.05560303 138.69577026]
[-135.77299500 126.27712250]
[-136.83192444 113.78508759]
[-137.22946167 101.25455475]
[-136.96447754 88.72051239]
[-136.03771973 76.21797943]
[-134.45178223 63.78186035]
[-132.21107483 51.44688797]
[-129.32188416 39.24750900]
[-125.79225159 27.21779823]
[-121.63204956 15.39134407]
[-116.85289764 3.80117893]
[-111.46813202 -7.52033043]
[-105.49279022 -18.54156685]
[-98.94357300 -29.23175049]
[-91.83876038 -39.56102371]
[-84.19820404 -49.50054550]
[-76.04322815 -59.02255630]
[-67.39661407 -68.10046387]
[-58.28250885 -76.70890808]
[-48.72636795 -84.82386017]
[-38.75487518 -92.42265320]
[-28.39587784 -99.48405457]
[-17.67831039 -105.98836517]
[-6.63209915 -111.91740417]
[4.71190405 -117.25461578]
[16.32201958 -121.98510742]
[28.16582489 -126.09564972]
[40.21024323 -129.57476807]
[52.42163467 -132.41276550]
[64.76589966 -134.60168457]
[77.20856476 -136.13543701]
[89.71487427 -137.00971985]
[102.24991608 -137.22210693]
[114.77867126 -136.77200317]
[127.26615143 -135.66065979]
[139.67749023 -133.89118958]
[151.97801208 -131.46852112]
[164.13337708 -128.39942932]
[176.10964966 -124.69248962]
[187.87335205 -120.35803986]
[199.39164734 -115.40819550]
[210.63238525 -109.85677338]
[221.56414795 -103.71928406]
[232.15641785 -97.01287079]
[242.37962341 -89.75624847]
[252.20520020 -81.96969604]
[262.18792725 -93.16545868]
[272.17065430 -104.36122894]
[272.69247437 -120.39579010]
[285.63973999 -129.86930847]
[301.08044434 -125.51450348]
[307.16976929 -110.67200470]
[299.23654175 -96.72772217]
[283.36642456 -94.37850189]
[273.38369751 -83.18273926]
[263.40097046 -71.98696899]
[281.41983032 -52.86017609]
[297.21279907 -31.85787773]
[310.58609009 -9.23776340]
[321.37561035 14.72263241]
[329.44897461 39.72933197]
[334.70715332 65.47550964]
[349.60906982 63.76282501]
[364.51095581 62.05013275]
[379.41287231 60.33744431]
[394.31475830 58.62475586]
[407.15829468 48.42790222]
[422.30932617 54.70313644]
[424.18176270 70.99503326]
[410.84942627 80.54389191]
[396.02746582 73.52665710]
[381.12554932 75.23934937]
[366.22366333 76.95203400]
[351.32174683 78.66472626]
[336.41986084 80.37741852]
[337.18615723 95.29777527]
[337.01181030 110.23678589]
[335.89746094 125.13519287]
[333.84753418 139.93391418]
[330.87017822 154.57426453]
[326.97717285 168.99816895]
[322.18399048 183.14842224]
[316.50964355 196.96891785]
[309.97659302 210.40483093]
[302.61077881 223.40287781]
[294.44140625 235.91149902]
[285.50085449 247.88110352]
[275.82464600 259.26419067]
[265.45108032 270.01565552]
[254.42137146 280.09283447]
[242.77920532 289.45578003]
[230.57077026 298.06732178]
[217.84449768 305.89334106]
[204.65086365 312.90277100]
[191.04217529 319.06784058]
[177.07240295 324.36407471]
[162.79698181 328.77047729]
[148.27249146 332.26959229]
[133.55656433 334.84750366]
[118.70753479 336.49401855]
[103.78432465 337.20260620]
[88.84609985 336.97042847]
[73.95211029 335.79843140]
[59.16143417 333.69125366]
[44.53271866 330.65725708]
[30.12398720 326.70846558]
[15.99238586 321.86056519]
[2.19395852 316.13275146]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 27]
[2 26]
[4 23]
[5 22]
[6 21]
[7 20]
[8 19]
[9 18]
[10 17]
[11 16]
[88 98]
[89 97]
[90 96]
[104 117]
[105 116]
[106 115]
[107 114]
[108 113]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
