%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:43 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCUGCGACUCCUUGACGUUGACAAUCGAGUAGUACUCCCGAUUGAAGCCCCCAUUCGUAUAxxxxxxxxxxCCAUGCUUACAAGCAAGUACAGCAAUCAACCCUCAACUAUCACACAUCAACUGCAACUCCCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[221.41650391 148.61242676]
[215.12559509 137.91659546]
[209.59216309 126.80971527]
[204.84294128 115.34535217]
[200.90086365 103.57878876]
[197.78497314 91.56679535]
[183.01892090 94.20565796]
[168.25285339 96.84452057]
[153.48680115 99.48338318]
[138.72074890 102.12224579]
[123.95468903 104.76111603]
[109.18863678 107.39997864]
[95.73267365 114.02847290]
[84.64135742 124.12712860]
[73.55004120 134.22576904]
[68.55498505 149.23777771]
[53.93508911 152.08520508]
[51.75108719 167.97889709]
[37.89007950 176.05677795]
[22.98504639 170.12216187]
[18.46985435 154.72760010]
[27.80817223 141.68246460]
[43.83644104 140.99388123]
[48.03816605 126.70420837]
[63.45138931 123.13446045]
[74.54270935 113.03581238]
[85.63401794 102.93716431]
[83.55507660 95.73105621]
[68.99471283 92.12608337]
[79.39719391 81.31884003]
[77.31824493 74.11273193]
[62.55219269 71.47386169]
[47.78613663 68.83499908]
[33.02008057 66.19613647]
[18.25402451 63.55727005]
[3.48796940 60.91840744]
[-11.32978916 58.58730316]
[-26.19283485 56.56496811]
[-41.05588150 54.54263306]
[-57.56558228 58.39830017]
[-65.84090424 43.60116196]
[-53.91288376 31.55298424]
[-39.03354645 39.67958832]
[-24.17050171 41.70192337]
[-9.30745411 43.72425842]
[-4.98570967 41.55675888]
[0.75069064 42.12685776]
[6.12683344 46.15235138]
[20.89288902 48.79121780]
[35.65894318 51.43008041]
[50.42499924 54.06894302]
[65.19105530 56.70780945]
[79.95710754 59.34667206]
[103.69652557 72.65748596]
[106.54977417 92.63391876]
[121.31582642 89.99505615]
[136.08187866 87.35619354]
[150.84794617 84.71733093]
[165.61399841 82.07846832]
[180.38005066 79.43959808]
[195.14610291 76.80073547]
[193.60607910 57.96851349]
[194.06338501 39.07968521]
[196.51278687 20.34548950]
[200.92671204 1.97541845]
[207.25567627 -15.82512188]
[215.42872620 -32.85711288]
[225.35433960 -48.93014145]
[236.92138672 -63.86454391]
[250.00038147 -77.49338531]
[264.44494629 -89.66436768]
[280.09344482 -100.24148560]
[296.77078247 -109.10658264]
[314.29037476 -116.16064453]
[332.45623779 -121.32492828]
[351.06518555 -124.54183197]
[369.90908813 -125.77552795]
[388.77716064 -125.01235962]
[407.45840454 -122.26103210]
[425.74395752 -117.55245972]
[443.42935181 -110.93944550]
[460.31683350 -102.49608612]
[476.21762085 -92.31695557]
[490.95397949 -80.51600647]
[501.39379883 -91.28681183]
[511.83358765 -102.05762482]
[522.27343750 -112.82843018]
[532.60064697 -123.70726013]
[542.81408691 -134.69291687]
[553.02758789 -145.67858887]
[552.20190430 -161.46128845]
[562.84002686 -173.14912415]
[578.63055420 -173.80790710]
[590.20532227 -163.04678345]
[590.69708252 -147.25015259]
[579.81420898 -135.78985596]
[564.01324463 -135.46510315]
[553.79974365 -124.47943878]
[543.58630371 -113.49377441]
[541.32061768 -106.40770721]
[533.04425049 -102.38861847]
[522.60443115 -91.61781311]
[512.16461182 -80.84700012]
[501.72479248 -70.07619476]
[509.94207764 -60.79143906]
[517.49523926 -50.95854568]
[524.34777832 -40.62492371]
[530.46661377 -29.84040642]
[535.82220459 -18.65699768]
[540.38873291 -7.12863159]
[544.14410400 4.68909311]
[547.07019043 16.73917961]
[549.15289307 28.96350861]
[550.38201904 41.30311966]
[550.75170898 53.69849014]
[550.26013184 66.08983612]
[548.90960693 78.41737366]
[546.70666504 90.62165070]
[543.66186523 102.64377594]
[539.78985596 114.42575836]
[535.10931396 125.91076660]
[529.64282227 137.04336548]
[523.41662598 147.76986694]
[516.46087646 158.03851318]
[508.80895996 167.79972839]
[500.49783325 177.00643921]
[491.56756592 185.61419678]
[482.06118774 193.58148193]
[472.02456665 200.86982727]
[461.50610352 207.44404602]
[450.55648804 213.27239990]
[439.22854614 218.32676697]
[427.57690430 222.58273315]
[415.65774536 226.01974487]
[403.52856445 228.62118530]
[391.24789429 230.37448120]
[378.87490845 231.27114868]
[366.46932983 231.30683899]
[354.09100342 230.48133850]
[341.79959106 228.79862976]
[329.65444946 226.26675415]
[317.71411133 222.89794922]
[306.03625488 218.70838928]
[294.67712402 213.71829224]
[283.69161987 207.95167542]
[273.13269043 201.43635559]
[263.05126953 194.20372009]
[253.49604797 186.28863525]
[244.51310730 177.72926331]
[236.14581299 168.56687927]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[6 61]
[7 60]
[8 59]
[9 58]
[10 57]
[11 56]
[12 55]
[13 27]
[14 26]
[15 25]
[17 23]
[31 53]
[32 52]
[33 51]
[34 50]
[35 49]
[36 48]
[37 45]
[38 44]
[39 43]
[84 104]
[85 103]
[86 102]
[87 101]
[88 99]
[89 98]
[90 97]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
