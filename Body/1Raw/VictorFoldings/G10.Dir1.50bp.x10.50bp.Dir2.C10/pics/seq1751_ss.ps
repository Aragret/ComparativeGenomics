%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:37 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCUAAAACCCCUACGCAUUUAUAUAGAGGAGACAAGUCGUAACAUGGUAAGUGUACUGGAAxxxxxxxxxxAAGAAAUAUGUCUGAUAAAAGAGUUACUUUGAUAGAGUAAAUAAUAGGAGCUUAAACCCCCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[110.85673523 543.95037842]
[110.85673523 528.95037842]
[110.85673523 513.95037842]
[110.85673523 498.95037842]
[110.85673523 483.95037842]
[110.85673523 468.95037842]
[110.85673523 453.95037842]
[110.85673523 438.95037842]
[110.85673523 423.95037842]
[110.85673523 408.95037842]
[94.24352264 404.06262207]
[79.90026093 394.32846069]
[69.20129395 380.66790771]
[63.17561722 364.37789917]
[62.40795135 347.00897217]
[66.98199463 330.21777344]
[76.47144318 315.60910034]
[89.97971344 304.58242798]
[106.22460938 298.19787598]
[104.97773743 283.24978638]
[103.73086548 268.30169678]
[102.48398590 253.35362244]
[91.55230713 246.46194458]
[86.52964020 234.34390259]
[89.46657562 221.35920715]
[99.50509644 212.32118225]
[98.56946564 197.35038757]
[97.63384247 182.37960815]
[96.69821167 167.40881348]
[95.76258087 152.43801880]
[94.82695770 137.46722412]
[83.94510651 134.24607849]
[74.50865173 127.94181061]
[67.36714935 119.12198639]
[63.16352081 108.58064270]
[62.27622604 97.26679993]
[64.78514099 86.19902039]
[70.46438599 76.37371826]
[78.80268097 68.67545319]
[73.02640533 54.83223343]
[67.25013733 40.98901749]
[61.47386169 27.14579964]
[55.69758987 13.30258179]
[46.93138123 1.13074505]
[35.63237762 -8.73497772]
[24.33337402 -18.60070038]
[19.89764214 -19.29768181]
[16.30374336 -21.20947075]
[13.83573151 -23.90961838]
[12.60497093 -26.92279053]
[12.54946232 -29.78709793]
[2.10965014 -40.55790710]
[-8.33016205 -51.32871628]
[-18.76997375 -62.09952545]
[-34.72408295 -63.78653717]
[-43.23052216 -77.38874054]
[-37.76388550 -92.47169495]
[-22.51770210 -97.46504211]
[-9.18754482 -88.53831482]
[-7.99916601 -72.53933716]
[2.44064641 -61.76852798]
[12.88045883 -50.99771881]
[23.32027054 -40.22690964]
[34.19909668 -29.89970589]
[45.49810028 -20.03398323]
[56.79710770 -10.16825962]
[52.24399185 -24.46053696]
[51.47159958 -39.44063568]
[54.53061676 -54.12540436]
[61.22028351 -67.55106354]
[71.10154724 -78.83648682]
[83.52588654 -87.24098969]
[97.67789459 -92.21298218]
[112.62875366 -93.42614746]
[127.39723206 -90.80087280]
[141.01405334 -84.50944519]
[152.58555603 -74.96478271]
[161.35226440 -62.79331207]
[166.73883057 -48.79384995]
[168.39170837 -33.88519669]
[166.20245361 -19.04581833]
[160.31472778 -5.24963617]
[151.11494446 6.59789371]
[139.20689392 15.71920967]
[125.37211609 21.51567078]
[110.51859283 23.60685158]
[95.62118530 21.85550499]
[81.65761566 16.37657356]
[69.54080963 7.52630949]
[75.31707764 21.36952782]
[81.09335327 35.21274567]
[86.86962128 49.05596161]
[92.64589691 62.89918137]
[114.56493378 65.09417725]
[131.54335022 79.12967682]
[145.44590759 73.49771881]
[155.33134460 61.14503860]
[170.03253174 63.53762817]
[183.93508911 57.90567017]
[197.83764648 52.27371216]
[211.74020386 46.64175797]
[219.29397583 32.48831177]
[235.09486389 29.71136284]
[247.02177429 40.44114685]
[245.92539978 56.44669342]
[232.64678955 65.44991302]
[217.37216187 60.54431152]
[203.46960449 66.17626953]
[189.56704712 71.80822754]
[175.66448975 77.44018555]
[166.77345276 89.39002991]
[151.07786560 87.40027618]
[137.17530823 93.03223419]
[137.15458679 107.07742310]
[132.01040649 120.14665985]
[122.45210266 130.43775940]
[109.79774475 136.53160095]
[110.73337555 151.50239563]
[111.66899872 166.47319031]
[112.60462952 181.44396973]
[113.54026031 196.41476440]
[114.47589111 211.38555908]
[127.79096222 222.68360901]
[128.82742310 239.77775574]
[117.43207550 252.10675049]
[118.67894745 267.05484009]
[119.92582703 282.00292969]
[121.17269897 296.95101929]
[133.82531738 299.07806396]
[145.66409302 304.00073242]
[156.08042908 311.46166992]
[164.53982544 321.07315063]
[170.60926819 332.33728027]
[173.97943115 344.67169189]
[174.48042297 357.43966675]
[172.09037781 369.98309326]
[166.93632507 381.65625000]
[159.28747559 391.85913086]
[149.54115295 400.06835938]
[138.20219421 405.86383057]
[125.85673523 408.95037842]
[125.85673523 423.95037842]
[125.85673523 438.95037842]
[125.85673523 453.95037842]
[125.85673523 468.95037842]
[125.85673523 483.95037842]
[125.85673523 498.95037842]
[125.85673523 513.95037842]
[125.85673523 528.95037842]
[125.85673523 543.95037842]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[19 128]
[20 127]
[21 126]
[22 125]
[26 122]
[27 121]
[28 120]
[29 119]
[30 118]
[31 117]
[39 93]
[40 92]
[41 91]
[42 90]
[43 89]
[44 66]
[45 65]
[46 64]
[51 63]
[52 62]
[53 61]
[54 60]
[95 113]
[96 112]
[98 110]
[99 109]
[100 108]
[101 107]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
