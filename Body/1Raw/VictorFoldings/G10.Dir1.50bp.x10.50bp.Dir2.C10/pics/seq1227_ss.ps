%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:01 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCCCCUCCCCAAUAAAGCUAAAACUCACCUGAGUUGUAAAAAACUCCAGUUGACACAAAAUxxxxxxxxxxAGACCUCCUAGGCGACCCAGACAAUUAUACCCUAGCCAACCCCUUAAACACCCCUCCCCACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[31.08427048 274.50521851]
[25.02125740 288.22528076]
[18.95824432 301.94534302]
[12.89523125 315.66540527]
[6.83221769 329.38543701]
[0.76920462 343.10549927]
[-5.29380846 356.82556152]
[-11.35682201 370.54559326]
[-12.22860622 387.47711182]
[-28.73976898 391.32650757]
[-37.00947189 376.52624512]
[-25.07687569 364.48260498]
[-19.01386261 350.76254272]
[-12.95084858 337.04248047]
[-6.88783598 323.32241821]
[-0.82482272 309.60238647]
[5.23819017 295.88232422]
[11.30120373 282.16226196]
[17.36421585 268.44223022]
[0.94783318 259.34277344]
[-14.47723293 248.64863586]
[-28.75660706 236.46681213]
[-41.74737930 222.91921997]
[-53.31953812 208.14144897]
[-63.35727310 192.28138733]
[-71.76011658 175.49778748]
[-78.44398499 157.95858765]
[-83.34197998 139.83934021]
[-86.40507507 121.32138062]
[-87.60262299 102.59003448]
[-86.92264557 83.83277130]
[-84.37193298 65.23730469]
[-79.97601318 46.98974991]
[-73.77890015 29.27272034]
[-87.43513489 23.06731224]
[-101.09137726 16.86190605]
[-116.85615540 18.19702148]
[-125.24239349 5.88766575]
[-138.89863586 -0.31774119]
[-152.55487061 -6.52314806]
[-166.27493286 -12.58616161]
[-180.05731201 -18.50612450]
[-193.83969116 -24.42608833]
[-207.62207031 -30.34605026]
[-222.20599365 -24.25633621]
[-236.79251099 -30.33984566]
[-242.72769165 -44.98734283]
[-236.49031067 -59.50872421]
[-221.78088379 -65.28871155]
[-207.32626343 -58.89814758]
[-201.70210266 -44.12843323]
[-187.91972351 -38.20846939]
[-174.13734436 -32.28850555]
[-160.35496521 -26.36854362]
[-152.91975403 -26.62013245]
[-146.34947205 -20.17938995]
[-132.69322205 -13.97398281]
[-119.03698730 -7.76857519]
[-104.24900055 -9.54754448]
[-94.88597107 3.20566416]
[-81.22972870 9.41107082]
[-67.57349396 15.61647797]
[-60.04530716 2.08701134]
[-51.42722321 -10.77567387]
[-41.77792740 -22.88398170]
[-31.16313171 -34.15545654]
[-19.65512085 -44.51334000]
[-7.33226633 -53.88709641]
[5.72151518 -62.21288681]
[19.41732788 -69.43402100]
[33.66190720 -75.50131226]
[48.35824203 -80.37345123]
[63.40625381 -84.01725769]
[78.70346832 -86.40791321]
[94.14571381 -87.52914429]
[109.62782288 -87.37331390]
[125.04437256 -85.94147491]
[140.29035950 -83.24339294]
[155.26197815 -79.29742432]
[169.85726929 -74.13045502]
[183.97683716 -67.77766418]
[197.52452087 -60.28231430]
[210.40806580 -51.69545364]
[222.53974915 -42.07555389]
[233.83692932 -31.48812866]
[244.22270203 -20.00527573]
[253.62631226 -7.70519257]
[261.98373413 5.32835722]
[275.22631836 -1.71677756]
[288.46890259 -8.76191235]
[301.71148682 -15.80704689]
[314.95410156 -22.85218239]
[312.30572510 -37.74652481]
[314.39160156 -52.72999191]
[321.00738525 -66.33465576]
[331.50485229 -77.22767639]
[344.85565186 -84.34185791]
[359.75177002 -86.98023224]
[374.73382568 -84.88430786]
[388.33407593 -78.25943756]
[399.22003174 -67.75464630]
[406.32528687 -54.39909363]
[408.95367432 -39.50121689]
[406.84771729 -24.52055740]
[400.21371460 -10.92477036]
[389.70166016 -0.04583054]
[376.34133911 7.05045366]
[361.44171143 9.66886044]
[346.46246338 7.55286551]
[332.87112427 0.90977234]
[321.99923706 -9.60959625]
[308.75662231 -2.56446171]
[295.51403809 4.48067331]
[282.27145386 11.52580833]
[269.02886963 18.57094383]
[273.94372559 29.67904854]
[278.12948608 41.08190155]
[281.56860352 52.73170471]
[284.24670410 64.57963562]
[286.15255737 76.57602692]
[287.27813721 88.67060089]
[287.61874390 100.81266022]
[287.17297363 112.95131683]
[285.94265747 125.03568268]
[283.93295288 137.01512146]
[281.15234375 148.83940125]
[277.61239624 160.45896912]
[273.32803345 171.82513428]
[268.31713867 182.89025879]
[262.60076904 193.60794067]
[256.20285034 203.93325806]
[249.15022278 213.82295227]
[241.47242737 223.23556519]
[233.20167542 232.13163757]
[224.37258911 240.47387695]
[215.02221680 248.22734070]
[205.18972778 255.35949707]
[194.91633606 261.84048462]
[184.24511719 267.64312744]
[173.22077942 272.74307251]
[161.88954163 277.11898804]
[150.29888916 280.75253296]
[138.49742126 283.62844849]
[126.53458405 285.73468018]
[114.46052551 287.06240845]
[102.32586670 287.60607910]
[90.18144989 287.36340332]
[78.07819366 286.33541870]
[66.06681824 284.52639771]
[54.19767761 281.94393921]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 19]
[2 18]
[3 17]
[4 16]
[5 15]
[6 14]
[7 13]
[8 12]
[34 62]
[35 61]
[36 60]
[38 58]
[39 57]
[40 56]
[41 54]
[42 53]
[43 52]
[44 51]
[88 115]
[89 114]
[90 113]
[91 112]
[92 111]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
