%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:08 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGUGUAGGACAUAAUAAUAACAAUUGAAUGUCUGCACAGCCACUUUCCACACAGACAUCAUAACxxxxxxxxxxUACUGCCAGCCACCAUGAAUAUUGUACGGUACCAUAAAUACUUGACCACCUGUAGUACAUAACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[87.27567291 249.54711914]
[89.85636139 230.33799744]
[90.16036987 215.34107971]
[90.46437073 200.34416199]
[90.76837921 185.34724426]
[91.07238007 170.35032654]
[91.37638092 155.35340881]
[91.68038940 140.35649109]
[91.98439026 125.35956573]
[92.28839874 110.36264801]
[79.80580902 102.04489899]
[66.08209229 108.09962463]
[52.35837936 114.15435028]
[41.86853409 129.25544739]
[24.52427673 126.75251770]
[10.92609406 133.08413696]
[-2.67208982 139.41575623]
[-16.27027321 145.74737549]
[-29.86845779 152.07899475]
[-43.46664047 158.41061401]
[-48.63260269 170.27095032]
[-60.13620758 175.25010681]
[-71.56230927 171.16812134]
[-85.28601837 177.22285461]
[-99.00973511 183.27757263]
[-112.73344421 189.33230591]
[-121.97544098 202.87916565]
[-138.30584717 201.37915039]
[-144.92533875 186.37533569]
[-135.02435303 173.30236816]
[-118.78816986 175.60858154]
[-105.06446075 169.55386353]
[-91.34074402 163.49913025]
[-77.61703491 157.44441223]
[-68.06917572 142.74996948]
[-49.79825974 144.81242371]
[-36.20007706 138.48080444]
[-22.60189247 132.14918518]
[-9.00370884 125.81757355]
[4.59447479 119.48595428]
[18.19265938 113.15433502]
[22.65265083 101.87042236]
[33.97876358 96.49974823]
[46.30365372 100.43063354]
[60.02736664 94.37590790]
[73.75108337 88.32118225]
[101.94400787 86.54143524]
[91.63487244 75.63848877]
[82.03799438 64.10364532]
[73.19203186 51.98335648]
[65.13259888 39.32641983]
[57.89214325 26.18380547]
[51.49982452 12.60843086]
[45.98138428 -1.34503949]
[41.35903931 -15.62041950]
[37.65140533 -30.16022491]
[34.87341309 -44.90591049]
[33.03624344 -59.79810333]
[32.14729691 -74.77683258]
[32.21015549 -89.78178406]
[33.22455978 -104.75254059]
[35.18643188 -119.62881470]
[38.08786774 -134.35070801]
[41.91718674 -148.85894775]
[46.65896606 -163.09509277]
[52.29411697 -177.00184631]
[58.79994202 -190.52317810]
[66.15025330 -203.60467529]
[74.31544495 -216.19364929]
[83.26264191 -228.23939514]
[92.95581818 -239.69343567]
[103.35594177 -250.50962830]
[114.42112732 -260.64440918]
[126.10683441 -270.05700684]
[138.36599731 -278.70950317]
[151.14924622 -286.56704712]
[164.40512085 -293.59799194]
[178.08024597 -299.77404785]
[192.11955261 -305.07031250]
[206.46649170 -309.46551514]
[221.06330872 -312.94192505]
[235.85122681 -315.48553467]
[250.77070618 -317.08609009]
[265.76165771 -317.73721313]
[280.76373291 -317.43618774]
[295.71649170 -316.18432617]
[310.55975342 -313.98657227]
[325.23373413 -310.85186768]
[339.67938232 -306.79275513]
[353.83847046 -301.82562256]
[367.65402222 -295.97045898]
[381.07040405 -289.25085449]
[394.03359985 -281.69384766]
[406.49139404 -273.32989502]
[418.39361572 -264.19262695]
[429.69238281 -254.31887817]
[440.34213257 -243.74839783]
[450.30004883 -232.52375793]
[459.52597046 -220.69012451]
[467.98278809 -208.29518127]
[475.63644409 -195.38882446]
[482.45611572 -182.02302551]
[488.41436768 -168.25161743]
[493.48715210 -154.13002014]
[497.65408325 -139.71513367]
[500.89837646 -125.06497192]
[503.20697021 -110.23854065]
[504.57055664 -95.29554749]
[504.98364258 -80.29615021]
[504.44458008 -65.30075073]
[502.95553589 -50.36973572]
[500.52249146 -35.56322098]
[497.15524292 -20.94083214]
[492.86740112 -6.56144476]
[487.67614746 7.51703739]
[481.60247803 21.23792458]
[474.67077637 34.54597092]
[466.90896606 47.38758469]
[458.34832764 59.71105576]
[449.02331543 71.46676636]
[438.97149658 82.60738373]
[428.23330688 93.08803558]
[416.85205078 102.86653137]
[404.87347412 111.90348816]
[392.34588623 120.16252136]
[379.31967163 127.61037445]
[365.84732056 134.21705627]
[351.98306274 139.95596313]
[337.78274536 144.80400085]
[323.30352783 148.74162292]
[308.60372925 151.75297546]
[293.74252319 153.82595825]
[278.77975464 154.95220947]
[263.77569580 155.12718201]
[248.79075623 154.35018921]
[233.88525391 152.62434387]
[219.11921692 149.95661926]
[204.55210876 146.35772705]
[190.24258423 141.84219360]
[176.24827576 136.42816162]
[162.62551880 130.13746643]
[149.42915344 122.99542236]
[136.71235657 115.03079224]
[124.52629852 106.27564240]
[112.92007446 96.76522827]
[107.28531647 110.66664886]
[106.98130798 125.66356659]
[106.67730713 140.66049194]
[106.37330627 155.65740967]
[106.06929779 170.65432739]
[105.76529694 185.65124512]
[105.46128845 200.64816284]
[105.15728760 215.64508057]
[104.85327911 230.64199829]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 154]
[3 153]
[4 152]
[5 151]
[6 150]
[7 149]
[8 148]
[9 147]
[10 146]
[11 46]
[12 45]
[13 44]
[15 41]
[16 40]
[17 39]
[18 38]
[19 37]
[20 36]
[23 34]
[24 33]
[25 32]
[26 31]
[47 145]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
