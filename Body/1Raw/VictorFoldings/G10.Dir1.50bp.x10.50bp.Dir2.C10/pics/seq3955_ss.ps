%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:39 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCUGCCAUCAUGACCCUUGGCCAUAAUAUGAUUUAUCUCCACACUAGCAGAGACCAACCGAAxxxxxxxxxxAGCUUUUAUUCCAGUUCUAACCAAAAAAAUAAACCCUCGUUCCACAGAAGCUGCCAUCAAGCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[112.66132355 279.35140991]
[112.66132355 264.35140991]
[112.66132355 249.35139465]
[112.66132355 234.35139465]
[112.66132355 219.35139465]
[112.66132355 204.35139465]
[112.66132355 189.35139465]
[112.66132355 174.35139465]
[112.66132355 159.35139465]
[112.66132355 144.35139465]
[99.61460114 144.12997437]
[87.72616577 140.31300354]
[77.91847992 133.53065491]
[66.32942963 143.05400085]
[54.74038315 152.57733154]
[43.15133667 162.10067749]
[45.74207687 177.23948669]
[40.40126801 191.63987732]
[28.56556129 201.42822266]
[13.41870213 203.97149658]
[-0.96487969 198.58557129]
[-10.71607399 186.71925354]
[-13.21185780 171.56448364]
[-7.78087902 157.19786072]
[4.11595774 147.48391724]
[19.27846336 145.03564453]
[33.62799835 150.51162720]
[45.21704483 140.98828125]
[56.80609512 131.46495056]
[68.39514160 121.94161224]
[62.40684509 108.18878174]
[47.54024887 110.18484497]
[32.67364883 112.18090057]
[17.77997017 120.28118896]
[5.87326384 108.21193695]
[14.17473412 93.42945099]
[30.67759132 97.31430054]
[45.54418945 95.31824493]
[60.41078949 93.32218933]
[64.59012604 89.65509033]
[69.04116058 86.86078644]
[56.88782883 78.06894684]
[41.48197556 80.37057495]
[29.28201294 71.28126526]
[27.18270111 56.57995987]
[15.02936745 47.78811646]
[2.87603474 38.99627304]
[-9.27729797 30.20442963]
[-23.26251030 36.55339813]
[-38.54697418 35.04319000]
[-51.01924515 26.08004379]
[-57.32434845 12.07499981]
[-55.76623917 -3.20465493]
[-46.76404190 -15.64877033]
[-32.73929977 -21.90994263]
[-17.46460533 -20.30394554]
[-5.04876804 -11.26278591]
[1.16841161 2.78151035]
[-0.48545584 18.05109787]
[11.66787720 26.84293938]
[23.82121086 35.63478088]
[35.97454453 44.42662430]
[50.59445953 41.82017517]
[63.04491425 50.56322479]
[65.67967224 65.91561127]
[77.83300781 74.70745087]
[112.47780609 62.12498856]
[145.06465149 90.17490387]
[154.94036865 78.88462067]
[164.81607056 67.59434509]
[150.22004700 71.05211639]
[135.54417419 67.95067596]
[123.59512329 58.88315201]
[116.65805054 45.58364105]
[116.05962372 30.59558487]
[121.91429138 16.78533936]
[133.10238647 6.79401970]
[147.48426819 2.53239441]
[162.30950928 4.81546974]
[174.74287415 13.20662403]
[182.40657043 26.10110664]
[183.83497620 41.03293991]
[178.75418091 55.14767075]
[181.70359802 39.85261536]
[194.33093262 31.36703873]
[208.89425659 34.27311325]
[221.22554016 25.73265457]
[233.55682373 17.19219589]
[245.88810730 8.65173817]
[258.21939087 0.11127879]
[270.55068970 -8.42918015]
[266.41796875 -22.99624825]
[267.24160767 -38.11578369]
[272.93222046 -52.14773178]
[282.87255859 -63.57001495]
[295.98434448 -71.14362335]
[310.84533691 -74.04703522]
[325.84350586 -71.96530914]
[339.35195923 -65.12425232]
[349.90542603 -54.26593018]
[356.35913086 -40.56817627]
[358.01303101 -25.51681709]
[354.68768311 -10.74451447]
[346.74386597 2.14634371]
[335.04321289 11.75745392]
[320.85491943 17.04627609]
[305.71807861 17.43911552]
[291.27456665 12.89336109]
[279.09112549 3.90210366]
[266.75985718 12.44256306]
[254.42857361 20.98302078]
[242.09729004 29.52348137]
[229.76600647 38.06393814]
[217.43472290 46.60439682]
[215.03401184 61.25950623]
[202.64999390 70.09641266]
[187.29464722 67.47895050]
[176.10635376 77.47004700]
[166.23063660 88.76033020]
[156.35493469 100.05061340]
[159.41333008 114.73551178]
[172.97523499 121.14448547]
[186.53712463 127.55345917]
[202.82769775 125.66953278]
[212.38595581 138.99514771]
[205.37916565 153.82203674]
[189.01533508 154.89759827]
[180.12814331 141.11535645]
[166.56625366 134.70637512]
[153.00434875 128.29740906]
[146.66859436 132.31089783]
[155.49765015 144.43722534]
[164.32670593 156.56355286]
[173.15577698 168.68988037]
[185.28454590 177.51556396]
[184.80198669 192.50779724]
[172.13073730 200.53524780]
[158.36926270 194.56684875]
[155.57122803 179.82911682]
[148.37985229 166.66537476]
[141.18846130 153.50163269]
[133.99708557 140.33790588]
[127.66132355 144.35139465]
[127.66132355 159.35139465]
[127.66132355 174.35139465]
[127.66132355 189.35139465]
[127.66132355 204.35139465]
[127.66132355 219.35139465]
[127.66132355 234.35139465]
[127.66132355 249.35139465]
[127.66132355 264.35140991]
[127.66132355 279.35140991]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 152]
[2 151]
[3 150]
[4 149]
[5 148]
[6 147]
[7 146]
[8 145]
[9 144]
[10 143]
[13 30]
[14 29]
[15 28]
[16 27]
[31 39]
[32 38]
[33 37]
[41 66]
[42 65]
[45 62]
[46 61]
[47 60]
[48 59]
[68 120]
[69 119]
[70 118]
[83 117]
[86 114]
[87 113]
[88 112]
[89 111]
[90 110]
[91 109]
[121 130]
[122 129]
[123 128]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
