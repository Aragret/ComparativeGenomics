%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:20 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGUCUGAUAAAAGAGUUACUUUGAUAGAGUAAAUAAUAGGAGCUUAAACCCCCUUAUUUCUAxxxxxxxxxxUAUUCUUGCACGAAACGGGAUCAAACAACCCCCUAGGAAUCACCUCCCAUUCCGAUAAAACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[92.50000000 257.37567139]
[92.50000000 242.37568665]
[92.50000000 227.37568665]
[92.50000000 212.37568665]
[92.50000000 197.37568665]
[92.50000000 182.37568665]
[92.50000000 167.37568665]
[92.50000000 152.37568665]
[92.50000000 137.37568665]
[92.50000000 122.37567902]
[78.37519836 117.32692719]
[68.86683655 128.92826843]
[59.35847855 140.52960205]
[61.16701126 156.23007202]
[51.27861404 168.55870056]
[35.55990219 170.20114136]
[23.33650398 160.18295288]
[21.86034966 144.44775391]
[32.00720978 132.33096313]
[47.75713730 131.02124023]
[57.26549911 119.41990662]
[66.77385712 107.81856537]
[68.95069122 92.97735596]
[63.17441940 79.13414001]
[57.39814758 65.29092407]
[45.75342941 59.64695740]
[41.24542236 47.94666672]
[45.79279709 36.69372559]
[40.30576706 22.73333359]
[34.81873703 8.77294445]
[29.33170509 -5.18744564]
[23.84467316 -19.14783478]
[18.35764122 -33.10822678]
[-17.43571091 -56.59675980]
[-26.45324135 -68.58358765]
[-35.47077179 -80.57042694]
[-44.48830032 -92.55725861]
[-53.50582886 -104.54409027]
[-64.16745758 -115.09537506]
[-76.24744415 -123.98773193]
[-88.32743073 -132.88008118]
[-100.40742493 -141.77243042]
[-112.48741150 -150.66477966]
[-124.56739807 -159.55712891]
[-139.99180603 -157.38336182]
[-152.11596680 -166.57356262]
[-154.09326172 -181.29177856]
[-166.17324829 -190.18412781]
[-180.54707336 -184.58085632]
[-195.66392517 -187.66058350]
[-206.70004272 -198.44053650]
[-210.13386536 -213.48089600]
[-204.86964417 -227.98233032]
[-192.58720398 -237.31748962]
[-177.20581055 -238.50755310]
[-163.63362122 -231.17277527]
[-156.20144653 -217.65365601]
[-157.28089905 -202.26411438]
[-145.20091248 -193.37176514]
[-130.55987549 -195.85685730]
[-118.18237305 -187.01083374]
[-115.67504883 -171.63711548]
[-103.59506226 -162.74476624]
[-91.51506805 -153.85241699]
[-79.43508148 -144.96006775]
[-67.35509491 -136.06771851]
[-55.27510834 -127.17536926]
[-60.39063644 -141.27612305]
[-59.82742691 -156.26554871]
[-53.66817474 -169.94267273]
[-42.81727219 -180.29920959]
[-28.86801147 -185.81446838]
[-13.86862659 -185.67861938]
[-0.02154960 -179.91160583]
[10.63998699 -169.36022949]
[16.55049896 -155.57379150]
[16.84211922 -140.57661438]
[11.47202492 -126.57083130]
[1.22873449 -115.61296082]
[-12.38368130 -109.31199646]
[-27.36644554 -108.59313965]
[-41.51899719 -113.56161499]
[-32.50146866 -101.57478333]
[-23.48393822 -89.58795166]
[-14.46640778 -77.60112000]
[-5.44887781 -65.61428833]
[2.03651786 -65.14647675]
[17.00730896 -64.21084595]
[24.49270439 -63.74303055]
[28.54165459 -79.03736115]
[42.95547485 -82.79116821]
[53.39528656 -93.56197357]
[60.07752609 -109.14350128]
[76.89994812 -107.03580475]
[79.53153229 -90.28733826]
[64.16609192 -83.12216187]
[53.72628403 -72.35135651]
[50.42406082 -57.82742310]
[35.26351166 -53.30321884]
[32.31803131 -38.59525681]
[37.80506134 -24.63486671]
[43.29209518 -10.67447758]
[48.77912521 3.28591275]
[54.26615524 17.24630165]
[59.75318909 31.20669174]
[74.04340363 41.34521484]
[71.24136353 59.51465225]
[77.01763916 73.35787201]
[82.79390717 87.20108795]
[87.22651672 79.63246918]
[94.99387360 73.83582306]
[105.29286957 71.24710083]
[116.72385406 72.91373444]
[127.48088074 79.25741577]
[135.63154602 89.92840576]
[150.04376221 94.08628845]
[164.45597839 98.24417877]
[179.13865662 91.77899170]
[193.28038025 99.35471344]
[196.03280640 115.15988922]
[185.28454590 127.07014465]
[169.28071594 125.94895172]
[160.29809570 112.65639496]
[145.88587952 108.49850464]
[131.47366333 104.34062195]
[125.48024750 108.84938812]
[136.13476562 119.40785980]
[146.78927612 129.96633911]
[157.44378662 140.52481079]
[171.82493591 144.78892517]
[180.92175293 156.71569824]
[181.23133850 171.71249390]
[172.63447571 184.00453186]
[158.44155884 188.85852051]
[144.11784363 184.40531921]
[135.17892456 172.35975647]
[135.06756592 157.35812378]
[127.87618256 144.19439697]
[120.68479919 131.03065491]
[113.49341583 117.86691284]
[107.50000000 122.37567902]
[107.50000000 137.37568665]
[107.50000000 152.37568665]
[107.50000000 167.37568665]
[107.50000000 182.37568665]
[107.50000000 197.37568665]
[107.50000000 212.37568665]
[107.50000000 227.37568665]
[107.50000000 242.37568665]
[107.50000000 257.37567139]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[11 22]
[12 21]
[13 20]
[23 109]
[24 108]
[25 107]
[28 105]
[29 104]
[30 103]
[31 102]
[32 101]
[33 100]
[34 86]
[35 85]
[36 84]
[37 83]
[38 82]
[39 67]
[40 66]
[41 65]
[42 64]
[43 63]
[44 62]
[47 59]
[48 58]
[89 99]
[91 97]
[92 96]
[115 125]
[116 124]
[117 123]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
