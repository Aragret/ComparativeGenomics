%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:07 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGGCUCCGGGUCCAUCAUCCACAACCUUAACAAUGAACAAGAUAUUCGAAAAAUAGGAGGACUACxxxxxxxxxxCCACCAUCCUCCGUGAAAUCAAUAUCCCGCACAAGAGUGCUACUCUCCUCGCUCCGGGCCCAUCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[94.38725281 296.52011108]
[96.96297455 277.31033325]
[97.26310730 262.31332397]
[97.56324005 247.31634521]
[97.86337280 232.31935120]
[98.16350555 217.32234192]
[98.46363831 202.32534790]
[98.76377106 187.32835388]
[99.06390381 172.33135986]
[99.36403656 157.33436584]
[99.66416168 142.33735657]
[77.95118713 133.36943054]
[65.48174286 115.04129028]
[65.16950226 94.19943237]
[75.67653656 77.74653625]
[67.20313263 65.36908722]
[58.72973251 52.99162674]
[50.25632477 40.61417007]
[49.73477936 55.60510254]
[37.21187210 63.86202621]
[23.22796822 58.43520737]
[19.55312538 43.89231873]
[29.28048897 32.47388840]
[14.67589188 35.89525223]
[0.07129456 39.31661987]
[-14.53330231 42.73798752]
[-16.95929527 57.74408722]
[-24.94746017 70.67690277]
[-37.27965927 79.56427002]
[-52.07532120 83.05093384]
[-67.07821655 80.60520172]
[-80.00051117 72.60002899]
[-88.87165070 60.25615311]
[-92.33884430 45.45591736]
[-89.87338257 30.45625305]
[-81.85121918 17.54450035]
[-69.49568176 8.68960762]
[-54.69089890 5.24188137]
[-39.69448853 7.72707558]
[-26.79330063 15.76621532]
[-17.95466805 28.13339043]
[-3.35007215 24.71202469]
[11.25452518 21.29065704]
[25.85912132 17.86929131]
[11.08767033 15.26079941]
[3.05057788 2.59568429]
[6.98043060 -11.88037395]
[20.31867981 -18.74267006]
[34.38139725 -13.52347565]
[40.01299667 0.37878501]
[40.31312943 -14.61821175]
[40.61326218 -29.61520958]
[40.91339493 -44.61220551]
[41.21352768 -59.60920334]
[38.24349594 -68.30787659]
[41.67269516 -74.90245819]
[42.27283859 -89.89044952]
[28.52450943 -96.31377411]
[18.31035423 -107.48132324]
[13.16386700 -121.67030334]
[13.84001923 -136.70794678]
[20.20466614 -150.30412292]
[31.25973320 -160.40020752]
[45.29959869 -165.48069763]
[45.89974213 -180.46868896]
[46.49988556 -195.45668030]
[47.10003281 -210.44467163]
[47.70017624 -225.43266296]
[48.30031967 -240.42063904]
[33.98414993 -245.23976135]
[21.60637665 -253.89814758]
[12.17041492 -265.69387817]
[6.44119453 -279.67074585]
[4.88315725 -294.69567871]
[7.62260675 -309.55072021]
[14.43746758 -323.03161621]
[24.77528954 -334.04553223]
[37.79803085 -341.69958496]
[52.45000076 -345.37335205]
[67.54341888 -344.76898193]
[81.85474396 -339.93548584]
[94.22381592 -331.26467896]
[103.64791870 -319.45947266]
[109.36309814 -305.47686768]
[110.90603638 -290.45034790]
[108.15166473 -275.59808350]
[101.32326508 -262.12405396]
[90.97438812 -251.12052917]
[77.94396210 -243.47953796]
[63.28830719 -239.82049561]
[62.68816376 -224.83251953]
[62.08802032 -209.84452820]
[61.48787689 -194.85653687]
[60.88773346 -179.86854553]
[60.28759003 -164.88055420]
[73.87629700 -158.69377136]
[84.08872986 -147.74609375]
[89.34591675 -133.68455505]
[88.81757355 -118.64100647]
[82.55307770 -104.90893555]
[71.47872162 -94.59381866]
[57.26082993 -89.29030609]
[56.66068268 -74.30231476]
[56.21052551 -59.30907059]
[55.91039276 -44.31207275]
[55.61026001 -29.31507683]
[55.31012726 -14.31807995]
[55.00999451 0.67891717]
[62.63378143 32.14076614]
[71.10718536 44.51822281]
[79.58058929 56.89567947]
[88.05399323 69.27313232]
[102.15735626 65.22521973]
[117.43197632 67.68617249]
[130.87617493 76.85128784]
[139.57063293 91.54219055]
[141.29794312 109.32979584]
[155.96807861 112.45825195]
[170.63819885 115.58671570]
[185.30833435 118.71517944]
[199.97846985 121.84363556]
[216.73031616 119.23374176]
[223.87559509 134.60842896]
[211.07975769 145.73062134]
[196.85000610 136.51376343]
[182.17987061 133.38529968]
[167.50973511 130.25685120]
[152.83961487 127.12838745]
[138.16947937 123.99992371]
[132.29240417 128.65931702]
[143.66679382 138.43803406]
[155.04116821 148.21675110]
[166.41555786 157.99546814]
[177.78994751 167.77418518]
[191.42854309 174.01828003]
[199.37136841 186.74272156]
[198.99072266 201.73789978]
[190.41252136 214.04295349]
[176.47468567 219.58703613]
[161.78826904 216.53598022]
[151.21194458 205.89918518]
[148.24444580 191.19807434]
[141.31790161 177.89308167]
[134.39134216 164.58808899]
[127.46479034 151.28309631]
[120.53823853 137.97810364]
[114.66116333 142.63749695]
[114.36103058 157.63449097]
[114.06089783 172.63148499]
[113.76076508 187.62847900]
[113.46063232 202.62548828]
[113.16049957 217.62248230]
[112.86036682 232.61947632]
[112.56023407 247.61647034]
[112.26010132 262.61346436]
[111.95997620 277.61047363]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 156]
[3 155]
[4 154]
[5 153]
[6 152]
[7 151]
[8 150]
[9 149]
[10 148]
[11 147]
[15 112]
[16 111]
[17 110]
[18 109]
[23 44]
[24 43]
[25 42]
[26 41]
[50 108]
[51 107]
[52 106]
[53 105]
[54 104]
[56 103]
[57 102]
[64 95]
[65 94]
[66 93]
[67 92]
[68 91]
[69 90]
[117 129]
[118 128]
[119 127]
[120 126]
[121 125]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
