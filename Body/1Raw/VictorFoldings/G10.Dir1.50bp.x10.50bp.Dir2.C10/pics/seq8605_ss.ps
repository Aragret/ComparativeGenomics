%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:03 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGAGCCUACUCAUUCAACCAAUAGCCCUGGCCGUACGCCUAACCGCUAACAUUACUGCAGGCxxxxxxxxxxCUAUCCGCCAUCCCAUACAUUGGGACAGACCUAGUUCAAUGAAUCUGAGGAGGCUACUCACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[113.10248566 452.67062378]
[113.10248566 437.67062378]
[113.10248566 422.67062378]
[113.10248566 407.67062378]
[113.10248566 392.67062378]
[113.10248566 377.67062378]
[113.10248566 362.67062378]
[113.10248566 347.67062378]
[113.10248566 332.67062378]
[113.10248566 317.67062378]
[95.73639679 311.37265015]
[82.03411865 298.93521118]
[74.06102753 282.19989014]
[73.03149414 263.65856934]
[79.12397003 246.08229065]
[91.45065308 232.10726929]
[108.18675995 223.83940125]
[106.62917328 208.92048645]
[105.07159424 194.00157166]
[103.51401520 179.08267212]
[101.64640045 164.19938660]
[99.46956635 149.35818481]
[97.29272461 134.51696777]
[95.11589050 119.67576599]
[92.31784058 134.41249084]
[80.36015320 143.46862793]
[65.41660309 142.16848755]
[55.20258331 131.18331909]
[54.99161530 116.18480682]
[64.89261627 104.91670227]
[79.79566956 103.19727325]
[65.15216827 99.94644928]
[50.50866699 96.69561768]
[37.34961700 109.09128571]
[19.54537582 111.13857269]
[4.18671560 102.21040344]
[-2.72197795 86.01355743]
[-17.48803329 83.37469482]
[-32.25408936 80.73583221]
[-46.18605423 88.69069672]
[-61.03797531 82.62438965]
[-65.41672516 67.19046021]
[-55.96330261 54.22850037]
[-39.92956543 53.68181610]
[-29.61522484 65.96977234]
[-14.84916878 68.60864258]
[-0.08311374 71.24750519]
[7.37681675 61.57847977]
[18.31599998 55.98839569]
[30.66715431 55.60311890]
[42.06632614 60.55826950]
[50.30533981 69.96140289]
[53.75949478 82.05211639]
[68.40299225 85.30294800]
[83.04649353 88.55377197]
[96.50246429 81.92527008]
[102.84959412 68.33432007]
[109.19672394 54.74337006]
[99.59097290 41.32292557]
[98.05374908 24.98485756]
[104.90896606 10.17823410]
[118.20799255 0.88749236]
[134.28251648 -0.43967089]
[140.34553528 -14.15972424]
[146.40853882 -27.87977791]
[133.79112244 -31.33771133]
[123.29519653 -43.52172089]
[119.86401367 -62.64380646]
[121.73162842 -77.52708435]
[123.59924316 -92.41036987]
[110.10007477 -99.30589294]
[99.77568817 -110.40467072]
[93.87280273 -124.36647034]
[93.10422516 -139.50532532]
[97.56275177 -153.99316406]
[106.71000671 -166.08049011]
[119.44141388 -174.30770874]
[134.21958923 -177.68135071]
[149.25999451 -175.79402161]
[162.74642944 -168.87362671]
[173.05033875 -157.75584412]
[178.92749023 -143.78318787]
[179.66816711 -128.64294434]
[175.18293762 -114.16334534]
[166.01342773 -102.09289551]
[153.26689148 -93.88915253]
[138.48251343 -90.54275513]
[136.61491394 -75.65947723]
[134.74729919 -60.77619171]
[141.21632385 -56.98123932]
[160.62341309 -45.59637833]
[172.70339966 -54.48872757]
[184.78338623 -63.38107681]
[196.86337280 -72.27342224]
[208.94335938 -81.16577911]
[212.76594543 -96.74677277]
[227.39080811 -103.34166718]
[241.59902954 -95.89141846]
[244.49125671 -80.11122894]
[233.84883118 -68.10630035]
[217.83570862 -69.08578491]
[205.75572205 -60.19343948]
[193.67573547 -51.30108643]
[181.59574890 -42.40873718]
[169.51576233 -33.51638794]
[160.12860107 -21.81676483]
[154.06558228 -8.09671116]
[148.00256348 5.62334204]
[156.78724670 16.12518692]
[160.19305420 29.45483971]
[157.49690247 43.01354218]
[149.17115784 54.13230896]
[136.80204773 60.59729767]
[122.78767395 61.09049988]
[116.44054413 74.68144989]
[110.09341431 88.27239990]
[115.44044495 93.80165863]
[117.72012329 101.71822357]
[115.91738892 110.31673431]
[109.95709991 117.49893188]
[112.13393402 132.34013367]
[114.31076813 147.18133545]
[116.48760986 162.02255249]
[120.34339142 167.52168274]
[120.73421478 173.27307129]
[118.43292999 177.52508545]
[119.99050903 192.44400024]
[121.54808807 207.36291504]
[123.10566711 222.28181458]
[134.68942261 224.36712646]
[145.41380310 229.18788147]
[154.64410400 236.45242310]
[161.83558655 245.72473145]
[166.56559753 256.45043945]
[168.55842590 267.99011230]
[167.70133972 279.65725708]
[164.05102539 290.75924683]
[157.82975769 300.63833618]
[149.41200256 308.71078491]
[139.30175781 314.50122070]
[128.10249329 317.67062378]
[128.10249329 332.67062378]
[128.10249329 347.67062378]
[128.10249329 362.67062378]
[128.10249329 377.67062378]
[128.10249329 392.67062378]
[128.10249329 407.67062378]
[128.10249329 422.67062378]
[128.10249329 437.67062378]
[128.10249329 452.67062378]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[17 129]
[18 128]
[19 127]
[20 126]
[21 123]
[22 122]
[23 121]
[24 120]
[31 55]
[32 54]
[33 53]
[37 47]
[38 46]
[39 45]
[56 116]
[57 115]
[58 114]
[63 108]
[64 107]
[65 106]
[68 89]
[69 88]
[70 87]
[91 105]
[92 104]
[93 103]
[94 102]
[95 101]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
