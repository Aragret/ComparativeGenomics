%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:47 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCCCAUCCUAAAGUAAGGUCAGCUAAAUAAGCUAUCGGGCCCAUACCCCGAAAAUGUUGGUxxxxxxxxxxCAACCCAAAAAGGCAUAAUUAAACUUUACUUCCUCUCUUUCUUCUUCCCACUCAUCCUAACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[147.76487732 520.04730225]
[147.76487732 505.04727173]
[147.76487732 490.04727173]
[147.76487732 475.04727173]
[147.76487732 460.04727173]
[147.76487732 445.04727173]
[147.76487732 430.04727173]
[147.76487732 415.04727173]
[147.76487732 400.04727173]
[147.76487732 385.04727173]
[128.07881165 379.90081787]
[110.75036621 369.20980835]
[97.30196381 353.90420532]
[88.91785431 335.31997681]
[86.33980560 315.08218384]
[89.80149841 294.96307373]
[99.00737000 276.72677612]
[113.15782166 261.97470093]
[131.01867676 252.00483704]
[127.31250763 237.46989441]
[123.60635376 222.93496704]
[119.90019226 208.40002441]
[107.00120544 201.04124451]
[103.03557587 186.35354614]
[110.84160614 172.87379456]
[107.13544464 158.33885193]
[103.42928314 143.80392456]
[83.29276276 140.63757324]
[66.75209808 128.72491455]
[57.36727524 110.62987518]
[42.40702438 111.72118378]
[27.44677544 112.81249237]
[12.48652744 113.90380096]
[0.95197874 125.05430603]
[-14.93831444 122.84565735]
[-22.99467850 108.97213745]
[-17.03696060 94.07632446]
[-1.63541222 89.58501434]
[11.39521694 98.94355774]
[26.35546494 97.85224915]
[41.31571579 96.76093292]
[56.27596283 95.66962433]
[57.53954697 88.70162201]
[59.90612411 82.02711487]
[47.46668243 73.64497375]
[35.02724075 65.26283264]
[22.58780098 56.88068771]
[10.14836121 48.49854279]
[-4.83049583 52.98940659]
[-19.17110252 46.75393677]
[-26.10226059 32.73633957]
[-22.35128975 17.55529213]
[-9.68928432 8.37881947]
[5.90514374 9.53977299]
[17.06878281 20.48998642]
[18.53050423 36.05910110]
[30.96994591 44.44124603]
[43.40938568 52.82339096]
[55.84882736 61.20553207]
[68.28826904 69.58767700]
[72.45414734 64.74794006]
[77.36218262 60.48760605]
[82.93032837 56.92071915]
[89.05902863 54.14947128]
[95.63294220 52.26151657]
[102.52311707 51.32756805]
[103.45874786 36.35677719]
[104.39437866 21.38598442]
[105.33000183 6.41519356]
[91.53446198 0.08689495]
[80.95935059 -10.80031872]
[75.03486633 -24.77404213]
[74.56224823 -39.94444275]
[79.60541534 -54.25984955]
[89.48232269 -65.78422546]
[102.85720062 -72.95898438]
[117.92120361 -74.81380463]
[132.63703918 -71.09783173]
[145.01452637 -62.31362915]
[153.37971497 -49.64918518]
[156.60125732 -34.81725693]
[154.24349976 -19.82374573]
[146.62527466 -6.69640017]
[134.77691650 2.78941560]
[120.30079651 7.35082197]
[119.36516571 22.32161331]
[118.42954254 37.29240417]
[117.49391174 52.26319504]
[130.66249084 59.44570541]
[142.74247742 50.55335617]
[154.82246399 41.66100693]
[166.90246582 32.76865768]
[164.53346252 17.64759636]
[169.47390747 3.16137528]
[180.58850098 -7.36118078]
[195.32321167 -11.50206470]
[210.29209900 -8.30973148]
[222.05543518 1.48224330]
[227.91006470 15.62373638]
[226.51066589 30.86513519]
[218.17878723 43.70407867]
[204.82905579 51.19027328]
[189.52911377 51.60344315]
[175.79481506 44.84864426]
[163.71481323 53.74099350]
[151.63482666 62.63334274]
[139.55484009 71.52569580]
[146.05667114 87.29162598]
[146.64692688 103.99698639]
[141.48640442 119.54032135]
[131.44482422 132.04756165]
[117.96421814 140.09776306]
[121.67037964 154.63269043]
[125.37654114 169.16763306]
[138.68406677 177.26377869]
[142.23558044 192.05706787]
[134.43511963 204.69386292]
[138.14128113 219.22880554]
[141.84744263 233.76373291]
[145.55360413 248.29867554]
[155.96644592 247.63612366]
[166.35743713 248.54830933]
[176.48986816 251.01356506]
[186.13304138 254.97485352]
[195.06752014 260.34109497]
[203.09016418 266.98919678]
[210.01869202 274.76702881]
[215.69587708 283.49673462]
[219.99307251 292.97888184]
[222.81317139 302.99700928]
[224.09272766 313.32257080]
[223.80348206 323.72018433]
[221.95289612 333.95288086]
[218.58403015 343.78762817]
[213.77447510 353.00061035]
[207.63461304 361.38226318]
[200.30509949 368.74209595]
[191.95358276 374.91299438]
[182.77091980 379.75506592]
[172.96678162 383.15875244]
[162.76487732 385.04727173]
[162.76487732 400.04727173]
[162.76487732 415.04727173]
[162.76487732 430.04727173]
[162.76487732 445.04727173]
[162.76487732 460.04727173]
[162.76487732 475.04727173]
[162.76487732 490.04727173]
[162.76487732 505.04727173]
[162.76487732 520.04730225]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[19 120]
[20 119]
[21 118]
[22 117]
[25 114]
[26 113]
[27 112]
[30 42]
[31 41]
[32 40]
[33 39]
[44 60]
[45 59]
[46 58]
[47 57]
[48 56]
[66 88]
[67 87]
[68 86]
[69 85]
[89 107]
[90 106]
[91 105]
[92 104]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
