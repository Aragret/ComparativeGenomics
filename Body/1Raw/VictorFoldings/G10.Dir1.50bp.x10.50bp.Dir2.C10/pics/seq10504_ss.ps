%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:33 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCUAUCCCCCAUUCUCCUCCUAUCCCUCAACCCCGACAUCAUUACCGGGUUUUCCUCUUGUAxxxxxxxxxxUCCCGUGAGGCCAAAUAUCAUUCUGAGGGGCCACAGUAAUUACAAACUUACUAUCCGCCAUCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[150.27751160 368.64553833]
[149.66168213 353.65820312]
[149.04586792 338.67083740]
[148.43003845 323.68347168]
[147.81420898 308.69613647]
[147.19839478 293.70877075]
[146.58256531 278.72143555]
[145.96673584 263.73406982]
[140.98141479 249.58676147]
[132.06526184 237.52432251]
[123.14910889 225.46189880]
[124.56924438 240.39451599]
[121.98233795 255.16976929]
[115.57328796 268.73162842]
[105.80014801 280.11080933]
[93.36143494 288.49401855]
[79.14614868 293.28210449]
[64.17029572 294.13284302]
[49.50421524 290.98544312]
[36.19612122 284.06484985]
[25.19716835 273.86569214]
[17.29346466 261.11691284]
[13.04990387 246.72967529]
[12.76978016 231.73229980]
[16.47311592 217.19664001]
[23.89522552 204.16160583]
[34.50563812 193.55880737]
[47.54601288 186.14607239]
[62.08432770 182.45318604]
[77.08150482 182.74409485]
[91.46567535 186.99800110]
[104.20877075 194.91085815]
[114.39747620 205.91351318]
[111.33908081 191.22862244]
[108.28067780 176.54371643]
[105.22228241 161.85882568]
[102.16388702 147.17391968]
[99.10549164 132.48902893]
[77.75620270 126.24552155]
[64.36253357 106.93543243]
[66.16815186 82.24363708]
[52.74070358 75.55755615]
[39.31325531 68.87148285]
[25.88580704 62.18540955]
[13.12709236 70.73589325]
[-2.19858336 71.74546051]
[-15.96869183 64.94254303]
[-24.47914124 52.15708923]
[-25.44066620 36.82832336]
[-18.59461784 23.07960701]
[-5.78255177 14.60927486]
[9.54915237 13.69580364]
[23.27634239 20.58491325]
[31.70647240 33.42346573]
[32.57188034 48.75795746]
[45.99933243 55.44403458]
[59.42678070 62.13010788]
[72.85423279 68.81618500]
[85.76692963 61.18321609]
[86.38275146 46.19586182]
[86.99858093 31.20850754]
[78.06849670 15.13728428]
[87.95820618 0.67221934]
[88.26618195 -14.32461834]
[88.57416534 -29.32145691]
[88.88214111 -44.31829453]
[74.42870331 -48.67728424]
[61.68790054 -56.77508926]
[51.60518265 -68.01081085]
[44.92874908 -81.55066681]
[42.15404510 -96.38993073]
[43.48696136 -111.42741394]
[48.82859802 -125.54724121]
[57.78256226 -137.70162964]
[69.68441010 -146.98863220]
[83.65094757 -152.71910095]
[98.64576721 -154.46780396]
[113.55615234 -152.10496521]
[127.27565765 -145.80592346]
[138.78619385 -136.03811646]
[147.23361206 -123.52637482]
[151.99104309 -109.19915009]
[152.70547485 -94.11962128]
[149.32388306 -79.40679169]
[142.09719849 -66.15245056]
[131.56170654 -55.34014893]
[118.49918365 -47.77224350]
[103.87897491 -44.01031876]
[103.57099915 -29.01347923]
[103.26302338 -14.01664066]
[102.95504761 0.98019701]
[111.12010193 9.95761395]
[110.94888306 22.49324417]
[101.98593140 31.82433319]
[101.37010956 46.81168747]
[100.75428009 61.79904175]
[111.74564362 64.30873108]
[121.34645844 69.85195160]
[128.75921631 77.84064484]
[133.40635681 87.48992157]
[134.97448730 97.89437103]
[133.43348694 108.11273956]
[129.02960205 117.25302124]
[122.25400543 124.55030823]
[113.79039001 129.43063354]
[116.84878540 144.11552429]
[119.90718079 158.80043030]
[122.96557617 173.48532104]
[126.02397156 188.17022705]
[129.08236694 202.85511780]
[135.21154785 216.54574585]
[144.12770081 228.60816956]
[153.04383850 240.67060852]
[151.82781982 225.71997070]
[153.58981323 210.82382202]
[158.26036072 196.56948853]
[165.65530396 183.51902771]
[175.48306274 172.18698120]
[187.35614014 163.02018738]
[200.80638123 156.38006592]
[215.30345154 152.52845764]
[230.27574158 151.61721802]
[245.13291931 153.68228149]
[259.28915405 158.64221191]
[272.18627930 166.30145264]
[283.31579590 176.35798645]
[292.23883057 188.41531372]
[298.60360718 201.99801636]
[302.15911865 216.57054138]
[302.76519775 231.55828857]
[300.39794922 246.37031555]
[295.15069580 260.42257690]
[287.23031616 273.16104126]
[276.94915771 284.08337402]
[264.71258545 292.75897217]
[251.00305176 298.84576416]
[236.36112976 302.10369873]
[221.36415100 302.40435791]
[206.60342407 299.73587036]
[192.66094971 294.20349121]
[180.08647156 286.02529907]
[169.37580872 275.52380371]
[160.95408630 263.11825562]
[161.56991577 278.10559082]
[162.18574524 293.09295654]
[162.80155945 308.08032227]
[163.41738892 323.06765747]
[164.03321838 338.05502319]
[164.64904785 353.04235840]
[165.26486206 368.02972412]
[171.95639038 383.60726929]
[158.84001160 394.34957886]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 113]
[10 112]
[11 111]
[33 110]
[34 109]
[35 108]
[36 107]
[37 106]
[38 105]
[41 58]
[42 57]
[43 56]
[44 55]
[59 96]
[60 95]
[61 94]
[63 91]
[64 90]
[65 89]
[66 88]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
