%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:11 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGUUUUAUACUAAUAAUCUUAUAGAAAUUUAGGUUAAAUACAGACCAAGAGCCUUCAAAGCCxxxxxxxxxxUCAUUAAAUUAUGAUAAUCAUAUUUACCAAAUGCCCCUCAUUUACAUAAAUAUUAUACUACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[113.90950775 271.37612915]
[113.90950775 256.37612915]
[113.90950775 241.37614441]
[113.90950775 226.37614441]
[113.90950775 211.37614441]
[113.90950775 196.37614441]
[113.90950775 181.37614441]
[113.90950775 166.37614441]
[113.90950775 151.37614441]
[113.90950775 136.37614441]
[106.95822906 133.56016541]
[93.05567169 127.92819977]
[86.10439301 125.11222839]
[75.66458130 135.88302612]
[65.22476959 146.65383911]
[54.78495789 157.42465210]
[51.31517029 173.45251465]
[35.61921310 178.20320129]
[23.84374046 166.78959656]
[28.10235023 150.95304871]
[44.01414871 146.98483276]
[54.45396042 136.21403503]
[64.89377594 125.44322205]
[75.33358765 114.67240906]
[67.08129883 102.14645386]
[53.06458282 107.48796082]
[39.04787064 112.82947540]
[26.40013885 124.11978912]
[12.04981232 115.09180450]
[16.75241280 98.80310059]
[33.70635605 98.81275940]
[47.72307205 93.47125244]
[61.73978424 88.12973785]
[66.49359894 73.90296173]
[58.50368118 61.20802689]
[50.51376724 48.51309967]
[42.52384949 35.81816864]
[34.53393173 23.12323952]
[26.54401779 10.42831039]
[15.04221344 0.79978365]
[1.13965750 -4.83217287]
[-12.76289845 -10.46412945]
[-25.30664253 -1.48314714]
[-40.71572495 -0.73234636]
[-54.07316589 -8.45130539]
[-61.11665344 -22.17693138]
[-59.59863663 -37.52943039]
[-50.00350952 -49.60987091]
[-35.39303970 -54.56343079]
[-20.42937851 -50.80944824]
[-9.88737392 -39.54580307]
[-7.13094187 -24.36668587]
[6.77161407 -18.73472977]
[20.67416954 -13.10277271]
[11.93845940 -25.29651451]
[5.69872046 -38.93710327]
[2.18577576 -53.51994324]
[1.52957702 -68.50558472]
[3.75439811 -83.33966827]
[8.77793789 -97.47346497]
[16.41436577 -110.38411713]
[26.38119125 -121.59403992]
[38.30972290 -130.68855286]
[51.75869370 -137.33122253]
[66.23059845 -141.27633667]
[81.19009399 -142.37794495]
[96.08379364 -140.59530640]
[110.36074066 -135.99435425]
[123.49280548 -128.74530029]
[134.99420166 -119.11628723]
[144.43946838 -107.46352386]
[151.47920227 -94.21807098]
[155.85299683 -79.86989594]
[157.39904785 -64.94978333]
[156.06016541 -50.00965881]
[151.88586426 -35.60218811]
[145.03059387 -22.26033020]
[135.74790955 -10.47763443]
[124.38122559 -0.68996930]
[111.35100555 6.74059963]
[97.13926697 11.53919888]
[82.27173615 13.52831745]
[67.29840088 12.63437366]
[52.77314758 8.89043713]
[39.23894501 2.43839359]
[47.22886276 15.13332367]
[55.21878052 27.82825279]
[63.20869446 40.52318192]
[71.19860840 53.21811295]
[79.18852997 65.91304016]
[94.02973175 68.08988190]
[105.32873535 58.22415543]
[116.62774658 48.35843277]
[127.92675018 38.49271011]
[135.88107300 23.52056885]
[152.47007751 27.01933670]
[153.70033264 43.92858887]
[137.79246521 49.79171371]
[126.49346924 59.65743637]
[115.19445801 69.52316284]
[103.89545441 79.38888550]
[129.08666992 76.70085144]
[153.52984619 101.78164673]
[168.39289856 103.80397797]
[183.25595093 105.82631683]
[198.11898804 107.84864807]
[211.81170654 97.01135254]
[228.77656555 99.35176849]
[238.62785339 112.94625092]
[253.52975464 114.65894318]
[268.43167114 116.37162781]
[283.33355713 118.08432007]
[298.23547363 119.79701233]
[311.64413452 110.98862457]
[326.84552002 116.11672974]
[332.17843628 131.24748230]
[323.55191040 144.77384949]
[307.58349609 146.31958008]
[296.52276611 134.69891357]
[281.62088013 132.98622131]
[266.71896362 131.27352905]
[251.81707764 129.56083679]
[236.91517639 127.84815216]
[228.01106262 137.21371460]
[215.14266968 139.75903320]
[202.98748779 134.32952881]
[196.09664917 122.71169281]
[181.23361206 120.68936157]
[166.37055969 118.66702271]
[151.50752258 116.64469147]
[145.85801697 121.57755280]
[157.93200684 130.47804260]
[172.63671875 133.43968201]
[181.47827148 145.55691528]
[179.81182861 160.46405029]
[168.51284790 170.32981873]
[153.51713562 169.97129822]
[142.70251465 159.57687378]
[141.75039673 144.60700989]
[134.55900574 131.44328308]
[128.90950012 136.37614441]
[128.90950012 151.37614441]
[128.90950012 166.37614441]
[128.90950012 181.37614441]
[128.90950012 196.37614441]
[128.90950012 211.37614441]
[128.90950012 226.37614441]
[128.90950012 241.37614441]
[128.90950012 256.37612915]
[128.90950012 271.37612915]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[13 24]
[14 23]
[15 22]
[16 21]
[25 33]
[26 32]
[27 31]
[34 90]
[35 89]
[36 88]
[37 87]
[38 86]
[39 85]
[40 54]
[41 53]
[42 52]
[91 101]
[92 100]
[93 99]
[94 98]
[103 130]
[104 129]
[105 128]
[106 127]
[109 123]
[110 122]
[111 121]
[112 120]
[113 119]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
