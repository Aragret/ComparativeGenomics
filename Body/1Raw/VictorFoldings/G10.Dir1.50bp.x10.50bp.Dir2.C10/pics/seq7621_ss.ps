%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:34 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGAUACUAACAUCUCAGACGCUCAGGAAAUAGAAACCGUCUGAACUAUCCUGCCCGCCAUCAxxxxxxxxxxUAAAUUAUGAUAAUCAUAUUUACCAAAUGCCCCUCAUUUACAUAAAUAUUAUACUAGCAUCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[128.09866333 102.59727478]
[113.33260345 105.23613739]
[102.51992798 114.10054779]
[89.30625916 109.52992249]
[74.54020691 112.16878510]
[59.77415085 114.80764771]
[47.55038834 124.85205841]
[33.66043854 119.47447205]
[18.89438057 122.11333466]
[4.12832594 124.75219727]
[-10.63772964 127.39105988]
[-25.40378571 130.02992249]
[-40.16984177 132.66879272]
[-52.39360046 142.71321106]
[-66.28355408 137.33561707]
[-54.90256500 147.10664368]
[-53.57230759 162.04754639]
[-63.04803848 173.67555237]
[-77.94987488 175.38882446]
[-89.81723785 166.21463013]
[-91.91238403 151.36167908]
[-83.04447937 139.26196289]
[-98.02419281 140.04180908]
[-113.00390625 140.82165527]
[-127.98361969 141.60150146]
[-142.96333313 142.38134766]
[-157.94305420 143.16119385]
[-172.92276001 143.94102478]
[-177.33590698 158.44274902]
[-186.44528198 170.55865479]
[-199.15086365 178.82569885]
[-213.91839600 182.24559021]
[-228.96464539 180.40534973]
[-242.47268677 173.52722168]
[-252.81135559 162.44174194]
[-258.73220825 148.48756409]
[-259.52029419 133.34970093]
[-255.08041382 118.85614777]
[-245.94874573 106.75704193]
[-233.22793579 98.51343536]
[-218.45413208 95.12076569]
[-203.41130066 96.98872375]
[-189.91596985 103.89173889]
[-179.59774780 114.99624634]
[-173.70260620 128.96131897]
[-158.72290039 128.18147278]
[-143.74317932 127.40162659]
[-128.76345825 126.62178040]
[-113.78375244 125.84193420]
[-98.80403900 125.06209564]
[-83.82431793 124.28224945]
[-68.92241669 122.56955719]
[-57.75482559 112.71389771]
[-42.80870438 117.90273285]
[-28.04265022 115.26387024]
[-13.27659416 112.62500763]
[1.48946166 109.98614502]
[16.25551796 107.34728241]
[31.02157211 104.70841217]
[42.18916702 94.85275269]
[57.13528824 100.04159546]
[71.90134430 97.40272522]
[86.66739655 94.76386261]
[97.48007202 85.89945221]
[110.69374084 90.47007751]
[125.45979309 87.83121490]
[124.54954529 74.05853271]
[125.09796906 60.26746750]
[127.09877014 46.61206055]
[130.52946472 33.24483109]
[135.35154724 20.31506157]
[141.51100159 7.96712780]
[148.93890381 -3.66110659]
[157.55212402 -14.43983364]
[167.25433350 -24.24874687]
[177.93704224 -32.97838974]
[189.48078918 -40.53136444]
[201.75656128 -46.82344055]
[214.62715149 -51.78446960]
[227.94871521 -55.35918808]
[241.57243347 -57.50781250]
[255.34605408 -58.20650482]
[269.11572266 -57.44761658]
[282.72766113 -55.23978806]
[296.02981567 -51.60784149]
[308.87362671 -46.59249496]
[321.11569214 -40.24993134]
[332.61932373 -32.65114212]
[343.25613403 -23.88113785]
[352.90737915 -14.03801441]
[361.46533203 -3.23183775]
[368.83459473 8.41658211]
[374.93295288 20.77703857]
[379.69241333 33.71138382]
[383.05993652 47.07508469]
[384.99813843 60.71881485]
[399.99081421 60.25077057]
[414.98352051 59.78273010]
[429.97622681 59.31468582]
[444.96890259 58.84664536]
[459.96160889 58.37860107]
[474.95431519 57.91056061]
[486.66232300 44.95449829]
[503.78048706 44.45192337]
[515.74792480 56.22642517]
[530.72760010 55.44658279]
[545.70733643 54.66673660]
[560.68701172 53.88689041]
[575.66674805 53.10704803]
[587.43078613 42.19891739]
[603.27166748 44.73767090]
[611.03765869 58.77579117]
[604.77136230 73.54443359]
[589.27972412 77.71436310]
[576.44659424 68.08676147]
[561.46685791 68.86660767]
[546.48718262 69.64645386]
[531.50744629 70.42629242]
[516.52777100 71.20613861]
[509.29833984 81.91745758]
[497.02944946 86.55956268]
[484.14273071 83.21890259]
[475.42233276 72.90325928]
[460.42965698 73.37129974]
[445.43695068 73.83934021]
[430.44424438 74.30738068]
[415.45156860 74.77542877]
[400.45886230 75.24346924]
[385.46615601 75.71150970]
[384.02517700 91.96922302]
[380.56414795 107.92069244]
[375.13699341 123.31590271]
[367.82849121 137.91352844]
[358.75292969 151.48469543]
[348.05221558 163.81660461]
[335.89382935 174.71583557]
[322.46807861 184.01138306]
[307.98516846 191.55735779]
[292.67190552 197.23524475]
[276.76812744 200.95581055]
[260.52294922 202.66047668]
[244.19093323 202.32225037]
[228.02795410 199.94610596]
[212.28733826 195.56901550]
[197.21578979 189.25927734]
[183.04957581 181.11547852]
[170.01084900 171.26496887]
[158.30404663 159.86187744]
[148.11283875 147.08467102]
[139.59713745 133.13336182]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 66]
[2 65]
[4 63]
[5 62]
[6 61]
[8 59]
[9 58]
[10 57]
[11 56]
[12 55]
[13 54]
[15 52]
[22 51]
[23 50]
[24 49]
[25 48]
[26 47]
[27 46]
[28 45]
[96 129]
[97 128]
[98 127]
[99 126]
[100 125]
[101 124]
[102 123]
[105 119]
[106 118]
[107 117]
[108 116]
[109 115]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
