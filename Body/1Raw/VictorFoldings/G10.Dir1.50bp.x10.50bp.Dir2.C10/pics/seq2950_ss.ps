%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:45 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGUAUACUCAAUUGAUCCAAUAACUUGACCAACGGAACAAGUUACCCUAGGGAUAACAGCGCxxxxxxxxxxCAACCUCAACCUAGGCCUCCUAUUUAUUCUAGCCACCUCUAGCCUAGCCGUUUACUCAAUCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[92.50000000 252.28421021]
[92.50000000 237.28421021]
[92.50000000 222.28421021]
[92.50000000 207.28421021]
[92.50000000 192.28421021]
[92.50000000 177.28421021]
[92.50000000 162.28421021]
[92.50000000 147.28421021]
[92.50000000 132.28421021]
[92.50000000 117.28421021]
[88.76865387 131.81269836]
[78.04411316 142.30003357]
[63.43580627 145.70555115]
[49.17922974 141.04185486]
[39.40788651 129.66113281]
[36.95484161 114.86307526]
[42.53133011 100.93817902]
[54.52051926 91.92377472]
[69.44630432 90.43348694]
[82.97930908 96.89778137]
[71.47750092 87.26925659]
[59.97570038 77.64073181]
[48.47389603 68.01220703]
[34.94970703 61.52404022]
[20.24174309 58.57855606]
[5.53378248 55.63307571]
[-11.73168564 61.94841003]
[-24.47892380 49.92726898]
[-39.32012939 47.75043106]
[-54.22203064 46.03774261]
[-69.12393188 44.32505417]
[-84.02584076 42.61236191]
[-98.92774200 40.89967346]
[-113.82964325 39.18698502]
[-128.73153687 37.47429276]
[-145.41229248 45.20296478]
[-159.11466980 34.28304291]
[-174.04898071 32.88073730]
[-190.38400269 37.41984558]
[-199.26770020 22.97975731]
[-187.85119629 10.44581985]
[-172.64668274 17.94643021]
[-157.71237183 19.34873390]
[-148.16088867 11.86031914]
[-135.66947937 12.94844151]
[-127.01885223 22.57239151]
[-112.11695099 24.28508186]
[-97.21504974 25.99777222]
[-82.31314850 27.71046066]
[-67.41124725 29.42315102]
[-52.50934219 31.13583946]
[-37.60744095 32.84852982]
[-34.59709930 30.89780617]
[-30.47439575 30.34552765]
[-25.92461586 31.70636368]
[-21.84005928 35.16121292]
[-11.69915199 28.49268341]
[0.65856165 30.61538506]
[8.47926521 40.92511368]
[23.18722725 43.87059402]
[37.89518738 46.81607819]
[26.85395241 36.66269684]
[18.50667572 24.19983482]
[13.32047558 10.12491608]
[11.58557415 -4.77441692]
[13.39905930 -19.66438866]
[18.65944672 -33.71175003]
[27.07236099 -46.13039780]
[38.16701126 -56.22538376]
[51.32253647 -63.43178177]
[65.80274200 -67.34632111]
[80.79730988 -67.74993896]
[95.46714020 -64.62005615]
[108.99128723 -58.13180923]
[120.61294556 -48.64829254]
[129.68176270 -36.70021057]
[135.69021606 -22.95618057]
[138.30210876 -8.18532848]
[137.37124634 6.78575993]
[132.94973755 21.11929512]
[125.28500366 34.01316452]
[114.80596924 44.74581909]
[102.09905243 52.71665573]
[87.87533569 57.47961807]
[72.93077850 58.76816940]
[58.10242081 56.51039886]
[69.60422516 66.13892365]
[81.10602570 75.76745605]
[92.60783386 85.39598083]
[104.53762817 80.18643188]
[119.30392456 85.26544952]
[134.06997681 82.62658691]
[148.83602905 79.98771667]
[163.60209656 77.34885406]
[178.36814880 74.70999146]
[193.13420105 72.07112885]
[193.96810913 57.02449036]
[198.25012207 42.57592010]
[205.74929810 29.50461197]
[216.06121826 18.51548576]
[228.62979126 10.20117092]
[242.77719116 5.01004696]
[257.74047852 3.22206473]
[272.71267700 4.93364859]
[286.88641357 10.05249405]
[299.49725342 18.30254936]
[309.86511230 29.23889923]
[317.43090820 42.27175903]
[321.78662109 56.69828415]
[322.69732666 71.74047089]
[320.11392212 86.58711243]
[314.17572021 100.43754578]
[305.20297241 112.54483032]
[293.67956543 122.25605011]
[280.22692871 129.04748535]
[265.57055664 132.55287170]
[250.50086975 132.58317566]
[235.83052063 129.13676453]
[222.35067749 122.39950562]
[210.78829956 112.73471832]
[201.76692200 100.66362000]
[195.77307129 86.83718109]
[181.00700378 89.47604370]
[166.24095154 92.11491394]
[151.47489929 94.75377655]
[136.70884705 97.39263916]
[121.94278717 100.03150177]
[136.16636658 104.79490662]
[151.00434875 102.59624481]
[165.36956787 106.91369629]
[176.53689575 116.92822266]
[182.38786316 130.74003601]
[181.81250000 145.72900391]
[174.91998291 159.05165100]
[163.01780701 168.18064880]
[148.36389160 171.38418579]
[133.73811340 168.05455017]
[121.91502380 158.82336426]
[115.13751221 145.44184875]
[114.69138336 130.44795227]
[107.50000000 117.28421021]
[107.50000000 132.28421021]
[107.50000000 147.28421021]
[107.50000000 162.28421021]
[107.50000000 177.28421021]
[107.50000000 192.28421021]
[107.50000000 207.28421021]
[107.50000000 222.28421021]
[107.50000000 237.28421021]
[107.50000000 252.28421021]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[20 89]
[21 88]
[22 87]
[23 86]
[24 61]
[25 60]
[26 59]
[28 56]
[29 52]
[30 51]
[31 50]
[32 49]
[33 48]
[34 47]
[35 46]
[37 43]
[38 42]
[91 127]
[92 126]
[93 125]
[94 124]
[95 123]
[96 122]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
