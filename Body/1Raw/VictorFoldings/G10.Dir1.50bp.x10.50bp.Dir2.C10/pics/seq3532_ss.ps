%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:36 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGAUCACCGCCCCGACCUUAGCUCUCACCAUCGCUCUUCUACUAUGAACCCCCCUCCCCAUAxxxxxxxxxxAAUUACAAUAUAUACACCAACAAACAAUGUUCAACCAGUAACUACUACUAAUCAACGCCCCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[-48.09915924 130.89094543]
[-62.91691589 133.22204590]
[-77.73467255 135.55314636]
[-92.55242920 137.88426208]
[-107.34513855 140.36936951]
[-122.11119843 143.00823975]
[-136.87725830 145.64709473]
[-151.64331055 148.28596497]
[-166.40936279 150.92483521]
[-181.17541504 153.56369019]
[-193.39918518 163.60810852]
[-207.28913879 158.23051453]
[-222.05519104 160.86938477]
[-236.82124329 163.50823975]
[-237.53134155 176.52871704]
[-240.97332764 189.09883118]
[-246.98910522 200.65235901]
[-255.30468750 210.66947937]
[-265.54272461 218.70022583]
[-277.23956299 224.38465881]
[-289.86630249 227.46900940]
[-302.85266113 227.81701660]
[-315.61273193 225.41590881]
[-327.57153320 220.37690735]
[-338.19070435 212.93003845]
[-346.99298096 203.41358948]
[-353.58340454 192.25888062]
[-357.66726685 179.97055054]
[-372.60159302 181.37286377]
[-387.53588867 182.77516174]
[-393.86520386 196.76928711]
[-406.35293579 205.71086121]
[-421.63998413 207.19464111]
[-435.61419678 200.82150269]
[-444.51660156 188.30578613]
[-445.95245361 173.01416016]
[-439.53555298 159.05998230]
[-426.99197388 150.19686890]
[-411.69592285 148.80895996]
[-397.76193237 155.26957703]
[-388.93820190 167.84085083]
[-374.00387573 166.43855286]
[-359.06958008 165.03625488]
[-356.21636963 148.18238831]
[-348.79162598 132.77111816]
[-337.37237549 120.01668549]
[-322.85067749 110.92617798]
[-306.36398315 106.22007751]
[-289.20596313 106.27509308]
[-272.72506714 111.09405518]
[-258.21847534 120.30513000]
[-246.83003235 133.19046021]
[-239.46011353 148.74218750]
[-224.69404602 146.10333252]
[-209.92799377 143.46446228]
[-198.76040649 133.60879517]
[-183.81428528 138.79763794]
[-169.04823303 136.15876770]
[-154.28216553 133.51991272]
[-139.51611328 130.88104248]
[-124.75006104 128.24218750]
[-109.98400116 125.60331726]
[-103.91354370 121.30272675]
[-94.88353729 123.06649780]
[-80.06578064 120.73538971]
[-65.24802399 118.40428925]
[-50.43026352 116.07318878]
[-51.26408768 102.60511780]
[-50.89452362 89.11633301]
[-49.32450485 75.71412659]
[-46.56652451 62.50513458]
[-42.64252472 49.59443283]
[-37.58372116 37.08473587]
[-31.43036270 25.07556534]
[-24.23139954 13.66246128]
[-16.04410362 2.93622160]
[-6.93361235 -7.01781988]
[3.02759767 -16.12047386]
[13.76027870 -24.29932213]
[25.17904472 -31.48929977]
[37.19305420 -37.63320541]
[49.70672989 -42.68215942]
[62.62051773 -46.59599304]
[75.83168030 -49.34357452]
[89.23511505 -50.90304184]
[102.72418976 -51.26198959]
[116.19159698 -50.41756439]
[129.53018188 -48.37648010]
[142.63385010 -45.15497589]
[155.39833069 -40.77867889]
[167.72209167 -35.28240967]
[179.50708008 -28.70989037]
[190.65954590 -21.11341095]
[201.09075928 -12.55340576]
[210.71774292 -3.09797359]
[219.46391296 7.17766190]
[227.25965881 18.19175148]
[234.04299927 29.85667229]
[239.75994873 42.07962418]
[253.88475037 37.03086853]
[268.00955200 31.98211098]
[282.13433838 26.93335533]
[290.27035522 13.10638618]
[306.17306519 10.98913383]
[317.64331055 22.20577431]
[315.88211060 38.15185928]
[302.24044800 46.59491730]
[287.18310547 41.05815887]
[273.05831909 46.10691452]
[258.93350220 51.15567017]
[244.80870056 56.20442581]
[248.69409180 72.11312103]
[250.83718872 88.34857941]
[251.21286011 104.72056580]
[249.81671143 121.03723145]
[246.66510010 137.10740662]
[241.79496765 152.74276733]
[255.57734680 158.66273499]
[269.35974121 164.58268738]
[283.14212036 170.50265503]
[298.51550293 165.91587830]
[311.60394287 175.19340515]
[312.36709595 191.21829224]
[300.21954346 201.69763184]
[284.47982788 198.59257507]
[277.22213745 184.28503418]
[263.43975830 178.36508179]
[249.65737915 172.44511414]
[235.87500000 166.52514648]
[227.92431641 180.76496887]
[218.48696899 194.06619263]
[207.67265320 206.27423096]
[195.60702515 217.24720764]
[182.43031311 226.85762024]
[168.29563904 234.99377441]
[153.36727905 241.56109619]
[137.81871033 246.48329163]
[121.83064270 249.70315552]
[105.58887482 251.18325806]
[89.28215027 250.90638733]
[73.09999084 248.87579346]
[57.23043823 245.11503601]
[41.85792923 239.66786194]
[27.16111374 232.59753418]
[13.31078625 223.98625183]
[0.46790817 213.93408203]
[-11.21826935 202.55783081]
[-21.61193657 189.98971558]
[-30.59230232 176.37579346]
[-38.05500793 161.87428284]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 67]
[2 66]
[3 65]
[4 64]
[5 62]
[6 61]
[7 60]
[8 59]
[9 58]
[10 57]
[12 55]
[13 54]
[14 53]
[28 43]
[29 42]
[30 41]
[99 111]
[100 110]
[101 109]
[102 108]
[117 129]
[118 128]
[119 127]
[120 126]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
