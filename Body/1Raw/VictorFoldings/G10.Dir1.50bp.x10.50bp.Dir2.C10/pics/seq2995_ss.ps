%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:17 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGUCCUAUUCUAGAGUCCAUAUCAACAAUAGGGUUUACGACCUCGAUGUUGGAUCAGGACAUCCxxxxxxxxxxCAUCACCCGAUGAGGCAACCAGCCAGAACGCCUGAACGCAGGCACAUACUUCCUAUUCUACACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[176.92416382 369.32495117]
[176.92416382 354.32495117]
[176.92416382 339.32495117]
[176.92416382 324.32495117]
[176.92416382 309.32495117]
[176.92416382 294.32495117]
[176.92416382 279.32495117]
[176.92416382 264.32495117]
[176.92416382 249.32496643]
[176.92416382 234.32496643]
[163.70133972 229.90476990]
[153.52624512 221.25363159]
[147.58755493 209.94889832]
[146.36244202 197.82655334]
[149.59968567 186.68850708]
[156.41448975 178.03553772]
[148.09674072 165.55294800]
[139.77899170 153.07035828]
[131.46124268 140.58776855]
[85.63986969 134.63668823]
[76.54789734 102.95526123]
[62.19103622 98.61008453]
[47.79087830 94.41062164]
[33.34890366 90.35730743]
[18.90692902 86.30399323]
[4.46495390 82.25067902]
[-9.19793701 89.73152924]
[-23.78641129 85.41516113]
[-30.83406258 72.34358215]
[-45.27603531 68.29026794]
[-59.71801376 64.23695374]
[-74.20032501 60.33020020]
[-88.72148132 56.57041168]
[-103.24263763 52.81062317]
[-117.76379395 49.05083466]
[-128.56047058 59.88498688]
[-143.23358154 63.83424759]
[-157.81645203 59.93469620]
[-168.41850281 49.33034515]
[-172.26324463 34.93994904]
[-186.78440857 31.18016052]
[-201.30555725 27.42037201]
[-215.80480957 34.28707504]
[-230.14959717 27.10330772]
[-233.33584595 11.37984180]
[-222.91932678 -0.82162577]
[-206.89071655 -0.14117286]
[-197.54577637 12.89921474]
[-183.02461243 16.65900230]
[-168.50346375 20.41879082]
[-158.15814209 9.70245457]
[-143.74194336 5.57577705]
[-129.09901428 9.24330902]
[-118.18621826 19.81722260]
[-114.00400543 34.52967834]
[-99.48284912 38.28946686]
[-84.96169281 42.04925537]
[-70.44053650 45.80904388]
[-63.13396072 44.43295288]
[-55.66469574 49.79497528]
[-41.22272110 53.84829330]
[-26.78074646 57.90160751]
[-13.96070385 50.40613556]
[0.74325281 54.31104279]
[8.51826954 67.80870056]
[22.96024323 71.86202240]
[37.40221786 75.91533661]
[51.84419250 79.96865082]
[59.17715454 78.74092865]
[66.53620911 84.25322723]
[80.89307404 88.59840393]
[70.37693024 77.90210724]
[56.74426270 71.64508057]
[47.90315628 59.52754211]
[46.10533142 44.63566971]
[51.80867386 30.76224518]
[63.56061554 21.44066048]
[78.36807251 19.04500771]
[92.45977783 24.18542862]
[102.24673462 35.55272293]
[105.23633575 50.25178146]
[100.66758728 64.53826141]
[101.47864532 79.51631927]
[107.94773865 65.98299408]
[114.41683960 52.44967651]
[120.88593292 38.91635513]
[119.07431793 22.61757851]
[132.44221497 13.11855888]
[147.23788452 20.19107056]
[148.24079895 36.55952072]
[134.41925049 45.38545227]
[127.95015717 58.91877365]
[121.48106384 72.45209503]
[115.01196289 85.98541260]
[120.75186157 90.81278992]
[137.97157288 105.29490662]
[150.19555664 96.60156250]
[162.41952515 87.90821075]
[166.49673462 72.39189911]
[181.22764587 66.03737640]
[195.31195068 73.71927643]
[197.94538879 89.54471588]
[187.10781860 101.37377167]
[171.11288452 100.13219452]
[158.88890076 108.82553864]
[146.66491699 117.51889038]
[143.94383240 132.27001953]
[152.26158142 144.75260925]
[160.57933044 157.23519897]
[168.89707947 169.71778870]
[198.03070068 170.49263000]
[215.44859314 199.16323853]
[230.38624573 200.52944946]
[245.32389832 201.89566040]
[260.26156616 203.26188660]
[275.19921875 204.62809753]
[289.85424805 197.26860046]
[303.40469360 206.50531006]
[301.91104126 222.83630371]
[286.90982056 229.46163940]
[273.83297729 219.56575012]
[258.89532471 218.19953918]
[243.95768738 216.83331299]
[229.02003479 215.46710205]
[214.08238220 214.10089111]
[208.54283142 219.15690613]
[220.99685669 227.51736450]
[233.45088196 235.87782288]
[245.90489197 244.23828125]
[258.35891724 252.59873962]
[272.87719727 256.36968994]
[284.04089355 266.38824463]
[289.35504150 280.41534424]
[287.63192749 295.31607056]
[279.25665283 307.76013184]
[266.10107422 314.96643066]
[251.10533142 315.32434082]
[237.62091064 308.75393677]
[228.66146851 296.72363281]
[226.22924805 281.92388916]
[219.03787231 268.76016235]
[211.84648132 255.59642029]
[204.65510559 242.43267822]
[197.46371460 229.26895142]
[191.92416382 234.32496643]
[191.92416382 249.32496643]
[191.92416382 264.32495117]
[191.92416382 279.32495117]
[191.92416382 294.32495117]
[191.92416382 309.32495117]
[191.92416382 324.32495117]
[191.92416382 339.32495117]
[191.92416382 354.32495117]
[191.92416382 369.32495117]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 154]
[2 153]
[3 152]
[4 151]
[5 150]
[6 149]
[7 148]
[8 147]
[9 146]
[10 145]
[16 110]
[17 109]
[18 108]
[19 107]
[21 71]
[22 70]
[23 68]
[24 67]
[25 66]
[26 65]
[29 62]
[30 61]
[31 60]
[32 58]
[33 57]
[34 56]
[35 55]
[40 50]
[41 49]
[42 48]
[83 94]
[84 93]
[85 92]
[86 91]
[96 106]
[97 105]
[98 104]
[112 125]
[113 124]
[114 123]
[115 122]
[116 121]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
