%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:24 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGAAAUUCUAGGCUAUAUACAACUACGCAAAGGCCCCAACGUUGUAGGCCCCUACGGGCUACUACxxxxxxxxxxACUUUUUCAAAAAGGUAUUAGAAAAACCAUUUCAUAACUUUGUCAAAGUUAAAUUAUAGGCUACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[250.75106812 363.66143799]
[250.45094299 348.66445923]
[250.15080261 333.66744995]
[249.85067749 318.67044067]
[249.55053711 303.67346191]
[249.25041199 288.67645264]
[248.95027161 273.67947388]
[248.65014648 258.68246460]
[248.35000610 243.68547058]
[243.62919617 229.44770813]
[234.90983582 217.24226379]
[226.19047546 205.03683472]
[217.47109985 192.83139038]
[208.03518677 181.17105103]
[197.91671753 170.09782410]
[187.79823303 159.02459717]
[177.67976379 147.95137024]
[167.56127930 136.87812805]
[165.43737793 151.72700500]
[153.54771423 160.87226868]
[138.65097046 159.11528015]
[129.21522522 147.45480347]
[130.60423279 132.51924133]
[142.02842712 122.79875183]
[156.99316406 123.81868744]
[148.27378845 111.61325073]
[139.55442810 99.40781403]
[130.83506775 87.20237732]
[130.34591675 108.31478119]
[117.70300293 123.65212250]
[99.49419403 127.61798096]
[83.85597229 119.99870300]
[76.84984589 105.44028473]
[61.91061401 104.09142303]
[46.97138596 102.74256897]
[39.18346405 115.86929321]
[26.46656036 124.30986023]
[11.34563255 126.38838959]
[-3.17705250 121.69217682]
[-14.21800423 111.15367126]
[-19.58503342 96.86529541]
[-18.21251297 81.66400909]
[-10.37295628 68.56805420]
[2.37708449 60.17763138]
[17.50608063 58.15866470]
[32.01015854 62.91202927]
[43.00952530 73.49393463]
[48.32024765 87.80333710]
[63.25947571 89.15219879]
[78.19870758 90.50105286]
[80.11758423 79.46512604]
[87.65949249 68.97916412]
[77.99215698 57.50996399]
[68.32482147 46.04076385]
[58.65748215 34.57156372]
[43.84737396 29.00637245]
[41.56082916 14.28832340]
[31.89349174 2.81912184]
[16.09488297 0.02922457]
[8.55270863 -14.13040733]
[15.05267906 -28.79771614]
[30.60857391 -32.72119522]
[43.28723907 -22.89109230]
[43.36269379 -6.84821606]
[53.03002930 4.62098503]
[67.14866638 9.36582088]
[70.12667847 24.90422440]
[79.79402161 36.37342453]
[89.46135712 47.84262848]
[99.12869263 59.31182861]
[106.59118652 58.56269836]
[103.60592651 43.86275864]
[100.62066650 29.16281891]
[97.63541412 14.46288013]
[94.65015411 -0.23705985]
[89.86366272 -14.45287991]
[97.99554443 -27.05734444]
[112.92047882 -28.55617142]
[123.39628601 -17.82037544]
[121.53139496 -2.93555737]
[121.52758789 12.06444168]
[121.52378082 27.06444168]
[121.51998138 42.06444168]
[121.51617432 57.06444168]
[128.97866821 56.31531143]
[136.17338562 43.15339661]
[143.36811829 29.99148369]
[150.56283569 16.82956886]
[157.75755310 3.66765451]
[160.04933167 -13.13068104]
[176.82560730 -15.57870388]
[183.82209778 -0.13572904]
[170.91946411 10.86237621]
[163.72474670 24.02429008]
[156.53002930 37.18620300]
[149.33529663 50.34811783]
[142.14057922 63.51003265]
[143.04049683 78.48301697]
[151.75985718 90.68844604]
[160.47923279 102.89388275]
[169.19859314 115.09931946]
[178.63452148 126.75965881]
[188.75299072 137.83288574]
[198.87145996 148.90611267]
[208.98994446 159.97935486]
[219.10841370 171.05258179]
[221.23231506 156.20370483]
[233.12199402 147.05845642]
[248.01873779 148.81544495]
[257.45446777 160.47592163]
[256.06546021 175.41146851]
[244.64128113 185.13195801]
[229.67654419 184.11203003]
[238.39590454 196.31745911]
[247.11526489 208.52290344]
[255.83464050 220.72833252]
[263.68939209 212.55390930]
[276.68246460 208.66720581]
[292.44519043 211.51342773]
[306.63504028 216.37644958]
[320.82485962 221.23947144]
[335.01467896 226.10249329]
[349.20449829 230.96549988]
[363.39431763 235.82852173]
[380.33816528 235.24383545]
[385.59054565 251.36366272]
[371.55468750 260.87316895]
[358.53128052 250.01835632]
[344.34146118 245.15533447]
[330.15164185 240.29231262]
[315.96182251 235.42929077]
[301.77200317 230.56626892]
[287.58218384 225.70324707]
[281.52337646 230.12376404]
[291.64468384 241.19442749]
[301.76596069 252.26509094]
[311.88723755 263.33575439]
[325.14123535 270.35940552]
[329.19848633 284.80026245]
[321.54174805 297.69888306]
[306.92147827 301.05264282]
[294.40844727 292.78073120]
[291.76580811 278.01644897]
[284.31246948 264.99923706]
[276.85913086 251.98202515]
[269.40579224 238.96481323]
[263.34701538 243.38533020]
[263.64712524 258.38232422]
[263.94726562 273.37933350]
[264.24740601 288.37631226]
[264.54754639 303.37332153]
[264.84765625 318.37033081]
[265.14779663 333.36730957]
[265.44793701 348.36431885]
[265.74807739 363.36129761]
[268.32379150 382.57107544]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 155]
[2 154]
[3 153]
[4 152]
[5 151]
[6 150]
[7 149]
[8 148]
[9 147]
[10 116]
[11 115]
[12 114]
[13 113]
[14 106]
[15 105]
[16 104]
[17 103]
[18 102]
[25 101]
[26 100]
[27 99]
[28 98]
[33 50]
[34 49]
[35 48]
[52 70]
[53 69]
[54 68]
[55 67]
[57 65]
[58 64]
[85 97]
[86 96]
[87 95]
[88 94]
[89 93]
[119 133]
[120 132]
[121 131]
[122 130]
[123 129]
[124 128]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
