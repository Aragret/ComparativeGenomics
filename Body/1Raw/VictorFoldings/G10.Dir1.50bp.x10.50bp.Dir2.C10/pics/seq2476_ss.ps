%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:44 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGACCAAUCUAUCACCCUAUAGAAGAACUAAUGUUAGUAUAAGUAACAUGAAAACAUUCUCCxxxxxxxxxxCUAUCCUCUUCAACAAUAUACUCUCCGGACAAUGAACCAUAACCAAUACUACCAAUCAAUCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[144.08013916 295.38717651]
[143.76809692 280.39041138]
[143.45603943 265.39367676]
[143.14398193 250.39691162]
[142.83192444 235.40016174]
[142.51986694 220.40339661]
[142.20780945 205.40664673]
[141.89575195 190.40989685]
[141.58369446 175.41314697]
[136.68214417 161.23658752]
[122.84786224 155.71736145]
[120.73468018 140.03791809]
[111.71714783 128.05108643]
[99.32337189 135.63449097]
[82.82203674 137.09780884]
[65.40017700 130.49876404]
[52.96073914 138.88090515]
[40.52129745 147.26304626]
[28.08185768 155.64518738]
[15.64241695 164.02732849]
[12.86603069 179.58584595]
[-0.14629814 188.55551147]
[-15.67458439 185.61477661]
[-24.50617218 172.50834656]
[-21.40143585 157.01202393]
[-8.20236206 148.31948853]
[7.26027393 151.58789062]
[19.69971466 143.20574951]
[32.13915634 134.82360840]
[44.57859421 126.44146729]
[57.01803589 118.05931854]
[54.93909073 110.85321045]
[50.78120422 96.44099426]
[48.70225906 89.23488617]
[33.70956421 88.76684570]
[18.71686745 88.29880524]
[4.52951288 96.52382660]
[-9.55043793 88.11627197]
[-9.03873825 71.72510529]
[5.53821898 64.21216583]
[19.18490982 73.30610657]
[34.17760468 73.77415466]
[49.17030334 74.24219513]
[59.38378143 63.25652695]
[57.82620239 48.33761597]
[56.26861954 33.41870499]
[54.71104050 18.49979210]
[53.15345764 3.58087969]
[51.59587860 -11.33803272]
[40.43580627 -25.94736862]
[48.12659836 -41.69067383]
[46.25898743 -56.57395554]
[43.41207886 -60.04621506]
[42.00197220 -63.86494064]
[41.95687485 -67.52278900]
[43.04356766 -70.59085846]
[44.90837479 -72.76567841]
[44.28439713 -87.75269318]
[43.66042328 -102.73970795]
[43.03644562 -117.72672272]
[28.19071770 -120.23632050]
[14.19132423 -125.77804565]
[1.65025914 -134.10963440]
[-8.88423634 -144.86686707]
[-16.95164108 -157.57948303]
[-22.19927979 -171.69175720]
[-24.39775085 -186.58673096]
[-23.45094490 -201.61328125]
[-19.40025330 -216.11450195]
[-12.42275333 -229.45648193]
[-2.82347345 -241.05593872]
[8.97794819 -250.40580750]
[22.46560287 -257.09735107]
[37.04986954 -260.83807373]
[52.09318924 -261.46438599]
[66.93792725 -258.94894409]
[80.93514252 -253.40171814]
[93.47292328 -245.06520081]
[104.00318909 -234.30381775]
[112.06558990 -221.58802795]
[117.30767822 -207.47369385]
[119.50028992 -192.57785034]
[118.54756927 -177.55168152]
[114.49117279 -163.05204773]
[107.50843048 -149.71281433]
[97.90458679 -138.11714172]
[86.09948730 -128.77191162]
[72.60919952 -122.08566284]
[58.02346039 -118.35070038]
[58.64743805 -103.36368561]
[59.27141571 -88.37667084]
[59.89539337 -73.38965607]
[61.14226532 -58.44156647]
[63.00988007 -43.55828857]
[72.39033508 -35.85670471]
[74.03523254 -23.42636871]
[66.51479340 -12.89561367]
[68.07237244 2.02329874]
[69.62995148 16.94221115]
[71.18753052 31.86112404]
[72.74511719 46.78003693]
[74.30269623 61.69894791]
[98.99915314 57.03335190]
[120.62902069 65.92408752]
[132.89540100 83.75243378]
[133.34584045 103.64544678]
[123.70397949 119.03355408]
[132.72151184 131.02038574]
[147.20079041 137.39698792]
[148.66897583 152.21905518]
[147.45951843 137.26789856]
[149.13471985 122.36173248]
[153.63261414 108.05197906]
[160.78678894 94.86798096]
[170.33261108 83.29744720]
[181.91696167 73.76840210]
[195.11131287 66.63333893]
[209.42756653 62.15620041]
[224.33615112 60.50260544]
[239.28553772 61.73372269]
[253.72274780 65.80401611]
[267.11367798 72.56291199]
[278.96301270 81.76038361]
[288.83236694 93.05619812]
[296.35671997 106.03250122]
[301.25765991 120.20926666]
[303.35394287 135.06207275]
[302.56799316 150.04145813]
[298.92889404 164.59333801]
[292.57125854 178.17936707]
[283.73028564 190.29701233]
[272.73300171 200.49797058]
[259.98620605 208.40492249]
[245.96148682 213.72535706]
[231.17761230 216.26245117]
[216.18147278 215.92236328]
[201.52780151 212.71766663]
[187.75868225 206.76693726]
[175.38345337 198.29026794]
[164.85992432 187.60124207]
[156.58044434 175.10108948]
[156.89250183 190.09783936]
[157.20455933 205.09458923]
[157.51661682 220.09135437]
[157.82867432 235.08810425]
[158.14073181 250.08485413]
[158.45278931 265.08160400]
[158.76484680 280.07836914]
[159.07690430 295.07510376]
[161.66789246 314.28283691]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 149]
[2 148]
[3 147]
[4 146]
[5 145]
[6 144]
[7 143]
[8 142]
[9 141]
[10 110]
[12 108]
[13 107]
[16 31]
[17 30]
[18 29]
[19 28]
[20 27]
[34 43]
[35 42]
[36 41]
[44 102]
[45 101]
[46 100]
[47 99]
[48 98]
[49 97]
[51 94]
[52 93]
[57 92]
[58 91]
[59 90]
[60 89]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
